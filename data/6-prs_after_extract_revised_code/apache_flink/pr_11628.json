{"pr_number": 11628, "pr_title": "[FLINK-14504][rest] Add Cluster DataSet REST API", "pr_createdAt": "2020-04-03T10:43:09Z", "pr_url": "https://github.com/apache/flink/pull/11628", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NDcwMg==", "url": "https://github.com/apache/flink/pull/11628#discussion_r404884702", "bodyText": "Maybe add marshalling tests (see RestRequestMarshallingTestBase)", "author": "GJL", "createdAt": "2020-04-07T15:07:40Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.messages.dataset;\n+\n+import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n+\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The entry for a single cluster data set.\n+ *\n+ * @see ClusterDataSetListResponseBody\n+ */\n+class ClusterDataSetEntry {", "originalCommit": "44066c510cd12ae93baf839652b1bb2b43cc8cab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NTc2NQ==", "url": "https://github.com/apache/flink/pull/11628#discussion_r404885765", "bodyText": "Already done. Missed it.", "author": "GJL", "createdAt": "2020-04-07T15:09:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NDcwMg=="}], "type": "inlineReview", "revised_code": {"commit": "96ef850bcf5c2d7fd006dc17728fe4232aeddead", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java\ndeleted file mode 100644\nindex 1bc4c9089f..0000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.rest.messages.dataset;\n-\n-import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n-\n-import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n-import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/**\n- * The entry for a single cluster data set.\n- *\n- * @see ClusterDataSetListResponseBody\n- */\n-class ClusterDataSetEntry {\n-\tprivate static final String FIELD_NAME_DATA_SET_ID = \"id\";\n-\tprivate static final String FIELD_NAME_COMPLETE = \"isComplete\";\n-\n-\t@JsonProperty(FIELD_NAME_DATA_SET_ID)\n-\tprivate final String dataSetId;\n-\n-\t@JsonProperty(FIELD_NAME_COMPLETE)\n-\tprivate final boolean isComplete;\n-\n-\tClusterDataSetEntry(IntermediateDataSetID dataSetId, boolean isComplete) {\n-\t\tthis(dataSetId.toHexString(), isComplete);\n-\t}\n-\n-\t@JsonCreator\n-\tprivate ClusterDataSetEntry(\n-\t\t@JsonProperty(FIELD_NAME_DATA_SET_ID) String dataSetId,\n-\t\t@JsonProperty(FIELD_NAME_COMPLETE) boolean isComplete) {\n-\t\tthis.dataSetId = dataSetId;\n-\t\tthis.isComplete = isComplete;\n-\t}\n-\n-\t@JsonIgnore\n-\tpublic String getDataSetId() {\n-\t\treturn dataSetId;\n-\t}\n-\n-\t@JsonIgnore\n-\tpublic boolean isComplete() {\n-\t\treturn isComplete;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NDk1NQ==", "url": "https://github.com/apache/flink/pull/11628#discussion_r404884955", "bodyText": "Can you add a real Javadoc?", "author": "GJL", "createdAt": "2020-04-07T15:08:01Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetIdPathParameter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.messages.dataset;\n+\n+import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n+import org.apache.flink.runtime.rest.messages.ConversionException;\n+import org.apache.flink.runtime.rest.messages.MessagePathParameter;\n+import org.apache.flink.util.AbstractID;\n+import org.apache.flink.util.StringUtils;\n+\n+/**\n+ * TODO: Add javadoc.", "originalCommit": "44066c510cd12ae93baf839652b1bb2b43cc8cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af45e70138c247e8a3ff2fe2d1b1f82e8905f61f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetIdPathParameter.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetIdPathParameter.java\nindex 8f484b9dad..f9bafb32a5 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetIdPathParameter.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetIdPathParameter.java\n\n@@ -24,18 +24,18 @@ import org.apache.flink.util.AbstractID;\n import org.apache.flink.util.StringUtils;\n \n /**\n- * TODO: Add javadoc.\n+ * Path parameter identifying cluster data sets\n  */\n public class ClusterDataSetIdPathParameter extends MessagePathParameter<IntermediateDataSetID> {\n \n-\tpublic static final String KEY = \"partitionid\";\n+\tpublic static final String KEY = \"datasetid\";\n \n \tpublic ClusterDataSetIdPathParameter() {\n \t\tsuper(KEY);\n \t}\n \n \t@Override\n-\tprotected IntermediateDataSetID convertFromString(String value) throws ConversionException {\n+\tprotected IntermediateDataSetID convertFromString(String value) {\n \t\treturn new IntermediateDataSetID(new AbstractID(StringUtils.hexStringToByte(value)));\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4ODE3Mw==", "url": "https://github.com/apache/flink/pull/11628#discussion_r404888173", "bodyText": "Isn't this the same as the next line?", "author": "GJL", "createdAt": "2020-04-07T15:12:05Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.messages.dataset;\n+\n+import org.apache.flink.runtime.io.network.partition.DataSetMetaInfo;\n+import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n+import org.apache.flink.runtime.rest.messages.RestResponseMarshallingTestBase;\n+import org.apache.flink.util.AbstractID;\n+import org.apache.flink.util.StringUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for {@link ClusterDataSetListResponseBody}.\n+ */\n+public class ClusterDataSetListResponseBodyTest extends RestResponseMarshallingTestBase<ClusterDataSetListResponseBody> {\n+\n+\t@Test\n+\tpublic void testFrom() {\n+\t\tfinal Map<IntermediateDataSetID, DataSetMetaInfo> originalDataSets = new HashMap<>();\n+\t\toriginalDataSets.put(new IntermediateDataSetID(), DataSetMetaInfo.withNumRegisteredPartitions(1, 2));\n+\t\toriginalDataSets.put(new IntermediateDataSetID(), DataSetMetaInfo.withNumRegisteredPartitions(2, 2));\n+\n+\t\tList<ClusterDataSetEntry> convertedDataSets = ClusterDataSetListResponseBody.from(originalDataSets).getDataSets();\n+\t\tassertThat(convertedDataSets, hasSize(2));\n+\t\tfor (ClusterDataSetEntry convertedDataSet : convertedDataSets) {\n+\t\t\tIntermediateDataSetID id = new IntermediateDataSetID(new AbstractID(StringUtils.hexStringToByte(convertedDataSet.getDataSetId())));\n+\n+\t\t\tDataSetMetaInfo dataSetMetaInfo = originalDataSets.get(id);\n+\n+\t\t\tassertThat(convertedDataSet.isComplete(), is(dataSetMetaInfo.getNumRegisteredPartitions().orElse(0) == dataSetMetaInfo.getNumTotalPartitions()));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected Class<ClusterDataSetListResponseBody> getTestResponseClass() {\n+\t\treturn ClusterDataSetListResponseBody.class;\n+\t}\n+\n+\t@Override\n+\tprotected ClusterDataSetListResponseBody getTestResponseInstance() throws Exception {\n+\t\tfinal Map<IntermediateDataSetID, DataSetMetaInfo> dataSets = new HashMap<>();\n+\t\tdataSets.put(new IntermediateDataSetID(), DataSetMetaInfo.withNumRegisteredPartitions(1, 2));\n+\t\treturn ClusterDataSetListResponseBody.from(dataSets);\n+\t}\n+\n+\t@Override\n+\tprotected void assertOriginalEqualsToUnmarshalled(ClusterDataSetListResponseBody expected, ClusterDataSetListResponseBody actual) {\n+\t\tfinal List<ClusterDataSetEntry> expectedDataSets = expected.getDataSets();\n+\t\tfinal List<ClusterDataSetEntry> actualDataSets = actual.getDataSets();\n+\t\tassertEquals(expectedDataSets.size(), actualDataSets.size());", "originalCommit": "44066c510cd12ae93baf839652b1bb2b43cc8cab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwNTQ3NA==", "url": "https://github.com/apache/flink/pull/11628#discussion_r405405474", "bodyText": "yes", "author": "zentol", "createdAt": "2020-04-08T09:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4ODE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "af45e70138c247e8a3ff2fe2d1b1f82e8905f61f", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java\nindex 2dfa0e4947..c036953b5d 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java\n\n@@ -32,7 +32,6 @@ import java.util.Map;\n import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n-import static org.junit.Assert.assertEquals;\n \n /**\n  * Tests for {@link ClusterDataSetListResponseBody}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMzE1Mg==", "url": "https://github.com/apache/flink/pull/11628#discussion_r405323152", "bodyText": "commit message has a typo: just happened to only by used by TaskExecutor related handlers.", "author": "GJL", "createdAt": "2020-04-08T07:46:49Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/resourcemanager/AbstractResourceManagerHandler.java", "diffHunk": "@@ -16,7 +16,7 @@\n  * limitations under the License.", "originalCommit": "e071af4be0adcd11c4faf92c7b9eb32af4cf68a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDIzNw==", "url": "https://github.com/apache/flink/pull/11628#discussion_r405350237", "bodyText": "What naming convention are we following for JSON fields? So far we have:\n\nsnake_case\nkebab-case\ncamelCase", "author": "GJL", "createdAt": "2020-04-08T08:32:13Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.messages.dataset;\n+\n+import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n+\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnore;\n+import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The entry for a single cluster data set.\n+ *\n+ * @see ClusterDataSetListResponseBody\n+ */\n+class ClusterDataSetEntry {\n+\tprivate static final String FIELD_NAME_DATA_SET_ID = \"id\";\n+\tprivate static final String FIELD_NAME_COMPLETE = \"isComplete\";", "originalCommit": "44066c510cd12ae93baf839652b1bb2b43cc8cab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwNjUzMA==", "url": "https://github.com/apache/flink/pull/11628#discussion_r405406530", "bodyText": "camelCase; we will standardize it in FLINK-15787.", "author": "zentol", "createdAt": "2020-04-08T10:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "96ef850bcf5c2d7fd006dc17728fe4232aeddead", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java\ndeleted file mode 100644\nindex 1bc4c9089f..0000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetEntry.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.rest.messages.dataset;\n-\n-import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n-\n-import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonCreator;\n-import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonIgnore;\n-import org.apache.flink.shaded.jackson2.com.fasterxml.jackson.annotation.JsonProperty;\n-\n-/**\n- * The entry for a single cluster data set.\n- *\n- * @see ClusterDataSetListResponseBody\n- */\n-class ClusterDataSetEntry {\n-\tprivate static final String FIELD_NAME_DATA_SET_ID = \"id\";\n-\tprivate static final String FIELD_NAME_COMPLETE = \"isComplete\";\n-\n-\t@JsonProperty(FIELD_NAME_DATA_SET_ID)\n-\tprivate final String dataSetId;\n-\n-\t@JsonProperty(FIELD_NAME_COMPLETE)\n-\tprivate final boolean isComplete;\n-\n-\tClusterDataSetEntry(IntermediateDataSetID dataSetId, boolean isComplete) {\n-\t\tthis(dataSetId.toHexString(), isComplete);\n-\t}\n-\n-\t@JsonCreator\n-\tprivate ClusterDataSetEntry(\n-\t\t@JsonProperty(FIELD_NAME_DATA_SET_ID) String dataSetId,\n-\t\t@JsonProperty(FIELD_NAME_COMPLETE) boolean isComplete) {\n-\t\tthis.dataSetId = dataSetId;\n-\t\tthis.isComplete = isComplete;\n-\t}\n-\n-\t@JsonIgnore\n-\tpublic String getDataSetId() {\n-\t\treturn dataSetId;\n-\t}\n-\n-\t@JsonIgnore\n-\tpublic boolean isComplete() {\n-\t\treturn isComplete;\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjMzNw==", "url": "https://github.com/apache/flink/pull/11628#discussion_r405352337", "bodyText": "It seems we are listing data sets and not partitions. Maybe ClusterDataSetListHandler would be a better name.\nI also wanted to ask if we are no longer implementing the Public Interface as described in the FLIP: https://cwiki.apache.org/confluence/display/FLINK/FLIP-67%3A+Cluster+partitions+lifecycle", "author": "GJL", "createdAt": "2020-04-08T08:35:38Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetPartitionListHandler.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.dataset;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.handler.resourcemanager.AbstractResourceManagerHandler;\n+import org.apache.flink.runtime.rest.messages.EmptyMessageParameters;\n+import org.apache.flink.runtime.rest.messages.EmptyRequestBody;\n+import org.apache.flink.runtime.rest.messages.dataset.ClusterDataSetListHeaders;\n+import org.apache.flink.runtime.rest.messages.dataset.ClusterDataSetListResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler for {@link ClusterDataSetListHeaders}.\n+ */\n+public class ClusterDataSetPartitionListHandler extends AbstractResourceManagerHandler<RestfulGateway, EmptyRequestBody, ClusterDataSetListResponseBody, EmptyMessageParameters> {", "originalCommit": "44066c510cd12ae93baf839652b1bb2b43cc8cab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQxNzg5MA==", "url": "https://github.com/apache/flink/pull/11628#discussion_r405417890", "bodyText": "I have adjusted the name, this was an oversight.\nThere are indeed some differences to the proposed API in the FLIP, let's go through them:\n\nlack of some meta data like job name, creation dates and such.\n\nThese may be added later. We made sure that existing code can be extended easily to carry additional meta-data to the ResourceManager, but left it out for simplicity's sake. We only retained data that we needed functionality-wise.\n\nrename of URLs to use dataset instead of partition\n\nThis was an oversight in terminology that was noticed way too late. Back then we used the term \"cluster partition\" to both denote a partition of a data set and the data set as a whole. This is naturally confusing, so I introduced a new term. \"Cluster dataset\" was the logical choice.\n\nLack of GET/dataset/:datasetid\n\nThis was left out because it is not functionally required for how we envision Interactive Programming to work (because it wouldn't retrieve partition descriptors through the REST API).\nAdditionally, the partition descriptors may be too large/numerous to safely transmit them over heartbeats; meaning we may need a separate transfer mechanism.\nIt is still something that we should eventually have imo so we don't limit usage of cluster data sets to Interactive Programming.", "author": "zentol", "createdAt": "2020-04-08T10:20:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNzk3Mw==", "url": "https://github.com/apache/flink/pull/11628#discussion_r406017973", "bodyText": "ok", "author": "GJL", "createdAt": "2020-04-09T07:48:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "af45e70138c247e8a3ff2fe2d1b1f82e8905f61f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetPartitionListHandler.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetListHandler.java\nsimilarity index 91%\nrename from flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetPartitionListHandler.java\nrename to flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetListHandler.java\nindex 91a8521339..3d10c3f50b 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetPartitionListHandler.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/dataset/ClusterDataSetListHandler.java\n\n@@ -37,8 +37,8 @@ import java.util.concurrent.CompletableFuture;\n /**\n  * Handler for {@link ClusterDataSetListHeaders}.\n  */\n-public class ClusterDataSetPartitionListHandler extends AbstractResourceManagerHandler<RestfulGateway, EmptyRequestBody, ClusterDataSetListResponseBody, EmptyMessageParameters> {\n-\tpublic ClusterDataSetPartitionListHandler(\n+public class ClusterDataSetListHandler extends AbstractResourceManagerHandler<RestfulGateway, EmptyRequestBody, ClusterDataSetListResponseBody, EmptyMessageParameters> {\n+\tpublic ClusterDataSetListHandler(\n \t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n \t\t\tTime timeout,\n \t\t\tMap<String, String> responseHeaders,\n"}}, {"oid": "af45e70138c247e8a3ff2fe2d1b1f82e8905f61f", "url": "https://github.com/apache/flink/commit/af45e70138c247e8a3ff2fe2d1b1f82e8905f61f", "message": "Rename list handler", "committedDate": "2020-04-08T10:01:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMTg1Nw==", "url": "https://github.com/apache/flink/pull/11628#discussion_r406031857", "bodyText": "Currently, if this value is absent, we always convert it to 0 for the user. Moreover, numRegisteredPartitions must be greater than 0 if  numRegisteredPartitions is passed from outside. Can you explain why an Optional<Integer> is needed? Why not directly return 0 if numRegisteredPartitions is unknown?", "author": "GJL", "createdAt": "2020-04-09T08:13:02Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/DataSetMetaInfo.java", "diffHunk": "@@ -17,18 +17,42 @@\n \n package org.apache.flink.runtime.io.network.partition;\n \n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.Optional;\n+\n /**\n  * Container for meta-data of a data set.\n  */\n public final class DataSetMetaInfo {\n+\tprivate static final int UNKNOWN = -1;\n \n+\tprivate final int numRegisteredPartitions;\n \tprivate final int numTotalPartitions;\n \n-\tpublic DataSetMetaInfo(int numTotalPartitions) {\n+\tprivate DataSetMetaInfo(int numRegisteredPartitions, int numTotalPartitions) {\n+\t\tthis.numRegisteredPartitions = numRegisteredPartitions;\n \t\tthis.numTotalPartitions = numTotalPartitions;\n \t}\n \n+\tpublic Optional<Integer> getNumRegisteredPartitions() {", "originalCommit": "a03a672c3fe931e9f4d0c67ea171db7e46a79070", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA2OTUwOQ==", "url": "https://github.com/apache/flink/pull/11628#discussion_r406069509", "bodyText": "hmm returning 0 might make sense yes.\nEffectively, this method is supposed to never by called internally (i.e., within the RMPartitionTrackerImpl, and only be used when returned by listDataSets.\nThis is naturally icky.\nIt could be argued that a separate class should be added that extends/wraps some InternalDataSetMetaInfo, but this seemed quite overkill.\nOriginally I threw an IllegalStateException if used internally, but this somewhat magnified how terrible this is.\nSo I oped for an optional instead.\nFor external users (like handlers), 0 is a sane default.\nIf used internally, the idea (or hope) was that it somewhat conveys that this value may not be set, ideally resulting in the question \"why?\". Because if you use this internally, you're about to do something wrong.\nIt is a tad convoluted thinking admittedly.", "author": "zentol", "createdAt": "2020-04-09T09:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMTg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNTM1NQ==", "url": "https://github.com/apache/flink/pull/11628#discussion_r406135355", "bodyText": "Ok understood. Feel free to merge.", "author": "GJL", "createdAt": "2020-04-09T11:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "96ef850bcf5c2d7fd006dc17728fe4232aeddead", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/DataSetMetaInfo.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/DataSetMetaInfo.java\nindex 0da50eb5e3..36a37fb0a8 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/DataSetMetaInfo.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/DataSetMetaInfo.java\n\n@@ -17,42 +17,18 @@\n \n package org.apache.flink.runtime.io.network.partition;\n \n-import org.apache.flink.annotation.VisibleForTesting;\n-import org.apache.flink.util.Preconditions;\n-\n-import java.util.Optional;\n-\n /**\n  * Container for meta-data of a data set.\n  */\n public final class DataSetMetaInfo {\n-\tprivate static final int UNKNOWN = -1;\n \n-\tprivate final int numRegisteredPartitions;\n \tprivate final int numTotalPartitions;\n \n-\tprivate DataSetMetaInfo(int numRegisteredPartitions, int numTotalPartitions) {\n-\t\tthis.numRegisteredPartitions = numRegisteredPartitions;\n+\tpublic DataSetMetaInfo(int numTotalPartitions) {\n \t\tthis.numTotalPartitions = numTotalPartitions;\n \t}\n \n-\tpublic Optional<Integer> getNumRegisteredPartitions() {\n-\t\treturn numRegisteredPartitions == UNKNOWN\n-\t\t\t? Optional.empty()\n-\t\t\t: Optional.of(numRegisteredPartitions);\n-\t}\n-\n \tpublic int getNumTotalPartitions() {\n \t\treturn numTotalPartitions;\n \t}\n-\n-\tstatic DataSetMetaInfo withoutNumRegisteredPartitions(int numTotalPartitions) {\n-\t\treturn new DataSetMetaInfo(UNKNOWN, numTotalPartitions);\n-\t}\n-\n-\t@VisibleForTesting\n-\tpublic static DataSetMetaInfo withNumRegisteredPartitions(int numRegisteredPartitions, int numTotalPartitions) {\n-\t\tPreconditions.checkArgument(numRegisteredPartitions > 0);\n-\t\treturn new DataSetMetaInfo(numRegisteredPartitions, numTotalPartitions);\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzMzcxOQ==", "url": "https://github.com/apache/flink/pull/11628#discussion_r406033719", "bodyText": "Maybe use matchers from the same package\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.hamcrest.CoreMatchers.is;\n          \n          \n            \n            import static org.hamcrest.MatcherAssert.assertThat;\n          \n          \n            \n            import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n          \n          \n            \n            import static org.hamcrest.MatcherAssert.assertThat;\n          \n          \n            \n            import static org.hamcrest.Matchers.hasSize;\n          \n          \n            \n            import static org.hamcrest.Matchers.is;", "author": "GJL", "createdAt": "2020-04-09T08:16:12Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.messages.dataset;\n+\n+import org.apache.flink.runtime.io.network.partition.DataSetMetaInfo;\n+import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n+import org.apache.flink.runtime.rest.messages.RestResponseMarshallingTestBase;\n+import org.apache.flink.util.AbstractID;\n+import org.apache.flink.util.StringUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsCollectionWithSize.hasSize;", "originalCommit": "a03a672c3fe931e9f4d0c67ea171db7e46a79070", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96ef850bcf5c2d7fd006dc17728fe4232aeddead", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java\ndeleted file mode 100644\nindex c036953b5d..0000000000\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/rest/messages/dataset/ClusterDataSetListResponseBodyTest.java\n+++ /dev/null\n\n@@ -1,85 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.rest.messages.dataset;\n-\n-import org.apache.flink.runtime.io.network.partition.DataSetMetaInfo;\n-import org.apache.flink.runtime.jobgraph.IntermediateDataSetID;\n-import org.apache.flink.runtime.rest.messages.RestResponseMarshallingTestBase;\n-import org.apache.flink.util.AbstractID;\n-import org.apache.flink.util.StringUtils;\n-\n-import org.junit.Test;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.collection.IsCollectionWithSize.hasSize;\n-\n-/**\n- * Tests for {@link ClusterDataSetListResponseBody}.\n- */\n-public class ClusterDataSetListResponseBodyTest extends RestResponseMarshallingTestBase<ClusterDataSetListResponseBody> {\n-\n-\t@Test\n-\tpublic void testFrom() {\n-\t\tfinal Map<IntermediateDataSetID, DataSetMetaInfo> originalDataSets = new HashMap<>();\n-\t\toriginalDataSets.put(new IntermediateDataSetID(), DataSetMetaInfo.withNumRegisteredPartitions(1, 2));\n-\t\toriginalDataSets.put(new IntermediateDataSetID(), DataSetMetaInfo.withNumRegisteredPartitions(2, 2));\n-\n-\t\tList<ClusterDataSetEntry> convertedDataSets = ClusterDataSetListResponseBody.from(originalDataSets).getDataSets();\n-\t\tassertThat(convertedDataSets, hasSize(2));\n-\t\tfor (ClusterDataSetEntry convertedDataSet : convertedDataSets) {\n-\t\t\tIntermediateDataSetID id = new IntermediateDataSetID(new AbstractID(StringUtils.hexStringToByte(convertedDataSet.getDataSetId())));\n-\n-\t\t\tDataSetMetaInfo dataSetMetaInfo = originalDataSets.get(id);\n-\n-\t\t\tassertThat(convertedDataSet.isComplete(), is(dataSetMetaInfo.getNumRegisteredPartitions().orElse(0) == dataSetMetaInfo.getNumTotalPartitions()));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected Class<ClusterDataSetListResponseBody> getTestResponseClass() {\n-\t\treturn ClusterDataSetListResponseBody.class;\n-\t}\n-\n-\t@Override\n-\tprotected ClusterDataSetListResponseBody getTestResponseInstance() throws Exception {\n-\t\tfinal Map<IntermediateDataSetID, DataSetMetaInfo> dataSets = new HashMap<>();\n-\t\tdataSets.put(new IntermediateDataSetID(), DataSetMetaInfo.withNumRegisteredPartitions(1, 2));\n-\t\treturn ClusterDataSetListResponseBody.from(dataSets);\n-\t}\n-\n-\t@Override\n-\tprotected void assertOriginalEqualsToUnmarshalled(ClusterDataSetListResponseBody expected, ClusterDataSetListResponseBody actual) {\n-\t\tfinal List<ClusterDataSetEntry> expectedDataSets = expected.getDataSets();\n-\t\tfinal List<ClusterDataSetEntry> actualDataSets = actual.getDataSets();\n-\n-\t\tassertThat(actualDataSets, hasSize(expectedDataSets.size()));\n-\t\tfor (int i = 0; i < expectedDataSets.size(); i++) {\n-\t\t\tClusterDataSetEntry expectedDataSet = expectedDataSets.get(i);\n-\t\t\tClusterDataSetEntry actualDataSet = actualDataSets.get(i);\n-\n-\t\t\tassertThat(actualDataSet.getDataSetId(), is(expectedDataSet.getDataSetId()));\n-\t\t\tassertThat(actualDataSet.isComplete(), is(expectedDataSet.isComplete()));\n-\t\t}\n-\n-\t}\n-}\n"}}, {"oid": "96ef850bcf5c2d7fd006dc17728fe4232aeddead", "url": "https://github.com/apache/flink/commit/96ef850bcf5c2d7fd006dc17728fe4232aeddead", "message": "[FLINK-14504][rest] Rename AbstractTaskManagerHandler\n\nThe name was misleading since the handler only interacts with the ResourceManager, and just happened to only be used by TaskExecutor-related handlers.", "committedDate": "2020-04-14T08:41:37Z", "type": "commit"}, {"oid": "1e07c9f31842913bb72a7016de8b53e47fcfe176", "url": "https://github.com/apache/flink/commit/1e07c9f31842913bb72a7016de8b53e47fcfe176", "message": "[FLINK-14504][runtime] List incomplete data sets\n\nWe don't have a mechanism to ensure that either all partitions of a data set are registered or the remaining partitions are released at some point.\nIn these cases the user has to step in, but without being able to list incomplete partitions there's nothing that can be done.\nThis commit relaxes the filtering, and introduces an additional optional count for the number of currently registered partitions.\nThis count is only determined when the listing is requested for performance and complexity reasons.", "committedDate": "2020-04-14T08:41:37Z", "type": "commit"}, {"oid": "b4ddb90b777c6fd5114be645c94c746925759324", "url": "https://github.com/apache/flink/commit/b4ddb90b777c6fd5114be645c94c746925759324", "message": "[FLINK-14504][runtime] Introduce ClusterPartitionManager interface", "committedDate": "2020-04-14T08:41:37Z", "type": "commit"}, {"oid": "741035b0246d8dac0c017deaa08bcb01bff21a5d", "url": "https://github.com/apache/flink/commit/741035b0246d8dac0c017deaa08bcb01bff21a5d", "message": "[FLINK-14504][rest] Add Cluster DataSet REST API", "committedDate": "2020-04-14T08:41:38Z", "type": "forcePushed"}, {"oid": "d71751b713e1dab880521ea6afc949a8b18b90e6", "url": "https://github.com/apache/flink/commit/d71751b713e1dab880521ea6afc949a8b18b90e6", "message": "[FLINK-14504][rest] Add Cluster DataSet REST API", "committedDate": "2020-04-14T09:01:09Z", "type": "commit"}, {"oid": "d71751b713e1dab880521ea6afc949a8b18b90e6", "url": "https://github.com/apache/flink/commit/d71751b713e1dab880521ea6afc949a8b18b90e6", "message": "[FLINK-14504][rest] Add Cluster DataSet REST API", "committedDate": "2020-04-14T09:01:09Z", "type": "forcePushed"}]}