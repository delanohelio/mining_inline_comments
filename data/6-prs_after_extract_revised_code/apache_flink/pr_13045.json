{"pr_number": 13045, "pr_title": "[FLINK-18748][checkpointing] trigger unperiodic checkpoint immediately", "pr_createdAt": "2020-08-02T17:22:33Z", "pr_url": "https://github.com/apache/flink/pull/13045", "timeline": [{"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35", "url": "https://github.com/apache/flink/commit/194431a72cad4b8069f29fdd39539b0544fd9d35", "message": "[FLINK-18748][Runtime/Checkpointing] trigger checkpoint immediately if it's unperiodic", "committedDate": "2020-08-02T09:33:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzI2MA==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464197260", "bodyText": "maybe we can reuse the first in onTooEarly function", "author": "klion26", "createdAt": "2020-08-03T05:11:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();", "originalCommit": "194431a72cad4b8069f29fdd39539b0544fd9d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzMjk1Mg==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464232952", "bodyText": "thanks, @klion26 , I will reuse it.", "author": "DG-Wangtao", "createdAt": "2020-08-03T07:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzI2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5MDAwMw==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464490003", "bodyText": "Hi, @klion26  @rkhachatryan  I remove onTooEarly function and put all statements in chooseRequestToExecute.", "author": "DG-Wangtao", "createdAt": "2020-08-03T15:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzI2MA=="}], "type": "inlineReview", "revised_code": {"commit": "bc1a115c8825526c96674b35effceabc7542d0c2", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\nindex d0545612b5..6a9f779218 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\n\n@@ -137,27 +137,18 @@ class CheckpointRequestDecider {\n \t\t}\n \n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce() || !first.isPeriodic) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t}\n-\n-\t\tlong nextTriggerDelayMillis = nextTriggerDelayMillis(lastCompletionMs);\n-\t\tif (nextTriggerDelayMillis > 0) {\n-\t\t\treturn onTooEarly(nextTriggerDelayMillis);\n+\t\tif (!first.isForce() && first.isPeriodic) {\n+\t\t\tlong nextTriggerDelayMillis = nextTriggerDelayMillis(lastCompletionMs);\n+\t\t\tif (nextTriggerDelayMillis > 0) {\n+\t\t\t\tqueuedRequests.pollFirst().completeExceptionally(new CheckpointException(MINIMUM_TIME_BETWEEN_CHECKPOINTS));\n+\t\t\t\trescheduleTrigger.accept(nextTriggerDelayMillis);\n+\t\t\t\treturn Optional.empty();\n+\t\t\t}\n \t\t}\n \n \t\treturn Optional.of(queuedRequests.pollFirst());\n \t}\n \n-\tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n-\t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isPeriodic) {\n-\t\t\tqueuedRequests.pollFirst().completeExceptionally(new CheckpointException(MINIMUM_TIME_BETWEEN_CHECKPOINTS));\n-\t\t\trescheduleTrigger.accept(nextTriggerDelayMillis);\n-\t\t}\n-\t\treturn Optional.empty();\n-\t}\n-\n \tprivate long nextTriggerDelayMillis(long lastCheckpointCompletionRelativeTime) {\n \t\treturn lastCheckpointCompletionRelativeTime - clock.relativeTimeMillis() + minPauseBetweenCheckpoints;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464201043", "bodyText": "after this change, do we need to add a test to guarantee \"savepoint and checkpoint would not execute concurrently under unaligned checkpoint mode\"", "author": "klion26", "createdAt": "2020-08-03T05:28:47Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "originalCommit": "194431a72cad4b8069f29fdd39539b0544fd9d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MDM4NA==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464240384", "bodyText": "Yes, @klion26 , maybe we need this.\nThere are two functions called  testUserSubmittedPrioritized and testSavepointPrioritized in CheckpointRequestDeciderTest for testing the ordering of requests', forced savepoint and checkpoints, and I will write two other test functions for testing the order of unforced savepoints'  and checkpoints' requests , using testRequestsOrdering too.\nWhat do you think about this, @klion26", "author": "DG-Wangtao", "createdAt": "2020-08-03T07:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwNDk3NQ==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464304975", "bodyText": "I think maxPendingCheckpoints limit (what @klion26 proposed) and order are different things to check.\nFor the 1st one, I think we can reuse testEnqueueOnTooManyPending by calling nonForcedSavepoint instead of  regularCheckpoint.", "author": "rkhachatryan", "createdAt": "2020-08-03T09:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0OTIwOQ==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464349209", "bodyText": "thanks, I will add a test function reusing testEnqueueOnTooManyPending as you say.", "author": "DG-Wangtao", "createdAt": "2020-08-03T11:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MTEyNA==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464351124", "bodyText": "and I want also add two other test functions for testing order, too,  what do you think about this, will they become redundant?", "author": "DG-Wangtao", "createdAt": "2020-08-03T11:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3ODU0NA==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464478544", "bodyText": "Hi, @klion26  @rkhachatryan , I add three test functions:\n\ntestNonForcedEnqueueOnTooManyPending: testing for nonforced savepoint on too many pending\ntestNonForcedUserSubmittedPrioritized: testing for order of nonforced savpoint and nonForcedPeriodicSavepoint\ntestNonForcedSavepointPrioritized: testing for order of nonForcedSavepoint and regularCheckpoint", "author": "DG-Wangtao", "createdAt": "2020-08-03T15:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Nzg4Mg==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464287882", "bodyText": "Can we make the connection between this check and onTooEarly more explicit?\nFor example, by inverting this condition and putting onTooEarly inside.", "author": "rkhachatryan", "createdAt": "2020-08-03T09:07:26Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();\n+\t\tif (first.isForce() || !first.isPeriodic) {", "originalCommit": "194431a72cad4b8069f29fdd39539b0544fd9d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNzM2NQ==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464337365", "bodyText": "Hi, @rkhachatryan, thanks for your proposal. As you say, I will make the connection more explicit by inverting the condition and putting onTooEarly inside.", "author": "DG-Wangtao", "createdAt": "2020-08-03T10:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Nzg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0MzQ4OQ==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464443489", "bodyText": "Hi, @DG-Wangtao, thanks!", "author": "rkhachatryan", "createdAt": "2020-08-03T14:18:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Nzg4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bc1a115c8825526c96674b35effceabc7542d0c2", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\nindex d0545612b5..6a9f779218 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\n\n@@ -137,27 +137,18 @@ class CheckpointRequestDecider {\n \t\t}\n \n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce() || !first.isPeriodic) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t}\n-\n-\t\tlong nextTriggerDelayMillis = nextTriggerDelayMillis(lastCompletionMs);\n-\t\tif (nextTriggerDelayMillis > 0) {\n-\t\t\treturn onTooEarly(nextTriggerDelayMillis);\n+\t\tif (!first.isForce() && first.isPeriodic) {\n+\t\t\tlong nextTriggerDelayMillis = nextTriggerDelayMillis(lastCompletionMs);\n+\t\t\tif (nextTriggerDelayMillis > 0) {\n+\t\t\t\tqueuedRequests.pollFirst().completeExceptionally(new CheckpointException(MINIMUM_TIME_BETWEEN_CHECKPOINTS));\n+\t\t\t\trescheduleTrigger.accept(nextTriggerDelayMillis);\n+\t\t\t\treturn Optional.empty();\n+\t\t\t}\n \t\t}\n \n \t\treturn Optional.of(queuedRequests.pollFirst());\n \t}\n \n-\tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n-\t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isPeriodic) {\n-\t\t\tqueuedRequests.pollFirst().completeExceptionally(new CheckpointException(MINIMUM_TIME_BETWEEN_CHECKPOINTS));\n-\t\t\trescheduleTrigger.accept(nextTriggerDelayMillis);\n-\t\t}\n-\t\treturn Optional.empty();\n-\t}\n-\n \tprivate long nextTriggerDelayMillis(long lastCheckpointCompletionRelativeTime) {\n \t\treturn lastCheckpointCompletionRelativeTime - clock.relativeTimeMillis() + minPauseBetweenCheckpoints;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464291607", "bodyText": "Can we inline this function now?\nOtherwise, we need to duplicate the check and return logic (or use preconditions).\nCurrently, I think if is missing && !isForce check,\nand in the end, it should return pollFirst.", "author": "rkhachatryan", "createdAt": "2020-08-03T09:14:31Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -146,15 +151,11 @@\n \n \tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce()) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t} else if (first.isPeriodic) {\n+\t\tif (first.isPeriodic) {", "originalCommit": "194431a72cad4b8069f29fdd39539b0544fd9d35", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MzM0Mg==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464343342", "bodyText": "Yes, I will remove all if from this function.  The conditions-returnValue map of function chooseRequestToExecute would be like this:\n\n\n\nisForce\nisPeriodic\ntoo eraly\nreturn value of chooseRequestToExecute\n\n\n\n\ntrue\ntrue\ntrue\npollFirst\n\n\ntrue\ntrue\nfalse\npollFirst\n\n\ntrue\nfalse\ntrue\npollFirst\n\n\ntrue\nfalse\nfalse\npollFirst\n\n\nfalse\ntrue\ntrue\nempty,  and call queuedRequests.pollFirst().completeExceptionally\n\n\nfalse\ntrue\nfalse\npollFirst\n\n\nfalse\nfalse\ntrue\npollFirst\n\n\nfalse\nfalse\nfalse\npollFirst", "author": "DG-Wangtao", "createdAt": "2020-08-03T11:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0MjE4Mg==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464442182", "bodyText": "Thanks, the table explains very clearly what chooseRequestToExecute will return.\n\nI will remove all if from this function.\n\nWDYT about removing the function (onTooEarly) at all? (and moving the two remaining statements into chooseRequestToExecute)", "author": "rkhachatryan", "createdAt": "2020-08-03T14:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0ODg1NA==", "url": "https://github.com/apache/flink/pull/13045#discussion_r464448854", "bodyText": "I think it's a good idea.  It will make the logic of chooseRequestToExecute more clearer.", "author": "DG-Wangtao", "createdAt": "2020-08-03T14:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "bc1a115c8825526c96674b35effceabc7542d0c2", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\nindex d0545612b5..6a9f779218 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java\n\n@@ -137,27 +137,18 @@ class CheckpointRequestDecider {\n \t\t}\n \n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce() || !first.isPeriodic) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t}\n-\n-\t\tlong nextTriggerDelayMillis = nextTriggerDelayMillis(lastCompletionMs);\n-\t\tif (nextTriggerDelayMillis > 0) {\n-\t\t\treturn onTooEarly(nextTriggerDelayMillis);\n+\t\tif (!first.isForce() && first.isPeriodic) {\n+\t\t\tlong nextTriggerDelayMillis = nextTriggerDelayMillis(lastCompletionMs);\n+\t\t\tif (nextTriggerDelayMillis > 0) {\n+\t\t\t\tqueuedRequests.pollFirst().completeExceptionally(new CheckpointException(MINIMUM_TIME_BETWEEN_CHECKPOINTS));\n+\t\t\t\trescheduleTrigger.accept(nextTriggerDelayMillis);\n+\t\t\t\treturn Optional.empty();\n+\t\t\t}\n \t\t}\n \n \t\treturn Optional.of(queuedRequests.pollFirst());\n \t}\n \n-\tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n-\t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isPeriodic) {\n-\t\t\tqueuedRequests.pollFirst().completeExceptionally(new CheckpointException(MINIMUM_TIME_BETWEEN_CHECKPOINTS));\n-\t\t\trescheduleTrigger.accept(nextTriggerDelayMillis);\n-\t\t}\n-\t\treturn Optional.empty();\n-\t}\n-\n \tprivate long nextTriggerDelayMillis(long lastCheckpointCompletionRelativeTime) {\n \t\treturn lastCheckpointCompletionRelativeTime - clock.relativeTimeMillis() + minPauseBetweenCheckpoints;\n \t}\n"}}, {"oid": "bc1a115c8825526c96674b35effceabc7542d0c2", "url": "https://github.com/apache/flink/commit/bc1a115c8825526c96674b35effceabc7542d0c2", "message": "[FLINK-18748][Runtime/Checkpointing] remove  function and add unit test for NonForced savepoints", "committedDate": "2020-08-03T15:22:33Z", "type": "commit"}, {"oid": "bc1a115c8825526c96674b35effceabc7542d0c2", "url": "https://github.com/apache/flink/commit/bc1a115c8825526c96674b35effceabc7542d0c2", "message": "[FLINK-18748][Runtime/Checkpointing] remove  function and add unit test for NonForced savepoints", "committedDate": "2020-08-03T15:22:33Z", "type": "forcePushed"}]}