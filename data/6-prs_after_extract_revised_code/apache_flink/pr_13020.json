{"pr_number": 13020, "pr_title": "[FLINK-18663][rest] Fix the exception occurred on AbstractHandler#handleException but not handled", "pr_createdAt": "2020-07-29T11:08:21Z", "pr_url": "https://github.com/apache/flink/pull/13020", "timeline": [{"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "url": "https://github.com/apache/flink/commit/e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "message": "[FLINK-18663][rest] does not handle new request if handler had been closed", "committedDate": "2020-07-29T12:08:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDcxMw==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462404713", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tsynchronized (this) {\n          \n          \n            \n            \t\tsynchronized (lock) {", "author": "zentol", "createdAt": "2020-07-29T15:51:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {", "originalCommit": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzQ2NQ==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462697465", "bodyText": "I will fix it.", "author": "Tartarus0zm", "createdAt": "2020-07-30T02:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "41ac35d96c420b40628fc9a64aca80c54cb78081", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\nindex 5e9ab3d075..91e9f982d4 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\n\n@@ -115,24 +115,16 @@ public abstract class AbstractHandler<T extends RestfulGateway, R extends Reques\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n-\t\tsynchronized (this) {\n-\t\t\tif (terminationFuture != null) {\n-\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n-\t\t\t\t\t+ \" had already been closed\";\n-\t\t\t\tlog.warn(errorMsg);\n-\t\t\t\tHandlerUtils.sendErrorResponse(\n-\t\t\t\t\tctx,\n-\t\t\t\t\thttpRequest,\n-\t\t\t\t\tnew ErrorResponseBody(errorMsg),\n-\t\t\t\t\tHttpResponseStatus.BAD_REQUEST,\n-\t\t\t\t\tresponseHeaders);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n-\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tif (terminationFuture != null) {\n+\t\t\t\t\tlog.warn(\"The handler instance for {} had already been closed\", untypedResponseMessageHeaders.getTargetRestEndpointURL());\n+\t\t\t\t\tctx.channel().close();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\t}\n \t\t\tif (!(httpRequest instanceof FullHttpRequest)) {\n \t\t\t\t// The RestServerEndpoint defines a HttpObjectAggregator in the pipeline that always returns\n \t\t\t\t// FullHttpRequests.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462406228", "bodyText": "We should not try to submit a response; since we are either already shutdown or in the process of shutting down the response may or may not go through. Better to be consistent and not respond in either case.\nOne thing we can do though is close the channel via ctx.channel().close().", "author": "zentol", "createdAt": "2020-07-29T15:53:22Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "originalCommit": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5ODMzOQ==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462698339", "bodyText": "I will test ctx.channel().close() .\nwhat's your mean about\nWhat about catching the NullPointerException within handleException? ?", "author": "Tartarus0zm", "createdAt": "2020-07-30T02:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjgyNg==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462882826", "bodyText": "As of right now, should the NPE occur then all the user/dev sees is pretty much the same stack trace you got. That's not ideal.\nSo instead, let's handle the case explicitly:\nprivate CompletableFuture<Void> handleException(Throwable throwable, ChannelHandlerContext ctx, HttpRequest httpRequest) {\n\t\tFlinkHttpObjectAggregator flinkHttpObjectAggregator = ctx.pipeline().get(FlinkHttpObjectAggregator.class);\n\t\tif (flinkHttpObjectAggregator == null) {\n\t\t\tlog.warn(\"The connection was closed unexpectedly.\");\n\t\t\treturn CompletableFuture.completedFuture(null);\n\t\t}\n\t\t...", "author": "zentol", "createdAt": "2020-07-30T09:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDc3MQ==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462894771", "bodyText": "Do we still need to modify the processing logic of requestProcessingFuture? If we avoid NPE, the changes to requestProcessingFuture may not be necessary.", "author": "Tartarus0zm", "createdAt": "2020-07-30T10:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MzA0NA==", "url": "https://github.com/apache/flink/pull/13020#discussion_r463493044", "bodyText": "they are still useful for preventing   something similar from happening again.", "author": "zentol", "createdAt": "2020-07-31T09:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNzQ5Mg==", "url": "https://github.com/apache/flink/pull/13020#discussion_r463637492", "bodyText": "yes", "author": "Tartarus0zm", "createdAt": "2020-07-31T14:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "41ac35d96c420b40628fc9a64aca80c54cb78081", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\nindex 5e9ab3d075..91e9f982d4 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\n\n@@ -115,24 +115,16 @@ public abstract class AbstractHandler<T extends RestfulGateway, R extends Reques\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n-\t\tsynchronized (this) {\n-\t\t\tif (terminationFuture != null) {\n-\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n-\t\t\t\t\t+ \" had already been closed\";\n-\t\t\t\tlog.warn(errorMsg);\n-\t\t\t\tHandlerUtils.sendErrorResponse(\n-\t\t\t\t\tctx,\n-\t\t\t\t\thttpRequest,\n-\t\t\t\t\tnew ErrorResponseBody(errorMsg),\n-\t\t\t\t\tHttpResponseStatus.BAD_REQUEST,\n-\t\t\t\t\tresponseHeaders);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n-\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tif (terminationFuture != null) {\n+\t\t\t\t\tlog.warn(\"The handler instance for {} had already been closed\", untypedResponseMessageHeaders.getTargetRestEndpointURL());\n+\t\t\t\t\tctx.channel().close();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\t}\n \t\t\tif (!(httpRequest instanceof FullHttpRequest)) {\n \t\t\t\t// The RestServerEndpoint defines a HttpObjectAggregator in the pipeline that always returns\n \t\t\t\t// FullHttpRequests.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjU4Nw==", "url": "https://github.com/apache/flink/pull/13020#discussion_r462406587", "bodyText": "this also needs to happen under the lock, otherwise the race condition isn't fixed. (just move the entire synchronized block here)", "author": "zentol", "createdAt": "2020-07-29T15:53:53Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(\n+\t\t\t\t\tctx,\n+\t\t\t\t\thttpRequest,\n+\t\t\t\t\tnew ErrorResponseBody(errorMsg),\n+\t\t\t\t\tHttpResponseStatus.BAD_REQUEST,\n+\t\t\t\t\tresponseHeaders);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n \t\t\tinFlightRequestTracker.registerRequest();", "originalCommit": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41ac35d96c420b40628fc9a64aca80c54cb78081", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\nindex 5e9ab3d075..91e9f982d4 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java\n\n@@ -115,24 +115,16 @@ public abstract class AbstractHandler<T extends RestfulGateway, R extends Reques\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n-\t\tsynchronized (this) {\n-\t\t\tif (terminationFuture != null) {\n-\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n-\t\t\t\t\t+ \" had already been closed\";\n-\t\t\t\tlog.warn(errorMsg);\n-\t\t\t\tHandlerUtils.sendErrorResponse(\n-\t\t\t\t\tctx,\n-\t\t\t\t\thttpRequest,\n-\t\t\t\t\tnew ErrorResponseBody(errorMsg),\n-\t\t\t\t\tHttpResponseStatus.BAD_REQUEST,\n-\t\t\t\t\tresponseHeaders);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n-\n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n-\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tif (terminationFuture != null) {\n+\t\t\t\t\tlog.warn(\"The handler instance for {} had already been closed\", untypedResponseMessageHeaders.getTargetRestEndpointURL());\n+\t\t\t\t\tctx.channel().close();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\t}\n \t\t\tif (!(httpRequest instanceof FullHttpRequest)) {\n \t\t\t\t// The RestServerEndpoint defines a HttpObjectAggregator in the pipeline that always returns\n \t\t\t\t// FullHttpRequests.\n"}}, {"oid": "41ac35d96c420b40628fc9a64aca80c54cb78081", "url": "https://github.com/apache/flink/commit/41ac35d96c420b40628fc9a64aca80c54cb78081", "message": "[FLINK-18663][rest] does not handle new request if handler had been closed", "committedDate": "2020-07-30T13:07:08Z", "type": "forcePushed"}, {"oid": "90f1c667ed460cca944aed31402e89a4216b2d14", "url": "https://github.com/apache/flink/commit/90f1c667ed460cca944aed31402e89a4216b2d14", "message": "[FLINK-18663][rest] Improve exception handling\n\n- ensure that request finalization runs even if handleException throws an exception\n- catch NPE in handleException, which occurs if the client closes the connection", "committedDate": "2020-08-03T08:46:33Z", "type": "commit"}, {"oid": "14688aa89dbf3d9c5f0df1052f0f804ae6f79b07", "url": "https://github.com/apache/flink/commit/14688aa89dbf3d9c5f0df1052f0f804ae6f79b07", "message": "[FLINK-18663][rest] Exit early if shutdown has started", "committedDate": "2020-08-03T08:46:33Z", "type": "forcePushed"}, {"oid": "5fd5769688d1f66c54dceca0b135ebc3d5c4b604", "url": "https://github.com/apache/flink/commit/5fd5769688d1f66c54dceca0b135ebc3d5c4b604", "message": "[FLINK-18663][rest] Exit early if shutdown has started", "committedDate": "2020-08-03T13:01:39Z", "type": "commit"}, {"oid": "0d374f52f0c0c40585dc9bad5962aa52cb602b21", "url": "https://github.com/apache/flink/commit/0d374f52f0c0c40585dc9bad5962aa52cb602b21", "message": "[hotfix][rest][tests] Replace HandlerBlocker with BlockerSync", "committedDate": "2020-08-03T13:01:39Z", "type": "commit"}, {"oid": "0d374f52f0c0c40585dc9bad5962aa52cb602b21", "url": "https://github.com/apache/flink/commit/0d374f52f0c0c40585dc9bad5962aa52cb602b21", "message": "[hotfix][rest][tests] Replace HandlerBlocker with BlockerSync", "committedDate": "2020-08-03T13:01:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjQ4Nw==", "url": "https://github.com/apache/flink/pull/13020#discussion_r469236487", "bodyText": "I think I have given you ill-advice here @Tartarus0zm and @zentol. Since we want to support asynchronous operations such as cancel-with-savepoint which only shuts down the cluster (per-job-mode) if the result has been served, it is a valid state that terminationFuture is non null and we still want to process the request.\nWhat I would suggest is to change this line into if (terminationFuture != null && terminationFuture.isDone()) {. Moreover, all inFlightRequestTracker modifying calls should happen under this lock.", "author": "tillrohrmann", "createdAt": "2020-08-12T12:53:52Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -116,7 +117,15 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n-\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (terminationFuture != null) {", "originalCommit": "0d374f52f0c0c40585dc9bad5962aa52cb602b21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}