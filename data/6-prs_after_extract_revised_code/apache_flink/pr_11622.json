{"pr_number": 11622, "pr_title": "[FLINK-16913][configuration, statebackend] Migrated StateBackends to use ReadableConfig instead of Configuration", "pr_createdAt": "2020-04-02T15:46:09Z", "pr_url": "https://github.com/apache/flink/pull/11622", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDU2MQ==", "url": "https://github.com/apache/flink/pull/11622#discussion_r402430561", "bodyText": "Is it a problem that the type of the config option changes. You mentioned to me before that this could impact users, which is correct.\nI would not be too worried, though, because most users probably would not use this in code but rather in the yaml config.", "author": "aljoscha", "createdAt": "2020-04-02T16:04:30Z", "path": "flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBOptions.java", "diffHunk": "@@ -47,9 +48,10 @@\n \t * Choice of timer service implementation.\n \t */\n \t@Documentation.Section(Documentation.Sections.STATE_BACKEND_ROCKSDB)\n-\tpublic static final ConfigOption<String> TIMER_SERVICE_FACTORY = ConfigOptions\n+\tpublic static final ConfigOption<PriorityQueueStateType> TIMER_SERVICE_FACTORY = ConfigOptions", "originalCommit": "abc70d0db7c027b6ff3777d38ac9f67699b8659f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMTc5NA==", "url": "https://github.com/apache/flink/pull/11622#discussion_r402431794", "bodyText": "Also, weirdly named option: it's a \"factory\" but the type is an enum? \ud83d\ude05", "author": "aljoscha", "createdAt": "2020-04-02T16:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDU3OA==", "url": "https://github.com/apache/flink/pull/11622#discussion_r402440578", "bodyText": "I would not be too worried, though, because most users probably would not use this in code but rather in the yaml config.\n\nThat was also my thinking after looking at it again. The class RocksDBOptions has no annotation, so it is not necessarily Public. Moreover I think we do not advertise using those options directly. Programatically users should rather use org.apache.flink.contrib.streaming.state.RocksDBStateBackend#setPriorityQueueStateType, if I am not mistaken.", "author": "dawidwys", "createdAt": "2020-04-02T16:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMDU2MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMjg1Nw==", "url": "https://github.com/apache/flink/pull/11622#discussion_r402432857", "bodyText": "Nit: you could just turn the field into a ConfigOption.", "author": "aljoscha", "createdAt": "2020-04-02T16:07:44Z", "path": "flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java", "diffHunk": "@@ -792,8 +794,11 @@ public ColumnFamilyOptions createColumnOptions(ColumnFamilyOptions currentOption\n \t\t}\n \n \t\t@Override\n-\t\tpublic RocksDBOptionsFactory configure(Configuration configuration) {\n-\t\t\tthis.backgroundJobs = configuration.getInteger(BACKGROUND_JOBS_OPTION, DEFAULT_BACKGROUND_JOBS);\n+\t\tpublic RocksDBOptionsFactory configure(ReadableConfig configuration) {\n+\t\t\tthis.backgroundJobs = configuration.get(\n+\t\t\t\tConfigOptions.key(BACKGROUND_JOBS_OPTION)", "originalCommit": "abc70d0db7c027b6ff3777d38ac9f67699b8659f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49b318a91e27cbd88b5ca929761bb22881b21ea8", "chunk": "diff --git a/flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java b/flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java\nindex 8ee50f9ee9..d3eb6dbc28 100644\n--- a/flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java\n+++ b/flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/RocksDBStateBackendConfigTest.java\n\n@@ -795,10 +795,7 @@ public class RocksDBStateBackendConfigTest {\n \n \t\t@Override\n \t\tpublic RocksDBOptionsFactory configure(ReadableConfig configuration) {\n-\t\t\tthis.backgroundJobs = configuration.get(\n-\t\t\t\tConfigOptions.key(BACKGROUND_JOBS_OPTION)\n-\t\t\t\t\t.intType()\n-\t\t\t\t\t.defaultValue(DEFAULT_BACKGROUND_JOBS));\n+\t\t\tthis.backgroundJobs = configuration.get(BACKGROUND_JOBS_OPTION);\n \t\t\treturn this;\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzMzUwNg==", "url": "https://github.com/apache/flink/pull/11622#discussion_r402433506", "bodyText": "wouldn't config.set(RocksDBOptions.TIMER_SERVICE_FACTORY, ...) work?", "author": "aljoscha", "createdAt": "2020-04-02T16:08:42Z", "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeWindowCheckpointingITCase.java", "diffHunk": "@@ -179,7 +179,7 @@ private Configuration getConfiguration() throws Exception {\n \t\t\tcase ROCKSDB_INCREMENTAL:\n \t\t\t\t// Test RocksDB based timer service as well\n \t\t\t\tconfig.setString(\n-\t\t\t\t\tRocksDBOptions.TIMER_SERVICE_FACTORY,\n+\t\t\t\t\tRocksDBOptions.TIMER_SERVICE_FACTORY.key(),", "originalCommit": "abc70d0db7c027b6ff3777d38ac9f67699b8659f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49b318a91e27cbd88b5ca929761bb22881b21ea8", "chunk": "diff --git a/flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeWindowCheckpointingITCase.java b/flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeWindowCheckpointingITCase.java\nindex cb8daaf83b..81e23c94e6 100644\n--- a/flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeWindowCheckpointingITCase.java\n+++ b/flink-tests/src/test/java/org/apache/flink/test/checkpointing/EventTimeWindowCheckpointingITCase.java\n\n@@ -178,9 +178,7 @@ public class EventTimeWindowCheckpointingITCase extends TestLogger {\n \t\t\t}\n \t\t\tcase ROCKSDB_INCREMENTAL:\n \t\t\t\t// Test RocksDB based timer service as well\n-\t\t\t\tconfig.setString(\n-\t\t\t\t\tRocksDBOptions.TIMER_SERVICE_FACTORY.key(),\n-\t\t\t\t\tRocksDBStateBackend.PriorityQueueStateType.ROCKSDB.toString());\n+\t\t\t\tconfig.set(RocksDBOptions.TIMER_SERVICE_FACTORY, RocksDBStateBackend.PriorityQueueStateType.ROCKSDB);\n \t\t\t\tsetupRocksDB(config, 16, true);\n \t\t\t\tbreak;\n \t\t\tcase ROCKSDB_INCREMENTAL_ZK: {\n"}}, {"oid": "49b318a91e27cbd88b5ca929761bb22881b21ea8", "url": "https://github.com/apache/flink/commit/49b318a91e27cbd88b5ca929761bb22881b21ea8", "message": "[FLINK-16913] Migrate StateBackends to use\nReadableConfig instead of Configuration\n\nStateBackendFactories do not need a full read and write access to the\nConfiguration object. It's sufficient to have read only access. Moreover\nthe ReadableConfig is a lightweight interface that can be implemented in\nother ways, not just through the Configuration. Lastly we exposed this\nlightweight interface as a configuration entry point for\nExecutionEnvironments. This change will make it possible to pass the\nReadableConfig directly to the StateBackendFactories without fragile\nadapters.", "committedDate": "2020-04-02T17:41:30Z", "type": "forcePushed"}, {"oid": "3d16e055f832e4449d68a711c49c52f5fbb4fa94", "url": "https://github.com/apache/flink/commit/3d16e055f832e4449d68a711c49c52f5fbb4fa94", "message": "[FLINK-16913] Migrate StateBackends to use\nReadableConfig instead of Configuration\n\nStateBackendFactories do not need a full read and write access to the\nConfiguration object. It's sufficient to have read only access. Moreover\nthe ReadableConfig is a lightweight interface that can be implemented in\nother ways, not just through the Configuration. Lastly we exposed this\nlightweight interface as a configuration entry point for\nExecutionEnvironments. This change will make it possible to pass the\nReadableConfig directly to the StateBackendFactories without fragile\nadapters.", "committedDate": "2020-04-03T07:38:55Z", "type": "forcePushed"}, {"oid": "3a348f8db520e8b5e6518ae0c47575edd3e98dda", "url": "https://github.com/apache/flink/commit/3a348f8db520e8b5e6518ae0c47575edd3e98dda", "message": "[FLINK-16913] Migrate StateBackends to use ReadableConfig instead of Configuration\n\nStateBackendFactories do not need a full read and write access to the\nConfiguration object. It's sufficient to have read only access. Moreover\nthe ReadableConfig is a lightweight interface that can be implemented in\nother ways, not just through the Configuration. Lastly we exposed this\nlightweight interface as a configuration entry point for\nExecutionEnvironments. This change will make it possible to pass the\nReadableConfig directly to the StateBackendFactories without fragile\nadapters.", "committedDate": "2020-04-03T07:50:32Z", "type": "forcePushed"}, {"oid": "46e2d9b408be3eecbd83a8aeb8bd1aa911cd89b7", "url": "https://github.com/apache/flink/commit/46e2d9b408be3eecbd83a8aeb8bd1aa911cd89b7", "message": "[FLINK-16913] Migrate StateBackends to use ReadableConfig instead of Configuration\n\nStateBackendFactories do not need a full read and write access to the\nConfiguration object. It's sufficient to have read only access. Moreover\nthe ReadableConfig is a lightweight interface that can be implemented in\nother ways, not just through the Configuration. Lastly we exposed this\nlightweight interface as a configuration entry point for\nExecutionEnvironments. This change will make it possible to pass the\nReadableConfig directly to the StateBackendFactories without fragile\nadapters.", "committedDate": "2020-04-05T11:41:53Z", "type": "commit"}, {"oid": "46e2d9b408be3eecbd83a8aeb8bd1aa911cd89b7", "url": "https://github.com/apache/flink/commit/46e2d9b408be3eecbd83a8aeb8bd1aa911cd89b7", "message": "[FLINK-16913] Migrate StateBackends to use ReadableConfig instead of Configuration\n\nStateBackendFactories do not need a full read and write access to the\nConfiguration object. It's sufficient to have read only access. Moreover\nthe ReadableConfig is a lightweight interface that can be implemented in\nother ways, not just through the Configuration. Lastly we exposed this\nlightweight interface as a configuration entry point for\nExecutionEnvironments. This change will make it possible to pass the\nReadableConfig directly to the StateBackendFactories without fragile\nadapters.", "committedDate": "2020-04-05T11:41:53Z", "type": "forcePushed"}]}