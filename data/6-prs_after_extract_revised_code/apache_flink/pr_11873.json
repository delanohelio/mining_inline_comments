{"pr_number": 11873, "pr_title": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of Execution\u2026", "pr_createdAt": "2020-04-23T06:21:08Z", "pr_url": "https://github.com/apache/flink/pull/11873", "timeline": [{"oid": "223dc2f79c617c84771b333a9b9f4ec0b5b81a31", "url": "https://github.com/apache/flink/commit/223dc2f79c617c84771b333a9b9f4ec0b5b81a31", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-04-24T08:19:18Z", "type": "forcePushed"}, {"oid": "5534ebe0d1ff7acba0f3ddd16770bc08908e301b", "url": "https://github.com/apache/flink/commit/5534ebe0d1ff7acba0f3ddd16770bc08908e301b", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-04-26T05:15:05Z", "type": "forcePushed"}, {"oid": "378634c7f6c526e73592813e4957a017d192cc5f", "url": "https://github.com/apache/flink/commit/378634c7f6c526e73592813e4957a017d192cc5f", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-07-08T05:54:54Z", "type": "forcePushed"}, {"oid": "ee878059addc8b6938d57b300e49477b52b652ac", "url": "https://github.com/apache/flink/commit/ee878059addc8b6938d57b300e49477b52b652ac", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-07-21T06:11:15Z", "type": "forcePushed"}, {"oid": "86328bd6247ecd10a2b7a00a83b41a8269cf60cf", "url": "https://github.com/apache/flink/commit/86328bd6247ecd10a2b7a00a83b41a8269cf60cf", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-07-21T08:41:32Z", "type": "forcePushed"}, {"oid": "04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "url": "https://github.com/apache/flink/commit/04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-07-22T01:50:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NzM3Mw==", "url": "https://github.com/apache/flink/pull/11873#discussion_r467667373", "bodyText": "NIT: executionVertexId would be better than executionVertexID.", "author": "zhuzhurk", "createdAt": "2020-08-10T02:52:22Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java", "diffHunk": "@@ -18,33 +18,77 @@\n \n package org.apache.flink.runtime.executiongraph;\n \n-import org.apache.flink.util.AbstractID;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n+import org.apache.flink.util.Preconditions;\n \n /**\n  * Unique identifier for the attempt to execute a tasks. Multiple attempts happen\n  * in cases of failures and recovery.\n  */\n-public class ExecutionAttemptID extends AbstractID {\n+public class ExecutionAttemptID implements java.io.Serializable {\n \n \tprivate static final long serialVersionUID = -1169683445778281344L;\n \n+\tprivate final ExecutionVertexID executionVertexID;", "originalCommit": "04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\nindex fc371bec687..c6d1acc4eee 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n\n@@ -19,6 +19,7 @@\n package org.apache.flink.runtime.executiongraph;\n \n import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.jobgraph.JobVertexID;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NzYwMg==", "url": "https://github.com/apache/flink/pull/11873#discussion_r467667602", "bodyText": "NIT: getExecutionVertexId would be better than getExecutionVertexID", "author": "zhuzhurk", "createdAt": "2020-08-10T02:53:48Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java", "diffHunk": "@@ -18,33 +18,77 @@\n \n package org.apache.flink.runtime.executiongraph;\n \n-import org.apache.flink.util.AbstractID;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n+import org.apache.flink.util.Preconditions;\n \n /**\n  * Unique identifier for the attempt to execute a tasks. Multiple attempts happen\n  * in cases of failures and recovery.\n  */\n-public class ExecutionAttemptID extends AbstractID {\n+public class ExecutionAttemptID implements java.io.Serializable {\n \n \tprivate static final long serialVersionUID = -1169683445778281344L;\n \n+\tprivate final ExecutionVertexID executionVertexID;\n+\tprivate final int attemptNumber;\n+\n+\t/**\n+\t * Get a random execution attempt id.\n+\t */\n \tpublic ExecutionAttemptID() {\n+\t\tthis(new ExecutionVertexID(), 0);\n \t}\n \n-\tpublic ExecutionAttemptID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\tpublic ExecutionAttemptID(ExecutionVertexID executionVertexID, int attemptNumber) {\n+\t\tPreconditions.checkState(attemptNumber >= 0);\n+\t\tthis.executionVertexID = Preconditions.checkNotNull(executionVertexID);\n+\t\tthis.attemptNumber = attemptNumber;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\texecutionVertexID.writeTo(buf);\n+\t\tbuf.writeInt(this.attemptNumber);\n \t}\n \n \tpublic static ExecutionAttemptID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new ExecutionAttemptID(lower, upper);\n+\t\tfinal ExecutionVertexID executionVertexID = ExecutionVertexID.fromByteBuf(buf);\n+\t\tfinal int attemptNumber = buf.readInt();\n+\t\treturn new ExecutionAttemptID(executionVertexID, attemptNumber);\n+\t}\n+\n+\t@VisibleForTesting\n+\tpublic int getAttemptNumber() {\n+\t\treturn attemptNumber;\n+\t}\n+\n+\t@VisibleForTesting\n+\tpublic ExecutionVertexID getExecutionVertexID() {", "originalCommit": "04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\nindex fc371bec687..c6d1acc4eee 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n\n@@ -19,6 +19,7 @@\n package org.apache.flink.runtime.executiongraph;\n \n import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.jobgraph.JobVertexID;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2ODIzMg==", "url": "https://github.com/apache/flink/pull/11873#discussion_r467668232", "bodyText": "I'd prefer this.executionVertexID.hashCode() * 31 + this.attemptNumber.\nThis is because attemptNumber  == 0 is very common and can result in the same hash code.", "author": "zhuzhurk", "createdAt": "2020-08-10T02:57:37Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java", "diffHunk": "@@ -18,33 +18,77 @@\n \n package org.apache.flink.runtime.executiongraph;\n \n-import org.apache.flink.util.AbstractID;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n+import org.apache.flink.util.Preconditions;\n \n /**\n  * Unique identifier for the attempt to execute a tasks. Multiple attempts happen\n  * in cases of failures and recovery.\n  */\n-public class ExecutionAttemptID extends AbstractID {\n+public class ExecutionAttemptID implements java.io.Serializable {\n \n \tprivate static final long serialVersionUID = -1169683445778281344L;\n \n+\tprivate final ExecutionVertexID executionVertexID;\n+\tprivate final int attemptNumber;\n+\n+\t/**\n+\t * Get a random execution attempt id.\n+\t */\n \tpublic ExecutionAttemptID() {\n+\t\tthis(new ExecutionVertexID(), 0);\n \t}\n \n-\tpublic ExecutionAttemptID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\tpublic ExecutionAttemptID(ExecutionVertexID executionVertexID, int attemptNumber) {\n+\t\tPreconditions.checkState(attemptNumber >= 0);\n+\t\tthis.executionVertexID = Preconditions.checkNotNull(executionVertexID);\n+\t\tthis.attemptNumber = attemptNumber;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\texecutionVertexID.writeTo(buf);\n+\t\tbuf.writeInt(this.attemptNumber);\n \t}\n \n \tpublic static ExecutionAttemptID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new ExecutionAttemptID(lower, upper);\n+\t\tfinal ExecutionVertexID executionVertexID = ExecutionVertexID.fromByteBuf(buf);\n+\t\tfinal int attemptNumber = buf.readInt();\n+\t\treturn new ExecutionAttemptID(executionVertexID, attemptNumber);\n+\t}\n+\n+\t@VisibleForTesting\n+\tpublic int getAttemptNumber() {\n+\t\treturn attemptNumber;\n+\t}\n+\n+\t@VisibleForTesting\n+\tpublic ExecutionVertexID getExecutionVertexID() {\n+\t\treturn executionVertexID;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tExecutionAttemptID that = (ExecutionAttemptID) obj;\n+\t\t\treturn that.executionVertexID.equals(this.executionVertexID)\n+\t\t\t\t&& that.attemptNumber == this.attemptNumber;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn this.executionVertexID.hashCode() ^ this.attemptNumber;", "originalCommit": "04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxMDY4NQ==", "url": "https://github.com/apache/flink/pull/11873#discussion_r471210685", "bodyText": "Good point!", "author": "KarmaGYZ", "createdAt": "2020-08-17T03:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2ODIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\nindex fc371bec687..c6d1acc4eee 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n\n@@ -19,6 +19,7 @@\n package org.apache.flink.runtime.executiongraph;\n \n import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.jobgraph.JobVertexID;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MDU3MA==", "url": "https://github.com/apache/flink/pull/11873#discussion_r467670570", "bodyText": "Could we introduce a util method ExecutionGraphTestUtils#createRandomExecutionVertexId() to avoid pollute production code with test code? And make it true random with a random subtaskIndex as well.", "author": "zhuzhurk", "createdAt": "2020-08-10T03:11:18Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/ExecutionVertexID.java", "diffHunk": "@@ -33,6 +35,10 @@\n \n \tprivate final int subtaskIndex;\n \n+\tpublic ExecutionVertexID() {", "originalCommit": "04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/ExecutionVertexID.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/ExecutionVertexID.java\nindex 1bd3f20d916..7889eb5e832 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/ExecutionVertexID.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/ExecutionVertexID.java\n\n@@ -35,10 +35,6 @@ public class ExecutionVertexID implements VertexID {\n \n \tprivate final int subtaskIndex;\n \n-\tpublic ExecutionVertexID() {\n-\t\tthis(new JobVertexID(), 0);\n-\t}\n-\n \tpublic ExecutionVertexID(JobVertexID jobVertexId, int subtaskIndex) {\n \t\tcheckArgument(subtaskIndex >= 0, \"subtaskIndex must be greater than or equal to 0\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MDg1OQ==", "url": "https://github.com/apache/flink/pull/11873#discussion_r467670859", "bodyText": "This constructor is for tests only. Could we introduce a test util method ExecutionGraphTestUtils#createRandomExecutionAttemptId()? The returned id consists of a random ExecutionVertexId as well as a random attemptNumber. I think it better suites the tests which wants a random ExecutionAttemptID. And we can also avoid to add a test-only code path in production.", "author": "zhuzhurk", "createdAt": "2020-08-10T03:13:06Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java", "diffHunk": "@@ -18,33 +18,77 @@\n \n package org.apache.flink.runtime.executiongraph;\n \n-import org.apache.flink.util.AbstractID;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n+import org.apache.flink.util.Preconditions;\n \n /**\n  * Unique identifier for the attempt to execute a tasks. Multiple attempts happen\n  * in cases of failures and recovery.\n  */\n-public class ExecutionAttemptID extends AbstractID {\n+public class ExecutionAttemptID implements java.io.Serializable {\n \n \tprivate static final long serialVersionUID = -1169683445778281344L;\n \n+\tprivate final ExecutionVertexID executionVertexID;\n+\tprivate final int attemptNumber;\n+\n+\t/**\n+\t * Get a random execution attempt id.\n+\t */\n \tpublic ExecutionAttemptID() {", "originalCommit": "04ebeee8b4a19b2aafee9e57a746522cd2c9654f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxODI2OQ==", "url": "https://github.com/apache/flink/pull/11873#discussion_r471218269", "bodyText": "Yes, that's a good point. However, it is currently used by production code and a lot of testing code paths. I would move this issue out of the scope of this PR. WDYT?", "author": "KarmaGYZ", "createdAt": "2020-08-17T03:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MDg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyMTQ3NA==", "url": "https://github.com/apache/flink/pull/11873#discussion_r471221474", "bodyText": "Makes sense.", "author": "zhuzhurk", "createdAt": "2020-08-17T04:07:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MDg1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\nindex fc371bec687..c6d1acc4eee 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionAttemptID.java\n\n@@ -19,6 +19,7 @@\n package org.apache.flink.runtime.executiongraph;\n \n import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.jobgraph.JobVertexID;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n \n import org.apache.flink.shaded.netty4.io.netty.buffer.ByteBuf;\n"}}, {"oid": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "url": "https://github.com/apache/flink/commit/ae7da66548039da54cf4ac664c517e2bb8eab68f", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-08-17T03:55:23Z", "type": "commit"}, {"oid": "ae7da66548039da54cf4ac664c517e2bb8eab68f", "url": "https://github.com/apache/flink/commit/ae7da66548039da54cf4ac664c517e2bb8eab68f", "message": "[FLINK-17295] Refactor the ExecutionAttemptID to consist of ExecutionVertexID and attemptNumber", "committedDate": "2020-08-17T03:55:23Z", "type": "forcePushed"}]}