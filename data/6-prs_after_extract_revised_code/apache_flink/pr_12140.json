{"pr_number": 12140, "pr_title": "[FLINK-17629] Implement format factory for JSON serialization and des\u2026", "pr_createdAt": "2020-05-14T03:20:55Z", "pr_url": "https://github.com/apache/flink/pull/12140", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1OTYxMw==", "url": "https://github.com/apache/flink/pull/12140#discussion_r424859613", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.withDescription(\"Optional flag to skip fields and rows with parse errors instead of failing;\\n\"\n          \n          \n            \n            \t\t\t\t\t+ \"fields are set to null in case of errors\");\n          \n          \n            \n            \t\t\t.withDescription(\"Optional flag to skip fields and rows with parse errors instead of failing, \"\n          \n          \n            \n            \t\t\t\t\t+ \"fields are set to null in case of errors. Default is false.\");", "author": "wuchong", "createdAt": "2020-05-14T04:08:43Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json;\n+\n+import org.apache.flink.api.common.serialization.DeserializationSchema;\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.ConfigOptions;\n+import org.apache.flink.configuration.ReadableConfig;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.connector.ChangelogMode;\n+import org.apache.flink.table.connector.format.ScanFormat;\n+import org.apache.flink.table.connector.format.SinkFormat;\n+import org.apache.flink.table.connector.sink.DynamicTableSink;\n+import org.apache.flink.table.connector.source.ScanTableSource;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.factories.DeserializationFormatFactory;\n+import org.apache.flink.table.factories.DynamicTableFactory;\n+import org.apache.flink.table.factories.FactoryUtil;\n+import org.apache.flink.table.factories.SerializationFormatFactory;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Table format factory for providing configured instances of JSON to RowData\n+ * {@link SerializationSchema} and {@link DeserializationSchema}.\n+ */\n+public class JsonFormatFactory implements\n+\t\tDeserializationFormatFactory,\n+\t\tSerializationFormatFactory {\n+\n+\tpublic static final String IDENTIFIER = \"json\";\n+\n+\t// ------------------------------------------------------------------------\n+\t//  Options\n+\t// ------------------------------------------------------------------------\n+\n+\tprivate static final ConfigOption<Boolean> FAIL_ON_MISSING_FIELD = ConfigOptions\n+\t\t\t.key(\"fail-on-missing-field\")\n+\t\t\t.booleanType()\n+\t\t\t.defaultValue(false)\n+\t\t\t.withDescription(\"Optional flag to specify whether to fail if a field is missing or not, false by default\");\n+\n+\tprivate static final ConfigOption<Boolean> IGNORE_PARSE_ERRORS = ConfigOptions\n+\t\t\t.key(\"ignore-parse-errors\")\n+\t\t\t.booleanType()\n+\t\t\t.defaultValue(false)\n+\t\t\t.withDescription(\"Optional flag to skip fields and rows with parse errors instead of failing;\\n\"\n+\t\t\t\t\t+ \"fields are set to null in case of errors\");", "originalCommit": "75b40a20b360133a128d0b2cfbc9a6754980bbdc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b409342d8d49086fa1b58e2caaf92b321052fb", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\nindex 26ae59c1227..07e6d2d65c4 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\n\n@@ -67,7 +67,7 @@ public class JsonFormatFactory implements\n \t\t\t.booleanType()\n \t\t\t.defaultValue(false)\n \t\t\t.withDescription(\"Optional flag to skip fields and rows with parse errors instead of failing;\\n\"\n-\t\t\t\t\t+ \"fields are set to null in case of errors\");\n+\t\t\t\t\t+ \"fields are set to null in case of errors, false by default\");\n \n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2MDA3MQ==", "url": "https://github.com/apache/flink/pull/12140#discussion_r424860071", "bodyText": "Can be simplified to :\nboolean failOnMissingField = tableOptions.get(FAIL_ON_MISSING_FIELD);\nboolean ignoreParseErrors = tableOptions.get(IGNORE_PARSE_ERRORS);", "author": "wuchong", "createdAt": "2020-05-14T04:10:42Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json;\n+\n+import org.apache.flink.api.common.serialization.DeserializationSchema;\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.ConfigOptions;\n+import org.apache.flink.configuration.ReadableConfig;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.connector.ChangelogMode;\n+import org.apache.flink.table.connector.format.ScanFormat;\n+import org.apache.flink.table.connector.format.SinkFormat;\n+import org.apache.flink.table.connector.sink.DynamicTableSink;\n+import org.apache.flink.table.connector.source.ScanTableSource;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.factories.DeserializationFormatFactory;\n+import org.apache.flink.table.factories.DynamicTableFactory;\n+import org.apache.flink.table.factories.FactoryUtil;\n+import org.apache.flink.table.factories.SerializationFormatFactory;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Table format factory for providing configured instances of JSON to RowData\n+ * {@link SerializationSchema} and {@link DeserializationSchema}.\n+ */\n+public class JsonFormatFactory implements\n+\t\tDeserializationFormatFactory,\n+\t\tSerializationFormatFactory {\n+\n+\tpublic static final String IDENTIFIER = \"json\";\n+\n+\t// ------------------------------------------------------------------------\n+\t//  Options\n+\t// ------------------------------------------------------------------------\n+\n+\tprivate static final ConfigOption<Boolean> FAIL_ON_MISSING_FIELD = ConfigOptions\n+\t\t\t.key(\"fail-on-missing-field\")\n+\t\t\t.booleanType()\n+\t\t\t.defaultValue(false)\n+\t\t\t.withDescription(\"Optional flag to specify whether to fail if a field is missing or not, false by default\");\n+\n+\tprivate static final ConfigOption<Boolean> IGNORE_PARSE_ERRORS = ConfigOptions\n+\t\t\t.key(\"ignore-parse-errors\")\n+\t\t\t.booleanType()\n+\t\t\t.defaultValue(false)\n+\t\t\t.withDescription(\"Optional flag to skip fields and rows with parse errors instead of failing;\\n\"\n+\t\t\t\t\t+ \"fields are set to null in case of errors\");\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic ScanFormat<DeserializationSchema<RowData>> createScanFormat(\n+\t\t\tDynamicTableFactory.Context context,\n+\t\t\tReadableConfig formatOptions) {\n+\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n+\t\tvalidateFormatOptions(formatOptions);\n+\n+\t\tfinal boolean failOnMissingField = formatOptions.get(FAIL_ON_MISSING_FIELD);\n+\t\tfinal boolean ignoreParseErrors = formatOptions.get(IGNORE_PARSE_ERRORS);\n+\n+\t\treturn new ScanFormat<DeserializationSchema<RowData>>() {\n+\t\t\t@Override\n+\t\t\tpublic DeserializationSchema<RowData> createScanFormat(\n+\t\t\t\t\tScanTableSource.Context scanContext,\n+\t\t\t\t\tDataType producedDataType) {\n+\t\t\t\tfinal RowType rowType = (RowType) producedDataType.getLogicalType();\n+\t\t\t\tfinal TypeInformation<RowData> rowDataTypeInfo =\n+\t\t\t\t\t\t(TypeInformation<RowData>) scanContext.createTypeInformation(producedDataType);\n+\t\t\t\treturn new JsonRowDataDeserializationSchema(\n+\t\t\t\t\t\trowType,\n+\t\t\t\t\t\trowDataTypeInfo,\n+\t\t\t\t\t\tfailOnMissingField,\n+\t\t\t\t\t\tignoreParseErrors);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic ChangelogMode getChangelogMode() {\n+\t\t\t\treturn ChangelogMode.insertOnly();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic SinkFormat<SerializationSchema<RowData>> createSinkFormat(\n+\t\t\tDynamicTableFactory.Context context,\n+\t\t\tReadableConfig formatOptions) {\n+\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n+\n+\t\treturn new SinkFormat<SerializationSchema<RowData>>() {\n+\t\t\t@Override\n+\t\t\tpublic SerializationSchema<RowData> createSinkFormat(\n+\t\t\t\t\tDynamicTableSink.Context context,\n+\t\t\t\t\tDataType consumedDataType) {\n+\t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n+\t\t\t\treturn new JsonRowDataSerializationSchema(rowType);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic ChangelogMode getChangelogMode() {\n+\t\t\t\treturn ChangelogMode.insertOnly();\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t@Override\n+\tpublic String factoryIdentifier() {\n+\t\treturn IDENTIFIER;\n+\t}\n+\n+\t@Override\n+\tpublic Set<ConfigOption<?>> requiredOptions() {\n+\t\treturn Collections.emptySet();\n+\t}\n+\n+\t@Override\n+\tpublic Set<ConfigOption<?>> optionalOptions() {\n+\t\tSet<ConfigOption<?>> options = new HashSet<>();\n+\t\toptions.add(FAIL_ON_MISSING_FIELD);\n+\t\toptions.add(IGNORE_PARSE_ERRORS);\n+\t\treturn options;\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t//  Validation\n+\t// ------------------------------------------------------------------------\n+\n+\tprivate void validateFormatOptions(ReadableConfig tableOptions) {\n+\t\tboolean failOnMissingField = tableOptions.getOptional(FAIL_ON_MISSING_FIELD)\n+\t\t\t\t.orElse(false);\n+\t\tboolean ignoreParseErrors = tableOptions.getOptional(IGNORE_PARSE_ERRORS)\n+\t\t\t\t.orElse(false);", "originalCommit": "75b40a20b360133a128d0b2cfbc9a6754980bbdc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68b409342d8d49086fa1b58e2caaf92b321052fb", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\nindex 26ae59c1227..07e6d2d65c4 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\n\n@@ -67,7 +67,7 @@ public class JsonFormatFactory implements\n \t\t\t.booleanType()\n \t\t\t.defaultValue(false)\n \t\t\t.withDescription(\"Optional flag to skip fields and rows with parse errors instead of failing;\\n\"\n-\t\t\t\t\t+ \"fields are set to null in case of errors\");\n+\t\t\t\t\t+ \"fields are set to null in case of errors, false by default\");\n \n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2MTE4Mw==", "url": "https://github.com/apache/flink/pull/12140#discussion_r424861183", "bodyText": "Could you use the same validation as above? I think we will introduce some new options for json seriliazation soon.", "author": "wuchong", "createdAt": "2020-05-14T04:15:29Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json;\n+\n+import org.apache.flink.api.common.serialization.DeserializationSchema;\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.catalog.CatalogTableImpl;\n+import org.apache.flink.table.catalog.ObjectIdentifier;\n+import org.apache.flink.table.connector.sink.DynamicTableSink;\n+import org.apache.flink.table.connector.source.DynamicTableSource;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.factories.FactoryUtil;\n+import org.apache.flink.table.factories.TestDynamicTableFactory;\n+import org.apache.flink.table.runtime.connector.sink.SinkRuntimeProviderContext;\n+import org.apache.flink.table.runtime.connector.source.ScanRuntimeProviderContext;\n+import org.apache.flink.table.runtime.typeutils.RowDataTypeInfo;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static org.apache.flink.util.CoreMatchers.containsCause;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for the {@link JsonFormatFactory}.\n+ */\n+public class JsonFormatFactoryTest extends TestLogger {\n+\t@Rule\n+\tpublic ExpectedException thrown = ExpectedException.none();\n+\n+\tprivate static final TableSchema SCHEMA = TableSchema.builder()\n+\t\t\t.field(\"field1\", DataTypes.BOOLEAN())\n+\t\t\t.field(\"field2\", DataTypes.INT())\n+\t\t\t.build();\n+\n+\tprivate static final RowType ROW_TYPE = (RowType) SCHEMA.toRowDataType().getLogicalType();\n+\n+\t@Test\n+\tpublic void testSeDeSchema() {\n+\t\tfinal Map<String, String> tableOptions = getAllOptions();\n+\n+\t\ttestSchemaSerializationSchema(tableOptions);\n+\n+\t\ttestSchemaDeserializationSchema(tableOptions);\n+\t}\n+\n+\t@Test\n+\tpublic void testFailOnMissingField() {\n+\t\tfinal Map<String, String> tableOptions = getModifyOptions(\n+\t\t\t\toptions -> options.put(\"json.fail-on-missing-field\", \"true\"));\n+\n+\t\tthrown.expect(ValidationException.class);\n+\t\tthrown.expect(containsCause(new ValidationException(\"fail-on-missing-field and ignore-parse-errors shouldn't both be true.\")));\n+\t\ttestSchemaDeserializationSchema(tableOptions);\n+\t}\n+\n+\t@Test\n+\tpublic void testInvalidOptionForIgnoreParseErrors() {\n+\t\tfinal Map<String, String> tableOptions = getModifyOptions(\n+\t\t\t\toptions -> options.put(\"json.ignore-parse-errors\", \"abc\"));\n+\n+\t\tthrown.expect(ValidationException.class);\n+\t\tthrown.expect(containsCause(new IllegalArgumentException(\"Unrecognized option for boolean: abc. Expected either true or false(case insensitive)\")));\n+\t\ttestSchemaDeserializationSchema(tableOptions);\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t//  Utilities\n+\t// ------------------------------------------------------------------------\n+\n+\tprivate void testSchemaDeserializationSchema(Map<String, String> options) {\n+\t\tfinal JsonRowDataDeserializationSchema expectedDeser =\n+\t\t\t\tnew JsonRowDataDeserializationSchema(\n+\t\t\t\t\t\tROW_TYPE,\n+\t\t\t\t\t\tnew RowDataTypeInfo(ROW_TYPE),\n+\t\t\t\t\t\tfalse,\n+\t\t\t\t\t\ttrue);\n+\n+\t\tfinal DynamicTableSource actualSource = createTableSource(options);\n+\t\tassert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n+\t\tTestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n+\t\t\t\t(TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n+\n+\t\tDeserializationSchema<RowData> actualDeser = scanSourceMock.sourceValueFormat\n+\t\t\t\t.createScanFormat(\n+\t\t\t\t\t\tScanRuntimeProviderContext.INSTANCE,\n+\t\t\t\t\t\tSCHEMA.toRowDataType());\n+\n+\t\tassertEquals(expectedDeser, actualDeser);\n+\t}\n+\n+\tprivate void testSchemaSerializationSchema(Map<String, String> options) {\n+\t\tfinal DynamicTableSink actualSink = createTableSink(options);\n+\t\tassert actualSink instanceof TestDynamicTableFactory.DynamicTableSinkMock;\n+\t\tTestDynamicTableFactory.DynamicTableSinkMock sinkMock =\n+\t\t\t\t(TestDynamicTableFactory.DynamicTableSinkMock) actualSink;\n+\n+\t\tSerializationSchema<RowData> actualSer = sinkMock.sinkValueFormat\n+\t\t\t\t.createSinkFormat(\n+\t\t\t\t\t\tnew SinkRuntimeProviderContext(false),\n+\t\t\t\t\t\tSCHEMA.toRowDataType());\n+\n+\t\tassertThat(actualSer, instanceOf(JsonRowDataSerializationSchema.class));", "originalCommit": "75b40a20b360133a128d0b2cfbc9a6754980bbdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2NDI1MQ==", "url": "https://github.com/apache/flink/pull/12140#discussion_r424864251", "bodyText": "Would add equals and hashcode for the serialization schema.", "author": "danny0405", "createdAt": "2020-05-14T04:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2MTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "68b409342d8d49086fa1b58e2caaf92b321052fb", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java\nindex 8ab29952881..7638378bc42 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java\n\n@@ -46,9 +46,7 @@ import java.util.Map;\n import java.util.function.Consumer;\n \n import static org.apache.flink.util.CoreMatchers.containsCause;\n-import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertThat;\n \n /**\n  * Tests for the {@link JsonFormatFactory}.\n"}}, {"oid": "ccca94f68b3c86ffc3ef267808a5b42e50d12990", "url": "https://github.com/apache/flink/commit/ccca94f68b3c86ffc3ef267808a5b42e50d12990", "message": "[FLINK-17629] Implement format factory for JSON serialization and deserialization schema", "committedDate": "2020-05-14T12:22:38Z", "type": "commit"}, {"oid": "68b409342d8d49086fa1b58e2caaf92b321052fb", "url": "https://github.com/apache/flink/commit/68b409342d8d49086fa1b58e2caaf92b321052fb", "message": "Fix Jark's review comment address", "committedDate": "2020-05-14T12:22:39Z", "type": "commit"}, {"oid": "68b409342d8d49086fa1b58e2caaf92b321052fb", "url": "https://github.com/apache/flink/commit/68b409342d8d49086fa1b58e2caaf92b321052fb", "message": "Fix Jark's review comment address", "committedDate": "2020-05-14T12:22:39Z", "type": "forcePushed"}]}