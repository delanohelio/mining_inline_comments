{"pr_number": 11303, "pr_title": "[FLINK-16245] Decoupling user classloader from context classloader.", "pr_createdAt": "2020-03-04T07:44:42Z", "pr_url": "https://github.com/apache/flink/pull/11303", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0OTM5MQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387549391", "bodyText": "is this constructor necessary?", "author": "zentol", "createdAt": "2020-03-04T09:40:57Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/CloseableClassLoader.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.execution.librarycache;\n+\n+import java.io.Closeable;\n+\n+/**\n+ * A {@link ClassLoader} that can be closed.\n+ *\n+ * <p>Unfortunately, ClassLoader is not an interface and does not implement {@link Closeable}, such that it is\n+ * impossible to cleanly use interfaces to return a closeable ClassLoader. This class aims to provide at least some\n+ * abstraction of the underlying implementation.\n+ */\n+public abstract class CloseableClassLoader extends ClassLoader implements Closeable {\n+\tpublic CloseableClassLoader(ClassLoader parent) {\n+\t\tsuper(parent);\n+\t}\n+\n+\tpublic CloseableClassLoader() {", "originalCommit": "af7e6a441a3f9105e4cfda044cc0a76331c91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58d4f48014cb2860dc97aecd9c58304df4521b5a", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/CloseableClassLoader.java b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/CloseableClassLoader.java\nindex e404becdd45..d2f1b2e12c2 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/CloseableClassLoader.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/CloseableClassLoader.java\n\n@@ -30,7 +30,4 @@ public abstract class CloseableClassLoader extends ClassLoader implements Closea\n \tpublic CloseableClassLoader(ClassLoader parent) {\n \t\tsuper(parent);\n \t}\n-\n-\tpublic CloseableClassLoader() {\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDYxMQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387550611", "bodyText": "why is this method necessary? Shouldn't the inner classloader handle this?", "author": "zentol", "createdAt": "2020-03-04T09:43:10Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java", "diffHunk": "@@ -82,4 +91,78 @@ public static ResolveOrder fromString(String resolveOrder) {\n \t\t\tsuper(urls, parent);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Ensures that holding a reference on the context class loader outliving the scope of user code does not prevent\n+\t * the user classloader to be garbage collected (FLINK-16245).\n+\t *\n+\t * <p>This classloader delegates to the actual user classloader. Upon {@link #close()}, the delegate is nulled\n+\t * and can be garbage collected. Additional class resolution will be resolved solely through the bootstrap\n+\t * classloader and most likely result in ClassNotFound exceptions.\n+\t *\n+\t * @param <T> the classloader type that also needs to be closeable.\n+\t */\n+\tprivate static class SafetyNetWrapperClassLoader<T extends ClassLoader & Closeable> extends CloseableClassLoader\n+\t\t\timplements Closeable {\n+\t\tprivate static final Logger LOG = LoggerFactory.getLogger(SafetyNetWrapperClassLoader.class);\n+\n+\t\tprivate T inner;\n+\n+\t\tSafetyNetWrapperClassLoader(T inner) {\n+\t\t\tsuper(null);\n+\t\t\tthis.inner = inner;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\t\t\tif (inner != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tinner.close();\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tLOG.warn(\"Could not close user classloader\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tinner = null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+\t\t\tif (inner == null) {\n+\t\t\t\treturn super.loadClass(name, resolve);\n+\t\t\t}\n+\n+\t\t\tsynchronized (getClassLoadingLock(name)) {\n+\t\t\t\tfinal Class<?> loadedClass = findLoadedClass(name);\n+\t\t\t\tif (loadedClass != null) {\n+\t\t\t\t\treturn resolveIfNeeded(resolve, loadedClass);\n+\t\t\t\t}\n+\n+\t\t\t\treturn resolveIfNeeded(resolve, inner.loadClass(name));\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate Class<?> resolveIfNeeded(final boolean resolve, final Class<?> loadedClass) {", "originalCommit": "af7e6a441a3f9105e4cfda044cc0a76331c91c33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDgzMA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387574830", "bodyText": "loadClass(String name, boolean resolve) is protected, loadClass(String name) is not resolving by default.", "author": "AHeise", "createdAt": "2020-03-04T10:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI3NjMwMw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r391276303", "bodyText": "Now that the safety net is a URLClassLoader we can just forward the call, correct?", "author": "zentol", "createdAt": "2020-03-11T21:23:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2NDE0OA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r391564148", "bodyText": "No, still not possible.", "author": "AHeise", "createdAt": "2020-03-12T11:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjEyMjg2Mw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r392122863", "bodyText": "Added a common ancestor now.", "author": "AHeise", "createdAt": "2020-03-13T09:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "af98d15e050c902fd22deac103471195b52b9ce2", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\nindex 9b354700dbf..75a80d84921 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n\n@@ -99,17 +96,15 @@ public class FlinkUserCodeClassLoaders {\n \t * <p>This classloader delegates to the actual user classloader. Upon {@link #close()}, the delegate is nulled\n \t * and can be garbage collected. Additional class resolution will be resolved solely through the bootstrap\n \t * classloader and most likely result in ClassNotFound exceptions.\n-\t *\n-\t * @param <T> the classloader type that also needs to be closeable.\n \t */\n-\tprivate static class SafetyNetWrapperClassLoader<T extends ClassLoader & Closeable> extends CloseableClassLoader\n+\tprivate static class SafetyNetWrapperClassLoader extends URLClassLoader\n \t\t\timplements Closeable {\n \t\tprivate static final Logger LOG = LoggerFactory.getLogger(SafetyNetWrapperClassLoader.class);\n \n-\t\tprivate T inner;\n+\t\tprivate URLClassLoader inner;\n \n-\t\tSafetyNetWrapperClassLoader(T inner) {\n-\t\t\tsuper(null);\n+\t\tSafetyNetWrapperClassLoader(URLClassLoader inner) {\n+\t\t\tsuper(new URL[0], null);\n \t\t\tthis.inner = inner;\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387551180", "bodyText": "why aren't we just forwarding the call to the inner class?", "author": "zentol", "createdAt": "2020-03-04T09:44:07Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java", "diffHunk": "@@ -82,4 +91,78 @@ public static ResolveOrder fromString(String resolveOrder) {\n \t\t\tsuper(urls, parent);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Ensures that holding a reference on the context class loader outliving the scope of user code does not prevent\n+\t * the user classloader to be garbage collected (FLINK-16245).\n+\t *\n+\t * <p>This classloader delegates to the actual user classloader. Upon {@link #close()}, the delegate is nulled\n+\t * and can be garbage collected. Additional class resolution will be resolved solely through the bootstrap\n+\t * classloader and most likely result in ClassNotFound exceptions.\n+\t *\n+\t * @param <T> the classloader type that also needs to be closeable.\n+\t */\n+\tprivate static class SafetyNetWrapperClassLoader<T extends ClassLoader & Closeable> extends CloseableClassLoader\n+\t\t\timplements Closeable {\n+\t\tprivate static final Logger LOG = LoggerFactory.getLogger(SafetyNetWrapperClassLoader.class);\n+\n+\t\tprivate T inner;\n+\n+\t\tSafetyNetWrapperClassLoader(T inner) {\n+\t\t\tsuper(null);\n+\t\t\tthis.inner = inner;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\t\t\tif (inner != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tinner.close();\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tLOG.warn(\"Could not close user classloader\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tinner = null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+\t\t\tif (inner == null) {\n+\t\t\t\treturn super.loadClass(name, resolve);\n+\t\t\t}\n+\n+\t\t\tsynchronized (getClassLoadingLock(name)) {", "originalCommit": "af7e6a441a3f9105e4cfda044cc0a76331c91c33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDg0OA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387574848", "bodyText": "loadClass(String name, boolean resolve) is protected, loadClass(String name) is not resolving by default.", "author": "AHeise", "createdAt": "2020-03-04T10:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MzkxMQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387583911", "bodyText": "Since we only use it for our own custom classloaders we could modify the access level", "author": "zentol", "createdAt": "2020-03-04T10:41:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4Njk0Nw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r387586947", "bodyText": "inner is typically a URLClassLoader. We could subclass it, but I'd actually like to avoid that unless you have a strong opinion on that.", "author": "AHeise", "createdAt": "2020-03-04T10:47:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMTQ4NQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r388211485", "bodyText": "Given that inner is always a Flink[Parent|Child]FirstClassLoader, we could increase the visibility of the method.", "author": "StephanEwen", "createdAt": "2020-03-05T10:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwMTU0OA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r388301548", "bodyText": "We would need to introduce a common ancestor to Flink[Parent|Child]FirstClassLoader that does nothing but exposes loadClass.\nI'm really not convinced that this is better than do the resolution as is. It would certainly not be more concise and imho it would increase the complexity.", "author": "AHeise", "createdAt": "2020-03-05T13:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5MDcyNw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r390990727", "bodyText": "My guess is that there will be a common ancestor anyways int he future (to register disposal hooks, see here). But I am okay with having the in a follow-up effort.", "author": "StephanEwen", "createdAt": "2020-03-11T14:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMDM3Mw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r392210373", "bodyText": "Added a common ancestor now and used delegation.", "author": "AHeise", "createdAt": "2020-03-13T12:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "af98d15e050c902fd22deac103471195b52b9ce2", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\nindex 9b354700dbf..75a80d84921 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n\n@@ -99,17 +96,15 @@ public class FlinkUserCodeClassLoaders {\n \t * <p>This classloader delegates to the actual user classloader. Upon {@link #close()}, the delegate is nulled\n \t * and can be garbage collected. Additional class resolution will be resolved solely through the bootstrap\n \t * classloader and most likely result in ClassNotFound exceptions.\n-\t *\n-\t * @param <T> the classloader type that also needs to be closeable.\n \t */\n-\tprivate static class SafetyNetWrapperClassLoader<T extends ClassLoader & Closeable> extends CloseableClassLoader\n+\tprivate static class SafetyNetWrapperClassLoader extends URLClassLoader\n \t\t\timplements Closeable {\n \t\tprivate static final Logger LOG = LoggerFactory.getLogger(SafetyNetWrapperClassLoader.class);\n \n-\t\tprivate T inner;\n+\t\tprivate URLClassLoader inner;\n \n-\t\tSafetyNetWrapperClassLoader(T inner) {\n-\t\t\tsuper(null);\n+\t\tSafetyNetWrapperClassLoader(URLClassLoader inner) {\n+\t\t\tsuper(new URL[0], null);\n \t\t\tthis.inner = inner;\n \t\t}\n \n"}}, {"oid": "58d4f48014cb2860dc97aecd9c58304df4521b5a", "url": "https://github.com/apache/flink/commit/58d4f48014cb2860dc97aecd9c58304df4521b5a", "message": "[FLINK-16245][table] Closes user classloader in LocalExecutor#closeSession.", "committedDate": "2020-03-04T10:38:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjI5Ng==", "url": "https://github.com/apache/flink/pull/11303#discussion_r388206296", "bodyText": "I would not reduce the visibility here, that is unrelated to the change, and I actually know users that have used this.", "author": "StephanEwen", "createdAt": "2020-03-05T10:31:51Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java", "diffHunk": "@@ -18,35 +18,44 @@\n \n package org.apache.flink.runtime.execution.librarycache;\n \n+import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.util.ChildFirstClassLoader;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.util.Enumeration;\n \n /**\n  * Gives the URLClassLoader a nicer name for debugging purposes.\n  */\n public class FlinkUserCodeClassLoaders {\n \n-\tpublic static URLClassLoader parentFirst(URL[] urls, ClassLoader parent) {\n+\t@VisibleForTesting\n+\tstatic URLClassLoader parentFirst(URL[] urls, ClassLoader parent) {", "originalCommit": "58d4f48014cb2860dc97aecd9c58304df4521b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5OTM4Mg==", "url": "https://github.com/apache/flink/pull/11303#discussion_r388299382", "bodyText": "Hm it's not public API and they could achieve the same thing through #create with one extra parameter.\nUnless I change the signature of this method, this method cannot use the safety net (or safety net would also need to be URLClassLoader which I wanted to avoid), which may also be fine, but I wanted to point that out explicitly.", "author": "AHeise", "createdAt": "2020-03-05T13:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NjQyMQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r390896421", "bodyText": "Why do you not want the safety net to be a URLClassLoader?", "author": "zentol", "createdAt": "2020-03-11T11:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzAyNw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r390953027", "bodyText": "I was not considering it initially because delegation pattern on implementation level felt wrong, but it's messy for ClassLoader anyways and it would solve this discussion, so I adjusted the PR.\nNow we just need to converge on loadClass.", "author": "AHeise", "createdAt": "2020-03-11T13:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4NjgwMw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r390986803", "bodyText": "Fair enough", "author": "StephanEwen", "createdAt": "2020-03-11T13:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNjI5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "af98d15e050c902fd22deac103471195b52b9ce2", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\nindex 9b354700dbf..75a80d84921 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n\n@@ -18,7 +18,6 @@\n \n package org.apache.flink.runtime.execution.librarycache;\n \n-import org.apache.flink.annotation.VisibleForTesting;\n import org.apache.flink.util.ChildFirstClassLoader;\n \n import org.slf4j.Logger;\n"}}, {"oid": "af98d15e050c902fd22deac103471195b52b9ce2", "url": "https://github.com/apache/flink/commit/af98d15e050c902fd22deac103471195b52b9ce2", "message": "[FLINK-16245][table] Closes user classloader in LocalExecutor#closeSession.", "committedDate": "2020-03-11T12:45:00Z", "type": "forcePushed"}, {"oid": "11aaf6c93392409e9d7d755e351ad32db48710e1", "url": "https://github.com/apache/flink/commit/11aaf6c93392409e9d7d755e351ad32db48710e1", "message": "[FLINK-16245][table] Closes user classloader in LocalExecutor#closeSession.", "committedDate": "2020-03-12T12:23:44Z", "type": "forcePushed"}, {"oid": "43d3cb28bad9da1cc9c8460915a99aef7a94840e", "url": "https://github.com/apache/flink/commit/43d3cb28bad9da1cc9c8460915a99aef7a94840e", "message": "[FLINK-16245][tests] Fixed classloader usage of BatchFineGrainedRecoveryITCase.\n\nBatchFineGrainedRecoveryITCase relied on context classloader of failed tasks to restart task manager.", "committedDate": "2020-03-12T19:43:18Z", "type": "forcePushed"}, {"oid": "5246383ea27ab1a98a53e58985ef5923e9e9a6c4", "url": "https://github.com/apache/flink/commit/5246383ea27ab1a98a53e58985ef5923e9e9a6c4", "message": "[FLINK-16245][tests] Fixed classloader usage of BatchFineGrainedRecoveryITCase.\n\nBatchFineGrainedRecoveryITCase relied on context classloader of failed tasks to restart task manager.", "committedDate": "2020-03-13T09:43:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3Nzc2OA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393177768", "bodyText": "why do we need a separate classloader here?", "author": "zentol", "createdAt": "2020-03-16T17:03:49Z", "path": "flink-tests/src/test/java/org/apache/flink/test/recovery/BatchFineGrainedRecoveryITCase.java", "diffHunk": "@@ -396,14 +397,16 @@ private TaskExecutorFailureStrategy(int failAfterCallNumber) {\n \t\t@Override\n \t\tvoid fail(int trackingIndex) throws Exception {\n \t\t\t//noinspection OverlyBroadCatchBlock\n-\t\t\ttry {\n-\t\t\t\trestartTaskManager();\n-\t\t\t} catch (InterruptedException e) {\n-\t\t\t\t// ignore the exception, task should have been failed while stopping TM\n-\t\t\t\tThread.currentThread().interrupt();\n-\t\t\t} catch (Throwable t) {\n-\t\t\t\tfailureTracker.unrelatedFailure(t);\n-\t\t\t\tthrow t;\n+\t\t\ttry (TemporaryClassLoaderContext unused = TemporaryClassLoaderContext.of(ClassLoader.getSystemClassLoader())) {", "originalCommit": "5246383ea27ab1a98a53e58985ef5923e9e9a6c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMjE2NA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393232164", "bodyText": "The test is badly written, but I haven't found a better solution. We are restarting a task manager from within a UDF (with context classloader set to user class loader). Restarting means closing TM, which closes context class loader, such that starting the TM fails. (I had hoped that the commit message is clear enough on the issue and happy to take suggestions)", "author": "AHeise", "createdAt": "2020-03-16T18:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3Nzc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "03a8749e27c1f1ace6b13a166bf844ce2fac45c0", "chunk": "diff --git a/flink-tests/src/test/java/org/apache/flink/test/recovery/BatchFineGrainedRecoveryITCase.java b/flink-tests/src/test/java/org/apache/flink/test/recovery/BatchFineGrainedRecoveryITCase.java\nindex 86e32edf3ca..9a2a52c4700 100644\n--- a/flink-tests/src/test/java/org/apache/flink/test/recovery/BatchFineGrainedRecoveryITCase.java\n+++ b/flink-tests/src/test/java/org/apache/flink/test/recovery/BatchFineGrainedRecoveryITCase.java\n\n@@ -397,16 +396,14 @@ public class BatchFineGrainedRecoveryITCase extends TestLogger {\n \t\t@Override\n \t\tvoid fail(int trackingIndex) throws Exception {\n \t\t\t//noinspection OverlyBroadCatchBlock\n-\t\t\ttry (TemporaryClassLoaderContext unused = TemporaryClassLoaderContext.of(ClassLoader.getSystemClassLoader())) {\n-\t\t\t\ttry {\n-\t\t\t\t\trestartTaskManager();\n-\t\t\t\t} catch (InterruptedException e) {\n-\t\t\t\t\t// ignore the exception, task should have been failed while stopping TM\n-\t\t\t\t\tThread.currentThread().interrupt();\n-\t\t\t\t} catch (Throwable t) {\n-\t\t\t\t\tfailureTracker.unrelatedFailure(t);\n-\t\t\t\t\tthrow t;\n-\t\t\t\t}\n+\t\t\ttry {\n+\t\t\t\trestartTaskManager();\n+\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t// ignore the exception, task should have been failed while stopping TM\n+\t\t\t\tThread.currentThread().interrupt();\n+\t\t\t} catch (Throwable t) {\n+\t\t\t\tfailureTracker.unrelatedFailure(t);\n+\t\t\t\tthrow t;\n \t\t\t}\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3ODM4NA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393178384", "bodyText": "should still be logged", "author": "zentol", "createdAt": "2020-03-16T17:04:33Z", "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java", "diffHunk": "@@ -240,7 +240,11 @@ public void closeSession(String sessionId) throws SqlExecutionException {\n \t\t\t}\n \t\t});\n \t\t// Remove the session's ExecutionContext from contextMap.\n-\t\tthis.contextMap.remove(sessionId);\n+\t\ttry {\n+\t\t\tthis.contextMap.remove(sessionId).close();\n+\t\t} catch (IOException e) {\n+\t\t\t// ignore any throwable to keep the clean up running", "originalCommit": "5246383ea27ab1a98a53e58985ef5923e9e9a6c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNDMzNQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393234335", "bodyText": "Should we then also log on cancelQuery on L237? I tried to keep it symmetric.", "author": "AHeise", "createdAt": "2020-03-16T18:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3ODM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzc0OQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r395173749", "bodyText": "I think so, as a separate commit of course ;)", "author": "zentol", "createdAt": "2020-03-19T16:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3ODM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "03a8749e27c1f1ace6b13a166bf844ce2fac45c0", "chunk": "diff --git a/flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java b/flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java\nindex 4dcff5f588b..1c9ea2a2761 100644\n--- a/flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java\n+++ b/flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java\n\n@@ -240,11 +239,7 @@ public class LocalExecutor implements Executor {\n \t\t\t}\n \t\t});\n \t\t// Remove the session's ExecutionContext from contextMap.\n-\t\ttry {\n-\t\t\tthis.contextMap.remove(sessionId).close();\n-\t\t} catch (IOException e) {\n-\t\t\t// ignore any throwable to keep the clean up running\n-\t\t}\n+\t\tthis.contextMap.remove(sessionId);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393181657", "bodyText": "Why are we not failing immediately in this case? This introduces subtle inconsistent behaviors, that to fully grasp require a good understanding of how class-loading works in the JVM which really shows in the added testClosingOfClassloader test. I would wager that barely anyone would be able to explain why the class cannot be loaded at the end of the test.", "author": "zentol", "createdAt": "2020-03-16T17:08:31Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java", "diffHunk": "@@ -82,4 +89,61 @@ public static ResolveOrder fromString(String resolveOrder) {\n \t\t\tsuper(urls, parent);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Ensures that holding a reference on the context class loader outliving the scope of user code does not prevent\n+\t * the user classloader to be garbage collected (FLINK-16245).\n+\t *\n+\t * <p>This classloader delegates to the actual user classloader. Upon {@link #close()}, the delegate is nulled\n+\t * and can be garbage collected. Additional class resolution will be resolved solely through the bootstrap\n+\t * classloader and most likely result in ClassNotFound exceptions.\n+\t */\n+\tprivate static class SafetyNetWrapperClassLoader extends URLClassLoader\n+\t\t\timplements Closeable {\n+\t\tprivate static final Logger LOG = LoggerFactory.getLogger(SafetyNetWrapperClassLoader.class);\n+\n+\t\tprivate FlinkUserCodeClassLoader inner;\n+\n+\t\tSafetyNetWrapperClassLoader(FlinkUserCodeClassLoader inner) {\n+\t\t\tsuper(new URL[0], null);\n+\t\t\tthis.inner = inner;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() {\n+\t\t\tif (inner != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tinner.close();\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tLOG.warn(\"Could not close user classloader\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tinner = null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+\t\t\tif (inner == null) {\n+\t\t\t\treturn super.loadClass(name, resolve);", "originalCommit": "5246383ea27ab1a98a53e58985ef5923e9e9a6c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzNzI3OQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393237279", "bodyText": "I understand where you are coming from, but this will effectively make any job with leaked context classloader fail eventually, even if just basic Java stuff needs to be loaded.\nIf we want to go that route, we should think twice what to throw. An IllegalStateException would be the correct one, but does it fit in all cases? We could also throw a ClassNotFoundException to not change the behavior too much and provide a good description, but that may trigger some unwanted fallback logic in user libraries.", "author": "AHeise", "createdAt": "2020-03-16T18:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNjUxOQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393526519", "bodyText": "any job with leaked context classloader [...] fail eventually\n\nGiven that the CL is only closed when all tasks on the TE have stopped, how could it affect a job? Leftover threads, sure, but what happens to those shouldn't affect job execution, and failing as early as possible might actually be a benefit.\n\n[throwing a CNFE] may trigger some unwanted fallback logic in user libraries\n\nThis can happen in any case; for all we now the library could be catching throwables.\nI'd fail with an IllegalStateException; I think when users see a CNFE they first consider it as a class-loading issue in Flink (regardless of the error message).", "author": "zentol", "createdAt": "2020-03-17T08:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1Mzk2Ng==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393553966", "bodyText": "Given that the CL is only closed when all tasks on the TE have stopped, how could it affect a job? Leftover threads, sure, but what happens to those shouldn't affect job execution, and failing as early as possible might actually be a benefit.\n\nI actually meant it the other way around. What happens if we have job1 and job2, where the CL of job1 is leaked forward while executing job2. The TM would die taking job2 with it with a somewhat unrelated error. In particular, I'd think it would be pretty confusing/inperformant for larger batch clusters. @StephanEwen WDYT?\nBut since I'm also a fan of failing early, I'd go that way once Stephan agrees (I kinda had the impression that he wanted it to be graceful).", "author": "AHeise", "createdAt": "2020-03-17T09:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2OTY1Mw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393569653", "bodyText": "Why would the TM die because of an exception in user-code, disconnected from any task threads no less?", "author": "zentol", "createdAt": "2020-03-17T10:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNjA2Nw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393616067", "bodyText": "I thought that's what you meant with fail early. If you look into https://issues.apache.org/jira/browse/FLINK-11205, you can see the main motivation for this PR.\nHere Stephan wrote\n\nSome thoughts on how to approach this are:\n...\nAs a final safety-net, the TMs kill/restart themselves when the metaspace blows up FLINK-16225\n...\nJoey Echeverria A generic mechanism to prevent leaks through ClassLoader caching (as in Apache Commons Logging) would be FLINK-16245 (use a delegating class loader where we drop the reference to the real one when closing it).\n\nBtw, this probably answers your initial point in this thread: throwing ISE it is. Now, I just need to figure out how to make sure that this exception will actually let TM fail instead of any later job.", "author": "AHeise", "createdAt": "2020-03-17T11:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODM1NA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r393648354", "bodyText": "I thought that's what you meant with fail early.\n\nNo, with fail early I meant that the (leaked) thread with the leaked classloader reference would crash ASAP if it tries to load a class when the CL was closed.\n\nNow, I just need to figure out how to make sure that this exception will actually let TM fail.\n\nI don't see why we should do this.\nFLINK-16225 aims to have the TM kill itself on a Metaspace OOM which is fine, but I find no reference anywhere that we should always fail the TM at the slightest hint of a leaked thread and/or classloader, which in any case would be out-of-scope of this PR?", "author": "zentol", "createdAt": "2020-03-17T12:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MDkyOQ==", "url": "https://github.com/apache/flink/pull/11303#discussion_r394150929", "bodyText": "No, with fail early I meant that the (leaked) thread with the leaked classloader reference would crash ASAP if it tries to load a class when the CL was closed.\n\nThat sounds completely fine with me, but are we sure the CL is only leaked by leaking the thread? I understood that the Apache Commons Logging framework lives outside of the thread (in app classloader) and keeps the reference to the user classloader for the whole TM lifecycle.", "author": "AHeise", "createdAt": "2020-03-18T07:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTc3MA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r394169770", "bodyText": "I think we can be sure a class loaded from the user-jar can only leak something through a separate thread.\nBut we aren't sure at all what libraries in /lib are doing.\nJCL for example does keep references around (and even documents that), but I don't see a good way to handle cases like this from our end.\nMy conclusions would be that users should stop throwing dependencies into /lib and create fatter user-jars instead.", "author": "zentol", "createdAt": "2020-03-18T08:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzMzg0MA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r395133840", "bodyText": "My feeling is to go with Arvid's solution. Keep the loading of classes that are not from the user code classloader intact.", "author": "StephanEwen", "createdAt": "2020-03-19T15:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3NDcyMg==", "url": "https://github.com/apache/flink/pull/11303#discussion_r395174722", "bodyText": "Are we hoping that these threads shutdown gracefully if we allow them to load java classes, or are we worried that crashing them this way can cause side-effects (and rather have them stick around, which would eventually may be handled by FLINK-16225)?", "author": "zentol", "createdAt": "2020-03-19T16:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEyMjU5MA==", "url": "https://github.com/apache/flink/pull/11303#discussion_r396122590", "bodyText": "My thought would be mainly understandable behavior. The change targets cases of caching beyond execution of slot related tasks, such as in logging frameworks. Users would really wonder why java core classes could not be loaded any more.\nAside from that, if the logging framwork only accesses core classes, this change would break nothing, while forbidding to load all classes might break some setups.\nRelated: Might make sense to wrap the ClassNotFoundException and enhance the error message with \"Flink user code classloader is shut down\".", "author": "StephanEwen", "createdAt": "2020-03-22T17:58:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1Njc4Nw==", "url": "https://github.com/apache/flink/pull/11303#discussion_r397656787", "bodyText": "Users would really wonder why java core classes could not be loaded any more.\n\nThat's a fair point.", "author": "zentol", "createdAt": "2020-03-25T07:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4MTY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "03a8749e27c1f1ace6b13a166bf844ce2fac45c0", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\nindex 096f4c5bd07..0df7c7aaf2d 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java\n\n@@ -89,61 +82,4 @@ public class FlinkUserCodeClassLoaders {\n \t\t\tsuper(urls, parent);\n \t\t}\n \t}\n-\n-\t/**\n-\t * Ensures that holding a reference on the context class loader outliving the scope of user code does not prevent\n-\t * the user classloader to be garbage collected (FLINK-16245).\n-\t *\n-\t * <p>This classloader delegates to the actual user classloader. Upon {@link #close()}, the delegate is nulled\n-\t * and can be garbage collected. Additional class resolution will be resolved solely through the bootstrap\n-\t * classloader and most likely result in ClassNotFound exceptions.\n-\t */\n-\tprivate static class SafetyNetWrapperClassLoader extends URLClassLoader\n-\t\t\timplements Closeable {\n-\t\tprivate static final Logger LOG = LoggerFactory.getLogger(SafetyNetWrapperClassLoader.class);\n-\n-\t\tprivate FlinkUserCodeClassLoader inner;\n-\n-\t\tSafetyNetWrapperClassLoader(FlinkUserCodeClassLoader inner) {\n-\t\t\tsuper(new URL[0], null);\n-\t\t\tthis.inner = inner;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() {\n-\t\t\tif (inner != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tinner.close();\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tLOG.warn(\"Could not close user classloader\", e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tinner = null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n-\t\t\tif (inner == null) {\n-\t\t\t\treturn super.loadClass(name, resolve);\n-\t\t\t}\n-\n-\t\t\treturn inner.loadClass(name, resolve);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic URL findResource(String name) {\n-\t\t\tif (inner == null) {\n-\t\t\t\treturn super.findResource(name);\n-\t\t\t}\n-\t\t\treturn inner.getResource(name);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Enumeration<URL> findResources(String name) throws IOException {\n-\t\t\tif (inner == null) {\n-\t\t\t\treturn super.findResources(name);\n-\t\t\t}\n-\t\t\treturn inner.getResources(name);\n-\t\t}\n-\t}\n }\n"}}, {"oid": "03a8749e27c1f1ace6b13a166bf844ce2fac45c0", "url": "https://github.com/apache/flink/commit/03a8749e27c1f1ace6b13a166bf844ce2fac45c0", "message": "[hotfix][runtime][tests] Rename/move ClassLoaderTest\n\nThe test is actually testing FlinkUserCodeClassLoaders.", "committedDate": "2020-03-30T08:01:34Z", "type": "commit"}, {"oid": "4be06f5d3aa9f36448ed00a83343df93b09de1a5", "url": "https://github.com/apache/flink/commit/4be06f5d3aa9f36448ed00a83343df93b09de1a5", "message": "[FLINK-16245][runtime] Decouple user from context classloader\n\nAllows user classloader can be unloaded even if a reference on the context classloader outlives the user code.", "committedDate": "2020-03-30T08:01:35Z", "type": "commit"}, {"oid": "92b808b0df3ff53d5a46fcf55afe2bf40c73cf9a", "url": "https://github.com/apache/flink/commit/92b808b0df3ff53d5a46fcf55afe2bf40c73cf9a", "message": "[FLINK-16245][table] Close user classloader", "committedDate": "2020-03-30T08:01:35Z", "type": "commit"}, {"oid": "8fc73a896082ad490854f60135c40616373551ea", "url": "https://github.com/apache/flink/commit/8fc73a896082ad490854f60135c40616373551ea", "message": "[FLINK-16245][tests] Adjust BatchFineGrainedRecoveryITCase\n\nBecause the classloader is now closed when the task fails the UDF only has access to the bootstrap classloader, which doesn't contain our own test classes.", "committedDate": "2020-03-30T08:01:35Z", "type": "commit"}, {"oid": "8fc73a896082ad490854f60135c40616373551ea", "url": "https://github.com/apache/flink/commit/8fc73a896082ad490854f60135c40616373551ea", "message": "[FLINK-16245][tests] Adjust BatchFineGrainedRecoveryITCase\n\nBecause the classloader is now closed when the task fails the UDF only has access to the bootstrap classloader, which doesn't contain our own test classes.", "committedDate": "2020-03-30T08:01:35Z", "type": "forcePushed"}]}