{"pr_number": 12900, "pr_title": "[FLINK-18537][table] Remove RowDataTypeInfo", "pr_createdAt": "2020-07-14T14:04:44Z", "pr_url": "https://github.com/apache/flink/pull/12900", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg==", "url": "https://github.com/apache/flink/pull/12900#discussion_r454415036", "bodyText": "Is this interface really necessary? Especially with @PublicEvolving annotation? How are users supposed to use it? If I understand it correctly you need it for internal operations. Moreover you need it because the WrapperTypeInfo is in blink-runtime, right?\nCan't we move the WrapperTypeInfo to the table-common instead?  The class itself has no runtime dependencies. Only the factory methods need some runtime classes.", "author": "dawidwys", "createdAt": "2020-07-14T14:50:17Z", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.types;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+\n+/**\n+ * Indicates that a {@link DataType} can be retrieved from a class that implements this interfaces.\n+ */\n+@PublicEvolving\n+public interface DataTypeQueryable {", "originalCommit": "6f0bc79be46f90fd0f34697ed10264907ee2614a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNjg0Nw==", "url": "https://github.com/apache/flink/pull/12900#discussion_r454506847", "bodyText": "I thought about this as well and decided for keeping WrapperTypeInfo in the runtime package. The reason for this is to keep the serializers close to this utility class in the same package. WrapperTypeInfo is not needed in table-common because it is internal. Actually the constructor of WrappenTypeInfo should even be private but this is not possible due to other failing tests so far. We can mark DataTypeQueryable internal if that helps, but the past around TypeInformation has shown that you need such a simple interface over and over again. It will be more useful in the future once we introduce a \"converter type serializer\" where the return data type is not of internal data structure.", "author": "twalthr", "createdAt": "2020-07-14T17:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0ODA0OQ==", "url": "https://github.com/apache/flink/pull/12900#discussion_r455548049", "bodyText": "I prefer to keep WrapperTypeInfo in blink-runtime, especially we have a public construct which will cause a lot of problems if the logicalType and typeSerializer are not mapped.", "author": "wuchong", "createdAt": "2020-07-16T06:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0OTYzNg==", "url": "https://github.com/apache/flink/pull/12900#discussion_r455549636", "bodyText": "Is it possible to make the construct of WrapperTypeInfo to be package visible? We can move the utility TypeInfoDataTypeConverter#createWrapperTypeInfo into WrapperTypeInfo. And the remaining constructor invoking are the tests under the same package.", "author": "wuchong", "createdAt": "2020-07-16T06:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e61dfa9f39d348b4e1273ab7329367706c0f6651", "chunk": "diff --git a/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java b/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java\nindex 5ca5cd7d6b..effc08ca90 100644\n--- a/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java\n+++ b/flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java\n\n@@ -18,12 +18,12 @@\n \n package org.apache.flink.table.types;\n \n-import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.annotation.Internal;\n \n /**\n  * Indicates that a {@link DataType} can be retrieved from a class that implements this interfaces.\n  */\n-@PublicEvolving\n+@Internal\n public interface DataTypeQueryable {\n \n \tDataType getDataType();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTgyMQ==", "url": "https://github.com/apache/flink/pull/12900#discussion_r455535821", "bodyText": "In which case will we reach here?", "author": "wuchong", "createdAt": "2020-07-16T06:23:07Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java", "diffHunk": "@@ -249,7 +251,15 @@ public static DataFormatConverter getConverterForDataType(DataType originDataTyp\n \t\t\t\t\t\tDataTypes.INT().bridgedTo(Integer.class));\n \t\t\tcase ROW:\n \t\t\tcase STRUCTURED_TYPE:\n-\t\t\t\tCompositeType compositeType = (CompositeType) fromDataTypeToTypeInfo(dataType);\n+\t\t\t\tTypeInformation<?> asTypeInfo = fromDataTypeToTypeInfo(dataType);\n+\t\t\t\tif (asTypeInfo instanceof WrapperTypeInfo && clazz == RowData.class) {\n+\t\t\t\t\tLogicalType realLogicalType = ((WrapperTypeInfo<?>) asTypeInfo).toLogicalType();\n+\t\t\t\t\treturn new RowDataConverter(getFieldCount(realLogicalType));", "originalCommit": "ceb895be265bd445b9d36bfc52cf8018a508c333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMzM1OA==", "url": "https://github.com/apache/flink/pull/12900#discussion_r456313358", "bodyText": "All cases that went through TypeInfoDataTypeConverter#fromDataTypeToTypeInfo e.g. the legacy sinks.", "author": "twalthr", "createdAt": "2020-07-17T08:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e61dfa9f39d348b4e1273ab7329367706c0f6651", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java\nindex 38583f23f3..037fa45161 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java\n\n@@ -252,8 +252,8 @@ public class DataFormatConverters {\n \t\t\tcase ROW:\n \t\t\tcase STRUCTURED_TYPE:\n \t\t\t\tTypeInformation<?> asTypeInfo = fromDataTypeToTypeInfo(dataType);\n-\t\t\t\tif (asTypeInfo instanceof WrapperTypeInfo && clazz == RowData.class) {\n-\t\t\t\t\tLogicalType realLogicalType = ((WrapperTypeInfo<?>) asTypeInfo).toLogicalType();\n+\t\t\t\tif (asTypeInfo instanceof InternalTypeInfo && clazz == RowData.class) {\n+\t\t\t\t\tLogicalType realLogicalType = ((InternalTypeInfo<?>) asTypeInfo).toLogicalType();\n \t\t\t\t\treturn new RowDataConverter(getFieldCount(realLogicalType));\n \t\t\t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTgzMw==", "url": "https://github.com/apache/flink/pull/12900#discussion_r455539833", "bodyText": "Keep to use DataType here?\n                DataTypes.INT().getLogicalType(),\n\t\tDataTypes.STRING().getLogicalType(),\n\t\tDataTypes.INT().getLogicalType(),\n\t\tDataTypes.STRING().getLogicalType()", "author": "wuchong", "createdAt": "2020-07-16T06:32:32Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java", "diffHunk": "@@ -75,18 +74,19 @@\n \tprivate static final int ASYNC_TIMEOUT_MS = 3000;\n \n \tprivate final TypeSerializer<RowData> inSerializer = new RowDataSerializer(\n-\t\tnew ExecutionConfig(),\n \t\tnew IntType(),\n \t\tnew VarCharType(VarCharType.MAX_LENGTH));\n \n-\tprivate final RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(new TypeInformation[]{\n-\t\tTypes.INT,\n-\t\tTypes.STRING,\n-\t\tTypes.INT,\n-\t\tTypes.STRING\n+\tprivate final RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(new LogicalType[]{\n+\t\tnew IntType(),\n+\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n+\t\tnew IntType(),\n+\t\tnew VarCharType(VarCharType.MAX_LENGTH)", "originalCommit": "ceb895be265bd445b9d36bfc52cf8018a508c333", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e61dfa9f39d348b4e1273ab7329367706c0f6651", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java\nindex a5f03730dc..80fa8bea52 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java\n\n@@ -74,19 +73,19 @@ public class AsyncLookupJoinHarnessTest {\n \tprivate static final int ASYNC_TIMEOUT_MS = 3000;\n \n \tprivate final TypeSerializer<RowData> inSerializer = new RowDataSerializer(\n-\t\tnew IntType(),\n-\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\t\tDataTypes.INT().getLogicalType(),\n+\t\tDataTypes.STRING().getLogicalType());\n \n \tprivate final RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(new LogicalType[]{\n-\t\tnew IntType(),\n-\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n-\t\tnew IntType(),\n-\t\tnew VarCharType(VarCharType.MAX_LENGTH)\n+\t\tDataTypes.INT().getLogicalType(),\n+\t\tDataTypes.STRING().getLogicalType(),\n+\t\tDataTypes.INT().getLogicalType(),\n+\t\tDataTypes.STRING().getLogicalType()\n \t});\n \n-\tprivate WrapperTypeInfo<RowData> rightRowTypeInfo = WrapperTypeInfo.ofFields(\n-\t\tnew IntType(),\n-\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate InternalTypeInfo<RowData> rightRowTypeInfo = InternalTypeInfo.ofFields(\n+\t\tDataTypes.INT().getLogicalType(),\n+\t\tDataTypes.STRING().getLogicalType());\n \tprivate TypeInformation<?> fetcherReturnType = rightRowTypeInfo;\n \n \t@Test\n"}}, {"oid": "e61dfa9f39d348b4e1273ab7329367706c0f6651", "url": "https://github.com/apache/flink/commit/e61dfa9f39d348b4e1273ab7329367706c0f6651", "message": "Refactor 'WrapperTypeInfo' to 'InternalTypeInfo'", "committedDate": "2020-07-17T13:49:57Z", "type": "forcePushed"}, {"oid": "893e2f11d1fab9522fcf69558d4b9b67a9e020ec", "url": "https://github.com/apache/flink/commit/893e2f11d1fab9522fcf69558d4b9b67a9e020ec", "message": "[FLINK-18537][table] Remove ExecutionConfig for internal serializers", "committedDate": "2020-07-21T12:39:03Z", "type": "commit"}, {"oid": "a2a1b65ece840acab85f6a1387ac68b5ef8b80a8", "url": "https://github.com/apache/flink/commit/a2a1b65ece840acab85f6a1387ac68b5ef8b80a8", "message": "[FLINK-18537][table] Compare only field serializers in RowDataSerializer", "committedDate": "2020-07-21T12:39:03Z", "type": "commit"}, {"oid": "758b1bdd57c46f51db7a2bc2e7fd73f4932fe0cf", "url": "https://github.com/apache/flink/commit/758b1bdd57c46f51db7a2bc2e7fd73f4932fe0cf", "message": "[FLINK-18537][table] Replace RowDataTypeInfo with InternalTypeInfo\n\nTypeInformation is a legacy class for the sole purpose of creating a\nTypeSerializer. Instances of TypeInformation are not required in the\ntable ecosystem but sometimes enforced by interfaces of other modules\n(such as org.apache.flink.api.dag.Transformation). Therefore, we\nintroduce InternalTypeInfo which acts as an adapter whenever type\ninformation is required. Instances of InternalTypeInfo should only\nbe created for passing it to interfaces that require type information.\nThe class should not be used as a replacement for a LogicalType.\nInformation such as the arity of a row type, field types, field names, etc.\nshould be derived from the LogicalType directly.\n\nThis closes #12900.", "committedDate": "2020-07-21T12:44:25Z", "type": "commit"}, {"oid": "7ea9bb9484110719ab5dc19c00d4a25ab243d334", "url": "https://github.com/apache/flink/commit/7ea9bb9484110719ab5dc19c00d4a25ab243d334", "message": "[hotfix][table-common] Remove unused InternalTypeInfo", "committedDate": "2020-07-21T12:51:47Z", "type": "commit"}, {"oid": "7ea9bb9484110719ab5dc19c00d4a25ab243d334", "url": "https://github.com/apache/flink/commit/7ea9bb9484110719ab5dc19c00d4a25ab243d334", "message": "[hotfix][table-common] Remove unused InternalTypeInfo", "committedDate": "2020-07-21T12:51:47Z", "type": "forcePushed"}]}