{"pr_number": 14508, "pr_title": "[FLINK-20773][json] Support to parse unescaped control chars in string node", "pr_createdAt": "2020-12-28T14:24:48Z", "pr_url": "https://github.com/apache/flink/pull/14508", "timeline": [{"oid": "fd8cbf90a807292b0db7b85bda26f1e717b87767", "url": "https://github.com/apache/flink/commit/fd8cbf90a807292b0db7b85bda26f1e717b87767", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Documents optimization.\n\n[FLINK-20773][format] Code optimization.\n\n[FLINK-20773][format] Code optimization.\n\n[hotfix] Update .git-blame-ignore-revs\n\n[FLINK-20793][core] Fix the NamesTest and JarSubmissionITCase due to code style refactor\n\nThis closes #14514.", "committedDate": "2020-12-30T10:51:35Z", "type": "forcePushed"}, {"oid": "f0051f9ec32e471f0c60cae1a58dd8faa3d779dd", "url": "https://github.com/apache/flink/commit/f0051f9ec32e471f0c60cae1a58dd8faa3d779dd", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Documents optimization.\n\n[FLINK-20773][format] Code optimization.\n\n[FLINK-20773][format] Code optimization.\n\n[hotfix] Update .git-blame-ignore-revs\n\n[FLINK-20793][core] Fix the NamesTest and JarSubmissionITCase due to code style refactor\n\nThis closes #14514.\n\n[FLINK-20773][format] Revert `.git-blame-ignore-revs` file", "committedDate": "2020-12-30T10:57:19Z", "type": "forcePushed"}, {"oid": "213512a340c8a0ca5914a6681cbad6e732163702", "url": "https://github.com/apache/flink/commit/213512a340c8a0ca5914a6681cbad6e732163702", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Fix check style.\n\n[FLINK-20773][format] Documents optimization.\n\n[FLINK-20773][format] Code optimization.\n\n[FLINK-20773][format] Code optimization.\n\n[hotfix] Update .git-blame-ignore-revs\n\n[FLINK-20793][core] Fix the NamesTest and JarSubmissionITCase due to code style refactor\n\nThis closes #14514.\n\n[FLINK-20773][format] Revert `.git-blame-ignore-revs` file\n\n[hotfix] Update .git-blame-ignore-revs\n\n[FLINK-18998] No watermark is shown in Flink UI when ProcessingTime is used\n\nDisplay more informative message stating that Watermarks are only available when using\nevent time if there are no watermarks to display in the web UI.\n\nThis closes #14483.\n\n[FLINK-17331][runtime] Explicitly get the ByteBuf length of all classes which is written to NettyMessage\n\nCurrently, the length of some header fields in NettyMessage is hardcoded: InputChannelID, ExecutionAttemptID, e.t.c.\nSo if we make some changes for such field, then we are not ware that it also needs to change the respective length for related netty messages component.\nThis PR explicitly get the ByteBuf length of all classes which is written to NettyMessage to avoid such problems.\n\n[FLINK-20792][build] Allow shorthand calls to spotless\n\nIt was not possible to just run 'mvn spotless:check', but instead one needed to use the fully qualified name of the plugin, i.e., 'mvn com.diffplug.spotless:spotless-maven-plugin:check'.\n\nThis is due to 'force-shading'; this module is declared as a child of the flink-parent pom (i.e., the root pom of the project), but is not actually declaring that very module as it's parent.\nThis seems to throw of maven, which fails to retrieve the plugin information from the parent.\n\nNote that this is just a band-aid; a proper fix would declare flink-parent as the parent of force-shading, but this is the easier fix.\n\n[FLINK-20803][build][docs] Pin google-java-format version in install instructions\n\n[FLINK-20806] Correct error message in TaskExecutor.disconnectJobManagerConnection\n\nThis closes #14518.\n\n[FLINK-20749] Add DeclarativeSlotPool.registerNewSlotsListener\n\nThe DeclarativeSlotPool.registerNewSlotsListener can be used to register a\nDeclarativeSlotPool.NewSlotsListener which is notified whenever the\nDeclarativeSlotPool receives new slots or reserved slots are freed.\n\nThis closes #14482.\n\n[FLINK-20693][table-planner-blink][python] Port BatchExecPythonCorrelate and StreamExecPythonCorrelate to Java\n\nThis closes #14503.\n\n[FLINK-20458][docs-zh] Translate \"Getting Started\" page of Table SQL\n\nThis closes #14437\n\n[hotfix][tests] Disable alignment timeout by default in UnalignedCheckpointITCase\n\nMost of the bugs in UC are revealed with higher back-pressure which is not created with alignment timeout.\nThis change disables it by default and adds a new test (p=20) with the timeout enabled.\n\n[FLINK-20654][network] Fix channel indices in StreamTaskNetworkInput\n\nIn StreamTaskNetworkInput.prepareSnapshot, internal channelIndex\nis inconsistent with CheckpointedInputGate channelIndex.\n\nThis change fixes data loss in UnalignedCheckpointITCase.cogroup.\n\n[FLINK-20654][checkpointing] Decline checkpoints until restored channel state is consumed\n\nIn scenarios with multiple inputs (e.g. co-group; not union) one input may receive a\ncheckpoint barrier while the second input is still restoring state. This (previous)\nstate is currently not included into the snapshot, which therefore will be incomplete.\n\n[FLINK-20654][tests] Disable throttling on checkpoint completion, not snapshotState\n\nThis reduces the number of failures in UnalignedCheckpointITCase.union to ~2/100.\n\n[FLINK-20606][hive][table] Fix CREATE FUNCTION is failed under Hive catalog in SQL CLI using -j option\n\nThis closes #14392\n\n[FLINK-20807][build] Remove/narrow various checkstyle suppressions\n\n[FLINK-18654][docs][jdbc] Correct missleading documentation in \"Partitioned Scan\" section of JDBC connector\n\nThis closes #14523", "committedDate": "2020-12-30T11:10:30Z", "type": "forcePushed"}, {"oid": "033aaef0403b2c2c2d70932be0b668e6cd5b54fb", "url": "https://github.com/apache/flink/commit/033aaef0403b2c2c2d70932be0b668e6cd5b54fb", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.", "committedDate": "2020-12-30T11:37:37Z", "type": "forcePushed"}, {"oid": "033aaef0403b2c2c2d70932be0b668e6cd5b54fb", "url": "https://github.com/apache/flink/commit/033aaef0403b2c2c2d70932be0b668e6cd5b54fb", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.", "committedDate": "2020-12-30T11:37:37Z", "type": "forcePushed"}, {"oid": "28364b82097029626bf4ad3d18ca14eb759d64db", "url": "https://github.com/apache/flink/commit/28364b82097029626bf4ad3d18ca14eb759d64db", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.", "committedDate": "2020-12-30T15:56:25Z", "type": "forcePushed"}, {"oid": "3c03189754755222ce29f4d17485c91532da4a8b", "url": "https://github.com/apache/flink/commit/3c03189754755222ce29f4d17485c91532da4a8b", "message": "[FLINK-20773][format] Resolve conflicts", "committedDate": "2020-12-31T04:23:13Z", "type": "forcePushed"}, {"oid": "5663475ec56efe4b84e6ae2e6cabd6d58db34bf2", "url": "https://github.com/apache/flink/commit/5663475ec56efe4b84e6ae2e6cabd6d58db34bf2", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.", "committedDate": "2020-12-31T04:58:05Z", "type": "forcePushed"}, {"oid": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "url": "https://github.com/apache/flink/commit/f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "message": "[FLINK-20773][format] Support allow-unescaped-control-chars option for JSON format.", "committedDate": "2020-12-31T05:02:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxNDgxOQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550414819", "bodyText": "Please use a field to store the value of allowUnescapedControlChars because it determines the behaviour of this class. If one instances set this field false and another instances set this field true, the equal method should return false.", "author": "fsk119", "createdAt": "2020-12-31T07:12:39Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java", "diffHunk": "@@ -90,6 +92,10 @@ public JsonRowDataDeserializationSchema(\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n+        if (allowUnescapedControlChars) {", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\nindex 709623114a9..ebdad24ddf0 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n\n@@ -92,10 +91,7 @@ public class JsonRowDataDeserializationSchema implements DeserializationSchema<R\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n-        if (allowUnescapedControlChars) {\n-            objectMapper.configure(\n-                    JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n-        }\n+        objectMapper.configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxNzI1Nw==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550417257", "bodyText": "Please add this option into the method optionalOptions", "author": "fsk119", "createdAt": "2020-12-31T07:27:10Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java", "diffHunk": "@@ -65,6 +66,7 @@\n         final boolean failOnMissingField = formatOptions.get(FAIL_ON_MISSING_FIELD);\n         final boolean ignoreParseErrors = formatOptions.get(IGNORE_PARSE_ERRORS);\n         TimestampFormat timestampOption = JsonOptions.getTimestampFormat(formatOptions);\n+        final boolean allowUnescapedControlChars = formatOptions.get(ALLOW_UNESCAPED_CONTROL_CHARS);", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\nindex 98130a0e401..386bdd8db29 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonFormatFactory.java\n\n@@ -66,7 +65,6 @@ public class JsonFormatFactory implements DeserializationFormatFactory, Serializ\n         final boolean failOnMissingField = formatOptions.get(FAIL_ON_MISSING_FIELD);\n         final boolean ignoreParseErrors = formatOptions.get(IGNORE_PARSE_ERRORS);\n         TimestampFormat timestampOption = JsonOptions.getTimestampFormat(formatOptions);\n-        final boolean allowUnescapedControlChars = formatOptions.get(ALLOW_UNESCAPED_CONTROL_CHARS);\n \n         return new DecodingFormat<DeserializationSchema<RowData>>() {\n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODg4MQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550418881", "bodyText": "Currently the community is moving to the new descriptor api. It not recommended to add new feature for the depricated api.", "author": "fsk119", "createdAt": "2020-12-31T07:37:19Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java", "diffHunk": "@@ -114,18 +118,22 @@ private JsonRowDeserializationSchema(\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n+        if (allowUnescapedControlChars) {", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java\nindex 2f10a9be7a6..f6aa03bd19f 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDeserializationSchema.java\n\n@@ -118,22 +114,18 @@ public class JsonRowDeserializationSchema implements DeserializationSchema<Row>\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n-        if (allowUnescapedControlChars) {\n-            objectMapper.configure(\n-                    JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n-        }\n     }\n \n     /** @deprecated Use the provided {@link Builder} instead. */\n     @Deprecated\n     public JsonRowDeserializationSchema(TypeInformation<Row> typeInfo) {\n-        this(typeInfo, false, false, false);\n+        this(typeInfo, false, false);\n     }\n \n     /** @deprecated Use the provided {@link Builder} instead. */\n     @Deprecated\n     public JsonRowDeserializationSchema(String jsonSchema) {\n-        this(JsonRowSchemaConverter.convert(checkNotNull(jsonSchema)), false, false, false);\n+        this(JsonRowSchemaConverter.convert(checkNotNull(jsonSchema)), false, false);\n     }\n \n     /** @deprecated Use the provided {@link Builder} instead. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDU4Nw==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550420587", "bodyText": "Please use true as input . Because the default value of the option is false.", "author": "fsk119", "createdAt": "2020-12-31T07:47:07Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java", "diffHunk": "@@ -154,7 +168,8 @@ private void testSchemaDeserializationSchema(Map<String, String> options) {\n                         InternalTypeInfo.of(ROW_TYPE),\n                         false,\n                         true,\n-                        TimestampFormat.ISO_8601);\n+                        TimestampFormat.ISO_8601,\n+                        false);", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java\nindex fde22b927ca..ba6e239586b 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonFormatFactoryTest.java\n\n@@ -168,8 +154,7 @@ public class JsonFormatFactoryTest extends TestLogger {\n                         InternalTypeInfo.of(ROW_TYPE),\n                         false,\n                         true,\n-                        TimestampFormat.ISO_8601,\n-                        false);\n+                        TimestampFormat.ISO_8601);\n \n         final DynamicTableSource actualSource = createTableSource(options);\n         assert actualSource instanceof TestDynamicTableFactory.DynamicTableSourceMock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTA2OQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550421069", "bodyText": "Maybe we can simplify to\nobjectMapper.configure(\n                    JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), allowUnescapedControlChars);", "author": "fsk119", "createdAt": "2020-12-31T07:49:53Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java", "diffHunk": "@@ -90,6 +92,10 @@ public JsonRowDataDeserializationSchema(\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n+        if (allowUnescapedControlChars) {\n+            objectMapper.configure(", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\nindex 709623114a9..ebdad24ddf0 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n\n@@ -92,10 +91,7 @@ public class JsonRowDataDeserializationSchema implements DeserializationSchema<R\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n-        if (allowUnescapedControlChars) {\n-            objectMapper.configure(\n-                    JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n-        }\n+        objectMapper.configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMjkxNw==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550422917", "bodyText": "Currently the community is moving to the new descriptor api. It not recommended to add new feature for the depricated api.", "author": "fsk119", "createdAt": "2020-12-31T08:01:14Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowFormatFactory.java", "diffHunk": "@@ -79,6 +79,14 @@ public JsonRowFormatFactory() {\n                                 schema.ignoreParseErrors();\n                             }\n                         });\n+        descriptorProperties", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowFormatFactory.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowFormatFactory.java\nindex 514b7e460f6..00506e9216e 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowFormatFactory.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowFormatFactory.java\n\n@@ -79,14 +79,6 @@ public class JsonRowFormatFactory extends TableFormatFactoryBase<Row>\n                                 schema.ignoreParseErrors();\n                             }\n                         });\n-        descriptorProperties\n-                .getOptionalBoolean(JsonValidator.FORMAT_ALLOW_UNESCAPED_CONTROL_CHARS)\n-                .ifPresent(\n-                        flag -> {\n-                            if (flag) {\n-                                schema.allowUnescapedControlChars();\n-                            }\n-                        });\n         return schema.build();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyNDAzOA==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550424038", "bodyText": "Please don't add new feature for the old descriptor api.", "author": "fsk119", "createdAt": "2020-12-31T08:07:48Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/table/descriptors/JsonValidator.java", "diffHunk": "@@ -56,6 +58,7 @@ public void validate(DescriptorProperties properties) {\n \n         properties.validateBoolean(FORMAT_FAIL_ON_MISSING_FIELD, true);\n         properties.validateBoolean(FORMAT_IGNORE_PARSE_ERRORS, true);\n+        properties.validateBoolean(FORMAT_ALLOW_UNESCAPED_CONTROL_CHARS, true);", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/table/descriptors/JsonValidator.java b/flink-formats/flink-json/src/main/java/org/apache/flink/table/descriptors/JsonValidator.java\nindex c75cc6e8e1f..8fcdaf517af 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/table/descriptors/JsonValidator.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/table/descriptors/JsonValidator.java\n\n@@ -58,7 +56,6 @@ public class JsonValidator extends FormatDescriptorValidator {\n \n         properties.validateBoolean(FORMAT_FAIL_ON_MISSING_FIELD, true);\n         properties.validateBoolean(FORMAT_IGNORE_PARSE_ERRORS, true);\n-        properties.validateBoolean(FORMAT_ALLOW_UNESCAPED_CONTROL_CHARS, true);\n         boolean failOnMissingField =\n                 properties.getOptionalBoolean(FORMAT_FAIL_ON_MISSING_FIELD).orElse(false);\n         boolean ignoreParseErrors =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyNjk3MA==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550426970", "bodyText": "I think we can add .expectErrorMessage(..) to also check the failed situation.", "author": "fsk119", "createdAt": "2020-12-31T08:24:42Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java", "diffHunk": "@@ -700,7 +727,10 @@ private void testParseErrors(TestSpec spec) throws Exception {\n                                     \"Failed to deserialize JSON '{\\\"id\\\":\\\"2019-11-12T18:00:12+0800\\\"}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":1,\\\"factor\\\":799.929496989092949698}\")\n                             .rowType(ROW(FIELD(\"id\", INT()), FIELD(\"factor\", DECIMAL(38, 18))))\n-                            .expect(Row.of(1, new BigDecimal(\"799.929496989092949698\"))));\n+                            .expect(Row.of(1, new BigDecimal(\"799.929496989092949698\"))),\n+                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\")\n+                            .rowType(ROW(FIELD(\"id\", STRING())))", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java\nindex 575ab59516d..4e7fca989ce 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java\n\n@@ -728,9 +700,9 @@ public class JsonRowDataSerDeSchemaTest {\n                     TestSpec.json(\"{\\\"id\\\":1,\\\"factor\\\":799.929496989092949698}\")\n                             .rowType(ROW(FIELD(\"id\", INT()), FIELD(\"factor\", DECIMAL(38, 18))))\n                             .expect(Row.of(1, new BigDecimal(\"799.929496989092949698\"))),\n-                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\")\n+                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\") // test to parse control chars\n                             .rowType(ROW(FIELD(\"id\", STRING())))\n-                            .expect(Row.of(\"\tstring field\")));\n+                            .expect(Row.of(\"\\tstring field\")));\n \n     private static Map<String, Integer> createHashMap(\n             String k1, Integer v1, String k2, Integer v2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyODI1NA==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550428254", "bodyText": "Please use fields to store the value of the allowUnescapedControlChars and timestampFormat .", "author": "fsk119", "createdAt": "2020-12-31T08:31:21Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java", "diffHunk": "@@ -105,7 +106,8 @@ private CanalJsonDeserializationSchema(\n                         false, // ignoreParseErrors already contains the functionality of\n                         // failOnMissingField\n                         ignoreParseErrors,\n-                        timestampFormat);\n+                        timestampFormat,\n+                        allowUnescapedControlChars);", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java\nindex 1523a4da5a3..00bb7483b43 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/canal/CanalJsonDeserializationSchema.java\n\n@@ -106,8 +105,7 @@ public final class CanalJsonDeserializationSchema implements DeserializationSche\n                         false, // ignoreParseErrors already contains the functionality of\n                         // failOnMissingField\n                         ignoreParseErrors,\n-                        timestampFormat,\n-                        allowUnescapedControlChars);\n+                        timestampFormat);\n         this.hasMetadata = requestedMetadata.size() > 0;\n         this.metadataConverters = createMetadataConverters(jsonRowType, requestedMetadata);\n         this.producedTypeInfo = producedTypeInfo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMDAyMg==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550430022", "bodyText": "ditto", "author": "fsk119", "createdAt": "2020-12-31T08:40:54Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java", "diffHunk": "@@ -94,7 +94,8 @@ public DebeziumJsonDeserializationSchema(\n             TypeInformation<RowData> producedTypeInfo,\n             boolean schemaInclude,\n             boolean ignoreParseErrors,\n-            TimestampFormat timestampFormat) {\n+            TimestampFormat timestampFormat,", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java\nindex a3f67b104eb..628e053423a 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonDeserializationSchema.java\n\n@@ -94,8 +94,7 @@ public final class DebeziumJsonDeserializationSchema implements DeserializationS\n             TypeInformation<RowData> producedTypeInfo,\n             boolean schemaInclude,\n             boolean ignoreParseErrors,\n-            TimestampFormat timestampFormat,\n-            boolean allowUnescapedControlChars) {\n+            TimestampFormat timestampFormat) {\n         final RowType jsonRowType =\n                 createJsonRowType(physicalDataType, requestedMetadata, schemaInclude);\n         this.jsonDeserializer =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMDE2MQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550430161", "bodyText": "ditto", "author": "fsk119", "createdAt": "2020-12-31T08:41:37Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java", "diffHunk": "@@ -70,7 +70,8 @@ public MaxwellJsonDeserializationSchema(\n             RowType rowType,\n             TypeInformation<RowData> resultTypeInfo,\n             boolean ignoreParseErrors,\n-            TimestampFormat timestampFormatOption) {\n+            TimestampFormat timestampFormatOption,\n+            boolean allowUnescapedControlChars) {", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\nindex 77e5ce2565f..073870895f7 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\n\n@@ -70,8 +70,7 @@ public class MaxwellJsonDeserializationSchema implements DeserializationSchema<R\n             RowType rowType,\n             TypeInformation<RowData> resultTypeInfo,\n             boolean ignoreParseErrors,\n-            TimestampFormat timestampFormatOption,\n-            boolean allowUnescapedControlChars) {\n+            TimestampFormat timestampFormatOption) {\n         this.resultTypeInfo = resultTypeInfo;\n         this.ignoreParseErrors = ignoreParseErrors;\n         this.fieldCount = rowType.getFieldCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMDczNw==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550430737", "bodyText": "Please add this option into the optionalOptions.", "author": "fsk119", "createdAt": "2020-12-31T08:44:45Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java", "diffHunk": "@@ -43,6 +43,7 @@\n import java.util.HashSet;\n import java.util.Set;\n \n+import static org.apache.flink.formats.json.maxwell.MaxwellJsonOptions.ALLOW_UNESCAPED_CONTROL_CHARS;", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java\nindex 68e20ef609d..0a57cbe4389 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactory.java\n\n@@ -43,7 +43,6 @@ import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n-import static org.apache.flink.formats.json.maxwell.MaxwellJsonOptions.ALLOW_UNESCAPED_CONTROL_CHARS;\n import static org.apache.flink.formats.json.maxwell.MaxwellJsonOptions.IGNORE_PARSE_ERRORS;\n import static org.apache.flink.formats.json.maxwell.MaxwellJsonOptions.JSON_MAP_NULL_KEY_LITERAL;\n import static org.apache.flink.formats.json.maxwell.MaxwellJsonOptions.JSON_MAP_NULL_KEY_MODE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMTE5Nw==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550431197", "bodyText": "use true to test.", "author": "fsk119", "createdAt": "2020-12-31T08:46:51Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactoryTest.java", "diffHunk": "@@ -134,7 +135,8 @@ public void testSchemaIncludeOption() {\n                         InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()),\n                         true,\n                         true,\n-                        TimestampFormat.ISO_8601);\n+                        TimestampFormat.ISO_8601,\n+                        false);", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactoryTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactoryTest.java\nindex 9867691b9a2..92f8230139e 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactoryTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactoryTest.java\n\n@@ -135,8 +134,7 @@ public class DebeziumJsonFormatFactoryTest extends TestLogger {\n                         InternalTypeInfo.of(PHYSICAL_DATA_TYPE.getLogicalType()),\n                         true,\n                         true,\n-                        TimestampFormat.ISO_8601,\n-                        false);\n+                        TimestampFormat.ISO_8601);\n         final DynamicTableSource actualSource = createTableSource(options);\n         TestDynamicTableFactory.DynamicTableSourceMock scanSourceMock =\n                 (TestDynamicTableFactory.DynamicTableSourceMock) actualSource;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQzMTQyMQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r550431421", "bodyText": "use true .", "author": "fsk119", "createdAt": "2020-12-31T08:47:56Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactoryTest.java", "diffHunk": "@@ -67,7 +67,11 @@\n     public void testSeDeSchema() {\n         final MaxwellJsonDeserializationSchema expectedDeser =\n                 new MaxwellJsonDeserializationSchema(\n-                        ROW_TYPE, InternalTypeInfo.of(ROW_TYPE), true, TimestampFormat.ISO_8601);\n+                        ROW_TYPE,\n+                        InternalTypeInfo.of(ROW_TYPE),\n+                        true,\n+                        TimestampFormat.ISO_8601,\n+                        false);", "originalCommit": "f5f641fcde2b6d33b89c640994fcb69cafaa00a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactoryTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactoryTest.java\nindex 492d8f7ad43..e7d6910182e 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactoryTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/maxwell/MaxwellJsonFormatFactoryTest.java\n\n@@ -67,11 +67,7 @@ public class MaxwellJsonFormatFactoryTest extends TestLogger {\n     public void testSeDeSchema() {\n         final MaxwellJsonDeserializationSchema expectedDeser =\n                 new MaxwellJsonDeserializationSchema(\n-                        ROW_TYPE,\n-                        InternalTypeInfo.of(ROW_TYPE),\n-                        true,\n-                        TimestampFormat.ISO_8601,\n-                        false);\n+                        ROW_TYPE, InternalTypeInfo.of(ROW_TYPE), true, TimestampFormat.ISO_8601);\n \n         final MaxwellJsonSerializationSchema expectedSer =\n                 new MaxwellJsonSerializationSchema(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg4NTk2NQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r551885965", "bodyText": "Please add comments to explain when  ignore-parse-error will fail.", "author": "fsk119", "createdAt": "2021-01-05T11:53:16Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java", "diffHunk": "@@ -85,11 +90,15 @@ public JsonRowDataDeserializationSchema(\n                 new JsonToRowDataConverters(failOnMissingField, ignoreParseErrors, timestampFormat)\n                         .createConverter(checkNotNull(rowType));\n         this.timestampFormat = timestampFormat;\n+        this.allowUnescapedControlChars = allowUnescapedControlChars;\n         boolean hasDecimalType =\n                 LogicalTypeChecks.hasNested(rowType, t -> t instanceof DecimalType);\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n+        objectMapper.configure(\n+                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n+                allowUnescapedControlChars);\n     }\n \n     @Override", "originalCommit": "c368105103600ccab7f5bf473f3e879ed2168c2c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\nindex 366b2f58322..ebdad24ddf0 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n\n@@ -90,15 +86,12 @@ public class JsonRowDataDeserializationSchema implements DeserializationSchema<R\n                 new JsonToRowDataConverters(failOnMissingField, ignoreParseErrors, timestampFormat)\n                         .createConverter(checkNotNull(rowType));\n         this.timestampFormat = timestampFormat;\n-        this.allowUnescapedControlChars = allowUnescapedControlChars;\n         boolean hasDecimalType =\n                 LogicalTypeChecks.hasNested(rowType, t -> t instanceof DecimalType);\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n-        objectMapper.configure(\n-                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n-                allowUnescapedControlChars);\n+        objectMapper.configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQwMjk4MQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r552402981", "bodyText": "This comment is hard to understand. Why exception will be thrown when ignoreParseErrors is enabled.", "author": "wuchong", "createdAt": "2021-01-06T07:01:15Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java", "diffHunk": "@@ -85,16 +90,22 @@ public JsonRowDataDeserializationSchema(\n                 new JsonToRowDataConverters(failOnMissingField, ignoreParseErrors, timestampFormat)\n                         .createConverter(checkNotNull(rowType));\n         this.timestampFormat = timestampFormat;\n+        this.allowUnescapedControlChars = allowUnescapedControlChars;\n         boolean hasDecimalType =\n                 LogicalTypeChecks.hasNested(rowType, t -> t instanceof DecimalType);\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n+        objectMapper.configure(\n+                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n+                allowUnescapedControlChars);\n     }\n \n     @Override\n     public RowData deserialize(byte[] message) throws IOException {\n         try {\n+            // it will return null if `ignoreParseErrors` is true\n+            // and when executing `objectMapper.readTree(message)` throw an exception.", "originalCommit": "6054e046fda054e8459cd7ff4ca7d4df3fa7b74c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\nindex e9a46edd164..ebdad24ddf0 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n\n@@ -90,22 +86,17 @@ public class JsonRowDataDeserializationSchema implements DeserializationSchema<R\n                 new JsonToRowDataConverters(failOnMissingField, ignoreParseErrors, timestampFormat)\n                         .createConverter(checkNotNull(rowType));\n         this.timestampFormat = timestampFormat;\n-        this.allowUnescapedControlChars = allowUnescapedControlChars;\n         boolean hasDecimalType =\n                 LogicalTypeChecks.hasNested(rowType, t -> t instanceof DecimalType);\n         if (hasDecimalType) {\n             objectMapper.enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n         }\n-        objectMapper.configure(\n-                JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(),\n-                allowUnescapedControlChars);\n+        objectMapper.configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true);\n     }\n \n     @Override\n     public RowData deserialize(byte[] message) throws IOException {\n         try {\n-            // it will return null if `ignoreParseErrors` is true\n-            // and when executing `objectMapper.readTree(message)` throw an exception.\n             final JsonNode root = objectMapper.readTree(message);\n             return (RowData) runtimeConverter.convert(root);\n         } catch (Throwable t) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQwNDg4OQ==", "url": "https://github.com/apache/flink/pull/14508#discussion_r552404889", "bodyText": "I think for the control chars configuration, we can add a separate test method. This can avoid to touch so many TestSpecs. The TestSpec is used to verify the general deserializing and serializing.", "author": "wuchong", "createdAt": "2021-01-06T07:08:11Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java", "diffHunk": "@@ -692,15 +727,27 @@ private void testParseErrors(TestSpec spec) throws Exception {\n                                     \"Failed to deserialize JSON '{\\\"map\\\":{\\\"key1\\\":\\\"123\\\", \\\"key2\\\":\\\"abc\\\"}}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":\\\"2019-11-12T18:00:12\\\"}\")\n                             .rowType(ROW(FIELD(\"id\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(0))))\n+                            .expect(new Row(1))\n                             .expectErrorMessage(\n                                     \"Failed to deserialize JSON '{\\\"id\\\":\\\"2019-11-12T18:00:12\\\"}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":\\\"2019-11-12T18:00:12+0800\\\"}\")\n                             .rowType(ROW(FIELD(\"id\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(0))))\n+                            .expect(new Row(1))\n                             .expectErrorMessage(\n                                     \"Failed to deserialize JSON '{\\\"id\\\":\\\"2019-11-12T18:00:12+0800\\\"}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":1,\\\"factor\\\":799.929496989092949698}\")\n                             .rowType(ROW(FIELD(\"id\", INT()), FIELD(\"factor\", DECIMAL(38, 18))))\n-                            .expect(Row.of(1, new BigDecimal(\"799.929496989092949698\"))));\n+                            .expect(Row.of(1, new BigDecimal(\"799.929496989092949698\"))),\n+                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\")\n+                            .rowType(ROW(FIELD(\"id\", STRING())))\n+                            .expect(Row.of(\"\tstring field\")),\n+                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\")\n+                            .rowType(ROW(FIELD(\"id\", STRING())))\n+                            .expect(null) // it will return null when deserializing the byte[] to", "originalCommit": "6054e046fda054e8459cd7ff4ca7d4df3fa7b74c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java\nindex fe8f6788436..4e7fca989ce 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowDataSerDeSchemaTest.java\n\n@@ -727,27 +691,18 @@ public class JsonRowDataSerDeSchemaTest {\n                                     \"Failed to deserialize JSON '{\\\"map\\\":{\\\"key1\\\":\\\"123\\\", \\\"key2\\\":\\\"abc\\\"}}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":\\\"2019-11-12T18:00:12\\\"}\")\n                             .rowType(ROW(FIELD(\"id\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(0))))\n-                            .expect(new Row(1))\n                             .expectErrorMessage(\n                                     \"Failed to deserialize JSON '{\\\"id\\\":\\\"2019-11-12T18:00:12\\\"}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":\\\"2019-11-12T18:00:12+0800\\\"}\")\n                             .rowType(ROW(FIELD(\"id\", TIMESTAMP_WITH_LOCAL_TIME_ZONE(0))))\n-                            .expect(new Row(1))\n                             .expectErrorMessage(\n                                     \"Failed to deserialize JSON '{\\\"id\\\":\\\"2019-11-12T18:00:12+0800\\\"}'.\"),\n                     TestSpec.json(\"{\\\"id\\\":1,\\\"factor\\\":799.929496989092949698}\")\n                             .rowType(ROW(FIELD(\"id\", INT()), FIELD(\"factor\", DECIMAL(38, 18))))\n                             .expect(Row.of(1, new BigDecimal(\"799.929496989092949698\"))),\n-                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\")\n-                            .rowType(ROW(FIELD(\"id\", STRING())))\n-                            .expect(Row.of(\"\tstring field\")),\n-                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\")\n+                    TestSpec.json(\"{\\\"id\\\":\\\"\\tstring field\\\"}\") // test to parse control chars\n                             .rowType(ROW(FIELD(\"id\", STRING())))\n-                            .expect(null) // it will return null when deserializing the byte[] to\n-                            // the JsonNode fails.\n-                            .allowUnescapedControlChars(false)\n-                            .expectErrorMessage(\n-                                    \"Failed to deserialize JSON '{\\\"id\\\":\\\"\\tstring field\\\"}'.\"));\n+                            .expect(Row.of(\"\\tstring field\")));\n \n     private static Map<String, Integer> createHashMap(\n             String k1, Integer v1, String k2, Integer v2) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQwNTY2Nw==", "url": "https://github.com/apache/flink/pull/14508#discussion_r552405667", "bodyText": "The parameters are super large. Could you refactor it into builder pattern? Just like CsvRowDataDeserializationSchema. This can reduce the effort to add a new parameter in the future.", "author": "wuchong", "createdAt": "2021-01-06T07:11:04Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java", "diffHunk": "@@ -68,12 +69,16 @@\n     /** Timestamp format specification which is used to parse timestamp. */\n     private final TimestampFormat timestampFormat;\n \n+    /** Flag indicating whether to allow unescaped control chars in the data. */\n+    private final boolean allowUnescapedControlChars;\n+\n     public JsonRowDataDeserializationSchema(\n             RowType rowType,\n             TypeInformation<RowData> resultTypeInfo,\n             boolean failOnMissingField,\n             boolean ignoreParseErrors,\n-            TimestampFormat timestampFormat) {\n+            TimestampFormat timestampFormat,\n+            boolean allowUnescapedControlChars) {", "originalCommit": "6054e046fda054e8459cd7ff4ca7d4df3fa7b74c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\nindex e9a46edd164..ebdad24ddf0 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowDataDeserializationSchema.java\n\n@@ -69,16 +69,12 @@ public class JsonRowDataDeserializationSchema implements DeserializationSchema<R\n     /** Timestamp format specification which is used to parse timestamp. */\n     private final TimestampFormat timestampFormat;\n \n-    /** Flag indicating whether to allow unescaped control chars in the data. */\n-    private final boolean allowUnescapedControlChars;\n-\n     public JsonRowDataDeserializationSchema(\n             RowType rowType,\n             TypeInformation<RowData> resultTypeInfo,\n             boolean failOnMissingField,\n             boolean ignoreParseErrors,\n-            TimestampFormat timestampFormat,\n-            boolean allowUnescapedControlChars) {\n+            TimestampFormat timestampFormat) {\n         if (ignoreParseErrors && failOnMissingField) {\n             throw new IllegalArgumentException(\n                     \"JSON format doesn't support failOnMissingField and ignoreParseErrors are both enabled.\");\n"}}, {"oid": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "url": "https://github.com/apache/flink/commit/1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "message": "[FLINK-20773][json] Support to parse unescaped control chars in string node\n\nThis closes #14508", "committedDate": "2021-01-07T06:50:58Z", "type": "commit"}, {"oid": "1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "url": "https://github.com/apache/flink/commit/1b96157c0fc638ecdaf4a5c04c51e52275e926f0", "message": "[FLINK-20773][json] Support to parse unescaped control chars in string node\n\nThis closes #14508", "committedDate": "2021-01-07T06:50:58Z", "type": "forcePushed"}, {"oid": "4e309bd3363c2b7f9ad367e417dc57ff7c1f96fb", "url": "https://github.com/apache/flink/commit/4e309bd3363c2b7f9ad367e417dc57ff7c1f96fb", "message": "fix checkstyle", "committedDate": "2021-01-07T10:02:15Z", "type": "commit"}]}