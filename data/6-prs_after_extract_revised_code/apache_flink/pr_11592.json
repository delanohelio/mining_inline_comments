{"pr_number": 11592, "pr_title": "[FLINK-16871][runtime] Make more build time information available at runtime", "pr_createdAt": "2020-04-01T08:33:38Z", "pr_url": "https://github.com/apache/flink/pull/11592", "timeline": [{"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "url": "https://github.com/apache/flink/commit/d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-01T08:46:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0MDAxMA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r404740010", "bodyText": "this seems quite Flink developer oriented and I'm not convinced we need it. How would this be exposed to the developer?", "author": "zentol", "createdAt": "2020-04-07T11:35:13Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,14 +49,77 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn PROJECT_VERSION;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn SCALA_VERSION;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn GIT_BUILD_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn GIT_BUILD_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn GIT_COMMIT_ID;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn GIT_COMMIT_ID_ABBREV;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn GIT_COMMIT_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn GIT_COMMIT_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return Does this built have modifications that have not yet been committed.\n+\t */\n+\tpublic static boolean getGitDirty() {\n+\t\treturn GIT_DIRTY;", "originalCommit": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MjQ1NQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r404762455", "bodyText": "I agree. Removing it.", "author": "nielsbasjes", "createdAt": "2020-04-07T12:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0MDAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "47099f663b7644056e9d87b262cd4dba034f513e", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex 1077a2f215..bea2058882 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -53,7 +49,7 @@ public class EnvironmentInformation {\n \t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\treturn PROJECT_VERSION;\n+\t\treturn getVersionsInstance().projectVersion;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NzYzNQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r404747635", "bodyText": "I would off on this one; it is currently not clear how this will be used and it will make more sense in the follow-up PR.", "author": "zentol", "createdAt": "2020-04-07T11:50:02Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,14 +49,77 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn PROJECT_VERSION;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn SCALA_VERSION;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn GIT_BUILD_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn GIT_BUILD_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn GIT_COMMIT_ID;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn GIT_COMMIT_ID_ABBREV;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn GIT_COMMIT_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn GIT_COMMIT_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return Does this built have modifications that have not yet been committed.\n+\t */\n+\tpublic static boolean getGitDirty() {\n+\t\treturn GIT_DIRTY;\n+\t}\n+\n+\t/**\n+\t * Returns the exact name of the Dockerimage for Flink that is needed to run in.\n+\t *\n+\t * @return The \"name:tag\" of the Flink docker image.\n+\t */\n+\tpublic static String getFlinkDockerImageNameAndTag() {", "originalCommit": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc2MjUyOQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r404762529", "bodyText": "I agree. Removing it.", "author": "nielsbasjes", "createdAt": "2020-04-07T12:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NzYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "47099f663b7644056e9d87b262cd4dba034f513e", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex 1077a2f215..bea2058882 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -53,7 +49,7 @@ public class EnvironmentInformation {\n \t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\treturn PROJECT_VERSION;\n+\t\treturn getVersionsInstance().projectVersion;\n \t}\n \n \t/**\n"}}, {"oid": "47099f663b7644056e9d87b262cd4dba034f513e", "url": "https://github.com/apache/flink/commit/47099f663b7644056e9d87b262cd4dba034f513e", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-08T12:58:33Z", "type": "forcePushed"}, {"oid": "347da3e6e6a4728ad972b39b58b3946675dd990b", "url": "https://github.com/apache/flink/commit/347da3e6e6a4728ad972b39b58b3946675dd990b", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-20T12:26:55Z", "type": "forcePushed"}, {"oid": "85b85208d9f7dbd75e48c85ff8837131204ba156", "url": "https://github.com/apache/flink/commit/85b85208d9f7dbd75e48c85ff8837131204ba156", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-20T12:45:13Z", "type": "forcePushed"}, {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "url": "https://github.com/apache/flink/commit/3f68dbf9b6ee1686394e6c83720c616384e429f0", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-20T12:47:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyODgzMg==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412128832", "bodyText": "The $ branch means that it will fail if I just run it in the IDE; instead we should return the unknown value.", "author": "zentol", "createdAt": "2020-04-21T12:11:17Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4NjUwNg==", "url": "https://github.com/apache/flink/pull/11592#discussion_r416386506", "bodyText": "Ok, I'll update that behaviour.", "author": "nielsbasjes", "createdAt": "2020-04-28T07:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyODgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,43 +113,42 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n-\n-\n-\t\tprivate String  projectVersion    = UNKNOWN;\n-\t\tprivate String  scalaVersion      = UNKNOWN;\n-\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId       = UNKNOWN;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n-\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n \t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n \n-\t\tprivate String getProperty(Properties properties, String key) {\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n \t\t\tString value = properties.getProperty(key);\n \t\t\tif (value == null || value.charAt(0) == '$') {\n-\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n \t\t\treturn value;\n \t\t}\n \n \t\tpublic Versions() {\n-\n \t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n-\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n \t\t\t\tif (propFile != null) {\n \t\t\t\t\tProperties properties = new Properties();\n \t\t\t\t\tproperties.load(propFile);\n \n-\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n-\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n \n-\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n-\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n \n \t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n \t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyOTA5Mw==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412129093", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate String  projectVersion    = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  scalaVersion      = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  gitCommitId       = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  projectVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  scalaVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  gitCommitId = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;", "author": "zentol", "createdAt": "2020-04-21T12:11:42Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,43 +113,42 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n-\n-\n-\t\tprivate String  projectVersion    = UNKNOWN;\n-\t\tprivate String  scalaVersion      = UNKNOWN;\n-\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId       = UNKNOWN;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n-\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n \t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n \n-\t\tprivate String getProperty(Properties properties, String key) {\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n \t\t\tString value = properties.getProperty(key);\n \t\t\tif (value == null || value.charAt(0) == '$') {\n-\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n \t\t\treturn value;\n \t\t}\n \n \t\tpublic Versions() {\n-\n \t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n-\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n \t\t\t\tif (propFile != null) {\n \t\t\t\t\tProperties properties = new Properties();\n \t\t\t\t\tproperties.load(propFile);\n \n-\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n-\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n \n-\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n-\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n \n \t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n \t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyOTIwNA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412129204", "bodyText": "Suggested change", "author": "zentol", "createdAt": "2020-04-21T12:11:51Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,43 +113,42 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n-\n-\n-\t\tprivate String  projectVersion    = UNKNOWN;\n-\t\tprivate String  scalaVersion      = UNKNOWN;\n-\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId       = UNKNOWN;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n-\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n \t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n \n-\t\tprivate String getProperty(Properties properties, String key) {\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n \t\t\tString value = properties.getProperty(key);\n \t\t\tif (value == null || value.charAt(0) == '$') {\n-\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n \t\t\treturn value;\n \t\t}\n \n \t\tpublic Versions() {\n-\n \t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n-\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n \t\t\t\tif (propFile != null) {\n \t\t\t\t\tProperties properties = new Properties();\n \t\t\t\t\tproperties.load(propFile);\n \n-\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n-\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n \n-\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n-\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n \n \t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n \t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyOTM1Ng==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412129356", "bodyText": "Suggested change", "author": "zentol", "createdAt": "2020-04-21T12:12:05Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,43 +113,42 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n-\n-\n-\t\tprivate String  projectVersion    = UNKNOWN;\n-\t\tprivate String  scalaVersion      = UNKNOWN;\n-\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId       = UNKNOWN;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n-\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n \t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n \n-\t\tprivate String getProperty(Properties properties, String key) {\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n \t\t\tString value = properties.getProperty(key);\n \t\t\tif (value == null || value.charAt(0) == '$') {\n-\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n \t\t\treturn value;\n \t\t}\n \n \t\tpublic Versions() {\n-\n \t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n-\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n \t\t\t\tif (propFile != null) {\n \t\t\t\t\tProperties properties = new Properties();\n \t\t\t\t\tproperties.load(propFile);\n \n-\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n-\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n \n-\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n-\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n \n \t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n \t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMDY3NA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412130674", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n          \n          \n            \n            \t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {", "author": "zentol", "createdAt": "2020-04-21T12:14:10Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,43 +113,42 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n-\n-\n-\t\tprivate String  projectVersion    = UNKNOWN;\n-\t\tprivate String  scalaVersion      = UNKNOWN;\n-\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId       = UNKNOWN;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n-\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n \t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n \n-\t\tprivate String getProperty(Properties properties, String key) {\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n \t\t\tString value = properties.getProperty(key);\n \t\t\tif (value == null || value.charAt(0) == '$') {\n-\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n \t\t\treturn value;\n \t\t}\n \n \t\tpublic Versions() {\n-\n \t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n-\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n \t\t\t\tif (propFile != null) {\n \t\t\t\t\tProperties properties = new Properties();\n \t\t\t\t\tproperties.load(propFile);\n \n-\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n-\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n \n-\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n-\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n \n \t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n \t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTAxNA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412131014", "bodyText": "why this distinction?", "author": "zentol", "createdAt": "2020-04-21T12:14:41Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\t\tif (propFile != null) {\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\tproperties.load(propFile);\n+\n+\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n+\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\n+\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n+\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\n+\t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n+\t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+\t\t\t\t\t// Default format is in Berlin timezone because that is where Flink originated.\n+\t\t\t\t\tDateTimeFormatter BERLIN_DATE_TIME = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Europe/Berlin\"));\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tString propGitCommitTime = properties.getProperty(\"git.commit.time\",      DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitCommitTime = gitDateTimeFormatter.parse(propGitCommitTime, Instant::from);\n+\t\t\t\t\t\tgitCommitTimeStr = BERLIN_DATE_TIME.format(gitCommitTime);\n+\n+\t\t\t\t\t\tString propGitBuildTime  = properties.getProperty(\"git.build.time\",       DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitBuildTime = gitDateTimeFormatter.parse(propGitBuildTime, Instant::from);\n+\t\t\t\t\t\tgitBuildTimeStr = BERLIN_DATE_TIME.format(gitBuildTime);\n+\t\t\t\t\t} catch (DateTimeParseException dtpe) {\n+\t\t\t\t\t\tLOG.error(\"{} : {}\", FAIL_MESSAGE, dtpe);\n+\t\t\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch(IOException ioe) {\n+\t\t\t\tif (LOG.isDebugEnabled()) {\n+\t\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.: {}\", ioe.getMessage());", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4NTkzOA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r416385938", "bodyText": "Fixed", "author": "nielsbasjes", "createdAt": "2020-04-28T07:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,43 +113,42 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n-\n-\n-\t\tprivate String  projectVersion    = UNKNOWN;\n-\t\tprivate String  scalaVersion      = UNKNOWN;\n-\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId       = UNKNOWN;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n-\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n \t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n \n-\t\tprivate String getProperty(Properties properties, String key) {\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n \t\t\tString value = properties.getProperty(key);\n \t\t\tif (value == null || value.charAt(0) == '$') {\n-\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n \t\t\treturn value;\n \t\t}\n \n \t\tpublic Versions() {\n-\n \t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n-\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n \t\t\t\tif (propFile != null) {\n \t\t\t\t\tProperties properties = new Properties();\n \t\t\t\t\tproperties.load(propFile);\n \n-\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n-\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n \n-\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n-\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n \n \t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n \t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTUyMA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r412131520", "bodyText": "Why are we adding this?", "author": "zentol", "createdAt": "2020-04-21T12:15:29Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -367,5 +478,13 @@ public RevisionInformation(String commitId, String commitDate) {\n \t\t\tthis.commitId = commitId;\n \t\t\tthis.commitDate = commitDate;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {", "originalCommit": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4NTYyMQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r416385621", "bodyText": "I added this because while debugging IntelliJ uses the toString method to show the content of a record ... which is messy if it falls back to the Object.toString(). I'll remove it.", "author": "nielsbasjes", "createdAt": "2020-04-28T07:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex e25fc1a131..472ada47e1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -478,13 +473,5 @@ public class EnvironmentInformation {\n \t\t\tthis.commitId = commitId;\n \t\t\tthis.commitDate = commitDate;\n \t\t}\n-\n-\t\t@Override\n-\t\tpublic String toString() {\n-\t\t\treturn \"RevisionInformation{\" +\n-\t\t\t\t\"commitId='\" + commitId + '\\'' +\n-\t\t\t\t\", commitDate='\" + commitDate + '\\'' +\n-\t\t\t\t'}';\n-\t\t}\n \t}\n }\n"}}, {"oid": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "url": "https://github.com/apache/flink/commit/089bf5d4d25369d9a4a8e5d46975be4591d01660", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-28T08:54:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3ODcyOQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r416578729", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n          \n          \n            \n            \t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n          \n          \n            \n            \t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n          \n          \n            \n            \t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n          \n          \n            \n            \t\tprivate String  projectVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  scalaVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n          \n          \n            \n            \t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n          \n          \n            \n            \t\tprivate static final String DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n          \n          \n            \n            \t\tprivate static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n          \n          \n            \n            \t\tprivate static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n          \n          \n            \n            \t\tprivate String projectVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate String scalaVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String gitBuildTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String gitCommitId = UNKNOWN_COMMIT_ID;\n          \n          \n            \n            \t\tprivate String gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String gitCommitTimeStr = DEFAULT_TIME_STRING;", "author": "zentol", "createdAt": "2020-04-28T12:39:31Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,143 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;", "originalCommit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1569b0fb708871f14638cec612d272bb8ea53cd1", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex 472ada47e1..e983172fd6 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,17 +113,17 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n-\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n-\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n-\t\tprivate String  projectVersion = UNKNOWN;\n-\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate static final String DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String projectVersion = UNKNOWN;\n+\t\tprivate String scalaVersion = UNKNOWN;\n \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate String gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTMyNg==", "url": "https://github.com/apache/flink/pull/11592#discussion_r416581326", "bodyText": "private?", "author": "zentol", "createdAt": "2020-04-28T12:43:23Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,143 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\t\tif (propFile != null) {\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\tproperties.load(propFile);\n+\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n+\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n+\n+\t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n+\t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+\t\t\t\t\t// Default format is in Berlin timezone because that is where Flink originated.\n+\t\t\t\t\tDateTimeFormatter BERLIN_DATE_TIME = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Europe/Berlin\"));\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tString propGitCommitTime = getProperty(properties, \"git.commit.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitCommitTime = gitDateTimeFormatter.parse(propGitCommitTime, Instant::from);\n+\t\t\t\t\t\tgitCommitTimeStr = BERLIN_DATE_TIME.format(gitCommitTime);\n+\n+\t\t\t\t\t\tString propGitBuildTime  = getProperty(properties, \"git.build.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitBuildTime = gitDateTimeFormatter.parse(propGitBuildTime, Instant::from);\n+\t\t\t\t\t\tgitBuildTimeStr = BERLIN_DATE_TIME.format(gitBuildTime);\n+\t\t\t\t\t} catch (DateTimeParseException dtpe) {\n+\t\t\t\t\t\tLOG.error(\"{} : {}\", FAIL_MESSAGE, dtpe);\n+\t\t\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch(IOException ioe) {\n+\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.: {}\", ioe.getMessage());\n \t\t\t}\n \t\t}\n-\t\t\n-\t\treturn new RevisionInformation(revision, commitDate);\n+\t}\n+\n+\tprivate static final class VersionsHolder {\n+\t\tprivate static final Versions INSTANCE = new Versions();\n+\t}\n+\n+\tpublic static Versions getVersionsInstance() {", "originalCommit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5NDEyNA==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417894124", "bodyText": "(since Versions is private anyway so you couldn't do anything interesting with it)", "author": "zentol", "createdAt": "2020-04-30T09:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5NjMyNw==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417896327", "bodyText": "Ah, yes. I'll fix that.", "author": "nielsbasjes", "createdAt": "2020-04-30T10:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "1569b0fb708871f14638cec612d272bb8ea53cd1", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex 472ada47e1..e983172fd6 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,17 +113,17 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n-\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n-\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n-\t\tprivate String  projectVersion = UNKNOWN;\n-\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate static final String DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String projectVersion = UNKNOWN;\n+\t\tprivate String scalaVersion = UNKNOWN;\n \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate String gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r416581839", "bodyText": "We usually don't encapsulate singletons. What is the goal behind the holder? (I haven't seen this before)", "author": "zentol", "createdAt": "2020-04-28T12:44:14Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,143 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\t\tif (propFile != null) {\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\tproperties.load(propFile);\n+\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n+\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n+\n+\t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n+\t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+\t\t\t\t\t// Default format is in Berlin timezone because that is where Flink originated.\n+\t\t\t\t\tDateTimeFormatter BERLIN_DATE_TIME = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Europe/Berlin\"));\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tString propGitCommitTime = getProperty(properties, \"git.commit.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitCommitTime = gitDateTimeFormatter.parse(propGitCommitTime, Instant::from);\n+\t\t\t\t\t\tgitCommitTimeStr = BERLIN_DATE_TIME.format(gitCommitTime);\n+\n+\t\t\t\t\t\tString propGitBuildTime  = getProperty(properties, \"git.build.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitBuildTime = gitDateTimeFormatter.parse(propGitBuildTime, Instant::from);\n+\t\t\t\t\t\tgitBuildTimeStr = BERLIN_DATE_TIME.format(gitBuildTime);\n+\t\t\t\t\t} catch (DateTimeParseException dtpe) {\n+\t\t\t\t\t\tLOG.error(\"{} : {}\", FAIL_MESSAGE, dtpe);\n+\t\t\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch(IOException ioe) {\n+\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.: {}\", ioe.getMessage());\n \t\t\t}\n \t\t}\n-\t\t\n-\t\treturn new RevisionInformation(revision, commitDate);\n+\t}\n+\n+\tprivate static final class VersionsHolder {", "originalCommit": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3NjI5Mg==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417276292", "bodyText": "It is a trick to ensure the instantiation of the singleton does not incur any race conditions.\nThis is a safe solution because the class instantiation of the VersionsHolder is guaranteed to be single threaded.\nAnother way to do this is to make the getVersionsInstance synchronized which makes it needlessly slow.", "author": "nielsbasjes", "createdAt": "2020-04-29T12:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3NzQ0Mg==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417277442", "bodyText": "This is also the reason why the VersionsHolder is private.", "author": "nielsbasjes", "createdAt": "2020-04-29T12:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg0MjA1NQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417842055", "bodyText": "Are you saying that having private static final Versions INSTANCE = new Versions(); directly in EnvironmentInformation would not be thread-safe?", "author": "zentol", "createdAt": "2020-04-30T08:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3MjE1Ng==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417872156", "bodyText": "No that is thread safe too. The way I did it the initialization is done on first use instead of on class loading. Which do you prefer?", "author": "nielsbasjes", "createdAt": "2020-04-30T09:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg5MzE5NQ==", "url": "https://github.com/apache/flink/pull/11592#discussion_r417893195", "bodyText": "Ah, got it. hmm...we usually use the class-loading one I believe, but I suppose  it's fine either way", "author": "zentol", "createdAt": "2020-04-30T09:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1569b0fb708871f14638cec612d272bb8ea53cd1", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\nindex 472ada47e1..e983172fd6 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\n@@ -113,17 +113,17 @@ public class EnvironmentInformation {\n \n \tprivate static final class Versions {\n \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n-\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n-\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n-\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n-\t\tprivate String  projectVersion = UNKNOWN;\n-\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate static final String DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String projectVersion = UNKNOWN;\n+\t\tprivate String scalaVersion = UNKNOWN;\n \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n-\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n-\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate String gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n-\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String gitCommitTimeStr = DEFAULT_TIME_STRING;\n \n \t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n \n"}}, {"oid": "1569b0fb708871f14638cec612d272bb8ea53cd1", "url": "https://github.com/apache/flink/commit/1569b0fb708871f14638cec612d272bb8ea53cd1", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-29T12:33:19Z", "type": "forcePushed"}, {"oid": "6bfea91889c6736a61b0b698da0774ad0a3f4f22", "url": "https://github.com/apache/flink/commit/6bfea91889c6736a61b0b698da0774ad0a3f4f22", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime", "committedDate": "2020-04-30T10:01:51Z", "type": "forcePushed"}, {"oid": "ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "url": "https://github.com/apache/flink/commit/ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "message": "[FLINK-16871][runtime] Make more build time information available at runtime", "committedDate": "2020-05-06T08:45:11Z", "type": "commit"}, {"oid": "ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "url": "https://github.com/apache/flink/commit/ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "message": "[FLINK-16871][runtime] Make more build time information available at runtime", "committedDate": "2020-05-06T08:45:11Z", "type": "forcePushed"}]}