{"pr_number": 13639, "pr_title": "[FLINK-19237] Fix rejected slot offer bug in JobMaster ", "pr_createdAt": "2020-10-14T14:37:01Z", "pr_url": "https://github.com/apache/flink/pull/13639", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMTMzNQ==", "url": "https://github.com/apache/flink/pull/13639#discussion_r504731335", "bodyText": "I will remove this empty line before merging or when addressing comments.", "author": "rmetzger", "createdAt": "2020-10-14T14:37:30Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java", "diffHunk": "@@ -280,6 +286,65 @@ public static void teardownClass() {\n \t\t}\n \t}\n \n+\t/**\n+\t * This test ensures that the bookkeeping of TaskExecutors in the JobMaster handles cases where TaskExecutors with the same\n+\t * ID re-register properly. FLINK-19237 was a bug where the TaskExecutors and the SlotPool got out of sync, and\n+\t * slot offers were rejected.\n+\t */\n+\t@Test\n+\tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {\n+\n+\t\tfinal JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build();\n+\t\tfinal JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration);\n+\n+\t\tfinal SchedulerNGFactory schedulerNGFactory = SchedulerNGFactoryFactory.createSchedulerNGFactory(configuration);\n+\n+\t\tfinal TestingJobMaster jobMaster = new TestingJobMaster(\n+\t\t\trpcService,\n+\t\t\tjobMasterConfiguration,\n+\t\t\tjmResourceId,\n+\t\t\tjobGraph,\n+\t\t\thaServices,\n+\t\t\tSlotPoolFactory.fromConfiguration(configuration),\n+\t\t\tjobManagerSharedServices,\n+\t\t\theartbeatServices,\n+\t\t\tUnregisteredJobManagerJobMetricGroupFactory.INSTANCE,\n+\t\t\tnew JobMasterBuilder.TestingOnCompletionActions(),\n+\t\t\ttestingFatalErrorHandler,\n+\t\t\tJobMasterTest.class.getClassLoader(),\n+\t\t\tschedulerNGFactory,\n+\t\t\tNettyShuffleMaster.INSTANCE,\n+\t\t\tNoOpJobMasterPartitionTracker.FACTORY,\n+\t\t\tnew DefaultExecutionDeploymentTracker(),\n+\t\t\tDefaultExecutionDeploymentReconciler::new,\n+\t\t\tSystem.currentTimeMillis());\n+\n+\t\tjobMaster.start(jobMasterId).get();\n+\n+\t\tlog.info(\"Register TaskManager\");\n+\n+\t\tString testingTaskManagerAddress = \"fake\";\n+\t\tUnresolvedTaskManagerLocation unresolvedTaskManagerLocation = new LocalUnresolvedTaskManagerLocation();\n+\t\tTestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway();\n+\t\trpcService.registerGateway(testingTaskManagerAddress, testingTaskExecutorGateway);\n+\t\tAssert.assertThat(jobMaster.registerTaskManager(testingTaskManagerAddress, unresolvedTaskManagerLocation, testingTimeout).get(), instanceOf(RegistrationResponse.Success.class));\n+\n+\t\tlog.info(\"Revoke leadership & re-grant leadership\");\n+\t\tjobMaster.suspend(new FlinkException(\"Lost leadership\")).get();\n+\n+\t\tjobMaster.start(JobMasterId.generate()).get();\n+\n+\t\tlog.info(\"re-register same TaskManager\");\n+\t\tAssert.assertThat(jobMaster.registerTaskManager(testingTaskManagerAddress, unresolvedTaskManagerLocation, testingTimeout).get(), instanceOf(RegistrationResponse.Success.class));\n+\n+\t\tlog.info(\"Ensure JobMaster accepts slot offer\");\n+\t\tfinal SlotOffer slotOffer = new SlotOffer(new AllocationID(), 0, ResourceProfile.ANY);\n+\n+\t\tCollection<SlotOffer> acceptedSlots = jobMaster.executeInMainThreadExecutor(() -> jobMaster.offerSlots(unresolvedTaskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()).get();\n+\t\tAssert.assertThat(acceptedSlots.size(), is(1));\n+", "originalCommit": "4bac1d3f88930c269cab61688034af64b0f20a10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5b605b27d5f0f75a623b31065c3062894c97725", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\nindex 36608b01c0..b8e50e215f 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n\n@@ -292,14 +293,14 @@ public class JobMasterTest extends TestLogger {\n \t * slot offers were rejected.\n \t */\n \t@Test\n-\tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {\n+\tpublic void testAcceptSlotOfferAfterLeaderChange() throws Exception {\n \n \t\tfinal JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build();\n \t\tfinal JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration);\n \n \t\tfinal SchedulerNGFactory schedulerNGFactory = SchedulerNGFactoryFactory.createSchedulerNGFactory(configuration);\n \n-\t\tfinal TestingJobMaster jobMaster = new TestingJobMaster(\n+\t\tfinal JobMaster testingJobMaster = new JobMaster(\n \t\t\trpcService,\n \t\t\tjobMasterConfiguration,\n \t\t\tjmResourceId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzODUxMg==", "url": "https://github.com/apache/flink/pull/13639#discussion_r505238512", "bodyText": "I think it would be good to explain why the test fails.", "author": "tillrohrmann", "createdAt": "2020-10-15T07:06:03Z", "path": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyCheckInactiveITCase.java", "diffHunk": "@@ -47,6 +50,7 @@\n \t */\n \t@Test\n \tpublic void testWithNoConcurrencyCheck() throws Exception {\n+\t\tassumeFalse(log.isDebugEnabled()); // this test will fail on DEBUG log level.", "originalCommit": "0e6b2e9b98bebd0a15eba394dd794c33d41f8269", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5b605b27d5f0f75a623b31065c3062894c97725", "chunk": "diff --git a/flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyCheckInactiveITCase.java b/flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyCheckInactiveITCase.java\nindex 7b64c9f7fe..8213cd50ec 100644\n--- a/flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyCheckInactiveITCase.java\n+++ b/flink-core/src/test/java/org/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyCheckInactiveITCase.java\n\n@@ -50,7 +50,9 @@ public class KryoSerializerConcurrencyCheckInactiveITCase extends TestLogger {\n \t */\n \t@Test\n \tpublic void testWithNoConcurrencyCheck() throws Exception {\n-\t\tassumeFalse(log.isDebugEnabled()); // this test will fail on DEBUG log level.\n+\t\t// this test will fail on DEBUG log level: If we run the test with DEBUG log level\n+\t\t// the KryoSerializer.CONCURRENT_ACCESS_CHECK will be enabled, causing a failure here.\n+\t\tassumeFalse(log.isDebugEnabled());\n \t\tboolean assertionError;\n \t\ttry {\n \t\t\tnew KryoSerializerConcurrencyTest().testConcurrentUseOfSerializer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MDQ2Mg==", "url": "https://github.com/apache/flink/pull/13639#discussion_r505240462", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {\n          \n          \n            \n            \tpublic void testAcceptSlotOfferAfterLeaderChange() throws Exception {", "author": "tillrohrmann", "createdAt": "2020-10-15T07:07:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java", "diffHunk": "@@ -280,6 +286,65 @@ public static void teardownClass() {\n \t\t}\n \t}\n \n+\t/**\n+\t * This test ensures that the bookkeeping of TaskExecutors in the JobMaster handles cases where TaskExecutors with the same\n+\t * ID re-register properly. FLINK-19237 was a bug where the TaskExecutors and the SlotPool got out of sync, and\n+\t * slot offers were rejected.\n+\t */\n+\t@Test\n+\tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {", "originalCommit": "4bac1d3f88930c269cab61688034af64b0f20a10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5b605b27d5f0f75a623b31065c3062894c97725", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\nindex 36608b01c0..b8e50e215f 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n\n@@ -292,14 +293,14 @@ public class JobMasterTest extends TestLogger {\n \t * slot offers were rejected.\n \t */\n \t@Test\n-\tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {\n+\tpublic void testAcceptSlotOfferAfterLeaderChange() throws Exception {\n \n \t\tfinal JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build();\n \t\tfinal JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration);\n \n \t\tfinal SchedulerNGFactory schedulerNGFactory = SchedulerNGFactoryFactory.createSchedulerNGFactory(configuration);\n \n-\t\tfinal TestingJobMaster jobMaster = new TestingJobMaster(\n+\t\tfinal JobMaster testingJobMaster = new JobMaster(\n \t\t\trpcService,\n \t\t\tjobMasterConfiguration,\n \t\t\tjmResourceId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MzI4NQ==", "url": "https://github.com/apache/flink/pull/13639#discussion_r505243285", "bodyText": "Instead of calling methods directly on the JobMaster I suggest to retrieve the self gateway via jobMaster.getSelfGateway(JobMasterGateway.class) and then to use this interface to send RPCs. That way, we also don't need executeInMainThreadExecutor.", "author": "tillrohrmann", "createdAt": "2020-10-15T07:10:09Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java", "diffHunk": "@@ -280,6 +286,65 @@ public static void teardownClass() {\n \t\t}\n \t}\n \n+\t/**\n+\t * This test ensures that the bookkeeping of TaskExecutors in the JobMaster handles cases where TaskExecutors with the same\n+\t * ID re-register properly. FLINK-19237 was a bug where the TaskExecutors and the SlotPool got out of sync, and\n+\t * slot offers were rejected.\n+\t */\n+\t@Test\n+\tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {\n+\n+\t\tfinal JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build();\n+\t\tfinal JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration);\n+\n+\t\tfinal SchedulerNGFactory schedulerNGFactory = SchedulerNGFactoryFactory.createSchedulerNGFactory(configuration);\n+\n+\t\tfinal TestingJobMaster jobMaster = new TestingJobMaster(\n+\t\t\trpcService,\n+\t\t\tjobMasterConfiguration,\n+\t\t\tjmResourceId,\n+\t\t\tjobGraph,\n+\t\t\thaServices,\n+\t\t\tSlotPoolFactory.fromConfiguration(configuration),\n+\t\t\tjobManagerSharedServices,\n+\t\t\theartbeatServices,\n+\t\t\tUnregisteredJobManagerJobMetricGroupFactory.INSTANCE,\n+\t\t\tnew JobMasterBuilder.TestingOnCompletionActions(),\n+\t\t\ttestingFatalErrorHandler,\n+\t\t\tJobMasterTest.class.getClassLoader(),\n+\t\t\tschedulerNGFactory,\n+\t\t\tNettyShuffleMaster.INSTANCE,\n+\t\t\tNoOpJobMasterPartitionTracker.FACTORY,\n+\t\t\tnew DefaultExecutionDeploymentTracker(),\n+\t\t\tDefaultExecutionDeploymentReconciler::new,\n+\t\t\tSystem.currentTimeMillis());\n+\n+\t\tjobMaster.start(jobMasterId).get();\n+\n+\t\tlog.info(\"Register TaskManager\");\n+\n+\t\tString testingTaskManagerAddress = \"fake\";\n+\t\tUnresolvedTaskManagerLocation unresolvedTaskManagerLocation = new LocalUnresolvedTaskManagerLocation();\n+\t\tTestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway();\n+\t\trpcService.registerGateway(testingTaskManagerAddress, testingTaskExecutorGateway);\n+\t\tAssert.assertThat(jobMaster.registerTaskManager(testingTaskManagerAddress, unresolvedTaskManagerLocation, testingTimeout).get(), instanceOf(RegistrationResponse.Success.class));\n+\n+\t\tlog.info(\"Revoke leadership & re-grant leadership\");\n+\t\tjobMaster.suspend(new FlinkException(\"Lost leadership\")).get();\n+\n+\t\tjobMaster.start(JobMasterId.generate()).get();\n+\n+\t\tlog.info(\"re-register same TaskManager\");\n+\t\tAssert.assertThat(jobMaster.registerTaskManager(testingTaskManagerAddress, unresolvedTaskManagerLocation, testingTimeout).get(), instanceOf(RegistrationResponse.Success.class));\n+\n+\t\tlog.info(\"Ensure JobMaster accepts slot offer\");\n+\t\tfinal SlotOffer slotOffer = new SlotOffer(new AllocationID(), 0, ResourceProfile.ANY);\n+\n+\t\tCollection<SlotOffer> acceptedSlots = jobMaster.executeInMainThreadExecutor(() -> jobMaster.offerSlots(unresolvedTaskManagerLocation.getResourceID(), Collections.singleton(slotOffer), testingTimeout).get()).get();\n+\t\tAssert.assertThat(acceptedSlots.size(), is(1));", "originalCommit": "4bac1d3f88930c269cab61688034af64b0f20a10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxNzM2Mw==", "url": "https://github.com/apache/flink/pull/13639#discussion_r505317363", "bodyText": "Ha! Thanks. The old rule applied here again: I was doing something hacky -- which is a clear indicator of missing something obvious ;)", "author": "rmetzger", "createdAt": "2020-10-15T08:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MzI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5b605b27d5f0f75a623b31065c3062894c97725", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\nindex 36608b01c0..b8e50e215f 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n\n@@ -292,14 +293,14 @@ public class JobMasterTest extends TestLogger {\n \t * slot offers were rejected.\n \t */\n \t@Test\n-\tpublic void testAcceptSlotOfferAfterLeaderchange() throws Exception {\n+\tpublic void testAcceptSlotOfferAfterLeaderChange() throws Exception {\n \n \t\tfinal JobManagerSharedServices jobManagerSharedServices = new TestingJobManagerSharedServicesBuilder().build();\n \t\tfinal JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration);\n \n \t\tfinal SchedulerNGFactory schedulerNGFactory = SchedulerNGFactoryFactory.createSchedulerNGFactory(configuration);\n \n-\t\tfinal TestingJobMaster jobMaster = new TestingJobMaster(\n+\t\tfinal JobMaster testingJobMaster = new JobMaster(\n \t\t\trpcService,\n \t\t\tjobMasterConfiguration,\n \t\t\tjmResourceId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MzUyOA==", "url": "https://github.com/apache/flink/pull/13639#discussion_r505243528", "bodyText": "This class should not be needed.", "author": "tillrohrmann", "createdAt": "2020-10-15T07:10:23Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java", "diffHunk": "@@ -2177,4 +2242,58 @@ public void disposeStorageLocation() throws IOException {\n \n \t\t}\n \t}\n+\n+\n+\tprivate static class TestingJobMaster extends JobMaster {\n+\n+\t\tpublic TestingJobMaster(RpcService rpcService,\n+\t\t\t\tJobMasterConfiguration jobMasterConfiguration,\n+\t\t\t\tResourceID resourceId,\n+\t\t\t\tJobGraph jobGraph,\n+\t\t\t\tHighAvailabilityServices highAvailabilityService,\n+\t\t\t\tSlotPoolFactory slotPoolFactory,\n+\t\t\t\tJobManagerSharedServices jobManagerSharedServices,\n+\t\t\t\tHeartbeatServices heartbeatServices,\n+\t\t\t\tJobManagerJobMetricGroupFactory jobMetricGroupFactory,\n+\t\t\t\tOnCompletionActions jobCompletionActions,\n+\t\t\t\tFatalErrorHandler fatalErrorHandler,\n+\t\t\t\tClassLoader userCodeLoader,\n+\t\t\t\tSchedulerNGFactory schedulerNGFactory,\n+\t\t\t\tShuffleMaster<?> shuffleMaster,\n+\t\t\t\tPartitionTrackerFactory partitionTrackerFactory,\n+\t\t\t\tExecutionDeploymentTracker executionDeploymentTracker,\n+\t\t\t\tExecutionDeploymentReconciler.Factory executionDeploymentReconcilerFactory,\n+\t\t\t\tlong initializationTimestamp) throws Exception {\n+\t\t\tsuper(rpcService,\n+\t\t\t\tjobMasterConfiguration,\n+\t\t\t\tresourceId,\n+\t\t\t\tjobGraph,\n+\t\t\t\thighAvailabilityService,\n+\t\t\t\tslotPoolFactory,\n+\t\t\t\tjobManagerSharedServices,\n+\t\t\t\theartbeatServices,\n+\t\t\t\tjobMetricGroupFactory,\n+\t\t\t\tjobCompletionActions,\n+\t\t\t\tfatalErrorHandler,\n+\t\t\t\tuserCodeLoader,\n+\t\t\t\tschedulerNGFactory,\n+\t\t\t\tshuffleMaster,\n+\t\t\t\tpartitionTrackerFactory,\n+\t\t\t\texecutionDeploymentTracker,\n+\t\t\t\texecutionDeploymentReconcilerFactory,\n+\t\t\t\tinitializationTimestamp);\n+\t\t}\n+\n+\t\tpublic <T> CompletableFuture<T> executeInMainThreadExecutor(SupplierWithException<T, Throwable> runnable) {\n+\t\t\tCompletableFuture<T> result = new CompletableFuture<>();\n+\t\t\tgetMainThreadExecutor().execute(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\tresult.complete(runnable.get());\n+\t\t\t\t} catch (Throwable throwable) {\n+\t\t\t\t\tresult.completeExceptionally(throwable);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\treturn result;\n+\t\t}\n+\t}", "originalCommit": "4bac1d3f88930c269cab61688034af64b0f20a10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e5b605b27d5f0f75a623b31065c3062894c97725", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\nindex 36608b01c0..b8e50e215f 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/JobMasterTest.java\n\n@@ -2242,58 +2246,4 @@ public class JobMasterTest extends TestLogger {\n \n \t\t}\n \t}\n-\n-\n-\tprivate static class TestingJobMaster extends JobMaster {\n-\n-\t\tpublic TestingJobMaster(RpcService rpcService,\n-\t\t\t\tJobMasterConfiguration jobMasterConfiguration,\n-\t\t\t\tResourceID resourceId,\n-\t\t\t\tJobGraph jobGraph,\n-\t\t\t\tHighAvailabilityServices highAvailabilityService,\n-\t\t\t\tSlotPoolFactory slotPoolFactory,\n-\t\t\t\tJobManagerSharedServices jobManagerSharedServices,\n-\t\t\t\tHeartbeatServices heartbeatServices,\n-\t\t\t\tJobManagerJobMetricGroupFactory jobMetricGroupFactory,\n-\t\t\t\tOnCompletionActions jobCompletionActions,\n-\t\t\t\tFatalErrorHandler fatalErrorHandler,\n-\t\t\t\tClassLoader userCodeLoader,\n-\t\t\t\tSchedulerNGFactory schedulerNGFactory,\n-\t\t\t\tShuffleMaster<?> shuffleMaster,\n-\t\t\t\tPartitionTrackerFactory partitionTrackerFactory,\n-\t\t\t\tExecutionDeploymentTracker executionDeploymentTracker,\n-\t\t\t\tExecutionDeploymentReconciler.Factory executionDeploymentReconcilerFactory,\n-\t\t\t\tlong initializationTimestamp) throws Exception {\n-\t\t\tsuper(rpcService,\n-\t\t\t\tjobMasterConfiguration,\n-\t\t\t\tresourceId,\n-\t\t\t\tjobGraph,\n-\t\t\t\thighAvailabilityService,\n-\t\t\t\tslotPoolFactory,\n-\t\t\t\tjobManagerSharedServices,\n-\t\t\t\theartbeatServices,\n-\t\t\t\tjobMetricGroupFactory,\n-\t\t\t\tjobCompletionActions,\n-\t\t\t\tfatalErrorHandler,\n-\t\t\t\tuserCodeLoader,\n-\t\t\t\tschedulerNGFactory,\n-\t\t\t\tshuffleMaster,\n-\t\t\t\tpartitionTrackerFactory,\n-\t\t\t\texecutionDeploymentTracker,\n-\t\t\t\texecutionDeploymentReconcilerFactory,\n-\t\t\t\tinitializationTimestamp);\n-\t\t}\n-\n-\t\tpublic <T> CompletableFuture<T> executeInMainThreadExecutor(SupplierWithException<T, Throwable> runnable) {\n-\t\t\tCompletableFuture<T> result = new CompletableFuture<>();\n-\t\t\tgetMainThreadExecutor().execute(() -> {\n-\t\t\t\ttry {\n-\t\t\t\t\tresult.complete(runnable.get());\n-\t\t\t\t} catch (Throwable throwable) {\n-\t\t\t\t\tresult.completeExceptionally(throwable);\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\treturn result;\n-\t\t}\n-\t}\n }\n"}}, {"oid": "e5b605b27d5f0f75a623b31065c3062894c97725", "url": "https://github.com/apache/flink/commit/e5b605b27d5f0f75a623b31065c3062894c97725", "message": "[FLINK-19237] Fix rejected slot offer bug in JobMaster\n\nThe JobMaster was rejecting slot offers from TaskExecutors erroneously in cases where the TaskExecutor ID is reused.\n\nThis fixes the JobMaster.suspend() behavior to do proper bookkeeping of TaskExecutors.", "committedDate": "2020-10-15T08:12:12Z", "type": "forcePushed"}, {"oid": "2876ce46b800db5d0fe10f12ebf55efd1ab22ace", "url": "https://github.com/apache/flink/commit/2876ce46b800db5d0fe10f12ebf55efd1ab22ace", "message": "[FLINK-19237] Fix rejected slot offer bug in JobMaster\n\nThe JobMaster was rejecting slot offers from TaskExecutors erroneously in cases where the TaskExecutor ID is reused.\n\nThis fixes the JobMaster.suspend() behavior to do proper bookkeeping of TaskExecutors.", "committedDate": "2020-10-15T08:32:01Z", "type": "forcePushed"}, {"oid": "9dfb2240cd09d975959851a1df28ad18d442998e", "url": "https://github.com/apache/flink/commit/9dfb2240cd09d975959851a1df28ad18d442998e", "message": "[hotfix] Disable KryoSerializerConcurrencyCheckInactiveITCase if logging level is DEBUG", "committedDate": "2020-10-15T14:37:15Z", "type": "commit"}, {"oid": "edc867bcfe18df71043801cb8a38eb0ed2d4d502", "url": "https://github.com/apache/flink/commit/edc867bcfe18df71043801cb8a38eb0ed2d4d502", "message": "[FLINK-19237] Fix rejected slot offer bug in JobMaster\n\nThe JobMaster was rejecting slot offers from TaskExecutors erroneously in cases where the TaskExecutor ID is reused.\n\nThis fixes the JobMaster.suspend() behavior to do proper bookkeeping of TaskExecutors.", "committedDate": "2020-10-15T14:37:58Z", "type": "commit"}, {"oid": "edc867bcfe18df71043801cb8a38eb0ed2d4d502", "url": "https://github.com/apache/flink/commit/edc867bcfe18df71043801cb8a38eb0ed2d4d502", "message": "[FLINK-19237] Fix rejected slot offer bug in JobMaster\n\nThe JobMaster was rejecting slot offers from TaskExecutors erroneously in cases where the TaskExecutor ID is reused.\n\nThis fixes the JobMaster.suspend() behavior to do proper bookkeeping of TaskExecutors.", "committedDate": "2020-10-15T14:37:58Z", "type": "forcePushed"}]}