{"pr_number": 11892, "pr_title": "[FLINK-17112][table] Support DESCRIBE statement in Flink SQL", "pr_createdAt": "2020-04-24T02:01:35Z", "pr_url": "https://github.com/apache/flink/pull/11892", "timeline": [{"oid": "4787eab1bd146defb46b8aa22aa3f94564b73dad", "url": "https://github.com/apache/flink/commit/4787eab1bd146defb46b8aa22aa3f94564b73dad", "message": "fixup: adjust the output of describe command", "committedDate": "2020-05-08T09:28:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0OTY2Nw==", "url": "https://github.com/apache/flink/pull/11892#discussion_r422049667", "bodyText": "move these code to a separated method ?", "author": "godfreyhe", "createdAt": "2020-05-08T09:43:04Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -861,23 +865,32 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n \t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tString[][] rows = Stream.concat(\n+\t\t\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\t\t\tList<String> columns = p.getColumns();\n+\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\t\t});\n+\n+\t\t\t\tString[][] rows =\n \t\t\t\t\tschema.getTableColumns()\n \t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> new String[]{\n+\t\t\t\t\t\t\t.map((c) -> {\n+\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\t\t\t\treturn new String[]{\n \t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tc.getType().getLogicalType().toString(),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\")}),\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((w) -> new String[]{\n-\t\t\t\t\t\t\t\t\"WATERMARK\",\n-\t\t\t\t\t\t\t\t\"(NULL)\",\n-\t\t\t\t\t\t\t\tw.getWatermarkExpr()\n-\t\t\t\t\t\t\t})\n-\t\t\t\t).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"expr\"}, rows);\n+\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n+\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),\n+\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\"),\n+\t\t\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), \"(NULL)\")};\n+\t\t\t\t\t\t\t}).toArray(String[][]::new);\n+\n+\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"}, rows);", "originalCommit": "4787eab1bd146defb46b8aa22aa3f94564b73dad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex 3b9b1c0d287..ae4f678be96 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -859,38 +926,21 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t\t\treturn buildShowResult(listFunctions());\n \t\t} else if (operation instanceof ShowViewsOperation) {\n \t\t\treturn buildShowResult(listViews());\n+\t\t} else if (operation instanceof ExplainOperation) {\n+\t\t\tString explanation = planner.explain(Collections.singletonList(((ExplainOperation) operation).getChild()));\n+\t\t\treturn TableResultImpl.builder()\n+\t\t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n+\t\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n+\t\t\t\t\t.data(Collections.singletonList(Row.of(explanation)))\n+\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n+\t\t\t\t\t.build();\n+\n \t\t} else if (operation instanceof DescribeTableOperation) {\n \t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n \t\t\tOptional<CatalogManager.TableLookupResult> result =\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n-\t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tMap<String, String> fieldToWatermark =\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n-\n-\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n-\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n-\t\t\t\t\tList<String> columns = p.getColumns();\n-\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n-\t\t\t\t});\n-\n-\t\t\t\tString[][] rows =\n-\t\t\t\t\tschema.getTableColumns()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> {\n-\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n-\t\t\t\t\t\t\t\treturn new String[]{\n-\t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n-\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n-\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\"),\n-\t\t\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), \"(NULL)\")};\n-\t\t\t\t\t\t\t}).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"}, rows);\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n \t\t\t} else {\n \t\t\t\tthrow new ValidationException(String.format(\n \t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1MTc4Nw==", "url": "https://github.com/apache/flink/pull/11892#discussion_r422051787", "bodyText": "we should use null instead of (NULL), (NULL) just a display form defined in PrintUtils.", "author": "godfreyhe", "createdAt": "2020-05-08T09:47:56Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -861,23 +865,32 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n \t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tString[][] rows = Stream.concat(\n+\t\t\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\t\t\tList<String> columns = p.getColumns();\n+\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\t\t});\n+\n+\t\t\t\tString[][] rows =\n \t\t\t\t\tschema.getTableColumns()\n \t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> new String[]{\n+\t\t\t\t\t\t\t.map((c) -> {\n+\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\t\t\t\treturn new String[]{\n \t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tc.getType().getLogicalType().toString(),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\")}),\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((w) -> new String[]{\n-\t\t\t\t\t\t\t\t\"WATERMARK\",\n-\t\t\t\t\t\t\t\t\"(NULL)\",\n-\t\t\t\t\t\t\t\tw.getWatermarkExpr()\n-\t\t\t\t\t\t\t})\n-\t\t\t\t).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"expr\"}, rows);\n+\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n+\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),", "originalCommit": "4787eab1bd146defb46b8aa22aa3f94564b73dad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex 3b9b1c0d287..ae4f678be96 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -859,38 +926,21 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t\t\treturn buildShowResult(listFunctions());\n \t\t} else if (operation instanceof ShowViewsOperation) {\n \t\t\treturn buildShowResult(listViews());\n+\t\t} else if (operation instanceof ExplainOperation) {\n+\t\t\tString explanation = planner.explain(Collections.singletonList(((ExplainOperation) operation).getChild()));\n+\t\t\treturn TableResultImpl.builder()\n+\t\t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n+\t\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n+\t\t\t\t\t.data(Collections.singletonList(Row.of(explanation)))\n+\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n+\t\t\t\t\t.build();\n+\n \t\t} else if (operation instanceof DescribeTableOperation) {\n \t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n \t\t\tOptional<CatalogManager.TableLookupResult> result =\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n-\t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tMap<String, String> fieldToWatermark =\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n-\n-\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n-\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n-\t\t\t\t\tList<String> columns = p.getColumns();\n-\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n-\t\t\t\t});\n-\n-\t\t\t\tString[][] rows =\n-\t\t\t\t\tschema.getTableColumns()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> {\n-\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n-\t\t\t\t\t\t\t\treturn new String[]{\n-\t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n-\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n-\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\"),\n-\t\t\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), \"(NULL)\")};\n-\t\t\t\t\t\t\t}).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"}, rows);\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n \t\t\t} else {\n \t\t\t\tthrow new ValidationException(String.format(\n \t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1MjE1OA==", "url": "https://github.com/apache/flink/pull/11892#discussion_r422052158", "bodyText": "should be boolean type instead of String", "author": "godfreyhe", "createdAt": "2020-05-08T09:48:44Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -861,23 +865,32 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n \t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tString[][] rows = Stream.concat(\n+\t\t\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\t\t\tList<String> columns = p.getColumns();\n+\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\t\t});\n+\n+\t\t\t\tString[][] rows =\n \t\t\t\t\tschema.getTableColumns()\n \t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> new String[]{\n+\t\t\t\t\t\t\t.map((c) -> {\n+\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\t\t\t\treturn new String[]{\n \t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tc.getType().getLogicalType().toString(),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\")}),\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((w) -> new String[]{\n-\t\t\t\t\t\t\t\t\"WATERMARK\",\n-\t\t\t\t\t\t\t\t\"(NULL)\",\n-\t\t\t\t\t\t\t\tw.getWatermarkExpr()\n-\t\t\t\t\t\t\t})\n-\t\t\t\t).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"expr\"}, rows);\n+\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",", "originalCommit": "4787eab1bd146defb46b8aa22aa3f94564b73dad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex 3b9b1c0d287..ae4f678be96 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -859,38 +926,21 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t\t\treturn buildShowResult(listFunctions());\n \t\t} else if (operation instanceof ShowViewsOperation) {\n \t\t\treturn buildShowResult(listViews());\n+\t\t} else if (operation instanceof ExplainOperation) {\n+\t\t\tString explanation = planner.explain(Collections.singletonList(((ExplainOperation) operation).getChild()));\n+\t\t\treturn TableResultImpl.builder()\n+\t\t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n+\t\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n+\t\t\t\t\t.data(Collections.singletonList(Row.of(explanation)))\n+\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n+\t\t\t\t\t.build();\n+\n \t\t} else if (operation instanceof DescribeTableOperation) {\n \t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n \t\t\tOptional<CatalogManager.TableLookupResult> result =\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n-\t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tMap<String, String> fieldToWatermark =\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n-\n-\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n-\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n-\t\t\t\t\tList<String> columns = p.getColumns();\n-\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n-\t\t\t\t});\n-\n-\t\t\t\tString[][] rows =\n-\t\t\t\t\tschema.getTableColumns()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> {\n-\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n-\t\t\t\t\t\t\t\treturn new String[]{\n-\t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n-\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n-\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\"),\n-\t\t\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), \"(NULL)\")};\n-\t\t\t\t\t\t\t}).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"}, rows);\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n \t\t\t} else {\n \t\t\t\tthrow new ValidationException(String.format(\n \t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n"}}, {"oid": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22", "url": "https://github.com/apache/flink/commit/4fca4d498b4fe7cab7da0537c8010298b1e0aa22", "message": "fixup: add primary key in describe tests", "committedDate": "2020-05-09T03:32:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTI3Nw==", "url": "https://github.com/apache/flink/pull/11892#discussion_r422459277", "bodyText": "use String[][]? The fields are all strings", "author": "KurtYoung", "createdAt": "2020-05-09T06:30:21Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -929,16 +935,69 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n \t\t\t\t\t.build();\n \n+\t\t} else if (operation instanceof DescribeTableOperation) {\n+\t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n+\t\t\tOptional<CatalogManager.TableLookupResult> result =\n+\t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n+\t\t\tif (result.isPresent()) {\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t} else {\n+\t\t\t\tthrow new ValidationException(String.format(\n+\t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n+\t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n+\t\t\t}\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t});\n+\n+\t\tObject[][] rows =", "originalCommit": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTA3MQ==", "url": "https://github.com/apache/flink/pull/11892#discussion_r422475071", "bodyText": "Not all strings. the nullable of type is boolean.", "author": "docete", "createdAt": "2020-05-09T09:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5ec5aaa229d143c0a1cdf4f5986f4fb0d79edf6e", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex ae4f678be96..c0695f0fdb9 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -932,83 +965,48 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t\t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n \t\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n \t\t\t\t\t.data(Collections.singletonList(Row.of(explanation)))\n-\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n+\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.rawContent())\n \t\t\t\t\t.build();\n-\n \t\t} else if (operation instanceof DescribeTableOperation) {\n \t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n \t\t\tOptional<CatalogManager.TableLookupResult> result =\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n-\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t\treturn buildShowResult(new String[]{ result.get().getTable().getSchema().toString() });\n \t\t\t} else {\n \t\t\t\tthrow new ValidationException(String.format(\n \t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n \t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n \t\t\t}\n+\t\t} else if (operation instanceof QueryOperation) {\n+\t\t\treturn executeInternal((QueryOperation) operation);\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n-\t\treturn buildResult(\n-\t\t\tnew String[]{\"result\"},\n-\t\t\tnew DataType[]{DataTypes.STRING()},\n-\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n-\t}\n-\n-\tprivate TableResult buildDescribeResult(TableSchema schema) {\n-\t\tMap<String, String> fieldToWatermark =\n-\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n-\n-\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n-\t\tschema.getPrimaryKey().ifPresent((p) -> {\n-\t\t\tList<String> columns = p.getColumns();\n-\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n-\t\t});\n-\n-\t\tObject[][] rows =\n-\t\t\tschema.getTableColumns()\n-\t\t\t\t.stream()\n-\t\t\t\t.map((c) -> {\n-\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n-\t\t\t\t\treturn new Object[]{\n-\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n-\t\t\t\t\t\tlogicalType.isNullable(),\n-\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), null),\n-\t\t\t\t\t\tc.getExpr().orElse(null),\n-\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), null)};\n-\t\t\t\t}).toArray(Object[][]::new);\n-\n-\t\treturn buildResult(\n-\t\t\tnew String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"},\n-\t\t\tnew DataType[]{DataTypes.STRING(), DataTypes.STRING(), DataTypes.BOOLEAN(), DataTypes.STRING(), DataTypes.STRING(), DataTypes.STRING()},\n-\t\t\trows);\n-\t}\n-\n-\tprivate TableResult buildResult(String[] headers, DataType[] types, Object[][] rows) {\n \t\treturn TableResultImpl.builder()\n \t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n-\t\t\t\t.tableSchema(\n-\t\t\t\t\tTableSchema.builder().fields(\n-\t\t\t\t\t\theaders,\n-\t\t\t\t\t\ttypes).build())\n-\t\t\t\t.data(Arrays.stream(rows).map(Row::of).collect(Collectors.toList()))\n+\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n+\t\t\t\t.data(Arrays.stream(objects).map(Row::of).collect(Collectors.toList()))\n \t\t\t\t.build();\n \t}\n \n-\tprivate String extractJobName(Operation operation) {\n-\t\tString tableName;\n-\t\tif (operation instanceof CatalogSinkModifyOperation) {\n-\t\t\ttableName = ((CatalogSinkModifyOperation) operation).getTableIdentifier().toString();\n-\t\t} else {\n-\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation: \" + operation);\n+\t/**\n+\t * extract sink identifier names from {@link ModifyOperation}s.\n+\t */\n+\tprivate List<String> extractSinkIdentifierNames(List<ModifyOperation> operations) {\n+\t\tList<String> tableNames = new ArrayList<>(operations.size());\n+\t\tfor (ModifyOperation operation : operations) {\n+\t\t\tif (operation instanceof CatalogSinkModifyOperation) {\n+\t\t\t\tObjectIdentifier identifier = ((CatalogSinkModifyOperation) operation).getTableIdentifier();\n+\t\t\t\ttableNames.add(identifier.asSummaryString());\n+\t\t\t} else {\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation: \" + operation);\n+\t\t\t}\n \t\t}\n-\t\treturn \"insert_into_\" + tableName;\n+\t\treturn tableNames;\n \t}\n \n \t/** Get catalog from catalogName or throw a ValidationException if the catalog not exists. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjE4Mw==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423042183", "bodyText": "computed column", "author": "KurtYoung", "createdAt": "2020-05-11T13:33:34Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -929,16 +935,69 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n \t\t\t\t\t.build();\n \n+\t\t} else if (operation instanceof DescribeTableOperation) {\n+\t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n+\t\t\tOptional<CatalogManager.TableLookupResult> result =\n+\t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n+\t\t\tif (result.isPresent()) {\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t} else {\n+\t\t\t\tthrow new ValidationException(String.format(\n+\t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n+\t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n+\t\t\t}\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t});\n+\n+\t\tObject[][] rows =\n+\t\t\tschema.getTableColumns()\n+\t\t\t\t.stream()\n+\t\t\t\t.map((c) -> {\n+\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\treturn new Object[]{\n+\t\t\t\t\t\tc.getName(),\n+\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\tlogicalType.isNullable(),\n+\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), null),\n+\t\t\t\t\t\tc.getExpr().orElse(null),\n+\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), null)};\n+\t\t\t\t}).toArray(Object[][]::new);\n+\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"},", "originalCommit": "b932462436bbab0e9c220203b374a9290ed7e1a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec5aaa229d143c0a1cdf4f5986f4fb0d79edf6e", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex ae4f678be96..c0695f0fdb9 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -932,83 +965,48 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t\t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n \t\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n \t\t\t\t\t.data(Collections.singletonList(Row.of(explanation)))\n-\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n+\t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.rawContent())\n \t\t\t\t\t.build();\n-\n \t\t} else if (operation instanceof DescribeTableOperation) {\n \t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n \t\t\tOptional<CatalogManager.TableLookupResult> result =\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n-\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t\treturn buildShowResult(new String[]{ result.get().getTable().getSchema().toString() });\n \t\t\t} else {\n \t\t\t\tthrow new ValidationException(String.format(\n \t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n \t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n \t\t\t}\n+\t\t} else if (operation instanceof QueryOperation) {\n+\t\t\treturn executeInternal((QueryOperation) operation);\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n-\t\treturn buildResult(\n-\t\t\tnew String[]{\"result\"},\n-\t\t\tnew DataType[]{DataTypes.STRING()},\n-\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n-\t}\n-\n-\tprivate TableResult buildDescribeResult(TableSchema schema) {\n-\t\tMap<String, String> fieldToWatermark =\n-\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n-\n-\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n-\t\tschema.getPrimaryKey().ifPresent((p) -> {\n-\t\t\tList<String> columns = p.getColumns();\n-\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n-\t\t});\n-\n-\t\tObject[][] rows =\n-\t\t\tschema.getTableColumns()\n-\t\t\t\t.stream()\n-\t\t\t\t.map((c) -> {\n-\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n-\t\t\t\t\treturn new Object[]{\n-\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n-\t\t\t\t\t\tlogicalType.isNullable(),\n-\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), null),\n-\t\t\t\t\t\tc.getExpr().orElse(null),\n-\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), null)};\n-\t\t\t\t}).toArray(Object[][]::new);\n-\n-\t\treturn buildResult(\n-\t\t\tnew String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"},\n-\t\t\tnew DataType[]{DataTypes.STRING(), DataTypes.STRING(), DataTypes.BOOLEAN(), DataTypes.STRING(), DataTypes.STRING(), DataTypes.STRING()},\n-\t\t\trows);\n-\t}\n-\n-\tprivate TableResult buildResult(String[] headers, DataType[] types, Object[][] rows) {\n \t\treturn TableResultImpl.builder()\n \t\t\t\t.resultKind(ResultKind.SUCCESS_WITH_CONTENT)\n-\t\t\t\t.tableSchema(\n-\t\t\t\t\tTableSchema.builder().fields(\n-\t\t\t\t\t\theaders,\n-\t\t\t\t\t\ttypes).build())\n-\t\t\t\t.data(Arrays.stream(rows).map(Row::of).collect(Collectors.toList()))\n+\t\t\t\t.tableSchema(TableSchema.builder().field(\"result\", DataTypes.STRING()).build())\n+\t\t\t\t.data(Arrays.stream(objects).map(Row::of).collect(Collectors.toList()))\n \t\t\t\t.build();\n \t}\n \n-\tprivate String extractJobName(Operation operation) {\n-\t\tString tableName;\n-\t\tif (operation instanceof CatalogSinkModifyOperation) {\n-\t\t\ttableName = ((CatalogSinkModifyOperation) operation).getTableIdentifier().toString();\n-\t\t} else {\n-\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation: \" + operation);\n+\t/**\n+\t * extract sink identifier names from {@link ModifyOperation}s.\n+\t */\n+\tprivate List<String> extractSinkIdentifierNames(List<ModifyOperation> operations) {\n+\t\tList<String> tableNames = new ArrayList<>(operations.size());\n+\t\tfor (ModifyOperation operation : operations) {\n+\t\t\tif (operation instanceof CatalogSinkModifyOperation) {\n+\t\t\t\tObjectIdentifier identifier = ((CatalogSinkModifyOperation) operation).getTableIdentifier();\n+\t\t\t\ttableNames.add(identifier.asSummaryString());\n+\t\t\t} else {\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation: \" + operation);\n+\t\t\t}\n \t\t}\n-\t\treturn \"insert_into_\" + tableName;\n+\t\treturn tableNames;\n \t}\n \n \t/** Get catalog from catalogName or throw a ValidationException if the catalog not exists. */\n"}}, {"oid": "5ec5aaa229d143c0a1cdf4f5986f4fb0d79edf6e", "url": "https://github.com/apache/flink/commit/5ec5aaa229d143c0a1cdf4f5986f4fb0d79edf6e", "message": "[FLINK-17112][table] Support DESCRIBE statement in Flink SQL", "committedDate": "2020-05-12T02:11:41Z", "type": "commit"}, {"oid": "53d66a4b11534d136f479920b032281d59184ba4", "url": "https://github.com/apache/flink/commit/53d66a4b11534d136f479920b032281d59184ba4", "message": "fixup: re-format output of describe command", "committedDate": "2020-05-12T02:11:41Z", "type": "commit"}, {"oid": "735c655df58b734ce270dd805024fad0a89a49a9", "url": "https://github.com/apache/flink/commit/735c655df58b734ce270dd805024fad0a89a49a9", "message": "fixup", "committedDate": "2020-05-12T02:11:41Z", "type": "commit"}, {"oid": "68964100feffb862e9136f67f484fcf76221b3c0", "url": "https://github.com/apache/flink/commit/68964100feffb862e9136f67f484fcf76221b3c0", "message": "fixup: adjust the output of describe command", "committedDate": "2020-05-12T02:11:42Z", "type": "commit"}, {"oid": "079288ef22b76f7a8ae25a9de4bcb239f110512e", "url": "https://github.com/apache/flink/commit/079288ef22b76f7a8ae25a9de4bcb239f110512e", "message": "fixup: add todo for primary key tests", "committedDate": "2020-05-12T02:11:42Z", "type": "commit"}, {"oid": "c7e1fa1b703ee5e59759e31ff5bd93b9ec04b579", "url": "https://github.com/apache/flink/commit/c7e1fa1b703ee5e59759e31ff5bd93b9ec04b579", "message": "fixup: address godfrey's comments", "committedDate": "2020-05-12T02:11:42Z", "type": "commit"}, {"oid": "5b4d16003481127fc06f274bb019f15da93692f8", "url": "https://github.com/apache/flink/commit/5b4d16003481127fc06f274bb019f15da93692f8", "message": "fixup: add primary key in describe tests", "committedDate": "2020-05-12T02:11:42Z", "type": "commit"}, {"oid": "3ec240240c394bd8c27d8bf427ad98f33d7f308c", "url": "https://github.com/apache/flink/commit/3ec240240c394bd8c27d8bf427ad98f33d7f308c", "message": "fixup: describe more data types", "committedDate": "2020-05-12T02:11:42Z", "type": "commit"}, {"oid": "0d3294531aab7b363f061b4a9ec1ce12dbc85b52", "url": "https://github.com/apache/flink/commit/0d3294531aab7b363f061b4a9ec1ce12dbc85b52", "message": "fixup: checkstyle and typo", "committedDate": "2020-05-12T02:15:13Z", "type": "commit"}, {"oid": "0d3294531aab7b363f061b4a9ec1ce12dbc85b52", "url": "https://github.com/apache/flink/commit/0d3294531aab7b363f061b4a9ec1ce12dbc85b52", "message": "fixup: checkstyle and typo", "committedDate": "2020-05-12T02:15:13Z", "type": "forcePushed"}, {"oid": "b5257901a2234044b3ae2f3db4aff6fdd3bef5bc", "url": "https://github.com/apache/flink/commit/b5257901a2234044b3ae2f3db4aff6fdd3bef5bc", "message": "presentation style: (NULL) -> empty string", "committedDate": "2020-05-12T03:25:39Z", "type": "commit"}, {"oid": "aa520bad85e323c4859591c99f41dd8f4cd04242", "url": "https://github.com/apache/flink/commit/aa520bad85e323c4859591c99f41dd8f4cd04242", "message": "Revert \"presentation style: (NULL) -> empty string\"\n\nThis reverts commit b5257901a2234044b3ae2f3db4aff6fdd3bef5bc.", "committedDate": "2020-05-12T03:36:24Z", "type": "commit"}, {"oid": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81", "url": "https://github.com/apache/flink/commit/49c454b699921372eb9a7aef0f8c3a38cfa2bf81", "message": "fixup: Print null column of key/computed column/watermark as empty in describe", "committedDate": "2020-05-12T04:22:04Z", "type": "commit"}, {"oid": "c471d4fbeba8cd62c864701c66b324e23fa55d5b", "url": "https://github.com/apache/flink/commit/c471d4fbeba8cd62c864701c66b324e23fa55d5b", "message": "fixup: checkstyle", "committedDate": "2020-05-12T04:23:55Z", "type": "commit"}, {"oid": "d857d271ec18e649d794bea122366220825caf68", "url": "https://github.com/apache/flink/commit/d857d271ec18e649d794bea122366220825caf68", "message": "fixup: remove useless code", "committedDate": "2020-05-12T04:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Njc0OQ==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423456749", "bodyText": "String.join(\", \", columns) instead of String.join(\",\", columns) (with an extra space after the comma) seems to be more standard in formatting.", "author": "tsreaper", "createdAt": "2020-05-12T04:36:04Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -974,10 +991,53 @@ private TableResult executeOperation(Operation operation) {\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));", "originalCommit": "d857d271ec18e649d794bea122366220825caf68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b75d7fcd9cbc9b2c3f925920b1eeb1e4d8fd576", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex ec922606f6a..de7bd96c261 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -1006,7 +1007,7 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n \t\tschema.getPrimaryKey().ifPresent((p) -> {\n \t\t\tList<String> columns = p.getColumns();\n-\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\", \", columns))));\n \t\t});\n \n \t\tObject[][] rows =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NjIwMg==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423466202", "bodyText": "we only need one constructor,  which is called in PrintStyle", "author": "godfreyhe", "createdAt": "2020-05-12T05:13:33Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -217,15 +238,30 @@ static PrintStyle rawContent() {\n \t * print the result schema and content as tableau form.\n \t */\n \tprivate static final class TableauStyle implements PrintStyle {\n+\n \t\tprivate final int maxColumnWidth;\n+\t\tprivate final String nullColumnStyle;\n \n \t\tprivate TableauStyle(int maxColumnWidth) {\n+\t\t\tthis(maxColumnWidth, PrintUtils.NULL_COLUMN);\n+\t\t}\n+\n+\t\tprivate TableauStyle(String nullColumn) {\n+\t\t\tthis(PrintUtils.MAX_COLUMN_WIDTH, nullColumn);\n+\t\t}\n+\n+\t\tprivate TableauStyle(int maxColumnWidth, String nullColumnStyle) {", "originalCommit": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b75d7fcd9cbc9b2c3f925920b1eeb1e4d8fd576", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\nindex 4be22fba778..5c82f5eb835 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\n\n@@ -240,27 +222,19 @@ class TableResultImpl implements TableResult {\n \tprivate static final class TableauStyle implements PrintStyle {\n \n \t\tprivate final int maxColumnWidth;\n-\t\tprivate final String nullColumnStyle;\n-\n-\t\tprivate TableauStyle(int maxColumnWidth) {\n-\t\t\tthis(maxColumnWidth, PrintUtils.NULL_COLUMN);\n-\t\t}\n-\n-\t\tprivate TableauStyle(String nullColumn) {\n-\t\t\tthis(PrintUtils.MAX_COLUMN_WIDTH, nullColumn);\n-\t\t}\n+\t\tprivate final String nullColumn;\n \n-\t\tprivate TableauStyle(int maxColumnWidth, String nullColumnStyle) {\n+\t\tprivate TableauStyle(int maxColumnWidth, String nullColumn) {\n \t\t\tthis.maxColumnWidth = maxColumnWidth;\n-\t\t\tthis.nullColumnStyle = nullColumnStyle;\n+\t\t\tthis.nullColumn = nullColumn;\n \t\t}\n \n \t\tint getMaxColumnWidth() {\n \t\t\treturn maxColumnWidth;\n \t\t}\n \n-\t\tString getNullColumnStyle() {\n-\t\t\treturn nullColumnStyle;\n+\t\tString getNullColumn() {\n+\t\t\treturn nullColumn;\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NjY0Mg==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423466642", "bodyText": "only this method is enough ?", "author": "godfreyhe", "createdAt": "2020-05-12T05:15:10Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -203,6 +205,25 @@ static PrintStyle tableau(int maxColumnWidth) {\n \t\t\treturn new TableauStyle(maxColumnWidth);\n \t\t}\n \n+\t\t/**\n+\t\t * Create a tableau print style with given null column style,\n+\t\t * which prints the result schema and content as tableau form.\n+\t\t */\n+\t\tstatic PrintStyle tableau(String nullColumnStyle) {\n+\t\t\tPreconditions.checkNotNull(nullColumnStyle, \"nullColumnStyle should not be null\");\n+\t\t\treturn new TableauStyle(nullColumnStyle);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Create a tableau print style with given max column width and null column style,\n+\t\t * which prints the result schema and content as tableau form.\n+\t\t */\n+\t\tstatic PrintStyle tableau(int maxColumnWidth, String nullColumnStyle) {", "originalCommit": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b75d7fcd9cbc9b2c3f925920b1eeb1e4d8fd576", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\nindex 4be22fba778..5c82f5eb835 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\n\n@@ -197,31 +197,13 @@ class TableResultImpl implements TableResult {\n \t */\n \tpublic interface PrintStyle {\n \t\t/**\n-\t\t * Create a tableau print style with given max column width,\n+\t\t * Create a tableau print style with given max column width and null column,\n \t\t * which prints the result schema and content as tableau form.\n \t\t */\n-\t\tstatic PrintStyle tableau(int maxColumnWidth) {\n+\t\tstatic PrintStyle tableau(int maxColumnWidth, String nullColumn) {\n \t\t\tPreconditions.checkArgument(maxColumnWidth > 0, \"maxColumnWidth should be greater than 0\");\n-\t\t\treturn new TableauStyle(maxColumnWidth);\n-\t\t}\n-\n-\t\t/**\n-\t\t * Create a tableau print style with given null column style,\n-\t\t * which prints the result schema and content as tableau form.\n-\t\t */\n-\t\tstatic PrintStyle tableau(String nullColumnStyle) {\n-\t\t\tPreconditions.checkNotNull(nullColumnStyle, \"nullColumnStyle should not be null\");\n-\t\t\treturn new TableauStyle(nullColumnStyle);\n-\t\t}\n-\n-\t\t/**\n-\t\t * Create a tableau print style with given max column width and null column style,\n-\t\t * which prints the result schema and content as tableau form.\n-\t\t */\n-\t\tstatic PrintStyle tableau(int maxColumnWidth, String nullColumnStyle) {\n-\t\t\tPreconditions.checkArgument(maxColumnWidth > 0, \"maxColumnWidth should be greater than 0\");\n-\t\t\tPreconditions.checkNotNull(nullColumnStyle, \"nullColumnStyle should not be null\");\n-\t\t\treturn new TableauStyle(maxColumnWidth, nullColumnStyle);\n+\t\t\tPreconditions.checkNotNull(nullColumn, \"nullColumn should not be null\");\n+\t\t\treturn new TableauStyle(maxColumnWidth, nullColumn);\n \t\t}\n \n \t\t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzYwMA==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423467600", "bodyText": "rename to nullColumnPlaceholder ?", "author": "godfreyhe", "createdAt": "2020-05-12T05:18:39Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -217,15 +238,30 @@ static PrintStyle rawContent() {\n \t * print the result schema and content as tableau form.\n \t */\n \tprivate static final class TableauStyle implements PrintStyle {\n+\n \t\tprivate final int maxColumnWidth;\n+\t\tprivate final String nullColumnStyle;", "originalCommit": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MjUxMQ==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423472511", "bodyText": "nullColumnDisplayValue?", "author": "KurtYoung", "createdAt": "2020-05-12T05:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzYwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjE0MA==", "url": "https://github.com/apache/flink/pull/11892#discussion_r423502140", "bodyText": "will use nullColumn to keep consistent with PrintUtils", "author": "docete", "createdAt": "2020-05-12T06:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "1b75d7fcd9cbc9b2c3f925920b1eeb1e4d8fd576", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\nindex 4be22fba778..5c82f5eb835 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java\n\n@@ -240,27 +222,19 @@ class TableResultImpl implements TableResult {\n \tprivate static final class TableauStyle implements PrintStyle {\n \n \t\tprivate final int maxColumnWidth;\n-\t\tprivate final String nullColumnStyle;\n-\n-\t\tprivate TableauStyle(int maxColumnWidth) {\n-\t\t\tthis(maxColumnWidth, PrintUtils.NULL_COLUMN);\n-\t\t}\n-\n-\t\tprivate TableauStyle(String nullColumn) {\n-\t\t\tthis(PrintUtils.MAX_COLUMN_WIDTH, nullColumn);\n-\t\t}\n+\t\tprivate final String nullColumn;\n \n-\t\tprivate TableauStyle(int maxColumnWidth, String nullColumnStyle) {\n+\t\tprivate TableauStyle(int maxColumnWidth, String nullColumn) {\n \t\t\tthis.maxColumnWidth = maxColumnWidth;\n-\t\t\tthis.nullColumnStyle = nullColumnStyle;\n+\t\t\tthis.nullColumn = nullColumn;\n \t\t}\n \n \t\tint getMaxColumnWidth() {\n \t\t\treturn maxColumnWidth;\n \t\t}\n \n-\t\tString getNullColumnStyle() {\n-\t\t\treturn nullColumnStyle;\n+\t\tString getNullColumn() {\n+\t\t\treturn nullColumn;\n \t\t}\n \t}\n \n"}}, {"oid": "1b75d7fcd9cbc9b2c3f925920b1eeb1e4d8fd576", "url": "https://github.com/apache/flink/commit/1b75d7fcd9cbc9b2c3f925920b1eeb1e4d8fd576", "message": "fixup: address godfrey & caizhi's comments", "committedDate": "2020-05-12T07:08:58Z", "type": "commit"}]}