{"pr_number": 14078, "pr_title": "[FLINK-20169] Move emitting MAX_WATERMARK out of the SourceOperator processing loop", "pr_createdAt": "2020-11-16T09:28:17Z", "pr_url": "https://github.com/apache/flink/pull/14078", "timeline": [{"oid": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b", "url": "https://github.com/apache/flink/commit/2b82b9448e3bb43d3e7da50bce557f50c07ae19b", "message": "[FLINK-20169] Move emitting MAX_WATERMARK out of the SourceOperator processing loop\n\nThis commit reverts some of the changes introduced in\nfada6fb6ac9fd7f6510f1f2d77b6baa06563e222.\n\nInstead of checking for END_OF_INPUT in the SourceOperator, I\nemit the MAX_WATERMARK from SourceOperatorStreamTask#afterInvoke. I check if the Task was cancelled or not. If it was not\nthat means the Task finished succesfully and we emit the MAX_WATERMARK.", "committedDate": "2020-11-16T09:26:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NjM5MQ==", "url": "https://github.com/apache/flink/pull/14078#discussion_r524096391", "bodyText": "Why is this one needed here and not in the other test?", "author": "aljoscha", "createdAt": "2020-11-16T10:35:50Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTaskTest.java", "diffHunk": "@@ -99,6 +102,29 @@ public void testSnapshotAndAdvanceToEndOfEventTime() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testEmittingMaxWatermarkAfterReadingAllRecords() throws Exception {\n+\t\ttry (StreamTaskMailboxTestHarness<Integer> testHarness = createTestHarness()) {\n+\t\t\ttestHarness.processAll();", "originalCommit": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTAzNw==", "url": "https://github.com/apache/flink/pull/14078#discussion_r524365037", "bodyText": "Honestly it is not needed here. I just thought this way it better resembles the \"real\" process, where you processAll records and then finish the stream task.\nIn the second case the processAll could be misleading as one could say that after processingAll records it might have been finished already and cancelling makes no sense.\nTo sum up. It does not make a real difference if we have the processAll or not, but I thought it slightly better describes what is happening in reality.", "author": "dawidwys", "createdAt": "2020-11-16T15:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NjM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2ODU1Mw==", "url": "https://github.com/apache/flink/pull/14078#discussion_r524368553", "bodyText": "If you find it misleading I can remove the processAll.", "author": "dawidwys", "createdAt": "2020-11-16T15:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NjM5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5ODQxOA==", "url": "https://github.com/apache/flink/pull/14078#discussion_r524098418", "bodyText": "It's a bit strange that we replicate the shutdown/cancel logic in the TestHarness and don't re-use the production logic. Just noticing it here, it was like this before the PR.", "author": "aljoscha", "createdAt": "2020-11-16T10:37:34Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMailboxTestHarness.java", "diffHunk": "@@ -143,12 +143,17 @@ public void waitForTaskCompletion() throws Exception {\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic void close() throws Exception {\n-\t\tstreamTask.cancel();\n-\n+\tpublic void finishProcessing() throws Exception {", "originalCommit": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NzcyOA==", "url": "https://github.com/apache/flink/pull/14078#discussion_r524367728", "bodyText": "Yes, I also found it problematic.\nFor a time I thought about not using this harness, but the deprecated StreamTaskTestHarness instead which does simply call the invoke method, because of the reason you described. However, because it does not let you process elements step wise, you cannot e.g. issue cancel before it finishes.", "author": "dawidwys", "createdAt": "2020-11-16T15:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5ODQxOA=="}], "type": "inlineReview", "revised_code": null}]}