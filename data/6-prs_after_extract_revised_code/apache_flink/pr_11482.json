{"pr_number": 11482, "pr_title": "[FLINK-16581][table] Minibatch deduplication lack state TTL bug fix", "pr_createdAt": "2020-03-22T14:57:40Z", "pr_url": "https://github.com/apache/flink/pull/11482", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzU0Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399807546", "bodyText": "We don't need to add equals method for StateTtlConfig, if you want to compare an instance with StateTtlConfig.DISABLED, you can just do it like stateTtlConfig == StateTtlConfig.DISABLED", "author": "libenchao", "createdAt": "2020-03-29T14:44:52Z", "path": "flink-core/src/main/java/org/apache/flink/api/common/state/StateTtlConfig.java", "diffHunk": "@@ -144,6 +145,21 @@ public String toString() {\n \t\t\t'}';\n \t}\n \n+\t@Override\n+\tpublic boolean equals(Object o){", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MDQ5NQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399940495", "bodyText": "Got it, I will remove these code", "author": "lsyldliu", "createdAt": "2020-03-30T05:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/api/common/state/StateTtlConfig.java b/flink-core/src/main/java/org/apache/flink/api/common/state/StateTtlConfig.java\nindex 6d7606aa15..1108bacdfa 100644\n--- a/flink-core/src/main/java/org/apache/flink/api/common/state/StateTtlConfig.java\n+++ b/flink-core/src/main/java/org/apache/flink/api/common/state/StateTtlConfig.java\n\n@@ -145,21 +144,6 @@ public class StateTtlConfig implements Serializable {\n \t\t\t'}';\n \t}\n \n-\t@Override\n-\tpublic boolean equals(Object o){\n-\t\tif (this == o){\n-\t\t\treturn true;\n-\t\t}\n-\t\tif (o == null || getClass() != o.getClass()){\n-\t\t\treturn false;\n-\t\t}\n-\t\tStateTtlConfig that = (StateTtlConfig) o;\n-\t\treturn Objects.equals(updateType, that.updateType) &&\n-\t\t\tObjects.equals(stateVisibility, that.stateVisibility) &&\n-\t\t\tObjects.equals(ttlTimeCharacteristic, that.ttlTimeCharacteristic) &&\n-\t\t\tObjects.equals(ttl, that.ttl);\n-\t}\n-\n \t@Nonnull\n \tpublic static Builder newBuilder(@Nonnull Time ttl) {\n \t\treturn new Builder(ttl);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzg2MA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399807860", "bodyText": "Add an error message for this check.", "author": "libenchao", "createdAt": "2020-03-29T14:47:26Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.bundle;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.table.runtime.functions.CleanupState;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Basic interface for map bundle processing and could cleanup state.\n+ *\n+ * @param <K>   The type of the key in the bundle map\n+ * @param <V>   The type of the value in the bundle map\n+ * @param <IN>  Type of the input elements.\n+ * @param <OUT> Type of the returned elements.\n+ */\n+\n+public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {\n+\n+\tprivate final long minRetentionTime;\n+\tprivate final boolean stateCleaningEnabled;\n+\tprotected final StateTtlConfig stateTtlConfig;\n+\n+\tpublic MapBundleFunctionWithStateRetention(long minRetentionTime){\n+\t\tthis.minRetentionTime = minRetentionTime;\n+\t\tstateCleaningEnabled = minRetentionTime > 1;\n+\t\tstateTtlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n+\t}\n+\n+\tprivate StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n+\t\tif (stateCleaningEnabled) {\n+\t\t\tcheckArgument(retentionTime > 0);", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MDQ3Mg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399940472", "bodyText": "Got it", "author": "lsyldliu", "createdAt": "2020-03-30T05:49:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java\ndeleted file mode 100644\nindex 00e5aecda1..0000000000\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.table.runtime.operators.bundle;\n-\n-import org.apache.flink.api.common.state.StateTtlConfig;\n-import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n-import org.apache.flink.api.common.time.Time;\n-import org.apache.flink.table.runtime.functions.CleanupState;\n-\n-import static org.apache.flink.util.Preconditions.checkArgument;\n-\n-/**\n- * Basic interface for map bundle processing and could cleanup state.\n- *\n- * @param <K>   The type of the key in the bundle map\n- * @param <V>   The type of the value in the bundle map\n- * @param <IN>  Type of the input elements.\n- * @param <OUT> Type of the returned elements.\n- */\n-\n-public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {\n-\n-\tprivate final long minRetentionTime;\n-\tprivate final boolean stateCleaningEnabled;\n-\tprotected final StateTtlConfig stateTtlConfig;\n-\n-\tpublic MapBundleFunctionWithStateRetention(long minRetentionTime){\n-\t\tthis.minRetentionTime = minRetentionTime;\n-\t\tstateCleaningEnabled = minRetentionTime > 1;\n-\t\tstateTtlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n-\t}\n-\n-\tprivate StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n-\t\tif (stateCleaningEnabled) {\n-\t\t\tcheckArgument(retentionTime > 0);\n-\t\t\treturn StateTtlConfig\n-\t\t\t\t.newBuilder(Time.milliseconds(retentionTime))\n-\t\t\t\t.setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)\n-\t\t\t\t.setStateVisibility(StateVisibility.ReturnExpiredIfNotCleanedUp)\n-\t\t\t\t.build();\n-\t\t} else {\n-\t\t\treturn StateTtlConfig.DISABLED;\n-\t\t}\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODgxMw==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399808813", "bodyText": "why do we need to implements CleanupState?", "author": "libenchao", "createdAt": "2020-03-29T14:54:44Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.bundle;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.table.runtime.functions.CleanupState;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Basic interface for map bundle processing and could cleanup state.\n+ *\n+ * @param <K>   The type of the key in the bundle map\n+ * @param <V>   The type of the value in the bundle map\n+ * @param <IN>  Type of the input elements.\n+ * @param <OUT> Type of the returned elements.\n+ */\n+\n+public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5OTMyNA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399899324", "bodyText": "I don't think we need an abstraction for such a simple member field. A utility to create StateTtlConfig is enough.", "author": "wuchong", "createdAt": "2020-03-30T02:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MDUyNA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399940524", "bodyText": "At first, I implemented it with timer, sorry, I forget to remove it.", "author": "lsyldliu", "createdAt": "2020-03-30T05:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java\ndeleted file mode 100644\nindex 00e5aecda1..0000000000\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.table.runtime.operators.bundle;\n-\n-import org.apache.flink.api.common.state.StateTtlConfig;\n-import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n-import org.apache.flink.api.common.time.Time;\n-import org.apache.flink.table.runtime.functions.CleanupState;\n-\n-import static org.apache.flink.util.Preconditions.checkArgument;\n-\n-/**\n- * Basic interface for map bundle processing and could cleanup state.\n- *\n- * @param <K>   The type of the key in the bundle map\n- * @param <V>   The type of the value in the bundle map\n- * @param <IN>  Type of the input elements.\n- * @param <OUT> Type of the returned elements.\n- */\n-\n-public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {\n-\n-\tprivate final long minRetentionTime;\n-\tprivate final boolean stateCleaningEnabled;\n-\tprotected final StateTtlConfig stateTtlConfig;\n-\n-\tpublic MapBundleFunctionWithStateRetention(long minRetentionTime){\n-\t\tthis.minRetentionTime = minRetentionTime;\n-\t\tstateCleaningEnabled = minRetentionTime > 1;\n-\t\tstateTtlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n-\t}\n-\n-\tprivate StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n-\t\tif (stateCleaningEnabled) {\n-\t\t\tcheckArgument(retentionTime > 0);\n-\t\t\treturn StateTtlConfig\n-\t\t\t\t.newBuilder(Time.milliseconds(retentionTime))\n-\t\t\t\t.setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)\n-\t\t\t\t.setStateVisibility(StateVisibility.ReturnExpiredIfNotCleanedUp)\n-\t\t\t\t.build();\n-\t\t} else {\n-\t\t\treturn StateTtlConfig.DISABLED;\n-\t\t}\n-\t}\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODk0MA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399808940", "bodyText": "always add a space before {", "author": "libenchao", "createdAt": "2020-03-29T14:56:02Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\nindex 81be03c11b..953fcd7912 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\n\n@@ -72,7 +72,7 @@ public class MiniBatchDeduplicateKeepFirstRowFunctionTest extends DeduplicateFun\n \t}\n \n \t@Test\n-\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception {\n \t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n \t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n \t\ttestHarness.setup();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399809248", "bodyText": "Do we have any other way to test this, I don't think Thread.sleep is a good idea.", "author": "libenchao", "createdAt": "2020-03-29T14:58:33Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{\n+\t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\t\ttestHarness.processElement(record(\"book\", 1L, 12));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\tThread.sleep(30);", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwMTQyOA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399901428", "bodyText": "Does testHarness.setProcessingTime() work in this case? cc @Myasuka , can we use testHarness.setProcessingTime to test the expiration of state ttl?", "author": "wuchong", "createdAt": "2020-03-30T02:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0NjAyMQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399946021", "bodyText": "state ttl use TtlTimeProvider.DEFAULT to get current process time, testHarness.setProcessingTime doesn't work, whether it is appropriate to use TimeUnit.MILLISECONDS.sleep(30) ? Do you have any better advice?", "author": "lsyldliu", "createdAt": "2020-03-30T06:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwODc0OQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r400008749", "bodyText": "Unfortunately, current we always use TtlTimeProvider.DEFAULT to create keyed state backend. One way to walk around this:\n\nDefine a new MockTtlTimeProvider which could set current time outside.\nDefine a TTLMemoryStateBackend extended from MemoryStateBackend which would ignore the given TtlTimeProvider.DEFAULT when creating keyed state backend, but use previous newly defined  MockTtlTimeProvider.\nSet the TTLMemoryStateBackend to the newly KeyedOneInputStreamOperatorTestHarness to use our customized state backend.\n\nThen you could set a new time to MockTtlTimeProvider to ensure time has passed time to live.", "author": "Myasuka", "createdAt": "2020-03-30T08:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4NDE2Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r400084166", "bodyText": "@wuchong , @Myasuka At the moment, KeyedStateBackend created in StreamTaskStateInitializerImpl#keyedStateBackend method using TtlTimeProvider.DEFAULT explicitly, didn't support pass TtlTimeProvider to it, even though we implement TTLMemoryStateBackend , we also can't  set MockTtlTimeProvider  to KeyedStateBackend. Unless, we modify relavant code in StreamTaskStateInitializerImpl, but I dare not change the code because I can't evaluate the impact, what do you think?", "author": "lsyldliu", "createdAt": "2020-03-30T10:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEwNDQxNw==", "url": "https://github.com/apache/flink/pull/11482#discussion_r400104417", "bodyText": "Hi @lsyldliu , I think a better way is to make  StreamTaskStateInitializerImpl accept a TtlTimeProvider constructor parameter instead of hard code TtlTimeProvider.DEFAULT in the implementation. Then, we can pass-in the MockTtlTimeProvider in AbstractStreamOperatorTestHarness#createStreamTaskStateManager.\nWhat do you think @Myasuka ? Could you help on this?", "author": "wuchong", "createdAt": "2020-03-30T11:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMDA4Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r400120086", "bodyText": "@wuchong , sure I could help on this to let TtlTimeProvider configurable by opening another issue.", "author": "Myasuka", "createdAt": "2020-03-30T11:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMjMxNA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r400122314", "bodyText": "Thanks @Myasuka .\n@lsyldliu , we may need to hold this PR until StreamTaskStateInitializerImpl supports custom TtlTimeProvider.", "author": "wuchong", "createdAt": "2020-03-30T11:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNTExNQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r400135115", "bodyText": "OK", "author": "lsyldliu", "createdAt": "2020-03-30T11:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\nindex 81be03c11b..953fcd7912 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\n\n@@ -72,7 +72,7 @@ public class MiniBatchDeduplicateKeepFirstRowFunctionTest extends DeduplicateFun\n \t}\n \n \t@Test\n-\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception {\n \t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n \t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n \t\ttestHarness.setup();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NzExMg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399897112", "bodyText": "use stateTtlConfig.isEnabled. We should also correct the implementation in JoinRecordStateViews.", "author": "wuchong", "createdAt": "2020-03-30T02:28:37Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java", "diffHunk": "@@ -46,14 +47,18 @@\n \t// state stores a boolean flag to indicate whether key appears before.\n \tprivate ValueState<Boolean> state;\n \n-\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer) {\n+\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n+\t\tsuper(minRetentionTime);\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n \t@Override\n \tpublic void open(ExecutionContext ctx) throws Exception {\n \t\tsuper.open(ctx);\n \t\tValueStateDescriptor<Boolean> stateDesc = new ValueStateDescriptor<>(\"existsState\", Types.BOOLEAN);\n+\t\tif (!stateTtlConfig.equals(StateTtlConfig.DISABLED)){", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MzEzMw==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399943133", "bodyText": "I see, tks", "author": "lsyldliu", "createdAt": "2020-03-30T05:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NzExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MzYxOA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399943618", "bodyText": "By the way, should I correct the implementation in JoinRecordStateViews?", "author": "lsyldliu", "createdAt": "2020-03-30T05:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NzExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0ODQ2OA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399948468", "bodyText": "Yes. Thanks.", "author": "wuchong", "createdAt": "2020-03-30T06:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NzExMg=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java\nindex cfd867cd49..27b2cd3044 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java\n\n@@ -33,22 +33,25 @@ import javax.annotation.Nullable;\n import java.util.Map;\n \n import static org.apache.flink.table.runtime.operators.deduplicate.DeduplicateFunctionHelper.processFirstRow;\n+import static org.apache.flink.table.runtime.util.StateTtlConfigUtil.createTtlConfig;\n \n /**\n  * This function is used to get the first row for every key partition in miniBatch mode.\n  */\n public class MiniBatchDeduplicateKeepFirstRowFunction\n-\t\textends MapBundleFunctionWithStateRetention<BaseRow, BaseRow, BaseRow, BaseRow> {\n+\t\textends MapBundleFunction<BaseRow, BaseRow, BaseRow, BaseRow> {\n \n \tprivate static final long serialVersionUID = -7994602893547654994L;\n \n \tprivate final TypeSerializer<BaseRow> typeSerializer;\n-\n+\tprivate final long minRetentionTime;\n \t// state stores a boolean flag to indicate whether key appears before.\n \tprivate ValueState<Boolean> state;\n \n-\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n-\t\tsuper(minRetentionTime);\n+\tpublic MiniBatchDeduplicateKeepFirstRowFunction(\n+\t\t\tTypeSerializer<BaseRow> typeSerializer,\n+\t\t\tlong minRetentionTime) {\n+\t\tthis.minRetentionTime = minRetentionTime;\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODM0NA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399898344", "bodyText": "Is there any changes between these lines? It's not encouraged to refactor code sytle among some other changes.  If it is for code style, the later one is not good:\n\nplease add an additional indent for new line parameter.\nplease put each parameter in a speparate line if you think the method call is too long.\n\nPlease refer a more detailed code style guideline: https://flink.apache.org/contributing/code-style-and-quality-preamble.html", "author": "wuchong", "createdAt": "2020-03-30T02:35:11Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java", "diffHunk": "@@ -41,23 +41,28 @@\n  */\n public class MiniBatchDeduplicateKeepLastRowFunctionTest extends DeduplicateFunctionTestBase {\n \n-\tprivate TypeSerializer<BaseRow> typeSerializer = inputRowType.createSerializer(new ExecutionConfig());\n+\tprivate TypeSerializer<BaseRow> typeSerializer = inputRowType\n+\t\t.createSerializer(new ExecutionConfig());\n \n-\tprivate MiniBatchDeduplicateKeepLastRowFunction createFunction(boolean generateRetraction) {\n-\t\treturn new MiniBatchDeduplicateKeepLastRowFunction(inputRowType, generateRetraction, typeSerializer);\n+\tprivate MiniBatchDeduplicateKeepLastRowFunction createFunction(boolean generateRetraction,\n+\t\tlong minRetentionTime) {\n+\t\treturn new MiniBatchDeduplicateKeepLastRowFunction(inputRowType, generateRetraction,\n+\t\t\ttypeSerializer, minRetentionTime);\n \t}\n \n \tprivate OneInputStreamOperatorTestHarness<BaseRow, BaseRow> createTestHarness(\n-\t\t\tMiniBatchDeduplicateKeepLastRowFunction func)\n-\t\t\tthrows Exception {\n+\t\tMiniBatchDeduplicateKeepLastRowFunction func)\n+\t\tthrows Exception {\n \t\tCountBundleTrigger<Tuple2<String, String>> trigger = new CountBundleTrigger<>(3);\n \t\tKeyedMapBundleOperator op = new KeyedMapBundleOperator(func, trigger);\n-\t\treturn new KeyedOneInputStreamOperatorTestHarness<>(op, rowKeySelector, rowKeySelector.getProducedType());\n+\t\treturn new KeyedOneInputStreamOperatorTestHarness<>(op, rowKeySelector,\n+\t\t\trowKeySelector.getProducedType());", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1NTkxMg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399955912", "bodyText": "sorry, I didn't notice that", "author": "lsyldliu", "createdAt": "2020-03-30T06:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java\nindex 5867610cf6..345a32868a 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java\n\n@@ -41,27 +41,22 @@ import static org.apache.flink.table.runtime.util.StreamRecordUtils.retractRecor\n  */\n public class MiniBatchDeduplicateKeepLastRowFunctionTest extends DeduplicateFunctionTestBase {\n \n-\tprivate TypeSerializer<BaseRow> typeSerializer = inputRowType\n-\t\t.createSerializer(new ExecutionConfig());\n+\tprivate TypeSerializer<BaseRow> typeSerializer = inputRowType.createSerializer(new ExecutionConfig());\n \n-\tprivate MiniBatchDeduplicateKeepLastRowFunction createFunction(boolean generateRetraction,\n-\t\tlong minRetentionTime) {\n-\t\treturn new MiniBatchDeduplicateKeepLastRowFunction(inputRowType, generateRetraction,\n-\t\t\ttypeSerializer, minRetentionTime);\n+\tprivate MiniBatchDeduplicateKeepLastRowFunction createFunction(boolean generateUpdateBefore, long minRetentionTime) {\n+\t\treturn new MiniBatchDeduplicateKeepLastRowFunction(inputRowType, generateUpdateBefore, typeSerializer, minRetentionTime);\n \t}\n \n \tprivate OneInputStreamOperatorTestHarness<BaseRow, BaseRow> createTestHarness(\n-\t\tMiniBatchDeduplicateKeepLastRowFunction func)\n-\t\tthrows Exception {\n+\t\t\tMiniBatchDeduplicateKeepLastRowFunction func)\n+\t\t\tthrows Exception {\n \t\tCountBundleTrigger<Tuple2<String, String>> trigger = new CountBundleTrigger<>(3);\n \t\tKeyedMapBundleOperator op = new KeyedMapBundleOperator(func, trigger);\n-\t\treturn new KeyedOneInputStreamOperatorTestHarness<>(op, rowKeySelector,\n-\t\t\trowKeySelector.getProducedType());\n+\t\treturn new KeyedOneInputStreamOperatorTestHarness<>(op, rowKeySelector, rowKeySelector.getProducedType());\n \t}\n \n \t@Test\n-\tpublic void testWithoutGenerateRetraction()\n-\t\tthrows Exception {\n+\tpublic void testWithoutGenerateUpdateBefore() throws Exception {\n \t\tMiniBatchDeduplicateKeepLastRowFunction func = createFunction(false, minTime.toMilliseconds());\n \t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n \t\ttestHarness.open();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODcyNA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399898724", "bodyText": "The original Javadoc is correct.", "author": "wuchong", "createdAt": "2020-03-30T02:36:59Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/state/ttl/AbstractTtlDecorator.java", "diffHunk": "@@ -40,7 +40,7 @@\n \t/** Whether to renew expiration timestamp on state read access. */\n \tfinal boolean updateTsOnRead;\n \n-\t/** Whether to renew expiration timestamp on state read access. */\n+\t/** Whether to return expired value if not cleaned up on state read access. */", "originalCommit": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0NDA1Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r399944056", "bodyText": "ok", "author": "lsyldliu", "createdAt": "2020-03-30T06:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/state/ttl/AbstractTtlDecorator.java b/flink-runtime/src/main/java/org/apache/flink/runtime/state/ttl/AbstractTtlDecorator.java\nindex bcaa74515b..3b0a99f782 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/state/ttl/AbstractTtlDecorator.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/state/ttl/AbstractTtlDecorator.java\n\n@@ -40,7 +40,7 @@ abstract class AbstractTtlDecorator<T> {\n \t/** Whether to renew expiration timestamp on state read access. */\n \tfinal boolean updateTsOnRead;\n \n-\t/** Whether to return expired value if not cleaned up on state read access. */\n+\t/** Whether to renew expiration timestamp on state read access. */\n \tfinal boolean returnExpired;\n \n \t/** State value time to live in milliseconds. */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzM5Mg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407157392", "bodyText": "if (ttlConfig.isEnabled()) {\nwe always add a space before {", "author": "libenchao", "createdAt": "2020-04-12T07:08:36Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java", "diffHunk": "@@ -42,18 +44,25 @@\n \tprivate static final long serialVersionUID = -7994602893547654994L;\n \n \tprivate final TypeSerializer<BaseRow> typeSerializer;\n-\n+\tprivate final long minRetentionTime;\n+\tprivate final boolean stateCleaningEnabled;\n \t// state stores a boolean flag to indicate whether key appears before.\n \tprivate ValueState<Boolean> state;\n \n-\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer) {\n+\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n+\t\tthis.minRetentionTime = minRetentionTime;\n+\t\tstateCleaningEnabled = minRetentionTime > 1;\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n \t@Override\n \tpublic void open(ExecutionContext ctx) throws Exception {\n \t\tsuper.open(ctx);\n \t\tValueStateDescriptor<Boolean> stateDesc = new ValueStateDescriptor<>(\"existsState\", Types.BOOLEAN);\n+\t\tStateTtlConfig ttlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n+\t\tif (ttlConfig.isEnabled()){", "originalCommit": "f8ed0e698785e0b47ec4721b4a242b68cc8e7059", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1ODc5NA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407158794", "bodyText": "got it", "author": "lsyldliu", "createdAt": "2020-04-12T07:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java\nindex 60e120bf32..27b2cd3044 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java\n\n@@ -45,13 +45,13 @@ public class MiniBatchDeduplicateKeepFirstRowFunction\n \n \tprivate final TypeSerializer<BaseRow> typeSerializer;\n \tprivate final long minRetentionTime;\n-\tprivate final boolean stateCleaningEnabled;\n \t// state stores a boolean flag to indicate whether key appears before.\n \tprivate ValueState<Boolean> state;\n \n-\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n+\tpublic MiniBatchDeduplicateKeepFirstRowFunction(\n+\t\t\tTypeSerializer<BaseRow> typeSerializer,\n+\t\t\tlong minRetentionTime) {\n \t\tthis.minRetentionTime = minRetentionTime;\n-\t\tstateCleaningEnabled = minRetentionTime > 1;\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407162656", "bodyText": "nit: ) {", "author": "libenchao", "createdAt": "2020-04-12T08:00:39Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java", "diffHunk": "@@ -113,4 +113,42 @@ public void testWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t\tassertor.assertOutputEqualsSorted(\"output wrong.\", expectedOutput, testHarness.getOutput());\n \t}\n+\n+\t@Test\n+\tpublic void tesKeepLastRowWithStateTtlAndGenerateRetraction() throws Exception {\n+\t\tMiniBatchDeduplicateKeepLastRowFunction func = createFunction(true, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\n+\t\ttestHarness.processElement(record(\"book\", 1L, 10));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\ttestHarness.setStateTtlProcessingTime(30);\n+\t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n+\t\tfor (long i = 3; i < 30; i++){", "originalCommit": "a85e34346824eb2b005b157801bf576ba901ea88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2Mjc5MA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407162790", "bodyText": "just curious, if no more other state access, old state will be valid when it is accessed?", "author": "libenchao", "createdAt": "2020-04-12T08:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjQxNg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407166416", "bodyText": "sorry, I have updated it.\nYes, Incremental cleanup is eventual cleanup, needs more state access, it keeps a global iterator and might not have reached and cleaned some expired state.", "author": "lsyldliu", "createdAt": "2020-04-12T08:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMTI4Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407211286", "bodyText": "have you tested it\uff1f\nI'm asking because in state backend, we can easily check the ttl when we get the state, and even it's not cleaned physically.", "author": "libenchao", "createdAt": "2020-04-12T15:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDUxMQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r407214511", "bodyText": "Yeah, I have tested it. When remove these code, the test failed. You can see FLINK-10473 for more explain.", "author": "lsyldliu", "createdAt": "2020-04-12T15:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java\nindex cfacd3a3ca..345a32868a 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java\n\n@@ -115,7 +115,7 @@ public class MiniBatchDeduplicateKeepLastRowFunctionTest extends DeduplicateFunc\n \t}\n \n \t@Test\n-\tpublic void tesKeepLastRowWithStateTtlAndGenerateRetraction() throws Exception {\n+\tpublic void testWithGenerateUpdateBeforeAndStateTtl() throws Exception {\n \t\tMiniBatchDeduplicateKeepLastRowFunction func = createFunction(true, minTime.toMilliseconds());\n \t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n \t\ttestHarness.setup();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDcwMA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r408710700", "bodyText": "We don't need the second parameter stateCleaningEnabled. If retentionTime <= 0, then return DISABLED.", "author": "wuchong", "createdAt": "2020-04-15T09:37:02Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.util;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.time.Time;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Utility to create a {@link StateTtlConfig} object.\n+ * */\n+public class StateTtlConfigUtil {\n+\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {", "originalCommit": "e69403459fd014a60d06457fc46d1379bece5aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDg5NQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r408710895", "bodyText": "Please also add a Javadoc on this method, esp. what's the unit of retentionTime.", "author": "wuchong", "createdAt": "2020-04-15T09:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java\nindex 248c8f53e6..ad0670d45e 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java\n\n@@ -21,16 +21,17 @@ package org.apache.flink.table.runtime.util;\n import org.apache.flink.api.common.state.StateTtlConfig;\n import org.apache.flink.api.common.time.Time;\n \n-import static org.apache.flink.util.Preconditions.checkArgument;\n-\n /**\n  * Utility to create a {@link StateTtlConfig} object.\n  * */\n public class StateTtlConfigUtil {\n \n-\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n-\t\tif (stateCleaningEnabled) {\n-\t\t\tcheckArgument(retentionTime > 0, \"ttl time must be positive when enabling state cleanup\");\n+\t/**\n+\t * Creates a {@link StateTtlConfig} depends on retentionTime parameter.\n+\t * @param retentionTime State ttl time which unit is MILLISECONDS.\n+\t */\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime) {\n+\t\tif (retentionTime > 0) {\n \t\t\treturn StateTtlConfig\n \t\t\t\t.newBuilder(Time.milliseconds(retentionTime))\n \t\t\t\t.setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r408728548", "bodyText": "cc @Myasuka , is this a correct way to trigger state cleanup?\nIs there a better to make sure the expired state cleaned?", "author": "wuchong", "createdAt": "2020-04-15T10:06:34Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception {\n+\t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\t\ttestHarness.processElement(record(\"book\", 1L, 12));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\ttestHarness.setStateTtlProcessingTime(30);\n+\t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n+\t\tfor (long i = 3; i < 30; i++) {\n+\t\t\ttestHarness.processElement(record(\"book\", i, 20));", "originalCommit": "e69403459fd014a60d06457fc46d1379bece5aae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMzk2OQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r408823969", "bodyText": "Similar toTtlStateTestBase#triggerMoreIncrementalCleanupByOtherOps which is used to trigger the expired state clean eventually.", "author": "lsyldliu", "createdAt": "2020-04-15T13:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgzMjEzNg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r408832136", "bodyText": "My concern is that why the number is 30? Is 30 enough?", "author": "wuchong", "createdAt": "2020-04-15T13:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4ODA3Ng==", "url": "https://github.com/apache/flink/pull/11482#discussion_r408888076", "bodyText": "In this case, it is enough, I just picked it at random, of course, the bigger the better.", "author": "lsyldliu", "createdAt": "2020-04-15T14:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzOTEzNg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409339136", "bodyText": "Since we choose ReturnExpiredIfNotCleanedUp for better performance, and verifying the data has been physically deleted is a topic related to the implementation of clean up strategy for different state backends. For RocksDB, we have to reply on the compaction taken for sst files containing those keys. For Heap KeyedStateBackend, the records to fetch for cleaning up is related to the key groups (how many state map would existed) in one state backend.\nI think state backend module could guarantee the correctness, and this should be out of scope for SQL module. Once state backend changes the implementation of TTL cleanup strategy, verifying the data has been physically deleted in SQL module might be unstable.\nIn a nutshell, we would not need to ensure data has been physically deleted here, verifying the state in MiniBatchDeduplicateKeepFirstRowFunction has been configured with TTL is enough. Otherwise, if we use NeverReturnExpired strategy, things would be much simpler here.", "author": "Myasuka", "createdAt": "2020-04-16T07:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0ODQ4OA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409348488", "bodyText": "@Myasuka Thanks for the input.\n+1 to use NeverReturnExpired strategy. We have got other questions from user ML about this too. IMHO, NeverReturnExpired is more straight forward to understand for users.", "author": "libenchao", "createdAt": "2020-04-16T07:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NDk0MA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409354940", "bodyText": "I also discussed with @lincoln-lil and we think NeverReturnExpired is better to give a more deterministic result for operators. +1 to use NeverReturnExpired. Could you update the strategy @lsyldliu ? And we don't need this foreach then.", "author": "wuchong", "createdAt": "2020-04-16T07:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM1NTIxNA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409355214", "bodyText": "Hi @libenchao , what's the question in user mailing list?", "author": "wuchong", "createdAt": "2020-04-16T07:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MDc4OQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409360789", "bodyText": "@wuchong a mail titled \"\u5173\u4e8e\u72b6\u6001TTL\" in user-zh ML.", "author": "libenchao", "createdAt": "2020-04-16T08:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MzQ5MA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409363490", "bodyText": "Thanks @libenchao .", "author": "wuchong", "createdAt": "2020-04-16T08:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2MzU4Mg==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409363582", "bodyText": "Okay, I also prefer to NeverReturnExpired strategy, I choose ReturnExpiredIfNotCleanedUp  because stream-stream join use it currently, I think it should be unified.", "author": "lsyldliu", "createdAt": "2020-04-16T08:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\nindex d55710226d..953fcd7912 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java\n\n@@ -85,9 +85,7 @@ public class MiniBatchDeduplicateKeepFirstRowFunctionTest extends DeduplicateFun\n \n \t\ttestHarness.setStateTtlProcessingTime(30);\n \t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n-\t\tfor (long i = 3; i < 30; i++) {\n-\t\t\ttestHarness.processElement(record(\"book\", i, 20));\n-\t\t}\n+\t\ttriggerMoreIncrementalCleanupByOtherOps(testHarness);\n \n \t\ttestHarness.processElement(record(\"book\", 1L, 17));\n \t\ttestHarness.processElement(record(\"book\", 2L, 18));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0MDE2NQ==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409340165", "bodyText": "StateTtlConfig would already check the TTL time larger than 0, this check might not be so useful.", "author": "Myasuka", "createdAt": "2020-04-16T07:30:31Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.util;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.time.Time;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Utility to create a {@link StateTtlConfig} object.\n+ * */\n+public class StateTtlConfigUtil {\n+\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n+\t\tif (stateCleaningEnabled) {\n+\t\t\tcheckArgument(retentionTime > 0, \"ttl time must be positive when enabling state cleanup\");", "originalCommit": "e69403459fd014a60d06457fc46d1379bece5aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java\nindex 248c8f53e6..ad0670d45e 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java\n\n@@ -21,16 +21,17 @@ package org.apache.flink.table.runtime.util;\n import org.apache.flink.api.common.state.StateTtlConfig;\n import org.apache.flink.api.common.time.Time;\n \n-import static org.apache.flink.util.Preconditions.checkArgument;\n-\n /**\n  * Utility to create a {@link StateTtlConfig} object.\n  * */\n public class StateTtlConfigUtil {\n \n-\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n-\t\tif (stateCleaningEnabled) {\n-\t\t\tcheckArgument(retentionTime > 0, \"ttl time must be positive when enabling state cleanup\");\n+\t/**\n+\t * Creates a {@link StateTtlConfig} depends on retentionTime parameter.\n+\t * @param retentionTime State ttl time which unit is MILLISECONDS.\n+\t */\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime) {\n+\t\tif (retentionTime > 0) {\n \t\t\treturn StateTtlConfig\n \t\t\t\t.newBuilder(Time.milliseconds(retentionTime))\n \t\t\t\t.setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NTQ5NA==", "url": "https://github.com/apache/flink/pull/11482#discussion_r409345494", "bodyText": "No need to check here, just enable a StateTtlConfig.DISABLED is okay.", "author": "Myasuka", "createdAt": "2020-04-16T07:40:08Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunction.java", "diffHunk": "@@ -59,6 +64,10 @@ public MiniBatchDeduplicateKeepLastRowFunction(BaseRowTypeInfo rowTypeInfo, bool\n \tpublic void open(ExecutionContext ctx) throws Exception {\n \t\tsuper.open(ctx);\n \t\tValueStateDescriptor<BaseRow> stateDesc = new ValueStateDescriptor<>(\"preRowState\", rowTypeInfo);\n+\t\tStateTtlConfig ttlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n+\t\tif (ttlConfig.isEnabled()) {", "originalCommit": "e69403459fd014a60d06457fc46d1379bece5aae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "96319a499db13811d5fa70058d6ef740c5219196", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunction.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunction.java\nindex 88e568105a..f81a2031d9 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunction.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunction.java\n\n@@ -44,19 +44,20 @@ public class MiniBatchDeduplicateKeepLastRowFunction\n \tprivate static final long serialVersionUID = -8981813609115029119L;\n \n \tprivate final BaseRowTypeInfo rowTypeInfo;\n-\tprivate final boolean generateRetraction;\n+\tprivate final boolean generateUpdateBefore;\n \tprivate final TypeSerializer<BaseRow> typeSerializer;\n \tprivate final long minRetentionTime;\n-\tprivate final boolean stateCleaningEnabled;\n \t// state stores complete row.\n \tprivate ValueState<BaseRow> state;\n \n-\tpublic MiniBatchDeduplicateKeepLastRowFunction(BaseRowTypeInfo rowTypeInfo, boolean generateRetraction,\n-\t\t\tTypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n+\tpublic MiniBatchDeduplicateKeepLastRowFunction(\n+\t\t\tBaseRowTypeInfo rowTypeInfo,\n+\t\t\tboolean generateUpdateBefore,\n+\t\t\tTypeSerializer<BaseRow> typeSerializer,\n+\t\t\tlong minRetentionTime) {\n \t\tthis.minRetentionTime = minRetentionTime;\n-\t\tthis.stateCleaningEnabled = minRetentionTime > 1;\n \t\tthis.rowTypeInfo = rowTypeInfo;\n-\t\tthis.generateRetraction = generateRetraction;\n+\t\tthis.generateUpdateBefore = generateUpdateBefore;\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n"}}, {"oid": "96319a499db13811d5fa70058d6ef740c5219196", "url": "https://github.com/apache/flink/commit/96319a499db13811d5fa70058d6ef740c5219196", "message": "minibatch and non-minibatch dedupliaction support state ttl using StateTtlConfig feature", "committedDate": "2020-04-16T07:46:47Z", "type": "commit"}, {"oid": "96319a499db13811d5fa70058d6ef740c5219196", "url": "https://github.com/apache/flink/commit/96319a499db13811d5fa70058d6ef740c5219196", "message": "minibatch and non-minibatch dedupliaction support state ttl using StateTtlConfig feature", "committedDate": "2020-04-16T07:46:47Z", "type": "forcePushed"}, {"oid": "39032cfa3ec3d87d3419a75bc3e235c5dff54bb2", "url": "https://github.com/apache/flink/commit/39032cfa3ec3d87d3419a75bc3e235c5dff54bb2", "message": "update state ttl strategy to NeverReturnExpired", "committedDate": "2020-04-16T10:14:03Z", "type": "commit"}]}