{"pr_number": 11624, "pr_title": "[FLINK-16949] Enhance AbstractStreamOperatorTestHarness to use customized TtlTimeProvider", "pr_createdAt": "2020-04-02T18:49:36Z", "pr_url": "https://github.com/apache/flink/pull/11624", "timeline": [{"oid": "668797635ab529ea21ef234a1f99747cfb4d898a", "url": "https://github.com/apache/flink/commit/668797635ab529ea21ef234a1f99747cfb4d898a", "message": "[FLINK-16949] Enhance AbstractStreamOperatorTestHarness to use customized TtlTimeProvider", "committedDate": "2020-04-02T18:45:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng==", "url": "https://github.com/apache/flink/pull/11624#discussion_r402875546", "bodyText": "Why not to inject this in the constructor of StreamTaskStateInitializerImpl?", "author": "azagrebin", "createdAt": "2020-04-03T09:25:11Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "originalCommit": "668797635ab529ea21ef234a1f99747cfb4d898a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5ODAyMA==", "url": "https://github.com/apache/flink/pull/11624#discussion_r402898020", "bodyText": "I just don't want to introduce too many changes here. If we plan to inject this as a filed, I am in favor of moving TtlTimeProvider at operator level (by changing StreamTaskStateInitializer#streamOperatorStateContext) but not in the constructor which was FLINK-14156 fixed.", "author": "Myasuka", "createdAt": "2020-04-03T10:04:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjUyNA==", "url": "https://github.com/apache/flink/pull/11624#discussion_r402916524", "bodyText": "I think either approach can be refactored in future.\nUsing constructor is the usual way how we inject dependencies for tests. The inheritance is usually used to change more complicated internal behaviour.\nYou could also keep the current constructor and add another one annotated with @VisibleForTesting which could accept the custom TtlTimeProvider field.", "author": "azagrebin", "createdAt": "2020-04-03T10:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzcwNw==", "url": "https://github.com/apache/flink/pull/11624#discussion_r403207707", "bodyText": "There existed another problem why we not change the constructor of StreamTaskStateInitializerImpl.\nCurrent AbstractStreamOperatorTestHarness is not created from a builder, and once a new AbstractStreamOperatorTestHarness is created, the inner streamTaskStateInitializer has been created with the default TtlTimeProvider. Even we set ttl time provider to AbstractStreamOperatorTestHarness later, the inner streamTaskStateInitializer would not notice the changed ttl time provider unless we call AbstractStreamOperatorTestHarness#setup to re-create the inner streamTaskStateInitializer.\nHowever, AbstractStreamOperatorTestHarness#setup actually call a deprecated SetupableStreamOperator#setup interface.\nIn a nutshell, unless we refactor how we build AbstractStreamOperatorTestHarness, to make the customized ttl time provider take effect, we must call AbstractStreamOperatorTestHarness#setup each time which might already be treated as a deprecated interface.", "author": "Myasuka", "createdAt": "2020-04-03T18:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5MDIyNw==", "url": "https://github.com/apache/flink/pull/11624#discussion_r404590227", "bodyText": "Then I think it makes sense to consider builders to avoid adding more harness constructors.", "author": "azagrebin", "createdAt": "2020-04-07T07:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTQyOA==", "url": "https://github.com/apache/flink/pull/11624#discussion_r406631428", "bodyText": "Why not AbstractStreamOperatorTestHarness always use a mocked TtlTimeProvider?  Just like always use the TestProcessingTimeService. Then we don't need to re-create the inner streamTaskStateInitializer.\nI also prefer the way to set processing time on the harness object AbstractStreamOperatorTestHarness#setProcessingTime instead of on other object mockTtlTimeProvider.setCurrentTimeStamp(0L). We can provide a method setStateTtlTime() on the AbstractStreamOperatorTestHarness too.", "author": "wuchong", "createdAt": "2020-04-10T07:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1MzIzMw==", "url": "https://github.com/apache/flink/pull/11624#discussion_r406653233", "bodyText": "This would indeed work. This is not flexible in general but may be good enough and we already have it for processing time.", "author": "azagrebin", "createdAt": "2020-04-10T08:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1ODUxOA==", "url": "https://github.com/apache/flink/pull/11624#discussion_r406658518", "bodyText": "I think @wuchong 's suggestion is also a available choice. However, I think FLINK-17011 is the most clean solution to clean up these test code. Although I have to admit that PR #11676 is a bit large for reviewing.", "author": "Myasuka", "createdAt": "2020-04-10T08:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2MDc5MA==", "url": "https://github.com/apache/flink/pull/11624#discussion_r406660790", "bodyText": "What about going with this approach first? This can be merged faster and unblock other works. We can also continue the cleanup work using new builders after that, and expose custom time provider in builders to make it more flexible.", "author": "wuchong", "createdAt": "2020-04-10T08:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eb18708f59f83bdee706e5d0faaf83139e85adb8", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java\nindex 3288ea0a3e6..ca3ada5830f 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java\n\n@@ -258,10 +271,6 @@ public class StreamTaskStateInitializerImpl implements StreamTaskStateInitialize\n \t\t}\n \t}\n \n-\tprotected TtlTimeProvider getTtlTimeProvider() {\n-\t\treturn TtlTimeProvider.DEFAULT;\n-\t}\n-\n \tprotected <K> AbstractKeyedStateBackend<K> keyedStatedBackend(\n \t\tTypeSerializer<K> keySerializer,\n \t\tString operatorIdentifierText,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODQ0Nw==", "url": "https://github.com/apache/flink/pull/11624#discussion_r402878447", "bodyText": "I would avoid exposing getTtlTimeProvider in AbstractKeyedStateBackend, although we annotate with VisibleForTesting, it still becomes visible for users.\nThe working of custom TtlTimeProvider can be tested e.g. by creating TTL states and checking that they expire according the custom timestamp. Also this will be tested by other tests which rely on this injection of custom TtlTimeProvider.", "author": "azagrebin", "createdAt": "2020-04-03T09:30:11Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java", "diffHunk": "@@ -52,4 +55,24 @@ public void testInitializeAfterOpenning() throws Throwable {\n \t\tresult.open();\n \t\tresult.initializeState(new OperatorSubtaskState());\n \t}\n+\n+\t@Test\n+\tpublic void testSetTtlTimeProvider() throws Exception {\n+\t\tAbstractStreamOperatorTestHarness<Integer> result;\n+\t\tAbstractStreamOperator operator = new AbstractStreamOperator<Integer>() {};\n+\t\tresult =\n+\t\t\tnew AbstractStreamOperatorTestHarness<>(\n+\t\t\t\toperator,\n+\t\t\t\t1,\n+\t\t\t\t1,\n+\t\t\t\t0);\n+\t\tresult.config.setStateKeySerializer(IntSerializer.INSTANCE);\n+\n+\t\tlong expectedTimeStamp = 42;\n+\t\tresult.setTtlTimeProvider(() -> expectedTimeStamp);\n+\t\tresult.initializeState(new OperatorSubtaskState());\n+\t\tresult.open();\n+\t\tAssert.assertEquals(expectedTimeStamp,\n+\t\t\t((AbstractKeyedStateBackend<?>) operator.getKeyedStateBackend()).getTtlTimeProvider().currentTimestamp());", "originalCommit": "668797635ab529ea21ef234a1f99747cfb4d898a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5ODY4Nw==", "url": "https://github.com/apache/flink/pull/11624#discussion_r402898687", "bodyText": "This sounds good, and I will update this test.", "author": "Myasuka", "createdAt": "2020-04-03T10:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c4207aa80f6279d013a51b9104997e840716640e", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java\nindex 1f76c878460..dc1ddae4a86 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java\n\n@@ -58,21 +65,33 @@ public class AbstractStreamOperatorTestHarnessTest extends TestLogger {\n \n \t@Test\n \tpublic void testSetTtlTimeProvider() throws Exception {\n-\t\tAbstractStreamOperatorTestHarness<Integer> result;\n-\t\tAbstractStreamOperator operator = new AbstractStreamOperator<Integer>() {};\n-\t\tresult =\n-\t\t\tnew AbstractStreamOperatorTestHarness<>(\n+\t\tAbstractStreamOperator<Integer> operator = new AbstractStreamOperator<Integer>() {};\n+\t\ttry (AbstractStreamOperatorTestHarness<Integer> result = new AbstractStreamOperatorTestHarness<>(\n \t\t\t\toperator,\n \t\t\t\t1,\n \t\t\t\t1,\n-\t\t\t\t0);\n-\t\tresult.config.setStateKeySerializer(IntSerializer.INSTANCE);\n+\t\t\t\t0)) {\n \n-\t\tlong expectedTimeStamp = 42;\n-\t\tresult.setTtlTimeProvider(() -> expectedTimeStamp);\n-\t\tresult.initializeState(new OperatorSubtaskState());\n-\t\tresult.open();\n-\t\tAssert.assertEquals(expectedTimeStamp,\n-\t\t\t((AbstractKeyedStateBackend<?>) operator.getKeyedStateBackend()).getTtlTimeProvider().currentTimestamp());\n+\t\t\tresult.config.setStateKeySerializer(IntSerializer.INSTANCE);\n+\n+\t\t\tTime timeToLive = Time.hours(1);\n+\t\t\tMockTtlTimeProvider mockTtlTimeProvider = new MockTtlTimeProvider();\n+\t\t\tresult.setTtlTimeProvider(mockTtlTimeProvider);\n+\t\t\tresult.initializeState(new OperatorSubtaskState());\n+\t\t\tresult.open();\n+\n+\t\t\tValueStateDescriptor<Integer> stateDescriptor = new ValueStateDescriptor<>(\"test\", IntSerializer.INSTANCE);\n+\t\t\tstateDescriptor.enableTimeToLive(StateTtlConfig.newBuilder(timeToLive).build());\n+\t\t\tKeyedStateBackend<Integer> keyedStateBackend = operator.getKeyedStateBackend();\n+\t\t\tValueState<Integer> state = keyedStateBackend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, stateDescriptor);\n+\n+\t\t\tint expectedValue = 42;\n+\t\t\tkeyedStateBackend.setCurrentKey(1);\n+\t\t\tmockTtlTimeProvider.setCurrentTimeStamp(0L);\n+\t\t\tstate.update(expectedValue);\n+\t\t\tAssert.assertEquals(expectedValue, (int) state.value());\n+\t\t\tmockTtlTimeProvider.setCurrentTimeStamp(timeToLive.toMilliseconds() + 1);\n+\t\t\tAssert.assertNull(state.value());\n+\t\t}\n \t}\n }\n"}}, {"oid": "c4207aa80f6279d013a51b9104997e840716640e", "url": "https://github.com/apache/flink/commit/c4207aa80f6279d013a51b9104997e840716640e", "message": "address comments", "committedDate": "2020-04-03T18:33:30Z", "type": "commit"}, {"oid": "eb18708f59f83bdee706e5d0faaf83139e85adb8", "url": "https://github.com/apache/flink/commit/eb18708f59f83bdee706e5d0faaf83139e85adb8", "message": "introduce #setStateTtlProcessingTime to make ttl time configurable for test harness", "committedDate": "2020-04-10T09:53:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5Mjk5Mg==", "url": "https://github.com/apache/flink/pull/11624#discussion_r406692992", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setCurrentTimeStamp(long timeStamp) {\n          \n          \n            \n            \tpublic void setCurrentTimestamp(long timestamp) {\n          \n      \n    \n    \n  \n\nA lowercase for S?", "author": "wuchong", "createdAt": "2020-04-10T10:02:55Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java", "diffHunk": "@@ -26,4 +26,8 @@\n \tpublic long currentTimestamp() {\n \t\treturn time;\n \t}\n+\n+\tpublic void setCurrentTimeStamp(long timeStamp) {", "originalCommit": "eb18708f59f83bdee706e5d0faaf83139e85adb8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "82393e3b430e14ca026d328494e3fec6de3a7b0c", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java b/flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java\nindex c20bc22860f..1e52647367d 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java\n\n@@ -27,7 +27,7 @@ public class MockTtlTimeProvider implements TtlTimeProvider {\n \t\treturn time;\n \t}\n \n-\tpublic void setCurrentTimeStamp(long timeStamp) {\n-\t\tthis.time = timeStamp;\n+\tpublic void setCurrentTimestamp(long timestamp) {\n+\t\tthis.time = timestamp;\n \t}\n }\n"}}, {"oid": "82393e3b430e14ca026d328494e3fec6de3a7b0c", "url": "https://github.com/apache/flink/commit/82393e3b430e14ca026d328494e3fec6de3a7b0c", "message": "address comments to refactor method name case", "committedDate": "2020-04-10T17:35:04Z", "type": "commit"}, {"oid": "607d235b0cf188cde57e3a447130d6debb0c3439", "url": "https://github.com/apache/flink/commit/607d235b0cf188cde57e3a447130d6debb0c3439", "message": "fix broken compile", "committedDate": "2020-04-10T17:43:52Z", "type": "commit"}]}