{"pr_number": 14372, "pr_title": "[FLINK-19259][Kinesis] Remove references to allow classloader unloading", "pr_createdAt": "2020-12-12T19:13:12Z", "pr_url": "https://github.com/apache/flink/pull/14372", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MzUwMA==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542643500", "bodyText": "revert", "author": "zentol", "createdAt": "2020-12-14T18:54:53Z", "path": "flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java", "diffHunk": "@@ -128,12 +129,11 @@\n \t *\n \t * <p>The release hook is executed just before the user code class loader is being released.\n \t * Registration only happens if no hook has been registered under this name already.\n-\t *", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java b/flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java\nindex 9746abfeef..6c77ef15a0 100644\n--- a/flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java\n+++ b/flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java\n\n@@ -129,11 +128,12 @@ public interface RuntimeContext {\n \t *\n \t * <p>The release hook is executed just before the user code class loader is being released.\n \t * Registration only happens if no hook has been registered under this name already.\n+\t *\n \t * @param releaseHookName name of the release hook.\n \t * @param releaseHook release hook which is executed just before the user code class loader is being released\n \t */\n \t@PublicEvolving\n-\tvoid registerUserCodeClassLoaderReleaseHookIfAbsent(String releaseHookName, Consumer<ClassLoader> releaseHook);\n+\tvoid registerUserCodeClassLoaderReleaseHookIfAbsent(String releaseHookName, Runnable releaseHook);\n \n \t// --------------------------------------------------------------------------------------------\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDk2MA==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542644960", "bodyText": "Shouldn't we be able to use getClass().getClassLoader()? Then we wouldn't have to modify the RuntimeContext API.", "author": "zentol", "createdAt": "2020-12-14T18:56:07Z", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2Njc1Mg==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542666752", "bodyText": "Ignore my previous suggestion; we shouldn't do that on the off-chance that the connector is loaded via /lib.\nCould we use RuntimeContext#getUserCodeClassLoader instead?", "author": "zentol", "createdAt": "2020-12-14T19:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMTg5Nw==", "url": "https://github.com/apache/flink/pull/14372#discussion_r544221897", "bodyText": "Good idea! That works.", "author": "rmetzger", "createdAt": "2020-12-16T11:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\nindex 9ad7bbd4b8..bc9e97dff4 100644\n--- a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n+++ b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n\n@@ -434,41 +435,29 @@ public class FlinkKinesisProducer<OUT> extends RichSinkFunction<OUT> implements\n \t}\n \n \t/**\n-\t * Remove references created by the producer, preventing the classloader to unload. References were\n-\t * analyzed as of version 0.14.0.\n+\t * Remove references created by the producer, preventing the classloader to unload.\n+\t * References were analyzed as of versions:\n+\t * \taws.kinesis-kpl.version = 0.14.0\n+\t * \taws.sdk.version = 1.11.754\n+\t * \taws.sdkv2.version = 2.13.52\n \t */\n \tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n-\t\t// unregister admin mbean\n \t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n \n+\t\t// shutdown FileAgeManager thread pool\n \t\ttry {\n-\t\t\t// Remove FileAgeManager\n \t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n \t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n \t\t\tinstanceField.setAccessible(true);\n-\n-\t\t\t// unset (static final) field FileAgeManager.instance\n-\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-\t\t\tmodifiersField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n \t\t\tObject fileAgeManager = instanceField.get(null);\n-\t\t\tinstanceField.set(null, null);\n \n-\t\t\t// shutdown thread pool\n \t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n \t\t\texecutorField.setAccessible(true);\n \t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n \t\t\texecutorService.shutdown();\n \t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n-\n-\t\t\t// Remove InstanceProfileCredentialsProvider\n-\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);\n-\t\t\tField credProviderInstanceField = credProviderClazz.getDeclaredField(\"INSTANCE\");\n-\t\t\tcredProviderInstanceField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(credProviderInstanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n-\t\t\tcredProviderInstanceField.set(null, null);\n \t\t} catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InterruptedException e) {\n-\t\t\tLOG.info(\"Unable to unregister static fields of KinesisProducer\", e);\n+\t\t\tLOG.info(\"Unable to shutdown thread pool of KinesisProducer/FileAgeManager.\", e);\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0ODkzMA==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542648930", "bodyText": "This should be the key change necessary to ensure the ClassLoader can be cleaned up.\nWe shouldn't have to touch the FileAgeManager#instance reference; so long as no thread has references to them we should be good.", "author": "zentol", "createdAt": "2020-12-14T18:59:07Z", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n+\t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n+\t\t\tinstanceField.setAccessible(true);\n+\n+\t\t\t// unset (static final) field FileAgeManager.instance\n+\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiersField.setAccessible(true);\n+\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n+\t\t\tObject fileAgeManager = instanceField.get(null);\n+\t\t\tinstanceField.set(null, null);\n+\n+\t\t\t// shutdown thread pool", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMjA4NA==", "url": "https://github.com/apache/flink/pull/14372#discussion_r544222084", "bodyText": "You are right. Only the thread pool is the problem.", "author": "rmetzger", "createdAt": "2020-12-16T11:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0ODkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\nindex 9ad7bbd4b8..bc9e97dff4 100644\n--- a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n+++ b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n\n@@ -434,41 +435,29 @@ public class FlinkKinesisProducer<OUT> extends RichSinkFunction<OUT> implements\n \t}\n \n \t/**\n-\t * Remove references created by the producer, preventing the classloader to unload. References were\n-\t * analyzed as of version 0.14.0.\n+\t * Remove references created by the producer, preventing the classloader to unload.\n+\t * References were analyzed as of versions:\n+\t * \taws.kinesis-kpl.version = 0.14.0\n+\t * \taws.sdk.version = 1.11.754\n+\t * \taws.sdkv2.version = 2.13.52\n \t */\n \tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n-\t\t// unregister admin mbean\n \t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n \n+\t\t// shutdown FileAgeManager thread pool\n \t\ttry {\n-\t\t\t// Remove FileAgeManager\n \t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n \t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n \t\t\tinstanceField.setAccessible(true);\n-\n-\t\t\t// unset (static final) field FileAgeManager.instance\n-\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-\t\t\tmodifiersField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n \t\t\tObject fileAgeManager = instanceField.get(null);\n-\t\t\tinstanceField.set(null, null);\n \n-\t\t\t// shutdown thread pool\n \t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n \t\t\texecutorField.setAccessible(true);\n \t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n \t\t\texecutorService.shutdown();\n \t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n-\n-\t\t\t// Remove InstanceProfileCredentialsProvider\n-\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);\n-\t\t\tField credProviderInstanceField = credProviderClazz.getDeclaredField(\"INSTANCE\");\n-\t\t\tcredProviderInstanceField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(credProviderInstanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n-\t\t\tcredProviderInstanceField.set(null, null);\n \t\t} catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InterruptedException e) {\n-\t\t\tLOG.info(\"Unable to unregister static fields of KinesisProducer\", e);\n+\t\t\tLOG.info(\"Unable to shutdown thread pool of KinesisProducer/FileAgeManager.\", e);\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1MjY1Nw==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542652657", "bodyText": "Why are we clearing this singleton?", "author": "zentol", "createdAt": "2020-12-14T19:01:52Z", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n+\t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n+\t\t\tinstanceField.setAccessible(true);\n+\n+\t\t\t// unset (static final) field FileAgeManager.instance\n+\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiersField.setAccessible(true);\n+\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n+\t\t\tObject fileAgeManager = instanceField.get(null);\n+\t\t\tinstanceField.set(null, null);\n+\n+\t\t\t// shutdown thread pool\n+\t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n+\t\t\texecutorField.setAccessible(true);\n+\t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n+\t\t\texecutorService.shutdown();\n+\t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n+\n+\t\t\t// Remove InstanceProfileCredentialsProvider\n+\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMjIwNg==", "url": "https://github.com/apache/flink/pull/14372#discussion_r544222206", "bodyText": "That's again not needed. I'll remove that.", "author": "rmetzger", "createdAt": "2020-12-16T11:27:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1MjY1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\nindex 9ad7bbd4b8..bc9e97dff4 100644\n--- a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n+++ b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n\n@@ -434,41 +435,29 @@ public class FlinkKinesisProducer<OUT> extends RichSinkFunction<OUT> implements\n \t}\n \n \t/**\n-\t * Remove references created by the producer, preventing the classloader to unload. References were\n-\t * analyzed as of version 0.14.0.\n+\t * Remove references created by the producer, preventing the classloader to unload.\n+\t * References were analyzed as of versions:\n+\t * \taws.kinesis-kpl.version = 0.14.0\n+\t * \taws.sdk.version = 1.11.754\n+\t * \taws.sdkv2.version = 2.13.52\n \t */\n \tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n-\t\t// unregister admin mbean\n \t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n \n+\t\t// shutdown FileAgeManager thread pool\n \t\ttry {\n-\t\t\t// Remove FileAgeManager\n \t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n \t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n \t\t\tinstanceField.setAccessible(true);\n-\n-\t\t\t// unset (static final) field FileAgeManager.instance\n-\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-\t\t\tmodifiersField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n \t\t\tObject fileAgeManager = instanceField.get(null);\n-\t\t\tinstanceField.set(null, null);\n \n-\t\t\t// shutdown thread pool\n \t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n \t\t\texecutorField.setAccessible(true);\n \t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n \t\t\texecutorService.shutdown();\n \t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n-\n-\t\t\t// Remove InstanceProfileCredentialsProvider\n-\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);\n-\t\t\tField credProviderInstanceField = credProviderClazz.getDeclaredField(\"INSTANCE\");\n-\t\t\tcredProviderInstanceField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(credProviderInstanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n-\t\t\tcredProviderInstanceField.set(null, null);\n \t\t} catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InterruptedException e) {\n-\t\t\tLOG.info(\"Unable to unregister static fields of KinesisProducer\", e);\n+\t\t\tLOG.info(\"Unable to shutdown thread pool of KinesisProducer/FileAgeManager.\", e);\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NzYwOA==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542657608", "bodyText": "It would be good to add a version reference for which aws-java-sdk-core was used.", "author": "zentol", "createdAt": "2020-12-14T19:06:28Z", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\nindex 9ad7bbd4b8..bc9e97dff4 100644\n--- a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n+++ b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n\n@@ -434,41 +435,29 @@ public class FlinkKinesisProducer<OUT> extends RichSinkFunction<OUT> implements\n \t}\n \n \t/**\n-\t * Remove references created by the producer, preventing the classloader to unload. References were\n-\t * analyzed as of version 0.14.0.\n+\t * Remove references created by the producer, preventing the classloader to unload.\n+\t * References were analyzed as of versions:\n+\t * \taws.kinesis-kpl.version = 0.14.0\n+\t * \taws.sdk.version = 1.11.754\n+\t * \taws.sdkv2.version = 2.13.52\n \t */\n \tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n-\t\t// unregister admin mbean\n \t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n \n+\t\t// shutdown FileAgeManager thread pool\n \t\ttry {\n-\t\t\t// Remove FileAgeManager\n \t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n \t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n \t\t\tinstanceField.setAccessible(true);\n-\n-\t\t\t// unset (static final) field FileAgeManager.instance\n-\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-\t\t\tmodifiersField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n \t\t\tObject fileAgeManager = instanceField.get(null);\n-\t\t\tinstanceField.set(null, null);\n \n-\t\t\t// shutdown thread pool\n \t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n \t\t\texecutorField.setAccessible(true);\n \t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n \t\t\texecutorService.shutdown();\n \t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n-\n-\t\t\t// Remove InstanceProfileCredentialsProvider\n-\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);\n-\t\t\tField credProviderInstanceField = credProviderClazz.getDeclaredField(\"INSTANCE\");\n-\t\t\tcredProviderInstanceField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(credProviderInstanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n-\t\t\tcredProviderInstanceField.set(null, null);\n \t\t} catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InterruptedException e) {\n-\t\t\tLOG.info(\"Unable to unregister static fields of KinesisProducer\", e);\n+\t\t\tLOG.info(\"Unable to shutdown thread pool of KinesisProducer/FileAgeManager.\", e);\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1ODYyMg==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542658622", "bodyText": "seems outdated?", "author": "zentol", "createdAt": "2020-12-14T19:07:23Z", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\nindex 9ad7bbd4b8..bc9e97dff4 100644\n--- a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n+++ b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n\n@@ -434,41 +435,29 @@ public class FlinkKinesisProducer<OUT> extends RichSinkFunction<OUT> implements\n \t}\n \n \t/**\n-\t * Remove references created by the producer, preventing the classloader to unload. References were\n-\t * analyzed as of version 0.14.0.\n+\t * Remove references created by the producer, preventing the classloader to unload.\n+\t * References were analyzed as of versions:\n+\t * \taws.kinesis-kpl.version = 0.14.0\n+\t * \taws.sdk.version = 1.11.754\n+\t * \taws.sdkv2.version = 2.13.52\n \t */\n \tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n-\t\t// unregister admin mbean\n \t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n \n+\t\t// shutdown FileAgeManager thread pool\n \t\ttry {\n-\t\t\t// Remove FileAgeManager\n \t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n \t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n \t\t\tinstanceField.setAccessible(true);\n-\n-\t\t\t// unset (static final) field FileAgeManager.instance\n-\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-\t\t\tmodifiersField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n \t\t\tObject fileAgeManager = instanceField.get(null);\n-\t\t\tinstanceField.set(null, null);\n \n-\t\t\t// shutdown thread pool\n \t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n \t\t\texecutorField.setAccessible(true);\n \t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n \t\t\texecutorService.shutdown();\n \t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n-\n-\t\t\t// Remove InstanceProfileCredentialsProvider\n-\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);\n-\t\t\tField credProviderInstanceField = credProviderClazz.getDeclaredField(\"INSTANCE\");\n-\t\t\tcredProviderInstanceField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(credProviderInstanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n-\t\t\tcredProviderInstanceField.set(null, null);\n \t\t} catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InterruptedException e) {\n-\t\t\tLOG.info(\"Unable to unregister static fields of KinesisProducer\", e);\n+\t\t\tLOG.info(\"Unable to shutdown thread pool of KinesisProducer/FileAgeManager.\", e);\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1ODcxNw==", "url": "https://github.com/apache/flink/pull/14372#discussion_r542658717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// unregister admin mbean", "author": "zentol", "createdAt": "2020-12-14T19:07:28Z", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean", "originalCommit": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "chunk": "diff --git a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\nindex 9ad7bbd4b8..bc9e97dff4 100644\n--- a/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n+++ b/flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java\n\n@@ -434,41 +435,29 @@ public class FlinkKinesisProducer<OUT> extends RichSinkFunction<OUT> implements\n \t}\n \n \t/**\n-\t * Remove references created by the producer, preventing the classloader to unload. References were\n-\t * analyzed as of version 0.14.0.\n+\t * Remove references created by the producer, preventing the classloader to unload.\n+\t * References were analyzed as of versions:\n+\t * \taws.kinesis-kpl.version = 0.14.0\n+\t * \taws.sdk.version = 1.11.754\n+\t * \taws.sdkv2.version = 2.13.52\n \t */\n \tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n-\t\t// unregister admin mbean\n \t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n \n+\t\t// shutdown FileAgeManager thread pool\n \t\ttry {\n-\t\t\t// Remove FileAgeManager\n \t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n \t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n \t\t\tinstanceField.setAccessible(true);\n-\n-\t\t\t// unset (static final) field FileAgeManager.instance\n-\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n-\t\t\tmodifiersField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n \t\t\tObject fileAgeManager = instanceField.get(null);\n-\t\t\tinstanceField.set(null, null);\n \n-\t\t\t// shutdown thread pool\n \t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n \t\t\texecutorField.setAccessible(true);\n \t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n \t\t\texecutorService.shutdown();\n \t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n-\n-\t\t\t// Remove InstanceProfileCredentialsProvider\n-\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);\n-\t\t\tField credProviderInstanceField = credProviderClazz.getDeclaredField(\"INSTANCE\");\n-\t\t\tcredProviderInstanceField.setAccessible(true);\n-\t\t\tmodifiersField.setInt(credProviderInstanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n-\t\t\tcredProviderInstanceField.set(null, null);\n \t\t} catch (ClassNotFoundException | NoSuchFieldException | IllegalAccessException | InterruptedException e) {\n-\t\t\tLOG.info(\"Unable to unregister static fields of KinesisProducer\", e);\n+\t\t\tLOG.info(\"Unable to shutdown thread pool of KinesisProducer/FileAgeManager.\", e);\n \t\t}\n \t}\n }\n"}}, {"oid": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "url": "https://github.com/apache/flink/commit/f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "message": "[FLINK-19259][kinesis] Remove references to allow classloader unloading", "committedDate": "2020-12-16T11:34:10Z", "type": "commit"}, {"oid": "f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "url": "https://github.com/apache/flink/commit/f8ec7aa31e1a94882c6e0677348c8c8a1d5dbc1f", "message": "[FLINK-19259][kinesis] Remove references to allow classloader unloading", "committedDate": "2020-12-16T11:34:10Z", "type": "forcePushed"}]}