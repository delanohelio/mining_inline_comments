{"pr_number": 13275, "pr_title": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "pr_createdAt": "2020-08-28T07:57:37Z", "pr_url": "https://github.com/apache/flink/pull/13275", "timeline": [{"oid": "8534c89725bb874f6c6126bbe6db4e9ccf64a820", "url": "https://github.com/apache/flink/commit/8534c89725bb874f6c6126bbe6db4e9ccf64a820", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-08-28T07:41:14Z", "type": "commit"}, {"oid": "1f9eaf6163562083066c4e6a7d22b7f4c6ee65e5", "url": "https://github.com/apache/flink/commit/1f9eaf6163562083066c4e6a7d22b7f4c6ee65e5", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-02T13:12:14Z", "type": "commit"}, {"oid": "1f9eaf6163562083066c4e6a7d22b7f4c6ee65e5", "url": "https://github.com/apache/flink/commit/1f9eaf6163562083066c4e6a7d22b7f4c6ee65e5", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-02T13:12:14Z", "type": "forcePushed"}, {"oid": "74ac3764e017be069dd2eae07e893a0c8cad40e4", "url": "https://github.com/apache/flink/commit/74ac3764e017be069dd2eae07e893a0c8cad40e4", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-08T02:04:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcyMjAwMA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r484722000", "bodyText": "1.HBaseTestBase will pull up a HBase cluster which is a heavy action.\nwe can move this test to HBaseConnectorITCase avoid pulling up the cluster twice.", "author": "leonardBang", "createdAt": "2020-09-08T07:54:07Z", "path": "flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.connector.hbase;\n+\n+import org.apache.flink.connector.hbase.source.HBaseRowInputFormat;\n+import org.apache.flink.connector.hbase.source.TableInputSplit;\n+import org.apache.flink.connector.hbase.util.HBaseTableSchema;\n+import org.apache.flink.connector.hbase.util.HBaseTestBase;\n+import org.apache.flink.connector.hbase.util.PlannerType;\n+\n+import org.apache.hadoop.hbase.TableName;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * Test case for {@link HBaseRowInputFormat} table input format.\n+ */\n+public class HBaseTableInputFormatTest extends HBaseTestBase {", "originalCommit": "74ac3764e017be069dd2eae07e893a0c8cad40e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27d9c90c0393f1febaec84f28e850867eed6222d", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java b/flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java\ndeleted file mode 100644\nindex 283afde1d8..0000000000\n--- a/flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.connector.hbase;\n-\n-import org.apache.flink.connector.hbase.source.HBaseRowInputFormat;\n-import org.apache.flink.connector.hbase.source.TableInputSplit;\n-import org.apache.flink.connector.hbase.util.HBaseTableSchema;\n-import org.apache.flink.connector.hbase.util.HBaseTestBase;\n-import org.apache.flink.connector.hbase.util.PlannerType;\n-\n-import org.apache.hadoop.hbase.TableName;\n-import org.junit.Test;\n-\n-import java.io.IOException;\n-\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-/**\n- * Test case for {@link HBaseRowInputFormat} table input format.\n- */\n-public class HBaseTableInputFormatTest extends HBaseTestBase {\n-\n-\tprotected PlannerType planner() {\n-\t\treturn PlannerType.BLINK_PLANNER;\n-\t}\n-\n-\t@Test\n-\tpublic void testOpenClose() throws IOException {\n-\t\tHBaseTableSchema tableSchema = new HBaseTableSchema();\n-\t\ttableSchema.addColumn(FAMILY1, F1COL1, byte[].class);\n-\t\tHBaseRowInputFormat inputFormat = new HBaseRowInputFormat(getConf(), TEST_TABLE_1, tableSchema);\n-\t\tTableInputSplit[] tableInputSplits = inputFormat.createInputSplits(1);\n-\n-\t\tinputFormat.open(tableInputSplits[0]);\n-\t\tassertNotNull(inputFormat.getConnection());\n-\t\tassertNotNull(inputFormat.getConnection().getTable(TableName.valueOf(TEST_TABLE_1)));\n-\n-\t\tinputFormat.close();\n-\t\tassertNull(inputFormat.getConnection());\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcyMjUwNA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r484722504", "bodyText": "2.HBaseRowInputFormat is used by legacy connector, HBaseRowDataInputFormat is used by new connector,\nwe can cover them in HBaseConnectorITCase via parameterized parameter 'isLegacyConnector' easily", "author": "leonardBang", "createdAt": "2020-09-08T07:54:58Z", "path": "flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.connector.hbase;\n+\n+import org.apache.flink.connector.hbase.source.HBaseRowInputFormat;\n+import org.apache.flink.connector.hbase.source.TableInputSplit;\n+import org.apache.flink.connector.hbase.util.HBaseTableSchema;\n+import org.apache.flink.connector.hbase.util.HBaseTestBase;\n+import org.apache.flink.connector.hbase.util.PlannerType;\n+\n+import org.apache.hadoop.hbase.TableName;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * Test case for {@link HBaseRowInputFormat} table input format.\n+ */\n+public class HBaseTableInputFormatTest extends HBaseTestBase {\n+\n+\tprotected PlannerType planner() {\n+\t\treturn PlannerType.BLINK_PLANNER;\n+\t}\n+\n+\t@Test\n+\tpublic void testOpenClose() throws IOException {\n+\t\tHBaseTableSchema tableSchema = new HBaseTableSchema();\n+\t\ttableSchema.addColumn(FAMILY1, F1COL1, byte[].class);\n+\t\tHBaseRowInputFormat inputFormat = new HBaseRowInputFormat(getConf(), TEST_TABLE_1, tableSchema);", "originalCommit": "74ac3764e017be069dd2eae07e893a0c8cad40e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27d9c90c0393f1febaec84f28e850867eed6222d", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java b/flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java\ndeleted file mode 100644\nindex 283afde1d8..0000000000\n--- a/flink-connectors/flink-connector-hbase/src/test/java/org/apache/flink/connector/hbase/HBaseTableInputFormatTest.java\n+++ /dev/null\n\n@@ -1,58 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.connector.hbase;\n-\n-import org.apache.flink.connector.hbase.source.HBaseRowInputFormat;\n-import org.apache.flink.connector.hbase.source.TableInputSplit;\n-import org.apache.flink.connector.hbase.util.HBaseTableSchema;\n-import org.apache.flink.connector.hbase.util.HBaseTestBase;\n-import org.apache.flink.connector.hbase.util.PlannerType;\n-\n-import org.apache.hadoop.hbase.TableName;\n-import org.junit.Test;\n-\n-import java.io.IOException;\n-\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-\n-/**\n- * Test case for {@link HBaseRowInputFormat} table input format.\n- */\n-public class HBaseTableInputFormatTest extends HBaseTestBase {\n-\n-\tprotected PlannerType planner() {\n-\t\treturn PlannerType.BLINK_PLANNER;\n-\t}\n-\n-\t@Test\n-\tpublic void testOpenClose() throws IOException {\n-\t\tHBaseTableSchema tableSchema = new HBaseTableSchema();\n-\t\ttableSchema.addColumn(FAMILY1, F1COL1, byte[].class);\n-\t\tHBaseRowInputFormat inputFormat = new HBaseRowInputFormat(getConf(), TEST_TABLE_1, tableSchema);\n-\t\tTableInputSplit[] tableInputSplits = inputFormat.createInputSplits(1);\n-\n-\t\tinputFormat.open(tableInputSplits[0]);\n-\t\tassertNotNull(inputFormat.getConnection());\n-\t\tassertNotNull(inputFormat.getConnection().getTable(TableName.valueOf(TEST_TABLE_1)));\n-\n-\t\tinputFormat.close();\n-\t\tassertNull(inputFormat.getConnection());\n-\t}\n-}\n"}}, {"oid": "27d9c90c0393f1febaec84f28e850867eed6222d", "url": "https://github.com/apache/flink/commit/27d9c90c0393f1febaec84f28e850867eed6222d", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-09T01:12:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMTM2NQ==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485331365", "bodyText": "We don't need to declare it public.", "author": "wuchong", "createdAt": "2020-09-09T04:33:05Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/TableInputSplit.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * references to row below refer to the key of the row.\n  */\n @Internal\n-class TableInputSplit extends LocatableInputSplit {\n+public class TableInputSplit extends LocatableInputSplit {", "originalCommit": "27d9c90c0393f1febaec84f28e850867eed6222d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3MTg4Mg==", "url": "https://github.com/apache/flink/pull/13275#discussion_r490071882", "bodyText": "@wuchong I have already removed this declaration.", "author": "SteNicholas", "createdAt": "2020-09-17T08:39:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMTM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/TableInputSplit.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/TableInputSplit.java\nindex e3a91bb85f..2790d48d64 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/TableInputSplit.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/TableInputSplit.java\n\n@@ -26,7 +26,7 @@ import org.apache.flink.core.io.LocatableInputSplit;\n  * references to row below refer to the key of the row.\n  */\n @Internal\n-public class TableInputSplit extends LocatableInputSplit {\n+class TableInputSplit extends LocatableInputSplit {\n \n \tprivate static final long serialVersionUID = 1L;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMjE3MQ==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485332171", "bodyText": "This is never closed ?", "author": "wuchong", "createdAt": "2020-09-09T04:36:16Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -186,24 +193,22 @@ public void close() throws IOException {\n \t\t\tif (resultScanner != null) {\n \t\t\t\tresultScanner.close();\n \t\t\t}\n-\t\t} finally {\n-\t\t\tresultScanner = null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void closeInputFormat() throws IOException {\n-\t\ttry {\n \t\t\tif (table != null) {\n \t\t\t\ttable.close();\n \t\t\t}\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n \t\t} finally {\n+\t\t\tresultScanner = null;\n \t\t\ttable = null;\n+\t\t\tconnection = null;\n \t\t}\n \t}\n \n \t@Override\n \tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n+\t\tinitTable();", "originalCommit": "27d9c90c0393f1febaec84f28e850867eed6222d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzNzY4NA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485337684", "bodyText": "This is never closed ?\n\n@wuchong This is closed when calling close method. I thought that in the lifecycle, createInputSplits would be called before close. Therefore, I didn't close the connection and table.", "author": "SteNicholas", "createdAt": "2020-09-09T04:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMjE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1MDIxNw==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485350217", "bodyText": "I think it is called on the JobMaster, so we should use a local connection and close the connection in the method.", "author": "wuchong", "createdAt": "2020-09-09T05:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMjE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2OTUwNQ==", "url": "https://github.com/apache/flink/pull/13275#discussion_r490069505", "bodyText": "@wuchong I thought that table isn't close in this method, therefore the connection should not be closed in this method.", "author": "SteNicholas", "createdAt": "2020-09-17T08:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMjE3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 33dbb5974d..338c9d0631 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -199,6 +194,11 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \t\t\tif (connection != null) {\n \t\t\t\tconnection.close();\n \t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n+\t\t\tthrow e;\n \t\t} finally {\n \t\t\tresultScanner = null;\n \t\t\ttable = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MjYwOQ==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485362609", "bodyText": "I believe this (and below) exception messages are not correct anymore.", "author": "rmetzger", "createdAt": "2020-09-09T06:16:21Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -94,25 +102,24 @@ public AbstractTableInputFormat(org.apache.hadoop.conf.Configuration hConf) {\n \t */\n \tprotected abstract T mapResultToOutType(Result r);\n \n-\t/**\n-\t * Creates a {@link Scan} object and opens the {@link HTable} connection.\n-\t *\n-\t * <p>These are opened here because they are needed in the createInputSplits\n-\t * which is called before the openInputFormat method.\n-\t *\n-\t * <p>The connection is opened in this method and closed in {@link #closeInputFormat()}.\n-\t *\n-\t * @param parameters The configuration that is to be used\n-\t * @see Configuration\n-\t */\n-\tpublic abstract void configure(Configuration parameters);\n+\t@Override\n+\tpublic void configure(Configuration parameters) {\n+\t}\n \n \tprotected org.apache.hadoop.conf.Configuration getHadoopConfiguration() {\n \t\treturn HBaseConfigurationUtil.deserializeConfiguration(serializedConfig, HBaseConfigurationUtil.getHBaseConfiguration());\n \t}\n \n+\t/**\n+\t * Creates a {@link Scan} object and opens the {@link HTable} connection.\n+\t * The connection is opened in this method and closed in {@link #close()}.\n+\t *\n+\t * @param split The split to be opened.\n+\t * @throws IOException Thrown, if the spit could not be opened due to an I/O problem.\n+\t */\n \t@Override\n \tpublic void open(TableInputSplit split) throws IOException {\n+\t\tinitTable();\n \t\tif (table == null) {\n \t\t\tthrow new IOException(\"The HBase table has not been opened! \" +\n \t\t\t\t\"This needs to be done in configure().\");", "originalCommit": "27d9c90c0393f1febaec84f28e850867eed6222d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 33dbb5974d..338c9d0631 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -120,14 +122,7 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \t@Override\n \tpublic void open(TableInputSplit split) throws IOException {\n \t\tinitTable();\n-\t\tif (table == null) {\n-\t\t\tthrow new IOException(\"The HBase table has not been opened! \" +\n-\t\t\t\t\"This needs to be done in configure().\");\n-\t\t}\n-\t\tif (scan == null) {\n-\t\t\tthrow new IOException(\"Scan has not been initialized! \" +\n-\t\t\t\t\"This needs to be done in configure().\");\n-\t\t}\n+\n \t\tif (split == null) {\n \t\t\tthrow new IOException(\"Input split is null!\");\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2MzI0NA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485363244", "bodyText": "Revisit exception message.", "author": "rmetzger", "createdAt": "2020-09-09T06:18:08Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -186,24 +193,22 @@ public void close() throws IOException {\n \t\t\tif (resultScanner != null) {\n \t\t\t\tresultScanner.close();\n \t\t\t}\n-\t\t} finally {\n-\t\t\tresultScanner = null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void closeInputFormat() throws IOException {\n-\t\ttry {\n \t\t\tif (table != null) {\n \t\t\t\ttable.close();\n \t\t\t}\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n \t\t} finally {\n+\t\t\tresultScanner = null;\n \t\t\ttable = null;\n+\t\t\tconnection = null;\n \t\t}\n \t}\n \n \t@Override\n \tpublic TableInputSplit[] createInputSplits(final int minNumSplits) throws IOException {\n+\t\tinitTable();\n \t\tif (table == null) {\n \t\t\tthrow new IOException(\"The HBase table has not been opened! \" +\n \t\t\t\t\"This needs to be done in configure().\");", "originalCommit": "27d9c90c0393f1febaec84f28e850867eed6222d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 33dbb5974d..338c9d0631 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -199,6 +194,11 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \t\t\tif (connection != null) {\n \t\t\t\tconnection.close();\n \t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n+\t\t\tthrow e;\n \t\t} finally {\n \t\t\tresultScanner = null;\n \t\t\ttable = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NjUxOQ==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485366519", "bodyText": "We will leak the connection if table.close() or resultScanner.close() fails with an exception.\nI believe the proper way would be to wrap each close in a separate try block, and catch and log the error.", "author": "rmetzger", "createdAt": "2020-09-09T06:25:53Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -186,24 +193,22 @@ public void close() throws IOException {\n \t\t\tif (resultScanner != null) {\n \t\t\t\tresultScanner.close();\n \t\t\t}\n-\t\t} finally {\n-\t\t\tresultScanner = null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void closeInputFormat() throws IOException {\n-\t\ttry {\n \t\t\tif (table != null) {\n \t\t\t\ttable.close();\n \t\t\t}\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}", "originalCommit": "27d9c90c0393f1febaec84f28e850867eed6222d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3Mzg0NA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r490073844", "bodyText": "@rmetzger You are right, but resultScanner.close() doesn't throw exception. Therefore, I just add the close of the connection into catch block.", "author": "SteNicholas", "createdAt": "2020-09-17T08:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2NjUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 33dbb5974d..338c9d0631 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -199,6 +194,11 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \t\t\tif (connection != null) {\n \t\t\t\tconnection.close();\n \t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n+\t\t\tthrow e;\n \t\t} finally {\n \t\t\tresultScanner = null;\n \t\t\ttable = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2Nzk3Mw==", "url": "https://github.com/apache/flink/pull/13275#discussion_r485367973", "bodyText": "If you make this method throws IOException, you don't need to wrap the IOExceptions in HBaseRowDataInputFormat.connectToTable() into RuntimeExceptions.\nThrowing an IOException is not a problem, because initTable is called in open(); which throws an IOException as well.", "author": "rmetzger", "createdAt": "2020-09-09T06:29:27Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -68,6 +71,11 @@ public AbstractTableInputFormat(org.apache.hadoop.conf.Configuration hConf) {\n \t\tserializedConfig = HBaseConfigurationUtil.serializeConfiguration(hConf);\n \t}\n \n+\t/**\n+\t * Creates a {@link Scan} object and opens the {@link HTable} connection to initialize the HBase table.\n+\t */\n+\tprotected abstract void initTable();", "originalCommit": "27d9c90c0393f1febaec84f28e850867eed6222d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3MjY2NQ==", "url": "https://github.com/apache/flink/pull/13275#discussion_r490072665", "bodyText": "@rmetzger Good idea. I have followed up with your point to throws IOException for initTable().", "author": "SteNicholas", "createdAt": "2020-09-17T08:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM2Nzk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 33dbb5974d..338c9d0631 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -73,8 +73,10 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \n \t/**\n \t * Creates a {@link Scan} object and opens the {@link HTable} connection to initialize the HBase table.\n+\t *\n+\t * @throws IOException Thrown, if the connection could not be opened due to an I/O problem.\n \t */\n-\tprotected abstract void initTable();\n+\tprotected abstract void initTable() throws IOException;\n \n \t/**\n \t * Returns an instance of Scan that retrieves the required subset of records from the HBase table.\n"}}, {"oid": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "url": "https://github.com/apache/flink/commit/de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-17T08:37:27Z", "type": "commit"}, {"oid": "de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "url": "https://github.com/apache/flink/commit/de2e4b8c2d1c6e7701c34b47169247da3d89efb5", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-17T08:37:27Z", "type": "forcePushed"}, {"oid": "eed5b15d8d10f1c1228e39650bb844385d7a2283", "url": "https://github.com/apache/flink/commit/eed5b15d8d10f1c1228e39650bb844385d7a2283", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-17T11:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNzA4NA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r490817084", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t}  finally {\n          \n          \n            \n            \t\t} finally {", "author": "wuchong", "createdAt": "2020-09-18T09:21:36Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -186,73 +188,79 @@ public void close() throws IOException {\n \t\t\tif (resultScanner != null) {\n \t\t\t\tresultScanner.close();\n \t\t\t}\n-\t\t} finally {\n+\t\t\tcloseTable();\n+\t\t}  finally {", "originalCommit": "eed5b15d8d10f1c1228e39650bb844385d7a2283", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a1bd39b87efb3680010a3ba9a9fce8485411546", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 91991afccb..6cd7a4d05d 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -189,26 +189,26 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \t\t\t\tresultScanner.close();\n \t\t\t}\n \t\t\tcloseTable();\n-\t\t}  finally {\n+\t\t} finally {\n \t\t\tresultScanner = null;\n \t\t}\n \t}\n \n-\tpublic void closeTable() throws IOException {\n-\t\ttry {\n-\t\t\tif (table != null) {\n+\tpublic void closeTable() {\n+\t\tif (table != null) {\n+\t\t\ttry {\n \t\t\t\ttable.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.warn(\"Exception occurs while closing HBase Table.\", e);\n \t\t\t}\n-\t\t\tif (connection != null) {\n-\t\t\t\tconnection.close();\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tif (connection != null) {\n+\t\t\ttable = null;\n+\t\t}\n+\t\tif (connection != null) {\n+\t\t\ttry {\n \t\t\t\tconnection.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.warn(\"Exception occurs while closing HBase Connection.\", e);\n \t\t\t}\n-\t\t\tthrow e;\n-\t\t} finally {\n-\t\t\ttable = null;\n \t\t\tconnection = null;\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMTIwMA==", "url": "https://github.com/apache/flink/pull/13275#discussion_r490821200", "bodyText": "The duplicate close looks strange to me. I think @rmetzger gave a nice idea above. You can just catch and log the error and move each close in a separate try block. You can take org.apache.flink.connector.hbase.sink.HBaseSinkFunction#close as an example. That will be much clean.", "author": "wuchong", "createdAt": "2020-09-18T09:29:05Z", "path": "flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java", "diffHunk": "@@ -186,73 +188,79 @@ public void close() throws IOException {\n \t\t\tif (resultScanner != null) {\n \t\t\t\tresultScanner.close();\n \t\t\t}\n-\t\t} finally {\n+\t\t\tcloseTable();\n+\t\t}  finally {\n \t\t\tresultScanner = null;\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic void closeInputFormat() throws IOException {\n+\tpublic void closeTable() throws IOException {\n \t\ttry {\n \t\t\tif (table != null) {\n \t\t\t\ttable.close();\n \t\t\t}\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tif (connection != null) {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n+\t\t\tthrow e;", "originalCommit": "eed5b15d8d10f1c1228e39650bb844385d7a2283", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a1bd39b87efb3680010a3ba9a9fce8485411546", "chunk": "diff --git a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\nindex 91991afccb..6cd7a4d05d 100644\n--- a/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n+++ b/flink-connectors/flink-connector-hbase/src/main/java/org/apache/flink/connector/hbase/source/AbstractTableInputFormat.java\n\n@@ -189,26 +189,26 @@ public abstract class AbstractTableInputFormat<T> extends RichInputFormat<T, Tab\n \t\t\t\tresultScanner.close();\n \t\t\t}\n \t\t\tcloseTable();\n-\t\t}  finally {\n+\t\t} finally {\n \t\t\tresultScanner = null;\n \t\t}\n \t}\n \n-\tpublic void closeTable() throws IOException {\n-\t\ttry {\n-\t\t\tif (table != null) {\n+\tpublic void closeTable() {\n+\t\tif (table != null) {\n+\t\t\ttry {\n \t\t\t\ttable.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.warn(\"Exception occurs while closing HBase Table.\", e);\n \t\t\t}\n-\t\t\tif (connection != null) {\n-\t\t\t\tconnection.close();\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tif (connection != null) {\n+\t\t\ttable = null;\n+\t\t}\n+\t\tif (connection != null) {\n+\t\t\ttry {\n \t\t\t\tconnection.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tLOG.warn(\"Exception occurs while closing HBase Connection.\", e);\n \t\t\t}\n-\t\t\tthrow e;\n-\t\t} finally {\n-\t\t\ttable = null;\n \t\t\tconnection = null;\n \t\t}\n \t}\n"}}, {"oid": "4a1bd39b87efb3680010a3ba9a9fce8485411546", "url": "https://github.com/apache/flink/commit/4a1bd39b87efb3680010a3ba9a9fce8485411546", "message": "[FLINK-19064][hbase] HBaseRowDataInputFormat is leaking resources", "committedDate": "2020-09-18T10:00:44Z", "type": "commit"}]}