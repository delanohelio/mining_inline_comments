{"pr_number": 11598, "pr_title": "[FLINK-16914][python] Support ArrayType in vectorized Python UDF", "pr_createdAt": "2020-04-01T09:59:46Z", "pr_url": "https://github.com/apache/flink/pull/11598", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0NDQ4OA==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402044488", "bodyText": "If we going to support generic type that extends TypeGetterSetters, the class name BaseRowIntWriter may not be appropriate now. It may not be a BaseRow but can also be a BaseArray.\nSame for other BaseRowXXXWriter classes.", "author": "hequn8128", "createdAt": "2020-04-02T04:26:20Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/BaseRowIntWriter.java", "diffHunk": "@@ -19,22 +19,22 @@\n package org.apache.flink.table.runtime.arrow.writers;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.dataformat.TypeGetterSetters;\n \n import org.apache.arrow.vector.IntVector;\n \n /**\n  * {@link ArrowFieldWriter} for Int.\n  */\n @Internal\n-public final class BaseRowIntWriter extends ArrowFieldWriter<BaseRow> {\n+public final class BaseRowIntWriter<T extends TypeGetterSetters> extends ArrowFieldWriter<T> {", "originalCommit": "d81b0e98dc23cf9370cdfdd20b39dd8cfdab3f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2OTg3Nw==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402069877", "bodyText": "Make sense to me. Have renamed the original IntWriter to RowIntWriter and BaseRowIntWriter to IntWriter. Also updated the other classes.", "author": "dianfu", "createdAt": "2020-04-02T06:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0NDQ4OA=="}], "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/BaseRowIntWriter.java b/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/RowIntWriter.java\nsimilarity index 75%\nrename from flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/BaseRowIntWriter.java\nrename to flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/RowIntWriter.java\nindex 6fbcd03458..0fe6fcc342 100644\n--- a/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/BaseRowIntWriter.java\n+++ b/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/writers/RowIntWriter.java\n\n@@ -19,7 +19,7 @@\n package org.apache.flink.table.runtime.arrow.writers;\n \n import org.apache.flink.annotation.Internal;\n-import org.apache.flink.table.dataformat.TypeGetterSetters;\n+import org.apache.flink.types.Row;\n \n import org.apache.arrow.vector.IntVector;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5NTQxNQ==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402095415", "bodyText": "The return type now may not be a BaseRow. Maybe also add a test in BaseRowArrowReaderWriterTest to cover this case\uff1f", "author": "hequn8128", "createdAt": "2020-04-02T07:08:12Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java", "diffHunk": "@@ -223,39 +239,43 @@ private static Field toArrowField(RowType.RowField rowField) {\n \n \tprivate static ArrowFieldWriter<BaseRow> createBaseRowArrowFieldWriter(FieldVector vector, LogicalType fieldType) {", "originalCommit": "18822435d028d86859d2b2becbb4e63ae2843f1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0ODI3Mw==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402148273", "bodyText": "Good catch! Updated the result type. However, have not added a new test as this is already covered in the BaseRowArrowReaderWriterTest.", "author": "dianfu", "createdAt": "2020-04-02T08:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA5NTQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java b/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java\nindex d76acfbe29..364c079236 100644\n--- a/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java\n+++ b/flink-python/src/main/java/org/apache/flink/table/runtime/arrow/ArrowUtils.java\n\n@@ -231,13 +232,13 @@ public final class ArrowUtils {\n \t\tfor (int i = 0; i < vectors.size(); i++) {\n \t\t\tFieldVector vector = vectors.get(i);\n \t\t\tvector.allocateNew();\n-\t\t\tfieldWriters[i] = createBaseRowArrowFieldWriter(vector, rowType.getTypeAt(i));\n+\t\t\tfieldWriters[i] = createArrowFieldWriter(vector, rowType.getTypeAt(i));\n \t\t}\n \n \t\treturn new ArrowWriter<>(root, fieldWriters);\n \t}\n \n-\tprivate static ArrowFieldWriter<BaseRow> createBaseRowArrowFieldWriter(FieldVector vector, LogicalType fieldType) {\n+\tprivate static <T extends TypeGetterSetters> ArrowFieldWriter<T> createArrowFieldWriter(FieldVector vector, LogicalType fieldType) {\n \t\tif (vector instanceof TinyIntVector) {\n \t\t\treturn new TinyIntWriter<>((TinyIntVector) vector);\n \t\t} else if (vector instanceof SmallIntVector) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjAyMg==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402746022", "bodyText": "Can we move this method to serializer or somewhere?\nSo we don't need this elementType field.", "author": "JingsongLi", "createdAt": "2020-04-03T05:35:36Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat;\n+\n+import org.apache.flink.table.dataformat.vector.ArrayColumnVector;\n+import org.apache.flink.table.dataformat.vector.BooleanColumnVector;\n+import org.apache.flink.table.dataformat.vector.ByteColumnVector;\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+import org.apache.flink.table.dataformat.vector.ColumnVector;\n+import org.apache.flink.table.dataformat.vector.DecimalColumnVector;\n+import org.apache.flink.table.dataformat.vector.DoubleColumnVector;\n+import org.apache.flink.table.dataformat.vector.FloatColumnVector;\n+import org.apache.flink.table.dataformat.vector.IntColumnVector;\n+import org.apache.flink.table.dataformat.vector.LongColumnVector;\n+import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n+import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.BooleanType;\n+import org.apache.flink.table.types.logical.DateType;\n+import org.apache.flink.table.types.logical.DoubleType;\n+import org.apache.flink.table.types.logical.FloatType;\n+import org.apache.flink.table.types.logical.IntType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.SmallIntType;\n+import org.apache.flink.table.types.logical.TimeType;\n+import org.apache.flink.table.types.logical.TinyIntType;\n+\n+/**\n+ * Columnar array to support access to vector column data.\n+ */\n+public final class ColumnarArray implements BaseArray {\n+\n+\tprivate final DataType elementType;\n+\tprivate final ColumnVector data;\n+\tprivate final int offset;\n+\tprivate final int length;\n+\n+\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n+\t\tthis.elementType = elementType;\n+\t\tthis.data = data;\n+\t\tthis.offset = offset;\n+\t\tthis.length = length;\n+\t}\n+\n+\t@Override\n+\tpublic int numElements() {\n+\t\treturn length;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isNullAt(int pos) {\n+\t\treturn data.isNullAt(offset + pos);\n+\t}\n+\n+\t@Override\n+\tpublic void setNullAt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean getBoolean(int ordinal) {\n+\t\treturn ((BooleanColumnVector) data).getBoolean(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic byte getByte(int ordinal) {\n+\t\treturn ((ByteColumnVector) data).getByte(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic short getShort(int ordinal) {\n+\t\treturn ((ShortColumnVector) data).getShort(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic int getInt(int ordinal) {\n+\t\treturn ((IntColumnVector) data).getInt(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic long getLong(int ordinal) {\n+\t\treturn ((LongColumnVector) data).getLong(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic float getFloat(int ordinal) {\n+\t\treturn ((FloatColumnVector) data).getFloat(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic double getDouble(int ordinal) {\n+\t\treturn ((DoubleColumnVector) data).getDouble(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BinaryString getString(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\treturn BinaryString.fromBytes(byteArray.data, byteArray.offset, byteArray.len);\n+\t}\n+\n+\t@Override\n+\tpublic Decimal getDecimal(int ordinal, int precision, int scale) {\n+\t\treturn ((DecimalColumnVector) data).getDecimal(offset + ordinal, precision, scale);\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int ordinal, int precision) {\n+\t\treturn ((TimestampColumnVector) data).getTimestamp(offset + ordinal, precision);\n+\t}\n+\n+\t@Override\n+\tpublic <T> BinaryGeneric<T> getGeneric(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"GenericType is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getBinary(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\tif (byteArray.len == byteArray.data.length) {\n+\t\t\treturn byteArray.data;\n+\t\t} else {\n+\t\t\tbyte[] ret = new byte[byteArray.len];\n+\t\t\tSystem.arraycopy(byteArray.data, byteArray.offset, ret, 0, byteArray.len);\n+\t\t\treturn ret;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic BaseArray getArray(int ordinal) {\n+\t\treturn ((ArrayColumnVector) data).getArray(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BaseMap getMap(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"Map is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic BaseRow getRow(int ordinal, int numFields) {\n+\t\tthrow new UnsupportedOperationException(\"Row is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic void setBoolean(int ordinal, boolean value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setByte(int ordinal, byte value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setShort(int ordinal, short value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setInt(int ordinal, int value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setLong(int ordinal, long value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setFloat(int ordinal, float value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setDouble(int ordinal, double value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setDecimal(int i, Decimal value, int precision) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setTimestamp(int ordinal, SqlTimestamp value, int precision) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNotNullAt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullLong(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullInt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullBoolean(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullByte(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullShort(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullFloat(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullDouble(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean[] toBooleanArray() {\n+\t\tboolean[] res = new boolean[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getBoolean(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic byte[] toByteArray() {\n+\t\tbyte[] res = new byte[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getByte(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic short[] toShortArray() {\n+\t\tshort[] res = new short[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getShort(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic int[] toIntArray() {\n+\t\tint[] res = new int[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getInt(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic long[] toLongArray() {\n+\t\tlong[] res = new long[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getLong(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic float[] toFloatArray() {\n+\t\tfloat[] res = new float[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getFloat(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic double[] toDoubleArray() {\n+\t\tdouble[] res = new double[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getDouble(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\tpublic BaseArray copy() {", "originalCommit": "6849f6c616060c7ecb85f65a9a915b6b3182710d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\nindex 098ed954c2..9dbd5e6e3a 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n\n@@ -29,38 +29,27 @@ import org.apache.flink.table.dataformat.vector.IntColumnVector;\n import org.apache.flink.table.dataformat.vector.LongColumnVector;\n import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n-import org.apache.flink.table.types.DataType;\n-import org.apache.flink.table.types.logical.BigIntType;\n-import org.apache.flink.table.types.logical.BooleanType;\n-import org.apache.flink.table.types.logical.DateType;\n-import org.apache.flink.table.types.logical.DoubleType;\n-import org.apache.flink.table.types.logical.FloatType;\n-import org.apache.flink.table.types.logical.IntType;\n-import org.apache.flink.table.types.logical.LogicalType;\n-import org.apache.flink.table.types.logical.SmallIntType;\n-import org.apache.flink.table.types.logical.TimeType;\n-import org.apache.flink.table.types.logical.TinyIntType;\n+\n+import java.util.Arrays;\n \n /**\n  * Columnar array to support access to vector column data.\n  */\n public final class ColumnarArray implements BaseArray {\n \n-\tprivate final DataType elementType;\n \tprivate final ColumnVector data;\n \tprivate final int offset;\n-\tprivate final int length;\n+\tprivate final int numElements;\n \n-\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n-\t\tthis.elementType = elementType;\n+\tpublic ColumnarArray(ColumnVector data, int offset, int numElements) {\n \t\tthis.data = data;\n \t\tthis.offset = offset;\n-\t\tthis.length = length;\n+\t\tthis.numElements = numElements;\n \t}\n \n \t@Override\n \tpublic int numElements() {\n-\t\treturn length;\n+\t\treturn numElements;\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjE5OA==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402746198", "bodyText": "These annoyed \"set\" will be removed after FLIP-95.", "author": "JingsongLi", "createdAt": "2020-04-03T05:36:30Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat;\n+\n+import org.apache.flink.table.dataformat.vector.ArrayColumnVector;\n+import org.apache.flink.table.dataformat.vector.BooleanColumnVector;\n+import org.apache.flink.table.dataformat.vector.ByteColumnVector;\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+import org.apache.flink.table.dataformat.vector.ColumnVector;\n+import org.apache.flink.table.dataformat.vector.DecimalColumnVector;\n+import org.apache.flink.table.dataformat.vector.DoubleColumnVector;\n+import org.apache.flink.table.dataformat.vector.FloatColumnVector;\n+import org.apache.flink.table.dataformat.vector.IntColumnVector;\n+import org.apache.flink.table.dataformat.vector.LongColumnVector;\n+import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n+import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.BooleanType;\n+import org.apache.flink.table.types.logical.DateType;\n+import org.apache.flink.table.types.logical.DoubleType;\n+import org.apache.flink.table.types.logical.FloatType;\n+import org.apache.flink.table.types.logical.IntType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.SmallIntType;\n+import org.apache.flink.table.types.logical.TimeType;\n+import org.apache.flink.table.types.logical.TinyIntType;\n+\n+/**\n+ * Columnar array to support access to vector column data.\n+ */\n+public final class ColumnarArray implements BaseArray {\n+\n+\tprivate final DataType elementType;\n+\tprivate final ColumnVector data;\n+\tprivate final int offset;\n+\tprivate final int length;\n+\n+\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n+\t\tthis.elementType = elementType;\n+\t\tthis.data = data;\n+\t\tthis.offset = offset;\n+\t\tthis.length = length;\n+\t}\n+\n+\t@Override\n+\tpublic int numElements() {\n+\t\treturn length;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isNullAt(int pos) {\n+\t\treturn data.isNullAt(offset + pos);\n+\t}\n+\n+\t@Override\n+\tpublic void setNullAt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean getBoolean(int ordinal) {\n+\t\treturn ((BooleanColumnVector) data).getBoolean(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic byte getByte(int ordinal) {\n+\t\treturn ((ByteColumnVector) data).getByte(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic short getShort(int ordinal) {\n+\t\treturn ((ShortColumnVector) data).getShort(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic int getInt(int ordinal) {\n+\t\treturn ((IntColumnVector) data).getInt(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic long getLong(int ordinal) {\n+\t\treturn ((LongColumnVector) data).getLong(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic float getFloat(int ordinal) {\n+\t\treturn ((FloatColumnVector) data).getFloat(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic double getDouble(int ordinal) {\n+\t\treturn ((DoubleColumnVector) data).getDouble(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BinaryString getString(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\treturn BinaryString.fromBytes(byteArray.data, byteArray.offset, byteArray.len);\n+\t}\n+\n+\t@Override\n+\tpublic Decimal getDecimal(int ordinal, int precision, int scale) {\n+\t\treturn ((DecimalColumnVector) data).getDecimal(offset + ordinal, precision, scale);\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int ordinal, int precision) {\n+\t\treturn ((TimestampColumnVector) data).getTimestamp(offset + ordinal, precision);\n+\t}\n+\n+\t@Override\n+\tpublic <T> BinaryGeneric<T> getGeneric(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"GenericType is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getBinary(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\tif (byteArray.len == byteArray.data.length) {\n+\t\t\treturn byteArray.data;\n+\t\t} else {\n+\t\t\tbyte[] ret = new byte[byteArray.len];\n+\t\t\tSystem.arraycopy(byteArray.data, byteArray.offset, ret, 0, byteArray.len);\n+\t\t\treturn ret;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic BaseArray getArray(int ordinal) {\n+\t\treturn ((ArrayColumnVector) data).getArray(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BaseMap getMap(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"Map is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic BaseRow getRow(int ordinal, int numFields) {\n+\t\tthrow new UnsupportedOperationException(\"Row is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic void setBoolean(int ordinal, boolean value) {", "originalCommit": "6849f6c616060c7ecb85f65a9a915b6b3182710d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTE2Nw==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402765167", "bodyText": "Thanks for letting me know. As this is still needed for now and so just keep it in this PR and we can remove it during FLIP-95.", "author": "dianfu", "createdAt": "2020-04-03T06:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\nindex 098ed954c2..9dbd5e6e3a 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n\n@@ -29,38 +29,27 @@ import org.apache.flink.table.dataformat.vector.IntColumnVector;\n import org.apache.flink.table.dataformat.vector.LongColumnVector;\n import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n-import org.apache.flink.table.types.DataType;\n-import org.apache.flink.table.types.logical.BigIntType;\n-import org.apache.flink.table.types.logical.BooleanType;\n-import org.apache.flink.table.types.logical.DateType;\n-import org.apache.flink.table.types.logical.DoubleType;\n-import org.apache.flink.table.types.logical.FloatType;\n-import org.apache.flink.table.types.logical.IntType;\n-import org.apache.flink.table.types.logical.LogicalType;\n-import org.apache.flink.table.types.logical.SmallIntType;\n-import org.apache.flink.table.types.logical.TimeType;\n-import org.apache.flink.table.types.logical.TinyIntType;\n+\n+import java.util.Arrays;\n \n /**\n  * Columnar array to support access to vector column data.\n  */\n public final class ColumnarArray implements BaseArray {\n \n-\tprivate final DataType elementType;\n \tprivate final ColumnVector data;\n \tprivate final int offset;\n-\tprivate final int length;\n+\tprivate final int numElements;\n \n-\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n-\t\tthis.elementType = elementType;\n+\tpublic ColumnarArray(ColumnVector data, int offset, int numElements) {\n \t\tthis.data = data;\n \t\tthis.offset = offset;\n-\t\tthis.length = length;\n+\t\tthis.numElements = numElements;\n \t}\n \n \t@Override\n \tpublic int numElements() {\n-\t\treturn length;\n+\t\treturn numElements;\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0Njg1Ng==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402746856", "bodyText": "Can we use Arrays.copyOfRange?", "author": "JingsongLi", "createdAt": "2020-04-03T05:38:53Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat;\n+\n+import org.apache.flink.table.dataformat.vector.ArrayColumnVector;\n+import org.apache.flink.table.dataformat.vector.BooleanColumnVector;\n+import org.apache.flink.table.dataformat.vector.ByteColumnVector;\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+import org.apache.flink.table.dataformat.vector.ColumnVector;\n+import org.apache.flink.table.dataformat.vector.DecimalColumnVector;\n+import org.apache.flink.table.dataformat.vector.DoubleColumnVector;\n+import org.apache.flink.table.dataformat.vector.FloatColumnVector;\n+import org.apache.flink.table.dataformat.vector.IntColumnVector;\n+import org.apache.flink.table.dataformat.vector.LongColumnVector;\n+import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n+import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.BooleanType;\n+import org.apache.flink.table.types.logical.DateType;\n+import org.apache.flink.table.types.logical.DoubleType;\n+import org.apache.flink.table.types.logical.FloatType;\n+import org.apache.flink.table.types.logical.IntType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.SmallIntType;\n+import org.apache.flink.table.types.logical.TimeType;\n+import org.apache.flink.table.types.logical.TinyIntType;\n+\n+/**\n+ * Columnar array to support access to vector column data.\n+ */\n+public final class ColumnarArray implements BaseArray {\n+\n+\tprivate final DataType elementType;\n+\tprivate final ColumnVector data;\n+\tprivate final int offset;\n+\tprivate final int length;\n+\n+\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n+\t\tthis.elementType = elementType;\n+\t\tthis.data = data;\n+\t\tthis.offset = offset;\n+\t\tthis.length = length;\n+\t}\n+\n+\t@Override\n+\tpublic int numElements() {\n+\t\treturn length;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isNullAt(int pos) {\n+\t\treturn data.isNullAt(offset + pos);\n+\t}\n+\n+\t@Override\n+\tpublic void setNullAt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean getBoolean(int ordinal) {\n+\t\treturn ((BooleanColumnVector) data).getBoolean(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic byte getByte(int ordinal) {\n+\t\treturn ((ByteColumnVector) data).getByte(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic short getShort(int ordinal) {\n+\t\treturn ((ShortColumnVector) data).getShort(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic int getInt(int ordinal) {\n+\t\treturn ((IntColumnVector) data).getInt(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic long getLong(int ordinal) {\n+\t\treturn ((LongColumnVector) data).getLong(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic float getFloat(int ordinal) {\n+\t\treturn ((FloatColumnVector) data).getFloat(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic double getDouble(int ordinal) {\n+\t\treturn ((DoubleColumnVector) data).getDouble(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BinaryString getString(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\treturn BinaryString.fromBytes(byteArray.data, byteArray.offset, byteArray.len);\n+\t}\n+\n+\t@Override\n+\tpublic Decimal getDecimal(int ordinal, int precision, int scale) {\n+\t\treturn ((DecimalColumnVector) data).getDecimal(offset + ordinal, precision, scale);\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int ordinal, int precision) {\n+\t\treturn ((TimestampColumnVector) data).getTimestamp(offset + ordinal, precision);\n+\t}\n+\n+\t@Override\n+\tpublic <T> BinaryGeneric<T> getGeneric(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"GenericType is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getBinary(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\tif (byteArray.len == byteArray.data.length) {\n+\t\t\treturn byteArray.data;\n+\t\t} else {\n+\t\t\tbyte[] ret = new byte[byteArray.len];\n+\t\t\tSystem.arraycopy(byteArray.data, byteArray.offset, ret, 0, byteArray.len);", "originalCommit": "6849f6c616060c7ecb85f65a9a915b6b3182710d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\nindex 098ed954c2..9dbd5e6e3a 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n\n@@ -29,38 +29,27 @@ import org.apache.flink.table.dataformat.vector.IntColumnVector;\n import org.apache.flink.table.dataformat.vector.LongColumnVector;\n import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n-import org.apache.flink.table.types.DataType;\n-import org.apache.flink.table.types.logical.BigIntType;\n-import org.apache.flink.table.types.logical.BooleanType;\n-import org.apache.flink.table.types.logical.DateType;\n-import org.apache.flink.table.types.logical.DoubleType;\n-import org.apache.flink.table.types.logical.FloatType;\n-import org.apache.flink.table.types.logical.IntType;\n-import org.apache.flink.table.types.logical.LogicalType;\n-import org.apache.flink.table.types.logical.SmallIntType;\n-import org.apache.flink.table.types.logical.TimeType;\n-import org.apache.flink.table.types.logical.TinyIntType;\n+\n+import java.util.Arrays;\n \n /**\n  * Columnar array to support access to vector column data.\n  */\n public final class ColumnarArray implements BaseArray {\n \n-\tprivate final DataType elementType;\n \tprivate final ColumnVector data;\n \tprivate final int offset;\n-\tprivate final int length;\n+\tprivate final int numElements;\n \n-\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n-\t\tthis.elementType = elementType;\n+\tpublic ColumnarArray(ColumnVector data, int offset, int numElements) {\n \t\tthis.data = data;\n \t\tthis.offset = offset;\n-\t\tthis.length = length;\n+\t\tthis.numElements = numElements;\n \t}\n \n \t@Override\n \tpublic int numElements() {\n-\t\treturn length;\n+\t\treturn numElements;\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NzAyNA==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402747024", "bodyText": "length -> numElements?", "author": "JingsongLi", "createdAt": "2020-04-03T05:39:28Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat;\n+\n+import org.apache.flink.table.dataformat.vector.ArrayColumnVector;\n+import org.apache.flink.table.dataformat.vector.BooleanColumnVector;\n+import org.apache.flink.table.dataformat.vector.ByteColumnVector;\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+import org.apache.flink.table.dataformat.vector.ColumnVector;\n+import org.apache.flink.table.dataformat.vector.DecimalColumnVector;\n+import org.apache.flink.table.dataformat.vector.DoubleColumnVector;\n+import org.apache.flink.table.dataformat.vector.FloatColumnVector;\n+import org.apache.flink.table.dataformat.vector.IntColumnVector;\n+import org.apache.flink.table.dataformat.vector.LongColumnVector;\n+import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n+import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.BooleanType;\n+import org.apache.flink.table.types.logical.DateType;\n+import org.apache.flink.table.types.logical.DoubleType;\n+import org.apache.flink.table.types.logical.FloatType;\n+import org.apache.flink.table.types.logical.IntType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.SmallIntType;\n+import org.apache.flink.table.types.logical.TimeType;\n+import org.apache.flink.table.types.logical.TinyIntType;\n+\n+/**\n+ * Columnar array to support access to vector column data.\n+ */\n+public final class ColumnarArray implements BaseArray {\n+\n+\tprivate final DataType elementType;\n+\tprivate final ColumnVector data;\n+\tprivate final int offset;\n+\tprivate final int length;\n+\n+\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n+\t\tthis.elementType = elementType;\n+\t\tthis.data = data;\n+\t\tthis.offset = offset;\n+\t\tthis.length = length;", "originalCommit": "6849f6c616060c7ecb85f65a9a915b6b3182710d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\nindex 098ed954c2..9dbd5e6e3a 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n\n@@ -29,38 +29,27 @@ import org.apache.flink.table.dataformat.vector.IntColumnVector;\n import org.apache.flink.table.dataformat.vector.LongColumnVector;\n import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n-import org.apache.flink.table.types.DataType;\n-import org.apache.flink.table.types.logical.BigIntType;\n-import org.apache.flink.table.types.logical.BooleanType;\n-import org.apache.flink.table.types.logical.DateType;\n-import org.apache.flink.table.types.logical.DoubleType;\n-import org.apache.flink.table.types.logical.FloatType;\n-import org.apache.flink.table.types.logical.IntType;\n-import org.apache.flink.table.types.logical.LogicalType;\n-import org.apache.flink.table.types.logical.SmallIntType;\n-import org.apache.flink.table.types.logical.TimeType;\n-import org.apache.flink.table.types.logical.TinyIntType;\n+\n+import java.util.Arrays;\n \n /**\n  * Columnar array to support access to vector column data.\n  */\n public final class ColumnarArray implements BaseArray {\n \n-\tprivate final DataType elementType;\n \tprivate final ColumnVector data;\n \tprivate final int offset;\n-\tprivate final int length;\n+\tprivate final int numElements;\n \n-\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n-\t\tthis.elementType = elementType;\n+\tpublic ColumnarArray(ColumnVector data, int offset, int numElements) {\n \t\tthis.data = data;\n \t\tthis.offset = offset;\n-\t\tthis.length = length;\n+\t\tthis.numElements = numElements;\n \t}\n \n \t@Override\n \tpublic int numElements() {\n-\t\treturn length;\n+\t\treturn numElements;\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2MDE2MA==", "url": "https://github.com/apache/flink/pull/11598#discussion_r402760160", "bodyText": "I can not get this. What we want is copy instead of conversion between external and internal.", "author": "JingsongLi", "createdAt": "2020-04-03T06:23:34Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat;\n+\n+import org.apache.flink.table.dataformat.vector.ArrayColumnVector;\n+import org.apache.flink.table.dataformat.vector.BooleanColumnVector;\n+import org.apache.flink.table.dataformat.vector.ByteColumnVector;\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+import org.apache.flink.table.dataformat.vector.ColumnVector;\n+import org.apache.flink.table.dataformat.vector.DecimalColumnVector;\n+import org.apache.flink.table.dataformat.vector.DoubleColumnVector;\n+import org.apache.flink.table.dataformat.vector.FloatColumnVector;\n+import org.apache.flink.table.dataformat.vector.IntColumnVector;\n+import org.apache.flink.table.dataformat.vector.LongColumnVector;\n+import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n+import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.BooleanType;\n+import org.apache.flink.table.types.logical.DateType;\n+import org.apache.flink.table.types.logical.DoubleType;\n+import org.apache.flink.table.types.logical.FloatType;\n+import org.apache.flink.table.types.logical.IntType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.SmallIntType;\n+import org.apache.flink.table.types.logical.TimeType;\n+import org.apache.flink.table.types.logical.TinyIntType;\n+\n+/**\n+ * Columnar array to support access to vector column data.\n+ */\n+public final class ColumnarArray implements BaseArray {\n+\n+\tprivate final DataType elementType;\n+\tprivate final ColumnVector data;\n+\tprivate final int offset;\n+\tprivate final int length;\n+\n+\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n+\t\tthis.elementType = elementType;\n+\t\tthis.data = data;\n+\t\tthis.offset = offset;\n+\t\tthis.length = length;\n+\t}\n+\n+\t@Override\n+\tpublic int numElements() {\n+\t\treturn length;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isNullAt(int pos) {\n+\t\treturn data.isNullAt(offset + pos);\n+\t}\n+\n+\t@Override\n+\tpublic void setNullAt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean getBoolean(int ordinal) {\n+\t\treturn ((BooleanColumnVector) data).getBoolean(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic byte getByte(int ordinal) {\n+\t\treturn ((ByteColumnVector) data).getByte(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic short getShort(int ordinal) {\n+\t\treturn ((ShortColumnVector) data).getShort(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic int getInt(int ordinal) {\n+\t\treturn ((IntColumnVector) data).getInt(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic long getLong(int ordinal) {\n+\t\treturn ((LongColumnVector) data).getLong(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic float getFloat(int ordinal) {\n+\t\treturn ((FloatColumnVector) data).getFloat(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic double getDouble(int ordinal) {\n+\t\treturn ((DoubleColumnVector) data).getDouble(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BinaryString getString(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\treturn BinaryString.fromBytes(byteArray.data, byteArray.offset, byteArray.len);\n+\t}\n+\n+\t@Override\n+\tpublic Decimal getDecimal(int ordinal, int precision, int scale) {\n+\t\treturn ((DecimalColumnVector) data).getDecimal(offset + ordinal, precision, scale);\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int ordinal, int precision) {\n+\t\treturn ((TimestampColumnVector) data).getTimestamp(offset + ordinal, precision);\n+\t}\n+\n+\t@Override\n+\tpublic <T> BinaryGeneric<T> getGeneric(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"GenericType is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getBinary(int ordinal) {\n+\t\tBytesColumnVector.Bytes byteArray = getByteArray(ordinal);\n+\t\tif (byteArray.len == byteArray.data.length) {\n+\t\t\treturn byteArray.data;\n+\t\t} else {\n+\t\t\tbyte[] ret = new byte[byteArray.len];\n+\t\t\tSystem.arraycopy(byteArray.data, byteArray.offset, ret, 0, byteArray.len);\n+\t\t\treturn ret;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic BaseArray getArray(int ordinal) {\n+\t\treturn ((ArrayColumnVector) data).getArray(offset + ordinal);\n+\t}\n+\n+\t@Override\n+\tpublic BaseMap getMap(int ordinal) {\n+\t\tthrow new UnsupportedOperationException(\"Map is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic BaseRow getRow(int ordinal, int numFields) {\n+\t\tthrow new UnsupportedOperationException(\"Row is not supported.\");\n+\t}\n+\n+\t@Override\n+\tpublic void setBoolean(int ordinal, boolean value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setByte(int ordinal, byte value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setShort(int ordinal, short value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setInt(int ordinal, int value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setLong(int ordinal, long value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setFloat(int ordinal, float value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setDouble(int ordinal, double value) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setDecimal(int i, Decimal value, int precision) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setTimestamp(int ordinal, SqlTimestamp value, int precision) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNotNullAt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullLong(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullInt(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullBoolean(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullByte(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullShort(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullFloat(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic void setNullDouble(int pos) {\n+\t\tthrow new UnsupportedOperationException(\"Not support the operation!\");\n+\t}\n+\n+\t@Override\n+\tpublic boolean[] toBooleanArray() {\n+\t\tboolean[] res = new boolean[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getBoolean(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic byte[] toByteArray() {\n+\t\tbyte[] res = new byte[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getByte(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic short[] toShortArray() {\n+\t\tshort[] res = new short[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getShort(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic int[] toIntArray() {\n+\t\tint[] res = new int[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getInt(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic long[] toLongArray() {\n+\t\tlong[] res = new long[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getLong(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic float[] toFloatArray() {\n+\t\tfloat[] res = new float[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getFloat(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\t@Override\n+\tpublic double[] toDoubleArray() {\n+\t\tdouble[] res = new double[length];\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tres[i] = getDouble(i);\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n+\tpublic BaseArray copy() {\n+\t\tLogicalType elementLogicalType = elementType.getLogicalType();\n+\t\tif (elementLogicalType instanceof BooleanType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toBooleanArray());\n+\t\t} else if (elementLogicalType instanceof TinyIntType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toByteArray());\n+\t\t} else if (elementLogicalType instanceof SmallIntType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toShortArray());\n+\t\t} else if (elementLogicalType instanceof IntType || elementLogicalType instanceof DateType || elementLogicalType instanceof TimeType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toIntArray());\n+\t\t} else if (elementLogicalType instanceof BigIntType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toLongArray());\n+\t\t} else if (elementLogicalType instanceof FloatType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toFloatArray());\n+\t\t} else if (elementLogicalType instanceof DoubleType) {\n+\t\t\treturn BinaryArray.fromPrimitiveArray(toDoubleArray());\n+\t\t} else {\n+\t\t\tDataFormatConverters.ObjectArrayConverter converter = new DataFormatConverters.ObjectArrayConverter(elementType);", "originalCommit": "6849f6c616060c7ecb85f65a9a915b6b3182710d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\nindex 098ed954c2..9dbd5e6e3a 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/ColumnarArray.java\n\n@@ -29,38 +29,27 @@ import org.apache.flink.table.dataformat.vector.IntColumnVector;\n import org.apache.flink.table.dataformat.vector.LongColumnVector;\n import org.apache.flink.table.dataformat.vector.ShortColumnVector;\n import org.apache.flink.table.dataformat.vector.TimestampColumnVector;\n-import org.apache.flink.table.types.DataType;\n-import org.apache.flink.table.types.logical.BigIntType;\n-import org.apache.flink.table.types.logical.BooleanType;\n-import org.apache.flink.table.types.logical.DateType;\n-import org.apache.flink.table.types.logical.DoubleType;\n-import org.apache.flink.table.types.logical.FloatType;\n-import org.apache.flink.table.types.logical.IntType;\n-import org.apache.flink.table.types.logical.LogicalType;\n-import org.apache.flink.table.types.logical.SmallIntType;\n-import org.apache.flink.table.types.logical.TimeType;\n-import org.apache.flink.table.types.logical.TinyIntType;\n+\n+import java.util.Arrays;\n \n /**\n  * Columnar array to support access to vector column data.\n  */\n public final class ColumnarArray implements BaseArray {\n \n-\tprivate final DataType elementType;\n \tprivate final ColumnVector data;\n \tprivate final int offset;\n-\tprivate final int length;\n+\tprivate final int numElements;\n \n-\tpublic ColumnarArray(DataType elementType, ColumnVector data, int offset, int length) {\n-\t\tthis.elementType = elementType;\n+\tpublic ColumnarArray(ColumnVector data, int offset, int numElements) {\n \t\tthis.data = data;\n \t\tthis.offset = offset;\n-\t\tthis.length = length;\n+\t\tthis.numElements = numElements;\n \t}\n \n \t@Override\n \tpublic int numElements() {\n-\t\treturn length;\n+\t\treturn numElements;\n \t}\n \n \t@Override\n"}}, {"oid": "deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "url": "https://github.com/apache/flink/commit/deb7f3ddd8feaf154dacac8f5f8a46b6b34807bd", "message": "[FLINK-16914][python] Support ArrayType in vectorized Python UDF", "committedDate": "2020-04-03T08:10:53Z", "type": "forcePushed"}, {"oid": "63413908d1cb09badbd6c9492817d665dad7279e", "url": "https://github.com/apache/flink/commit/63413908d1cb09badbd6c9492817d665dad7279e", "message": "[FLINK-16914][python] Support ArrayType in vectorized Python UDF", "committedDate": "2020-04-04T07:41:04Z", "type": "forcePushed"}, {"oid": "74dc1907b38d2336682cc4e5833a78e436871714", "url": "https://github.com/apache/flink/commit/74dc1907b38d2336682cc4e5833a78e436871714", "message": "[FLINK-16914][python] Support ArrayType in vectorized Python UDF", "committedDate": "2020-04-04T12:27:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTk5OA==", "url": "https://github.com/apache/flink/pull/11598#discussion_r404509998", "bodyText": "We can invoke toPrimitiveArray only then nullable is false?", "author": "JingsongLi", "createdAt": "2020-04-07T03:10:26Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/typeutils/BaseArraySerializer.java", "diffHunk": "@@ -134,6 +139,48 @@ private GenericArray copyGenericArray(GenericArray array) {\n \t\treturn new GenericArray(arr, array.numElements(), array.isPrimitiveArray());\n \t}\n \n+\tprivate GenericArray copyColumnarArray(ColumnarArray from) {\n+\t\tObject arr;\n+\t\tboolean isPrimitiveArray = true;\n+\t\tswitch (eleType.getTypeRoot()) {\n+\t\t\tcase BOOLEAN:\n+\t\t\t\tarr = from.toBooleanArray();", "originalCommit": "74dc1907b38d2336682cc4e5833a78e436871714", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyMzA3Nw==", "url": "https://github.com/apache/flink/pull/11598#discussion_r404523077", "bodyText": "Good catch. We should check the nullable. Updated the PR.", "author": "dianfu", "createdAt": "2020-04-07T04:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUwOTk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "c906c2773024496b86cebd802897b1b77fe6e426", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/typeutils/BaseArraySerializer.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/typeutils/BaseArraySerializer.java\nindex 954d69b62d..9413ddeb6c 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/typeutils/BaseArraySerializer.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/typeutils/BaseArraySerializer.java\n\n@@ -140,44 +140,49 @@ public class BaseArraySerializer extends TypeSerializer<BaseArray> {\n \t}\n \n \tprivate GenericArray copyColumnarArray(ColumnarArray from) {\n-\t\tObject arr;\n+\t\tObject arr = null;\n \t\tboolean isPrimitiveArray = true;\n-\t\tswitch (eleType.getTypeRoot()) {\n-\t\t\tcase BOOLEAN:\n-\t\t\t\tarr = from.toBooleanArray();\n-\t\t\t\tbreak;\n-\t\t\tcase TINYINT:\n-\t\t\t\tarr = from.toByteArray();\n-\t\t\t\tbreak;\n-\t\t\tcase SMALLINT:\n-\t\t\t\tarr = from.toShortArray();\n-\t\t\t\tbreak;\n-\t\t\tcase INTEGER:\n-\t\t\tcase DATE:\n-\t\t\tcase TIME_WITHOUT_TIME_ZONE:\n-\t\t\t\tarr = from.toIntArray();\n-\t\t\t\tbreak;\n-\t\t\tcase BIGINT:\n-\t\t\t\tarr = from.toLongArray();\n-\t\t\t\tbreak;\n-\t\t\tcase FLOAT:\n-\t\t\t\tarr = from.toFloatArray();\n-\t\t\t\tbreak;\n-\t\t\tcase DOUBLE:\n-\t\t\t\tarr = from.toDoubleArray();\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tObject[] newArray = new Object[from.numElements()];\n-\t\t\t\tfor (int i = 0; i < newArray.length; i++) {\n-\t\t\t\t\tif (!from.isNullAt(i)) {\n-\t\t\t\t\t\tnewArray[i] = eleSer.copy(TypeGetterSetters.get(from, i, eleType));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tnewArray[i] = null;\n-\t\t\t\t\t}\n+\t\tif (!eleType.isNullable()) {\n+\t\t\tswitch (eleType.getTypeRoot()) {\n+\t\t\t\tcase BOOLEAN:\n+\t\t\t\t\tarr = from.toBooleanArray();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase TINYINT:\n+\t\t\t\t\tarr = from.toByteArray();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase SMALLINT:\n+\t\t\t\t\tarr = from.toShortArray();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase INTEGER:\n+\t\t\t\tcase DATE:\n+\t\t\t\tcase TIME_WITHOUT_TIME_ZONE:\n+\t\t\t\t\tarr = from.toIntArray();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIGINT:\n+\t\t\t\t\tarr = from.toLongArray();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FLOAT:\n+\t\t\t\t\tarr = from.toFloatArray();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase DOUBLE:\n+\t\t\t\t\tarr = from.toDoubleArray();\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (arr == null) {\n+\t\t\tObject[] newArray = new Object[from.numElements()];\n+\t\t\tfor (int i = 0; i < newArray.length; i++) {\n+\t\t\t\tif (!from.isNullAt(i)) {\n+\t\t\t\t\tnewArray[i] = eleSer.copy(TypeGetterSetters.get(from, i, eleType));\n+\t\t\t\t} else {\n+\t\t\t\t\tnewArray[i] = null;\n \t\t\t\t}\n-\t\t\t\tarr = newArray;\n-\t\t\t\tisPrimitiveArray = false;\n+\t\t\t}\n+\t\t\tarr = newArray;\n+\t\t\tisPrimitiveArray = false;\n \t\t}\n+\n \t\treturn new GenericArray(arr, from.numElements(), isPrimitiveArray);\n \t}\n \n"}}, {"oid": "c906c2773024496b86cebd802897b1b77fe6e426", "url": "https://github.com/apache/flink/commit/c906c2773024496b86cebd802897b1b77fe6e426", "message": "[FLINK-16914][table-runtime-blink] Introduce array column vector in blink", "committedDate": "2020-04-07T04:06:35Z", "type": "commit"}, {"oid": "2fd5c0d6bab68aaf5f8642afa63773a61191524d", "url": "https://github.com/apache/flink/commit/2fd5c0d6bab68aaf5f8642afa63773a61191524d", "message": "[FLINK-16914][python] Support ArrayType in vectorized Python UDF", "committedDate": "2020-04-07T04:06:35Z", "type": "commit"}, {"oid": "2fd5c0d6bab68aaf5f8642afa63773a61191524d", "url": "https://github.com/apache/flink/commit/2fd5c0d6bab68aaf5f8642afa63773a61191524d", "message": "[FLINK-16914][python] Support ArrayType in vectorized Python UDF", "committedDate": "2020-04-07T04:06:35Z", "type": "forcePushed"}]}