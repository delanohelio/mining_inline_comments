{"pr_number": 11668, "pr_title": "[FLINK-17013][python] Support Python UDTF in old planner under batch mode", "pr_createdAt": "2020-04-08T08:55:51Z", "pr_url": "https://github.com/apache/flink/pull/11668", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMxMjI0Mw==", "url": "https://github.com/apache/flink/pull/11668#discussion_r409312243", "bodyText": "Maybe add some base classes for the two classes, i.e., DataSetPythonCorrelateRule and DataStreamPythonCorrelateRule to avoid the code duplications.", "author": "hequn8128", "createdAt": "2020-04-16T06:31:03Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan.rules.batch;\n+\n+import org.apache.flink.table.plan.nodes.FlinkConventions;\n+import org.apache.flink.table.plan.nodes.dataset.DataSetPythonCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCalc;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.plan.util.CorrelateUtil;\n+import org.apache.flink.table.plan.util.PythonUtil;\n+\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelTraitSet;\n+import org.apache.calcite.plan.volcano.RelSubset;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.convert.ConverterRule;\n+import org.apache.calcite.rex.RexNode;\n+\n+import scala.Option;\n+import scala.Some;\n+\n+/**\n+ * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * {@link DataSetPythonCorrelate}.\n+ */\n+public class DataSetPythonCorrelateRule extends ConverterRule {", "originalCommit": "48fe02ae72da140602cba512125240025d54d0c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\nindex 1ffc81560d..a962f38e19 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\n\n@@ -20,51 +20,25 @@ package org.apache.flink.table.plan.rules.batch;\n \n import org.apache.flink.table.plan.nodes.FlinkConventions;\n import org.apache.flink.table.plan.nodes.dataset.DataSetPythonCorrelate;\n-import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCalc;\n import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n-import org.apache.flink.table.plan.util.CorrelateUtil;\n-import org.apache.flink.table.plan.util.PythonUtil;\n+import org.apache.flink.table.plan.rules.AbstractPythonCorrelateRuleBase;\n \n-import org.apache.calcite.plan.RelOptRule;\n-import org.apache.calcite.plan.RelOptRuleCall;\n-import org.apache.calcite.plan.RelTraitSet;\n-import org.apache.calcite.plan.volcano.RelSubset;\n import org.apache.calcite.rel.RelNode;\n-import org.apache.calcite.rel.convert.ConverterRule;\n import org.apache.calcite.rex.RexNode;\n \n import scala.Option;\n-import scala.Some;\n \n /**\n  * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n  * {@link DataSetPythonCorrelate}.\n  */\n-public class DataSetPythonCorrelateRule extends ConverterRule {\n+public class DataSetPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n \n \tpublic static final DataSetPythonCorrelateRule INSTANCE = new DataSetPythonCorrelateRule();\n \n \tprivate DataSetPythonCorrelateRule() {\n-\t\tsuper(FlinkLogicalCorrelate.class, FlinkConventions.LOGICAL(), FlinkConventions.DATASET(),\n-\t\t\t\"DataSetPythonCorrelateRule\");\n-\t}\n-\n-\t@Override\n-\tpublic boolean matches(RelOptRuleCall call) {\n-\t\tFlinkLogicalCorrelate join = call.rel(0);\n-\t\tRelNode right = ((RelSubset) join.getRight()).getOriginal();\n-\n-\t\tif (right instanceof FlinkLogicalTableFunctionScan) {\n-\t\t\t// right node is a python table function\n-\t\t\treturn PythonUtil.isPythonCall(((FlinkLogicalTableFunctionScan) right).getCall(), null);\n-\t\t} else if (right instanceof FlinkLogicalCalc) {\n-\t\t\t// a filter is pushed above the table function\n-\t\t\tFlinkLogicalCalc calc = (FlinkLogicalCalc) right;\n-\t\t\tOption<FlinkLogicalTableFunctionScan> scan = CorrelateUtil.getTableFunctionScan(calc);\n-\t\t\treturn scan.isDefined() && PythonUtil.isPythonCall(scan.get().getCall(), null);\n-\t\t}\n-\t\treturn false;\n+\t\tsuper(FlinkConventions.DATASET(), \"DataSetPythonCorrelateRule\");\n \t}\n \n \t@Override\n"}}, {"oid": "65362f1595f7e068fe680adc16e7fa82fd84aff7", "url": "https://github.com/apache/flink/commit/65362f1595f7e068fe680adc16e7fa82fd84aff7", "message": "[FLINK-17013][python] Support Python UDTF in old planner under batch mode", "committedDate": "2020-04-16T07:33:19Z", "type": "commit"}, {"oid": "7d2e31fab3e7e023346cbec86fbb239c80310895", "url": "https://github.com/apache/flink/commit/7d2e31fab3e7e023346cbec86fbb239c80310895", "message": "fix", "committedDate": "2020-04-17T11:36:25Z", "type": "commit"}, {"oid": "7d2e31fab3e7e023346cbec86fbb239c80310895", "url": "https://github.com/apache/flink/commit/7d2e31fab3e7e023346cbec86fbb239c80310895", "message": "fix", "committedDate": "2020-04-17T11:36:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzQ3NQ==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411157475", "bodyText": "responsible for converting", "author": "hequn8128", "createdAt": "2020-04-20T07:33:45Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java", "diffHunk": "@@ -39,16 +40,14 @@\n import scala.Some;\n \n /**\n- * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n- * {@link DataStreamPythonCorrelate}.\n+ * The abstract physical rule base is responsible for convert {@link FlinkLogicalCorrelate} to physical", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java\nindex 6e72d2669a..5359134108 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java\n\n@@ -40,7 +40,7 @@ import scala.Option;\n import scala.Some;\n \n /**\n- * The abstract physical rule base is responsible for convert {@link FlinkLogicalCorrelate} to physical\n+ * The abstract physical rule base is responsible for converting {@link FlinkLogicalCorrelate} to physical\n  * Python correlate RelNode.\n  */\n public abstract class AbstractPythonCorrelateRuleBase extends ConverterRule {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1NzYzOQ==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411157639", "bodyText": "is responsible for creating", "author": "hequn8128", "createdAt": "2020-04-20T07:34:06Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java", "diffHunk": "@@ -69,35 +67,29 @@ public boolean matches(RelOptRuleCall call) {\n \t\treturn false;\n \t}\n \n-\t@Override\n-\tpublic RelNode convert(RelNode rel) {\n-\t\tDataStreamPythonCorrelateFactory factory = new DataStreamPythonCorrelateFactory(rel);\n-\t\treturn factory.convertToCorrelate();\n-\t}\n-\n \t/**\n-\t * The factory is responsible to creating {@link DataStreamPythonCorrelate}.\n+\t * The abstract factory is responsible to creating {@link DataSetPythonCorrelate} or {@link DataStreamPythonCorrelate}.", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java\nindex 6e72d2669a..5359134108 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/AbstractPythonCorrelateRuleBase.java\n\n@@ -68,7 +68,7 @@ public abstract class AbstractPythonCorrelateRuleBase extends ConverterRule {\n \t}\n \n \t/**\n-\t * The abstract factory is responsible to creating {@link DataSetPythonCorrelate} or {@link DataStreamPythonCorrelate}.\n+\t * The abstract factory is responsible for creating {@link DataSetPythonCorrelate} or {@link DataStreamPythonCorrelate}.\n \t */\n \tpublic abstract static class PythonCorrelateFactoryBase {\n \t\tprotected final RelNode correlateRel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1Nzg4NA==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411157884", "bodyText": "responsible for converting", "author": "hequn8128", "createdAt": "2020-04-20T07:34:31Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan.rules.stream;\n+\n+import org.apache.flink.table.plan.nodes.FlinkConventions;\n+import org.apache.flink.table.plan.nodes.datastream.DataStreamPythonCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.plan.rules.AbstractPythonCorrelateRuleBase;\n+import org.apache.flink.table.plan.schema.RowSchema;\n+\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rex.RexNode;\n+\n+import scala.Option;\n+\n+/**\n+ * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\nindex 30ae79ee1a..79e5a685e4 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\n\n@@ -32,7 +32,7 @@ import org.apache.calcite.rex.RexNode;\n import scala.Option;\n \n /**\n- * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * The physical rule is responsible for converting {@link FlinkLogicalCorrelate} to\n  * {@link DataStreamPythonCorrelate}.\n  */\n public class DataStreamPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODAxOA==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411158018", "bodyText": "responsible for creating", "author": "hequn8128", "createdAt": "2020-04-20T07:34:46Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan.rules.stream;\n+\n+import org.apache.flink.table.plan.nodes.FlinkConventions;\n+import org.apache.flink.table.plan.nodes.datastream.DataStreamPythonCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.plan.rules.AbstractPythonCorrelateRuleBase;\n+import org.apache.flink.table.plan.schema.RowSchema;\n+\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rex.RexNode;\n+\n+import scala.Option;\n+\n+/**\n+ * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * {@link DataStreamPythonCorrelate}.\n+ */\n+public class DataStreamPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n+\n+\tpublic static final RelOptRule INSTANCE = new DataStreamPythonCorrelateRule();\n+\n+\tprivate DataStreamPythonCorrelateRule() {\n+\t\tsuper(FlinkConventions.DATASTREAM(), \"DataStreamPythonCorrelateRule\");\n+\t}\n+\n+\t@Override\n+\tpublic RelNode convert(RelNode rel) {\n+\t\tDataStreamPythonCorrelateFactory factory = new DataStreamPythonCorrelateFactory(rel);\n+\t\treturn factory.convertToCorrelate();\n+\t}\n+\n+\t/**\n+\t * The factory is responsible to creating {@link DataStreamPythonCorrelate}.", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\nindex 30ae79ee1a..79e5a685e4 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\n\n@@ -32,7 +32,7 @@ import org.apache.calcite.rex.RexNode;\n import scala.Option;\n \n /**\n- * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * The physical rule is responsible for converting {@link FlinkLogicalCorrelate} to\n  * {@link DataStreamPythonCorrelate}.\n  */\n public class DataStreamPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODIxOQ==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411158219", "bodyText": "responsible for converting", "author": "hequn8128", "createdAt": "2020-04-20T07:35:09Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan.rules.batch;\n+\n+import org.apache.flink.table.plan.nodes.FlinkConventions;\n+import org.apache.flink.table.plan.nodes.dataset.DataSetPythonCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.plan.rules.AbstractPythonCorrelateRuleBase;\n+\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rex.RexNode;\n+\n+import scala.Option;\n+\n+/**\n+ * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\nindex a962f38e19..572856f58c 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\n\n@@ -30,7 +30,7 @@ import org.apache.calcite.rex.RexNode;\n import scala.Option;\n \n /**\n- * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * The physical rule is responsible for converting {@link FlinkLogicalCorrelate} to\n  * {@link DataSetPythonCorrelate}.\n  */\n public class DataSetPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODM0Mw==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411158343", "bodyText": "responsible for creating", "author": "hequn8128", "createdAt": "2020-04-20T07:35:20Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan.rules.batch;\n+\n+import org.apache.flink.table.plan.nodes.FlinkConventions;\n+import org.apache.flink.table.plan.nodes.dataset.DataSetPythonCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.plan.rules.AbstractPythonCorrelateRuleBase;\n+\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rex.RexNode;\n+\n+import scala.Option;\n+\n+/**\n+ * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * {@link DataSetPythonCorrelate}.\n+ */\n+public class DataSetPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n+\n+\tpublic static final DataSetPythonCorrelateRule INSTANCE = new DataSetPythonCorrelateRule();\n+\n+\tprivate DataSetPythonCorrelateRule() {\n+\t\tsuper(FlinkConventions.DATASET(), \"DataSetPythonCorrelateRule\");\n+\t}\n+\n+\t@Override\n+\tpublic RelNode convert(RelNode rel) {\n+\t\tDataSetPythonCorrelateFactory factory = new DataSetPythonCorrelateFactory(rel);\n+\t\treturn factory.convertToCorrelate();\n+\t}\n+\n+\t/**\n+\t * The factory is responsible to creating {@link DataSetPythonCorrelate}.", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\nindex a962f38e19..572856f58c 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/batch/DataSetPythonCorrelateRule.java\n\n@@ -30,7 +30,7 @@ import org.apache.calcite.rex.RexNode;\n import scala.Option;\n \n /**\n- * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * The physical rule is responsible for converting {@link FlinkLogicalCorrelate} to\n  * {@link DataSetPythonCorrelate}.\n  */\n public class DataSetPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1ODg3OQ==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411158879", "bodyText": "Add a blank here, i.e., PythonCorrelateFactoryBase {", "author": "hequn8128", "createdAt": "2020-04-20T07:36:14Z", "path": "flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.plan.rules.stream;\n+\n+import org.apache.flink.table.plan.nodes.FlinkConventions;\n+import org.apache.flink.table.plan.nodes.datastream.DataStreamPythonCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalCorrelate;\n+import org.apache.flink.table.plan.nodes.logical.FlinkLogicalTableFunctionScan;\n+import org.apache.flink.table.plan.rules.AbstractPythonCorrelateRuleBase;\n+import org.apache.flink.table.plan.schema.RowSchema;\n+\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rex.RexNode;\n+\n+import scala.Option;\n+\n+/**\n+ * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * {@link DataStreamPythonCorrelate}.\n+ */\n+public class DataStreamPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n+\n+\tpublic static final RelOptRule INSTANCE = new DataStreamPythonCorrelateRule();\n+\n+\tprivate DataStreamPythonCorrelateRule() {\n+\t\tsuper(FlinkConventions.DATASTREAM(), \"DataStreamPythonCorrelateRule\");\n+\t}\n+\n+\t@Override\n+\tpublic RelNode convert(RelNode rel) {\n+\t\tDataStreamPythonCorrelateFactory factory = new DataStreamPythonCorrelateFactory(rel);\n+\t\treturn factory.convertToCorrelate();\n+\t}\n+\n+\t/**\n+\t * The factory is responsible to creating {@link DataStreamPythonCorrelate}.\n+\t */\n+\tprivate static class DataStreamPythonCorrelateFactory extends PythonCorrelateFactoryBase{", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\nindex 30ae79ee1a..79e5a685e4 100644\n--- a/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\n+++ b/flink-table/flink-table-planner/src/main/java/org/apache/flink/table/plan/rules/stream/DataStreamPythonCorrelateRule.java\n\n@@ -32,7 +32,7 @@ import org.apache.calcite.rex.RexNode;\n import scala.Option;\n \n /**\n- * The physical rule is responsible for convert {@link FlinkLogicalCorrelate} to\n+ * The physical rule is responsible for converting {@link FlinkLogicalCorrelate} to\n  * {@link DataStreamPythonCorrelate}.\n  */\n public class DataStreamPythonCorrelateRule extends AbstractPythonCorrelateRuleBase {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE1OTUxOA==", "url": "https://github.com/apache/flink/pull/11668#discussion_r411159518", "bodyText": "Maybe more details that why we always copy the input Row. What do you think?", "author": "hequn8128", "createdAt": "2020-04-20T07:37:31Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/functions/python/PythonTableFunctionFlatMap.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.functions.python;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.api.common.functions.RichFlatMapFunction;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.table.functions.TableFunction;\n+import org.apache.flink.table.functions.python.PythonEnv;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.runners.python.table.PythonTableFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.table.types.utils.TypeConversions;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.Preconditions;\n+\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+import org.apache.calcite.rel.core.JoinRelType;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * The {@link RichFlatMapFunction} used to invoke Python {@link TableFunction} functions for the\n+ * old planner.\n+ */\n+@Internal\n+public final class PythonTableFunctionFlatMap extends AbstractPythonStatelessFunctionFlatMap {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * The Python {@link TableFunction} to be executed.\n+\t */\n+\tprivate final PythonFunctionInfo tableFunction;\n+\n+\t/**\n+\t * The correlate join type.\n+\t */\n+\tprivate final JoinRelType joinType;\n+\n+\tpublic PythonTableFunctionFlatMap(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo tableFunction,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udtfInputOffsets,\n+\t\tJoinRelType joinType) {\n+\t\tsuper(config, inputType, outputType, udtfInputOffsets);\n+\t\tthis.tableFunction = Preconditions.checkNotNull(tableFunction);\n+\t\tPreconditions.checkArgument(\n+\t\t\tjoinType == JoinRelType.INNER || joinType == JoinRelType.LEFT,\n+\t\t\t\"The join type should be inner join or left join\");\n+\t\tthis.joinType = joinType;\n+\t}\n+\n+\t@Override\n+\tpublic void open(Configuration parameters) throws Exception {\n+\t\tRowTypeInfo forwardedInputTypeInfo = (RowTypeInfo) TypeConversions.fromDataTypeToLegacyInfo(\n+\t\t\tTypeConversions.fromLogicalToDataType(inputType));\n+\t\tforwardedInputSerializer = forwardedInputTypeInfo.createSerializer(getRuntimeContext().getExecutionConfig());\n+\n+\t\tList<RowType.RowField> udtfOutputDataFields = new ArrayList<>(\n+\t\t\toutputType.getFields().subList(inputType.getFieldCount(), outputType.getFieldCount()));\n+\t\tuserDefinedFunctionOutputType = new RowType(udtfOutputDataFields);\n+\n+\t\tsuper.open(parameters);\n+\t}\n+\n+\t@Override\n+\tpublic PythonEnv getPythonEnv() {\n+\t\treturn tableFunction.getPythonFunction().getPythonEnv();\n+\t}\n+\n+\t@Override\n+\tpublic PythonFunctionRunner<Row> createPythonFunctionRunner() throws IOException {\n+\t\tFnDataReceiver<byte[]> userDefinedFunctionResultReceiver = input -> {\n+\t\t\t// handover to queue, do not block the result receiver thread\n+\t\t\tuserDefinedFunctionResultQueue.put(input);\n+\t\t};\n+\n+\t\treturn new PythonTableFunctionRunner(\n+\t\t\tgetRuntimeContext().getTaskName(),\n+\t\t\tuserDefinedFunctionResultReceiver,\n+\t\t\ttableFunction,\n+\t\t\tcreatePythonEnvironmentManager(),\n+\t\t\tuserDefinedFunctionInputType,\n+\t\t\tuserDefinedFunctionOutputType,\n+\t\t\tjobOptions,\n+\t\t\tgetFlinkMetricContainer());\n+\t}\n+\n+\t@Override\n+\tpublic void bufferInput(Row input) {\n+\t\t// always copy the input Row", "originalCommit": "7d2e31fab3e7e023346cbec86fbb239c80310895", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/table/runtime/functions/python/PythonTableFunctionFlatMap.java b/flink-python/src/main/java/org/apache/flink/table/runtime/functions/python/PythonTableFunctionFlatMap.java\nindex 1f67fe8cdf..5418e0a846 100644\n--- a/flink-python/src/main/java/org/apache/flink/table/runtime/functions/python/PythonTableFunctionFlatMap.java\n+++ b/flink-python/src/main/java/org/apache/flink/table/runtime/functions/python/PythonTableFunctionFlatMap.java\n\n@@ -111,7 +111,8 @@ public final class PythonTableFunctionFlatMap extends AbstractPythonStatelessFun\n \n \t@Override\n \tpublic void bufferInput(Row input) {\n-\t\t// always copy the input Row\n+\t\t// If the input node is a DataSetCalc node, the RichFlatMapFunction generated by codegen\n+\t\t// will reuse the output Row, so here we always copy the input Row to solve this problem.\n \t\tinput = forwardedInputSerializer.copy(input);\n \t\tforwardedInputQueue.add(input);\n \t}\n"}}, {"oid": "5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "url": "https://github.com/apache/flink/commit/5f203f2938f094ccfa22f05d3dfdddbcfa210e81", "message": "fix-2", "committedDate": "2020-04-20T12:20:05Z", "type": "commit"}]}