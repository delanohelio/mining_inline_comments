{"pr_number": 12423, "pr_title": "[FLINK-18034][runtime] Introduce PreferredLocationsRetriever", "pr_createdAt": "2020-06-01T08:27:11Z", "pr_url": "https://github.com/apache/flink/pull/12423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDc4OQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434630789", "bodyText": "Maybe, just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal StateLocationRetriever stateLocationRetriever = new ExecutionVertexStateLocationRetriever(this::getExecutionVertex);\n          \n          \n            \n            \t\tfinal StateLocationRetriever stateLocationRetriever = executionVertexId -> getExecutionVertex(executionVertexId).getPreferredLocationBasedOnState();", "author": "azagrebin", "createdAt": "2020-06-03T14:55:29Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "diffHunk": "@@ -229,7 +229,9 @@ public SchedulerBase(\n \t\tthis.executionGraph = createAndRestoreExecutionGraph(jobManagerJobMetricGroup, checkNotNull(shuffleMaster), checkNotNull(partitionTracker));\n \t\tthis.schedulingTopology = executionGraph.getSchedulingTopology();\n \n-\t\tthis.inputsLocationsRetriever = new ExecutionGraphToInputsLocationsRetrieverAdapter(executionGraph);\n+\t\tfinal StateLocationRetriever stateLocationRetriever = new ExecutionVertexStateLocationRetriever(this::getExecutionVertex);", "originalCommit": "cec2647b2ec7c33383fb0dc6010772572272b44c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NjM2OA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435876368", "bodyText": "ok.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODg1Nw==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436018857", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java\nindex be0c9f3e8fc..02ce62d8460 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java\n\n@@ -229,7 +229,8 @@ public abstract class SchedulerBase implements SchedulerNG {\n \t\tthis.executionGraph = createAndRestoreExecutionGraph(jobManagerJobMetricGroup, checkNotNull(shuffleMaster), checkNotNull(partitionTracker));\n \t\tthis.schedulingTopology = executionGraph.getSchedulingTopology();\n \n-\t\tfinal StateLocationRetriever stateLocationRetriever = new ExecutionVertexStateLocationRetriever(this::getExecutionVertex);\n+\t\tfinal StateLocationRetriever stateLocationRetriever =\n+\t\t\texecutionVertexId -> getExecutionVertex(executionVertexId).getPreferredLocationBasedOnState();\n \t\tfinal InputsLocationsRetriever inputsLocationsRetriever = new ExecutionGraphToInputsLocationsRetrieverAdapter(executionGraph);\n \t\tthis.preferredLocationsRetriever = new DefaultPreferredLocationsRetriever(stateLocationRetriever, inputsLocationsRetriever);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3MDUxMg==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434670512", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface PreferredLocationsRetriever {\n          \n          \n            \n            @FunctionalInterface\n          \n          \n            \n            public interface PreferredLocationsRetriever {", "author": "azagrebin", "createdAt": "2020-06-03T15:49:37Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/PreferredLocationsRetriever.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Component to retrieve the preferred locations of an execution vertex.\n+ */\n+public interface PreferredLocationsRetriever {", "originalCommit": "12baef7860f623166396fd8085542f46da92415b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3MTUxNQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435871515", "bodyText": "ok.", "author": "zhuzhurk", "createdAt": "2020-06-05T11:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3MDUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODc1Ng==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436018756", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY3MDUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/PreferredLocationsRetriever.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/PreferredLocationsRetriever.java\nindex 43b33c2557c..1cc67b44a4d 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/PreferredLocationsRetriever.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/PreferredLocationsRetriever.java\n\n@@ -28,6 +28,7 @@ import java.util.concurrent.CompletableFuture;\n /**\n  * Component to retrieve the preferred locations of an execution vertex.\n  */\n+@FunctionalInterface\n public interface PreferredLocationsRetriever {\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MTYwMw==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434681603", "bodyText": "I do not quite understand why we need this static, not private method getPreferredLocationsBasedOnInputs  at the end.\nCould tests not be written against public interface method?", "author": "azagrebin", "createdAt": "2020-06-03T16:03:20Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.runtime.executiongraph.ExecutionVertex.MAX_DISTINCT_LOCATIONS_TO_CONSIDER;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * Default implementation of {@link PreferredLocationsRetriever}.\n+ * Locations based on state will be returned if exist.\n+ * Otherwise locations based on inputs will be returned.\n+ */\n+public class DefaultPreferredLocationsRetriever implements PreferredLocationsRetriever {\n+\n+\tprivate final StateLocationRetriever stateLocationRetriever;\n+\n+\tprivate final InputsLocationsRetriever inputsLocationsRetriever;\n+\n+\tDefaultPreferredLocationsRetriever(\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever,\n+\t\t\tfinal InputsLocationsRetriever inputsLocationsRetriever) {\n+\n+\t\tthis.stateLocationRetriever = checkNotNull(stateLocationRetriever);\n+\t\tthis.inputsLocationsRetriever = checkNotNull(inputsLocationsRetriever);\n+\t}\n+\n+\t@Override\n+\tpublic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocations(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore) {\n+\n+\t\tcheckNotNull(executionVertexId);\n+\t\tcheckNotNull(producersToIgnore);\n+\n+\t\tfinal Collection<TaskManagerLocation> preferredLocationsBasedOnState =\n+\t\t\tgetPreferredLocationsBasedOnState(executionVertexId, stateLocationRetriever);\n+\t\tif (!preferredLocationsBasedOnState.isEmpty()) {\n+\t\t\treturn CompletableFuture.completedFuture(preferredLocationsBasedOnState);\n+\t\t}\n+\n+\t\treturn getPreferredLocationsBasedOnInputs(executionVertexId, producersToIgnore, inputsLocationsRetriever);\n+\t}\n+\n+\tprivate static Collection<TaskManagerLocation> getPreferredLocationsBasedOnState(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever) {\n+\n+\t\treturn stateLocationRetriever.getStateLocation(executionVertexId)\n+\t\t\t.map(Collections::singleton)\n+\t\t\t.orElse(Collections.emptySet());\n+\t}\n+\n+\t/**\n+\t * Gets the location preferences of the execution, as determined by the locations\n+\t * of the predecessors from which it receives input data.\n+\t * If there are more than {@link ExecutionVertex#MAX_DISTINCT_LOCATIONS_TO_CONSIDER} different locations of source data,\n+\t * or neither the sources have not been started nor will be started with the execution together,\n+\t * this method returns an empty collection to indicate no location preference.\n+\t *\n+\t * @return The preferred locations based in input streams, or an empty iterable,\n+\t *         if there is no input-based preference.\n+\t */\n+\tstatic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocationsBasedOnInputs(", "originalCommit": "12baef7860f623166396fd8085542f46da92415b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMjEyOA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435902128", "bodyText": "May bad to have directly moved these code from DefaultExecutionSlotAllocator.\nWill take a look to see how to rewrite these tests.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODY4OQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436018689", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MTYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\nindex 1d1cb3c6cb9..84bc529ab97 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n\n@@ -19,7 +19,6 @@\n package org.apache.flink.runtime.scheduler;\n \n import org.apache.flink.runtime.concurrent.FutureUtils;\n-import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjM5OA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434682398", "bodyText": "we clear this collection at the end of each iteration.\nmaybe it should go inside?", "author": "azagrebin", "createdAt": "2020-06-03T16:04:07Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.runtime.executiongraph.ExecutionVertex.MAX_DISTINCT_LOCATIONS_TO_CONSIDER;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * Default implementation of {@link PreferredLocationsRetriever}.\n+ * Locations based on state will be returned if exist.\n+ * Otherwise locations based on inputs will be returned.\n+ */\n+public class DefaultPreferredLocationsRetriever implements PreferredLocationsRetriever {\n+\n+\tprivate final StateLocationRetriever stateLocationRetriever;\n+\n+\tprivate final InputsLocationsRetriever inputsLocationsRetriever;\n+\n+\tDefaultPreferredLocationsRetriever(\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever,\n+\t\t\tfinal InputsLocationsRetriever inputsLocationsRetriever) {\n+\n+\t\tthis.stateLocationRetriever = checkNotNull(stateLocationRetriever);\n+\t\tthis.inputsLocationsRetriever = checkNotNull(inputsLocationsRetriever);\n+\t}\n+\n+\t@Override\n+\tpublic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocations(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore) {\n+\n+\t\tcheckNotNull(executionVertexId);\n+\t\tcheckNotNull(producersToIgnore);\n+\n+\t\tfinal Collection<TaskManagerLocation> preferredLocationsBasedOnState =\n+\t\t\tgetPreferredLocationsBasedOnState(executionVertexId, stateLocationRetriever);\n+\t\tif (!preferredLocationsBasedOnState.isEmpty()) {\n+\t\t\treturn CompletableFuture.completedFuture(preferredLocationsBasedOnState);\n+\t\t}\n+\n+\t\treturn getPreferredLocationsBasedOnInputs(executionVertexId, producersToIgnore, inputsLocationsRetriever);\n+\t}\n+\n+\tprivate static Collection<TaskManagerLocation> getPreferredLocationsBasedOnState(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever) {\n+\n+\t\treturn stateLocationRetriever.getStateLocation(executionVertexId)\n+\t\t\t.map(Collections::singleton)\n+\t\t\t.orElse(Collections.emptySet());\n+\t}\n+\n+\t/**\n+\t * Gets the location preferences of the execution, as determined by the locations\n+\t * of the predecessors from which it receives input data.\n+\t * If there are more than {@link ExecutionVertex#MAX_DISTINCT_LOCATIONS_TO_CONSIDER} different locations of source data,\n+\t * or neither the sources have not been started nor will be started with the execution together,\n+\t * this method returns an empty collection to indicate no location preference.\n+\t *\n+\t * @return The preferred locations based in input streams, or an empty iterable,\n+\t *         if there is no input-based preference.\n+\t */\n+\tstatic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocationsBasedOnInputs(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore,\n+\t\t\tfinal InputsLocationsRetriever inputsLocationsRetriever) {\n+\n+\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocations =\n+\t\t\tCompletableFuture.completedFuture(Collections.emptyList());\n+\n+\t\tfinal Collection<CompletableFuture<TaskManagerLocation>> locationsFutures = new ArrayList<>();", "originalCommit": "12baef7860f623166396fd8085542f46da92415b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTgzMw==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435875833", "bodyText": "yeah we can do it.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODU2OA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436018568", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\nindex 1d1cb3c6cb9..84bc529ab97 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n\n@@ -19,7 +19,6 @@\n package org.apache.flink.runtime.scheduler;\n \n import org.apache.flink.runtime.concurrent.FutureUtils;\n-import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjkxNA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434682914", "bodyText": "Could this be a separate method?\nprivate Collection<CompletableFuture<TaskManagerLocation>> getInputLocationFutures(\n    Set<ExecutionVertexID> producersToIgnore, \n    Collection<ExecutionVertexID> producers)", "author": "azagrebin", "createdAt": "2020-06-03T16:04:39Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.runtime.executiongraph.ExecutionVertex.MAX_DISTINCT_LOCATIONS_TO_CONSIDER;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * Default implementation of {@link PreferredLocationsRetriever}.\n+ * Locations based on state will be returned if exist.\n+ * Otherwise locations based on inputs will be returned.\n+ */\n+public class DefaultPreferredLocationsRetriever implements PreferredLocationsRetriever {\n+\n+\tprivate final StateLocationRetriever stateLocationRetriever;\n+\n+\tprivate final InputsLocationsRetriever inputsLocationsRetriever;\n+\n+\tDefaultPreferredLocationsRetriever(\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever,\n+\t\t\tfinal InputsLocationsRetriever inputsLocationsRetriever) {\n+\n+\t\tthis.stateLocationRetriever = checkNotNull(stateLocationRetriever);\n+\t\tthis.inputsLocationsRetriever = checkNotNull(inputsLocationsRetriever);\n+\t}\n+\n+\t@Override\n+\tpublic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocations(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore) {\n+\n+\t\tcheckNotNull(executionVertexId);\n+\t\tcheckNotNull(producersToIgnore);\n+\n+\t\tfinal Collection<TaskManagerLocation> preferredLocationsBasedOnState =\n+\t\t\tgetPreferredLocationsBasedOnState(executionVertexId, stateLocationRetriever);\n+\t\tif (!preferredLocationsBasedOnState.isEmpty()) {\n+\t\t\treturn CompletableFuture.completedFuture(preferredLocationsBasedOnState);\n+\t\t}\n+\n+\t\treturn getPreferredLocationsBasedOnInputs(executionVertexId, producersToIgnore, inputsLocationsRetriever);\n+\t}\n+\n+\tprivate static Collection<TaskManagerLocation> getPreferredLocationsBasedOnState(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever) {\n+\n+\t\treturn stateLocationRetriever.getStateLocation(executionVertexId)\n+\t\t\t.map(Collections::singleton)\n+\t\t\t.orElse(Collections.emptySet());\n+\t}\n+\n+\t/**\n+\t * Gets the location preferences of the execution, as determined by the locations\n+\t * of the predecessors from which it receives input data.\n+\t * If there are more than {@link ExecutionVertex#MAX_DISTINCT_LOCATIONS_TO_CONSIDER} different locations of source data,\n+\t * or neither the sources have not been started nor will be started with the execution together,\n+\t * this method returns an empty collection to indicate no location preference.\n+\t *\n+\t * @return The preferred locations based in input streams, or an empty iterable,\n+\t *         if there is no input-based preference.\n+\t */\n+\tstatic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocationsBasedOnInputs(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore,\n+\t\t\tfinal InputsLocationsRetriever inputsLocationsRetriever) {\n+\n+\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocations =\n+\t\t\tCompletableFuture.completedFuture(Collections.emptyList());\n+\n+\t\tfinal Collection<CompletableFuture<TaskManagerLocation>> locationsFutures = new ArrayList<>();\n+\n+\t\tfinal Collection<Collection<ExecutionVertexID>> allProducers =\n+\t\t\tinputsLocationsRetriever.getConsumedResultPartitionsProducers(executionVertexId);\n+\t\tfor (Collection<ExecutionVertexID> producers : allProducers) {\n+\n+\t\t\tfor (ExecutionVertexID producer : producers) {\n+\t\t\t\tfinal Optional<CompletableFuture<TaskManagerLocation>> optionalLocationFuture;\n+\t\t\t\tif (!producersToIgnore.contains(producer)) {\n+\t\t\t\t\toptionalLocationFuture = inputsLocationsRetriever.getTaskManagerLocation(producer);\n+\t\t\t\t} else {\n+\t\t\t\t\toptionalLocationFuture = Optional.empty();\n+\t\t\t\t}\n+\t\t\t\toptionalLocationFuture.ifPresent(locationsFutures::add);\n+\t\t\t\t// If the parallelism is large, wait for all futures coming back may cost a long time.\n+\t\t\t\tif (locationsFutures.size() > MAX_DISTINCT_LOCATIONS_TO_CONSIDER) {\n+\t\t\t\t\tlocationsFutures.clear();\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}", "originalCommit": "12baef7860f623166396fd8085542f46da92415b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5MDczNA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435890734", "bodyText": "Sure. it's good to have.\nI think we can also have a separate method for location combination.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODUyOQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436018529", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\nindex 1d1cb3c6cb9..84bc529ab97 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n\n@@ -19,7 +19,6 @@\n package org.apache.flink.runtime.scheduler;\n \n import org.apache.flink.runtime.concurrent.FutureUtils;\n-import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NjA3MQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434686071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal Set<ExecutionVertexID> producersToIgnore,\n          \n          \n            \n            \t\t\tfinal Collection<ExecutionVertexID> producersToIgnore,", "author": "azagrebin", "createdAt": "2020-06-03T16:08:43Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.runtime.executiongraph.ExecutionVertex.MAX_DISTINCT_LOCATIONS_TO_CONSIDER;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * Default implementation of {@link PreferredLocationsRetriever}.\n+ * Locations based on state will be returned if exist.\n+ * Otherwise locations based on inputs will be returned.\n+ */\n+public class DefaultPreferredLocationsRetriever implements PreferredLocationsRetriever {\n+\n+\tprivate final StateLocationRetriever stateLocationRetriever;\n+\n+\tprivate final InputsLocationsRetriever inputsLocationsRetriever;\n+\n+\tDefaultPreferredLocationsRetriever(\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever,\n+\t\t\tfinal InputsLocationsRetriever inputsLocationsRetriever) {\n+\n+\t\tthis.stateLocationRetriever = checkNotNull(stateLocationRetriever);\n+\t\tthis.inputsLocationsRetriever = checkNotNull(inputsLocationsRetriever);\n+\t}\n+\n+\t@Override\n+\tpublic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocations(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore) {\n+\n+\t\tcheckNotNull(executionVertexId);\n+\t\tcheckNotNull(producersToIgnore);\n+\n+\t\tfinal Collection<TaskManagerLocation> preferredLocationsBasedOnState =\n+\t\t\tgetPreferredLocationsBasedOnState(executionVertexId, stateLocationRetriever);\n+\t\tif (!preferredLocationsBasedOnState.isEmpty()) {\n+\t\t\treturn CompletableFuture.completedFuture(preferredLocationsBasedOnState);\n+\t\t}\n+\n+\t\treturn getPreferredLocationsBasedOnInputs(executionVertexId, producersToIgnore, inputsLocationsRetriever);\n+\t}\n+\n+\tprivate static Collection<TaskManagerLocation> getPreferredLocationsBasedOnState(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal StateLocationRetriever stateLocationRetriever) {\n+\n+\t\treturn stateLocationRetriever.getStateLocation(executionVertexId)\n+\t\t\t.map(Collections::singleton)\n+\t\t\t.orElse(Collections.emptySet());\n+\t}\n+\n+\t/**\n+\t * Gets the location preferences of the execution, as determined by the locations\n+\t * of the predecessors from which it receives input data.\n+\t * If there are more than {@link ExecutionVertex#MAX_DISTINCT_LOCATIONS_TO_CONSIDER} different locations of source data,\n+\t * or neither the sources have not been started nor will be started with the execution together,\n+\t * this method returns an empty collection to indicate no location preference.\n+\t *\n+\t * @return The preferred locations based in input streams, or an empty iterable,\n+\t *         if there is no input-based preference.\n+\t */\n+\tstatic CompletableFuture<Collection<TaskManagerLocation>> getPreferredLocationsBasedOnInputs(\n+\t\t\tfinal ExecutionVertexID executionVertexId,\n+\t\t\tfinal Set<ExecutionVertexID> producersToIgnore,", "originalCommit": "12baef7860f623166396fd8085542f46da92415b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NzY1OQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435877659", "bodyText": "I think requiring a set is better to ensure fast contains check with predictable complexity O(1).", "author": "zhuzhurk", "createdAt": "2020-06-05T12:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NjA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\nindex 1d1cb3c6cb9..84bc529ab97 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetriever.java\n\n@@ -19,7 +19,6 @@\n package org.apache.flink.runtime.scheduler;\n \n import org.apache.flink.runtime.concurrent.FutureUtils;\n-import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTQyOA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434691428", "bodyText": "withPreferredLocations and this.preferredLocations can be also removed", "author": "azagrebin", "createdAt": "2020-06-03T16:16:51Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionVertexSchedulingRequirements.java", "diffHunk": "@@ -169,8 +161,7 @@ public ExecutionVertexSchedulingRequirements build() {\n \t\t\t\ttaskResourceProfile,\n \t\t\t\tphysicalSlotResourceProfile,\n \t\t\t\tslotSharingGroupId,\n-\t\t\t\tcoLocationConstraint,\n-\t\t\t\tpreferredLocations);\n+\t\t\t\tcoLocationConstraint);", "originalCommit": "362a6480b17c1133aae420e09518b08482edf7e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODMxOA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436018318", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY5MTQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "a01697cea63bd65c23484c160bf6505c81568b92", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionVertexSchedulingRequirements.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionVertexSchedulingRequirements.java\nindex 70b8caa6d3f..1671f9d1a76 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionVertexSchedulingRequirements.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionVertexSchedulingRequirements.java\n\n@@ -161,7 +169,8 @@ public class ExecutionVertexSchedulingRequirements {\n \t\t\t\ttaskResourceProfile,\n \t\t\t\tphysicalSlotResourceProfile,\n \t\t\t\tslotSharingGroupId,\n-\t\t\t\tcoLocationConstraint);\n+\t\t\t\tcoLocationConstraint,\n+\t\t\t\tpreferredLocations);\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNzExNQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r434727115", "bodyText": "do we need this method calculatePreferredLocations?", "author": "azagrebin", "createdAt": "2020-06-03T17:13:34Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java", "diffHunk": "@@ -105,22 +104,11 @@ protected SlotExecutionVertexAssignment createAndRegisterSlotExecutionVertexAssi\n \t\treturn slotExecutionVertexAssignment;\n \t}\n \n-\t/**\n-\t * Calculates the preferred locations for an execution.\n-\t * It will first try to use preferred locations based on state,\n-\t * if null, will use the preferred locations based on inputs.\n-\t */\n-\tprotected static CompletableFuture<Collection<TaskManagerLocation>> calculatePreferredLocations(\n+\tprotected CompletableFuture<Collection<TaskManagerLocation>> calculatePreferredLocations(", "originalCommit": "cec2647b2ec7c33383fb0dc6010772572272b44c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3ODQ0Nw==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435878447", "bodyText": "I think it's good to have to allow subclasses to not be aware of the way to retrieve preferred locations.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNzExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NzM0NQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435887345", "bodyText": "Alright, then I believe preferredLocationsRetriever and pendingSlotAssignments fields can be private. Also the whole AbstractExecutionSlotAllocator can be package private and its protected constructor/methods. Any reason to keep them not package private?", "author": "azagrebin", "createdAt": "2020-06-05T12:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNzExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NjM1Ng==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435896356", "bodyText": "Yeah we can make it package private.\nIt is my oversight to make it public.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNzExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5ODEyMQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435898121", "bodyText": "This comment would be addressed in #12256 since I will rebase #12256 on this PR.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNzExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java\ndeleted file mode 100644\nindex 76f8fa9f818..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java\n+++ /dev/null\n\n@@ -1,134 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.scheduler;\n-\n-import org.apache.flink.annotation.VisibleForTesting;\n-import org.apache.flink.runtime.clusterframework.types.AllocationID;\n-import org.apache.flink.runtime.jobmaster.LogicalSlot;\n-import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n-import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Base class for all {@link ExecutionSlotAllocator}. It is responsible to allocate slots for tasks and\n- * keep the unfulfilled slot requests for further cancellation.\n- */\n-public abstract class AbstractExecutionSlotAllocator implements ExecutionSlotAllocator {\n-\n-\t/**\n-\t * Store the uncompleted slot assignments.\n-\t */\n-\tprotected final Map<ExecutionVertexID, SlotExecutionVertexAssignment> pendingSlotAssignments;\n-\n-\tprotected final PreferredLocationsRetriever preferredLocationsRetriever;\n-\n-\tpublic AbstractExecutionSlotAllocator(final PreferredLocationsRetriever preferredLocationsRetriever) {\n-\t\tthis.preferredLocationsRetriever = checkNotNull(preferredLocationsRetriever);\n-\t\tthis.pendingSlotAssignments = new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic void cancel(final ExecutionVertexID executionVertexId) {\n-\t\tfinal SlotExecutionVertexAssignment slotExecutionVertexAssignment = pendingSlotAssignments.get(executionVertexId);\n-\t\tif (slotExecutionVertexAssignment != null) {\n-\t\t\tslotExecutionVertexAssignment.getLogicalSlotFuture().cancel(false);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic CompletableFuture<Void> stop() {\n-\t\tfinal List<ExecutionVertexID> executionVertexIds = new ArrayList<>(pendingSlotAssignments.keySet());\n-\t\texecutionVertexIds.forEach(this::cancel);\n-\n-\t\treturn CompletableFuture.completedFuture(null);\n-\t}\n-\n-\tprotected void validateSchedulingRequirements(\n-\t\t\tfinal Collection<ExecutionVertexSchedulingRequirements> schedulingRequirements) {\n-\n-\t\tschedulingRequirements.stream()\n-\t\t\t.map(ExecutionVertexSchedulingRequirements::getExecutionVertexId)\n-\t\t\t.forEach(id -> checkState(\n-\t\t\t\t!pendingSlotAssignments.containsKey(id),\n-\t\t\t\t\"BUG: vertex %s tries to allocate a slot when its previous slot request is still pending\", id));\n-\t}\n-\n-\tprotected SlotExecutionVertexAssignment createAndRegisterSlotExecutionVertexAssignment(\n-\t\t\tfinal ExecutionVertexID executionVertexId,\n-\t\t\tfinal CompletableFuture<LogicalSlot> logicalSlotFuture,\n-\t\t\tfinal Consumer<Throwable> slotRequestFailureHandler) {\n-\n-\t\tfinal SlotExecutionVertexAssignment slotExecutionVertexAssignment =\n-\t\t\tnew SlotExecutionVertexAssignment(executionVertexId, logicalSlotFuture);\n-\n-\t\t// add to map first in case the slot future is already completed\n-\t\tpendingSlotAssignments.put(executionVertexId, slotExecutionVertexAssignment);\n-\n-\t\tlogicalSlotFuture.whenComplete(\n-\t\t\t(ignored, throwable) -> {\n-\t\t\t\tpendingSlotAssignments.remove(executionVertexId);\n-\t\t\t\tif (throwable != null) {\n-\t\t\t\t\tslotRequestFailureHandler.accept(throwable);\n-\t\t\t\t}\n-\t\t\t});\n-\n-\t\treturn slotExecutionVertexAssignment;\n-\t}\n-\n-\tprotected CompletableFuture<Collection<TaskManagerLocation>> calculatePreferredLocations(\n-\t\t\tfinal ExecutionVertexID executionVertexId,\n-\t\t\tfinal Set<ExecutionVertexID> producersToIgnore) {\n-\n-\t\treturn preferredLocationsRetriever.getPreferredLocations(executionVertexId, producersToIgnore);\n-\t}\n-\n-\t/**\n-\t * Computes and returns a set with the prior allocation ids from all execution vertices scheduled together.\n-\t *\n-\t * @param executionVertexSchedulingRequirements contains the execution vertices which are scheduled together\n-\t */\n-\t@VisibleForTesting\n-\tstatic Set<AllocationID> computeAllPriorAllocationIds(\n-\t\t\tfinal Collection<ExecutionVertexSchedulingRequirements> executionVertexSchedulingRequirements) {\n-\n-\t\treturn executionVertexSchedulingRequirements\n-\t\t\t.stream()\n-\t\t\t.map(ExecutionVertexSchedulingRequirements::getPreviousAllocationId)\n-\t\t\t.filter(Objects::nonNull)\n-\t\t\t.collect(Collectors.toSet());\n-\t}\n-\n-\t@VisibleForTesting\n-\tint getNumberOfPendingSlotAssignments() {\n-\t\treturn pendingSlotAssignments.size();\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NTQ4MA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435885480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal List<ExecutionVertexID> executionVertexIds = new ArrayList<>(pendingSlotAssignments.keySet());\n          \n          \n            \n            \t\texecutionVertexIds.forEach(this::cancel);\n          \n          \n            \n                    pendingSlotAssignments.keySet().forEach(this::cancel);\n          \n      \n    \n    \n  \n\nAny particular reason to use list?", "author": "azagrebin", "createdAt": "2020-06-05T12:23:55Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Base class for all {@link ExecutionSlotAllocator}. It is responsible to allocate slots for tasks and\n+ * keep the unfulfilled slot requests for further cancellation.\n+ */\n+public abstract class AbstractExecutionSlotAllocator implements ExecutionSlotAllocator {\n+\n+\t/**\n+\t * Store the uncompleted slot assignments.\n+\t */\n+\tprotected final Map<ExecutionVertexID, SlotExecutionVertexAssignment> pendingSlotAssignments;\n+\n+\tprotected final PreferredLocationsRetriever preferredLocationsRetriever;\n+\n+\tpublic AbstractExecutionSlotAllocator(final PreferredLocationsRetriever preferredLocationsRetriever) {\n+\t\tthis.preferredLocationsRetriever = checkNotNull(preferredLocationsRetriever);\n+\t\tthis.pendingSlotAssignments = new HashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void cancel(final ExecutionVertexID executionVertexId) {\n+\t\tfinal SlotExecutionVertexAssignment slotExecutionVertexAssignment = pendingSlotAssignments.get(executionVertexId);\n+\t\tif (slotExecutionVertexAssignment != null) {\n+\t\t\tslotExecutionVertexAssignment.getLogicalSlotFuture().cancel(false);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic CompletableFuture<Void> stop() {\n+\t\tfinal List<ExecutionVertexID> executionVertexIds = new ArrayList<>(pendingSlotAssignments.keySet());\n+\t\texecutionVertexIds.forEach(this::cancel);\n+", "originalCommit": "362a6480b17c1133aae420e09518b08482edf7e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTIwMQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435895201", "bodyText": "I think not. These code were moved without a careful check.\nBut maybe we can just remove the ExecutionSlotAllocator#stop() method given that it is never used in production.", "author": "zhuzhurk", "createdAt": "2020-06-05T12:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzNTE0MQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r435935141", "bodyText": "Indeed, it looks like we could change the existing hook for tests getNumberOfPendingSlotAssignments -> getPendingSlotAssignments.", "author": "azagrebin", "createdAt": "2020-06-05T13:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyNDM0Mg==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436024342", "bodyText": "ExecutionSlotAllocator#stop() is removed via hotfix 7a2dfb6", "author": "zhuzhurk", "createdAt": "2020-06-05T16:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NTQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyODgwOA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r436028808", "bodyText": "I will make the change \"getNumberOfPendingSlotAssignments -> getPendingSlotAssignments\" in #12256 when introducing AbstractExecutionSlotAllocator.\nIt would be good for verifying the existence of a given assignment.", "author": "zhuzhurk", "createdAt": "2020-06-05T16:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NTQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java\ndeleted file mode 100644\nindex 76f8fa9f818..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/AbstractExecutionSlotAllocator.java\n+++ /dev/null\n\n@@ -1,134 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.scheduler;\n-\n-import org.apache.flink.annotation.VisibleForTesting;\n-import org.apache.flink.runtime.clusterframework.types.AllocationID;\n-import org.apache.flink.runtime.jobmaster.LogicalSlot;\n-import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n-import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Base class for all {@link ExecutionSlotAllocator}. It is responsible to allocate slots for tasks and\n- * keep the unfulfilled slot requests for further cancellation.\n- */\n-public abstract class AbstractExecutionSlotAllocator implements ExecutionSlotAllocator {\n-\n-\t/**\n-\t * Store the uncompleted slot assignments.\n-\t */\n-\tprotected final Map<ExecutionVertexID, SlotExecutionVertexAssignment> pendingSlotAssignments;\n-\n-\tprotected final PreferredLocationsRetriever preferredLocationsRetriever;\n-\n-\tpublic AbstractExecutionSlotAllocator(final PreferredLocationsRetriever preferredLocationsRetriever) {\n-\t\tthis.preferredLocationsRetriever = checkNotNull(preferredLocationsRetriever);\n-\t\tthis.pendingSlotAssignments = new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic void cancel(final ExecutionVertexID executionVertexId) {\n-\t\tfinal SlotExecutionVertexAssignment slotExecutionVertexAssignment = pendingSlotAssignments.get(executionVertexId);\n-\t\tif (slotExecutionVertexAssignment != null) {\n-\t\t\tslotExecutionVertexAssignment.getLogicalSlotFuture().cancel(false);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic CompletableFuture<Void> stop() {\n-\t\tfinal List<ExecutionVertexID> executionVertexIds = new ArrayList<>(pendingSlotAssignments.keySet());\n-\t\texecutionVertexIds.forEach(this::cancel);\n-\n-\t\treturn CompletableFuture.completedFuture(null);\n-\t}\n-\n-\tprotected void validateSchedulingRequirements(\n-\t\t\tfinal Collection<ExecutionVertexSchedulingRequirements> schedulingRequirements) {\n-\n-\t\tschedulingRequirements.stream()\n-\t\t\t.map(ExecutionVertexSchedulingRequirements::getExecutionVertexId)\n-\t\t\t.forEach(id -> checkState(\n-\t\t\t\t!pendingSlotAssignments.containsKey(id),\n-\t\t\t\t\"BUG: vertex %s tries to allocate a slot when its previous slot request is still pending\", id));\n-\t}\n-\n-\tprotected SlotExecutionVertexAssignment createAndRegisterSlotExecutionVertexAssignment(\n-\t\t\tfinal ExecutionVertexID executionVertexId,\n-\t\t\tfinal CompletableFuture<LogicalSlot> logicalSlotFuture,\n-\t\t\tfinal Consumer<Throwable> slotRequestFailureHandler) {\n-\n-\t\tfinal SlotExecutionVertexAssignment slotExecutionVertexAssignment =\n-\t\t\tnew SlotExecutionVertexAssignment(executionVertexId, logicalSlotFuture);\n-\n-\t\t// add to map first in case the slot future is already completed\n-\t\tpendingSlotAssignments.put(executionVertexId, slotExecutionVertexAssignment);\n-\n-\t\tlogicalSlotFuture.whenComplete(\n-\t\t\t(ignored, throwable) -> {\n-\t\t\t\tpendingSlotAssignments.remove(executionVertexId);\n-\t\t\t\tif (throwable != null) {\n-\t\t\t\t\tslotRequestFailureHandler.accept(throwable);\n-\t\t\t\t}\n-\t\t\t});\n-\n-\t\treturn slotExecutionVertexAssignment;\n-\t}\n-\n-\tprotected CompletableFuture<Collection<TaskManagerLocation>> calculatePreferredLocations(\n-\t\t\tfinal ExecutionVertexID executionVertexId,\n-\t\t\tfinal Set<ExecutionVertexID> producersToIgnore) {\n-\n-\t\treturn preferredLocationsRetriever.getPreferredLocations(executionVertexId, producersToIgnore);\n-\t}\n-\n-\t/**\n-\t * Computes and returns a set with the prior allocation ids from all execution vertices scheduled together.\n-\t *\n-\t * @param executionVertexSchedulingRequirements contains the execution vertices which are scheduled together\n-\t */\n-\t@VisibleForTesting\n-\tstatic Set<AllocationID> computeAllPriorAllocationIds(\n-\t\t\tfinal Collection<ExecutionVertexSchedulingRequirements> executionVertexSchedulingRequirements) {\n-\n-\t\treturn executionVertexSchedulingRequirements\n-\t\t\t.stream()\n-\t\t\t.map(ExecutionVertexSchedulingRequirements::getPreviousAllocationId)\n-\t\t\t.filter(Objects::nonNull)\n-\t\t\t.collect(Collectors.toSet());\n-\t}\n-\n-\t@VisibleForTesting\n-\tint getNumberOfPendingSlotAssignments() {\n-\t\treturn pendingSlotAssignments.size();\n-\t}\n-}\n"}}, {"oid": "41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "url": "https://github.com/apache/flink/commit/41aca5619366e70bb2fd83b913ae9bdce3d4af6f", "message": "[FLINK-18034][runtime] Remove unused preferredLocations from ExecutionVertexSchedulingRequirements", "committedDate": "2020-06-05T16:02:55Z", "type": "forcePushed"}, {"oid": "979c16df9319f87d4b96ff32d7e55823d8e41551", "url": "https://github.com/apache/flink/commit/979c16df9319f87d4b96ff32d7e55823d8e41551", "message": "[hotfix][runtime] Remove ExecutionSlotAllocator#stop() which is never used in production", "committedDate": "2020-06-05T16:51:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1MTUwOA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r437951508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal DefaultPreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(\n          \n          \n            \n            \t\tfinal PreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(", "author": "azagrebin", "createdAt": "2020-06-10T08:28:28Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n+import org.apache.flink.runtime.jobgraph.JobVertexID;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests {@link DefaultPreferredLocationsRetriever}.\n+ */\n+public class DefaultPreferredLocationsRetrieverTest extends TestLogger {\n+\n+\t@Test\n+\tpublic void testStateLocationsWillBeReturnedIfExist() {\n+\t\tfinal TaskManagerLocation stateLocation = new LocalTaskManagerLocation();\n+\n+\t\tfinal TestingInputsLocationsRetriever.Builder locationRetrieverBuilder =\n+\t\t\tnew TestingInputsLocationsRetriever.Builder();\n+\n+\t\tfinal ExecutionVertexID consumerId = new ExecutionVertexID(new JobVertexID(), 0);\n+\t\tfinal ExecutionVertexID producerId = new ExecutionVertexID(new JobVertexID(), 0);\n+\t\tlocationRetrieverBuilder.connectConsumerToProducer(consumerId, producerId);\n+\n+\t\tfinal TestingInputsLocationsRetriever inputsLocationsRetriever = locationRetrieverBuilder.build();\n+\n+\t\tinputsLocationsRetriever.markScheduled(producerId);\n+\n+\t\tfinal DefaultPreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(", "originalCommit": "04b6149593a3c9e41ab8e0c2f276edfa4420bc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1MjE0Mw==", "url": "https://github.com/apache/flink/pull/12423#discussion_r437952143", "bodyText": "Also in other tests", "author": "azagrebin", "createdAt": "2020-06-10T08:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1MTUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMTg4Ng==", "url": "https://github.com/apache/flink/pull/12423#discussion_r438021886", "bodyText": "done.", "author": "zhuzhurk", "createdAt": "2020-06-10T10:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1MTUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "a01697cea63bd65c23484c160bf6505c81568b92", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java\nindex 64cfa04af3a..5faf212c85a 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java\n\n@@ -59,7 +59,7 @@ public class DefaultPreferredLocationsRetrieverTest extends TestLogger {\n \n \t\tinputsLocationsRetriever.markScheduled(producerId);\n \n-\t\tfinal DefaultPreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(\n+\t\tfinal PreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(\n \t\t\tid -> Optional.of(stateLocation),\n \t\t\tinputsLocationsRetriever);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NDkwMQ==", "url": "https://github.com/apache/flink/pull/12423#discussion_r437954901", "bodyText": "Should we also assert that it contains only stateLocation even if producer got a location?", "author": "azagrebin", "createdAt": "2020-06-10T08:34:14Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.runtime.executiongraph.ExecutionVertex;\n+import org.apache.flink.runtime.jobgraph.JobVertexID;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests {@link DefaultPreferredLocationsRetriever}.\n+ */\n+public class DefaultPreferredLocationsRetrieverTest extends TestLogger {\n+\n+\t@Test\n+\tpublic void testStateLocationsWillBeReturnedIfExist() {\n+\t\tfinal TaskManagerLocation stateLocation = new LocalTaskManagerLocation();\n+\n+\t\tfinal TestingInputsLocationsRetriever.Builder locationRetrieverBuilder =\n+\t\t\tnew TestingInputsLocationsRetriever.Builder();\n+\n+\t\tfinal ExecutionVertexID consumerId = new ExecutionVertexID(new JobVertexID(), 0);\n+\t\tfinal ExecutionVertexID producerId = new ExecutionVertexID(new JobVertexID(), 0);\n+\t\tlocationRetrieverBuilder.connectConsumerToProducer(consumerId, producerId);\n+\n+\t\tfinal TestingInputsLocationsRetriever inputsLocationsRetriever = locationRetrieverBuilder.build();\n+\n+\t\tinputsLocationsRetriever.markScheduled(producerId);\n+\n+\t\tfinal DefaultPreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(\n+\t\t\tid -> Optional.of(stateLocation),\n+\t\t\tinputsLocationsRetriever);\n+\n+\t\tfinal CompletableFuture<Collection<TaskManagerLocation>> preferredLocations =\n+\t\t\tlocationsRetriever.getPreferredLocations(consumerId, Collections.emptySet());\n+\n+\t\tassertThat(preferredLocations.getNow(null), contains(stateLocation));", "originalCommit": "04b6149593a3c9e41ab8e0c2f276edfa4420bc5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxNzgxOA==", "url": "https://github.com/apache/flink/pull/12423#discussion_r438017818", "bodyText": "The contains matcher means it only contains elements of the given collection, in the given order.\nThe name is a bit confusing and I also misunderstood it many times.", "author": "zhuzhurk", "createdAt": "2020-06-10T10:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NDkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a01697cea63bd65c23484c160bf6505c81568b92", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java\nindex 64cfa04af3a..5faf212c85a 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultPreferredLocationsRetrieverTest.java\n\n@@ -59,7 +59,7 @@ public class DefaultPreferredLocationsRetrieverTest extends TestLogger {\n \n \t\tinputsLocationsRetriever.markScheduled(producerId);\n \n-\t\tfinal DefaultPreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(\n+\t\tfinal PreferredLocationsRetriever locationsRetriever = new DefaultPreferredLocationsRetriever(\n \t\t\tid -> Optional.of(stateLocation),\n \t\t\tinputsLocationsRetriever);\n \n"}}, {"oid": "a01697cea63bd65c23484c160bf6505c81568b92", "url": "https://github.com/apache/flink/commit/a01697cea63bd65c23484c160bf6505c81568b92", "message": "[FLINK-18034][runtime] Introduce PreferredLocationsRetriever", "committedDate": "2020-06-10T10:25:48Z", "type": "commit"}, {"oid": "7eede62c872233969e536672a65af8bac3fe3eae", "url": "https://github.com/apache/flink/commit/7eede62c872233969e536672a65af8bac3fe3eae", "message": "[FLINK-18034][runtime] ExecutionSlotAllocator uses PreferredLocationsRetriever to get preferred locations for tasks", "committedDate": "2020-06-10T10:25:49Z", "type": "commit"}, {"oid": "1f9342dab21f8362f8756eab4b1824b583516d4e", "url": "https://github.com/apache/flink/commit/1f9342dab21f8362f8756eab4b1824b583516d4e", "message": "[FLINK-18034][runtime] Remove unused preferredLocations from ExecutionVertexSchedulingRequirements", "committedDate": "2020-06-10T10:25:50Z", "type": "commit"}, {"oid": "1a11a1c46d6da2685140633a7298fbb301640e3d", "url": "https://github.com/apache/flink/commit/1a11a1c46d6da2685140633a7298fbb301640e3d", "message": "[hotfix][runtime] Remove ExecutionSlotAllocator#stop() which is never used in production", "committedDate": "2020-06-10T10:25:51Z", "type": "commit"}, {"oid": "1a11a1c46d6da2685140633a7298fbb301640e3d", "url": "https://github.com/apache/flink/commit/1a11a1c46d6da2685140633a7298fbb301640e3d", "message": "[hotfix][runtime] Remove ExecutionSlotAllocator#stop() which is never used in production", "committedDate": "2020-06-10T10:25:51Z", "type": "forcePushed"}]}