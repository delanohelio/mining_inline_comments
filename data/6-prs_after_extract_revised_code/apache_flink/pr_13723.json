{"pr_number": 13723, "pr_title": "[FlINK-19688][network] Don't cache InterruptedExceptions in PartitionRequestClientFactory", "pr_createdAt": "2020-10-21T11:39:24Z", "pr_url": "https://github.com/apache/flink/pull/13723", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2MjY5MQ==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509262691", "bodyText": "nit: let others know", "author": "AHeise", "createdAt": "2020-10-21T13:08:34Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactory.java", "diffHunk": "@@ -75,12 +73,24 @@ NettyPartitionRequestClient createPartitionRequestClient(ConnectionID connection\n \t\t\t\treturn new CompletableFuture<>();\n \t\t\t});\n \t\t\tif (isTheFirstOne.get()) {\n-\t\t\t\tcompleteFromCallable(clientFuture, () -> connectWithRetries(connectionId));\n+\t\t\t\ttry {\n+\t\t\t\t\tclientFuture.complete(connectWithRetries(connectionId));\n+\t\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t\tclientFuture.complete(null); // let know others waiting that they should retry", "originalCommit": "18772dddf0714c8ee47354a40d70f70ab9ac6387", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "71c15ebc8f5ee9d06956bdb4e0f7ff36b7a3a656", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactory.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactory.java\nindex 13203e84dc2..2c8f2cbea10 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactory.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactory.java\n\n@@ -76,7 +76,7 @@ class PartitionRequestClientFactory {\n \t\t\t\ttry {\n \t\t\t\t\tclientFuture.complete(connectWithRetries(connectionId));\n \t\t\t\t} catch (InterruptedException e) {\n-\t\t\t\t\tclientFuture.complete(null); // let know others waiting that they should retry\n+\t\t\t\t\tclientFuture.complete(null); // let others waiting know that they should retry\n \t\t\t\t\tthrow e;\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\tclientFuture.completeExceptionally(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwOQ==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509264809", "bodyText": "Sorry for the stupid question, but is this actually using the port for network traffic or is it just a dummy value?\nIf it's actually using, I'd propose to use port 0 (random free port).", "author": "AHeise", "createdAt": "2020-10-21T13:11:33Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactoryTest.java", "diffHunk": "@@ -58,6 +59,38 @@\n \n \tprivate static final int SERVER_PORT = NetUtils.getAvailablePort();\n \n+\t@Test\n+\tpublic void testInterruptsNotCached() throws Exception {\n+\t\tConnectionID connectionId = new ConnectionID(new InetSocketAddress(InetAddress.getLocalHost(), 8080), 0);", "originalCommit": "18772dddf0714c8ee47354a40d70f70ab9ac6387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxNTAzNg==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509315036", "bodyText": "It's a port netty will to connect to. So it doesn't matter which port to use (as long we aren't interested in any results).\nThis port is also used throughout the class.", "author": "rkhachatryan", "createdAt": "2020-10-21T14:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYwOTk3Nw==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509609977", "bodyText": "I'm more worried that the test will fail if something else is running on that port.", "author": "AHeise", "createdAt": "2020-10-21T19:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYxNjU3MQ==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509616571", "bodyText": "The request will likely fail (usually nothing is running on 8080), but the result is ignored, so it won't affect the test.", "author": "rkhachatryan", "createdAt": "2020-10-21T19:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2OTMxOA==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509969318", "bodyText": "Okay if the test is not affected by that I'll merge.", "author": "AHeise", "createdAt": "2020-10-22T08:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2NDgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "71c15ebc8f5ee9d06956bdb4e0f7ff36b7a3a656", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactoryTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactoryTest.java\nindex 6948cf6e958..5c736ab2f12 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactoryTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactoryTest.java\n\n@@ -62,14 +62,15 @@ public class PartitionRequestClientFactoryTest {\n \t@Test\n \tpublic void testInterruptsNotCached() throws Exception {\n \t\tConnectionID connectionId = new ConnectionID(new InetSocketAddress(InetAddress.getLocalHost(), 8080), 0);\n-\t\tAwaitingNettyClient nettyClient = new AwaitingNettyClient();\n-\t\tPartitionRequestClientFactory factory = new PartitionRequestClientFactory(nettyClient, 0);\n+\t\ttry (AwaitingNettyClient nettyClient = new AwaitingNettyClient()) {\n+\t\t\tPartitionRequestClientFactory factory = new PartitionRequestClientFactory(nettyClient, 0);\n \n-\t\tnettyClient.awaitForInterrupts = true;\n-\t\tconnectAndInterrupt(factory, connectionId);\n+\t\t\tnettyClient.awaitForInterrupts = true;\n+\t\t\tconnectAndInterrupt(factory, connectionId);\n \n-\t\tnettyClient.awaitForInterrupts = false;\n-\t\tfactory.createPartitionRequestClient(connectionId);\n+\t\t\tnettyClient.awaitForInterrupts = false;\n+\t\t\tfactory.createPartitionRequestClient(connectionId);\n+\t\t}\n \t}\n \n \tprivate void connectAndInterrupt(PartitionRequestClientFactory factory, ConnectionID connectionId) throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2ODY1Mw==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509268653", "bodyText": "Could we use CompleteChannelFuture as a base to avoid all the no-ops?", "author": "AHeise", "createdAt": "2020-10-21T13:16:29Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/NeverCompletingChannelFuture.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.netty;\n+\n+import org.apache.flink.shaded.netty4.io.netty.channel.Channel;\n+import org.apache.flink.shaded.netty4.io.netty.channel.ChannelFuture;\n+import org.apache.flink.shaded.netty4.io.netty.util.concurrent.Future;\n+import org.apache.flink.shaded.netty4.io.netty.util.concurrent.GenericFutureListener;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+@SuppressWarnings({\"InfiniteLoopStatement\", \"BusyWait\"})\n+class NeverCompletingChannelFuture implements ChannelFuture {", "originalCommit": "18772dddf0714c8ee47354a40d70f70ab9ac6387", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxNjA1OA==", "url": "https://github.com/apache/flink/pull/13723#discussion_r509316058", "bodyText": "It requires a non-null channel and I wanted to avoid creating a channel unnecessarily. I also couldn't find any suitable channel implementation.", "author": "rkhachatryan", "createdAt": "2020-10-21T14:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2ODY1Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "71c15ebc8f5ee9d06956bdb4e0f7ff36b7a3a656", "url": "https://github.com/apache/flink/commit/71c15ebc8f5ee9d06956bdb4e0f7ff36b7a3a656", "message": "[FlINK-19688][network] Don't cache InterruptedExceptions in PartitionRequestClientFactory", "committedDate": "2020-10-21T14:02:02Z", "type": "commit"}, {"oid": "71c15ebc8f5ee9d06956bdb4e0f7ff36b7a3a656", "url": "https://github.com/apache/flink/commit/71c15ebc8f5ee9d06956bdb4e0f7ff36b7a3a656", "message": "[FlINK-19688][network] Don't cache InterruptedExceptions in PartitionRequestClientFactory", "committedDate": "2020-10-21T14:02:02Z", "type": "forcePushed"}]}