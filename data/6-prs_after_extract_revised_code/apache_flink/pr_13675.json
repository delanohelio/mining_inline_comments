{"pr_number": 13675, "pr_title": "[FLINK-19655][flink-table-runtime-blink]  add super.open() and write unit test for temporal process join", "pr_createdAt": "2020-10-18T06:57:15Z", "pr_url": "https://github.com/apache/flink/pull/13675", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyMzUxOQ==", "url": "https://github.com/apache/flink/pull/13675#discussion_r507323519", "bodyText": "single blank line", "author": "leonardBang", "createdAt": "2020-10-19T01:29:34Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join.temporal;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.util.KeyedTwoInputStreamOperatorTestHarness;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.generated.GeneratedJoinCondition;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.runtime.util.BinaryRowDataKeySelector;\n+import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.VarCharType;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+\n+", "originalCommit": "448ec948b7aed52ae72d0229acfbc70f39eacd1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3MTQyMg==", "url": "https://github.com/apache/flink/pull/13675#discussion_r508571422", "bodyText": "fixed.", "author": "seunjjs", "createdAt": "2020-10-20T14:44:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyMzUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\nindex 8185f7af91..96088b6a5e 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\n\n@@ -35,7 +35,6 @@ import java.util.List;\n \n import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n \n-\n /**\n  * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDAxNw==", "url": "https://github.com/apache/flink/pull/13675#discussion_r507324017", "bodyText": "move function call of super to the beginning", "author": "leonardBang", "createdAt": "2020-10-19T01:30:21Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java", "diffHunk": "@@ -73,6 +73,7 @@ public void open() throws Exception {\n \t\tthis.outRow = new JoinedRowData();\n \t\t// consider watermark from left stream only.\n \t\tsuper.processWatermark2(Watermark.MAX_WATERMARK);\n+\t\tsuper.open();", "originalCommit": "448ec948b7aed52ae72d0229acfbc70f39eacd1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNjU4Mg==", "url": "https://github.com/apache/flink/pull/13675#discussion_r507326582", "bodyText": "and I believe TemporalRowTimeJoinOperator.java exists same problem, could you help fix?", "author": "leonardBang", "createdAt": "2020-10-19T01:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NDk4Mg==", "url": "https://github.com/apache/flink/pull/13675#discussion_r508574982", "bodyText": "fixed.", "author": "seunjjs", "createdAt": "2020-10-20T14:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java\nindex 1f41adec99..65d95aae8f 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java\n\n@@ -73,7 +74,6 @@ public class LegacyTemporalProcessTimeJoinOperator\n \t\tthis.outRow = new JoinedRowData();\n \t\t// consider watermark from left stream only.\n \t\tsuper.processWatermark2(Watermark.MAX_WATERMARK);\n-\t\tsuper.open();\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDg1MA==", "url": "https://github.com/apache/flink/pull/13675#discussion_r507324850", "bodyText": "final int maxRententionTime = minRetentionTime * 3 / 2\nwe can reuse  maxRententionTime in following code", "author": "leonardBang", "createdAt": "2020-10-19T01:31:44Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join.temporal;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.util.KeyedTwoInputStreamOperatorTestHarness;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.generated.GeneratedJoinCondition;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.runtime.util.BinaryRowDataKeySelector;\n+import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.VarCharType;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+\n+\n+/**\n+ * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n+ */\n+public class LegacyTemporalProcessTimeJoinOperatorTest {\n+\n+\tprivate int keyIdx = 0;\n+\tprivate InternalTypeInfo<RowData> rowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate TypeInformation<RowData> keyType = InternalTypeInfo.ofFields();\n+\tprivate BinaryRowDataKeySelector keySelector = new BinaryRowDataKeySelector(\n+\t\t\tnew int[]{keyIdx},\n+\t\t\trowType.toRowFieldTypes());\n+\tprivate InternalTypeInfo<RowData> outputRowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(outputRowType.toRowFieldTypes());\n+\tprivate String funcCode =\n+\t\t\t\"public class ProcTimeTemporalJoinCondition extends org.apache.flink.api.common.functions.AbstractRichFunction implements org.apache.flink.table.runtime.generated.JoinCondition {\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    public ProcTimeTemporalJoinCondition(Object[] reference) {\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    @Override\\n\"\n+\t\t\t\t\t+ \"    public boolean apply(org.apache.flink.table.data.RowData in1, org.apache.flink.table.data.RowData in2) {\\n\"\n+\t\t\t\t\t+ \"        return true;\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"}\\n\";\n+\n+\tprivate GeneratedJoinCondition joinCondition = new GeneratedJoinCondition(\n+\t\t\t\"ProcTimeTemporalJoinCondition\",\n+\t\t\tfuncCode,\n+\t\t\tnew Object[0]);\n+\n+\t/** test proctime temporal join when non state clear. **/\n+\t@Test\n+\tpublic void testProcTimeTemporalJoin() throws Exception {\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\t0,\n+\t\t\t\t0);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(4);\n+\t\ttestHarness.processElement2(insertRecord(1L, \"1a4\"));\n+\n+\t\ttestHarness.setProcessingTime(5);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\t\texpectedOutput.add(insertRecord(1L, \"1a5\", 1L, \"1a4\"));\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\t/** test proctime temporal join when set state clear. **/\n+\t@Test\n+\tpublic void testStateCleanUp() throws Exception {\n+\t\tfinal int minRetentionTime = 10;\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\tminRetentionTime,\n+\t\t\t\tminRetentionTime * 3 / 2);", "originalCommit": "448ec948b7aed52ae72d0229acfbc70f39eacd1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3MzM1Nw==", "url": "https://github.com/apache/flink/pull/13675#discussion_r508573357", "bodyText": "fixed.", "author": "seunjjs", "createdAt": "2020-10-20T14:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\nindex 8185f7af91..96088b6a5e 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\n\n@@ -35,7 +35,6 @@ import java.util.List;\n \n import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n \n-\n /**\n  * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyOTY2Mg==", "url": "https://github.com/apache/flink/pull/13675#discussion_r507329662", "bodyText": "checkstyle: one blank line at the end of file", "author": "leonardBang", "createdAt": "2020-10-19T01:39:06Z", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join.temporal;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.util.KeyedTwoInputStreamOperatorTestHarness;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.generated.GeneratedJoinCondition;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.runtime.util.BinaryRowDataKeySelector;\n+import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.VarCharType;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+\n+\n+/**\n+ * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n+ */\n+public class LegacyTemporalProcessTimeJoinOperatorTest {\n+\n+\tprivate int keyIdx = 0;\n+\tprivate InternalTypeInfo<RowData> rowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate TypeInformation<RowData> keyType = InternalTypeInfo.ofFields();\n+\tprivate BinaryRowDataKeySelector keySelector = new BinaryRowDataKeySelector(\n+\t\t\tnew int[]{keyIdx},\n+\t\t\trowType.toRowFieldTypes());\n+\tprivate InternalTypeInfo<RowData> outputRowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(outputRowType.toRowFieldTypes());\n+\tprivate String funcCode =\n+\t\t\t\"public class ProcTimeTemporalJoinCondition extends org.apache.flink.api.common.functions.AbstractRichFunction implements org.apache.flink.table.runtime.generated.JoinCondition {\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    public ProcTimeTemporalJoinCondition(Object[] reference) {\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    @Override\\n\"\n+\t\t\t\t\t+ \"    public boolean apply(org.apache.flink.table.data.RowData in1, org.apache.flink.table.data.RowData in2) {\\n\"\n+\t\t\t\t\t+ \"        return true;\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"}\\n\";\n+\n+\tprivate GeneratedJoinCondition joinCondition = new GeneratedJoinCondition(\n+\t\t\t\"ProcTimeTemporalJoinCondition\",\n+\t\t\tfuncCode,\n+\t\t\tnew Object[0]);\n+\n+\t/** test proctime temporal join when non state clear. **/\n+\t@Test\n+\tpublic void testProcTimeTemporalJoin() throws Exception {\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\t0,\n+\t\t\t\t0);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(4);\n+\t\ttestHarness.processElement2(insertRecord(1L, \"1a4\"));\n+\n+\t\ttestHarness.setProcessingTime(5);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\t\texpectedOutput.add(insertRecord(1L, \"1a5\", 1L, \"1a4\"));\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\t/** test proctime temporal join when set state clear. **/\n+\t@Test\n+\tpublic void testStateCleanUp() throws Exception {\n+\t\tfinal int minRetentionTime = 10;\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\tminRetentionTime,\n+\t\t\t\tminRetentionTime * 3 / 2);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(3 + minRetentionTime * 3 / 2);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\tprivate KeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> createTestHarness(\n+\t\t\tLegacyTemporalProcessTimeJoinOperator temporalJoinOperator)\n+\t\t\tthrows Exception {\n+\n+\t\treturn new KeyedTwoInputStreamOperatorTestHarness<>(\n+\t\t\t\ttemporalJoinOperator,\n+\t\t\t\tkeySelector,\n+\t\t\t\tkeySelector,\n+\t\t\t\tkeyType);\n+\t}\n+\n+}", "originalCommit": "448ec948b7aed52ae72d0229acfbc70f39eacd1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\nindex 8185f7af91..96088b6a5e 100644\n--- a/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\n+++ b/flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java\n\n@@ -35,7 +35,6 @@ import java.util.List;\n \n import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n \n-\n /**\n  * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n  */\n"}}, {"oid": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "url": "https://github.com/apache/flink/commit/ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporal process join", "committedDate": "2020-10-19T15:37:05Z", "type": "forcePushed"}, {"oid": "3ba11b505818c2672d0c58c200c01fb587576ae2", "url": "https://github.com/apache/flink/commit/3ba11b505818c2672d0c58c200c01fb587576ae2", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin", "committedDate": "2020-10-20T14:31:05Z", "type": "forcePushed"}, {"oid": "73572634efa485ad88df75ba50d3b6ff0755ec8a", "url": "https://github.com/apache/flink/commit/73572634efa485ad88df75ba50d3b6ff0755ec8a", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin", "committedDate": "2020-10-20T14:43:41Z", "type": "commit"}, {"oid": "73572634efa485ad88df75ba50d3b6ff0755ec8a", "url": "https://github.com/apache/flink/commit/73572634efa485ad88df75ba50d3b6ff0755ec8a", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin", "committedDate": "2020-10-20T14:43:41Z", "type": "forcePushed"}, {"oid": "a519bdb797522fb8fa35fa54ff6572a56ef5596f", "url": "https://github.com/apache/flink/commit/a519bdb797522fb8fa35fa54ff6572a56ef5596f", "message": "[FLINK-19655][table-runtime-blink] format code style", "committedDate": "2020-10-21T14:16:06Z", "type": "commit"}]}