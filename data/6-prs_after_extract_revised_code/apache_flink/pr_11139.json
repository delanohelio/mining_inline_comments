{"pr_number": 11139, "pr_title": " [FLINK-16015][filesystems]Throw an error when a plugin for a known scheme is missing.", "pr_createdAt": "2020-02-19T12:32:14Z", "pr_url": "https://github.com/apache/flink/pull/11139", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI2MTgyOQ==", "url": "https://github.com/apache/flink/pull/11139#discussion_r381261829", "bodyText": "any better exception type?", "author": "AHeise", "createdAt": "2020-02-19T12:32:47Z", "path": "flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java", "diffHunk": "@@ -440,8 +455,18 @@ public static FileSystem getUnguardedFileSystem(final URI fsUri) throws IOExcept\n \t\t\t\ttry (TemporaryClassLoaderContext classLoaderContext = new TemporaryClassLoaderContext(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n+\t\t\t} else if (DIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n+\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n+\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(", "originalCommit": "c550a19361c90006b335dc954b7ae0c3b176e7a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2379fa8fe1aff33083c1fa9d32984626d8071f34", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\nindex 202212cdd8..744d18bb90 100644\n--- a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n+++ b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n\n@@ -452,21 +437,11 @@ public abstract class FileSystem {\n \n \t\t\tif (factory != null) {\n \t\t\t\tClassLoader classLoader = factory.getClassLoader();\n-\t\t\t\ttry (TemporaryClassLoaderContext classLoaderContext = new TemporaryClassLoaderContext(classLoader)) {\n+\t\t\t\ttry (TemporaryClassLoaderContext ignored = TemporaryClassLoaderContext.of(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t} else if (DIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n-\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n-\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(\n-\t\t\t\t\t\"Could not find a file system implementation for scheme '%s'. The scheme is \" +\n-\t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +\n-\t\t\t\t\t\t\"plugin resides within its own subfolder within the plugins directory. See https://ci.apache\" +\n-\t\t\t\t\t\t\".org/projects/flink/flink-docs-master/ops/plugins.html for more information.\",\n-\t\t\t\t\t\turi.getScheme(),\n-\t\t\t\t\t\tplugins.size() == 1 ? \"\" : \"s\",\n-\t\t\t\t\t\tString.join(\", \", plugins)\n-\t\t\t\t\t));\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\ttry {\n \t\t\t\t\tfs = FALLBACK_FACTORY.create(uri);\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3NzQ2MA==", "url": "https://github.com/apache/flink/pull/11139#discussion_r381477460", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\".org/projects/flink/flink-docs-master/ops/plugins.html for more information.\",\n          \n          \n            \n            \t\t\t\t\t\t\".org/projects/flink/flink-docs-stable/ops/plugins.html for more information.\",", "author": "zentol", "createdAt": "2020-02-19T18:55:55Z", "path": "flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java", "diffHunk": "@@ -440,8 +455,18 @@ public static FileSystem getUnguardedFileSystem(final URI fsUri) throws IOExcept\n \t\t\t\ttry (TemporaryClassLoaderContext classLoaderContext = new TemporaryClassLoaderContext(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n+\t\t\t} else if (DIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n+\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n+\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(\n+\t\t\t\t\t\"Could not find a file system implementation for scheme '%s'. The scheme is \" +\n+\t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +\n+\t\t\t\t\t\t\"plugin resides within its own subfolder within the plugins directory. See https://ci.apache\" +\n+\t\t\t\t\t\t\".org/projects/flink/flink-docs-master/ops/plugins.html for more information.\",", "originalCommit": "c550a19361c90006b335dc954b7ae0c3b176e7a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2379fa8fe1aff33083c1fa9d32984626d8071f34", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\nindex 202212cdd8..744d18bb90 100644\n--- a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n+++ b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n\n@@ -452,21 +437,11 @@ public abstract class FileSystem {\n \n \t\t\tif (factory != null) {\n \t\t\t\tClassLoader classLoader = factory.getClassLoader();\n-\t\t\t\ttry (TemporaryClassLoaderContext classLoaderContext = new TemporaryClassLoaderContext(classLoader)) {\n+\t\t\t\ttry (TemporaryClassLoaderContext ignored = TemporaryClassLoaderContext.of(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t} else if (DIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n-\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n-\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(\n-\t\t\t\t\t\"Could not find a file system implementation for scheme '%s'. The scheme is \" +\n-\t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +\n-\t\t\t\t\t\t\"plugin resides within its own subfolder within the plugins directory. See https://ci.apache\" +\n-\t\t\t\t\t\t\".org/projects/flink/flink-docs-master/ops/plugins.html for more information.\",\n-\t\t\t\t\t\turi.getScheme(),\n-\t\t\t\t\t\tplugins.size() == 1 ? \"\" : \"s\",\n-\t\t\t\t\t\tString.join(\", \", plugins)\n-\t\t\t\t\t));\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\ttry {\n \t\t\t\t\tfs = FALLBACK_FACTORY.create(uri);\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3NzQ2OA==", "url": "https://github.com/apache/flink/pull/11139#discussion_r381477468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +\n          \n          \n            \n            \t\t\t\t\t\t\"directly supported by Flink through the following plugin%: %s. Please ensure that each \" +", "author": "zentol", "createdAt": "2020-02-19T18:55:56Z", "path": "flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java", "diffHunk": "@@ -440,8 +455,18 @@ public static FileSystem getUnguardedFileSystem(final URI fsUri) throws IOExcept\n \t\t\t\ttry (TemporaryClassLoaderContext classLoaderContext = new TemporaryClassLoaderContext(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n+\t\t\t} else if (DIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n+\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n+\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(\n+\t\t\t\t\t\"Could not find a file system implementation for scheme '%s'. The scheme is \" +\n+\t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +", "originalCommit": "c550a19361c90006b335dc954b7ae0c3b176e7a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1OTk2MA==", "url": "https://github.com/apache/flink/pull/11139#discussion_r381859960", "bodyText": "This line would add an s if there multiple plugins (s3).", "author": "AHeise", "createdAt": "2020-02-20T08:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ3NzQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "2379fa8fe1aff33083c1fa9d32984626d8071f34", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\nindex 202212cdd8..744d18bb90 100644\n--- a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n+++ b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n\n@@ -452,21 +437,11 @@ public abstract class FileSystem {\n \n \t\t\tif (factory != null) {\n \t\t\t\tClassLoader classLoader = factory.getClassLoader();\n-\t\t\t\ttry (TemporaryClassLoaderContext classLoaderContext = new TemporaryClassLoaderContext(classLoader)) {\n+\t\t\t\ttry (TemporaryClassLoaderContext ignored = TemporaryClassLoaderContext.of(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t} else if (DIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n-\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n-\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(\n-\t\t\t\t\t\"Could not find a file system implementation for scheme '%s'. The scheme is \" +\n-\t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +\n-\t\t\t\t\t\t\"plugin resides within its own subfolder within the plugins directory. See https://ci.apache\" +\n-\t\t\t\t\t\t\".org/projects/flink/flink-docs-master/ops/plugins.html for more information.\",\n-\t\t\t\t\t\turi.getScheme(),\n-\t\t\t\t\t\tplugins.size() == 1 ? \"\" : \"s\",\n-\t\t\t\t\t\tString.join(\", \", plugins)\n-\t\t\t\t\t));\n-\t\t\t} else {\n+\t\t\t}\n+\t\t\telse {\n \t\t\t\ttry {\n \t\t\t\t\tfs = FALLBACK_FACTORY.create(uri);\n \t\t\t\t}\n"}}, {"oid": "2379fa8fe1aff33083c1fa9d32984626d8071f34", "url": "https://github.com/apache/flink/commit/2379fa8fe1aff33083c1fa9d32984626d8071f34", "message": "[hotfix][hdfs] Fixed error message when using HadoopRecoverableWriter on non hdfs.", "committedDate": "2020-02-26T12:39:49Z", "type": "commit"}, {"oid": "2ffd051a696370a2422ff1b96af0c8cc1f50c57f", "url": "https://github.com/apache/flink/commit/2ffd051a696370a2422ff1b96af0c8cc1f50c57f", "message": "[FLINK-16015][filesystems]Throw an error when a plugin for a known scheme is missing.\n\nThe error also avoid Hadoop fallback being used for s3 or other directly supported schemes.\nAlso added a config to allow overridden this check for specific schemes.", "committedDate": "2020-02-26T12:41:02Z", "type": "forcePushed"}, {"oid": "77c59494bb11c3dc45c3ebe45ecdcd4ba16c09c0", "url": "https://github.com/apache/flink/commit/77c59494bb11c3dc45c3ebe45ecdcd4ba16c09c0", "message": "[FLINK-16015][filesystems]Throw an error when a plugin for a known scheme is missing.\n\nThe error also avoid Hadoop fallback being used for s3 or other directly supported schemes.\nAlso added a config to allow overridden this check for specific schemes.", "committedDate": "2020-02-26T13:10:36Z", "type": "forcePushed"}, {"oid": "dfc656c0e56d0c8389953803fb6172cda1f87662", "url": "https://github.com/apache/flink/commit/dfc656c0e56d0c8389953803fb6172cda1f87662", "message": "[FLINK-16015][filesystems]Throw an error when a plugin for a known scheme is missing.\n\nThe error also avoid Hadoop fallback being used for s3 or other directly supported schemes.\nAlso added a config to allow overridden this check for specific schemes.", "committedDate": "2020-02-27T13:52:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTMzOQ==", "url": "https://github.com/apache/flink/pull/11139#discussion_r385571339", "bodyText": "I'm not sure if I like the DIRECTLY_SUPPORTED_FILESYSTEM list, since if it drifts out of sync, it can start decreasing the usability.\nMaybe as a way to mitigate this issue, we should add a reference to https://ci.apache.org/projects/flink/flink-docs-stable/ops/filesystems/ for further/more precise  informations?", "author": "pnowojski", "createdAt": "2020-02-28T08:47:28Z", "path": "flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java", "diffHunk": "@@ -440,8 +467,21 @@ public static FileSystem getUnguardedFileSystem(final URI fsUri) throws IOExcept\n \t\t\t\ttry (TemporaryClassLoaderContext ignored = TemporaryClassLoaderContext.of(classLoader)) {\n \t\t\t\t\tfs = factory.create(uri);\n \t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n+\t\t\t} else if (!ALLOWED_FALLBACK_FILESYSTEMS.contains(uri.getScheme()) &&\n+\t\t\t\t\tDIRECTLY_SUPPORTED_FILESYSTEM.containsKey(uri.getScheme())) {\n+\t\t\t\tfinal Collection<String> plugins = DIRECTLY_SUPPORTED_FILESYSTEM.get(uri.getScheme());\n+\t\t\t\tthrow new UnsupportedFileSystemSchemeException(String.format(\n+\t\t\t\t\t\"Could not find a file system implementation for scheme '%s'. The scheme is \" +\n+\t\t\t\t\t\t\"directly supported by Flink through the following plugin%s: %s. Please ensure that each \" +\n+\t\t\t\t\t\t\"plugin resides within its own subfolder within the plugins directory. See https://ci.apache\" +\n+\t\t\t\t\t\t\".org/projects/flink/flink-docs-stable/ops/plugins.html for more information. If you want to \" +\n+\t\t\t\t\t\t\"use a Hadoop file system for that scheme, please add the scheme to the configuration fs\" +\n+\t\t\t\t\t\t\".allowed-fallback-filesystems.\",\n+\t\t\t\t\t\turi.getScheme(),\n+\t\t\t\t\t\tplugins.size() == 1 ? \"\" : \"s\",\n+\t\t\t\t\t\tString.join(\", \", plugins)\n+\t\t\t\t\t));", "originalCommit": "dfc656c0e56d0c8389953803fb6172cda1f87662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2ODMzOQ==", "url": "https://github.com/apache/flink/pull/11139#discussion_r385668339", "bodyText": "Added reference.", "author": "AHeise", "createdAt": "2020-02-28T12:27:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTMzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "903572997e4792d5777efd195f11ada6054d09ed", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\nindex 1dab8cdc36..ba5c0c0350 100644\n--- a/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n+++ b/flink-core/src/main/java/org/apache/flink/core/fs/FileSystem.java\n\n@@ -476,7 +476,8 @@ public abstract class FileSystem {\n \t\t\t\t\t\t\"plugin resides within its own subfolder within the plugins directory. See https://ci.apache\" +\n \t\t\t\t\t\t\".org/projects/flink/flink-docs-stable/ops/plugins.html for more information. If you want to \" +\n \t\t\t\t\t\t\"use a Hadoop file system for that scheme, please add the scheme to the configuration fs\" +\n-\t\t\t\t\t\t\".allowed-fallback-filesystems.\",\n+\t\t\t\t\t\t\".allowed-fallback-filesystems. For a full list of supported file systems, \" +\n+\t\t\t\t\t\t\"please see https://ci.apache.org/projects/flink/flink-docs-stable/ops/filesystems/.\",\n \t\t\t\t\t\turi.getScheme(),\n \t\t\t\t\t\tplugins.size() == 1 ? \"\" : \"s\",\n \t\t\t\t\t\tString.join(\", \", plugins)\n"}}, {"oid": "903572997e4792d5777efd195f11ada6054d09ed", "url": "https://github.com/apache/flink/commit/903572997e4792d5777efd195f11ada6054d09ed", "message": "[FLINK-16015][filesystems]Throw an error when a plugin for a known scheme is missing.\n\nThe error also avoid Hadoop fallback being used for s3 or other directly supported schemes.\nAlso added a config to allow overridden this check for specific schemes.", "committedDate": "2020-02-28T09:31:52Z", "type": "commit"}, {"oid": "903572997e4792d5777efd195f11ada6054d09ed", "url": "https://github.com/apache/flink/commit/903572997e4792d5777efd195f11ada6054d09ed", "message": "[FLINK-16015][filesystems]Throw an error when a plugin for a known scheme is missing.\n\nThe error also avoid Hadoop fallback being used for s3 or other directly supported schemes.\nAlso added a config to allow overridden this check for specific schemes.", "committedDate": "2020-02-28T09:31:52Z", "type": "forcePushed"}]}