{"pr_number": 13090, "pr_title": "[FLINK-18844][json][maxwell] Support maxwell-json format to read Maxwell changelogs", "pr_createdAt": "2020-08-08T03:36:57Z", "pr_url": "https://github.com/apache/flink/pull/13090", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NDU1NQ==", "url": "https://github.com/apache/flink/pull/13090#discussion_r467774555", "bodyText": "We don't need to compare with canal-json in the comment. From my point of view, canal-json is a special case in encoding. You can just mention the \"data\" is the new image of insertion.", "author": "wuchong", "createdAt": "2020-08-10T09:05:45Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.maxwell;\n+\n+import org.apache.flink.api.common.serialization.DeserializationSchema;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.formats.json.JsonRowDataDeserializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+import org.apache.flink.util.Collector;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Deserialization schema from Maxwell JSON to Flink Table/SQL internal data structure {@link RowData}.\n+ * The deserialization schema knows Maxwell's schema definition and can extract the database data\n+ * and convert into {@link RowData} with {@link RowKind}.\n+ *\n+ * <p>Deserializes a <code>byte[]</code> message as a JSON object and reads\n+ * the specified fields.\n+ *\n+ * <p>Failures during deserialization are forwarded as wrapped IOExceptions.\n+ *\n+ * @see <a href=\"http://maxwells-daemon.io/\">Maxwell</a>\n+ */\n+public class MaxwellJsonDeserializationSchema implements DeserializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final String OP_INSERT = \"insert\";\n+\tprivate static final String OP_UPDATE = \"update\";\n+\tprivate static final String OP_DELETE = \"delete\";\n+\n+\t/** The deserializer to deserialize Maxwell JSON data. */\n+\tprivate final JsonRowDataDeserializationSchema jsonDeserializer;\n+\n+\t/** TypeInformation of the produced {@link RowData}. **/\n+\tprivate final TypeInformation<RowData> resultTypeInfo;\n+\n+\t/** Flag indicating whether to ignore invalid fields/rows (default: throw an exception). */\n+\tprivate final boolean ignoreParseErrors;\n+\n+\t/** Number of fields. */\n+\tprivate final int fieldCount;\n+\n+\tpublic MaxwellJsonDeserializationSchema(RowType rowType,\n+\t\t\t\t\t\t\t\t\t\t\tTypeInformation<RowData> resultTypeInfo,\n+\t\t\t\t\t\t\t\t\t\t\tboolean ignoreParseErrors,\n+\t\t\t\t\t\t\t\t\t\t\tTimestampFormat timestampFormatOption) {\n+\t\tthis.resultTypeInfo = resultTypeInfo;\n+\t\tthis.ignoreParseErrors = ignoreParseErrors;\n+\t\tthis.fieldCount = rowType.getFieldCount();\n+\t\tthis.jsonDeserializer = new JsonRowDataDeserializationSchema(\n+\t\t\tcreateJsonRowType(fromLogicalToDataType(rowType)),\n+\t\t\t// the result type is never used, so it's fine to pass in Canal's result type\n+\t\t\tresultTypeInfo,\n+\t\t\tfalse, // ignoreParseErrors already contains the functionality of failOnMissingField\n+\t\t\tignoreParseErrors,\n+\t\t\ttimestampFormatOption);\n+\t}\n+\n+\t@Override\n+\tpublic RowData deserialize(byte[] message) throws IOException {\n+\t\tthrow new RuntimeException(\n+\t\t\t\"Please invoke DeserializationSchema#deserialize(byte[], Collector<RowData>) instead.\");\n+\t}\n+\n+\t@Override\n+\tpublic void deserialize(byte[] message, Collector<RowData> out) throws IOException {\n+\t\ttry {\n+\t\t\tRowData row = jsonDeserializer.deserialize(message);\n+\t\t\tString type = row.getString(2).toString(); // \"type\" field\n+\t\t\tif (OP_INSERT.equals(type)) {\n+\t\t\t\t// difference with canal-json is that the \"data\" section in canal-json contains Array <Row <>>,\n+\t\t\t\t// and maxwell-json is Row <>\n+\t\t\t\t// So just take out Row<> in row and collect it", "originalCommit": "3faa1b539faff3a59454cf9710ea69f4dd395e05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c527896a27f2b12500b6b730ce07ab97ccbafff0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\nindex f461ed2812a..c34ab559762 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\n\n@@ -68,9 +68,9 @@ public class MaxwellJsonDeserializationSchema implements DeserializationSchema<R\n \tprivate final int fieldCount;\n \n \tpublic MaxwellJsonDeserializationSchema(RowType rowType,\n-\t\t\t\t\t\t\t\t\t\t\tTypeInformation<RowData> resultTypeInfo,\n-\t\t\t\t\t\t\t\t\t\t\tboolean ignoreParseErrors,\n-\t\t\t\t\t\t\t\t\t\t\tTimestampFormat timestampFormatOption) {\n+\t\t\tTypeInformation<RowData> resultTypeInfo,\n+\t\t\tboolean ignoreParseErrors,\n+\t\t\tTimestampFormat timestampFormatOption) {\n \t\tthis.resultTypeInfo = resultTypeInfo;\n \t\tthis.ignoreParseErrors = ignoreParseErrors;\n \t\tthis.fieldCount = rowType.getFieldCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3NjM5MA==", "url": "https://github.com/apache/flink/pull/13090#discussion_r467776390", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic MaxwellJsonDeserializationSchema(RowType rowType,\n          \n          \n            \n            \t\t\t\t\t\t\t\t\t\t\tTypeInformation<RowData> resultTypeInfo,\n          \n          \n            \n            \t\t\t\t\t\t\t\t\t\t\tboolean ignoreParseErrors,\n          \n          \n            \n            \t\t\t\t\t\t\t\t\t\t\tTimestampFormat timestampFormatOption) {\n          \n          \n            \n            \tpublic MaxwellJsonDeserializationSchema(\n          \n          \n            \n            \t\t\tRowType rowType,\n          \n          \n            \n            \t\t\tTypeInformation<RowData> resultTypeInfo,\n          \n          \n            \n            \t\t\tboolean ignoreParseErrors,\n          \n          \n            \n            \t\t\tTimestampFormat timestampFormatOption) {\n          \n      \n    \n    \n  \n\nIndent.", "author": "wuchong", "createdAt": "2020-08-10T09:09:41Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.maxwell;\n+\n+import org.apache.flink.api.common.serialization.DeserializationSchema;\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.formats.json.JsonRowDataDeserializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+import org.apache.flink.util.Collector;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Deserialization schema from Maxwell JSON to Flink Table/SQL internal data structure {@link RowData}.\n+ * The deserialization schema knows Maxwell's schema definition and can extract the database data\n+ * and convert into {@link RowData} with {@link RowKind}.\n+ *\n+ * <p>Deserializes a <code>byte[]</code> message as a JSON object and reads\n+ * the specified fields.\n+ *\n+ * <p>Failures during deserialization are forwarded as wrapped IOExceptions.\n+ *\n+ * @see <a href=\"http://maxwells-daemon.io/\">Maxwell</a>\n+ */\n+public class MaxwellJsonDeserializationSchema implements DeserializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final String OP_INSERT = \"insert\";\n+\tprivate static final String OP_UPDATE = \"update\";\n+\tprivate static final String OP_DELETE = \"delete\";\n+\n+\t/** The deserializer to deserialize Maxwell JSON data. */\n+\tprivate final JsonRowDataDeserializationSchema jsonDeserializer;\n+\n+\t/** TypeInformation of the produced {@link RowData}. **/\n+\tprivate final TypeInformation<RowData> resultTypeInfo;\n+\n+\t/** Flag indicating whether to ignore invalid fields/rows (default: throw an exception). */\n+\tprivate final boolean ignoreParseErrors;\n+\n+\t/** Number of fields. */\n+\tprivate final int fieldCount;\n+\n+\tpublic MaxwellJsonDeserializationSchema(RowType rowType,\n+\t\t\t\t\t\t\t\t\t\t\tTypeInformation<RowData> resultTypeInfo,\n+\t\t\t\t\t\t\t\t\t\t\tboolean ignoreParseErrors,\n+\t\t\t\t\t\t\t\t\t\t\tTimestampFormat timestampFormatOption) {", "originalCommit": "3faa1b539faff3a59454cf9710ea69f4dd395e05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c527896a27f2b12500b6b730ce07ab97ccbafff0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\nindex f461ed2812a..c34ab559762 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonDeserializationSchema.java\n\n@@ -68,9 +68,9 @@ public class MaxwellJsonDeserializationSchema implements DeserializationSchema<R\n \tprivate final int fieldCount;\n \n \tpublic MaxwellJsonDeserializationSchema(RowType rowType,\n-\t\t\t\t\t\t\t\t\t\t\tTypeInformation<RowData> resultTypeInfo,\n-\t\t\t\t\t\t\t\t\t\t\tboolean ignoreParseErrors,\n-\t\t\t\t\t\t\t\t\t\t\tTimestampFormat timestampFormatOption) {\n+\t\t\tTypeInformation<RowData> resultTypeInfo,\n+\t\t\tboolean ignoreParseErrors,\n+\t\t\tTimestampFormat timestampFormatOption) {\n \t\tthis.resultTypeInfo = resultTypeInfo;\n \t\tthis.ignoreParseErrors = ignoreParseErrors;\n \t\tthis.fieldCount = rowType.getFieldCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3ODUxOA==", "url": "https://github.com/apache/flink/pull/13090#discussion_r467778518", "bodyText": "From the maxwell-data.txt, it seems that insert and delete doesn't produce old field. Shall we remove this?", "author": "wuchong", "createdAt": "2020-08-10T09:13:45Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.maxwell;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to maxwell-Json.\n+ */\n+public class MaxwellJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"insert\");\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"delete\");\n+\n+\tprivate final JsonRowDataSerializationSchema jsonSerializer;\n+\n+\t/**\n+\t * Timestamp format specification which is used to parse timestamp.\n+\t */\n+\tprivate final TimestampFormat timestampFormat;\n+\n+\tprivate transient GenericRowData reuse;\n+\n+\tpublic MaxwellJsonSerializationSchema(RowType rowType, TimestampFormat timestampFormat) {\n+\t\tthis.jsonSerializer = new JsonRowDataSerializationSchema(\n+\t\t\tcreateJsonRowType(fromLogicalToDataType(rowType)),\n+\t\t\ttimestampFormat);\n+\t\tthis.timestampFormat = timestampFormat;\n+\t}\n+\n+\t@Override\n+\tpublic void open(InitializationContext context) throws Exception {\n+\t\tthis.reuse = new GenericRowData(3);\n+\t}\n+\n+\t@Override\n+\tpublic byte[] serialize(RowData element) {\n+\t\treuse.setField(0, element);\n+\t\treuse.setField(1, null);\n+\t\treuse.setField(2, rowKind2String(element.getRowKind()));\n+\t\treturn jsonSerializer.serialize(reuse);\n+\t}\n+\n+\tprivate StringData rowKind2String(RowKind rowKind) {\n+\t\tswitch (rowKind) {\n+\t\t\tcase INSERT:\n+\t\t\tcase UPDATE_AFTER:\n+\t\t\t\treturn OP_INSERT;\n+\t\t\tcase UPDATE_BEFORE:\n+\t\t\tcase DELETE:\n+\t\t\t\treturn OP_DELETE;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation '\" + rowKind + \"' for row kind.\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tMaxwellJsonSerializationSchema that = (MaxwellJsonSerializationSchema) o;\n+\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer) &&\n+\t\t\ttimestampFormat == that.timestampFormat;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(jsonSerializer, timestampFormat);\n+\t}\n+\n+\tprivate RowType createJsonRowType(DataType databaseSchema) {\n+\t\tDataType payload = DataTypes.ROW(\n+\t\t\tDataTypes.FIELD(\"data\", databaseSchema),\n+\t\t\tDataTypes.FIELD(\"old\", databaseSchema),", "originalCommit": "3faa1b539faff3a59454cf9710ea69f4dd395e05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c527896a27f2b12500b6b730ce07ab97ccbafff0", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonSerializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonSerializationSchema.java\nindex 4615480300e..be9df5edc26 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonSerializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/maxwell/MaxwellJsonSerializationSchema.java\n\n@@ -60,14 +60,13 @@ public class MaxwellJsonSerializationSchema implements SerializationSchema<RowDa\n \n \t@Override\n \tpublic void open(InitializationContext context) throws Exception {\n-\t\tthis.reuse = new GenericRowData(3);\n+\t\tthis.reuse = new GenericRowData(2);\n \t}\n \n \t@Override\n \tpublic byte[] serialize(RowData element) {\n \t\treuse.setField(0, element);\n-\t\treuse.setField(1, null);\n-\t\treuse.setField(2, rowKind2String(element.getRowKind()));\n+\t\treuse.setField(1, rowKind2String(element.getRowKind()));\n \t\treturn jsonSerializer.serialize(reuse);\n \t}\n \n"}}, {"oid": "c527896a27f2b12500b6b730ce07ab97ccbafff0", "url": "https://github.com/apache/flink/commit/c527896a27f2b12500b6b730ce07ab97ccbafff0", "message": "[FLINK-18844][json][maxwell] Support maxwell-json format to read Maxwell changelogs\n\nThis closes #13090", "committedDate": "2020-08-11T11:58:08Z", "type": "commit"}, {"oid": "c527896a27f2b12500b6b730ce07ab97ccbafff0", "url": "https://github.com/apache/flink/commit/c527896a27f2b12500b6b730ce07ab97ccbafff0", "message": "[FLINK-18844][json][maxwell] Support maxwell-json format to read Maxwell changelogs\n\nThis closes #13090", "committedDate": "2020-08-11T11:58:08Z", "type": "forcePushed"}]}