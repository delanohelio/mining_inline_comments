{"pr_number": 12679, "pr_title": "[FLINK-18310][metrics] Properly handle interval parsing errors", "pr_createdAt": "2020-06-16T10:57:31Z", "pr_url": "https://github.com/apache/flink/pull/12679", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNzUwMA==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440937500", "bodyText": "Although, it is not very probable but possible test instability if the worker hangs for more than 10 sec.\nIn general, it would be nice to add a manual Clock to ManuallyTriggeredScheduledExecutor and inject it into MetricRegistryImpl constructor but this is an extra effort of course. Maybe a mocking executor would be easier.", "author": "azagrebin", "createdAt": "2020-06-16T15:21:57Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java", "diffHunk": "@@ -161,6 +161,26 @@ public void testReporterScheduling() throws Exception {\n \t\tregistry.shutdown().get();\n \t}\n \n+\t@Test\n+\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n+\t\tTestReporter3.reportCount = 0;\n+\n+\t\tMetricConfig config = new MetricConfig();\n+\t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n+\n+\t\tMetricRegistryImpl registry = new MetricRegistryImpl(\n+\t\t\tMetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n+\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())));\n+\t\ttry {\n+\t\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n+\t\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n+\t\t\tThread.sleep(2000);\n+\t\t\tAssert.assertEquals(0, TestReporter3.reportCount);", "originalCommit": "0170d15e5356c3c566d18fd2e530c951a4a1e5cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0eea6031d1a68968a2ef5a580eeba45724b4a24", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\nindex 963c5e6c85..eb820060da 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n\n@@ -162,20 +167,22 @@ public class MetricRegistryImplTest extends TestLogger {\n \t}\n \n \t@Test\n-\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n-\t\tTestReporter3.reportCount = 0;\n-\n+\tpublic void testReporterIntervalParsingErrorFallsBackToDefaultValue() throws Exception {\n \t\tMetricConfig config = new MetricConfig();\n+\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n+\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n \t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n \n+\t\tfinal ManuallyTriggeredScheduledExecutorService manuallyTriggeredScheduledExecutorService = new ManuallyTriggeredScheduledExecutorService();\n+\n \t\tMetricRegistryImpl registry = new MetricRegistryImpl(\n \t\t\tMetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())));\n+\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())),\n+\t\t\tmanuallyTriggeredScheduledExecutorService);\n \t\ttry {\n-\t\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n-\t\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n-\t\t\tThread.sleep(2000);\n-\t\t\tAssert.assertEquals(0, TestReporter3.reportCount);\n+\t\t\tCollection<ScheduledFuture<?>> scheduledTasks = manuallyTriggeredScheduledExecutorService.getScheduledTasks();\n+\t\t\tScheduledFuture<?> reportTask = Iterators.getOnlyElement(scheduledTasks.iterator());\n+\t\t\tAssert.assertEquals(MetricOptions.REPORTER_INTERVAL.defaultValue().getSeconds(), reportTask.getDelay(TimeUnit.SECONDS));\n \t\t} finally {\n \t\t\tregistry.shutdown().get();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MTM4OQ==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440941389", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n          \n          \n            \n                    long defaultIntervalMillis = MetricOptions.REPORTER_INTERVAL.defaultValue().toMillis();\n          \n          \n            \n                    long waitMillis = defaultIntervalMillis / 5;\n          \n          \n            \n                    long customMalformedIntervalSec =  defaultIntervalMillis / 10 / 1000;\n          \n          \n            \n            \t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, customMalformedIntervalSec + \" UNICORN\");", "author": "azagrebin", "createdAt": "2020-06-16T15:27:11Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java", "diffHunk": "@@ -161,6 +161,26 @@ public void testReporterScheduling() throws Exception {\n \t\tregistry.shutdown().get();\n \t}\n \n+\t@Test\n+\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n+\t\tTestReporter3.reportCount = 0;\n+\n+\t\tMetricConfig config = new MetricConfig();\n+\t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");", "originalCommit": "0170d15e5356c3c566d18fd2e530c951a4a1e5cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NzAwMQ==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440947001", "bodyText": "or at least explain a bit more the magic numbers in comments", "author": "azagrebin", "createdAt": "2020-06-16T15:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MTM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0eea6031d1a68968a2ef5a580eeba45724b4a24", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\nindex 963c5e6c85..eb820060da 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n\n@@ -162,20 +167,22 @@ public class MetricRegistryImplTest extends TestLogger {\n \t}\n \n \t@Test\n-\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n-\t\tTestReporter3.reportCount = 0;\n-\n+\tpublic void testReporterIntervalParsingErrorFallsBackToDefaultValue() throws Exception {\n \t\tMetricConfig config = new MetricConfig();\n+\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n+\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n \t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n \n+\t\tfinal ManuallyTriggeredScheduledExecutorService manuallyTriggeredScheduledExecutorService = new ManuallyTriggeredScheduledExecutorService();\n+\n \t\tMetricRegistryImpl registry = new MetricRegistryImpl(\n \t\t\tMetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())));\n+\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())),\n+\t\t\tmanuallyTriggeredScheduledExecutorService);\n \t\ttry {\n-\t\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n-\t\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n-\t\t\tThread.sleep(2000);\n-\t\t\tAssert.assertEquals(0, TestReporter3.reportCount);\n+\t\t\tCollection<ScheduledFuture<?>> scheduledTasks = manuallyTriggeredScheduledExecutorService.getScheduledTasks();\n+\t\t\tScheduledFuture<?> reportTask = Iterators.getOnlyElement(scheduledTasks.iterator());\n+\t\t\tAssert.assertEquals(MetricOptions.REPORTER_INTERVAL.defaultValue().getSeconds(), reportTask.getDelay(TimeUnit.SECONDS));\n \t\t} finally {\n \t\t\tregistry.shutdown().get();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MTQzMQ==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440941431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tThread.sleep(2000);\n          \n          \n            \n            \t\t\tThread.sleep(waitMillis);", "author": "azagrebin", "createdAt": "2020-06-16T15:27:14Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java", "diffHunk": "@@ -161,6 +161,26 @@ public void testReporterScheduling() throws Exception {\n \t\tregistry.shutdown().get();\n \t}\n \n+\t@Test\n+\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n+\t\tTestReporter3.reportCount = 0;\n+\n+\t\tMetricConfig config = new MetricConfig();\n+\t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n+\n+\t\tMetricRegistryImpl registry = new MetricRegistryImpl(\n+\t\t\tMetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n+\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())));\n+\t\ttry {\n+\t\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n+\t\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n+\t\t\tThread.sleep(2000);", "originalCommit": "0170d15e5356c3c566d18fd2e530c951a4a1e5cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0eea6031d1a68968a2ef5a580eeba45724b4a24", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\nindex 963c5e6c85..eb820060da 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n\n@@ -162,20 +167,22 @@ public class MetricRegistryImplTest extends TestLogger {\n \t}\n \n \t@Test\n-\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n-\t\tTestReporter3.reportCount = 0;\n-\n+\tpublic void testReporterIntervalParsingErrorFallsBackToDefaultValue() throws Exception {\n \t\tMetricConfig config = new MetricConfig();\n+\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n+\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n \t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n \n+\t\tfinal ManuallyTriggeredScheduledExecutorService manuallyTriggeredScheduledExecutorService = new ManuallyTriggeredScheduledExecutorService();\n+\n \t\tMetricRegistryImpl registry = new MetricRegistryImpl(\n \t\t\tMetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())));\n+\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())),\n+\t\t\tmanuallyTriggeredScheduledExecutorService);\n \t\ttry {\n-\t\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n-\t\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n-\t\t\tThread.sleep(2000);\n-\t\t\tAssert.assertEquals(0, TestReporter3.reportCount);\n+\t\t\tCollection<ScheduledFuture<?>> scheduledTasks = manuallyTriggeredScheduledExecutorService.getScheduledTasks();\n+\t\t\tScheduledFuture<?> reportTask = Iterators.getOnlyElement(scheduledTasks.iterator());\n+\t\t\tAssert.assertEquals(MetricOptions.REPORTER_INTERVAL.defaultValue().getSeconds(), reportTask.getDelay(TimeUnit.SECONDS));\n \t\t} finally {\n \t\t\tregistry.shutdown().get();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MjM1NA==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440942354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n          \n          \n            \n            \tpublic void testReporterIntervalParsingErrorFallbacksToDefaultValue() throws Exception {", "author": "azagrebin", "createdAt": "2020-06-16T15:28:26Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java", "diffHunk": "@@ -161,6 +161,26 @@ public void testReporterScheduling() throws Exception {\n \t\tregistry.shutdown().get();\n \t}\n \n+\t@Test\n+\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {", "originalCommit": "0170d15e5356c3c566d18fd2e530c951a4a1e5cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0eea6031d1a68968a2ef5a580eeba45724b4a24", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\nindex 963c5e6c85..eb820060da 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/metrics/MetricRegistryImplTest.java\n\n@@ -162,20 +167,22 @@ public class MetricRegistryImplTest extends TestLogger {\n \t}\n \n \t@Test\n-\tpublic void testReporterIntervalParsingErrorDoesNotResultInPartialApplication() throws Exception {\n-\t\tTestReporter3.reportCount = 0;\n-\n+\tpublic void testReporterIntervalParsingErrorFallsBackToDefaultValue() throws Exception {\n \t\tMetricConfig config = new MetricConfig();\n+\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n+\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n \t\tconfig.setProperty(ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, \"1 UNICORN\");\n \n+\t\tfinal ManuallyTriggeredScheduledExecutorService manuallyTriggeredScheduledExecutorService = new ManuallyTriggeredScheduledExecutorService();\n+\n \t\tMetricRegistryImpl registry = new MetricRegistryImpl(\n \t\t\tMetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n-\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())));\n+\t\t\tCollections.singletonList(ReporterSetup.forReporter(\"test\", config, new TestReporter3())),\n+\t\t\tmanuallyTriggeredScheduledExecutorService);\n \t\ttry {\n-\t\t\t// in a prior implementation the time amount was applied even if the time unit was invalid\n-\t\t\t// in this case this would imply using 1 SECOND as the interval (seconds is the default)\n-\t\t\tThread.sleep(2000);\n-\t\t\tAssert.assertEquals(0, TestReporter3.reportCount);\n+\t\t\tCollection<ScheduledFuture<?>> scheduledTasks = manuallyTriggeredScheduledExecutorService.getScheduledTasks();\n+\t\t\tScheduledFuture<?> reportTask = Iterators.getOnlyElement(scheduledTasks.iterator());\n+\t\t\tAssert.assertEquals(MetricOptions.REPORTER_INTERVAL.defaultValue().getSeconds(), reportTask.getDelay(TimeUnit.SECONDS));\n \t\t} finally {\n \t\t\tregistry.shutdown().get();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NDM5Mg==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440944392", "bodyText": "\ud83d\udc4d", "author": "azagrebin", "createdAt": "2020-06-16T15:31:08Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java", "diffHunk": "@@ -139,10 +138,10 @@ public MetricRegistryImpl(MetricRegistryConfiguration config, Collection<Reporte\n \t\t\t\t\tfinal String className = reporterInstance.getClass().getName();\n \n \t\t\t\t\tif (reporterInstance instanceof Scheduled) {\n-\t\t\t\t\t\tLOG.info(\"Periodically reporting metrics in intervals of {} {} for reporter {} of type {}.\", period, timeunit.name(), namedReporter, className);\n+\t\t\t\t\t\tLOG.info(\"Periodically reporting metrics in intervals of {} for reporter {} of type {}.\", TimeUtils.formatWithHighestUnit(period), namedReporter, className);\n \n \t\t\t\t\t\texecutor.scheduleWithFixedDelay(\n-\t\t\t\t\t\t\t\tnew MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period, period, timeunit);\n+\t\t\t\t\t\t\t\tnew MetricRegistryImpl.ReporterTask((Scheduled) reporterInstance), period.toMillis(), period.toMillis(), TimeUnit.MILLISECONDS);", "originalCommit": "0170d15e5356c3c566d18fd2e530c951a4a1e5cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc365c48ddbd146a976d6fe21c9de9cdef7a4d36", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java b/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java\nindex babb955cef..84450fc890 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java\n\n@@ -120,24 +125,12 @@ public class MetricRegistryImpl implements MetricRegistry {\n \t\t\t\tfinal String namedReporter = reporterSetup.getName();\n \n \t\t\t\ttry {\n-\t\t\t\t\tOptional<String> configuredPeriod = reporterSetup.getIntervalSettings();\n-\t\t\t\t\tDuration period = MetricOptions.REPORTER_INTERVAL.defaultValue();\n-\n-\t\t\t\t\tif (configuredPeriod.isPresent()) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tperiod = TimeUtils.parseDuration(configuredPeriod.get());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\t\t\tLOG.error(\"Cannot parse report interval from config: \" + configuredPeriod +\n-\t\t\t\t\t\t\t\t\t\" - please use values like '10 SECONDS' or '500 MILLISECONDS'. \" +\n-\t\t\t\t\t\t\t\t\t\"Using default reporting interval.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n \t\t\t\t\tfinal MetricReporter reporterInstance = reporterSetup.getReporter();\n \t\t\t\t\tfinal String className = reporterInstance.getClass().getName();\n \n \t\t\t\t\tif (reporterInstance instanceof Scheduled) {\n+\t\t\t\t\t\tfinal Duration period = getConfiguredIntervalOrDefault(reporterSetup);\n+\n \t\t\t\t\t\tLOG.info(\"Periodically reporting metrics in intervals of {} for reporter {} of type {}.\", TimeUtils.formatWithHighestUnit(period), namedReporter, className);\n \n \t\t\t\t\t\texecutor.scheduleWithFixedDelay(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTk4NQ==", "url": "https://github.com/apache/flink/pull/12679#discussion_r440945985", "bodyText": "nit: imo it would be nice to factor out period parsing into a method and use it in the if (reporterInstance instanceof Scheduled) where it is actually needed.", "author": "azagrebin", "createdAt": "2020-06-16T15:33:18Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java", "diffHunk": "@@ -119,14 +121,11 @@ public MetricRegistryImpl(MetricRegistryConfiguration config, Collection<Reporte\n \n \t\t\t\ttry {\n \t\t\t\t\tOptional<String> configuredPeriod = reporterSetup.getIntervalSettings();\n-\t\t\t\t\tTimeUnit timeunit = TimeUnit.SECONDS;\n-\t\t\t\t\tlong period = MetricOptions.REPORTER_INTERVAL.defaultValue().getSeconds();\n+\t\t\t\t\tDuration period = MetricOptions.REPORTER_INTERVAL.defaultValue();", "originalCommit": "0170d15e5356c3c566d18fd2e530c951a4a1e5cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc365c48ddbd146a976d6fe21c9de9cdef7a4d36", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java b/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java\nindex babb955cef..84450fc890 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricRegistryImpl.java\n\n@@ -120,24 +125,12 @@ public class MetricRegistryImpl implements MetricRegistry {\n \t\t\t\tfinal String namedReporter = reporterSetup.getName();\n \n \t\t\t\ttry {\n-\t\t\t\t\tOptional<String> configuredPeriod = reporterSetup.getIntervalSettings();\n-\t\t\t\t\tDuration period = MetricOptions.REPORTER_INTERVAL.defaultValue();\n-\n-\t\t\t\t\tif (configuredPeriod.isPresent()) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tperiod = TimeUtils.parseDuration(configuredPeriod.get());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (Exception e) {\n-\t\t\t\t\t\t\tLOG.error(\"Cannot parse report interval from config: \" + configuredPeriod +\n-\t\t\t\t\t\t\t\t\t\" - please use values like '10 SECONDS' or '500 MILLISECONDS'. \" +\n-\t\t\t\t\t\t\t\t\t\"Using default reporting interval.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n \t\t\t\t\tfinal MetricReporter reporterInstance = reporterSetup.getReporter();\n \t\t\t\t\tfinal String className = reporterInstance.getClass().getName();\n \n \t\t\t\t\tif (reporterInstance instanceof Scheduled) {\n+\t\t\t\t\t\tfinal Duration period = getConfiguredIntervalOrDefault(reporterSetup);\n+\n \t\t\t\t\t\tLOG.info(\"Periodically reporting metrics in intervals of {} for reporter {} of type {}.\", TimeUtils.formatWithHighestUnit(period), namedReporter, className);\n \n \t\t\t\t\t\texecutor.scheduleWithFixedDelay(\n"}}, {"oid": "d0eea6031d1a68968a2ef5a580eeba45724b4a24", "url": "https://github.com/apache/flink/commit/d0eea6031d1a68968a2ef5a580eeba45724b4a24", "message": "[FLINK-18310][metrics] Properly handle interval parsing errors", "committedDate": "2020-06-18T08:06:23Z", "type": "commit"}, {"oid": "dc365c48ddbd146a976d6fe21c9de9cdef7a4d36", "url": "https://github.com/apache/flink/commit/dc365c48ddbd146a976d6fe21c9de9cdef7a4d36", "message": "[hotfix][metrics] Only parse reporter interval if required", "committedDate": "2020-06-18T08:06:23Z", "type": "commit"}, {"oid": "dc365c48ddbd146a976d6fe21c9de9cdef7a4d36", "url": "https://github.com/apache/flink/commit/dc365c48ddbd146a976d6fe21c9de9cdef7a4d36", "message": "[hotfix][metrics] Only parse reporter interval if required", "committedDate": "2020-06-18T08:06:23Z", "type": "forcePushed"}]}