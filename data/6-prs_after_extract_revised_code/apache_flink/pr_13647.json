{"pr_number": 13647, "pr_title": "[FLINK-19640] Enable sorting inputs for batch", "pr_createdAt": "2020-10-15T09:59:16Z", "pr_url": "https://github.com/apache/flink/pull/13647", "timeline": [{"oid": "d85a53422831da189f70548103872742f65b9a8d", "url": "https://github.com/apache/flink/commit/d85a53422831da189f70548103872742f65b9a8d", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode.", "committedDate": "2020-10-15T10:02:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzNDMyMQ==", "url": "https://github.com/apache/flink/pull/13647#discussion_r505434321", "bodyText": "I would probably call this an ITCase since we test the interplay of a lot of parts. But I'm also ok to leave it as is because we currently don't have unit tests for individual TransformTranslators, which could be used to test this behaviour.", "author": "aljoscha", "createdAt": "2020-10-15T10:28:18Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java", "diffHunk": "@@ -0,0 +1,506 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.graph;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.ExecutionOptions;\n+import org.apache.flink.streaming.api.RuntimeExecutionMode;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.streaming.api.datastream.DataStreamSource;\n+import org.apache.flink.streaming.api.datastream.MultipleConnectedStreams;\n+import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.KeyedProcessFunction;\n+import org.apache.flink.streaming.api.functions.co.KeyedCoProcessFunction;\n+import org.apache.flink.streaming.api.functions.sink.DiscardingSink;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperator;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.ChainingStrategy;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.sorted.state.BatchExecutionStateBackend;\n+import org.apache.flink.streaming.api.transformations.KeyedMultipleInputTransformation;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.util.Collector;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for generating correct properties for sorting inputs in {@link RuntimeExecutionMode#BATCH} runtime mode.\n+ */\n+public class StreamGraphGeneratorBatchExecutionTest extends TestLogger {", "originalCommit": "d85a53422831da189f70548103872742f65b9a8d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java\nindex e74ad4f1940..4095ad5ff91 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java\n\n@@ -56,9 +56,9 @@ import java.util.List;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.instanceOf;\n-import static org.junit.Assert.assertFalse;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.junit.Assert.assertThat;\n-import static org.junit.Assert.assertTrue;\n \n /**\n  * Tests for generating correct properties for sorting inputs in {@link RuntimeExecutionMode#BATCH} runtime mode.\n"}}, {"oid": "d7b0469116070f12c0c2c3c15fb034978250e4b1", "url": "https://github.com/apache/flink/commit/d7b0469116070f12c0c2c3c15fb034978250e4b1", "message": "Add logs and fix adjusting chaining strategy", "committedDate": "2020-10-15T13:27:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDU2OQ==", "url": "https://github.com/apache/flink/pull/13647#discussion_r505564569", "bodyText": "Why not making the following like:\nCollection<Integer> ids = translateInternal(transformation, context);\nif (isKeyed && !isInputSelectable) {\n\t\ttransformation.setChainingStrategy(ChainingStrategy.HEAD);\n\t\tBatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n\t}\n\nThis will make the if () ... check being checked once. The same for the other translators.", "author": "kl0u", "createdAt": "2020-10-15T13:57:52Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java", "diffHunk": "@@ -51,7 +54,26 @@\n \tprotected Collection<Integer> translateForBatchInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n \t\t\tfinal Context context) {\n-\t\treturn translateInternal(transformation, context);\n+\t\tboolean isKeyed = transformation instanceof KeyedMultipleInputTransformation;\n+\t\tboolean isInputSelectable = isInputSelectable(transformation);", "originalCommit": "d7b0469116070f12c0c2c3c15fb034978250e4b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java\nindex 8688cd0d4bf..73d971cab8b 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java\n\n@@ -54,28 +51,14 @@ public class MultiInputTransformationTranslator<OUT>\n \tprotected Collection<Integer> translateForBatchInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n \t\t\tfinal Context context) {\n-\t\tboolean isKeyed = transformation instanceof KeyedMultipleInputTransformation;\n-\t\tboolean isInputSelectable = isInputSelectable(transformation);\n-\n-\t\tif (isKeyed && !isInputSelectable) {\n-\t\t\tBatchExecutionUtils.adjustChainingStrategy(transformation);\n-\t\t}\n \t\tCollection<Integer> ids = translateInternal(transformation, context);\n-\n-\t\tif (isKeyed && !isInputSelectable) {\n+\t\tboolean isKeyed = transformation instanceof KeyedMultipleInputTransformation;\n+\t\tif (isKeyed) {\n \t\t\tBatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n \t\t}\n \t\treturn ids;\n \t}\n \n-\t@SuppressWarnings(\"rawtypes\")\n-\tprivate boolean isInputSelectable(AbstractMultipleInputTransformation<OUT> transformation) {\n-\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-\t\tClass<? extends StreamOperator> operatorClass = transformation.getOperatorFactory()\n-\t\t\t.getStreamOperatorClass(classLoader);\n-\t\treturn InputSelectable.class.isAssignableFrom(operatorClass);\n-\t}\n-\n \t@Override\n \tprotected Collection<Integer> translateForStreamingInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODM1Nw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r505568357", "bodyText": "From what I understand, the flow is that we set the batch StateBackend and the timerService in the translator to the StreamNode so that the StreamJobGraphGenerator can pick it up. Why not setting the state backend and the timer service at the StreamGraph level (e.g. in. the StreamGraphGenerator.configureStreamGraph()) from where the StreamJobGraphGenerator can pick it up.\nThis seems to be able to reduce the changes in the StreamNode and the StreamJobGraphGenerator.\nWDYT @dawidwys ?", "author": "kl0u", "createdAt": "2020-10-15T14:02:29Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java", "diffHunk": "@@ -336,15 +341,30 @@ public void setUserHash(String userHash) {\n \t\tthis.userHash = userHash;\n \t}\n \n-\t@VisibleForTesting\n \tpublic void setSortedInputs(boolean sortedInputs) {\n \t\tthis.sortedInputs = sortedInputs;\n \t}\n \n-\tboolean getSortedInputs() {\n+\tpublic boolean getSortedInputs() {\n \t\treturn sortedInputs;\n \t}\n \n+\tpublic void setStateBackend(StateBackend stateBackend) {", "originalCommit": "d7b0469116070f12c0c2c3c15fb034978250e4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzOTkzNA==", "url": "https://github.com/apache/flink/pull/13647#discussion_r505639934", "bodyText": "After offline sync and some more thinking and I thought it is actually dangerous to set the state backend on a per node level. I will revert back to setting state backend only on the StreamGraph level and throw an exception if there is an InputSelectable operator for now.", "author": "dawidwys", "createdAt": "2020-10-15T15:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java\nindex 6967c97fd5a..1c7e94f3784 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java\n\n@@ -349,22 +344,6 @@ public class StreamNode {\n \t\treturn sortedInputs;\n \t}\n \n-\tpublic void setStateBackend(StateBackend stateBackend) {\n-\t\tthis.stateBackend = checkNotNull(stateBackend);\n-\t}\n-\n-\tpublic Optional<StateBackend> getStateBackend() {\n-\t\treturn Optional.ofNullable(stateBackend);\n-\t}\n-\n-\tpublic Optional<InternalTimeServiceManager.Provider> getTimeServiceProvider() {\n-\t\treturn Optional.ofNullable(timeServiceProvider);\n-\t}\n-\n-\tpublic void setTimeServiceProvider(InternalTimeServiceManager.Provider timeServiceProvider) {\n-\t\tthis.timeServiceProvider = checkNotNull(timeServiceProvider);\n-\t}\n-\n \tpublic Optional<OperatorCoordinator.Provider> getCoordinatorProvider(\n \t\t\tString operatorName,\n \t\t\tOperatorID operatorID) {\n"}}, {"oid": "c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "url": "https://github.com/apache/flink/commit/c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "message": "Revert setting state backend per streamNode & combine setting chaining with sorting", "committedDate": "2020-10-15T14:56:09Z", "type": "forcePushed"}, {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "url": "https://github.com/apache/flink/commit/fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "message": "Revert setting state backend per streamNode & combine setting chaining with sorting", "committedDate": "2020-10-15T14:59:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjAwMw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506132003", "bodyText": "Do we want to expose these to the user? Even if it is a power user. I lean more towards these being set depending on the selected execution mode in the StreamGraphGenerator (see #13656). This will also remove the need of passing the configuration to the generator", "author": "kl0u", "createdAt": "2020-10-16T07:42:49Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java", "diffHunk": "@@ -792,6 +792,12 @@ public void configure(ReadableConfig configuration, ClassLoader classLoader) {\n \t\t\t});\n \t\tconfig.configure(configuration, classLoader);\n \t\tcheckpointCfg.configure(configuration);\n+\t\tconfiguration.getOptional(ExecutionOptions.SORT_INPUTS).ifPresent(", "originalCommit": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0MTQ1Mg==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506141452", "bodyText": "I am rather strong on having an option to disable these features.\nFirst of all I think it is good to have feature flags, secondly it makes it possible to e.g. use the BATCH execution mode (scheduling + shuffles) with InputSelectable.", "author": "dawidwys", "createdAt": "2020-10-16T07:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NzA4Mw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506177083", "bodyText": "The way it is now though, the user has to explicitly state that he/she wants the BATCH state backend and timer service, right? Not the other way around. I would expect that even when we have the options available, when the runtime-mode is decided to be BATCH, the default behaviour would be to use the batch statebackend and timerservice.", "author": "kl0u", "createdAt": "2020-10-16T08:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3OTEzMA==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506179130", "bodyText": "Ok now I saw that the defaults are for the Batch statebackend and the timer service to be activated.", "author": "kl0u", "createdAt": "2020-10-16T08:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MTQ0Nw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506181447", "bodyText": "Yes, the options take effect only if the RuntimeExecutionMode.BATCH is enabled.", "author": "dawidwys", "createdAt": "2020-10-16T08:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\nindex be255a1ca1f..5ea4b731b62 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\n\n@@ -792,12 +792,6 @@ public class StreamExecutionEnvironment {\n \t\t\t});\n \t\tconfig.configure(configuration, classLoader);\n \t\tcheckpointCfg.configure(configuration);\n-\t\tconfiguration.getOptional(ExecutionOptions.SORT_INPUTS).ifPresent(\n-\t\t\tsortInputs -> this.getConfiguration().set(ExecutionOptions.SORT_INPUTS, sortInputs)\n-\t\t);\n-\t\tconfiguration.getOptional(ExecutionOptions.USE_BATCH_STATE_BACKEND).ifPresent(\n-\t\t\tsortInputs -> this.getConfiguration().set(ExecutionOptions.USE_BATCH_STATE_BACKEND, sortInputs)\n-\t\t);\n \t}\n \n \tprivate void registerCustomListeners(final ClassLoader classLoader, final List<String> listeners) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjU2Ng==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506132566", "bodyText": "I think this change is not needed anymore.", "author": "kl0u", "createdAt": "2020-10-16T07:43:31Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java", "diffHunk": "@@ -336,12 +336,11 @@ public void setUserHash(String userHash) {\n \t\tthis.userHash = userHash;\n \t}\n \n-\t@VisibleForTesting\n \tpublic void setSortedInputs(boolean sortedInputs) {\n \t\tthis.sortedInputs = sortedInputs;\n \t}\n \n-\tboolean getSortedInputs() {\n+\tpublic boolean getSortedInputs() {", "originalCommit": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NDE3Mw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506144173", "bodyText": "I made this change because I found it strange that setSortedInputs (which is a more concerning method) is public and the corresponding getter is in the default scope.\nThe setter must be public because it is used in BatchExecutionUtils in org.apache.flink.streaming.runtime.translators package.", "author": "dawidwys", "createdAt": "2020-10-16T07:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java\nindex 1c7e94f3784..3a75c38579b 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java\n\n@@ -336,11 +336,12 @@ public class StreamNode {\n \t\tthis.userHash = userHash;\n \t}\n \n+\t@VisibleForTesting\n \tpublic void setSortedInputs(boolean sortedInputs) {\n \t\tthis.sortedInputs = sortedInputs;\n \t}\n \n-\tpublic boolean getSortedInputs() {\n+\tboolean getSortedInputs() {\n \t\treturn sortedInputs;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMzI5Nw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506133297", "bodyText": "What about leaving some empty lines above and below?", "author": "kl0u", "createdAt": "2020-10-16T07:44:19Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -112,7 +117,7 @@\n \tprivate final ExecutionConfig executionConfig;\n \n \tprivate final CheckpointConfig checkpointConfig;\n-\n+\tprivate final ReadableConfig configuration;", "originalCommit": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\nindex 8b947b3ba84..c8d8ff0220e 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\n\n@@ -117,7 +112,7 @@ public class StreamGraphGenerator {\n \tprivate final ExecutionConfig executionConfig;\n \n \tprivate final CheckpointConfig checkpointConfig;\n-\tprivate final ReadableConfig configuration;\n+\n \tprivate StateBackend stateBackend;\n \n \tprivate boolean chaining = true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMzc5NA==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506133794", "bodyText": "What about \"Setting chaining strategy to HEAD for operator {}, because of the BATCH execution mode.\"?", "author": "kl0u", "createdAt": "2020-10-16T07:44:55Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/BatchExecutionUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.translators;\n+\n+import org.apache.flink.configuration.ExecutionOptions;\n+import org.apache.flink.core.memory.ManagedMemoryUseCase;\n+import org.apache.flink.streaming.api.graph.StreamNode;\n+import org.apache.flink.streaming.api.graph.TransformationTranslator;\n+import org.apache.flink.streaming.api.operators.ChainingStrategy;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A utility class for applying sorting inputs.\n+ */\n+class BatchExecutionUtils {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(BatchExecutionUtils.class);\n+\n+\tstatic void applySortingInputs(\n+\t\t\tint transformationId,\n+\t\t\tTransformationTranslator.Context context) {\n+\t\tStreamNode node = context.getStreamGraph().getStreamNode(transformationId);\n+\t\tboolean sortInputs = context.getGraphGeneratorConfig().get(ExecutionOptions.SORT_INPUTS);\n+\t\tboolean isInputSelectable = isInputSelectable(node);\n+\n+\t\tadjustChainingStrategy(node);\n+\n+\t\tcheckState(\n+\t\t\t!isInputSelectable || !sortInputs,\n+\t\t\t\"Batch state backend and sorting inputs are not supported in graphs with an InputSelectable operator.\"\n+\t\t);\n+\n+\t\tif (sortInputs) {\n+\t\t\tLOG.debug(\"Enabling sorting inputs for an operator {}.\", node);\n+\t\t\tnode.setSortedInputs(true);\n+\t\t\tMap<ManagedMemoryUseCase, Integer> operatorScopeUseCaseWeights = new HashMap<>();\n+\t\t\toperatorScopeUseCaseWeights.put(ManagedMemoryUseCase.BATCH_OP, 1);\n+\t\t\tnode.setManagedMemoryUseCaseWeights(\n+\t\t\t\toperatorScopeUseCaseWeights,\n+\t\t\t\tCollections.emptySet()\n+\t\t\t);\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static boolean isInputSelectable(StreamNode node) {\n+\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+\t\tClass<? extends StreamOperator> operatorClass = node.getOperatorFactory()\n+\t\t\t.getStreamOperatorClass(classLoader);\n+\t\treturn InputSelectable.class.isAssignableFrom(operatorClass);\n+\t}\n+\n+\tprivate static void adjustChainingStrategy(StreamNode node) {\n+\t\tStreamOperatorFactory<?> operatorFactory = node.getOperatorFactory();\n+\t\tChainingStrategy currentChainingStrategy = operatorFactory.getChainingStrategy();\n+\t\tswitch (currentChainingStrategy) {\n+\t\t\tcase ALWAYS:\n+\t\t\tcase HEAD_WITH_SOURCES:\n+\t\t\t\tLOG.debug(\n+\t\t\t\t\t\"Setting chaining strategy for an operator {}, because of the BATCH execution mode.\",", "originalCommit": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/BatchExecutionUtils.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/BatchExecutionUtils.java\ndeleted file mode 100644\nindex 88db2b6616b..00000000000\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/BatchExecutionUtils.java\n+++ /dev/null\n\n@@ -1,98 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.streaming.runtime.translators;\n-\n-import org.apache.flink.configuration.ExecutionOptions;\n-import org.apache.flink.core.memory.ManagedMemoryUseCase;\n-import org.apache.flink.streaming.api.graph.StreamNode;\n-import org.apache.flink.streaming.api.graph.TransformationTranslator;\n-import org.apache.flink.streaming.api.operators.ChainingStrategy;\n-import org.apache.flink.streaming.api.operators.InputSelectable;\n-import org.apache.flink.streaming.api.operators.StreamOperator;\n-import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * A utility class for applying sorting inputs.\n- */\n-class BatchExecutionUtils {\n-\tprivate static final Logger LOG = LoggerFactory.getLogger(BatchExecutionUtils.class);\n-\n-\tstatic void applySortingInputs(\n-\t\t\tint transformationId,\n-\t\t\tTransformationTranslator.Context context) {\n-\t\tStreamNode node = context.getStreamGraph().getStreamNode(transformationId);\n-\t\tboolean sortInputs = context.getGraphGeneratorConfig().get(ExecutionOptions.SORT_INPUTS);\n-\t\tboolean isInputSelectable = isInputSelectable(node);\n-\n-\t\tadjustChainingStrategy(node);\n-\n-\t\tcheckState(\n-\t\t\t!isInputSelectable || !sortInputs,\n-\t\t\t\"Batch state backend and sorting inputs are not supported in graphs with an InputSelectable operator.\"\n-\t\t);\n-\n-\t\tif (sortInputs) {\n-\t\t\tLOG.debug(\"Enabling sorting inputs for an operator {}.\", node);\n-\t\t\tnode.setSortedInputs(true);\n-\t\t\tMap<ManagedMemoryUseCase, Integer> operatorScopeUseCaseWeights = new HashMap<>();\n-\t\t\toperatorScopeUseCaseWeights.put(ManagedMemoryUseCase.BATCH_OP, 1);\n-\t\t\tnode.setManagedMemoryUseCaseWeights(\n-\t\t\t\toperatorScopeUseCaseWeights,\n-\t\t\t\tCollections.emptySet()\n-\t\t\t);\n-\t\t}\n-\t}\n-\n-\t@SuppressWarnings(\"rawtypes\")\n-\tprivate static boolean isInputSelectable(StreamNode node) {\n-\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n-\t\tClass<? extends StreamOperator> operatorClass = node.getOperatorFactory()\n-\t\t\t.getStreamOperatorClass(classLoader);\n-\t\treturn InputSelectable.class.isAssignableFrom(operatorClass);\n-\t}\n-\n-\tprivate static void adjustChainingStrategy(StreamNode node) {\n-\t\tStreamOperatorFactory<?> operatorFactory = node.getOperatorFactory();\n-\t\tChainingStrategy currentChainingStrategy = operatorFactory.getChainingStrategy();\n-\t\tswitch (currentChainingStrategy) {\n-\t\t\tcase ALWAYS:\n-\t\t\tcase HEAD_WITH_SOURCES:\n-\t\t\t\tLOG.debug(\n-\t\t\t\t\t\"Setting chaining strategy for an operator {}, because of the BATCH execution mode.\",\n-\t\t\t\t\tnode);\n-\t\t\t\toperatorFactory.setChainingStrategy(ChainingStrategy.HEAD);\n-\t\t\t\tbreak;\n-\t\t\tcase NEVER:\n-\t\t\tcase HEAD:\n-\t\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\tprivate BatchExecutionUtils() {\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzNDYzMA==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506134630", "bodyText": "In some places you use the name ids and in other translators nodeIds. What about make them uniform?", "author": "kl0u", "createdAt": "2020-10-16T07:46:07Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java", "diffHunk": "@@ -51,7 +51,12 @@\n \tprotected Collection<Integer> translateForBatchInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n \t\t\tfinal Context context) {\n-\t\treturn translateInternal(transformation, context);\n+\t\tCollection<Integer> ids = translateInternal(transformation, context);", "originalCommit": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java\nindex 73d971cab8b..46bc4c7a881 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java\n\n@@ -51,12 +51,7 @@ public class MultiInputTransformationTranslator<OUT>\n \tprotected Collection<Integer> translateForBatchInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n \t\t\tfinal Context context) {\n-\t\tCollection<Integer> ids = translateInternal(transformation, context);\n-\t\tboolean isKeyed = transformation instanceof KeyedMultipleInputTransformation;\n-\t\tif (isKeyed) {\n-\t\t\tBatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n-\t\t}\n-\t\treturn ids;\n+\t\treturn translateInternal(transformation, context);\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzNTE4NQ==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506135185", "bodyText": "Given that we also set the timerService, maybe give a more descriptive name?", "author": "kl0u", "createdAt": "2020-10-16T07:46:56Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -239,13 +259,28 @@ private void configureStreamGraph(final StreamGraph graph) {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n+\t\t\tsetBatchStateBackend(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.EAGER);\n \t\t}\n \t}\n \n+\tprivate void setBatchStateBackend(StreamGraph graph) {", "originalCommit": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\nindex 8b947b3ba84..c8d8ff0220e 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\n\n@@ -259,7 +239,6 @@ public class StreamGraphGenerator {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n-\t\t\tsetBatchStateBackend(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MDI1Mw==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506180253", "bodyText": "\"Using BATCH execution state backend and timer service.\"", "author": "kl0u", "createdAt": "2020-10-16T08:44:02Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -239,13 +261,28 @@ private void configureStreamGraph(final StreamGraph graph) {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n+\t\t\tsetBatchStateBackendAndTimerService(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.EAGER);\n \t\t}\n \t}\n \n+\tprivate void setBatchStateBackendAndTimerService(StreamGraph graph) {\n+\t\tboolean useStateBackend = configuration.get(ExecutionOptions.USE_BATCH_STATE_BACKEND);\n+\t\tboolean sortInputs = configuration.get(ExecutionOptions.SORT_INPUTS);\n+\t\tcheckState(\n+\t\t\t!useStateBackend || sortInputs,\n+\t\t\t\"Batch state backend requires the sorted inputs to be enabled!\");\n+\n+\t\tif (useStateBackend) {\n+\t\t\tLOG.debug(\"Using BATCH execution state backend.\");", "originalCommit": "c25c53d285406037a409fc0c95fba9eaff59b98a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MTcxOA==", "url": "https://github.com/apache/flink/pull/13647#discussion_r506181718", "bodyText": "Nit: Can't we move https://github.com/apache/flink/pull/13647/files#diff-54c8fe1971ffb5aa55b3f829f43aa02c7765b62c397f0c943b4049a4fd1e3a62R253 to the else{} block in lines 266...? I find it more clear than write and then overwrite.", "author": "kl0u", "createdAt": "2020-10-16T08:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MDI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\nindex 4667cb17731..c8d8ff0220e 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java\n\n@@ -261,7 +239,6 @@ public class StreamGraphGenerator {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n-\t\t\tsetBatchStateBackendAndTimerService(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n"}}, {"oid": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "url": "https://github.com/apache/flink/commit/35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "message": "[hotfix] Fixes in CEP operator\n\nThe commit fixes two issues in the CEP operator:\n1. It tries to migrate the old state only in case when the state was\nrestored. The problem here was that it uses applyToAllKeys for restore\nwhich might not be available e.g. in the BATCH runtime mode.\n2. It does not cache the last seen watermark any longer, but depends on\nthe result of TimerService#currentWatermark", "committedDate": "2020-10-16T08:53:55Z", "type": "commit"}, {"oid": "bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "url": "https://github.com/apache/flink/commit/bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode.", "committedDate": "2020-10-16T09:00:23Z", "type": "commit"}, {"oid": "bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "url": "https://github.com/apache/flink/commit/bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode.", "committedDate": "2020-10-16T09:00:23Z", "type": "forcePushed"}]}