{"pr_number": 13560, "pr_title": "[FLINK-19518] Show proper job duration for running jobs in web ui", "pr_createdAt": "2020-10-08T07:21:18Z", "pr_url": "https://github.com/apache/flink/pull/13560", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1OTk0OQ==", "url": "https://github.com/apache/flink/pull/13560#discussion_r502259949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tAccessExecutionVertex[] vertices = ejv.getTaskVertices();\n          \n          \n            \n            \t\t\tAccessExecutionVertex[] taskVertices = ejv.getTaskVertices();\n          \n      \n    \n    \n  \n\nCould we do this renaming to improve the readability since we're dealing with different types of vertices in this code segment?", "author": "XComp", "createdAt": "2020-10-09T08:10:15Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java", "diffHunk": "@@ -98,6 +101,42 @@ public JobDetails(\n \t\tthis.tasksPerState = checkNotNull(tasksPerState);\n \t\tthis.numTasks = numTasks;\n \t}\n+\n+\tpublic static JobDetails createDetailsForJob(AccessExecutionGraph job) {\n+\t\tJobStatus status = job.getState();\n+\n+\t\tlong started = job.getStatusTimestamp(JobStatus.INITIALIZING);\n+\t\tlong finished = status.isGloballyTerminalState() ? job.getStatusTimestamp(status) : -1L;\n+\t\tlong duration = (finished >= 0L ? finished : System.currentTimeMillis()) - started;\n+\n+\t\tint[] countsPerStatus = new int[ExecutionState.values().length];\n+\t\tlong lastChanged = 0;\n+\t\tint numTotalTasks = 0;\n+\n+\t\tfor (AccessExecutionJobVertex ejv : job.getVerticesTopologically()) {\n+\t\t\tAccessExecutionVertex[] vertices = ejv.getTaskVertices();", "originalCommit": "6f5dffb7725d818aba28ff3e1a7a6ab34f3e1099", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5000a1737c880c9b7fab1fcbca0a414d4881b891", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java b/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java\nindex 83dfe18f078..702469a761e 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java\n\n@@ -114,13 +114,13 @@ public class JobDetails implements Serializable {\n \t\tint numTotalTasks = 0;\n \n \t\tfor (AccessExecutionJobVertex ejv : job.getVerticesTopologically()) {\n-\t\t\tAccessExecutionVertex[] vertices = ejv.getTaskVertices();\n-\t\t\tnumTotalTasks += vertices.length;\n+\t\t\tAccessExecutionVertex[] taskVertices = ejv.getTaskVertices();\n+\t\t\tnumTotalTasks += taskVertices.length;\n \n-\t\t\tfor (AccessExecutionVertex vertex : vertices) {\n-\t\t\t\tExecutionState state = vertex.getExecutionState();\n+\t\t\tfor (AccessExecutionVertex taskVertex : taskVertices) {\n+\t\t\t\tExecutionState state = taskVertex.getExecutionState();\n \t\t\t\tcountsPerStatus[state.ordinal()]++;\n-\t\t\t\tlastChanged = Math.max(lastChanged, vertex.getStateTimestamp(state));\n+\t\t\t\tlastChanged = Math.max(lastChanged, taskVertex.getStateTimestamp(state));\n \t\t\t}\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2MDI0OQ==", "url": "https://github.com/apache/flink/pull/13560#discussion_r502260249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfor (AccessExecutionVertex vertex : vertices) {\n          \n          \n            \n            \t\t\tfor (AccessExecutionVertex taskVertex : taskVertices) {\n          \n      \n    \n    \n  \n\nSame here with the vertex variable.", "author": "XComp", "createdAt": "2020-10-09T08:10:47Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java", "diffHunk": "@@ -98,6 +101,42 @@ public JobDetails(\n \t\tthis.tasksPerState = checkNotNull(tasksPerState);\n \t\tthis.numTasks = numTasks;\n \t}\n+\n+\tpublic static JobDetails createDetailsForJob(AccessExecutionGraph job) {\n+\t\tJobStatus status = job.getState();\n+\n+\t\tlong started = job.getStatusTimestamp(JobStatus.INITIALIZING);\n+\t\tlong finished = status.isGloballyTerminalState() ? job.getStatusTimestamp(status) : -1L;\n+\t\tlong duration = (finished >= 0L ? finished : System.currentTimeMillis()) - started;\n+\n+\t\tint[] countsPerStatus = new int[ExecutionState.values().length];\n+\t\tlong lastChanged = 0;\n+\t\tint numTotalTasks = 0;\n+\n+\t\tfor (AccessExecutionJobVertex ejv : job.getVerticesTopologically()) {\n+\t\t\tAccessExecutionVertex[] vertices = ejv.getTaskVertices();\n+\t\t\tnumTotalTasks += vertices.length;\n+\n+\t\t\tfor (AccessExecutionVertex vertex : vertices) {", "originalCommit": "6f5dffb7725d818aba28ff3e1a7a6ab34f3e1099", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5000a1737c880c9b7fab1fcbca0a414d4881b891", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java b/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java\nindex 83dfe18f078..702469a761e 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/messages/webmonitor/JobDetails.java\n\n@@ -114,13 +114,13 @@ public class JobDetails implements Serializable {\n \t\tint numTotalTasks = 0;\n \n \t\tfor (AccessExecutionJobVertex ejv : job.getVerticesTopologically()) {\n-\t\t\tAccessExecutionVertex[] vertices = ejv.getTaskVertices();\n-\t\t\tnumTotalTasks += vertices.length;\n+\t\t\tAccessExecutionVertex[] taskVertices = ejv.getTaskVertices();\n+\t\t\tnumTotalTasks += taskVertices.length;\n \n-\t\t\tfor (AccessExecutionVertex vertex : vertices) {\n-\t\t\t\tExecutionState state = vertex.getExecutionState();\n+\t\t\tfor (AccessExecutionVertex taskVertex : taskVertices) {\n+\t\t\t\tExecutionState state = taskVertex.getExecutionState();\n \t\t\t\tcountsPerStatus[state.ordinal()]++;\n-\t\t\t\tlastChanged = Math.max(lastChanged, vertex.getStateTimestamp(state));\n+\t\t\t\tlastChanged = Math.max(lastChanged, taskVertex.getStateTimestamp(state));\n \t\t\t}\n \t\t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3NjU4NA==", "url": "https://github.com/apache/flink/pull/13560#discussion_r502276584", "bodyText": "I know it's a minor thing, but the extra line is not necessary here.", "author": "XComp", "createdAt": "2020-10-09T08:39:27Z", "path": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java", "diffHunk": "@@ -303,6 +303,55 @@ public void testCancel() throws Exception {\n \t\tBlockingInvokable.reset();\n \t}\n \n+\t/**\n+\t * See FLINK-19518. This test ensures that the /jobs/overview handler shows a duration != 0.\n+\t *", "originalCommit": "6f5dffb7725d818aba28ff3e1a7a6ab34f3e1099", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5000a1737c880c9b7fab1fcbca0a414d4881b891", "chunk": "diff --git a/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java b/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\nindex 1a662d0f1fd..ac7f35e0209 100644\n--- a/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\n+++ b/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\n\n@@ -305,7 +305,6 @@ public class WebFrontendITCase extends TestLogger {\n \n \t/**\n \t * See FLINK-19518. This test ensures that the /jobs/overview handler shows a duration != 0.\n-\t *\n \t */\n \t@Test\n \tpublic void testJobOverviewHandler() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3NjkzMA==", "url": "https://github.com/apache/flink/pull/13560#discussion_r502276930", "bodyText": "The deadline variable is never used. Are we missing an assert in this test or is this variable obsolete?", "author": "XComp", "createdAt": "2020-10-09T08:40:00Z", "path": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java", "diffHunk": "@@ -303,6 +303,55 @@ public void testCancel() throws Exception {\n \t\tBlockingInvokable.reset();\n \t}\n \n+\t/**\n+\t * See FLINK-19518. This test ensures that the /jobs/overview handler shows a duration != 0.\n+\t *\n+\t */\n+\t@Test\n+\tpublic void testJobOverviewHandler() throws Exception {\n+\t\t// this only works if there is no active job at this point\n+\t\tassertTrue(getRunningJobs(CLUSTER.getClusterClient()).isEmpty());\n+\n+\t\t// Create a task\n+\t\tfinal JobVertex sender = new JobVertex(\"Sender\");\n+\t\tsender.setParallelism(2);\n+\t\tsender.setInvokableClass(BlockingInvokable.class);\n+\n+\t\tfinal JobGraph jobGraph = new JobGraph(\"Stoppable streaming test job\", sender);\n+\t\tfinal JobID jid = jobGraph.getJobID();\n+\n+\t\tClusterClient<?> clusterClient = CLUSTER.getClusterClient();\n+\t\tclusterClient.submitJob(jobGraph).get();\n+\n+\t\t// wait for job to show up\n+\t\twhile (getRunningJobs(CLUSTER.getClusterClient()).isEmpty()) {\n+\t\t\tThread.sleep(10);\n+\t\t}\n+\n+\t\t// wait for tasks to be properly running\n+\t\tBlockingInvokable.latch.await();\n+\n+\t\tfinal Duration testTimeout = Duration.ofMinutes(2);\n+\t\tfinal LocalTime deadline = LocalTime.now().plus(testTimeout);", "originalCommit": "6f5dffb7725d818aba28ff3e1a7a6ab34f3e1099", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5000a1737c880c9b7fab1fcbca0a414d4881b891", "chunk": "diff --git a/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java b/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\nindex 1a662d0f1fd..ac7f35e0209 100644\n--- a/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\n+++ b/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\n\n@@ -305,7 +305,6 @@ public class WebFrontendITCase extends TestLogger {\n \n \t/**\n \t * See FLINK-19518. This test ensures that the /jobs/overview handler shows a duration != 0.\n-\t *\n \t */\n \t@Test\n \tpublic void testJobOverviewHandler() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3NzU3Mg==", "url": "https://github.com/apache/flink/pull/13560#discussion_r502277572", "bodyText": "jid is never used and can be removed.", "author": "XComp", "createdAt": "2020-10-09T08:40:58Z", "path": "flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java", "diffHunk": "@@ -303,6 +303,55 @@ public void testCancel() throws Exception {\n \t\tBlockingInvokable.reset();\n \t}\n \n+\t/**\n+\t * See FLINK-19518. This test ensures that the /jobs/overview handler shows a duration != 0.\n+\t *\n+\t */\n+\t@Test\n+\tpublic void testJobOverviewHandler() throws Exception {\n+\t\t// this only works if there is no active job at this point\n+\t\tassertTrue(getRunningJobs(CLUSTER.getClusterClient()).isEmpty());\n+\n+\t\t// Create a task\n+\t\tfinal JobVertex sender = new JobVertex(\"Sender\");\n+\t\tsender.setParallelism(2);\n+\t\tsender.setInvokableClass(BlockingInvokable.class);\n+\n+\t\tfinal JobGraph jobGraph = new JobGraph(\"Stoppable streaming test job\", sender);\n+\t\tfinal JobID jid = jobGraph.getJobID();", "originalCommit": "6f5dffb7725d818aba28ff3e1a7a6ab34f3e1099", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5000a1737c880c9b7fab1fcbca0a414d4881b891", "chunk": "diff --git a/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java b/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\nindex 1a662d0f1fd..ac7f35e0209 100644\n--- a/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\n+++ b/flink-runtime-web/src/test/java/org/apache/flink/runtime/webmonitor/WebFrontendITCase.java\n\n@@ -305,7 +305,6 @@ public class WebFrontendITCase extends TestLogger {\n \n \t/**\n \t * See FLINK-19518. This test ensures that the /jobs/overview handler shows a duration != 0.\n-\t *\n \t */\n \t@Test\n \tpublic void testJobOverviewHandler() throws Exception {\n"}}, {"oid": "5000a1737c880c9b7fab1fcbca0a414d4881b891", "url": "https://github.com/apache/flink/commit/5000a1737c880c9b7fab1fcbca0a414d4881b891", "message": "address PR comments", "committedDate": "2020-10-14T14:47:49Z", "type": "forcePushed"}, {"oid": "5f1e40ba2ba0ce4c5178bd134eb87af463f344ad", "url": "https://github.com/apache/flink/commit/5f1e40ba2ba0ce4c5178bd134eb87af463f344ad", "message": "[FLINK-19518] Show proper job duration for running jobs in web ui", "committedDate": "2020-10-15T14:35:33Z", "type": "commit"}, {"oid": "b64dbe9d96273221e862f44883ceac40d7fc247a", "url": "https://github.com/apache/flink/commit/b64dbe9d96273221e862f44883ceac40d7fc247a", "message": "address PR comments", "committedDate": "2020-10-15T14:35:33Z", "type": "commit"}, {"oid": "b64dbe9d96273221e862f44883ceac40d7fc247a", "url": "https://github.com/apache/flink/commit/b64dbe9d96273221e862f44883ceac40d7fc247a", "message": "address PR comments", "committedDate": "2020-10-15T14:35:33Z", "type": "forcePushed"}]}