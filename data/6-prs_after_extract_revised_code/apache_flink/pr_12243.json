{"pr_number": 12243, "pr_title": "[FLINK-17805][networ] Fix ArrayIndexOutOfBound for rotated input gate indexes     ", "pr_createdAt": "2020-05-19T09:51:16Z", "pr_url": "https://github.com/apache/flink/pull/12243", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTAxMw==", "url": "https://github.com/apache/flink/pull/12243#discussion_r427381013", "bodyText": "Yes... It took me a while to understand their usage. Why don't we make them consistent by easily sorting the inputGates before doing anything here (there's no risk if I understand correctly), so that it won't bother us in the future.", "author": "Jiayi-Liao", "createdAt": "2020-05-19T15:11:31Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -79,11 +80,26 @@ public static CheckpointedInputGate createCheckpointedInputGate(\n \t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n \t\t}\n \n+\t\tIntStream numberOfInputChannelsPerGate =\n+\t\t\tArrays\n+\t\t\t\t.stream(inputGates)\n+\t\t\t\t.flatMap(collection -> collection.stream())\n+\t\t\t\t.sorted(Comparator.comparingInt(IndexedInputGate::getGateIndex))\n+\t\t\t\t.mapToInt(InputGate::getNumberOfInputChannels);\n+\n \t\tMap<InputGate, Integer> inputGateToChannelIndexOffset = generateInputGateToChannelIndexOffsetMap(unionedInputGates);\n+\t\t// Note that numberOfInputChannelsPerGate and inputGateToChannelIndexOffset have a bit different", "originalCommit": "b956522108b0344ff004e859c0bc399dc8c38348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNjgwNg==", "url": "https://github.com/apache/flink/pull/12243#discussion_r428016806", "bodyText": "Hmmm, I'm not sure, as what if left input has input gates with indexes 0 and 3, while the right input has indexes 1, 2 and 4? (I'm not sure if that's a valid scenario in the JobGraphGenerator) Left input would have a one instance of UnionInputGate over gates 0 and 3, while right input would have another instance with gates 1, 2 and 4. However we sort them, it would be somehow inconsistent?", "author": "pnowojski", "createdAt": "2020-05-20T13:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2Mzk0NQ==", "url": "https://github.com/apache/flink/pull/12243#discussion_r428063945", "bodyText": "You're right. I didn't notice that inputGateToChannelIndexOffset's key is an unioned InputGate. Thanks for pointing this out.", "author": "Jiayi-Liao", "createdAt": "2020-05-20T14:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d6eecd749f06765d087659716e1bdba431f5b692", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java\nindex 5dbfc021c6..f1bf043c79 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java\n\n@@ -80,26 +79,11 @@ public class InputProcessorUtil {\n \t\t\tunionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n \t\t}\n \n-\t\tIntStream numberOfInputChannelsPerGate =\n-\t\t\tArrays\n-\t\t\t\t.stream(inputGates)\n-\t\t\t\t.flatMap(collection -> collection.stream())\n-\t\t\t\t.sorted(Comparator.comparingInt(IndexedInputGate::getGateIndex))\n-\t\t\t\t.mapToInt(InputGate::getNumberOfInputChannels);\n-\n \t\tMap<InputGate, Integer> inputGateToChannelIndexOffset = generateInputGateToChannelIndexOffsetMap(unionedInputGates);\n-\t\t// Note that numberOfInputChannelsPerGate and inputGateToChannelIndexOffset have a bit different\n-\t\t// indexing and purposes.\n-\t\t//\n-\t\t// The numberOfInputChannelsPerGate is indexed based on flattened input gates, and sorted based on GateIndex,\n-\t\t// so that it can be used in combination with InputChannelInfo class.\n-\t\t//\n-\t\t// The inputGateToChannelIndexOffset is based upon unioned input gates and it's use for translating channel\n-\t\t// indexes from perspective of UnionInputGate to perspective of SingleInputGate.\n \n \t\tCheckpointBarrierHandler barrierHandler = createCheckpointBarrierHandler(\n \t\t\tconfig,\n-\t\t\tnumberOfInputChannelsPerGate,\n+\t\t\tArrays.stream(inputGates).flatMapToInt(collection -> collection.stream().mapToInt(InputGate::getNumberOfInputChannels)),\n \t\t\tchannelStateWriter,\n \t\t\ttaskName,\n \t\t\tgenerateChannelIndexToInputGateMap(unionedInputGates),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMzQzMQ==", "url": "https://github.com/apache/flink/pull/12243#discussion_r427413431", "bodyText": "seems redundant codes new MockChannelStateWriter()", "author": "zhijiangW", "createdAt": "2020-05-19T15:55:31Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java", "diffHunk": "@@ -58,4 +79,57 @@ public void testGenerateInputGateToChannelIndexOffsetMap() {\n \t\tassertEquals(0, inputGateToChannelIndexOffsetMap.get(ig1).intValue());\n \t\tassertEquals(3, inputGateToChannelIndexOffsetMap.get(ig2).intValue());\n \t}\n+\n+\t@Test\n+\tpublic void testCreateCheckpointedMultipleInputGate() throws Exception {\n+\t\ttry (CloseableRegistry registry = new CloseableRegistry()) {\n+\t\t\tMockEnvironment environment = new MockEnvironmentBuilder().build();\n+\t\t\tMockStreamTask streamTask = new MockStreamTaskBuilder(environment).build();\n+\t\t\tStreamConfig streamConfig = new StreamConfig(environment.getJobConfiguration());\n+\t\t\tstreamConfig.setCheckpointMode(CheckpointingMode.EXACTLY_ONCE);\n+\t\t\tstreamConfig.setUnalignedCheckpointsEnabled(true);\n+\n+\t\t\t// First input gate has index larger than the second\n+\t\t\tCollection<IndexedInputGate>[] inputGates = new Collection[] {\n+\t\t\t\tCollections.singletonList(new MockIndexedInputGate(1, 4)),\n+\t\t\t\tCollections.singletonList(new MockIndexedInputGate(0, 2)),\n+\t\t\t};\n+\n+\t\t\tnew MockChannelStateWriter() {", "originalCommit": "b956522108b0344ff004e859c0bc399dc8c38348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNzg1Ng==", "url": "https://github.com/apache/flink/pull/12243#discussion_r428017856", "bodyText": "ops, that's a left over of some previous version.", "author": "pnowojski", "createdAt": "2020-05-20T13:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxMzQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "ea3576b316c88212dfaf820e99ee783aeb4c2cae", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\nindex c9265b2b69..396b284b33 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\n\n@@ -95,17 +94,6 @@ public class InputProcessorUtilTest {\n \t\t\t\tCollections.singletonList(new MockIndexedInputGate(0, 2)),\n \t\t\t};\n \n-\t\t\tnew MockChannelStateWriter() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void addInputData(\n-\t\t\t\t\tlong checkpointId,\n-\t\t\t\t\tInputChannelInfo info,\n-\t\t\t\t\tint startSeqNum,\n-\t\t\t\t\tBuffer... data) {\n-\t\t\t\t\tsuper.addInputData(checkpointId, info, startSeqNum, data);\n-\t\t\t\t}\n-\t\t\t};\n-\n \t\t\tCheckpointedInputGate[] checkpointedMultipleInputGate = InputProcessorUtil.createCheckpointedMultipleInputGate(\n \t\t\t\tstreamTask,\n \t\t\t\tstreamConfig,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNDY2Ng==", "url": "https://github.com/apache/flink/pull/12243#discussion_r427414666", "bodyText": "nit: might be better to place these two lines out of loop to together with barrierHandler\nCheckpointBarrierHandler barrierHandler = checkpointedMultipleInputGate[0].getCheckpointBarrierHandler();\nassertTrue(barrierHandler.getBufferReceivedListener().isPresent());\nBufferReceivedListener bufferReceivedListener = barrierHandler.getBufferReceivedListener().get();", "author": "zhijiangW", "createdAt": "2020-05-19T15:57:13Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java", "diffHunk": "@@ -58,4 +79,57 @@ public void testGenerateInputGateToChannelIndexOffsetMap() {\n \t\tassertEquals(0, inputGateToChannelIndexOffsetMap.get(ig1).intValue());\n \t\tassertEquals(3, inputGateToChannelIndexOffsetMap.get(ig2).intValue());\n \t}\n+\n+\t@Test\n+\tpublic void testCreateCheckpointedMultipleInputGate() throws Exception {\n+\t\ttry (CloseableRegistry registry = new CloseableRegistry()) {\n+\t\t\tMockEnvironment environment = new MockEnvironmentBuilder().build();\n+\t\t\tMockStreamTask streamTask = new MockStreamTaskBuilder(environment).build();\n+\t\t\tStreamConfig streamConfig = new StreamConfig(environment.getJobConfiguration());\n+\t\t\tstreamConfig.setCheckpointMode(CheckpointingMode.EXACTLY_ONCE);\n+\t\t\tstreamConfig.setUnalignedCheckpointsEnabled(true);\n+\n+\t\t\t// First input gate has index larger than the second\n+\t\t\tCollection<IndexedInputGate>[] inputGates = new Collection[] {\n+\t\t\t\tCollections.singletonList(new MockIndexedInputGate(1, 4)),\n+\t\t\t\tCollections.singletonList(new MockIndexedInputGate(0, 2)),\n+\t\t\t};\n+\n+\t\t\tnew MockChannelStateWriter() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void addInputData(\n+\t\t\t\t\tlong checkpointId,\n+\t\t\t\t\tInputChannelInfo info,\n+\t\t\t\t\tint startSeqNum,\n+\t\t\t\t\tBuffer... data) {\n+\t\t\t\t\tsuper.addInputData(checkpointId, info, startSeqNum, data);\n+\t\t\t\t}\n+\t\t\t};\n+\n+\t\t\tCheckpointedInputGate[] checkpointedMultipleInputGate = InputProcessorUtil.createCheckpointedMultipleInputGate(\n+\t\t\t\tstreamTask,\n+\t\t\t\tstreamConfig,\n+\t\t\t\tnew MockChannelStateWriter(),\n+\t\t\t\tenvironment.getMetricGroup().getIOMetricGroup(),\n+\t\t\t\tstreamTask.getName(),\n+\t\t\t\tinputGates);\n+\t\t\tfor (CheckpointedInputGate checkpointedInputGate : checkpointedMultipleInputGate) {\n+\t\t\t\tregistry.registerCloseable(checkpointedInputGate);\n+\t\t\t}\n+\n+\t\t\tCheckpointBarrierHandler barrierHandler = checkpointedMultipleInputGate[0].getCheckpointBarrierHandler();\n+\n+\t\t\tList<IndexedInputGate> allInputGates = Arrays.stream(inputGates).flatMap(gates -> gates.stream()).collect(Collectors.toList());\n+\t\t\tfor (IndexedInputGate inputGate : allInputGates) {\n+\t\t\t\tfor (int channelId = 0; channelId < inputGate.getNumberOfInputChannels(); channelId++) {\n+\t\t\t\t\tassertTrue(barrierHandler.getBufferReceivedListener().isPresent());", "originalCommit": "b956522108b0344ff004e859c0bc399dc8c38348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea3576b316c88212dfaf820e99ee783aeb4c2cae", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\nindex c9265b2b69..396b284b33 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\n\n@@ -95,17 +94,6 @@ public class InputProcessorUtilTest {\n \t\t\t\tCollections.singletonList(new MockIndexedInputGate(0, 2)),\n \t\t\t};\n \n-\t\t\tnew MockChannelStateWriter() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void addInputData(\n-\t\t\t\t\tlong checkpointId,\n-\t\t\t\t\tInputChannelInfo info,\n-\t\t\t\t\tint startSeqNum,\n-\t\t\t\t\tBuffer... data) {\n-\t\t\t\t\tsuper.addInputData(checkpointId, info, startSeqNum, data);\n-\t\t\t\t}\n-\t\t\t};\n-\n \t\t\tCheckpointedInputGate[] checkpointedMultipleInputGate = InputProcessorUtil.createCheckpointedMultipleInputGate(\n \t\t\t\tstreamTask,\n \t\t\t\tstreamConfig,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQxNTQ4NQ==", "url": "https://github.com/apache/flink/pull/12243#discussion_r427415485", "bodyText": "I am not sure why we need to verify this because it never process the barrier in this test. Maybe verify assertTrue(barrierHandler.getAllBarriersReceivedFuture(1).isDone()) instead?", "author": "zhijiangW", "createdAt": "2020-05-19T15:58:24Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java", "diffHunk": "@@ -58,4 +79,57 @@ public void testGenerateInputGateToChannelIndexOffsetMap() {\n \t\tassertEquals(0, inputGateToChannelIndexOffsetMap.get(ig1).intValue());\n \t\tassertEquals(3, inputGateToChannelIndexOffsetMap.get(ig2).intValue());\n \t}\n+\n+\t@Test\n+\tpublic void testCreateCheckpointedMultipleInputGate() throws Exception {\n+\t\ttry (CloseableRegistry registry = new CloseableRegistry()) {\n+\t\t\tMockEnvironment environment = new MockEnvironmentBuilder().build();\n+\t\t\tMockStreamTask streamTask = new MockStreamTaskBuilder(environment).build();\n+\t\t\tStreamConfig streamConfig = new StreamConfig(environment.getJobConfiguration());\n+\t\t\tstreamConfig.setCheckpointMode(CheckpointingMode.EXACTLY_ONCE);\n+\t\t\tstreamConfig.setUnalignedCheckpointsEnabled(true);\n+\n+\t\t\t// First input gate has index larger than the second\n+\t\t\tCollection<IndexedInputGate>[] inputGates = new Collection[] {\n+\t\t\t\tCollections.singletonList(new MockIndexedInputGate(1, 4)),\n+\t\t\t\tCollections.singletonList(new MockIndexedInputGate(0, 2)),\n+\t\t\t};\n+\n+\t\t\tnew MockChannelStateWriter() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void addInputData(\n+\t\t\t\t\tlong checkpointId,\n+\t\t\t\t\tInputChannelInfo info,\n+\t\t\t\t\tint startSeqNum,\n+\t\t\t\t\tBuffer... data) {\n+\t\t\t\t\tsuper.addInputData(checkpointId, info, startSeqNum, data);\n+\t\t\t\t}\n+\t\t\t};\n+\n+\t\t\tCheckpointedInputGate[] checkpointedMultipleInputGate = InputProcessorUtil.createCheckpointedMultipleInputGate(\n+\t\t\t\tstreamTask,\n+\t\t\t\tstreamConfig,\n+\t\t\t\tnew MockChannelStateWriter(),\n+\t\t\t\tenvironment.getMetricGroup().getIOMetricGroup(),\n+\t\t\t\tstreamTask.getName(),\n+\t\t\t\tinputGates);\n+\t\t\tfor (CheckpointedInputGate checkpointedInputGate : checkpointedMultipleInputGate) {\n+\t\t\t\tregistry.registerCloseable(checkpointedInputGate);\n+\t\t\t}\n+\n+\t\t\tCheckpointBarrierHandler barrierHandler = checkpointedMultipleInputGate[0].getCheckpointBarrierHandler();\n+\n+\t\t\tList<IndexedInputGate> allInputGates = Arrays.stream(inputGates).flatMap(gates -> gates.stream()).collect(Collectors.toList());\n+\t\t\tfor (IndexedInputGate inputGate : allInputGates) {\n+\t\t\t\tfor (int channelId = 0; channelId < inputGate.getNumberOfInputChannels(); channelId++) {\n+\t\t\t\t\tassertTrue(barrierHandler.getBufferReceivedListener().isPresent());\n+\t\t\t\t\tBufferReceivedListener bufferReceivedListener = barrierHandler.getBufferReceivedListener().get();\n+\t\t\t\t\tbufferReceivedListener.notifyBarrierReceived(\n+\t\t\t\t\t\tnew CheckpointBarrier(1, 42, CheckpointOptions.forCheckpointWithDefaultLocation(true, true)),\n+\t\t\t\t\t\tnew InputChannelInfo(inputGate.getGateIndex(), channelId));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tassertFalse(barrierHandler.isCheckpointPending());", "originalCommit": "b956522108b0344ff004e859c0bc399dc8c38348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ea3576b316c88212dfaf820e99ee783aeb4c2cae", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\nindex c9265b2b69..396b284b33 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/InputProcessorUtilTest.java\n\n@@ -95,17 +94,6 @@ public class InputProcessorUtilTest {\n \t\t\t\tCollections.singletonList(new MockIndexedInputGate(0, 2)),\n \t\t\t};\n \n-\t\t\tnew MockChannelStateWriter() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void addInputData(\n-\t\t\t\t\tlong checkpointId,\n-\t\t\t\t\tInputChannelInfo info,\n-\t\t\t\t\tint startSeqNum,\n-\t\t\t\t\tBuffer... data) {\n-\t\t\t\t\tsuper.addInputData(checkpointId, info, startSeqNum, data);\n-\t\t\t\t}\n-\t\t\t};\n-\n \t\t\tCheckpointedInputGate[] checkpointedMultipleInputGate = InputProcessorUtil.createCheckpointedMultipleInputGate(\n \t\t\t\tstreamTask,\n \t\t\t\tstreamConfig,\n"}}, {"oid": "ea3576b316c88212dfaf820e99ee783aeb4c2cae", "url": "https://github.com/apache/flink/commit/ea3576b316c88212dfaf820e99ee783aeb4c2cae", "message": "[FLINK-17805][networ] Fix ArrayIndexOutOfBound for rotated input gate indexes\n\nIt's possible that indexes of passed InputGates are not monotonic - that left\ninput has higher input gate index. This commit fixes an ArrayIndexOutOfBound caused\nby this.", "committedDate": "2020-05-20T13:42:09Z", "type": "forcePushed"}, {"oid": "08898ef30e14a10fdc27c4e79f8c9b0e2532bc3c", "url": "https://github.com/apache/flink/commit/08898ef30e14a10fdc27c4e79f8c9b0e2532bc3c", "message": "[FLINK-17805][network] Fix ArrayIndexOutOfBound for rotated input gate indexes\n\nIt's possible that indexes of passed InputGates are not monotonic - that left\ninput has higher input gate index. This commit fixes an ArrayIndexOutOfBound caused\nby this.", "committedDate": "2020-05-20T13:42:31Z", "type": "forcePushed"}, {"oid": "d6eecd749f06765d087659716e1bdba431f5b692", "url": "https://github.com/apache/flink/commit/d6eecd749f06765d087659716e1bdba431f5b692", "message": "[FLINK-17805][hotfix][network] Fix/update/rename InputProcessorUtil.createCheckpointedInputGatePair method", "committedDate": "2020-05-20T13:43:07Z", "type": "commit"}, {"oid": "a3be362324a56a5f9b118a09ea3552a3039acffe", "url": "https://github.com/apache/flink/commit/a3be362324a56a5f9b118a09ea3552a3039acffe", "message": "[FLINK-17805][network] Fix ArrayIndexOutOfBound for rotated input gate indexes\n\nIt's possible that indexes of passed InputGates are not monotonic - that left\ninput has higher input gate index. This commit fixes an ArrayIndexOutOfBound caused\nby this.", "committedDate": "2020-05-20T13:43:07Z", "type": "forcePushed"}, {"oid": "67c3ff5187719aa012122785db68af1d9de77dc2", "url": "https://github.com/apache/flink/commit/67c3ff5187719aa012122785db68af1d9de77dc2", "message": "[FLINK-17805][network] Fix ArrayIndexOutOfBound for rotated input gate indexes\n\nIt's possible that indexes of passed InputGates are not monotonic - that left\ninput has higher input gate index. This commit fixes an ArrayIndexOutOfBound caused\nby this.", "committedDate": "2020-05-21T17:36:14Z", "type": "commit"}, {"oid": "67c3ff5187719aa012122785db68af1d9de77dc2", "url": "https://github.com/apache/flink/commit/67c3ff5187719aa012122785db68af1d9de77dc2", "message": "[FLINK-17805][network] Fix ArrayIndexOutOfBound for rotated input gate indexes\n\nIt's possible that indexes of passed InputGates are not monotonic - that left\ninput has higher input gate index. This commit fixes an ArrayIndexOutOfBound caused\nby this.", "committedDate": "2020-05-21T17:36:14Z", "type": "forcePushed"}]}