{"pr_number": 13766, "pr_title": "[FLINK-19703][runtime] Untrack a result partition if its producer task failed in TaskManager", "pr_createdAt": "2020-10-23T09:56:10Z", "pr_url": "https://github.com/apache/flink/pull/13766", "timeline": [{"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "url": "https://github.com/apache/flink/commit/b46f97dd6b1fa67b4dd169867c1967877ac8534c", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions.", "committedDate": "2020-10-26T03:58:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MTk5OA==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514571998", "bodyText": "PRC  -> RPC", "author": "zentol", "createdAt": "2020-10-29T21:14:53Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.", "originalCommit": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\ndeleted file mode 100644\nindex e15ced62c90..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.executiongraph;\n-\n-import org.apache.flink.api.common.JobID;\n-import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n-import org.apache.flink.runtime.execution.ExecutionState;\n-import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Wraps {@link TaskExecutionState}, along with actions to take\n- * if it is FAILED state.\n- */\n-public class TaskExecutionStateWrapper {\n-\n-\tprivate final TaskExecutionState taskExecutionState;\n-\n-\t/**\n-\t * Indicating whether to send a PRC call to remove task from TaskManager.\n-\t * True if the failure is fired by JobManager and the execution is already\n-\t * deployed. Otherwise it should be false.\n-\t */\n-\tprivate final boolean cancelTask;\n-\n-\tprivate final boolean releasePartitions;\n-\n-\tprivate TaskExecutionStateWrapper(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n-\t\tthis.cancelTask = cancelTask;\n-\t\tthis.releasePartitions = releasePartitions;\n-\t}\n-\n-\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n-\t\treturn taskExecutionState.getError(userCodeClassloader);\n-\t}\n-\n-\tpublic ExecutionAttemptID getID() {\n-\t\treturn taskExecutionState.getID();\n-\t}\n-\n-\tpublic ExecutionState getExecutionState() {\n-\t\treturn taskExecutionState.getExecutionState();\n-\t}\n-\n-\tpublic JobID getJobID() {\n-\t\treturn taskExecutionState.getJobID();\n-\t}\n-\n-\tpublic AccumulatorSnapshot getAccumulators() {\n-\t\treturn taskExecutionState.getAccumulators();\n-\t}\n-\n-\tpublic IOMetrics getIOMetrics() {\n-\t\treturn taskExecutionState.getIOMetrics();\n-\t}\n-\n-\tpublic boolean getCancelTask() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn cancelTask;\n-\t}\n-\n-\tpublic boolean getReleasePartitions() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn releasePartitions;\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFromFailedState(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, cancelTask, releasePartitions);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM4OA==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514572388", "bodyText": "why should these only be queryable if the state is failed?", "author": "zentol", "createdAt": "2020-10-29T21:15:41Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "originalCommit": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MzI4Mw==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514953283", "bodyText": "I will remove the check. More details see comment #13766 (comment).", "author": "zhuzhurk", "createdAt": "2020-10-30T08:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\ndeleted file mode 100644\nindex e15ced62c90..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.executiongraph;\n-\n-import org.apache.flink.api.common.JobID;\n-import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n-import org.apache.flink.runtime.execution.ExecutionState;\n-import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Wraps {@link TaskExecutionState}, along with actions to take\n- * if it is FAILED state.\n- */\n-public class TaskExecutionStateWrapper {\n-\n-\tprivate final TaskExecutionState taskExecutionState;\n-\n-\t/**\n-\t * Indicating whether to send a PRC call to remove task from TaskManager.\n-\t * True if the failure is fired by JobManager and the execution is already\n-\t * deployed. Otherwise it should be false.\n-\t */\n-\tprivate final boolean cancelTask;\n-\n-\tprivate final boolean releasePartitions;\n-\n-\tprivate TaskExecutionStateWrapper(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n-\t\tthis.cancelTask = cancelTask;\n-\t\tthis.releasePartitions = releasePartitions;\n-\t}\n-\n-\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n-\t\treturn taskExecutionState.getError(userCodeClassloader);\n-\t}\n-\n-\tpublic ExecutionAttemptID getID() {\n-\t\treturn taskExecutionState.getID();\n-\t}\n-\n-\tpublic ExecutionState getExecutionState() {\n-\t\treturn taskExecutionState.getExecutionState();\n-\t}\n-\n-\tpublic JobID getJobID() {\n-\t\treturn taskExecutionState.getJobID();\n-\t}\n-\n-\tpublic AccumulatorSnapshot getAccumulators() {\n-\t\treturn taskExecutionState.getAccumulators();\n-\t}\n-\n-\tpublic IOMetrics getIOMetrics() {\n-\t\treturn taskExecutionState.getIOMetrics();\n-\t}\n-\n-\tpublic boolean getCancelTask() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn cancelTask;\n-\t}\n-\n-\tpublic boolean getReleasePartitions() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn releasePartitions;\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFromFailedState(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, cancelTask, releasePartitions);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjQ1OA==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514572458", "bodyText": "why should these only be queryable if the state is failed? I get the idea, but imo such a simple data-structure shouldn't enforce behaviors.", "author": "zentol", "createdAt": "2020-10-29T21:15:51Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "originalCommit": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MjA4Mw==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514952083", "bodyText": "Ok. I will remove the check. Also regarding your other comments, I think we do not need factory methods to differentiate whether it is created for FAILED state. I will add 2 constructors instead. One needs to specify the cancelTask/releasePartitions flags if the they need to be true.", "author": "zhuzhurk", "createdAt": "2020-10-30T08:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\ndeleted file mode 100644\nindex e15ced62c90..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.executiongraph;\n-\n-import org.apache.flink.api.common.JobID;\n-import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n-import org.apache.flink.runtime.execution.ExecutionState;\n-import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Wraps {@link TaskExecutionState}, along with actions to take\n- * if it is FAILED state.\n- */\n-public class TaskExecutionStateWrapper {\n-\n-\tprivate final TaskExecutionState taskExecutionState;\n-\n-\t/**\n-\t * Indicating whether to send a PRC call to remove task from TaskManager.\n-\t * True if the failure is fired by JobManager and the execution is already\n-\t * deployed. Otherwise it should be false.\n-\t */\n-\tprivate final boolean cancelTask;\n-\n-\tprivate final boolean releasePartitions;\n-\n-\tprivate TaskExecutionStateWrapper(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n-\t\tthis.cancelTask = cancelTask;\n-\t\tthis.releasePartitions = releasePartitions;\n-\t}\n-\n-\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n-\t\treturn taskExecutionState.getError(userCodeClassloader);\n-\t}\n-\n-\tpublic ExecutionAttemptID getID() {\n-\t\treturn taskExecutionState.getID();\n-\t}\n-\n-\tpublic ExecutionState getExecutionState() {\n-\t\treturn taskExecutionState.getExecutionState();\n-\t}\n-\n-\tpublic JobID getJobID() {\n-\t\treturn taskExecutionState.getJobID();\n-\t}\n-\n-\tpublic AccumulatorSnapshot getAccumulators() {\n-\t\treturn taskExecutionState.getAccumulators();\n-\t}\n-\n-\tpublic IOMetrics getIOMetrics() {\n-\t\treturn taskExecutionState.getIOMetrics();\n-\t}\n-\n-\tpublic boolean getCancelTask() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn cancelTask;\n-\t}\n-\n-\tpublic boolean getReleasePartitions() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn releasePartitions;\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFromFailedState(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, cancelTask, releasePartitions);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODY3MA==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514578670", "bodyText": "a more apt name might by \"TaskExecutionStateTransition\"", "author": "zentol", "createdAt": "2020-10-29T21:28:14Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {", "originalCommit": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNjM5OA==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514906398", "bodyText": "I did not have a good idea to name it and TaskExecutionStateTransition sounds good to me.", "author": "zhuzhurk", "createdAt": "2020-10-30T07:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\ndeleted file mode 100644\nindex e15ced62c90..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.executiongraph;\n-\n-import org.apache.flink.api.common.JobID;\n-import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n-import org.apache.flink.runtime.execution.ExecutionState;\n-import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Wraps {@link TaskExecutionState}, along with actions to take\n- * if it is FAILED state.\n- */\n-public class TaskExecutionStateWrapper {\n-\n-\tprivate final TaskExecutionState taskExecutionState;\n-\n-\t/**\n-\t * Indicating whether to send a PRC call to remove task from TaskManager.\n-\t * True if the failure is fired by JobManager and the execution is already\n-\t * deployed. Otherwise it should be false.\n-\t */\n-\tprivate final boolean cancelTask;\n-\n-\tprivate final boolean releasePartitions;\n-\n-\tprivate TaskExecutionStateWrapper(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n-\t\tthis.cancelTask = cancelTask;\n-\t\tthis.releasePartitions = releasePartitions;\n-\t}\n-\n-\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n-\t\treturn taskExecutionState.getError(userCodeClassloader);\n-\t}\n-\n-\tpublic ExecutionAttemptID getID() {\n-\t\treturn taskExecutionState.getID();\n-\t}\n-\n-\tpublic ExecutionState getExecutionState() {\n-\t\treturn taskExecutionState.getExecutionState();\n-\t}\n-\n-\tpublic JobID getJobID() {\n-\t\treturn taskExecutionState.getJobID();\n-\t}\n-\n-\tpublic AccumulatorSnapshot getAccumulators() {\n-\t\treturn taskExecutionState.getAccumulators();\n-\t}\n-\n-\tpublic IOMetrics getIOMetrics() {\n-\t\treturn taskExecutionState.getIOMetrics();\n-\t}\n-\n-\tpublic boolean getCancelTask() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn cancelTask;\n-\t}\n-\n-\tpublic boolean getReleasePartitions() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn releasePartitions;\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFromFailedState(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, cancelTask, releasePartitions);\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514579189", "bodyText": "This seems like a dangerous default, and I wouldn't be surprised if we at some point call this by accident instead of creating a failed TaskExecutionStateWrapper", "author": "zentol", "createdAt": "2020-10-29T21:29:17Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java", "diffHunk": "@@ -84,7 +85,11 @@\n \n \tvoid handleGlobalFailure(Throwable cause);\n \n-\tboolean updateTaskExecutionState(TaskExecutionState taskExecutionState);\n+\tdefault boolean updateTaskExecutionState(TaskExecutionState taskExecutionState) {\n+\t\treturn updateTaskExecutionState(TaskExecutionStateWrapper.createFrom(taskExecutionState));", "originalCommit": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NzA1Mg==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514957052", "bodyText": "You are right. However, this method will be removed soon when removing the legacy scheduling in ExecutionGraph (FLINK-15626). And I hope to not refactor its usages right now to avoid massive conflicts with the ongoing change of FLINK-17760 which will replace the usage with SchedulerNG#updateTaskExecutionState().\nI will mark it as deprecated for now to prevent it from being further used?\nWDYT?", "author": "zhuzhurk", "createdAt": "2020-10-30T09:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxODIyNw==", "url": "https://github.com/apache/flink/pull/13766#discussion_r515018227", "bodyText": "sounds good", "author": "zentol", "createdAt": "2020-10-30T11:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java\nindex 6a540e44228..1675bc0acd7 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java\n\n@@ -85,11 +84,7 @@ public interface SchedulerNG {\n \n \tvoid handleGlobalFailure(Throwable cause);\n \n-\tdefault boolean updateTaskExecutionState(TaskExecutionState taskExecutionState) {\n-\t\treturn updateTaskExecutionState(TaskExecutionStateWrapper.createFrom(taskExecutionState));\n-\t}\n-\n-\tboolean updateTaskExecutionState(TaskExecutionStateWrapper taskExecutionState);\n+\tboolean updateTaskExecutionState(TaskExecutionState taskExecutionState);\n \n \tSerializedInputSplit requestNextInputSplit(JobVertexID vertexID, ExecutionAttemptID executionAttempt) throws IOException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514579661", "bodyText": "it is not intuitive that this method checks for a failed state, but the plain createFrom() does not assert the opposite (i.e., that the task did not fail).", "author": "zentol", "createdAt": "2020-10-29T21:30:16Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn releasePartitions;\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n+\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFromFailedState(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "originalCommit": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MzQ2NA==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514953464", "bodyText": "I will remove the check and the factory methods. See comment #13766 (comment).", "author": "zhuzhurk", "createdAt": "2020-10-30T08:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTgyMg==", "url": "https://github.com/apache/flink/pull/13766#discussion_r514959822", "bodyText": "Just a note that createFrom() will also be used for FAILED state which is reported from TaskManager because the flags will be false.", "author": "zhuzhurk", "createdAt": "2020-10-30T09:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java b/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\ndeleted file mode 100644\nindex e15ced62c90..00000000000\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java\n+++ /dev/null\n\n@@ -1,102 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.runtime.executiongraph;\n-\n-import org.apache.flink.api.common.JobID;\n-import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n-import org.apache.flink.runtime.execution.ExecutionState;\n-import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n-\n-import static org.apache.flink.util.Preconditions.checkNotNull;\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * Wraps {@link TaskExecutionState}, along with actions to take\n- * if it is FAILED state.\n- */\n-public class TaskExecutionStateWrapper {\n-\n-\tprivate final TaskExecutionState taskExecutionState;\n-\n-\t/**\n-\t * Indicating whether to send a PRC call to remove task from TaskManager.\n-\t * True if the failure is fired by JobManager and the execution is already\n-\t * deployed. Otherwise it should be false.\n-\t */\n-\tprivate final boolean cancelTask;\n-\n-\tprivate final boolean releasePartitions;\n-\n-\tprivate TaskExecutionStateWrapper(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n-\t\tthis.cancelTask = cancelTask;\n-\t\tthis.releasePartitions = releasePartitions;\n-\t}\n-\n-\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n-\t\treturn taskExecutionState.getError(userCodeClassloader);\n-\t}\n-\n-\tpublic ExecutionAttemptID getID() {\n-\t\treturn taskExecutionState.getID();\n-\t}\n-\n-\tpublic ExecutionState getExecutionState() {\n-\t\treturn taskExecutionState.getExecutionState();\n-\t}\n-\n-\tpublic JobID getJobID() {\n-\t\treturn taskExecutionState.getJobID();\n-\t}\n-\n-\tpublic AccumulatorSnapshot getAccumulators() {\n-\t\treturn taskExecutionState.getAccumulators();\n-\t}\n-\n-\tpublic IOMetrics getIOMetrics() {\n-\t\treturn taskExecutionState.getIOMetrics();\n-\t}\n-\n-\tpublic boolean getCancelTask() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn cancelTask;\n-\t}\n-\n-\tpublic boolean getReleasePartitions() {\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn releasePartitions;\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n-\t}\n-\n-\tpublic static TaskExecutionStateWrapper createFromFailedState(\n-\t\t\tfinal TaskExecutionState taskExecutionState,\n-\t\t\tfinal boolean cancelTask,\n-\t\t\tfinal boolean releasePartitions) {\n-\n-\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n-\t\treturn new TaskExecutionStateWrapper(taskExecutionState, cancelTask, releasePartitions);\n-\t}\n-}\n"}}, {"oid": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "url": "https://github.com/apache/flink/commit/b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "message": "[FLINK-19703][hotfix][runtime] Remove the while-loop in Execution#processFail\n\nThe loop was introduced in case of concurrent issue, while the issue was already solved by FLINK-11417\nwhich forces all ExecutionGraph modification to be performed in the main thread.", "committedDate": "2020-10-30T09:15:01Z", "type": "commit"}, {"oid": "2a40a286aa55deed570dcac0cdc9196638c3c09e", "url": "https://github.com/apache/flink/commit/2a40a286aa55deed570dcac0cdc9196638c3c09e", "message": "[FLINK-19703][runtime] Replace the param 'isCallback' in Execution#processFail(...) with 'cancelTask'\n\nBecause 'isCallback' is not accurate and can lead to confusion.\nThis commit also adds a detailed explanation for params of Execution#processFail(...).", "committedDate": "2020-10-30T09:15:01Z", "type": "commit"}, {"oid": "8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "url": "https://github.com/apache/flink/commit/8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions.", "committedDate": "2020-10-30T09:15:01Z", "type": "commit"}, {"oid": "8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "url": "https://github.com/apache/flink/commit/8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions.", "committedDate": "2020-10-30T09:15:01Z", "type": "forcePushed"}]}