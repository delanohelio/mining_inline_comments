{"pr_number": 746, "pr_title": "Support date and time functions: date_add, date_sub, day, dayname, dayofweek, dayofyear, from_days, hour, microsecond, minute, month, monthname, quarter, second, subdate, time_to_sec, to_days", "pr_createdAt": "2020-09-18T19:06:30Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746", "timeline": [{"oid": "db82e295a76cecdd3544db52001250f6577eec66", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/db82e295a76cecdd3544db52001250f6577eec66", "message": "add functions day, month, quarter, year", "committedDate": "2020-09-09T01:29:13Z", "type": "commit"}, {"oid": "e46da70828a544163ea474b93be751ec30a3a2ed", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e46da70828a544163ea474b93be751ec30a3a2ed", "message": "fix build error", "committedDate": "2020-09-09T16:56:06Z", "type": "commit"}, {"oid": "88a878b5cc0144bb00fcd6b98a445adf795cd5ea", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/88a878b5cc0144bb00fcd6b98a445adf795cd5ea", "message": "fix doctest error", "committedDate": "2020-09-09T17:18:18Z", "type": "commit"}, {"oid": "63ea7885652484a4359bc20303b566043c4b008f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/63ea7885652484a4359bc20303b566043c4b008f", "message": "fix doctest build error", "committedDate": "2020-09-09T17:29:39Z", "type": "commit"}, {"oid": "7551dc897aaf94951154b6a4ec032b320463df99", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7551dc897aaf94951154b6a4ec032b320463df99", "message": "fix doctest", "committedDate": "2020-09-09T17:39:32Z", "type": "commit"}, {"oid": "a673fe24b001bcea01f3eae3a887c8245f57f108", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a673fe24b001bcea01f3eae3a887c8245f57f108", "message": "add dayofmonth()", "committedDate": "2020-09-09T18:56:39Z", "type": "commit"}, {"oid": "7c70c3360c055783b48c6c9d6ef5d8670713710f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7c70c3360c055783b48c6c9d6ef5d8670713710f", "message": "add  dayofyear()", "committedDate": "2020-09-09T19:30:37Z", "type": "commit"}, {"oid": "d87f8f4d7228a54b28b4c81413a36f71bf660935", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d87f8f4d7228a54b28b4c81413a36f71bf660935", "message": "add dayofweek()", "committedDate": "2020-09-09T19:55:24Z", "type": "commit"}, {"oid": "242403cd8617f8267d11f53ee0c8367016fde9e7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/242403cd8617f8267d11f53ee0c8367016fde9e7", "message": "fix dayofweek logic & add unit test", "committedDate": "2020-09-09T20:20:52Z", "type": "commit"}, {"oid": "be7051d2a88dfb3d2f145ffb227b13b05108d0af", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/be7051d2a88dfb3d2f145ffb227b13b05108d0af", "message": "fix doctest for dayofweek()", "committedDate": "2020-09-09T20:26:06Z", "type": "commit"}, {"oid": "6834c1079ecf99f2c8612d4e050be8e12c8e17c7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6834c1079ecf99f2c8612d4e050be8e12c8e17c7", "message": "add dayname", "committedDate": "2020-09-09T23:07:28Z", "type": "commit"}, {"oid": "ee02527085dbbe578c6549d0cd2f024fbe5f7c5e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ee02527085dbbe578c6549d0cd2f024fbe5f7c5e", "message": "add monthname", "committedDate": "2020-09-10T00:49:27Z", "type": "commit"}, {"oid": "8ab2f631839328f579ec4fd560edf209353b0c63", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8ab2f631839328f579ec4fd560edf209353b0c63", "message": "fix checkstyle build error", "committedDate": "2020-09-10T00:52:57Z", "type": "commit"}, {"oid": "458c34a7dd4b5467739a3f0db8df60ecb1ba1661", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/458c34a7dd4b5467739a3f0db8df60ecb1ba1661", "message": "fix build error", "committedDate": "2020-09-10T16:32:44Z", "type": "commit"}, {"oid": "e42aac16068445331a00ec4eded4666274722448", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e42aac16068445331a00ec4eded4666274722448", "message": "fix doctest for monthname", "committedDate": "2020-09-10T16:40:15Z", "type": "commit"}, {"oid": "960783bc9a08cbd67ccb379d40cac86435767152", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/960783bc9a08cbd67ccb379d40cac86435767152", "message": "add hour()", "committedDate": "2020-09-10T17:50:16Z", "type": "commit"}, {"oid": "4d355b22b380b9358a6c161e64ef2ed2bded2702", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4d355b22b380b9358a6c161e64ef2ed2bded2702", "message": "add minute()", "committedDate": "2020-09-10T22:30:54Z", "type": "commit"}, {"oid": "0881f24b02e2e493d56775731462c77623291ea1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0881f24b02e2e493d56775731462c77623291ea1", "message": "add second", "committedDate": "2020-09-11T22:00:54Z", "type": "commit"}, {"oid": "d199d5422fcf00939d03871457ccb67032c08a0e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d199d5422fcf00939d03871457ccb67032c08a0e", "message": "add microsecond", "committedDate": "2020-09-14T19:47:24Z", "type": "commit"}, {"oid": "c88a6dd38c69fa8fd22db5b17d9c7233363bbc3a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c88a6dd38c69fa8fd22db5b17d9c7233363bbc3a", "message": "fix datetime & timestamp issue for microsecond", "committedDate": "2020-09-15T00:35:09Z", "type": "commit"}, {"oid": "4dd0db058b446ed1e8a3325c4adea2d8011f0bd0", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4dd0db058b446ed1e8a3325c4adea2d8011f0bd0", "message": "add time_to_sec", "committedDate": "2020-09-15T17:30:59Z", "type": "commit"}, {"oid": "988d177d507e935a52f4e68a5cbd72da66e0d4b4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/988d177d507e935a52f4e68a5cbd72da66e0d4b4", "message": "add subdate & date_sub", "committedDate": "2020-09-15T20:13:32Z", "type": "commit"}, {"oid": "9c1d96bf91b8153a79684ab2b2969c27229bcf08", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9c1d96bf91b8153a79684ab2b2969c27229bcf08", "message": "Merge branch 'develop' of https://github.com/rupal-bq/sql into date-time-functions\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunctionTest.java", "committedDate": "2020-09-15T20:26:24Z", "type": "commit"}, {"oid": "693211ad977bdd982bc2720b6c7cad212673099b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/693211ad977bdd982bc2720b6c7cad212673099b", "message": "fix doctest error", "committedDate": "2020-09-15T20:28:00Z", "type": "commit"}, {"oid": "36449f7516f6cee16af96d4cd5959b2939d45420", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/36449f7516f6cee16af96d4cd5959b2939d45420", "message": "fix build error", "committedDate": "2020-09-15T21:11:13Z", "type": "commit"}, {"oid": "048d5d6c976f7a34e22dd258173e9d77e2ac30ce", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/048d5d6c976f7a34e22dd258173e9d77e2ac30ce", "message": "add KeywordsCanBeId for dayofweek", "committedDate": "2020-09-15T23:54:08Z", "type": "commit"}, {"oid": "c0593d9edc34038f93fd467e636b4c5c491049f3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c0593d9edc34038f93fd467e636b4c5c491049f3", "message": "add to_days", "committedDate": "2020-09-16T19:34:37Z", "type": "commit"}, {"oid": "7ee0dbc947f83b310ed1b5263f1ab3882d688225", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7ee0dbc947f83b310ed1b5263f1ab3882d688225", "message": "add from_days()", "committedDate": "2020-09-16T21:06:09Z", "type": "commit"}, {"oid": "7764a0d4d3e2cf1e6c03d7669609bbe8ca422d19", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7764a0d4d3e2cf1e6c03d7669609bbe8ca422d19", "message": "arrange by alphabetical order", "committedDate": "2020-09-17T18:12:57Z", "type": "commit"}, {"oid": "18a6a8489bcd50b0edfe847da96252f31caa7115", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/18a6a8489bcd50b0edfe847da96252f31caa7115", "message": "add manual IT", "committedDate": "2020-09-17T21:51:56Z", "type": "commit"}, {"oid": "7054a4b6c1efee9d724ae99a43ca766d1ce3a312", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7054a4b6c1efee9d724ae99a43ca766d1ce3a312", "message": "add string input for date functions", "committedDate": "2020-09-17T23:41:44Z", "type": "commit"}, {"oid": "7e4c7266f0f10c72f66c513b45cf9fb77f733b11", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7e4c7266f0f10c72f66c513b45cf9fb77f733b11", "message": "fix microsecond", "committedDate": "2020-09-18T17:10:30Z", "type": "commit"}, {"oid": "f0a16ce384ee021f54b2de091cb33897f48335de", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f0a16ce384ee021f54b2de091cb33897f48335de", "message": "update doc", "committedDate": "2020-09-18T18:41:47Z", "type": "commit"}, {"oid": "b757335ed319003d6b76c23f81f24176c7c48781", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b757335ed319003d6b76c23f81f24176c7c48781", "message": "add date_add", "committedDate": "2020-09-18T22:05:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNTc5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r491235799", "bodyText": "Can simplify amount of code in ternary:\nreturn String.format(\"%s %s\", DateTimeFormatter.ISO_DATE.format(datetime),\n        DateTimeFormatter.ISO_TIME.format((datetime.getNano() == 0) ? \n                datetime.truncatedTo(ChronoUnit.SECONDS) : datetime))", "author": "lyndonb-bq", "createdAt": "2020-09-18T23:36:55Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java", "diffHunk": "@@ -79,8 +80,11 @@ public boolean equal(ExprValue other) {\n \n   @Override\n   public String value() {\n-    return String.format(\"%s %s\", DateTimeFormatter.ISO_DATE.format(datetime),\n-        DateTimeFormatter.ISO_TIME.format(datetime));\n+    return datetime.getNano() == 0", "originalCommit": "b757335ed319003d6b76c23f81f24176c7c48781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NzUyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r491247525", "bodyText": "added", "author": "rupal-bq", "createdAt": "2020-09-19T00:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNTc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java\nindex 4ed25e6d..aad4e0ed 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprDatetimeValue.java\n\n@@ -80,11 +80,9 @@ public class ExprDatetimeValue extends AbstractExprValue {\n \n   @Override\n   public String value() {\n-    return datetime.getNano() == 0\n-        ? String.format(\"%s %s\", DateTimeFormatter.ISO_DATE.format(datetime),\n-        DateTimeFormatter.ISO_TIME.format(datetime.truncatedTo(ChronoUnit.SECONDS)))\n-        : String.format(\"%s %s\", DateTimeFormatter.ISO_DATE.format(datetime),\n-            DateTimeFormatter.ISO_TIME.format(datetime));\n+    return String.format(\"%s %s\", DateTimeFormatter.ISO_DATE.format(datetime),\n+        DateTimeFormatter.ISO_TIME.format((datetime.getNano() == 0)\n+            ? datetime.truncatedTo(ChronoUnit.SECONDS) : datetime));\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNjYzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r491236631", "bodyText": "I think you can do without ternary.\nreturn new ExprIntegerValue((date.dateValue().getDayOfWeek().getValue() % 7) + 1)", "author": "lyndonb-bq", "createdAt": "2020-09-18T23:41:49Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -123,19 +392,167 @@ private ExprValue exprDate(ExprValue exprValue) {\n     }\n   }\n \n+  /**\n+   * Name of the Weekday implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayName(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprStringValue(\n+        date.dateValue().getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()));\n+  }\n+\n   /**\n    * Day of Month implementation for ExprValue.\n    * @param date ExprValue of Date type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayOfMonth(ExprValue date) {\n     if (date instanceof ExprStringValue) {\n-      return new ExprIntegerValue(\n-          new ExprDateValue(date.stringValue()).dateValue().getDayOfMonth());\n+      date = new ExprDateValue(date.stringValue());\n     }\n     return new ExprIntegerValue(date.dateValue().getDayOfMonth());\n   }\n \n+  /**\n+   * Day of Week implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayOfWeek(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprIntegerValue(date.dateValue().getDayOfWeek().getValue() == 7 ? 1", "originalCommit": "b757335ed319003d6b76c23f81f24176c7c48781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NzU1OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r491247558", "bodyText": "done", "author": "rupal-bq", "createdAt": "2020-09-19T00:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNjYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex d412f001..c0b03dc1 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -426,8 +426,7 @@ public class DateTimeFunction {\n     if (date instanceof ExprStringValue) {\n       date = new ExprDateValue(date.stringValue());\n     }\n-    return new ExprIntegerValue(date.dateValue().getDayOfWeek().getValue() == 7 ? 1\n-        : date.dateValue().getDayOfWeek().getValue() + 1);\n+    return new ExprIntegerValue((date.dateValue().getDayOfWeek().getValue() % 7) + 1);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNzE0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r491237141", "bodyText": "Should latch variable and reuse since it's a lot of function calls.\nint month = date.dateValue().getMonthValue();\nreturn new ExprIntegerValue((month / 3) + ((month % 3) == 0 ? 0 : 1));", "author": "lyndonb-bq", "createdAt": "2020-09-18T23:44:42Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -123,19 +392,167 @@ private ExprValue exprDate(ExprValue exprValue) {\n     }\n   }\n \n+  /**\n+   * Name of the Weekday implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayName(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprStringValue(\n+        date.dateValue().getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()));\n+  }\n+\n   /**\n    * Day of Month implementation for ExprValue.\n    * @param date ExprValue of Date type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayOfMonth(ExprValue date) {\n     if (date instanceof ExprStringValue) {\n-      return new ExprIntegerValue(\n-          new ExprDateValue(date.stringValue()).dateValue().getDayOfMonth());\n+      date = new ExprDateValue(date.stringValue());\n     }\n     return new ExprIntegerValue(date.dateValue().getDayOfMonth());\n   }\n \n+  /**\n+   * Day of Week implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayOfWeek(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprIntegerValue(date.dateValue().getDayOfWeek().getValue() == 7 ? 1\n+        : date.dateValue().getDayOfWeek().getValue() + 1);\n+  }\n+\n+  /**\n+   * Day of Year implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayOfYear(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprIntegerValue(date.dateValue().getDayOfYear());\n+  }\n+\n+  /** From_days implementation for ExprValue.\n+   * @param exprValue Day number N.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprFromDays(ExprValue exprValue) {\n+    return new ExprDateValue(LocalDate.ofEpochDay(exprValue.longValue() - DAYS_0000_TO_1970));\n+  }\n+\n+  /**\n+   * Hour implementation for ExprValue.\n+   * @param exprValue ExprValue of Time type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprHour(ExprValue exprValue) {\n+    return new ExprIntegerValue(exprValue.timeValue().getHour());\n+  }\n+\n+  /**\n+   * Microsecond implementation for ExprValue.\n+   * @param exprValue ExprValue of Time type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprMicrosecond(ExprValue exprValue) {\n+    return new ExprIntegerValue(\n+        TimeUnit.MICROSECONDS.convert(exprValue.timeValue().getNano(), TimeUnit.NANOSECONDS));\n+  }\n+\n+  /**\n+   * Minute implementation for ExprValue.\n+   * @param exprValue ExprValue of Time type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprMinute(ExprValue exprValue) {\n+    return new ExprIntegerValue(exprValue.timeValue().getMinute());\n+  }\n+\n+  /**\n+   * Month for date implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprMonth(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprIntegerValue(date.dateValue().getMonthValue());\n+  }\n+\n+  /**\n+   * Name of the Month implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprMonthName(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprStringValue(\n+        date.dateValue().getMonth().getDisplayName(TextStyle.FULL, Locale.getDefault()));\n+  }\n+\n+  /**\n+   * Quarter for date implementation for ExprValue.\n+   *\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprQuarter(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprIntegerValue((date.dateValue().getMonthValue() % 3) == 0", "originalCommit": "b757335ed319003d6b76c23f81f24176c7c48781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NzYzMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r491247633", "bodyText": "Thanks, I added a variable.", "author": "rupal-bq", "createdAt": "2020-09-19T00:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNzE0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex d412f001..c0b03dc1 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -426,8 +426,7 @@ public class DateTimeFunction {\n     if (date instanceof ExprStringValue) {\n       date = new ExprDateValue(date.stringValue());\n     }\n-    return new ExprIntegerValue(date.dateValue().getDayOfWeek().getValue() == 7 ? 1\n-        : date.dateValue().getDayOfWeek().getValue() + 1);\n+    return new ExprIntegerValue((date.dateValue().getDayOfWeek().getValue() % 7) + 1);\n   }\n \n   /**\n"}}, {"oid": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1a44c36c211c4e15caf6917cac7f6dc3791129ea", "message": "address PR comments", "committedDate": "2020-09-19T00:44:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NTg4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r492185881", "bodyText": "why the function has same input signature but has different output signature?", "author": "penghuo", "createdAt": "2020-09-21T16:17:45Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -72,17 +100,202 @@ private FunctionResolver date() {\n         impl(nullMissingHandling(DateTimeFunction::exprDate), DATE, TIMESTAMP));\n   }\n \n+  /**\n+   * Specify a start date and add a temporal amount to the date.\n+   * The return type depends on the date type and the interval unit. Detailed supported signatures:\n+   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n+   * (DATE, LONG) -> DATE\n+   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   */\n+  private FunctionResolver date_add() {\n+    return define(BuiltinFunctionName.DATE_ADD.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATE, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATETIME, DATE, INTERVAL),", "originalCommit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxOTg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r494519880", "bodyText": "some use cases required different return type. E.g select date_add(date('2020-09-16'), interval 1 hour) should return 2020-09-16 01:00:00 but select date_add(date('2020-09-16'), interval 1 day) should return 2020-09-17.  But this was always returning datetime in schema  anyway so removed it.", "author": "rupal-bq", "createdAt": "2020-09-24T18:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NTg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "20acde3d0f51681c78a8702dee9af5587081aba6", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex c0b03dc1..3ff07dc8 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -103,13 +108,14 @@ public class DateTimeFunction {\n   /**\n    * Specify a start date and add a temporal amount to the date.\n    * The return type depends on the date type and the interval unit. Detailed supported signatures:\n-   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n+   * (STRING/DATE/DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n    * (DATE, LONG) -> DATE\n-   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   * (STRING/DATETIME/TIMESTAMP, LONG) -> DATETIME\n    */\n   private FunctionResolver date_add() {\n     return define(BuiltinFunctionName.DATE_ADD.getName(),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATE, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n+            DATETIME, STRING, INTERVAL),\n         impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATETIME, DATE, INTERVAL),\n         impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n             DATETIME, DATETIME, INTERVAL),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r492186411", "bodyText": "do you mean (DATE/DATETIME/TIMESTAMP, INTERVAL) -> DATETIME", "author": "penghuo", "createdAt": "2020-09-21T16:18:36Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -72,17 +100,202 @@ private FunctionResolver date() {\n         impl(nullMissingHandling(DateTimeFunction::exprDate), DATE, TIMESTAMP));\n   }\n \n+  /**\n+   * Specify a start date and add a temporal amount to the date.\n+   * The return type depends on the date type and the interval unit. Detailed supported signatures:\n+   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME", "originalCommit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyMDE1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r494520155", "bodyText": "yes, fixed it.", "author": "rupal-bq", "createdAt": "2020-09-24T18:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4NjQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "20acde3d0f51681c78a8702dee9af5587081aba6", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex c0b03dc1..3ff07dc8 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -103,13 +108,14 @@ public class DateTimeFunction {\n   /**\n    * Specify a start date and add a temporal amount to the date.\n    * The return type depends on the date type and the interval unit. Detailed supported signatures:\n-   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n+   * (STRING/DATE/DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n    * (DATE, LONG) -> DATE\n-   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   * (STRING/DATETIME/TIMESTAMP, LONG) -> DATETIME\n    */\n   private FunctionResolver date_add() {\n     return define(BuiltinFunctionName.DATE_ADD.getName(),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATE, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n+            DATETIME, STRING, INTERVAL),\n         impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATETIME, DATE, INTERVAL),\n         impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n             DATETIME, DATETIME, INTERVAL),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE4ODY0MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r492188640", "bodyText": "The ExprDatetimeValue only has type DATETIME.", "author": "penghuo", "createdAt": "2020-09-21T16:22:05Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -110,6 +334,51 @@ private FunctionResolver timestamp() {\n         impl(nullMissingHandling(DateTimeFunction::exprTimestamp), TIMESTAMP, TIMESTAMP));\n   }\n \n+  /**\n+   * TO_DAYS(DATE). return the day number of the given date.\n+   */\n+  private FunctionResolver to_days() {\n+    return define(BuiltinFunctionName.TO_DAYS.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, STRING),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, DATE),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, DATETIME));\n+  }\n+\n+  /**\n+   * YEAR(DATE). return the year for date (1000-9999).\n+   */\n+  private FunctionResolver year() {\n+    return define(BuiltinFunctionName.YEAR.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, DATE),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, STRING)\n+    );\n+  }\n+\n+  /**\n+   * ADDDATE function implementation for ExprValue.\n+   *\n+   * @param date ExprValue of Date/Datetime/Timestamp type.\n+   * @param expr ExprValue of Interval type, the temporal amount to add.\n+   * @return Date/Datetime resulted from expr added to date.", "originalCommit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20acde3d0f51681c78a8702dee9af5587081aba6", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex c0b03dc1..3ff07dc8 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -335,21 +370,24 @@ public class DateTimeFunction {\n   }\n \n   /**\n-   * TO_DAYS(DATE). return the day number of the given date.\n+   * TO_DAYS(STRING/DATE/DATETIME/TIMESTAMP). return the day number of the given date.\n    */\n   private FunctionResolver to_days() {\n     return define(BuiltinFunctionName.TO_DAYS.getName(),\n         impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, STRING),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, TIMESTAMP),\n         impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, DATE),\n         impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, DATETIME));\n   }\n \n   /**\n-   * YEAR(DATE). return the year for date (1000-9999).\n+   * YEAR(STRING/DATE/DATETIME/TIMESTAMP). return the year for date (1000-9999).\n    */\n   private FunctionResolver year() {\n     return define(BuiltinFunctionName.YEAR.getName(),\n         impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, DATE),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, DATETIME),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, TIMESTAMP),\n         impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, STRING)\n     );\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NTAwMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r492195002", "bodyText": "The input value should be final", "author": "penghuo", "createdAt": "2020-09-21T16:31:55Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -123,19 +392,165 @@ private ExprValue exprDate(ExprValue exprValue) {\n     }\n   }\n \n+  /**\n+   * Name of the Weekday implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayName(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());\n+    }\n+    return new ExprStringValue(\n+        date.dateValue().getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()));\n+  }\n+\n   /**\n    * Day of Month implementation for ExprValue.\n    * @param date ExprValue of Date type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayOfMonth(ExprValue date) {\n     if (date instanceof ExprStringValue) {\n-      return new ExprIntegerValue(\n-          new ExprDateValue(date.stringValue()).dateValue().getDayOfMonth());\n+      date = new ExprDateValue(date.stringValue());\n     }\n     return new ExprIntegerValue(date.dateValue().getDayOfMonth());\n   }\n \n+  /**\n+   * Day of Week implementation for ExprValue.\n+   * @param date ExprValue of Date type.\n+   * @return ExprValue.\n+   */\n+  private ExprValue exprDayOfWeek(ExprValue date) {\n+    if (date instanceof ExprStringValue) {\n+      date = new ExprDateValue(date.stringValue());", "originalCommit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20acde3d0f51681c78a8702dee9af5587081aba6", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex c0b03dc1..3ff07dc8 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -394,54 +437,56 @@ public class DateTimeFunction {\n \n   /**\n    * Name of the Weekday implementation for ExprValue.\n-   * @param date ExprValue of Date type.\n+   *\n+   * @param date ExprValue of Date/String type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayName(ExprValue date) {\n-    if (date instanceof ExprStringValue) {\n-      date = new ExprDateValue(date.stringValue());\n-    }\n+    ExprValue exprValue =\n+        date instanceof ExprStringValue ? getStringValue(date.stringValue()) : date;\n     return new ExprStringValue(\n-        date.dateValue().getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()));\n+        exprValue.dateValue().getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.getDefault()));\n   }\n \n   /**\n    * Day of Month implementation for ExprValue.\n-   * @param date ExprValue of Date type.\n+   *\n+   * @param date ExprValue of Date/String type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayOfMonth(ExprValue date) {\n-    if (date instanceof ExprStringValue) {\n-      date = new ExprDateValue(date.stringValue());\n-    }\n-    return new ExprIntegerValue(date.dateValue().getDayOfMonth());\n+    ExprValue exprValue =\n+        date instanceof ExprStringValue ? getStringValue(date.stringValue()) : date;\n+    return new ExprIntegerValue(exprValue.dateValue().getDayOfMonth());\n   }\n \n   /**\n    * Day of Week implementation for ExprValue.\n-   * @param date ExprValue of Date type.\n+   *\n+   * @param date ExprValue of Date/String type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayOfWeek(ExprValue date) {\n-    if (date instanceof ExprStringValue) {\n-      date = new ExprDateValue(date.stringValue());\n-    }\n-    return new ExprIntegerValue((date.dateValue().getDayOfWeek().getValue() % 7) + 1);\n+    ExprValue exprValue =\n+        date instanceof ExprStringValue ? getStringValue(date.stringValue()) : date;\n+    return new ExprIntegerValue((exprValue.dateValue().getDayOfWeek().getValue() % 7) + 1);\n   }\n \n   /**\n    * Day of Year implementation for ExprValue.\n-   * @param date ExprValue of Date type.\n+   *\n+   * @param date ExprValue of Date/String type.\n    * @return ExprValue.\n    */\n   private ExprValue exprDayOfYear(ExprValue date) {\n-    if (date instanceof ExprStringValue) {\n-      date = new ExprDateValue(date.stringValue());\n-    }\n-    return new ExprIntegerValue(date.dateValue().getDayOfYear());\n+    ExprValue exprValue =\n+        date instanceof ExprStringValue ? getStringValue(date.stringValue()) : date;\n+    return new ExprIntegerValue(exprValue.dateValue().getDayOfYear());\n   }\n \n-  /** From_days implementation for ExprValue.\n+  /**\n+   * From_days implementation for ExprValue.\n+   *\n    * @param exprValue Day number N.\n    * @return ExprValue.\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNDE4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r492214187", "bodyText": "e.g. day(date_add(\"2020-09-21\", 1))\nthis will throw exception because day function can't accept datetime as paramater?", "author": "penghuo", "createdAt": "2020-09-21T17:04:22Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -72,17 +100,202 @@ private FunctionResolver date() {\n         impl(nullMissingHandling(DateTimeFunction::exprDate), DATE, TIMESTAMP));\n   }\n \n+  /**\n+   * Specify a start date and add a temporal amount to the date.\n+   * The return type depends on the date type and the interval unit. Detailed supported signatures:\n+   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n+   * (DATE, LONG) -> DATE\n+   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   */\n+  private FunctionResolver date_add() {\n+    return define(BuiltinFunctionName.DATE_ADD.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATE, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATETIME, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n+            DATETIME, DATETIME, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n+            DATETIME, TIMESTAMP, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateDays), DATE, DATE, LONG),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateDays), DATETIME, DATETIME, LONG),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateDays), DATETIME, TIMESTAMP, LONG)\n+    );\n+  }\n+\n+  /**\n+   * Specify a start date and subtract a temporal amount to the date.\n+   * The return type depends on the date type and the interval unit. Detailed supported signatures:\n+   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n+   * (DATE, LONG) -> DATE\n+   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   */\n+  private FunctionResolver date_sub() {\n+    return define(BuiltinFunctionName.DATE_SUB.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateInterval), DATE, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateInterval), DATETIME, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateInterval),\n+            DATETIME, DATETIME, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateInterval),\n+            DATETIME, TIMESTAMP, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateDays), DATE, DATE, LONG),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateDays), DATETIME, DATETIME, LONG),\n+        impl(nullMissingHandling(DateTimeFunction::exprSubDateDays), DATETIME, TIMESTAMP, LONG)\n+    );\n+  }\n+\n+  /**\n+   * DAY(DATE). return the day of the month (1-31).\n+   */\n+  private FunctionResolver day() {", "originalCommit": "1a44c36c211c4e15caf6917cac7f6dc3791129ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyMDk1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r494520955", "bodyText": "added datetime & timestamp for all functions", "author": "rupal-bq", "createdAt": "2020-09-24T18:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNDE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "20acde3d0f51681c78a8702dee9af5587081aba6", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\nindex c0b03dc1..3ff07dc8 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n\n@@ -103,13 +108,14 @@ public class DateTimeFunction {\n   /**\n    * Specify a start date and add a temporal amount to the date.\n    * The return type depends on the date type and the interval unit. Detailed supported signatures:\n-   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n+   * (STRING/DATE/DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n    * (DATE, LONG) -> DATE\n-   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   * (STRING/DATETIME/TIMESTAMP, LONG) -> DATETIME\n    */\n   private FunctionResolver date_add() {\n     return define(BuiltinFunctionName.DATE_ADD.getName(),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATE, DATE, INTERVAL),\n+        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n+            DATETIME, STRING, INTERVAL),\n         impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATETIME, DATE, INTERVAL),\n         impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n             DATETIME, DATETIME, INTERVAL),\n"}}, {"oid": "20acde3d0f51681c78a8702dee9af5587081aba6", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/20acde3d0f51681c78a8702dee9af5587081aba6", "message": "update tests & doc", "committedDate": "2020-09-23T00:03:16Z", "type": "commit"}, {"oid": "a51f2f77ba99749659f3f1c4542fe0f1a848d536", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a51f2f77ba99749659f3f1c4542fe0f1a848d536", "message": "Merge branch 'develop' of https://github.com/rupal-bq/sql into date-time-functions\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/DSL.java\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/BuiltinFunctionName.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunctionTest.java\n#\tdocs/user/dql/functions.rst\n#\tinteg-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/sql/DateTimeFunctionIT.java\n#\tppl/src/main/antlr/OpenDistroPPLLexer.g4\n#\tppl/src/main/antlr/OpenDistroPPLParser.g4\n#\tsql/src/main/antlr/OpenDistroSQLParser.g4", "committedDate": "2020-09-23T01:27:43Z", "type": "commit"}, {"oid": "42c72226b41b5d1ed357509d40ddccec62eb3038", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/42c72226b41b5d1ed357509d40ddccec62eb3038", "message": "fix doc format", "committedDate": "2020-09-23T01:33:47Z", "type": "commit"}, {"oid": "0f3894a92e85604413bda629a7edca8325099769", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0f3894a92e85604413bda629a7edca8325099769", "message": "update tests for adddate", "committedDate": "2020-09-23T02:14:53Z", "type": "commit"}, {"oid": "a73a8e9975476eb198bcb87f516edc20ee7abddc", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a73a8e9975476eb198bcb87f516edc20ee7abddc", "message": "move string conversion to ExprStringValue", "committedDate": "2020-09-24T01:21:16Z", "type": "commit"}, {"oid": "ea9b19088bdad36d4f8d6f7c71a1171bf202cafa", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ea9b19088bdad36d4f8d6f7c71a1171bf202cafa", "message": "add string type in doc", "committedDate": "2020-09-24T17:58:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0MDAwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r494540006", "bodyText": "adddate, date_add, date_sub & subdate need to return date/datetime according to calculated result. Here, I have returned date if time is zero for these functions to get correct result. But the return type will be still be datetime in schema because multiple return type can't be added in define function for the same input parameters.", "author": "rupal-bq", "createdAt": "2020-09-24T18:50:15Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/datetime/DateTimeFunction.java", "diffHunk": "@@ -114,28 +361,57 @@ private FunctionResolver timestamp() {\n   }\n \n   /**\n-   * Specify a start date and add a temporal amount to the date.\n-   * The return type depends on the date type and the interval unit. Detailed supported signatures:\n-   * (DATE, DATETIME/TIMESTAMP, INTERVAL) -> DATETIME\n-   * (DATE, LONG) -> DATE\n-   * (DATETIME/TIMESTAMP, LONG) -> DATETIME\n+   * TO_DAYS(STRING/DATE/DATETIME/TIMESTAMP). return the day number of the given date.\n    */\n-  private FunctionResolver adddate() {\n-    return define(BuiltinFunctionName.ADDDATE.getName(),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATE, DATE, INTERVAL),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval), DATETIME, DATE, INTERVAL),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n-            DATETIME, DATETIME, INTERVAL),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateInterval),\n-            DATETIME, TIMESTAMP, INTERVAL),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateDays), DATE, DATE, LONG),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateDays), DATETIME, DATETIME, LONG),\n-        impl(nullMissingHandling(DateTimeFunction::exprAddDateDays), DATETIME, TIMESTAMP, LONG)\n+  private FunctionResolver to_days() {\n+    return define(BuiltinFunctionName.TO_DAYS.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, STRING),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, TIMESTAMP),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, DATE),\n+        impl(nullMissingHandling(DateTimeFunction::exprToDays), LONG, DATETIME));\n+  }\n+\n+  /**\n+   * YEAR(STRING/DATE/DATETIME/TIMESTAMP). return the year for date (1000-9999).\n+   */\n+  private FunctionResolver year() {\n+    return define(BuiltinFunctionName.YEAR.getName(),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, DATE),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, DATETIME),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, TIMESTAMP),\n+        impl(nullMissingHandling(DateTimeFunction::exprYear), INTEGER, STRING)\n     );\n   }\n \n+  /**\n+   * ADDDATE function implementation for ExprValue.\n+   *\n+   * @param date ExprValue of String/Date/Datetime/Timestamp type.\n+   * @param expr ExprValue of Interval type, the temporal amount to add.\n+   * @return Datetime resulted from expr added to date.\n+   */\n+  private ExprValue exprAddDateInterval(ExprValue date, ExprValue expr) {\n+    ExprValue exprValue = new ExprDatetimeValue(date.datetimeValue().plus(expr.intervalValue()));", "originalCommit": "ea9b19088bdad36d4f8d6f7c71a1171bf202cafa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "61ac4e51112c91a47cc5875baedc83fcab86ec33", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/61ac4e51112c91a47cc5875baedc83fcab86ec33", "message": "Merge branch 'develop' of https://github.com/rupal-bq/sql into date-time-functions", "committedDate": "2020-09-24T20:33:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDY0NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r496094644", "bodyText": "could you add the test cases for these functions?", "author": "penghuo", "createdAt": "2020-09-28T16:51:22Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprStringValue.java", "diffHunk": "@@ -43,6 +48,40 @@ public String stringValue() {\n     return value;\n   }\n \n+  @Override", "originalCommit": "61ac4e51112c91a47cc5875baedc83fcab86ec33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE1MTYwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/746#discussion_r496151606", "bodyText": "added test cases for date-time functions in ExprStringValue", "author": "rupal-bq", "createdAt": "2020-09-28T18:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "dc70cd6986eca3ca66268a6bb66c4b4d44505464", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprStringValue.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprStringValue.java\nindex 1c0fdf98..42de804f 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprStringValue.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprStringValue.java\n\n@@ -50,36 +50,36 @@ public class ExprStringValue extends AbstractExprValue {\n \n   @Override\n   public LocalDateTime datetimeValue() {\n-    ExprValue date;\n     try {\n-      date = new ExprDatetimeValue(value);\n+      return new ExprDatetimeValue(value).datetimeValue();\n     } catch (SemanticCheckException e) {\n-      date = new ExprDateValue(value);\n-      date = new ExprDatetimeValue(LocalDateTime.of(date.dateValue(), LocalTime.of(0, 0, 0)));\n+      try {\n+        return new ExprDatetimeValue(\n+            LocalDateTime.of(new ExprDateValue(value).dateValue(), LocalTime.of(0, 0, 0)))\n+            .datetimeValue();\n+      } catch (SemanticCheckException exception) {\n+        throw new SemanticCheckException(String.format(\"datetime:%s in unsupported format, please \"\n+            + \"use yyyy-MM-dd HH:mm:ss[.SSSSSS]\", value));\n+      }\n     }\n-    return date.datetimeValue();\n   }\n \n   @Override\n   public LocalDate dateValue() {\n-    ExprValue date;\n     try {\n-      date = new ExprDatetimeValue(value);\n+      return new ExprDatetimeValue(value).dateValue();\n     } catch (SemanticCheckException e) {\n-      date = new ExprDateValue(value);\n+      return new ExprDateValue(value).dateValue();\n     }\n-    return date.dateValue();\n   }\n \n   @Override\n   public LocalTime timeValue() {\n-    ExprValue date;\n     try {\n-      date = new ExprDatetimeValue(value);\n+      return new ExprDatetimeValue(value).timeValue();\n     } catch (SemanticCheckException e) {\n-      date = new ExprTimeValue(value);\n+      return new ExprTimeValue(value).timeValue();\n     }\n-    return date.timeValue();\n   }\n \n   @Override\n"}}, {"oid": "dc70cd6986eca3ca66268a6bb66c4b4d44505464", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/dc70cd6986eca3ca66268a6bb66c4b4d44505464", "message": "add test cases for datetime function in ExpeStringValue", "committedDate": "2020-09-28T18:15:06Z", "type": "commit"}, {"oid": "d93f02ba2f7ecdbbfb5b25af2946a708e4c00b1f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d93f02ba2f7ecdbbfb5b25af2946a708e4c00b1f", "message": "Merge branch 'develop' of https://github.com/rupal-bq/sql into date-time-functions\n\n# Conflicts:\n#\tsql/src/main/antlr/OpenDistroSQLIdentifierParser.g4", "committedDate": "2020-09-28T23:02:34Z", "type": "commit"}, {"oid": "c001615781da32c21d77823637bc80b3134df421", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c001615781da32c21d77823637bc80b3134df421", "message": "removing implicit def for keyword in parser", "committedDate": "2020-09-29T00:29:42Z", "type": "commit"}, {"oid": "104e6b9d64c21e84b48bbd2e6e79c92a22c9c073", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/104e6b9d64c21e84b48bbd2e6e79c92a22c9c073", "message": "add dayofweek", "committedDate": "2020-09-29T00:59:56Z", "type": "commit"}]}