{"pr_number": 345, "pr_title": "Syntax and semantic exceptions handling for unsupported features", "pr_createdAt": "2020-01-13T23:52:23Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345", "timeline": [{"oid": "a8069008091a8a5c1c0613d6d6a0d9e4646b2ac5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a8069008091a8a5c1c0613d6d6a0d9e4646b2ac5", "message": "Added a filter in semantic layer for unsupported features: nested functions, aggregations with function aggregators, functions with aggregation arguments", "committedDate": "2020-01-10T01:41:06Z", "type": "commit"}, {"oid": "0901a325eb551ea37991f0fe2e6e1d061cc2e8c7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0901a325eb551ea37991f0fe2e6e1d061cc2e8c7", "message": "Excluded the special esfunctions that support nested", "committedDate": "2020-01-13T19:19:38Z", "type": "commit"}, {"oid": "b91ec765aefa9e81e79094cd577dd7a66b997ccc", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b91ec765aefa9e81e79094cd577dd7a66b997ccc", "message": "Added unit tests", "committedDate": "2020-01-13T22:12:39Z", "type": "commit"}, {"oid": "d2206e776bdf836d2f839ce81ea3a31b6e900553", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d2206e776bdf836d2f839ce81ea3a31b6e900553", "message": "Added integ tests", "committedDate": "2020-01-13T23:00:53Z", "type": "commit"}, {"oid": "15a17600336b870393da1f6edc17f697eaa805b3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/15a17600336b870393da1f6edc17f697eaa805b3", "message": "Merge remote-tracking branch 'origin' into parser-exception", "committedDate": "2020-01-13T23:34:16Z", "type": "commit"}, {"oid": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c", "message": "Updated", "committedDate": "2020-01-14T00:18:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366100134", "bodyText": "I'm not sure I completely understand the explanation from the comment- are you saying that these tests throw the SqlFeatureNotImplementedException too quickly currently, which is why so many of them are set to @Ignore?", "author": "davidcui1225", "createdAt": "2020-01-14T00:29:42Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "originalCommit": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTQ5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366101493", "bodyText": "@davidcui-amzn Yes, how shall I put it to make it clear?", "author": "chloe-zh", "createdAt": "2020-01-14T00:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Njc5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366476796", "bodyText": "I think it is mostly clear- maybe just add something at the beginning such as Test set to ignore due to nested functions blocked by...", "author": "davidcui1225", "createdAt": "2020-01-14T17:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwODM5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366508399", "bodyText": "Great, have changed them. Thanks!", "author": "chloe-zh", "createdAt": "2020-01-14T18:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\nindex 9d899701..84bb81af 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\n\n@@ -96,7 +96,7 @@ public class SemanticAnalyzerScalarFunctionTest extends SemanticAnalyzerTestBase\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n-    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */\n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */\n     @Test\n     public void substringWithLogFunctionCallWithUnknownFieldShouldPass() {\n         expectValidationFailWithErrorMessages(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODI3OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366378278", "bodyText": "Could you add the exception expectation?", "author": "penghuo", "createdAt": "2020-01-14T14:45:52Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerOperatorTest.java", "diffHunk": "@@ -55,9 +55,9 @@ public void compareSubstringFunctionCallEqualsToNumberShouldFail() {\n     }\n \n     @Test\n-    public void compareLogAndAbsFunctionCallWithIntegerSmallerThanStringShouldFail() {\n+    public void compareLogFunctionCallWithIntegerSmallerThanStringShouldFail() {", "originalCommit": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODY3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366378672", "bodyText": "Why ignore the test cases? Should we add the exception assert?", "author": "penghuo", "createdAt": "2020-01-14T14:46:36Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -104,21 +106,25 @@ public void substringWithLogFunctionCallWithUnknownFieldShouldPass() {\n                 );\n     }\n \n+    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */", "originalCommit": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NTc4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366465787", "bodyText": "That was because these cases are not valid for now since the plugin does not support these features so far, but they are remained here for future implementation.\nUTs and ITs are added in AntlrSqlParseTreeVisitorTest.java and QueryAnalysis.java instead.", "author": "chloe-zh", "createdAt": "2020-01-14T17:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3ODY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\nindex 9d899701..84bb81af 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\n\n@@ -106,25 +106,25 @@ public class SemanticAnalyzerScalarFunctionTest extends SemanticAnalyzerTestBase\n                 );\n     }\n \n-    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */\n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */\n     @Test\n     public void logFunctionCallWithResultOfAbsFunctionCallWithOneNumberShouldPass() {\n         validate(\"SELECT LOG(ABS(age)) FROM semantics\");\n     }\n \n-    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */\n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */\n     @Test\n     public void logFunctionCallWithMoreNestedFunctionCallWithOneNumberShouldPass() {\n         validate(\"SELECT LOG(ABS(SQRT(balance))) FROM semantics\");\n     }\n \n-    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */\n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */\n     @Test\n     public void substringFunctionCallWithResultOfAnotherSubstringAndAbsFunctionCallShouldPass() {\n         validate(\"SELECT SUBSTRING(SUBSTRING(city, ABS(age), 1), 2, ABS(1)) FROM semantics\");\n     }\n \n-    @Ignore /** nested functions are blocked by throwing SqlFeatureNotImplementedException yet before implemented */\n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */\n     @Test\n     public void substringFunctionCallWithResultOfMathFunctionCallShouldFail() {\n         expectValidationFailWithErrorMessages(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTE4Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366379183", "bodyText": "Could you also add the exception message assert?", "author": "penghuo", "createdAt": "2020-01-14T14:47:31Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java", "diffHunk": "@@ -74,6 +74,42 @@ public void selectStarShouldReturnEmptyProductAsQueryVisitingResult() {\n         Assert.assertTrue(result.isCompatible(new Product(emptyList())));\n     }\n \n+    @Test(expected = SqlFeatureNotImplementedException.class)", "originalCommit": "aeb49dbf1f3b9b0ef7b006113a3f10343bd8018c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3ODU0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366478542", "bodyText": "Will do, thanks!", "author": "chloe-zh", "createdAt": "2020-01-14T17:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java\nindex 51c24a28..9dc23f7e 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitorTest.java\n\n@@ -74,13 +79,17 @@ public class AntlrSqlParseTreeVisitorTest {\n         Assert.assertTrue(result.isCompatible(new Product(emptyList())));\n     }\n \n-    @Test(expected = SqlFeatureNotImplementedException.class)\n+    @Test\n     public void visitSelectNestedFunctionShouldThrowException() {\n+        exceptionRule.expect(SqlFeatureNotImplementedException.class);\n+        exceptionRule.expectMessage(\"Nested function calls like [abs(log(age))] are not supported yet\");\n         visit(\"SELECT abs(log(age)) FROM test\");\n     }\n \n-    @Test(expected = SqlFeatureNotImplementedException.class)\n+    @Test\n     public void visitWhereNestedFunctionShouldThrowException() {\n+        exceptionRule.expect(SqlFeatureNotImplementedException.class);\n+        exceptionRule.expectMessage(\"Nested function calls like [abs(log(age))] are not supported yet\");\n         visit(\"SELECT age FROM test WHERE abs(log(age)) = 1\");\n     }\n \n"}}, {"oid": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8", "message": "Added COUNT in function-nested aggregates; added error msg assertions to the tests; corrected explanation for tests to ignore", "committedDate": "2020-01-14T18:41:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366583980", "bodyText": "Same suggestion for the new code you're adding here: could you move them to another class, ex. UnsupportedFunction?\nBtw, for another option, could you explore the possibility of intercepting and checking what you're interested in an implementation class of GenericSqlParseTreeVisitor without touching grammar file? I think at least it's doable for unsupported function and operator which can help you minimize the changes.", "author": "dai-chen", "createdAt": "2020-01-14T21:34:29Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java", "diffHunk": "@@ -217,11 +231,37 @@ public T visitUdfFunctionCall(UdfFunctionCallContext ctx) {\n         return reduce(func, ctx.functionArgs());\n     }\n \n-    // This check should be able to accomplish in grammar\n+    /**\n+     * The scalar function calls are separated into (a)typical function calls; (b)nested function calls with functions\n+     * as arguments, like abs(log(...)); (c)aggregations with functions as aggregators, like max(abs(....)).\n+     * Currently, we do not support nested functions or nested aggregations, aka (b) and (c).\n+     * However, for the special EsFunctions included in the [supportedNestedFunctions] set, we have supported them in\n+     * nested function calls and aggregations (b&c). Besides, the math constants included in the [mathConstants] set\n+     * are regraded as scalar functions, but they are working well in the painless script.\n+     *\n+     * Thus, the types of functions to throw exceptions:\n+     * (I)case (b) except that the arguments are from the [mathConstants] set;\n+     * (II) case (b) except that the arguments are from the [supportedNestedFunctions] set;\n+     * (III) case (c) except that the aggregators are from thet [supportedNestedFunctions] set.\n+     */\n     @Override\n     public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {", "originalCommit": "febce1d84efe33dd28e6c45f95eaff2e6c8ce1e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY2NjAxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366666019", "bodyText": "Ok will do!", "author": "chloe-zh", "createdAt": "2020-01-15T02:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5NzE0OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r366697148", "bodyText": "It's done now. Thanks!", "author": "chloe-zh", "createdAt": "2020-01-15T05:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2NjM1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r367166355", "bodyText": "Thanks for the changes! And we can make it better. Sorry I didn't make it clear at first.\nclass AntlrSqlParseTreeVisitor {\n    public T visitScalarFunctionCall(ScalarFunctionCallContext ctx) {\n        xxx.verify(ctx);\n        T func = visit(ctx.scalarFunctionName());\n        return reduce(func, ctx.functionArgs());\n    }\n\n    public T visitMathOperator(MathOperatorContext ctx) {\n        xxx.verify(ctx);\n        return super.visitMathOperator(ctx);\n    }\n    ...\n}\n\nclass XXX { // Need a good name for this abstraction (semantics that we don't support for now).\n    private static final Set<String> mathConstants, unsupportedFunctions ...\n\n    public void verify(ScalarFunctionCallContext ctx) {\n        ...\n    }\n\n    public void verify(MathOperatorContext ctx) {\n        if (unsupportedOperators.contains(StringUtils.toLower(ctx.getText())))\n            throw new SqlFeatureNotImplementedException(...);\n    }\n\n   ...\n}", "author": "dai-chen", "createdAt": "2020-01-15T23:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4Mzk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "5a00a97e1340be43698d9f30cada3846ea185394", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java\nindex 5db8ffae..3fa484d2 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/visitor/AntlrSqlParseTreeVisitor.java\n\n@@ -256,14 +268,33 @@ public class AntlrSqlParseTreeVisitor<T extends Reducible> extends OpenDistroSql\n         // type (I) and (II)\n         } else if (ctx.parent.parent instanceof OpenDistroSqlParser.NestedFunctionArgsContext\n                 && !(mathConstants.contains(funcName) || supportedNestedFunctions.contains(funcName))) {\n-                throw new SqlFeatureNotImplementedException(StringUtils.format(\n-                        \"Nested function calls like [%s] are not supported yet\", ctx.parent.parent.parent.getText()));\n+            throw new SqlFeatureNotImplementedException(StringUtils.format(\n+                    \"Nested function calls like [%s] are not supported yet\", ctx.parent.parent.parent.getText()));\n+        // unsupported functions\n+        } else if (unsupportedFunctions.contains(funcName)) {\n+            throw new SqlFeatureNotImplementedException(StringUtils.format(\"Function [%s] is not supported yet\",\n+                    funcName));\n         } else {\n             T func = visit(ctx.scalarFunctionName());\n             return reduce(func, ctx.functionArgs());\n         }\n     }\n \n+    @Override\n+    public T visitMathOperator(MathOperatorContext ctx) {\n+        if (unsupportedOperators.contains(StringUtils.toLower(ctx.getText()))) {\n+            throw new SqlFeatureNotImplementedException(StringUtils.format(\"Operator [%s] is not supported yet\",\n+                    ctx.getText()));\n+        } else {\n+            return super.visitMathOperator(ctx);\n+        }\n+    }\n+\n+    @Override\n+    public T visitRegexpPredicate(RegexpPredicateContext ctx) {\n+        throw new SqlFeatureNotImplementedException(\"Regexp predicate is not supported yet\");\n+    }\n+\n     @Override\n     public T visitSelectElements(SelectElementsContext ctx) {\n         return visitor.visitSelect(ctx.selectElement().\n"}}, {"oid": "5a00a97e1340be43698d9f30cada3846ea185394", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5a00a97e1340be43698d9f30cada3846ea185394", "message": "Update", "committedDate": "2020-01-15T05:02:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE2MjkxNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/345#discussion_r367162917", "bodyText": "I think you can put the comment into reason field, ex.@Ignore(\"Test set ...\")", "author": "dai-chen", "createdAt": "2020-01-15T23:35:22Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void logFunctionCallWithUnknownFieldShouldPass() {\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n+    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */", "originalCommit": "5a00a97e1340be43698d9f30cada3846ea185394", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "261753d795ca8ad0be78f03bcac6961230d6a82c", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\nindex 84bb81af..d23f14d2 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerScalarFunctionTest.java\n\n@@ -96,7 +96,7 @@ public class SemanticAnalyzerScalarFunctionTest extends SemanticAnalyzerTestBase\n         validate(\"SELECT LOG(new_field) FROM semantics\");\n     }\n \n-    @Ignore /** Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException */\n+    @Ignore(\"Test set to ignore due to nested functions not supported and blocked by throwing SqlFeatureNotImplementedException\")\n     @Test\n     public void substringWithLogFunctionCallWithUnknownFieldShouldPass() {\n         expectValidationFailWithErrorMessages(\n"}}, {"oid": "261753d795ca8ad0be78f03bcac6961230d6a82c", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/261753d795ca8ad0be78f03bcac6961230d6a82c", "message": "Update", "committedDate": "2020-01-16T07:05:46Z", "type": "commit"}]}