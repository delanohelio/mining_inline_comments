{"pr_number": 931, "pr_title": "Enable Date type input in function Count()", "pr_createdAt": "2020-12-14T20:48:59Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/931", "timeline": [{"oid": "ecd5bea2cfd1b05ca5264240ca41a3ba94375702", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ecd5bea2cfd1b05ca5264240ca41a3ba94375702", "message": "Enable count(Date)\nAdd IT\nAdd Comparsion Test", "committedDate": "2020-12-14T20:14:48Z", "type": "commit"}, {"oid": "58a9eea983eca08a55013e4f82f03cde79f4383d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/58a9eea983eca08a55013e4f82f03cde79f4383d", "message": "Enable count(Date)\nAdd IT", "committedDate": "2020-12-14T20:15:15Z", "type": "commit"}, {"oid": "c826138ef833996125ddc9f2455993f7f1c7bcff", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c826138ef833996125ddc9f2455993f7f1c7bcff", "message": "Add comparsion test file 916.txt", "committedDate": "2020-12-14T21:15:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk0MzU2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/931#discussion_r542943566", "bodyText": "I assume SQL COUNT() should work with all types. If so, is it more maintainable to generate function signatures from all core types like this way: \n  \n    \n      sql/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/predicate/BinaryPredicateOperator.java\n    \n    \n         Line 172\n      in\n      2aeb80b\n    \n    \n    \n    \n\n        \n          \n           ExprCoreType.coreTypes().stream()", "author": "dai-chen", "createdAt": "2020-12-15T00:08:18Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java", "diffHunk": "@@ -92,6 +94,12 @@ private static FunctionResolver count() {\n                 arguments -> new CountAggregator(arguments, INTEGER))\n             .put(new FunctionSignature(functionName, Collections.singletonList(BOOLEAN)),\n                 arguments -> new CountAggregator(arguments, INTEGER))\n+            .put(new FunctionSignature(functionName, Collections.singletonList(DATE)),\n+                arguments -> new CountAggregator(arguments, INTEGER))\n+            .put(new FunctionSignature(functionName, Collections.singletonList(DATETIME)),\n+                arguments -> new CountAggregator(arguments, INTEGER))\n+            .put(new FunctionSignature(functionName, Collections.singletonList(TIMESTAMP)),\n+                arguments -> new CountAggregator(arguments, INTEGER))", "originalCommit": "c826138ef833996125ddc9f2455993f7f1c7bcff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f7c3f5190c092117488a9be1c2b7a3f708cf9163", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java\nindex 68f1305d..e467c385 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/aggregation/AggregatorFunction.java\n\n@@ -75,33 +81,11 @@ public class AggregatorFunction {\n \n   private static FunctionResolver count() {\n     FunctionName functionName = BuiltinFunctionName.COUNT.getName();\n-    return new FunctionResolver(\n-        functionName,\n-        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n-            .put(new FunctionSignature(functionName, Collections.singletonList(INTEGER)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(LONG)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(FLOAT)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(DOUBLE)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(STRING)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(STRUCT)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(ARRAY)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(BOOLEAN)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(DATE)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(DATETIME)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .put(new FunctionSignature(functionName, Collections.singletonList(TIMESTAMP)),\n-                arguments -> new CountAggregator(arguments, INTEGER))\n-            .build()\n-    );\n+    FunctionResolver functionResolver = new FunctionResolver(functionName,\n+        ExprCoreType.coreTypes().stream().collect(Collectors.toMap(\n+          type -> new FunctionSignature(functionName, Collections.singletonList(type)),\n+          type -> arguments -> new CountAggregator(arguments, INTEGER))));\n+    return functionResolver;\n   }\n \n   private static FunctionResolver sum() {\n"}}, {"oid": "f7c3f5190c092117488a9be1c2b7a3f708cf9163", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f7c3f5190c092117488a9be1c2b7a3f708cf9163", "message": "Consolidate count function to accept all field type", "committedDate": "2020-12-15T07:15:46Z", "type": "commit"}]}