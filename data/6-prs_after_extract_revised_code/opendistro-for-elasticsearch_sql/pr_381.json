{"pr_number": 381, "pr_title": "FIX: field function name letter case preserved in select with group by", "pr_createdAt": "2020-03-13T18:37:08Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381", "timeline": [{"oid": "24dd82e81ac310308323a26d58b5a4bdab9ed43b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/24dd82e81ac310308323a26d58b5a4bdab9ed43b", "message": "FIX: Method field name", "committedDate": "2020-03-13T16:45:58Z", "type": "commit"}, {"oid": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "message": "Merge branch 'master' into fix/373-field-name-letter-case-preserved-under-groupby", "committedDate": "2020-03-13T17:47:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzI0MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394097240", "bodyText": "private?", "author": "penghuo", "createdAt": "2020-03-18T04:11:32Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -76,6 +82,19 @@ public boolean visit(MySqlSelectQueryBlock query) {\n         return aggregationParser.getColumnNodes();\n     }\n \n+    public List<String> extractSelectFunctionNames(List<SQLSelectItem> selectItems) {", "originalCommit": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e59e2eb4a736ee682e1bad056144e0a17d3002f2", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\nindex 6b0b402e..58ac4cd5 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\n\n@@ -95,16 +89,6 @@ public class SQLToOperatorConverter extends MySqlASTVisitorAdapter {\n         return methodNames;\n     }\n \n-    private void rewriteFunctionNameToLowerCase(MySqlSelectQueryBlock query) {\n-        query.accept(new MySqlASTVisitorAdapter() {\n-            @Override\n-            public boolean visit(SQLMethodInvokeExpr x) {\n-                x.setMethodName(x.getMethodName().toLowerCase());\n-                return true;\n-            }\n-        });\n-    }\n-\n     private PhysicalOperator<BindingTuple> project(PhysicalOperator<BindingTuple> input) {\n         return new PhysicalProject(input, aggregationParser.getColumnNodes());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzQ4OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394097488", "bodyText": "why change to assertTrue?", "author": "penghuo", "createdAt": "2020-03-18T04:12:36Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/JdbcTestIT.java", "diffHunk": "@@ -118,15 +118,16 @@ public void stringOperatorNameCaseInsensitiveTest() {\n \n     @Test\n     public void dateFunctionNameCaseInsensitiveTest() {\n-        assertEquals(\n+        assertTrue(", "originalCommit": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTM0OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099348", "bodyText": "Becase response object comparison does not ignore letter case in schema.name. Thus I used assertTrue together with .equalsIgnoreCase.", "author": "chenqi0805", "createdAt": "2020-03-18T04:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzQ4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODA1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394098052", "bodyText": "Is it possible to make it as the function to avoid duplicate code in all the test cases?", "author": "penghuo", "createdAt": "2020-03-18T04:15:10Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "diffHunk": "@@ -55,7 +59,9 @@ public void parseAggWithoutExpressionShouldPass() {\n                      \"FROM kibana_sample_data_flights \" +\n                      \"GROUP BY dayOfWeek\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        parser.parse(mYSqlSelectQueryBlock(sql));\n+        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n+        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n+        parser.parse(query, selectMethodNames);", "originalCommit": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTQ0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099446", "bodyText": "Will take another look.", "author": "chenqi0805", "createdAt": "2020-03-18T04:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e59e2eb4a736ee682e1bad056144e0a17d3002f2", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java\nindex 67fb1bfd..0c825b54 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java\n\n@@ -59,9 +59,7 @@ public class SQLAggregationParserTest {\n                      \"FROM kibana_sample_data_flights \" +\n                      \"GROUP BY dayOfWeek\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n-        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n-        parser.parse(query, selectMethodNames);\n+        parser.parse(mYSqlSelectQueryBlock(sql));\n         List<SQLSelectItem> sqlSelectItems = parser.selectItemList();\n         List<ColumnNode> columnNodes = parser.getColumnNodes();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODQ3OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394098478", "bodyText": "Is it the same function used in SQLToOperatorConverter?", "author": "penghuo", "createdAt": "2020-03-18T04:17:07Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java", "diffHunk": "@@ -247,7 +306,28 @@ public void aggregationWithNestedShouldThrowException() {\n                      + \"FROM t \"\n                      + \"GROUP BY nested(projects.name.keyword, 'projects')\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        parser.parse(mYSqlSelectQueryBlock(sql));\n+        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n+        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n+        parser.parse(query, selectMethodNames);\n+    }\n+\n+    private List<String> prepareRawMethodNames(MySqlSelectQueryBlock query, Boolean fillWithNull) {", "originalCommit": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTE2MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394101161", "bodyText": "Same logic. Might be duplicate code with the intent to keep parserTest separate from converter.", "author": "chenqi0805", "createdAt": "2020-03-18T04:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "e59e2eb4a736ee682e1bad056144e0a17d3002f2", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java\nindex 67fb1bfd..0c825b54 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/planner/converter/SQLAggregationParserTest.java\n\n@@ -306,28 +275,7 @@ public class SQLAggregationParserTest {\n                      + \"FROM t \"\n                      + \"GROUP BY nested(projects.name.keyword, 'projects')\";\n         SQLAggregationParser parser = new SQLAggregationParser(new ColumnTypeProvider());\n-        MySqlSelectQueryBlock query = mYSqlSelectQueryBlock(sql);\n-        List<String> selectMethodNames = prepareRawMethodNames(query, true);\n-        parser.parse(query, selectMethodNames);\n-    }\n-\n-    private List<String> prepareRawMethodNames(MySqlSelectQueryBlock query, Boolean fillWithNull) {\n-        List<SQLSelectItem> selectItems = query.getSelectList();\n-        if (fillWithNull) {\n-            return Arrays.asList(new String[selectItems.size()]);\n-        }\n-        List<String> selectMethodNames = new ArrayList<>();\n-        for (SQLSelectItem selectItem: selectItems){\n-            SQLExpr selectItemExpr = selectItem.getExpr();\n-            if (selectItemExpr instanceof SQLMethodInvokeExpr) {\n-                selectMethodNames.add(((SQLMethodInvokeExpr) selectItemExpr).getMethodName());\n-            } else if (selectItemExpr instanceof SQLAggregateExpr) {\n-                selectMethodNames.add(((SQLAggregateExpr) selectItemExpr).getMethodName());\n-            } else {\n-                selectMethodNames.add(null);\n-            }\n-        }\n-        return selectMethodNames;\n+        parser.parse(mYSqlSelectQueryBlock(sql));\n     }\n \n     private MySqlSelectQueryBlock mYSqlSelectQueryBlock(String sql) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTY1NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099654", "bodyText": "Instead of just extracting the selectMethodNames, Is it possible to generate the final select name list regardless the field is method or not?", "author": "penghuo", "createdAt": "2020-03-18T04:22:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -54,11 +57,14 @@ public SQLToOperatorConverter(Client client, ColumnTypeProvider columnTypeProvid\n \n     @Override\n     public boolean visit(MySqlSelectQueryBlock query) {\n+        //1. extract function names in select\n+        List<String> selectMethodNames = extractSelectFunctionNames(query.getSelectList());", "originalCommit": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTkzMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394101933", "bodyText": "Will take another look.", "author": "chenqi0805", "createdAt": "2020-03-18T04:33:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMzYzNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394403634", "bodyText": "After putting some extra thought, one way to make the code cleaner is to move the name extraction function and lowercase normalization function into the SQLAggregationParser.parse logic.", "author": "chenqi0805", "createdAt": "2020-03-18T14:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e59e2eb4a736ee682e1bad056144e0a17d3002f2", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\nindex 6b0b402e..58ac4cd5 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\n\n@@ -57,19 +57,13 @@ public class SQLToOperatorConverter extends MySqlASTVisitorAdapter {\n \n     @Override\n     public boolean visit(MySqlSelectQueryBlock query) {\n-        //1. extract function names in select\n-        List<String> selectMethodNames = extractSelectFunctionNames(query.getSelectList());\n \n-        //1. rewrite all the function name to lower case.\n-        rewriteFunctionNameToLowerCase(query);\n+        //1. parse the aggregation\n+        aggregationParser.parse(query);\n \n-        //2. parse the aggregation\n-        aggregationParser.parse(query, selectMethodNames);\n \n-\n-        //3. construct the PhysicalOperator\n-        physicalOperator = project(\n-                                scroll(query));\n+        //2. construct the PhysicalOperator\n+        physicalOperator = project(scroll(query));\n         return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTc4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394099782", "bodyText": "Avoid to use null value, Consider to use Optional if it is necessary.", "author": "penghuo", "createdAt": "2020-03-18T04:22:54Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java", "diffHunk": "@@ -76,6 +82,19 @@ public boolean visit(MySqlSelectQueryBlock query) {\n         return aggregationParser.getColumnNodes();\n     }\n \n+    public List<String> extractSelectFunctionNames(List<SQLSelectItem> selectItems) {\n+        List<String> methodNames = new ArrayList<>();\n+        for (SQLSelectItem selectItem: selectItems){\n+            SQLExpr selectItemExpr = selectItem.getExpr();\n+            if (selectItemExpr instanceof SQLMethodInvokeExpr) {\n+                methodNames.add(((SQLMethodInvokeExpr) selectItemExpr).getMethodName());\n+            } else {\n+                methodNames.add(null);", "originalCommit": "6ceba91ccf609ca7a3f87791bcbc38a7ff5863f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTI0NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/381#discussion_r394101244", "bodyText": "Will take another look.", "author": "chenqi0805", "createdAt": "2020-03-18T04:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e59e2eb4a736ee682e1bad056144e0a17d3002f2", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\nindex 6b0b402e..58ac4cd5 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/query/planner/converter/SQLToOperatorConverter.java\n\n@@ -95,16 +89,6 @@ public class SQLToOperatorConverter extends MySqlASTVisitorAdapter {\n         return methodNames;\n     }\n \n-    private void rewriteFunctionNameToLowerCase(MySqlSelectQueryBlock query) {\n-        query.accept(new MySqlASTVisitorAdapter() {\n-            @Override\n-            public boolean visit(SQLMethodInvokeExpr x) {\n-                x.setMethodName(x.getMethodName().toLowerCase());\n-                return true;\n-            }\n-        });\n-    }\n-\n     private PhysicalOperator<BindingTuple> project(PhysicalOperator<BindingTuple> input) {\n         return new PhysicalProject(input, aggregationParser.getColumnNodes());\n     }\n"}}, {"oid": "e59e2eb4a736ee682e1bad056144e0a17d3002f2", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e59e2eb4a736ee682e1bad056144e0a17d3002f2", "message": "REF: parser logic", "committedDate": "2020-03-18T15:42:48Z", "type": "commit"}, {"oid": "5b138beb811c02599cb88e4fd72b4e90b07bfa4c", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5b138beb811c02599cb88e4fd72b4e90b07bfa4c", "message": "RMV: remove unused function", "committedDate": "2020-03-18T15:47:43Z", "type": "commit"}, {"oid": "ae275fd14a56487f6296c3868e5773c126ff0344", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ae275fd14a56487f6296c3868e5773c126ff0344", "message": "STY: unused imports", "committedDate": "2020-03-18T15:49:57Z", "type": "commit"}, {"oid": "c7aaf016d7cc28a84dc41d088de9bf3300b3ed7a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c7aaf016d7cc28a84dc41d088de9bf3300b3ed7a", "message": "STY: unused import", "committedDate": "2020-03-18T15:51:51Z", "type": "commit"}]}