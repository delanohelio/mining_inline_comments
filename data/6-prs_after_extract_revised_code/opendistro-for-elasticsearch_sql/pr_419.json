{"pr_number": 419, "pr_title": "Anonymize sensitive data in queries exposed to RestSqlAction logs", "pr_createdAt": "2020-04-09T06:04:24Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419", "timeline": [{"oid": "18efb45c26a4af1dc97d7090142d11409fe8af66", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/18efb45c26a4af1dc97d7090142d11409fe8af66", "message": "remove sensitive data from queries for logging", "committedDate": "2020-04-08T19:55:16Z", "type": "commit"}, {"oid": "b984b56467d32727a5d7d5f3f1fdbba50cfa73cc", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b984b56467d32727a5d7d5f3f1fdbba50cfa73cc", "message": "Added rule to mask sensitive data from es logs", "committedDate": "2020-04-09T04:23:15Z", "type": "commit"}, {"oid": "ec574310856fcce61efe3cbe911310a2dd0dbbb2", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ec574310856fcce61efe3cbe911310a2dd0dbbb2", "message": "Merge branch 'master' into sensitive-log", "committedDate": "2020-04-09T04:47:35Z", "type": "commit"}, {"oid": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "message": "Added unit test", "committedDate": "2020-04-09T05:55:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNDcwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406224706", "bodyText": "np:\nfor -> to\ninfo -> information\nsql -> SQL\nSame elsewhere.", "author": "abbashus", "createdAt": "2020-04-09T13:59:05Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  * You may not use this file except in compliance with the License.\n+ *  * A copy of the License is located at\n+ *  *\n+ *  *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * or in the \"license\" file accompanying this file. This file is distributed\n+ *  * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  * express or implied. See the License for the specific language governing\n+ *  * permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.utils;\n+\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.identifier.RemoveSensitiveDataRule;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.utils.Util.toSqlExpr;\n+\n+/**\n+ * Utility class for mask sensitive info in incoming sql queries", "originalCommit": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1NTk0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406355943", "bodyText": "Will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-09T17:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyNDcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "cfc6b9093ee0b96f0ed55f6cda28dc672ae6c38a", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java\nindex fe1cb86b..f4238269 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java\n\n@@ -1,16 +1,16 @@\n /*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  *\n- *  * Licensed under the Apache License, Version 2.0 (the \"License\").\n- *  * You may not use this file except in compliance with the License.\n- *  * A copy of the License is located at\n- *  *\n- *  *    http://www.apache.org/licenses/LICENSE-2.0\n- *  *\n- *  * or in the \"license\" file accompanying this file. This file is distributed\n- *  * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *  * express or implied. See the License for the specific language governing\n- *  * permissions and limitations under the License.\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n  *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n  */\n \n package com.amazon.opendistroforelasticsearch.sql.utils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NzUwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406247506", "bodyText": "Consider using\nprivate static final Logger LOG = LogManager.getLogger(SqlRequest.class);\n\n...\n\nLOG.error(\"Caught an exception when masking sensitive data \",  e)\n\n\nLet the stack trace be logged for faster debugging, instead of Exception name.", "author": "abbashus", "createdAt": "2020-04-09T14:31:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -105,4 +107,15 @@ public BoolQueryBuilder checkAndAddFilter(BoolQueryBuilder boolQuery) throws Sql\n         }\n         return boolQuery;\n     }\n+\n+    public String removeSensitiveData() {\n+        String query = \"\";\n+        try {\n+            query = QueryDataMask.maskData(this.sql);\n+        } catch (Exception e) {\n+            LogManager.getLogger().error(\"Caught an exception when removing sensitive data: \"\n+                    + e.getClass().getSimpleName());\n+        }", "originalCommit": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1NzM2OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406357368", "bodyText": "Sounds good, will do. Thanks!", "author": "chloe-zh", "createdAt": "2020-04-09T17:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NzUwNg=="}], "type": "inlineReview", "revised_code": {"commit": "cfc6b9093ee0b96f0ed55f6cda28dc672ae6c38a", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\nindex b6a80a6a..a4e4e679 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\n\n@@ -113,8 +115,7 @@ public class SqlRequest {\n         try {\n             query = QueryDataMask.maskData(this.sql);\n         } catch (Exception e) {\n-            LogManager.getLogger().error(\"Caught an exception when removing sensitive data: \"\n-                    + e.getClass().getSimpleName());\n+            LOG.error(\"Caught an exception when removing sensitive data\", e);\n         }\n         return query;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MDM4MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406260380", "bodyText": "Does this only works for simple queries?\nCan you add tests for nested, subquery, join and union/minus queries as well for better coverage.", "author": "abbashus", "createdAt": "2020-04-09T14:48:56Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  * You may not use this file except in compliance with the License.\n+ *  * A copy of the License is located at\n+ *  *\n+ *  *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * or in the \"license\" file accompanying this file. This file is distributed\n+ *  * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  * express or implied. See the License for the specific language governing\n+ *  * permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.utils;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.QueryDataMask;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class QueryDataMaskTest {\n+\n+    @Test\n+    public void selectQueriesShouldMaskSensitiveDataWithStars() {\n+        String maskedQuery = QueryDataMask.maskData(\"SELECT age FROM accounts\");\n+        String expectedQuery = \"SELECT *** FROM ***\";\n+        Assert.assertEquals(maskedQuery, expectedQuery);\n+    }\n+\n+    @Test\n+    public void selectQueriesShouldMaskAllSensitiveData() {\n+        String query = \"SELECT ABS(balance), lastname FROM accounts WHERE age > 30\";\n+        String maskedQuery = QueryDataMask.maskData(query);\n+        Assert.assertEquals(maskedQuery, \"SELECT ABS(***), *** FROM *** WHERE *** > 30\");\n+    }\n+\n+    @Test\n+    public void selectQueriesWithQuotedIdentifiersShouldMaskSensitiveData() {\n+        String maskedQuery = QueryDataMask.maskData(\"SELECT `age` FROM accounts\");\n+        String expectedQuery = \"SELECT *** FROM ***\";\n+        Assert.assertEquals(maskedQuery, expectedQuery);\n+    }\n+\n+    @Test\n+    public void selectQueriesWithQuotedIdentifiersWithSpacesShouldMaskSensitiveData() {\n+        String maskedQuery = QueryDataMask.maskData(\"SELECT `a   g e` FROM accounts\");\n+        String expectedQuery = \"SELECT *** FROM ***\";\n+        Assert.assertEquals(maskedQuery, expectedQuery);\n+    }", "originalCommit": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53da11416b7c853f42b966b98b7f7dc23fda343", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java\ndeleted file mode 100644\nindex 45083b83..00000000\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java\n+++ /dev/null\n\n@@ -1,51 +0,0 @@\n-/*\n- *\n- *  * Licensed under the Apache License, Version 2.0 (the \"License\").\n- *  * You may not use this file except in compliance with the License.\n- *  * A copy of the License is located at\n- *  *\n- *  *    http://www.apache.org/licenses/LICENSE-2.0\n- *  *\n- *  * or in the \"license\" file accompanying this file. This file is distributed\n- *  * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *  * express or implied. See the License for the specific language governing\n- *  * permissions and limitations under the License.\n- *\n- */\n-\n-package com.amazon.opendistroforelasticsearch.sql.unittest.utils;\n-\n-import com.amazon.opendistroforelasticsearch.sql.utils.QueryDataMask;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-public class QueryDataMaskTest {\n-\n-    @Test\n-    public void selectQueriesShouldMaskSensitiveDataWithStars() {\n-        String maskedQuery = QueryDataMask.maskData(\"SELECT age FROM accounts\");\n-        String expectedQuery = \"SELECT *** FROM ***\";\n-        Assert.assertEquals(maskedQuery, expectedQuery);\n-    }\n-\n-    @Test\n-    public void selectQueriesShouldMaskAllSensitiveData() {\n-        String query = \"SELECT ABS(balance), lastname FROM accounts WHERE age > 30\";\n-        String maskedQuery = QueryDataMask.maskData(query);\n-        Assert.assertEquals(maskedQuery, \"SELECT ABS(***), *** FROM *** WHERE *** > 30\");\n-    }\n-\n-    @Test\n-    public void selectQueriesWithQuotedIdentifiersShouldMaskSensitiveData() {\n-        String maskedQuery = QueryDataMask.maskData(\"SELECT `age` FROM accounts\");\n-        String expectedQuery = \"SELECT *** FROM ***\";\n-        Assert.assertEquals(maskedQuery, expectedQuery);\n-    }\n-\n-    @Test\n-    public void selectQueriesWithQuotedIdentifiersWithSpacesShouldMaskSensitiveData() {\n-        String maskedQuery = QueryDataMask.maskData(\"SELECT `a   g e` FROM accounts\");\n-        String expectedQuery = \"SELECT *** FROM ***\";\n-        Assert.assertEquals(maskedQuery, expectedQuery);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NTAyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406275021", "bodyText": "Question, what is definition sensitive data? age or 30?\nIMO, the value is more sensitive than field. e.g. password = '123456', it more make sense to mask the value like password = 'xxx'", "author": "penghuo", "createdAt": "2020-04-09T15:09:06Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  * You may not use this file except in compliance with the License.\n+ *  * A copy of the License is located at\n+ *  *\n+ *  *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * or in the \"license\" file accompanying this file. This file is distributed\n+ *  * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  * express or implied. See the License for the specific language governing\n+ *  * permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.utils;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.QueryDataMask;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class QueryDataMaskTest {\n+\n+    @Test\n+    public void selectQueriesShouldMaskSensitiveDataWithStars() {\n+        String maskedQuery = QueryDataMask.maskData(\"SELECT age FROM accounts\");\n+        String expectedQuery = \"SELECT *** FROM ***\";\n+        Assert.assertEquals(maskedQuery, expectedQuery);\n+    }\n+\n+    @Test\n+    public void selectQueriesShouldMaskAllSensitiveData() {\n+        String query = \"SELECT ABS(balance), lastname FROM accounts WHERE age > 30\";\n+        String maskedQuery = QueryDataMask.maskData(query);\n+        Assert.assertEquals(maskedQuery, \"SELECT ABS(***), *** FROM *** WHERE *** > 30\");", "originalCommit": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTM5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406349392", "bodyText": "Agree. I think we can just mask all values (rewrite literals, number, string etc.)", "author": "dai-chen", "createdAt": "2020-04-09T17:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NTAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a53da11416b7c853f42b966b98b7f7dc23fda343", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java\ndeleted file mode 100644\nindex 45083b83..00000000\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataMaskTest.java\n+++ /dev/null\n\n@@ -1,51 +0,0 @@\n-/*\n- *\n- *  * Licensed under the Apache License, Version 2.0 (the \"License\").\n- *  * You may not use this file except in compliance with the License.\n- *  * A copy of the License is located at\n- *  *\n- *  *    http://www.apache.org/licenses/LICENSE-2.0\n- *  *\n- *  * or in the \"license\" file accompanying this file. This file is distributed\n- *  * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *  * express or implied. See the License for the specific language governing\n- *  * permissions and limitations under the License.\n- *\n- */\n-\n-package com.amazon.opendistroforelasticsearch.sql.unittest.utils;\n-\n-import com.amazon.opendistroforelasticsearch.sql.utils.QueryDataMask;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-public class QueryDataMaskTest {\n-\n-    @Test\n-    public void selectQueriesShouldMaskSensitiveDataWithStars() {\n-        String maskedQuery = QueryDataMask.maskData(\"SELECT age FROM accounts\");\n-        String expectedQuery = \"SELECT *** FROM ***\";\n-        Assert.assertEquals(maskedQuery, expectedQuery);\n-    }\n-\n-    @Test\n-    public void selectQueriesShouldMaskAllSensitiveData() {\n-        String query = \"SELECT ABS(balance), lastname FROM accounts WHERE age > 30\";\n-        String maskedQuery = QueryDataMask.maskData(query);\n-        Assert.assertEquals(maskedQuery, \"SELECT ABS(***), *** FROM *** WHERE *** > 30\");\n-    }\n-\n-    @Test\n-    public void selectQueriesWithQuotedIdentifiersShouldMaskSensitiveData() {\n-        String maskedQuery = QueryDataMask.maskData(\"SELECT `age` FROM accounts\");\n-        String expectedQuery = \"SELECT *** FROM ***\";\n-        Assert.assertEquals(maskedQuery, expectedQuery);\n-    }\n-\n-    @Test\n-    public void selectQueriesWithQuotedIdentifiersWithSpacesShouldMaskSensitiveData() {\n-        String maskedQuery = QueryDataMask.maskData(\"SELECT `a   g e` FROM accounts\");\n-        String expectedQuery = \"SELECT *** FROM ***\";\n-        Assert.assertEquals(maskedQuery, expectedQuery);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTQzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406285439", "bodyText": "add UT", "author": "penghuo", "createdAt": "2020-04-09T15:24:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/StringUtils.java", "diffHunk": "@@ -126,6 +126,11 @@ public static boolean isNumeric(String text) {\n         return Doubles.tryParse(text) != null;\n     }\n \n+    public static String getFirstWord(String sql) {", "originalCommit": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a702386844c6d48feab30c6c9ba0af85e8ec77bf", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/StringUtils.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/StringUtils.java\nindex 9b9bf2c8..a2768212 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/StringUtils.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/StringUtils.java\n\n@@ -126,11 +126,6 @@ public class StringUtils {\n         return Doubles.tryParse(text) != null;\n     }\n \n-    public static String getFirstWord(String sql) {\n-        int endOfFirstWord = sql.indexOf(' ');\n-        return sql.substring(0, endOfFirstWord > 0 ? endOfFirstWord : sql.length()).toUpperCase();\n-    }\n-\n     private StringUtils() {\n         throw new AssertionError(getClass().getCanonicalName() + \" is a utility class and must not be initialized\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4Nzg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406287880", "bodyText": "why adding a method on SqlRequest? could we use QueryDataMask.mask(sqlRequest.sql) instead.", "author": "penghuo", "createdAt": "2020-04-09T15:27:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java", "diffHunk": "@@ -112,7 +112,8 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             }\n \n             final SqlRequest sqlRequest = SqlRequestFactory.getSqlRequest(request);\n-            LOG.info(\"[{}] Incoming request {}: {}\", LogUtils.getRequestId(), request.uri(), sqlRequest.getSql());\n+            LOG.info(\"[{}] Incoming request {}: {}\", LogUtils.getRequestId(), request.uri(),\n+                    sqlRequest.removeSensitiveData());", "originalCommit": "a651357dcb86bb4777c1c99728bb7aa7f2c2e320", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37d461537f3b01be48435476a6ea620e16ec6816", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java\nindex e847a493..14207a90 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java\n\n@@ -113,7 +114,7 @@ public class RestSqlAction extends BaseRestHandler {\n \n             final SqlRequest sqlRequest = SqlRequestFactory.getSqlRequest(request);\n             LOG.info(\"[{}] Incoming request {}: {}\", LogUtils.getRequestId(), request.uri(),\n-                    sqlRequest.removeSensitiveData());\n+                    QueryDataAnonymizer.anonymizeData(sqlRequest.getSql()));\n \n             final QueryAction queryAction =\n                     explainRequest(client, sqlRequest, SqlRequestParam.getFormat(request.params()));\n"}}, {"oid": "cfc6b9093ee0b96f0ed55f6cda28dc672ae6c38a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cfc6b9093ee0b96f0ed55f6cda28dc672ae6c38a", "message": "Added antlr files", "committedDate": "2020-04-09T19:27:06Z", "type": "commit"}, {"oid": "ead3b80ab5d2879f71248eeb5bce776b35b19876", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ead3b80ab5d2879f71248eeb5bce776b35b19876", "message": "addressed comments", "committedDate": "2020-04-09T19:29:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDM5NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406430394", "bodyText": "np: getIdentifierSet  -> getDataSet ?", "author": "abbashus", "createdAt": "2020-04-09T19:33:17Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.rewriter.identifier;\n+\n+import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.RewriteRule;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class RemoveSensitiveDataRule extends MySqlASTVisitorAdapter implements RewriteRule<SQLQueryExpr> {\n+\n+    private Set<String> dataSet = new HashSet<>();\n+\n+    @Override\n+    public boolean visit(SQLIdentifierExpr identifierExpr) {\n+        dataSet.add(identifierExpr.getName());\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean match(SQLQueryExpr expr) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void rewrite(SQLQueryExpr expr) {\n+        expr.accept(this);\n+    }\n+\n+    public Set<String> getIdentifierSet() {", "originalCommit": "ead3b80ab5d2879f71248eeb5bce776b35b19876", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53da11416b7c853f42b966b98b7f7dc23fda343", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java\nindex 90062763..c607e93b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java\n\n@@ -15,20 +15,49 @@\n \n package com.amazon.opendistroforelasticsearch.sql.rewriter.identifier;\n \n+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLCharExpr;\n import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLNumberExpr;\n import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;\n import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;\n import com.amazon.opendistroforelasticsearch.sql.rewriter.RewriteRule;\n-import java.util.HashSet;\n-import java.util.Set;\n \n public class RemoveSensitiveDataRule extends MySqlASTVisitorAdapter implements RewriteRule<SQLQueryExpr> {\n \n-    private Set<String> dataSet = new HashSet<>();\n-\n     @Override\n     public boolean visit(SQLIdentifierExpr identifierExpr) {\n-        dataSet.add(identifierExpr.getName());\n+        if (identifierExpr.getParent() instanceof SQLExprTableSource) {\n+            identifierExpr.setName(\"table\");\n+        } else {\n+            identifierExpr.setName(\"identifier\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLIntegerExpr integerExpr) {\n+        integerExpr.setNumber(0);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLNumberExpr numberExpr) {\n+        numberExpr.setNumber(0);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLCharExpr charExpr) {\n+        charExpr.setText(\"string_literal\");\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLBooleanExpr booleanExpr) {\n+        booleanExpr.setValue(false);\n         return true;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NTEyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406475125", "bodyText": "As Peng commented, I think you can either move all mask logic here or just call maskData() outside along with getSql().", "author": "dai-chen", "createdAt": "2020-04-09T21:01:43Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -105,4 +109,14 @@ public BoolQueryBuilder checkAndAddFilter(BoolQueryBuilder boolQuery) throws Sql\n         }\n         return boolQuery;\n     }\n+\n+    public String removeSensitiveData() {\n+        String query = \"\";\n+        try {\n+            query = QueryDataMask.maskData(this.sql);", "originalCommit": "ead3b80ab5d2879f71248eeb5bce776b35b19876", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53da11416b7c853f42b966b98b7f7dc23fda343", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\nindex a4e4e679..10a490a8 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\n\n@@ -113,7 +113,7 @@ public class SqlRequest {\n     public String removeSensitiveData() {\n         String query = \"\";\n         try {\n-            query = QueryDataMask.maskData(this.sql);\n+            query = QueryDataAnonymizer.anonymizeData(this.sql);\n         } catch (Exception e) {\n             LOG.error(\"Caught an exception when removing sensitive data\", e);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzU3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406477577", "bodyText": "Because values (literals) in query is more sensitive, you may need to rewrite methods like visit(SQLNumberExpr x), visit(SQLCharExpr x) etc. We can add a few UTs to cover common literals such as string, numerical, bool, datetime etc.", "author": "dai-chen", "createdAt": "2020-04-09T21:06:46Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.rewriter.identifier;\n+\n+import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.RewriteRule;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class RemoveSensitiveDataRule extends MySqlASTVisitorAdapter implements RewriteRule<SQLQueryExpr> {\n+\n+    private Set<String> dataSet = new HashSet<>();\n+\n+    @Override\n+    public boolean visit(SQLIdentifierExpr identifierExpr) {\n+        dataSet.add(identifierExpr.getName());\n+        return true;\n+    }", "originalCommit": "ead3b80ab5d2879f71248eeb5bce776b35b19876", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53da11416b7c853f42b966b98b7f7dc23fda343", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java\nindex 90062763..c607e93b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/RemoveSensitiveDataRule.java\n\n@@ -15,20 +15,49 @@\n \n package com.amazon.opendistroforelasticsearch.sql.rewriter.identifier;\n \n+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLCharExpr;\n import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLNumberExpr;\n import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;\n import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;\n import com.amazon.opendistroforelasticsearch.sql.rewriter.RewriteRule;\n-import java.util.HashSet;\n-import java.util.Set;\n \n public class RemoveSensitiveDataRule extends MySqlASTVisitorAdapter implements RewriteRule<SQLQueryExpr> {\n \n-    private Set<String> dataSet = new HashSet<>();\n-\n     @Override\n     public boolean visit(SQLIdentifierExpr identifierExpr) {\n-        dataSet.add(identifierExpr.getName());\n+        if (identifierExpr.getParent() instanceof SQLExprTableSource) {\n+            identifierExpr.setName(\"table\");\n+        } else {\n+            identifierExpr.setName(\"identifier\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLIntegerExpr integerExpr) {\n+        integerExpr.setNumber(0);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLNumberExpr numberExpr) {\n+        numberExpr.setNumber(0);\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLCharExpr charExpr) {\n+        charExpr.setText(\"string_literal\");\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean visit(SQLBooleanExpr booleanExpr) {\n+        booleanExpr.setValue(false);\n         return true;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MDA1OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406480058", "bodyText": "I think you can move all logic in this class into RemoveSensitiveDataRule except rebuilding. (rename it to MaskSensitiveDataRule?) Then you just need a util method for rebuilding AST (after applied our masking rule) to a query string.", "author": "dai-chen", "createdAt": "2020-04-09T21:11:52Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.utils;\n+\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.identifier.RemoveSensitiveDataRule;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.utils.Util.toSqlExpr;\n+\n+/**\n+ * Utility class to mask sensitive information in incoming SQL queries\n+ */\n+public class QueryDataMask {", "originalCommit": "ead3b80ab5d2879f71248eeb5bce776b35b19876", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53da11416b7c853f42b966b98b7f7dc23fda343", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java\ndeleted file mode 100644\nindex f4238269..00000000\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/utils/QueryDataMask.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-/*\n- *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\").\n- *   You may not use this file except in compliance with the License.\n- *   A copy of the License is located at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   or in the \"license\" file accompanying this file. This file is distributed\n- *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *   express or implied. See the License for the specific language governing\n- *   permissions and limitations under the License.\n- */\n-\n-package com.amazon.opendistroforelasticsearch.sql.utils;\n-\n-import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n-import com.amazon.opendistroforelasticsearch.sql.rewriter.identifier.RemoveSensitiveDataRule;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import static com.amazon.opendistroforelasticsearch.sql.utils.Util.toSqlExpr;\n-\n-/**\n- * Utility class to mask sensitive information in incoming SQL queries\n- */\n-public class QueryDataMask {\n-\n-    /**\n-     * This method is used to mask sensitive data in SQL query.\n-     * Sensitive data includes index names, column names etc.,\n-     * which in druid parser are parsed to SQLIdentifierExpr instances\n-     * @param query entire sql query string\n-     * @return sql query string with all identifiers replaced with \"***\"\n-     */\n-    public static String maskData(String query) {\n-        return rebuildQuery(getQueryComponents(query), getIdentifiers(query));\n-    }\n-\n-    private static Set<String> getIdentifiers(String query) {\n-        if (StringUtils.getFirstWord(query).toLowerCase().equals(\"select\")) {\n-            RemoveSensitiveDataRule rule = new RemoveSensitiveDataRule();\n-            SQLQueryExpr sqlExpr = (SQLQueryExpr) toSqlExpr(query);\n-            rule.rewrite(sqlExpr);\n-            return rule.getIdentifierSet();\n-        }\n-        return new HashSet<>();\n-    }\n-\n-    private static String[] getQueryComponents(String query) {\n-        return replaceIdentifiersInBrackets(replaceQuotedIdentifiers(query)).trim().split(\"\\\\s\");\n-    }\n-\n-    private static String rebuildQuery(String[] components, Set<String> identifiers) {\n-\n-        for (int i = 0; i < components.length; i++) {\n-            if (identifiers.contains(components[i])) {\n-                components[i] = \"***\";\n-            }\n-        }\n-        return String.join(\" \", components);\n-    }\n-\n-    /**\n-     * This method is applied to replace quoted identifiers\n-     * since quoted identifiers with spaces are tricky to deal with\n-     * @param query SQL query string\n-     * @return all quoted identifiers are replaced by word \"***\" directly\n-     */\n-    private static String replaceQuotedIdentifiers(String query) {\n-        return query.replaceAll(\"'[^']*'|`[^`]*`\", \"***\");\n-    }\n-\n-    /**\n-     * This method is applied to replace identifiers in functions\n-     * @param query SQL query string\n-     * @return all parameters in functions are replaced by word \"***\" directly (but it covers more cases than needed)\n-     */\n-    private static String replaceIdentifiersInBrackets(String query) {\n-        return query.replaceAll(\"\\\\([^\\\\(]*\\\\)\", \"(***)\");\n-    }\n-}\n"}}, {"oid": "a53da11416b7c853f42b966b98b7f7dc23fda343", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a53da11416b7c853f42b966b98b7f7dc23fda343", "message": "Applied API in SQLUtils to rebuild query string from AST; replace data masks with anonymous words", "committedDate": "2020-04-09T23:09:51Z", "type": "commit"}, {"oid": "a702386844c6d48feab30c6c9ba0af85e8ec77bf", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a702386844c6d48feab30c6c9ba0af85e8ec77bf", "message": "update", "committedDate": "2020-04-09T23:24:28Z", "type": "commit"}, {"oid": "b4b3c20fa73e32a47a8c55261c77ce164ef36660", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b4b3c20fa73e32a47a8c55261c77ce164ef36660", "message": "update", "committedDate": "2020-04-09T23:30:22Z", "type": "commit"}, {"oid": "548b0127fc3990a8e44df4ed12dc93b06b0c0694", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/548b0127fc3990a8e44df4ed12dc93b06b0c0694", "message": "update", "committedDate": "2020-04-09T23:31:26Z", "type": "commit"}, {"oid": "37d461537f3b01be48435476a6ea620e16ec6816", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/37d461537f3b01be48435476a6ea620e16ec6816", "message": "update", "committedDate": "2020-04-09T23:39:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNDc0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406534746", "bodyText": "unnecessary change", "author": "penghuo", "createdAt": "2020-04-09T23:44:38Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java", "diffHunk": "@@ -37,7 +37,6 @@\n     String sql;\n     JSONObject jsonContent;\n \n-", "originalCommit": "37d461537f3b01be48435476a6ea620e16ec6816", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8cc1dfb5763395bc0518e7944fadef93272da9ba", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\nindex ce1c673d..14b5a5c8 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/request/SqlRequest.java\n\n@@ -37,6 +37,7 @@ public class SqlRequest {\n     String sql;\n     JSONObject jsonContent;\n \n+\n     public SqlRequest(final String sql, final JSONObject jsonContent) {\n \n         this.sql = sql;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzMwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406537303", "bodyText": "Curious what will be the output in log4j, does it output multiple line for the same query?\nIf so, I would suggest to remove the newline to make it in same line. Because usually, we process the log data by using line based tools and group the data with request id. e.g., grep requestId=xxx which will return all the log corresponding to specific request.", "author": "penghuo", "createdAt": "2020-04-09T23:54:13Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataAnonymizerTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.utils;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.QueryDataAnonymizer;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class QueryDataAnonymizerTest {\n+\n+    @Test\n+    public void queriesShouldHaveAnonymousFieldAndIndex() {\n+        String query = \"SELECT ABS(balance) FROM accounts WHERE age > 30 GROUP BY ABS(balance)\";\n+        String expectedQuery = \"(\\n\" +\n+                \"\\tSELECT ABS(identifier)\\n\" +\n+                \"\\tFROM table\\n\" +\n+                \"\\tWHERE identifier > number\\n\" +\n+                \"\\tGROUP BY ABS(identifier)\\n\" +\n+                \"\\t)\";\n+        Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));", "originalCommit": "37d461537f3b01be48435476a6ea620e16ec6816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzg4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406537881", "bodyText": "yes, it outputs multiple lines and tabs in the front of every line as well. ok that makes sense, i will remove the redundant returns and tabs.", "author": "chloe-zh", "createdAt": "2020-04-09T23:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "f3610740195e377c500d5fc8ff53a2e21b46aa79", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataAnonymizerTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataAnonymizerTest.java\nindex 1e8b8f7d..49c21344 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataAnonymizerTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/utils/QueryDataAnonymizerTest.java\n\n@@ -24,112 +24,75 @@ public class QueryDataAnonymizerTest {\n     @Test\n     public void queriesShouldHaveAnonymousFieldAndIndex() {\n         String query = \"SELECT ABS(balance) FROM accounts WHERE age > 30 GROUP BY ABS(balance)\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT ABS(identifier)\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\tWHERE identifier > number\\n\" +\n-                \"\\tGROUP BY ABS(identifier)\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT ABS(identifier) FROM table WHERE identifier > number GROUP BY ABS(identifier) )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesShouldAnonymousNumbers() {\n         String query = \"SELECT ABS(20), LOG(20.20) FROM accounts\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT ABS(number), LOG(number)\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT ABS(number), LOG(number) FROM table )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesShouldHaveAnonymousBooleanLiterals() {\n         String query = \"SELECT TRUE FROM accounts\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT boolean_literal\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT boolean_literal FROM table )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesShouldHaveAnonymousInputStrings() {\n         String query = \"SELECT * FROM accounts WHERE name = 'Oliver'\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT *\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\tWHERE identifier = 'string_literal'\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT * FROM table WHERE identifier = 'string_literal' )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesWithAliasesShouldAnonymizeSensitiveData() {\n         String query = \"SELECT balance AS b FROM accounts AS a\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT identifier AS b\\n\" +\n-                \"\\tFROM table a\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT identifier AS b FROM table a )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesWithFunctionsShouldAnonymizeSensitiveData() {\n         String query = \"SELECT LTRIM(firstname) FROM accounts\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT LTRIM(identifier)\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT LTRIM(identifier) FROM table )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesWithAggregatesShouldAnonymizeSensitiveData() {\n         String query = \"SELECT MAX(price) - MIN(price) from tickets\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT MAX(identifier) - MIN(identifier)\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT MAX(identifier) - MIN(identifier) FROM table )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void queriesWithSubqueriesShouldAnonymizeSensitiveData() {\n         String query = \"SELECT a.f, a.l, a.a FROM \" +\n-                \"(SELECT firstname AS f, lastname AS l, age AS a FROM accounts WHERE age > 30) \" +\n-                \"AS a\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT identifier, identifier, identifier\\n\" +\n-                \"\\tFROM (SELECT identifier AS f, identifier AS l, identifier AS a\\n\" +\n-                \"\\t\\tFROM table\\n\" +\n-                \"\\t\\tWHERE identifier > number\\n\" +\n-                \"\\t\\t) a\\n\" +\n-                \"\\t)\";\n+                \"(SELECT firstname AS f, lastname AS l, age AS a FROM accounts WHERE age > 30) a\";\n+        String expectedQuery = \"( SELECT identifier, identifier, identifier FROM (SELECT identifier AS f, \" +\n+                \"identifier AS l, identifier AS a FROM table WHERE identifier > number ) a )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void joinQueriesShouldAnonymizeSensitiveData() {\n-        String query = \"SELECT a.account_number, a.firstname, a.lastname, e.id, e.name FROM accounts a JOIN employees e\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT identifier, identifier, identifier, identifier, identifier\\n\" +\n-                \"\\tFROM table a\\n\" +\n-                \"\\t\\tJOIN table e\\n\" +\n-                \"\\t)\";\n+        String query = \"SELECT a.account_number, a.firstname, a.lastname, e.id, e.name \" +\n+                \"FROM accounts a JOIN employees e\";\n+        String expectedQuery = \"( SELECT identifier, identifier, identifier, identifier, identifier \" +\n+                \"FROM table a JOIN table e )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n \n     @Test\n     public void unionQueriesShouldAnonymizeSensitiveData() {\n         String query = \"SELECT name, age FROM accounts UNION SELECT name, age FROM employees\";\n-        String expectedQuery = \"(\\n\" +\n-                \"\\tSELECT identifier, identifier\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\tUNION\\n\" +\n-                \"\\tSELECT identifier, identifier\\n\" +\n-                \"\\tFROM table\\n\" +\n-                \"\\t)\";\n+        String expectedQuery = \"( SELECT identifier, identifier FROM table \" +\n+                \"UNION SELECT identifier, identifier FROM table )\";\n         Assert.assertEquals(expectedQuery, QueryDataAnonymizer.anonymizeData(query));\n     }\n }\n"}}, {"oid": "8cc1dfb5763395bc0518e7944fadef93272da9ba", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8cc1dfb5763395bc0518e7944fadef93272da9ba", "message": "update", "committedDate": "2020-04-09T23:54:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzgxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406537815", "bodyText": "Please add some doc here.", "author": "dai-chen", "createdAt": "2020-04-09T23:56:23Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/AnonymizeSensitiveDataRule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.rewriter.identifier;\n+\n+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLCharExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLNumberExpr;\n+import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;\n+import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;\n+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;\n+import com.amazon.opendistroforelasticsearch.sql.rewriter.RewriteRule;\n+\n+public class AnonymizeSensitiveDataRule extends MySqlASTVisitorAdapter implements RewriteRule<SQLQueryExpr> {", "originalCommit": "37d461537f3b01be48435476a6ea620e16ec6816", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0Mjk1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/419#discussion_r406542953", "bodyText": "Will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-10T00:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3610740195e377c500d5fc8ff53a2e21b46aa79", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/AnonymizeSensitiveDataRule.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/AnonymizeSensitiveDataRule.java\nindex bcac51f9..8b1d0087 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/AnonymizeSensitiveDataRule.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/rewriter/identifier/AnonymizeSensitiveDataRule.java\n\n@@ -25,6 +25,11 @@ import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;\n import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;\n import com.amazon.opendistroforelasticsearch.sql.rewriter.RewriteRule;\n \n+/**\n+ * Rewrite rule to anonymize sensitive data in logging queries.\n+ * This rule replace the content of specific nodes (that might involve index data) in AST\n+ * to anonymous content.\n+ */\n public class AnonymizeSensitiveDataRule extends MySqlASTVisitorAdapter implements RewriteRule<SQLQueryExpr> {\n \n     @Override\n"}}, {"oid": "f3610740195e377c500d5fc8ff53a2e21b46aa79", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f3610740195e377c500d5fc8ff53a2e21b46aa79", "message": "Inlined log message; added doc for new rule", "committedDate": "2020-04-10T00:24:08Z", "type": "commit"}]}