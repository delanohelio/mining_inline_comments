{"pr_number": 400, "pr_title": "New SQL cluster settings endpoint", "pr_createdAt": "2020-03-30T08:01:52Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400", "timeline": [{"oid": "9621ce3e95d2bfafe1015d349d9cbedd671552ce", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9621ce3e95d2bfafe1015d349d9cbedd671552ce", "message": "Add new _sql/settings endpoint, and a non-op implementation for testing", "committedDate": "2020-03-30T03:16:59Z", "type": "commit"}, {"oid": "de3caffe9de594b8fea7f7392b9df5ddd670c066", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/de3caffe9de594b8fea7f7392b9df5ddd670c066", "message": "Add logic to only affect opendistro.sql settings", "committedDate": "2020-03-30T06:11:15Z", "type": "commit"}, {"oid": "ad3d702e0a6ac32208d6c2d5d54df165b6ac7804", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ad3d702e0a6ac32208d6c2d5d54df165b6ac7804", "message": "Add integration tests", "committedDate": "2020-03-30T07:52:22Z", "type": "commit"}, {"oid": "e67c90941fa9734b5aa7e42f1b48d8871db60f32", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e67c90941fa9734b5aa7e42f1b48d8871db60f32", "message": "Rename settings action", "committedDate": "2020-03-30T08:04:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTk4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400301989", "bodyText": "log.error already done this.", "author": "penghuo", "createdAt": "2020-03-30T15:52:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.plugin;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.ErrorMessageFactory;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.client.Requests;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.elasticsearch.rest.RestStatus.INTERNAL_SERVER_ERROR;\n+\n+/**\n+ * Interface to manage opendistro.sql.* cluster settings\n+ * All non-sql settings are ignored.\n+ * Any non-transient and non-persistent settings are ignored.\n+ */\n+public class RestSqlSettingsAction extends BaseRestHandler {\n+    private static final Logger LOG = LogManager.getLogger(RestSqlSettingsAction.class);\n+\n+    private static final String PERSISTENT = \"persistent\";\n+    private static final String TRANSIENT = \"transient\";\n+    private static final String SQL_SETTINGS_PREFIX = \"opendistro.sql.\";\n+\n+    /**\n+     * API endpoint path\n+     */\n+    public static final String SETTINGS_API_ENDPOINT = \"/_opendistro/_sql/settings\";\n+\n+    public RestSqlSettingsAction(Settings settings, RestController restController) {\n+        super();\n+        restController.registerHandler(RestRequest.Method.POST, SETTINGS_API_ENDPOINT, this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"sql_settings_action\";\n+    }\n+\n+    /**\n+     * @see org.elasticsearch.rest.action.admin.cluster.RestClusterUpdateSettingsAction\n+     */\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        LogUtils.addRequestId();\n+        final ClusterUpdateSettingsRequest clusterUpdateSettingsRequest = Requests.clusterUpdateSettingsRequest();\n+        clusterUpdateSettingsRequest.timeout(request.paramAsTime(\"timeout\", clusterUpdateSettingsRequest.timeout()));\n+        clusterUpdateSettingsRequest.masterNodeTimeout(\n+                request.paramAsTime(\"master_timeout\", clusterUpdateSettingsRequest.masterNodeTimeout()));\n+        Map<String, Object> source;\n+        try (XContentParser parser = request.contentParser()) {\n+            source = parser.map();\n+        }\n+\n+        try {\n+            if (source.containsKey(TRANSIENT)) {\n+                clusterUpdateSettingsRequest.transientSettings((Map) source.get(TRANSIENT));\n+            }\n+            if (source.containsKey(PERSISTENT)) {\n+                clusterUpdateSettingsRequest.persistentSettings((Map) source.get(PERSISTENT));\n+            }\n+\n+            // filter out all non-sql settings\n+            clusterUpdateSettingsRequest.transientSettings(\n+                    filterSettings(clusterUpdateSettingsRequest.transientSettings())\n+            );\n+            clusterUpdateSettingsRequest.persistentSettings(\n+                    filterSettings(clusterUpdateSettingsRequest.persistentSettings())\n+            );\n+\n+            return channel -> client.admin().cluster().updateSettings(\n+                    clusterUpdateSettingsRequest, new RestToXContentListener<>(channel));\n+        } catch (Exception e) {\n+            LOG.error(\"Error changing OpenDistro SQL plugin cluster settings\", e);\n+            e.printStackTrace();", "originalCommit": "e67c90941fa9734b5aa7e42f1b48d8871db60f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMTEyNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400321124", "bodyText": "Right. Missed that. Will remove.", "author": "abbashus", "createdAt": "2020-03-30T16:19:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "809b14ef208a2ad80a7aab9d529805bb60a35363", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\nindex b03ebbb7..0c209461 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\n\n@@ -101,7 +101,6 @@ public class RestSqlSettingsAction extends BaseRestHandler {\n                     clusterUpdateSettingsRequest, new RestToXContentListener<>(channel));\n         } catch (Exception e) {\n             LOG.error(\"Error changing OpenDistro SQL plugin cluster settings\", e);\n-            e.printStackTrace();\n             return channel -> channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR,\n                     ErrorMessageFactory.createErrorMessage(e, INTERNAL_SERVER_ERROR.getStatus()).toString()));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400304370", "bodyText": "why call transientSettings two times? ref: line 86.", "author": "penghuo", "createdAt": "2020-03-30T15:55:34Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.plugin;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.ErrorMessageFactory;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.client.Requests;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.elasticsearch.rest.RestStatus.INTERNAL_SERVER_ERROR;\n+\n+/**\n+ * Interface to manage opendistro.sql.* cluster settings\n+ * All non-sql settings are ignored.\n+ * Any non-transient and non-persistent settings are ignored.\n+ */\n+public class RestSqlSettingsAction extends BaseRestHandler {\n+    private static final Logger LOG = LogManager.getLogger(RestSqlSettingsAction.class);\n+\n+    private static final String PERSISTENT = \"persistent\";\n+    private static final String TRANSIENT = \"transient\";\n+    private static final String SQL_SETTINGS_PREFIX = \"opendistro.sql.\";\n+\n+    /**\n+     * API endpoint path\n+     */\n+    public static final String SETTINGS_API_ENDPOINT = \"/_opendistro/_sql/settings\";\n+\n+    public RestSqlSettingsAction(Settings settings, RestController restController) {\n+        super();\n+        restController.registerHandler(RestRequest.Method.POST, SETTINGS_API_ENDPOINT, this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"sql_settings_action\";\n+    }\n+\n+    /**\n+     * @see org.elasticsearch.rest.action.admin.cluster.RestClusterUpdateSettingsAction\n+     */\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        LogUtils.addRequestId();\n+        final ClusterUpdateSettingsRequest clusterUpdateSettingsRequest = Requests.clusterUpdateSettingsRequest();\n+        clusterUpdateSettingsRequest.timeout(request.paramAsTime(\"timeout\", clusterUpdateSettingsRequest.timeout()));\n+        clusterUpdateSettingsRequest.masterNodeTimeout(\n+                request.paramAsTime(\"master_timeout\", clusterUpdateSettingsRequest.masterNodeTimeout()));\n+        Map<String, Object> source;\n+        try (XContentParser parser = request.contentParser()) {\n+            source = parser.map();\n+        }\n+\n+        try {\n+            if (source.containsKey(TRANSIENT)) {\n+                clusterUpdateSettingsRequest.transientSettings((Map) source.get(TRANSIENT));\n+            }\n+            if (source.containsKey(PERSISTENT)) {\n+                clusterUpdateSettingsRequest.persistentSettings((Map) source.get(PERSISTENT));\n+            }\n+\n+            // filter out all non-sql settings\n+            clusterUpdateSettingsRequest.transientSettings(", "originalCommit": "e67c90941fa9734b5aa7e42f1b48d8871db60f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMjAyNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400332027", "bodyText": "This is to take advantage of ClusterUpdateSettingsRequest.transientSettings(Map<String, ?> source) method, instead of redoing again. The second transientSettings() call just assigns new Settings after filtering non opendistro.sql settings.\nWe can bring the same logic from ClusterUpdateSettingsRequest.transientSettings(Map<String, ?> source), if there is a performance impact.", "author": "abbashus", "createdAt": "2020-03-30T16:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MjkyNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400362926", "bodyText": "No performance impact, I have a little bit concern that the current implementation coupled with ClusterUpdateSettingRequest internal implementation. It could be pain for long term maintenance.\nAs you said, maybe we can use copy the logic and only use the public interface if possible.", "author": "penghuo", "createdAt": "2020-03-30T17:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzU0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400367543", "bodyText": "I'm thinking should we add an abstraction for this rather than exposing our internal implementation to customer directly. For example,\nPOST _opendistro/_sql/settings\n{\n    \"defaultReponseFormat\": \"JSON\"\n}", "author": "dai-chen", "createdAt": "2020-03-30T17:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2Nzc1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400367751", "bodyText": "That works fine as well. Will change as suggested.", "author": "abbashus", "createdAt": "2020-03-30T17:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NDI3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400384276", "bodyText": "Just my thought and open for discussion. Not sure if any potential problem and security concern with the current implementation. Just feel it would be safer and better to hide our implementation.", "author": "dai-chen", "createdAt": "2020-03-30T17:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNDE2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400414167", "bodyText": "My thoughts:\n\n\nYes we can abstract, but I don't see any major advantage of doing this. In terms of safety, we are already filtering based on opendistro.sql. prefix. Since the plugin is  open source, hiding implementation would be just security by obscurity.\n\n\nOn top of that, there would be major work in changing the response coming from backend, to make request/response consistent. These most likely will affect existing clients which are parsing the old response from _cluster/settings API.", "author": "abbashus", "createdAt": "2020-03-30T18:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyMzUwMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400423503", "bodyText": "No performance impact, I have a little bit concern that the current implementation coupled with ClusterUpdateSettingRequest internal implementation. It could be pain for long term maintenance.\nAs you said, maybe we can use copy the logic and only use the public interface if possible.\n\nDone.", "author": "abbashus", "createdAt": "2020-03-30T19:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3NzE5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400477199", "bodyText": "@abbashus Got it. Do you know if this would work well with security plugin? Understood that the impact would be limited to SQL plugin only, but wonder if a customer without enough permission, let's say disable SQL plugin, can do it and impact others.", "author": "dai-chen", "createdAt": "2020-03-30T20:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MTMyNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400481324", "bodyText": "@abbashus Got it. Do you know if this would work well with security plugin? Understood that the impact would be limited to SQL plugin only, but wonder if a customer without enough permission, let's say disable SQL plugin, can do it and impact others.\n\nLet me deep dive on this and confirm how this will work in tandem with security plugin, and if there are any security implications or not.", "author": "abbashus", "createdAt": "2020-03-30T20:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2ODIxOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r401268218", "bodyText": "@dai-chen I verified the behavior with security plugin. A user which does not have cluster:admin/settings/update permission cannot modify SQL settings by using new endpoint as underneath both requires same permissions.", "author": "abbashus", "createdAt": "2020-03-31T23:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2OTI3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r401269273", "bodyText": "Thanks a lot for verifying!", "author": "dai-chen", "createdAt": "2020-03-31T23:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTA2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r401271067", "bodyText": "Adding here for record , how the user will be denied changing SQL settings in absence of cluster:admin/settings/update permissions.\nPUT /_opendistro/_sql/settings?pretty \n{\n  \"transient\": {\n    \"opendistro.sql.query.slowlog\": \"20\"\n  }\n}\n\n{\n  \"error\" : {\n    \"root_cause\" : [\n      {\n        \"type\" : \"security_exception\",\n        \"reason\" : \"no permissions for [cluster:admin/settings/update] and User [name=abbas, backend_roles=[], requestedTenant=__user__]\"\n      }\n    ],\n    \"type\" : \"security_exception\",\n    \"reason\" : \"no permissions for [cluster:admin/settings/update] and User [name=abbas, backend_roles=[], requestedTenant=__user__]\"\n  },\n  \"status\" : 403\n}", "author": "abbashus", "createdAt": "2020-03-31T23:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "809b14ef208a2ad80a7aab9d529805bb60a35363", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\nindex b03ebbb7..0c209461 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\n\n@@ -101,7 +101,6 @@ public class RestSqlSettingsAction extends BaseRestHandler {\n                     clusterUpdateSettingsRequest, new RestToXContentListener<>(channel));\n         } catch (Exception e) {\n             LOG.error(\"Error changing OpenDistro SQL plugin cluster settings\", e);\n-            e.printStackTrace();\n             return channel -> channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR,\n                     ErrorMessageFactory.createErrorMessage(e, INTERNAL_SERVER_ERROR.getStatus()).toString()));\n         }\n"}}, {"oid": "9dd345c38dceae41fac0da80c02818a44046031a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9dd345c38dceae41fac0da80c02818a44046031a", "message": "Merge branch 'master' into settings", "committedDate": "2020-03-30T16:14:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNTIwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400325201", "bodyText": "np: should this file be named SqlPlugin vs SqlPlug?", "author": "davidcui1225", "createdAt": "2020-03-30T16:24:54Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/SqlPlug.java", "diffHunk": "@@ -78,7 +78,8 @@ public String description() {\n         Metrics.getInstance().registerDefaultMetrics();", "originalCommit": "9dd345c38dceae41fac0da80c02818a44046031a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NDg4NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400344884", "bodyText": "Good suggestion. But we can do it as part of another maintenance PR, because I am not sure about the implication of changing this name, as it is consumed by plugin-description.properties file, which in turn used by Elasticsearch for loading plugins.", "author": "abbashus", "createdAt": "2020-03-30T16:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNTIwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNTA3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400335077", "bodyText": "not a big deal, just curious- is there a way we can export some of these JSON strings to a separate file?", "author": "davidcui1225", "createdAt": "2020-03-30T16:39:24Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/PluginIT.java", "diffHunk": "@@ -52,22 +55,399 @@ public void sqlEnableSettingsTest() throws IOException {\n         }\n \n         queryResult = new JSONObject(TestUtils.getResponseBody(response));\n-        Assert.assertThat(queryResult.getInt(\"status\"), equalTo(400));\n+        assertThat(queryResult.getInt(\"status\"), equalTo(400));\n         JSONObject error = queryResult.getJSONObject(\"error\");\n-        Assert.assertThat(error.getString(\"reason\"), equalTo(\"Invalid SQL query\"));\n-        Assert.assertThat(error.getString(\"details\"), equalTo(\"Either opendistro.sql.enabled or rest.action.multi.allow_explicit_index setting is false\"));\n-        Assert.assertThat(error.getString(\"type\"), equalTo(\"SQLFeatureDisabledException\"));\n-        resetClusterSettings(PERSISTENT, \"opendistro.sql.enabled\");\n+        assertThat(error.getString(\"reason\"), equalTo(\"Invalid SQL query\"));\n+        assertThat(error.getString(\"details\"), equalTo(\"Either opendistro.sql.enabled or rest.action.multi.allow_explicit_index setting is false\"));\n+        assertThat(error.getString(\"type\"), equalTo(\"SQLFeatureDisabledException\"));\n+        wipeAllClusterSettings();\n+    }\n+\n+    @Test", "originalCommit": "9dd345c38dceae41fac0da80c02818a44046031a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MDQyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400340429", "bodyText": "I initially thought of putting it in some file under tests/resources directory, but reason of keeping here in the test suite is to avoid the breaking the workflow for the reviewer to go back and forth between tests and fixtures file or any developer looking at it without IDE.", "author": "abbashus", "createdAt": "2020-03-30T16:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzNTA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "665d999980f638ab85b488880860aef7cfc17fdf", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/PluginIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/PluginIT.java\nindex 93c32612..93d9fe30 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/PluginIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/PluginIT.java\n\n@@ -442,7 +442,7 @@ public class PluginIT extends SQLIntegTestCase {\n     }\n \n     protected static JSONObject updateViaSQLSettingsAPI(String body) throws IOException {\n-        Request request = new Request(\"POST\", \"/_opendistro/_sql/settings\");\n+        Request request = new Request(\"PUT\", \"/_opendistro/_sql/settings\");\n         request.setJsonEntity(body);\n         RequestOptions.Builder restOptionsBuilder = RequestOptions.DEFAULT.toBuilder();\n         restOptionsBuilder.addHeader(\"Content-Type\", \"application/json\");\n"}}, {"oid": "809b14ef208a2ad80a7aab9d529805bb60a35363", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/809b14ef208a2ad80a7aab9d529805bb60a35363", "message": "Address comments: remove e.printStackTrace()", "committedDate": "2020-03-30T16:56:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzI1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400363253", "bodyText": "Does this block operation on transport thread?", "author": "penghuo", "createdAt": "2020-03-30T17:22:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.plugin;\n+\n+import com.amazon.opendistroforelasticsearch.sql.executor.format.ErrorMessageFactory;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n+import org.elasticsearch.client.Requests;\n+import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.BaseRestHandler;\n+import org.elasticsearch.rest.BytesRestResponse;\n+import org.elasticsearch.rest.RestController;\n+import org.elasticsearch.rest.RestRequest;\n+import org.elasticsearch.rest.action.RestToXContentListener;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.elasticsearch.rest.RestStatus.INTERNAL_SERVER_ERROR;\n+\n+/**\n+ * Interface to manage opendistro.sql.* cluster settings\n+ * All non-sql settings are ignored.\n+ * Any non-transient and non-persistent settings are ignored.\n+ */\n+public class RestSqlSettingsAction extends BaseRestHandler {\n+    private static final Logger LOG = LogManager.getLogger(RestSqlSettingsAction.class);\n+\n+    private static final String PERSISTENT = \"persistent\";\n+    private static final String TRANSIENT = \"transient\";\n+    private static final String SQL_SETTINGS_PREFIX = \"opendistro.sql.\";\n+\n+    /**\n+     * API endpoint path\n+     */\n+    public static final String SETTINGS_API_ENDPOINT = \"/_opendistro/_sql/settings\";\n+\n+    public RestSqlSettingsAction(Settings settings, RestController restController) {\n+        super();\n+        restController.registerHandler(RestRequest.Method.POST, SETTINGS_API_ENDPOINT, this);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"sql_settings_action\";\n+    }\n+\n+    /**\n+     * @see org.elasticsearch.rest.action.admin.cluster.RestClusterUpdateSettingsAction\n+     */\n+    @Override\n+    protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient client) throws IOException {\n+        LogUtils.addRequestId();\n+        final ClusterUpdateSettingsRequest clusterUpdateSettingsRequest = Requests.clusterUpdateSettingsRequest();\n+        clusterUpdateSettingsRequest.timeout(request.paramAsTime(\"timeout\", clusterUpdateSettingsRequest.timeout()));\n+        clusterUpdateSettingsRequest.masterNodeTimeout(\n+                request.paramAsTime(\"master_timeout\", clusterUpdateSettingsRequest.masterNodeTimeout()));\n+        Map<String, Object> source;\n+        try (XContentParser parser = request.contentParser()) {\n+            source = parser.map();\n+        }\n+\n+        try {\n+            if (source.containsKey(TRANSIENT)) {\n+                clusterUpdateSettingsRequest.transientSettings((Map) source.get(TRANSIENT));\n+            }\n+            if (source.containsKey(PERSISTENT)) {\n+                clusterUpdateSettingsRequest.persistentSettings((Map) source.get(PERSISTENT));\n+            }\n+\n+            // filter out all non-sql settings\n+            clusterUpdateSettingsRequest.transientSettings(\n+                    filterSettings(clusterUpdateSettingsRequest.transientSettings())\n+            );\n+            clusterUpdateSettingsRequest.persistentSettings(\n+                    filterSettings(clusterUpdateSettingsRequest.persistentSettings())\n+            );\n+\n+            return channel -> client.admin().cluster().updateSettings(", "originalCommit": "e67c90941fa9734b5aa7e42f1b48d8871db60f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MDM0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400370341", "bodyText": "Let me confirm.", "author": "abbashus", "createdAt": "2020-03-30T17:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjM1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/400#discussion_r400416356", "bodyText": "Verified that this is not blocking operation on Transport thread, in two ways:\n\n\nOur integration test cluster already has assertions enabled (as confirmed with @dai-chen ) and all settings related integration tests are passing.\n\n\nManually tested by adding -ea flag in config/jvm.options, and changed settings via Kibana Devtools console.", "author": "abbashus", "createdAt": "2020-03-30T18:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "983a8c98f875d383c51da5c4435a1f0df3521d5a", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\nindex b03ebbb7..27a53c3a 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlSettingsAction.java\n\n@@ -20,11 +20,16 @@ import com.amazon.opendistroforelasticsearch.sql.executor.format.ErrorMessageFac\n import com.amazon.opendistroforelasticsearch.sql.utils.LogUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchGenerationException;\n import org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;\n import org.elasticsearch.client.Requests;\n import org.elasticsearch.client.node.NodeClient;\n+import org.elasticsearch.common.Strings;\n import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.elasticsearch.common.xcontent.XContentFactory;\n import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.common.xcontent.XContentType;\n import org.elasticsearch.rest.BaseRestHandler;\n import org.elasticsearch.rest.BytesRestResponse;\n import org.elasticsearch.rest.RestController;\n"}}, {"oid": "983a8c98f875d383c51da5c4435a1f0df3521d5a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/983a8c98f875d383c51da5c4435a1f0df3521d5a", "message": "Address comments", "committedDate": "2020-03-30T19:00:30Z", "type": "commit"}, {"oid": "665d999980f638ab85b488880860aef7cfc17fdf", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/665d999980f638ab85b488880860aef7cfc17fdf", "message": "Change endpoint HTTP method to PUT", "committedDate": "2020-03-30T19:25:31Z", "type": "commit"}, {"oid": "03cb8130c75c2b55518eb59cf32005b41b07f011", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/03cb8130c75c2b55518eb59cf32005b41b07f011", "message": "Update Settings doc", "committedDate": "2020-03-30T19:31:38Z", "type": "commit"}]}