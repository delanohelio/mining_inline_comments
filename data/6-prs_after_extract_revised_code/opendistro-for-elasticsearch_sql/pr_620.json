{"pr_number": 620, "pr_title": "Add Text and Keyword Data Type", "pr_createdAt": "2020-07-27T16:58:33Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620", "timeline": [{"oid": "ee0fdee3a45a7ee3b0c2963ce10e1bc46c6f93ed", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ee0fdee3a45a7ee3b0c2963ce10e1bc46c6f93ed", "message": "Add Text and Keyword Data Type", "committedDate": "2020-07-27T16:46:15Z", "type": "commit"}, {"oid": "b44d420d0b836ffff636ba39d1a1d90c50439ffb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b44d420d0b836ffff636ba39d1a1d90c50439ffb", "message": "update", "committedDate": "2020-07-27T16:53:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0OTk1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#discussion_r461949956", "bodyText": "np: the impl() for binary function returns Function as below rather than SerializableFunction?", "author": "dai-chen", "createdAt": "2020-07-28T23:26:52Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * Function Define Utility.\n+ */\n+@UtilityClass\n+public class FunctionDSL {\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>... functions) {\n+    return define(functionName, Arrays.asList(functions));\n+  }\n+\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 List<Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>> functions) {\n+\n+    FunctionResolver.FunctionResolverBuilder builder = FunctionResolver.builder();\n+    builder.functionName(functionName);\n+    for (Function<FunctionName, Pair<FunctionSignature, FunctionBuilder>> func : functions) {\n+      Pair<FunctionSignature, FunctionBuilder> functionBuilder = func.apply(functionName);\n+      builder.functionBundle(functionBuilder.getKey(), functionBuilder.getValue());\n+    }\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Unary Function Implementation.\n+   *\n+   * @param function   {@link ExprValue} based unary function.\n+   * @param returnType return type.\n+   * @param argsType   argument type.\n+   * @return Unary Function Implementation.\n+   */\n+  public SerializableFunction<FunctionName, Pair<FunctionSignature, FunctionBuilder>> impl(", "originalCommit": "b44d420d0b836ffff636ba39d1a1d90c50439ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MzQ3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#discussion_r462393477", "bodyText": "Done.", "author": "penghuo", "createdAt": "2020-07-29T15:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk0OTk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e088f0a3c046063224ab7bc62c85295f72b4f161", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java\nindex de129b4d..84102765 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java\n\n@@ -90,13 +90,7 @@ public class FunctionDSL {\n             @Override\n             public ExprValue valueOf(Environment<Expression, ExprValue> valueEnv) {\n               ExprValue value = arguments.get(0).valueOf(valueEnv);\n-              if (value.isMissing()) {\n-                return ExprValueUtils.missingValue();\n-              } else if (value.isNull()) {\n-                return ExprValueUtils.nullValue();\n-              } else {\n-                return function.apply(value);\n-              }\n+              return function.apply(value);\n             }\n \n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDA1NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#discussion_r461954054", "bodyText": "I may miss it somewhere. Where is this MISSING/NULL check logic for the impl() below?", "author": "dai-chen", "createdAt": "2020-07-28T23:39:02Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ *\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import lombok.experimental.UtilityClass;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * Function Define Utility.\n+ */\n+@UtilityClass\n+public class FunctionDSL {\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>... functions) {\n+    return define(functionName, Arrays.asList(functions));\n+  }\n+\n+  /**\n+   * Define overloaded function with implementation.\n+   *\n+   * @param functionName function name.\n+   * @param functions    a list of function implementation.\n+   * @return FunctionResolver.\n+   */\n+  public FunctionResolver define(FunctionName functionName,\n+                                 List<Function<FunctionName, Pair<FunctionSignature,\n+                                     FunctionBuilder>>> functions) {\n+\n+    FunctionResolver.FunctionResolverBuilder builder = FunctionResolver.builder();\n+    builder.functionName(functionName);\n+    for (Function<FunctionName, Pair<FunctionSignature, FunctionBuilder>> func : functions) {\n+      Pair<FunctionSignature, FunctionBuilder> functionBuilder = func.apply(functionName);\n+      builder.functionBundle(functionBuilder.getKey(), functionBuilder.getValue());\n+    }\n+    return builder.build();\n+  }\n+\n+  /**\n+   * Unary Function Implementation.\n+   *\n+   * @param function   {@link ExprValue} based unary function.\n+   * @param returnType return type.\n+   * @param argsType   argument type.\n+   * @return Unary Function Implementation.\n+   */\n+  public SerializableFunction<FunctionName, Pair<FunctionSignature, FunctionBuilder>> impl(\n+      SerializableFunction<ExprValue, ExprValue> function,\n+      ExprType returnType,\n+      ExprType argsType) {\n+\n+    return functionName -> {\n+      FunctionSignature functionSignature =\n+          new FunctionSignature(functionName, Collections.singletonList(argsType));\n+      FunctionBuilder functionBuilder =\n+          arguments -> new FunctionExpression(functionName, arguments) {\n+            @Override\n+            public ExprValue valueOf(Environment<Expression, ExprValue> valueEnv) {\n+              ExprValue value = arguments.get(0).valueOf(valueEnv);\n+              if (value.isMissing()) {\n+                return ExprValueUtils.missingValue();\n+              } else if (value.isNull()) {\n+                return ExprValueUtils.nullValue();", "originalCommit": "b44d420d0b836ffff636ba39d1a1d90c50439ffb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5Njc2OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/620#discussion_r462396768", "bodyText": "Good points.\nRemove the NULL/MISSING generic handling logic in FunctionDSL.impl, and provide another utilit method nullMissingHandling to the client. The reason for doing that is (1) most of operator/function follow the generic missing/null handling logic. (2) but some doesn't follow that e.g. and/or/xor.\n  public SerializableFunction<ExprValue, ExprValue> nullMissingHandling(\n      SerializableFunction<ExprValue, ExprValue> function) {\n    return value -> {\n      if (value.isMissing()) {\n        return ExprValueUtils.missingValue();\n      } else if (value.isNull()) {\n        return ExprValueUtils.nullValue();\n      } else {\n        return function.apply(value);\n      }\n    };\n  }\n\nThe client could make decision whetehr it want to follow the generic rule or not.\nFunctionDSL.impl(FunctionDSL.nullMissingHandling(DateTimeFunction::exprDayOfMonth),\n            INTEGER, DATE)", "author": "penghuo", "createdAt": "2020-07-29T15:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1NDA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e088f0a3c046063224ab7bc62c85295f72b4f161", "chunk": "diff --git a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java\nindex de129b4d..84102765 100644\n--- a/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java\n+++ b/core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionDSL.java\n\n@@ -90,13 +90,7 @@ public class FunctionDSL {\n             @Override\n             public ExprValue valueOf(Environment<Expression, ExprValue> valueEnv) {\n               ExprValue value = arguments.get(0).valueOf(valueEnv);\n-              if (value.isMissing()) {\n-                return ExprValueUtils.missingValue();\n-              } else if (value.isNull()) {\n-                return ExprValueUtils.nullValue();\n-              } else {\n-                return function.apply(value);\n-              }\n+              return function.apply(value);\n             }\n \n             @Override\n"}}, {"oid": "e088f0a3c046063224ab7bc62c85295f72b4f161", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e088f0a3c046063224ab7bc62c85295f72b4f161", "message": "address comments", "committedDate": "2020-07-29T15:35:08Z", "type": "commit"}]}