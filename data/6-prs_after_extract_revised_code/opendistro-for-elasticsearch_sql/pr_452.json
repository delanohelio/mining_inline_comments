{"pr_number": 452, "pr_title": "Bug Fix, support using aggregation function in order by clause", "pr_createdAt": "2020-04-29T23:55:52Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452", "timeline": [{"oid": "72bb7a27da9f7333992840af266316a756795169", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/72bb7a27da9f7333992840af266316a756795169", "message": "Bug Fix, support using aggregation function in order by clause", "committedDate": "2020-04-29T23:34:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMzU4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#discussion_r418123587", "bodyText": "So this one is testing ORDER BY count DESC, should we assert the rows in reversed order?\nProbably we need to replace the Hamcrest matcher containsInAnyOrder:\n    @SuppressWarnings(\"unchecked\")\n    public static void verifyDataRows(JSONObject response, Matcher<JSONArray>... matchers) {\n        verify(response.getJSONArray(\"datarows\"), matchers);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> void verify(JSONArray array, Matcher<T>... matchers) {\n        List<T> objects = new ArrayList<>();\n        array.iterator().forEachRemaining(o -> objects.add((T) o));\n        assertEquals(matchers.length, objects.size());\n        assertThat(objects, containsInAnyOrder(matchers));\n    }", "author": "dai-chen", "createdAt": "2020-04-30T16:07:57Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java", "diffHunk": "@@ -426,59 +426,61 @@ public void termsWithOrder() throws Exception {\n     }\n \n     @Test\n-    public void orderByAscTest() throws IOException {\n-\n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age ORDER BY COUNT(*)\",\n-                TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+    public void orderByAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*)\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, greaterThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasAscTest() {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n     }\n \n     @Test\n     public void orderByDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) FROM %s \" +\n+                \"GROUP BY gender ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n \n-        JSONObject result = executeQuery(String.format(\"SELECT COUNT(*) FROM %s GROUP BY age\" +\n-                \" ORDER BY COUNT(*) DESC\", TEST_INDEX_ACCOUNT));\n-        JSONObject ageAgg = getAggregation(result, \"age\");\n-        JSONArray buckets = ageAgg.getJSONArray(\"buckets\");\n-\n-        int previousBucketCount = 0;\n-        int currentBucketCount;\n-        for (int i = 0; i < buckets.length(); ++i) {\n-            currentBucketCount = (int) buckets.query(String.format(Locale.ROOT, \"/%d/COUNT(*)/value\", i));\n-\n-            if (0 == i) {\n-                previousBucketCount = currentBucketCount;\n-                continue;\n-            }\n+        verifySchema(response, schema(\"COUNT(*)\", null, \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));\n+    }\n \n-            Assert.assertThat(currentBucketCount, lessThanOrEqualTo(previousBucketCount));\n-            previousBucketCount = currentBucketCount;\n-        }\n+    @Test\n+    public void orderByAliasDescTest() throws IOException {\n+        JSONObject response = executeJdbcRequest(String.format(\"SELECT COUNT(*) as count FROM %s \" +\n+                \"GROUP BY gender ORDER BY count DESC\", TEST_INDEX_ACCOUNT));\n+\n+        verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n+        verifyDataRows(response,\n+                rows(493),\n+                rows(507));", "originalCommit": "72bb7a27da9f7333992840af266316a756795169", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxNzAxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/452#discussion_r418317019", "bodyText": "sure. done.", "author": "penghuo", "createdAt": "2020-04-30T22:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEyMzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cf1813fef94b81091e40d3c4a835d87979113153", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java\nindex 8f12fafd..23480051 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/AggregationIT.java\n\n@@ -442,7 +441,7 @@ public class AggregationIT extends SQLIntegTestCase {\n                 \"GROUP BY gender ORDER BY count\", TEST_INDEX_ACCOUNT));\n \n         verifySchema(response, schema(\"count\", \"count\", \"integer\"));\n-        verifyDataRows(response,\n+        verifyDataRowsInOrder(response,\n                 rows(493),\n                 rows(507));\n     }\n"}}, {"oid": "cf1813fef94b81091e40d3c4a835d87979113153", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cf1813fef94b81091e40d3c4a835d87979113153", "message": "address comments", "committedDate": "2020-04-30T22:08:28Z", "type": "commit"}]}