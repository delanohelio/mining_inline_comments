{"pr_number": 470, "pr_title": "Enhancement, add the field type conflict check in semantic check", "pr_createdAt": "2020-05-15T21:27:25Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470", "timeline": [{"oid": "570fb9e11e0061fa60c0e7ab3819ed9781797115", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/570fb9e11e0061fa60c0e7ab3819ed9781797115", "message": "Enhancement, add the field type conflict check in semantic check", "committedDate": "2020-05-15T20:49:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTIyNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426069224", "bodyText": "We should change this to Field [%s] has\u00a0conflicting type [%s]", "author": "abbashus", "createdAt": "2020-05-15T22:13:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The TypeSupplier is construct by the symbolName and symbolType.\n+ * The TypeSupplier implement the {@link Supplier<Type>} interface to provide the {@link Type}.\n+ * The TypeSupplier maintain types to track different {@link Type} definition for the same symbolName.\n+ */\n+public class TypeSupplier implements Supplier<Type> {\n+    private final String symbolName;\n+    private final Type symbolType;\n+    private final Set<Type> types;\n+\n+    public TypeSupplier(String symbolName, Type symbolType) {\n+        this.symbolName = symbolName;\n+        this.symbolType = symbolType;\n+        this.types = new HashSet<>();\n+        this.types.add(symbolType);\n+    }\n+\n+    public TypeSupplier add(Type type) {\n+        types.add(type);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the {@link Type}\n+     * Throw {@link SemanticAnalysisException} if conflict found.\n+     * Currently, if the two type not equal, it been treated as conflict.\n+     */\n+    @Override\n+    public Type get() {\n+        if (types.size() > 1) {\n+            throw new SemanticAnalysisException(\n+                    String.format(\"Symbol [%s] have conflict type [%s]\", symbolName, types));", "originalCommit": "570fb9e11e0061fa60c0e7ab3819ed9781797115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Mjk3MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162970", "bodyText": "done.", "author": "penghuo", "createdAt": "2020-05-16T15:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "782ae8c6f908ac4b6fb5260deb22330aa6c79b7b", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java\nindex 65944a02..e1605c6f 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java\n\n@@ -47,13 +47,13 @@ public class TypeSupplier implements Supplier<Type> {\n     /**\n      * Get the {@link Type}\n      * Throw {@link SemanticAnalysisException} if conflict found.\n-     * Currently, if the two type not equal, it been treated as conflict.\n+     * Currently, if the two types not equal, they are treated as conflicting.\n      */\n     @Override\n     public Type get() {\n         if (types.size() > 1) {\n             throw new SemanticAnalysisException(\n-                    String.format(\"Symbol [%s] have conflict type [%s]\", symbolName, types));\n+                    String.format(\"Field [%s] have conflict type [%s]\", symbolName, types));\n         } else {\n             return symbolType;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTkwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426069901", "bodyText": "np: type - >types , it been treated as conflict - > they are treated as conflicting", "author": "abbashus", "createdAt": "2020-05-15T22:15:35Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+/**\n+ * The TypeSupplier is construct by the symbolName and symbolType.\n+ * The TypeSupplier implement the {@link Supplier<Type>} interface to provide the {@link Type}.\n+ * The TypeSupplier maintain types to track different {@link Type} definition for the same symbolName.\n+ */\n+public class TypeSupplier implements Supplier<Type> {\n+    private final String symbolName;\n+    private final Type symbolType;\n+    private final Set<Type> types;\n+\n+    public TypeSupplier(String symbolName, Type symbolType) {\n+        this.symbolName = symbolName;\n+        this.symbolType = symbolType;\n+        this.types = new HashSet<>();\n+        this.types.add(symbolType);\n+    }\n+\n+    public TypeSupplier add(Type type) {\n+        types.add(type);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the {@link Type}\n+     * Throw {@link SemanticAnalysisException} if conflict found.\n+     * Currently, if the two type not equal, it been treated as conflict.", "originalCommit": "570fb9e11e0061fa60c0e7ab3819ed9781797115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2MjkwOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162908", "bodyText": "done.", "author": "penghuo", "createdAt": "2020-05-16T15:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "782ae8c6f908ac4b6fb5260deb22330aa6c79b7b", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java\nindex 65944a02..e1605c6f 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplier.java\n\n@@ -47,13 +47,13 @@ public class TypeSupplier implements Supplier<Type> {\n     /**\n      * Get the {@link Type}\n      * Throw {@link SemanticAnalysisException} if conflict found.\n-     * Currently, if the two type not equal, it been treated as conflict.\n+     * Currently, if the two types not equal, they are treated as conflicting.\n      */\n     @Override\n     public Type get() {\n         if (types.size() > 1) {\n             throw new SemanticAnalysisException(\n-                    String.format(\"Symbol [%s] have conflict type [%s]\", symbolName, types));\n+                    String.format(\"Field [%s] have conflict type [%s]\", symbolName, types));\n         } else {\n             return symbolType;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MDQyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426070423", "bodyText": "np: Conflict -> conflict", "author": "abbashus", "createdAt": "2020-05-15T22:17:27Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.util.MultipleIndexClusterUtils.mockMultipleIndexEnv;\n+\n+public class SemanticAnalyzerFieldTypeTest extends SemanticAnalyzerTestBase {\n+    @Before\n+    public void setup() {\n+        mockMultipleIndexEnv();\n+    }\n+\n+    /**\n+     * id has same type in account1 and account2.\n+     */\n+    @Test\n+    public void accessFieldTypeNotInQueryPassSemanticCheck() {\n+        validate(\"SELECT id FROM account* WHERE id = 1\");\n+    }\n+\n+    /**\n+     * address doesn't exist in account1.\n+     */\n+    @Test\n+    public void accessFieldTypeOnlyInOneIndexPassSemanticCheck() {\n+        validate(\"SELECT address FROM account* WHERE id = 30\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void accessConflictFieldTypeShouldFailSemanticCheck() {\n+        expectValidationFailWithErrorMessages(\"SELECT age FROM account* WHERE age = 30\",\n+                \"Symbol [age] have conflict type\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void mixNonConflictTypeAndConflictFieldTypeShouldFailSemanticCheck() {\n+        expectValidationFailWithErrorMessages(\"SELECT id, age FROM account* WHERE id = 1\",\n+                \"Symbol [age] have conflict type\");\n+    }\n+\n+    /**\n+     * age has different type in account1 and account2.\n+     */\n+    @Test\n+    public void ConflictFieldTypeWithAliasShouldFailSemanticCheck() {", "originalCommit": "570fb9e11e0061fa60c0e7ab3819ed9781797115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Mjc3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162773", "bodyText": "done.", "author": "penghuo", "createdAt": "2020-05-16T15:19:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MDQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "782ae8c6f908ac4b6fb5260deb22330aa6c79b7b", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java\nindex 091b4aa4..f01450a5 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/SemanticAnalyzerFieldTypeTest.java\n\n@@ -48,7 +48,7 @@ public class SemanticAnalyzerFieldTypeTest extends SemanticAnalyzerTestBase {\n     @Test\n     public void accessConflictFieldTypeShouldFailSemanticCheck() {\n         expectValidationFailWithErrorMessages(\"SELECT age FROM account* WHERE age = 30\",\n-                \"Symbol [age] have conflict type\");\n+                \"Field [age] have conflict type\");\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzM4OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426073388", "bodyText": "np: wildcard import", "author": "dai-chen", "createdAt": "2020-05-15T22:28:14Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope;\n+\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.SemanticAnalysisException;\n+import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.base.ESDataType;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.junit.Assert.*;", "originalCommit": "570fb9e11e0061fa60c0e7ab3819ed9781797115", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2MjcxNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/470#discussion_r426162716", "bodyText": "done.", "author": "penghuo", "createdAt": "2020-05-16T15:18:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MzM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "782ae8c6f908ac4b6fb5260deb22330aa6c79b7b", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java\nindex 8c440710..82e2eb7f 100644\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java\n+++ b/src/test/java/com/amazon/opendistroforelasticsearch/sql/antlr/semantic/scope/TypeSupplierTest.java\n\n@@ -21,7 +21,7 @@ import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n \n public class TypeSupplierTest {\n     @Rule\n"}}, {"oid": "782ae8c6f908ac4b6fb5260deb22330aa6c79b7b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/782ae8c6f908ac4b6fb5260deb22330aa6c79b7b", "message": "address comments", "committedDate": "2020-05-16T15:34:41Z", "type": "commit"}]}