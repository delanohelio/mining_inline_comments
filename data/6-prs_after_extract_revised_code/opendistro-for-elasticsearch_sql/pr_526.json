{"pr_number": 526, "pr_title": "Move the index mapping definitions to standalone json files", "pr_createdAt": "2020-06-18T14:58:43Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/526", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4NjU4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/526#discussion_r442886586", "bodyText": "all the method have almost same implementation, the only different is mappingFile name, could you simply it?", "author": "penghuo", "createdAt": "2020-06-19T14:53:45Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TestUtils.java", "diffHunk": "@@ -127,566 +130,196 @@ public static Response performRequest(RestClient client, Request request) {\n     }\n \n     public static String getAccountIndexMapping() {\n-        return \"{  \\\"mappings\\\": {\" +\n-                \" \\\"properties\\\": {\\n\" +\n-                \"          \\\"gender\\\": {\\n\" +\n-                \"            \\\"type\\\": \\\"text\\\",\\n\" +\n-                \"            \\\"fielddata\\\": true\\n\" +\n-                \"          },\" +\n-                \"          \\\"address\\\": {\\n\" +\n-                \"            \\\"type\\\": \\\"text\\\",\\n\" +\n-                \"            \\\"fielddata\\\": true\\n\" +\n-                \"          },\" +\n-                \"          \\\"firstname\\\": {\\n\" +\n-                \"            \\\"type\\\": \\\"text\\\",\\n\" +\n-                \"            \\\"fielddata\\\": true,\\n\" +\n-                \"            \\\"fields\\\": {\\n\" +\n-                \"              \\\"keyword\\\": {\\n\" +\n-                \"                \\\"type\\\": \\\"keyword\\\",\\n\" +\n-                \"                \\\"ignore_above\\\": 256\\n\" +\n-                \"              }\" +\n-                \"            }\" +\n-                \"          },\" +\n-                \"          \\\"lastname\\\": {\\n\" +\n-                \"            \\\"type\\\": \\\"text\\\",\\n\" +\n-                \"            \\\"fielddata\\\": true,\\n\" +\n-                \"            \\\"fields\\\": {\\n\" +\n-                \"              \\\"keyword\\\": {\\n\" +\n-                \"                \\\"type\\\": \\\"keyword\\\",\\n\" +\n-                \"                \\\"ignore_above\\\": 256\\n\" +\n-                \"              }\" +\n-                \"            }\" +\n-                \"          },\" +\n-                \"          \\\"state\\\": {\\n\" +\n-                \"            \\\"type\\\": \\\"text\\\",\\n\" +\n-                \"            \\\"fielddata\\\": true,\\n\" +\n-                \"            \\\"fields\\\": {\\n\" +\n-                \"              \\\"keyword\\\": {\\n\" +\n-                \"                \\\"type\\\": \\\"keyword\\\",\\n\" +\n-                \"                \\\"ignore_above\\\": 256\\n\" +\n-                \"              }\" +\n-                \"            }\" +\n-                \"          }\" +\n-                \"       }\"+\n-                \"   }\" +\n-                \"}\";\n+        String mappingFile = \"mappings/account_index_mapping.json\";\n+        URL url = Resources.getResource(mappingFile);\n+        try {\n+            return Resources.toString(url, Charsets.UTF_8);\n+        } catch(Exception e) {\n+            return null;\n+        }\n     }\n \n     public static String getPhraseIndexMapping() {\n-        return \"{  \\\"mappings\\\": {\" +\n-                \" \\\"properties\\\": {\\n\" +\n-                \"          \\\"phrase\\\": {\\n\" +\n-                \"            \\\"type\\\": \\\"text\\\",\\n\" +\n-                \"            \\\"store\\\": true\\n\" +\n-                \"          }\" +\n-                \"       }\"+\n-                \"   }\" +\n-                \"}\";\n+        String mappingFile = \"mappings/phrase_index_mapping.json\";", "originalCommit": "d2e7491452cfd063e5787cbe83b6fe5e39b08933", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4MTQxMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/526#discussion_r443081412", "bodyText": "Thank you for the review! I made a function to make logic and error handling common.\nAlso found fileToString method in TestUtils, so i stopped using Resources and used that method.", "author": "pakio", "createdAt": "2020-06-20T00:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4NjU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9dab77dbfa4d28d907dad9514d18c9de9285d28d", "chunk": "diff --git a/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TestUtils.java b/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TestUtils.java\ndeleted file mode 100644\nindex e0e6a290..00000000\n--- a/src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TestUtils.java\n+++ /dev/null\n\n@@ -1,472 +0,0 @@\n-/*\n- *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\").\n- *   You may not use this file except in compliance with the License.\n- *   A copy of the License is located at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *   or in the \"license\" file accompanying this file. This file is distributed\n- *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- *   express or implied. See the License for the specific language governing\n- *   permissions and limitations under the License.\n- */\n-\n-package com.amazon.opendistroforelasticsearch.sql.esintgtest;\n-\n-import org.elasticsearch.action.bulk.BulkRequest;\n-import org.elasticsearch.action.bulk.BulkResponse;\n-import org.elasticsearch.action.index.IndexRequest;\n-import org.elasticsearch.client.Client;\n-import org.elasticsearch.client.Request;\n-import org.elasticsearch.client.Response;\n-import org.elasticsearch.client.RestClient;\n-import org.elasticsearch.common.xcontent.XContentType;\n-import org.json.JSONObject;\n-\n-import com.google.common.base.Charsets;\n-import com.google.common.io.Resources;\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n-import java.net.URL;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.stream.Collectors;\n-\n-import static com.google.common.base.Strings.isNullOrEmpty;\n-\n-public class TestUtils {\n-\n-    /**\n-     * Create test index by REST client.\n-     * @param client        client connection\n-     * @param indexName     test index name\n-     * @param mapping       test index mapping or null if no predefined mapping\n-     */\n-    public static void createIndexByRestClient(RestClient client, String indexName, String mapping) {\n-        Request request = new Request(\"PUT\", \"/\" + indexName);\n-        if (!isNullOrEmpty(mapping)) {\n-            request.setJsonEntity(mapping);\n-        }\n-        performRequest(client, request);\n-    }\n-\n-    /**\n-     * https://github.com/elastic/elasticsearch/pull/49959\n-     * Deprecate creation of dot-prefixed index names except for hidden and system indices.\n-     * Create hidden index by REST client.\n-     * @param client        client connection\n-     * @param indexName     test index name\n-     * @param mapping       test index mapping or null if no predefined mapping\n-     */\n-    public static void createHiddenIndexByRestClient(RestClient client, String indexName, String mapping) {\n-        Request request = new Request(\"PUT\", \"/\" + indexName);\n-        JSONObject jsonObject = isNullOrEmpty(mapping) ? new JSONObject() : new JSONObject(mapping);\n-        jsonObject.put(\"settings\", new JSONObject(\"{\\\"index\\\":{\\\"hidden\\\":true}}\"));\n-        request.setJsonEntity(jsonObject.toString());\n-\n-        performRequest(client, request);\n-    }\n-\n-    /**\n-     * Check if index already exists by ES index exists API which returns:\n-     *  200 - specified indices or aliases exist\n-     *  404 - one or more indices specified or aliases do not exist\n-     * @param client        client connection\n-     * @param indexName     index name\n-     * @return              true for index exist\n-     */\n-    public static boolean isIndexExist(RestClient client, String indexName) {\n-        try {\n-            Response response = client.performRequest(new Request(\"HEAD\", \"/\" + indexName));\n-            return (response.getStatusLine().getStatusCode() == 200);\n-        } catch (IOException e) {\n-            throw new IllegalStateException(\"Failed to perform request\", e);\n-        }\n-    }\n-\n-    /**\n-     * Load test data set by REST client.\n-     * @param client            client connection\n-     * @param indexName         index name\n-     * @param dataSetFilePath   file path of test data set\n-     * @throws IOException\n-     */\n-    public static void loadDataByRestClient(RestClient client, String indexName, String dataSetFilePath) throws IOException {\n-        Path path = Paths.get(getResourceFilePath(dataSetFilePath));\n-        Request request = new Request(\"POST\", \"/\" + indexName + \"/_bulk?refresh=true\");\n-        request.setJsonEntity(new String(Files.readAllBytes(path)));\n-        performRequest(client, request);\n-    }\n-\n-    /**\n-     * Perform a request by REST client.\n-     * @param client    client connection\n-     * @param request   request object\n-     */\n-    public static Response performRequest(RestClient client, Request request) {\n-        try {\n-            Response response = client.performRequest(request);\n-            int status = response.getStatusLine().getStatusCode();\n-            if (status >= 400) {\n-                throw new IllegalStateException(\"Failed to perform request. Error code: \" + status);\n-            }\n-            return response;\n-        } catch (IOException e) {\n-            throw new IllegalStateException(\"Failed to perform request\", e);\n-        }\n-    }\n-\n-    public static String getAccountIndexMapping() {\n-        String mappingFile = \"mappings/account_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getPhraseIndexMapping() {\n-        String mappingFile = \"mappings/phrase_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getDogIndexMapping() {\n-        String mappingFile = \"mappings/dog_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getDogs2IndexMapping() {\n-        String mappingFile = \"mappings/dog2_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getDogs3IndexMapping() {\n-        String mappingFile = \"mappings/dog3_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getPeople2IndexMapping() {\n-        String mappingFile = \"mappings/people2_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getGameOfThronesIndexMapping() {\n-        String mappingFile = \"mappings/game_of_thrones_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    // System\n-\n-    public static String getOdbcIndexMapping() {\n-        String mappingFile = \"mappings/odbc_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getLocationIndexMapping() {\n-        String mappingFile = \"mappings/location_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getEmployeeNestedTypeIndexMapping() {\n-        String mappingFile = \"mappings/employee_nested_type_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-\n-    public static String getNestedTypeIndexMapping() {\n-        String mappingFile = \"mappings/nested_type_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getJoinTypeIndexMapping() {\n-        String mappingFile = \"mappings/join_type_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getBankIndexMapping() {\n-        String mappingFile = \"mappings/bank_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getBankWithNullValuesIndexMapping() {\n-        String mappingFile = \"mappings/bank_with_null_values_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getOrderIndexMapping() {\n-        String mappingFile = \"mappings/order_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getWeblogsIndexMapping() {\n-        String mappingFile = \"mappings/weblogs_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getDateIndexMapping() {\n-        String mappingFile = \"mappings/date_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getDateTimeIndexMapping() {\n-        String mappingFile = \"mappings/date_time_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-\n-    public static String getNestedSimpleIndexMapping() {\n-        String mappingFile = \"mappings/nested_simple_index_mapping.json\";\n-        URL url = Resources.getResource(mappingFile);\n-        try {\n-            return Resources.toString(url, Charsets.UTF_8);\n-        } catch(Exception e) {\n-            return null;\n-        }\n-    }\n-    public static void loadBulk(Client client, String jsonPath, String defaultIndex) throws Exception {\n-        System.out.println(String.format(\"Loading file %s into elasticsearch cluster\", jsonPath));\n-        String absJsonPath = getResourceFilePath(jsonPath);\n-\n-        BulkRequest bulkRequest = new BulkRequest();\n-        try (final InputStream stream =  new FileInputStream(absJsonPath);\n-             final Reader streamReader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n-             final BufferedReader br = new BufferedReader(streamReader)) {\n-\n-            while (true) {\n-\n-                String actionLine = br.readLine();\n-                if (actionLine == null || actionLine.trim().isEmpty()) {\n-                    break;\n-                }\n-                String sourceLine = br.readLine();\n-                JSONObject actionJson = new JSONObject(actionLine);\n-\n-                IndexRequest indexRequest = new IndexRequest();\n-                indexRequest.index(defaultIndex);\n-                String docType = actionJson.getJSONObject(\"index\").getString(\"_type\");\n-                indexRequest.type(docType);\n-                if (actionJson.getJSONObject(\"index\").has(\"_id\")) {\n-                    String docId = actionJson.getJSONObject(\"index\").getString(\"_id\");\n-                    indexRequest.id(docId);\n-                }\n-                if (actionJson.getJSONObject(\"index\").has(\"_routing\")) {\n-                    String routing = actionJson.getJSONObject(\"index\").getString(\"_routing\");\n-                    indexRequest.routing(routing);\n-                }\n-                indexRequest.source(sourceLine, XContentType.JSON);\n-                bulkRequest.add(indexRequest);\n-            }\n-        }\n-\n-        BulkResponse bulkResponse = client.bulk(bulkRequest).actionGet();\n-\n-        if (bulkResponse.hasFailures()) {\n-            throw new Exception(\"Failed to load test data into index \" + defaultIndex + \", \" +\n-                    bulkResponse.buildFailureMessage());\n-        }\n-        System.out.println(bulkResponse.getItems().length + \" documents loaded.\");\n-        // ensure the documents are searchable\n-        client.admin().indices().prepareRefresh(defaultIndex).execute().actionGet();\n-    }\n-\n-    public static String getResourceFilePath(String relPath) {\n-        String projectRoot = System.getProperty(\"project.root\", null);\n-        if (projectRoot == null) {\n-            return new File(relPath).getAbsolutePath();\n-        } else {\n-            return new File(projectRoot + \"/\" + relPath).getAbsolutePath();\n-        }\n-    }\n-\n-    public static String getResponseBody(Response response) throws IOException {\n-\n-        return getResponseBody(response, false);\n-    }\n-\n-    public static String getResponseBody(Response response, boolean retainNewLines) throws IOException {\n-        final StringBuilder sb = new StringBuilder();\n-\n-        try (final InputStream is = response.getEntity().getContent();\n-             final BufferedReader br = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n-\n-            String line;\n-            while ((line = br.readLine()) != null) {\n-                sb.append(line);\n-                if (retainNewLines) {\n-                    sb.append(String.format(Locale.ROOT, \"%n\"));\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    public static String fileToString(final String filePathFromProjectRoot, final boolean removeNewLines)\n-            throws IOException {\n-\n-        final String absolutePath = getResourceFilePath(filePathFromProjectRoot);\n-\n-        try (final InputStream stream = new FileInputStream(absolutePath);\n-             final Reader streamReader = new InputStreamReader(stream, StandardCharsets.UTF_8);\n-             final BufferedReader br = new BufferedReader(streamReader)) {\n-\n-            final StringBuilder stringBuilder = new StringBuilder();\n-            String line = br.readLine();\n-\n-            while (line != null) {\n-\n-                stringBuilder.append(line);\n-                if (!removeNewLines) {\n-                    stringBuilder.append(String.format(Locale.ROOT, \"%n\"));\n-                }\n-                line = br.readLine();\n-            }\n-\n-            return stringBuilder.toString();\n-        }\n-    }\n-\n-    /**\n-     * Builds all permutations of the given list of Strings\n-     * @param items\n-                list of strings to permute\n-     * @return list of permutations\n-     */\n-    public static List<List<String>> getPermutations(final List<String> items) {\n-\n-        if (items.size() > 5) {\n-            throw new IllegalArgumentException(\"Inefficient test, please refactor\");\n-        }\n-\n-        final List<List<String>> result = new LinkedList<>();\n-\n-        if (items.isEmpty() || 1 == items.size()) {\n-\n-            final List<String> onlyElement = new ArrayList<>();\n-            if (1 == items.size()) {\n-                onlyElement.add(items.get(0));\n-            }\n-            result.add(onlyElement);\n-            return result;\n-        }\n-\n-        for (int i = 0; i < items.size(); ++i) {\n-\n-            final List<String> smallerSet = new ArrayList<>();\n-\n-            if (i != 0) {\n-                smallerSet.addAll(items.subList(0, i));\n-            }\n-            if (i != items.size() - 1) {\n-                smallerSet.addAll(items.subList(i + 1, items.size()));\n-            }\n-\n-            final String currentItem = items.get(i);\n-            result.addAll(getPermutations(smallerSet).stream().map(smallerSetPermutation -> {\n-                final List<String> permutation = new ArrayList<>();\n-                permutation.add(currentItem);\n-                permutation.addAll(smallerSetPermutation);\n-                return permutation;\n-            }).collect(Collectors.toCollection(LinkedList::new)));\n-        }\n-\n-        return result;\n-    }\n-}\n"}}, {"oid": "9dab77dbfa4d28d907dad9514d18c9de9285d28d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9dab77dbfa4d28d907dad9514d18c9de9285d28d", "message": "move index mapping definition to standalone json files", "committedDate": "2020-06-19T23:39:23Z", "type": "commit"}, {"oid": "f65122aa99dcc54a0f8501d4441fea046504d1bb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f65122aa99dcc54a0f8501d4441fea046504d1bb", "message": "Migrate functions to use mapping json file", "committedDate": "2020-06-19T23:39:24Z", "type": "commit"}, {"oid": "b73ad7024aefdd0afddab9e3dfebac30cc3627bd", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b73ad7024aefdd0afddab9e3dfebac30cc3627bd", "message": "simply code to load mapping file", "committedDate": "2020-06-19T23:39:24Z", "type": "commit"}, {"oid": "b73ad7024aefdd0afddab9e3dfebac30cc3627bd", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/b73ad7024aefdd0afddab9e3dfebac30cc3627bd", "message": "simply code to load mapping file", "committedDate": "2020-06-19T23:39:24Z", "type": "forcePushed"}, {"oid": "792365737ee4d2f590eb1ae87968d3a7427c2eb1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/792365737ee4d2f590eb1ae87968d3a7427c2eb1", "message": "split index mapping definition into separated file for legacy integTest", "committedDate": "2020-06-20T12:48:28Z", "type": "commit"}, {"oid": "3021c7994cfbbf24f430907e7f6b0862ff899eb7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3021c7994cfbbf24f430907e7f6b0862ff899eb7", "message": "Revert changes for legacy/../TestUtils.java\n\nThis reverts commit b73ad7024aefdd0afddab9e3dfebac30cc3627bd.\nThis reverts commit f65122aa99dcc54a0f8501d4441fea046504d1bb.", "committedDate": "2020-06-20T12:50:06Z", "type": "commit"}]}