{"pr_number": 362, "pr_title": "Handle the elasticsearch exceptions in JDBC formatted outputs", "pr_createdAt": "2020-02-03T19:20:03Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362", "timeline": [{"oid": "769dd71f45b0c9b5432a34050c56580a1d9b6b0f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/769dd71f45b0c9b5432a34050c56580a1d9b6b0f", "message": "Caught ES exception", "committedDate": "2020-01-31T05:22:07Z", "type": "commit"}, {"oid": "ad59e1d12514ff97aafdaa427c176feb2b689ba3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ad59e1d12514ff97aafdaa427c176feb2b689ba3", "message": "Merge remote-tracking branch 'origin' into es-exception", "committedDate": "2020-01-31T06:04:31Z", "type": "commit"}, {"oid": "2a711f36ac64f480f84173e7a3743bd5991ae89e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2a711f36ac64f480f84173e7a3743bd5991ae89e", "message": "Update", "committedDate": "2020-02-01T01:46:53Z", "type": "commit"}, {"oid": "e50e042ddfe0a886bdb5e5d2fd4c4e3e375ba63a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e50e042ddfe0a886bdb5e5d2fd4c4e3e375ba63a", "message": "Added details in errMsgs to enrich the behavior; added IT", "committedDate": "2020-02-02T10:33:44Z", "type": "commit"}, {"oid": "90a74457a72cea06b2dba678718d6e55ec40e414", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/90a74457a72cea06b2dba678718d6e55ec40e414", "message": "Updated", "committedDate": "2020-02-03T02:55:50Z", "type": "commit"}, {"oid": "ebaf20211f077af7621b4559c16aa4e4ee509fad", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ebaf20211f077af7621b4559c16aa4e4ee509fad", "message": "Handled cases where ES exceptions are wrapped up; added default fetching details method", "committedDate": "2020-02-03T22:47:10Z", "type": "commit"}, {"oid": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "message": "Updated", "committedDate": "2020-02-03T22:52:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxNjk2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374416962", "bodyText": "Because ElasticsearchErrorMessage is dedicated to ElasticsearchException, I think you can pass in e only and get everything you need inside the constructor.", "author": "dai-chen", "createdAt": "2020-02-04T00:26:44Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -65,7 +66,9 @@ public Protocol(Client client, QueryAction queryAction, Object queryResult, Stri\n     public Protocol(Exception e) {\n         this.formatType = null;\n         this.status = ERROR_STATUS;\n-        this.error = new ErrorMessage(e, ERROR_STATUS);\n+        this.error = e instanceof ElasticsearchException ? new ElasticsearchErrorMessage((ElasticsearchException) e,\n+                ((ElasticsearchException) e).status().getStatus())", "originalCommit": "90a74457a72cea06b2dba678718d6e55ec40e414", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\nindex 04d22b3d..8c1ebe8b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n\n@@ -66,9 +66,7 @@ public class Protocol {\n     public Protocol(Exception e) {\n         this.formatType = null;\n         this.status = ERROR_STATUS;\n-        this.error = e instanceof ElasticsearchException ? new ElasticsearchErrorMessage((ElasticsearchException) e,\n-                ((ElasticsearchException) e).status().getStatus())\n-                : new ErrorMessage(e, ERROR_STATUS);\n+        this.error = ErrorMessageFactory.createErrorMessage(e, status);\n     }\n \n     private ResultSet loadResultSet(Client client, QueryStatement queryStatement, Object queryResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTcyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374419723", "bodyText": "Is this try-catch required? Same for fetchDetails and fetchSearchPhaseExecutionExceptionDetails.", "author": "dai-chen", "createdAt": "2020-02-04T00:37:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+\n+public class ElasticsearchErrorMessage extends ErrorMessage {\n+\n+    private static final Logger LOG = LogManager.getLogger();\n+\n+    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+        super(exception, status);\n+    }\n+\n+    @Override\n+    protected String fetchReason() {\n+        String detailedMsg = \"\";\n+        try {\n+            detailedMsg = \": \" + exception.getMessage();\n+        } catch (Exception e) {\n+            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n+        }", "originalCommit": "90a74457a72cea06b2dba678718d6e55ec40e414", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4MDcyOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r376680728", "bodyText": "Have removed the unnecessary try-catchs, thanks!", "author": "chloe-zh", "createdAt": "2020-02-08T02:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxOTcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\nindex 4bcc22a4..2d5e4d65 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n\n@@ -16,49 +16,40 @@\n package com.amazon.opendistroforelasticsearch.sql.executor.format;\n \n import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.action.search.SearchPhaseExecutionException;\n import org.elasticsearch.action.search.ShardSearchFailure;\n \n-public class ElasticsearchErrorMessage extends ErrorMessage {\n+public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n \n-    private static final Logger LOG = LogManager.getLogger();\n-\n-    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+    public ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n         super(exception, status);\n     }\n \n     @Override\n     protected String fetchReason() {\n-        String detailedMsg = \"\";\n-        try {\n-            detailedMsg = \": \" + exception.getMessage();\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n-        }\n-        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+        return \"Error occurred in Elasticsearch engine\" + exception.getMessage();\n     }\n \n     /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n     @Override\n     protected String fetchDetails() {\n         StringBuilder details = new StringBuilder();\n-        try {\n-            if (exception instanceof SearchPhaseExecutionException) {\n-                String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n-                details.append(detail);\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception details\", e);\n-        } finally {\n-            details.append(\"\\nFor more details, please send request for Json format to see the raw response from \"\n-                    + \"elasticsearch engine.\");\n+        if (exception instanceof SearchPhaseExecutionException) {\n+            String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n+            details.append(detail);\n+        } else {\n+            details.append(defaultDetails((ElasticsearchException) exception));\n         }\n+        details.append(\"\\nFor more details, please send request for Json format to see the raw response from \"\n+                + \"elasticsearch engine.\");\n         return details.toString();\n     }\n \n+    private String defaultDetails(ElasticsearchException exception) {\n+        return exception.getDetailedMessage();\n+    }\n+\n     /**\n      * Could not deliver the exactly same error messages due to the limit of JDBC types.\n      * Currently our cases occurred only SearchPhaseExecutionException instances among all types of ES exceptions\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyMDE2OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374420168", "bodyText": "Do we need else for other cases? ex. call super.fetchDetails() to get default message.", "author": "dai-chen", "createdAt": "2020-02-04T00:38:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+\n+public class ElasticsearchErrorMessage extends ErrorMessage {\n+\n+    private static final Logger LOG = LogManager.getLogger();\n+\n+    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+        super(exception, status);\n+    }\n+\n+    @Override\n+    protected String fetchReason() {\n+        String detailedMsg = \"\";\n+        try {\n+            detailedMsg = \": \" + exception.getMessage();\n+        } catch (Exception e) {\n+            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n+        }\n+        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+    }\n+\n+    /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n+    @Override\n+    protected String fetchDetails() {\n+        StringBuilder details = new StringBuilder();\n+        try {\n+            if (exception instanceof SearchPhaseExecutionException) {\n+                String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n+                details.append(detail);\n+            }", "originalCommit": "90a74457a72cea06b2dba678718d6e55ec40e414", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\nindex 4bcc22a4..2d5e4d65 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n\n@@ -16,49 +16,40 @@\n package com.amazon.opendistroforelasticsearch.sql.executor.format;\n \n import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.action.search.SearchPhaseExecutionException;\n import org.elasticsearch.action.search.ShardSearchFailure;\n \n-public class ElasticsearchErrorMessage extends ErrorMessage {\n+public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n \n-    private static final Logger LOG = LogManager.getLogger();\n-\n-    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+    public ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n         super(exception, status);\n     }\n \n     @Override\n     protected String fetchReason() {\n-        String detailedMsg = \"\";\n-        try {\n-            detailedMsg = \": \" + exception.getMessage();\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n-        }\n-        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+        return \"Error occurred in Elasticsearch engine\" + exception.getMessage();\n     }\n \n     /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n     @Override\n     protected String fetchDetails() {\n         StringBuilder details = new StringBuilder();\n-        try {\n-            if (exception instanceof SearchPhaseExecutionException) {\n-                String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n-                details.append(detail);\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception details\", e);\n-        } finally {\n-            details.append(\"\\nFor more details, please send request for Json format to see the raw response from \"\n-                    + \"elasticsearch engine.\");\n+        if (exception instanceof SearchPhaseExecutionException) {\n+            String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n+            details.append(detail);\n+        } else {\n+            details.append(defaultDetails((ElasticsearchException) exception));\n         }\n+        details.append(\"\\nFor more details, please send request for Json format to see the raw response from \"\n+                + \"elasticsearch engine.\");\n         return details.toString();\n     }\n \n+    private String defaultDetails(ElasticsearchException exception) {\n+        return exception.getDetailedMessage();\n+    }\n+\n     /**\n      * Could not deliver the exactly same error messages due to the limit of JDBC types.\n      * Currently our cases occurred only SearchPhaseExecutionException instances among all types of ES exceptions\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyMTIwNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374421207", "bodyText": "Could you remove this field and pass it to fetchReason and fetchDetails instead?", "author": "dai-chen", "createdAt": "2020-02-04T00:42:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessage.java", "diffHunk": "@@ -20,7 +20,7 @@\n \n public class ErrorMessage {\n \n-    private Exception exception;\n+    protected Exception exception;", "originalCommit": "90a74457a72cea06b2dba678718d6e55ec40e414", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessage.java\nindex c25b0dd1..df950475 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessage.java\n\n@@ -18,7 +18,7 @@ package com.amazon.opendistroforelasticsearch.sql.executor.format;\n import org.elasticsearch.rest.RestStatus;\n import org.json.JSONObject;\n \n-public class ErrorMessage {\n+public class ErrorMessage<E extends Exception> {\n \n     protected Exception exception;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDk0OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374410948", "bodyText": "Is it possible to merge with the existing bank index?", "author": "penghuo", "createdAt": "2020-02-04T00:05:29Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/TestsConstants.java", "diffHunk": "@@ -42,6 +42,7 @@\n     public final static String TEST_INDEX_JOIN_TYPE = TEST_INDEX + \"_join_type\";\n     public final static String TEST_INDEX_BANK = TEST_INDEX + \"_bank\";\n     public final static String TEST_INDEX_BANK_TWO = TEST_INDEX_BANK + \"_two\";\n+    public final static String TEST_INDEX_BANK_WITH_NULL_VALUES = TEST_INDEX_BANK + \"_with_null_values\";", "originalCommit": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDYzMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r385434632", "bodyText": "I wonder if that will cause broken tests that use the bank index if inject null value into it.", "author": "chloe-zh", "createdAt": "2020-02-27T23:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxMDk0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxODA1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374418051", "bodyText": "the assert will not be executed when the errMsgs.length = 0", "author": "penghuo", "createdAt": "2020-02-04T00:30:42Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/esintgtest/QueryIT.java", "diffHunk": "@@ -1773,6 +1776,40 @@ public void caseWhenJdbcResponseTest() {\n         );\n     }\n \n+    @Test\n+    public void functionInCaseFieldShouldThrowESExceptionDueToIllegalScriptInJdbc() {\n+        String response = executeQuery(\n+                \"select case lower(firstname) when 'amber' then '1' else '2' end as cases from \" + TEST_INDEX_ACCOUNT,\n+                \"jdbc\");\n+        queryInJdbcResponseShouldIndicateESException(response, \"SearchPhaseExecutionException\",\n+                \"For more details, please send request for Json format\");\n+    }\n+\n+    @Test\n+    public void functionCallWithIllegalScriptShouldThrowESExceptionInJdbc() {\n+        String response = executeQuery(\"select log(balance + 2) from \" + TEST_INDEX_BANK,\n+                \"jdbc\");\n+        queryInJdbcResponseShouldIndicateESException(response, \"SearchPhaseExecutionException\",\n+                \"please send request for Json format to see the raw response from elasticsearch engine.\");\n+    }\n+\n+    @Ignore(\"Goes in different route, does not call PrettyFormatRestExecutor.execute methods.\" +\n+            \"The performRequest method in RestClient doesn't throw any exceptions for null value fields in script\")\n+    @Test\n+    public void functionArgWithNullValueFieldShouldThrowESExceptionInJdbc() {\n+        String response = executeQuery(\n+                \"select log(balance) from \" + TEST_INDEX_BANK_WITH_NULL_VALUES, \"jdbc\");\n+        queryInJdbcResponseShouldIndicateESException(response, \"SearchPhaseExecutionException\",\n+                \"For more details, please send request for Json format\");\n+    }\n+\n+    private void queryInJdbcResponseShouldIndicateESException(String response, String exceptionType, String... errMsgs) {\n+        Assert.assertThat(response, containsString(exceptionType));\n+        for (String errMsg: errMsgs) {", "originalCommit": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMTYzNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r385431634", "bodyText": "the error messages are the expected messages the unit tests input. The test does not assert the message if no messages are put.", "author": "chloe-zh", "createdAt": "2020-02-27T23:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQxODA1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNzYyMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374427623", "bodyText": "add the scope for constructor or using lombok", "author": "penghuo", "createdAt": "2020-02-04T01:08:02Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+\n+public class ElasticsearchErrorMessage extends ErrorMessage {\n+\n+    private static final Logger LOG = LogManager.getLogger();\n+\n+    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {", "originalCommit": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzNDE2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r385434166", "bodyText": "Did you mean set the access? I've set it to public", "author": "chloe-zh", "createdAt": "2020-02-27T23:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNzYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\nindex 812ed8db..2d5e4d65 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n\n@@ -16,29 +16,19 @@\n package com.amazon.opendistroforelasticsearch.sql.executor.format;\n \n import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.action.search.SearchPhaseExecutionException;\n import org.elasticsearch.action.search.ShardSearchFailure;\n \n-public class ElasticsearchErrorMessage extends ErrorMessage {\n+public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n \n-    private static final Logger LOG = LogManager.getLogger();\n-\n-    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+    public ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n         super(exception, status);\n     }\n \n     @Override\n     protected String fetchReason() {\n-        String detailedMsg = \"\";\n-        try {\n-            detailedMsg = \": \" + exception.getMessage();\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n-        }\n-        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+        return \"Error occurred in Elasticsearch engine\" + exception.getMessage();\n     }\n \n     /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NDE3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374474179", "bodyText": "is it possible to use factory method to construct the ErrorMessage", "author": "penghuo", "createdAt": "2020-02-04T04:56:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -65,7 +66,13 @@ public Protocol(Client client, QueryAction queryAction, Object queryResult, Stri\n     public Protocol(Exception e) {\n         this.formatType = null;\n         this.status = ERROR_STATUS;\n-        this.error = new ErrorMessage(e, ERROR_STATUS);\n+        this.error = e instanceof ElasticsearchException", "originalCommit": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4MDg3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r376680879", "bodyText": "Yes, the factory is done, thanks!", "author": "chloe-zh", "createdAt": "2020-02-08T02:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ3NDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\nindex e11b6fc9..8c1ebe8b 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n\n@@ -66,13 +66,7 @@ public class Protocol {\n     public Protocol(Exception e) {\n         this.formatType = null;\n         this.status = ERROR_STATUS;\n-        this.error = e instanceof ElasticsearchException\n-                ? new ElasticsearchErrorMessage((ElasticsearchException) e,\n-                ((ElasticsearchException) e).status().getStatus())\n-                : unwrapCause(e) instanceof ElasticsearchException\n-                ? new ElasticsearchErrorMessage((ElasticsearchException) unwrapCause(e),\n-                ((ElasticsearchException) unwrapCause(e)).status().getStatus())\n-                : new ErrorMessage(e, ERROR_STATUS);\n+        this.error = ErrorMessageFactory.createErrorMessage(e, status);\n     }\n \n     private ResultSet loadResultSet(Client client, QueryStatement queryStatement, Object queryResult) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4NjE1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374486153", "bodyText": "Not sure how easily ElasticsearchErrorMessage could be extended to handle different error type? Is it the valid use cases?\nIs it possible to create different ErrorMessage class for different exception type? for example,\npublic class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n    public ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n        super(exception, status);\n    }\n    \n    @Override\n    protected String fetchReason() {\n        return exception.getMessage();\n    }\n\n    @Override\n    protected String fetchDetails() {\n        return exception.getDetailedMessage();\n    }\n}", "author": "penghuo", "createdAt": "2020-02-04T05:55:08Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+\n+public class ElasticsearchErrorMessage extends ErrorMessage {\n+\n+    private static final Logger LOG = LogManager.getLogger();\n+\n+    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+        super(exception, status);\n+    }\n+\n+    @Override\n+    protected String fetchReason() {\n+        String detailedMsg = \"\";\n+        try {\n+            detailedMsg = \": \" + exception.getMessage();\n+        } catch (Exception e) {\n+            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n+        }\n+        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+    }\n+\n+    /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n+    @Override\n+    protected String fetchDetails() {\n+        StringBuilder details = new StringBuilder();\n+        if (exception instanceof SearchPhaseExecutionException) {\n+            String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n+            details.append(detail);\n+        } else {", "originalCommit": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\nindex 812ed8db..2d5e4d65 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n\n@@ -16,29 +16,19 @@\n package com.amazon.opendistroforelasticsearch.sql.executor.format;\n \n import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.action.search.SearchPhaseExecutionException;\n import org.elasticsearch.action.search.ShardSearchFailure;\n \n-public class ElasticsearchErrorMessage extends ErrorMessage {\n+public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n \n-    private static final Logger LOG = LogManager.getLogger();\n-\n-    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+    public ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n         super(exception, status);\n     }\n \n     @Override\n     protected String fetchReason() {\n-        String detailedMsg = \"\";\n-        try {\n-            detailedMsg = \": \" + exception.getMessage();\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n-        }\n-        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+        return \"Error occurred in Elasticsearch engine\" + exception.getMessage();\n     }\n \n     /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQyNzQzMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r374427433", "bodyText": "np: adding a space at the end of the error string will make it easier to read the exception message", "author": "davidcui1225", "createdAt": "2020-02-04T01:07:15Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+\n+public class ElasticsearchErrorMessage extends ErrorMessage {\n+\n+    private static final Logger LOG = LogManager.getLogger();\n+\n+    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+        super(exception, status);\n+    }\n+\n+    @Override\n+    protected String fetchReason() {\n+        String detailedMsg = \"\";\n+        try {\n+            detailedMsg = \": \" + exception.getMessage();\n+        } catch (Exception e) {\n+            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n+        }\n+        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+    }\n+\n+    /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n+    @Override\n+    protected String fetchDetails() {\n+        StringBuilder details = new StringBuilder();\n+        if (exception instanceof SearchPhaseExecutionException) {\n+            String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n+            details.append(detail);\n+        } else {\n+            details.append(defaultDetails((ElasticsearchException) exception));\n+        }\n+        details.append(\"\\nFor more details, please send request for Json format to see the raw response from \"\n+                + \"elasticsearch engine.\");\n+        return details.toString();\n+    }\n+\n+    private String defaultDetails(ElasticsearchException exception) {\n+        String detailedMsg = \"\";\n+        try {\n+            detailedMsg = exception.getDetailedMessage();\n+        } catch (Exception e) {\n+            LOG.error(\"Error occurred when fetching ES exception details\", e);", "originalCommit": "6ca2fea95c9f4666a4bb71af36b7a45fc690af4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d47af7353a3d8a196da5ee44862900766996a5e7", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\nindex 812ed8db..2d5e4d65 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n\n@@ -16,29 +16,19 @@\n package com.amazon.opendistroforelasticsearch.sql.executor.format;\n \n import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.elasticsearch.ElasticsearchException;\n import org.elasticsearch.action.search.SearchPhaseExecutionException;\n import org.elasticsearch.action.search.ShardSearchFailure;\n \n-public class ElasticsearchErrorMessage extends ErrorMessage {\n+public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n \n-    private static final Logger LOG = LogManager.getLogger();\n-\n-    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+    public ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n         super(exception, status);\n     }\n \n     @Override\n     protected String fetchReason() {\n-        String detailedMsg = \"\";\n-        try {\n-            detailedMsg = \": \" + exception.getMessage();\n-        } catch (Exception e) {\n-            LOG.error(\"Error occurred when fetching ES exception reasons\", e);\n-        }\n-        return \"Error occurred in Elasticsearch engine\" + detailedMsg;\n+        return \"Error occurred in Elasticsearch engine\" + exception.getMessage();\n     }\n \n     /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n"}}, {"oid": "d47af7353a3d8a196da5ee44862900766996a5e7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d47af7353a3d8a196da5ee44862900766996a5e7", "message": "Added factory method to construct ErrorMessage; extended exception type for ErrorMessage", "committedDate": "2020-02-05T20:55:52Z", "type": "commit"}, {"oid": "a2e0f6a0e0589127413447fd73c4982523daceaf", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a2e0f6a0e0589127413447fd73c4982523daceaf", "message": "Update", "committedDate": "2020-02-05T21:25:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0OTAyOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r377949028", "bodyText": "Any reason to use generic type here? I assume there is no difference in our case.", "author": "dai-chen", "createdAt": "2020-02-11T22:55:17Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessage.java", "diffHunk": "@@ -18,16 +18,16 @@\n import org.elasticsearch.rest.RestStatus;\n import org.json.JSONObject;\n \n-public class ErrorMessage {\n+public class ErrorMessage<E extends Exception> {", "originalCommit": "a2e0f6a0e0589127413447fd73c4982523daceaf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0OTg0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r377949843", "bodyText": "Please add a little JavaDoc on this new class and public method. And also consider adding UT because your factory method has logic in unwrapCause().", "author": "dai-chen", "createdAt": "2020-02-11T22:57:20Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessageFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import org.elasticsearch.ElasticsearchException;\n+\n+public class ErrorMessageFactory {", "originalCommit": "a2e0f6a0e0589127413447fd73c4982523daceaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MzMzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r377953331", "bodyText": "Ok sure, will do.", "author": "chloe-zh", "createdAt": "2020-02-11T23:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0OTg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MzU0MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r377953540", "bodyText": "Thanks!", "author": "dai-chen", "createdAt": "2020-02-11T23:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0OTg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "62e84d516f00d6ddfea5b9b8bad832f8e7dbdec5", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessageFactory.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessageFactory.java\nindex 50f5a07f..c09ed21c 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessageFactory.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ErrorMessageFactory.java\n\n@@ -18,6 +18,15 @@ package com.amazon.opendistroforelasticsearch.sql.executor.format;\n import org.elasticsearch.ElasticsearchException;\n \n public class ErrorMessageFactory {\n+    /**\n+     * Create error message based on the exception type\n+     * Exceptions of ES exception type and exceptions with wrapped ES exception causes\n+     * should create {@link ElasticsearchErrorMessage}\n+     *\n+     * @param e         exception to create error message\n+     * @param status    exception status code\n+     * @return          error message\n+     */\n \n     public static ErrorMessage createErrorMessage(Exception e, int status) {\n         if (e instanceof ElasticsearchException) {\n"}}, {"oid": "62e84d516f00d6ddfea5b9b8bad832f8e7dbdec5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/62e84d516f00d6ddfea5b9b8bad832f8e7dbdec5", "message": "Added UT for ErrorMessageFactory", "committedDate": "2020-02-13T02:02:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MDU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r379050555", "bodyText": "remove this?", "author": "penghuo", "createdAt": "2020-02-13T18:47:43Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java", "diffHunk": "@@ -198,4 +199,21 @@ private JSONArray dataEntry(Row dataRow, Schema schema) {\n         }\n         return entry;\n     }\n+\n+    public static Throwable unwrapCause(Throwable t) {\n+        Throwable result = t;\n+        int layer = 0;\n+        // limit the unwrapping up to 5 layers\n+        while (result != null && layer < 5) {\n+            if (result instanceof ElasticsearchException) {\n+                return result;\n+            }\n+            if (result.getCause() == null) {\n+                return result;\n+            }\n+            result = result.getCause();\n+            layer++;\n+        }\n+        return result;\n+    }", "originalCommit": "62e84d516f00d6ddfea5b9b8bad832f8e7dbdec5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNTMxMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r379135313", "bodyText": "Some exceptions that wrapped ES exceptions as the causes are thrown out. This method is to recognize them.", "author": "chloe-zh", "createdAt": "2020-02-13T21:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MDU1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1a3fe98613ef78ec01e3d9f3e15fefb0898523f", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\nindex 8c1ebe8b..d0fcf4a7 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/Protocol.java\n\n@@ -199,21 +199,4 @@ public class Protocol {\n         }\n         return entry;\n     }\n-\n-    public static Throwable unwrapCause(Throwable t) {\n-        Throwable result = t;\n-        int layer = 0;\n-        // limit the unwrapping up to 5 layers\n-        while (result != null && layer < 5) {\n-            if (result instanceof ElasticsearchException) {\n-                return result;\n-            }\n-            if (result.getCause() == null) {\n-                return result;\n-            }\n-            result = result.getCause();\n-            layer++;\n-        }\n-        return result;\n-    }\n }\n"}}, {"oid": "f1a3fe98613ef78ec01e3d9f3e15fefb0898523f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f1a3fe98613ef78ec01e3d9f3e15fefb0898523f", "message": "update", "committedDate": "2020-02-27T23:35:51Z", "type": "commit"}, {"oid": "2ea0956a18001b1cfa9fbfbd3613014431e2fc7f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2ea0956a18001b1cfa9fbfbd3613014431e2fc7f", "message": "Merge branch 'master' into es-exception", "committedDate": "2020-02-27T23:37:14Z", "type": "commit"}, {"oid": "f8bc91d5ddd50b43ebe29975b8ed791caf4f05a2", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f8bc91d5ddd50b43ebe29975b8ed791caf4f05a2", "message": "update", "committedDate": "2020-02-27T23:41:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MjA0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r385442049", "bodyText": "np: can be reduced to one line? details.append(fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);", "author": "davidcui1225", "createdAt": "2020-02-28T00:08:44Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.executor.format;\n+\n+import com.amazon.opendistroforelasticsearch.sql.utils.StringUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.search.SearchPhaseExecutionException;\n+import org.elasticsearch.action.search.ShardSearchFailure;\n+\n+public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchException> {\n+\n+    ElasticsearchErrorMessage(ElasticsearchException exception, int status) {\n+        super(exception, status);\n+    }\n+\n+    @Override\n+    protected String fetchReason() {\n+        return \"Error occurred in Elasticsearch engine: \" + exception.getMessage();\n+    }\n+\n+    /** Currently Sql-Jdbc plugin only supports string type as reason and details in the error messages */\n+    @Override\n+    protected String fetchDetails() {\n+        StringBuilder details = new StringBuilder();\n+        if (exception instanceof SearchPhaseExecutionException) {\n+            String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n+            details.append(detail);", "originalCommit": "f8bc91d5ddd50b43ebe29975b8ed791caf4f05a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0MzU2NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r386543564", "bodyText": "yes, done now. thanks!", "author": "chloe-zh", "createdAt": "2020-03-02T17:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MjA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f9a6186d348e9b125c33a7bdb03fcc3e8f57a6e", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\nindex 700ab282..e3dbfa46 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/executor/format/ElasticsearchErrorMessage.java\n\n@@ -36,8 +36,7 @@ public class ElasticsearchErrorMessage extends ErrorMessage<ElasticsearchExcepti\n     protected String fetchDetails() {\n         StringBuilder details = new StringBuilder();\n         if (exception instanceof SearchPhaseExecutionException) {\n-            String detail = fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception);\n-            details.append(detail);\n+            details.append(fetchSearchPhaseExecutionExceptionDetails((SearchPhaseExecutionException) exception));\n         } else {\n             details.append(defaultDetails(exception));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTE1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r385825152", "bodyText": "Using ErrorMessageFactory.createErrorMessage?", "author": "penghuo", "createdAt": "2020-02-28T17:26:10Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java", "diffHunk": "@@ -202,7 +202,7 @@ private void sendResponse(final RestChannel channel, final String message, final\n     }\n \n     private void reportError(final RestChannel channel, final Exception e, final RestStatus status) {\n-        sendResponse(channel, new ErrorMessage(e, status.getStatus()).toString(), status);\n+        sendResponse(channel, new ErrorMessage<>(e, status.getStatus()).toString(), status);", "originalCommit": "f8bc91d5ddd50b43ebe29975b8ed791caf4f05a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0MzM5NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r386543394", "bodyText": "Done, thanks!", "author": "chloe-zh", "createdAt": "2020-03-02T17:39:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6f9a6186d348e9b125c33a7bdb03fcc3e8f57a6e", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java\nindex af63c4a2..c5e29b3d 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlAction.java\n\n@@ -202,7 +203,7 @@ public class RestSqlAction extends BaseRestHandler {\n     }\n \n     private void reportError(final RestChannel channel, final Exception e, final RestStatus status) {\n-        sendResponse(channel, new ErrorMessage<>(e, status.getStatus()).toString(), status);\n+        sendResponse(channel, ErrorMessageFactory.createErrorMessage(e, status.getStatus()).toString(), status);\n     }\n \n     private boolean isSQLFeatureEnabled() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTIyNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r385825227", "bodyText": "Using ErrorMessageFactory.createErrorMessage?", "author": "penghuo", "createdAt": "2020-02-28T17:26:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlStatsAction.java", "diffHunk": "@@ -69,7 +69,7 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             LOG.error(\"Failed during Query SQL STATS Action.\", e);\n \n             return channel -> channel.sendResponse(new BytesRestResponse(SERVICE_UNAVAILABLE,\n-                    new ErrorMessage(e, SERVICE_UNAVAILABLE.getStatus()).toString()));\n+                    new ErrorMessage<>(e, SERVICE_UNAVAILABLE.getStatus()).toString()));", "originalCommit": "f8bc91d5ddd50b43ebe29975b8ed791caf4f05a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU0MzUwMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/362#discussion_r386543502", "bodyText": "It's done, thanks!", "author": "chloe-zh", "createdAt": "2020-03-02T17:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgyNTIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "6f9a6186d348e9b125c33a7bdb03fcc3e8f57a6e", "chunk": "diff --git a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlStatsAction.java b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlStatsAction.java\nindex 6dc8af79..9e71ceef 100644\n--- a/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlStatsAction.java\n+++ b/src/main/java/com/amazon/opendistroforelasticsearch/sql/plugin/RestSqlStatsAction.java\n\n@@ -69,7 +70,7 @@ public class RestSqlStatsAction extends BaseRestHandler {\n             LOG.error(\"Failed during Query SQL STATS Action.\", e);\n \n             return channel -> channel.sendResponse(new BytesRestResponse(SERVICE_UNAVAILABLE,\n-                    new ErrorMessage<>(e, SERVICE_UNAVAILABLE.getStatus()).toString()));\n+                    ErrorMessageFactory.createErrorMessage(e, SERVICE_UNAVAILABLE.getStatus()).toString()));\n         }\n     }\n \n"}}, {"oid": "6f9a6186d348e9b125c33a7bdb03fcc3e8f57a6e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6f9a6186d348e9b125c33a7bdb03fcc3e8f57a6e", "message": "addressed comments", "committedDate": "2020-03-02T17:38:14Z", "type": "commit"}, {"oid": "d101cb1fb49f2542904fcc3601cb60635b0049b6", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/d101cb1fb49f2542904fcc3601cb60635b0049b6", "message": "Merge branch 'master' into es-exception", "committedDate": "2020-03-02T17:39:01Z", "type": "commit"}, {"oid": "029b372f1d38a0945abfcb81488f1629e66a44a8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/029b372f1d38a0945abfcb81488f1629e66a44a8", "message": "addressed comments", "committedDate": "2020-03-02T17:42:44Z", "type": "commit"}, {"oid": "cdfa17471686524b671f31498e392bd0589f1aec", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cdfa17471686524b671f31498e392bd0589f1aec", "message": "update", "committedDate": "2020-03-02T17:46:53Z", "type": "commit"}, {"oid": "1282eb8cdf35af82e742f4e27b02bd60a27651bc", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1282eb8cdf35af82e742f4e27b02bd60a27651bc", "message": "Merge remote-tracking branch 'origin' into es-exception", "committedDate": "2020-03-16T03:40:52Z", "type": "commit"}, {"oid": "ad206fb9b1f7a3d400c00e4d82de7d95c98ba4db", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ad206fb9b1f7a3d400c00e4d82de7d95c98ba4db", "message": "update", "committedDate": "2020-03-17T19:44:20Z", "type": "commit"}]}