{"pr_number": 3302, "pr_title": "Feature/1153/optimize user entries", "pr_createdAt": "2020-03-05T18:48:53Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3302", "timeline": [{"oid": "bd9f255a477e6682bde8316a456c17b2c97118c8", "url": "https://github.com/dockstore/dockstore/commit/bd9f255a477e6682bde8316a456c17b2c97118c8", "message": "prototype for optimizing user entries endpoint using named query", "committedDate": "2020-03-01T04:04:03Z", "type": "commit"}, {"oid": "c372511061d32831d61f2e725fcf64831259b444", "url": "https://github.com/dockstore/dockstore/commit/c372511061d32831d61f2e725fcf64831259b444", "message": "manually construct entrypath by retrieving path elements in JPQL query", "committedDate": "2020-03-03T05:18:55Z", "type": "commit"}, {"oid": "2f36f24d6f6515ced8cc42a185476132a34ee10b", "url": "https://github.com/dockstore/dockstore/commit/2f36f24d6f6515ced8cc42a185476132a34ee10b", "message": "Clean up, created EntryLite class to preserve types when querying from database", "committedDate": "2020-03-05T02:45:01Z", "type": "commit"}, {"oid": "832a0689acc70f61390b93aa23ece81ab06c360e", "url": "https://github.com/dockstore/dockstore/commit/832a0689acc70f61390b93aa23ece81ab06c360e", "message": "more clean up, removed temp endpoint", "committedDate": "2020-03-05T18:37:27Z", "type": "commit"}, {"oid": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "url": "https://github.com/dockstore/dockstore/commit/d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "message": "remove weird spaces", "committedDate": "2020-03-05T18:41:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5Mjk3MA==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388492970", "bodyText": "whoops, will fix", "author": "Ldcabansay", "createdAt": "2020-03-05T18:53:10Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java\nindex fa937e25a..0af54dc34 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java\n\n@@ -80,7 +80,9 @@ import org.hibernate.annotations.UpdateTimestamp;\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\")\n+})\n @SuppressWarnings(\"checkstyle:magicnumber\")\n public class User implements Principal, Comparable<User>, Serializable {\n     @Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388508879", "bodyText": "Optional nitpick -- would call s instead of c.", "author": "coverbeck", "createdAt": "2020-03-05T19:20:22Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java", "diffHunk": "@@ -25,7 +26,13 @@\n @ApiModel(value = \"Service\", description = \"This describes one service in the dockstore as a special degenerate case of a workflow\", parent = Workflow.class)\n @Entity\n @Table(name = \"service\")\n-@NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\")\n+@NamedQueries({\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service c LEFT JOIN c.workflowVersions v \"", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNzk3Nw==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388527977", "bodyText": "the c pattern is in all named queries for tools and workflows too so I just carried it over, not sure why its c though? Container?\nSeems like we don't have things set up test named queries directly, the tests for postgres can only query in SQL. Denis suggested a an integration test and the existing test already calls the endpoint and checks the path generated. I could make a test using the generated sql, but that seemed a bit indirect. Open to other ideas.", "author": "Ldcabansay", "createdAt": "2020-03-05T19:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzNDI0NA==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388534244", "bodyText": "The short name is a stand-in for the longer name, so I like it to reflect the table (or I guess in this case entity) name. I did say optional, and I don't feel too strongly about it.\nIf the existing integration tests validate the endpoint, I think that's fine; just wanted to make sure.", "author": "coverbeck", "createdAt": "2020-03-05T20:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUzOTI2MA==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388539260", "bodyText": "The c is back from when we called tools containers, we should try to replace it when we can.", "author": "agduncan94", "createdAt": "2020-03-05T20:17:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0MjE0Mg==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388542142", "bodyText": "Yup", "author": "denis-yuen", "createdAt": "2020-03-05T20:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java\nindex 55ca3e0a6..ec3f492db 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Service.java\n\n@@ -28,10 +28,10 @@ import io.swagger.annotations.ApiModel;\n @Table(name = \"service\")\n @NamedQueries({\n         @NamedQuery(name = \"io.dockstore.webservice.core.Service.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from Service c where c.isPublished = true\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n-                + \"FROM Service c LEFT JOIN c.workflowVersions v \"\n-                + \"WHERE c.id in (SELECT ue.id FROM User u INNER JOIN u.entries ue where u.id = :userId) \"\n-                + \"GROUP BY c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Service.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteService(s.sourceControl, s.organization, s.repository, s.workflowName, s.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Service s LEFT JOIN s.workflowVersions v \"\n+                + \"WHERE s.id in (SELECT ue.id FROM User u INNER JOIN u.entries ue where u.id = :userId) \"\n+                + \"GROUP BY s.sourceControl, s.organization, s.repository, s.workflowName, s.dbUpdateDate\")\n })\n public class Service extends Workflow {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwODk5Nw==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388508997", "bodyText": "t instead of c", "author": "coverbeck", "createdAt": "2020-03-05T19:20:30Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java", "diffHunk": "@@ -80,7 +80,14 @@\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname AND c.isPublished = true\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\") })\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteTool(c.registry, c.namespace, c.name, c.toolname, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Tool c LEFT JOIN c.workflowVersions v \"", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java\nindex c6ac522a4..3dc9c7bb0 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/Tool.java\n\n@@ -81,10 +81,10 @@ import org.hibernate.annotations.Check;\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPath\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname = :toolname AND c.isPublished = true\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.Tool.findPublishedByToolPathNullToolName\", query = \"SELECT c FROM Tool c WHERE c.registry = :registry AND c.namespace = :namespace AND c.name = :name AND c.toolname IS NULL AND c.isPublished = true\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteTool(c.registry, c.namespace, c.name, c.toolname, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n-                + \"FROM Tool c LEFT JOIN c.workflowVersions v \"\n-                + \"WHERE c.id in (SELECT ue.id FROM User u INNER JOIN u.entries ue where u.id = :userId) \"\n-                + \"GROUP BY c.registry, c.namespace, c.name, c.toolname, c.dbUpdateDate\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.Tool.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteTool(t.registry, t.namespace, t.name, t.toolname, t.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Tool t LEFT JOIN t.workflowVersions v \"\n+                + \"WHERE t.id in (SELECT ue.id FROM User u INNER JOIN u.entries ue where u.id = :userId) \"\n+                + \"GROUP BY t.registry, t.namespace, t.name, t.toolname, t.dbUpdateDate\")\n })\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDA3OQ==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388510079", "bodyText": "Has this changed, other than combining two lines into one? In any case, should have each NamedQuery on its own line.", "author": "coverbeck", "createdAt": "2020-03-05T19:22:16Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -80,8 +80,7 @@\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTAyMA==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388529020", "bodyText": "its a leftover from when I tried ways that would grab all entry types through in one query", "author": "Ldcabansay", "createdAt": "2020-03-05T19:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMDA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java\nindex fa937e25a..0af54dc34 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java\n\n@@ -80,7 +80,9 @@ import org.hibernate.annotations.UpdateTimestamp;\n @NamedQueries({ @NamedQuery(name = \"io.dockstore.webservice.core.User.findAll\", query = \"SELECT t FROM User t\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"), @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\")\n+})\n @SuppressWarnings(\"checkstyle:magicnumber\")\n public class User implements Principal, Comparable<User>, Serializable {\n     @Id\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMTI3NQ==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388511275", "bodyText": "It looks like the only place you call this, you're passing getEntryPath() as a parameter. Since getEntryPath() is already a class method, I would get rid of the parameter and just have makePrettyPath use getEntryPath", "author": "coverbeck", "createdAt": "2020-03-05T19:24:26Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package io.dockstore.webservice.core.database;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.dockstore.common.EntryType;\n+import io.dockstore.common.SourceControl;\n+import io.dockstore.webservice.core.BioWorkflow;\n+import io.dockstore.webservice.core.Service;\n+import io.dockstore.webservice.core.Tool;\n+\n+/**\n+ * This class describes lightweight entry objects that are used for making type-safe named queries\n+ * @author ldcabansay\n+ * @since 1.9.0\n+ */\n+public abstract class EntryLite {\n+    private final Date lastUpdated;\n+\n+    EntryLite(Date entryUpdated, Date versionUpdated) {\n+        //choose the greater update time between overall entry and most recently updated version\n+        this.lastUpdated = versionUpdated == null ? entryUpdated : (entryUpdated.getTime() > versionUpdated.getTime() ? entryUpdated : versionUpdated);\n+    }\n+\n+    public Date getLastUpdated() {\n+        return lastUpdated;\n+    }\n+\n+    public abstract String getEntryPath();\n+\n+    public abstract EntryType getEntryType();\n+\n+    public String makePrettyPath(String path) {", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java\nindex 6fb280e01..e33aacf58 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/database/EntryLite.java\n\n@@ -31,8 +31,8 @@ public abstract class EntryLite {\n \n     public abstract EntryType getEntryType();\n \n-    public String makePrettyPath(String path) {\n-        List<String> pathElements = Arrays.asList(path.split(\"/\"));\n+    public String getPrettyPath() {\n+        List<String> pathElements = Arrays.asList(getEntryPath().split(\"/\"));\n         return String.join(\"/\", pathElements.subList(2, pathElements.size()));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMzg4NA==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388513884", "bodyText": "It seems so fast right now that it doesn't matter, but ideally you would pass count as a parameter, at least when the filter is null.", "author": "coverbeck", "createdAt": "2020-03-05T19:29:02Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -660,34 +665,24 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n     public List<EntryUpdateTime> getUserEntries(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n                                                 @Parameter(name = \"count\", description = \"Maximum number of entries to return\", in = ParameterIn.QUERY) @QueryParam(\"count\") Integer count,\n                                                 @Parameter(name = \"filter\", description = \"Filter paths with matching text\", in = ParameterIn.QUERY) @QueryParam(\"filter\") String filter) {\n-        final List<EntryUpdateTime> entryUpdateTimes = new ArrayList<>();\n-        final User fetchedUser = this.userDAO.findById(authUser.getId());\n-\n-        Set<Entry> entries = fetchedUser.getEntries();\n-        entries.forEach(entry -> {\n-            Timestamp timestamp = entry.getDbUpdateDate();\n-            Set<Version> versions = entry.getWorkflowVersions();\n-            Optional<Version> mostRecentTag = versions.stream().max(Comparator.comparing(Version::getDbUpdateDate));\n-            if (mostRecentTag.isPresent() && timestamp.before(mostRecentTag.get().getDbUpdateDate())) {\n-                timestamp = mostRecentTag.get().getDbUpdateDate();\n-            }\n-            List<String> pathElements = Arrays.asList(entry.getEntryPath().split(\"/\"));\n-            String prettyPath = String.join(\"/\", pathElements.subList(2, pathElements.size()));\n-            entryUpdateTimes.add(new EntryUpdateTime(entry.getEntryPath(), prettyPath, entry.getEntryType(), timestamp));\n-        });\n-\n-        // Sort all entryUpdateTimes by timestamp\n-        List<EntryUpdateTime> sortedEntries = entryUpdateTimes\n-                .stream()\n+        //get entries with only minimal columns from database\n+        final List<EntryLite> entriesLite = new ArrayList<>();\n+        final long userId = authUser.getId();\n+        entriesLite.addAll(toolDAO.findEntryVersions(userId));", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex f394d5c4e..a796a37e4 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -672,16 +672,13 @@ public class UserResource implements AuthenticatedResourceInterface {\n         entriesLite.addAll(bioWorkflowDAO.findEntryVersions(userId));\n         entriesLite.addAll(serviceDAO.findEntryVersions(userId));\n \n-        //cleanup fields for UI, filter, and sort\n+        //cleanup fields for UI: filter(if applicable), sort, and limit by count(if applicable)\n         List<EntryUpdateTime> filteredEntries = entriesLite\n-                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.makePrettyPath(e.getEntryPath()), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n+                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.getPrettyPath(), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n                 .filter((EntryUpdateTime entryUpdateTime) -> filter == null || filter.isBlank() || entryUpdateTime.getPath().toLowerCase().contains(filter.toLowerCase()))\n                 .sorted(Comparator.comparing(EntryUpdateTime::getLastUpdateDate, Comparator.nullsLast(Comparator.reverseOrder())))\n+                .limit(count != null ? count : Integer.MAX_VALUE)\n                 .collect(Collectors.toList());\n-\n-        if (count != null) {\n-            return filteredEntries.subList(0, Math.min(count, filteredEntries.size()));\n-        }\n         return filteredEntries;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNzA5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388517095", "bodyText": "It was like this, but I think you can just limit on the stream:\n...\n.limit(count != null ? count : Integer.MAX_VALUE)\n.collect(...\n\nOptionally have a default value for count, which I think makes sense, and then you don't even have to do the null check.", "author": "coverbeck", "createdAt": "2020-03-05T19:35:28Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -660,34 +665,24 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n     public List<EntryUpdateTime> getUserEntries(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n                                                 @Parameter(name = \"count\", description = \"Maximum number of entries to return\", in = ParameterIn.QUERY) @QueryParam(\"count\") Integer count,\n                                                 @Parameter(name = \"filter\", description = \"Filter paths with matching text\", in = ParameterIn.QUERY) @QueryParam(\"filter\") String filter) {\n-        final List<EntryUpdateTime> entryUpdateTimes = new ArrayList<>();\n-        final User fetchedUser = this.userDAO.findById(authUser.getId());\n-\n-        Set<Entry> entries = fetchedUser.getEntries();\n-        entries.forEach(entry -> {\n-            Timestamp timestamp = entry.getDbUpdateDate();\n-            Set<Version> versions = entry.getWorkflowVersions();\n-            Optional<Version> mostRecentTag = versions.stream().max(Comparator.comparing(Version::getDbUpdateDate));\n-            if (mostRecentTag.isPresent() && timestamp.before(mostRecentTag.get().getDbUpdateDate())) {\n-                timestamp = mostRecentTag.get().getDbUpdateDate();\n-            }\n-            List<String> pathElements = Arrays.asList(entry.getEntryPath().split(\"/\"));\n-            String prettyPath = String.join(\"/\", pathElements.subList(2, pathElements.size()));\n-            entryUpdateTimes.add(new EntryUpdateTime(entry.getEntryPath(), prettyPath, entry.getEntryType(), timestamp));\n-        });\n-\n-        // Sort all entryUpdateTimes by timestamp\n-        List<EntryUpdateTime> sortedEntries = entryUpdateTimes\n-                .stream()\n+        //get entries with only minimal columns from database\n+        final List<EntryLite> entriesLite = new ArrayList<>();\n+        final long userId = authUser.getId();\n+        entriesLite.addAll(toolDAO.findEntryVersions(userId));\n+        entriesLite.addAll(bioWorkflowDAO.findEntryVersions(userId));\n+        entriesLite.addAll(serviceDAO.findEntryVersions(userId));\n+\n+        //cleanup fields for UI, filter, and sort\n+        List<EntryUpdateTime> filteredEntries = entriesLite\n+                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.makePrettyPath(e.getEntryPath()), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n                 .filter((EntryUpdateTime entryUpdateTime) -> filter == null || filter.isBlank() || entryUpdateTime.getPath().toLowerCase().contains(filter.toLowerCase()))\n                 .sorted(Comparator.comparing(EntryUpdateTime::getLastUpdateDate, Comparator.nullsLast(Comparator.reverseOrder())))\n                 .collect(Collectors.toList());\n \n-        // Grab subset if necessary\n         if (count != null) {\n-            return sortedEntries.subList(0, Math.min(count, sortedEntries.size()));\n+            return filteredEntries.subList(0, Math.min(count, filteredEntries.size()));", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex f394d5c4e..a796a37e4 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -672,16 +672,13 @@ public class UserResource implements AuthenticatedResourceInterface {\n         entriesLite.addAll(bioWorkflowDAO.findEntryVersions(userId));\n         entriesLite.addAll(serviceDAO.findEntryVersions(userId));\n \n-        //cleanup fields for UI, filter, and sort\n+        //cleanup fields for UI: filter(if applicable), sort, and limit by count(if applicable)\n         List<EntryUpdateTime> filteredEntries = entriesLite\n-                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.makePrettyPath(e.getEntryPath()), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n+                .stream().map(e -> new EntryUpdateTime(e.getEntryPath(), e.getPrettyPath(), e.getEntryType(), new Timestamp(e.getLastUpdated().getTime())))\n                 .filter((EntryUpdateTime entryUpdateTime) -> filter == null || filter.isBlank() || entryUpdateTime.getPath().toLowerCase().contains(filter.toLowerCase()))\n                 .sorted(Comparator.comparing(EntryUpdateTime::getLastUpdateDate, Comparator.nullsLast(Comparator.reverseOrder())))\n+                .limit(count != null ? count : Integer.MAX_VALUE)\n                 .collect(Collectors.toList());\n-\n-        if (count != null) {\n-            return filteredEntries.subList(0, Math.min(count, filteredEntries.size()));\n-        }\n         return filteredEntries;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxODE4Nw==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388518187", "bodyText": "w instead of c", "author": "coverbeck", "createdAt": "2020-03-05T19:37:30Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java", "diffHunk": "@@ -37,7 +37,11 @@\n @Table(name = \"workflow\")\n @NamedQueries({\n         @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from BioWorkflow c where c.isPublished = true\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\"),\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteWorkflow(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Workflow c LEFT JOIN c.workflowVersions v \"", "originalCommit": "d31f6e2f83d122eb309aa1b1853a70a6f76eae7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java\nindex 6c73b07cd..0a8c921e3 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/core/BioWorkflow.java\n\n@@ -38,10 +38,10 @@ import io.swagger.annotations.ApiModelProperty;\n @NamedQueries({\n         @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPaths\", query = \"SELECT new io.dockstore.webservice.core.database.WorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName) from BioWorkflow c where c.isPublished = true\"),\n         @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.findAllPublishedPathsOrderByDbupdatedate\", query = \"SELECT new io.dockstore.webservice.core.database.RSSWorkflowPath(c.sourceControl, c.organization, c.repository, c.workflowName, c.lastUpdated, c.description) from BioWorkflow c where c.isPublished = true and c.dbUpdateDate is not null ORDER BY c.dbUpdateDate desc\"),\n-        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteWorkflow(c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n-                + \"FROM Workflow c LEFT JOIN c.workflowVersions v \"\n-                + \"WHERE c.id in (SELECT ue.id FROM User u INNER JOIN u.entries ue where u.id = :userId) \"\n-                + \"GROUP BY c.sourceControl, c.organization, c.repository, c.workflowName, c.dbUpdateDate\")\n+        @NamedQuery(name = \"io.dockstore.webservice.core.BioWorkflow.getEntryLiteByUserId\", query = \"SELECT new io.dockstore.webservice.core.database.EntryLite$EntryLiteWorkflow(w.sourceControl, w.organization, w.repository, w.workflowName, w.dbUpdateDate as entryUpdated, MAX(v.dbUpdateDate) as versionUpdated) \"\n+                + \"FROM Workflow w LEFT JOIN w.workflowVersions v \"\n+                + \"WHERE w.id in (SELECT ue.id FROM User u INNER JOIN u.entries ue where u.id = :userId) \"\n+                + \"GROUP BY w.sourceControl, w.organization, w.repository, w.workflowName, w.dbUpdateDate\")\n })\n @SuppressWarnings(\"checkstyle:magicnumber\")\n public class BioWorkflow extends Workflow {\n"}}, {"oid": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "url": "https://github.com/dockstore/dockstore/commit/3240fb7d6f73c6ca78a33e8bad7f714de585a285", "message": "limit to count in stream, other requested fixes and changes", "committedDate": "2020-03-05T22:11:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MTgzMQ==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r388641831", "bodyText": "Is the only difference here that you put the }) on a new line? I think so, but want to make sure.", "author": "coverbeck", "createdAt": "2020-03-06T00:24:53Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/core/User.java", "diffHunk": "@@ -81,7 +81,8 @@\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByUsername\", query = \"SELECT t FROM User t WHERE t.username = :username\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGoogleEmail\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'google.com' AND p.email = :email)\"),\n     @NamedQuery(name = \"io.dockstore.webservice.core.User.countPublishedEntries\", query = \"SELECT count(e) FROM User u INNER JOIN u.entries e where e.isPublished=true and u.username = :username\"),\n-    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\") })\n+    @NamedQuery(name = \"io.dockstore.webservice.core.User.findByGitHubUsername\", query = \"SELECT t FROM User t JOIN t.userProfiles p where( KEY(p) = 'github.com' AND p.username = :username)\")", "originalCommit": "3240fb7d6f73c6ca78a33e8bad7f714de585a285", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMDQ2OA==", "url": "https://github.com/dockstore/dockstore/pull/3302#discussion_r389030468", "bodyText": "yes", "author": "Ldcabansay", "createdAt": "2020-03-06T17:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0MTgzMQ=="}], "type": "inlineReview", "revised_code": null}]}