{"pr_number": 3276, "pr_title": "added logging statements for tool and workflow refresh endpoints", "pr_createdAt": "2020-02-27T14:59:13Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3276", "timeline": [{"oid": "0d76771b510d8e416042a921b705d452d693c58c", "url": "https://github.com/dockstore/dockstore/commit/0d76771b510d8e416042a921b705d452d693c58c", "message": "added logging statements for tool and workflow refresh endpoints", "committedDate": "2020-02-27T14:51:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mjc2NA==", "url": "https://github.com/dockstore/dockstore/pull/3276#discussion_r385252764", "bodyText": "I don't have the whole context for this, and I see the ticket says to only log the type, but since you're in here anyways why not log the actual tool as well?\nJust a thought, which may not be applicable.", "author": "coverbeck", "createdAt": "2020-02-27T17:17:10Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -276,6 +280,17 @@ public Tool refreshTool(final long toolId, final Long userId, final UserDAO user\n         return updatedTool;\n     }\n \n+    /**\n+     * Logs a refresh statement with the tool's descriptor language(s)\n+     * @param tool                tool that is being refreshed\n+     */\n+    private void logToolRefresh(final Tool tool) {\n+        List<String> descriptorTypes = tool.getDescriptorType();\n+        for (String descriptorType : descriptorTypes) {\n+            LOG.info(\"Refreshing \" + descriptorType + \" tool\");", "originalCommit": "0d76771b510d8e416042a921b705d452d693c58c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyOTE2NQ==", "url": "https://github.com/dockstore/dockstore/pull/3276#discussion_r385329165", "bodyText": "I don't see any harm in logging the tool name as well. However, if the intention is to create metrics that can be displayed on Grafana based on the tool names (ex: which tools are refreshed the most), it will be difficult unless we know exactly which tools we want to monitor.", "author": "kathy-t", "createdAt": "2020-02-27T19:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mjc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\nindex 343f55028..fac8f325f 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\n\n@@ -281,13 +281,17 @@ public abstract class AbstractImageRegistry {\n     }\n \n     /**\n-     * Logs a refresh statement with the tool's descriptor language(s)\n+     * Logs a refresh statement with the tool's descriptor language(s).\n+     * These logs will be monitored by CloudWatch and displayed on Grafana.\n+     * @param dashboardPrefix     dashboard string that will prefix the log\n      * @param tool                tool that is being refreshed\n      */\n-    private void logToolRefresh(final Tool tool) {\n+    private void logToolRefresh(final String dashboardPrefix, final Tool tool) {\n         List<String> descriptorTypes = tool.getDescriptorType();\n+        String name = tool.getToolPath();\n+\n         for (String descriptorType : descriptorTypes) {\n-            LOG.info(\"Refreshing \" + descriptorType + \" tool\");\n+            LOG.info(String.format(\"%s: Refreshing %s tool named %s\", dashboardPrefix, descriptorType, name));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5ODc5MA==", "url": "https://github.com/dockstore/dockstore/pull/3276#discussion_r385298790", "bodyText": "Could use an additional comment on why it's logging it.", "author": "garyluu", "createdAt": "2020-02-27T18:41:51Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -363,6 +365,16 @@ private void refreshHelper(final SourceCodeRepoInterface sourceCodeRepoInterface\n         }\n     }\n \n+    /**\n+     * Logs a refresh statement with the workflow's descriptor language if workflow is a FULL workflow", "originalCommit": "0d76771b510d8e416042a921b705d452d693c58c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java\nindex 014f028b9..a7e608d9e 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java\n\n@@ -366,12 +368,13 @@ public class WorkflowResource extends AbstractWorkflowResource<Workflow>\n     }\n \n     /**\n-     * Logs a refresh statement with the workflow's descriptor language if workflow is a FULL workflow\n+     * Logs a refresh statement with the workflow's descriptor language if workflow is a FULL workflow.\n+     * These logs will be monitored by CloudWatch and displayed on Grafana.\n      * @param workflow                workflow that is being refreshed\n      */\n     private void logFullWorkflowRefresh(final Workflow workflow) {\n         if (workflow.getMode() == WorkflowMode.FULL) {\n-            LOG.info(\"Refreshing \" + workflow.getDescriptorType() + \" workflow\");\n+            LOG.info(String.format(\"%s: Refreshing %s workflow named %s\", dashboardPrefix, workflow.getDescriptorType(), workflow.getWorkflowPath()));\n         }\n     }\n \n"}}, {"oid": "f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "url": "https://github.com/dockstore/dockstore/commit/f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "message": "created a configurable string to use as a prefix. added tool/workflow name in logging statement.", "committedDate": "2020-02-27T20:37:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3ODg3NA==", "url": "https://github.com/dockstore/dockstore/pull/3276#discussion_r385378874", "bodyText": "workflow.getEntryPath() here, tool.getEntryPath() up there seems simpler.", "author": "garyluu", "createdAt": "2020-02-27T21:22:51Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java", "diffHunk": "@@ -363,6 +367,17 @@ private void refreshHelper(final SourceCodeRepoInterface sourceCodeRepoInterface\n         }\n     }\n \n+    /**\n+     * Logs a refresh statement with the workflow's descriptor language if workflow is a FULL workflow.\n+     * These logs will be monitored by CloudWatch and displayed on Grafana.\n+     * @param workflow                workflow that is being refreshed\n+     */\n+    private void logFullWorkflowRefresh(final Workflow workflow) {\n+        if (workflow.getMode() == WorkflowMode.FULL) {\n+            LOG.info(String.format(\"%s: Refreshing %s workflow named %s\", dashboardPrefix, workflow.getDescriptorType(), workflow.getWorkflowPath()));", "originalCommit": "f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "072eafcf5bb3eb1e5de9773dda6116af06657e83", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java\nindex a7e608d9e..db0a65193 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/WorkflowResource.java\n\n@@ -374,7 +374,7 @@ public class WorkflowResource extends AbstractWorkflowResource<Workflow>\n      */\n     private void logFullWorkflowRefresh(final Workflow workflow) {\n         if (workflow.getMode() == WorkflowMode.FULL) {\n-            LOG.info(String.format(\"%s: Refreshing %s workflow named %s\", dashboardPrefix, workflow.getDescriptorType(), workflow.getWorkflowPath()));\n+            LOG.info(String.format(\"%s: Refreshing %s workflow named %s\", dashboardPrefix, workflow.getDescriptorType(), workflow.getEntryPath()));\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcwMTM1NA==", "url": "https://github.com/dockstore/dockstore/pull/3276#discussion_r385701354", "bodyText": "Missing new parameter in function JavaDoc.", "author": "agduncan94", "createdAt": "2020-02-28T13:43:10Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java", "diffHunk": "@@ -145,7 +145,7 @@\n     @SuppressWarnings(\"checkstyle:parameternumber\")\n     public List<Tool> refreshTools(final long userId, final UserDAO userDAO, final ToolDAO toolDAO, final TagDAO tagDAO,\n             final FileDAO fileDAO, final FileFormatDAO fileFormatDAO, final HttpClient client, final Token githubToken, final Token bitbucketToken, final Token gitlabToken,\n-            String organization, final EventDAO eventDAO) {\n+            String organization, final EventDAO eventDAO, final String dashboardPrefix) {\n         // Get all the namespaces for the given registry", "originalCommit": "f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "072eafcf5bb3eb1e5de9773dda6116af06657e83", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\nindex fac8f325f..27fd43fbe 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/helpers/AbstractImageRegistry.java\n\n@@ -130,16 +130,17 @@ public abstract class AbstractImageRegistry {\n     /**\n      * Updates/Adds/Deletes tools and their associated tags\n      *\n-     * @param userId         The ID of the user\n-     * @param userDAO        ...\n-     * @param toolDAO        ...\n-     * @param tagDAO         ...\n-     * @param fileDAO        ...\n-     * @param client         An HttpClient used by source code repositories\n-     * @param githubToken    The user's GitHub token\n-     * @param bitbucketToken The user's Bitbucket token\n-     * @param gitlabToken    The user's GitLab token\n-     * @param organization   If not null, only refresh tools belonging to the specific organization. Otherwise, refresh all.\n+     * @param userId            The ID of the user\n+     * @param userDAO           ...\n+     * @param toolDAO           ...\n+     * @param tagDAO            ...\n+     * @param fileDAO           ...\n+     * @param client            An HttpClient used by source code repositories\n+     * @param githubToken       The user's GitHub token\n+     * @param bitbucketToken    The user's Bitbucket token\n+     * @param gitlabToken       The user's GitLab token\n+     * @param organization      If not null, only refresh tools belonging to the specific organization. Otherwise, refresh all.\n+     * @param dashboardPrefix   A string that prefixes logging statements to indicate that it will be used for Cloudwatch & Grafana.\n      * @return The list of tools that have been updated\n      */\n     @SuppressWarnings(\"checkstyle:parameternumber\")\n"}}, {"oid": "072eafcf5bb3eb1e5de9773dda6116af06657e83", "url": "https://github.com/dockstore/dockstore/commit/072eafcf5bb3eb1e5de9773dda6116af06657e83", "message": "used workflow.getEntryPath() and tool.getEntryPath(). added dashboardPrefix parameter to refreshTools JavaDoc.", "committedDate": "2020-02-28T14:06:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NjQzNQ==", "url": "https://github.com/dockstore/dockstore/pull/3276#discussion_r385366435", "bodyText": "I think the name is redundant, but it doesn't hurt.", "author": "coverbeck", "createdAt": "2020-02-27T20:56:20Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/DockstoreWebserviceConfiguration.java", "diffHunk": "@@ -481,6 +483,15 @@ public void setExternalGoogleClientIdPrefixes(List<String> externalGoogleClientI\n         this.externalGoogleClientIdPrefixes = externalGoogleClientIdPrefixes;\n     }\n \n+    @JsonProperty(\"dashboard\")", "originalCommit": "f9cdbd35e4dd0e621aefd85dea42366a5acdbd97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}