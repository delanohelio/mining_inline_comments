{"pr_number": 3120, "pr_title": "Feature/3045/starred organization events", "pr_createdAt": "2020-01-09T16:33:17Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3120", "timeline": [{"oid": "1ae26d39549be9fdb64efe323eaa2d630de2b356", "url": "https://github.com/dockstore/dockstore/commit/1ae26d39549be9fdb64efe323eaa2d630de2b356", "message": "Update swagger/openapi", "committedDate": "2020-01-09T20:27:28Z", "type": "forcePushed"}, {"oid": "5f10c8bb97dd047c4ae1c30d52cc5b723de79a75", "url": "https://github.com/dockstore/dockstore/commit/5f10c8bb97dd047c4ae1c30d52cc5b723de79a75", "message": "Update swagger/openapi", "committedDate": "2020-01-09T20:40:34Z", "type": "forcePushed"}, {"oid": "4c5a095ab466310a8081fa19c8b0a1302dccf38b", "url": "https://github.com/dockstore/dockstore/commit/4c5a095ab466310a8081fa19c8b0a1302dccf38b", "message": "Get events for organizations starred", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"oid": "d831642e9d9b20609438b3e905e515ea35070a48", "url": "https://github.com/dockstore/dockstore/commit/d831642e9d9b20609438b3e905e515ea35070a48", "message": "Fix for hidden user auth", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"oid": "476dcfb652f78dec440d60e70a0f6b09f420d8e6", "url": "https://github.com/dockstore/dockstore/commit/476dcfb652f78dec440d60e70a0f6b09f420d8e6", "message": "Initial test", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"oid": "a1c531ff0f981b08c077ff9424fb5f7a0a6a4bb4", "url": "https://github.com/dockstore/dockstore/commit/a1c531ff0f981b08c077ff9424fb5f7a0a6a4bb4", "message": "Refactor test methods", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"oid": "5c86396d7fda47f7293f4d6d7715118bf47e3ede", "url": "https://github.com/dockstore/dockstore/commit/5c86396d7fda47f7293f4d6d7715118bf47e3ede", "message": "Enhance test", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"oid": "af621a4e1103d1f9873544cdc8a6e9fe246ca18f", "url": "https://github.com/dockstore/dockstore/commit/af621a4e1103d1f9873544cdc8a6e9fe246ca18f", "message": "Fix for recent events not being recent", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"oid": "72b280340aa58f359da9b13730bbedd7cb91f916", "url": "https://github.com/dockstore/dockstore/commit/72b280340aa58f359da9b13730bbedd7cb91f916", "message": "Add ALL_STARRED", "committedDate": "2020-01-09T21:24:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NTY1MA==", "url": "https://github.com/dockstore/dockstore/pull/3120#discussion_r364975650", "bodyText": "Why did you change this from a List to a Set? Won't you lose the queries' sort orders?", "author": "coverbeck", "createdAt": "2020-01-09T21:47:03Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java", "diffHunk": "@@ -68,20 +72,32 @@ public EventResource(EventDAO eventDAO, UserDAO userDAO) {\n         this.eventDAO = eventDAO;\n         this.userDAO = userDAO;\n     }\n-    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+\n     @GET\n     @Timed\n     @UnitOfWork(readOnly = true)\n     @Operation(description = DESCRIPTION, summary = SUMMARY, security = @SecurityRequirement(name = \"bearer\"))\n     @ApiOperation(value = SUMMARY, authorizations = {\n             @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, notes = DESCRIPTION, responseContainer = \"List\", response = Event.class)\n-    public List<Event> getEvents(@ApiParam(hidden = true) @Auth User user, @QueryParam(\"event_search_type\") EventSearchType eventSearchType, @Min(1) @Max(MAX_LIMIT) @DefaultValue(PAGINATION_DEFAULT_STRING) @ApiParam(defaultValue = PAGINATION_DEFAULT_STRING, allowableValues = PAGINATION_RANGE) @Parameter(schema = @Schema(maximum = \"100\", minimum = \"1\")) @QueryParam(\"limit\") int limit, @QueryParam(\"offset\") @DefaultValue(\"0\") Integer offset) {\n-        if (eventSearchType.equals(EventSearchType.STARRED_ENTRIES)) {\n-            User userWithSession = this.userDAO.findById(user.getId());\n+    public Set<Event> getEvents(@Parameter(hidden = true) @ApiParam(hidden = true) @Auth User user, @QueryParam(\"event_search_type\") EventSearchType eventSearchType, @Min(1) @Max(MAX_LIMIT) @DefaultValue(PAGINATION_DEFAULT_STRING) @ApiParam(defaultValue = PAGINATION_DEFAULT_STRING, allowableValues = PAGINATION_RANGE) @Parameter(schema = @Schema(maximum = \"100\", minimum = \"1\")) @QueryParam(\"limit\") int limit, @QueryParam(\"offset\") @DefaultValue(\"0\") Integer offset) {", "originalCommit": "5f10c8bb97dd047c4ae1c30d52cc5b723de79a75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4MTc1Mg==", "url": "https://github.com/dockstore/dockstore/pull/3120#discussion_r364981752", "bodyText": "Was originally attempting to remove duplicate events, I'll change it back to list.  I don't think sorted set works anyways.", "author": "garyluu", "createdAt": "2020-01-09T22:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NTY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "47802b43d7de831d3c0c963f3a51ff4ad5bc7046", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java\nindex f308ef158..9f6577b88 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/EventResource.java\n\n@@ -79,25 +80,21 @@ public class EventResource {\n     @Operation(description = DESCRIPTION, summary = SUMMARY, security = @SecurityRequirement(name = \"bearer\"))\n     @ApiOperation(value = SUMMARY, authorizations = {\n             @Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, notes = DESCRIPTION, responseContainer = \"List\", response = Event.class)\n-    public Set<Event> getEvents(@Parameter(hidden = true) @ApiParam(hidden = true) @Auth User user, @QueryParam(\"event_search_type\") EventSearchType eventSearchType, @Min(1) @Max(MAX_LIMIT) @DefaultValue(PAGINATION_DEFAULT_STRING) @ApiParam(defaultValue = PAGINATION_DEFAULT_STRING, allowableValues = PAGINATION_RANGE) @Parameter(schema = @Schema(maximum = \"100\", minimum = \"1\")) @QueryParam(\"limit\") int limit, @QueryParam(\"offset\") @DefaultValue(\"0\") Integer offset) {\n+    public List getEvents(@Parameter(hidden = true) @ApiParam(hidden = true) @Auth User user, @QueryParam(\"event_search_type\") EventSearchType eventSearchType, @Min(1) @Max(MAX_LIMIT) @DefaultValue(PAGINATION_DEFAULT_STRING) @ApiParam(defaultValue = PAGINATION_DEFAULT_STRING, allowableValues = PAGINATION_RANGE) @Parameter(schema = @Schema(maximum = \"100\", minimum = \"1\")) @QueryParam(\"limit\") int limit, @QueryParam(\"offset\") @DefaultValue(\"0\") Integer offset) {\n         User userWithSession = this.userDAO.findById(user.getId());\n-        Set<Event> events = new HashSet<>();\n         switch (eventSearchType) {\n         case STARRED_ENTRIES:\n             Set<Long> entryIDs = userWithSession.getStarredEntries().stream().map(Entry::getId).collect(Collectors.toSet());\n-            events.addAll(this.eventDAO.findEventsByEntryIDs(entryIDs, offset, limit));\n-            return events;\n+            return this.eventDAO.findEventsByEntryIDs(entryIDs, offset, limit));\n         case STARRED_ORGANIZATION:\n             Set<Long> organizationIDs = userWithSession.getStarredOrganizations().stream().map(Organization::getId).collect(Collectors.toSet());\n-            events.addAll(this.eventDAO.findAllByOrganizationIds(organizationIDs, offset, limit));\n-            return events;\n+            return this.eventDAO.findAllByOrganizationIds(organizationIDs, offset, limit));\n         case ALL_STARRED:\n             Set<Long> organizationIDs2 = userWithSession.getStarredOrganizations().stream().map(Organization::getId).collect(Collectors.toSet());\n             Set<Long> entryIDs2 = userWithSession.getStarredEntries().stream().map(Entry::getId).collect(Collectors.toSet());\n-            events.addAll(this.eventDAO.findAllByOrganizationIdsOrEntryIds(organizationIDs2, entryIDs2, offset, limit));\n-            return events;\n+            return this.eventDAO.findAllByOrganizationIdsOrEntryIds(organizationIDs2, entryIDs2, offset, limit));\n         default:\n-            return Collections.emptySet();\n+            return Collections.emptyList();\n         }\n     }\n }\n"}}, {"oid": "47802b43d7de831d3c0c963f3a51ff4ad5bc7046", "url": "https://github.com/dockstore/dockstore/commit/47802b43d7de831d3c0c963f3a51ff4ad5bc7046", "message": "Change back to list", "committedDate": "2020-01-09T22:04:55Z", "type": "forcePushed"}, {"oid": "3cdd9be0a6676f14b596a79b76f1c24073c87e1f", "url": "https://github.com/dockstore/dockstore/commit/3cdd9be0a6676f14b596a79b76f1c24073c87e1f", "message": "Change back to list", "committedDate": "2020-01-09T22:09:44Z", "type": "forcePushed"}, {"oid": "d9b45aea3132055021b54288d72f5e8141af3828", "url": "https://github.com/dockstore/dockstore/commit/d9b45aea3132055021b54288d72f5e8141af3828", "message": "Change back to list", "committedDate": "2020-01-09T22:15:11Z", "type": "commit"}, {"oid": "d9b45aea3132055021b54288d72f5e8141af3828", "url": "https://github.com/dockstore/dockstore/commit/d9b45aea3132055021b54288d72f5e8141af3828", "message": "Change back to list", "committedDate": "2020-01-09T22:15:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NzY3OA==", "url": "https://github.com/dockstore/dockstore/pull/3120#discussion_r365887678", "bodyText": "A bit misleading, the test only checks that there are 6 events in general.\nSame idea with two lines down", "author": "denis-yuen", "createdAt": "2020-01-13T16:08:24Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/OrganizationIT.java", "diffHunk": "@@ -331,6 +334,31 @@ public void testCreateNewOrganization() {\n         assertEquals(\"potato\", organization.getDescription());\n         String description = organizationsApiUser2.getOrganizationDescription(organization.getId());\n         assertEquals(\"potato\", description);\n+\n+        testStarredOrganizationEvents(organizationsApiUser2, organization);\n+    }\n+\n+    private void testStarredOrganizationEvents(OrganizationsApi organizationsApiUser2, Organization organization) {\n+        organizationsApiUser2.starOrganization(organization.getId(), SwaggerUtility.createStarRequest(true));\n+        final io.dockstore.openapi.client.ApiClient openAPIWebClientUser2 = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n+        EventsApi eventsApi = new EventsApi(openAPIWebClientUser2);\n+        List<io.dockstore.openapi.client.model.Event> events = eventsApi\n+                .getEvents(EventSearchType.STARRED_ORGANIZATION.toString(), null, null);\n+        Assert.assertEquals(\"Should have 1 create, 1 approve, 4 modify events\", 6, events.size());", "originalCommit": "d9b45aea3132055021b54288d72f5e8141af3828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4OTU3MA==", "url": "https://github.com/dockstore/dockstore/pull/3120#discussion_r365889570", "bodyText": "It was only supposed to test for 6 events.  The comment was only to provide additional details for debugging purposes.", "author": "garyluu", "createdAt": "2020-01-13T16:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NzY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNTQ1Mw==", "url": "https://github.com/dockstore/dockstore/pull/3120#discussion_r365905453", "bodyText": "Understood, what I meant was that the test would be better if it actually checked for 1 create, 1 approve, 4 modify events.\nRight now, it looks like the test could pass if it got 6 create events.", "author": "denis-yuen", "createdAt": "2020-01-13T16:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NzY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwODM5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3120#discussion_r365908395", "bodyText": "Yes, that's what it's intended to do.  I'm testing whether the pagination works for this endpoint not whether the event type was correctly set.  We have other tests for that.", "author": "garyluu", "createdAt": "2020-01-13T16:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg4NzY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "e04bd030271cd798c9c8032770676a2743790fc4", "chunk": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/OrganizationIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/OrganizationIT.java\nindex add08e8c4..c00cad4da 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/OrganizationIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/OrganizationIT.java\n\n@@ -338,15 +338,23 @@ public class OrganizationIT extends BaseIT {\n         testStarredOrganizationEvents(organizationsApiUser2, organization);\n     }\n \n+    /**\n+     * This tests that:\n+     * the pagination limit works\n+     * the newest events are gotten\n+     * @param organizationsApiUser2 Organization API for user 2 who will star the organization\n+     * @param organization  An organization which is known to have 6 events (create > modify > approve > modify > modify > modify)\n+     */\n     private void testStarredOrganizationEvents(OrganizationsApi organizationsApiUser2, Organization organization) {\n         organizationsApiUser2.starOrganization(organization.getId(), SwaggerUtility.createStarRequest(true));\n         final io.dockstore.openapi.client.ApiClient openAPIWebClientUser2 = getOpenAPIWebClient(USER_2_USERNAME, testingPostgres);\n         EventsApi eventsApi = new EventsApi(openAPIWebClientUser2);\n         List<io.dockstore.openapi.client.model.Event> events = eventsApi\n                 .getEvents(EventSearchType.STARRED_ORGANIZATION.toString(), null, null);\n-        Assert.assertEquals(\"Should have 1 create, 1 approve, 4 modify events\", 6, events.size());\n+        Assert.assertEquals(\"Should have the correct amount of events\", 6, events.size());\n         events = eventsApi.getEvents(EventSearchType.STARRED_ORGANIZATION.toString(), 5, null);\n-        Assert.assertEquals(\"Should have 1 create, 1 approve, 4 modify events\", 5, events.size());\n+        Assert.assertEquals(\"Should have the correct amount of events\", 5, events.size());\n+        Assert.assertFalse(\"The create org event is the oldest, it should not be returned\", events.stream().anyMatch(event -> event.getType().equals(io.dockstore.openapi.client.model.Event.TypeEnum.CREATE_ORG)));\n         try {\n             eventsApi.getEvents(EventSearchType.STARRED_ORGANIZATION.toString(), EventDAO.MAX_LIMIT + 1, 0);\n             Assert.fail(\"Should've failed because it's over the limit\");\n"}}, {"oid": "e04bd030271cd798c9c8032770676a2743790fc4", "url": "https://github.com/dockstore/dockstore/commit/e04bd030271cd798c9c8032770676a2743790fc4", "message": "Test for newest events", "committedDate": "2020-01-13T19:33:50Z", "type": "commit"}]}