{"pr_number": 3491, "pr_title": "Feature/3486/endpoint add user to workflows", "pr_createdAt": "2020-05-21T18:15:07Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3491", "timeline": [{"oid": "114bd3362e04e0b5e76d28b0129877a80a6ec6e1", "url": "https://github.com/dockstore/dockstore/commit/114bd3362e04e0b5e76d28b0129877a80a6ec6e1", "message": "add endpoint for adding user to all workflows they should have access to", "committedDate": "2020-05-21T15:20:41Z", "type": "commit"}, {"oid": "134ca6e2236d4d85c7f83ea473eceed59b315e62", "url": "https://github.com/dockstore/dockstore/commit/134ca6e2236d4d85c7f83ea473eceed59b315e62", "message": "only refresh bioworkflows", "committedDate": "2020-05-21T18:12:24Z", "type": "commit"}, {"oid": "d5bdcd9dbedd43b380a00874bf246f2143446c98", "url": "https://github.com/dockstore/dockstore/commit/d5bdcd9dbedd43b380a00874bf246f2143446c98", "message": "refresh bitbucket token", "committedDate": "2020-05-21T20:16:21Z", "type": "commit"}, {"oid": "8a9407be5f95e922cff3e23eb45617b8a3b05323", "url": "https://github.com/dockstore/dockstore/commit/8a9407be5f95e922cff3e23eb45617b8a3b05323", "message": "add test for new endpoint", "committedDate": "2020-05-21T20:16:53Z", "type": "commit"}, {"oid": "ebc25070b2bd37303e27e09c4de22be3353a6616", "url": "https://github.com/dockstore/dockstore/commit/ebc25070b2bd37303e27e09c4de22be3353a6616", "message": "parameter number ignore", "committedDate": "2020-05-21T20:31:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzMjY0Ng==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r428932646", "bodyText": "This looks like this was it copied from AbstractWorkflowResource. We should avoid the duplication, and rename it in the process -- when I saw its invocation above, I started to enter a comment, based on the name, that it was only going return BitBucket tokens.\nNot for this PR, but for down the road, if we get more BitBucket users, we  should consider updating this method, which is why it would be good if it only existed once -- we shouldn't be generating a new access token every time, but only when the curent one has  expired or is close to expired.", "author": "coverbeck", "createdAt": "2020-05-21T21:42:55Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -840,6 +891,19 @@ private boolean canDeleteWorkflow(String path) {\n         }\n     }\n \n+    protected List<Token> checkOnBitbucketToken(User user) {", "originalCommit": "ebc25070b2bd37303e27e09c4de22be3353a6616", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95e9a08eeb0dd8e12637a5895e7ca2bfdaab836c", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 0db6ecf6d..30e4f97d0 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -891,19 +891,6 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n         }\n     }\n \n-    protected List<Token> checkOnBitbucketToken(User user) {\n-        List<Token> tokens = tokenDAO.findBitbucketByUserId(user.getId());\n-\n-        if (!tokens.isEmpty()) {\n-            Token bitbucketToken = tokens.get(0);\n-            String refreshUrl = BITBUCKET_URL + \"site/oauth2/access_token\";\n-            String payload = \"grant_type=refresh_token&refresh_token=\" + bitbucketToken.getRefreshToken();\n-            refreshToken(refreshUrl, bitbucketToken, client, tokenDAO, bitbucketClientID, bitbucketClientSecret, payload);\n-        }\n-\n-        return tokenDAO.findByUserId(user.getId());\n-    }\n-\n     /**\n      * Updates the user's google access token in the DB\n      * @param userId    The user's ID\n"}}, {"oid": "95e9a08eeb0dd8e12637a5895e7ca2bfdaab836c", "url": "https://github.com/dockstore/dockstore/commit/95e9a08eeb0dd8e12637a5895e7ca2bfdaab836c", "message": "suggestions from pr", "committedDate": "2020-05-22T12:54:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NzY0OA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r429267648", "bodyText": "Readd", "author": "denis-yuen", "createdAt": "2020-05-22T14:06:57Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -85,6 +85,24 @@ public void resetDBBetweenTests() throws Exception {\n         CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n     }\n \n+    @Test\n+    public void testAddUserToOrgs() {\n+        ApiClient client = getWebClient(USER_2_USERNAME, testingPostgres);\n+        UsersApi userApi = new UsersApi(client);\n+        List<Workflow> workflows = userApi.refreshWorkflowsByOrganization((long)1, \"DockstoreTestUser\");\n+\n+        // Remove an association with an entry\n+        long numberOfWorkflows = workflows.size();\n+        testingPostgres.runUpdateStatement(\"delete from user_entry where entryid = 951\");\n+        long newNumberOfWorkflows = userApi.userWorkflows((long)1).size();\n+        assertEquals(\"Should have one less workflow\", numberOfWorkflows - 1, newNumberOfWorkflows);\n+\n+        // Readd user", "originalCommit": "95e9a08eeb0dd8e12637a5895e7ca2bfdaab836c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f27bc218d7422e294af902094c257a5a866c5749", "chunk": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\nindex 0220e4bbb..09a4ec420 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\n\n@@ -97,9 +97,8 @@ public class UserResourceIT extends BaseIT {\n         long newNumberOfWorkflows = userApi.userWorkflows((long)1).size();\n         assertEquals(\"Should have one less workflow\", numberOfWorkflows - 1, newNumberOfWorkflows);\n \n-        // Readd user\n-        userApi.addUserToDockstoreWorkflows();\n-        newNumberOfWorkflows = userApi.userWorkflows((long)1).size();\n+        // Add user again\n+        newNumberOfWorkflows= userApi.addUserToDockstoreWorkflows().size();\n         assertEquals(\"Should have the original number of workflows\", numberOfWorkflows, newNumberOfWorkflows);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MTQ1NA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r429271454", "bodyText": "Does this work, it looks like you're asking the serviceDAO for workflows when it seems like workflowDAO is what I would have expected. Tests are passing though ... which might mean that this needs tests?", "author": "denis-yuen", "createdAt": "2020-05-22T14:13:42Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -554,6 +562,16 @@ private void checkToolTokens(User authUser, Long userId, String organization) {\n         return services;\n     }\n \n+    private List<Workflow> getBioworkflows(User user) {\n+        return serviceDAO.findMyEntries(user.getId()).stream().map(BioWorkflow.class::cast).collect(Collectors.toList());", "originalCommit": "95e9a08eeb0dd8e12637a5895e7ca2bfdaab836c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk3MDQ0Ng==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r429970446", "bodyText": "Good catch, I meant to do workflowDAO, was a copy paste error. The return value of the API wasn't directly tested, as I had another API call to grab it. Not sure why as this function would return the same thing anyways. I'll fix this so that it is properly tested.", "author": "agduncan94", "createdAt": "2020-05-25T14:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MTQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "f27bc218d7422e294af902094c257a5a866c5749", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 30e4f97d0..0bca7ca97 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -563,7 +563,7 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n     }\n \n     private List<Workflow> getBioworkflows(User user) {\n-        return serviceDAO.findMyEntries(user.getId()).stream().map(BioWorkflow.class::cast).collect(Collectors.toList());\n+        return workflowDAO.findMyEntries(user.getId()).stream().map(BioWorkflow.class::cast).collect(Collectors.toList());\n     }\n     \n     private List<Workflow> getStrippedBioworkflows(User user) {\n"}}, {"oid": "f27bc218d7422e294af902094c257a5a866c5749", "url": "https://github.com/dockstore/dockstore/commit/f27bc218d7422e294af902094c257a5a866c5749", "message": "suggested fixes from pr", "committedDate": "2020-05-25T14:49:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r429982421", "bodyText": "Channeling Charles, is this a PUT because it is idempotent?", "author": "denis-yuen", "createdAt": "2020-05-25T15:08:44Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +780,39 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @POST", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNTYwOA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430025608", "bodyText": "I'm not sure, it is idempotent, but it is just adding an entry to a join table.", "author": "agduncan94", "createdAt": "2020-05-25T17:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzNDA3MQ==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430034071", "bodyText": "You are right, changing to PUT.", "author": "agduncan94", "createdAt": "2020-05-25T17:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0Njg2Mg==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430046862", "bodyText": "hmm...might want to hold off on that", "author": "garyluu", "createdAt": "2020-05-25T18:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNzg4Nw==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430427887", "bodyText": "@garyluu should it be a PUSH?", "author": "agduncan94", "createdAt": "2020-05-26T13:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ0MjY3MA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430442670", "bodyText": "With the current endpoint URL, it's unclear to me.  The way I see it,  REST practices interacts with \"resources\".  Take the \"Users\" resource for example.  If I were to completely replace a single user \"/users/{userId}\",  it'd be PUT.  If it's to create a new user, it'd be a POST \"/users\".  In this case, I personally think it might be a POST or a PATCH.  @coverbeck for input", "author": "garyluu", "createdAt": "2020-05-26T14:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTY3Nw==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430679677", "bodyText": "This is to update some data associated with an existing user. From Wikipedia \"The PATCH method is a request method supported by the HTTP protocol for making partial changes to an existing resource.\" What about a using PATCH \"/users/workflows\" or \"/users\"? @coverbeck  @garyluu", "author": "agduncan94", "createdAt": "2020-05-26T20:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MjQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 0bca7ca97..82b14ee8a 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -780,7 +780,7 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n-    @POST\n+    @PUT\n     @Path(\"/workflow\")\n     @Timed\n     @UnitOfWork\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk4MzQ0Mg==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r429983442", "bodyText": "Should test something about the workflows (follow up on serviceDAO discussion)\ne.g. if by some bizarro coincidence this returned an equal number of services vs workflows", "author": "denis-yuen", "createdAt": "2020-05-25T15:11:15Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -85,6 +85,23 @@ public void resetDBBetweenTests() throws Exception {\n         CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n     }\n \n+    @Test\n+    public void testAddUserToOrgs() {\n+        ApiClient client = getWebClient(USER_2_USERNAME, testingPostgres);\n+        UsersApi userApi = new UsersApi(client);\n+        List<Workflow> workflows = userApi.refreshWorkflowsByOrganization((long)1, \"DockstoreTestUser\");\n+\n+        // Remove an association with an entry\n+        long numberOfWorkflows = workflows.size();\n+        testingPostgres.runUpdateStatement(\"delete from user_entry where entryid = 951\");\n+        long newNumberOfWorkflows = userApi.userWorkflows((long)1).size();\n+        assertEquals(\"Should have one less workflow\", numberOfWorkflows - 1, newNumberOfWorkflows);\n+\n+        // Add user again\n+        newNumberOfWorkflows= userApi.addUserToDockstoreWorkflows().size();", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "chunk": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\nindex 09a4ec420..002f90803 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\n\n@@ -97,9 +97,11 @@ public class UserResourceIT extends BaseIT {\n         long newNumberOfWorkflows = userApi.userWorkflows((long)1).size();\n         assertEquals(\"Should have one less workflow\", numberOfWorkflows - 1, newNumberOfWorkflows);\n \n-        // Add user again\n-        newNumberOfWorkflows= userApi.addUserToDockstoreWorkflows().size();\n+        // Add user back to workflow\n+        workflows = userApi.addUserToDockstoreWorkflows(\"\");\n+        newNumberOfWorkflows = workflows.size();\n         assertEquals(\"Should have the original number of workflows\", numberOfWorkflows, newNumberOfWorkflows);\n+        assertTrue(\"Should have the workflow DockstoreTestUser/dockstore-whalesay-2\", workflows.stream().anyMatch(workflow -> Objects.equals(\"dockstore-whalesay-2\", workflow.getRepository()) && Objects.equals(\"DockstoreTestUser\", workflow.getOrganization())));\n     }\n \n     @Test(expected = ApiException.class)\n"}}, {"oid": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "url": "https://github.com/dockstore/dockstore/commit/0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "message": "fix checkstyle; better test; PUT endpoint", "committedDate": "2020-05-25T18:30:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzMyMA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430033320", "bodyText": "For new endpoints just use OpenAPI only, remove the Swagger", "author": "garyluu", "createdAt": "2020-05-25T17:54:03Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +780,39 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @POST\n+    @Path(\"/workflow\")\n+    @Timed\n+    @UnitOfWork\n+    @Operation(operationId = \"addUserToDockstoreWorkflows\", description = \"Adds a user to any Dockstore workflows that they should have access to.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Adds a user to any Dockstore workflows that they should have access to.\", authorizations = {", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 0bca7ca97..82b14ee8a 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -780,7 +780,7 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n-    @POST\n+    @PUT\n     @Path(\"/workflow\")\n     @Timed\n     @UnitOfWork\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzM4OA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430033388", "bodyText": "Should be using OpenAPI client", "author": "garyluu", "createdAt": "2020-05-25T17:54:22Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java", "diffHunk": "@@ -85,6 +85,23 @@ public void resetDBBetweenTests() throws Exception {\n         CommonTestUtilities.cleanStatePrivate2(SUPPORT, false);\n     }\n \n+    @Test\n+    public void testAddUserToOrgs() {\n+        ApiClient client = getWebClient(USER_2_USERNAME, testingPostgres);", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0OTA4Mw==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430049083", "bodyText": "Good catch.", "author": "agduncan94", "createdAt": "2020-05-25T19:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "chunk": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\nindex 09a4ec420..002f90803 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/webservice/UserResourceIT.java\n\n@@ -97,9 +97,11 @@ public class UserResourceIT extends BaseIT {\n         long newNumberOfWorkflows = userApi.userWorkflows((long)1).size();\n         assertEquals(\"Should have one less workflow\", numberOfWorkflows - 1, newNumberOfWorkflows);\n \n-        // Add user again\n-        newNumberOfWorkflows= userApi.addUserToDockstoreWorkflows().size();\n+        // Add user back to workflow\n+        workflows = userApi.addUserToDockstoreWorkflows(\"\");\n+        newNumberOfWorkflows = workflows.size();\n         assertEquals(\"Should have the original number of workflows\", numberOfWorkflows, newNumberOfWorkflows);\n+        assertTrue(\"Should have the workflow DockstoreTestUser/dockstore-whalesay-2\", workflows.stream().anyMatch(workflow -> Objects.equals(\"dockstore-whalesay-2\", workflow.getRepository()) && Objects.equals(\"DockstoreTestUser\", workflow.getOrganization())));\n     }\n \n     @Test(expected = ApiException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzY2MA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430033660", "bodyText": "anything not /{userId} should be avoided to be RESTful.", "author": "garyluu", "createdAt": "2020-05-25T17:55:24Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +780,39 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @POST\n+    @Path(\"/workflow\")", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0ODc5OQ==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430048799", "bodyText": "What would a better path be?", "author": "agduncan94", "createdAt": "2020-05-25T19:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA1MDIwNA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430050204", "bodyText": "Do you mean I should change it to take in the user ID as a parameter?", "author": "agduncan94", "createdAt": "2020-05-25T19:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyODc4Mw==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430528783", "bodyText": "To be consistent with other similar endpoints, I think it should be /{userId}/workflows.\nI lean towards POST because it isn't idempotent.\n\nThis is tricky; I'm not sure, and I could probably be swayed,", "author": "coverbeck", "createdAt": "2020-05-26T16:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzMzY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 0bca7ca97..82b14ee8a 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -780,7 +780,7 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n-    @POST\n+    @PUT\n     @Path(\"/workflow\")\n     @Timed\n     @UnitOfWork\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAzODI2NQ==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430038265", "bodyText": "Fine for now, someone should probably just call similar code to the userWorkflows endpoint after it's been optimized", "author": "garyluu", "createdAt": "2020-05-25T18:13:37Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +780,39 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @POST\n+    @Path(\"/workflow\")\n+    @Timed\n+    @UnitOfWork\n+    @Operation(operationId = \"addUserToDockstoreWorkflows\", description = \"Adds a user to any Dockstore workflows that they should have access to.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    @ApiOperation(value = \"Adds a user to any Dockstore workflows that they should have access to.\", authorizations = {\n+            @Authorization(value = JWT_SECURITY_DEFINITION_NAME) },\n+            response = Workflow.class, responseContainer = \"List\")\n+    public List<Workflow> addUserToDockstoreWorkflows(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser) {\n+        final User user = userDAO.findById(authUser.getId());\n+        // Ignore hosted workflows\n+        List<SourceControl> sourceControls = Arrays.stream(SourceControl.values()).filter(sourceControl -> !Objects.equals(sourceControl, SourceControl.DOCKSTORE)).collect(\n+                Collectors.toList());\n+\n+        List<Token> scTokens = getAndRefreshTokens(user, tokenDAO, client, bitbucketClientID, bitbucketClientSecret)\n+                .stream()\n+                .filter(token -> sourceControls.contains(token.getTokenSource().getSourceControl()))\n+                .collect(Collectors.toList());\n+\n+        scTokens.stream().forEach(token -> {\n+            SourceCodeRepoInterface sourceCodeRepo =  SourceCodeRepoFactory.createSourceCodeRepo(token, client);\n+            Map<String, String> gitUrlToRepositoryId = sourceCodeRepo.getWorkflowGitUrl2RepositoryId();\n+            Set<String> organizations = gitUrlToRepositoryId.values().stream().map(repository -> repository.split(\"/\")[0]).collect(Collectors.toSet());\n+\n+            organizations.forEach(organization -> {\n+                List<Workflow> workflows = workflowDAO.findByOrganization(token.getTokenSource().getSourceControl(), organization);\n+                workflows.stream().forEach(workflow -> workflow.getUsers().add(user));\n+            });\n+        });\n+\n+        return getStrippedBioworkflows(userDAO.findById(user.getId()));", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4e33b01c8eb4346d2f5b7b28dd522b2c44bd6a", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 0bca7ca97..82b14ee8a 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -780,7 +780,7 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n-    @POST\n+    @PUT\n     @Path(\"/workflow\")\n     @Timed\n     @UnitOfWork\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTQ2NA==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r430045464", "bodyText": "Should mention \"logged-in user\" like the endpoints below", "author": "garyluu", "createdAt": "2020-05-25T18:45:46Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +780,39 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @POST\n+    @Path(\"/workflow\")\n+    @Timed\n+    @UnitOfWork\n+    @Operation(operationId = \"addUserToDockstoreWorkflows\", description = \"Adds a user to any Dockstore workflows that they should have access to.\", security = @SecurityRequirement(name = ResourceConstants.OPENAPI_JWT_SECURITY_DEFINITION_NAME))", "originalCommit": "f27bc218d7422e294af902094c257a5a866c5749", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d04ff39f2cb50faa1dafb191e5eee35ae66ce849", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex 0bca7ca97..82b14ee8a 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -780,7 +780,7 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n-    @POST\n+    @PUT\n     @Path(\"/workflow\")\n     @Timed\n     @UnitOfWork\n"}}, {"oid": "d04ff39f2cb50faa1dafb191e5eee35ae66ce849", "url": "https://github.com/dockstore/dockstore/commit/d04ff39f2cb50faa1dafb191e5eee35ae66ce849", "message": "Merge branch 'develop' into feature/3486/endpoint-add-user-to-workflows", "committedDate": "2020-05-25T18:58:42Z", "type": "commit"}, {"oid": "b6996ac9dd1bb0ef156face669373f858ce29b84", "url": "https://github.com/dockstore/dockstore/commit/b6996ac9dd1bb0ef156face669373f858ce29b84", "message": "changed test to open api (had to change some endpoints too)", "committedDate": "2020-05-26T14:41:30Z", "type": "commit"}, {"oid": "88c5aa62ae0f9aa682ccff6e9a87976a2d816a8f", "url": "https://github.com/dockstore/dockstore/commit/88c5aa62ae0f9aa682ccff6e9a87976a2d816a8f", "message": "Merge branch 'feature/3486/endpoint-add-user-to-workflows' of github.com:ga4gh/dockstore into feature/3486/endpoint-add-user-to-workflows", "committedDate": "2020-05-26T20:06:23Z", "type": "commit"}, {"oid": "1598141e59922eaf43931fdc55d628c0750a8b05", "url": "https://github.com/dockstore/dockstore/commit/1598141e59922eaf43931fdc55d628c0750a8b05", "message": "change to patch", "committedDate": "2020-05-27T15:05:52Z", "type": "commit"}, {"oid": "6e585f98e907b91a45d87817fa418a52ef55f94d", "url": "https://github.com/dockstore/dockstore/commit/6e585f98e907b91a45d87817fa418a52ef55f94d", "message": "change to patch", "committedDate": "2020-05-28T20:28:09Z", "type": "commit"}, {"oid": "6c9246729c4963a790eed707e71c8dd7de1e885a", "url": "https://github.com/dockstore/dockstore/commit/6c9246729c4963a790eed707e71c8dd7de1e885a", "message": "Merge branch 'develop' into feature/3486/endpoint-add-user-to-workflows", "committedDate": "2020-05-28T20:30:48Z", "type": "commit"}, {"oid": "21c2e93a0f29098a78f1f168d8932807ff4d5a33", "url": "https://github.com/dockstore/dockstore/commit/21c2e93a0f29098a78f1f168d8932807ff4d5a33", "message": "change to workflows", "committedDate": "2020-05-28T20:39:57Z", "type": "commit"}, {"oid": "8e5fdfbe8208f3c0800faa9a7c8350d017648351", "url": "https://github.com/dockstore/dockstore/commit/8e5fdfbe8208f3c0800faa9a7c8350d017648351", "message": "Merge branch 'feature/3486/endpoint-add-user-to-workflows' of github.com:ga4gh/dockstore into feature/3486/endpoint-add-user-to-workflows", "committedDate": "2020-05-28T20:41:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NDU5NQ==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r432174595", "bodyText": "You will get an NPE if user is null. It shouldn't ever happen, unless the user gets deleted after it has been cached in SimpleAuthenticator, and given that we make it hard to delete users... Still, the Objects.equals isn't adding anything.", "author": "coverbeck", "createdAt": "2020-05-28T23:15:58Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +786,42 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @PATCH\n+    @Timed\n+    @UnitOfWork\n+    @Path(\"/{userId}/workflows\")\n+    @ApiOperation(value = \"Adds a user to any Dockstore workflows that they should have access to.\", authorizations = {@Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Workflow.class, responseContainer = \"List\")\n+    @Operation(operationId = \"addUserToDockstoreWorkflows\", description = \"Adds the logged-in user to any Dockstore workflows that they should have access to.\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public List<Workflow> addUserToDockstoreWorkflows(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n+            @ApiParam(name = \"userId\", required = true, value = \"User to update\") @PathParam(\"userId\") @Parameter(name = \"userId\", in = ParameterIn.PATH, description = \"User to update\", required = true) long userId,\n+            @ApiParam(name = \"emptyBody\", value = APPEASE_SWAGGER_PATCH) @Parameter(description = APPEASE_SWAGGER_PATCH, name = \"emptyBody\") String emptyBody) {\n+        final User user = userDAO.findById(authUser.getId());\n+        if (!Objects.equals(userId, user.getId())) {", "originalCommit": "8e5fdfbe8208f3c0800faa9a7c8350d017648351", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d9b34781785801456721b389ac5acfbb9016f7b", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex bc19b2008..a462b885f 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -796,8 +796,8 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n             @ApiParam(name = \"userId\", required = true, value = \"User to update\") @PathParam(\"userId\") @Parameter(name = \"userId\", in = ParameterIn.PATH, description = \"User to update\", required = true) long userId,\n             @ApiParam(name = \"emptyBody\", value = APPEASE_SWAGGER_PATCH) @Parameter(description = APPEASE_SWAGGER_PATCH, name = \"emptyBody\") String emptyBody) {\n         final User user = userDAO.findById(authUser.getId());\n-        if (!Objects.equals(userId, user.getId())) {\n-            throw new CustomWebApplicationException(\"The user Id provided does not match the logged-in user id.\", HttpStatus.SC_BAD_REQUEST);\n+        if (user == null || !Objects.equals(userId, user.getId())) {\n+            throw new CustomWebApplicationException(\"The user id provided does not match the logged-in user id.\", HttpStatus.SC_BAD_REQUEST);\n         }\n         // Ignore hosted workflows\n         List<SourceControl> sourceControls = Arrays.stream(SourceControl.values()).filter(sourceControl -> !Objects.equals(sourceControl, SourceControl.DOCKSTORE)).collect(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NDY3Mg==", "url": "https://github.com/dockstore/dockstore/pull/3491#discussion_r432174672", "bodyText": "Id and 'id` -- should be consistent.", "author": "coverbeck", "createdAt": "2020-05-28T23:16:14Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java", "diffHunk": "@@ -762,6 +786,42 @@ public Limits setUserLimits(@ApiParam(hidden = true) @Auth User authUser,\n         return getStrippedWorkflowsAndServices(userDAO.findById(user.getId()));\n     }\n \n+    @PATCH\n+    @Timed\n+    @UnitOfWork\n+    @Path(\"/{userId}/workflows\")\n+    @ApiOperation(value = \"Adds a user to any Dockstore workflows that they should have access to.\", authorizations = {@Authorization(value = JWT_SECURITY_DEFINITION_NAME) }, response = Workflow.class, responseContainer = \"List\")\n+    @Operation(operationId = \"addUserToDockstoreWorkflows\", description = \"Adds the logged-in user to any Dockstore workflows that they should have access to.\", security = @SecurityRequirement(name = OPENAPI_JWT_SECURITY_DEFINITION_NAME))\n+    public List<Workflow> addUserToDockstoreWorkflows(@ApiParam(hidden = true) @Parameter(hidden = true, name = \"user\", in = ParameterIn.HEADER) @Auth User authUser,\n+            @ApiParam(name = \"userId\", required = true, value = \"User to update\") @PathParam(\"userId\") @Parameter(name = \"userId\", in = ParameterIn.PATH, description = \"User to update\", required = true) long userId,\n+            @ApiParam(name = \"emptyBody\", value = APPEASE_SWAGGER_PATCH) @Parameter(description = APPEASE_SWAGGER_PATCH, name = \"emptyBody\") String emptyBody) {\n+        final User user = userDAO.findById(authUser.getId());\n+        if (!Objects.equals(userId, user.getId())) {\n+            throw new CustomWebApplicationException(\"The user Id provided does not match the logged-in user id.\", HttpStatus.SC_BAD_REQUEST);", "originalCommit": "8e5fdfbe8208f3c0800faa9a7c8350d017648351", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1d9b34781785801456721b389ac5acfbb9016f7b", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\nindex bc19b2008..a462b885f 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/resources/UserResource.java\n\n@@ -796,8 +796,8 @@ public class UserResource implements AuthenticatedResourceInterface, SourceContr\n             @ApiParam(name = \"userId\", required = true, value = \"User to update\") @PathParam(\"userId\") @Parameter(name = \"userId\", in = ParameterIn.PATH, description = \"User to update\", required = true) long userId,\n             @ApiParam(name = \"emptyBody\", value = APPEASE_SWAGGER_PATCH) @Parameter(description = APPEASE_SWAGGER_PATCH, name = \"emptyBody\") String emptyBody) {\n         final User user = userDAO.findById(authUser.getId());\n-        if (!Objects.equals(userId, user.getId())) {\n-            throw new CustomWebApplicationException(\"The user Id provided does not match the logged-in user id.\", HttpStatus.SC_BAD_REQUEST);\n+        if (user == null || !Objects.equals(userId, user.getId())) {\n+            throw new CustomWebApplicationException(\"The user id provided does not match the logged-in user id.\", HttpStatus.SC_BAD_REQUEST);\n         }\n         // Ignore hosted workflows\n         List<SourceControl> sourceControls = Arrays.stream(SourceControl.values()).filter(sourceControl -> !Objects.equals(sourceControl, SourceControl.DOCKSTORE)).collect(\n"}}, {"oid": "1d9b34781785801456721b389ac5acfbb9016f7b", "url": "https://github.com/dockstore/dockstore/commit/1d9b34781785801456721b389ac5acfbb9016f7b", "message": "changes from pr", "committedDate": "2020-05-29T13:52:39Z", "type": "commit"}, {"oid": "9d9e5b8189640507bbd426beb45f380914686eb4", "url": "https://github.com/dockstore/dockstore/commit/9d9e5b8189640507bbd426beb45f380914686eb4", "message": "Merge branch 'develop' into feature/3486/endpoint-add-user-to-workflows", "committedDate": "2020-05-29T16:49:22Z", "type": "commit"}, {"oid": "8d599c123d0f101900ab65ef4fcb11a3b104c435", "url": "https://github.com/dockstore/dockstore/commit/8d599c123d0f101900ab65ef4fcb11a3b104c435", "message": "Merge branch 'develop' into feature/3486/endpoint-add-user-to-workflows", "committedDate": "2020-05-29T18:13:38Z", "type": "commit"}]}