{"pr_number": 3852, "pr_title": "Feature/3761/nextflow dsl2", "pr_createdAt": "2020-10-08T17:07:30Z", "pr_url": "https://github.com/dockstore/dockstore/pull/3852", "timeline": [{"oid": "5dbe5373283f86cf6b4be98ab1d2c4505802a0ad", "url": "https://github.com/dockstore/dockstore/commit/5dbe5373283f86cf6b4be98ab1d2c4505802a0ad", "message": "Update Nextflow JAR version", "committedDate": "2020-10-06T16:14:32Z", "type": "commit"}, {"oid": "10eb09b3beb14ad41f6200d526be037636d7f3a1", "url": "https://github.com/dockstore/dockstore/commit/10eb09b3beb14ad41f6200d526be037636d7f3a1", "message": "Handle direct imports", "committedDate": "2020-10-06T16:42:03Z", "type": "commit"}, {"oid": "98f5810af3d1e7405c5682a82d5ebd25bed8042f", "url": "https://github.com/dockstore/dockstore/commit/98f5810af3d1e7405c5682a82d5ebd25bed8042f", "message": "Handle recursive imports", "committedDate": "2020-10-06T22:58:13Z", "type": "commit"}, {"oid": "b4348461970c23e78a9d2be6b6d3e6fa6d6671f4", "url": "https://github.com/dockstore/dockstore/commit/b4348461970c23e78a9d2be6b6d3e6fa6d6671f4", "message": "Handle multi-line import and ones that do have .nf", "committedDate": "2020-10-07T16:03:47Z", "type": "commit"}, {"oid": "43c9b1d7581eab9241f0f441f624cda5a194216a", "url": "https://github.com/dockstore/dockstore/commit/43c9b1d7581eab9241f0f441f624cda5a194216a", "message": "Add random comment", "committedDate": "2020-10-07T20:38:26Z", "type": "commit"}, {"oid": "31143f8d860631b55c5ef9bf0aaa6578ecdd87fb", "url": "https://github.com/dockstore/dockstore/commit/31143f8d860631b55c5ef9bf0aaa6578ecdd87fb", "message": "Fix path", "committedDate": "2020-10-07T21:08:21Z", "type": "commit"}, {"oid": "486f20c90d52574b157718875d3332a7f6e33001", "url": "https://github.com/dockstore/dockstore/commit/486f20c90d52574b157718875d3332a7f6e33001", "message": "Add test", "committedDate": "2020-10-07T21:08:28Z", "type": "commit"}, {"oid": "b2efee9f1ec04bb4fb43c2a402ce24d8248591bc", "url": "https://github.com/dockstore/dockstore/commit/b2efee9f1ec04bb4fb43c2a402ce24d8248591bc", "message": "Improve and add one more test", "committedDate": "2020-10-07T22:28:13Z", "type": "commit"}, {"oid": "3a682f6509410eee302fd89435d760c726c8be55", "url": "https://github.com/dockstore/dockstore/commit/3a682f6509410eee302fd89435d760c726c8be55", "message": "Fix checkstyle after temporarily adding it", "committedDate": "2020-10-08T17:54:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3MDY0Mg==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r501970642", "bodyText": "Should be a static, Pattern.compile is relatively expensive.", "author": "coverbeck", "createdAt": "2020-10-08T19:44:26Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java", "diffHunk": "@@ -141,6 +149,54 @@ public Version parseWorkflowContent(String filepath, String content, Set<SourceF\n         return imports;\n     }\n \n+    /**\n+     * Similar to processImports() of other handlers.\n+     * The current processImports() method looks for main.nf and similar so is not suitable for recursion.\n+     * Looks for imports by searching for lines that start \"include\"\n+     * @param repositoryId  The Git repository (ex. nextflow-io/rnaseq-nf)\n+     * @param content   The contents of the file being analyzed\n+     * @param version   The Git version (branch/tag) of the repository\n+     * @param sourceCodeRepoInterface   The source code repository interface\n+     * @param workingDirectoryForFile   The parent directory of the file being analyzed\n+     * @return\n+     */\n+    private Map<String, SourceFile> processOtherImports(String repositoryId, String content, Version version,\n+            SourceCodeRepoInterface sourceCodeRepoInterface, String workingDirectoryForFile) {\n+        Map<String, SourceFile> imports = new HashMap<>();\n+        Pattern p = Pattern.compile(\"include.+?from.+?'.+?'\", Pattern.DOTALL);", "originalCommit": "3a682f6509410eee302fd89435d760c726c8be55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee091944b85cefd98babc5c334c85ea0be87bf10", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\nindex cebe1fda3..a72bc11e5 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\n\n@@ -163,8 +164,7 @@ public class NextflowHandler extends AbstractLanguageHandler implements Language\n     private Map<String, SourceFile> processOtherImports(String repositoryId, String content, Version version,\n             SourceCodeRepoInterface sourceCodeRepoInterface, String workingDirectoryForFile) {\n         Map<String, SourceFile> imports = new HashMap<>();\n-        Pattern p = Pattern.compile(\"include.+?from.+?'.+?'\", Pattern.DOTALL);\n-        Matcher m = p.matcher(content);\n+        Matcher m = IMPORT_PATTERN.matcher(content);\n         while (m.find()) {\n             String path = getRelativeImportPathFromLine(m.group(), workingDirectoryForFile);\n             String absoluteImportPath = convertRelativePathToAbsolutePath(workingDirectoryForFile, path);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3MzI4OA==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r501973288", "bodyText": "Suggest variable/const for \".nf\".", "author": "coverbeck", "createdAt": "2020-10-08T19:49:38Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java", "diffHunk": "@@ -141,6 +149,54 @@ public Version parseWorkflowContent(String filepath, String content, Set<SourceF\n         return imports;\n     }\n \n+    /**\n+     * Similar to processImports() of other handlers.\n+     * The current processImports() method looks for main.nf and similar so is not suitable for recursion.\n+     * Looks for imports by searching for lines that start \"include\"\n+     * @param repositoryId  The Git repository (ex. nextflow-io/rnaseq-nf)\n+     * @param content   The contents of the file being analyzed\n+     * @param version   The Git version (branch/tag) of the repository\n+     * @param sourceCodeRepoInterface   The source code repository interface\n+     * @param workingDirectoryForFile   The parent directory of the file being analyzed\n+     * @return\n+     */\n+    private Map<String, SourceFile> processOtherImports(String repositoryId, String content, Version version,\n+            SourceCodeRepoInterface sourceCodeRepoInterface, String workingDirectoryForFile) {\n+        Map<String, SourceFile> imports = new HashMap<>();\n+        Pattern p = Pattern.compile(\"include.+?from.+?'.+?'\", Pattern.DOTALL);\n+        Matcher m = p.matcher(content);\n+        while (m.find()) {\n+            String path = getRelativeImportPathFromLine(m.group(), workingDirectoryForFile);\n+            String absoluteImportPath = convertRelativePathToAbsolutePath(workingDirectoryForFile, path);\n+            handleImport(repositoryId, version, imports, path, sourceCodeRepoInterface, absoluteImportPath);\n+        }\n+        Map<String, SourceFile> recursiveImports = new HashMap<>();\n+        for (Map.Entry<String, SourceFile> importFile : imports.entrySet()) {\n+            final Map<String, SourceFile> sourceFiles = processOtherImports(repositoryId, importFile.getValue().getContent(), version, sourceCodeRepoInterface, importFile.getKey());\n+            recursiveImports.putAll(sourceFiles);\n+        }\n+        recursiveImports.putAll(imports);\n+        return recursiveImports;\n+    }\n+\n+    /**\n+     * Give the line in the file that has the import, figure out what the relative path is\n+     * @param line  A line in the file that has the import (ex. \"include { RNASEQ } from './modules/rnaseq'\")\n+     * @return  The relative path\n+     */\n+    private static String getRelativeImportPathFromLine(String line, String workingDirectoryForFile) {\n+        String importPath = StringUtils.substringBetween(line, \"'\", \"'\");\n+        importPath = importPath.replaceFirst(workingDirectoryForFile, \"\");\n+        importPath = importPath.replaceFirst(\"^[.]/\", \"\");\n+        importPath = importPath.replaceFirst(\"^/\", \"\");\n+        // Sometimes the import line looks like \"include { RNASEQ } from './modules/rnaseq'\"\n+        // \"./modules/rnaseq\" is not a file, it is actually \"./modules/rnaseq.nf\"\n+        if (!importPath.endsWith(\".nf\")) {", "originalCommit": "3a682f6509410eee302fd89435d760c726c8be55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee091944b85cefd98babc5c334c85ea0be87bf10", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\nindex cebe1fda3..a72bc11e5 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\n\n@@ -163,8 +164,7 @@ public class NextflowHandler extends AbstractLanguageHandler implements Language\n     private Map<String, SourceFile> processOtherImports(String repositoryId, String content, Version version,\n             SourceCodeRepoInterface sourceCodeRepoInterface, String workingDirectoryForFile) {\n         Map<String, SourceFile> imports = new HashMap<>();\n-        Pattern p = Pattern.compile(\"include.+?from.+?'.+?'\", Pattern.DOTALL);\n-        Matcher m = p.matcher(content);\n+        Matcher m = IMPORT_PATTERN.matcher(content);\n         while (m.find()) {\n             String path = getRelativeImportPathFromLine(m.group(), workingDirectoryForFile);\n             String absoluteImportPath = convertRelativePathToAbsolutePath(workingDirectoryForFile, path);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NjM1Mg==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r501976352", "bodyText": "Functional side of me would rather have this return an Optional rather than the side-effect of updating a map. But we're not officially functional, and it was already like this.", "author": "coverbeck", "createdAt": "2020-10-08T19:55:45Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/AbstractLanguageHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.dockstore.webservice.languages;\n+\n+import java.util.Map;\n+\n+import io.dockstore.common.DescriptorLanguage;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Version;\n+import io.dockstore.webservice.helpers.SourceCodeRepoInterface;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract methods that the LanguageHandlerInterface do not need to have (ex. specific to Dockstore and not plugins)\n+ * Used by CWLHandler and NextflowHandler\n+ */\n+public abstract class AbstractLanguageHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractLanguageHandler.class);\n+\n+    /**\n+     *\n+     * @return  The file type that resolved imports will be automatically set to\n+     */\n+    protected abstract DescriptorLanguage.FileType getFileType();\n+\n+    /**\n+     * Grabs a import file from Git based on its absolute path and add to imports mapping\n+     * @param repositoryId              identifies the git repository that we wish to use, normally something like 'organization/repo_name`\n+     * @param version                   version of the files to get\n+     * @param imports                   mapping of filenames to imports\n+     * @param givenImportPath           import path from CWL file\n+     * @param sourceCodeRepoInterface   used too retrieve imports\n+     * @param absoluteImportPath        absolute path of import in git repository\n+     */\n+    protected void handleImport(String repositoryId, Version version, Map<String, SourceFile> imports, String givenImportPath, SourceCodeRepoInterface sourceCodeRepoInterface, String absoluteImportPath) {", "originalCommit": "3a682f6509410eee302fd89435d760c726c8be55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MTY5OQ==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502041699", "bodyText": "Agreed, but ya. it was already like this", "author": "garyluu", "createdAt": "2020-10-08T22:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NjM1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4ODY0Mw==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r501988643", "bodyText": "I think this method is a good case for a unit test, to make sure it's catching the imports it's supposed to. Even though you already have integration tests.\nIt would be even better if we could use NextFlow for this, but we don't have their JAR on the classpath.", "author": "coverbeck", "createdAt": "2020-10-08T20:19:35Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java", "diffHunk": "@@ -141,6 +149,54 @@ public Version parseWorkflowContent(String filepath, String content, Set<SourceF\n         return imports;\n     }\n \n+    /**\n+     * Similar to processImports() of other handlers.\n+     * The current processImports() method looks for main.nf and similar so is not suitable for recursion.\n+     * Looks for imports by searching for lines that start \"include\"\n+     * @param repositoryId  The Git repository (ex. nextflow-io/rnaseq-nf)\n+     * @param content   The contents of the file being analyzed\n+     * @param version   The Git version (branch/tag) of the repository\n+     * @param sourceCodeRepoInterface   The source code repository interface\n+     * @param workingDirectoryForFile   The parent directory of the file being analyzed\n+     * @return\n+     */\n+    private Map<String, SourceFile> processOtherImports(String repositoryId, String content, Version version,\n+            SourceCodeRepoInterface sourceCodeRepoInterface, String workingDirectoryForFile) {\n+        Map<String, SourceFile> imports = new HashMap<>();\n+        Pattern p = Pattern.compile(\"include.+?from.+?'.+?'\", Pattern.DOTALL);\n+        Matcher m = p.matcher(content);\n+        while (m.find()) {\n+            String path = getRelativeImportPathFromLine(m.group(), workingDirectoryForFile);\n+            String absoluteImportPath = convertRelativePathToAbsolutePath(workingDirectoryForFile, path);\n+            handleImport(repositoryId, version, imports, path, sourceCodeRepoInterface, absoluteImportPath);\n+        }\n+        Map<String, SourceFile> recursiveImports = new HashMap<>();\n+        for (Map.Entry<String, SourceFile> importFile : imports.entrySet()) {\n+            final Map<String, SourceFile> sourceFiles = processOtherImports(repositoryId, importFile.getValue().getContent(), version, sourceCodeRepoInterface, importFile.getKey());\n+            recursiveImports.putAll(sourceFiles);\n+        }\n+        recursiveImports.putAll(imports);\n+        return recursiveImports;\n+    }\n+\n+    /**\n+     * Give the line in the file that has the import, figure out what the relative path is\n+     * @param line  A line in the file that has the import (ex. \"include { RNASEQ } from './modules/rnaseq'\")\n+     * @return  The relative path\n+     */\n+    private static String getRelativeImportPathFromLine(String line, String workingDirectoryForFile) {", "originalCommit": "3a682f6509410eee302fd89435d760c726c8be55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NTIwMQ==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r501995201", "bodyText": "Nextflow hasn't added support to return the imports nicely yet.", "author": "Ldcabansay", "createdAt": "2020-10-08T20:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4ODY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwNDA0OA==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502004048", "bodyText": "Do like the unit test idea, if only to have a concrete example checked-in in case we change the examples on github (or is this coded for their original repos?)", "author": "denis-yuen", "createdAt": "2020-10-08T20:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4ODY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ee091944b85cefd98babc5c334c85ea0be87bf10", "chunk": "diff --git a/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java b/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\nindex cebe1fda3..a72bc11e5 100644\n--- a/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\n+++ b/dockstore-webservice/src/main/java/io/dockstore/webservice/languages/NextflowHandler.java\n\n@@ -163,8 +164,7 @@ public class NextflowHandler extends AbstractLanguageHandler implements Language\n     private Map<String, SourceFile> processOtherImports(String repositoryId, String content, Version version,\n             SourceCodeRepoInterface sourceCodeRepoInterface, String workingDirectoryForFile) {\n         Map<String, SourceFile> imports = new HashMap<>();\n-        Pattern p = Pattern.compile(\"include.+?from.+?'.+?'\", Pattern.DOTALL);\n-        Matcher m = p.matcher(content);\n+        Matcher m = IMPORT_PATTERN.matcher(content);\n         while (m.find()) {\n             String path = getRelativeImportPathFromLine(m.group(), workingDirectoryForFile);\n             String absoluteImportPath = convertRelativePathToAbsolutePath(workingDirectoryForFile, path);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMjQwNw==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502002407", "bodyText": "should be more specific if merging/squashing with develop", "author": "denis-yuen", "createdAt": "2020-10-08T20:46:16Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.DescriptorLanguage;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.helpers.SourceCodeRepoFactory;\n+import io.dockstore.webservice.helpers.SourceCodeRepoInterface;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ *  TODO: Use fork with tagged version\n+ *  TODO: Check paths, something's not right", "originalCommit": "3a682f6509410eee302fd89435d760c726c8be55", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ee091944b85cefd98babc5c334c85ea0be87bf10", "chunk": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java\nindex 01dcdad96..1632448ca 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java\n\n@@ -16,7 +16,7 @@ import org.junit.Test;\n \n /**\n  *  TODO: Use fork with tagged version\n- *  TODO: Check paths, something's not right\n+ *  TODO: Check paths, it looks like it's relative to the file that imported it but this means it won't be unique\n  */\n public class NextflowHandlerIT extends BaseIT {\n     protected static SourceCodeRepoInterface sourceCodeRepoInterface;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMzAzNA==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502003034", "bodyText": "will these tests break if nextflow-io changes things (or are these forked and I'm missing it?)", "author": "denis-yuen", "createdAt": "2020-10-08T20:47:27Z", "path": "dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package io.dockstore.client.cli;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.dockstore.common.CommonTestUtilities;\n+import io.dockstore.common.DescriptorLanguage;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.WorkflowVersion;\n+import io.dockstore.webservice.helpers.SourceCodeRepoFactory;\n+import io.dockstore.webservice.helpers.SourceCodeRepoInterface;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ *  TODO: Use fork with tagged version\n+ *  TODO: Check paths, something's not right\n+ */\n+public class NextflowHandlerIT extends BaseIT {\n+    protected static SourceCodeRepoInterface sourceCodeRepoInterface;\n+\n+\n+    @Before\n+    @Override\n+    public void resetDBBetweenTests() throws Exception {\n+        CommonTestUtilities.addAdditionalToolsWithPrivate2(SUPPORT, false);\n+        String githubToken = testingPostgres\n+                .runSelectStatement(\"select content from token where username='DockstoreTestUser2' and tokensource='github.com'\",\n+                        String.class);\n+        sourceCodeRepoInterface = SourceCodeRepoFactory.createGitHubAppRepo(githubToken);\n+    }\n+\n+    /**\n+     * Tests:\n+     * Nextflow DSL2 with imports that import\n+     */\n+    @Test\n+    public void testProcessImportsRnaseq() {\n+        final String githubRepository = \"nextflow-io/rnaseq-nf\";", "originalCommit": "3a682f6509410eee302fd89435d760c726c8be55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyODg1Mg==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502028852", "bodyText": "Yup, going to fork and create tag before merge", "author": "garyluu", "createdAt": "2020-10-08T21:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAwMzAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ee091944b85cefd98babc5c334c85ea0be87bf10", "chunk": "diff --git a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java\nindex 01dcdad96..1632448ca 100644\n--- a/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java\n+++ b/dockstore-integration-testing/src/test/java/io/dockstore/client/cli/NextflowHandlerIT.java\n\n@@ -16,7 +16,7 @@ import org.junit.Test;\n \n /**\n  *  TODO: Use fork with tagged version\n- *  TODO: Check paths, something's not right\n+ *  TODO: Check paths, it looks like it's relative to the file that imported it but this means it won't be unique\n  */\n public class NextflowHandlerIT extends BaseIT {\n     protected static SourceCodeRepoInterface sourceCodeRepoInterface;\n"}}, {"oid": "ee091944b85cefd98babc5c334c85ea0be87bf10", "url": "https://github.com/dockstore/dockstore/commit/ee091944b85cefd98babc5c334c85ea0be87bf10", "message": "PR changes", "committedDate": "2020-10-08T21:54:29Z", "type": "commit"}, {"oid": "c4ed75b5777aa14d2edffd80bf28aa75b2bbfc24", "url": "https://github.com/dockstore/dockstore/commit/c4ed75b5777aa14d2edffd80bf28aa75b2bbfc24", "message": "Fix checkstyle", "committedDate": "2020-10-08T22:00:03Z", "type": "commit"}, {"oid": "9b9ad09080872f7ab8918515a979f883d5ce574b", "url": "https://github.com/dockstore/dockstore/commit/9b9ad09080872f7ab8918515a979f883d5ce574b", "message": "Merge branch 'develop' into feature/3761/NextflowDSL2", "committedDate": "2020-10-09T14:17:40Z", "type": "commit"}, {"oid": "979b6771cb7197ea781144afa33594b571b0226b", "url": "https://github.com/dockstore/dockstore/commit/979b6771cb7197ea781144afa33594b571b0226b", "message": "Forked repo", "committedDate": "2020-10-09T14:18:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2NTE5MQ==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502465191", "bodyText": "Pending Java 12, might be more readable as a resource file.\nBut I don't feel strongly about it, I think I can get the general idea here.", "author": "denis-yuen", "createdAt": "2020-10-09T14:26:13Z", "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.dockstore.webservice.languages;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class NextflowHandlerTest {\n+\n+    @Test\n+    public void testGetRelativeImportPathFromLine() {\n+        Assert.assertEquals(\"modules/rnaseq.nf\", NextflowHandler.getRelativeImportPathFromLine(\"include { RNASEQ } from './modules/rnaseq'\", \"/main.nf\"));\n+        Assert.assertEquals(\"modules/rnaseq.nf\", NextflowHandler.getRelativeImportPathFromLine(\"include { RNASEQ } from './modules/rnaseq.nf'\", \"/main.nf\"));\n+        // TODO: Replace with Java 12's http://openjdk.java.net/jeps/326\n+        Assert.assertEquals(\"modules.nf\", NextflowHandler.getRelativeImportPathFromLine(\"include { \\n\"", "originalCommit": "979b6771cb7197ea781144afa33594b571b0226b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad3b7d31898935fdc6cf55e6735072142ef3166a", "chunk": "diff --git a/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java b/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java\nindex cbd3ef7b3..069f6aba3 100644\n--- a/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java\n+++ b/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java\n\n@@ -1,5 +1,7 @@\n package io.dockstore.webservice.languages;\n \n+import java.util.regex.Matcher;\n+\n import org.junit.Assert;\n import org.junit.Test;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1MzY3OA==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502553678", "bodyText": "A test that a commented out line doesn't return an import would be a bonus, e.g.,\n#include { RNASEQ } from './modules/rnaseq'\", \"/main.nf\n\n(or whatever the syntax for a comment in NF is).", "author": "coverbeck", "createdAt": "2020-10-09T16:47:02Z", "path": "dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package io.dockstore.webservice.languages;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class NextflowHandlerTest {\n+\n+    @Test\n+    public void testGetRelativeImportPathFromLine() {", "originalCommit": "979b6771cb7197ea781144afa33594b571b0226b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ad3b7d31898935fdc6cf55e6735072142ef3166a", "chunk": "diff --git a/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java b/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java\nindex cbd3ef7b3..069f6aba3 100644\n--- a/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java\n+++ b/dockstore-webservice/src/test/java/io/dockstore/webservice/languages/NextflowHandlerTest.java\n\n@@ -1,5 +1,7 @@\n package io.dockstore.webservice.languages;\n \n+import java.util.regex.Matcher;\n+\n import org.junit.Assert;\n import org.junit.Test;\n \n"}}, {"oid": "ad3b7d31898935fdc6cf55e6735072142ef3166a", "url": "https://github.com/dockstore/dockstore/commit/ad3b7d31898935fdc6cf55e6735072142ef3166a", "message": "Add another test", "committedDate": "2020-10-09T17:21:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1NTMyOA==", "url": "https://github.com/dockstore/dockstore/pull/3852#discussion_r502655328", "bodyText": "Maybe should be             import path from CWL, NFL, etc.  file", "author": "wshands", "createdAt": "2020-10-09T20:25:37Z", "path": "dockstore-webservice/src/main/java/io/dockstore/webservice/languages/AbstractLanguageHandler.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.dockstore.webservice.languages;\n+\n+import java.util.Map;\n+\n+import io.dockstore.common.DescriptorLanguage;\n+import io.dockstore.webservice.core.SourceFile;\n+import io.dockstore.webservice.core.Version;\n+import io.dockstore.webservice.helpers.SourceCodeRepoInterface;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract methods that the LanguageHandlerInterface do not need to have (ex. specific to Dockstore and not plugins)\n+ * Used by CWLHandler and NextflowHandler\n+ */\n+public abstract class AbstractLanguageHandler {\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractLanguageHandler.class);\n+\n+    /**\n+     *\n+     * @return  The file type that resolved imports will be automatically set to\n+     */\n+    protected abstract DescriptorLanguage.FileType getFileType();\n+\n+    /**\n+     * Grabs a import file from Git based on its absolute path and add to imports mapping\n+     * @param repositoryId              identifies the git repository that we wish to use, normally something like 'organization/repo_name`\n+     * @param version                   version of the files to get\n+     * @param imports                   mapping of filenames to imports\n+     * @param givenImportPath           import path from CWL file", "originalCommit": "ad3b7d31898935fdc6cf55e6735072142ef3166a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}