{"pr_number": 1006, "pr_title": "FINERACT-822 add MissingCasesInEnumSwitch", "pr_createdAt": "2020-06-08T02:52:09Z", "pr_url": "https://github.com/apache/fineract/pull/1006", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODM2OQ==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437128369", "bodyText": "If you look in AccountNumberGenerator.generateAccountNumber(), it seems that we currently are not generating any prefix for SHARES type accounts. Similarly AccountNumberFormatEnumerations does not provide a prefix for SHARES accounts. So means there are currently no valid prefixes for SHARES accounts - and therefore returning an empty list (which was also existing behaviour) would seem to be the correct behaviour.\nTherefore to me this is therefore not a \"TODO\": returning the empty list is correct as the functionality stands. Of course we could implement account prefixes for SHARES accounts but that would not require just fixing this code, but all the other places as well...", "author": "ptuomola", "createdAt": "2020-06-09T04:18:06Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/accountnumberformat/data/AccountNumberFormatDataValidator.java", "diffHunk": "@@ -127,7 +130,9 @@ public void validateForCreate(final String json) {\n         case GROUP:\n             validAccountNumberPrefixes = AccountNumberFormatEnumerations.accountNumberPrefixesForGroups;\n             break;\n-        default:\n+        case SHARES:\n+            LOG.error(\"TODO Implement determineValidAccountNumberPrefixes for SHARES\");\n+            break;\n         }", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyODYyNQ==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437128625", "bodyText": "Same here as above - I don't think we need to log an error, I would just have a comment stating no prefixes for SHARES accounts:\ncase SHARES:\n// SHARES accounts have no prefix\nbreak;", "author": "ptuomola", "createdAt": "2020-06-09T04:19:19Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/accountnumberformat/service/AccountNumberFormatReadPlatformServiceImpl.java", "diffHunk": "@@ -145,7 +149,9 @@ public void determinePrefixTypesForAccounts(Map<String, List<EnumOptionData>> ac\n             case GROUP :\n                 accountNumberPrefixTypesSet = AccountNumberFormatEnumerations.accountNumberPrefixesForGroups;\n             break;\n-            default:\n+            case SHARES:\n+                LOG.error(\"TODO Implement determinePrefixTypesForAccounts for SHARES\");\n+            break;", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTg0OA==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437129848", "bodyText": "I wonder if this enum value is actually used for anything? I can't find any reference to it in the Fineract code. The code that processes all the other repaymentRescheduleTypeOptions (e.g. WorkingDaysUtil.getOffSetDateIfNonWorkingDay()) does not have a case or any logic for this value.", "author": "ptuomola", "createdAt": "2020-06-09T04:25:04Z", "path": "fineract-provider/src/main/java/org/apache/fineract/organisation/workingdays/domain/WorkingDaysEnumerations.java", "diffHunk": "@@ -53,7 +53,10 @@ public static EnumOptionData repaymentRescheduleType(final RepaymentRescheduleTy\n                 optionData = new EnumOptionData(RepaymentRescheduleType.MOVE_TO_PREVIOUS_WORKING_DAY.getValue().longValue(),RepaymentRescheduleType.MOVE_TO_PREVIOUS_WORKING_DAY.getCode(),\n                         \"move to previous working day\");\n                 break;\n-            default:\n+            case MOVE_TO_NEXT_MEETING_DAY:", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyMDg1MA==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r440320850", "bodyText": "Yeah it doesn't seems to be used anywhere. It was added by @nazeer1100126 and he might have a plan for its addition.", "author": "percyashu", "createdAt": "2020-06-15T17:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyOTg0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMTE5NQ==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437131195", "bodyText": "Is there a reason why we can't just return the optionData for WHOLE_TERM just like for all the other values?", "author": "ptuomola", "createdAt": "2020-06-09T04:30:43Z", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/interestratechart/service/InterestRateChartEnumerations.java", "diffHunk": "@@ -52,7 +56,9 @@ public static EnumOptionData periodType(final PeriodFrequencyType type) {\n                 optionData = new EnumOptionData(PeriodFrequencyType.YEARS.getValue().longValue(),\n                         PeriodFrequencyType.YEARS.getCode(), \"Years\");\n             break;\n-            default:\n+            case WHOLE_TERM:\n+                LOG.error(\"TODO Implement repaymentPeriodFrequencyType for WHOLE_TERM\");\n+            break;", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMjIzNw==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437832237", "bodyText": "Looks like the whole repayment / interest rate calculation etc logic for WHOLE_TERM is missing in a number of functions.\nWhat we would need to work out is: is this intentional (i.e. the routines, without any handling for WHOLE_TERM, will still return the right value) or is this actually broken even now? I'd suggest trying this out e.g. through the community app to see if loan products with whole term interest actually work correctly in scenarios where these functions are called.\nIf they do, then the right thing to do would be to add a case that does nothing for WHOLE_TERM so we have made this behaviour explicit. If they don't work, then we should have an error message with a TO DO.", "author": "ptuomola", "createdAt": "2020-06-10T02:56:37Z", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/domain/Loan.java", "diffHunk": "@@ -4501,7 +4505,9 @@ private LocalDate getMaxDateLimitForNewRepayment(final PeriodFrequencyType perio\n             break;\n             case INVALID:\n             break;\n-            default:", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTUxMg==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r440341512", "bodyText": "I look into this and Loan products with whole term seem to work .", "author": "percyashu", "createdAt": "2020-06-15T17:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMjIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxMTQ1Mw==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r444411453", "bodyText": "But then should we be logging error in other places below, or do like here? isn't it inconsistent how is now?", "author": "vorburger", "createdAt": "2020-06-23T18:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMjIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxNjA4Nw==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r444616087", "bodyText": "As far as I can see, there are three options for this WHOLE_TERM logic (and other \"missing cases\"):\n\n\nThese functions are not needed when enum is set to WHOLE_TERM and are never called with that value (e.g. there is no need to determine max date for repayment when you are paying for the whole term in one go). In that case the logic for WHOLE_TERM is not needed in the functions and we should not log an error as there is nothing to be done.\n\n\nThese functions are needed when enum is set to WHOLE_TERM and are called with that value. However the default logic - i.e. do nothing in the switch - results in the function returning the right value. If that's the case, then we should just make this explicit: add a case for WHOLE_TERM that does nothing, and a comment that this has been added for a reason. But no need to log an error as the \"do nothing\" behaviour is correct.\n\n\nThese functions are needed when enum is set to WHOLE_TERM but the logic to handle WHOLE_TERM has not been implemented. If that's the case, the function is currently returning an incorrect value when called with WHOLE_TERM. We should then add the case and a log statement to output a TODO to indicate that the logic is missing.\n\n\nFrom response of @percyashu to my earlier question, I understood that in this case the answer is either #1 or #2 - so logging nothing is correct. But in other switch statements in the code, the answer may be #3 so logging an error / TODO would be correct.\nIn my view, to see if this PR is correct, we'd need to categorise each of the switch statements to one of the above cases. I started doing that and went through them once earlier, but there are a couple of cases (like this WHOLE_TERM) where it's difficult to be sure just by looking at the code...", "author": "ptuomola", "createdAt": "2020-06-24T02:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMjIzNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzNzU1Ng==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437837556", "bodyText": "If you look in createNote(), you can see that we only create specific types of notes - i.e. a subset of the enum types available. So we should never get a note with one of these types. In my view, therefore I think it would be OK to have a default that returns \"INVALIDTYPE\" for any other type.", "author": "ptuomola", "createdAt": "2020-06-10T03:19:36Z", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/note/api/NotesApiResource.java", "diffHunk": "@@ -228,7 +232,12 @@ private CommandWrapper getResourceDetails(final NoteType type, final Long resour\n                 resourceNameForPermissions = \"GROUPNOTE\";\n                 resourceDetails.withGroupId(resourceId);\n             break;\n-            default:\n+            case SHARE_ACCOUNT:", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzOTI2OA==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437839268", "bodyText": "As far as I can see, this case should never happen: we should not have a savings account with a charge type of PERCENT_OF_DISBURSEMENT_AMOUNT, as that just doesn't make sense (and is not even valid as set in validValuesForSavings()). So the behaviour for this case in these functions should be the same as for the other values that are not valid - e.g. PERCENT_OF_AMOUNT_AND_INTEREST", "author": "ptuomola", "createdAt": "2020-06-10T03:27:11Z", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/savings/domain/SavingsAccountCharge.java", "diffHunk": "@@ -292,7 +296,9 @@ private void populateDerivedFields(final BigDecimal transactionAmount, final Big\n                 this.amountWaived = null;\n                 this.amountWrittenOff = null;\n             break;\n-            default:\n+            case PERCENT_OF_DISBURSEMENT_AMOUNT:", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg0MDQ1Nw==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r437840457", "bodyText": "I don't think a lockinPeriod of WHOLE_TERM makes sense functionally - so shouldn't the behaviour for this to be the same as for period INVALID?", "author": "ptuomola", "createdAt": "2020-06-10T03:32:36Z", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/shareaccounts/serialization/ShareAccountDataSerializer.java", "diffHunk": "@@ -927,7 +931,9 @@ private LocalDate deriveLockinPeriodDuration(final Integer lockinPeriod, final P\n                 case YEARS:\n                     lockinDate = purchaseDate.plusYears(lockinPeriod) ;\n                     break ;\n-                default:\n+                case WHOLE_TERM:", "originalCommit": "4a8b9d80dc29244abbe6da2a6c90d712e4741090", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ca483e2b5faef53a78f94b15f653b300db7b1cc9", "url": "https://github.com/apache/fineract/commit/ca483e2b5faef53a78f94b15f653b300db7b1cc9", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-06-12T00:47:52Z", "type": "forcePushed"}, {"oid": "8a6fc4a6e5d586852df5b5a3abcdd2780bef28ea", "url": "https://github.com/apache/fineract/commit/8a6fc4a6e5d586852df5b5a3abcdd2780bef28ea", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-06-12T02:54:11Z", "type": "forcePushed"}, {"oid": "1a6d034bc3705a2173ace3e59078dc9b2cc38565", "url": "https://github.com/apache/fineract/commit/1a6d034bc3705a2173ace3e59078dc9b2cc38565", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-06-15T14:28:02Z", "type": "forcePushed"}, {"oid": "0cf3d84b7115ebb291c2166803d0c47163cc450c", "url": "https://github.com/apache/fineract/commit/0cf3d84b7115ebb291c2166803d0c47163cc450c", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-06-15T16:30:51Z", "type": "forcePushed"}, {"oid": "4ad9244750a977a9d817f2b2bbf14e5f0593f81b", "url": "https://github.com/apache/fineract/commit/4ad9244750a977a9d817f2b2bbf14e5f0593f81b", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-06-20T10:36:39Z", "type": "forcePushed"}, {"oid": "80b62f8ce1494bb80c09675b7b13708eabc9438c", "url": "https://github.com/apache/fineract/commit/80b62f8ce1494bb80c09675b7b13708eabc9438c", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-06-20T10:50:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2MjU4Mw==", "url": "https://github.com/apache/fineract/pull/1006#discussion_r444762583", "bodyText": "Can this whole term case be implemented? Or is it too complicated? Can we have an issue opened for it? How will the whole term case even work?", "author": "awasum", "createdAt": "2020-06-24T09:23:19Z", "path": "fineract-provider/src/main/java/org/apache/fineract/portfolio/loanaccount/loanschedule/domain/DefaultPaymentPeriodsInOneYearCalculator.java", "diffHunk": "@@ -45,7 +49,9 @@ public Integer calculate(final PeriodFrequencyType repaymentFrequencyType) {\n             case INVALID:\n                 paymentPeriodsInOneYear = Integer.valueOf(0);\n             break;\n-            default:\n+            case WHOLE_TERM:\n+                LOG.error(\"TODO Implement repaymentFrequencyType for WHOLE_TERM\");", "originalCommit": "80b62f8ce1494bb80c09675b7b13708eabc9438c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8d28fd33163241f23b689463242d0ce3a7fa4247", "url": "https://github.com/apache/fineract/commit/8d28fd33163241f23b689463242d0ce3a7fa4247", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-07-14T16:59:08Z", "type": "commit"}, {"oid": "8d28fd33163241f23b689463242d0ce3a7fa4247", "url": "https://github.com/apache/fineract/commit/8d28fd33163241f23b689463242d0ce3a7fa4247", "message": "FINERACT-822 add MissingCasesInEnumSwitch", "committedDate": "2020-07-14T16:59:08Z", "type": "forcePushed"}]}