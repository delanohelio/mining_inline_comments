{"pr_number": 468, "pr_title": "OptaPlanner quickstart", "pr_createdAt": "2020-02-21T12:27:22Z", "pr_url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468", "timeline": [{"oid": "433a67978ab9231f0c283404444a329bc8df0282", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/433a67978ab9231f0c283404444a329bc8df0282", "message": "Add unit tests + adjust readme", "committedDate": "2020-02-21T18:23:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjIzNA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383152234", "bodyText": "Any reason not to have this bean in its own package?", "author": "ia3andy", "createdAt": "2020-02-24T09:25:39Z", "path": "optaplanner-quickstart/src/main/java/org/acme/optaplanner/DemoDataGenerator.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.acme.optaplanner;", "originalCommit": "433a67978ab9231f0c283404444a329bc8df0282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTU2Mw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383161563", "bodyText": "Do we have any other examples that have data access specific code? What package name do they use?", "author": "ge0ffrey", "createdAt": "2020-02-24T09:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MjQ3Mg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383162472", "bodyText": "Proposal for subpackage:\nA) persistence\nB) bootstrap\nC) lifecycle\nX) Keep it in the top package (status quo)\nWdyt?", "author": "ge0ffrey", "createdAt": "2020-02-24T09:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2NjMxMA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383166310", "bodyText": "I do like B)", "author": "ia3andy", "createdAt": "2020-02-24T09:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "fbbd1cd53595c1ac160f8e24b1539c74c6828a6d", "chunk": "diff --git a/optaplanner-quickstart/src/main/java/org/acme/optaplanner/DemoDataGenerator.java b/optaplanner-quickstart/src/main/java/org/acme/optaplanner/bootstrap/DemoDataGenerator.java\nsimilarity index 99%\nrename from optaplanner-quickstart/src/main/java/org/acme/optaplanner/DemoDataGenerator.java\nrename to optaplanner-quickstart/src/main/java/org/acme/optaplanner/bootstrap/DemoDataGenerator.java\nindex ebbb10cf..ecefd573 100644\n--- a/optaplanner-quickstart/src/main/java/org/acme/optaplanner/DemoDataGenerator.java\n+++ b/optaplanner-quickstart/src/main/java/org/acme/optaplanner/bootstrap/DemoDataGenerator.java\n\n@@ -1,4 +1,4 @@\n-package org.acme.optaplanner;\n+package org.acme.optaplanner.bootstrap;\n \n import java.time.DayOfWeek;\n import java.time.LocalTime;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MzU2Nw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383153567", "bodyText": "No equals and hashCode on data beans is risky :)", "author": "ia3andy", "createdAt": "2020-02-24T09:28:25Z", "path": "optaplanner-quickstart/src/main/java/org/acme/optaplanner/domain/Lesson.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.acme.optaplanner.domain;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+import org.optaplanner.core.api.domain.variable.PlanningVariable;\n+\n+@PlanningEntity\n+@Entity\n+public class Lesson extends PanacheEntityBase {\n+\n+    @PlanningId\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    @NotNull\n+    private Long id;\n+\n+    @NotBlank\n+    private String subject;\n+    @NotBlank\n+    private String teacher;\n+    @NotBlank\n+    private String studentGroup;\n+\n+    @PlanningVariable(valueRangeProviderRefs = \"timeslotRange\")\n+    @ManyToOne\n+    private Timeslot timeslot;\n+    @PlanningVariable(valueRangeProviderRefs = \"roomRange\")\n+    @ManyToOne\n+    private Room room;\n+\n+    public Lesson() {\n+    }\n+\n+    public Lesson(String subject, String teacher, String studentGroup) {\n+        this.subject = subject.trim();\n+        this.teacher = teacher.trim();\n+        this.studentGroup = studentGroup.trim();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getSubject() {\n+        return subject;\n+    }\n+\n+    public String getTeacher() {\n+        return teacher;\n+    }\n+\n+    public String getStudentGroup() {\n+        return studentGroup;\n+    }\n+\n+    public Timeslot getTimeslot() {\n+        return timeslot;\n+    }\n+\n+    public void setTimeslot(Timeslot timeslot) {\n+        this.timeslot = timeslot;\n+    }\n+\n+    public Room getRoom() {\n+        return room;\n+    }\n+\n+    public void setRoom(Room room) {\n+        this.room = room;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return subject + \"(\" + id + \")\";\n+    }\n+", "originalCommit": "433a67978ab9231f0c283404444a329bc8df0282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1ODIxMg==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383158212", "bodyText": "Why? :)\nI'd like to keep this example as simple as possible, while still visually showing the full power of OptaPlanner on Quarkus. There is no reliance anywhere on equals/hashcode of those domain objects in this example. And defining the equals semantics is making a choice (for example is Lesson.room included in the check?)", "author": "ge0ffrey", "createdAt": "2020-02-24T09:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MzU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MDg1MA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383160850", "bodyText": "I'd like to code the entire example from scratch in 20 minutes (except for the JS UI). So anything that isn't really needed, I 'd like to avoid. I hope that makes sense :)", "author": "ge0ffrey", "createdAt": "2020-02-24T09:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MzU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTY3NQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383161675", "bodyText": "I accepted the PR anyway, IMO, a lot of bugs happens because of data with no equals/hashCode, data bean often get used in Set, or Maps or simply for comparison in tests. I know that quickstarts are supposed to be as clean as possible, and again maybe another OCD of mine \ud83d\ude02", "author": "ia3andy", "createdAt": "2020-02-24T09:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MzU2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MzY0Mw==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383153643", "bodyText": "No equals and hashCode on data beans is risky :)", "author": "ia3andy", "createdAt": "2020-02-24T09:28:36Z", "path": "optaplanner-quickstart/src/main/java/org/acme/optaplanner/domain/Room.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.acme.optaplanner.domain;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.NotNull;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+\n+@Entity\n+public class Room extends PanacheEntityBase { // extends PanacheEntityBase because we want to annotate the id\n+\n+    //    @PlanningId\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    @NotNull\n+    private Long id;\n+\n+    @NotBlank\n+    private String name;\n+\n+    public Room() {\n+    }\n+\n+    public Room(String name) {\n+        this.name = name.trim();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }", "originalCommit": "433a67978ab9231f0c283404444a329bc8df0282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MzczOA==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383153738", "bodyText": "No equals and hashCode on data beans is risky :)", "author": "ia3andy", "createdAt": "2020-02-24T09:28:46Z", "path": "optaplanner-quickstart/src/main/java/org/acme/optaplanner/domain/TimeTable.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.acme.optaplanner.domain;\n+\n+import java.util.List;\n+\n+import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;\n+import org.optaplanner.core.api.domain.solution.PlanningScore;\n+import org.optaplanner.core.api.domain.solution.PlanningSolution;\n+import org.optaplanner.core.api.domain.solution.drools.ProblemFactCollectionProperty;\n+import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;\n+import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n+import org.optaplanner.core.api.solver.SolverStatus;\n+\n+@PlanningSolution\n+public class TimeTable {\n+\n+    @ProblemFactCollectionProperty\n+    @ValueRangeProvider(id = \"timeslotRange\")\n+    private List<Timeslot> timeslotList;\n+    @ProblemFactCollectionProperty\n+    @ValueRangeProvider(id = \"roomRange\")\n+    private List<Room> roomList;\n+    @PlanningEntityCollectionProperty\n+    private List<Lesson> lessonList;\n+\n+    @PlanningScore\n+    private HardSoftScore score;\n+\n+    // Ignored by OptaPlanner, used by the UI to display solve or stop solving button\n+    private SolverStatus solverStatus;\n+\n+    public TimeTable() {\n+    }\n+\n+    public TimeTable(List<Timeslot> timeslotList, List<Room> roomList, List<Lesson> lessonList) {\n+        this.timeslotList = timeslotList;\n+        this.roomList = roomList;\n+        this.lessonList = lessonList;\n+    }\n+\n+    public List<Timeslot> getTimeslotList() {\n+        return timeslotList;\n+    }\n+\n+    public List<Room> getRoomList() {\n+        return roomList;\n+    }\n+\n+    public List<Lesson> getLessonList() {\n+        return lessonList;\n+    }\n+\n+    public HardSoftScore getScore() {\n+        return score;\n+    }\n+\n+    public SolverStatus getSolverStatus() {\n+        return solverStatus;\n+    }\n+\n+    public void setSolverStatus(SolverStatus solverStatus) {\n+        this.solverStatus = solverStatus;\n+    }\n+", "originalCommit": "433a67978ab9231f0c283404444a329bc8df0282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1Mzc5MQ==", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/468#discussion_r383153791", "bodyText": "No equals and hashCode on data beans is risky :)", "author": "ia3andy", "createdAt": "2020-02-24T09:28:53Z", "path": "optaplanner-quickstart/src/main/java/org/acme/optaplanner/domain/Timeslot.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.acme.optaplanner.domain;\n+\n+import java.time.DayOfWeek;\n+import java.time.LocalTime;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.validation.constraints.NotNull;\n+\n+import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n+\n+@Entity\n+public class Timeslot extends PanacheEntityBase {\n+\n+//    @PlanningId\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.AUTO)\n+    @NotNull\n+    private Long id;\n+\n+    @NotNull\n+    private DayOfWeek dayOfWeek;\n+    @NotNull\n+    private LocalTime startTime;\n+    @NotNull\n+    private LocalTime endTime;\n+\n+    public Timeslot() {\n+    }\n+\n+    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {\n+        this.dayOfWeek = dayOfWeek;\n+        this.startTime = startTime;\n+        this.endTime = endTime;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public DayOfWeek getDayOfWeek() {\n+        return dayOfWeek;\n+    }\n+\n+    public LocalTime getStartTime() {\n+        return startTime;\n+    }\n+\n+    public LocalTime getEndTime() {\n+        return endTime;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return dayOfWeek + \" \" + startTime.toString();\n+    }\n+", "originalCommit": "433a67978ab9231f0c283404444a329bc8df0282", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "fbbd1cd53595c1ac160f8e24b1539c74c6828a6d", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/fbbd1cd53595c1ac160f8e24b1539c74c6828a6d", "message": "OptaPlanner quickstart", "committedDate": "2020-02-24T12:28:27Z", "type": "forcePushed"}, {"oid": "9aca0aedb2247a054c14d75ceb2bdded50abbe5d", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/9aca0aedb2247a054c14d75ceb2bdded50abbe5d", "message": "OptaPlanner quickstart", "committedDate": "2020-02-24T12:35:06Z", "type": "forcePushed"}, {"oid": "fc8392232a8ca5d1f013fd58ac64edc5aa9f3772", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/fc8392232a8ca5d1f013fd58ac64edc5aa9f3772", "message": "OptaPlanner quickstart", "committedDate": "2020-02-24T14:02:50Z", "type": "commit"}, {"oid": "fc8392232a8ca5d1f013fd58ac64edc5aa9f3772", "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/fc8392232a8ca5d1f013fd58ac64edc5aa9f3772", "message": "OptaPlanner quickstart", "committedDate": "2020-02-24T14:02:50Z", "type": "forcePushed"}]}