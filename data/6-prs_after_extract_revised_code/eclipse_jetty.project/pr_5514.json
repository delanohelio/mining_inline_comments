{"pr_number": 5514, "pr_title": "Fixes #5498 ServletHolder cleanup", "pr_createdAt": "2020-10-26T13:39:02Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5514", "timeline": [{"oid": "2047312fa65598b82c7d5b32b508ebcf3cce6fb4", "url": "https://github.com/eclipse/jetty.project/commit/2047312fa65598b82c7d5b32b508ebcf3cce6fb4", "message": "Fixes #55498 ServletHolder cleanup\n\nVarious cleanups including:\n + renaming multiple `_servlet` fields in inner classes to avoid confusion\n + better comments in prepare method to describe why it is needed\n + call prepare from Invoker servlet\n + The `_servlet` field is not set until after the servlet is initialized\n + Consistent wrapping of `SingleThreadedWrapper` now in `initServlet`\n + The `getServlet` method now looks the volatile `_servlet` to avoid locking if possible\n + The `handle` method now calls `getServletInstance` as servlet will have been initialized in `prepare`", "committedDate": "2020-10-26T13:37:51Z", "type": "commit"}, {"oid": "b1c26d212d7292e93f7ff30a9314f0fb644e9a14", "url": "https://github.com/eclipse/jetty.project/commit/b1c26d212d7292e93f7ff30a9314f0fb644e9a14", "message": "Fixes #5498 ServletHolder cleanup\n\nVarious cleanups including:\n + renaming multiple `_servlet` fields in inner classes to avoid confusion\n + better comments in prepare method to describe why it is needed\n + call prepare from Invoker servlet\n + The `_servlet` field is not set until after the servlet is initialized\n + Consistent wrapping of `SingleThreadedWrapper` now in `initServlet`\n + The `getServlet` method now looks the volatile `_servlet` to avoid locking if possible\n + The `handle` method now calls `getServletInstance` as servlet will have been initialized in `prepare`\n + Found and fixed race with making unavaiable servlet available again", "committedDate": "2020-10-26T14:28:09Z", "type": "commit"}, {"oid": "5efa97ba62a44fad5992e2527c14f28811e3df17", "url": "https://github.com/eclipse/jetty.project/commit/5efa97ba62a44fad5992e2527c14f28811e3df17", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5498-ServletHolder-cleanup", "committedDate": "2020-10-26T15:44:43Z", "type": "commit"}, {"oid": "58afa75aba52b1f80f066651276172725fceda40", "url": "https://github.com/eclipse/jetty.project/commit/58afa75aba52b1f80f066651276172725fceda40", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5498-ServletHolder-cleanup", "committedDate": "2020-10-27T07:35:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5Mzc1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r512693751", "bodyText": "This doesn't take into account the potential numerical overflow of the timeout timestamp.", "author": "lorban", "createdAt": "2020-10-27T13:32:43Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -1229,36 +1244,48 @@ public UnavailableServlet(UnavailableException unavailableException, Servlet ser\n             }\n             else\n             {\n-                _servlet = servlet;\n-                _available = System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds());\n+                _unavailableServlet = servlet;\n+                _available.set(System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds()));", "originalCommit": "58afa75aba52b1f80f066651276172725fceda40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc3ebce5ac257007e1b9d1b1bc6042bb5417144", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\nindex 330c2ae0ca..eef34d1f81 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n\n@@ -1245,7 +1238,10 @@ public class ServletHolder extends Holder<Servlet> implements UserIdentity.Scope\n             else\n             {\n                 _unavailableServlet = servlet;\n-                _available.set(System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds()));\n+                long start = System.nanoTime();\n+                while (start == 0)\n+                    start = System.nanoTime();\n+                _unavailableStart = new AtomicLong(start);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5MzkwOA==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r512693908", "bodyText": "This doesn't take into account the potential numerical overflow of the timeout timestamp.", "author": "lorban", "createdAt": "2020-10-27T13:32:55Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -1229,36 +1244,48 @@ public UnavailableServlet(UnavailableException unavailableException, Servlet ser\n             }\n             else\n             {\n-                _servlet = servlet;\n-                _available = System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds());\n+                _unavailableServlet = servlet;\n+                _available.set(System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds()));\n             }\n         }\n \n         @Override\n         public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException\n         {\n-            if (_available == -1)\n-                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_NOT_FOUND);\n-            else if (System.nanoTime() < _available)\n-                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n-            else\n+            while (true)\n             {\n-                synchronized (ServletHolder.this)\n+                long available = _available.get();\n+                if (available < 0)", "originalCommit": "58afa75aba52b1f80f066651276172725fceda40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc3ebce5ac257007e1b9d1b1bc6042bb5417144", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\nindex 330c2ae0ca..eef34d1f81 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n\n@@ -1245,7 +1238,10 @@ public class ServletHolder extends Holder<Servlet> implements UserIdentity.Scope\n             else\n             {\n                 _unavailableServlet = servlet;\n-                _available.set(System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds()));\n+                long start = System.nanoTime();\n+                while (start == 0)\n+                    start = System.nanoTime();\n+                _unavailableStart = new AtomicLong(start);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5NDAzNg==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r512694036", "bodyText": "This doesn't take into account the potential numerical overflow of the timeout timestamp.", "author": "lorban", "createdAt": "2020-10-27T13:33:05Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -1229,36 +1244,48 @@ public UnavailableServlet(UnavailableException unavailableException, Servlet ser\n             }\n             else\n             {\n-                _servlet = servlet;\n-                _available = System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds());\n+                _unavailableServlet = servlet;\n+                _available.set(System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds()));\n             }\n         }\n \n         @Override\n         public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException\n         {\n-            if (_available == -1)\n-                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_NOT_FOUND);\n-            else if (System.nanoTime() < _available)\n-                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n-            else\n+            while (true)\n             {\n-                synchronized (ServletHolder.this)\n+                long available = _available.get();\n+                if (available < 0)\n+                {\n+                    ((HttpServletResponse)res).sendError(HttpServletResponse.SC_NOT_FOUND);\n+                    return;\n+                }\n+\n+                if (available == 0 || System.nanoTime() < available)", "originalCommit": "58afa75aba52b1f80f066651276172725fceda40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc3ebce5ac257007e1b9d1b1bc6042bb5417144", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\nindex 330c2ae0ca..eef34d1f81 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n\n@@ -1245,7 +1238,10 @@ public class ServletHolder extends Holder<Servlet> implements UserIdentity.Scope\n             else\n             {\n                 _unavailableServlet = servlet;\n-                _available.set(System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds()));\n+                long start = System.nanoTime();\n+                while (start == 0)\n+                    start = System.nanoTime();\n+                _unavailableStart = new AtomicLong(start);\n             }\n         }\n \n"}}, {"oid": "8bc3ebce5ac257007e1b9d1b1bc6042bb5417144", "url": "https://github.com/eclipse/jetty.project/commit/8bc3ebce5ac257007e1b9d1b1bc6042bb5417144", "message": "Updates from review:\n\n + fixed nanotime overflow\n + fixed several compiler warnings/suggestions", "committedDate": "2020-10-27T14:33:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NzQ0Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r512867443", "bodyText": "Can we come up with a solution that removes the while(true) - I think these are best avoided if possible.", "author": "janbartel", "createdAt": "2020-10-27T17:01:33Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -1229,36 +1237,52 @@ public UnavailableServlet(UnavailableException unavailableException, Servlet ser\n             }\n             else\n             {\n-                _servlet = servlet;\n-                _available = System.nanoTime() + TimeUnit.SECONDS.toNanos(unavailableException.getUnavailableSeconds());\n+                _unavailableServlet = servlet;\n+                long start = System.nanoTime();\n+                while (start == 0)\n+                    start = System.nanoTime();\n+                _unavailableStart = new AtomicLong(start);\n             }\n         }\n \n         @Override\n         public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException\n         {\n-            if (_available == -1)\n-                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_NOT_FOUND);\n-            else if (System.nanoTime() < _available)\n-                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n-            else\n+            while (true)", "originalCommit": "8bc3ebce5ac257007e1b9d1b1bc6042bb5417144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3MDA5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r512870090", "bodyText": "Will do, because I can in this situation.  However in general, the while(true) pattern is the best and simplest approach for atomic state machines.   More often than not, we've been wrong when we remove them... but I'm 99.9% sure in this case that we have it right.", "author": "gregw", "createdAt": "2020-10-27T17:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NzQ0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "546fc57b78c3070453333b4f41aa3a50aae59768", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\nindex eef34d1f81..553cbf56f8 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n\n@@ -1248,29 +1248,28 @@ public class ServletHolder extends Holder<Servlet> implements UserIdentity.Scope\n         @Override\n         public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException\n         {\n-            while (true)\n+            if (_unavailableStart == null)\n+            {\n+                ((HttpServletResponse)res).sendError(HttpServletResponse.SC_NOT_FOUND);\n+            }\n+            else\n             {\n-                if (_unavailableStart == null)\n-                {\n-                    ((HttpServletResponse)res).sendError(HttpServletResponse.SC_NOT_FOUND);\n-                    return;\n-                }\n-\n                 long start = _unavailableStart.get();\n \n                 if (start == 0 || System.nanoTime() - start < TimeUnit.SECONDS.toNanos(_unavailableException.getUnavailableSeconds()))\n                 {\n                     ((HttpServletResponse)res).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n-                    return;\n                 }\n-\n-                if (_unavailableStart.compareAndSet(start, 0))\n+                else if (_unavailableStart.compareAndSet(start, 0))\n                 {\n                     initServlet();\n                     Request baseRequest = Request.getBaseRequest(req);\n                     ServletHolder.this.prepare(baseRequest, req, res);\n                     ServletHolder.this.handle(baseRequest, req, res);\n-                    return;\n+                }\n+                else\n+                {\n+                    ((HttpServletResponse)res).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);\n                 }\n             }\n         }\n"}}, {"oid": "546fc57b78c3070453333b4f41aa3a50aae59768", "url": "https://github.com/eclipse/jetty.project/commit/546fc57b78c3070453333b4f41aa3a50aae59768", "message": "Updates from review:\n\n + removed while true from unavailable servlet", "committedDate": "2020-10-27T17:03:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NDE1Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r512874157", "bodyText": "Actually, this isn't right:  we should not call destroyInstance() because this will call servlet.destroy(), but at this stage we will not have called servlet.init().", "author": "janbartel", "createdAt": "2020-10-27T17:11:10Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java", "diffHunk": "@@ -557,33 +555,35 @@ private void makeUnavailable(final Throwable e)\n     private synchronized void initServlet()\n         throws ServletException\n     {\n+        Servlet servlet = _servlet;\n         try\n         {\n-            if (_servlet == null)\n-                _servlet = getInstance();\n-            if (_servlet == null)\n-                _servlet = newInstance();\n+            if (servlet == null || servlet instanceof UnavailableServlet)\n+                servlet = getInstance();\n+            if (servlet == null)\n+                servlet = newInstance();\n+            if (servlet instanceof javax.servlet.SingleThreadModel)\n+            {\n+                destroyInstance(servlet);", "originalCommit": "546fc57b78c3070453333b4f41aa3a50aae59768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4MTU2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5514#discussion_r513281560", "bodyText": "This has opened a rats nest  of issues!   It appears  that we do call predestroy on instances that have been passed in.  As we have tests for this potentially wrong behaviour, I think I will not fully address this in 9, but review during the merge to 10.\nFor now, I have split out a predestroy method, that is called on instances that have not yet been fully initialisd.", "author": "gregw", "createdAt": "2020-10-28T09:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NDE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c1649d42afb4465bf3f297893642022f5e2ceb0c", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\nindex 553cbf56f8..bf38a6204f 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHolder.java\n\n@@ -552,19 +569,22 @@ public class ServletHolder extends Holder<Servlet> implements UserIdentity.Scope\n         }\n     }\n \n-    private synchronized void initServlet()\n+    private void initServlet()\n         throws ServletException\n     {\n-        Servlet servlet = _servlet;\n+        // must be called with lock held and _servlet==null\n+        if (_servlet != null)\n+            throw new IllegalStateException(\"Servlet already initialised: \" + _servlet);\n+\n+        Servlet servlet = null;\n         try\n         {\n-            if (servlet == null || servlet instanceof UnavailableServlet)\n-                servlet = getInstance();\n+            servlet = getInstance();\n             if (servlet == null)\n                 servlet = newInstance();\n             if (servlet instanceof javax.servlet.SingleThreadModel)\n             {\n-                destroyInstance(servlet);\n+                predestroyServlet(servlet);\n                 servlet = new SingleThreadedWrapper();\n             }\n \n"}}, {"oid": "c1649d42afb4465bf3f297893642022f5e2ceb0c", "url": "https://github.com/eclipse/jetty.project/commit/c1649d42afb4465bf3f297893642022f5e2ceb0c", "message": "Updates from review:\n\n + Do not destroy servlets unless init has been called.\n + Added TODOs about calling predestroy on instances not created by the holder.", "committedDate": "2020-10-28T08:46:41Z", "type": "commit"}, {"oid": "ea6126aba9bf21de5bf3b42d4ef0dde032e7d16c", "url": "https://github.com/eclipse/jetty.project/commit/ea6126aba9bf21de5bf3b42d4ef0dde032e7d16c", "message": "Updates from review:\n\n + Do not destroy servlets unless init has been called.\n + Added TODOs about calling predestroy on instances not created by the holder.\n + improved dump and toString", "committedDate": "2020-10-28T09:05:02Z", "type": "commit"}]}