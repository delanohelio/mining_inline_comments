{"pr_number": 5563, "pr_title": "Issue #5320 - using jetty-websocket-httpclient.xml within webapp Jetty 10", "pr_createdAt": "2020-11-03T08:00:18Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5563", "timeline": [{"oid": "64655f7b7e049c0ed9dc6856d8e955f829fa027a", "url": "https://github.com/eclipse/jetty.project/commit/64655f7b7e049c0ed9dc6856d8e955f829fa027a", "message": "Issue #5320 - allow websocket client jars to be provided by server\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-03T06:16:27Z", "type": "commit"}, {"oid": "8d21bb7b6359e3519003cfa188c2aa59109f9229", "url": "https://github.com/eclipse/jetty.project/commit/8d21bb7b6359e3519003cfa188c2aa59109f9229", "message": "Issue #5320 - fix the XmlHttpClientProvider for jetty 10, re-enable tests\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-03T06:17:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE3OTgyMg==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517179822", "bodyText": "Fix indentation.", "author": "sbordet", "createdAt": "2020-11-04T08:46:14Z", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -389,11 +387,12 @@ public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Ex\n             .mavenLocalRepository(System.getProperty(\"mavenRepoPath\"))\n             .build();\n \n+        String module = \"https\".equals(scheme) ? \"test-keystore,\" + scheme : scheme;\n         String[] args1 = {\n             \"--create-startd\",\n             \"--approve-all-licenses\",\n-            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,test-keystore,\" + scheme\n-        };\n+            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,\" + module,\n+            };", "originalCommit": "8d21bb7b6359e3519003cfa188c2aa59109f9229", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fc4e263f93a12e1538e5a883533724b26d0944a7", "chunk": "diff --git a/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java b/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java\nindex df36ee106a..ad83995aa4 100644\n--- a/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java\n+++ b/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java\n\n@@ -391,7 +391,7 @@ public class DistributionTests extends AbstractJettyHomeTest\n         String[] args1 = {\n             \"--create-startd\",\n             \"--approve-all-licenses\",\n-            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,\" + module,\n+            \"--add-to-start=resources,server,webapp,deploy,jsp,jmx,servlet,servlets,websocket,websocket-jetty-client,\" + module,\n             };\n         try (JettyHomeTester.Run run1 = distribution.start(args1))\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MjQ1NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517192455", "bodyText": "If the server is to provide this, then any exposing should be done in a Configuration... off by default, but that is added to a webapp if we want it to see the client.", "author": "gregw", "createdAt": "2020-11-04T09:07:33Z", "path": "tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java", "diffHunk": "@@ -406,6 +405,9 @@ public void testWebsocketClientInWebappProvidedByServer(String scheme) throws Ex\n             String[] args2 = {\n                 \"jetty.http.port=\" + port,\n                 \"jetty.ssl.port=\" + port,\n+                // We need to expose the websocket client classes to the webapp for this to work.\n+                \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.websocket.client.\",\n+                \"jetty.webapp.addSystemClasses+=,+org.eclipse.jetty.websocket.client.\",", "originalCommit": "8d21bb7b6359e3519003cfa188c2aa59109f9229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NTc0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517195748", "bodyText": "Do I need to write a class?\nI thought a Jetty module should be enough, and the test mimics what should be in the *.mod file if I want the Jetty WebSocket client classes be provided by the server.", "author": "sbordet", "createdAt": "2020-11-04T09:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MjQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fc4e263f93a12e1538e5a883533724b26d0944a7", "chunk": "diff --git a/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java b/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java\nindex df36ee106a..ad83995aa4 100644\n--- a/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java\n+++ b/tests/test-distribution/src/test/java/org/eclipse/jetty/tests/distribution/DistributionTests.java\n\n@@ -405,9 +405,6 @@ public class DistributionTests extends AbstractJettyHomeTest\n             String[] args2 = {\n                 \"jetty.http.port=\" + port,\n                 \"jetty.ssl.port=\" + port,\n-                // We need to expose the websocket client classes to the webapp for this to work.\n-                \"jetty.webapp.addServerClasses+=,-org.eclipse.jetty.websocket.client.\",\n-                \"jetty.webapp.addSystemClasses+=,+org.eclipse.jetty.websocket.client.\",\n                 // \"jetty.server.dumpAfterStart=true\",\n             };\n \n"}}, {"oid": "fc4e263f93a12e1538e5a883533724b26d0944a7", "url": "https://github.com/eclipse/jetty.project/commit/fc4e263f93a12e1538e5a883533724b26d0944a7", "message": "Add module and configuration for websocket-client provided to webapp.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-04T11:22:13Z", "type": "commit"}, {"oid": "416579a690e1b2d2ce5e3cd446957127ff58fcd5", "url": "https://github.com/eclipse/jetty.project/commit/416579a690e1b2d2ce5e3cd446957127ff58fcd5", "message": "fix formatting in DistributionTests\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-04T11:24:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5MDIyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517890221", "bodyText": "Use javadoc's {@code ...} to wrap package names, and fix the package names because we expose *.api and *.client only, not *.websocket.", "author": "sbordet", "createdAt": "2020-11-05T09:02:07Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the org.eclipse.jetty.websocket package.", "originalCommit": "416579a690e1b2d2ce5e3cd446957127ff58fcd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa1914a5b13029aac3a009e7028efa2123aff14a", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\nindex 7fd646d741..d6751bf8a6 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n\n@@ -20,7 +20,6 @@ package org.eclipse.jetty.websocket.client.config;\n \n import java.util.ServiceLoader;\n \n-import org.eclipse.jetty.util.Loader;\n import org.eclipse.jetty.webapp.AbstractConfiguration;\n import org.eclipse.jetty.webapp.Configuration;\n import org.eclipse.jetty.webapp.FragmentConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NjA5NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517896095", "bodyText": "I'm not sure this is right.\nIt will try the context classloader, which is the webapp classloader, so if there is WebSocketClient in WEB-INF/lib (e.g. by mistake), it will return true, but we don't want that.\nI think you want to test if the server has this class available, so perhaps JettyWebSocketClientConfiguration.class.getClassLoader().loadClass(...) should be used instead.", "author": "sbordet", "createdAt": "2020-11-05T09:11:42Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the org.eclipse.jetty.websocket package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))\n+            addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        else if (isAvailable(\"org.eclipse.jetty.annotations.AnnotationConfiguration\"))\n+            addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        else\n+            throw new RuntimeException(\"Unable to add AnnotationConfiguration dependent (not present in classpath)\");\n+\n+        protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.client.\");\n+        hide(\"org.eclipse.jetty.client.impl.\");\n+        hide(\"org.eclipse.jetty.client.config.\");\n+    }\n+\n+    @Override\n+    public boolean isAvailable()\n+    {\n+        return isAvailable(\"org.eclipse.jetty.websocket.client.WebSocketClient\");\n+    }\n+\n+    private boolean isAvailable(String classname)\n+    {\n+        try\n+        {\n+            return Loader.loadClass(classname) != null;", "originalCommit": "416579a690e1b2d2ce5e3cd446957127ff58fcd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa1914a5b13029aac3a009e7028efa2123aff14a", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\nindex 7fd646d741..d6751bf8a6 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n\n@@ -20,7 +20,6 @@ package org.eclipse.jetty.websocket.client.config;\n \n import java.util.ServiceLoader;\n \n-import org.eclipse.jetty.util.Loader;\n import org.eclipse.jetty.webapp.AbstractConfiguration;\n import org.eclipse.jetty.webapp.Configuration;\n import org.eclipse.jetty.webapp.FragmentConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5Njc3MA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r517896770", "bodyText": "See comment about using Loader.loadClass().", "author": "sbordet", "createdAt": "2020-11-05T09:12:43Z", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "diffHunk": "@@ -68,7 +68,7 @@ else if (isAvailable(\"org.eclipse.jetty.annotations.AnnotationConfiguration\"))\n     @Override\n     public boolean isAvailable()\n     {\n-        return isAvailable(\"org.eclipse.jetty.websocket.common.JettyWebSocketFrame\");\n+        return isAvailable(\"org.eclipse.jetty.websocket.server.JettyWebSocketServerContainer\");", "originalCommit": "416579a690e1b2d2ce5e3cd446957127ff58fcd5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fa1914a5b13029aac3a009e7028efa2123aff14a", "chunk": "diff --git a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\nindex 7336c06232..a9298485aa 100644\n--- a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\n\n@@ -75,7 +75,7 @@ public class JettyWebSocketConfiguration extends AbstractConfiguration\n     {\n         try\n         {\n-            return Loader.loadClass(classname) != null;\n+            return JettyWebSocketConfiguration.class.getClassLoader().loadClass(classname) != null;\n         }\n         catch (Throwable e)\n         {\n"}}, {"oid": "fa1914a5b13029aac3a009e7028efa2123aff14a", "url": "https://github.com/eclipse/jetty.project/commit/fa1914a5b13029aac3a009e7028efa2123aff14a", "message": "Update Jetty WebSocketConfiguration classes\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-06T08:03:52Z", "type": "commit"}, {"oid": "80a824854bc70dee342ede13fbf6bf473c1bc76f", "url": "https://github.com/eclipse/jetty.project/commit/80a824854bc70dee342ede13fbf6bf473c1bc76f", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5320-WebSocketHttpClient2", "committedDate": "2020-11-09T04:17:22Z", "type": "commit"}, {"oid": "32433b10ad9944bcf8e7224e16a9026655d219ba", "url": "https://github.com/eclipse/jetty.project/commit/32433b10ad9944bcf8e7224e16a9026655d219ba", "message": "revert change to the classloader used in isAvailable\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-09T07:12:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519698920", "bodyText": "I don't think you need to do this availability check. Just add the dependency as a string and it will be ordered if it is there and ignored if it is not.", "author": "gregw", "createdAt": "2020-11-09T10:21:28Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+\n+        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))", "originalCommit": "32433b10ad9944bcf8e7224e16a9026655d219ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc0OTY3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519749672", "bodyText": "But the logic is only adding the osgi one if it is available, otherwise only adding the standard one. Wouldn't it have a different behaviour if we add both.", "author": "lachlan-roberts", "createdAt": "2020-11-09T11:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1NDk2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519754960", "bodyText": "But I don't think you need to do that even.  The OSGi configuration replaces the non OSGI configuration, so it should inherit all of it's dependencies and orderings.  You can't list out all the infinite possible extensions of org.eclipse.jetty.annotations.AnnotationConfiguration here, so don't try.", "author": "gregw", "createdAt": "2020-11-09T11:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1OTI1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519759256", "bodyText": "hmmm for some reason the OSGi AnnotationConfiguration does not \"replace\" the normal AnnotationConfiguration???\nMight have to check with @janbartel why?\nBut ultimately here you should just depend on org.eclipse.jetty.annotations.AnnotationConfiguration and the replacement mechanism should make the sorting work correctly", "author": "gregw", "createdAt": "2020-11-09T12:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MDUwOA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519760508", "bodyText": "Perhaps I just forgot to add it when I did the conversion.   Can you try adding to the OSGi AnnotationConfiguration:\n    @Override\n    public Class<? extends Configuration> replaces()\n    {\n        return org.eclipse.jetty.annotations.AnnotationConfiguration.class;\n    }", "author": "gregw", "createdAt": "2020-11-09T12:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMzAzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519833035", "bodyText": "I overrided the replaces() method in the osgi AnnotationConfiguration now. It passed the tests even without that, even after I made the changes you asked for removing the isAvailable checks.", "author": "lachlan-roberts", "createdAt": "2020-11-09T13:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY5ODkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "b6688c0267ff4a046e0cad1100d0c8e38fab5e3f", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\nindex 6e7e2a2346..b0527b9de7 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n\n@@ -20,7 +20,6 @@ package org.eclipse.jetty.websocket.client.config;\n \n import java.util.ServiceLoader;\n \n-import org.eclipse.jetty.util.Loader;\n import org.eclipse.jetty.webapp.AbstractConfiguration;\n import org.eclipse.jetty.webapp.Configuration;\n import org.eclipse.jetty.webapp.FragmentConfiguration;\n"}}, {"oid": "b6688c0267ff4a046e0cad1100d0c8e38fab5e3f", "url": "https://github.com/eclipse/jetty.project/commit/b6688c0267ff4a046e0cad1100d0c8e38fab5e3f", "message": "Issue #5320 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-09T12:17:30Z", "type": "commit"}, {"oid": "e842c16bb44837b0664e6e34a4460364c2eb03ac", "url": "https://github.com/eclipse/jetty.project/commit/e842c16bb44837b0664e6e34a4460364c2eb03ac", "message": "osgi AnnotationConfiguration should replace the standard one\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-09T13:55:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjA3MA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519842070", "bodyText": "You don't need this line, only the next one!   Look at how replaces works.", "author": "gregw", "createdAt": "2020-11-09T14:11:57Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());", "originalCommit": "e842c16bb44837b0664e6e34a4460364c2eb03ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\nindex b0527b9de7..62537d15f4 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n\n@@ -47,7 +47,6 @@ public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n     public JettyWebSocketClientConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n-        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n         addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n \n         protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0Mjk5Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519842993", "bodyText": "Are these two classes in the same jar?  If so, you kind of can just return true in this method (or not override).\nThis method is more for things like CDI and JSP, where we need to check for third party jars being available", "author": "gregw", "createdAt": "2020-11-09T14:13:18Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.\n+ * </p>\n+ */\n+public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JettyWebSocketClientConfiguration.class);\n+\n+    public JettyWebSocketClientConfiguration()\n+    {\n+        addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+\n+        protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.client.\");\n+        hide(\"org.eclipse.jetty.client.impl.\");\n+        hide(\"org.eclipse.jetty.client.config.\");\n+    }\n+\n+    @Override\n+    public boolean isAvailable()\n+    {\n+        try\n+        {\n+            ClassLoader classLoader = JettyWebSocketClientConfiguration.class.getClassLoader();", "originalCommit": "e842c16bb44837b0664e6e34a4460364c2eb03ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\nindex b0527b9de7..62537d15f4 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n\n@@ -47,7 +47,6 @@ public class JettyWebSocketClientConfiguration extends AbstractConfiguration\n     public JettyWebSocketClientConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n-        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n         addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n \n         protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MzI4Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519843287", "bodyText": "Don't need this line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());", "author": "gregw", "createdAt": "2020-11-09T14:13:44Z", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "diffHunk": "@@ -48,39 +48,29 @@\n     public JettyWebSocketConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());", "originalCommit": "e842c16bb44837b0664e6e34a4460364c2eb03ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "chunk": "diff --git a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\nindex 30e1787a54..3490ef65f2 100644\n--- a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\n\n@@ -48,7 +48,6 @@ public class JettyWebSocketConfiguration extends AbstractConfiguration\n     public JettyWebSocketConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n-        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n         addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n \n         protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0NDA4NA==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r519844084", "bodyText": "Ditto - maybe just return true here.\nFeel free to improve javadoc on isAvailable if you think it wasn't made clear", "author": "gregw", "createdAt": "2020-11-09T14:14:46Z", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java", "diffHunk": "@@ -48,39 +48,29 @@\n     public JettyWebSocketConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n+        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n+        addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n \n-        if (isAvailable(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\"))\n-            addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n-        else if (isAvailable(\"org.eclipse.jetty.annotations.AnnotationConfiguration\"))\n-            addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n-        else\n-            throw new RuntimeException(\"Unable to add AnnotationConfiguration dependent (not present in classpath)\");\n-\n-        protectAndExpose(\n-            \"org.eclipse.jetty.websocket.api.\",\n-            \"org.eclipse.jetty.websocket.server.\",\n-            \"org.eclipse.jetty.websocket.util.server.\"); // For WebSocketUpgradeFilter\n-\n-        hide(\"org.eclipse.jetty.server.internal.\",\n-            \"org.eclipse.jetty.server.config.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.server.\");\n+        protectAndExpose(\"org.eclipse.jetty.websocket.util.server.\"); // For WebSocketUpgradeFilter\n+        hide(\"org.eclipse.jetty.server.internal.\");\n+        hide(\"org.eclipse.jetty.server.config.\");\n     }\n \n     @Override\n     public boolean isAvailable()\n-    {\n-        return isAvailable(\"org.eclipse.jetty.websocket.common.JettyWebSocketFrame\");\n-    }\n-\n-    private boolean isAvailable(String classname)\n     {\n         try\n         {\n-            return Loader.loadClass(classname) != null;\n+            ClassLoader classLoader = JettyWebSocketConfiguration.class.getClassLoader();\n+            return classLoader.loadClass(\"org.eclipse.jetty.websocket.server.JettyWebSocketServerContainer\") != null;", "originalCommit": "e842c16bb44837b0664e6e34a4460364c2eb03ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "chunk": "diff --git a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\nindex 30e1787a54..3490ef65f2 100644\n--- a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketConfiguration.java\n\n@@ -48,7 +48,6 @@ public class JettyWebSocketConfiguration extends AbstractConfiguration\n     public JettyWebSocketConfiguration()\n     {\n         addDependencies(WebXmlConfiguration.class, MetaInfConfiguration.class, WebInfConfiguration.class, FragmentConfiguration.class);\n-        addDependents(\"org.eclipse.jetty.osgi.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n         addDependents(\"org.eclipse.jetty.annotations.AnnotationConfiguration\", WebAppConfiguration.class.getName());\n \n         protectAndExpose(\"org.eclipse.jetty.websocket.api.\");\n"}}, {"oid": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "url": "https://github.com/eclipse/jetty.project/commit/42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "message": "Issue #5320 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-09T14:44:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyODI5Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5563#discussion_r521528296", "bodyText": "I think the javadoc needs to be fixed as this class is not defined anymore in the \"webapp package\".", "author": "sbordet", "createdAt": "2020-11-11T17:40:55Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.client.config;\n+\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.webapp.AbstractConfiguration;\n+import org.eclipse.jetty.webapp.Configuration;\n+import org.eclipse.jetty.webapp.FragmentConfiguration;\n+import org.eclipse.jetty.webapp.MetaInfConfiguration;\n+import org.eclipse.jetty.webapp.WebAppConfiguration;\n+import org.eclipse.jetty.webapp.WebInfConfiguration;\n+import org.eclipse.jetty.webapp.WebXmlConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * <p>Websocket Configuration</p>\n+ * <p>This configuration configures the WebAppContext server/system classes to\n+ * be able to see the {@code org.eclipse.jetty.websocket.client} package.\n+ * This class is defined in the webapp package, as it implements the {@link Configuration} interface,\n+ * which is unknown to the websocket package.  However, the corresponding {@link ServiceLoader}\n+ * resource is defined in the websocket package, so that this configuration only be\n+ * loaded if the jetty-websocket jars are on the classpath.", "originalCommit": "42ebdc1bc386fbb68a65d179a8b8d24816c376ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a4160c4b5ef17f1c219f835615236ce546a274be", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\nindex 62537d15f4..ec754ec931 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/config/JettyWebSocketClientConfiguration.java\n\n@@ -18,10 +18,7 @@\n \n package org.eclipse.jetty.websocket.client.config;\n \n-import java.util.ServiceLoader;\n-\n import org.eclipse.jetty.webapp.AbstractConfiguration;\n-import org.eclipse.jetty.webapp.Configuration;\n import org.eclipse.jetty.webapp.FragmentConfiguration;\n import org.eclipse.jetty.webapp.MetaInfConfiguration;\n import org.eclipse.jetty.webapp.WebAppConfiguration;\n"}}, {"oid": "8ff545f696f7ed2cddcc3b245cc1961196b7e60e", "url": "https://github.com/eclipse/jetty.project/commit/8ff545f696f7ed2cddcc3b245cc1961196b7e60e", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5320-WebSocketHttpClient2", "committedDate": "2020-11-11T22:42:48Z", "type": "commit"}, {"oid": "a4160c4b5ef17f1c219f835615236ce546a274be", "url": "https://github.com/eclipse/jetty.project/commit/a4160c4b5ef17f1c219f835615236ce546a274be", "message": "Fix javadoc on websocket configuration classes.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-11-11T22:47:38Z", "type": "commit"}]}