{"pr_number": 4498, "pr_title": "Issue #4383 - synchronize multiparts for cleanup from different thread", "pr_createdAt": "2020-01-20T11:54:00Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4498", "timeline": [{"oid": "c5d074e5f2fe5771c433aa4b0113481e3ce23add", "url": "https://github.com/eclipse/jetty.project/commit/c5d074e5f2fe5771c433aa4b0113481e3ce23add", "message": "Issue #4383 - atomic state to MultiPart for multi-thread synchronization\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-20T11:36:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3ODU1Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368578557", "bodyText": "But if the input stream has no content then we didn't actually parse it, so the state is UNPARSED isn't it?", "author": "janbartel", "createdAt": "2020-01-20T14:34:44Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -333,39 +340,33 @@ public String getContentDispositionFilename()\n     public MultiPartFormInputStream(InputStream in, String contentType, MultipartConfigElement config, File contextTmpDir)\n     {\n         _contentType = contentType;\n-        _config = config;\n-        _contextTmpDir = contextTmpDir;\n-        if (_contextTmpDir == null)\n-            _contextTmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n-\n-        if (_config == null)\n-            _config = new MultipartConfigElement(_contextTmpDir.getAbsolutePath());\n-\n-        MultiMap parts = new MultiMap();\n+        _contextTmpDir =  (contextTmpDir != null) ? contextTmpDir : new File(System.getProperty(\"java.io.tmpdir\"));\n+        _config = (config != null) ? config : new MultipartConfigElement(_contextTmpDir.getAbsolutePath());\n \n         if (in instanceof ServletInputStream)\n         {\n             if (((ServletInputStream)in).isFinished())\n             {\n-                parts = EMPTY_MAP;\n-                _parsed = true;\n+                _in = null;\n+                state = State.PARSED;", "originalCommit": "c5d074e5f2fe5771c433aa4b0113481e3ce23add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDUwNg==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368814506", "bodyText": "The idea is that if someone calls getParts() we don't try to parse again we just give them the empty MultiMap, so we are effectively in PARSED state even if we didn't parse any content.", "author": "lachlan-roberts", "createdAt": "2020-01-21T05:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3ODU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f9f2ccaefac721dfe50b6bfbde83baea78b872c9", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 8a53207e2f..5d8eaffaa4 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -339,7 +356,11 @@ public class MultiPartFormInputStream\n      */\n     public MultiPartFormInputStream(InputStream in, String contentType, MultipartConfigElement config, File contextTmpDir)\n     {\n+        // Must be a multipart request.\n         _contentType = contentType;\n+        if (_contentType == null || !_contentType.startsWith(\"multipart/form-data\"))\n+            throw new IllegalArgumentException(\"content type is not multipart/form-data\");\n+\n         _contextTmpDir =  (contextTmpDir != null) ? contextTmpDir : new File(System.getProperty(\"java.io.tmpdir\"));\n         _config = (config != null) ? config : new MultipartConfigElement(_contextTmpDir.getAbsolutePath());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMjc1OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368622759", "bodyText": "Closing and closed aren't terms that really apply here, its whether the content has been deleted or not. Can I suggest the following states, all of which except for PARSING are terminal states:\nUNPARSED - before any methods are called\nPARSING - first call to parse() but before all content successfully read\nPARSED - all content successfully read\nERRORED - problem reading content\nDELETED - first call to deleteParts()\nThe only situation we have to guard against is deleteParts() being called while parse() is still happening. It is not possible for 2 threads to be in parse() nor 2 threads to be in deleteParts(), so this makes the state transitions a little simpler. I'm not even sure that PARSING is necessary, maybe the parse() method could move straight to PARSED?\nI think you should put in javadoc a state transition diagram so it is very clear what is happening.", "author": "janbartel", "createdAt": "2020-01-20T16:02:11Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -58,19 +57,27 @@\n  */\n public class MultiPartFormInputStream\n {\n+    private enum State\n+    {\n+        UNPARSED,\n+        PARSING,\n+        PARSED,\n+        CLOSING,\n+        CLOSED\n+    }\n+", "originalCommit": "c5d074e5f2fe5771c433aa4b0113481e3ce23add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDg0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368814847", "bodyText": "I have added a state diagram and an explanation in the javadoc.", "author": "lachlan-roberts", "createdAt": "2020-01-21T05:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMjc1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5MzIyOQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368893229", "bodyText": "That's good, much easier to follow the state transitions.", "author": "janbartel", "createdAt": "2020-01-21T09:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyMjc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b217a3541563f2faa631e0705a7b4aa2bfe79080", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 8a53207e2f..d04c7b62a3 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -52,7 +52,24 @@ import org.eclipse.jetty.util.log.Logger;\n  * MultiPartInputStream\n  * <p>\n  * Handle a MultiPart Mime input stream, breaking it up on the boundary into files and strings.\n- *\n+ * </p>\n+ * <p>\n+ * Deleting the parts can be done from a different thread if the parts are parsed asynchronously.\n+ * Because of this we use the state to fail the parsing and coordinate which thread will delete any remaining parts.\n+ * The deletion of parts is done by the cleanup thread in all cases except the transition from ERROR->DELETED which\n+ * is done by the parsing thread.\n+ * </p>\n+ * <pre>\n+ *                              deleteParts()\n+ *     +--------------------------------------------------------------+\n+ *     |                                                              |\n+ *     |                                          deleteParts()       v\n+ *  UNPARSED -------> PARSING --------> PARSED  ------------------>DELETED\n+ *                      |                                             ^\n+ *                      |                                             |\n+ *                      +----------------> ERROR ---------------------+\n+ *                        deleteParts()             parsing thread\n+ * </pre>\n  * @see <a href=\"https://tools.ietf.org/html/rfc7578\">https://tools.ietf.org/html/rfc7578</a>\n  */\n public class MultiPartFormInputStream\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjQxOA==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368626418", "bodyText": "The spec is clear in the circumstances where IllegalStateException is allowed, and this case isn't one of them - you'll have to consider using IOException instead.\nAlso, in the case where there isn't a multipart/form-data content type, then if the same thread called getParts() twice, on the first call the state would remain as PARSING and return no parts, but the second call would result in an IllegalStateException - the result of calling the same method twice should be idempotent.", "author": "janbartel", "createdAt": "2020-01-20T16:09:34Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -468,13 +476,24 @@ protected void throwIfError() throws IOException\n      */\n     protected void parse()\n     {\n-        // have we already parsed the input?\n-        if (_parsed)\n-            return;\n-        _parsed = true;\n+        synchronized (this)\n+        {\n+            switch (state)\n+            {\n+                case UNPARSED:\n+                    state = State.PARSING;\n+                    break;\n+\n+                case PARSED:\n+                    return;\n+\n+                default:\n+                    _err = new IllegalStateException(state.name());", "originalCommit": "c5d074e5f2fe5771c433aa4b0113481e3ce23add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNzIwMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368817201", "bodyText": "What should MultiPartFormInputStream.getParts() do for a content type which is not multipart/form-data, should it return an empty list of parts?\nI feel like that should be an IllegalArgumentException in the constructor or something.", "author": "lachlan-roberts", "createdAt": "2020-01-21T05:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNzk5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368817999", "bodyText": "But the same thread calling getParts() twice with a non multipart/form-data content type, it would return from\n// if its not a multipart request, don't parse it\nif (_contentType == null || !_contentType.startsWith(\"multipart/form-data\"))\n    return;\nend up in the finally block and move from PARSING->PARSED, so the second call to parse() would be a NOOP.", "author": "lachlan-roberts", "createdAt": "2020-01-21T05:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5ODY0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368898647", "bodyText": "You could check it in the constructor and throw IllegalArgumentException, but note that you'll have to look at Request.getParts() where it checks the content-type too before calling the constructor.\nAnd yes, you're right, calling parse() twice would return empty list - now the state diagram is there, that's much easier to see :)", "author": "janbartel", "createdAt": "2020-01-21T09:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "b217a3541563f2faa631e0705a7b4aa2bfe79080", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 8a53207e2f..d04c7b62a3 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -488,7 +512,7 @@ public class MultiPartFormInputStream\n                     return;\n \n                 default:\n-                    _err = new IllegalStateException(state.name());\n+                    _err = new IOException(state.name());\n                     return;\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjYyNw==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368626627", "bodyText": "Consider if we really need the PARSING state?", "author": "janbartel", "createdAt": "2020-01-20T16:10:01Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -507,16 +526,23 @@ else if (\"\".equals(_config.getLocation()))\n                 contentTypeBoundary = QuotedStringTokenizer.unquote(value(_contentType.substring(bstart, bend)).trim());\n             }\n \n-            parser = new MultiPartParser(handler, contentTypeBoundary);\n+            parser = new MultiPartParser(new Handler(), contentTypeBoundary);\n             byte[] data = new byte[_bufferSize];\n             int len;\n             long total = 0;\n \n             while (true)\n             {\n+                synchronized (this)\n+                {\n+                    if (state != State.PARSING)", "originalCommit": "c5d074e5f2fe5771c433aa4b0113481e3ce23add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDY4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368814681", "bodyText": "I think we do because only between PARSING and PARSED do we need to go to the ERROR state before that we can go straight to DELETED.", "author": "lachlan-roberts", "createdAt": "2020-01-21T05:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "b217a3541563f2faa631e0705a7b4aa2bfe79080", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 8a53207e2f..d04c7b62a3 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -537,7 +561,7 @@ public class MultiPartFormInputStream\n                 {\n                     if (state != State.PARSING)\n                     {\n-                        _err = new IllegalStateException(state.name());\n+                        _err = new IOException(state.name());\n                         return;\n                     }\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjk5Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368626992", "bodyText": "Save the boolean and do the cleanup in the appropriate case.", "author": "janbartel", "createdAt": "2020-01-20T16:10:42Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -570,6 +596,29 @@ else if (len == -1)\n             if (parser != null)\n                 parser.parse(BufferUtil.EMPTY_BUFFER, true);\n         }\n+        finally\n+        {\n+            boolean cleanup = false;\n+            synchronized (this)\n+            {\n+                switch (state)\n+                {\n+                    case PARSING:\n+                        state = State.PARSED;\n+                        break;\n+\n+                    case CLOSING:\n+                        cleanup = true;\n+                        break;\n+\n+                    default:\n+                        _err = new IllegalStateException(state.name());\n+                }\n+            }\n+\n+            if (cleanup)", "originalCommit": "c5d074e5f2fe5771c433aa4b0113481e3ce23add", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDcwNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368814705", "bodyText": "I did it in this style because Simone always tells me to act outside of the synchronized block.", "author": "lachlan-roberts", "createdAt": "2020-01-21T05:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5OTYzMA==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368899630", "bodyText": "Ah yes, I guess doing the delete will take some time and you don't want to hold the lock while you're doing it.\nRegarding the deletes, I think it would be better if the state transition was handled in only 1 place - here its in the finally block of parse() and also in deleteParts() method.", "author": "janbartel", "createdAt": "2020-01-21T09:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MzY4NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r369353685", "bodyText": "I had the state transition only in deleteParts() but that had the effect that if you called deleteParts() twice, it would not wait for the parsing thread and do the cleanup straight away. So I think it's better to do it here as well.\nSo now\nThe initial deleteParts will do PARSING->ERROR\nCalling deleteParts again will be a noop from ERROR or DELETED state.\nThe parsing thread does ERROR->DELETED and does the uncheckedDeleteParts()", "author": "lachlan-roberts", "createdAt": "2020-01-22T03:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ1NzU3MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r369457571", "bodyText": "I still think it would be a cleaner solution if the deletion happened only in 1 place, and that is in deleteParts(). If deleteParts() gets called and the parser is still parsing, it should set the ERROR state, wait for the parser to stop, and then do a full clean. Is there something I'm missing that makes that a bad idea?\nAlso, it would be a good idea to add a description of each of those states in the javadoc state transition diagram: especially so it's clear that ERROR state only happens one way, and that is that deleteParts() is called by another thread when parse() is happening in a different thread, otherwise it could easily be misinterpreted that ERROR state represents a parsing error.", "author": "janbartel", "createdAt": "2020-01-22T09:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYyNjk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b217a3541563f2faa631e0705a7b4aa2bfe79080", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 8a53207e2f..d04c7b62a3 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -607,7 +631,8 @@ public class MultiPartFormInputStream\n                         state = State.PARSED;\n                         break;\n \n-                    case CLOSING:\n+                    case ERROR:\n+                        state = State.DELETED;\n                         cleanup = true;\n                         break;\n \n"}}, {"oid": "b217a3541563f2faa631e0705a7b4aa2bfe79080", "url": "https://github.com/eclipse/jetty.project/commit/b217a3541563f2faa631e0705a7b4aa2bfe79080", "message": "Issue #4383 - add State diagram and other changes for review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-21T05:14:01Z", "type": "commit"}, {"oid": "0ab7751ef2af8ea49e34c98461da1a8d081ba5f6", "url": "https://github.com/eclipse/jetty.project/commit/0ab7751ef2af8ea49e34c98461da1a8d081ba5f6", "message": "Issue #4383 - fix javadoc build issue\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-21T07:22:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMDI0OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r368900249", "bodyText": "Are you sure all these need to be volatiles? Also the state variable - aren't you always reading/writing that in a sync block?", "author": "janbartel", "createdAt": "2020-01-21T09:48:22Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -53,24 +52,49 @@\n  * MultiPartInputStream\n  * <p>\n  * Handle a MultiPart Mime input stream, breaking it up on the boundary into files and strings.\n- *\n+ * </p>\n+ * <p>\n+ * Deleting the parts can be done from a different thread if the parts are parsed asynchronously.\n+ * Because of this we use the state to fail the parsing and coordinate which thread will delete any remaining parts.\n+ * The deletion of parts is done by the cleanup thread in all cases except the transition from ERROR-&gt;DELETED which\n+ * is done by the parsing thread.\n+ * </p>\n+ * <pre>{@code\n+ *                              deleteParts()\n+ *     +--------------------------------------------------------------+\n+ *     |                                                              |\n+ *     |                                          deleteParts()       v\n+ *  UNPARSED -------> PARSING --------> PARSED  ------------------>DELETED\n+ *                      |                                             ^\n+ *                      |                                             |\n+ *                      +----------------> ERROR ---------------------+\n+ *                        deleteParts()             parsing thread\n+ * }</pre>\n  * @see <a href=\"https://tools.ietf.org/html/rfc7578\">https://tools.ietf.org/html/rfc7578</a>\n  */\n public class MultiPartFormInputStream\n {\n+    private enum State\n+    {\n+        UNPARSED,\n+        PARSING,\n+        PARSED,\n+        DELETED,\n+        ERROR\n+    }\n+\n     private static final Logger LOG = Log.getLogger(MultiPartFormInputStream.class);\n-    private static final MultiMap<Part> EMPTY_MAP = new MultiMap<>(Collections.emptyMap());\n-    private final MultiMap<Part> _parts;\n-    private InputStream _in;\n-    private MultipartConfigElement _config;\n-    private String _contentType;\n-    private Throwable _err;\n-    private File _tmpDir;\n-    private File _contextTmpDir;\n-    private boolean _deleteOnExit;\n-    private boolean _writeFilesWithFilenames;\n-    private boolean _parsed;\n-    private int _bufferSize = 16 * 1024;\n+    private final MultiMap<Part> _parts = new MultiMap<>();\n+    private final InputStream _in;\n+    private final MultipartConfigElement _config;\n+    private final File _contextTmpDir;\n+    private final String _contentType;\n+    private volatile Throwable _err;", "originalCommit": "0ab7751ef2af8ea49e34c98461da1a8d081ba5f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MzYzMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r369353631", "bodyText": "I'm not sure if they need to be volatile I just marked them all to be safe.\nThe state is assigned outside synchronized in the constructor so wasn't sure if I should declare volatile.", "author": "lachlan-roberts", "createdAt": "2020-01-22T03:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwMDI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f9f2ccaefac721dfe50b6bfbde83baea78b872c9", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 492c52a123..5d8eaffaa4 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -94,7 +94,7 @@ public class MultiPartFormInputStream\n     private volatile boolean _deleteOnExit;\n     private volatile boolean _writeFilesWithFilenames;\n     private volatile int _bufferSize = 16 * 1024;\n-    private volatile State state = State.UNPARSED;\n+    private State state = State.UNPARSED;\n \n     public class MultiPart implements Part\n     {\n"}}, {"oid": "f9f2ccaefac721dfe50b6bfbde83baea78b872c9", "url": "https://github.com/eclipse/jetty.project/commit/f9f2ccaefac721dfe50b6bfbde83baea78b872c9", "message": "Issue #4383 - check for non multipart content type in constructor\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-22T03:26:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk2MDUxMw==", "url": "https://github.com/eclipse/jetty.project/pull/4498#discussion_r369960513", "bodyText": "You need to change ERROR to DELETING everywhere :)", "author": "janbartel", "createdAt": "2020-01-23T07:17:59Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java", "diffHunk": "@@ -53,24 +52,55 @@\n  * MultiPartInputStream\n  * <p>\n  * Handle a MultiPart Mime input stream, breaking it up on the boundary into files and strings.\n+ * </p>\n+ * <p>\n+ * Deleting the parts can be done from a different thread if the parts are parsed asynchronously.\n+ * Because of this we use the state to fail the parsing and coordinate which thread will delete any remaining parts.\n+ * The deletion of parts is done by the cleanup thread in all cases except the transition from ERROR-&gt;DELETED which\n+ * is done by the parsing thread.\n+ * </p>\n+ * <pre>{@code\n+ * UNPARSED - Parsing has not started, there are no parts which need to be cleaned up.\n+ * PARSING  - The parsing thread is reading from the InputStream and generating parts.\n+ * PARSED   - Parsing has complete and no more parts will be generated.\n+ * DELETING - deleteParts() has been called while we were in PARSING state, parsing thread will do the delete.\n+ * DELETED  - The parts have been deleted, this is the terminal state.\n  *\n+ *                              deleteParts()\n+ *     +--------------------------------------------------------------+\n+ *     |                                                              |\n+ *     |                                          deleteParts()       v\n+ *  UNPARSED -------> PARSING --------> PARSED  ------------------>DELETED\n+ *                      |                                             ^\n+ *                      |                                             |\n+ *                      +----------------> ERROR ---------------------+", "originalCommit": "c4a3855f1d909ac246016c4fb423d052f49f5998", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b9cc15b055e3a6f2987f274bfd34dd4c030fc0f", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\nindex 7f8ce35f2d..bc7fe0445b 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java\n\n@@ -56,7 +56,7 @@ import org.eclipse.jetty.util.log.Logger;\n  * <p>\n  * Deleting the parts can be done from a different thread if the parts are parsed asynchronously.\n  * Because of this we use the state to fail the parsing and coordinate which thread will delete any remaining parts.\n- * The deletion of parts is done by the cleanup thread in all cases except the transition from ERROR-&gt;DELETED which\n+ * The deletion of parts is done by the cleanup thread in all cases except the transition from DELETING-&gt;DELETED which\n  * is done by the parsing thread.\n  * </p>\n  * <pre>{@code\n"}}, {"oid": "9b9cc15b055e3a6f2987f274bfd34dd4c030fc0f", "url": "https://github.com/eclipse/jetty.project/commit/9b9cc15b055e3a6f2987f274bfd34dd4c030fc0f", "message": "Issue 4383 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-23T22:49:00Z", "type": "forcePushed"}, {"oid": "f76687ad68fd0b467728dea60ef60b41c2f1418a", "url": "https://github.com/eclipse/jetty.project/commit/f76687ad68fd0b467728dea60ef60b41c2f1418a", "message": "Issue 4383 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-24T00:06:37Z", "type": "commit"}, {"oid": "f76687ad68fd0b467728dea60ef60b41c2f1418a", "url": "https://github.com/eclipse/jetty.project/commit/f76687ad68fd0b467728dea60ef60b41c2f1418a", "message": "Issue 4383 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-01-24T00:06:37Z", "type": "forcePushed"}]}