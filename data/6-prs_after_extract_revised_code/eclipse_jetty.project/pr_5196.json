{"pr_number": 5196, "pr_title": "Issue #5171 Simplify GzipHandler user-agent handling", "pr_createdAt": "2020-08-24T15:12:50Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5196", "timeline": [{"oid": "8c6ee05ed8d82b3dc8e8dcb9706d0d7cd0b1a466", "url": "https://github.com/eclipse/jetty.project/commit/8c6ee05ed8d82b3dc8e8dcb9706d0d7cd0b1a466", "message": "Issue #5171 Simplify GzipHandler user-agent handling\n\n+ Remove User-Agent handling from GzipHandler\n+ Allow Vary header to be set\n+ Create rewrite MsieRule to remove Accept-Encoding from IE<=6\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-08-24T15:11:54Z", "type": "commit"}, {"oid": "977dc94ba44fb4c59f0168eb8076a001ffe17251", "url": "https://github.com/eclipse/jetty.project/commit/977dc94ba44fb4c59f0168eb8076a001ffe17251", "message": " + Full implementation of HttpFields ensure\n + use for Vary field", "committedDate": "2020-08-25T09:27:48Z", "type": "commit"}, {"oid": "f39a3b215103941feb3b773a52173e1ea478ec47", "url": "https://github.com/eclipse/jetty.project/commit/f39a3b215103941feb3b773a52173e1ea478ec47", "message": " + fixed checkstyle", "committedDate": "2020-08-25T10:09:47Z", "type": "commit"}, {"oid": "7daecff2c38fc40d932cc03877bcb4268f9a438b", "url": "https://github.com/eclipse/jetty.project/commit/7daecff2c38fc40d932cc03877bcb4268f9a438b", "message": " + fixed test for merged header", "committedDate": "2020-08-25T10:51:45Z", "type": "commit"}, {"oid": "838f8ee9777b05a1d82badd4ae8c511c064967a7", "url": "https://github.com/eclipse/jetty.project/commit/838f8ee9777b05a1d82badd4ae8c511c064967a7", "message": " + fixed javadoc", "committedDate": "2020-08-25T12:54:26Z", "type": "commit"}, {"oid": "0a09fa11f4b181d2191eafded3179a03cd273d99", "url": "https://github.com/eclipse/jetty.project/commit/0a09fa11f4b181d2191eafded3179a03cd273d99", "message": "Issue #5171 Simplify GzipHandler user-agent handling\n\n + improved comments\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-08-26T11:02:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4MjQyMg==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477182422", "bodyText": "The semantic of this method is weird because not only ensures that a field exists, but also coalesces multiple fields into one - it should be clearly stated in the javadocs. Perhaps rename to ensureSingle()?", "author": "sbordet", "createdAt": "2020-08-26T09:57:18Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java", "diffHunk": "@@ -738,6 +738,121 @@ public Mutable clear()\n             return this;\n         }\n \n+        /** Ensure that specific HttpField exists when the field may not exist or may\n+         * exist and be multi valued.\n+         * @param field The header to ensure is contained.  The field is used\n+         *              directly if possible so {@link PreEncodedHttpField}s can be\n+         *              passed.  If the value needs to be merged with existing values,\n+         *              then a new field is created.\n+         */\n+        public void ensure(HttpField field)", "originalCommit": "838f8ee9777b05a1d82badd4ae8c511c064967a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1NDI2NA==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477354264", "bodyText": "I've gone with ensureField to match computeField", "author": "gregw", "createdAt": "2020-08-26T14:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4MjQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "0a09fa11f4b181d2191eafded3179a03cd273d99", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java\nindex 8f96a4d8f7..6a4ee7fef5 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java\n\n@@ -747,8 +747,10 @@ public interface HttpFields extends Iterable<HttpField>\n          */\n         public void ensure(HttpField field)\n         {\n+            // Is the field value multi valued?\n             if (field.getValue().indexOf(',') < 0)\n             {\n+                // Call Single valued computeEnsure with either String header name or enum HttpHeader\n                 if (field.getHeader() != null)\n                     computeField(field.getHeader(), (h, l) -> computeEnsure(field, l));\n                 else\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4MzA4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477283081", "bodyText": "I don't understand this logic.\nThe first if says \"if the given field is single-valued\"; but then computeEnsure() is passed the field, and there is no need to have two different computeEnsure(), the second with the values extracted from the field that is passed as first parameter \ud83e\udd14", "author": "sbordet", "createdAt": "2020-08-26T13:03:51Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java", "diffHunk": "@@ -738,6 +738,121 @@ public Mutable clear()\n             return this;\n         }\n \n+        /** Ensure that specific HttpField exists when the field may not exist or may\n+         * exist and be multi valued.\n+         * @param field The header to ensure is contained.  The field is used\n+         *              directly if possible so {@link PreEncodedHttpField}s can be\n+         *              passed.  If the value needs to be merged with existing values,\n+         *              then a new field is created.\n+         */\n+        public void ensure(HttpField field)\n+        {\n+            if (field.getValue().indexOf(',') < 0)\n+            {\n+                if (field.getHeader() != null)\n+                    computeField(field.getHeader(), (h, l) -> computeEnsure(field, l));\n+                else\n+                    computeField(field.getName(), (h, l) -> computeEnsure(field, l));\n+            }\n+            else\n+            {\n+                if (field.getHeader() != null)\n+                    computeField(field.getHeader(), (h, l) -> computeEnsure(field, field.getValues(), l));\n+                else\n+                    computeField(field.getName(), (h, l) -> computeEnsure(field, field.getValues(), l));\n+            }", "originalCommit": "838f8ee9777b05a1d82badd4ae8c511c064967a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1NTc4MA==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477355780", "bodyText": "The implementation of the single field and multiple field versions are a bit different. Single field can already exist or not. Multi valued might partially exist.\nI could simplify a ensureField a little, but only at the expense of complicating the computeEnsure methods.", "author": "gregw", "createdAt": "2020-08-26T14:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4MzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM1NzUxMg==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477357512", "bodyText": "Note that I now have 100% test coverage of ensureField and both computeEnsure.", "author": "gregw", "createdAt": "2020-08-26T14:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4MzA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8bac62d7844bf229518e1bb855aa9bb3af15efe", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java\nindex 8f96a4d8f7..285953681a 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpFields.java\n\n@@ -739,16 +739,19 @@ public interface HttpFields extends Iterable<HttpField>\n         }\n \n         /** Ensure that specific HttpField exists when the field may not exist or may\n-         * exist and be multi valued.\n+         * exist and be multi valued.  Multiple existing fields are merged into a\n+         * single field.\n          * @param field The header to ensure is contained.  The field is used\n          *              directly if possible so {@link PreEncodedHttpField}s can be\n          *              passed.  If the value needs to be merged with existing values,\n          *              then a new field is created.\n          */\n-        public void ensure(HttpField field)\n+        public void ensureField(HttpField field)\n         {\n+            // Is the field value multi valued?\n             if (field.getValue().indexOf(',') < 0)\n             {\n+                // Call Single valued computeEnsure with either String header name or enum HttpHeader\n                 if (field.getHeader() != null)\n                     computeField(field.getHeader(), (h, l) -> computeEnsure(field, l));\n                 else\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NTA1MA==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477285050", "bodyText": "Does it need to be public?", "author": "sbordet", "createdAt": "2020-08-26T13:06:52Z", "path": "jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java", "diffHunk": "@@ -0,0 +1,120 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.rewrite.handler;\n+\n+import java.io.IOException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpFields;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpHeaderValue;\n+import org.eclipse.jetty.http.PreEncodedHttpField;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.util.ArrayTernaryTrie;\n+import org.eclipse.jetty.util.Trie;\n+\n+/**\n+ * Special handling for MSIE (Microsoft Internet Explorer).\n+ * <ul>\n+ *     <li>Disable keep alive for SSL from IE5 or IE6 on Windows 2000</li>\n+ *     <li>Disable encodings for IE&lt;=6</li>\n+ * </ul>\n+ */\n+public class MsieRule extends Rule\n+{\n+    private static final int IEv5 = '5';\n+    private static final int IEv6 = '6';\n+    private static final Trie<Boolean> __IE6_BadOS = new ArrayTernaryTrie<>();\n+    private static final HttpField CONNECTION_CLOSE = new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.CLOSE);\n+    public static final HttpField VARY_USER_AGENT = new PreEncodedHttpField(HttpHeader.VARY, HttpHeader.USER_AGENT.asString());", "originalCommit": "838f8ee9777b05a1d82badd4ae8c511c064967a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8bac62d7844bf229518e1bb855aa9bb3af15efe", "chunk": "diff --git a/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java b/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java\nindex de268e5e54..3b0e0ce02a 100644\n--- a/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java\n+++ b/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java\n\n@@ -44,7 +44,7 @@ public class MsieRule extends Rule\n     private static final int IEv6 = '6';\n     private static final Trie<Boolean> __IE6_BadOS = new ArrayTernaryTrie<>();\n     private static final HttpField CONNECTION_CLOSE = new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.CLOSE);\n-    public static final HttpField VARY_USER_AGENT = new PreEncodedHttpField(HttpHeader.VARY, HttpHeader.USER_AGENT.asString());\n+    private static final HttpField VARY_USER_AGENT = new PreEncodedHttpField(HttpHeader.VARY, HttpHeader.USER_AGENT.asString());\n \n     static\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NTUzMA==", "url": "https://github.com/eclipse/jetty.project/pull/5196#discussion_r477285530", "bodyText": "Unnecessary empty line.", "author": "sbordet", "createdAt": "2020-08-26T13:07:41Z", "path": "jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java", "diffHunk": "@@ -0,0 +1,120 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.rewrite.handler;\n+\n+import java.io.IOException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jetty.http.HttpField;\n+import org.eclipse.jetty.http.HttpFields;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpHeaderValue;\n+import org.eclipse.jetty.http.PreEncodedHttpField;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.util.ArrayTernaryTrie;\n+import org.eclipse.jetty.util.Trie;\n+\n+/**\n+ * Special handling for MSIE (Microsoft Internet Explorer).\n+ * <ul>\n+ *     <li>Disable keep alive for SSL from IE5 or IE6 on Windows 2000</li>\n+ *     <li>Disable encodings for IE&lt;=6</li>\n+ * </ul>\n+ */\n+public class MsieRule extends Rule\n+{\n+    private static final int IEv5 = '5';\n+    private static final int IEv6 = '6';\n+    private static final Trie<Boolean> __IE6_BadOS = new ArrayTernaryTrie<>();\n+    private static final HttpField CONNECTION_CLOSE = new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.CLOSE);\n+    public static final HttpField VARY_USER_AGENT = new PreEncodedHttpField(HttpHeader.VARY, HttpHeader.USER_AGENT.asString());\n+\n+    static\n+    {\n+        __IE6_BadOS.put(\"NT 5.01\", Boolean.TRUE);\n+        __IE6_BadOS.put(\"NT 5.0\", Boolean.TRUE);\n+        __IE6_BadOS.put(\"NT 4.0\", Boolean.TRUE);\n+        __IE6_BadOS.put(\"98\", Boolean.TRUE);\n+        __IE6_BadOS.put(\"98; Win 9x 4.90\", Boolean.TRUE);\n+        __IE6_BadOS.put(\"95\", Boolean.TRUE);\n+        __IE6_BadOS.put(\"CE\", Boolean.TRUE);\n+    }\n+\n+    public MsieRule()\n+    {\n+        _handling = false;\n+        _terminating = false;\n+    }\n+\n+    @Override\n+    public String matchAndApply(String target, HttpServletRequest request, HttpServletResponse response) throws IOException\n+    {\n+        Request baseRequest = Request.getBaseRequest(request);\n+        if (baseRequest == null)\n+            return null;\n+\n+        HttpFields.Mutable reqFields = HttpFields.build(baseRequest.getHttpFields());\n+        HttpFields.Mutable resFields = baseRequest.getResponse().getHttpFields();\n+        String userAgent = reqFields.get(HttpHeader.USER_AGENT);\n+        boolean acceptEncodings = reqFields.contains(HttpHeader.ACCEPT_ENCODING);\n+        if (acceptEncodings)\n+            resFields.ensure(VARY_USER_AGENT);\n+\n+        int msie = userAgent.indexOf(\"MSIE\");\n+        if (msie >= 0)\n+        {\n+            int version = (userAgent.length() - msie > 5) ? userAgent.charAt(msie + 5) : IEv5;\n+\n+            if (version <= IEv6)\n+            {\n+                // Don't gzip responses for IE<=6\n+                if (acceptEncodings)\n+                    reqFields.remove(HttpHeader.ACCEPT_ENCODING);\n+\n+                // IE<=6 can't do persistent SSL\n+                if (request.isSecure())\n+                {\n+                    boolean badOs = false;\n+                    if (version == IEv6)\n+                    {\n+                        int windows = userAgent.indexOf(\"Windows\", msie + 5);\n+                        if (windows > 0)\n+                        {\n+                            int end = userAgent.indexOf(')', windows + 8);\n+                            badOs = (end < 0 || __IE6_BadOS.get(userAgent, windows + 8, end - windows - 8) != null);\n+                        }\n+                    }\n+\n+                    if (version <= IEv5 || badOs)\n+                    {\n+                        reqFields.remove(HttpHeader.KEEP_ALIVE);\n+                        reqFields.ensure(CONNECTION_CLOSE);\n+                        resFields.ensure(CONNECTION_CLOSE);\n+                        response.setHeader(HttpHeader.CONNECTION.asString(), HttpHeaderValue.CLOSE.asString());\n+                    }\n+                }\n+                baseRequest.setHttpFields(reqFields);\n+                return target;\n+            }\n+        }\n+        return null;\n+    }\n+", "originalCommit": "838f8ee9777b05a1d82badd4ae8c511c064967a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8bac62d7844bf229518e1bb855aa9bb3af15efe", "chunk": "diff --git a/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java b/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java\nindex de268e5e54..3b0e0ce02a 100644\n--- a/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java\n+++ b/jetty-rewrite/src/main/java/org/eclipse/jetty/rewrite/handler/MsieRule.java\n\n@@ -44,7 +44,7 @@ public class MsieRule extends Rule\n     private static final int IEv6 = '6';\n     private static final Trie<Boolean> __IE6_BadOS = new ArrayTernaryTrie<>();\n     private static final HttpField CONNECTION_CLOSE = new HttpField(HttpHeader.CONNECTION, HttpHeaderValue.CLOSE);\n-    public static final HttpField VARY_USER_AGENT = new PreEncodedHttpField(HttpHeader.VARY, HttpHeader.USER_AGENT.asString());\n+    private static final HttpField VARY_USER_AGENT = new PreEncodedHttpField(HttpHeader.VARY, HttpHeader.USER_AGENT.asString());\n \n     static\n     {\n"}}, {"oid": "b8bac62d7844bf229518e1bb855aa9bb3af15efe", "url": "https://github.com/eclipse/jetty.project/commit/b8bac62d7844bf229518e1bb855aa9bb3af15efe", "message": "rename and testing after review", "committedDate": "2020-08-26T14:45:27Z", "type": "commit"}]}