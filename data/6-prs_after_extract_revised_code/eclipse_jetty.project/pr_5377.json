{"pr_number": 5377, "pr_title": "Issue #5368 - ensure onMessage exits before next frame is read", "pr_createdAt": "2020-10-01T07:53:56Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5377", "timeline": [{"oid": "941ffcead7678a74fb3feb175cdd857b1d97ed43", "url": "https://github.com/eclipse/jetty.project/commit/941ffcead7678a74fb3feb175cdd857b1d97ed43", "message": "Issue #5368 - ensure onMessage exits before next frame is read\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-01T05:42:50Z", "type": "commit"}, {"oid": "6c94ef5848abb1778a32161e5c085a5b195baf01", "url": "https://github.com/eclipse/jetty.project/commit/6c94ef5848abb1778a32161e5c085a5b195baf01", "message": "Issue #5368 - warn if MessageInputStream closed without fully consuming\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-06T06:43:58Z", "type": "commit"}, {"oid": "7df0dfa7c2c8210514f83688d84a9cae2ecc3cf2", "url": "https://github.com/eclipse/jetty.project/commit/7df0dfa7c2c8210514f83688d84a9cae2ecc3cf2", "message": "warn if did not read until EOF once per MessageInputStream", "committedDate": "2020-10-07T04:41:51Z", "type": "commit"}, {"oid": "aa1299912d39a9752217e57560a3076d4999df2d", "url": "https://github.com/eclipse/jetty.project/commit/aa1299912d39a9752217e57560a3076d4999df2d", "message": "Issue #5368 - when resuming always call onFillable from newThread.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-07T05:32:06Z", "type": "commit"}, {"oid": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "url": "https://github.com/eclipse/jetty.project/commit/09947681fe37da9aa2c8d9b943c608720bcbbaa9", "message": "allow MessageInputStream to read multiple bytes at a time\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-07T08:48:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MjIyMw==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503472223", "bodyText": "Wouldn't this return leave a MessageInputStream laying around in a different thread?", "author": "joakime", "createdAt": "2020-10-12T18:44:30Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/events/JettyAnnotatedEventDriver.java", "diffHunk": "@@ -115,11 +114,11 @@ else if (events.onBinary.isStreaming())\n                     }\n                     catch (Throwable t)\n                     {\n-                        // dispatched calls need to be reported\n                         session.close(t);\n+                        return;", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMzA5Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503603097", "bodyText": "Not sure what you mean here, this is in the same thread the MessageInputStream is being read from. So onMessage will have thrown so now we need to close the Session.\nIf we don't return and call handlerComplete(), this will try to resume reading more frames but we have already closed the session. We could close the MessageInputStream before returning but this will not have a major effect as no one is reading from it.", "author": "lachlan-roberts", "createdAt": "2020-10-13T00:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MjIyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MjQxNg==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503472416", "bodyText": "Wouldn't this return leave a MessageReader laying around in a different thread?", "author": "joakime", "createdAt": "2020-10-12T18:44:55Z", "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/endpoints/JsrEndpointEventDriver.java", "diffHunk": "@@ -209,9 +209,10 @@ else if (wrapper.wantsStreams())\n                     catch (Throwable t)\n                     {\n                         session.close(t);\n+                        return;", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MjY5MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503472691", "bodyText": "This return seem out of place. shouldn't we at least close/fail the MessageReader too?", "author": "joakime", "createdAt": "2020-10-12T18:45:31Z", "path": "jetty-websocket/javax-websocket-client-impl/src/main/java/org/eclipse/jetty/websocket/jsr356/endpoints/JsrAnnotatedEventDriver.java", "diffHunk": "@@ -343,9 +338,10 @@ public void onTextFrame(ByteBuffer buffer, boolean fin) throws IOException\n                     catch (Throwable e)\n                     {\n                         session.close(e);\n+                        return;", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3Mjg0Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503472843", "bodyText": "Ditto, we need to cleanup/close/fail the MessageReader before we return.", "author": "joakime", "createdAt": "2020-10-12T18:45:56Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/events/JettyAnnotatedEventDriver.java", "diffHunk": "@@ -262,22 +261,21 @@ public void onTextFrame(ByteBuffer buffer, boolean fin) throws IOException\n             }\n             else if (events.onText.isStreaming())\n             {\n-                MessageInputStream inputStream = new MessageInputStream(session);\n-                activeMessage = new MessageReader(inputStream);\n-                final MessageAppender msg = activeMessage;\n+                MessageReader reader = new MessageReader(session);\n+                activeMessage = reader;\n                 dispatch(() ->\n                 {\n                     try\n                     {\n-                        events.onText.call(websocket, session, msg);\n+                        events.onText.call(websocket, session, reader);\n                     }\n                     catch (Throwable t)\n                     {\n-                        // dispatched calls need to be reported\n                         session.close(t);\n+                        return;", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MzExNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503473115", "bodyText": "Uhm, we dispatch now for onFillable?\nAlways?\nThis seems to be a mistake.", "author": "joakime", "createdAt": "2020-10-12T18:46:39Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/io/AbstractWebSocketConnection.java", "diffHunk": "@@ -521,7 +521,7 @@ public void resume()\n     {\n         ByteBuffer resume = readState.resume();\n         if (resume != null)\n-            onFillable(resume);\n+            getExecutor().execute(() -> onFillable(resume));", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMzE2NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503603165", "bodyText": "We only dispatch for onFillable() when resuming. This is so if we get a control frame in the middle of the message eg PONG, we don't call the pong MessageHandler from within the same thread that is processing the MessageHandler<InputStream>.\nThe demand in jetty 10 is similar, there is always a call to getExecutor().execute(this); when demanding another frame.", "author": "lachlan-roberts", "createdAt": "2020-10-13T00:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MzExNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3Mzk5MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503473991", "bodyText": "do we want a new ByteBuffer copy(byte[], int, int) method for this as well?", "author": "joakime", "createdAt": "2020-10-12T18:48:43Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -209,10 +231,14 @@ public int read() throws IOException\n                 }\n             }\n \n-            int result = activeBuffer.get() & 0xFF;\n+            ByteBuffer buffer = BufferUtil.toBuffer(b, off, len);", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NDkyMA==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503474920", "bodyText": "What?  I don't understand this comment.\nSo the application is using InputStream.read(byte[], int, int), and the state is COMPLETE, meaning there's no more frames to read, why are we returning \"written\" and not -1?", "author": "joakime", "createdAt": "2020-10-12T18:50:43Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -221,6 +247,11 @@ public int read() throws IOException\n                         case CLOSED:\n                             return -1;\n \n+                        case COMPLETE:\n+                            // If we are complete we have read the last frame but\n+                            // don't want to resume reading until onMessage() exits.", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNDIzMg==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503604232", "bodyText": "COMPLETE means it has all the content up to EOF.\nCLOSED means all the content has been read up to EOF or close() has been called. (we will return -1 in CLOSED state).\nI will add better comments to explain the difference.", "author": "lachlan-roberts", "createdAt": "2020-10-13T00:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NDkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "680020dcb2cc22dc3252690f263ecd890d78aa5c", "chunk": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\nindex acc91c507e..96c9f99dee 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n\n@@ -259,7 +263,7 @@ public class MessageInputStream extends InputStream implements MessageAppender\n                             break;\n \n                         case RESUMED:\n-                            throw new IllegalStateException();\n+                            throw new IllegalStateException(\"Incorrect State: \" + state.name());\n                     }\n                 }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NTQ0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503475448", "bodyText": "We loop infinitely on COMPLETE?\nIf so, I'm not liking this solution.", "author": "joakime", "createdAt": "2020-10-12T18:51:54Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -130,47 +145,53 @@ public void close()\n                     return;\n \n                 case SUSPENDED:\n-                    resume = suspendToken;\n-                    suspendToken = null;\n-                    state = State.CLOSED;\n-                    break;\n-\n                 case RESUMED:\n-                    state = State.CLOSED;\n+                    state = State.COMPLETE;\n                     break;\n+\n+                default:\n+                    throw new IllegalStateException();\n             }\n \n-            buffers.clear();\n             buffers.offer(EOF);\n         }\n-\n-        // May need to resume to discard until we reach next message.\n-        if (resume != null)\n-            resume.resume();\n     }\n \n-    @Override\n-    public void mark(int readlimit)\n+    public void handlerComplete()\n     {\n-        // Not supported.\n-    }\n+        // Close the InputStream.\n+        close();\n \n-    @Override\n-    public boolean markSupported()\n-    {\n-        return false;\n+        // May need to resume to resume and read to the next message.\n+        SuspendToken resume;\n+        synchronized (this)\n+        {\n+            resume = suspendToken;\n+            suspendToken = null;\n+        }\n+\n+        if (resume != null)\n+            resume.resume();\n     }\n \n     @Override\n-    public void messageComplete()\n+    public int read() throws IOException\n     {\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Message completed\");\n-        buffers.offer(EOF);\n+        byte[] bytes = new byte[1];\n+        while (true)\n+        {\n+            int read = read(bytes, 0, 1);\n+            if (read < 0)\n+                return -1;\n+            if (read == 0)\n+                continue;\n+\n+            return bytes[0] & 0xFF;", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NzA0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503477048", "bodyText": "If the message is complete, that should offer the last frame with FIN=true and then an EOF in the buffer queue.\nWhy do we have a new state?", "author": "joakime", "createdAt": "2020-10-12T18:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMzIwNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503603205", "bodyText": "The state COMPLETE means that we have all the content of the message and have appended an EOF buffer in the queue after that. We need this state so we don't resume reading new frames after the fin==true and to enforce that no new frames are appended after the fin==true.\nWe will not loop infinitely on COMPLETE, we will read -1 when we run out of content to read.", "author": "lachlan-roberts", "createdAt": "2020-10-13T00:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NTQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "419eefc2efca3c20c8bc69e0908b9126159c56c6", "chunk": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\nindex acc91c507e..97ea9200e4 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n\n@@ -131,32 +142,6 @@ public class MessageInputStream extends InputStream implements MessageAppender\n         }\n     }\n \n-    @Override\n-    public void messageComplete()\n-    {\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Message completed\");\n-\n-        synchronized (this)\n-        {\n-            switch (state)\n-            {\n-                case CLOSED:\n-                    return;\n-\n-                case SUSPENDED:\n-                case RESUMED:\n-                    state = State.COMPLETE;\n-                    break;\n-\n-                default:\n-                    throw new IllegalStateException();\n-            }\n-\n-            buffers.offer(EOF);\n-        }\n-    }\n-\n     public void handlerComplete()\n     {\n         // Close the InputStream.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NjIxMg==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503476212", "bodyText": "You don't explain why we have a new COMPLETE state, and how it's different then the others.\nEg: what is the different between COMPLETE vs CLOSED?", "author": "joakime", "createdAt": "2020-10-12T18:53:45Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -55,6 +55,7 @@\n     {\n         RESUMED,\n         SUSPENDED,\n+        COMPLETE,", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMzIzNg==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503603236", "bodyText": "It might be be possible to remove COMPELTE now that close() does not call resume.\nAlthough it is still useful to enforce no new frames are appended after fin=true.", "author": "lachlan-roberts", "createdAt": "2020-10-13T00:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NjIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "680020dcb2cc22dc3252690f263ecd890d78aa5c", "chunk": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\nindex acc91c507e..96c9f99dee 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n\n@@ -53,9 +53,24 @@ public class MessageInputStream extends InputStream implements MessageAppender\n \n     private enum State\n     {\n+        /**\n+         * Open and waiting for a frame to be delivered in {@link #appendFrame(ByteBuffer, boolean)}.\n+         */\n         RESUMED,\n+\n+        /**\n+         * We have suspended the session after reading a websocket frame but have not reached the end of the message.\n+         */\n         SUSPENDED,\n+\n+        /**\n+         * We have received a frame with fin==true and have suspended until we are signaled that onMessage method exited.\n+         */\n         COMPLETE,\n+\n+        /**\n+         * We have read to EOF or someone has called InputStream.close(), any further reads will result in reading -1.\n+         */\n         CLOSED\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NzMwNw==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503477307", "bodyText": "Perhaps we should detail why this state is illegal in the throwable message?", "author": "joakime", "createdAt": "2020-10-12T18:56:16Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -105,11 +94,14 @@ public void appendFrame(ByteBuffer framePayload, boolean fin) throws IOException\n                         state = State.SUSPENDED;\n                         break;\n \n-                    case SUSPENDED:\n+                    default:\n                         throw new IllegalStateException();", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "419eefc2efca3c20c8bc69e0908b9126159c56c6", "chunk": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\nindex acc91c507e..97ea9200e4 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n\n@@ -77,31 +77,42 @@ public class MessageInputStream extends InputStream implements MessageAppender\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Appending {} chunk: {}\", fin ? \"final\" : \"non-final\", BufferUtil.toDetailString(framePayload));\n \n+        // Avoid entering synchronized block if there is nothing to do.\n+        boolean bufferIsEmpty = BufferUtil.isEmpty(framePayload);\n+        if (bufferIsEmpty && !fin)\n+            return;\n+\n         try\n         {\n-            if (BufferUtil.isEmpty(framePayload))\n-                return;\n-\n             synchronized (this)\n             {\n-                switch (state)\n+                if (!bufferIsEmpty)\n                 {\n-                    case CLOSED:\n-                        return;\n+                    switch (state)\n+                    {\n+                        case CLOSED:\n+                            return;\n+\n+                        case RESUMED:\n+                            suspendToken = session.suspend();\n+                            state = State.SUSPENDED;\n+                            break;\n \n-                    case RESUMED:\n-                        suspendToken = session.suspend();\n-                        state = State.SUSPENDED;\n-                        break;\n+                        default:\n+                            throw new IllegalStateException();\n+                    }\n \n-                    default:\n-                        throw new IllegalStateException();\n+                    // Put the payload into the queue, by copying it.\n+                    // Copying is necessary because the payload will\n+                    // be processed after this method returns.\n+                    buffers.put(copy(framePayload));\n                 }\n \n-                // Put the payload into the queue, by copying it.\n-                // Copying is necessary because the payload will\n-                // be processed after this method returns.\n-                buffers.put(copy(framePayload));\n+                if (fin)\n+                {\n+                    buffers.add(EOF);\n+                    state = State.COMPLETE;\n+                }\n             }\n         }\n         catch (InterruptedException e)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3ODQ0MA==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503478440", "bodyText": "We should probably be paying attention to the fin parameter on this appendMessage(ByteBuffer, boolean) and add the EOF sentinel to the buffers if it's set to true.", "author": "joakime", "createdAt": "2020-10-12T18:58:50Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -105,11 +94,14 @@ public void appendFrame(ByteBuffer framePayload, boolean fin) throws IOException\n                         state = State.SUSPENDED;\n                         break;\n \n-                    case SUSPENDED:\n+                    default:\n                         throw new IllegalStateException();\n                 }\n \n-                buffers.put(copy);\n+                // Put the payload into the queue, by copying it.\n+                // Copying is necessary because the payload will\n+                // be processed after this method returns.\n+                buffers.put(copy(framePayload));", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "419eefc2efca3c20c8bc69e0908b9126159c56c6", "chunk": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\nindex acc91c507e..97ea9200e4 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n\n@@ -77,31 +77,42 @@ public class MessageInputStream extends InputStream implements MessageAppender\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Appending {} chunk: {}\", fin ? \"final\" : \"non-final\", BufferUtil.toDetailString(framePayload));\n \n+        // Avoid entering synchronized block if there is nothing to do.\n+        boolean bufferIsEmpty = BufferUtil.isEmpty(framePayload);\n+        if (bufferIsEmpty && !fin)\n+            return;\n+\n         try\n         {\n-            if (BufferUtil.isEmpty(framePayload))\n-                return;\n-\n             synchronized (this)\n             {\n-                switch (state)\n+                if (!bufferIsEmpty)\n                 {\n-                    case CLOSED:\n-                        return;\n+                    switch (state)\n+                    {\n+                        case CLOSED:\n+                            return;\n+\n+                        case RESUMED:\n+                            suspendToken = session.suspend();\n+                            state = State.SUSPENDED;\n+                            break;\n \n-                    case RESUMED:\n-                        suspendToken = session.suspend();\n-                        state = State.SUSPENDED;\n-                        break;\n+                        default:\n+                            throw new IllegalStateException();\n+                    }\n \n-                    default:\n-                        throw new IllegalStateException();\n+                    // Put the payload into the queue, by copying it.\n+                    // Copying is necessary because the payload will\n+                    // be processed after this method returns.\n+                    buffers.put(copy(framePayload));\n                 }\n \n-                // Put the payload into the queue, by copying it.\n-                // Copying is necessary because the payload will\n-                // be processed after this method returns.\n-                buffers.put(copy(framePayload));\n+                if (fin)\n+                {\n+                    buffers.add(EOF);\n+                    state = State.COMPLETE;\n+                }\n             }\n         }\n         catch (InterruptedException e)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3ODY4OA==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503478688", "bodyText": "I don't like this method concept.\nWe already have the \"boolean fin\" on the appendMessage, why are we not using it?", "author": "joakime", "createdAt": "2020-10-12T18:59:26Z", "path": "jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java", "diffHunk": "@@ -121,7 +113,30 @@ public void appendFrame(ByteBuffer framePayload, boolean fin) throws IOException\n     @Override\n     public void close()\n     {\n-        SuspendToken resume = null;\n+        synchronized (this)\n+        {\n+            if (state == State.CLOSED)\n+                return;\n+\n+            boolean remainingContent = (state != State.COMPLETE) ||\n+                (!buffers.isEmpty() && buffers.peek() != EOF) ||\n+                (activeBuffer != null && activeBuffer.hasRemaining());\n+\n+            if (remainingContent)\n+                LOG.warn(\"MessageInputStream closed without fully consuming content\");\n+\n+            state = State.CLOSED;\n+            buffers.clear();\n+            buffers.add(EOF);\n+        }\n+    }\n+\n+    @Override\n+    public void messageComplete()", "originalCommit": "09947681fe37da9aa2c8d9b943c608720bcbbaa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwMzI5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5377#discussion_r503603299", "bodyText": "I don't know, this concept already existed I didn't create it. Seems a bit redundant, but this is the reason we don't use the boolean fin in appendFrame.\nI think its better to move this logic into the appendFrame method to get the state change done in the same synchronized block.", "author": "lachlan-roberts", "createdAt": "2020-10-13T00:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3ODY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "419eefc2efca3c20c8bc69e0908b9126159c56c6", "chunk": "diff --git a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\nindex acc91c507e..97ea9200e4 100644\n--- a/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n+++ b/jetty-websocket/websocket-common/src/main/java/org/eclipse/jetty/websocket/common/message/MessageInputStream.java\n\n@@ -131,32 +142,6 @@ public class MessageInputStream extends InputStream implements MessageAppender\n         }\n     }\n \n-    @Override\n-    public void messageComplete()\n-    {\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Message completed\");\n-\n-        synchronized (this)\n-        {\n-            switch (state)\n-            {\n-                case CLOSED:\n-                    return;\n-\n-                case SUSPENDED:\n-                case RESUMED:\n-                    state = State.COMPLETE;\n-                    break;\n-\n-                default:\n-                    throw new IllegalStateException();\n-            }\n-\n-            buffers.offer(EOF);\n-        }\n-    }\n-\n     public void handlerComplete()\n     {\n         // Close the InputStream.\n"}}, {"oid": "419eefc2efca3c20c8bc69e0908b9126159c56c6", "url": "https://github.com/eclipse/jetty.project/commit/419eefc2efca3c20c8bc69e0908b9126159c56c6", "message": "move logic from messageComplete into appendFrame with fin==true\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-13T23:26:08Z", "type": "commit"}, {"oid": "680020dcb2cc22dc3252690f263ecd890d78aa5c", "url": "https://github.com/eclipse/jetty.project/commit/680020dcb2cc22dc3252690f263ecd890d78aa5c", "message": "Issue #5368 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-15T01:08:57Z", "type": "commit"}, {"oid": "be041d3044ee1a2d009c27c8e43cf32d9173f3ac", "url": "https://github.com/eclipse/jetty.project/commit/be041d3044ee1a2d009c27c8e43cf32d9173f3ac", "message": "Issue #5368 - add tests for not reading to end of InputStream\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-10-15T01:10:33Z", "type": "commit"}]}