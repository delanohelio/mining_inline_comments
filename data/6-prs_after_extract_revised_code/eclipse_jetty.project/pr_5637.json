{"pr_number": 5637, "pr_title": "Issue #5605 unconsumed input on sendError", "pr_createdAt": "2020-11-10T21:37:25Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5637", "timeline": [{"oid": "0cdc78e3a6089d8021269ed7e480dab0ad21b896", "url": "https://github.com/eclipse/jetty.project/commit/0cdc78e3a6089d8021269ed7e480dab0ad21b896", "message": "Issue #5605 unconsumed input on sendError\n\nAdd Connection:close if content can't be consumed during a sendError. Processed after the request has returned to the container.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-11-10T21:35:42Z", "type": "commit"}, {"oid": "368b0715ba83698569f680d19475e9351fe5473a", "url": "https://github.com/eclipse/jetty.project/commit/368b0715ba83698569f680d19475e9351fe5473a", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5605-unconsumed-send-error", "committedDate": "2020-11-11T08:45:44Z", "type": "commit"}, {"oid": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "url": "https://github.com/eclipse/jetty.project/commit/4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "message": "Update from review\n\n + Add close on all uncommitted requests when content cannot be consumed.", "committedDate": "2020-11-11T12:55:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521472140", "bodyText": "Isn't this a duplication of what happens in COMPLETE?", "author": "sbordet", "createdAt": "2020-11-11T16:17:50Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,13 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            if (!_request.getHttpInput().consumeAll())\n+                                ensureConnectionClose();", "originalCommit": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODIxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521488219", "bodyText": "It is similar logic, but happens at a different time - ie between returning from a dispatch after a sendError and before an ERROR dispatch... which may do lots and lots of stuff before we ever get to COMPLETE.", "author": "gregw", "createdAt": "2020-11-11T16:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMTk5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521521998", "bodyText": "@gregw and so, if we may dispatch to an error handler that then reads the request content, we should not do it ourselves here, no?", "author": "sbordet", "createdAt": "2020-11-11T17:31:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyNzMxMA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521527310", "bodyText": "I don't think that is a valid use case for an error handler to do.   I think it is far better we consume the input from the failed request and then do the ERROR dispatch.", "author": "gregw", "createdAt": "2020-11-11T17:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzNDcyNg==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521534726", "bodyText": "All righty.", "author": "sbordet", "createdAt": "2020-11-11T17:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "ef560df09d08922df2ee4200e5b4b53afd788c01", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 4be9a8265f..d12e90695d 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -415,8 +415,7 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n                             _response.setStatus(code);\n \n                             // Add Connection:close if we can't consume the input\n-                            if (!_request.getHttpInput().consumeAll())\n-                                ensureConnectionClose();\n+                            ensureContentConsumedOrConnectionClose();\n \n                             ContextHandler.Context context = (ContextHandler.Context)_request.getAttribute(ErrorHandler.ERROR_CONTEXT);\n                             ErrorHandler errorHandler = ErrorHandler.getErrorHandler(getServer(), context == null ? null : context.getContextHandler());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjQ0NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521472445", "bodyText": "Remove \"then\" at end of line, it duplicates the one on the next line.", "author": "sbordet", "createdAt": "2020-11-11T16:18:18Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +502,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+                            // If content has not been consumed and we can't consume it now without blocking, then", "originalCommit": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ea3c05b99a790c4be696e91742bf55ad455697b", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 4be9a8265f..f4241635cb 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -510,7 +510,7 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n                                 _response.sendError(HttpStatus.NOT_FOUND_404);\n                                 break;\n                             }\n-                            // If content has not been consumed and we can't consume it now without blocking, then\n+                            // If content has not been consumed and we can't consume it now without blocking\n                             // then ensure we signal that the connection will be closed.\n                             if (!_request.getHttpInput().consumeAll())\n                                 ensureConnectionClose();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521474764", "bodyText": "Shouldn't duplicates be discarded?", "author": "sbordet", "createdAt": "2020-11-11T16:21:43Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));", "originalCommit": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4OTg4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521489882", "bodyText": "Perhaps... but I'm just really leaving the other values exactly as they are, other than amalgamating on to the same header.  If somebody else put a duplicate in there, then that's there problem and I don't want to waste cycles here fixing it.", "author": "gregw", "createdAt": "2020-11-11T16:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMjMyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521522321", "bodyText": "Okay.", "author": "sbordet", "createdAt": "2020-11-11T17:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "6ea3c05b99a790c4be696e91742bf55ad455697b", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 4be9a8265f..f4241635cb 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -577,7 +577,7 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n \n             return new HttpField(HttpHeader.CONNECTION, fields.stream()\n                 .flatMap(field -> Stream.of(field.getValues()))\n-                .collect(Collectors.joining(\", \")) + \",close\");\n+                .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NTcxNA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521475714", "bodyText": "You are using \", \" (comma+space) to delimit value, so add a space before \"close\" when you add it.\nSame as above, should duplicates be discarded?", "author": "sbordet", "createdAt": "2020-11-11T16:23:08Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +558,29 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    private void ensureConnectionClose()\n+    {\n+        _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+        {\n+            if (fields == null || fields.isEmpty())\n+                return HttpConnection.CONNECTION_CLOSE;\n+\n+            if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+            {\n+                if (fields.size() == 1)\n+                    return fields.get(0);\n+\n+                return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                    .flatMap(field -> Stream.of(field.getValues()))\n+                    .collect(Collectors.joining(\", \")));\n+            }\n+\n+            return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                .flatMap(field -> Stream.of(field.getValues()))\n+                .collect(Collectors.joining(\", \")) + \",close\");", "originalCommit": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ea3c05b99a790c4be696e91742bf55ad455697b", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 4be9a8265f..f4241635cb 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -577,7 +577,7 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n \n             return new HttpField(HttpHeader.CONNECTION, fields.stream()\n                 .flatMap(field -> Stream.of(field.getValues()))\n-                .collect(Collectors.joining(\", \")) + \",close\");\n+                .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());\n         });\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521476098", "bodyText": "Why was this removed?", "author": "sbordet", "createdAt": "2020-11-11T16:23:40Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java", "diffHunk": "@@ -904,8 +904,6 @@ public void sendError(int code, String message)\n                 default:\n                     throw new IllegalStateException(getStatusStringLocked());\n             }\n-            if (_outputState != OutputState.OPEN)\n-                throw new IllegalStateException(\"Response is \" + _outputState);", "originalCommit": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4OTE2NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521489165", "bodyText": "I would also prefer a better error message ...\n            if (_outputState != OutputState.OPEN)\n                throw new IllegalStateException(\"Response is not open (was \" + _outputState + \"));", "author": "joakime", "createdAt": "2020-11-11T16:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5Mjg5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521492890", "bodyText": "See lines 895 and 896 above.... it was duplicated.", "author": "gregw", "createdAt": "2020-11-11T16:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "727b3e18e98ea08a66090f8a282a399ad00fdf56", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java\nindex be4849ae8f..4caf8106a1 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannelState.java\n\n@@ -904,6 +904,8 @@ public class HttpChannelState\n                 default:\n                     throw new IllegalStateException(getStatusStringLocked());\n             }\n+            if (_outputState != OutputState.OPEN)\n+                throw new IllegalStateException(\"Response is \" + _outputState);\n \n             response.setStatus(code);\n             response.errorClose();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521477930", "bodyText": "Gah! This test will break as soon as we change the order of the headers, or if a JDK decides to change how things are stored in a Map. Not a biggie for this PR, but...", "author": "sbordet", "createdAt": "2020-11-11T16:26:19Z", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java", "diffHunk": "@@ -328,6 +328,7 @@ public void testPartialReadThenClose() throws Exception\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n+            assertThat(in.readLine(), containsString(\"Connection: close\"));", "originalCommit": "4b934b5262c3dd1da794bf3bfe7e3f15e92912ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODMzNA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521488334", "bodyText": "Use our HttpTester here.", "author": "joakime", "createdAt": "2020-11-11T16:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5MDcyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521490721", "bodyText": "yeah well it broke as soon as I changed our strategy for closing, so yes fragile.... but at least it made me look.", "author": "gregw", "createdAt": "2020-11-11T16:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5MjA4MA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r521492080", "bodyText": "Not keen on major rewrite of this test - there are lot of such tests.   We can fix them in another PR.", "author": "gregw", "createdAt": "2020-11-11T16:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NzkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "8c0e4fe204022d17d4075e49e914de2abfc9ce27", "chunk": "diff --git a/jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java b/jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java\nindex 78f0b695b0..c3b8604756 100644\n--- a/jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java\n+++ b/jetty-server/src/test/java/org/eclipse/jetty/server/AsyncRequestReadTest.java\n\n@@ -328,7 +328,6 @@ public class AsyncRequestReadTest\n \n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             assertThat(in.readLine(), containsString(\"HTTP/1.1 200 OK\"));\n-            assertThat(in.readLine(), containsString(\"Connection: close\"));\n             assertThat(in.readLine(), containsString(\"Content-Length:\"));\n             assertThat(in.readLine(), containsString(\"Server:\"));\n             in.readLine();\n"}}, {"oid": "6ea3c05b99a790c4be696e91742bf55ad455697b", "url": "https://github.com/eclipse/jetty.project/commit/6ea3c05b99a790c4be696e91742bf55ad455697b", "message": "Update from review\n\n + fixed comment\n + space comma", "committedDate": "2020-11-11T16:43:29Z", "type": "commit"}, {"oid": "83ad9ccb0e3f8303a22d4234d3662c86602f01fe", "url": "https://github.com/eclipse/jetty.project/commit/83ad9ccb0e3f8303a22d4234d3662c86602f01fe", "message": "Only consume input in COMPLETE if response is >=200 (ie not an upgrade or similar)", "committedDate": "2020-11-11T18:42:54Z", "type": "commit"}, {"oid": "ef560df09d08922df2ee4200e5b4b53afd788c01", "url": "https://github.com/eclipse/jetty.project/commit/ef560df09d08922df2ee4200e5b4b53afd788c01", "message": "Updated to be less adventurous\n\nI do not think it was valid to always consumeAll in COMPLETE as this could break upgrades with both 101s and 200s\nInstead I have reverted to having this consumeAll logic only:\n + in sendError once control has passed back to the container and we are about to generate an error page.\n + in front of all the sendRedirection that we do without calling the application first.\n\nExtra tests also added", "committedDate": "2020-11-12T11:44:35Z", "type": "commit"}, {"oid": "8c0e4fe204022d17d4075e49e914de2abfc9ce27", "url": "https://github.com/eclipse/jetty.project/commit/8c0e4fe204022d17d4075e49e914de2abfc9ce27", "message": "Updated to be less adventurous\n\nreverted test", "committedDate": "2020-11-12T16:05:06Z", "type": "commit"}, {"oid": "727b3e18e98ea08a66090f8a282a399ad00fdf56", "url": "https://github.com/eclipse/jetty.project/commit/727b3e18e98ea08a66090f8a282a399ad00fdf56", "message": "Testcase for odd sendError(400) issue.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-11-14T00:43:03Z", "type": "commit"}, {"oid": "59611a4661f527ae5273990f7f62301f2ffb1ea6", "url": "https://github.com/eclipse/jetty.project/commit/59611a4661f527ae5273990f7f62301f2ffb1ea6", "message": "Fix for odd sendError(400) issue.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-11-14T10:59:02Z", "type": "commit"}, {"oid": "7846e0fd39991aa714fdd0d8db91e2866760e19d", "url": "https://github.com/eclipse/jetty.project/commit/7846e0fd39991aa714fdd0d8db91e2866760e19d", "message": "Testcase for odd sendError(400) issue.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-11-14T12:04:27Z", "type": "commit"}, {"oid": "66ea4cccf25f0b60225c1b77ec1176d9159d81cf", "url": "https://github.com/eclipse/jetty.project/commit/66ea4cccf25f0b60225c1b77ec1176d9159d81cf", "message": "Always try to consumeAll on all requests", "committedDate": "2020-11-14T13:09:54Z", "type": "commit"}, {"oid": "05182736271af0cdd9536861d549109f977c60b7", "url": "https://github.com/eclipse/jetty.project/commit/05182736271af0cdd9536861d549109f977c60b7", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5605-unconsumed-send-error", "committedDate": "2020-11-16T10:23:47Z", "type": "commit"}, {"oid": "c04f31b4897b2ebfdcde2169e9ef12fb749b9cd3", "url": "https://github.com/eclipse/jetty.project/commit/c04f31b4897b2ebfdcde2169e9ef12fb749b9cd3", "message": "Refinements after testing in 10", "committedDate": "2020-11-16T10:40:10Z", "type": "commit"}, {"oid": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "url": "https://github.com/eclipse/jetty.project/commit/901e6dcdd6676ed745ee3853d787b90f5abe1020", "message": "Refinements after testing in 10\n\nFixed test", "committedDate": "2020-11-16T10:46:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMDA5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524130099", "bodyText": "I would put this code inside sendRedirect() to: A) avoid duplicating it all over the places and B) avoid Request.getBaseRequest(request) since I'm already inside the Jetty Response where I can easily access the HttpChannel.", "author": "sbordet", "createdAt": "2020-11-16T11:06:06Z", "path": "jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java", "diffHunk": "@@ -173,6 +173,7 @@ public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject\n                     }\n \n                     response.setContentLength(0);\n+                    Request.getBaseRequest(request).getHttpChannel().ensureContentConsumedOrConnectionClose();", "originalCommit": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE4ODIzNw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524188237", "bodyText": "It can't go inside of sendRedirect() as it is perfectly OK for an application to send a redirect and then consume the content.\nWe can only do it on our own sendRedirect calls.  We could have our own method for consumeAllAndSendRedirect?", "author": "gregw", "createdAt": "2020-11-16T11:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMDA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbaf3bfbd6399eab2c83ac44227bf1631e084837", "chunk": "diff --git a/jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java b/jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java\nindex c6e9b45be1..71e0243bda 100644\n--- a/jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java\n+++ b/jetty-jaspi/src/main/java/org/eclipse/jetty/security/jaspi/modules/FormAuthModule.java\n\n@@ -173,8 +173,7 @@ public class FormAuthModule extends BaseAuthModule\n                     }\n \n                     response.setContentLength(0);\n-                    Request.getBaseRequest(request).getHttpChannel().ensureContentConsumedOrConnectionClose();\n-                    response.sendRedirect(response.encodeRedirectURL(nuri));\n+                    Request.getBaseRequest(request).getResponse().sendRedirect(HttpServletResponse.SC_MOVED_TEMPORARILY, nuri, true);\n                     return AuthStatus.SEND_CONTINUE;\n                 }\n                 // not authenticated\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524156482", "bodyText": "I wonder whether this could be more lax... take into account 201 Created, 204 No Content, 206 Partial Content, etc.", "author": "sbordet", "createdAt": "2020-11-16T11:30:12Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -492,10 +501,18 @@ public boolean handle()\n \n                     case COMPLETE:\n                     {\n-                        if (!_response.isCommitted() && !_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                        if (!_response.isCommitted())\n                         {\n-                            _response.sendError(HttpStatus.NOT_FOUND_404);\n-                            break;\n+                            if (!_request.isHandled() && !_response.getHttpOutput().isClosed())\n+                            {\n+                                // The request was not actually handled\n+                                _response.sendError(HttpStatus.NOT_FOUND_404);\n+                                break;\n+                            }\n+\n+                            // Indicate Connection:close if we can't consume all.\n+                            if (_response.getStatus() >= 200)", "originalCommit": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5ODU0NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524198545", "bodyText": "Why would 201, 204 and 206 not what this behaviour?   All we are doing is consumeAll a little earlier than we would have otherwise, so we get a chance to send a Connection: close if we can't consume all.     We just want to exclude partial responses (ie 100, 101 etc.) which handle content differently.", "author": "gregw", "createdAt": "2020-11-16T12:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNTczMw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524235733", "bodyText": "Doh, wrong comment on my side.", "author": "sbordet", "createdAt": "2020-11-16T12:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE1NjQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "cbaf3bfbd6399eab2c83ac44227bf1631e084837", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 77a87f77da..94e2e22309 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -512,7 +517,7 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n \n                             // Indicate Connection:close if we can't consume all.\n                             if (_response.getStatus() >= 200)\n-                                ensureContentConsumedOrConnectionClose();\n+                                ensureConsumeAllOrNotPersistent();\n                         }\n \n                         // RFC 7230, section 3.3.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524160739", "bodyText": "The block above has a call to abort(), which then falls through, which I don't think it's right, we should break.", "author": "sbordet", "createdAt": "2020-11-16T11:34:01Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -511,12 +528,7 @@ public boolean handle()\n                                 break;\n                             }\n                         }\n-\n-                        // TODO Currently a blocking/aborting consumeAll is done in the handling of the TERMINATED\n-                        // TODO Action triggered by the completed callback below.  It would be possible to modify the\n-                        // TODO callback to do a non-blocking consumeAll at this point and only call completed when\n-                        // TODO that is done.\n-\n+                        ", "originalCommit": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE5NjU1OA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524196558", "bodyText": "Why is that not correct?   It still sets up the final call to completed.\nBesides, that is existing behaviour and not really related to this PR.", "author": "gregw", "createdAt": "2020-11-16T12:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNjQwMg==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524236402", "bodyText": "Okay.", "author": "sbordet", "createdAt": "2020-11-16T12:45:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MDczOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2MzIzMg==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524163232", "bodyText": "I think this needs a comment on why it is done here, because otherwise it should be done only in COMPLETE.", "author": "sbordet", "createdAt": "2020-11-16T11:36:27Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -406,7 +410,12 @@ public boolean handle()\n                             // the following is needed as you cannot trust the response code and reason\n                             // as those could have been modified after calling sendError\n                             Integer code = (Integer)_request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\n-                            _response.setStatus(code != null ? code : HttpStatus.INTERNAL_SERVER_ERROR_500);\n+                            if (code == null)\n+                                code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n+                            _response.setStatus(code);\n+\n+                            // Add Connection:close if we can't consume the input\n+                            ensureContentConsumedOrConnectionClose();", "originalCommit": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdbd5d9dde092715bed1a985ab76d12502a92e34", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 77a87f77da..f2a3b001cf 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -414,7 +414,11 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n                                 code = HttpStatus.INTERNAL_SERVER_ERROR_500;\n                             _response.setStatus(code);\n \n-                            // Add Connection:close if we can't consume the input\n+                            // The handling of the original dispatch failed and we are now going to either generate\n+                            // and error page ourselves or dispatch for an error page.  If there is content left over\n+                            // from the failed dispatch, then we try to consume it here and if we fail we add a\n+                            // Connection:close.  This can't be deferred to COMPLETE as the response will committed by\n+                            // then by this sendError handling.\n                             ensureContentConsumedOrConnectionClose();\n \n                             ContextHandler.Context context = (ContextHandler.Context)_request.getAttribute(ErrorHandler.ERROR_CONTEXT);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE2NjU1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524166556", "bodyText": "Perhaps simplify the log -- do we really need the \"chunking\" difference? Perhaps just log the _parser object.", "author": "sbordet", "createdAt": "2020-11-16T11:39:38Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java", "diffHunk": "@@ -408,28 +408,12 @@ public void onCompleted()\n             // close to seek EOF\n             _parser.close();\n         }\n-        else if (_parser.inContentState() && _generator.isPersistent())\n+        // else abort if we can't consume all\n+        else if (_generator.isPersistent() && !_input.consumeAll())\n         {\n-            // Try to progress without filling.\n-            parseRequestBuffer();\n-            if (_parser.inContentState())\n-            {\n-                // If we are async, then we have problems to complete neatly\n-                if (_input.isAsync())\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"{}unconsumed input while async {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n-                    _channel.abort(new IOException(\"unconsumed input\"));\n-                }\n-                else\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n-                    // Complete reading the request\n-                    if (!_input.consumeAll())\n-                        _channel.abort(new IOException(\"unconsumed input\"));\n-                }\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);", "originalCommit": "901e6dcdd6676ed745ee3853d787b90f5abe1020", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbaf3bfbd6399eab2c83ac44227bf1631e084837", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java\nindex d48ab94835..87dc0893c4 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpConnection.java\n\n@@ -412,7 +412,7 @@ public class HttpConnection extends AbstractConnection implements Runnable, Http\n         else if (_generator.isPersistent() && !_input.consumeAll())\n         {\n             if (LOG.isDebugEnabled())\n-                LOG.debug(\"{}unconsumed input {}\", _parser.isChunking() ? \"Possible \" : \"\", this);\n+                LOG.debug(\"unconsumed input {} {}\", this, _parser);\n             _channel.abort(new IOException(\"unconsumed input\"));\n         }\n \n"}}, {"oid": "bdbd5d9dde092715bed1a985ab76d12502a92e34", "url": "https://github.com/eclipse/jetty.project/commit/bdbd5d9dde092715bed1a985ab76d12502a92e34", "message": "Fixed comment from review", "committedDate": "2020-11-16T12:10:04Z", "type": "commit"}, {"oid": "cbaf3bfbd6399eab2c83ac44227bf1631e084837", "url": "https://github.com/eclipse/jetty.project/commit/cbaf3bfbd6399eab2c83ac44227bf1631e084837", "message": "Updates from review\n\n+ added redirect methods that consumeAll\n+ ensureContentConsumedOrConnectionClose renamed to ensureConsumeAllOrNotPersistent\n+ ensureConsumeAllOrNotPersistent now handles HTTP/1.0 and HTTP/1.1 differently", "committedDate": "2020-11-16T14:02:31Z", "type": "commit"}, {"oid": "9c6d60d6932ff266404930661ae09d9eb1881b93", "url": "https://github.com/eclipse/jetty.project/commit/9c6d60d6932ff266404930661ae09d9eb1881b93", "message": "better consumeAll implementation", "committedDate": "2020-11-16T16:27:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQzMzc0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524433747", "bodyText": "Fix javadocs: \"Sends a response with the given redirection status code\".", "author": "sbordet", "createdAt": "2020-11-16T17:11:31Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "diffHunk": "@@ -497,6 +497,36 @@ public void sendProcessing() throws IOException\n      */\n     public void sendRedirect(int code, String location) throws IOException\n     {\n+        sendRedirect(code, location, false);\n+    }\n+\n+    /**\n+     * Sends a response with one of the 300 series redirection codes.\n+     *\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(String location, boolean consumeAll) throws IOException\n+    {\n+        sendRedirect(getHttpChannel().getRequest().getHttpVersion().getVersion() < HttpVersion.HTTP_1_1.getVersion()\n+            ? HttpServletResponse.SC_MOVED_TEMPORARILY : HttpServletResponse.SC_SEE_OTHER, location, consumeAll);\n+    }\n+\n+    /**\n+     * Sends a response with one of the 300 series redirection codes.", "originalCommit": "9c6d60d6932ff266404930661ae09d9eb1881b93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5daecad494a70d12262c71f9a07d4dec11cabd2a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java\nindex d366d487d2..99615391f8 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java\n\n@@ -501,7 +501,7 @@ public class Response implements HttpServletResponse\n     }\n \n     /**\n-     * Sends a response with one of the 300 series redirection codes.\n+     * Sends a response with a HTTP version appropriate 30x redirection.\n      *\n      * @param location the location to send in {@code Location} headers\n      * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524440998", "bodyText": "Since many clients also add Connection: keep-alive is it worth to remove it even if the protocol is HTTP/1.1?", "author": "sbordet", "createdAt": "2020-11-16T17:22:07Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java", "diffHunk": "@@ -545,6 +562,60 @@ public boolean handle()\n         return !suspended;\n     }\n \n+    public void ensureConsumeAllOrNotPersistent()\n+    {\n+        switch (_request.getHttpVersion())\n+        {\n+            case HTTP_1_0:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Remove any keep-alive value in Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return null;\n+                    String v = fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n+                        .collect(Collectors.joining(\", \"));\n+                    if (StringUtil.isEmpty(v))\n+                        return null;\n+\n+                    return new HttpField(HttpHeader.CONNECTION, v);\n+                });\n+                break;\n+\n+            case HTTP_1_1:\n+                if (_request.getHttpInput().consumeAll())\n+                    return;\n+\n+                // Add close value to Connection headers\n+                _response.getHttpFields().computeField(HttpHeader.CONNECTION, (h, fields) ->\n+                {\n+                    if (fields == null || fields.isEmpty())\n+                        return HttpConnection.CONNECTION_CLOSE;\n+\n+                    if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n+                    {\n+                        if (fields.size() == 1)\n+                            return fields.get(0);\n+\n+                        return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .collect(Collectors.joining(\", \")));\n+                    }\n+\n+                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()))\n+                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());", "originalCommit": "9c6d60d6932ff266404930661ae09d9eb1881b93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NzA3Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524487077", "bodyText": "There's also Connection: upgrade?", "author": "joakime", "createdAt": "2020-11-16T18:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3NTUzNA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524975534", "bodyText": "removing keep-alive as well makes the code rather complex.  Close should always override keep-alive.... not so in our generator for HTTP/1.0, I will change that.", "author": "gregw", "createdAt": "2020-11-17T08:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDYxMA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524994610", "bodyText": "OK I removed the keep-alive as well and added unit tests for all the variations... good thing too as I was adding an extra ',' in some circumstances.", "author": "gregw", "createdAt": "2020-11-17T09:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MDk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "5daecad494a70d12262c71f9a07d4dec11cabd2a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\nindex 94e2e22309..c98bd5a3f4 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpChannel.java\n\n@@ -598,16 +598,22 @@ public class HttpChannel implements Runnable, HttpOutput.Interceptor\n                     if (fields.stream().anyMatch(f -> f.contains(HttpHeaderValue.CLOSE.asString())))\n                     {\n                         if (fields.size() == 1)\n-                            return fields.get(0);\n+                        {\n+                            HttpField f = fields.get(0);\n+                            if (HttpConnection.CONNECTION_CLOSE.equals(f))\n+                                return f;\n+                        }\n \n                         return new HttpField(HttpHeader.CONNECTION, fields.stream()\n-                            .flatMap(field -> Stream.of(field.getValues()))\n+                            .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s)))\n                             .collect(Collectors.joining(\", \")));\n                     }\n \n-                    return new HttpField(HttpHeader.CONNECTION, fields.stream()\n-                        .flatMap(field -> Stream.of(field.getValues()))\n-                        .collect(Collectors.joining(\", \")) + \", \" + HttpHeaderValue.CLOSE.asString());\n+                    return new HttpField(HttpHeader.CONNECTION,\n+                        Stream.concat(fields.stream()\n+                        .flatMap(field -> Stream.of(field.getValues()).filter(s -> !HttpHeaderValue.KEEP_ALIVE.is(s))),\n+                        Stream.of(HttpHeaderValue.CLOSE.asString()))\n+                        .collect(Collectors.joining(\", \")));\n                 });\n                 break;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1MjM4OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524452389", "bodyText": "Add javadocs with the precise semantic about the return value.", "author": "sbordet", "createdAt": "2020-11-16T17:38:30Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java", "diffHunk": "@@ -672,29 +672,44 @@ public boolean eof()\n \n     public boolean consumeAll()\n     {\n-        synchronized (_inputQ)\n+        while (true)", "originalCommit": "9c6d60d6932ff266404930661ae09d9eb1881b93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "578a961a38d5bbec61341e62ca83d72105c20a66", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java\nindex a5edfca1a1..2fe1b0f200 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/HttpInput.java\n\n@@ -670,6 +670,12 @@ public class HttpInput extends ServletInputStream implements Runnable\n         return addContent(EOF_CONTENT);\n     }\n \n+    /**\n+     * Consume all available content without blocking.\n+     * Raw content is counted in the {@link #getContentReceived()} statistics, but\n+     * is not intercepted nor counted in the {@link #getContentConsumed()} statistics\n+     * @return True if EOF was reached, false otherwise.\n+     */\n     public boolean consumeAll()\n     {\n         while (true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NTYxNA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524455614", "bodyText": "Maybe use a local variable for the query?", "author": "sbordet", "createdAt": "2020-11-16T17:43:20Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java", "diffHunk": "@@ -1240,10 +1240,10 @@ public boolean checkContext(final String target, final Request baseRequest, fina\n         {\n             // context request must end with /\n             baseRequest.setHandled(true);\n-            if (baseRequest.getQueryString() != null)\n-                response.sendRedirect(baseRequest.getRequestURI() + \"/?\" + baseRequest.getQueryString());\n-            else\n-                response.sendRedirect(baseRequest.getRequestURI() + \"/\");\n+            baseRequest.getResponse().sendRedirect(\n+                HttpServletResponse.SC_MOVED_TEMPORARILY,\n+                baseRequest.getRequestURI() + (baseRequest.getQueryString() == null ? \"/\" : (\"/?\" + baseRequest.getQueryString())),\n+                true);", "originalCommit": "9c6d60d6932ff266404930661ae09d9eb1881b93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5daecad494a70d12262c71f9a07d4dec11cabd2a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java\nindex d28d94297d..f917aad6c9 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ContextHandler.java\n\n@@ -1240,9 +1240,10 @@ public class ContextHandler extends ScopedHandler implements Attributes, Gracefu\n         {\n             // context request must end with /\n             baseRequest.setHandled(true);\n+            String queryString = baseRequest.getQueryString();\n             baseRequest.getResponse().sendRedirect(\n                 HttpServletResponse.SC_MOVED_TEMPORARILY,\n-                baseRequest.getRequestURI() + (baseRequest.getQueryString() == null ? \"/\" : (\"/?\" + baseRequest.getQueryString())),\n+                baseRequest.getRequestURI() + (queryString == null ? \"/\" : (\"/?\" + queryString)),\n                 true);\n             return false;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524457018", "bodyText": "One more test with HTTP/1.1 with Connection: keep-alive?", "author": "sbordet", "createdAt": "2020-11-16T17:45:28Z", "path": "jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java", "diffHunk": "@@ -233,6 +233,88 @@ public void test404HtmlAccept() throws Exception\n         assertContent(response);\n     }\n \n+    @Test\n+    public void test404PostHttp10() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.0\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"Connection: keep-alive\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.get(HttpHeader.CONNECTION), is(\"keep-alive\"));\n+        assertContent(response);\n+    }\n+\n+    @Test\n+    public void test404PostHttp11() throws Exception\n+    {\n+        String rawResponse = connector.getResponse(\n+            \"POST / HTTP/1.1\\r\\n\" +\n+                \"Host: Localhost\\r\\n\" +\n+                \"Accept: text/html\\r\\n\" +\n+                \"Content-Length: 10\\r\\n\" +\n+                \"\\r\\n\" +\n+                \"0123456789\");\n+\n+        HttpTester.Response response = HttpTester.parseResponse(rawResponse);\n+\n+        assertThat(response.getStatus(), is(404));\n+        assertThat(response.getField(HttpHeader.CONTENT_LENGTH).getIntValue(), greaterThan(0));\n+        assertThat(response.get(HttpHeader.CONTENT_TYPE), containsString(\"text/html;charset=ISO-8859-1\"));\n+        assertThat(response.getField(HttpHeader.CONNECTION), nullValue());\n+        assertContent(response);\n+    }", "originalCommit": "9c6d60d6932ff266404930661ae09d9eb1881b93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODM5Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524458393", "bodyText": "Can we also add a test with gzip content? Can we assert that we did not ungzip it?", "author": "sbordet", "createdAt": "2020-11-16T17:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3ODcyNA==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r524978724", "bodyText": "@sbordet I've added keep-alive to the existing 1.1 test as it doesn't change behaviour, but shows that it is correctly ignored.\n@joakime can I get you to do that gzip test?", "author": "gregw", "createdAt": "2020-11-17T08:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1NzAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "5daecad494a70d12262c71f9a07d4dec11cabd2a", "chunk": "diff --git a/jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java b/jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java\nindex 11faa3fc80..d79c8624ae 100644\n--- a/jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java\n+++ b/jetty-server/src/test/java/org/eclipse/jetty/server/ErrorHandlerTest.java\n\n@@ -262,6 +262,7 @@ public class ErrorHandlerTest\n                 \"Host: Localhost\\r\\n\" +\n                 \"Accept: text/html\\r\\n\" +\n                 \"Content-Length: 10\\r\\n\" +\n+                \"Connection: keep-alive\\r\\n\" + // This is not need by HTTP/1.1 but sometimes sent anyway\n                 \"\\r\\n\" +\n                 \"0123456789\");\n \n"}}, {"oid": "5daecad494a70d12262c71f9a07d4dec11cabd2a", "url": "https://github.com/eclipse/jetty.project/commit/5daecad494a70d12262c71f9a07d4dec11cabd2a", "message": "update from review\n\n + better javadoc\n + filter out keep-alive\n + added more tests", "committedDate": "2020-11-17T09:10:27Z", "type": "commit"}, {"oid": "578a961a38d5bbec61341e62ca83d72105c20a66", "url": "https://github.com/eclipse/jetty.project/commit/578a961a38d5bbec61341e62ca83d72105c20a66", "message": "update from review\n\n + better javadoc", "committedDate": "2020-11-17T09:15:06Z", "type": "commit"}, {"oid": "9a5f987418f4bf4eb39535f24e0a9819569a000f", "url": "https://github.com/eclipse/jetty.project/commit/9a5f987418f4bf4eb39535f24e0a9819569a000f", "message": "update from review\n\n + fixed form redirection test for http 1.0 and 1.1", "committedDate": "2020-11-17T09:39:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNjY2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r525126667", "bodyText": "Now you first check for keep-alive, but then if close is there, shouldn't you remove keep-alive?", "author": "sbordet", "createdAt": "2020-11-17T12:46:09Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java", "diffHunk": "@@ -659,16 +659,15 @@ else if (contentLength != field.getLongValue())\n                         case CONNECTION:\n                         {\n                             putTo(field, header);\n+                            if (info.getHttpVersion() == HttpVersion.HTTP_1_0 && _persistent == null && field.contains(HttpHeaderValue.KEEP_ALIVE.asString()))\n+                            {\n+                                _persistent = true;\n+                            }\n                             if (field.contains(HttpHeaderValue.CLOSE.asString()))\n                             {\n                                 close = true;\n                                 _persistent = false;\n                             }", "originalCommit": "9a5f987418f4bf4eb39535f24e0a9819569a000f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bff386b9a5d9fce5aca86a0c6428053fb9350324", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java\nindex 5a8a347c90..53b75d3c08 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java\n\n@@ -658,8 +660,8 @@ public class HttpGenerator\n \n                         case CONNECTION:\n                         {\n-                            putTo(field, header);\n-                            if (info.getHttpVersion() == HttpVersion.HTTP_1_0 && _persistent == null && field.contains(HttpHeaderValue.KEEP_ALIVE.asString()))\n+                            boolean keepAlive = field.contains(HttpHeaderValue.KEEP_ALIVE.asString());\n+                            if (keepAlive && info.getHttpVersion() == HttpVersion.HTTP_1_0 && _persistent == null)\n                             {\n                                 _persistent = true;\n                             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyODgwMw==", "url": "https://github.com/eclipse/jetty.project/pull/5637#discussion_r525128803", "bodyText": "I think there is a HttpStatus.isRedirection(int) that you can use here.", "author": "sbordet", "createdAt": "2020-11-17T12:50:03Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Response.java", "diffHunk": "@@ -497,6 +497,36 @@ public void sendProcessing() throws IOException\n      */\n     public void sendRedirect(int code, String location) throws IOException\n     {\n+        sendRedirect(code, location, false);\n+    }\n+\n+    /**\n+     * Sends a response with a HTTP version appropriate 30x redirection.\n+     *\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(String location, boolean consumeAll) throws IOException\n+    {\n+        sendRedirect(getHttpChannel().getRequest().getHttpVersion().getVersion() < HttpVersion.HTTP_1_1.getVersion()\n+            ? HttpServletResponse.SC_MOVED_TEMPORARILY : HttpServletResponse.SC_SEE_OTHER, location, consumeAll);\n+    }\n+\n+    /**\n+     * Sends a response with a given redirection code.\n+     *\n+     * @param code the redirect status code\n+     * @param location the location to send in {@code Location} headers\n+     * @param consumeAll if True, consume any HTTP/1 request input before doing the redirection. If the input cannot\n+     * be consumed without blocking, then add a `Connection: close` header to the response.\n+     * @throws IOException if unable to send the redirect\n+     */\n+    public void sendRedirect(int code, String location, boolean consumeAll) throws IOException\n+    {\n+        if (consumeAll)\n+            getHttpChannel().ensureConsumeAllOrNotPersistent();\n         if ((code < HttpServletResponse.SC_MULTIPLE_CHOICES) || (code >= HttpServletResponse.SC_BAD_REQUEST))", "originalCommit": "9a5f987418f4bf4eb39535f24e0a9819569a000f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bff386b9a5d9fce5aca86a0c6428053fb9350324", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java\nindex 99615391f8..9866eee125 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Response.java\n\n@@ -527,7 +527,7 @@ public class Response implements HttpServletResponse\n     {\n         if (consumeAll)\n             getHttpChannel().ensureConsumeAllOrNotPersistent();\n-        if ((code < HttpServletResponse.SC_MULTIPLE_CHOICES) || (code >= HttpServletResponse.SC_BAD_REQUEST))\n+        if (!HttpStatus.isRedirection(code))\n             throw new IllegalArgumentException(\"Not a 3xx redirect code\");\n \n         if (!isMutable())\n"}}, {"oid": "bff386b9a5d9fce5aca86a0c6428053fb9350324", "url": "https://github.com/eclipse/jetty.project/commit/bff386b9a5d9fce5aca86a0c6428053fb9350324", "message": "update from review\n\n + HttpGenerator removes keep-alive if close present\n + Use isRedirection", "committedDate": "2020-11-17T14:18:07Z", "type": "commit"}, {"oid": "f3a586801cc428191124131ea6dcc793630a29c7", "url": "https://github.com/eclipse/jetty.project/commit/f3a586801cc428191124131ea6dcc793630a29c7", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x-400-gzip' into jetty-9.4.x-5605-unconsumed-send-error", "committedDate": "2020-11-18T08:17:23Z", "type": "commit"}]}