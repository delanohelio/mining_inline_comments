{"pr_number": 4615, "pr_title": "Issue #4598 - rework InetAccessHandler to use path mappings", "pr_createdAt": "2020-02-27T23:41:58Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4615", "timeline": [{"oid": "bb7e48043d52cbe4e50568635cd76a7995b6b414", "url": "https://github.com/eclipse/jetty.project/commit/bb7e48043d52cbe4e50568635cd76a7995b6b414", "message": "Issue #4598 - Add URI mapping to InetAccessHandler\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-25T03:58:48Z", "type": "commit"}, {"oid": "3c551e960c83b6de46fbec9a9290a91ec67a8797", "url": "https://github.com/eclipse/jetty.project/commit/3c551e960c83b6de46fbec9a9290a91ec67a8797", "message": "Issue #4598 - rework InetAccessHandler to use only one IncludeExcludeSet\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-27T04:41:35Z", "type": "commit"}, {"oid": "2edc4920fd2e31d751253c2dadba8c08d61bd1dc", "url": "https://github.com/eclipse/jetty.project/commit/2edc4920fd2e31d751253c2dadba8c08d61bd1dc", "message": "Issue #4598 - fix InetAccessHandlerTest expectations to fit new behavior\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-27T07:29:29Z", "type": "commit"}, {"oid": "ccd6c845e5256426dbeed1b03e0bd2531afd5227", "url": "https://github.com/eclipse/jetty.project/commit/ccd6c845e5256426dbeed1b03e0bd2531afd5227", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x-4598-InetAccessHandler' into jetty-10.0.x-4598-InetAccessHandler", "committedDate": "2020-02-27T08:34:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MzY0NA==", "url": "https://github.com/eclipse/jetty.project/pull/4615#discussion_r385553644", "bodyText": "I think the includeConnector and excludeConnector methods should be retained as deprecated methods.\nexcludeConnector(name) can easily be implemented as exclude(name+\"@\")\nUnfortunately includeConnector(name) can not so easily be implemented.  If there are no current inclusions, then  include(name+\"@\") works, but if includes exist or a are subsequently added, then the meaning will change.  So I think  throwing unsupported operation is probably best", "author": "gregw", "createdAt": "2020-02-28T08:00:00Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessHandler.java", "diffHunk": "@@ -26,128 +26,136 @@\n import javax.servlet.http.HttpServletResponse;\n \n import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.http.pathmap.PathSpec;\n import org.eclipse.jetty.io.EndPoint;\n import org.eclipse.jetty.server.HttpChannel;\n import org.eclipse.jetty.server.Request;\n-import org.eclipse.jetty.util.IncludeExclude;\n import org.eclipse.jetty.util.IncludeExcludeSet;\n+import org.eclipse.jetty.util.InetAddressPattern;\n import org.eclipse.jetty.util.InetAddressSet;\n import org.eclipse.jetty.util.component.DumpableCollection;\n import org.eclipse.jetty.util.log.Log;\n import org.eclipse.jetty.util.log.Logger;\n \n+import static org.eclipse.jetty.server.handler.InetAccessSet.AccessTuple;\n+import static org.eclipse.jetty.server.handler.InetAccessSet.PatternTuple;\n+\n /**\n  * InetAddress Access Handler\n  * <p>\n  * Controls access to the wrapped handler using the real remote IP. Control is\n  * provided by and {@link IncludeExcludeSet} over a {@link InetAddressSet}. This\n  * handler uses the real internet address of the connection, not one reported in\n  * the forwarded for headers, as this cannot be as easily forged.\n- * <p>\n- * Additionally, there may be times when you want to only apply this handler to\n- * a subset of your connectors. In this situation you can use\n- * <b>connectorNames</b> to specify the connector names that you want this IP\n- * access filter to apply to.\n+ * </p>\n  */\n public class InetAccessHandler extends HandlerWrapper\n {\n     private static final Logger LOG = Log.getLogger(InetAccessHandler.class);\n \n-    private final IncludeExcludeSet<String, InetAddress> _addrs = new IncludeExcludeSet<>(InetAddressSet.class);\n-    private final IncludeExclude<String> _names = new IncludeExclude<>();\n+    private final IncludeExcludeSet<PatternTuple, AccessTuple> _set = new IncludeExcludeSet<>(InetAccessSet.class);\n \n     /**\n      * Clears all the includes, excludes, included connector names and excluded\n      * connector names.\n      */\n     public void clear()\n     {\n-        _addrs.clear();\n-        _names.clear();\n+        _set.clear();\n     }\n \n     /**\n-     * Includes an InetAddress pattern\n+     * Includes an InetAccess pattern with an optional connector name, address and URI mapping.\n+     *\n+     * <p>The connector name is separated from the InetAddress pattern with an '@' character,\n+     * and the InetAddress pattern is separated from the URI pattern using the \"|\" (pipe)\n+     * character. URI patterns follow the servlet specification for simple * prefix and\n+     * suffix wild cards (e.g. /, /foo, /foo/bar, /foo/bar/*, *.baz).</p>\n+     *\n+     * <br>Examples:\n+     * <ul>\n+     * <li>\"connector1@127.0.0.1|/foo\"</li>\n+     * <li>\"127.0.0.1|/foo\"</li>\n+     * <li>\"connector1@127.0.0.1\"</li>\n+     * <li>\"127.0.0.1\"</li>\n+     * </ul>\n      *\n-     * @param pattern InetAddress pattern to include\n+     * @param pattern InetAccess pattern to include\n      * @see InetAddressSet\n      */\n     public void include(String pattern)\n     {\n-        _addrs.include(pattern);\n+        _set.include(PatternTuple.from(pattern));\n     }\n \n     /**\n-     * Includes InetAddress patterns\n+     * Includes InetAccess patterns\n      *\n      * @param patterns InetAddress patterns to include\n      * @see InetAddressSet\n      */\n     public void include(String... patterns)\n     {\n-        _addrs.include(patterns);\n+        for (String pattern : patterns)\n+            include(pattern);\n     }\n \n     /**\n-     * Excludes an InetAddress pattern\n-     *\n-     * @param pattern InetAddress pattern to exclude\n-     * @see InetAddressSet\n+     * Includes an InetAccess entry.\n+     * @param connectorName optional name of a connector to include.\n+     * @param addressPattern optional InetAddress pattern to include.\n+     * @param pathSpec optional pathSpec to include.\n      */\n-    public void exclude(String pattern)\n+    public void include(String connectorName, String addressPattern, PathSpec pathSpec)\n     {\n-        _addrs.exclude(pattern);\n+        _set.include(new PatternTuple(connectorName, InetAddressPattern.from(addressPattern), pathSpec));\n     }\n \n     /**\n-     * Excludes InetAddress patterns\n+     * Excludes an InetAccess entry pattern with an optional connector name, address and URI mapping.\n      *\n-     * @param patterns InetAddress patterns to exclude\n-     * @see InetAddressSet\n-     */\n-    public void exclude(String... patterns)\n-    {\n-        _addrs.exclude(patterns);\n-    }\n-\n-    /**\n-     * Includes a connector name.\n+     * <p>The connector name is separated from the InetAddress pattern with an '@' character,\n+     * and the InetAddress pattern is separated from the URI pattern using the \"|\" (pipe)\n+     * character. URI patterns follow the servlet specification for simple * prefix and\n+     * suffix wild cards (e.g. /, /foo, /foo/bar, /foo/bar/*, *.baz).</p>\n      *\n-     * @param name Connector name to include in this handler.\n-     */\n-    public void includeConnector(String name)", "originalCommit": "ccd6c845e5256426dbeed1b03e0bd2531afd5227", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95ecb4a3e8231b678e30d365dbee8e7055e5dbf0", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessHandler.java b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessHandler.java\nindex 2af2286e30..b3292aeb38 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessHandler.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessHandler.java\n\n@@ -158,6 +158,55 @@ public class InetAccessHandler extends HandlerWrapper\n         _set.exclude(new PatternTuple(connectorName, InetAddressPattern.from(addressPattern), pathSpec));\n     }\n \n+    /**\n+     * Includes a connector name.\n+     *\n+     * @param name Connector name to include in this handler.\n+     * @deprecated use {@link InetAccessHandler#include(String)} instead.\n+     */\n+    @Deprecated\n+    public void includeConnector(String name)\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Excludes a connector name.\n+     *\n+     * @param name Connector name to exclude in this handler.\n+     * @deprecated use {@link InetAccessHandler#include(String)} instead.\n+     */\n+    @Deprecated\n+    public void excludeConnector(String name)\n+    {\n+        _set.exclude(new PatternTuple(name, null, null));\n+    }\n+\n+    /**\n+     * Includes connector names.\n+     *\n+     * @param names Connector names to include in this handler.\n+     * @deprecated use {@link InetAccessHandler#include(String)} instead.\n+     */\n+    @Deprecated\n+    public void includeConnectors(String... names)\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Excludes connector names.\n+     *\n+     * @param names Connector names to exclude in this handler.\n+     * @deprecated use {@link InetAccessHandler#include(String)} instead.\n+     */\n+    @Deprecated\n+    public void excludeConnectors(String... names)\n+    {\n+        for (String name : names)\n+            excludeConnector(name);\n+    }\n+\n     /**\n      * Checks the incoming request against the whitelist and blacklist\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTEyNw==", "url": "https://github.com/eclipse/jetty.project/pull/4615#discussion_r385555127", "bodyText": "I'm not sure we can do much better than this for the common case of just an address pattern.  InetAddressSet internally does an iteration anyway, so in the common case we are just the same.   So I'd probably remove the TODO.", "author": "gregw", "createdAt": "2020-02-28T08:04:22Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessSet.java", "diffHunk": "@@ -0,0 +1,159 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.server.handler;\n+\n+import java.net.InetAddress;\n+import java.util.AbstractSet;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+\n+import org.eclipse.jetty.http.pathmap.PathSpec;\n+import org.eclipse.jetty.http.pathmap.ServletPathSpec;\n+import org.eclipse.jetty.util.InetAddressPattern;\n+import org.eclipse.jetty.util.StringUtil;\n+\n+public class InetAccessSet extends AbstractSet<InetAccessSet.PatternTuple> implements Set<InetAccessSet.PatternTuple>, Predicate<InetAccessSet.AccessTuple>\n+{\n+    private ArrayList<PatternTuple> tuples = new ArrayList<>();\n+\n+    @Override\n+    public boolean add(PatternTuple storageTuple)\n+    {\n+        return tuples.add(storageTuple);\n+    }\n+\n+    @Override\n+    public boolean remove(Object o)\n+    {\n+        return tuples.remove(o);\n+    }\n+\n+    @Override\n+    public Iterator<PatternTuple> iterator()\n+    {\n+        return tuples.iterator();\n+    }\n+\n+    @Override\n+    public int size()\n+    {\n+        return tuples.size();\n+    }\n+\n+    @Override\n+    public boolean test(AccessTuple entry)\n+    {\n+        if (entry == null)\n+            return false;\n+\n+        // TODO: Can this be done more efficiently with something like PathMappings.", "originalCommit": "ccd6c845e5256426dbeed1b03e0bd2531afd5227", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95ecb4a3e8231b678e30d365dbee8e7055e5dbf0", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessSet.java b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessSet.java\nindex f5f338ac21..8cf62c3f27 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessSet.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/InetAccessSet.java\n\n@@ -64,7 +64,6 @@ public class InetAccessSet extends AbstractSet<InetAccessSet.PatternTuple> imple\n         if (entry == null)\n             return false;\n \n-        // TODO: Can this be done more efficiently with something like PathMappings.\n         for (PatternTuple tuple : tuples)\n         {\n             if (tuple.test(entry))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTYzNg==", "url": "https://github.com/eclipse/jetty.project/pull/4615#discussion_r385555636", "bodyText": "yay!  As much as I like the logic here, I think that implementing a new Set is much simpler than combining IncludeExcludeSets", "author": "gregw", "createdAt": "2020-02-28T08:05:50Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/IncludeExcludeSet.java", "diffHunk": "@@ -233,34 +228,4 @@ public boolean isEmpty()\n     {\n         return _includes.isEmpty() && _excludes.isEmpty();\n     }\n-\n-    /**\n-     * Match items in combined IncludeExcludeSets.\n-     * @param item1 The item to match against set1\n-     * @param set1 A IncludeExcludeSet to match item1 against\n-     * @param item2 The item to match against set2\n-     * @param set2 A IncludeExcludeSet to match item2 against\n-     * @param <T1> The type of item1\n-     * @param <T2> The type of item2\n-     * @return True IFF <ul>\n-     *     <li>Neither item is excluded from their respective sets</li>\n-     *     <li>Both sets have no includes OR at least one of the items is included in its respective set</li>\n-     * </ul>\n-     */\n-    public static <T1,T2> boolean matchCombined(T1 item1, IncludeExcludeSet<?,T1> set1, T2 item2, IncludeExcludeSet<?,T2> set2)", "originalCommit": "ccd6c845e5256426dbeed1b03e0bd2531afd5227", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "95ecb4a3e8231b678e30d365dbee8e7055e5dbf0", "url": "https://github.com/eclipse/jetty.project/commit/95ecb4a3e8231b678e30d365dbee8e7055e5dbf0", "message": "Issue #4598 - Changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-29T05:14:20Z", "type": "commit"}]}