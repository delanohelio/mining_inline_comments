{"pr_number": 5778, "pr_title": "fix ByteBufferPool race condition", "pr_createdAt": "2020-12-09T09:39:52Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5778", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNDY1OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539214659", "bodyText": "In this way we always pay the cost of volatile, which is updated much more often than it's being read.\nFrankly, I would leave it non-volatile.\nNext best is using AtomicLong.lazySet() in 9.4.x and VarHandle in 10.0.x.\nI would refrain using volatile unconditionally like proposed here, if possible.", "author": "sbordet", "createdAt": "2020-12-09T11:07:34Z", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -158,7 +158,7 @@ public void release(ByteBuffer buffer)\n         private final int _capacity;\n         private final int _maxSize;\n         private final AtomicInteger _size;\n-        private long _lastUpdate = System.nanoTime();\n+        private volatile long _lastUpdate = System.nanoTime();", "originalCommit": "5318f1da5da37d53b26897cb81181e7e57739bf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI0MTMwOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539241309", "bodyText": "You're right that we could do better than simply using volatile.\nOn JDK 8, AtomicLong's lazySet()/get() is probably best.\nOn JDK 9+, lazySet()/getAcquire() provide the exact semantics we want at the cheapest possible cost.\nLet me update this PR, and I'll include the and get() -> getAcquire() change during the 10.0.x merge.", "author": "lorban", "createdAt": "2020-12-09T11:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIxNDY1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "415196520ecf798121c6e3e85cc7f64e7d74918c", "chunk": "diff --git a/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java b/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java\nindex d0590e9d90..5d78be85fb 100644\n--- a/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java\n+++ b/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java\n\n@@ -158,7 +159,7 @@ public interface ByteBufferPool\n         private final int _capacity;\n         private final int _maxSize;\n         private final AtomicInteger _size;\n-        private volatile long _lastUpdate = System.nanoTime();\n+        private final AtomicLong _lastUpdate = new AtomicLong(System.nanoTime());\n \n         public Bucket(ByteBufferPool pool, int capacity, int maxSize)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2MzYyMA==", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539263620", "bodyText": "I think it should be getAcquire() because we want to see all modifications made by other threads (i.e. we want the semantic of a volatile read). I would remove the comment entirely -- the code difference would be enough.", "author": "sbordet", "createdAt": "2020-12-09T12:25:27Z", "path": "jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java", "diffHunk": "@@ -252,6 +252,7 @@ int size()\n \n         long getLastUpdate()\n         {\n+            // This could be changed to a getOpaque() call on JDK 9+.", "originalCommit": "ee84d8c58d68b49c95e9a7ca3652d434398a5118", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NjUzMg==", "url": "https://github.com/eclipse/jetty.project/pull/5778#discussion_r539266532", "bodyText": "Sure, I'll remove the comment.", "author": "lorban", "createdAt": "2020-12-09T12:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2MzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "415196520ecf798121c6e3e85cc7f64e7d74918c", "chunk": "diff --git a/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java b/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java\nindex 62ef8626cc..5d78be85fb 100644\n--- a/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java\n+++ b/jetty-io/src/main/java/org/eclipse/jetty/io/ByteBufferPool.java\n\n@@ -252,7 +252,6 @@ public interface ByteBufferPool\n \n         long getLastUpdate()\n         {\n-            // This could be changed to a getOpaque() call on JDK 9+.\n             return _lastUpdate.get();\n         }\n \n"}}, {"oid": "415196520ecf798121c6e3e85cc7f64e7d74918c", "url": "https://github.com/eclipse/jetty.project/commit/415196520ecf798121c6e3e85cc7f64e7d74918c", "message": "fix race condition that may make the bucket cleaning pick the wrong one in case the timestamp is read while being modified", "committedDate": "2020-12-09T15:33:29Z", "type": "commit"}, {"oid": "415196520ecf798121c6e3e85cc7f64e7d74918c", "url": "https://github.com/eclipse/jetty.project/commit/415196520ecf798121c6e3e85cc7f64e7d74918c", "message": "fix race condition that may make the bucket cleaning pick the wrong one in case the timestamp is read while being modified", "committedDate": "2020-12-09T15:33:29Z", "type": "forcePushed"}]}