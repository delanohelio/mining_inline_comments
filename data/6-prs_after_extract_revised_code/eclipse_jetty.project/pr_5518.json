{"pr_number": 5518, "pr_title": "Issue #5486 PropertyFileLoginModule retains PropertyUserStores", "pr_createdAt": "2020-10-27T16:48:23Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5518", "timeline": [{"oid": "dda991c716c6613cf9e1872f89b7afc259dad474", "url": "https://github.com/eclipse/jetty.project/commit/dda991c716c6613cf9e1872f89b7afc259dad474", "message": "Issue #5486 PropertyFileLoginModule retains PropertyUserStores\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-10-27T16:40:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0OTIxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r513249219", "bodyText": "There is an extra blank line here.", "author": "lachlan-roberts", "createdAt": "2020-10-28T08:12:57Z", "path": "jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java", "diffHunk": "@@ -19,34 +19,73 @@\n package org.eclipse.jetty.jaas.spi;\n \n import java.io.File;\n-import java.util.HashMap;\n-import javax.security.auth.Subject;\n+import java.util.Collections;\n+import javax.security.auth.login.AppConfigurationEntry;\n+import javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag;\n+import javax.security.auth.login.Configuration;\n \n-import org.eclipse.jetty.jaas.callback.DefaultCallbackHandler;\n+import org.eclipse.jetty.jaas.JAASLoginService;\n+import org.eclipse.jetty.jaas.PropertyUserStoreManager;\n+import org.eclipse.jetty.security.DefaultIdentityService;\n+import org.eclipse.jetty.security.PropertyUserStore;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.UserIdentity;\n import org.eclipse.jetty.toolchain.test.MavenTestingUtils;\n import org.junit.jupiter.api.Test;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.containsInAnyOrder;\n-import static org.hamcrest.Matchers.not;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n \n public class PropertyFileLoginModuleTest\n {\n     @Test\n-    public void testRoles()\n-        throws Exception\n+    public void testPropertyFileLoginModule() throws Exception\n     {\n-        File file = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n-        PropertyFileLoginModule module = new PropertyFileLoginModule();\n-        Subject subject = new Subject();\n-        HashMap<String, String> options = new HashMap<>();\n-        options.put(\"file\", file.getCanonicalPath());\n-        module.initialize(subject, new DefaultCallbackHandler(), new HashMap<String, String>(), options);\n-        UserInfo fred = module.getUserInfo(\"fred\");\n-        assertEquals(\"fred\", fred.getUserName());\n-        assertThat(fred.getRoleNames(), containsInAnyOrder(\"role1\", \"role2\", \"role3\"));\n-        assertThat(fred.getRoleNames(), not(contains(\"fred\")));\n+        //configure for PropertyFileLoginModule\n+        File loginProperties = MavenTestingUtils.getTestResourceFile(\"login.properties\");\n+\n+        Configuration testConfig = new Configuration()\n+        {\n+            @Override\n+            public AppConfigurationEntry[] getAppConfigurationEntry(String name)\n+            { \n+                return new AppConfigurationEntry[]{new AppConfigurationEntry(PropertyFileLoginModule.class.getName(), \n+                                                                             LoginModuleControlFlag.REQUIRED,\n+                                                                             Collections.singletonMap(\"file\", loginProperties.getAbsolutePath()))};\n+            }\n+        };\n+\n+", "originalCommit": "dda991c716c6613cf9e1872f89b7afc259dad474", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NTkyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515865927", "bodyText": "Pedant :)", "author": "janbartel", "createdAt": "2020-11-02T10:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0OTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "chunk": "diff --git a/jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java b/jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java\nindex 8da8822bdc..529bc95b54 100644\n--- a/jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java\n+++ b/jetty-jaas/src/test/java/org/eclipse/jetty/jaas/spi/PropertyFileLoginModuleTest.java\n\n@@ -57,7 +57,6 @@ public class PropertyFileLoginModuleTest\n             }\n         };\n \n-\n         JAASLoginService ls = new JAASLoginService(\"foo\");\n         ls.setCallbackHandlerClass(\"org.eclipse.jetty.jaas.callback.DefaultCallbackHandler\");\n         ls.setIdentityService(new DefaultIdentityService());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTU5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515689590", "bodyText": "You could use lambdas above like .map(Class::getName).forEach(classnames::add).\nAlso I think the distinct() is unnecessary, probably better off doing something like roleClassNames.stream().anyMatch(classnames::contains).", "author": "lachlan-roberts", "createdAt": "2020-11-01T23:45:55Z", "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();\n             }\n         }\n \n         return groups.toArray(new String[groups.size()]);\n     }\n-\n-    private boolean roleClassNameMatches(String classname)\n+    \n+    /**\n+     * Check if a given class, or any of the interfaces that it implements is one of the role classes.\n+     * We do this comparison by classnames, without loading the role classes.\n+     * @param clazz the class and its interfaces to check\n+     * @param roleClassNames class names of the role classes\n+     * @return true if the class or one of its interfaces is one of the configured role classes\n+     */\n+    private static boolean roleClassNameMatches(Class<?> clazz, List<String> roleClassNames)\n     {\n-        boolean result = false;\n-        for (String roleClassName : getRoleClassNames())\n-        {\n-            if (roleClassName.equals(classname))\n-            {\n-                result = true;\n-                break;\n-            }\n-        }\n-        return result;\n+        if (clazz == null || roleClassNames == null)\n+            return false;\n+        //collect the names of the class and any interfaces it implements\n+        List<String> classnames = new ArrayList<>();\n+        classnames.add(clazz.getName());\n+        Arrays.stream(clazz.getInterfaces()).map(i -> i.getName()).forEach(i -> classnames.add(i));\n+        \n+        return roleClassNames.stream().filter(classnames::contains).distinct().count() > 0;\n+", "originalCommit": "dda991c716c6613cf9e1872f89b7afc259dad474", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NjE4OA==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515866188", "bodyText": "Yep, good idea. Done.", "author": "janbartel", "createdAt": "2020-11-02T10:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4OTU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "chunk": "diff --git a/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java b/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java\nindex 1a0fdbd106..45470de1e2 100644\n--- a/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java\n+++ b/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java\n\n@@ -277,47 +277,37 @@ public class JAASLoginService extends ContainerLifeCycle implements LoginService\n      */\n     protected String[] getGroups(Subject subject)\n     {\n-        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n-        \n         Collection<String> groups = new LinkedHashSet<>();\n-        Set<Principal> principals = subject.getPrincipals();\n-        for (Principal principal : principals)\n+        for (Principal principal : subject.getPrincipals())\n         {\n-            Class<?> c = principal.getClass();\n-            boolean added = false;\n-            //check whether the type of this Principle is a role\n-            while (c != null && !added)\n-            {\n-                if (roleClassNameMatches(c, roleNameList))\n-                {\n-                    groups.add(principal.getName());\n-                    added = true;\n-                }\n-                else\n-                    c = c.getSuperclass();\n-            }\n+            if (isRoleClass(principal.getClass(), Arrays.asList(getRoleClassNames())))\n+                groups.add(principal.getName());\n         }\n \n         return groups.toArray(new String[groups.size()]);\n     }\n     \n     /**\n-     * Check if a given class, or any of the interfaces that it implements is one of the role classes.\n-     * We do this comparison by classnames, without loading the role classes.\n-     * @param clazz the class and its interfaces to check\n-     * @param roleClassNames class names of the role classes\n-     * @return true if the class or one of its interfaces is one of the configured role classes\n+     * Check whether the class, its superclasses or any interfaces they implement\n+     * is one of the classes that represents a role.\n+     * \n+     * @param clazz the class to check\n+     * @param roleClassNames the list of classnames that represent roles\n+     * @return true if the class is a role class\n      */\n-    private static boolean roleClassNameMatches(Class<?> clazz, List<String> roleClassNames)\n+    private static boolean isRoleClass(Class<?> clazz, List<String> roleClassNames)\n     {\n-        if (clazz == null || roleClassNames == null)\n-            return false;\n-        //collect the names of the class and any interfaces it implements\n+        Class<?> c = clazz;\n+        \n+        //add the class, its interfaces and superclasses to the list to test\n         List<String> classnames = new ArrayList<>();\n-        classnames.add(clazz.getName());\n-        Arrays.stream(clazz.getInterfaces()).map(i -> i.getName()).forEach(i -> classnames.add(i));\n+        while (c != null)\n+        {\n+            classnames.add(c.getName());\n+            Arrays.stream(c.getInterfaces()).map(Class::getName).forEach(classnames::add);\n+            c = c.getSuperclass();\n+        }\n         \n-        return roleClassNames.stream().filter(classnames::contains).distinct().count() > 0;\n-\n+        return roleClassNames.stream().anyMatch(classnames::contains);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTM5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515691398", "bodyText": "Maybe this logic of testing the class then moving to the super class should be put inside roleClassNameMatches.", "author": "lachlan-roberts", "createdAt": "2020-11-02T00:02:48Z", "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -305,53 +277,47 @@ public void logout(UserIdentity user)\n      */\n     protected String[] getGroups(Subject subject)\n     {\n+        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n+        \n         Collection<String> groups = new LinkedHashSet<>();\n         Set<Principal> principals = subject.getPrincipals();\n         for (Principal principal : principals)\n         {\n             Class<?> c = principal.getClass();\n-            while (c != null)\n+            boolean added = false;\n+            //check whether the type of this Principle is a role\n+            while (c != null && !added)\n             {\n-                if (roleClassNameMatches(c.getName()))\n+                if (roleClassNameMatches(c, roleNameList))\n                 {\n                     groups.add(principal.getName());\n-                    break;\n-                }\n-\n-                boolean added = false;\n-                for (Class<?> ci : c.getInterfaces())\n-                {\n-                    if (roleClassNameMatches(ci.getName()))\n-                    {\n-                        groups.add(principal.getName());\n-                        added = true;\n-                        break;\n-                    }\n-                }\n-\n-                if (!added)\n-                {\n-                    c = c.getSuperclass();\n+                    added = true;\n                 }\n                 else\n-                    break;\n+                    c = c.getSuperclass();", "originalCommit": "dda991c716c6613cf9e1872f89b7afc259dad474", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2NjMzMw==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515866333", "bodyText": "Done.", "author": "janbartel", "createdAt": "2020-11-02T10:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "chunk": "diff --git a/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java b/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java\nindex 1a0fdbd106..45470de1e2 100644\n--- a/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java\n+++ b/jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java\n\n@@ -277,47 +277,37 @@ public class JAASLoginService extends ContainerLifeCycle implements LoginService\n      */\n     protected String[] getGroups(Subject subject)\n     {\n-        List<String> roleNameList = Arrays.asList(getRoleClassNames());\n-        \n         Collection<String> groups = new LinkedHashSet<>();\n-        Set<Principal> principals = subject.getPrincipals();\n-        for (Principal principal : principals)\n+        for (Principal principal : subject.getPrincipals())\n         {\n-            Class<?> c = principal.getClass();\n-            boolean added = false;\n-            //check whether the type of this Principle is a role\n-            while (c != null && !added)\n-            {\n-                if (roleClassNameMatches(c, roleNameList))\n-                {\n-                    groups.add(principal.getName());\n-                    added = true;\n-                }\n-                else\n-                    c = c.getSuperclass();\n-            }\n+            if (isRoleClass(principal.getClass(), Arrays.asList(getRoleClassNames())))\n+                groups.add(principal.getName());\n         }\n \n         return groups.toArray(new String[groups.size()]);\n     }\n     \n     /**\n-     * Check if a given class, or any of the interfaces that it implements is one of the role classes.\n-     * We do this comparison by classnames, without loading the role classes.\n-     * @param clazz the class and its interfaces to check\n-     * @param roleClassNames class names of the role classes\n-     * @return true if the class or one of its interfaces is one of the configured role classes\n+     * Check whether the class, its superclasses or any interfaces they implement\n+     * is one of the classes that represents a role.\n+     * \n+     * @param clazz the class to check\n+     * @param roleClassNames the list of classnames that represent roles\n+     * @return true if the class is a role class\n      */\n-    private static boolean roleClassNameMatches(Class<?> clazz, List<String> roleClassNames)\n+    private static boolean isRoleClass(Class<?> clazz, List<String> roleClassNames)\n     {\n-        if (clazz == null || roleClassNames == null)\n-            return false;\n-        //collect the names of the class and any interfaces it implements\n+        Class<?> c = clazz;\n+        \n+        //add the class, its interfaces and superclasses to the list to test\n         List<String> classnames = new ArrayList<>();\n-        classnames.add(clazz.getName());\n-        Arrays.stream(clazz.getInterfaces()).map(i -> i.getName()).forEach(i -> classnames.add(i));\n+        while (c != null)\n+        {\n+            classnames.add(c.getName());\n+            Arrays.stream(c.getInterfaces()).map(Class::getName).forEach(classnames::add);\n+            c = c.getSuperclass();\n+        }\n         \n-        return roleClassNames.stream().filter(classnames::contains).distinct().count() > 0;\n-\n+        return roleClassNames.stream().anyMatch(classnames::contains);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515692810", "bodyText": "This seems like an unusual way to share the LoginService with the LoginModule.\nWould it be better to do this with a Callback instead? similar how we would use ServletRequestCallback.", "author": "lachlan-roberts", "createdAt": "2020-11-02T00:15:28Z", "path": "jetty-jaas/src/main/java/org/eclipse/jetty/jaas/JAASLoginService.java", "diffHunk": "@@ -58,13 +56,14 @@\n  * Implementation of jetty's LoginService that works with JAAS for\n  * authorization and authentication.\n  */\n-public class JAASLoginService extends AbstractLifeCycle implements LoginService\n+public class JAASLoginService extends ContainerLifeCycle implements LoginService\n {\n     private static final Logger LOG = Log.getLogger(JAASLoginService.class);\n \n     public static final String DEFAULT_ROLE_CLASS_NAME = \"org.eclipse.jetty.jaas.JAASRole\";\n     public static final String[] DEFAULT_ROLE_CLASS_NAMES = {DEFAULT_ROLE_CLASS_NAME};\n-\n+    public static final ThreadLocal<JAASLoginService> INSTANCE = new ThreadLocal<>();", "originalCommit": "dda991c716c6613cf9e1872f89b7afc259dad474", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1MDIzMA==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515850230", "bodyText": "The problem is that we allow the user to supply their own CallbackHandler class, which might not know anything about the special jetty  Callbacks, therefore couldn't supply a value for the JAASLoginService.", "author": "janbartel", "createdAt": "2020-11-02T09:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk1NTY5Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5518#discussion_r515955696", "bodyText": "Yeah that seems strange to me, how would you ever use ServletRequestCallback or RequestParameterCallback inside a login module because they only ever get set on the DefaultCallbackHandler? Seems like using this would also just break if they supplied a custom CallbackHandler.", "author": "lachlan-roberts", "createdAt": "2020-11-02T13:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5MjgxMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9fe3390096d095c8eee3cd6e2ff1c1f12763d3e9", "url": "https://github.com/eclipse/jetty.project/commit/9fe3390096d095c8eee3cd6e2ff1c1f12763d3e9", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5486-propertyfileloginmodule", "committedDate": "2020-11-02T09:33:16Z", "type": "commit"}, {"oid": "2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "url": "https://github.com/eclipse/jetty.project/commit/2ad27fdec73f1ee1b23ab9bf15a31397ad39b2fe", "message": "Issue #5486 Changes post review\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-11-02T10:11:13Z", "type": "commit"}]}