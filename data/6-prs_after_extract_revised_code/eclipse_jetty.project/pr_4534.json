{"pr_number": 4534, "pr_title": "Issue #4533 Hard close from Dispatcher", "pr_createdAt": "2020-01-30T17:27:06Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4534", "timeline": [{"oid": "72b6d4705ba824b2eb0cbade7c789575f9a3fcdb", "url": "https://github.com/eclipse/jetty.project/commit/72b6d4705ba824b2eb0cbade7c789575f9a3fcdb", "message": "Issue #4533 Hard close from Dispatcher\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\n\n#4533 Do hard close from Dispatcher so response wrappers may intercept close.", "committedDate": "2020-01-30T17:26:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1NzQ2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4534#discussion_r373157466", "bodyText": "I have commented out this line buffer.close(), and the test still passes.\nI'm not sure at this point what are we really testing? I would have expected the test to fail if buffer.close() was commented out?\nIf the point of the test is to verify that the wrapped close() is invoked, can you make it explicit with a boolean or a CountDownLatch?", "author": "sbordet", "createdAt": "2020-01-30T19:47:08Z", "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DispatcherTest.java", "diffHunk": "@@ -373,6 +377,98 @@ public void testForwardFilterToRogerServlet() throws Exception\n         assertThat(rechoResponse, containsString(\"txeTohce\"));\n     }\n \n+    @Test\n+    public void testForwardCloseIntercepted() throws Exception\n+    {\n+        _contextHandler.addFilter(WrappingFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+        _contextHandler.addServlet(ForwardServlet.class, \"/ForwardServlet/*\");\n+        _contextHandler.addServlet(AssertForwardServlet.class, \"/AssertForwardServlet/*\");\n+\n+        String expected =\n+            \"HTTP/1.1 200 OK\\r\\n\" +\n+                \"Content-Type: text/html\\r\\n\" +\n+                \"Content-Length: 0\\r\\n\" +\n+                \"\\r\\n\";\n+\n+        String responses = _connector.getResponse(\"GET /context/ForwardServlet?do=assertforward&do=more&test=1 HTTP/1.0\\n\\n\");\n+\n+        assertEquals(expected, responses);\n+    }\n+\n+    public static class WrappingFilter implements Filter\n+    {\n+        @Override\n+        public void init(FilterConfig filterConfig) throws ServletException\n+        {\n+        }\n+\n+        @Override\n+        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n+        {\n+            ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);\n+            chain.doFilter(request, wrapper);\n+            wrapper.sendResponse(response.getOutputStream());\n+        }\n+\n+        @Override\n+        public void destroy()\n+        {\n+        }\n+    }\n+\n+    public static class ResponseWrapper extends HttpServletResponseWrapper\n+    {\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+\n+        public ResponseWrapper(HttpServletResponse response)\n+        {\n+            super(response);\n+        }\n+\n+        @Override\n+        public ServletOutputStream getOutputStream() throws IOException\n+        {\n+            return new ServletOutputStream()\n+            {\n+                @Override\n+                public boolean isReady()\n+                {\n+                    return true;\n+                }\n+\n+                @Override\n+                public void setWriteListener(WriteListener writeListener)\n+                {\n+                    throw new UnsupportedOperationException();\n+                }\n+\n+                @Override\n+                public void write(int b) throws IOException\n+                {\n+                    buffer.write(b);\n+                }\n+\n+                @Override\n+                public void write(byte[] b, int off, int len) throws IOException\n+                {\n+                    buffer.write(b, off, len);\n+                }\n+\n+                @Override\n+                public void close() throws IOException\n+                {\n+                    buffer.close();", "originalCommit": "72b6d4705ba824b2eb0cbade7c789575f9a3fcdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MjM2Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4534#discussion_r373352362", "bodyText": "If you remove the method or call super.close() then the test fails.   The test correctly reproduces the failure produced by the client when the fix is not in place.", "author": "gregw", "createdAt": "2020-01-31T07:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1NzQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2428f7c7059dceb132456c00676c78cec269643f", "chunk": "diff --git a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DispatcherTest.java b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DispatcherTest.java\nindex b8a9822ebb..a6202ae2fd 100644\n--- a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DispatcherTest.java\n+++ b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DispatcherTest.java\n\n@@ -378,21 +386,11 @@ public class DispatcherTest\n     }\n \n     @Test\n-    public void testForwardCloseIntercepted() throws Exception\n+    public void testWrappedForwardCloseIntercepted() throws Exception\n     {\n+        // Add filter that wraps response, intercepts close and writes after doChain\n         _contextHandler.addFilter(WrappingFilter.class, \"/*\", EnumSet.of(DispatcherType.REQUEST));\n-        _contextHandler.addServlet(ForwardServlet.class, \"/ForwardServlet/*\");\n-        _contextHandler.addServlet(AssertForwardServlet.class, \"/AssertForwardServlet/*\");\n-\n-        String expected =\n-            \"HTTP/1.1 200 OK\\r\\n\" +\n-                \"Content-Type: text/html\\r\\n\" +\n-                \"Content-Length: 0\\r\\n\" +\n-                \"\\r\\n\";\n-\n-        String responses = _connector.getResponse(\"GET /context/ForwardServlet?do=assertforward&do=more&test=1 HTTP/1.0\\n\\n\");\n-\n-        assertEquals(expected, responses);\n+        testForward();\n     }\n \n     public static class WrappingFilter implements Filter\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1Nzk1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4534#discussion_r373157954", "bodyText": "There remains only one other usage of softClose(). Is it really necessary, or softClose() can be removed?", "author": "sbordet", "createdAt": "2020-01-30T19:48:05Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Dispatcher.java", "diffHunk": "@@ -219,8 +219,18 @@ protected void forward(ServletRequest request, ServletResponse response, Dispatc\n \n                 _contextHandler.handle(_pathInContext, baseRequest, (HttpServletRequest)request, (HttpServletResponse)response);\n \n-                if (!baseRequest.getHttpChannelState().isAsync())\n-                    baseRequest.getResponse().softClose();\n+                // If we are not async and not closed already, then close via the possibly wrapped response.\n+                if (!baseRequest.getHttpChannelState().isAsync() && !baseResponse.getHttpOutput().isClosed())\n+                {\n+                    try\n+                    {\n+                        response.getOutputStream().close();\n+                    }\n+                    catch (IllegalStateException e)\n+                    {\n+                        response.getWriter().close();\n+                    }\n+                }", "originalCommit": "72b6d4705ba824b2eb0cbade7c789575f9a3fcdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM1MzA4MA==", "url": "https://github.com/eclipse/jetty.project/pull/4534#discussion_r373353080", "bodyText": "The concept of a softClose is still needed by sendError - as we need to be able to treat the output as closed after the sendError for the remaining portion of a dispatch, only to reopen to send the actual response in the errorHandler or ERROR dispatch.    It was wrong to apply that concept to dispatch.forward, as there is no reopen semantic needed after a forward, plus there is a wrapping semantic that we broke.", "author": "gregw", "createdAt": "2020-01-31T07:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1Nzk1NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "2428f7c7059dceb132456c00676c78cec269643f", "url": "https://github.com/eclipse/jetty.project/commit/2428f7c7059dceb132456c00676c78cec269643f", "message": "Issue #4533 Hard close from Dispatcher\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\n\n#4533 improve test after review", "committedDate": "2020-01-31T08:41:33Z", "type": "commit"}, {"oid": "befc9fd66dd14268843d190f86d959249bf8b61b", "url": "https://github.com/eclipse/jetty.project/commit/befc9fd66dd14268843d190f86d959249bf8b61b", "message": "Issue #4533 Hard close from Dispatcher\n\nSome renaming of methods to make it clear that softClose should only be used as part of sendError handling.  If softClose is used by other components, then sendError can be prevented from setting the error status.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-31T08:55:31Z", "type": "commit"}]}