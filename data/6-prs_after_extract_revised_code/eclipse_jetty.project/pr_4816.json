{"pr_number": 4816, "pr_title": "Improve Attributes Handling", "pr_createdAt": "2020-04-27T08:27:09Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4816", "timeline": [{"oid": "862562c0e2843c336ba6993573ca7479056398a8", "url": "https://github.com/eclipse/jetty.project/commit/862562c0e2843c336ba6993573ca7479056398a8", "message": "Spun out from #4814 Improve Attributes Handling\n\nImprove attribute handling to reduce garbage and improve lookup.\nIntroduced a Wrapper so that request can remove any layers on reset.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-04-27T07:42:42Z", "type": "commit"}, {"oid": "d460786b94f06bca5c363b52ed9cf080db30a4aa", "url": "https://github.com/eclipse/jetty.project/commit/d460786b94f06bca5c363b52ed9cf080db30a4aa", "message": "Issue #4814 - Exposing AttributeMap.getAttributeNameSet() on Attributes.\n\nThe underlying AttributesMap already has a .getAttributeNameSet()\nmethod, expose it on the Attributes interface.\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-04-27T13:01:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDE3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415774173", "bodyText": "This is a copy/paste?  The message isn't valid for this new wrapper version.", "author": "joakime", "createdAt": "2020-04-27T12:35:45Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java", "diffHunk": "@@ -353,36 +317,67 @@ public String toString()\n         return String.format(\"%s@%x\", this.getClass().getSimpleName(), hashCode());\n     }\n \n-    /**\n-     * Simple bundle of information that is cached in the SSLSession. Stores the\n-     * effective keySize and the client certificate chain.\n-     */\n-    private static class CachedInfo\n+    private class SslAttributes extends Attributes.Wrapper\n     {\n-        private final X509Certificate[] _certs;\n-        private final Integer _keySize;\n-        private final String _idStr;\n-\n-        CachedInfo(Integer keySize, X509Certificate[] certs, String idStr)\n-        {\n-            this._keySize = keySize;\n-            this._certs = certs;\n-            this._idStr = idStr;\n-        }\n+        private final Request _request;\n+        private final SSLSession _session;\n \n-        X509Certificate[] getCerts()\n+        public SslAttributes(Request request, SSLSession sslSession, Attributes attributes)\n         {\n-            return _certs;\n+            super(attributes);\n+            this._request = request;\n+            this._session = sslSession;\n         }\n \n-        Integer getKeySize()\n+        @Override\n+        public Object getAttribute(String name)\n         {\n-            return _keySize;\n+            try\n+            {\n+                switch (name)\n+                {\n+                    case JAVAX_SERVLET_REQUEST_X_509_CERTIFICATE:\n+                        return SecureRequestCustomizer.this.getCertChain(_request, _session);\n+\n+                    case JAVAX_SERVLET_REQUEST_CIPHER_SUITE:\n+                        return _session.getCipherSuite();\n+\n+                    case JAVAX_SERVLET_REQUEST_KEY_SIZE:\n+                        return SslContextFactory.deduceKeyLength(_session.getCipherSuite());\n+\n+                    case JAVAX_SERVLET_REQUEST_SSL_SESSION_ID:\n+                        return TypeUtil.toHexString(_session.getId());\n+\n+                    default:\n+                        String sessionAttribute = getSslSessionAttribute();\n+                        if (!StringUtil.isEmpty(sessionAttribute) && sessionAttribute.equals(name))\n+                            return _session;\n+                        return _attributes.getAttribute(name);\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                LOG.warn(\"Unable to customize request with encryption details\", e);", "originalCommit": "862562c0e2843c336ba6993573ca7479056398a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d460786b94f06bca5c363b52ed9cf080db30a4aa", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java b/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\nindex a3e703f3f9..8ab0c10701 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\n\n@@ -365,11 +365,7 @@ public class SecureRequestCustomizer implements HttpConfiguration.Customizer\n         @Override\n         public Enumeration<String> getAttributeNames()\n         {\n-            Set<String> names = new HashSet<>();\n-            for (Enumeration<String> e = _attributes.getAttributeNames(); e.hasMoreElements(); )\n-            {\n-                names.add(e.nextElement());\n-            }\n+            Set<String> names = new HashSet<>(_attributes.getAttributeNameSet());\n             names.add(JAVAX_SERVLET_REQUEST_X_509_CERTIFICATE);\n             names.add(JAVAX_SERVLET_REQUEST_CIPHER_SUITE);\n             names.add(JAVAX_SERVLET_REQUEST_KEY_SIZE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MDIzOA==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415780238", "bodyText": "This could be ...\nSet<String> names = new HashSet<>();\n_attributes.getAttributeNames().asIterator().forEachRemaining(names::add);\nI'm just mentioning this here to show a different way, not that it's a better way (it likely isn't).", "author": "joakime", "createdAt": "2020-04-27T12:44:46Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java", "diffHunk": "@@ -353,36 +317,67 @@ public String toString()\n         return String.format(\"%s@%x\", this.getClass().getSimpleName(), hashCode());\n     }\n \n-    /**\n-     * Simple bundle of information that is cached in the SSLSession. Stores the\n-     * effective keySize and the client certificate chain.\n-     */\n-    private static class CachedInfo\n+    private class SslAttributes extends Attributes.Wrapper\n     {\n-        private final X509Certificate[] _certs;\n-        private final Integer _keySize;\n-        private final String _idStr;\n-\n-        CachedInfo(Integer keySize, X509Certificate[] certs, String idStr)\n-        {\n-            this._keySize = keySize;\n-            this._certs = certs;\n-            this._idStr = idStr;\n-        }\n+        private final Request _request;\n+        private final SSLSession _session;\n \n-        X509Certificate[] getCerts()\n+        public SslAttributes(Request request, SSLSession sslSession, Attributes attributes)\n         {\n-            return _certs;\n+            super(attributes);\n+            this._request = request;\n+            this._session = sslSession;\n         }\n \n-        Integer getKeySize()\n+        @Override\n+        public Object getAttribute(String name)\n         {\n-            return _keySize;\n+            try\n+            {\n+                switch (name)\n+                {\n+                    case JAVAX_SERVLET_REQUEST_X_509_CERTIFICATE:\n+                        return SecureRequestCustomizer.this.getCertChain(_request, _session);\n+\n+                    case JAVAX_SERVLET_REQUEST_CIPHER_SUITE:\n+                        return _session.getCipherSuite();\n+\n+                    case JAVAX_SERVLET_REQUEST_KEY_SIZE:\n+                        return SslContextFactory.deduceKeyLength(_session.getCipherSuite());\n+\n+                    case JAVAX_SERVLET_REQUEST_SSL_SESSION_ID:\n+                        return TypeUtil.toHexString(_session.getId());\n+\n+                    default:\n+                        String sessionAttribute = getSslSessionAttribute();\n+                        if (!StringUtil.isEmpty(sessionAttribute) && sessionAttribute.equals(name))\n+                            return _session;\n+                        return _attributes.getAttribute(name);\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                LOG.warn(\"Unable to customize request with encryption details\", e);\n+                return null;\n+            }\n         }\n \n-        String getIdStr()\n+        @Override\n+        public Enumeration<String> getAttributeNames()\n         {\n-            return _idStr;\n+            Set<String> names = new HashSet<>();\n+            for (Enumeration<String> e = _attributes.getAttributeNames(); e.hasMoreElements(); )\n+            {\n+                names.add(e.nextElement());\n+            }", "originalCommit": "862562c0e2843c336ba6993573ca7479056398a8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d460786b94f06bca5c363b52ed9cf080db30a4aa", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java b/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\nindex a3e703f3f9..8ab0c10701 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\n\n@@ -365,11 +365,7 @@ public class SecureRequestCustomizer implements HttpConfiguration.Customizer\n         @Override\n         public Enumeration<String> getAttributeNames()\n         {\n-            Set<String> names = new HashSet<>();\n-            for (Enumeration<String> e = _attributes.getAttributeNames(); e.hasMoreElements(); )\n-            {\n-                names.add(e.nextElement());\n-            }\n+            Set<String> names = new HashSet<>(_attributes.getAttributeNameSet());\n             names.add(JAVAX_SERVLET_REQUEST_X_509_CERTIFICATE);\n             names.add(JAVAX_SERVLET_REQUEST_CIPHER_SUITE);\n             names.add(JAVAX_SERVLET_REQUEST_KEY_SIZE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MTAwMA==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415781000", "bodyText": "Why cant you use instance of here instead of class.equals?", "author": "lachlan-roberts", "createdAt": "2020-04-27T12:45:54Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Request.java", "diffHunk": "@@ -1867,8 +1867,14 @@ protected void recycle()\n         _async = null;\n         _asyncNotSupportedSource = null;\n         _handled = false;\n+        _attributes = Attributes.unwrap(_attributes);\n         if (_attributes != null)\n-            _attributes.clearAttributes();\n+        {\n+            if (AttributesMap.class.equals(_attributes.getClass()))", "originalCommit": "862562c0e2843c336ba6993573ca7479056398a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgwOTY5NA==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415809694", "bodyText": "Because classes that extend AttributesMap with unknown behaviours will pass an instanceof test.\nI  already know it is an instanceof AttributesMap because that is the type of the field.  I want to ensure it is a base implementation that we can clear and not have any special behaviour left over.", "author": "gregw", "createdAt": "2020-04-27T13:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc4MTAwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDI2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415794267", "bodyText": "This class now has a weird behaviour that if you set one of these JAVAX_SERVLET_REQUEST_* attributes, it sets it on the wrapped attributes, but when accessing the attributes you only get the version stored here. Maybe you should override setAttribute as well.", "author": "lachlan-roberts", "createdAt": "2020-04-27T13:04:35Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java", "diffHunk": "@@ -353,36 +317,67 @@ public String toString()\n         return String.format(\"%s@%x\", this.getClass().getSimpleName(), hashCode());\n     }\n \n-    /**\n-     * Simple bundle of information that is cached in the SSLSession. Stores the\n-     * effective keySize and the client certificate chain.\n-     */\n-    private static class CachedInfo\n+    private class SslAttributes extends Attributes.Wrapper\n     {\n-        private final X509Certificate[] _certs;\n-        private final Integer _keySize;\n-        private final String _idStr;\n-\n-        CachedInfo(Integer keySize, X509Certificate[] certs, String idStr)\n-        {\n-            this._keySize = keySize;\n-            this._certs = certs;\n-            this._idStr = idStr;\n-        }\n+        private final Request _request;\n+        private final SSLSession _session;\n \n-        X509Certificate[] getCerts()\n+        public SslAttributes(Request request, SSLSession sslSession, Attributes attributes)", "originalCommit": "862562c0e2843c336ba6993573ca7479056398a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgxMTAyMw==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415811023", "bodyText": "yeah probably.  Just not clear what it should do?  Replace the passed value?\nMaybe in get, we should try the wrapped one first and then only use the special handling if it is null.   Yeah will do it that way....", "author": "gregw", "createdAt": "2020-04-27T13:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzMDgyNA==", "url": "https://github.com/eclipse/jetty.project/pull/4816#discussion_r415830824", "bodyText": "So what happens now if an SslAttributes was wrapping another Attributes with one of these attributes already set, you would want SslAttributes to override the behaviour of the wrapped attributes and not the other way around.\nI feel like it would be a better fix to store the SSL attributes at this level only, similar to the pattern used in ForwardAttributes and IncludeAttributes. Seems weird that they would be stored both here and in the wrapped attributes.\nBut I'll just approve and leave it up to you, PR looks good to me in general.", "author": "lachlan-roberts", "createdAt": "2020-04-27T13:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc5NDI2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2d7b299124719776187c4041a8d90d4618eacad3", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java b/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\nindex a3e703f3f9..417d1a794e 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/SecureRequestCustomizer.java\n\n@@ -332,6 +332,9 @@ public class SecureRequestCustomizer implements HttpConfiguration.Customizer\n         @Override\n         public Object getAttribute(String name)\n         {\n+            Object value = _attributes.getAttribute(name);\n+            if (value != null)\n+                return value;\n             try\n             {\n                 switch (name)\n"}}, {"oid": "2d7b299124719776187c4041a8d90d4618eacad3", "url": "https://github.com/eclipse/jetty.project/commit/2d7b299124719776187c4041a8d90d4618eacad3", "message": "Allow a set to override a secure attribute.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-04-27T13:32:26Z", "type": "commit"}, {"oid": "663ef83003039431e876d1f5071f73e9cab0dc94", "url": "https://github.com/eclipse/jetty.project/commit/663ef83003039431e876d1f5071f73e9cab0dc94", "message": "Issue #4814 - Attributes.getAttributeNames() is now defaulted\n\nThe Attributes.getAttributeNames() will use the\n.getAttributeNameSet() by default now.\n\nUpdated all Attributes.Wrapper impls to use this new behavior\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>", "committedDate": "2020-04-27T13:38:55Z", "type": "commit"}, {"oid": "e487b163b0b8223a2aef395e33a46b26ae1db09a", "url": "https://github.com/eclipse/jetty.project/commit/e487b163b0b8223a2aef395e33a46b26ae1db09a", "message": "Merge branch 'jetty-9.4.x-4814-ImproveAttributeHandling' of github.com:eclipse/jetty.project into jetty-9.4.x-4814-ImproveAttributeHandling", "committedDate": "2020-04-27T13:39:08Z", "type": "commit"}]}