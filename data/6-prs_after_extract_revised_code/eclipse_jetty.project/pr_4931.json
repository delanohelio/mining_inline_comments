{"pr_number": 4931, "pr_title": "Issue #4919 - WebSocket container graceful stop", "pr_createdAt": "2020-06-02T07:12:45Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4931", "timeline": [{"oid": "753c8be6ebe63fe32eceb8ba2080550aa0a9b5a0", "url": "https://github.com/eclipse/jetty.project/commit/753c8be6ebe63fe32eceb8ba2080550aa0a9b5a0", "message": "Issue #4919 - test graceful stop for jetty and javax ws containers\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-06-02T05:32:36Z", "type": "commit"}, {"oid": "bebe6fd13876a3de55be8bd71c4fc4b6e1369412", "url": "https://github.com/eclipse/jetty.project/commit/bebe6fd13876a3de55be8bd71c4fc4b6e1369412", "message": "Issue #4919 - always stop SessionTracker before closing connections\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-06-02T05:37:55Z", "type": "commit"}, {"oid": "9423a8753e49bc1dcc61121ab18286f855c23b3a", "url": "https://github.com/eclipse/jetty.project/commit/9423a8753e49bc1dcc61121ab18286f855c23b3a", "message": "fix some websocket jpms errors\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-06-02T06:10:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MzE1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r434263151", "bodyText": "Not sure how we should stop accepting new incoming connections before this.", "author": "lachlan-roberts", "createdAt": "2020-06-03T01:40:56Z", "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java", "diffHunk": "@@ -260,4 +262,19 @@ protected void doStart() throws Exception\n             deferredEndpointConfigs.clear();\n         }\n     }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        LifeCycle.stop(sessionTracker);", "originalCommit": "9423a8753e49bc1dcc61121ab18286f855c23b3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0OTE3Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r437949176", "bodyText": "Can stopping the sessionTracker take time? Can it block? Can it call user code?   If any of the above, then this is precisely what we don't want to do in a shutdown thread.   Why can't this be done in doStop?  at the very least a comment is needed, but I think a different approach is required.", "author": "gregw", "createdAt": "2020-06-10T08:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MzE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwOTIwMw==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r440709203", "bodyText": "It won't block in jetty code but it will call the user code with onClosed. We already stop the SessionTracker when the server is stopped (in 9.4 as well) so if this is an issue it already exists in the codebase before this change.\nThe problem here is that Server.doStop() shuts down all the connectors before calling super.doStop() and this closes the existing connections. So we can't react to the stop and close the WebSocket sessions as all the existing connections have already been closed.", "author": "lachlan-roberts", "createdAt": "2020-06-16T09:19:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MzE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "9f7f2e3e56366b95b46ed2e861dd9a3a9325c3d4", "chunk": "diff --git a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\nindex 642ebf0cc9..bbe8944989 100644\n--- a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\n+++ b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\n\n@@ -266,9 +307,22 @@ public class JavaxWebSocketServerContainer extends JavaxWebSocketClientContainer\n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        LifeCycle.stop(sessionTracker);\n         CompletableFuture<Void> shutdown = new CompletableFuture<>();\n-        shutdown.complete(null);\n+        new Thread(() ->\n+        {\n+            try\n+            {\n+                LifeCycle.stop(sessionTracker);\n+            }\n+            catch (Throwable t)\n+            {\n+                LOG.warn(\"Error while stopping SessionTracker\", t);\n+            }\n+            finally\n+            {\n+                shutdown.complete(null);\n+            }\n+        }).start();\n         return shutdown;\n     }\n \n"}}, {"oid": "ed9c60fc90c7969b200699f977e43c328311da6e", "url": "https://github.com/eclipse/jetty.project/commit/ed9c60fc90c7969b200699f977e43c328311da6e", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4919-WebSocketContainerStop\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-06-16T08:57:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTYxMA==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r451809610", "bodyText": "Try something like the below.  This lets the caller wait for this to complete or not, as it likes.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                {\n          \n          \n            \n                    LifeCycle.stop(sessionTracker);\n          \n          \n            \n                    CompletableFuture<Void> shutdown = new CompletableFuture<>();\n          \n          \n            \n                    shutdown.complete(null);\n          \n          \n            \n                    return shutdown;\n          \n          \n            \n                }\n          \n          \n            \n                {\n          \n          \n            \n                    CompletableFuture<Void> shutdown = new CompletableFuture<>();\n          \n          \n            \n                    new Thread(()->\n          \n          \n            \n                    {\n          \n          \n            \n                        try\n          \n          \n            \n                        {\n          \n          \n            \n                            LifeCycle.stop(sessionTracker);\n          \n          \n            \n                        }\n          \n          \n            \n                        catch(Exception e)\n          \n          \n            \n                        {\n          \n          \n            \n                            LOG.warn(e);\n          \n          \n            \n                        }\n          \n          \n            \n                        finally\n          \n          \n            \n                        {\n          \n          \n            \n                            shutdown.complete(null);\n          \n          \n            \n                        }\n          \n          \n            \n                    }.start();\n          \n          \n            \n                    return shutdown;\n          \n          \n            \n                }", "author": "gregw", "createdAt": "2020-07-08T20:34:30Z", "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java", "diffHunk": "@@ -301,4 +303,19 @@ protected void doStart() throws Exception\n             deferredEndpointConfigs.clear();\n         }\n     }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        LifeCycle.stop(sessionTracker);\n+        CompletableFuture<Void> shutdown = new CompletableFuture<>();\n+        shutdown.complete(null);\n+        return shutdown;\n+    }", "originalCommit": "ed9c60fc90c7969b200699f977e43c328311da6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgxNTE0NA==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r451815144", "bodyText": "Shouldn't the exception be caught and cause the shutdown CompletableFuture to fail with an exception?", "author": "joakime", "createdAt": "2020-07-08T20:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "9f7f2e3e56366b95b46ed2e861dd9a3a9325c3d4", "chunk": "diff --git a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\nindex 9786a3fec9..bbe8944989 100644\n--- a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\n+++ b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\n\n@@ -307,9 +307,22 @@ public class JavaxWebSocketServerContainer extends JavaxWebSocketClientContainer\n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        LifeCycle.stop(sessionTracker);\n         CompletableFuture<Void> shutdown = new CompletableFuture<>();\n-        shutdown.complete(null);\n+        new Thread(() ->\n+        {\n+            try\n+            {\n+                LifeCycle.stop(sessionTracker);\n+            }\n+            catch (Throwable t)\n+            {\n+                LOG.warn(\"Error while stopping SessionTracker\", t);\n+            }\n+            finally\n+            {\n+                shutdown.complete(null);\n+            }\n+        }).start();\n         return shutdown;\n     }\n \n"}}, {"oid": "c94e82470d8b7493ce9f708c17c7a8023d0a8179", "url": "https://github.com/eclipse/jetty.project/commit/c94e82470d8b7493ce9f708c17c7a8023d0a8179", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4919-WebSocketContainerStop", "committedDate": "2020-07-17T05:32:10Z", "type": "commit"}, {"oid": "0818f54be8b33e541843f8b5aa44550e617bf35f", "url": "https://github.com/eclipse/jetty.project/commit/0818f54be8b33e541843f8b5aa44550e617bf35f", "message": "cleanup the ws javax EchoSocket test class\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-20T05:32:46Z", "type": "commit"}, {"oid": "9f7f2e3e56366b95b46ed2e861dd9a3a9325c3d4", "url": "https://github.com/eclipse/jetty.project/commit/9f7f2e3e56366b95b46ed2e861dd9a3a9325c3d4", "message": "WebSocket server now only closes gracefully if the Server stopTimeout is set\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-20T05:49:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxMjAxNg==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r457212016", "bodyText": "This thread should be a daemon thread so it doesn't stop the JVM exiting.\nI'm also wondering if we should implement cancel on the CompletableFuture and interrupt the thread if it is called?\nWe might then need some support in Graceful.shutdown or Server.doStop to actually do that cancel.... but perhaps that is feature creep for this PR.   So let's just make this thread look OK", "author": "gregw", "createdAt": "2020-07-20T09:20:41Z", "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java", "diffHunk": "@@ -307,9 +307,22 @@ protected void doStart() throws Exception\n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        LifeCycle.stop(sessionTracker);\n         CompletableFuture<Void> shutdown = new CompletableFuture<>();\n-        shutdown.complete(null);\n+        new Thread(() ->\n+        {\n+            try\n+            {\n+                LifeCycle.stop(sessionTracker);\n+            }\n+            catch (Throwable t)\n+            {\n+                LOG.warn(\"Error while stopping SessionTracker\", t);\n+            }\n+            finally\n+            {\n+                shutdown.complete(null);\n+            }\n+        }).start();", "originalCommit": "9f7f2e3e56366b95b46ed2e861dd9a3a9325c3d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzQ2Mw==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r458533463", "bodyText": "I think we might have a bigger problem here if SessionTracker.doStop() needs to be called by a different thread. We also use the SessionTracker on the client which would have the same issue. So we shouldn't store the SessionTracker as a bean anymore and its lifecycle needs to be manually managed.", "author": "lachlan-roberts", "createdAt": "2020-07-22T04:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxMjAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3MzcyNA==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r458873724", "bodyText": "Ah yes, stop() is synchronized.\nI think the SessionTracker should remain as a managed bean so it is stopped normally if the container is stopped, but that shutdown should first remove the tracker as a bean and then stop it in another thread.", "author": "gregw", "createdAt": "2020-07-22T15:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxMjAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0MTAxNw==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r459841017", "bodyText": "Wasn't the whole point of this so that we never called the SessionTracker stop if the container is stopped as it could block in an onClosed? So why would we still have the SessionTracker as a managed bean on the container.", "author": "lachlan-roberts", "createdAt": "2020-07-24T03:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxMjAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "695d239ac56721338bae051e88360d437d0968f5", "chunk": "diff --git a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\nindex bbe8944989..f3561078a6 100644\n--- a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\n+++ b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/internal/JavaxWebSocketServerContainer.java\n\n@@ -303,32 +301,4 @@ public class JavaxWebSocketServerContainer extends JavaxWebSocketClientContainer\n             deferredEndpointConfigs.clear();\n         }\n     }\n-\n-    @Override\n-    public CompletableFuture<Void> shutdown()\n-    {\n-        CompletableFuture<Void> shutdown = new CompletableFuture<>();\n-        new Thread(() ->\n-        {\n-            try\n-            {\n-                LifeCycle.stop(sessionTracker);\n-            }\n-            catch (Throwable t)\n-            {\n-                LOG.warn(\"Error while stopping SessionTracker\", t);\n-            }\n-            finally\n-            {\n-                shutdown.complete(null);\n-            }\n-        }).start();\n-        return shutdown;\n-    }\n-\n-    @Override\n-    public boolean isShutdown()\n-    {\n-        return sessionTracker.isStopped();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxMjU2NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r457212565", "bodyText": "Same comments as above.... looking like we need a utility class to do this threadful stopping.", "author": "gregw", "createdAt": "2020-07-20T09:21:28Z", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/JettyWebSocketServerContainer.java", "diffHunk": "@@ -267,9 +267,22 @@ public void setAutoFragment(boolean autoFragment)\n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        LifeCycle.stop(sessionTracker);\n         CompletableFuture<Void> shutdown = new CompletableFuture<>();\n-        shutdown.complete(null);\n+        new Thread(() ->", "originalCommit": "9f7f2e3e56366b95b46ed2e861dd9a3a9325c3d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "695d239ac56721338bae051e88360d437d0968f5", "chunk": "diff --git a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/JettyWebSocketServerContainer.java b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/JettyWebSocketServerContainer.java\nindex 91083607d8..2bf701dfd6 100644\n--- a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/JettyWebSocketServerContainer.java\n+++ b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/JettyWebSocketServerContainer.java\n\n@@ -264,26 +264,17 @@ public class JettyWebSocketServerContainer extends ContainerLifeCycle implements\n         customizer.setAutoFragment(autoFragment);\n     }\n \n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        sessionTracker.start();\n+        super.doStart();\n+    }\n+\n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        CompletableFuture<Void> shutdown = new CompletableFuture<>();\n-        new Thread(() ->\n-        {\n-            try\n-            {\n-                LifeCycle.stop(sessionTracker);\n-            }\n-            catch (Throwable t)\n-            {\n-                LOG.warn(\"Error while stopping SessionTracker\", t);\n-            }\n-            finally\n-            {\n-                shutdown.complete(null);\n-            }\n-        }).start();\n-        return shutdown;\n+        return ShutdownUtil.shutdown(sessionTracker);\n     }\n \n     @Override\n"}}, {"oid": "695d239ac56721338bae051e88360d437d0968f5", "url": "https://github.com/eclipse/jetty.project/commit/695d239ac56721338bae051e88360d437d0968f5", "message": "Issue #4919 - all websocket containers to implement Graceful shutdown interface\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-22T14:09:43Z", "type": "commit"}, {"oid": "e13d26ab45e6490fbf73ba01a8eb239553d138a0", "url": "https://github.com/eclipse/jetty.project/commit/e13d26ab45e6490fbf73ba01a8eb239553d138a0", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4919-WebSocketContainerStop\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-24T03:39:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMTYzNg==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r460821636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static CompletableFuture<Void> shutdown(LifeCycle lifeCycle)\n          \n          \n            \n                public static CompletableFuture<Void> stop(LifeCycle lifeCycle)", "author": "gregw", "createdAt": "2020-07-27T11:22:26Z", "path": "jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java", "diffHunk": "@@ -0,0 +1,75 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.util;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ShutdownUtil\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(ShutdownUtil.class);\n+\n+    /**\n+     * Shutdown a {@link LifeCycle} in a new daemon thread and be notified on the result in a {@link CompletableFuture}.\n+     * @param lifeCycle the LifeCycle to stop.\n+     * @return the CompletableFuture to be notified when the stop either completes or fails.\n+     */\n+    public static CompletableFuture<Void> shutdown(LifeCycle lifeCycle)", "originalCommit": "e13d26ab45e6490fbf73ba01a8eb239553d138a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e383f0891fdf838636c0193f954bdb54539d602", "chunk": "diff --git a/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java b/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java\nindex 739fdac249..cded9dce6a 100644\n--- a/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java\n+++ b/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java\n\n@@ -30,11 +30,11 @@ public class ShutdownUtil\n     private static final Logger LOG = LoggerFactory.getLogger(ShutdownUtil.class);\n \n     /**\n-     * Shutdown a {@link LifeCycle} in a new daemon thread and be notified on the result in a {@link CompletableFuture}.\n+     * Stop a {@link LifeCycle} in a new daemon thread and be notified of the result in a {@link CompletableFuture}.\n      * @param lifeCycle the LifeCycle to stop.\n      * @return the CompletableFuture to be notified when the stop either completes or fails.\n      */\n-    public static CompletableFuture<Void> shutdown(LifeCycle lifeCycle)\n+    public static CompletableFuture<Void> stop(LifeCycle lifeCycle)\n     {\n         AtomicReference<Thread> stopThreadReference = new AtomicReference<>();\n         CompletableFuture<Void> shutdown = new CompletableFuture<>()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMzQyNg==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r460823426", "bodyText": "This is good.\nBut now you should probably modify the loop in SessionTracker.doStop() to check if interrupted and if so it can break the iteration.", "author": "gregw", "createdAt": "2020-07-27T11:26:12Z", "path": "jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java", "diffHunk": "@@ -0,0 +1,75 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.util;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ShutdownUtil\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(ShutdownUtil.class);\n+\n+    /**\n+     * Shutdown a {@link LifeCycle} in a new daemon thread and be notified on the result in a {@link CompletableFuture}.\n+     * @param lifeCycle the LifeCycle to stop.\n+     * @return the CompletableFuture to be notified when the stop either completes or fails.\n+     */\n+    public static CompletableFuture<Void> shutdown(LifeCycle lifeCycle)\n+    {\n+        AtomicReference<Thread> stopThreadReference = new AtomicReference<>();\n+        CompletableFuture<Void> shutdown = new CompletableFuture<>()\n+        {\n+            @Override\n+            public boolean cancel(boolean mayInterruptIfRunning)\n+            {\n+                boolean canceled = super.cancel(mayInterruptIfRunning);\n+                if (canceled && mayInterruptIfRunning)\n+                {\n+                    Thread thread = stopThreadReference.get();\n+                    if (thread != null)\n+                        thread.interrupt();", "originalCommit": "e13d26ab45e6490fbf73ba01a8eb239553d138a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e383f0891fdf838636c0193f954bdb54539d602", "chunk": "diff --git a/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java b/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java\nindex 739fdac249..cded9dce6a 100644\n--- a/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java\n+++ b/jetty-websocket/websocket-util/src/main/java/org/eclipse/jetty/websocket/util/ShutdownUtil.java\n\n@@ -30,11 +30,11 @@ public class ShutdownUtil\n     private static final Logger LOG = LoggerFactory.getLogger(ShutdownUtil.class);\n \n     /**\n-     * Shutdown a {@link LifeCycle} in a new daemon thread and be notified on the result in a {@link CompletableFuture}.\n+     * Stop a {@link LifeCycle} in a new daemon thread and be notified of the result in a {@link CompletableFuture}.\n      * @param lifeCycle the LifeCycle to stop.\n      * @return the CompletableFuture to be notified when the stop either completes or fails.\n      */\n-    public static CompletableFuture<Void> shutdown(LifeCycle lifeCycle)\n+    public static CompletableFuture<Void> stop(LifeCycle lifeCycle)\n     {\n         AtomicReference<Thread> stopThreadReference = new AtomicReference<>();\n         CompletableFuture<Void> shutdown = new CompletableFuture<>()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNDkyMg==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r460824922", "bodyText": "Hmmmm I don't really like such hard coded default timeouts.... but at least there is a setter.\nWhat happens if you make the default wait forever?", "author": "gregw", "createdAt": "2020-07-27T11:29:21Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java", "diffHunk": "@@ -68,6 +71,7 @@\n     private final Configuration.ConfigurationCustomizer configurationCustomizer = new Configuration.ConfigurationCustomizer();\n     private final WebSocketComponents components = new WebSocketComponents();\n     private boolean stopAtShutdown = false;\n+    private long _stopTimeout = 200;", "originalCommit": "e13d26ab45e6490fbf73ba01a8eb239553d138a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MDk4NA==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r461380984", "bodyText": "I have changed this default to Long.MAX_VALUE, so it will always do the proper close of all the sessions, which is fine assuming it doesn't block in user code in onClosed.", "author": "lachlan-roberts", "createdAt": "2020-07-28T07:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNDkyMg=="}], "type": "inlineReview", "revised_code": {"commit": "9e383f0891fdf838636c0193f954bdb54539d602", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java\nindex 48ccb97ab0..e1bdedc37b 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java\n\n@@ -71,7 +71,7 @@ public class WebSocketClient extends ContainerLifeCycle implements WebSocketPoli\n     private final Configuration.ConfigurationCustomizer configurationCustomizer = new Configuration.ConfigurationCustomizer();\n     private final WebSocketComponents components = new WebSocketComponents();\n     private boolean stopAtShutdown = false;\n-    private long _stopTimeout = 200;\n+    private long _stopTimeout = Long.MAX_VALUE;\n \n     /**\n      * Instantiate a WebSocketClient with defaults\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNTIxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r460825219", "bodyText": "Need javadoc: what are the units? Can it be disabled? Can it be set to wait forever?", "author": "gregw", "createdAt": "2020-07-27T11:29:54Z", "path": "jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java", "diffHunk": "@@ -388,11 +391,48 @@ public synchronized void setStopAtShutdown(boolean stop)\n         stopAtShutdown = stop;\n     }\n \n+    public void setStopTimeout(long stopTimeout)", "originalCommit": "e13d26ab45e6490fbf73ba01a8eb239553d138a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM4MDk5MA==", "url": "https://github.com/eclipse/jetty.project/pull/4931#discussion_r461380990", "bodyText": "It works exactly the same as Server stopTimemout, if it is less or equal to 0 we don't attempt a graceful stop, if it is greater than 0 we use the value.", "author": "lachlan-roberts", "createdAt": "2020-07-28T07:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyNTIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e383f0891fdf838636c0193f954bdb54539d602", "chunk": "diff --git a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java\nindex 48ccb97ab0..e1bdedc37b 100644\n--- a/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java\n+++ b/jetty-websocket/websocket-jetty-client/src/main/java/org/eclipse/jetty/websocket/client/WebSocketClient.java\n\n@@ -391,6 +391,10 @@ public class WebSocketClient extends ContainerLifeCycle implements WebSocketPoli\n         stopAtShutdown = stop;\n     }\n \n+    /**\n+     * The timeout to allow all remaining open Sessions to be closed gracefully using  the close code {@link org.eclipse.jetty.websocket.api.StatusCode#SHUTDOWN}.\n+     * @param stopTimeout the time in ms to wait for the graceful close, use a value less than or equal to 0 to not gracefully close.\n+     */\n     public void setStopTimeout(long stopTimeout)\n     {\n         _stopTimeout = stopTimeout;\n"}}, {"oid": "9e383f0891fdf838636c0193f954bdb54539d602", "url": "https://github.com/eclipse/jetty.project/commit/9e383f0891fdf838636c0193f954bdb54539d602", "message": "Issue #4919 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-28T06:48:49Z", "type": "commit"}, {"oid": "1be02209883dd5b5196742a76508d179b205dee5", "url": "https://github.com/eclipse/jetty.project/commit/1be02209883dd5b5196742a76508d179b205dee5", "message": "Issue #4919 - make the SessionTracker the one to implement Graceful shutdown\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-07-28T07:38:41Z", "type": "commit"}]}