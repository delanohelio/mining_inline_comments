{"pr_number": 4867, "pr_title": "Issue #4861 - reduce garbage created by the async request attributes", "pr_createdAt": "2020-05-12T08:41:15Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4867", "timeline": [{"oid": "9f39fd1dd1b12415b636f0421c8f1715a8283a9b", "url": "https://github.com/eclipse/jetty.project/commit/9f39fd1dd1b12415b636f0421c8f1715a8283a9b", "message": "Issue #4861 - reduce garbage created by the async request attributes\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-12T08:28:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMjEwNw==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r423632107", "bodyText": "I don't like all the dereferences here.   We end up with ServletAttributes->AsyncAttributes->AttributesMap, so 3 object and 3 dereferences.\nI think it would be much better to do (also note the name change):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ServletAttributes implements Attributes\n          \n          \n            \n            {\n          \n          \n            \n                private final Attributes _attributes;\n          \n          \n            \n            \n          \n          \n            \n                public ServletAttributes()\n          \n          \n            \n                {\n          \n          \n            \n                    _attributes = new AsyncAttributes(new AttributesMap());\n          \n          \n            \n                }\n          \n          \n            \n            public class AsyncAttributesMap extends AttributesMap\n          \n          \n            \n            {\n          \n          \n            \n                public AsyncAttributesMap()\n          \n          \n            \n                {\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nThe override the methods as follows:\n    @Override\n\ufffc    public Object getAttribute(String name)\n\ufffc    {\n        // do the AsyncAttribute handling here\n        // else\n        return super.getAttribute(name);\n    }\nThen you don't need AsyncAttributes class.", "author": "gregw", "createdAt": "2020-05-12T10:34:04Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java", "diffHunk": "@@ -0,0 +1,64 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.server;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jetty.util.Attributes;\n+import org.eclipse.jetty.util.AttributesMap;\n+\n+public class ServletAttributes implements Attributes\n+{\n+    private final Attributes _attributes;\n+\n+    public ServletAttributes()\n+    {\n+        _attributes = new AsyncAttributes(new AttributesMap());\n+    }", "originalCommit": "9f39fd1dd1b12415b636f0421c8f1715a8283a9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "629e106045a7ea357c229d83ba18ff196dc434b1", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java b/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java\nindex 08df2f498d..18c1dd8e30 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java\n\n@@ -25,40 +25,59 @@ import org.eclipse.jetty.util.AttributesMap;\n \n public class ServletAttributes implements Attributes\n {\n-    private final Attributes _attributes;\n+    private final Attributes _attributes = new AttributesMap();\n+    private AsyncAttributes _asyncAttributes;\n \n-    public ServletAttributes()\n+    public void setAsyncAttributes(AsyncAttributes attributes)\n     {\n-        _attributes = new AsyncAttributes(new AttributesMap());\n+        _asyncAttributes = attributes;\n     }\n \n     @Override\n     public void removeAttribute(String name)\n     {\n-        _attributes.removeAttribute(name);\n+        if (_asyncAttributes == null)\n+            _attributes.removeAttribute(name);\n+        else\n+            _asyncAttributes.removeAttribute(name);\n     }\n \n     @Override\n     public void setAttribute(String name, Object attribute)\n     {\n-        _attributes.setAttribute(name, attribute);\n+        if (_asyncAttributes == null)\n+            _attributes.setAttribute(name, attribute);\n+        else\n+            _asyncAttributes.setAttribute(name, attribute);\n     }\n \n     @Override\n     public Object getAttribute(String name)\n     {\n-        return _attributes.getAttribute(name);\n+        if (_asyncAttributes == null)\n+            return _attributes.getAttribute(name);\n+        else\n+            return _asyncAttributes.getAttribute(name);\n     }\n \n     @Override\n     public Set<String> getAttributeNameSet()\n     {\n-        return _attributes.getAttributeNameSet();\n+        if (_asyncAttributes == null)\n+            return _attributes.getAttributeNameSet();\n+        else\n+            return _asyncAttributes.getAttributeNameSet();\n     }\n \n     @Override\n     public void clearAttributes()\n     {\n-        _attributes.clearAttributes();\n+        if (_asyncAttributes == null)\n+            _attributes.clearAttributes();\n+        else\n+        {\n+            _asyncAttributes.clearAttributes();\n+            _asyncAttributes = null;\n+        }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMjczNw==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r423632737", "bodyText": "Don't create a wrapper for this, just implement directly in ServletAttributes. See below:", "author": "gregw", "createdAt": "2020-05-12T10:35:16Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java", "diffHunk": "@@ -0,0 +1,130 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.server;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.servlet.AsyncContext;\n+\n+import org.eclipse.jetty.util.Attributes;\n+\n+class AsyncAttributes extends Attributes.Wrapper", "originalCommit": "9f39fd1dd1b12415b636f0421c8f1715a8283a9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "629e106045a7ea357c229d83ba18ff196dc434b1", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\nindex 90f0b45289..9d040cb9a0 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n\n@@ -26,28 +26,27 @@ import org.eclipse.jetty.util.Attributes;\n \n class AsyncAttributes extends Attributes.Wrapper\n {\n-    /**\n-     * Async dispatch attribute name prefix.\n-     */\n-    public static final String __ASYNC_PREFIX = \"javax.servlet.async.\";\n-\n     private String _requestURI;\n     private String _contextPath;\n     private String _servletPath;\n     private String _pathInfo;\n-    private String _query;\n+    private String _queryString;\n \n-    AsyncAttributes(Attributes attributes)\n+    public AsyncAttributes(Attributes attributes, String requestUri, String contextPath, String servletPath, String pathInfo, String queryString)\n     {\n         super(attributes);\n+\n+        // TODO: make fields final in jetty-10 and NOOP when one of these attributes is set.\n+        _requestURI = requestUri;\n+        _contextPath = contextPath;\n+        _servletPath = servletPath;\n+        _pathInfo = pathInfo;\n+        _queryString = queryString;\n     }\n \n     @Override\n     public Object getAttribute(String key)\n     {\n-        if (!key.startsWith(__ASYNC_PREFIX))\n-            return super.getAttribute(key);\n-\n         switch (key)\n         {\n             case AsyncContext.ASYNC_REQUEST_URI:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzODE5MA==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r423638190", "bodyText": "Currently when we create AsyncContextEvent it does:\n                baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI, baseRequest.getRequestURI());\n                baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH, baseRequest.getContextPath());\n                baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH, baseRequest.getServletPath());\n                baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO, baseRequest.getPathInfo());\n                baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING, baseRequest.getQueryString());\nSo that's 5 (6 in jetty-10) startWith and string switches.    It would be good to be able set these in bulk.\nSo either the AsyncContextEvent can unwrap and downcast until it gets the AsyncAttributesMap and directly sets these fields... or have a synthentic set-only attribute called \"org.eclipse.jetty.servlet.AsyncContextEvent.request\" and pass it the request object.  This class then can extract all 5 (eventually 6) fields directly from the request. Ditto for the forwarded path with another synth attribute.", "author": "gregw", "createdAt": "2020-05-12T10:45:25Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java", "diffHunk": "@@ -0,0 +1,130 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.server;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.servlet.AsyncContext;\n+\n+import org.eclipse.jetty.util.Attributes;\n+\n+class AsyncAttributes extends Attributes.Wrapper\n+{\n+    /**\n+     * Async dispatch attribute name prefix.\n+     */\n+    public static final String __ASYNC_PREFIX = \"javax.servlet.async.\";\n+\n+    private String _requestURI;\n+    private String _contextPath;\n+    private String _servletPath;\n+    private String _pathInfo;\n+    private String _query;\n+\n+    AsyncAttributes(Attributes attributes)\n+    {\n+        super(attributes);\n+    }\n+\n+    @Override\n+    public Object getAttribute(String key)\n+    {\n+        if (!key.startsWith(__ASYNC_PREFIX))\n+            return super.getAttribute(key);\n+\n+        switch (key)\n+        {\n+            case AsyncContext.ASYNC_REQUEST_URI:\n+                return _requestURI;\n+            case AsyncContext.ASYNC_CONTEXT_PATH:\n+                return _contextPath;\n+            case AsyncContext.ASYNC_SERVLET_PATH:\n+                return _servletPath;\n+            case AsyncContext.ASYNC_PATH_INFO:\n+                return _pathInfo;\n+            case AsyncContext.ASYNC_QUERY_STRING:\n+                return _query;\n+            default:\n+                return super.getAttribute(key);\n+        }\n+    }\n+\n+    @Override\n+    public Set<String> getAttributeNameSet()\n+    {\n+        HashSet<String> set = new HashSet<>();\n+        for (String name : _attributes.getAttributeNameSet())\n+        {\n+            if (!name.startsWith(__ASYNC_PREFIX))\n+                set.add(name);\n+        }\n+\n+        if (_requestURI != null)\n+            set.add(AsyncContext.ASYNC_REQUEST_URI);\n+        if (_contextPath != null)\n+            set.add(AsyncContext.ASYNC_CONTEXT_PATH);\n+        if (_servletPath != null)\n+            set.add(AsyncContext.ASYNC_SERVLET_PATH);\n+        if (_pathInfo != null)\n+            set.add(AsyncContext.ASYNC_PATH_INFO);\n+        if (_query != null)\n+            set.add(AsyncContext.ASYNC_QUERY_STRING);\n+\n+        return set;\n+    }\n+\n+    @Override\n+    public void setAttribute(String key, Object value)", "originalCommit": "9f39fd1dd1b12415b636f0421c8f1715a8283a9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "629e106045a7ea357c229d83ba18ff196dc434b1", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\nindex 90f0b45289..9d040cb9a0 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n\n@@ -26,28 +26,27 @@ import org.eclipse.jetty.util.Attributes;\n \n class AsyncAttributes extends Attributes.Wrapper\n {\n-    /**\n-     * Async dispatch attribute name prefix.\n-     */\n-    public static final String __ASYNC_PREFIX = \"javax.servlet.async.\";\n-\n     private String _requestURI;\n     private String _contextPath;\n     private String _servletPath;\n     private String _pathInfo;\n-    private String _query;\n+    private String _queryString;\n \n-    AsyncAttributes(Attributes attributes)\n+    public AsyncAttributes(Attributes attributes, String requestUri, String contextPath, String servletPath, String pathInfo, String queryString)\n     {\n         super(attributes);\n+\n+        // TODO: make fields final in jetty-10 and NOOP when one of these attributes is set.\n+        _requestURI = requestUri;\n+        _contextPath = contextPath;\n+        _servletPath = servletPath;\n+        _pathInfo = pathInfo;\n+        _queryString = queryString;\n     }\n \n     @Override\n     public Object getAttribute(String key)\n     {\n-        if (!key.startsWith(__ASYNC_PREFIX))\n-            return super.getAttribute(key);\n-\n         switch (key)\n         {\n             case AsyncContext.ASYNC_REQUEST_URI:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0ODI2Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r423648262", "bodyText": "Ah we can't make this final because of possible wrappers that don't unwrap.\nSo go back to lazy creation of this field......  OR have 2 fields:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Attributes _attributes = new ServletAttributes();\n          \n          \n            \n                private final AsyncAttributesMap _asyncAttributes = new AsyncAttributesMap();\n          \n          \n            \n                private Attributes _attributes = _asyncAttributes;\n          \n      \n    \n    \n  \n\nThis way, async could as the request directly for the _asyncAttributes and set the fields on it.... but we'd still create an extra class with 6 fields even if we never use attributes.... hmmmm @lorban your thoughts on which is best?", "author": "gregw", "createdAt": "2020-05-12T11:05:01Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Request.java", "diffHunk": "@@ -199,7 +200,7 @@ public static Request getBaseRequest(ServletRequest request)\n     private boolean _handled = false;\n     private boolean _contentParamsExtracted;\n     private boolean _requestedSessionIdFromCookie = false;\n-    private Attributes _attributes;\n+    private Attributes _attributes = new ServletAttributes();", "originalCommit": "9f39fd1dd1b12415b636f0421c8f1715a8283a9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4MDE1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r423780151", "bodyText": "I would leave the _attributes field non-final, this is the simplest way to go.\nAny sort of cleanup seem to require a non-negligible amount of refactoring, so I'd keep #4861 open until the code is cleaned up. Regarding perf, this small change has 99% of the benefits of a larger refactoring.", "author": "lorban", "createdAt": "2020-05-12T14:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0ODI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "629e106045a7ea357c229d83ba18ff196dc434b1", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\nindex 07495e906a..0b8939f6dc 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n\n@@ -200,7 +199,7 @@ public class Request implements HttpServletRequest\n     private boolean _handled = false;\n     private boolean _contentParamsExtracted;\n     private boolean _requestedSessionIdFromCookie = false;\n-    private Attributes _attributes = new ServletAttributes();\n+    private Attributes _attributes;\n     private Authentication _authentication;\n     private String _contentType;\n     private String _characterEncoding;\n"}}, {"oid": "629e106045a7ea357c229d83ba18ff196dc434b1", "url": "https://github.com/eclipse/jetty.project/commit/629e106045a7ea357c229d83ba18ff196dc434b1", "message": "Issue #4861 - increase efficiency of ServletAttributes when going async\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-13T09:10:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDMxNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r424370315", "bodyText": "just reset to null", "author": "gregw", "createdAt": "2020-05-13T11:39:19Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Request.java", "diffHunk": "@@ -1868,13 +1868,10 @@ protected void recycle()\n         _asyncNotSupportedSource = null;\n         _handled = false;\n         _attributes = Attributes.unwrap(_attributes);\n-        if (_attributes != null)\n-        {\n-            if (AttributesMap.class.equals(_attributes.getClass()))\n-                _attributes.clearAttributes();\n-            else\n-                _attributes = null;\n-        }\n+        if (ServletAttributes.class.equals(_attributes.getClass()))\n+            _attributes.clearAttributes();\n+        else\n+            _attributes = new ServletAttributes();", "originalCommit": "629e106045a7ea357c229d83ba18ff196dc434b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4aece5e9cfd8b461d0e13ea243cadc63947e35e7", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\nindex 0b8939f6dc..34f9e57bbb 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n\n@@ -1868,10 +1868,13 @@ public class Request implements HttpServletRequest\n         _asyncNotSupportedSource = null;\n         _handled = false;\n         _attributes = Attributes.unwrap(_attributes);\n-        if (ServletAttributes.class.equals(_attributes.getClass()))\n-            _attributes.clearAttributes();\n-        else\n-            _attributes = new ServletAttributes();\n+        if (_attributes != null)\n+        {\n+            if (ServletAttributes.class.equals(_attributes.getClass()))\n+                _attributes.clearAttributes();\n+            else\n+                _attributes = null;\n+        }\n         _contentType = null;\n         _characterEncoding = null;\n         _contextPath = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MjcwNg==", "url": "https://github.com/eclipse/jetty.project/pull/4867#discussion_r424372706", "bodyText": "I think it is clearer as:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (_asyncAttributes == null)\n          \n          \n            \n                        _attributes.removeAttribute(name);\n          \n          \n            \n                    else\n          \n          \n            \n                        _asyncAttributes.removeAttribute(name);\n          \n          \n            \n                    (_asyncAttributes == null ? _asyncAttributes : _attributes).removeAttribute(name);\n          \n      \n    \n    \n  \n\nor maybe even with a private method:\n    attributes().removeAttribute(name);\nsame for other methods below.", "author": "gregw", "createdAt": "2020-05-13T11:44:06Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java", "diffHunk": "@@ -0,0 +1,83 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.server;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jetty.util.Attributes;\n+import org.eclipse.jetty.util.AttributesMap;\n+\n+public class ServletAttributes implements Attributes\n+{\n+    private final Attributes _attributes = new AttributesMap();\n+    private AsyncAttributes _asyncAttributes;\n+\n+    public void setAsyncAttributes(AsyncAttributes attributes)\n+    {\n+        _asyncAttributes = attributes;\n+    }\n+\n+    @Override\n+    public void removeAttribute(String name)\n+    {\n+        if (_asyncAttributes == null)\n+            _attributes.removeAttribute(name);\n+        else\n+            _asyncAttributes.removeAttribute(name);", "originalCommit": "629e106045a7ea357c229d83ba18ff196dc434b1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4aece5e9cfd8b461d0e13ea243cadc63947e35e7", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java b/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java\nindex 18c1dd8e30..ec24e37216 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/ServletAttributes.java\n\n@@ -33,51 +33,39 @@ public class ServletAttributes implements Attributes\n         _asyncAttributes = attributes;\n     }\n \n+    private Attributes getAttributes()\n+    {\n+        return (_asyncAttributes == null) ? _attributes : _asyncAttributes;\n+    }\n+\n     @Override\n     public void removeAttribute(String name)\n     {\n-        if (_asyncAttributes == null)\n-            _attributes.removeAttribute(name);\n-        else\n-            _asyncAttributes.removeAttribute(name);\n+        getAttributes().removeAttribute(name);\n     }\n \n     @Override\n     public void setAttribute(String name, Object attribute)\n     {\n-        if (_asyncAttributes == null)\n-            _attributes.setAttribute(name, attribute);\n-        else\n-            _asyncAttributes.setAttribute(name, attribute);\n+        getAttributes().setAttribute(name, attribute);\n     }\n \n     @Override\n     public Object getAttribute(String name)\n     {\n-        if (_asyncAttributes == null)\n-            return _attributes.getAttribute(name);\n-        else\n-            return _asyncAttributes.getAttribute(name);\n+        return getAttributes().getAttribute(name);\n     }\n \n     @Override\n     public Set<String> getAttributeNameSet()\n     {\n-        if (_asyncAttributes == null)\n-            return _attributes.getAttributeNameSet();\n-        else\n-            return _asyncAttributes.getAttributeNameSet();\n+        return getAttributes().getAttributeNameSet();\n     }\n \n     @Override\n     public void clearAttributes()\n     {\n-        if (_asyncAttributes == null)\n-            _attributes.clearAttributes();\n-        else\n-        {\n-            _asyncAttributes.clearAttributes();\n-            _asyncAttributes = null;\n-        }\n+        getAttributes().clearAttributes();\n+        _asyncAttributes = null;\n     }\n }\n"}}, {"oid": "4aece5e9cfd8b461d0e13ea243cadc63947e35e7", "url": "https://github.com/eclipse/jetty.project/commit/4aece5e9cfd8b461d0e13ea243cadc63947e35e7", "message": "Issue #4861 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-13T13:12:22Z", "type": "commit"}, {"oid": "7111f5f1617bbdb1f4f0a25aad016873108cfa06", "url": "https://github.com/eclipse/jetty.project/commit/7111f5f1617bbdb1f4f0a25aad016873108cfa06", "message": "Issue #4861 - AsyncAttributes should wrap ServletAttributes inner AttributesMap\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-13T22:33:31Z", "type": "commit"}]}