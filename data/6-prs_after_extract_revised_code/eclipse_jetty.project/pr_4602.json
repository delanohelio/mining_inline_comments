{"pr_number": 4602, "pr_title": "Issue #4340 - Continue after ServiceLoader ServiceConfigurationError", "pr_createdAt": "2020-02-25T12:23:05Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4602", "timeline": [{"oid": "81424f1f449592f66bf02d64e4c711e5e176c12b", "url": "https://github.com/eclipse/jetty.project/commit/81424f1f449592f66bf02d64e4c711e5e176c12b", "message": "Issue #4340 - Continuing after ServiceLoader ServiceConfigurationError\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-25T08:49:22Z", "type": "commit"}, {"oid": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d", "url": "https://github.com/eclipse/jetty.project/commit/a7f4d2606b3d2bd2fabfde573464857a3b4e021d", "message": "Issue #4340 - always pass in ServiceLoader to ServiceLoaderUtil\n\nthis prevents errors where jetty-util must declare it uses the provider\nclass in module.info\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-25T08:49:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MDU3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383860572", "bodyText": "I think loadAll is a better name for a method that returns a list and it stresses that we are breaking the lazy load paradigm of ServiceLoader.  We could also then have loadFirst(Predicate<T>) if we wanted to avoid loading all.", "author": "gregw", "createdAt": "2020-02-25T12:55:33Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil\n+{\n+    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n+    private static final int MAX_ERRORS = 100;\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> load(ServiceLoader<T> serviceLoader)", "originalCommit": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MjYyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383882625", "bodyText": "Not a fan of this, as returning a List will mean instantiating each Service even if we don't use it.", "author": "joakime", "createdAt": "2020-02-25T13:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MDU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a277c30b8105f27d3fd5497b61c5d9ac85c9d313", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java\ndeleted file mode 100644\nindex 8edca00b74..0000000000\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-//\n-// ========================================================================\n-// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n-//\n-// This program and the accompanying materials are made available under\n-// the terms of the Eclipse Public License 2.0 which is available at\n-// https://www.eclipse.org/legal/epl-2.0\n-//\n-// This Source Code may also be made available under the following\n-// Secondary Licenses when the conditions for such availability set\n-// forth in the Eclipse Public License, v. 2.0 are satisfied:\n-// the Apache License v2.0 which is available at\n-// https://www.apache.org/licenses/LICENSE-2.0\n-//\n-// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n-// ========================================================================\n-//\n-\n-package org.eclipse.jetty.util;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.ServiceConfigurationError;\n-import java.util.ServiceLoader;\n-\n-import org.eclipse.jetty.util.log.Log;\n-import org.eclipse.jetty.util.log.Logger;\n-\n-public class ServiceLoaderUtil\n-{\n-    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n-    private static final int MAX_ERRORS = 100;\n-\n-    /**\n-     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n-     * If loading a service type throws {@link ServiceConfigurationError},\n-     * it warns and continues iterating through the service loader.\n-     * @param <T> The class of the service type.\n-     * @param serviceLoader The service loader to use.\n-     * @return a list of the loaded service providers.\n-     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n-     */\n-    public static <T> List<T> load(ServiceLoader<T> serviceLoader)\n-    {\n-        List<T> list = new ArrayList<>();\n-        Iterator<T> iterator = serviceLoader.iterator();\n-\n-        int errors = 0;\n-        while (true)\n-        {\n-            try\n-            {\n-                if (!iterator.hasNext())\n-                    break;\n-                list.add(iterator.next());\n-            }\n-            catch (ServiceConfigurationError e)\n-            {\n-                LOG.warn(e);\n-                if (++errors >= MAX_ERRORS)\n-                    throw e;\n-            }\n-        }\n-\n-        return list;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2NDAxNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383864015", "bodyText": "I'm not sure what I dislike more... the while(true) or a fixed number of iterations!  But I can't think of anything better... other than to perhaps not worry about infinite looping as the javadoc for the ServiceLoader iterator says:\n * If an error is thrown then subsequent invocations of the\n * iterator will make a best effort to locate and instantiate the next\n * available provider, but in general such recovery cannot be guaranteed.\n\nHmmm let's keep the MAX_ERRORs for now, but increase the value to 1000", "author": "gregw", "createdAt": "2020-02-25T13:02:24Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil\n+{\n+    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n+    private static final int MAX_ERRORS = 100;\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> load(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)", "originalCommit": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a277c30b8105f27d3fd5497b61c5d9ac85c9d313", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java\ndeleted file mode 100644\nindex 8edca00b74..0000000000\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-//\n-// ========================================================================\n-// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n-//\n-// This program and the accompanying materials are made available under\n-// the terms of the Eclipse Public License 2.0 which is available at\n-// https://www.eclipse.org/legal/epl-2.0\n-//\n-// This Source Code may also be made available under the following\n-// Secondary Licenses when the conditions for such availability set\n-// forth in the Eclipse Public License, v. 2.0 are satisfied:\n-// the Apache License v2.0 which is available at\n-// https://www.apache.org/licenses/LICENSE-2.0\n-//\n-// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n-// ========================================================================\n-//\n-\n-package org.eclipse.jetty.util;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.ServiceConfigurationError;\n-import java.util.ServiceLoader;\n-\n-import org.eclipse.jetty.util.log.Log;\n-import org.eclipse.jetty.util.log.Logger;\n-\n-public class ServiceLoaderUtil\n-{\n-    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n-    private static final int MAX_ERRORS = 100;\n-\n-    /**\n-     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n-     * If loading a service type throws {@link ServiceConfigurationError},\n-     * it warns and continues iterating through the service loader.\n-     * @param <T> The class of the service type.\n-     * @param serviceLoader The service loader to use.\n-     * @return a list of the loaded service providers.\n-     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n-     */\n-    public static <T> List<T> load(ServiceLoader<T> serviceLoader)\n-    {\n-        List<T> list = new ArrayList<>();\n-        Iterator<T> iterator = serviceLoader.iterator();\n-\n-        int errors = 0;\n-        while (true)\n-        {\n-            try\n-            {\n-                if (!iterator.hasNext())\n-                    break;\n-                list.add(iterator.next());\n-            }\n-            catch (ServiceConfigurationError e)\n-            {\n-                LOG.warn(e);\n-                if (++errors >= MAX_ERRORS)\n-                    throw e;\n-            }\n-        }\n-\n-        return list;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2ODM1Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r383868356", "bodyText": "Rather than a new util class, this could just be some method(s) on the existing TypeUtil.", "author": "gregw", "createdAt": "2020-02-25T13:11:30Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java", "diffHunk": "@@ -0,0 +1,68 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+public class ServiceLoaderUtil", "originalCommit": "a7f4d2606b3d2bd2fabfde573464857a3b4e021d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a277c30b8105f27d3fd5497b61c5d9ac85c9d313", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java\ndeleted file mode 100644\nindex 8edca00b74..0000000000\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderUtil.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-//\n-// ========================================================================\n-// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n-//\n-// This program and the accompanying materials are made available under\n-// the terms of the Eclipse Public License 2.0 which is available at\n-// https://www.eclipse.org/legal/epl-2.0\n-//\n-// This Source Code may also be made available under the following\n-// Secondary Licenses when the conditions for such availability set\n-// forth in the Eclipse Public License, v. 2.0 are satisfied:\n-// the Apache License v2.0 which is available at\n-// https://www.apache.org/licenses/LICENSE-2.0\n-//\n-// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n-// ========================================================================\n-//\n-\n-package org.eclipse.jetty.util;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.ServiceConfigurationError;\n-import java.util.ServiceLoader;\n-\n-import org.eclipse.jetty.util.log.Log;\n-import org.eclipse.jetty.util.log.Logger;\n-\n-public class ServiceLoaderUtil\n-{\n-    private static final Logger LOG = Log.getLogger(ServiceLoaderUtil.class);\n-    private static final int MAX_ERRORS = 100;\n-\n-    /**\n-     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n-     * If loading a service type throws {@link ServiceConfigurationError},\n-     * it warns and continues iterating through the service loader.\n-     * @param <T> The class of the service type.\n-     * @param serviceLoader The service loader to use.\n-     * @return a list of the loaded service providers.\n-     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n-     */\n-    public static <T> List<T> load(ServiceLoader<T> serviceLoader)\n-    {\n-        List<T> list = new ArrayList<>();\n-        Iterator<T> iterator = serviceLoader.iterator();\n-\n-        int errors = 0;\n-        while (true)\n-        {\n-            try\n-            {\n-                if (!iterator.hasNext())\n-                    break;\n-                list.add(iterator.next());\n-            }\n-            catch (ServiceConfigurationError e)\n-            {\n-                LOG.warn(e);\n-                if (++errors >= MAX_ERRORS)\n-                    throw e;\n-            }\n-        }\n-\n-        return list;\n-    }\n-}\n"}}, {"oid": "a277c30b8105f27d3fd5497b61c5d9ac85c9d313", "url": "https://github.com/eclipse/jetty.project/commit/a277c30b8105f27d3fd5497b61c5d9ac85c9d313", "message": "Issue #4340 - Move ServiceLoaderUtil.load method to TypeUtil.loadAll\n\n- increase MAX_ERRORS to 1000\n- introduce a loadFirst method\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-25T23:26:29Z", "type": "commit"}, {"oid": "67e88abbe912d64210b05092de1ef6937aa6e2c6", "url": "https://github.com/eclipse/jetty.project/commit/67e88abbe912d64210b05092de1ef6937aa6e2c6", "message": "Issue #4340 - loadFirst can take a predicate to match a service provider\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-25T23:35:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384579635", "bodyText": "No, should return Optional<T>, not null.\nBut frankly I would just have 1 method that returns a Stream, and the caller can easily load them all into a List, or load the first, etc. using the Stream APIs.", "author": "sbordet", "createdAt": "2020-02-26T15:45:45Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,89 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return a list of the loaded service providers.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    {\n+        List<T> list = new ArrayList<>();\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+                list.add(iterator.next());\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first available service provider.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n+    {\n+        return loadFirst(serviceLoader, t -> true);\n+    }\n+\n+    /**\n+     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n+     * If loading a service type throws {@link ServiceConfigurationError},\n+     * it warns and continues iterating through the service loader until one is found.\n+     * @param <T> The class of the service type.\n+     * @param serviceLoader The service loader to use.\n+     * @param predicate The predicate used to match a service provider.\n+     * @return an instance of a service provider, or null if none could be found.\n+     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     */\n+    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n+    {\n+        Iterator<T> iterator = serviceLoader.iterator();\n+\n+        int errors = 0;\n+        while (true)\n+        {\n+            try\n+            {\n+                if (!iterator.hasNext())\n+                    break;\n+\n+                T t = iterator.next();\n+                if (predicate.test(t))\n+                    return t;\n+            }\n+            catch (ServiceConfigurationError e)\n+            {\n+                LOG.warn(e);\n+                if (++errors >= MAX_ERRORS)\n+                    throw e;\n+            }\n+        }\n+\n+        return null;", "originalCommit": "67e88abbe912d64210b05092de1ef6937aa6e2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NDk5Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384584992", "bodyText": "Optional only really works if Streams are being used.   I think it is a mistake to mix styles.", "author": "gregw", "createdAt": "2020-02-26T15:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NjY3Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384586677", "bodyText": "I don't think Optional is really necessary as it only is advantageous if you are using streams.\nSo I think it is a Stream API or as is, no need to mix styles.", "author": "gregw", "createdAt": "2020-02-26T15:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4ODQ1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384588454", "bodyText": "Optional is orthogonal to Stream.\nThe signature with Optional makes clear that you may or may not get a service. Without the Optional you have to either read the source code or the javadocs.", "author": "sbordet", "createdAt": "2020-02-26T15:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MjI0OA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384592248", "bodyText": "Hmmm I can't actually find any usages of loadFirst, so I hate methods that are not actually used.\nAre there any usages that can be converted to use loadFirst?  if not, then perhaps just doing a single more flexible Stream API is best.", "author": "gregw", "createdAt": "2020-02-26T16:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU3OTYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6832912d49b5ae8785e7f4d828944f04cc637960", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex 6e2cebb520..ef384dc2a0 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -757,87 +757,27 @@ public class TypeUtil\n     }\n \n     /**\n-     * Uses the {@link ServiceLoader} to assemble the service providers into a list.\n+     * Uses the {@link ServiceLoader} to return a Stream of the service providers which does not throw.\n      * If loading a service type throws {@link ServiceConfigurationError},\n      * it warns and continues iterating through the service loader.\n      * @param <T> The class of the service type.\n      * @param serviceLoader The service loader to use.\n-     * @return a list of the loaded service providers.\n-     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n+     * @return a stream of the loaded service providers.\n      */\n-    public static <T> List<T> loadAll(ServiceLoader<T> serviceLoader)\n+    public static <T> Stream<T> load(ServiceLoader<T> serviceLoader)\n     {\n-        List<T> list = new ArrayList<>();\n-        Iterator<T> iterator = serviceLoader.iterator();\n-\n-        int errors = 0;\n-        while (true)\n+        return serviceLoader.stream().map((provider) ->\n         {\n             try\n             {\n-                if (!iterator.hasNext())\n-                    break;\n-                list.add(iterator.next());\n+                // Attempt to load service, will either return a service, throw an error, or return null.\n+                return provider.get();\n             }\n-            catch (ServiceConfigurationError e)\n+            catch (ServiceConfigurationError error)\n             {\n-                LOG.warn(e);\n-                if (++errors >= MAX_ERRORS)\n-                    throw e;\n+                LOG.warn(\"Service Provider failed to load\", error);\n             }\n-        }\n-\n-        return list;\n-    }\n-\n-    /**\n-     * Uses the {@link ServiceLoader} to get the first available service provider.\n-     * If loading a service type throws {@link ServiceConfigurationError},\n-     * it warns and continues iterating through the service loader until one is found.\n-     * @param <T> The class of the service type.\n-     * @param serviceLoader The service loader to use.\n-     * @return an instance of a service provider, or null if none could be found.\n-     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n-     */\n-    public static <T> T loadFirst(ServiceLoader<T> serviceLoader)\n-    {\n-        return loadFirst(serviceLoader, t -> true);\n-    }\n-\n-    /**\n-     * Uses the {@link ServiceLoader} to get the first service provider to match the provided predicate.\n-     * If loading a service type throws {@link ServiceConfigurationError},\n-     * it warns and continues iterating through the service loader until one is found.\n-     * @param <T> The class of the service type.\n-     * @param serviceLoader The service loader to use.\n-     * @param predicate The predicate used to match a service provider.\n-     * @return an instance of a service provider, or null if none could be found.\n-     * @throws ServiceConfigurationError If the number of errors exceeds {@link #MAX_ERRORS}\n-     */\n-    public static <T> T loadFirst(ServiceLoader<T> serviceLoader, Predicate<T> predicate)\n-    {\n-        Iterator<T> iterator = serviceLoader.iterator();\n-\n-        int errors = 0;\n-        while (true)\n-        {\n-            try\n-            {\n-                if (!iterator.hasNext())\n-                    break;\n-\n-                T t = iterator.next();\n-                if (predicate.test(t))\n-                    return t;\n-            }\n-            catch (ServiceConfigurationError e)\n-            {\n-                LOG.warn(e);\n-                if (++errors >= MAX_ERRORS)\n-                    throw e;\n-            }\n-        }\n-\n-        return null;\n+            return null;\n+        }).filter(Objects::nonNull);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4ODE4NA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384588184", "bodyText": "Why isn't this using the TypeUtil method to skip exceptions?", "author": "gregw", "createdAt": "2020-02-26T15:57:36Z", "path": "jetty-websocket/websocket-jetty-api/src/main/java/org/eclipse/jetty/websocket/api/extensions/ExtensionConfig.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     private static ExtensionConfig.Parser getParser()\n     {\n-        return ServiceLoader.load(ExtensionConfig.Parser.class).findFirst().get();\n+        return ServiceLoader.load(ExtensionConfig.Parser.class).iterator().next();", "originalCommit": "67e88abbe912d64210b05092de1ef6937aa6e2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4OTEwNw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r384589107", "bodyText": "websocket-api does not depend on jetty-util (or any other jetty dependency for that matter)", "author": "joakime", "createdAt": "2020-02-26T15:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4ODE4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6832912d49b5ae8785e7f4d828944f04cc637960", "url": "https://github.com/eclipse/jetty.project/commit/6832912d49b5ae8785e7f4d828944f04cc637960", "message": "Issue #4340 - Implement TypeUtil.load(ServiceLoader) with Streams\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-28T01:15:27Z", "type": "commit"}, {"oid": "97c55e27cc72270a50538dfb7020fb69397e73c3", "url": "https://github.com/eclipse/jetty.project/commit/97c55e27cc72270a50538dfb7020fb69397e73c3", "message": "Issue #4340 - remove TypeUtil.load and use flatMap() on streams instead\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-02-29T00:06:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDYxMw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386040613", "bodyText": "This can be a collect", "author": "gregw", "createdAt": "2020-02-29T16:56:30Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java", "diffHunk": "@@ -44,20 +44,11 @@\n     static\n     {\n         List<HttpFieldPreEncoder> encoders = new ArrayList<>();\n-        Iterator<HttpFieldPreEncoder> iter = ServiceLoader.load(HttpFieldPreEncoder.class).iterator();\n-        while (iter.hasNext())\n-        {\n-            try\n-            {\n-                HttpFieldPreEncoder encoder = iter.next();\n-                if (index(encoder.getHttpVersion()) >= 0)\n-                    encoders.add(encoder);\n-            }\n-            catch (Error | RuntimeException e)\n-            {\n-                LOG.debug(e);\n-            }\n-        }\n+        ServiceLoader.load(HttpFieldPreEncoder.class).stream()\n+            .flatMap(TypeUtil::providerMap)\n+            .filter(encoder -> index(encoder.getHttpVersion()) >= 0)\n+            .forEach(encoders::add);", "originalCommit": "97c55e27cc72270a50538dfb7020fb69397e73c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "355d21317b85de9efc4af267463987c72b9ba360", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java b/jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java\nindex fa10c62458..36a48a8213 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/PreEncodedHttpField.java\n\n@@ -43,11 +43,10 @@ public class PreEncodedHttpField extends HttpField\n \n     static\n     {\n-        List<HttpFieldPreEncoder> encoders = new ArrayList<>();\n-        ServiceLoader.load(HttpFieldPreEncoder.class).stream()\n+        List<HttpFieldPreEncoder> encoders = ServiceLoader.load(HttpFieldPreEncoder.class).stream()\n             .flatMap(TypeUtil::providerMap)\n             .filter(encoder -> index(encoder.getHttpVersion()) >= 0)\n-            .forEach(encoders::add);\n+            .collect(Collectors.toList());\n \n         LOG.debug(\"HttpField encoders loaded: {}\", encoders);\n         int size = encoders.size();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDY1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386040654", "bodyText": "This can be a collect", "author": "gregw", "createdAt": "2020-02-29T16:57:07Z", "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        ServiceLoader.load(Authenticator.Factory.class).stream()\n+            .flatMap(TypeUtil::providerMap).forEach(__knownAuthenticatorFactories::add);", "originalCommit": "97c55e27cc72270a50538dfb7020fb69397e73c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA4NTcyNw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386085727", "bodyText": "We also need to add new DefaultAuthenticatorFactory() but Collectors.toList() may return an immutable list.", "author": "lachlan-roberts", "createdAt": "2020-03-01T07:56:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "355d21317b85de9efc4af267463987c72b9ba360", "chunk": "diff --git a/jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java b/jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java\nindex 05fca253fb..c1b3a84064 100644\n--- a/jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java\n+++ b/jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java\n\n@@ -78,7 +78,8 @@ public abstract class SecurityHandler extends HandlerWrapper implements Authenti\n     static\n     {\n         ServiceLoader.load(Authenticator.Factory.class).stream()\n-            .flatMap(TypeUtil::providerMap).forEach(__knownAuthenticatorFactories::add);\n+            .flatMap(TypeUtil::providerMap)\n+            .forEach(__knownAuthenticatorFactories::add);\n         __knownAuthenticatorFactories.add(new DefaultAuthenticatorFactory());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0MDczMA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r386040730", "bodyText": "Give a code example of how to use it", "author": "gregw", "createdAt": "2020-02-29T16:58:35Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +755,25 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * @param <T> The class of the service type.", "originalCommit": "97c55e27cc72270a50538dfb7020fb69397e73c3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "355d21317b85de9efc4af267463987c72b9ba360", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex 3cf57c7887..2178b56d5f 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -760,6 +760,8 @@ public class TypeUtil\n      * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n      * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n      * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n      * @param <T> The class of the service type.\n      * @param provider The service provider to instantiate.\n      * @return a stream of the loaded service providers.\n"}}, {"oid": "355d21317b85de9efc4af267463987c72b9ba360", "url": "https://github.com/eclipse/jetty.project/commit/355d21317b85de9efc4af267463987c72b9ba360", "message": "Issue #4340 - Changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-01T23:16:38Z", "type": "commit"}, {"oid": "edd671146dace3fc9c4eeefae3f8920353d9fc60", "url": "https://github.com/eclipse/jetty.project/commit/edd671146dace3fc9c4eeefae3f8920353d9fc60", "message": "Issue #4340 - ServiceLoader stream which doesn't break if hasNext throws\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-13T05:59:33Z", "type": "commit"}, {"oid": "a6b2b3ff98254c8932fbaa0363d77f91bf473949", "url": "https://github.com/eclipse/jetty.project/commit/a6b2b3ff98254c8932fbaa0363d77f91bf473949", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4340-ServiceLoader\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-13T06:02:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDMzMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392164331", "bodyText": "Perhaps it would be less verbose to have two methods named:\n\nStream<T> TypeUtil.serviceStream(ServiceLoader<T>) would include in the flatMap operation and just provide a stream of services, hiding exceptions\nStream<Provider<T>> TypeUtil.serviceProviderStream(ServiceLoader<T>) would return the stream of providers with exceptions etc.", "author": "gregw", "createdAt": "2020-03-13T11:08:27Z", "path": "jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java", "diffHunk": "@@ -54,21 +54,8 @@ public ALPNClientConnectionFactory(Executor executor, ClientConnectionFactory co\n         IllegalStateException failure = new IllegalStateException(\"No Client ALPNProcessors!\");\n \n         // Use a for loop on iterator so load exceptions can be caught and ignored\n-        for (Iterator<Client> i = ServiceLoader.load(Client.class).iterator(); i.hasNext(); )\n+        TypeUtil.serviceLoaderStream(ServiceLoader.load(Client.class)).flatMap(TypeUtil::providerMap).forEach((processor) ->", "originalCommit": "a6b2b3ff98254c8932fbaa0363d77f91bf473949", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwNDY5Mw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392204693", "bodyText": "What does the second option give you that the existing ServiceLoader.stream() doesn't?\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ServiceLoader.html#stream()", "author": "joakime", "createdAt": "2020-03-13T12:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4NzEyMg==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392287122", "bodyText": "@joakime our version actually works!   The ServiceLoader stream implementation has a bug, because it uses the iterator internally and does not protect against the cases that hasNext can throw.    If the JVM folks accept this is a bug and undertake to fix it, then we can deprecate the second option and eventually replace it.", "author": "gregw", "createdAt": "2020-03-13T15:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2NDMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7af220dade816ff9865708f89119dbe2bc988153", "chunk": "diff --git a/jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java b/jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java\nindex 176ff17ccd..d7ef1132b1 100644\n--- a/jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java\n+++ b/jetty-alpn/jetty-alpn-client/src/main/java/org/eclipse/jetty/alpn/client/ALPNClientConnectionFactory.java\n\n@@ -54,7 +54,7 @@ public class ALPNClientConnectionFactory extends NegotiatingClientConnectionFact\n         IllegalStateException failure = new IllegalStateException(\"No Client ALPNProcessors!\");\n \n         // Use a for loop on iterator so load exceptions can be caught and ignored\n-        TypeUtil.serviceLoaderStream(ServiceLoader.load(Client.class)).flatMap(TypeUtil::providerMap).forEach((processor) ->\n+        TypeUtil.serviceStream(ServiceLoader.load(Client.class)).forEach((processor) ->\n         {\n             try\n             {\n"}}, {"oid": "7af220dade816ff9865708f89119dbe2bc988153", "url": "https://github.com/eclipse/jetty.project/commit/7af220dade816ff9865708f89119dbe2bc988153", "message": "Issue #4340 - shortcut method for the serviceStream\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-15T22:42:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODE1Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392858152", "bodyText": "I don't think this is right. The point of Provider is to not allocate the service, so calling type() should not allocate the service.", "author": "sbordet", "createdAt": "2020-03-16T08:42:16Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;\n+        private Throwable error;\n+\n+        public void setServiceProvider(T serviceProvider)\n+        {\n+            this.serviceProvider = serviceProvider;\n+        }\n+\n+        public void setError(Throwable error)\n+        {\n+            this.error = error;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Class<? extends T> type()\n+        {\n+            return (Class<? extends T>)get().getClass();", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4OTEwMw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392889103", "bodyText": "I'm not sure we can avoid this with a Stream<Provider<T>> implemented in terms of an Iterator<T>.  There is no way to get the type from the iterator without getting the instance.   Also for our purposes, if getting the instance throws an exception, we really want to warn and move on, rather than return a type.     I think we should probably just document the limitation and leave as is.  Ultimately we'd like to replace with a real JVM impl without the bug.\n@sbordet have your tried raising this issue with the JVM folks?", "author": "gregw", "createdAt": "2020-03-16T09:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2OTExMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393869111", "bodyText": "ServiceLoader.Provider.type() returns the type of the service found, before it's attempted to be loaded.  You can think of it as returning the string in the META-INF/services/<service-impl> file.", "author": "joakime", "createdAt": "2020-03-17T18:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\nindex f5508bee1e..f2deaf001c 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n\n@@ -36,16 +36,16 @@ class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<\n     @Override\n     public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n     {\n-        Provider<T> next = new Provider<>();\n+        ServiceProvider<T> next;\n         try\n         {\n             if (!iterator.hasNext())\n                 return false;\n-            next.setServiceProvider(iterator.next());\n+            next = new ServiceProvider<>(iterator.next());\n         }\n         catch (Throwable t)\n         {\n-            next.setError(t);\n+            next = new ServiceProvider<>(t);\n         }\n \n         action.accept(next);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1ODk0OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392858949", "bodyText": "Would be great if both serviceProvider and error can be made final.", "author": "sbordet", "createdAt": "2020-03-16T08:43:47Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;\n+        private Throwable error;\n+\n+        public void setServiceProvider(T serviceProvider)\n+        {\n+            this.serviceProvider = serviceProvider;\n+        }\n+\n+        public void setError(Throwable error)\n+        {\n+            this.error = error;\n+        }", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\nindex f5508bee1e..f2deaf001c 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n\n@@ -36,16 +36,16 @@ class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<\n     @Override\n     public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n     {\n-        Provider<T> next = new Provider<>();\n+        ServiceProvider<T> next;\n         try\n         {\n             if (!iterator.hasNext())\n                 return false;\n-            next.setServiceProvider(iterator.next());\n+            next = new ServiceProvider<>(iterator.next());\n         }\n         catch (Throwable t)\n         {\n-            next.setError(t);\n+            next = new ServiceProvider<>(t);\n         }\n \n         action.accept(next);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTU3OA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392859578", "bodyText": "Create the Provider instance here, rather than using a setter, so the ServiceProvider can be a final field.", "author": "sbordet", "createdAt": "2020-03-16T08:45:02Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\nindex f5508bee1e..f2deaf001c 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n\n@@ -36,16 +36,16 @@ class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<\n     @Override\n     public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n     {\n-        Provider<T> next = new Provider<>();\n+        ServiceProvider<T> next;\n         try\n         {\n             if (!iterator.hasNext())\n                 return false;\n-            next.setServiceProvider(iterator.next());\n+            next = new ServiceProvider<>(iterator.next());\n         }\n         catch (Throwable t)\n         {\n-            next.setError(t);\n+            next = new ServiceProvider<>(t);\n         }\n \n         action.accept(next);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1OTc1NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392859755", "bodyText": "Create the Provider instance here, rather than using a setter, so the error can be a final field.", "author": "sbordet", "createdAt": "2020-03-16T08:45:23Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\nindex f5508bee1e..f2deaf001c 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n\n@@ -36,16 +36,16 @@ class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<\n     @Override\n     public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n     {\n-        Provider<T> next = new Provider<>();\n+        ServiceProvider<T> next;\n         try\n         {\n             if (!iterator.hasNext())\n                 return false;\n-            next.setServiceProvider(iterator.next());\n+            next = new ServiceProvider<>(iterator.next());\n         }\n         catch (Throwable t)\n         {\n-            next.setError(t);\n+            next = new ServiceProvider<>(t);\n         }\n \n         action.accept(next);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Mjk1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392862954", "bodyText": "Type parameter <T> is not necessary.", "author": "sbordet", "createdAt": "2020-03-16T08:51:39Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #providerMap(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return serviceProviderStream(serviceLoader).flatMap(TypeUtil::providerMap);\n+    }\n+\n+    /**\n+     * Utility to create a stream which provides the same functionality as {@link ServiceLoader#stream()}.\n+     * However this also guards the case in which {@link Iterator#hasNext()} throws. Any exceptions\n+     * from the underlying iterator will be cached until the {@link ServiceLoader.Provider#get()} is called.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return A stream that lazily loads providers for this loader's service\n+     */\n+    public static <T> Stream<ServiceLoader.Provider<T>> serviceProviderStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return StreamSupport.stream(new ServiceLoaderSpliterator<T>(serviceLoader), false);", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex 7cc9b8a81b..bc49c4b643 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -767,7 +767,7 @@ public class TypeUtil\n      * @param provider The service provider to instantiate.\n      * @return a stream of the loaded service providers.\n      */\n-    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n     {\n         try\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MzIxOA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392863218", "bodyText": "This method should be private.", "author": "sbordet", "createdAt": "2020-03-16T08:52:12Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #providerMap(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)\n+    {\n+        return serviceProviderStream(serviceLoader).flatMap(TypeUtil::providerMap);\n+    }\n+\n+    /**\n+     * Utility to create a stream which provides the same functionality as {@link ServiceLoader#stream()}.\n+     * However this also guards the case in which {@link Iterator#hasNext()} throws. Any exceptions\n+     * from the underlying iterator will be cached until the {@link ServiceLoader.Provider#get()} is called.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return A stream that lazily loads providers for this loader's service\n+     */\n+    public static <T> Stream<ServiceLoader.Provider<T>> serviceProviderStream(ServiceLoader<T> serviceLoader)", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDMwNA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393894304", "bodyText": "Should be private.\nBoth mapToService() and serviceProviderStream() should be inlined in serviceStream(), there is no value in having them separate.", "author": "sbordet", "createdAt": "2020-03-17T18:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2MzIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex 7cc9b8a81b..bc49c4b643 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -767,7 +767,7 @@ public class TypeUtil\n      * @param provider The service provider to instantiate.\n      * @return a stream of the loaded service providers.\n      */\n-    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n     {\n         try\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njc5Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392866797", "bodyText": "This should be called mapToService(), or providerToService since it maps a provider to a service. The fact that it wraps the service into a Stream is an implementation detail, and so much so that the method should be private.", "author": "sbordet", "createdAt": "2020-03-16T08:59:05Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNzEyMA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393437120", "bodyText": "The plan was to have mapToService as public because when the JVM implementation for ServiceLoader.stream() is fixed we could change our code to instead use serviceLoader.stream().flatMap(TypeUtil::mapToService); and remove our implementations for serviceStream(ServiceLoader<T>) and serviceProviderStream(ServiceLoader<T>).", "author": "lachlan-roberts", "createdAt": "2020-03-17T04:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg2Njc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex 7cc9b8a81b..bc49c4b643 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -767,7 +767,7 @@ public class TypeUtil\n      * @param provider The service provider to instantiate.\n      * @return a stream of the loaded service providers.\n      */\n-    public static <T> Stream<T> providerMap(ServiceLoader.Provider<T> provider)\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n     {\n         try\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4NTA4MA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r392885080", "bodyText": "This is wrongly named. It is the providedService not the serviceProvider", "author": "gregw", "createdAt": "2020-03-16T09:33:27Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>\n+{\n+    private final Iterator<T> iterator;\n+\n+    public ServiceLoaderSpliterator(ServiceLoader<T> serviceLoader)\n+    {\n+        iterator = serviceLoader.iterator();\n+    }\n+\n+    @Override\n+    public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n+    {\n+        Provider<T> next = new Provider<>();\n+        try\n+        {\n+            if (!iterator.hasNext())\n+                return false;\n+            next.setServiceProvider(iterator.next());\n+        }\n+        catch (Throwable t)\n+        {\n+            next.setError(t);\n+        }\n+\n+        action.accept(next);\n+        return true;\n+    }\n+\n+    @Override\n+    public Spliterator<ServiceLoader.Provider<T>> trySplit()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public long estimateSize()\n+    {\n+        return Long.MAX_VALUE;\n+    }\n+\n+    @Override\n+    public int characteristics()\n+    {\n+        return Spliterator.ORDERED;\n+    }\n+\n+    private static class Provider<T> implements ServiceLoader.Provider<T>\n+    {\n+        private T serviceProvider;", "originalCommit": "7af220dade816ff9865708f89119dbe2bc988153", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\nindex f5508bee1e..f2deaf001c 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java\n\n@@ -36,16 +36,16 @@ class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<\n     @Override\n     public boolean tryAdvance(Consumer<? super ServiceLoader.Provider<T>> action)\n     {\n-        Provider<T> next = new Provider<>();\n+        ServiceProvider<T> next;\n         try\n         {\n             if (!iterator.hasNext())\n                 return false;\n-            next.setServiceProvider(iterator.next());\n+            next = new ServiceProvider<>(iterator.next());\n         }\n         catch (Throwable t)\n         {\n-            next.setError(t);\n+            next = new ServiceProvider<>(t);\n         }\n \n         action.accept(next);\n"}}, {"oid": "30d36ed68c782eb19c0c5f77582dbf1534339cde", "url": "https://github.com/eclipse/jetty.project/commit/30d36ed68c782eb19c0c5f77582dbf1534339cde", "message": "Merge branch jetty-10.0.x into jetty-10.0.x-4340-ServiceLoader\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-17T04:00:30Z", "type": "commit"}, {"oid": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "url": "https://github.com/eclipse/jetty.project/commit/9363a3c39ae6adac229ee50d39de2a630ac55e7d", "message": "Issue #4340 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-17T04:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjQxMw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892413", "bodyText": "Ignoring the failure would let jetty-all with jetty-jaspi work (see #4621)\nPerhaps this should be backported to jetty 9.4.x?", "author": "joakime", "createdAt": "2020-03-17T18:39:11Z", "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        TypeUtil.serviceStream(ServiceLoader.load(Authenticator.Factory.class))\n+            .forEach(__knownAuthenticatorFactories::add);", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MzkzMg==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393893932", "bodyText": "Can we have this be the only public API?\nMake the other 2 APIs be private (or even inlined into this method)", "author": "joakime", "createdAt": "2020-03-17T18:41:52Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n+    {\n+        try\n+        {\n+            return Stream.of(provider.get());\n+        }\n+        catch (ServiceConfigurationError error)\n+        {\n+            LOG.warn(\"Service Provider failed to load\", error);\n+            return Stream.empty();\n+        }\n+    }\n+\n+    /**\n+     * Shortcut method combining {@link #serviceProviderStream(ServiceLoader)} with\n+     * with {@link #mapToService(ServiceLoader.Provider)} using {@link Stream#flatMap(Function)}.\n+     * @param serviceLoader the ServiceLoader instance to use.\n+     * @param <T> the type of the service to load.\n+     * @return a stream of the service provider type which will not throw {@link ServiceConfigurationError}.\n+     */\n+    public static <T> Stream<T> serviceStream(ServiceLoader<T> serviceLoader)", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex bc49c4b643..4dd7f21ef6 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -767,7 +767,7 @@ public class TypeUtil\n      * @param provider The service provider to instantiate.\n      * @return a stream of the loaded service providers.\n      */\n-    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n+    private static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n     {\n         try\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTU4Mw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393891583", "bodyText": "This is a different behavior. Before we were throwing if there was a problem finding an Authenticator.Factory, but now we ignore the exception and if we manage to start we won't work and we don't know why.", "author": "sbordet", "createdAt": "2020-03-17T18:37:50Z", "path": "jetty-security/src/main/java/org/eclipse/jetty/security/SecurityHandler.java", "diffHunk": "@@ -76,11 +77,8 @@\n \n     static\n     {\n-        for (Authenticator.Factory factory : ServiceLoader.load(Authenticator.Factory.class))\n-        {\n-            __knownAuthenticatorFactories.add(factory);\n-        }\n-\n+        TypeUtil.serviceStream(ServiceLoader.load(Authenticator.Factory.class))\n+            .forEach(__knownAuthenticatorFactories::add);", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDkyMw==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r395450923", "bodyText": "Discovering AuthenticatorFactorys with the ServiceLoader is a very recent change so I think this is okay. It will also allow jetty-jaspi to work in jetty-all.", "author": "lachlan-roberts", "createdAt": "2020-03-20T06:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MTU4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjEyOQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892129", "bodyText": "Again behavior change, I think we should keep the iterator here, rather than ignoring the exceptions.", "author": "sbordet", "createdAt": "2020-03-17T18:38:39Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java", "diffHunk": "@@ -42,7 +44,7 @@\n {\n     private static final long serialVersionUID = -7760551052768181572L;\n     private static final Logger LOG = LoggerFactory.getLogger(Credential.class);\n-    private static final ServiceLoader<CredentialProvider> CREDENTIAL_PROVIDER_LOADER = ServiceLoader.load(CredentialProvider.class);\n+    private static final List<CredentialProvider> CREDENTIAL_PROVIDERS = TypeUtil.serviceStream(ServiceLoader.load(CredentialProvider.class)).collect(Collectors.toList());\n ", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDk0Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r395450946", "bodyText": "Here we were previously iterating through the ServiceLoader on every call to getCredential. I don't think we would want to keep that behaviour, but I will change it to throw on an error.", "author": "lachlan-roberts", "createdAt": "2020-03-20T06:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java b/jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java\nindex 966d4e37e0..46aad34040 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/security/Credential.java\n\n@@ -44,7 +45,9 @@ public abstract class Credential implements Serializable\n {\n     private static final long serialVersionUID = -7760551052768181572L;\n     private static final Logger LOG = LoggerFactory.getLogger(Credential.class);\n-    private static final List<CredentialProvider> CREDENTIAL_PROVIDERS = TypeUtil.serviceStream(ServiceLoader.load(CredentialProvider.class)).collect(Collectors.toList());\n+    private static final List<CredentialProvider> CREDENTIAL_PROVIDERS = TypeUtil.serviceProviderStream(ServiceLoader.load(CredentialProvider.class))\n+        .flatMap(p -> Stream.of(p.get()))\n+        .collect(Collectors.toList());\n \n     /**\n      * Check a credential\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjQ1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892454", "bodyText": "Again behavior change, do we really want to ignore exceptions here?", "author": "sbordet", "createdAt": "2020-03-17T18:39:17Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java", "diffHunk": "@@ -74,27 +75,18 @@\n     {\n         if (__known.isEmpty())\n         {\n-            ServiceLoader<Configuration> configs = ServiceLoader.load(Configuration.class);\n-            for (Iterator<Configuration> i = configs.iterator(); i.hasNext(); )\n+            TypeUtil.serviceStream(ServiceLoader.load(Configuration.class)).forEach(configuration ->", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "chunk": "diff --git a/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java\nindex df2936d037..c43eac366b 100644\n--- a/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java\n+++ b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/Configurations.java\n\n@@ -75,17 +75,25 @@ public class Configurations extends AbstractList<Configuration> implements Dumpa\n     {\n         if (__known.isEmpty())\n         {\n-            TypeUtil.serviceStream(ServiceLoader.load(Configuration.class)).forEach(configuration ->\n+            TypeUtil.serviceProviderStream(ServiceLoader.load(Configuration.class)).forEach(provider ->\n             {\n-                if (!configuration.isAvailable())\n+                try\n                 {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Configuration unavailable: \" + configuration);\n-                    __unavailable.add(configuration);\n-                    return;\n+                    Configuration configuration = provider.get();\n+                    if (!configuration.isAvailable())\n+                    {\n+                        if (LOG.isDebugEnabled())\n+                            LOG.debug(\"Configuration unavailable: \" + configuration);\n+                        __unavailable.add(configuration);\n+                        return;\n+                    }\n+                    __known.add(configuration);\n+                    __knownByClassName.add(configuration.getClass().getName());\n+                }\n+                catch (Throwable e)\n+                {\n+                    LOG.warn(\"Unable to get known Configuration\", e);\n                 }\n-                __known.add(configuration);\n-                __knownByClassName.add(configuration.getClass().getName());\n             });\n \n             sort(__known);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5MjY0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393892641", "bodyText": "Again behavior change, is that ok?", "author": "sbordet", "createdAt": "2020-03-17T18:39:37Z", "path": "jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java", "diffHunk": "@@ -96,7 +97,8 @@\n         {\n             ArrayList.class, HashSet.class, Queue.class, List.class, Set.class, Collection.class\n         };\n-    private static final Iterable<ConfigurationProcessorFactory> PROCESSOR_FACTORIES = ServiceLoader.load(ConfigurationProcessorFactory.class);\n+    private static final List<ConfigurationProcessorFactory> PROCESSOR_FACTORIES = TypeUtil.serviceStream(ServiceLoader.load(ConfigurationProcessorFactory.class))\n+        .collect(Collectors.toList());", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "chunk": "diff --git a/jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java b/jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java\nindex 913b78975f..cfe5d6a073 100644\n--- a/jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java\n+++ b/jetty-xml/src/main/java/org/eclipse/jetty/xml/XmlConfiguration.java\n\n@@ -97,7 +98,8 @@ public class XmlConfiguration\n         {\n             ArrayList.class, HashSet.class, Queue.class, List.class, Set.class, Collection.class\n         };\n-    private static final List<ConfigurationProcessorFactory> PROCESSOR_FACTORIES = TypeUtil.serviceStream(ServiceLoader.load(ConfigurationProcessorFactory.class))\n+    private static final List<ConfigurationProcessorFactory> PROCESSOR_FACTORIES = TypeUtil.serviceProviderStream(ServiceLoader.load(ConfigurationProcessorFactory.class))\n+        .flatMap(p -> Stream.of(p.get()))\n         .collect(Collectors.toList());\n     private static final XmlParser PARSER = initParser();\n     public static final Comparator<Executable> EXECUTABLE_COMPARATOR = (e1, e2) ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5Mzg0Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393893846", "bodyText": "Make it private.", "author": "sbordet", "createdAt": "2020-03-17T18:41:42Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java", "diffHunk": "@@ -751,4 +756,52 @@ public T next()\n             }\n         };\n     }\n+\n+    /**\n+     * Used on a {@link ServiceLoader#stream()} with {@link Stream#flatMap(Function)},\n+     * so that in the case a {@link ServiceConfigurationError} is thrown it warns and\n+     * continues iterating through the service loader.\n+     * <br>Usage Example:\n+     * <p>{@code ServiceLoader.load(Service.class).stream().flatMap(TypeUtil::providerMap).collect(Collectors.toList());}</p>\n+     * @param <T> The class of the service type.\n+     * @param provider The service provider to instantiate.\n+     * @return a stream of the loaded service providers.\n+     */\n+    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\nindex bc49c4b643..4dd7f21ef6 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/TypeUtil.java\n\n@@ -767,7 +767,7 @@ public class TypeUtil\n      * @param provider The service provider to instantiate.\n      * @return a stream of the loaded service providers.\n      */\n-    public static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n+    private static <T> Stream<T> mapToService(ServiceLoader.Provider<T> provider)\n     {\n         try\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMjc1NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4602#discussion_r393902755", "bodyText": "I don't think this is what we want.\nProvider is a layer that delays the allocation of the service. Only when get() is called the allocation of the service happens.\nThis implementation allocates the service early and then wraps it into a Provider that does not \"delay\", so it changes the semantic of using a Provider.\nIt would be the same to have a Spliterator<T> at this point.", "author": "sbordet", "createdAt": "2020-03-17T18:57:36Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/ServiceLoaderSpliterator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.util;\n+\n+import java.util.Iterator;\n+import java.util.ServiceConfigurationError;\n+import java.util.ServiceLoader;\n+import java.util.Spliterator;\n+import java.util.function.Consumer;\n+\n+class ServiceLoaderSpliterator<T> implements Spliterator<ServiceLoader.Provider<T>>", "originalCommit": "9363a3c39ae6adac229ee50d39de2a630ac55e7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "url": "https://github.com/eclipse/jetty.project/commit/04cecaaaef2ed4579d516b2b5a4c5a6cc3dccc0f", "message": "Issue #4340 - Change usages to more closely follow previous behaviours\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-03-20T06:02:49Z", "type": "commit"}]}