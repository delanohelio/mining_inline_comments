{"pr_number": 5219, "pr_title": "Fixes #5217 - Review RoundRobinConnectionPool", "pr_createdAt": "2020-09-01T11:11:17Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5219", "timeline": [{"oid": "f1a821f0a9dd66d8b24a01b2cdf342ff6a2a12fc", "url": "https://github.com/eclipse/jetty.project/commit/f1a821f0a9dd66d8b24a01b2cdf342ff6a2a12fc", "message": "Fixes #5217 - Review RoundRobinConnectionPool\n\nIntroduced IndexedConnectionPool and RandomConnectionPool.\nClarified semantic of RoundRobinConnectionPool.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-09-01T11:08:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MjMyNg==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r481152326", "bodyText": "I think the cache should be forced to false, otherwise you risk reaching a steady state where one thread continuously uses the connection at the same index.", "author": "lorban", "createdAt": "2020-09-01T13:50:15Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/IndexedConnectionPool.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//\n+//  ========================================================================\n+//  Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//  ------------------------------------------------------------------------\n+//  All rights reserved. This program and the accompanying materials\n+//  are made available under the terms of the Eclipse Public License v1.0\n+//  and Apache License v2.0 which accompanies this distribution.\n+//\n+//      The Eclipse Public License is available at\n+//      http://www.eclipse.org/legal/epl-v10.html\n+//\n+//      The Apache License v2.0 is available at\n+//      http://www.opensource.org/licenses/apache2.0.php\n+//\n+//  You may elect to redistribute this code under either of these licenses.\n+//  ========================================================================\n+//\n+\n+package org.eclipse.jetty.client;\n+\n+import org.eclipse.jetty.client.api.Connection;\n+import org.eclipse.jetty.util.Callback;\n+import org.eclipse.jetty.util.Pool;\n+import org.eclipse.jetty.util.annotation.ManagedObject;\n+import org.eclipse.jetty.util.log.Log;\n+import org.eclipse.jetty.util.log.Logger;\n+\n+/**\n+ * <p>A {@link MultiplexConnectionPool} that picks connections at a particular\n+ * index between {@code 0} and {@link #getMaxConnectionCount()}.</p>\n+ * <p>The algorithm that decides the index value is decided by subclasses.</p>\n+ * <p>To acquire a connection, this class obtains the index value and attempts\n+ * to activate the pool entry at that index.\n+ * If this activation fails, another attempt to activate an alternative pool\n+ * entry is performed, to avoid stalling connection acquisition if there is\n+ * an available entry at a different index.</p>\n+ */\n+@ManagedObject\n+public abstract class IndexedConnectionPool extends MultiplexConnectionPool\n+{\n+    private static final Logger LOG = Log.getLogger(IndexedConnectionPool.class);\n+\n+    private final Pool<Connection> pool;\n+\n+    public IndexedConnectionPool(HttpDestination destination, int maxConnections, boolean cache, Callback requester, int maxMultiplex)", "originalCommit": "f1a821f0a9dd66d8b24a01b2cdf342ff6a2a12fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE5MjE3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r481192172", "bodyText": "I think there shouldn't be a cache and it should be replaced by round robin: see #5218", "author": "gregw", "createdAt": "2020-09-01T14:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MjMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "d20cea6c94fd62df9b672fe91c522bb5c9d09910", "chunk": "diff --git a/jetty-client/src/main/java/org/eclipse/jetty/client/IndexedConnectionPool.java b/jetty-client/src/main/java/org/eclipse/jetty/client/IndexedConnectionPool.java\nindex caf71b2621..587a793458 100644\n--- a/jetty-client/src/main/java/org/eclipse/jetty/client/IndexedConnectionPool.java\n+++ b/jetty-client/src/main/java/org/eclipse/jetty/client/IndexedConnectionPool.java\n\n@@ -42,9 +42,9 @@ public abstract class IndexedConnectionPool extends MultiplexConnectionPool\n \n     private final Pool<Connection> pool;\n \n-    public IndexedConnectionPool(HttpDestination destination, int maxConnections, boolean cache, Callback requester, int maxMultiplex)\n+    public IndexedConnectionPool(HttpDestination destination, int maxConnections, Callback requester, int maxMultiplex)\n     {\n-        super(destination, maxConnections, cache, requester, maxMultiplex);\n+        super(destination, maxConnections, false, requester, maxMultiplex);\n         pool = destination.getBean(Pool.class);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzOTU0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r481239541", "bodyText": "When the integer goes overflows, you will start going the opposite way around the the pool", "author": "gregw", "createdAt": "2020-09-01T15:40:43Z", "path": "jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java", "diffHunk": "@@ -43,36 +55,16 @@ public RoundRobinConnectionPool(HttpDestination destination, int maxConnections,\n     public RoundRobinConnectionPool(HttpDestination destination, int maxConnections, Callback requester, int maxMultiplex)\n     {\n         super(destination, maxConnections, false, requester, maxMultiplex);\n-        pool = destination.getBean(Pool.class);\n-    }\n-\n-    @Override\n-    protected Connection acquire(boolean create)\n-    {\n         // If there are queued requests and connections get\n         // closed due to idle timeout or overuse, we want to\n         // aggressively try to open new connections to replace\n         // those that were closed to process queued requests.\n-        return super.acquire(true);\n+        setMaximizeConnections(true);\n     }\n \n     @Override\n-    protected Connection activate()\n+    protected int getIndex(int maxConnections)\n     {\n-        Pool<Connection>.Entry entry;\n-        try (Locker.Lock l = lock.lock())\n-        {\n-            int index = Math.abs(offset % pool.getMaxEntries());\n-            entry = pool.acquireAt(index);\n-            if (LOG.isDebugEnabled())\n-                LOG.debug(\"activated at index={} entry={}\", index, entry);\n-            if (entry != null)\n-                ++offset;\n-        }\n-        if (entry == null)\n-            return null;\n-        Connection connection = entry.getPooled();\n-        acquired(connection);\n-        return connection;\n+        return Math.abs(offset.getAndIncrement() % maxConnections);", "originalCommit": "f1a821f0a9dd66d8b24a01b2cdf342ff6a2a12fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0NjQxNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r481246415", "bodyText": "could always use the overflow throwing behavior of Math.addExact(int, int) to trap that.", "author": "joakime", "createdAt": "2020-09-01T15:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzOTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNjYxMw==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r481936613", "bodyText": "Is that a problem?", "author": "lorban", "createdAt": "2020-09-02T09:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzOTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0MDY3Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r481940676", "bodyText": "It might not be a problem, and unlikely to happen anyway.... but easily fixed with:\n            return index.getAndUpdate(c -> Math.max(0, c + 1)) % maxConnections;", "author": "gregw", "createdAt": "2020-09-02T09:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzOTU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAzMjM0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5219#discussion_r482032348", "bodyText": "And I have an even better solution in the latest code.", "author": "sbordet", "createdAt": "2020-09-02T12:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzOTU0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d20cea6c94fd62df9b672fe91c522bb5c9d09910", "chunk": "diff --git a/jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java b/jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java\nindex 0199c2a201..d9cb2c590e 100644\n--- a/jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java\n+++ b/jetty-client/src/main/java/org/eclipse/jetty/client/RoundRobinConnectionPool.java\n\n@@ -54,7 +59,7 @@ public class RoundRobinConnectionPool extends IndexedConnectionPool\n \n     public RoundRobinConnectionPool(HttpDestination destination, int maxConnections, Callback requester, int maxMultiplex)\n     {\n-        super(destination, maxConnections, false, requester, maxMultiplex);\n+        super(destination, maxConnections, requester, maxMultiplex);\n         // If there are queued requests and connections get\n         // closed due to idle timeout or overuse, we want to\n         // aggressively try to open new connections to replace\n"}}, {"oid": "d20cea6c94fd62df9b672fe91c522bb5c9d09910", "url": "https://github.com/eclipse/jetty.project/commit/d20cea6c94fd62df9b672fe91c522bb5c9d09910", "message": "Fixes #5217 - Review RoundRobinConnectionPool\n\nUpdates after review.\nFixed broken tests.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-09-01T17:14:01Z", "type": "commit"}]}