{"pr_number": 4587, "pr_title": "Servlet 4 metadata-complete=true should skip introspection of annotations", "pr_createdAt": "2020-02-18T13:53:01Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4587", "timeline": [{"oid": "ac4cfb0baf8f3ea69203c2bd390e3110fa79e530", "url": "https://github.com/eclipse/jetty.project/commit/ac4cfb0baf8f3ea69203c2bd390e3110fa79e530", "message": "Issue #4506 Do not introspect annotations on metadata-complete fragments\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-01-31T11:36:23Z", "type": "commit"}, {"oid": "5f538d15d2e05ba3b86d8e0e508a0441c8635d82", "url": "https://github.com/eclipse/jetty.project/commit/5f538d15d2e05ba3b86d8e0e508a0441c8635d82", "message": "Issue #4506 WIP\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-02-05T20:59:20Z", "type": "commit"}, {"oid": "5165591163936e5b2e7b87d0d42aae3a0099c41f", "url": "https://github.com/eclipse/jetty.project/commit/5165591163936e5b2e7b87d0d42aae3a0099c41f", "message": "Issue #4506 WIP\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-02-06T16:15:55Z", "type": "commit"}, {"oid": "4bdff3b0668db5d027c78e68579929480903b63d", "url": "https://github.com/eclipse/jetty.project/commit/4bdff3b0668db5d027c78e68579929480903b63d", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4506-metadata-complete", "committedDate": "2020-02-06T16:17:04Z", "type": "commit"}, {"oid": "f2a2c274edbde9cb67248951e89f5e99d0b3838f", "url": "https://github.com/eclipse/jetty.project/commit/f2a2c274edbde9cb67248951e89f5e99d0b3838f", "message": "Issue #4506 WIP", "committedDate": "2020-02-06T17:54:56Z", "type": "commit"}, {"oid": "2012ac7a4ed931ccfa6e90d0ada5cedb6c45852d", "url": "https://github.com/eclipse/jetty.project/commit/2012ac7a4ed931ccfa6e90d0ada5cedb6c45852d", "message": "Issue #4506 fix test\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-02-17T15:00:29Z", "type": "commit"}, {"oid": "e2f14c3f01d710235b989932b863e4e4512a13bd", "url": "https://github.com/eclipse/jetty.project/commit/e2f14c3f01d710235b989932b863e4e4512a13bd", "message": "Issue #4506 fix checkstyle\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-02-17T15:04:31Z", "type": "commit"}, {"oid": "daa77e9c4da92197cf9084ea305dd71c10819baf", "url": "https://github.com/eclipse/jetty.project/commit/daa77e9c4da92197cf9084ea305dd71c10819baf", "message": "Issue #4506 Fix javadoc\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-02-18T11:43:21Z", "type": "commit"}, {"oid": "510b99993aa962be5728bd68eadb5dbad0a3d048", "url": "https://github.com/eclipse/jetty.project/commit/510b99993aa962be5728bd68eadb5dbad0a3d048", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4506-metadata-complete", "committedDate": "2020-02-18T11:59:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NTMxNA==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383265314", "bodyText": "Just a nit, holder = (BasedHolder)metaInfo is better here.", "author": "sbordet", "createdAt": "2020-02-24T13:31:28Z", "path": "jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java", "diffHunk": "@@ -75,20 +89,116 @@ public void handle(Class<?> clazz)\n                 c = c.getSuperclass();\n             }\n         }\n+        \n+        public WebAppContext getContext()\n+        {\n+            return _context;\n+        }\n+    }\n+    \n+    public AnnotationIntrospector(WebAppContext context)\n+    {\n+        _context = Objects.requireNonNull(context);\n     }\n \n     public void registerHandler(IntrospectableAnnotationHandler handler)\n     {\n         _handlers.add(handler);\n     }\n+    \n+    /**\n+     * Test if an object should be introspected for some specific types of annotations \n+     * like PostConstruct/PreDestroy/MultiPart etc etc.\n+     * \n+     * According to servlet 4.0, these types of annotations should only be evaluated iff any\n+     * of the following are true:\n+     * <ol>\n+     * <li>the object was created by the javax.servlet.ServletContext.createServlet/Filter/Listener method</li>\n+     * <li>the object comes either from a discovered annotation (WebServlet/Filter/Listener) or a declaration\n+     * in a descriptor AND web.xml is NOT metadata-complete AND any web-fragment.xml associated with the location of\n+     * the class is NOT metadata-complete</li>\n+     * </ol>\n+     * \n+     * We also support evaluations of these types of annotations for objects that were created directly\n+     * by the jetty api.\n+     *  \n+     * @param o the object to check for its ability to be introspected for annotations\n+     * @param metaInfo meta information about the object to be introspected\n+     * @return true if it can be introspected according to servlet 4.0 rules\n+     */\n+    public boolean isIntrospectable(Object o, Object metaInfo)\n+    {\n+        if (o == null)\n+            return false; //nothing to introspect\n+        \n+        if (metaInfo == null)\n+            return true;  //no information about the object to introspect, assume introspectable\n+        \n+        @SuppressWarnings(\"rawtypes\")\n+        BaseHolder holder = null;\n+        \n+        try\n+        {\n+            holder = BaseHolder.class.cast(metaInfo);", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8420b24333e7635048061e6bed230babfa94a1de", "chunk": "diff --git a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\nindex 701ff8b66f..9837009efd 100644\n--- a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n+++ b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n\n@@ -139,7 +139,7 @@ public class AnnotationIntrospector\n         \n         try\n         {\n-            holder = BaseHolder.class.cast(metaInfo);\n+            holder = (BaseHolder)metaInfo;\n         }\n         catch (ClassCastException e)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NjE4Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383266187", "bodyText": "Add a message such as Log.warn(\"Could not get fragment descriptor {}\", descriptorLocation, e).", "author": "sbordet", "createdAt": "2020-02-24T13:33:17Z", "path": "jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java", "diffHunk": "@@ -75,20 +89,116 @@ public void handle(Class<?> clazz)\n                 c = c.getSuperclass();\n             }\n         }\n+        \n+        public WebAppContext getContext()\n+        {\n+            return _context;\n+        }\n+    }\n+    \n+    public AnnotationIntrospector(WebAppContext context)\n+    {\n+        _context = Objects.requireNonNull(context);\n     }\n \n     public void registerHandler(IntrospectableAnnotationHandler handler)\n     {\n         _handlers.add(handler);\n     }\n+    \n+    /**\n+     * Test if an object should be introspected for some specific types of annotations \n+     * like PostConstruct/PreDestroy/MultiPart etc etc.\n+     * \n+     * According to servlet 4.0, these types of annotations should only be evaluated iff any\n+     * of the following are true:\n+     * <ol>\n+     * <li>the object was created by the javax.servlet.ServletContext.createServlet/Filter/Listener method</li>\n+     * <li>the object comes either from a discovered annotation (WebServlet/Filter/Listener) or a declaration\n+     * in a descriptor AND web.xml is NOT metadata-complete AND any web-fragment.xml associated with the location of\n+     * the class is NOT metadata-complete</li>\n+     * </ol>\n+     * \n+     * We also support evaluations of these types of annotations for objects that were created directly\n+     * by the jetty api.\n+     *  \n+     * @param o the object to check for its ability to be introspected for annotations\n+     * @param metaInfo meta information about the object to be introspected\n+     * @return true if it can be introspected according to servlet 4.0 rules\n+     */\n+    public boolean isIntrospectable(Object o, Object metaInfo)\n+    {\n+        if (o == null)\n+            return false; //nothing to introspect\n+        \n+        if (metaInfo == null)\n+            return true;  //no information about the object to introspect, assume introspectable\n+        \n+        @SuppressWarnings(\"rawtypes\")\n+        BaseHolder holder = null;\n+        \n+        try\n+        {\n+            holder = BaseHolder.class.cast(metaInfo);\n+        }\n+        catch (ClassCastException e)\n+        {\n+            LOG.warn(e);\n+            return true; //not the type of information we were expecting, assume introspectable\n+        }\n+        \n+        Origin origin = (holder.getSource() == null ? null : holder.getSource().getOrigin());\n+        if (origin == null)\n+            return true;//assume introspectable\n+        \n+        switch (origin)\n+        {\n+            case EMBEDDED:\n+            case JAVAX_API:\n+            {\n+                return true; //objects created from the jetty or servlet api are always introspectable\n+            }\n+            case ANNOTATION:\n+            {\n+                return true; //we will have discovered annotations only if metadata-complete==false\n+            }\n+            default:\n+            {\n+                //must be from a descriptor. Only introspect if the descriptor with which it was associated\n+                //is not metadata-complete\n+                if (_context.getMetaData().isMetaDataComplete())\n+                    return false;\n+                \n+                String descriptorLocation = holder.getSource().getResource();\n+                if (descriptorLocation == null)\n+                    return true; //no descriptor, can't be metadata-complete\n+                try\n+                {\n+                    return !WebDescriptor.isMetaDataComplete(_context.getMetaData().getFragmentDescriptor(Resource.newResource(descriptorLocation)));\n+                }\n+                catch (IOException e)\n+                {\n+                    LOG.warn(e);", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgzMzM0Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383833346", "bodyText": "Eh, good luck with that formulation. Need to have 2 LOG.warns, one with the message, one with the throwable - the last arg isn't interpreted as a Throwable.", "author": "janbartel", "createdAt": "2020-02-25T11:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NjE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgzODkyNg==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383838926", "bodyText": "@janbartel all logger frameworks support that, and ours too with a recent PR.", "author": "sbordet", "createdAt": "2020-02-25T12:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NjE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8420b24333e7635048061e6bed230babfa94a1de", "chunk": "diff --git a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\nindex 701ff8b66f..9837009efd 100644\n--- a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n+++ b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n\n@@ -139,7 +139,7 @@ public class AnnotationIntrospector\n         \n         try\n         {\n-            holder = BaseHolder.class.cast(metaInfo);\n+            holder = (BaseHolder)metaInfo;\n         }\n         catch (ClassCastException e)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2Njk4Mw==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383266983", "bodyText": "Add space after semicolon.", "author": "sbordet", "createdAt": "2020-02-24T13:34:58Z", "path": "jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java", "diffHunk": "@@ -75,20 +89,116 @@ public void handle(Class<?> clazz)\n                 c = c.getSuperclass();\n             }\n         }\n+        \n+        public WebAppContext getContext()\n+        {\n+            return _context;\n+        }\n+    }\n+    \n+    public AnnotationIntrospector(WebAppContext context)\n+    {\n+        _context = Objects.requireNonNull(context);\n     }\n \n     public void registerHandler(IntrospectableAnnotationHandler handler)\n     {\n         _handlers.add(handler);\n     }\n+    \n+    /**\n+     * Test if an object should be introspected for some specific types of annotations \n+     * like PostConstruct/PreDestroy/MultiPart etc etc.\n+     * \n+     * According to servlet 4.0, these types of annotations should only be evaluated iff any\n+     * of the following are true:\n+     * <ol>\n+     * <li>the object was created by the javax.servlet.ServletContext.createServlet/Filter/Listener method</li>\n+     * <li>the object comes either from a discovered annotation (WebServlet/Filter/Listener) or a declaration\n+     * in a descriptor AND web.xml is NOT metadata-complete AND any web-fragment.xml associated with the location of\n+     * the class is NOT metadata-complete</li>\n+     * </ol>\n+     * \n+     * We also support evaluations of these types of annotations for objects that were created directly\n+     * by the jetty api.\n+     *  \n+     * @param o the object to check for its ability to be introspected for annotations\n+     * @param metaInfo meta information about the object to be introspected\n+     * @return true if it can be introspected according to servlet 4.0 rules\n+     */\n+    public boolean isIntrospectable(Object o, Object metaInfo)\n+    {\n+        if (o == null)\n+            return false; //nothing to introspect\n+        \n+        if (metaInfo == null)\n+            return true;  //no information about the object to introspect, assume introspectable\n+        \n+        @SuppressWarnings(\"rawtypes\")\n+        BaseHolder holder = null;\n+        \n+        try\n+        {\n+            holder = BaseHolder.class.cast(metaInfo);\n+        }\n+        catch (ClassCastException e)\n+        {\n+            LOG.warn(e);\n+            return true; //not the type of information we were expecting, assume introspectable\n+        }\n+        \n+        Origin origin = (holder.getSource() == null ? null : holder.getSource().getOrigin());\n+        if (origin == null)\n+            return true;//assume introspectable", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8420b24333e7635048061e6bed230babfa94a1de", "chunk": "diff --git a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\nindex 701ff8b66f..9837009efd 100644\n--- a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n+++ b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n\n@@ -139,7 +139,7 @@ public class AnnotationIntrospector\n         \n         try\n         {\n-            holder = BaseHolder.class.cast(metaInfo);\n+            holder = (BaseHolder)metaInfo;\n         }\n         catch (ClassCastException e)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MDY4NA==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383270684", "bodyText": "This catch is duplicated in ServletHolder.newInstance(). Can the diplucation be removed?\nAlso, this method has a quite long list of exceptions being thrown, but they are not really handled: all places that invoke this method just catch Exception and bail out. So perhaps just throws Exception?", "author": "sbordet", "createdAt": "2020-02-24T13:42:39Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java", "diffHunk": "@@ -177,6 +181,57 @@ protected synchronized T getInstance()\n         return _instance;\n     }\n \n+    protected synchronized T createInstance() throws ServletException, IllegalAccessException, InstantiationException,\n+        NoSuchMethodException, InvocationTargetException\n+    {\n+        try\n+        {\n+            ServletContext ctx = getServletContext();\n+            if (ctx == null)\n+                return getHeldClass().getDeclaredConstructor().newInstance();\n+\n+            if (ServletContextHandler.Context.class.isAssignableFrom(ctx.getClass()))\n+                return ((ServletContextHandler.Context)ctx).createInstance(this);\n+            \n+            return null;\n+        }\n+        catch (ServletException ex)\n+        {\n+            Throwable cause = ex.getRootCause();\n+            if (cause instanceof InstantiationException)\n+                throw (InstantiationException)cause;\n+            if (cause instanceof IllegalAccessException)\n+                throw (IllegalAccessException)cause;\n+            if (cause instanceof NoSuchMethodException)\n+                throw (NoSuchMethodException)cause;\n+            if (cause instanceof InvocationTargetException)\n+                throw (InvocationTargetException)cause;\n+            throw ex;\n+        }", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8420b24333e7635048061e6bed230babfa94a1de", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java\nindex 0cff87aa1a..8598560168 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/BaseHolder.java\n\n@@ -181,33 +179,16 @@ public abstract class BaseHolder<T> extends AbstractLifeCycle implements Dumpabl\n         return _instance;\n     }\n \n-    protected synchronized T createInstance() throws ServletException, IllegalAccessException, InstantiationException,\n-        NoSuchMethodException, InvocationTargetException\n+    protected synchronized T createInstance() throws Exception\n     {\n-        try\n-        {\n-            ServletContext ctx = getServletContext();\n-            if (ctx == null)\n-                return getHeldClass().getDeclaredConstructor().newInstance();\n-\n-            if (ServletContextHandler.Context.class.isAssignableFrom(ctx.getClass()))\n-                return ((ServletContextHandler.Context)ctx).createInstance(this);\n-            \n-            return null;\n-        }\n-        catch (ServletException ex)\n-        {\n-            Throwable cause = ex.getRootCause();\n-            if (cause instanceof InstantiationException)\n-                throw (InstantiationException)cause;\n-            if (cause instanceof IllegalAccessException)\n-                throw (IllegalAccessException)cause;\n-            if (cause instanceof NoSuchMethodException)\n-                throw (NoSuchMethodException)cause;\n-            if (cause instanceof InvocationTargetException)\n-                throw (InvocationTargetException)cause;\n-            throw ex;\n-        }\n+        ServletContext ctx = getServletContext();\n+        if (ctx == null)\n+            return getHeldClass().getDeclaredConstructor().newInstance();\n+\n+        if (ServletContextHandler.Context.class.isAssignableFrom(ctx.getClass()))\n+            return ((ServletContextHandler.Context)ctx).createInstance(this);\n+\n+        return null;\n     }\n \n     public ServletContext getServletContext()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MjQxNw==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383272417", "bodyText": "_handlers can never be null.", "author": "sbordet", "createdAt": "2020-02-24T13:45:59Z", "path": "jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java", "diffHunk": "@@ -75,20 +89,116 @@ public void handle(Class<?> clazz)\n                 c = c.getSuperclass();\n             }\n         }\n+        \n+        public WebAppContext getContext()\n+        {\n+            return _context;\n+        }\n+    }\n+    \n+    public AnnotationIntrospector(WebAppContext context)\n+    {\n+        _context = Objects.requireNonNull(context);\n     }\n \n     public void registerHandler(IntrospectableAnnotationHandler handler)\n     {\n         _handlers.add(handler);\n     }\n+    \n+    /**\n+     * Test if an object should be introspected for some specific types of annotations \n+     * like PostConstruct/PreDestroy/MultiPart etc etc.\n+     * \n+     * According to servlet 4.0, these types of annotations should only be evaluated iff any\n+     * of the following are true:\n+     * <ol>\n+     * <li>the object was created by the javax.servlet.ServletContext.createServlet/Filter/Listener method</li>\n+     * <li>the object comes either from a discovered annotation (WebServlet/Filter/Listener) or a declaration\n+     * in a descriptor AND web.xml is NOT metadata-complete AND any web-fragment.xml associated with the location of\n+     * the class is NOT metadata-complete</li>\n+     * </ol>\n+     * \n+     * We also support evaluations of these types of annotations for objects that were created directly\n+     * by the jetty api.\n+     *  \n+     * @param o the object to check for its ability to be introspected for annotations\n+     * @param metaInfo meta information about the object to be introspected\n+     * @return true if it can be introspected according to servlet 4.0 rules\n+     */\n+    public boolean isIntrospectable(Object o, Object metaInfo)\n+    {\n+        if (o == null)\n+            return false; //nothing to introspect\n+        \n+        if (metaInfo == null)\n+            return true;  //no information about the object to introspect, assume introspectable\n+        \n+        @SuppressWarnings(\"rawtypes\")\n+        BaseHolder holder = null;\n+        \n+        try\n+        {\n+            holder = BaseHolder.class.cast(metaInfo);\n+        }\n+        catch (ClassCastException e)\n+        {\n+            LOG.warn(e);\n+            return true; //not the type of information we were expecting, assume introspectable\n+        }\n+        \n+        Origin origin = (holder.getSource() == null ? null : holder.getSource().getOrigin());\n+        if (origin == null)\n+            return true;//assume introspectable\n+        \n+        switch (origin)\n+        {\n+            case EMBEDDED:\n+            case JAVAX_API:\n+            {\n+                return true; //objects created from the jetty or servlet api are always introspectable\n+            }\n+            case ANNOTATION:\n+            {\n+                return true; //we will have discovered annotations only if metadata-complete==false\n+            }\n+            default:\n+            {\n+                //must be from a descriptor. Only introspect if the descriptor with which it was associated\n+                //is not metadata-complete\n+                if (_context.getMetaData().isMetaDataComplete())\n+                    return false;\n+                \n+                String descriptorLocation = holder.getSource().getResource();\n+                if (descriptorLocation == null)\n+                    return true; //no descriptor, can't be metadata-complete\n+                try\n+                {\n+                    return !WebDescriptor.isMetaDataComplete(_context.getMetaData().getFragmentDescriptor(Resource.newResource(descriptorLocation)));\n+                }\n+                catch (IOException e)\n+                {\n+                    LOG.warn(e);\n+                    return false; //something wrong with the descriptor\n+                }\n+            }\n+        }\n+    }\n \n-    public void introspect(Class<?> clazz)\n+    /**\n+     * @param o\n+     * @param metaInfo\n+     */\n+    public void introspect(Object o, Object metaInfo)\n     {\n         if (_handlers == null)", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8420b24333e7635048061e6bed230babfa94a1de", "chunk": "diff --git a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\nindex 701ff8b66f..9837009efd 100644\n--- a/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n+++ b/jetty-annotations/src/main/java/org/eclipse/jetty/annotations/AnnotationIntrospector.java\n\n@@ -139,7 +139,7 @@ public class AnnotationIntrospector\n         \n         try\n         {\n-            holder = BaseHolder.class.cast(metaInfo);\n+            holder = (BaseHolder)metaInfo;\n         }\n         catch (ClassCastException e)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3NTk5OA==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383275998", "bodyText": "Use a normal case to PathResource and simplify to: return path.startsWith....\nAlso, the method never throws MalformedURLException.", "author": "sbordet", "createdAt": "2020-02-24T13:52:55Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/PathResource.java", "diffHunk": "@@ -462,8 +462,18 @@ public int hashCode()\n     @Override\n     public boolean isContainedIn(Resource r) throws MalformedURLException\n     {\n-        // not applicable for FileSystem / path\n-        return false;\n+        try\n+        {\n+            PathResource pr = PathResource.class.cast(r);\n+            if (path.startsWith(pr.getPath()))\n+                return true;\n+\n+            return false;", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8420b24333e7635048061e6bed230babfa94a1de", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/resource/PathResource.java b/jetty-util/src/main/java/org/eclipse/jetty/util/resource/PathResource.java\nindex d608e9b455..2f6a40891a 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/resource/PathResource.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/resource/PathResource.java\n\n@@ -460,15 +460,12 @@ public class PathResource extends Resource\n     }\n \n     @Override\n-    public boolean isContainedIn(Resource r) throws MalformedURLException\n+    public boolean isContainedIn(Resource r)\n     {\n         try\n         {\n             PathResource pr = PathResource.class.cast(r);\n-            if (path.startsWith(pr.getPath()))\n-                return true;\n-\n-            return false;\n+            return (path.startsWith(pr.getPath()));\n         }\n         catch (ClassCastException e)\n         {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MDA2MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383280061", "bodyText": "The distributable element has been removed in Servlet 4.0?\nEven though it's been removed, I would leave the \"visit\" and eventually write a comment in visitDistributable why we do nothing.\nRemoving it from here seems like a mistake or an overlook (\"hey, they forgot to visit distributable\").", "author": "sbordet", "createdAt": "2020-02-24T14:00:51Z", "path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/StandardDescriptorProcessor.java", "diffHunk": "@@ -97,7 +96,6 @@ public StandardDescriptorProcessor()\n             registerVisitor(\"filter\", this.getClass().getMethod(\"visitFilter\", __signature));\n             registerVisitor(\"filter-mapping\", this.getClass().getMethod(\"visitFilterMapping\", __signature));\n             registerVisitor(\"listener\", this.getClass().getMethod(\"visitListener\", __signature));\n-            registerVisitor(\"distributable\", this.getClass().getMethod(\"visitDistributable\", __signature));", "originalCommit": "510b99993aa962be5728bd68eadb5dbad0a3d048", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg0MzMxMg==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383843312", "bodyText": "No, it hasn't been removed. The handling of it has just been refactored to WebDescriptor, where it should have been from the beginning, along with other \"metadata\" about the descriptor (eg is metadata-complete, version etc), not artifacts like servlets/filters etc that is handled by StandardDescriptorProcessor.", "author": "janbartel", "createdAt": "2020-02-25T12:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNjQ4MA==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383926480", "bodyText": "@janbartel yes I saw that handling of distributable has been moved to WebDescriptor.\nHowever, I would still keep the registerVisitor(\"distributable\", ...) here because it's the one place where I can verify that all elements of a descriptor are actually visited - it's just for completeness so that when someone else comes here it won't say \"oh, we don't visit distributable\" and has to reverse engineer where is it actually handled. The empty visitDistributable() method can have a comment that says where it is handled.", "author": "sbordet", "createdAt": "2020-02-25T14:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzMTkzMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383931931", "bodyText": "@janbartel in other words, why is distributable different from the others so that it must be handled differently?\nThe original code of calling ((WebDescriptor)descriptor).setDistributable(true) made sense to me.", "author": "sbordet", "createdAt": "2020-02-25T14:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0NjE1Mw==", "url": "https://github.com/eclipse/jetty.project/pull/4587#discussion_r383946153", "bodyText": "\"Distributable\" is just like the handling of the \"version\" of the webapp, or the \"metadata-complete\" attribute of the webapp: they are meta-data about the descriptor/webapp.  We've never had a visitWebApp method on StandardDescriptorProcessor for example, so it's not and never has been the case that StandardDescriptorProcessor has visited everything in the webapp - some things you have to visit first, before you know what you can visit!\nMoreover, I don't find it correct that the StandardDescriptorProcessor calls setters on the Descriptor:  the Descriptor should be set up with information that is read by the StandardDescriptorProcessor and not vice versa.", "author": "janbartel", "createdAt": "2020-02-25T15:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI4MDA2MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8420b24333e7635048061e6bed230babfa94a1de", "url": "https://github.com/eclipse/jetty.project/commit/8420b24333e7635048061e6bed230babfa94a1de", "message": "Issue #4506 Changes post review.\n\nSigned-off-by: Jan Bartel <janb@webtide.com>", "committedDate": "2020-02-25T14:40:02Z", "type": "commit"}]}