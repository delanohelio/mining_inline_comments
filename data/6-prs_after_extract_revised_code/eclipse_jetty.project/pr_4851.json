{"pr_number": 4851, "pr_title": "Issue #4741 - fix issues with HttpServletMapping", "pr_createdAt": "2020-05-07T01:52:37Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4851", "timeline": [{"oid": "f16299d86ca0df6d3def1daf0da8d69586b85002", "url": "https://github.com/eclipse/jetty.project/commit/f16299d86ca0df6d3def1daf0da8d69586b85002", "message": "Issue #4741 - fixes to jetty implementation of HttpServletMapping\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-06T01:41:10Z", "type": "commit"}, {"oid": "c257e2445fe39da60fc0b45c702023cc4c644fc4", "url": "https://github.com/eclipse/jetty.project/commit/c257e2445fe39da60fc0b45c702023cc4c644fc4", "message": "Issue #4741 - don't lazily generate HttpServletMapping to preserve servletName\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-06T08:28:24Z", "type": "commit"}, {"oid": "a8578233ed6ea9aab13c7881c35567146c38d744", "url": "https://github.com/eclipse/jetty.project/commit/a8578233ed6ea9aab13c7881c35567146c38d744", "message": "Issue #4741 - tests should expect no leading / for matchValue\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-06T21:08:50Z", "type": "commit"}, {"oid": "a15446de11f8ab3b43708b6dce30346a4bf6954d", "url": "https://github.com/eclipse/jetty.project/commit/a15446de11f8ab3b43708b6dce30346a4bf6954d", "message": "resolving TODOs from review\n\n- removed pathSpec from Request\n- getServletMapping moved to ServletHandler\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-06T23:17:41Z", "type": "commit"}, {"oid": "4c9ff9993256c3cdb3ce333944d6e56897c583d1", "url": "https://github.com/eclipse/jetty.project/commit/4c9ff9993256c3cdb3ce333944d6e56897c583d1", "message": "Issue #4741 - only create HttpServletMapping for exact matches once\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-07T00:42:02Z", "type": "commit"}, {"oid": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "url": "https://github.com/eclipse/jetty.project/commit/08e713d8498d1eebad3a88eac5b71bae1f6343cc", "message": "use wrapped attributes for async dispatch\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-07T06:49:13Z", "type": "commit"}, {"oid": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "url": "https://github.com/eclipse/jetty.project/commit/08e713d8498d1eebad3a88eac5b71bae1f6343cc", "message": "use wrapped attributes for async dispatch\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-07T06:49:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNzk2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r421417966", "bodyText": "Do we need to get these attributes now?  could we just get them from the wrapped attributes if they are got?", "author": "gregw", "createdAt": "2020-05-07T10:58:42Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java", "diffHunk": "@@ -185,4 +183,117 @@ public void addThrowable(Throwable e)\n         else if (e != _throwable)\n             _throwable.addSuppressed(e);\n     }\n+\n+    private static class AsyncAttributes extends Attributes.Wrapper\n+    {\n+        private String _requestURI;\n+        private String _contextPath;\n+        private String _servletPath;\n+        private String _pathInfo;\n+        private String _query;\n+        private HttpServletMapping _mapping;\n+\n+        AsyncAttributes(Attributes attributes)\n+        {\n+            super(attributes);\n+        }\n+\n+        AsyncAttributes(Request request, Attributes attributes)\n+        {\n+            super(attributes);\n+            _requestURI = request.getRequestURI();\n+            _contextPath = request.getContextPath();\n+            _servletPath = request.getServletPath();\n+            _pathInfo = request.getPathInfo();\n+            _query = request.getQueryString();\n+            _mapping = request.getHttpServletMapping();\n+        }\n+\n+        static AsyncAttributes fromForwardedAttributes(Attributes attributes)\n+        {\n+            AsyncAttributes asyncAttributes = new AsyncAttributes(attributes);\n+            asyncAttributes._requestURI = (String)attributes.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);", "originalCommit": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739df312410751f4fb807445366058b542248388", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java\nindex bff14065d8..7c9d225f5e 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java\n\n@@ -183,117 +187,4 @@ public class AsyncContextEvent extends AsyncEvent implements Runnable\n         else if (e != _throwable)\n             _throwable.addSuppressed(e);\n     }\n-\n-    private static class AsyncAttributes extends Attributes.Wrapper\n-    {\n-        private String _requestURI;\n-        private String _contextPath;\n-        private String _servletPath;\n-        private String _pathInfo;\n-        private String _query;\n-        private HttpServletMapping _mapping;\n-\n-        AsyncAttributes(Attributes attributes)\n-        {\n-            super(attributes);\n-        }\n-\n-        AsyncAttributes(Request request, Attributes attributes)\n-        {\n-            super(attributes);\n-            _requestURI = request.getRequestURI();\n-            _contextPath = request.getContextPath();\n-            _servletPath = request.getServletPath();\n-            _pathInfo = request.getPathInfo();\n-            _query = request.getQueryString();\n-            _mapping = request.getHttpServletMapping();\n-        }\n-\n-        static AsyncAttributes fromForwardedAttributes(Attributes attributes)\n-        {\n-            AsyncAttributes asyncAttributes = new AsyncAttributes(attributes);\n-            asyncAttributes._requestURI = (String)attributes.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);\n-            asyncAttributes._contextPath = (String)attributes.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH);\n-            asyncAttributes._servletPath = (String)attributes.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);\n-            asyncAttributes._pathInfo = (String)attributes.getAttribute(RequestDispatcher.FORWARD_PATH_INFO);\n-            asyncAttributes._query = (String)attributes.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING);\n-            asyncAttributes._mapping = (HttpServletMapping)attributes.getAttribute(RequestDispatcher.FORWARD_MAPPING);\n-            return asyncAttributes;\n-        }\n-\n-        @Override\n-        public Object getAttribute(String key)\n-        {\n-            if (!key.startsWith(__ASYNC_PREFIX))\n-                return super.getAttribute(key);\n-\n-            switch (key)\n-            {\n-                case AsyncContext.ASYNC_REQUEST_URI:\n-                    return _requestURI;\n-                case AsyncContext.ASYNC_CONTEXT_PATH:\n-                    return _contextPath;\n-                case AsyncContext.ASYNC_SERVLET_PATH:\n-                    return _servletPath;\n-                case AsyncContext.ASYNC_PATH_INFO:\n-                    return _pathInfo;\n-                case AsyncContext.ASYNC_QUERY_STRING:\n-                    return _query;\n-                case AsyncContext.ASYNC_MAPPING:\n-                    return _mapping;\n-                default:\n-                    return super.getAttribute(key);\n-            }\n-        }\n-\n-        @Override\n-        public Set<String> getAttributeNameSet()\n-        {\n-            HashSet<String> set = new HashSet<>();\n-            for (String name : _attributes.getAttributeNameSet())\n-            {\n-                if (!name.startsWith(__ASYNC_PREFIX))\n-                    set.add(name);\n-            }\n-\n-            set.add(AsyncContext.ASYNC_REQUEST_URI);\n-            set.add(AsyncContext.ASYNC_CONTEXT_PATH);\n-            set.add(AsyncContext.ASYNC_SERVLET_PATH);\n-            set.add(AsyncContext.ASYNC_PATH_INFO);\n-            set.add(AsyncContext.ASYNC_QUERY_STRING);\n-            set.add(AsyncContext.ASYNC_MAPPING);\n-            return set;\n-        }\n-\n-        @Override\n-        public void setAttribute(String key, Object value)\n-        {\n-            if (!key.startsWith(__ASYNC_PREFIX))\n-                super.setAttribute(key, value);\n-\n-            switch (key)\n-            {\n-                case AsyncContext.ASYNC_REQUEST_URI:\n-                    _requestURI = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_CONTEXT_PATH:\n-                    _contextPath = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_SERVLET_PATH:\n-                    _servletPath = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_PATH_INFO:\n-                    _pathInfo = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_QUERY_STRING:\n-                    _query = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_MAPPING:\n-                    _mapping = (HttpServletMapping)value;\n-                    break;\n-                default:\n-                    super.setAttribute(key, value);\n-            }\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODY0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r421418641", "bodyText": "I'm not entirely sure we need to support setting these attributes?   I think we can let a set of them be a noop.", "author": "gregw", "createdAt": "2020-05-07T10:59:57Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java", "diffHunk": "@@ -185,4 +183,117 @@ public void addThrowable(Throwable e)\n         else if (e != _throwable)\n             _throwable.addSuppressed(e);\n     }\n+\n+    private static class AsyncAttributes extends Attributes.Wrapper\n+    {\n+        private String _requestURI;\n+        private String _contextPath;\n+        private String _servletPath;\n+        private String _pathInfo;\n+        private String _query;\n+        private HttpServletMapping _mapping;\n+\n+        AsyncAttributes(Attributes attributes)\n+        {\n+            super(attributes);\n+        }\n+\n+        AsyncAttributes(Request request, Attributes attributes)\n+        {\n+            super(attributes);\n+            _requestURI = request.getRequestURI();\n+            _contextPath = request.getContextPath();\n+            _servletPath = request.getServletPath();\n+            _pathInfo = request.getPathInfo();\n+            _query = request.getQueryString();\n+            _mapping = request.getHttpServletMapping();\n+        }\n+\n+        static AsyncAttributes fromForwardedAttributes(Attributes attributes)\n+        {\n+            AsyncAttributes asyncAttributes = new AsyncAttributes(attributes);\n+            asyncAttributes._requestURI = (String)attributes.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);\n+            asyncAttributes._contextPath = (String)attributes.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH);\n+            asyncAttributes._servletPath = (String)attributes.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);\n+            asyncAttributes._pathInfo = (String)attributes.getAttribute(RequestDispatcher.FORWARD_PATH_INFO);\n+            asyncAttributes._query = (String)attributes.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING);\n+            asyncAttributes._mapping = (HttpServletMapping)attributes.getAttribute(RequestDispatcher.FORWARD_MAPPING);\n+            return asyncAttributes;\n+        }\n+\n+        @Override\n+        public Object getAttribute(String key)\n+        {\n+            if (!key.startsWith(__ASYNC_PREFIX))\n+                return super.getAttribute(key);\n+\n+            switch (key)\n+            {\n+                case AsyncContext.ASYNC_REQUEST_URI:\n+                    return _requestURI;\n+                case AsyncContext.ASYNC_CONTEXT_PATH:\n+                    return _contextPath;\n+                case AsyncContext.ASYNC_SERVLET_PATH:\n+                    return _servletPath;\n+                case AsyncContext.ASYNC_PATH_INFO:\n+                    return _pathInfo;\n+                case AsyncContext.ASYNC_QUERY_STRING:\n+                    return _query;\n+                case AsyncContext.ASYNC_MAPPING:\n+                    return _mapping;\n+                default:\n+                    return super.getAttribute(key);\n+            }\n+        }\n+\n+        @Override\n+        public Set<String> getAttributeNameSet()\n+        {\n+            HashSet<String> set = new HashSet<>();\n+            for (String name : _attributes.getAttributeNameSet())\n+            {\n+                if (!name.startsWith(__ASYNC_PREFIX))\n+                    set.add(name);\n+            }\n+\n+            set.add(AsyncContext.ASYNC_REQUEST_URI);\n+            set.add(AsyncContext.ASYNC_CONTEXT_PATH);\n+            set.add(AsyncContext.ASYNC_SERVLET_PATH);\n+            set.add(AsyncContext.ASYNC_PATH_INFO);\n+            set.add(AsyncContext.ASYNC_QUERY_STRING);\n+            set.add(AsyncContext.ASYNC_MAPPING);\n+            return set;\n+        }\n+\n+        @Override\n+        public void setAttribute(String key, Object value)", "originalCommit": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739df312410751f4fb807445366058b542248388", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java\nindex bff14065d8..7c9d225f5e 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncContextEvent.java\n\n@@ -183,117 +187,4 @@ public class AsyncContextEvent extends AsyncEvent implements Runnable\n         else if (e != _throwable)\n             _throwable.addSuppressed(e);\n     }\n-\n-    private static class AsyncAttributes extends Attributes.Wrapper\n-    {\n-        private String _requestURI;\n-        private String _contextPath;\n-        private String _servletPath;\n-        private String _pathInfo;\n-        private String _query;\n-        private HttpServletMapping _mapping;\n-\n-        AsyncAttributes(Attributes attributes)\n-        {\n-            super(attributes);\n-        }\n-\n-        AsyncAttributes(Request request, Attributes attributes)\n-        {\n-            super(attributes);\n-            _requestURI = request.getRequestURI();\n-            _contextPath = request.getContextPath();\n-            _servletPath = request.getServletPath();\n-            _pathInfo = request.getPathInfo();\n-            _query = request.getQueryString();\n-            _mapping = request.getHttpServletMapping();\n-        }\n-\n-        static AsyncAttributes fromForwardedAttributes(Attributes attributes)\n-        {\n-            AsyncAttributes asyncAttributes = new AsyncAttributes(attributes);\n-            asyncAttributes._requestURI = (String)attributes.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);\n-            asyncAttributes._contextPath = (String)attributes.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH);\n-            asyncAttributes._servletPath = (String)attributes.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);\n-            asyncAttributes._pathInfo = (String)attributes.getAttribute(RequestDispatcher.FORWARD_PATH_INFO);\n-            asyncAttributes._query = (String)attributes.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING);\n-            asyncAttributes._mapping = (HttpServletMapping)attributes.getAttribute(RequestDispatcher.FORWARD_MAPPING);\n-            return asyncAttributes;\n-        }\n-\n-        @Override\n-        public Object getAttribute(String key)\n-        {\n-            if (!key.startsWith(__ASYNC_PREFIX))\n-                return super.getAttribute(key);\n-\n-            switch (key)\n-            {\n-                case AsyncContext.ASYNC_REQUEST_URI:\n-                    return _requestURI;\n-                case AsyncContext.ASYNC_CONTEXT_PATH:\n-                    return _contextPath;\n-                case AsyncContext.ASYNC_SERVLET_PATH:\n-                    return _servletPath;\n-                case AsyncContext.ASYNC_PATH_INFO:\n-                    return _pathInfo;\n-                case AsyncContext.ASYNC_QUERY_STRING:\n-                    return _query;\n-                case AsyncContext.ASYNC_MAPPING:\n-                    return _mapping;\n-                default:\n-                    return super.getAttribute(key);\n-            }\n-        }\n-\n-        @Override\n-        public Set<String> getAttributeNameSet()\n-        {\n-            HashSet<String> set = new HashSet<>();\n-            for (String name : _attributes.getAttributeNameSet())\n-            {\n-                if (!name.startsWith(__ASYNC_PREFIX))\n-                    set.add(name);\n-            }\n-\n-            set.add(AsyncContext.ASYNC_REQUEST_URI);\n-            set.add(AsyncContext.ASYNC_CONTEXT_PATH);\n-            set.add(AsyncContext.ASYNC_SERVLET_PATH);\n-            set.add(AsyncContext.ASYNC_PATH_INFO);\n-            set.add(AsyncContext.ASYNC_QUERY_STRING);\n-            set.add(AsyncContext.ASYNC_MAPPING);\n-            return set;\n-        }\n-\n-        @Override\n-        public void setAttribute(String key, Object value)\n-        {\n-            if (!key.startsWith(__ASYNC_PREFIX))\n-                super.setAttribute(key, value);\n-\n-            switch (key)\n-            {\n-                case AsyncContext.ASYNC_REQUEST_URI:\n-                    _requestURI = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_CONTEXT_PATH:\n-                    _contextPath = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_SERVLET_PATH:\n-                    _servletPath = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_PATH_INFO:\n-                    _pathInfo = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_QUERY_STRING:\n-                    _query = (String)value;\n-                    break;\n-                case AsyncContext.ASYNC_MAPPING:\n-                    _mapping = (HttpServletMapping)value;\n-                    break;\n-                default:\n-                    super.setAttribute(key, value);\n-            }\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQzNjk5NA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r421436994", "bodyText": "Do we still need to get the pathSpec here?  If so, don't get it twice. get it once before the if.", "author": "gregw", "createdAt": "2020-05-07T11:36:23Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -452,17 +455,18 @@ public void doScope(String target, Request baseRequest, HttpServletRequest reque\n                 String servletPath = pathSpec.getPathMatch(target);", "originalCommit": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739df312410751f4fb807445366058b542248388", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex d79cb82985..415c1ad567 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -444,14 +444,14 @@ public class ServletHandler extends ScopedHandler\n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedServletResource mapping = getMappedServlet(target);\n+        MappedServlet mapping = getMappedServlet(target);\n         if (mapping != null)\n         {\n             servletHolder = mapping.getResource();\n \n-            if (mapping.getPathSpec() != null)\n+            PathSpec pathSpec = mapping.getPathSpec();\n+            if (pathSpec != null)\n             {\n-                PathSpec pathSpec = mapping.getPathSpec();\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQzODA2OA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r421438068", "bodyText": "in the log debug below, maybe just log the mapping and make sure it has a good toString", "author": "gregw", "createdAt": "2020-05-07T11:38:38Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -452,17 +455,18 @@ public void doScope(String target, Request baseRequest, HttpServletRequest reque\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n+                HttpServletMapping httpServletMapping = mapping.getHttpServletMapping(servletPath);\n                 if (DispatcherType.INCLUDE.equals(type))\n                 {\n                     baseRequest.setAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH, servletPath);\n                     baseRequest.setAttribute(RequestDispatcher.INCLUDE_PATH_INFO, pathInfo);\n-                    baseRequest.setAttribute(RequestDispatcher.INCLUDE_MAPPING, Request.getServletMapping(pathSpec, servletPath, servletHolder.getName()));\n+                    baseRequest.setAttribute(RequestDispatcher.INCLUDE_MAPPING, httpServletMapping);\n                 }\n                 else\n                 {\n-                    baseRequest.setPathSpec(pathSpec);\n                     baseRequest.setServletPath(servletPath);\n                     baseRequest.setPathInfo(pathInfo);\n+                    baseRequest.setHttpServletMapping(httpServletMapping);\n                 }\n             }\n         }", "originalCommit": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739df312410751f4fb807445366058b542248388", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex d79cb82985..415c1ad567 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -444,14 +444,14 @@ public class ServletHandler extends ScopedHandler\n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedServletResource mapping = getMappedServlet(target);\n+        MappedServlet mapping = getMappedServlet(target);\n         if (mapping != null)\n         {\n             servletHolder = mapping.getResource();\n \n-            if (mapping.getPathSpec() != null)\n+            PathSpec pathSpec = mapping.getPathSpec();\n+            if (pathSpec != null)\n             {\n-                PathSpec pathSpec = mapping.getPathSpec();\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQzODgxMA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r421438810", "bodyText": "It's not really necessary, but lets do the Attributes wrapping trick here as well!  Do we unset these attributes ever?  We should!", "author": "gregw", "createdAt": "2020-05-07T11:40:05Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -452,17 +455,18 @@ public void doScope(String target, Request baseRequest, HttpServletRequest reque\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n+                HttpServletMapping httpServletMapping = mapping.getHttpServletMapping(servletPath);\n                 if (DispatcherType.INCLUDE.equals(type))\n                 {\n                     baseRequest.setAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH, servletPath);", "originalCommit": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739df312410751f4fb807445366058b542248388", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex d79cb82985..415c1ad567 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -444,14 +444,14 @@ public class ServletHandler extends ScopedHandler\n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedServletResource mapping = getMappedServlet(target);\n+        MappedServlet mapping = getMappedServlet(target);\n         if (mapping != null)\n         {\n             servletHolder = mapping.getResource();\n \n-            if (mapping.getPathSpec() != null)\n+            PathSpec pathSpec = mapping.getPathSpec();\n+            if (pathSpec != null)\n             {\n-                PathSpec pathSpec = mapping.getPathSpec();\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQzOTg1MA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r421439850", "bodyText": "Why is this a field and not just the same class?", "author": "gregw", "createdAt": "2020-05-07T11:42:14Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -1731,6 +1739,140 @@ void destroyListener(EventListener listener)\n             _contextHandler.destroyListener(listener);\n     }\n \n+    public static HttpServletMapping getServletMapping(PathSpec pathSpec, String servletPath, String servletName)\n+    {\n+        String matchValue;\n+        MappingMatch mappingMatch;\n+        String pattern = (pathSpec != null) ? pathSpec.getDeclaration() : \"\";\n+        servletName = (servletName == null ? \"\" : servletName);\n+\n+        if (pathSpec instanceof ServletPathSpec && servletPath != null)\n+        {\n+            switch (pathSpec.getGroup())\n+            {\n+                case ROOT:\n+                    mappingMatch = MappingMatch.CONTEXT_ROOT;\n+                    matchValue = \"\";\n+                    pattern = \"\";\n+                    break;\n+                case DEFAULT:\n+                    mappingMatch = MappingMatch.DEFAULT;\n+                    matchValue = \"\";\n+                    break;\n+                case EXACT:\n+                    mappingMatch = MappingMatch.EXACT;\n+                    matchValue = servletPath;\n+                    if (matchValue.startsWith(\"/\"))\n+                        matchValue = matchValue.substring(1);\n+                    break;\n+                case PREFIX_GLOB:\n+                    mappingMatch = MappingMatch.PATH;\n+                    matchValue = servletPath;\n+                    if (matchValue.startsWith(\"/\"))\n+                        matchValue = matchValue.substring(1);\n+                    break;\n+                case SUFFIX_GLOB:\n+                    mappingMatch = MappingMatch.EXTENSION;\n+                    int dot = servletPath.lastIndexOf('.');\n+                    matchValue = servletPath.substring(0, dot);\n+                    if (matchValue.startsWith(\"/\"))\n+                        matchValue = matchValue.substring(1);\n+                    pattern = pattern.startsWith(\"/\") ? pattern.substring(1) : pattern;\n+                    break;\n+                case MIDDLE_GLOB:\n+                    mappingMatch = null;\n+                    matchValue = \"\";\n+                    break;\n+                default:\n+                    throw new IllegalStateException();\n+            }\n+        }\n+        else\n+        {\n+            mappingMatch = null;\n+            matchValue = \"\";\n+        }\n+\n+        return new JettyHttpServletMapping(matchValue, pattern, servletName, mappingMatch);\n+    }\n+\n+    private static class MappedServlet\n+    {\n+        private final PathSpec _pathSpec;\n+        private final ServletHolder _servletHolder;\n+        private final HttpServletMapping _httpServletMapping;\n+\n+        public MappedServlet(PathSpec pathSpec, ServletHolder servletHolder)\n+        {\n+            _pathSpec = pathSpec;\n+            _servletHolder = servletHolder;\n+\n+            // Create the HttpServletMapping only once if possible.\n+            if (pathSpec instanceof ServletPathSpec)\n+            {\n+                switch (pathSpec.getGroup())\n+                {\n+                    case EXACT:\n+                    case DEFAULT:\n+                    case ROOT:\n+                        _httpServletMapping = getServletMapping(pathSpec, pathSpec.getDeclaration(), servletHolder.getName());\n+                        break;\n+                    default:\n+                        _httpServletMapping = null;\n+                        break;\n+                }\n+            }\n+            else\n+            {\n+                _httpServletMapping = null;\n+            }\n+        }\n+\n+        public PathSpec getPathSpec()\n+        {\n+            return _pathSpec;\n+        }\n+\n+        public ServletHolder getServletHolder()\n+        {\n+            return _servletHolder;\n+        }\n+\n+        public HttpServletMapping getMapping(String servletPath)\n+        {\n+            if (_httpServletMapping != null)\n+                return _httpServletMapping;\n+            return getServletMapping(_pathSpec, servletPath, _servletHolder.getName());\n+        }\n+    }\n+\n+    /**\n+     * Extends {@link MappedResource} for {@link ServletHolder} but can be\n+     * asked for a {@link HttpServletMapping} which may have been created\n+     * in advance for servlets which have EXACT mappings.\n+     */\n+    public static class MappedServletResource extends MappedResource<ServletHolder>\n+    {\n+        private final MappedServlet _mappedServlet;", "originalCommit": "08e713d8498d1eebad3a88eac5b71bae1f6343cc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "739df312410751f4fb807445366058b542248388", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex d79cb82985..415c1ad567 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -1796,14 +1796,20 @@ public class ServletHandler extends ScopedHandler\n         return new JettyHttpServletMapping(matchValue, pattern, servletName, mappingMatch);\n     }\n \n-    private static class MappedServlet\n+    /**\n+     * Extends {@link MappedResource} for {@link ServletHolder} but can be\n+     * asked for a {@link HttpServletMapping} which may have been created\n+     * in advance for servlets which have EXACT mappings.\n+     */\n+    public static class MappedServlet extends MappedResource<ServletHolder>\n     {\n         private final PathSpec _pathSpec;\n         private final ServletHolder _servletHolder;\n         private final HttpServletMapping _httpServletMapping;\n \n-        public MappedServlet(PathSpec pathSpec, ServletHolder servletHolder)\n+        MappedServlet(PathSpec pathSpec, ServletHolder servletHolder)\n         {\n+            super(pathSpec, servletHolder);\n             _pathSpec = pathSpec;\n             _servletHolder = servletHolder;\n \n"}}, {"oid": "739df312410751f4fb807445366058b542248388", "url": "https://github.com/eclipse/jetty.project/commit/739df312410751f4fb807445366058b542248388", "message": "Issue #4741 - Changes from review, revert async attribute wrapping\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-08T04:14:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxOTE1MA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r423519150", "bodyText": "We probably could return a shared instance for this as well?", "author": "gregw", "createdAt": "2020-05-12T07:28:28Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -555,21 +559,23 @@ public void doHandle(String target, Request baseRequest, HttpServletRequest requ\n      * @param target Path within _context or servlet name\n      * @return MappedResource to the ServletHolder.  Named servlets have a null PathSpec\n      */\n-    public MappedResource<ServletHolder> getMappedServlet(String target)\n+    public MappedServlet getMappedServlet(String target)\n     {\n         if (target.startsWith(\"/\"))\n         {\n             if (_servletPathMap == null)\n                 return null;\n-            return _servletPathMap.getMatch(target);\n+\n+            MappedResource<MappedServlet> match = _servletPathMap.getMatch(target);\n+            if (match == null)\n+                return null;\n+            return match.getResource();\n         }\n \n-        if (_servletNameMap == null)\n-            return null;\n         ServletHolder holder = _servletNameMap.get(target);\n         if (holder == null)\n             return null;\n-        return new MappedResource<>(null, holder);\n+        return new MappedServlet(null, holder);", "originalCommit": "739df312410751f4fb807445366058b542248388", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMTU3OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r423521579", "bodyText": "Also invert the if above and finish method with return null", "author": "gregw", "createdAt": "2020-05-12T07:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxOTE1MA=="}], "type": "inlineReview", "revised_code": {"commit": "b49c48f415a7aa413286c0782c6960ec47b659fe", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 415c1ad567..88e397e7bc 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -573,9 +573,9 @@ public class ServletHandler extends ScopedHandler\n         }\n \n         ServletHolder holder = _servletNameMap.get(target);\n-        if (holder == null)\n-            return null;\n-        return new MappedServlet(null, holder);\n+        if (holder != null)\n+            return new MappedServlet(null, holder);\n+        return null;\n     }\n \n     protected FilterChain getFilterChain(Request baseRequest, String pathInContext, ServletHolder servletHolder)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMDU5OA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r423520598", "bodyText": "if pathSpec is null then this is a named dispatch so we can probably create a _httpServletMapping here as well?", "author": "gregw", "createdAt": "2020-05-12T07:31:01Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -1731,6 +1739,109 @@ void destroyListener(EventListener listener)\n             _contextHandler.destroyListener(listener);\n     }\n \n+    public static HttpServletMapping getServletMapping(PathSpec pathSpec, String servletPath, String servletName)\n+    {\n+        String matchValue;\n+        MappingMatch mappingMatch;\n+        String pattern = (pathSpec != null) ? pathSpec.getDeclaration() : \"\";\n+        servletName = (servletName == null ? \"\" : servletName);\n+\n+        if (pathSpec instanceof ServletPathSpec && servletPath != null)\n+        {\n+            switch (pathSpec.getGroup())\n+            {\n+                case ROOT:\n+                    mappingMatch = MappingMatch.CONTEXT_ROOT;\n+                    matchValue = \"\";\n+                    pattern = \"\";\n+                    break;\n+                case DEFAULT:\n+                    mappingMatch = MappingMatch.DEFAULT;\n+                    matchValue = \"\";\n+                    break;\n+                case EXACT:\n+                    mappingMatch = MappingMatch.EXACT;\n+                    matchValue = servletPath;\n+                    if (matchValue.startsWith(\"/\"))\n+                        matchValue = matchValue.substring(1);\n+                    break;\n+                case PREFIX_GLOB:\n+                    mappingMatch = MappingMatch.PATH;\n+                    matchValue = servletPath;\n+                    if (matchValue.startsWith(\"/\"))\n+                        matchValue = matchValue.substring(1);\n+                    break;\n+                case SUFFIX_GLOB:\n+                    mappingMatch = MappingMatch.EXTENSION;\n+                    int dot = servletPath.lastIndexOf('.');\n+                    matchValue = servletPath.substring(0, dot);\n+                    if (matchValue.startsWith(\"/\"))\n+                        matchValue = matchValue.substring(1);\n+                    pattern = pattern.startsWith(\"/\") ? pattern.substring(1) : pattern;\n+                    break;\n+                case MIDDLE_GLOB:\n+                    mappingMatch = null;\n+                    matchValue = \"\";\n+                    break;\n+                default:\n+                    throw new IllegalStateException();\n+            }\n+        }\n+        else\n+        {\n+            mappingMatch = null;\n+            matchValue = \"\";\n+        }\n+\n+        return new JettyHttpServletMapping(matchValue, pattern, servletName, mappingMatch);\n+    }\n+\n+    /**\n+     * Extends {@link MappedResource} for {@link ServletHolder} but can be\n+     * asked for a {@link HttpServletMapping} which may have been created\n+     * in advance for servlets which have EXACT mappings.\n+     */\n+    public static class MappedServlet extends MappedResource<ServletHolder>\n+    {\n+        private final PathSpec _pathSpec;\n+        private final ServletHolder _servletHolder;\n+        private final HttpServletMapping _httpServletMapping;\n+\n+        MappedServlet(PathSpec pathSpec, ServletHolder servletHolder)\n+        {\n+            super(pathSpec, servletHolder);\n+            _pathSpec = pathSpec;\n+            _servletHolder = servletHolder;\n+\n+            // Create the HttpServletMapping only once if possible.\n+            if (pathSpec instanceof ServletPathSpec)\n+            {\n+                switch (pathSpec.getGroup())\n+                {\n+                    case EXACT:\n+                    case DEFAULT:\n+                    case ROOT:\n+                        _httpServletMapping = getServletMapping(pathSpec, pathSpec.getDeclaration(), servletHolder.getName());\n+                        break;\n+                    default:\n+                        _httpServletMapping = null;\n+                        break;\n+                }\n+            }\n+            else", "originalCommit": "739df312410751f4fb807445366058b542248388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a34a053b86292c861813bb78986789925b81dfcd", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 415c1ad567..83d2d2400e 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -1739,77 +1720,17 @@ public class ServletHandler extends ScopedHandler\n             _contextHandler.destroyListener(listener);\n     }\n \n-    public static HttpServletMapping getServletMapping(PathSpec pathSpec, String servletPath, String servletName)\n-    {\n-        String matchValue;\n-        MappingMatch mappingMatch;\n-        String pattern = (pathSpec != null) ? pathSpec.getDeclaration() : \"\";\n-        servletName = (servletName == null ? \"\" : servletName);\n-\n-        if (pathSpec instanceof ServletPathSpec && servletPath != null)\n-        {\n-            switch (pathSpec.getGroup())\n-            {\n-                case ROOT:\n-                    mappingMatch = MappingMatch.CONTEXT_ROOT;\n-                    matchValue = \"\";\n-                    pattern = \"\";\n-                    break;\n-                case DEFAULT:\n-                    mappingMatch = MappingMatch.DEFAULT;\n-                    matchValue = \"\";\n-                    break;\n-                case EXACT:\n-                    mappingMatch = MappingMatch.EXACT;\n-                    matchValue = servletPath;\n-                    if (matchValue.startsWith(\"/\"))\n-                        matchValue = matchValue.substring(1);\n-                    break;\n-                case PREFIX_GLOB:\n-                    mappingMatch = MappingMatch.PATH;\n-                    matchValue = servletPath;\n-                    if (matchValue.startsWith(\"/\"))\n-                        matchValue = matchValue.substring(1);\n-                    break;\n-                case SUFFIX_GLOB:\n-                    mappingMatch = MappingMatch.EXTENSION;\n-                    int dot = servletPath.lastIndexOf('.');\n-                    matchValue = servletPath.substring(0, dot);\n-                    if (matchValue.startsWith(\"/\"))\n-                        matchValue = matchValue.substring(1);\n-                    pattern = pattern.startsWith(\"/\") ? pattern.substring(1) : pattern;\n-                    break;\n-                case MIDDLE_GLOB:\n-                    mappingMatch = null;\n-                    matchValue = \"\";\n-                    break;\n-                default:\n-                    throw new IllegalStateException();\n-            }\n-        }\n-        else\n-        {\n-            mappingMatch = null;\n-            matchValue = \"\";\n-        }\n-\n-        return new JettyHttpServletMapping(matchValue, pattern, servletName, mappingMatch);\n-    }\n-\n     /**\n-     * Extends {@link MappedResource} for {@link ServletHolder} but can be\n-     * asked for a {@link HttpServletMapping} which may have been created\n-     * in advance for servlets which have EXACT mappings.\n+     * A mapping of a servlet\n      */\n-    public static class MappedServlet extends MappedResource<ServletHolder>\n+    public static class MappedServlet\n     {\n         private final PathSpec _pathSpec;\n         private final ServletHolder _servletHolder;\n-        private final HttpServletMapping _httpServletMapping;\n+        private final ServletPathMapping _httpServletMapping;\n \n         MappedServlet(PathSpec pathSpec, ServletHolder servletHolder)\n         {\n-            super(pathSpec, servletHolder);\n             _pathSpec = pathSpec;\n             _servletHolder = servletHolder;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjMwMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r423522301", "bodyText": "rename s/mapping/mapped/ because a mapping is a different class.", "author": "gregw", "createdAt": "2020-05-12T07:34:10Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -434,41 +437,42 @@ public void doScope(String target, Request baseRequest, HttpServletRequest reque\n         // Get the base requests\n         final String old_servlet_path = baseRequest.getServletPath();\n         final String old_path_info = baseRequest.getPathInfo();\n-        final PathSpec old_path_spec = baseRequest.getPathSpec();\n+        final HttpServletMapping old_http_servlet_mapping = baseRequest.getHttpServletMapping();\n \n         DispatcherType type = baseRequest.getDispatcherType();\n \n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedResource<ServletHolder> mapping = getMappedServlet(target);\n+        MappedServlet mapping = getMappedServlet(target);", "originalCommit": "739df312410751f4fb807445366058b542248388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b49c48f415a7aa413286c0782c6960ec47b659fe", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 415c1ad567..88e397e7bc 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -444,18 +444,18 @@ public class ServletHandler extends ScopedHandler\n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedServlet mapping = getMappedServlet(target);\n-        if (mapping != null)\n+        MappedServlet mappedServlet = getMappedServlet(target);\n+        if (mappedServlet != null)\n         {\n-            servletHolder = mapping.getResource();\n+            servletHolder = mappedServlet.getResource();\n \n-            PathSpec pathSpec = mapping.getPathSpec();\n+            PathSpec pathSpec = mappedServlet.getPathSpec();\n             if (pathSpec != null)\n             {\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n-                HttpServletMapping httpServletMapping = mapping.getHttpServletMapping(servletPath);\n+                HttpServletMapping httpServletMapping = mappedServlet.getHttpServletMapping(servletPath);\n                 if (DispatcherType.INCLUDE.equals(type))\n                 {\n                     baseRequest.setAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH, servletPath);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDQzMg==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r423524432", "bodyText": "why are we still getting serlvetPath and pathInfo directly from the pathSpec.   I feel like we can do this more efficiently if we asked the mapping, as it will already know if it is an exact match etc.", "author": "gregw", "createdAt": "2020-05-12T07:38:04Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -434,41 +437,42 @@ public void doScope(String target, Request baseRequest, HttpServletRequest reque\n         // Get the base requests\n         final String old_servlet_path = baseRequest.getServletPath();\n         final String old_path_info = baseRequest.getPathInfo();\n-        final PathSpec old_path_spec = baseRequest.getPathSpec();\n+        final HttpServletMapping old_http_servlet_mapping = baseRequest.getHttpServletMapping();\n \n         DispatcherType type = baseRequest.getDispatcherType();\n \n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedResource<ServletHolder> mapping = getMappedServlet(target);\n+        MappedServlet mapping = getMappedServlet(target);\n         if (mapping != null)\n         {\n             servletHolder = mapping.getResource();\n \n-            if (mapping.getPathSpec() != null)\n+            PathSpec pathSpec = mapping.getPathSpec();\n+            if (pathSpec != null)\n             {\n-                PathSpec pathSpec = mapping.getPathSpec();\n                 String servletPath = pathSpec.getPathMatch(target);", "originalCommit": "739df312410751f4fb807445366058b542248388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b49c48f415a7aa413286c0782c6960ec47b659fe", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 415c1ad567..88e397e7bc 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -444,18 +444,18 @@ public class ServletHandler extends ScopedHandler\n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedServlet mapping = getMappedServlet(target);\n-        if (mapping != null)\n+        MappedServlet mappedServlet = getMappedServlet(target);\n+        if (mappedServlet != null)\n         {\n-            servletHolder = mapping.getResource();\n+            servletHolder = mappedServlet.getResource();\n \n-            PathSpec pathSpec = mapping.getPathSpec();\n+            PathSpec pathSpec = mappedServlet.getPathSpec();\n             if (pathSpec != null)\n             {\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n-                HttpServletMapping httpServletMapping = mapping.getHttpServletMapping(servletPath);\n+                HttpServletMapping httpServletMapping = mappedServlet.getHttpServletMapping(servletPath);\n                 if (DispatcherType.INCLUDE.equals(type))\n                 {\n                     baseRequest.setAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH, servletPath);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyOTMyNw==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r423529327", "bodyText": "Just to double down on my comments.   The getHttpServletMapping internally does pretty much all the work that is done in getPathMatch and get PathInfo above.   It just needs to remember the results and return them in the JettyHttpServletMapping and we can do only 1 slice&dice rather than 3.", "author": "gregw", "createdAt": "2020-05-12T07:46:46Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -434,41 +437,42 @@ public void doScope(String target, Request baseRequest, HttpServletRequest reque\n         // Get the base requests\n         final String old_servlet_path = baseRequest.getServletPath();\n         final String old_path_info = baseRequest.getPathInfo();\n-        final PathSpec old_path_spec = baseRequest.getPathSpec();\n+        final HttpServletMapping old_http_servlet_mapping = baseRequest.getHttpServletMapping();\n \n         DispatcherType type = baseRequest.getDispatcherType();\n \n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedResource<ServletHolder> mapping = getMappedServlet(target);\n+        MappedServlet mapping = getMappedServlet(target);\n         if (mapping != null)\n         {\n             servletHolder = mapping.getResource();\n \n-            if (mapping.getPathSpec() != null)\n+            PathSpec pathSpec = mapping.getPathSpec();\n+            if (pathSpec != null)\n             {\n-                PathSpec pathSpec = mapping.getPathSpec();\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n+                HttpServletMapping httpServletMapping = mapping.getHttpServletMapping(servletPath);", "originalCommit": "739df312410751f4fb807445366058b542248388", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b49c48f415a7aa413286c0782c6960ec47b659fe", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 415c1ad567..88e397e7bc 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -444,18 +444,18 @@ public class ServletHandler extends ScopedHandler\n         ServletHolder servletHolder = null;\n         UserIdentity.Scope oldScope = null;\n \n-        MappedServlet mapping = getMappedServlet(target);\n-        if (mapping != null)\n+        MappedServlet mappedServlet = getMappedServlet(target);\n+        if (mappedServlet != null)\n         {\n-            servletHolder = mapping.getResource();\n+            servletHolder = mappedServlet.getResource();\n \n-            PathSpec pathSpec = mapping.getPathSpec();\n+            PathSpec pathSpec = mappedServlet.getPathSpec();\n             if (pathSpec != null)\n             {\n                 String servletPath = pathSpec.getPathMatch(target);\n                 String pathInfo = pathSpec.getPathInfo(target);\n \n-                HttpServletMapping httpServletMapping = mapping.getHttpServletMapping(servletPath);\n+                HttpServletMapping httpServletMapping = mappedServlet.getHttpServletMapping(servletPath);\n                 if (DispatcherType.INCLUDE.equals(type))\n                 {\n                     baseRequest.setAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH, servletPath);\n"}}, {"oid": "b49c48f415a7aa413286c0782c6960ec47b659fe", "url": "https://github.com/eclipse/jetty.project/commit/b49c48f415a7aa413286c0782c6960ec47b659fe", "message": "Issue #4741 - Changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-05-13T08:04:20Z", "type": "commit"}, {"oid": "a34a053b86292c861813bb78986789925b81dfcd", "url": "https://github.com/eclipse/jetty.project/commit/a34a053b86292c861813bb78986789925b81dfcd", "message": "Issue #4741 Async ServletMapping\n\nGreatly increased the scope of this PR by combining the servletPath and\npathInfo into the ServletPathMapping class that implements the\nHttpServletPathMapping interface.    This allows us to greatly simplify\nthe matching of servlets and reduce the number of times we need to\nactually to the match per request.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-13T11:16:44Z", "type": "commit"}, {"oid": "21c0f065a3bf0d4a97cf40fb715fbe9f282e83d6", "url": "https://github.com/eclipse/jetty.project/commit/21c0f065a3bf0d4a97cf40fb715fbe9f282e83d6", "message": "Issue #4741 Async ServletMapping\n\nFixed problems with previous commit\nmore cleanup of attributes in dispatcher.\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-13T14:28:52Z", "type": "commit"}, {"oid": "62c067bfe828407f4992f8820bfa5a064e981981", "url": "https://github.com/eclipse/jetty.project/commit/62c067bfe828407f4992f8820bfa5a064e981981", "message": "Issue #4741 Async ServletMapping\n\nMore code cleanups\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-13T15:16:10Z", "type": "commit"}, {"oid": "4fe7fbca8ad5cc4ddf593c6d31f4fe63e7db9404", "url": "https://github.com/eclipse/jetty.project/commit/4fe7fbca8ad5cc4ddf593c6d31f4fe63e7db9404", "message": "Issue #4741 Async ServletMapping\n\nNamed dispatch cleanup\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-14T08:22:13Z", "type": "commit"}, {"oid": "7485f97af618661c6938575fcdfbf15f7101c14c", "url": "https://github.com/eclipse/jetty.project/commit/7485f97af618661c6938575fcdfbf15f7101c14c", "message": "Merge branch 'jetty-10.0.x' into jetty-10.0.x-4741-getServletMappingAsyncDispatch\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-14T09:13:18Z", "type": "commit"}, {"oid": "8f720e1f4043212e7c85c7a2d7cd2d4999a38644", "url": "https://github.com/eclipse/jetty.project/commit/8f720e1f4043212e7c85c7a2d7cd2d4999a38644", "message": "Issue #4741 Async ServletMapping\n\nmisc cleanup\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-14T11:32:24Z", "type": "commit"}, {"oid": "727b88cd2ed612824608889c02998b08050cb64f", "url": "https://github.com/eclipse/jetty.project/commit/727b88cd2ed612824608889c02998b08050cb64f", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-4741-getServletMappingAsyncDispatch", "committedDate": "2020-05-17T16:41:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTY4OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426511689", "bodyText": "Need a comment in here about the purpose of this class, and particularly how it is used to model both mapping via a path, but ALSO mapping via just a name. In fact, I don't like the name of this class containing the word \"path\" if path has nothing to do with it.", "author": "janbartel", "createdAt": "2020-05-18T10:01:52Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/ServletPathMapping.java", "diffHunk": "@@ -0,0 +1,148 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under\n+// the terms of the Eclipse Public License 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0\n+//\n+// This Source Code may also be made available under the following\n+// Secondary Licenses when the conditions for such availability set\n+// forth in the Eclipse Public License, v. 2.0 are satisfied:\n+// the Apache License v2.0 which is available at\n+// https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.server;\n+\n+import javax.servlet.http.HttpServletMapping;\n+import javax.servlet.http.MappingMatch;\n+\n+import org.eclipse.jetty.http.pathmap.PathSpec;\n+import org.eclipse.jetty.http.pathmap.ServletPathSpec;\n+\n+public class ServletPathMapping implements HttpServletMapping\n+{\n+    private final MappingMatch _mappingMatch;\n+    private final String _matchValue;\n+    private final String _pattern;\n+    private final String _servletName;\n+    private final String _servletPath;\n+    private final String _pathInfo;\n+\n+    public ServletPathMapping(PathSpec pathSpec, String servletName, String pathInContext)", "originalCommit": "727b88cd2ed612824608889c02998b08050cb64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNTU2OA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426535568", "bodyText": "I would call it just ServletMapping, but that name is already taken!  Let me see if we can avoid using it at all for named dispatch....", "author": "gregw", "createdAt": "2020-05-18T10:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1MTA0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426551041", "bodyText": "While you're at it, the ServletMapping class could do with a bit of an overhaul:  the setDefault()/isDefaul() method names I now see are confusing with the whole other meaning of \"default\". In the case of the ServletMapping these methods just mean whether or not the mapping originated from a webdefault.xml. Can you think of a clearer name?", "author": "janbartel", "createdAt": "2020-05-18T11:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MjY2Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426572666", "bodyText": "It turned out that named dispatchers were broken. Added a test for them and now no longer use a ServletPathMapping for named dispatcher.  Added some javadoc as well.", "author": "gregw", "createdAt": "2020-05-18T11:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDc4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426574781", "bodyText": "rename of isDefault done.", "author": "gregw", "createdAt": "2020-05-18T12:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMTY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8cff3ef09985c7d24cfb48b84a4019a7f60c7127", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/ServletPathMapping.java b/jetty-server/src/main/java/org/eclipse/jetty/server/ServletPathMapping.java\nindex 8fdb2b9562..a1c5541088 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/ServletPathMapping.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/ServletPathMapping.java\n\n@@ -19,11 +19,22 @@\n package org.eclipse.jetty.server;\n \n import javax.servlet.http.HttpServletMapping;\n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.MappingMatch;\n \n import org.eclipse.jetty.http.pathmap.PathSpec;\n import org.eclipse.jetty.http.pathmap.ServletPathSpec;\n \n+/**\n+ * Implementation of HttpServletMapping.\n+ *\n+ * Represents the application of a {@link ServletPathSpec} to a specific path\n+ * that resulted in a mapping to a {@link javax.servlet.Servlet}.\n+ * As well as supporting the standard {@link HttpServletMapping} methods, this\n+ * class also carries fields, which can be precomputed for the implementation\n+ * of {@link HttpServletRequest#getServletPath()} and\n+ * {@link HttpServletRequest#getPathInfo()}\n+ */\n public class ServletPathMapping implements HttpServletMapping\n {\n     private final MappingMatch _mappingMatch;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMzE4NA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426513184", "bodyText": "See my comment on the ServletPathMapping class: this comment at like 1722 is the only clue that the ServletPathMapping class can be used as a name-match only .", "author": "janbartel", "createdAt": "2020-05-18T10:04:22Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -1731,6 +1689,71 @@ void destroyListener(EventListener listener)\n             _contextHandler.destroyListener(listener);\n     }\n \n+    /**\n+     * A mapping of a servlet\n+     */\n+    public static class MappedServlet\n+    {\n+        private final PathSpec _pathSpec;\n+        private final ServletHolder _servletHolder;\n+        private final ServletPathMapping _servletPathMapping;\n+\n+        MappedServlet(PathSpec pathSpec, ServletHolder servletHolder)\n+        {\n+            _pathSpec = pathSpec;\n+            _servletHolder = servletHolder;\n+\n+            // Create the HttpServletMapping only once if possible.\n+            if (pathSpec instanceof ServletPathSpec)\n+            {\n+                switch (pathSpec.getGroup())\n+                {\n+                    case EXACT:\n+                    case ROOT:\n+                        _servletPathMapping = new ServletPathMapping(_pathSpec, _servletHolder.getName(), _pathSpec.getPrefix());\n+                        break;\n+                    default:\n+                        _servletPathMapping = null;\n+                        break;\n+                }\n+            }\n+            else if (_pathSpec == null)\n+            {\n+                // Named servlet mapping", "originalCommit": "727b88cd2ed612824608889c02998b08050cb64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDg0MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426574841", "bodyText": "fixed. see above.", "author": "gregw", "createdAt": "2020-05-18T12:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxMzE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8cff3ef09985c7d24cfb48b84a4019a7f60c7127", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 771afa7ddd..ab9655d66c 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -1690,7 +1689,7 @@ public class ServletHandler extends ScopedHandler\n     }\n \n     /**\n-     * A mapping of a servlet\n+     * A mapping of a servlet by pathSpec or by name\n      */\n     public static class MappedServlet\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDcxNA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426554714", "bodyText": "Seems the intention is to make this immutable. Perhaps we should throw IllegalStateException if setAttribute() is called? That way we would find out where in the code it is being (incorrectly) called, rather than silently failing and being ignored.\nFurther thoughts: all of the subclasses of Attributes.Wrapper are immutable, see also ProxyAttributes and SslAttributes. Should the Attributes interface be changed to remove setAttribute() and clearAttributes() methods altogether?", "author": "janbartel", "createdAt": "2020-05-18T11:23:44Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java", "diffHunk": "@@ -94,54 +83,15 @@ public void setAttribute(String key, Object value)\n         switch (key)\n         {\n             case AsyncContext.ASYNC_REQUEST_URI:", "originalCommit": "727b88cd2ed612824608889c02998b08050cb64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MzQ1MQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426583451", "bodyText": "I don't think ISE is right.   I've change to always setting the attribute on the wrapped map, which we will hide during the forward. I added comments to explain.", "author": "gregw", "createdAt": "2020-05-18T12:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MTIyOQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426951229", "bodyText": "Why set the attribute on the wrapped map, we never unwrap the AsyncAttributes so this will never be used.", "author": "lachlan-roberts", "createdAt": "2020-05-18T23:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwMTE4MA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r427201180", "bodyText": "Current behaviour is to only set the attribute on the wrapped map for non-async attributes.  Those are used by AsyncAttributes as it passes on non-async gets to the the wrapped map.", "author": "gregw", "createdAt": "2020-05-19T10:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU1NDcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "1aeacc88ab5b06a8e53bfa319139083f0f6b803f", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\nindex 9af9e36cdd..4856a99fa5 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n\n@@ -88,6 +88,8 @@ class AsyncAttributes extends Attributes.Wrapper\n             case AsyncContext.ASYNC_PATH_INFO:\n             case AsyncContext.ASYNC_QUERY_STRING:\n             case AsyncContext.ASYNC_MAPPING:\n+                // Ignore sets for these reserved names as this class is applied\n+                // we will always override these particular attributes.\n                 break;\n             default:\n                 super.setAttribute(key, value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NDA5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426564099", "bodyText": "Different behaviour here than ForwardAttribute and IncludeAttribute:  both of those do a remove if the value is null, but see comment above about removing setAttribute() entirely.", "author": "janbartel", "createdAt": "2020-05-18T11:42:23Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java", "diffHunk": "@@ -94,54 +83,15 @@ public void setAttribute(String key, Object value)\n         switch (key)\n         {\n             case AsyncContext.ASYNC_REQUEST_URI:\n-                _requestURI = (String)value;\n-                break;\n             case AsyncContext.ASYNC_CONTEXT_PATH:\n-                _contextPath = (String)value;\n-                break;\n             case AsyncContext.ASYNC_SERVLET_PATH:\n-                _servletPath = (String)value;\n-                break;\n             case AsyncContext.ASYNC_PATH_INFO:\n-                _pathInfo = (String)value;\n-                break;\n             case AsyncContext.ASYNC_QUERY_STRING:\n-                _queryString = (String)value;\n-                break;\n             case AsyncContext.ASYNC_MAPPING:\n-                _httpServletMapping = (HttpServletMapping)value;\n                 break;\n             default:\n                 super.setAttribute(key, value);\n                 break;\n         }", "originalCommit": "727b88cd2ed612824608889c02998b08050cb64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MzA5NA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426583094", "bodyText": "Added comment and simplified forward/include.", "author": "gregw", "createdAt": "2020-05-18T12:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU2NDA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1aeacc88ab5b06a8e53bfa319139083f0f6b803f", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\nindex 9af9e36cdd..4856a99fa5 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AsyncAttributes.java\n\n@@ -88,6 +88,8 @@ class AsyncAttributes extends Attributes.Wrapper\n             case AsyncContext.ASYNC_PATH_INFO:\n             case AsyncContext.ASYNC_QUERY_STRING:\n             case AsyncContext.ASYNC_MAPPING:\n+                // Ignore sets for these reserved names as this class is applied\n+                // we will always override these particular attributes.\n                 break;\n             default:\n                 super.setAttribute(key, value);\n"}}, {"oid": "8cff3ef09985c7d24cfb48b84a4019a7f60c7127", "url": "https://github.com/eclipse/jetty.project/commit/8cff3ef09985c7d24cfb48b84a4019a7f60c7127", "message": "Issue #4741 Async HttpServletMapping\n\nAdded tests for named dispatchers\nDo not use ServletPathMapping for named dispatch\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-18T11:56:57Z", "type": "commit"}, {"oid": "459651b1cb91262904566a5aab04e081824cf80e", "url": "https://github.com/eclipse/jetty.project/commit/459651b1cb91262904566a5aab04e081824cf80e", "message": "Issue #4741 Async HttpServletMapping\n\nrenamed confusing isDefault method on ServletMapping\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-18T12:02:23Z", "type": "commit"}, {"oid": "1aeacc88ab5b06a8e53bfa319139083f0f6b803f", "url": "https://github.com/eclipse/jetty.project/commit/1aeacc88ab5b06a8e53bfa319139083f0f6b803f", "message": "Issue #4741 Async HttpServletMapping\n\nsimplified setAttribute\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-18T12:18:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwMDUyMA==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426600520", "bodyText": "This whole section really needs some comments - the pattern of handling the AsyncAttributes appears to be very different to handling the Forward/IncludeAttributes that we should explain why.", "author": "janbartel", "createdAt": "2020-05-18T12:49:29Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Request.java", "diffHunk": "@@ -1925,50 +1842,53 @@ public void setAsyncAttributes()\n         if (getAttribute(AsyncContext.ASYNC_REQUEST_URI) != null)\n             return;\n \n-        String requestURI;\n-        String contextPath;\n-        String servletPath;\n-        String pathInfo;\n-        String queryString;\n-        HttpServletMapping httpServletMapping;\n-\n-        // Have we been forwarded before?\n-        requestURI = (String)getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);\n-        if (requestURI != null)\n-        {\n-            contextPath = (String)getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH);\n-            servletPath = (String)getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH);\n-            pathInfo = (String)getAttribute(RequestDispatcher.FORWARD_PATH_INFO);\n-            queryString = (String)getAttribute(RequestDispatcher.FORWARD_QUERY_STRING);\n-            httpServletMapping = (HttpServletMapping)getAttribute(RequestDispatcher.FORWARD_MAPPING);\n-        }\n-        else\n-        {\n-            requestURI = getRequestURI();\n-            contextPath = getContextPath();\n-            servletPath = getServletPath();\n-            pathInfo = getPathInfo();\n-            queryString = getQueryString();\n-            httpServletMapping = getHttpServletMapping();\n-        }\n-\n         // Unwrap the _attributes to get the base attributes instance.\n         Attributes baseAttributes;\n         if (_attributes == null)", "originalCommit": "727b88cd2ed612824608889c02998b08050cb64f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5MTc0Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r427191747", "bodyText": "extra comments in cf0a795", "author": "gregw", "createdAt": "2020-05-19T10:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwMDUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "cf0a795475d78d27743bf331b5134a85515c45e7", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\nindex 358e97c8c3..8f39b9a790 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Request.java\n\n@@ -1849,11 +1849,19 @@ public class Request implements HttpServletRequest\n         else\n             baseAttributes = Attributes.unwrap(_attributes);\n \n+        // We cannot use a apply AsyncAttribute via #setAttributes as that\n+        // will wrap over any dispatch specific attribute wrappers (eg.\n+        // Dispatcher#ForwardAttributes).   Async attributes must persist\n+        // after the current dispatch, so they must be set under any other\n+        // wrappers.\n+\n         String fwdRequestURI = (String)getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);\n         if (fwdRequestURI == null)\n         {\n             if (baseAttributes instanceof ServletAttributes)\n             {\n+                // The baseAttributes map is our ServletAttributes, so we can set the async\n+                // attributes there, under any other wrappers.\n                 ((ServletAttributes)baseAttributes).setAsyncAttributes(getRequestURI(),\n                     getContextPath(),\n                     getPathInfo(), // TODO change to pathInContext when cheaply available\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYwODEyMQ==", "url": "https://github.com/eclipse/jetty.project/pull/4851#discussion_r426608121", "bodyText": "Return is wrong: should be returning MappedServlet", "author": "janbartel", "createdAt": "2020-05-18T13:01:12Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -555,29 +523,28 @@ public void doHandle(String target, Request baseRequest, HttpServletRequest requ\n      * @param target Path within _context or servlet name\n      * @return MappedResource to the ServletHolder.  Named servlets have a null PathSpec", "originalCommit": "727b88cd2ed612824608889c02998b08050cb64f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "080d35e52990d6a8d8877da26db2fb819b225f12", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\nindex 771afa7ddd..69c2340937 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java\n\n@@ -518,10 +517,10 @@ public class ServletHandler extends ScopedHandler\n     }\n \n     /**\n-     * ServletHolder matching path.\n+     * Get MappedServlet for target.\n      *\n      * @param target Path within _context or servlet name\n-     * @return MappedResource to the ServletHolder.  Named servlets have a null PathSpec\n+     * @return MappedServlet matched by path or name.  Named servlets have a null PathSpec\n      */\n     public MappedServlet getMappedServlet(String target)\n     {\n"}}, {"oid": "cf0a795475d78d27743bf331b5134a85515c45e7", "url": "https://github.com/eclipse/jetty.project/commit/cf0a795475d78d27743bf331b5134a85515c45e7", "message": "Issue #4741 Async HttpServletMapping\n\nadded javadoc about AsyncAttributes\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-18T13:02:24Z", "type": "commit"}, {"oid": "080d35e52990d6a8d8877da26db2fb819b225f12", "url": "https://github.com/eclipse/jetty.project/commit/080d35e52990d6a8d8877da26db2fb819b225f12", "message": "Issue #4741 Async HttpServletMapping\n\nFixed javadoc\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-05-19T10:33:34Z", "type": "commit"}]}