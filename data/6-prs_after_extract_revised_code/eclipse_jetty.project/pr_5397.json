{"pr_number": 5397, "pr_title": "Fixes #5378 Setting Holders during STARTING", "pr_createdAt": "2020-10-05T16:13:44Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5397", "timeline": [{"oid": "9a1cadade4ef3b02405d0c7e4e2b9d6c200c550d", "url": "https://github.com/eclipse/jetty.project/commit/9a1cadade4ef3b02405d0c7e4e2b9d6c200c550d", "message": "Fixes #5378 Setting Holders during STARTING\n\nHolders are now started/initialized if needed by a new utility method", "committedDate": "2020-10-05T16:12:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzNjcxNg==", "url": "https://github.com/eclipse/jetty.project/pull/5397#discussion_r500136716", "bodyText": "Can we put in some comments about what is really being tested here, which is the various states in which the ServletContextHandler, ServletHandler can be in when a servlet/filter/listener is added.", "author": "janbartel", "createdAt": "2020-10-06T09:31:42Z", "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java", "diffHunk": "@@ -1651,21 +1651,35 @@ public void testProgrammaticFilterServlet() throws Exception\n         ServletHandler handler = new ServletHandler();\n         _server.setHandler(context);\n         context.setHandler(handler);\n-        handler.addServletWithMapping(new ServletHolder(new TestServlet()), \"/\");\n+        handler.addServletWithMapping(new ServletHolder(new TestServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/test/*\", EnumSet.of(DispatcherType.REQUEST));", "originalCommit": "9a1cadade4ef3b02405d0c7e4e2b9d6c200c550d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e1e0985833e33a97eacdd972b97825eb21cbac0", "chunk": "diff --git a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\nindex efab1cb979..3119dec21a 100644\n--- a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\n+++ b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\n\n@@ -1644,52 +1644,179 @@ public class ServletContextHandlerTest\n         }\n     }\n \n+    public static class TestPListener implements  ServletRequestListener\n+    {\n+        @Override\n+        public void requestInitialized(ServletRequestEvent sre)\n+        {\n+            ServletRequest request = sre.getServletRequest();\n+            Integer count = (Integer)request.getAttribute(\"testRequestListener\");\n+            request.setAttribute(\"testRequestListener\", count == null ? 1 : count + 1);\n+        }\n+\n+        @Override\n+        public void requestDestroyed(ServletRequestEvent sre)\n+        {\n+        }\n+    }\n+\n     @Test\n-    public void testProgrammaticFilterServlet() throws Exception\n+    public void testProgrammaticListener() throws Exception\n     {\n         ServletContextHandler context = new ServletContextHandler();\n         ServletHandler handler = new ServletHandler();\n         _server.setHandler(context);\n         context.setHandler(handler);\n-        handler.addServletWithMapping(new ServletHolder(new TestServlet()\n+\n+        // Add a servlet to report number of listeners\n+        handler.addServletWithMapping(new ServletHolder(new HttpServlet()\n         {\n             @Override\n-            public void init() throws ServletException\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n             {\n-                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/test/*\", EnumSet.of(DispatcherType.REQUEST));\n+                resp.getOutputStream().print(\"Listeners=\" + req.getAttribute(\"testRequestListener\"));\n             }\n-        }), \"/test\");\n+        }), \"/\");\n \n+        // Add a listener in STOPPED, STARTING and STARTED states\n+        handler.addListener(new ListenerHolder(TestPListener.class));\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addListener(new ListenerHolder(TestPListener.class));\n+            }\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n         _server.start();\n+        handler.addListener(new ListenerHolder(TestPListener.class));\n \n         String request =\n             \"GET /test HTTP/1.0\\n\" +\n-            \"Host: localhost\\n\" +\n-            \"\\n\";\n+                \"Host: localhost\\n\" +\n+                \"\\n\";\n         String response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n-        assertThat(response, containsString(\"filter: filter\"));\n-        assertThat(response, containsString(\"Test\"));\n+        assertThat(response, containsString(\"Listeners=3\"));\n+    }\n+\n+    public static class TestPFilter implements Filter\n+    {\n+        @Override\n+        public void init(FilterConfig filterConfig) throws ServletException\n+        {\n+        }\n+\n+        @Override\n+        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n+        {\n+            Integer count = (Integer)request.getAttribute(\"testFilter\");\n+            request.setAttribute(\"testFilter\", count == null ? 1 : count + 1);\n+            chain.doFilter(request, response);\n+        }\n+\n+        @Override\n+        public void destroy()\n+        {\n+        }\n+    }\n+\n+    @Test\n+    public void testProgrammaticFilters() throws Exception\n+    {\n+        ServletContextHandler context = new ServletContextHandler();\n+        ServletHandler handler = new ServletHandler();\n+        _server.setHandler(context);\n+        context.setHandler(handler);\n \n+        // Add a servlet to report number of filters\n+        handler.addServletWithMapping(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+            {\n+                resp.getOutputStream().print(\"Filters=\" + req.getAttribute(\"testFilter\"));\n+            }\n+        }), \"/\");\n \n-        handler.addServletWithMapping(new ServletHolder(new HelloServlet()\n+        // Add a filter in STOPPED, STARTING and STARTED states\n+        handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n         {\n             @Override\n             public void init() throws ServletException\n             {\n-                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/hello/*\", EnumSet.of(DispatcherType.REQUEST));\n+                handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n             }\n-        }), \"/hello/*\");\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n+        _server.start();\n+        handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        String request =\n+            \"GET /test HTTP/1.0\\n\" +\n+                \"Host: localhost\\n\" +\n+                \"\\n\";\n+        String response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"Filters=3\"));\n+    }\n \n-        _server.dumpStdErr();\n+    public static class TestPServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+        {\n+            resp.getOutputStream().println(req.getRequestURI());\n+        }\n+    }\n \n-        request =\n-            \"GET /hello HTTP/1.0\\n\" +\n-            \"Host: localhost\\n\" +\n-            \"\\n\";\n+    @Test\n+    public void testProgrammaticServlets() throws Exception\n+    {\n+        ServletContextHandler context = new ServletContextHandler();\n+        ServletHandler handler = new ServletHandler();\n+        _server.setHandler(context);\n+        context.setHandler(handler);\n+\n+        // Add a filter in STOPPED, STARTING and STARTED states\n+        handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/one\");\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/two\");\n+            }\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n+        _server.start();\n+        handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/three\");\n+\n+        String request = \"GET /one HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n+        String response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"/one\"));\n+        request = \"GET /two HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n         response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n-        assertThat(response, containsString(\"filter: filter\"));\n-        assertThat(response, containsString(\"Hello World\"));\n+        assertThat(response, containsString(\"/two\"));\n+        request = \"GET /three HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n+        response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"/three\"));\n     }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzNzMzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5397#discussion_r500137335", "bodyText": "Can we also please add tests for all the types of objects: adding servlets, filters and listeners from servlets, filters and listeners to make sure that the jetty apis are doing what we expect", "author": "janbartel", "createdAt": "2020-10-06T09:32:40Z", "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java", "diffHunk": "@@ -1651,21 +1651,35 @@ public void testProgrammaticFilterServlet() throws Exception\n         ServletHandler handler = new ServletHandler();\n         _server.setHandler(context);\n         context.setHandler(handler);\n-        handler.addServletWithMapping(new ServletHolder(new TestServlet()), \"/\");\n+        handler.addServletWithMapping(new ServletHolder(new TestServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/test/*\", EnumSet.of(DispatcherType.REQUEST));\n+            }\n+        }), \"/test\");", "originalCommit": "9a1cadade4ef3b02405d0c7e4e2b9d6c200c550d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e1e0985833e33a97eacdd972b97825eb21cbac0", "chunk": "diff --git a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\nindex efab1cb979..3119dec21a 100644\n--- a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\n+++ b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\n\n@@ -1644,52 +1644,179 @@ public class ServletContextHandlerTest\n         }\n     }\n \n+    public static class TestPListener implements  ServletRequestListener\n+    {\n+        @Override\n+        public void requestInitialized(ServletRequestEvent sre)\n+        {\n+            ServletRequest request = sre.getServletRequest();\n+            Integer count = (Integer)request.getAttribute(\"testRequestListener\");\n+            request.setAttribute(\"testRequestListener\", count == null ? 1 : count + 1);\n+        }\n+\n+        @Override\n+        public void requestDestroyed(ServletRequestEvent sre)\n+        {\n+        }\n+    }\n+\n     @Test\n-    public void testProgrammaticFilterServlet() throws Exception\n+    public void testProgrammaticListener() throws Exception\n     {\n         ServletContextHandler context = new ServletContextHandler();\n         ServletHandler handler = new ServletHandler();\n         _server.setHandler(context);\n         context.setHandler(handler);\n-        handler.addServletWithMapping(new ServletHolder(new TestServlet()\n+\n+        // Add a servlet to report number of listeners\n+        handler.addServletWithMapping(new ServletHolder(new HttpServlet()\n         {\n             @Override\n-            public void init() throws ServletException\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n             {\n-                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/test/*\", EnumSet.of(DispatcherType.REQUEST));\n+                resp.getOutputStream().print(\"Listeners=\" + req.getAttribute(\"testRequestListener\"));\n             }\n-        }), \"/test\");\n+        }), \"/\");\n \n+        // Add a listener in STOPPED, STARTING and STARTED states\n+        handler.addListener(new ListenerHolder(TestPListener.class));\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addListener(new ListenerHolder(TestPListener.class));\n+            }\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n         _server.start();\n+        handler.addListener(new ListenerHolder(TestPListener.class));\n \n         String request =\n             \"GET /test HTTP/1.0\\n\" +\n-            \"Host: localhost\\n\" +\n-            \"\\n\";\n+                \"Host: localhost\\n\" +\n+                \"\\n\";\n         String response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n-        assertThat(response, containsString(\"filter: filter\"));\n-        assertThat(response, containsString(\"Test\"));\n+        assertThat(response, containsString(\"Listeners=3\"));\n+    }\n+\n+    public static class TestPFilter implements Filter\n+    {\n+        @Override\n+        public void init(FilterConfig filterConfig) throws ServletException\n+        {\n+        }\n+\n+        @Override\n+        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n+        {\n+            Integer count = (Integer)request.getAttribute(\"testFilter\");\n+            request.setAttribute(\"testFilter\", count == null ? 1 : count + 1);\n+            chain.doFilter(request, response);\n+        }\n+\n+        @Override\n+        public void destroy()\n+        {\n+        }\n+    }\n+\n+    @Test\n+    public void testProgrammaticFilters() throws Exception\n+    {\n+        ServletContextHandler context = new ServletContextHandler();\n+        ServletHandler handler = new ServletHandler();\n+        _server.setHandler(context);\n+        context.setHandler(handler);\n \n+        // Add a servlet to report number of filters\n+        handler.addServletWithMapping(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+            {\n+                resp.getOutputStream().print(\"Filters=\" + req.getAttribute(\"testFilter\"));\n+            }\n+        }), \"/\");\n \n-        handler.addServletWithMapping(new ServletHolder(new HelloServlet()\n+        // Add a filter in STOPPED, STARTING and STARTED states\n+        handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n         {\n             @Override\n             public void init() throws ServletException\n             {\n-                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/hello/*\", EnumSet.of(DispatcherType.REQUEST));\n+                handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n             }\n-        }), \"/hello/*\");\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n+        _server.start();\n+        handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        String request =\n+            \"GET /test HTTP/1.0\\n\" +\n+                \"Host: localhost\\n\" +\n+                \"\\n\";\n+        String response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"Filters=3\"));\n+    }\n \n-        _server.dumpStdErr();\n+    public static class TestPServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+        {\n+            resp.getOutputStream().println(req.getRequestURI());\n+        }\n+    }\n \n-        request =\n-            \"GET /hello HTTP/1.0\\n\" +\n-            \"Host: localhost\\n\" +\n-            \"\\n\";\n+    @Test\n+    public void testProgrammaticServlets() throws Exception\n+    {\n+        ServletContextHandler context = new ServletContextHandler();\n+        ServletHandler handler = new ServletHandler();\n+        _server.setHandler(context);\n+        context.setHandler(handler);\n+\n+        // Add a filter in STOPPED, STARTING and STARTED states\n+        handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/one\");\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/two\");\n+            }\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n+        _server.start();\n+        handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/three\");\n+\n+        String request = \"GET /one HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n+        String response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"/one\"));\n+        request = \"GET /two HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n         response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n-        assertThat(response, containsString(\"filter: filter\"));\n-        assertThat(response, containsString(\"Hello World\"));\n+        assertThat(response, containsString(\"/two\"));\n+        request = \"GET /three HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n+        response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"/three\"));\n     }\n }\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzNzk2NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5397#discussion_r500137965", "bodyText": "So this means that in the past, adding a listener when the ServletHandler had already started would not have worked, because it never would have been started or initialized - unless someone also happened to add a filter or servlet mapping.", "author": "janbartel", "createdAt": "2020-10-06T09:33:46Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java", "diffHunk": "@@ -800,10 +823,7 @@ public void addListener(ListenerHolder listener)\n     public void setListeners(ListenerHolder[] listeners)\n     {\n         if (listeners != null)\n-            for (ListenerHolder holder : listeners)\n-            {\n-                holder.setServletHandler(this);\n-            }\n+            initializeHolders(listeners);", "originalCommit": "9a1cadade4ef3b02405d0c7e4e2b9d6c200c550d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5MDM0NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5397#discussion_r500190345", "bodyText": "yep - 2nd bug!", "author": "gregw", "createdAt": "2020-10-06T11:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzNzk2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEzODA1Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5397#discussion_r500138057", "bodyText": "Delete this line.", "author": "janbartel", "createdAt": "2020-10-06T09:33:58Z", "path": "jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java", "diffHunk": "@@ -1651,21 +1651,35 @@ public void testProgrammaticFilterServlet() throws Exception\n         ServletHandler handler = new ServletHandler();\n         _server.setHandler(context);\n         context.setHandler(handler);\n-        handler.addServletWithMapping(new ServletHolder(new TestServlet()), \"/\");\n+        handler.addServletWithMapping(new ServletHolder(new TestServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/test/*\", EnumSet.of(DispatcherType.REQUEST));\n+            }\n+        }), \"/test\");\n \n         _server.start();\n \n-\n         String request =\n-            \"GET /hello HTTP/1.0\\n\" +\n+            \"GET /test HTTP/1.0\\n\" +\n             \"Host: localhost\\n\" +\n             \"\\n\";\n         String response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"filter: filter\"));\n         assertThat(response, containsString(\"Test\"));\n \n-        handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n-        handler.addServletWithMapping(new ServletHolder(new HelloServlet()), \"/hello/*\");\n+\n+        handler.addServletWithMapping(new ServletHolder(new HelloServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/hello/*\", EnumSet.of(DispatcherType.REQUEST));\n+            }\n+        }), \"/hello/*\");\n \n         _server.dumpStdErr();", "originalCommit": "9a1cadade4ef3b02405d0c7e4e2b9d6c200c550d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e1e0985833e33a97eacdd972b97825eb21cbac0", "chunk": "diff --git a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\nindex efab1cb979..3119dec21a 100644\n--- a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\n+++ b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/ServletContextHandlerTest.java\n\n@@ -1644,52 +1644,179 @@ public class ServletContextHandlerTest\n         }\n     }\n \n+    public static class TestPListener implements  ServletRequestListener\n+    {\n+        @Override\n+        public void requestInitialized(ServletRequestEvent sre)\n+        {\n+            ServletRequest request = sre.getServletRequest();\n+            Integer count = (Integer)request.getAttribute(\"testRequestListener\");\n+            request.setAttribute(\"testRequestListener\", count == null ? 1 : count + 1);\n+        }\n+\n+        @Override\n+        public void requestDestroyed(ServletRequestEvent sre)\n+        {\n+        }\n+    }\n+\n     @Test\n-    public void testProgrammaticFilterServlet() throws Exception\n+    public void testProgrammaticListener() throws Exception\n     {\n         ServletContextHandler context = new ServletContextHandler();\n         ServletHandler handler = new ServletHandler();\n         _server.setHandler(context);\n         context.setHandler(handler);\n-        handler.addServletWithMapping(new ServletHolder(new TestServlet()\n+\n+        // Add a servlet to report number of listeners\n+        handler.addServletWithMapping(new ServletHolder(new HttpServlet()\n         {\n             @Override\n-            public void init() throws ServletException\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n             {\n-                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/test/*\", EnumSet.of(DispatcherType.REQUEST));\n+                resp.getOutputStream().print(\"Listeners=\" + req.getAttribute(\"testRequestListener\"));\n             }\n-        }), \"/test\");\n+        }), \"/\");\n \n+        // Add a listener in STOPPED, STARTING and STARTED states\n+        handler.addListener(new ListenerHolder(TestPListener.class));\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addListener(new ListenerHolder(TestPListener.class));\n+            }\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n         _server.start();\n+        handler.addListener(new ListenerHolder(TestPListener.class));\n \n         String request =\n             \"GET /test HTTP/1.0\\n\" +\n-            \"Host: localhost\\n\" +\n-            \"\\n\";\n+                \"Host: localhost\\n\" +\n+                \"\\n\";\n         String response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n-        assertThat(response, containsString(\"filter: filter\"));\n-        assertThat(response, containsString(\"Test\"));\n+        assertThat(response, containsString(\"Listeners=3\"));\n+    }\n+\n+    public static class TestPFilter implements Filter\n+    {\n+        @Override\n+        public void init(FilterConfig filterConfig) throws ServletException\n+        {\n+        }\n+\n+        @Override\n+        public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n+        {\n+            Integer count = (Integer)request.getAttribute(\"testFilter\");\n+            request.setAttribute(\"testFilter\", count == null ? 1 : count + 1);\n+            chain.doFilter(request, response);\n+        }\n+\n+        @Override\n+        public void destroy()\n+        {\n+        }\n+    }\n+\n+    @Test\n+    public void testProgrammaticFilters() throws Exception\n+    {\n+        ServletContextHandler context = new ServletContextHandler();\n+        ServletHandler handler = new ServletHandler();\n+        _server.setHandler(context);\n+        context.setHandler(handler);\n \n+        // Add a servlet to report number of filters\n+        handler.addServletWithMapping(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+            {\n+                resp.getOutputStream().print(\"Filters=\" + req.getAttribute(\"testFilter\"));\n+            }\n+        }), \"/\");\n \n-        handler.addServletWithMapping(new ServletHolder(new HelloServlet()\n+        // Add a filter in STOPPED, STARTING and STARTED states\n+        handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n         {\n             @Override\n             public void init() throws ServletException\n             {\n-                handler.addFilterWithMapping(new FilterHolder(new MyFilter()), \"/hello/*\", EnumSet.of(DispatcherType.REQUEST));\n+                handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n             }\n-        }), \"/hello/*\");\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n+        _server.start();\n+        handler.addFilterWithMapping(new FilterHolder(TestPFilter.class), \"/*\", EnumSet.of(DispatcherType.REQUEST));\n+\n+        String request =\n+            \"GET /test HTTP/1.0\\n\" +\n+                \"Host: localhost\\n\" +\n+                \"\\n\";\n+        String response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"Filters=3\"));\n+    }\n \n-        _server.dumpStdErr();\n+    public static class TestPServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n+        {\n+            resp.getOutputStream().println(req.getRequestURI());\n+        }\n+    }\n \n-        request =\n-            \"GET /hello HTTP/1.0\\n\" +\n-            \"Host: localhost\\n\" +\n-            \"\\n\";\n+    @Test\n+    public void testProgrammaticServlets() throws Exception\n+    {\n+        ServletContextHandler context = new ServletContextHandler();\n+        ServletHandler handler = new ServletHandler();\n+        _server.setHandler(context);\n+        context.setHandler(handler);\n+\n+        // Add a filter in STOPPED, STARTING and STARTED states\n+        handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/one\");\n+        handler.addServlet(new ServletHolder(new HttpServlet()\n+        {\n+            @Override\n+            public void init() throws ServletException\n+            {\n+                handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/two\");\n+            }\n+        })\n+        {\n+            {\n+                setInitOrder(1);\n+            }\n+        });\n+        _server.start();\n+        handler.addServletWithMapping(new ServletHolder(TestPServlet.class), \"/three\");\n+\n+        String request = \"GET /one HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n+        String response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"/one\"));\n+        request = \"GET /two HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n         response = _connector.getResponse(request);\n         assertThat(response, containsString(\"200 OK\"));\n-        assertThat(response, containsString(\"filter: filter\"));\n-        assertThat(response, containsString(\"Hello World\"));\n+        assertThat(response, containsString(\"/two\"));\n+        request = \"GET /three HTTP/1.0\\n\" + \"Host: localhost\\n\" + \"\\n\";\n+        response = _connector.getResponse(request);\n+        assertThat(response, containsString(\"200 OK\"));\n+        assertThat(response, containsString(\"/three\"));\n     }\n }\n\\ No newline at end of file\n"}}, {"oid": "9e1e0985833e33a97eacdd972b97825eb21cbac0", "url": "https://github.com/eclipse/jetty.project/commit/9e1e0985833e33a97eacdd972b97825eb21cbac0", "message": "Fixes #5378 Setting Holders during STARTING\n\nHolders are now started/initialized if needed by a new utility method", "committedDate": "2020-10-06T12:51:19Z", "type": "commit"}]}