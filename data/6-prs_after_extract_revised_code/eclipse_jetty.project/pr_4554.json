{"pr_number": 4554, "pr_title": "Fixes #2788 - Graceful close of HTTP/2 Connection.", "pr_createdAt": "2020-02-06T15:33:39Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4554", "timeline": [{"oid": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "url": "https://github.com/eclipse/jetty.project/commit/92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "message": "Fixes #2788 - Graceful close of HTTP/2 Connection.\n\nMade HTTP2SessionContainer implement Graceful, so that it can be found\nin the component hierarchy and can shutdown all sessions.\nModified HTTP2ServerSession to reject requests if already closed/shutdown.\nImplemented shutdown in HTTP2Session.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-02-06T15:32:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzODQwNA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376338404", "bodyText": "If the above CAS fails, you're going to return an uncompleted callback.", "author": "lorban", "createdAt": "2020-02-07T11:12:10Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)\n+        {\n+            CloseState current = closed.get();\n+            if (current == CloseState.NOT_CLOSED)\n+            {\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                    callback.succeeded();\n-                    return false;\n+                        LOG.debug(\"Shutting down {}\", this);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+                    closeCallback = new Callback.Completable();\n+                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+                    if (streamCount.compareAndSet(0, 1, 0, 0))\n+                        control(null, closeCallback, closeFrame);\n+                    return closeCallback;", "originalCommit": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0MjQwNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376442405", "bodyText": "That is correct. Other threads will complete the callback.", "author": "sbordet", "createdAt": "2020-02-07T15:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzODQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 298161a9e1..075cde57e5 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -720,6 +720,8 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Ignoring shutdown, already closed\");\n                 Callback.Completable result = closeCallback;\n+                // Result may be null if the shutdown is in progress,\n+                // don't wait and return a completed CompletableFuture.\n                 return result != null ? result : CompletableFuture.completedFuture(null);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MzgzMg==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376343832", "bodyText": "Implementors of ISession (HTTP2Session?) don't override equals/hashcode. I'm wary of the side-effects this could have.", "author": "lorban", "createdAt": "2020-02-07T11:27:00Z", "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();", "originalCommit": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1OTE1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376359154", "bodyText": "As we discussed, if you protected this sessions collection with a ReentrantReadWriteLock using the read lock to modify the collection and the write lock to shut it down, you could easily guarantee that each session's shutdown method would only ever be called once, and be done with that AtomicBiInteger logic.\nThis would make this code a ton simpler to maintain in the long run.", "author": "lorban", "createdAt": "2020-02-07T12:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MzgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0MzA1NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376443055", "bodyText": "Not implementing hashCode() and equals() is by design, I really want session objects to be unique. I'll give rwlock a try.", "author": "sbordet", "createdAt": "2020-02-07T15:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0MzgzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0OTk5NA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376349994", "bodyText": "The Lo counter might be > 0 when you reach this line, couldn't it?", "author": "lorban", "createdAt": "2020-02-07T11:44:10Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -1041,10 +1068,18 @@ public void onFrame(Frame frame)\n \n     protected void onStreamOpened(IStream stream)\n     {\n+        streamCount.addAndGetLo(1);\n     }\n \n     protected void onStreamClosed(IStream stream)\n     {\n+        if (streamCount.addAndGetLo(-1) == 0)\n+        {\n+            Callback.Completable callback = closeCallback;\n+            // Only send the close frame if we can flip Hi, see shutdown().\n+            if (callback != null && streamCount.compareAndSetHi(0, 1))\n+                control(null, callback, closeFrame);", "originalCommit": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NzUzNw==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376487537", "bodyText": "Good point!", "author": "sbordet", "createdAt": "2020-02-07T16:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM0OTk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 298161a9e1..075cde57e5 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -1077,7 +1079,7 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n         {\n             Callback.Completable callback = closeCallback;\n             // Only send the close frame if we can flip Hi, see shutdown().\n-            if (callback != null && streamCount.compareAndSetHi(0, 1))\n+            if (callback != null && streamCount.compareAndSet(0, 1, 0, 0))\n                 control(null, callback, closeFrame);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1MjE5OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376352199", "bodyText": "This means you may return a CompletableFuture that doesn't block until shutdown is over. Is that desirable?", "author": "lorban", "createdAt": "2020-02-07T11:50:11Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)\n+        {\n+            CloseState current = closed.get();\n+            if (current == CloseState.NOT_CLOSED)\n+            {\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n                     if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                    callback.succeeded();\n-                    return false;\n+                        LOG.debug(\"Shutting down {}\", this);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+                    closeCallback = new Callback.Completable();\n+                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+                    if (streamCount.compareAndSet(0, 1, 0, 0))\n+                        control(null, closeCallback, closeFrame);\n+                    return closeCallback;\n                 }\n             }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring shutdown, already closed\");\n+                Callback.Completable result = closeCallback;\n+                return result != null ? result : CompletableFuture.completedFuture(null);", "originalCommit": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0Mzc3OA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376443778", "bodyText": "It returns a CompletableFuture. Whether the caller wants to block on it, or attach a timeout, or attach some other callback it's in the hands of the caller.", "author": "sbordet", "createdAt": "2020-02-07T15:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1MjE5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 298161a9e1..075cde57e5 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -720,6 +720,8 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Ignoring shutdown, already closed\");\n                 Callback.Completable result = closeCallback;\n+                // Result may be null if the shutdown is in progress,\n+                // don't wait and return a completed CompletableFuture.\n                 return result != null ? result : CompletableFuture.completedFuture(null);\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NDM4OA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376354388", "bodyText": "Don't you have to also call LifeCycle.stop on the session when isShutdown is true?", "author": "lorban", "createdAt": "2020-02-07T11:56:19Z", "path": "jetty-http2/http2-server/src/main/java/org/eclipse/jetty/http2/server/AbstractHTTP2ServerConnectionFactory.java", "diffHunk": "@@ -296,22 +300,25 @@ protected ServerParser newServerParser(Connector connector, ServerParser.Listene\n     }\n \n     @ManagedObject(\"The container of HTTP/2 sessions\")\n-    public static class HTTP2SessionContainer implements Connection.Listener, Dumpable\n+    public static class HTTP2SessionContainer implements Connection.Listener, Graceful, Dumpable\n     {\n-        private final Set<Session> sessions = ConcurrentHashMap.newKeySet();\n+        private final Set<ISession> sessions = ConcurrentHashMap.newKeySet();\n+        private final AtomicReference<CompletableFuture<Void>> shutdown = new AtomicReference<>();\n \n         @Override\n         public void onOpened(Connection connection)\n         {\n-            Session session = ((HTTP2Connection)connection).getSession();\n+            ISession session = ((HTTP2Connection)connection).getSession();\n             sessions.add(session);\n             LifeCycle.start(session);\n+            if (isShutdown())\n+                shutdown(session);", "originalCommit": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0OTEyNg==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376449126", "bodyText": "No, as shutdown will initiate the close, and eventually the connection will be closed, calling onClose() which would remove the session and stop it.", "author": "sbordet", "createdAt": "2020-02-07T15:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NDM4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1ODI4NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r376358285", "bodyText": "I would clearly document that this shutdown method has to be idempotent as HTTP2SessionContainer might call it twice, and explain the circumstances under which it can be called twice.", "author": "lorban", "createdAt": "2020-02-07T12:07:11Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,54 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()", "originalCommit": "92d9d46f8efc5740a3c645cd6065b29a0377ed9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 298161a9e1..075cde57e5 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -720,6 +720,8 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n                 if (LOG.isDebugEnabled())\n                     LOG.debug(\"Ignoring shutdown, already closed\");\n                 Callback.Completable result = closeCallback;\n+                // Result may be null if the shutdown is in progress,\n+                // don't wait and return a completed CompletableFuture.\n                 return result != null ? result : CompletableFuture.completedFuture(null);\n             }\n         }\n"}}, {"oid": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "url": "https://github.com/eclipse/jetty.project/commit/8b1a669e65f5b97d89883b05eb7d649ae7275081", "message": "Issue #2788 - Graceful close of HTTP/2 Connection.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-02-07T16:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTcyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379825725", "bodyText": "Can't the whole while (true) loop be replaces with:\n    if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.REMOTELY_CLOSED)\n    {\n        closeFrame = frame;\n        notifyClose(this, frame, new DisconnectCallback());\n        return;\n    }\n    if (LOG.isDebugEnable())\n        LOG.debug(\"Ignored {}, alread closed\", frame);\n    return\nThe only time it loops is if the CAS fails and then it is going to return anyway!", "author": "gregw", "createdAt": "2020-02-15T11:22:59Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -439,27 +442,23 @@ public void onGoAway(final GoAwayFrame frame)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)", "originalCommit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjI4OQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032289", "bodyText": "Done.", "author": "sbordet", "createdAt": "2020-03-10T00:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTcyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a6c9b8049e5b02912f3b07498ddc21385281bb9", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 075cde57e5..576e352caa 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -439,27 +439,17 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Received {}\", frame);\n \n-        while (true)\n+        if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.REMOTELY_CLOSED))\n         {\n-            CloseState current = closed.get();\n-            if (current == CloseState.NOT_CLOSED)\n-            {\n-                if (closed.compareAndSet(current, CloseState.REMOTELY_CLOSED))\n-                {\n-                    // We received a GO_AWAY, so try to write\n-                    // what's in the queue and then disconnect.\n-                    closeFrame = frame;\n-                    notifyClose(this, frame, new DisconnectCallback());\n-                    return;\n-                }\n-            }\n-            else\n-            {\n-                if (LOG.isDebugEnabled())\n-                    LOG.debug(\"Ignored {}, already closed\", frame);\n-                return;\n-            }\n+            // We received a GO_AWAY, so try to write\n+            // what's in the queue and then disconnect.\n+            closeFrame = frame;\n+            notifyClose(this, frame, new DisconnectCallback());\n+            return;\n         }\n+\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Ignored {}, already closed\", frame);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc1Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379825752", "bodyText": "ditto loop not needed!", "author": "gregw", "createdAt": "2020-02-15T11:23:20Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,56 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))", "originalCommit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjMyMg==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032322", "bodyText": "Done.", "author": "sbordet", "createdAt": "2020-03-10T00:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3a6c9b8049e5b02912f3b07498ddc21385281bb9", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 075cde57e5..576e352caa 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -671,60 +661,42 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n     @Override\n     public boolean close(int error, String reason, Callback callback)\n     {\n-        while (true)\n+        if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.LOCALLY_CLOSED))\n         {\n-            CloseState current = closed.get();\n-            if (current == CloseState.NOT_CLOSED)\n-            {\n-                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Closing {}/{}\", error, reason);\n-                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                    control(null, callback, closeFrame);\n-                    return true;\n-                }\n-            }\n-            else\n-            {\n-                if (LOG.isDebugEnabled())\n-                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                callback.succeeded();\n-                return false;\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Closing {}/{}\", error, reason);\n+            closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+            control(null, callback, closeFrame);\n+            return true;\n         }\n+\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+        callback.succeeded();\n+        return false;\n     }\n \n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        while (true)\n+        if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.LOCALLY_CLOSED))\n         {\n-            CloseState current = closed.get();\n-            if (current == CloseState.NOT_CLOSED)\n-            {\n-                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Shutting down {}\", this);\n-                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n-                    closeCallback = new Callback.Completable();\n-                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n-                    if (streamCount.compareAndSet(0, 1, 0, 0))\n-                        control(null, closeCallback, closeFrame);\n-                    return closeCallback;\n-                }\n-            }\n-            else\n-            {\n-                if (LOG.isDebugEnabled())\n-                    LOG.debug(\"Ignoring shutdown, already closed\");\n-                Callback.Completable result = closeCallback;\n-                // Result may be null if the shutdown is in progress,\n-                // don't wait and return a completed CompletableFuture.\n-                return result != null ? result : CompletableFuture.completedFuture(null);\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Shutting down {}\", this);\n+            closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+            shutdownCallback = new Callback.Completable();\n+            // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+            if (streamCount.compareAndSet(0, 1, 0, 0))\n+                control(null, shutdownCallback, closeFrame);\n+            return shutdownCallback;\n         }\n+\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Ignoring shutdown, already closed\");\n+        Callback.Completable result = shutdownCallback;\n+        // Result may be null if the shutdown is in progress,\n+        // don't wait and return a completed CompletableFuture.\n+        return result != null ? result : CompletableFuture.completedFuture(null);\n     }\n \n     private GoAwayFrame newGoAwayFrame(CloseState closeState, int error, String reason)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc4MA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379825780", "bodyText": "ditto loop not needed", "author": "gregw", "createdAt": "2020-02-15T11:23:49Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -675,26 +674,56 @@ public boolean close(int error, String reason, Callback callback)\n         while (true)\n         {\n             CloseState current = closed.get();\n-            switch (current)\n+            if (current == CloseState.NOT_CLOSED)\n             {\n-                case NOT_CLOSED:\n+                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n                 {\n-                    if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                    {\n-                        closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                        control(null, callback, closeFrame);\n-                        return true;\n-                    }\n-                    break;\n+                    if (LOG.isDebugEnabled())\n+                        LOG.debug(\"Closing {}/{}\", error, reason);\n+                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+                    control(null, callback, closeFrame);\n+                    return true;\n                 }\n-                default:\n+            }\n+            else\n+            {\n+                if (LOG.isDebugEnabled())\n+                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+                callback.succeeded();\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> shutdown()\n+    {\n+        while (true)", "originalCommit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM0MA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032340", "bodyText": "Done.", "author": "sbordet", "createdAt": "2020-03-10T00:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "3a6c9b8049e5b02912f3b07498ddc21385281bb9", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 075cde57e5..576e352caa 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -671,60 +661,42 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n     @Override\n     public boolean close(int error, String reason, Callback callback)\n     {\n-        while (true)\n+        if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.LOCALLY_CLOSED))\n         {\n-            CloseState current = closed.get();\n-            if (current == CloseState.NOT_CLOSED)\n-            {\n-                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Closing {}/{}\", error, reason);\n-                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n-                    control(null, callback, closeFrame);\n-                    return true;\n-                }\n-            }\n-            else\n-            {\n-                if (LOG.isDebugEnabled())\n-                    LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n-                callback.succeeded();\n-                return false;\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Closing {}/{}\", error, reason);\n+            closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, error, reason);\n+            control(null, callback, closeFrame);\n+            return true;\n         }\n+\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Ignoring close {}/{}, already closed\", error, reason);\n+        callback.succeeded();\n+        return false;\n     }\n \n     @Override\n     public CompletableFuture<Void> shutdown()\n     {\n-        while (true)\n+        if (closed.compareAndSet(CloseState.NOT_CLOSED, CloseState.LOCALLY_CLOSED))\n         {\n-            CloseState current = closed.get();\n-            if (current == CloseState.NOT_CLOSED)\n-            {\n-                if (closed.compareAndSet(current, CloseState.LOCALLY_CLOSED))\n-                {\n-                    if (LOG.isDebugEnabled())\n-                        LOG.debug(\"Shutting down {}\", this);\n-                    closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n-                    closeCallback = new Callback.Completable();\n-                    // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n-                    if (streamCount.compareAndSet(0, 1, 0, 0))\n-                        control(null, closeCallback, closeFrame);\n-                    return closeCallback;\n-                }\n-            }\n-            else\n-            {\n-                if (LOG.isDebugEnabled())\n-                    LOG.debug(\"Ignoring shutdown, already closed\");\n-                Callback.Completable result = closeCallback;\n-                // Result may be null if the shutdown is in progress,\n-                // don't wait and return a completed CompletableFuture.\n-                return result != null ? result : CompletableFuture.completedFuture(null);\n-            }\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Shutting down {}\", this);\n+            closeFrame = newGoAwayFrame(CloseState.LOCALLY_CLOSED, ErrorCode.NO_ERROR.code, \"shutdown\");\n+            shutdownCallback = new Callback.Completable();\n+            // Only send the close frame when we can flip Hi and Lo = 0, see onStreamClosed().\n+            if (streamCount.compareAndSet(0, 1, 0, 0))\n+                control(null, shutdownCallback, closeFrame);\n+            return shutdownCallback;\n         }\n+\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"Ignoring shutdown, already closed\");\n+        Callback.Completable result = shutdownCallback;\n+        // Result may be null if the shutdown is in progress,\n+        // don't wait and return a completed CompletableFuture.\n+        return result != null ? result : CompletableFuture.completedFuture(null);\n     }\n \n     private GoAwayFrame newGoAwayFrame(CloseState closeState, int error, String reason)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNjIzNA==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r379826234", "bodyText": "I don't like having two CaS operations serially.  This one should be a loop something like:\nCallback callback;\nwhile(true)\n{\n    long count = streamCount.get();\n    int streams = AtomicBiInteger.getLo(count) - 1;\n    int close = AtomicBiInteger.getHi(count);\n    callback =   (streams == 0 && close == 1) ? closeCallback : null;\n    if (streamCount.compareAndSet(count, 0, streams))\n        break;\n}\ncontrol(null, callback, closeFrame);", "author": "gregw", "createdAt": "2020-02-15T11:33:25Z", "path": "jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java", "diffHunk": "@@ -1041,10 +1070,18 @@ public void onFrame(Frame frame)\n \n     protected void onStreamOpened(IStream stream)\n     {\n+        streamCount.addAndGetLo(1);\n     }\n \n     protected void onStreamClosed(IStream stream)\n     {\n+        if (streamCount.addAndGetLo(-1) == 0)\n+        {\n+            Callback.Completable callback = closeCallback;\n+            // Only send the close frame if we can flip Hi, see shutdown().\n+            if (callback != null && streamCount.compareAndSet(0, 1, 0, 0))", "originalCommit": "8b1a669e65f5b97d89883b05eb7d649ae7275081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjUwNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4554#discussion_r390032505", "bodyText": "Done, actually in a different way because the snippet above is wrong, but I implemented a single CAS.", "author": "sbordet", "createdAt": "2020-03-10T00:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNjIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "3a6c9b8049e5b02912f3b07498ddc21385281bb9", "chunk": "diff --git a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\nindex 075cde57e5..576e352caa 100644\n--- a/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n+++ b/jetty-http2/http2-common/src/main/java/org/eclipse/jetty/http2/HTTP2Session.java\n\n@@ -1075,13 +1047,23 @@ public abstract class HTTP2Session extends ContainerLifeCycle implements ISessio\n \n     protected void onStreamClosed(IStream stream)\n     {\n-        if (streamCount.addAndGetLo(-1) == 0)\n+        Callback callback = null;\n+        while (true)\n         {\n-            Callback.Completable callback = closeCallback;\n-            // Only send the close frame if we can flip Hi, see shutdown().\n-            if (callback != null && streamCount.compareAndSet(0, 1, 0, 0))\n-                control(null, callback, closeFrame);\n+            long encoded = streamCount.get();\n+            int closed = AtomicBiInteger.getHi(encoded);\n+            int streams = AtomicBiInteger.getLo(encoded) - 1;\n+            if (streams == 0 && closed == 0)\n+            {\n+                callback = shutdownCallback;\n+                closed = 1;\n+            }\n+            if (streamCount.compareAndSet(encoded, closed, streams))\n+                break;\n         }\n+        // Only send the close frame if we can flip Hi and Lo = 0, see shutdown().\n+        if (callback != null)\n+            control(null, callback, closeFrame);\n     }\n \n     @Override\n"}}, {"oid": "916b3e56ec830835b012f9ac4589681d396c4c92", "url": "https://github.com/eclipse/jetty.project/commit/916b3e56ec830835b012f9ac4589681d396c4c92", "message": "Merged 'jetty-10.0.x' into 'jetty-10.0.x-2788-graceful_http2_close'.", "committedDate": "2020-03-09T19:01:25Z", "type": "commit"}, {"oid": "3a6c9b8049e5b02912f3b07498ddc21385281bb9", "url": "https://github.com/eclipse/jetty.project/commit/3a6c9b8049e5b02912f3b07498ddc21385281bb9", "message": "Issue #2788 - Graceful close of HTTP/2 Connection.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>", "committedDate": "2020-03-10T00:29:13Z", "type": "commit"}]}