{"pr_number": 5565, "pr_title": "Fix #5562 Improve HTTP Field cache allocation", "pr_createdAt": "2020-11-03T13:29:40Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5565", "timeline": [{"oid": "351bfa5585367fab8bd9c796fcc6bd6d122c60bd", "url": "https://github.com/eclipse/jetty.project/commit/351bfa5585367fab8bd9c796fcc6bd6d122c60bd", "message": "Fix #5562 Improve HTTP Field cache allocation\n\nFix #5562 by initially putting cacheable fields into a inexpensive arraylist.\nOnly create the Trie (with space and complexity costs) if a second request is received.", "committedDate": "2020-11-03T13:28:51Z", "type": "commit"}, {"oid": "48f5abde59af41886ba554364c7503b3b0185011", "url": "https://github.com/eclipse/jetty.project/commit/48f5abde59af41886ba554364c7503b3b0185011", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5562-improve-field-cache", "committedDate": "2020-11-03T15:20:49Z", "type": "commit"}, {"oid": "2a3c58914715bc4a01708109c66592af6a89bedf", "url": "https://github.com/eclipse/jetty.project/commit/2a3c58914715bc4a01708109c66592af6a89bedf", "message": "Merge remote-tracking branch 'origin/jetty-9.4.x' into jetty-9.4.x-5562-improve-field-cache", "committedDate": "2020-11-04T07:46:45Z", "type": "commit"}, {"oid": "70542dd121a15d8c9f39898e1fac66deefde3b67", "url": "https://github.com/eclipse/jetty.project/commit/70542dd121a15d8c9f39898e1fac66deefde3b67", "message": "Fixed NPE", "committedDate": "2020-11-04T08:11:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4Mzk4Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517183987", "bodyText": "I would rather have HttpHeader.isPseudo() instead.", "author": "sbordet", "createdAt": "2020-11-04T08:53:24Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -231,7 +235,7 @@\n         // Add headers with null values so HttpParser can avoid looking up name again for unknown values\n         for (HttpHeader h : HttpHeader.values())\n         {\n-            if (!CACHE.put(new HttpField(h, (String)null)))\n+            if (!h.asString().startsWith(\":\") && !CACHE.put(new HttpField(h, (String)null)))", "originalCommit": "70542dd121a15d8c9f39898e1fac66deefde3b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MzU5OA==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517193598", "bodyText": "OK", "author": "gregw", "createdAt": "2020-11-04T09:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4Mzk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5660e2882512de808f6b38196d61978087ffb5f2", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\nindex 3f0e75333e..c6f18ffd60 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n\n@@ -235,7 +235,7 @@ public class HttpParser\n         // Add headers with null values so HttpParser can avoid looking up name again for unknown values\n         for (HttpHeader h : HttpHeader.values())\n         {\n-            if (!h.asString().startsWith(\":\") && !CACHE.put(new HttpField(h, (String)null)))\n+            if (!h.isPseudo() && !CACHE.put(new HttpField(h, (String)null)))\n                 throw new IllegalStateException(\"CACHE FULL\");\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4NDc4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517184781", "bodyText": "Ehm, this is not readable. It's the call to a getter method, whose return value is not used, but the comment seem to imply an if statement?\nThe method should renamed to something that is more intuitive -- now I have to look at the implementation to understand why there is this naked getter call without using the return value.", "author": "sbordet", "createdAt": "2020-11-04T08:54:45Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -884,10 +888,8 @@ else if (n == HttpTokens.LINE_FEED)\n                             }\n                             checkVersion();\n \n-                            // Should we try to cache header fields?\n-                            int headerCache = _handler.getHeaderCacheSize();\n-                            if (_fieldCache == null && _version.getVersion() >= HttpVersion.HTTP_1_1.getVersion() && headerCache > 0)\n-                                _fieldCache = new ArrayTernaryTrie<>(headerCache);\n+                            // Should we cache header fields?\n+                            getFieldCache();", "originalCommit": "70542dd121a15d8c9f39898e1fac66deefde3b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5660e2882512de808f6b38196d61978087ffb5f2", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\nindex 3f0e75333e..c6f18ffd60 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n\n@@ -889,7 +889,7 @@ public class HttpParser\n                             checkVersion();\n \n                             // Should we cache header fields?\n-                            getFieldCache();\n+                            createFieldCacheIfNeeded();\n \n                             setState(State.HEADER);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4ODc3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517188773", "bodyText": "In this branch we have a cache size > 0, we are HTTP/1.1 and there is no Connection: close, so chances are that this parser will see another request, likely more than 1.\nI would remove entirely the _cacheableFields handling, and just use the trie -- we have already optimized its creation.", "author": "sbordet", "createdAt": "2020-11-04T09:01:19Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1052,18 +1058,42 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                     case COOKIE:\n                     case CACHE_CONTROL:\n                     case USER_AGENT:\n-                        addToConnectionTrie = _fieldCache != null && _field == null;\n+                        addToFieldCache = _field == null;\n                         break;\n \n                     default:\n                         break;\n                 }\n \n-                if (addToConnectionTrie && !_fieldCache.isFull() && _header != null && _valueString != null)\n+                // Cache field?\n+                if (addToFieldCache && _header != null && _valueString != null)\n                 {\n-                    if (_field == null)\n-                        _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n-                    _fieldCache.put(_field);\n+                    if (_fieldCache != null)\n+                    {\n+                        // If a non full cache already exists, then we can add to it.\n+                        if (!_fieldCache.isFull())\n+                        {\n+                            if (_field == null)\n+                                _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n+                            _fieldCache.put(_field);\n+                        }\n+                    }\n+                    else if (_cacheableFields != NO_CACHE)\n+                    {\n+                        if (_handler.getHeaderCacheSize() <= 0 || (_version != null && _version.getVersion() != HttpVersion.HTTP_1_1.getVersion()))\n+                            // Don't cache any fields\n+                            _cacheableFields = NO_CACHE;\n+                        else\n+                        {\n+                            // This must be the first request seen by this parser, so just create a simple list of\n+                            // headers that can later to converted to _fieldCache if another request comes.\n+                            if (_cacheableFields == null)\n+                                _cacheableFields = new ArrayList<>();\n+                            if (_field == null)\n+                                _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n+                            _cacheableFields.add(_field);", "originalCommit": "70542dd121a15d8c9f39898e1fac66deefde3b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NDgwMw==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517194803", "bodyText": "The problem is that we don't know if we will get a Connection: close header before or after any cacheable fields.... which is why I want the list.\nIf Connection:close is the last field, we could have allocated a big cache, done the work to fill it up and then find out at the last moment that it is not persistent.", "author": "gregw", "createdAt": "2020-11-04T09:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4ODc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5NzI0Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517197242", "bodyText": "A client sending HTTP/1.1 first requests with Connection: close is not a common case, so you are right that we may see the Connection: close header after we have created the trie, but that would be a rare case for which I don't think the extra complexity is warranted.", "author": "sbordet", "createdAt": "2020-11-04T09:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4ODc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwMzAyMA==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517203020", "bodyText": "I don't know why you think it is a rare case?   For clients sending a 1 time HTTP/1.1 request we have no data on if the cacheable fields likeUser-Agent and Cookie will come before or after a Connection: close.\nCreating the list means that we have minimal cost for all 1 request connections and only slight extra cost for the first request of a multiple request connections.\nNot creating the list means that we have significant cost for an unknown proportion of 1 request connections and slight saving on multiple request connections.\nSo while I don't like the list that much, I think it is best average solution.\nAn alternative would be to always make the list, then when a new request comes in we can look at what we have cached and what is in the list.  We can then really see if fields are likely to be the same or if they are actually changing.  We could then make smarter decisions about full caches and this perhaps have smaller caches.   I have to think about this a bit more, but having the list on the first request is a step towards this if it is workable.", "author": "gregw", "createdAt": "2020-11-04T09:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4ODc3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxMjMzMA==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517212330", "bodyText": "If we always created the list of cacheable fields and then only created/updated the actual cache on the next request then we would have a bit more info.\nIf the cache is perfect (ie contains all the cacheable fields that exist and they never change between requests), then on subsequent requests the cacheableField list will be empty.\nOn the 2nd and later requests if there are fields in the list then there are several possibilities\n\nIf the field name is not in the cache, then either the cache is full or it is a new field.   In the later case we can add the field.\nIf the field name is in the cache, then it is a changed value for that field.  Either that field is going to continually change (eg digest auth), it has changed once and will be the same afterwards, it is one of several values that may alternate (eg User-Agent on an aggregated connection).\n\nHmmm not sure there is anything smart we can do with this information.  I think it is just add the filed to the cache if there is space.   So always having the list might save a little bit of work on the Nth request of a N request stream.  Not worth it.\nSo I still think the list of the 1st request a reasonable compromise.", "author": "gregw", "createdAt": "2020-11-04T09:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE4ODc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5660e2882512de808f6b38196d61978087ffb5f2", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\nindex 3f0e75333e..c6f18ffd60 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n\n@@ -1081,8 +1081,10 @@ public class HttpParser\n                     else if (_cacheableFields != NO_CACHE)\n                     {\n                         if (_handler.getHeaderCacheSize() <= 0 || (_version != null && _version.getVersion() != HttpVersion.HTTP_1_1.getVersion()))\n+                        {\n                             // Don't cache any fields\n                             _cacheableFields = NO_CACHE;\n+                        }\n                         else\n                         {\n                             // This must be the first request seen by this parser, so just create a simple list of\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE5MjM4NA==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517192384", "bodyText": "Add braces to this if block.", "author": "sbordet", "createdAt": "2020-11-04T09:07:25Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1052,18 +1058,42 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                     case COOKIE:\n                     case CACHE_CONTROL:\n                     case USER_AGENT:\n-                        addToConnectionTrie = _fieldCache != null && _field == null;\n+                        addToFieldCache = _field == null;\n                         break;\n \n                     default:\n                         break;\n                 }\n \n-                if (addToConnectionTrie && !_fieldCache.isFull() && _header != null && _valueString != null)\n+                // Cache field?\n+                if (addToFieldCache && _header != null && _valueString != null)\n                 {\n-                    if (_field == null)\n-                        _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n-                    _fieldCache.put(_field);\n+                    if (_fieldCache != null)\n+                    {\n+                        // If a non full cache already exists, then we can add to it.\n+                        if (!_fieldCache.isFull())\n+                        {\n+                            if (_field == null)\n+                                _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n+                            _fieldCache.put(_field);\n+                        }\n+                    }\n+                    else if (_cacheableFields != NO_CACHE)\n+                    {\n+                        if (_handler.getHeaderCacheSize() <= 0 || (_version != null && _version.getVersion() != HttpVersion.HTTP_1_1.getVersion()))\n+                            // Don't cache any fields\n+                            _cacheableFields = NO_CACHE;", "originalCommit": "70542dd121a15d8c9f39898e1fac66deefde3b67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5660e2882512de808f6b38196d61978087ffb5f2", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\nindex 3f0e75333e..c6f18ffd60 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n\n@@ -1081,8 +1081,10 @@ public class HttpParser\n                     else if (_cacheableFields != NO_CACHE)\n                     {\n                         if (_handler.getHeaderCacheSize() <= 0 || (_version != null && _version.getVersion() != HttpVersion.HTTP_1_1.getVersion()))\n+                        {\n                             // Don't cache any fields\n                             _cacheableFields = NO_CACHE;\n+                        }\n                         else\n                         {\n                             // This must be the first request seen by this parser, so just create a simple list of\n"}}, {"oid": "5660e2882512de808f6b38196d61978087ffb5f2", "url": "https://github.com/eclipse/jetty.project/commit/5660e2882512de808f6b38196d61978087ffb5f2", "message": "Feedback from review\n\nCreate `HttpHeader.isPseudo()`` method\nimproved clarity with `createFieldCacheIfNeeded()``", "committedDate": "2020-11-04T09:17:57Z", "type": "commit"}, {"oid": "339c86deac90a51300a84aba48b16f70103b3eaa", "url": "https://github.com/eclipse/jetty.project/commit/339c86deac90a51300a84aba48b16f70103b3eaa", "message": "Feedback from review\n\nOnly defer Trie creation to first cacheable field, not until next request.", "committedDate": "2020-11-04T10:29:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3OTYwNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517879605", "bodyText": "String.contains() is case sensitive, so this test would fail for _valueString=\"Close,Other\", right?\nI think using the previous version was expensive, but it was on the last expression of the || so executed only rarely.", "author": "sbordet", "createdAt": "2020-11-05T08:45:24Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1034,14 +1031,14 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                             _field = new HostPortHttpField(_header,\n                                 _compliances.contains(HttpComplianceSection.FIELD_NAME_CASE_INSENSITIVE) ? _header.asString() : _headerString,\n                                 _valueString);\n-                            addToConnectionTrie = _fieldCache != null;\n+                            addToFieldCache = true;\n                         }\n                         break;\n \n                     case CONNECTION:\n                         // Don't cache headers if not persistent\n-                        if (HttpHeaderValue.CLOSE.is(_valueString) || new QuotedCSV(_valueString).getValues().stream().anyMatch(HttpHeaderValue.CLOSE::is))\n-                            _fieldCache = null;\n+                        if (_handler.getHeaderCacheSize() > 0 && (HttpHeaderValue.CLOSE.is(_valueString) || _valueString.contains(HttpHeaderValue.CLOSE.asString())))", "originalCommit": "339c86deac90a51300a84aba48b16f70103b3eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMzQ0OA==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517933448", "bodyText": "Let me convert to the HttpField.contains method, which is not expensive", "author": "gregw", "createdAt": "2020-11-05T10:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3OTYwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\nindex 0e7bdd8520..8f9eab2f35 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n\n@@ -1037,7 +1036,9 @@ public class HttpParser\n \n                     case CONNECTION:\n                         // Don't cache headers if not persistent\n-                        if (_handler.getHeaderCacheSize() > 0 && (HttpHeaderValue.CLOSE.is(_valueString) || _valueString.contains(HttpHeaderValue.CLOSE.asString())))\n+                        if (_field == null)\n+                            _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n+                        if (_handler.getHeaderCacheSize() > 0 && _field.contains(HttpHeaderValue.CLOSE.asString()))\n                             _fieldCache = NO_CACHE;\n                         break;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MTcwNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517881705", "bodyText": "If it's empty, should be irrelevant if it's case sensitive, so perhaps we can make this anonymous class a static final?\nMethod isCaseSensitive() is only used internally by the implementation (e.g. by put(...), and since this is the empty implementation it should not matter.\nCan it be moved to the interface, something like Trie.EMPTY?", "author": "sbordet", "createdAt": "2020-11-05T08:48:52Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java", "diffHunk": "@@ -81,4 +82,57 @@ public boolean isCaseInsensitive()\n     {\n         return _caseInsensitive;\n     }\n+\n+    public static <T> Trie<T> emptyTrie(boolean caseInsensitive)\n+    {\n+        return new AbstractTrie<T>(caseInsensitive)", "originalCommit": "339c86deac90a51300a84aba48b16f70103b3eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzNzAzMw==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517937033", "bodyText": "A constant like Trie.EMPTY does not work because it is a generic type, so you need a method.  Thus may as well have the caseinsensitive field.   But I've moved to the interface.", "author": "gregw", "createdAt": "2020-11-05T10:15:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MTcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java b/jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java\nindex 4c4c7d2540..cffde13163 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java\n\n@@ -82,57 +81,4 @@ public abstract class AbstractTrie<V> implements Trie<V>\n     {\n         return _caseInsensitive;\n     }\n-\n-    public static <T> Trie<T> emptyTrie(boolean caseInsensitive)\n-    {\n-        return new AbstractTrie<T>(caseInsensitive)\n-        {\n-            @Override\n-            public boolean put(String s, T t)\n-            {\n-                return false;\n-            }\n-\n-            @Override\n-            public T get(String s, int offset, int len)\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public T get(ByteBuffer b, int offset, int len)\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public T getBest(String s, int offset, int len)\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public T getBest(ByteBuffer b, int offset, int len)\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public Set<String> keySet()\n-            {\n-                return null;\n-            }\n-\n-            @Override\n-            public boolean isFull()\n-            {\n-                return true;\n-            }\n-\n-            @Override\n-            public void clear()\n-            {\n-            }\n-        };\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4MzEzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r517883135", "bodyText": "Can't the \"version\" expression be simplified to just: (_version == HttpVersion.HTTP_1_1)?", "author": "sbordet", "createdAt": "2020-11-05T08:51:10Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1052,18 +1049,29 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                     case COOKIE:\n                     case CACHE_CONTROL:\n                     case USER_AGENT:\n-                        addToConnectionTrie = _fieldCache != null && _field == null;\n+                        addToFieldCache = _field == null;\n                         break;\n \n                     default:\n                         break;\n                 }\n \n-                if (addToConnectionTrie && !_fieldCache.isFull() && _header != null && _valueString != null)\n+                // Cache field?\n+                if (addToFieldCache && _header != null && _valueString != null)\n                 {\n-                    if (_field == null)\n-                        _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n-                    _fieldCache.put(_field);\n+                    if (_fieldCache == null)\n+                    {\n+                        _fieldCache = (_handler.getHeaderCacheSize() > 0 && (_version != null && _version.getVersion() == HttpVersion.HTTP_1_1.getVersion()))", "originalCommit": "339c86deac90a51300a84aba48b16f70103b3eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\nindex 0e7bdd8520..8f9eab2f35 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java\n\n@@ -1061,7 +1062,7 @@ public class HttpParser\n                 {\n                     if (_fieldCache == null)\n                     {\n-                        _fieldCache = (_handler.getHeaderCacheSize() > 0 && (_version != null && _version.getVersion() == HttpVersion.HTTP_1_1.getVersion()))\n+                        _fieldCache = (_handler.getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n                             ? new ArrayTernaryTrie<>(_handler.getHeaderCacheSize())\n                             : NO_CACHE;\n                     }\n"}}, {"oid": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "url": "https://github.com/eclipse/jetty.project/commit/a8396f4ff4b47750d549f1539e2d9e578dac3b13", "message": "Updates from review", "committedDate": "2020-11-05T10:14:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MTQ2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r518641460", "bodyText": "I would return an empty Set here.", "author": "lorban", "createdAt": "2020-11-06T09:55:27Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/Trie.java", "diffHunk": "@@ -131,4 +131,99 @@\n     boolean isCaseInsensitive();\n \n     void clear();\n+\n+    static <T> Trie<T> empty(final boolean caseInsensitive)\n+    {\n+        return new Trie<T>()\n+        {\n+            @Override\n+            public boolean put(String s, Object o)\n+            {\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean put(Object o)\n+            {\n+                return false;\n+            }\n+\n+            @Override\n+            public T remove(String s)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T get(String s)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T get(String s, int offset, int len)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T get(ByteBuffer b)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T get(ByteBuffer b, int offset, int len)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T getBest(String s)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T getBest(String s, int offset, int len)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T getBest(byte[] b, int offset, int len)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public T getBest(ByteBuffer b, int offset, int len)\n+            {\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<String> keySet()\n+            {\n+                return null;", "originalCommit": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ea412c4a47c16d3acbde7289c3a8c6133b33390", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/Trie.java b/jetty-util/src/main/java/org/eclipse/jetty/util/Trie.java\nindex 77cba241f6..258e6fd7f5 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/Trie.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/Trie.java\n\n@@ -205,7 +206,7 @@ public interface Trie<V>\n             @Override\n             public Set<String> keySet()\n             {\n-                return null;\n+                return Collections.emptySet();\n             }\n \n             @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MjY3Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r518642676", "bodyText": "This method requires a bit of javadoc to explain what a pseudo header is.", "author": "lorban", "createdAt": "2020-11-06T09:57:33Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpHeader.java", "diffHunk": "@@ -188,6 +195,11 @@ public boolean is(String s)\n         return _string.equalsIgnoreCase(s);\n     }\n \n+    public boolean isPseudo()", "originalCommit": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0ODk2OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r522048969", "bodyText": "done", "author": "gregw", "createdAt": "2020-11-12T11:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0MjY3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1ea412c4a47c16d3acbde7289c3a8c6133b33390", "chunk": "diff --git a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpHeader.java b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpHeader.java\nindex de5aeec74e..11fedafa87 100644\n--- a/jetty-http/src/main/java/org/eclipse/jetty/http/HttpHeader.java\n+++ b/jetty-http/src/main/java/org/eclipse/jetty/http/HttpHeader.java\n\n@@ -195,6 +195,9 @@ public enum HttpHeader\n         return _string.equalsIgnoreCase(s);\n     }\n \n+    /**\n+     * @return True if the header is a HTTP2 Pseudo header (eg ':path')\n+     */\n     public boolean isPseudo()\n     {\n         return _pseudo;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTIyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r518645225", "bodyText": "The getHeaderCacheSize method name is a bit misleading as the ArrayTernaryTrie is going to consume a lot more bytes in heap than the specified size, which doesn't match the HttpConfiguration's managed attribute doc that reads \"The maximum allowed size in bytes for an HTTP header field cache\".", "author": "lorban", "createdAt": "2020-11-06T10:01:56Z", "path": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java", "diffHunk": "@@ -1052,18 +1050,29 @@ else if (_endOfContent == EndOfContent.CHUNKED_CONTENT)\n                     case COOKIE:\n                     case CACHE_CONTROL:\n                     case USER_AGENT:\n-                        addToConnectionTrie = _fieldCache != null && _field == null;\n+                        addToFieldCache = _field == null;\n                         break;\n \n                     default:\n                         break;\n                 }\n \n-                if (addToConnectionTrie && !_fieldCache.isFull() && _header != null && _valueString != null)\n+                // Cache field?\n+                if (addToFieldCache && _header != null && _valueString != null)\n                 {\n-                    if (_field == null)\n-                        _field = new HttpField(_header, caseInsensitiveHeader(_headerString, _header.asString()), _valueString);\n-                    _fieldCache.put(_field);\n+                    if (_fieldCache == null)\n+                    {\n+                        _fieldCache = (_handler.getHeaderCacheSize() > 0 && (_version != null && _version == HttpVersion.HTTP_1_1))\n+                            ? new ArrayTernaryTrie<>(_handler.getHeaderCacheSize())", "originalCommit": "a8396f4ff4b47750d549f1539e2d9e578dac3b13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0ODg3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5565#discussion_r522048873", "bodyText": "updated javadoc", "author": "gregw", "createdAt": "2020-11-12T11:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY0NTIyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7c2cd2c7c3886132ca8b4adcefd01daf9157ab61", "url": "https://github.com/eclipse/jetty.project/commit/7c2cd2c7c3886132ca8b4adcefd01daf9157ab61", "message": "Merge branch 'jetty-9.4.x' into jetty-9.4.x-5562-improve-field-cache", "committedDate": "2020-11-11T17:31:18Z", "type": "commit"}, {"oid": "1ea412c4a47c16d3acbde7289c3a8c6133b33390", "url": "https://github.com/eclipse/jetty.project/commit/1ea412c4a47c16d3acbde7289c3a8c6133b33390", "message": "Update from review\n\n + more javadoc\n + empty set return", "committedDate": "2020-11-11T17:36:39Z", "type": "commit"}]}