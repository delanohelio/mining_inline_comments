{"pr_number": 5840, "pr_title": "Issue #5832 - shutdown Javax WSClientContainer with webapp if possible.", "pr_createdAt": "2020-12-23T00:49:18Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/5840", "timeline": [{"oid": "97bbec7ac0695780ccad3575d3e6a55bc78ceb6b", "url": "https://github.com/eclipse/jetty.project/commit/97bbec7ac0695780ccad3575d3e6a55bc78ceb6b", "message": "Issue #5832 - deregister ShutdownThread for WebSocketClientContainer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-12-22T00:25:37Z", "type": "commit"}, {"oid": "374e02cbc3990622f3679d98a71aa27b011cc372", "url": "https://github.com/eclipse/jetty.project/commit/374e02cbc3990622f3679d98a71aa27b011cc372", "message": "register ShutdownThread in doStart\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-12-22T04:53:10Z", "type": "commit"}, {"oid": "25f8c65539e3349e10f9b62ff9d4cee365e5afdb", "url": "https://github.com/eclipse/jetty.project/commit/25f8c65539e3349e10f9b62ff9d4cee365e5afdb", "message": "Issue #5832 - shutdown WSClientContainer with ContextHandler if possible\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-12-23T00:36:18Z", "type": "commit"}, {"oid": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "url": "https://github.com/eclipse/jetty.project/commit/dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "message": "Issue #5832 - use lifeCycleStopping as lifeCycleStopped is never called\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-12-23T00:45:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r547929563", "bodyText": "I don't think you can just ask the classloader of the JavaxWebSocketClientContainer to load the ContextHandler. You have to consider all the permutations of the way the javax websocket client can be deployed, and thus which classloaders may be in play:\n\ndeployed as a standalone java program:  in this case probably the classloader of JavaxWebSocketClientContainer can see the ContextHandler class (if there is one).\ndeployed in jetty, with the javax.websocket client jars inside the webapp: in this case the classloader of JavaxWebSocketClientContainer is probably the webapp classloader, and the ContextHandler class is hidden from the webapp so you get a false negative.\ndeployed in jetty, javax.websocket client jars on the server classpath: in this case probably the classloader of JavaxWebSocketClientContainer can see the ContextHandler.\ndeployed in another container, javax.websocket client jars inside the webapp: in this case it doesn't matter which classloader, none of them should be able to see ContextHandler (unless the user has also included the server jar inside the webapp, but that's ok, there won't be a current context).\n\nSo, to be sure to cover every possible way the javax.websocket client can be deployed, I think you have to start at the Thread context classloader, and then work backwards up the parent chain, trying them all to find the ContextHandler class.", "author": "janbartel", "createdAt": "2020-12-23T12:13:52Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +274,55 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()", "originalCommit": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMTczMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548031731", "bodyText": "@janbartel I think this is a best effort to try to link this object to the server component tree.\nCases 1 and 3 are covered. Case 2 we don't care -- if you have the implementation classes in the war, chances are the war is not deployed in Jetty (case 4) and even if it is, it's a non-optimal deployment and we tried our best.\nI think the current code is minimal and correct.", "author": "sbordet", "createdAt": "2020-12-23T16:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA4NDc3Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548084773", "bodyText": "@sbordet I think you have it completely the wrong way around.  It is the case when JavaxWebSocketClientContainer is in the war that we really need to take special effort to find the ContextHandler from the server.\nIn short, it is pointless looking for the ContextHandler on the classloader that loaded JavaxWebSocketClientContainer, because if it is in the webapp, then it will be loaded by the webapp classloader which will hide ContextHandler.\nThe whole point of using reflection is to discover if we are within a jetty server context - regardless of exactly how the client has been deployed.    To discover if we are in a context, you have to walk the classloader hierarchy because the webapp classloader will hide the ContextHandler.\nThe current code will only work in the rare case that the Webapp classloader has been conditioned to expose the websocket client, so it is loaded from the server.   That is not the usual case.", "author": "gregw", "createdAt": "2020-12-23T17:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM1MzkyNw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548353927", "bodyText": "I think if they have the javax.websocket client jars inside the webapp then they won't have the same version of jetty-util LifeCycle as the server, so it won't work adding it as a managed bean on the ContextHandler anyway.", "author": "lachlan-roberts", "createdAt": "2020-12-24T02:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc0MDI5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r549740290", "bodyText": "@lachlan-roberts the scenario I'm concerned with is:  a user wants to write a portable webapp that uses websocket client. If this user puts the necessary jars into their webapp so it can function on any container, are you saying that it won't work when it runs on jetty, and if so, that's just not going to fly.", "author": "janbartel", "createdAt": "2020-12-29T15:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MTg0NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r550161845", "bodyText": "@gregw I'm not sure I understand. The case where JavaxWebSocketClientContainer is in the war is the case where also jetty-util is in the war, and therefore no matter what effort we put into finding the ContextHandler, the lifecycle won't work as ContextHandler sees a LifeCycle class that is different from JavaxWebSocketClientContainer.\nTherefore, we minimally try exactly JavaxWebSocketClientContainer classloader in the hope it's provided by the server.\n@janbartel your last scenario of a portable war is covered by ShutdownThread.register/unregister.\nIt's when JavaxWebSocketClientContainer comes from the server that we want to attach it to ContextHandler.\nAll other cases there is no other way than ShutdownThread.", "author": "sbordet", "createdAt": "2020-12-30T11:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MzgxOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r550173819", "bodyText": "@sbordet the point is that there is a spectrum of different webapp classloader setups.  This code needs to do two things:\n\nidentify if it is running in the scope of a ContextHandler - this can't be done just by looking at your own classloader, but the classloader hierarchy has to be walked to get past any hiding that may be there.\nIf a ContextHandler is found, then something has to be added to it to capture stopping event.  As you say, this can't just be a LifeCycle instance, as it may be a LifeCycle from the wrong classloader.  Perhaps something smart with interface Proxies can be done to dynamically create a LifeCycle on the right classloader? OR alternatively javax.servlet listeners might be able to be used, as they will never be hidden... however, I'm not sure if we can add a ServletContextListener at this point?? @janbartel maybe this is the use-case to allow an add after init of a SCL?", "author": "gregw", "createdAt": "2020-12-30T12:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyOTU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex 28d2237379..e54f02df27 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -295,12 +299,25 @@ public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer imple\n                 .getMethod(\"getContextHandler\")\n                 .invoke(context);\n \n+            contextHandler.getClass()\n+                .getMethod(\"addManaged\", LifeCycle.class)\n+                .invoke(contextHandler, this);\n+\n             AbstractLifeCycleListener shutdownListener = new AbstractLifeCycleListener()\n             {\n                 @Override\n                 public void lifeCycleStopping(LifeCycle event)\n                 {\n-                    LifeCycle.stop(JavaxWebSocketClientContainer.this);\n+                    try\n+                    {\n+                        contextHandler.getClass()\n+                            .getMethod(\"removeBean\", Object.class)\n+                            .invoke(contextHandler, JavaxWebSocketClientContainer.this);\n+                    }\n+                    catch (Throwable t)\n+                    {\n+                        LOG.warn(\"could not remove client WebSocketContainer bean from {}\", contextHandler);\n+                    }\n                 }\n             };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAyODY5MA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548028690", "bodyText": "Replace this try block with LifeCycle.start(clientContainer).", "author": "sbordet", "createdAt": "2020-12-23T16:02:10Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientContainerProvider.java", "diffHunk": "@@ -59,22 +58,14 @@ protected WebSocketContainer getContainer()\n         // TODO: do we want to provide a non-standard way to configure to always return the same clientContainer based on a config somewhere? (system.property?)\n \n         JavaxWebSocketClientContainer clientContainer = new JavaxWebSocketClientContainer();\n-\n-        // Register as JVM runtime shutdown hook?\n-        ShutdownThread.register(clientContainer);\n-\n-        if (!clientContainer.isStarted())\n+        try", "originalCommit": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientContainerProvider.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientContainerProvider.java\nindex 6ac2a48d47..c1974dceb5 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientContainerProvider.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientContainerProvider.java\n\n@@ -58,14 +58,7 @@ public class JavaxWebSocketClientContainerProvider extends ContainerProvider\n         // TODO: do we want to provide a non-standard way to configure to always return the same clientContainer based on a config somewhere? (system.property?)\n \n         JavaxWebSocketClientContainer clientContainer = new JavaxWebSocketClientContainer();\n-        try\n-        {\n-            clientContainer.start();\n-        }\n-        catch (Exception e)\n-        {\n-            throw new RuntimeException(\"Unable to start Client Container\", e);\n-        }\n+        LifeCycle.start(clientContainer);\n         return clientContainer;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjM4Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548032382", "bodyText": "This may work, but it's not optimal for dump() purposes.\nI would rather call (via reflection) contextHandler.addBean(this).", "author": "sbordet", "createdAt": "2020-12-23T16:10:32Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +274,55 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()\n+                .loadClass(\"org.eclipse.jetty.server.handler.ContextHandler\")\n+                .getMethod(\"getCurrentContext\")\n+                .invoke(null);\n+\n+            Object contextHandler = context.getClass()\n+                .getMethod(\"getContextHandler\")\n+                .invoke(context);\n+\n+            AbstractLifeCycleListener shutdownListener = new AbstractLifeCycleListener()\n+            {\n+                @Override\n+                public void lifeCycleStopping(LifeCycle event)\n+                {\n+                    LifeCycle.stop(JavaxWebSocketClientContainer.this);\n+                }\n+            };\n+\n+            contextHandler.getClass()\n+                .getMethod(\"addEventListener\", EventListener.class)\n+                .invoke(contextHandler, shutdownListener);", "originalCommit": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM1MTc4OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548351789", "bodyText": "I can do this but I think we will still need this listener to remove the bean when stopping. Otherwise restarting the webapp will accumulate these client container beans on the ContextHandler.", "author": "lachlan-roberts", "createdAt": "2020-12-24T02:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE2MjIyMA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r550162220", "bodyText": "@lachlan-roberts fair enough with regards to removing the bean, but then I would prefer to have it symmetrical in doClientStop() -- i.e. call (via reflection) contextHandler.removeBean(this).", "author": "sbordet", "createdAt": "2020-12-30T11:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex 28d2237379..e54f02df27 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -295,12 +299,25 @@ public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer imple\n                 .getMethod(\"getContextHandler\")\n                 .invoke(context);\n \n+            contextHandler.getClass()\n+                .getMethod(\"addManaged\", LifeCycle.class)\n+                .invoke(contextHandler, this);\n+\n             AbstractLifeCycleListener shutdownListener = new AbstractLifeCycleListener()\n             {\n                 @Override\n                 public void lifeCycleStopping(LifeCycle event)\n                 {\n-                    LifeCycle.stop(JavaxWebSocketClientContainer.this);\n+                    try\n+                    {\n+                        contextHandler.getClass()\n+                            .getMethod(\"removeBean\", Object.class)\n+                            .invoke(contextHandler, JavaxWebSocketClientContainer.this);\n+                    }\n+                    catch (Throwable t)\n+                    {\n+                        LOG.warn(\"could not remove client WebSocketContainer bean from {}\", contextHandler);\n+                    }\n                 }\n             };\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjk1Mw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548032953", "bodyText": "ServerSocket is a bad name, just call it WebSocketContainerServlet.", "author": "sbordet", "createdAt": "2020-12-23T16:11:54Z", "path": "jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/ClientInWebappTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.tests;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.websocket.ContainerProvider;\n+import javax.websocket.WebSocketContainer;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class ClientInWebappTest\n+{\n+    private Server server;\n+    private URI serverUri;\n+    private HttpClient httpClient;\n+    private volatile WebSocketContainer container;\n+\n+    public class ServerSocket extends HttpServlet", "originalCommit": "dd1d4bc1ca783f07b6542038f47cfa329f44b12f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1MDU3OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548050579", "bodyText": "WebSocketClientInServlet perhaps?", "author": "joakime", "createdAt": "2020-12-23T16:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2MDU1MA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r548360550", "bodyText": "Yep this was copied over from another test and I forgot to change it. Fixed.", "author": "lachlan-roberts", "createdAt": "2020-12-24T03:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAzMjk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "chunk": "diff --git a/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/ClientInWebappTest.java b/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/ClientInWebappTest.java\nindex d349b18dc6..14fb5a7099 100644\n--- a/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/ClientInWebappTest.java\n+++ b/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/ClientInWebappTest.java\n\n@@ -15,6 +15,7 @@ package org.eclipse.jetty.websocket.javax.tests;\n \n import java.io.IOException;\n import java.net.URI;\n+import java.util.Collection;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n"}}, {"oid": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "url": "https://github.com/eclipse/jetty.project/commit/3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "message": "Issue #5832 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2020-12-24T02:59:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3OTQ2OQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r550179469", "bodyText": "As @sbordet says above, I don't think we can add this as a LifeCycle instance, because it may be a different LifeCycle.\nTwo options:\n\ncreate a Proxy class from the LifeCycle interface obtained from the same classloader as the ContextHandler\nuse a javax.servlet.ServletContextListener... but @janbartel will have to let us add one after init and for it's destroy method to still be called (see #5837 )", "author": "gregw", "createdAt": "2020-12-30T12:33:30Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +278,68 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        try\n+        {\n+            Object context = getClass().getClassLoader()\n+                .loadClass(\"org.eclipse.jetty.server.handler.ContextHandler\")\n+                .getMethod(\"getCurrentContext\")\n+                .invoke(null);\n+\n+            Object contextHandler = context.getClass()\n+                .getMethod(\"getContextHandler\")\n+                .invoke(context);\n+\n+            contextHandler.getClass()\n+                .getMethod(\"addManaged\", LifeCycle.class)", "originalCommit": "3286f9a4546e705da60a7f99130bc6cf52e8f3b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "774dac66a2364b42c43bd8ef1e39c2fde78369b6", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex e54f02df27..196cff6de8 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -287,6 +290,24 @@ public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer imple\n     }\n \n     protected void doClientStart()\n+    {\n+        // If we are running in Jetty register shutdown with the ContextHandler.\n+        // TODO: add test mode to disable this.\n+        if (shutdownWithContextHandler(this))\n+            return;\n+\n+        // If we are running inside a different ServletContainer we can register with the SHUTDOWN_CONTAINER static.\n+        ContainerLifeCycle shutdownContainer = SHUTDOWN_CONTAINER.get();\n+        if (shutdownContainer != null)\n+        {\n+            shutdownContainer.addManaged(this);\n+            return;\n+        }\n+\n+        ShutdownThread.register(this);\n+    }\n+\n+    private boolean shutdownWithContextHandler(LifeCycle lifeCycle)\n     {\n         try\n         {\n"}}, {"oid": "774dac66a2364b42c43bd8ef1e39c2fde78369b6", "url": "https://github.com/eclipse/jetty.project/commit/774dac66a2364b42c43bd8ef1e39c2fde78369b6", "message": "Allow shutdown of Javax WS Client Container though a SCI\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-08T11:56:44Z", "type": "commit"}, {"oid": "9e19e875f526ef2b766accf73b28c0dd568770a1", "url": "https://github.com/eclipse/jetty.project/commit/9e19e875f526ef2b766accf73b28c0dd568770a1", "message": "Issue #5832 - deprecate and remove usage of the ContainerInitializer utility\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-12T06:08:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyMzc2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555823760", "bodyText": "This method is not used anywhere.\nIf it is really necessary, have it called from the method with less parameters.", "author": "sbordet", "createdAt": "2021-01-12T14:43:48Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -696,6 +696,27 @@ else if (handler instanceof ServletHandler)\n         relinkHandlers();\n     }\n \n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n+    {\n+        addManaged(new Initializer(this, containerInitializer));\n+    }\n+\n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @param classes the Set of application classes.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer, Set<Class<?>> classes)", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\nindex d81c7f9af2..f7b18da401 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\n\n@@ -703,7 +703,7 @@ public class ServletContextHandler extends ContextHandler\n      */\n     public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n     {\n-        addManaged(new Initializer(this, containerInitializer));\n+        addServletContainerInitializer(containerInitializer, Collections.emptySet());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNTM5Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555825396", "bodyText": "Can you modify EmbeddedWelTest to use this method?\nCan Initializer be made private?", "author": "sbordet", "createdAt": "2021-01-12T14:45:53Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -696,6 +696,27 @@ else if (handler instanceof ServletHandler)\n         relinkHandlers();\n     }\n \n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkyMTY2MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555921661", "bodyText": "This method, void addServletContainerInitializer(ServletContainerInitializer containerInitializer) will be useful to expand upon for issue #5834", "author": "joakime", "createdAt": "2021-01-12T16:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNTM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQxMTYwNA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r556411604", "bodyText": "We can't make Initializer private, its already a public class in ServletContextHandler.", "author": "lachlan-roberts", "createdAt": "2021-01-13T10:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\nindex d81c7f9af2..f7b18da401 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\n\n@@ -703,7 +703,7 @@ public class ServletContextHandler extends ContextHandler\n      */\n     public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n     {\n-        addManaged(new Initializer(this, containerInitializer));\n+        addServletContainerInitializer(containerInitializer, Collections.emptySet());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgzODU3OA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555838578", "bodyText": "Use a method such as initialize(this) rather than referencing a public field.", "author": "sbordet", "createdAt": "2021-01-12T15:03:06Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java", "diffHunk": "@@ -0,0 +1,48 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+\n+public class JavaxWebSocketClientShutdown extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener\n+{\n+    @Override\n+    public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n+    {\n+        JavaxWebSocketClientContainer.SHUTDOWN_CONTAINER.compareAndSet(null, this);", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java\nindex ed73c30764..481b2b701f 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java\n\n@@ -29,7 +29,7 @@ public class JavaxWebSocketClientShutdown extends ContainerLifeCycle implements\n     @Override\n     public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n     {\n-        JavaxWebSocketClientContainer.SHUTDOWN_CONTAINER.compareAndSet(null, this);\n+        JavaxWebSocketClientContainer.initialize(this);\n         ctx.addListener(this);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MTkzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555881935", "bodyText": "removeBeans() should not be needed.\nAFAIU JavaxWebSocketClientContainer should remove itself (because it adds itself in doClientStart()).\nIf JavaxWebSocketClientContainer.doStop() is missing, it should be implemented similar to doStart().", "author": "sbordet", "createdAt": "2021-01-12T15:56:33Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java", "diffHunk": "@@ -0,0 +1,48 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+\n+public class JavaxWebSocketClientShutdown extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener\n+{\n+    @Override\n+    public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n+    {\n+        JavaxWebSocketClientContainer.SHUTDOWN_CONTAINER.compareAndSet(null, this);\n+        ctx.addListener(this);\n+    }\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce)\n+    {\n+        LifeCycle.start(this);\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce)\n+    {\n+        LifeCycle.stop(this);\n+        removeBeans();", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQxMTY1NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r556411655", "bodyText": "It might be good to keep it there as a precaution, the JavaxWebSocketClientShutdown is kept when restarting the server.\nI don't think we need the doClientStop as we can just remove it as a listener. Then we don't have to rediscover ContextHandler or the instance of the JavaxWebSocketClientShutdown.", "author": "lachlan-roberts", "createdAt": "2021-01-13T10:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java\nindex ed73c30764..481b2b701f 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketClientShutdown.java\n\n@@ -29,7 +29,7 @@ public class JavaxWebSocketClientShutdown extends ContainerLifeCycle implements\n     @Override\n     public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n     {\n-        JavaxWebSocketClientContainer.SHUTDOWN_CONTAINER.compareAndSet(null, this);\n+        JavaxWebSocketClientContainer.initialize(this);\n         ctx.addListener(this);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MjQ3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555882472", "bodyText": "No public field, use a method instead.", "author": "sbordet", "createdAt": "2021-01-12T15:57:10Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -52,6 +59,9 @@\n @ManagedObject(\"JSR356 Client Container\")\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n+    public static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex 196cff6de8..bc3bd9508b 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -60,7 +60,12 @@ import org.slf4j.LoggerFactory;\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n     private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n-    public static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();\n+    private static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();\n+\n+    public static void initialize(ContainerLifeCycle container)\n+    {\n+        SHUTDOWN_CONTAINER.set(container);\n+    }\n \n     protected WebSocketCoreClient coreClient;\n     protected Function<WebSocketComponents, WebSocketCoreClient> coreClientFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MzUxMg==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555883512", "bodyText": "Now that there is a SCI mechanism, is this needed? The SCI mechanism should cover both when we run in Jetty as well as when we run in other containers because it's a standard mechanism, no?", "author": "sbordet", "createdAt": "2021-01-12T15:58:29Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -271,4 +281,75 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        // If we are running in Jetty register shutdown with the ContextHandler.\n+        // TODO: add test mode to disable this.\n+        if (shutdownWithContextHandler(this))", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQxMTc2Nw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r556411767", "bodyText": "This is still needed, because the SCI shutdown mechanism won't work when running with embedded Jetty as we wont have a different classloader for every context, so the static will be the same for every context.", "author": "lachlan-roberts", "createdAt": "2021-01-13T10:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MzUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex 196cff6de8..bc3bd9508b 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -282,6 +287,12 @@ public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer imple\n         return new AnnotatedClientEndpointConfig(anno);\n     }\n \n+    @Override\n+    protected void doStop() throws Exception\n+    {\n+        super.doStop();\n+    }\n+\n     @Override\n     protected void doStart() throws Exception\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4ODU4MQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555888581", "bodyText": "This is confusing, as you are passing a lambda to be run after onStartup() with code from the same class?\nWhy can't you just inline the lambda code at the end of onStartup() (where in fact you call afterStartupConsumer.accept())?", "author": "sbordet", "createdAt": "2021-01-12T16:05:15Z", "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java", "diffHunk": "@@ -102,7 +104,7 @@ public static void configure(ServletContextHandler context, Configurator configu\n         // the initialization phase is over. (important for this SCI to function)\n         context.getServletContext().setExtendedListenerTypes(true);\n \n-        context.addEventListener(ContainerInitializer.asContextListener(new JavaxWebSocketServletContainerInitializer())\n+        context.addServletContainerInitializer(new JavaxWebSocketServletContainerInitializer()\n             .afterStartup((servletContext) ->", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java\nindex 6043082d38..476b333ca6 100644\n--- a/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java\n+++ b/jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java\n\n@@ -98,28 +107,7 @@ public class JavaxWebSocketServletContainerInitializer implements ServletContain\n     {\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n-\n-        // In this embedded-jetty usage, allow ServletContext.addListener() to\n-        // add other ServletContextListeners (such as the ContextDestroyListener) after\n-        // the initialization phase is over. (important for this SCI to function)\n-        context.getServletContext().setExtendedListenerTypes(true);\n-\n-        context.addServletContainerInitializer(new JavaxWebSocketServletContainerInitializer()\n-            .afterStartup((servletContext) ->\n-            {\n-                JavaxWebSocketServerContainer serverContainer = JavaxWebSocketServerContainer.getContainer(servletContext);\n-                if (configurator != null)\n-                {\n-                    try\n-                    {\n-                        configurator.accept(servletContext, serverContainer);\n-                    }\n-                    catch (DeploymentException e)\n-                    {\n-                        throw new RuntimeException(\"Failed to deploy WebSocket Endpoint\", e);\n-                    }\n-                }\n-            }));\n+        context.addServletContainerInitializer(new JavaxWebSocketServletContainerInitializer(configurator));\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4OTQzMw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r555889433", "bodyText": "Same comment as for the javax version.\nThe lambda should be inlined in onStartup().", "author": "sbordet", "createdAt": "2021-01-12T16:06:25Z", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java", "diffHunk": "@@ -51,17 +52,15 @@ public static void configure(ServletContextHandler context, Configurator configu\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n \n-        context.addEventListener(\n-            ContainerInitializer\n-                .asContextListener(new JettyWebSocketServletContainerInitializer())\n-                .afterStartup((servletContext) ->\n+        context.addServletContainerInitializer(new JettyWebSocketServletContainerInitializer()\n+            .afterStartup((servletContext) ->", "originalCommit": "9e19e875f526ef2b766accf73b28c0dd568770a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35051dfde51a53442384e5eb3bf85758c765ac7b", "chunk": "diff --git a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java\nindex d81763b376..d843b2c4ed 100644\n--- a/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java\n+++ b/jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java\n\n@@ -51,16 +60,7 @@ public class JettyWebSocketServletContainerInitializer implements ServletContain\n     {\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n-\n-        context.addServletContainerInitializer(new JettyWebSocketServletContainerInitializer()\n-            .afterStartup((servletContext) ->\n-            {\n-                if (configurator != null)\n-                {\n-                    JettyWebSocketServerContainer container = JettyWebSocketServerContainer.getContainer(servletContext);\n-                    configurator.accept(servletContext, container);\n-                }\n-            }));\n+        context.addServletContainerInitializer(new JettyWebSocketServletContainerInitializer());\n     }\n \n     /**\n"}}, {"oid": "35051dfde51a53442384e5eb3bf85758c765ac7b", "url": "https://github.com/eclipse/jetty.project/commit/35051dfde51a53442384e5eb3bf85758c765ac7b", "message": "Issue #5832 - changes from review\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-13T06:54:30Z", "type": "commit"}, {"oid": "2f6176661a824b153eb6997177ccc594a9ac876c", "url": "https://github.com/eclipse/jetty.project/commit/2f6176661a824b153eb6997177ccc594a9ac876c", "message": "improve testing for JavaxWebSocketClientContainer shutdown\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-14T03:38:12Z", "type": "commit"}, {"oid": "29f185931e262cc10ada924243320e0c52dead91", "url": "https://github.com/eclipse/jetty.project/commit/29f185931e262cc10ada924243320e0c52dead91", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5832-WebSocketShutdownThread", "committedDate": "2021-01-18T05:01:18Z", "type": "commit"}, {"oid": "a60ecfa4cc86490db8496f3f6117d28e8c28ab50", "url": "https://github.com/eclipse/jetty.project/commit/a60ecfa4cc86490db8496f3f6117d28e8c28ab50", "message": "Issue #5832 - fix bugs when stopping the JavaxWebSocketClientContainer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-18T12:23:35Z", "type": "commit"}, {"oid": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "url": "https://github.com/eclipse/jetty.project/commit/99aef1a2c0d8721b69cb027ff33d048c609c73f1", "message": "Issue #5832 - fix bugs when stopping the JavaxWebSocketClientContainer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-18T12:50:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560306365", "bodyText": "You should not be able to add a ServletContainerInitializer after the ServletContextHandler has started.\nBut in any case I'm -1 to add these methods to ServletContextHandler without a greater consideration of the integration with the handling of ServletContainerInitializers by the AnnotationConfiguration.  There's already been divergence with the addition of the ServletContextHandler.Initializer and the ServletContextHandler.ServletContainerInitializerCaller.  Once we expose methods, it's extremely hard to remove them, so we have to be sure we're crafting exactly the right methods.", "author": "janbartel", "createdAt": "2021-01-19T16:23:54Z", "path": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java", "diffHunk": "@@ -696,6 +696,27 @@ else if (handler instanceof ServletHandler)\n         relinkHandlers();\n     }\n \n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n+    {\n+        addServletContainerInitializer(containerInitializer, Collections.emptySet());\n+    }\n+\n+    /**\n+     * Utility Method to allow for manual execution of {@link javax.servlet.ServletContainerInitializer} when using Embedded Jetty.\n+     * @param containerInitializer the ServletContainerInitializer to register.\n+     * @param classes the Set of application classes.\n+     * @see Initializer\n+     */\n+    public void addServletContainerInitializer(ServletContainerInitializer containerInitializer, Set<Class<?>> classes)\n+    {\n+        addManaged(new Initializer(this, containerInitializer, classes));", "originalCommit": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyODU1NA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560328554", "bodyText": "Personally, I love these new API methods.\nIt makes things far easier for embedded users.\nThese methods  are also use to expand upon for issue #5834 (after this issue is merged)", "author": "joakime", "createdAt": "2021-01-19T16:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDM0ODgzNw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560348837", "bodyText": "Sure, I agree it looks attractive. However, it does not take into account anything like ordering of SCIs that is done by the AnnotationConfiguration that winds up using a completely different mechanism to start the SCIs:  I'd like us to have a single mechanism to order and start the SCIs that can be leveraged by both the plain ServletContextHandler and the AnnotationConfiguration.", "author": "janbartel", "createdAt": "2021-01-19T17:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU5NDkzNA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r561594934", "bodyText": "@janbartel I agree that it would be ideal to have just one mechanism, but I also think that this is probably out of scope for this PR.\nThe current mechanism for this is baked into AnnotationConfiguration and that is not required when just using embedded Jetty. So AnnotationConfiguration and other usages of this would need to use the mechanism in jetty-servlet.", "author": "lachlan-roberts", "createdAt": "2021-01-21T04:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzY0OTM5NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r563649395", "bodyText": "It's not out of scope for this PR: we've already had 2 or 3 bites at the SCI cherry without unifying the approach, we should not have another.", "author": "janbartel", "createdAt": "2021-01-25T11:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzY1MTAzNQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r563651035", "bodyText": "+1.  I know it feels like a bit of a pile on.... but let's get this mechanism right this time.    New API is good, but a single mechanism behind should be possible and will avoid future problems like this.", "author": "gregw", "createdAt": "2021-01-25T11:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwNjM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "chunk": "diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\nindex f7b18da401..d2012a901e 100644\n--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\n+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletContextHandler.java\n\n@@ -703,6 +703,9 @@ public class ServletContextHandler extends ContextHandler\n      */\n     public void addServletContainerInitializer(ServletContainerInitializer containerInitializer)\n     {\n+        if (!isStopped())\n+            throw new IllegalStateException(\"ServletContainerInitializers should be added before starting\");\n+\n         addServletContainerInitializer(containerInitializer, Collections.emptySet());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwODU2MA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560308560", "bodyText": "Why is this a ContainerLifeCycle?  I don't see any overriding of doStart/doStop, so I don't see the point?", "author": "janbartel", "createdAt": "2021-01-19T16:26:37Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JavaxWebSocketShutdownContainer extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener", "originalCommit": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY5MjAwOQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560692009", "bodyText": "It is a ContainerLifeCycle so that the JavaxWebSocketClientContainer can add itself as a managed bean to control its lifecycle.", "author": "lachlan-roberts", "createdAt": "2021-01-20T05:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMwODU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c6c1ccfdd08b3494ab0a215e1591da721630af7c", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java\nindex 5a49e05137..020cb85a8e 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java\n\n@@ -33,7 +33,7 @@ public class JavaxWebSocketShutdownContainer extends ContainerLifeCycle implemen\n     @Override\n     public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n     {\n-        JavaxWebSocketClientContainer.initialize(this);\n+        JavaxWebSocketClientContainer.setShutdownContainer(this);\n         ctx.addListener(this);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxMDc4Ng==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560310786", "bodyText": "I don't understand why this is necessary? Why can't this ServletContainerInitializer be discovered by jetty in the same way as other ServletContainerInitializers?", "author": "janbartel", "createdAt": "2021-01-19T16:29:20Z", "path": "jetty-websocket/websocket-javax-server/src/main/java/org/eclipse/jetty/websocket/javax/server/config/JavaxWebSocketServletContainerInitializer.java", "diffHunk": "@@ -96,28 +107,7 @@ public static void configure(ServletContextHandler context, Configurator configu\n     {\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n-\n-        // In this embedded-jetty usage, allow ServletContext.addListener() to\n-        // add other ServletContextListeners (such as the ContextDestroyListener) after\n-        // the initialization phase is over. (important for this SCI to function)\n-        context.getServletContext().setExtendedListenerTypes(true);\n-\n-        context.addEventListener(ContainerInitializer.asContextListener(new JavaxWebSocketServletContainerInitializer())\n-            .afterStartup((servletContext) ->\n-            {\n-                JavaxWebSocketServerContainer serverContainer = JavaxWebSocketServerContainer.getContainer(servletContext);\n-                if (configurator != null)\n-                {\n-                    try\n-                    {\n-                        configurator.accept(servletContext, serverContainer);\n-                    }\n-                    catch (DeploymentException e)\n-                    {\n-                        throw new RuntimeException(\"Failed to deploy WebSocket Endpoint\", e);\n-                    }\n-                }\n-            }));\n+        context.addServletContainerInitializer(new JavaxWebSocketServletContainerInitializer(configurator));", "originalCommit": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY5MzEzOA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560693138", "bodyText": "This method is only used for embedded Jetty. If you are running in a webapp it will be discovered with the ServiceLoader.", "author": "lachlan-roberts", "createdAt": "2021-01-20T05:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxMDc4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMxMTUxNA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560311514", "bodyText": "See previous comments.", "author": "janbartel", "createdAt": "2021-01-19T16:30:18Z", "path": "jetty-websocket/websocket-jetty-server/src/main/java/org/eclipse/jetty/websocket/server/config/JettyWebSocketServletContainerInitializer.java", "diffHunk": "@@ -50,18 +60,7 @@ public static void configure(ServletContextHandler context, Configurator configu\n     {\n         if (!context.isStopped())\n             throw new IllegalStateException(\"configure should be called before starting\");\n-\n-        context.addEventListener(\n-            ContainerInitializer\n-                .asContextListener(new JettyWebSocketServletContainerInitializer())\n-                .afterStartup((servletContext) ->\n-                {\n-                    if (configurator != null)\n-                    {\n-                        JettyWebSocketServerContainer container = JettyWebSocketServerContainer.getContainer(servletContext);\n-                        configurator.accept(servletContext, container);\n-                    }\n-                }));\n+        context.addServletContainerInitializer(new JettyWebSocketServletContainerInitializer(configurator));", "originalCommit": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQxMTQxMg==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560411412", "bodyText": "can this be named as a setter rather than initialize as it is used to null reference as well on destroy", "author": "gregw", "createdAt": "2021-01-19T18:58:28Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -52,9 +58,20 @@\n @ManagedObject(\"JSR356 Client Container\")\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n+    private static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();\n+\n+    public static void initialize(ContainerLifeCycle container)", "originalCommit": "99aef1a2c0d8721b69cb027ff33d048c609c73f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDY5ODQyNg==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r560698426", "bodyText": "Renamed to setShutdownContainer.", "author": "lachlan-roberts", "createdAt": "2021-01-20T06:01:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQxMTQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "c6c1ccfdd08b3494ab0a215e1591da721630af7c", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex a535b9c0ed..06fbed510f 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -61,7 +61,7 @@ public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer imple\n     private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n     private static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();\n \n-    public static void initialize(ContainerLifeCycle container)\n+    public static void setShutdownContainer(ContainerLifeCycle container)\n     {\n         SHUTDOWN_CONTAINER.set(container);\n         if (LOG.isDebugEnabled())\n"}}, {"oid": "c6c1ccfdd08b3494ab0a215e1591da721630af7c", "url": "https://github.com/eclipse/jetty.project/commit/c6c1ccfdd08b3494ab0a215e1591da721630af7c", "message": "Rename JavaxWebSocketClientContainer.initialize to setShutdownContainer.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-20T06:00:33Z", "type": "commit"}, {"oid": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "url": "https://github.com/eclipse/jetty.project/commit/ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "message": "only allow adding ServletContainerInitializers before starting\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-01-21T04:27:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDMzOTYxMw==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r564339613", "bodyText": "Now that you have implemented doClientStop() I don't think this is necessary.", "author": "sbordet", "createdAt": "2021-01-26T08:49:25Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.client;\n+\n+import java.util.Set;\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.ServletException;\n+\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class JavaxWebSocketShutdownContainer extends ContainerLifeCycle implements ServletContainerInitializer, ServletContextListener\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketShutdownContainer.class);\n+\n+    @Override\n+    public void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException\n+    {\n+        JavaxWebSocketClientContainer.setShutdownContainer(this);\n+        ctx.addListener(this);\n+    }\n+\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce)\n+    {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"contextInitialized({}) {}\", sce, this);\n+        LifeCycle.start(this);\n+    }\n+\n+    @Override\n+    public void contextDestroyed(ServletContextEvent sce)\n+    {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"contextDestroyed({}) {}\", sce, this);\n+\n+        LifeCycle.stop(this);\n+        removeBeans();", "originalCommit": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed863615819e9c4a98abf6d405b2846b1f1d86e7", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java\nindex 020cb85a8e..b4781791d4 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/JavaxWebSocketShutdownContainer.java\n\n@@ -1,6 +1,6 @@\n //\n // ========================================================================\n-// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+// Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n //\n // This program and the accompanying materials are made available under the\n // terms of the Eclipse Public License v. 2.0 which is available at\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDM0MDczNA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r564340734", "bodyText": "This needs to be a proper setter method, starting with set and the getter should be there too, and used in the code.", "author": "sbordet", "createdAt": "2021-01-26T08:51:13Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -95,6 +112,11 @@ public JavaxWebSocketClientContainer(WebSocketComponents components, Function<We\n         this.frameHandlerFactory = new JavaxWebSocketClientFrameHandlerFactory(this);\n     }\n \n+    public void allowShutdownWithContextHandler(boolean allowShutdownWithContextHandler)", "originalCommit": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47f24db0bea94b2057acaaca7d901584cf1cbd02", "chunk": "diff --git a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\nindex 06fbed510f..1776aae14f 100644\n--- a/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n+++ b/jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java\n\n@@ -112,11 +101,6 @@ public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer imple\n         this.frameHandlerFactory = new JavaxWebSocketClientFrameHandlerFactory(this);\n     }\n \n-    public void allowShutdownWithContextHandler(boolean allowShutdownWithContextHandler)\n-    {\n-        this.allowShutdownWithContextHandler = allowShutdownWithContextHandler;\n-    }\n-\n     protected HttpClient getHttpClient()\n     {\n         return getWebSocketCoreClient().getHttpClient();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDM0Mzc4NQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r564343785", "bodyText": "I would add two tests that prove the behavior in case of multiple web applications, since we want to make sure that the static field SHUTDOWN_CONTAINER is not overwritten by other instances.\nOne test should have the classes provided by the server, and one by the web applications (both).", "author": "sbordet", "createdAt": "2021-01-26T08:55:56Z", "path": "jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/JavaxClientShutdownWithServerTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+//\n+// ========================================================================\n+// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+//\n+// This program and the accompanying materials are made available under the\n+// terms of the Eclipse Public License v. 2.0 which is available at\n+// https://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0\n+// which is available at https://www.apache.org/licenses/LICENSE-2.0.\n+//\n+// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0\n+// ========================================================================\n+//\n+\n+package org.eclipse.jetty.websocket.javax.tests;\n+\n+import java.net.URI;\n+import java.util.Collection;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.websocket.ContainerProvider;\n+import javax.websocket.WebSocketContainer;\n+\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.server.ServerConnector;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+import org.eclipse.jetty.util.component.ContainerLifeCycle;\n+import org.eclipse.jetty.util.component.LifeCycle;\n+import org.eclipse.jetty.websocket.javax.client.JavaxWebSocketShutdownContainer;\n+import org.eclipse.jetty.websocket.javax.client.internal.JavaxWebSocketClientContainer;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class JavaxClientShutdownWithServerTest\n+{\n+    private Server server;\n+    private ServletContextHandler contextHandler;\n+    private URI serverUri;\n+    private HttpClient httpClient;\n+    private volatile WebSocketContainer container;\n+    private ContainerLifeCycle shutdownContainer;\n+\n+    public class ContextHandlerShutdownServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+        {\n+            container = ContainerProvider.getWebSocketContainer();\n+        }\n+    }\n+\n+    public class ServletContainerInitializerShutdownServlet extends HttpServlet\n+    {\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+        {\n+            JavaxWebSocketClientContainer clientContainer = new JavaxWebSocketClientContainer();\n+            clientContainer.allowShutdownWithContextHandler(false);\n+            LifeCycle.start(clientContainer);\n+            container = clientContainer;\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void before() throws Exception\n+    {\n+        server = new Server();\n+        ServerConnector connector = new ServerConnector(server);\n+        server.addConnector(connector);\n+\n+        contextHandler = new ServletContextHandler();\n+        contextHandler.setContextPath(\"/\");\n+        contextHandler.addServlet(new ServletHolder(new ContextHandlerShutdownServlet()), \"/contextHandler\");\n+        contextHandler.addServlet(new ServletHolder(new ServletContainerInitializerShutdownServlet()), \"/shutdownContainer\");\n+        server.setHandler(contextHandler);\n+\n+        // Because we are using embedded we must manually add the Javax WS Client Shutdown SCI.\n+        JavaxWebSocketShutdownContainer javaxWebSocketClientShutdown = new JavaxWebSocketShutdownContainer();\n+        shutdownContainer = javaxWebSocketClientShutdown;\n+        contextHandler.addServletContainerInitializer(javaxWebSocketClientShutdown);\n+\n+        server.start();\n+        serverUri = WSURI.toWebsocket(server.getURI());\n+\n+        httpClient = new HttpClient();\n+        httpClient.start();\n+    }\n+\n+    @AfterEach\n+    public void after() throws Exception\n+    {\n+        httpClient.stop();\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testShutdownWithContextHandler() throws Exception\n+    {\n+        ContentResponse response = httpClient.GET(serverUri.resolve(\"/contextHandler\"));\n+        assertThat(response.getStatus(), is(HttpStatus.OK_200));\n+\n+        assertNotNull(container);\n+        assertThat(container, instanceOf(JavaxWebSocketClientContainer.class));\n+        JavaxWebSocketClientContainer clientContainer = (JavaxWebSocketClientContainer)container;\n+        assertThat(clientContainer.isRunning(), is(true));\n+\n+        // The container should be a bean on the ContextHandler.\n+        Collection<WebSocketContainer> containedBeans = contextHandler.getBeans(WebSocketContainer.class);\n+        assertThat(containedBeans.size(), is(1));\n+        assertThat(containedBeans.toArray()[0], is(container));\n+\n+        // The client should be attached to the servers LifeCycle and should stop with it.\n+        server.stop();\n+        assertThat(clientContainer.isRunning(), is(false));\n+        assertThat(server.getContainedBeans(WebSocketContainer.class), empty());\n+    }\n+\n+    @Test\n+    public void testShutdownWithShutdownContainer() throws Exception\n+    {\n+        ContentResponse response = httpClient.GET(serverUri.resolve(\"/shutdownContainer\"));\n+        assertThat(response.getStatus(), is(HttpStatus.OK_200));\n+\n+        assertNotNull(container);\n+        assertThat(container, instanceOf(JavaxWebSocketClientContainer.class));\n+        JavaxWebSocketClientContainer clientContainer = (JavaxWebSocketClientContainer)container;\n+        assertThat(clientContainer.isRunning(), is(true));\n+\n+        // The container should be a bean on the ContextHandler.\n+        Collection<WebSocketContainer> containedBeans = shutdownContainer.getBeans(WebSocketContainer.class);\n+        assertThat(containedBeans.size(), is(1));\n+        assertThat(containedBeans.toArray()[0], is(container));\n+\n+        // The client should be attached to the servers LifeCycle and should stop with it.\n+        server.stop();\n+        assertThat(clientContainer.isRunning(), is(false));\n+        assertThat(server.getContainedBeans(WebSocketContainer.class), empty());\n+    }", "originalCommit": "ff4f2ef28f4f83036f5c409116ab457dfd7f5348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed863615819e9c4a98abf6d405b2846b1f1d86e7", "chunk": "diff --git a/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/JavaxClientShutdownWithServerTest.java b/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/JavaxClientShutdownWithServerTest.java\nindex 6f7959d1b4..59f6fc7685 100644\n--- a/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/JavaxClientShutdownWithServerTest.java\n+++ b/jetty-websocket/websocket-javax-tests/src/test/java/org/eclipse/jetty/websocket/javax/tests/JavaxClientShutdownWithServerTest.java\n\n@@ -1,6 +1,6 @@\n //\n // ========================================================================\n-// Copyright (c) 1995-2020 Mort Bay Consulting Pty Ltd and others.\n+// Copyright (c) 1995-2021 Mort Bay Consulting Pty Ltd and others.\n //\n // This program and the accompanying materials are made available under the\n // terms of the Eclipse Public License v. 2.0 which is available at\n"}}, {"oid": "7760d04a87c963cecc35b22121f28462a08a4b85", "url": "https://github.com/eclipse/jetty.project/commit/7760d04a87c963cecc35b22121f28462a08a4b85", "message": "Merge remote-tracking branch 'origin/jetty-10.0.x' into jetty-10.0.x-5832-WebSocketShutdownThread\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-02-21T22:53:31Z", "type": "commit"}, {"oid": "ed863615819e9c4a98abf6d405b2846b1f1d86e7", "url": "https://github.com/eclipse/jetty.project/commit/ed863615819e9c4a98abf6d405b2846b1f1d86e7", "message": "Revert changes to ServletContainerInitializer\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-02-21T23:03:43Z", "type": "commit"}, {"oid": "47f24db0bea94b2057acaaca7d901584cf1cbd02", "url": "https://github.com/eclipse/jetty.project/commit/47f24db0bea94b2057acaaca7d901584cf1cbd02", "message": "Issue #5832 - Improve testing for WebSocket client shutdown.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>", "committedDate": "2021-02-22T10:12:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE2MjAxOA==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r580162018", "bodyText": "comment here", "author": "gregw", "createdAt": "2021-02-22T11:03:01Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -261,4 +277,123 @@ private ClientEndpointConfig getAnnotatedConfig(Object endpoint) throws Deployme\n \n         return new AnnotatedClientEndpointConfig(anno);\n     }\n+\n+    @Override\n+    protected void doStart() throws Exception\n+    {\n+        doClientStart();\n+        super.doStart();\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception\n+    {\n+        super.doStop();\n+        doClientStop();\n+    }\n+\n+    protected void doClientStart()\n+    {\n+        if (LOG.isDebugEnabled())\n+            LOG.debug(\"doClientStart() {}\", this);\n+\n+        // If we are running in Jetty register shutdown with the ContextHandler.\n+        if (addToContextHandler())\n+        {\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Shutdown registered with ContextHandler\");\n+            return;\n+        }\n+\n+        // If we are running inside a different ServletContainer we can register with the SHUTDOWN_CONTAINER static.\n+        ContainerLifeCycle shutdownContainer = SHUTDOWN_CONTAINER.get();\n+        if (shutdownContainer != null)\n+        {\n+            shutdownContainer.addManaged(this);\n+            if (LOG.isDebugEnabled())\n+                LOG.debug(\"Shutdown registered with ShutdownContainer {}\", shutdownContainer);\n+            return;\n+        }\n+\n+        ShutdownThread.register(this);", "originalCommit": "47f24db0bea94b2057acaaca7d901584cf1cbd02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE2MzExMQ==", "url": "https://github.com/eclipse/jetty.project/pull/5840#discussion_r580163111", "bodyText": "I comment here about the scope of this static with regards to server/context classloaders would be handy", "author": "gregw", "createdAt": "2021-02-22T11:04:51Z", "path": "jetty-websocket/websocket-javax-client/src/main/java/org/eclipse/jetty/websocket/javax/client/internal/JavaxWebSocketClientContainer.java", "diffHunk": "@@ -52,6 +58,16 @@\n @ManagedObject(\"JSR356 Client Container\")\n public class JavaxWebSocketClientContainer extends JavaxWebSocketContainer implements javax.websocket.WebSocketContainer\n {\n+    private static final Logger LOG = LoggerFactory.getLogger(JavaxWebSocketClientContainer.class);\n+    private static final AtomicReference<ContainerLifeCycle> SHUTDOWN_CONTAINER = new AtomicReference<>();", "originalCommit": "47f24db0bea94b2057acaaca7d901584cf1cbd02", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}