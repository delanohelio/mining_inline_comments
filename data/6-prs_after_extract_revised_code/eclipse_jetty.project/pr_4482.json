{"pr_number": 4482, "pr_title": "Issue #4321 Refactored Graceful shutdown", "pr_createdAt": "2020-01-16T16:42:10Z", "pr_url": "https://github.com/eclipse/jetty.project/pull/4482", "timeline": [{"oid": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "url": "https://github.com/eclipse/jetty.project/commit/8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "message": "Issue #4321 Refactored Graceful shutdown\n\nremoved stopTimeout from all abstractLifeCycles.  It is on Graceful.LifeCycle, which is only implemented by components that can start a graceful shutdown (eg Server, ContextHandler and QueuedThreadPool)\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-16T16:40:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxMzQ1NA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367713454", "bodyText": "Don't use the _shutdown field directly here could throw NPE if the value can change to null.", "author": "lachlan-roberts", "createdAt": "2020-01-17T00:11:48Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java", "diffHunk": "@@ -345,13 +371,27 @@ protected void interruptAcceptors()\n     @Override\n     public Future<Void> shutdown()\n     {\n-        return _shutdown.shutdown();\n+        Shutdown shutdown = _shutdown;\n+        if (shutdown == null)\n+            return FutureCallback.SUCCEEDED;\n+\n+        // Signal for the acceptors to stop\n+        Future<Void> done = shutdown.shutdown();\n+        interruptAcceptors();\n+\n+        // Reduce the idle timeout of existing connections\n+        for (EndPoint ep : _endpoints)\n+            ep.setIdleTimeout(_shutdownIdleTimeout);\n+\n+        // Return Future that waits for no acceptors and no connections.\n+        return done;\n     }\n \n     @Override\n     public boolean isShutdown()\n     {\n-        return _shutdown.isShutdown();\n+        Shutdown shutdown = _shutdown;\n+        return shutdown == null || _shutdown.isShutdown();", "originalCommit": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc8b7a9190e15db08e7d2ad83b183cf90df491a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java b/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java\nindex 1bafa2317b..123c1b2505 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/AbstractConnector.java\n\n@@ -391,7 +391,7 @@ public abstract class AbstractConnector extends ContainerLifeCycle implements Co\n     public boolean isShutdown()\n     {\n         Shutdown shutdown = _shutdown;\n-        return shutdown == null || _shutdown.isShutdown();\n+        return shutdown == null || shutdown.isShutdown();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODc3Ng==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367718776", "bodyText": "Should have the @Override annotation.", "author": "lachlan-roberts", "createdAt": "2020-01-17T00:34:27Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -173,22 +174,26 @@ public static String getVersion()\n         return Jetty.VERSION;\n     }\n \n-    public boolean getStopAtShutdown()\n-    {\n-        return _stopAtShutdown;\n-    }\n-\n     /**\n      * Set a graceful stop time.\n      * The {@link StatisticsHandler} must be configured so that open connections can\n      * be tracked for a graceful shutdown.\n      *\n-     * @see org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)\n      */\n-    @Override\n     public void setStopTimeout(long stopTimeout)", "originalCommit": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc8b7a9190e15db08e7d2ad83b183cf90df491a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\nindex e724fc51a8..f3fcca8db3 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n\n@@ -174,18 +173,13 @@ public class Server extends HandlerWrapper implements Attributes, AbstractHandle\n         return Jetty.VERSION;\n     }\n \n-    /**\n-     * Set a graceful stop time.\n-     * The {@link StatisticsHandler} must be configured so that open connections can\n-     * be tracked for a graceful shutdown.\n-     *\n-     */\n+    @Override\n     public void setStopTimeout(long stopTimeout)\n     {\n         _stopTimeout = stopTimeout;\n     }\n \n-    @ManagedAttribute(\"Time in ms to gracefully shutdown the server\")\n+    @Override\n     public long getStopTimeout()\n     {\n         return _stopTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODgyNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367718825", "bodyText": "@Override annotation.", "author": "lachlan-roberts", "createdAt": "2020-01-17T00:34:40Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -173,22 +174,26 @@ public static String getVersion()\n         return Jetty.VERSION;\n     }\n \n-    public boolean getStopAtShutdown()\n-    {\n-        return _stopAtShutdown;\n-    }\n-\n     /**\n      * Set a graceful stop time.\n      * The {@link StatisticsHandler} must be configured so that open connections can\n      * be tracked for a graceful shutdown.\n      *\n-     * @see org.eclipse.jetty.util.component.ContainerLifeCycle#setStopTimeout(long)\n      */\n-    @Override\n     public void setStopTimeout(long stopTimeout)\n     {\n-        super.setStopTimeout(stopTimeout);\n+        _stopTimeout = stopTimeout;\n+    }\n+\n+    @ManagedAttribute(\"Time in ms to gracefully shutdown the server\")\n+    public long getStopTimeout()", "originalCommit": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bc8b7a9190e15db08e7d2ad83b183cf90df491a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\nindex e724fc51a8..f3fcca8db3 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n\n@@ -174,18 +173,13 @@ public class Server extends HandlerWrapper implements Attributes, AbstractHandle\n         return Jetty.VERSION;\n     }\n \n-    /**\n-     * Set a graceful stop time.\n-     * The {@link StatisticsHandler} must be configured so that open connections can\n-     * be tracked for a graceful shutdown.\n-     *\n-     */\n+    @Override\n     public void setStopTimeout(long stopTimeout)\n     {\n         _stopTimeout = stopTimeout;\n     }\n \n-    @ManagedAttribute(\"Time in ms to gracefully shutdown the server\")\n+    @Override\n     public long getStopTimeout()\n     {\n         return _stopTimeout;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIwMg==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367721202", "bodyText": "AbstractHandlerContainer seems like a strange place to put the GracefulContainer interface and the shutdown static method. Why is this not done the way you did  Graceful.LifeCycle and have Graceful.Container.", "author": "lachlan-roberts", "createdAt": "2020-01-17T00:44:56Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java", "diffHunk": "@@ -139,50 +141,51 @@ public void setServer(Server server)\n             }\n     }\n \n-    /**\n-     * Shutdown nested Gracefule handlers\n-     *\n-     * @param futures A list of Futures which must also be waited on for the shutdown (or null)\n-     * returns A MultiException to which any failures are added or null\n-     */\n-    protected void doShutdown(List<Future<Void>> futures) throws MultiException\n+    public interface GracefulContainer extends Graceful.LifeCycle, Container", "originalCommit": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2OTIzNA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367769234", "bodyText": "Because org.eclipse.util.container does not know about Handlers... but yes it is a kind of strange place... I might make it top level.", "author": "gregw", "createdAt": "2020-01-17T04:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2OTM3Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367769372", "bodyText": "hmmm it no longer needs to know about Handlers!", "author": "gregw", "createdAt": "2020-01-17T04:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIwMg=="}], "type": "inlineReview", "revised_code": {"commit": "8bc8b7a9190e15db08e7d2ad83b183cf90df491a", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java\nindex c296301bb3..6e7f126f39 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/AbstractHandlerContainer.java\n\n@@ -140,63 +132,4 @@ public abstract class AbstractHandlerContainer extends AbstractHandler implement\n                 h.setServer(server);\n             }\n     }\n-\n-    public interface GracefulContainer extends Graceful.LifeCycle, Container\n-    {\n-    }\n-\n-    public static void shutdown(GracefulContainer component) throws MultiException\n-    {\n-        if (component.getStopTimeout() <= 0)\n-            return;\n-\n-        MultiException mex = null;\n-\n-        // tell the graceful handlers that we are shutting down\n-        List<Future<Void>> futures = new ArrayList<>();\n-        if (component instanceof Graceful)\n-            futures.add(((Graceful)component).shutdown());\n-        component.getContainedBeans(Graceful.class).stream().map(Graceful::shutdown).forEach(futures::add);\n-\n-        // Wait for all futures with a reducing time budget\n-        long stopTimeout = component.getStopTimeout();\n-        long stopBy = System.currentTimeMillis() + stopTimeout;\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Graceful shutdown {} by \", component, new Date(stopBy));\n-\n-        // Wait for shutdowns\n-        for (Future<Void> future : futures)\n-        {\n-            try\n-            {\n-                if (!future.isDone())\n-                    future.get(Math.max(1L, stopBy - System.currentTimeMillis()), TimeUnit.MILLISECONDS);\n-            }\n-            catch (TimeoutException e)\n-            {\n-                if (mex == null)\n-                    mex = new MultiException();\n-                mex.add(new Exception(\"Failed to gracefully stop \" + future, e));\n-            }\n-            catch (Throwable e)\n-            {\n-                // If the future is also a callback, fail it here (rather than cancel) so we can capture the exception\n-                if (future instanceof Callback && !future.isDone())\n-                    ((Callback)future).failed(e);\n-                if (mex == null)\n-                    mex = new MultiException();\n-                mex.add(e);\n-            }\n-        }\n-\n-        // Cancel any shutdowns not done\n-        for (Future<Void> future : futures)\n-        {\n-            if (!future.isDone())\n-                future.cancel(true);\n-        }\n-\n-        if (mex != null)\n-            mex.ifExceptionThrowMulti();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNjUxNQ==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367726515", "bodyText": "This change is a little concerning, is this somehow related to the graceful shutdown refactor or just a cleanup?", "author": "lachlan-roberts", "createdAt": "2020-01-17T01:06:39Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java", "diffHunk": "@@ -675,10 +689,17 @@ private boolean addCounts(int deltaThreads, int deltaIdle)\n             int threads = AtomicBiInteger.getHi(encoded);\n             int idle = AtomicBiInteger.getLo(encoded);\n             if (threads == Integer.MIN_VALUE) // This is a marker that the pool is stopped.\n-                return false;\n-            long update = AtomicBiInteger.encode(threads + deltaThreads, idle + deltaIdle);\n-            if (_counts.compareAndSet(encoded, update))\n-                return true;\n+            {\n+                long update = AtomicBiInteger.encode(threads, idle + deltaIdle);\n+                if (_counts.compareAndSet(encoded, update))\n+                    return false;\n+            }\n+            else\n+            {\n+                long update = AtomicBiInteger.encode(threads + deltaThreads, idle + deltaIdle);\n+                if (_counts.compareAndSet(encoded, update))\n+                    return true;\n+            }", "originalCommit": "8f8dc84dad9f62a128ff8e7ed6246ec27a4f28cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc3Mjg2MA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r367772860", "bodyText": "It is a minor change that allowed better debugging of graceful shutdown.  It allows the idle count to be maintained while the QTP is stopping", "author": "gregw", "createdAt": "2020-01-17T05:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyNjUxNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "8bc8b7a9190e15db08e7d2ad83b183cf90df491a", "url": "https://github.com/eclipse/jetty.project/commit/8bc8b7a9190e15db08e7d2ad83b183cf90df491a", "message": "Issue #4321 Refactored Graceful shutdown\n\ncleanup after review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-17T05:28:15Z", "type": "commit"}, {"oid": "5bfb6ab43950130b4e4be9e17a58a4822e1ad484", "url": "https://github.com/eclipse/jetty.project/commit/5bfb6ab43950130b4e4be9e17a58a4822e1ad484", "message": "Issue #4321 Refactored Graceful shutdown\n\nreinstate other stop tests (more work to do).\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-17T05:41:02Z", "type": "commit"}, {"oid": "7efb5e4a28e8b0369903ae492ce9c0cdb61ffae2", "url": "https://github.com/eclipse/jetty.project/commit/7efb5e4a28e8b0369903ae492ce9c0cdb61ffae2", "message": "Issue #4321 Refactored Graceful shutdown\n\nFixes for stop test by improving LocalConnector shutdown handling\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-17T06:16:09Z", "type": "commit"}, {"oid": "90091a38f67331bc7e53a9fec543d0687a8da038", "url": "https://github.com/eclipse/jetty.project/commit/90091a38f67331bc7e53a9fec543d0687a8da038", "message": "Issue #4321 Refactored Graceful shutdown\n\nRemoved broken test on LocalConnector that is already tested in GracefulStopTest\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-17T06:18:34Z", "type": "commit"}, {"oid": "b967f3d71b95f9ee6a2de889b3c039b340bdd369", "url": "https://github.com/eclipse/jetty.project/commit/b967f3d71b95f9ee6a2de889b3c039b340bdd369", "message": "Issue #4321 Refactored Graceful shutdown\n\nFixed all stop tests\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-17T06:36:20Z", "type": "commit"}, {"oid": "ffb52febae22f91176ba576ba50fb568b4185f12", "url": "https://github.com/eclipse/jetty.project/commit/ffb52febae22f91176ba576ba50fb568b4185f12", "message": "Issue #4321 Refactored Graceful shutdown\n\nfixed checkstyle\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-17T10:40:19Z", "type": "commit"}, {"oid": "f7eb14172b73c4d12b62fc2e996117405e808996", "url": "https://github.com/eclipse/jetty.project/commit/f7eb14172b73c4d12b62fc2e996117405e808996", "message": "Merge branch 'jetty-10.0.x' into jetty-10.0.x-4321-GracefulRefactor", "committedDate": "2020-01-20T10:10:17Z", "type": "commit"}, {"oid": "6f5405c7292f518b98bd814bf90ac4fe87eeb24b", "url": "https://github.com/eclipse/jetty.project/commit/6f5405c7292f518b98bd814bf90ac4fe87eeb24b", "message": "Issue #4321 Refactored Graceful shutdown\n\nNo stopTimeout JMX attribute\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-20T11:37:46Z", "type": "commit"}, {"oid": "af13771f24ae655a715bd70bc41be21f51336840", "url": "https://github.com/eclipse/jetty.project/commit/af13771f24ae655a715bd70bc41be21f51336840", "message": "Issue #4321 Refactored Graceful shutdown\n\nDump stopTimeout\ntest with default stopTimeout\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-20T11:52:19Z", "type": "commit"}, {"oid": "74dc4e6d64de6260616464e80377f88dfd6762b6", "url": "https://github.com/eclipse/jetty.project/commit/74dc4e6d64de6260616464e80377f88dfd6762b6", "message": "Issue #4321 Refactored Graceful shutdown\n\nUSe sendError for 503\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-21T07:00:24Z", "type": "commit"}, {"oid": "997c1bc0c207499c3b186494a8149dfd247b4ec9", "url": "https://github.com/eclipse/jetty.project/commit/997c1bc0c207499c3b186494a8149dfd247b4ec9", "message": "Issue #4321 Refactored Graceful shutdown\n\nminor cleanups\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-21T12:13:26Z", "type": "commit"}, {"oid": "91b37e3ae8ef9e559dac771a0ac53cb50f0409b8", "url": "https://github.com/eclipse/jetty.project/commit/91b37e3ae8ef9e559dac771a0ac53cb50f0409b8", "message": "Merge branch 'jetty-10.0.x' into jetty-10.0.x-4321-GracefulRefactor", "committedDate": "2020-01-22T08:40:36Z", "type": "commit"}, {"oid": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb", "url": "https://github.com/eclipse/jetty.project/commit/b0b1422ae287cf31a6d2670d0164accaf8ebeabb", "message": "Issue #4321 Refactored Graceful shutdown\n\nSimplifications after review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-22T10:19:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5Nzk4OA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371797988", "bodyText": "I don't understand why this value changed here? Doesn't seem anything to do with shutdown?", "author": "janbartel", "createdAt": "2020-01-28T13:23:08Z", "path": "jetty-jmx/src/test/java/org/eclipse/jetty/jmx/ObjectMBeanTest.java", "diffHunk": "@@ -123,7 +123,7 @@ public void testDerivedAttributes() throws Exception\n \n         assertEquals(\"com.acme.Derived\", derivedInfo.getClassName(), \"name does not match\");\n         assertEquals(\"Test the mbean stuff\", derivedInfo.getDescription(), \"description does not match\");\n-        assertEquals(6, derivedInfo.getAttributes().length, \"attribute count does not match\");\n+        assertEquals(5, derivedInfo.getAttributes().length, \"attribute count does not match\");", "originalCommit": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMzM4OA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371823388", "bodyText": "the stopTimeout used to be an attribute on every AbstractLifeCycle. It no longer is, hence one less attribute.", "author": "gregw", "createdAt": "2020-01-28T14:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5Nzk4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5ODUwMg==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371798502", "bodyText": "Again, odd that this has nothing to do with shutdown. Perhaps you are missing a merge from jetty-10.0.x?", "author": "janbartel", "createdAt": "2020-01-28T13:24:14Z", "path": "jetty-maven-plugin/src/it/jetty-start-gwt-it/beer-client/src/main/java/org/olamy/App.java", "diffHunk": "@@ -44,9 +44,9 @@\n      * The message displayed to the user when the server cannot be reached or\n      * returns an error.\n      */\n-    private static final String SERVER_ERROR = \"An error occurred while \"\n-        + \"attempting to contact the server. Please check your network \"\n-        + \"connection and try again.\";\n+    private static final String SERVER_ERROR = \"An error occurred while \" +\n+        \"attempting to contact the server. Please check your network \" +\n+        \"connection and try again.\";", "originalCommit": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMzk2Mg==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371823962", "bodyText": "I started getting checkstyle failures, so I had to fix this.  I think it was a problem with the merge of the change to apply checkstyle to tests?", "author": "gregw", "createdAt": "2020-01-28T14:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5ODUwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5OTU1MA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r371799550", "bodyText": "The comment at line 40 should be for a CompletableFuture, not just a Future.", "author": "janbartel", "createdAt": "2020-01-28T13:26:28Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "diffHunk": "@@ -43,47 +46,96 @@\n  */\n public interface Graceful", "originalCommit": "b0b1422ae287cf31a6d2670d0164accaf8ebeabb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2d17882f5a15403bd244b7e0f6054a67e94f1745", "chunk": "diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java b/jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java\nindex 28500daaf7..c02a18eba6 100644\n--- a/jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java\n+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java\n\n@@ -59,7 +60,7 @@ public interface Graceful\n \n     /**\n      * A utility class to assist implementing the Graceful interface.\n-     * The {@link #isShutdownDone()} method should be implemented to check if the future\n+     * The {@link #isShutdownDone()} method should be implemented to check if the {@link CompletableFuture}\n      * returned by {@link #shutdown()} should be completed or not.  The {@link #check()}\n      * method should be called when any state is changed which may complete the shutdown.\n      */\n"}}, {"oid": "2d17882f5a15403bd244b7e0f6054a67e94f1745", "url": "https://github.com/eclipse/jetty.project/commit/2d17882f5a15403bd244b7e0f6054a67e94f1745", "message": "Issue #4321 Refactored Graceful shutdown\n\nafter review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-28T14:14:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTAxMw==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372201013", "bodyText": "Does this really need to be a CompleteableFuture rather than just a Future?\nWould you ever expect the caller of this to complete the future or is it to be done internally like in the Shutdown utility with check().", "author": "lachlan-roberts", "createdAt": "2020-01-29T05:55:20Z", "path": "jetty-util/src/main/java/org/eclipse/jetty/util/component/Graceful.java", "diffHunk": "@@ -43,47 +47,96 @@\n  */\n public interface Graceful\n {\n-    Future<Void> shutdown();\n+    /**\n+     * Shutdown the component. When this method returns, the component should not accept any new load.\n+     * @return A future that is completed once all load on the component is completed\n+     */\n+    CompletableFuture<Void> shutdown();", "originalCommit": "2d17882f5a15403bd244b7e0f6054a67e94f1745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMDU3OA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372230578", "bodyText": "I guess the whole point of the API is that we don't know how the caller will wait for the shutdown to be complete... and it is possible to use a CompetableFuture as a Future, but not the other way around.", "author": "gregw", "createdAt": "2020-01-29T07:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwMTAxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTc5MA==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372205790", "bodyText": "I think this should be the only line in the try/catch, otherwise if it throws the stopTimeout will never be set on the ThreadPool.", "author": "lachlan-roberts", "createdAt": "2020-01-29T06:18:14Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -466,21 +464,20 @@ protected void doStop() throws Exception\n \n         MultiException mex = new MultiException();\n \n-        try\n+        if (getStopTimeout() > 0)\n         {\n-            // list if graceful futures\n-            List<Future<Void>> futures = new ArrayList<>();\n-            // First shutdown the network connectors to stop accepting new connections\n-            for (Connector connector : _connectors)\n+            try\n             {\n-                futures.add(connector.shutdown());\n+                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n+                Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);", "originalCommit": "2d17882f5a15403bd244b7e0f6054a67e94f1745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMTk4NQ==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372231985", "bodyText": "ack", "author": "gregw", "createdAt": "2020-01-29T07:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0d4eaaf8c8f3ebf5687f37bf1a5ab0e9c63c24b3", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\nindex 7fbbcfcff9..bc0063c8e5 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n\n@@ -466,18 +466,18 @@ public class Server extends HandlerWrapper implements Attributes\n \n         if (getStopTimeout() > 0)\n         {\n+            long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n             try\n             {\n-                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n                 Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);\n-                QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n-                if (qtp != null)\n-                    qtp.setStopTimeout(Math.min(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));\n             }\n             catch (Throwable e)\n             {\n                 mex.add(e);\n             }\n+            QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n+            if (qtp != null)\n+                qtp.setStopTimeout(Math.max(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));\n         }\n \n         // Now stop the connectors (this will close existing connections)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjYyNg==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372206626", "bodyText": "This logic seems wrong to me, we can never set the stopTimeout on the ThreadPool to longer than 1000ms, and if the Graceful.shutdown takes a full stopTimeout we could get a negative value for the ThreadPool stopTimeout.", "author": "lachlan-roberts", "createdAt": "2020-01-29T06:21:30Z", "path": "jetty-server/src/main/java/org/eclipse/jetty/server/Server.java", "diffHunk": "@@ -466,21 +464,20 @@ protected void doStop() throws Exception\n \n         MultiException mex = new MultiException();\n \n-        try\n+        if (getStopTimeout() > 0)\n         {\n-            // list if graceful futures\n-            List<Future<Void>> futures = new ArrayList<>();\n-            // First shutdown the network connectors to stop accepting new connections\n-            for (Connector connector : _connectors)\n+            try\n             {\n-                futures.add(connector.shutdown());\n+                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n+                Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);\n+                QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n+                if (qtp != null)\n+                    qtp.setStopTimeout(Math.min(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));", "originalCommit": "2d17882f5a15403bd244b7e0f6054a67e94f1745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMTk1Nw==", "url": "https://github.com/eclipse/jetty.project/pull/4482#discussion_r372231957", "bodyText": "oops", "author": "gregw", "createdAt": "2020-01-29T07:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNjYyNg=="}], "type": "inlineReview", "revised_code": {"commit": "0d4eaaf8c8f3ebf5687f37bf1a5ab0e9c63c24b3", "chunk": "diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\nindex 7fbbcfcff9..bc0063c8e5 100644\n--- a/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/Server.java\n\n@@ -466,18 +466,18 @@ public class Server extends HandlerWrapper implements Attributes\n \n         if (getStopTimeout() > 0)\n         {\n+            long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n             try\n             {\n-                long end = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(getStopTimeout());\n                 Graceful.shutdown(this).get(getStopTimeout(), TimeUnit.MILLISECONDS);\n-                QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n-                if (qtp != null)\n-                    qtp.setStopTimeout(Math.min(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));\n             }\n             catch (Throwable e)\n             {\n                 mex.add(e);\n             }\n+            QueuedThreadPool qtp = getBean(QueuedThreadPool.class);\n+            if (qtp != null)\n+                qtp.setStopTimeout(Math.max(1000L, TimeUnit.NANOSECONDS.toMillis(end - System.nanoTime())));\n         }\n \n         // Now stop the connectors (this will close existing connections)\n"}}, {"oid": "0d4eaaf8c8f3ebf5687f37bf1a5ab0e9c63c24b3", "url": "https://github.com/eclipse/jetty.project/commit/0d4eaaf8c8f3ebf5687f37bf1a5ab0e9c63c24b3", "message": "Issue #4321 Refactored Graceful shutdown\n\nafter review\n\nSigned-off-by: Greg Wilkins <gregw@webtide.com>", "committedDate": "2020-01-29T07:51:38Z", "type": "commit"}]}