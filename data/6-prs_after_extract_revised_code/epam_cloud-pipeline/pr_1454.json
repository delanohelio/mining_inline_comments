{"pr_number": 1454, "pr_title": "Issue #1405: Implemented tests for BillingController", "pr_createdAt": "2020-10-01T12:05:02Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1454", "timeline": [{"oid": "c06a08b28a86889f6f7016a0c8947f61cf5d6015", "url": "https://github.com/epam/cloud-pipeline/commit/c06a08b28a86889f6f7016a0c8947f61cf5d6015", "message": "Issue #1405: Implemented tests for BillingController", "committedDate": "2020-10-01T16:24:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4NTI5Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1454#discussion_r500185292", "bodyText": "Expected and actual objects should not be the same. Could you please correct this in other places too?", "author": "ekazachkova", "createdAt": "2020-10-06T10:58:58Z", "path": "api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.billing;\n+\n+import com.epam.pipeline.acl.billing.BillingApiService;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.billing.BillingChartRequest;\n+import com.epam.pipeline.entity.billing.BillingChartInfo;\n+import com.epam.pipeline.entity.billing.BillingGrouping;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.assertj.core.api.Assertions;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.time.LocalDate;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = BillingController.class)\n+public class BillingControllerTest extends AbstractControllerTest {\n+\n+    private static final long COST = 7367L;\n+    private static final String BILLING_URL = SERVLET_PATH + \"/billing\";\n+    private static final String GET_BILLING_CHART_INFO_URL = BILLING_URL + \"/charts\";\n+    private static final String GET_BILLING_CHART_INFO_PAGINATED_URL = GET_BILLING_CHART_INFO_URL + \"/pagination\";\n+    private static final String GET_BILLING_CENTERS = BILLING_URL + \"/centers\";\n+    private static final String REQUEST_JSON = \"{\\\"from\\\":\\\"-999999999-01-01\\\",\" +\n+                                                \"\\\"to\\\":\\\"+999999999-12-31\\\",\" +\n+                                                \"\\\"filters\\\":{\\\"test\\\":[\\\"test\\\"]},\" +\n+                                                \"\\\"interval\\\":\\\"1d\\\",\" +\n+                                                \"\\\"grouping\\\":\\\"BILLING_CENTER\\\",\" +\n+                                                \"\\\"loadDetails\\\":true,\" +\n+                                                \"\\\"pageSize\\\":5,\" +\n+                                                \"\\\"pageNum\\\":1}\";\n+    private BillingChartRequest billingChartRequest;\n+    private List<BillingChartInfo> billingChartInfos;\n+\n+    @Autowired\n+    private BillingApiService mockBillingApiService;\n+\n+    @Before\n+    public void setUp() {\n+        final BillingChartInfo billingChartInfo = BillingChartInfo.builder()\n+                .cost(COST)\n+                .build();\n+        billingChartRequest = new BillingChartRequest(\n+                LocalDate.MIN, LocalDate.MAX, Collections.singletonMap(\"test\", Collections.singletonList(\"test\")),\n+                DateHistogramInterval.DAY, BillingGrouping.BILLING_CENTER, true, 5L, 1L\n+        );\n+\n+        billingChartInfos = Collections.singletonList(billingChartInfo);\n+    }\n+\n+    @Test\n+    public void shouldFailGetBillingChartInfoForUnauthorizedUser() throws Exception {\n+        mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnBillingChartInfo() throws Exception {\n+        Mockito.doReturn(billingChartInfos).when(mockBillingApiService).getBillingChartInfo(billingChartRequest);\n+\n+        final MvcResult mvcResult = mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(REQUEST_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockBillingApiService).getBillingChartInfo(billingChartRequest);\n+        final ArgumentCaptor<BillingChartRequest> billingChartRequestCaptor =\n+                ArgumentCaptor.forClass(BillingChartRequest.class);\n+        Mockito.verify(mockBillingApiService).getBillingChartInfo(billingChartRequestCaptor.capture());\n+        Assertions.assertThat(billingChartRequestCaptor).isEqualTo(billingChartRequestCaptor);", "originalCommit": "76d8f9fed153a03614298b491a3ebc6677de7c35", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31581108aab3de1b3686c3d48b17613e7396593c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java\nindex f1c99930d..d5dcfaf4c 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java\n\n@@ -26,7 +26,6 @@ import com.epam.pipeline.test.web.AbstractControllerTest;\n import com.epam.pipeline.util.ControllerTestUtils;\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.assertj.core.api.Assertions;\n-import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzMDM4NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1454#discussion_r500930385", "bodyText": "To my mind capture check is unnecessary here: you have already add mock call verification with argument. Mockito#verify would be enough.", "author": "ekazachkova", "createdAt": "2020-10-07T11:15:23Z", "path": "api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.billing;\n+\n+import com.epam.pipeline.acl.billing.BillingApiService;\n+import com.epam.pipeline.controller.ResponseResult;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.billing.BillingChartRequest;\n+import com.epam.pipeline.entity.billing.BillingChartInfo;\n+import com.epam.pipeline.entity.billing.BillingGrouping;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.epam.pipeline.util.ControllerTestUtils;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.assertj.core.api.Assertions;\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.time.LocalDate;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = BillingController.class)\n+public class BillingControllerTest extends AbstractControllerTest {\n+\n+    private static final long COST = 7367L;\n+    private static final String BILLING_URL = SERVLET_PATH + \"/billing\";\n+    private static final String GET_BILLING_CHART_INFO_URL = BILLING_URL + \"/charts\";\n+    private static final String GET_BILLING_CHART_INFO_PAGINATED_URL = GET_BILLING_CHART_INFO_URL + \"/pagination\";\n+    private static final String GET_BILLING_CENTERS = BILLING_URL + \"/centers\";\n+    private static final String REQUEST_JSON = \"{\\\"from\\\":\\\"-999999999-01-01\\\",\" +\n+                                                \"\\\"to\\\":\\\"+999999999-12-31\\\",\" +\n+                                                \"\\\"filters\\\":{\\\"test\\\":[\\\"test\\\"]},\" +\n+                                                \"\\\"interval\\\":\\\"1d\\\",\" +\n+                                                \"\\\"grouping\\\":\\\"BILLING_CENTER\\\",\" +\n+                                                \"\\\"loadDetails\\\":true,\" +\n+                                                \"\\\"pageSize\\\":5,\" +\n+                                                \"\\\"pageNum\\\":1}\";\n+    private BillingChartRequest billingChartRequest;\n+    private List<BillingChartInfo> billingChartInfos;\n+\n+    @Autowired\n+    private BillingApiService mockBillingApiService;\n+\n+    @Before\n+    public void setUp() {\n+        final BillingChartInfo billingChartInfo = BillingChartInfo.builder()\n+                .cost(COST)\n+                .build();\n+        billingChartRequest = new BillingChartRequest(\n+                LocalDate.MIN, LocalDate.MAX, Collections.singletonMap(\"test\", Collections.singletonList(\"test\")),\n+                DateHistogramInterval.DAY, BillingGrouping.BILLING_CENTER, true, 5L, 1L\n+        );\n+\n+        billingChartInfos = Collections.singletonList(billingChartInfo);\n+    }\n+\n+    @Test\n+    public void shouldFailGetBillingChartInfoForUnauthorizedUser() throws Exception {\n+        mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n+                .servletPath(SERVLET_PATH))\n+                .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldReturnBillingChartInfo() throws Exception {\n+        Mockito.doReturn(billingChartInfos).when(mockBillingApiService).getBillingChartInfo(billingChartRequest);\n+\n+        final MvcResult mvcResult = mvc().perform(post(GET_BILLING_CHART_INFO_URL)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(EXPECTED_CONTENT_TYPE)\n+                .content(REQUEST_JSON))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(EXPECTED_CONTENT_TYPE))\n+                .andReturn();\n+\n+        Mockito.verify(mockBillingApiService).getBillingChartInfo(billingChartRequest);\n+        final ArgumentCaptor<BillingChartRequest> billingChartRequestCaptor =", "originalCommit": "55b1fca18238a57dbedb9a3ba39eba0f8981566b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "31581108aab3de1b3686c3d48b17613e7396593c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java\nindex f9d1d86cd..d5dcfaf4c 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/billing/BillingControllerTest.java\n\n@@ -26,7 +26,6 @@ import com.epam.pipeline.test.web.AbstractControllerTest;\n import com.epam.pipeline.util.ControllerTestUtils;\n import com.fasterxml.jackson.core.type.TypeReference;\n import org.assertj.core.api.Assertions;\n-import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n"}}, {"oid": "31581108aab3de1b3686c3d48b17613e7396593c", "url": "https://github.com/epam/cloud-pipeline/commit/31581108aab3de1b3686c3d48b17613e7396593c", "message": "Issue #1405: Implemented tests for BillingController", "committedDate": "2020-10-08T09:59:43Z", "type": "commit"}, {"oid": "af5c9bcfe868bf10cd612cc626349e7df36803de", "url": "https://github.com/epam/cloud-pipeline/commit/af5c9bcfe868bf10cd612cc626349e7df36803de", "message": "Issue #1405: Passing billingChartRequest as JSON", "committedDate": "2020-10-08T09:59:50Z", "type": "commit"}, {"oid": "889674f792169cfefae1b56fcea4f7e5ff467ca5", "url": "https://github.com/epam/cloud-pipeline/commit/889674f792169cfefae1b56fcea4f7e5ff467ca5", "message": "Issue #1405: ArgumentCaptor assertions fixed", "committedDate": "2020-10-08T09:59:50Z", "type": "commit"}, {"oid": "d06a794840755de1c5640487db5218466f45e25e", "url": "https://github.com/epam/cloud-pipeline/commit/d06a794840755de1c5640487db5218466f45e25e", "message": "Issue #1405: Removed redundant assertions", "committedDate": "2020-10-08T09:59:51Z", "type": "commit"}, {"oid": "d06a794840755de1c5640487db5218466f45e25e", "url": "https://github.com/epam/cloud-pipeline/commit/d06a794840755de1c5640487db5218466f45e25e", "message": "Issue #1405: Removed redundant assertions", "committedDate": "2020-10-08T09:59:51Z", "type": "forcePushed"}]}