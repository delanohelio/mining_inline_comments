{"pr_number": 1422, "pr_title": "Gui restrictions tests", "pr_createdAt": "2020-09-21T09:49:08Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1422", "timeline": [{"oid": "0500cde86d0394f98a6bf0ae2c20da617d6f4211", "url": "https://github.com/epam/cloud-pipeline/commit/0500cde86d0394f98a6bf0ae2c20da617d6f4211", "message": "add EPMCMBIBPC-2642, EPMCMBIBPC-2645 Restrictions tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-08T09:35:26Z", "type": "commit"}, {"oid": "4bd4a12c68fea3f21ee4ac94b30ded1624fb5dc4", "url": "https://github.com/epam/cloud-pipeline/commit/4bd4a12c68fea3f21ee4ac94b30ded1624fb5dc4", "message": "Merge branch 'develop' into gui_restrictions_tests", "committedDate": "2020-09-08T09:56:00Z", "type": "commit"}, {"oid": "0a4fa6a8be5b06b5e45923dbf160bcd91e6a4843", "url": "https://github.com/epam/cloud-pipeline/commit/0a4fa6a8be5b06b5e45923dbf160bcd91e6a4843", "message": "add Restrictions tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-14T00:14:58Z", "type": "commit"}, {"oid": "947c6f5251720a620768dd013b99c34c75ec08bf", "url": "https://github.com/epam/cloud-pipeline/commit/947c6f5251720a620768dd013b99c34c75ec08bf", "message": "add EPMCMBIBPC-2652 restrictions test\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-17T23:57:51Z", "type": "commit"}, {"oid": "df5658ac6072d256199e70c7fa086aec89fa8c37", "url": "https://github.com/epam/cloud-pipeline/commit/df5658ac6072d256199e70c7fa086aec89fa8c37", "message": "update Restrictions tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-18T19:31:30Z", "type": "commit"}, {"oid": "ce3c73aa1f8470579027f7f27c6a7390c10dbd92", "url": "https://github.com/epam/cloud-pipeline/commit/ce3c73aa1f8470579027f7f27c6a7390c10dbd92", "message": "update Restrictions tests\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-20T15:36:19Z", "type": "commit"}, {"oid": "01507024a05b4d65dc5c1869cd25bae5c08ff8f7", "url": "https://github.com/epam/cloud-pipeline/commit/01507024a05b4d65dc5c1869cd25bae5c08ff8f7", "message": "fix codacy issues\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-24T07:12:01Z", "type": "commit"}, {"oid": "69c0441048358d280a9f9bffdc50765b9fe79150", "url": "https://github.com/epam/cloud-pipeline/commit/69c0441048358d280a9f9bffdc50765b9fe79150", "message": "update default.conf\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-28T09:30:01Z", "type": "commit"}, {"oid": "ab5055d443b32285c799d9e0976827ca2520e7d4", "url": "https://github.com/epam/cloud-pipeline/commit/ab5055d443b32285c799d9e0976827ca2520e7d4", "message": "fix codacy issue\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-28T09:38:17Z", "type": "commit"}, {"oid": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "url": "https://github.com/epam/cloud-pipeline/commit/3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "message": "update license year\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-28T09:47:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDc3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495940772", "bodyText": "Do we really need this field? I don't see its use and property in default.conf", "author": "kamyshova", "createdAt": "2020-09-28T13:31:23Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java", "diffHunk": "@@ -131,6 +135,10 @@\n     public static final String CLOUD_PROVIDER;\n     public static final String ANOTHER_INSTANCE;\n     public static final String DEFAULT_INSTANCE_FAMILY_NAME;\n+    public static final String DEFAULT_CLUSTER_ALLOWED_INSTANCE_TYPES;\n+    public static final String CLUSTER_ALLOWED_MASKS;\n+    public static final String DEFAULT_CLUSTER_ALLOWED_PRICE_TYPES;\n+    public static final String CLUSTER_ALLOWED_PRICE_TYPES_VALUE;", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MTgwNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496141807", "bodyText": "CLUSTER_ALLOWED_PRICE_TYPES_VALUE has been removed.", "author": "maryvictol", "createdAt": "2020-09-28T18:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MDc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java\nindex 881f6a14f..dcaf0bbf8 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/utils/C.java\n\n@@ -138,7 +137,6 @@ public class C {\n     public static final String DEFAULT_CLUSTER_ALLOWED_INSTANCE_TYPES;\n     public static final String CLUSTER_ALLOWED_MASKS;\n     public static final String DEFAULT_CLUSTER_ALLOWED_PRICE_TYPES;\n-    public static final String CLUSTER_ALLOWED_PRICE_TYPES_VALUE;\n \n     public static final String SPOT_PRICE_NAME;\n     public static final String AUTH_TOKEN;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Mjg2MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495942860", "bodyText": "Could you please add space before and after = ?", "author": "kamyshova", "createdAt": "2020-09-28T13:34:17Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -69,13 +76,23 @@\n     private final String pipeline = \"restrictionTestPipeline\" + Utils.randomSuffix();\n     private final String secondPipeline = \"restrictionTestPipeline\" + Utils.randomSuffix();\n     private final String configuration = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n+    private final String configuration1 = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n     private final String secondConfiguration = \"restrictionTestConfiguration\" + Utils.randomSuffix();\n     private final String customDisk = \"22\";\n     private final String configurationName = \"customConfig\";\n     private final String testRole = \"ROLE_USER\";\n     private final String instanceTypesMask = \"Allowed instance types mask\";\n     private final String toolInstanceTypesMask = \"Allowed tool instance types mask\";\n     private final String onDemandPrice = \"On demand\";\n+    private final String clusterAllowedPrice = \"on_demand\";\n+    private final String spotPriceName=C.SPOT_PRICE_NAME;", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwOTU3NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496009574", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T14:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0Mjg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -85,7 +85,7 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     private final String toolInstanceTypesMask = \"Allowed tool instance types mask\";\n     private final String onDemandPrice = \"On demand\";\n     private final String clusterAllowedPrice = \"on_demand\";\n-    private final String spotPriceName=C.SPOT_PRICE_NAME;\n+    private final String spotPriceName = C.SPOT_PRICE_NAME;\n     private final String defaultClusterAllowedInstanceTypes = C.DEFAULT_CLUSTER_ALLOWED_INSTANCE_TYPES;\n     private final String defaultClusterAllowedPriceTypes = C.DEFAULT_CLUSTER_ALLOWED_PRICE_TYPES;\n     private final String clusterAllowedMasks = C.CLUSTER_ALLOWED_MASKS;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzA5Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495947096", "bodyText": "Unindent lines, please", "author": "kamyshova", "createdAt": "2020-09-28T13:40:18Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5NzYyNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496097627", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T16:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1Njg5Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495956896", "bodyText": "We can use shouldHaveSize() for check instead of this", "author": "kamyshova", "createdAt": "2020-09-28T13:53:50Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java", "diffHunk": "@@ -499,6 +500,18 @@ default ELEMENT_TYPE checkValueIsInDropDown(final Primitive combobox, final Stri\n         return (ELEMENT_TYPE) this;\n     }\n \n+    default ELEMENT_TYPE checkDropDownCount(final Primitive combobox, final int count) {\n+        get(combobox).shouldBe(visible).click();\n+        assertEquals(SelenideElements.of(byClassName(\"ant-select-dropdown-menu-item\")).size(), count,\n+                \"Dropdown list count doesn't correspond expected\");", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyOTY2MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496129661", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1Njg5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java\nindex 007730087..6f814ec59 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/ao/AccessObject.java\n\n@@ -502,8 +502,7 @@ public interface AccessObject<ELEMENT_TYPE extends AccessObject> {\n \n     default ELEMENT_TYPE checkDropDownCount(final Primitive combobox, final int count) {\n         get(combobox).shouldBe(visible).click();\n-        assertEquals(SelenideElements.of(byClassName(\"ant-select-dropdown-menu-item\")).size(), count,\n-                \"Dropdown list count doesn't correspond expected\");\n+        SelenideElements.of(byClassName(\"ant-select-dropdown-menu-item\")).shouldHaveSize(count);\n         return (ELEMENT_TYPE) this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MjMwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495962309", "bodyText": "We have Utils.ON_DEMAND constant, let's replace in all places of the class", "author": "kamyshova", "createdAt": "2020-09-28T14:00:59Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMTYyMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496101621", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MjMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2Mjg2Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495962866", "bodyText": "Could you please add space before and after = ?", "author": "kamyshova", "createdAt": "2020-09-28T14:01:40Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTI2OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496111269", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2Mjg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3ODMzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495978334", "bodyText": "Could you please add space before and after = ?", "author": "kamyshova", "createdAt": "2020-09-28T14:23:12Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExMTY3MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496111671", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3ODMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTI1NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981254", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:27:05Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNjU4NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496116585", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTMxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981310", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:27:11Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNjk2Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496116963", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:27:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTcxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981714", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:27:44Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzMxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496117317", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTcxNA=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgxOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981819", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:27:52Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzUxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496117517", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTkyOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495981929", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:28:01Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExNzYyNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496117625", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjAyMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495982022", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:28:10Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExODYyNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496118627", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjAyMg=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjA5Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495982093", "bodyText": "The same as above", "author": "kamyshova", "createdAt": "2020-09-28T14:28:17Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExODczMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496118732", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MjA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzIxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495983217", "bodyText": "Could you please add space before { ?", "author": "kamyshova", "createdAt": "2020-09-28T14:29:43Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -93,74 +110,562 @@ public void deletingEntities() {\n     @AfterMethod(alwaysRun = true)\n     public void logoutUser() {\n         logout();\n-        loginAs(admin);\n-        setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n-        setMaskForUser(user.login, instanceTypesMask, \"\");\n-        setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n-        setMaskForRole(testRole, instanceTypesMask, \"\");\n-        tools()\n-                .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n-                        tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n-        logout();\n     }\n \n-    @Test(priority = 1)\n+    @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-        loginAs(admin);\n-        library()\n-                .createFolder(folder)\n-                .clickOnFolder(folder)\n-                .clickEditButton()\n-                .clickOnPermissionsTab()\n-                .addNewUser(user.login)\n-                .selectByName(user.login)\n-                .showPermissions()\n-                .set(READ, ALLOW)\n-                .set(WRITE, ALLOW)\n-                .set(EXECUTE, ALLOW)\n-                .closeAll();\n-        library()\n-                .cd(folder)\n-                .createPipeline(pipeline)\n-                .clickOnDraftVersion(pipeline)\n-                .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n-                        profile\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .clear(NAME).setValue(NAME, configurationName)\n-                                .sleep(1, SECONDS)\n-                                .click(SAVE)\n-                                .sleep(3, SECONDS)\n-                                .expandTab(EXEC_ENVIRONMENT)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                );\n-        library()\n-                .cd(folder)\n-                .createConfiguration(configuration)\n-                .configurationWithin(configuration, configuration ->\n-                        configuration\n-                                .expandTabs(execEnvironmentTab)\n-                                .setValue(DISK, customDisk)\n-                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                .selectDockerImage(dockerImage ->\n-                                        dockerImage\n-                                                .selectRegistry(defaultRegistry)\n-                                                .selectGroup(defaultGroup)\n-                                                .selectTool(testingTool)\n-                                                .click(OK)\n-                                )\n-                                .click(SAVE)\n-                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+            loginAs(admin);\n+            library()\n+                    .createFolder(folder)\n+                    .clickOnFolder(folder)\n+                    .clickEditButton()\n+                    .clickOnPermissionsTab()\n+                    .addNewUser(user.login)\n+                    .selectByName(user.login)\n+                    .showPermissions()\n+                    .set(READ, ALLOW)\n+                    .set(WRITE, ALLOW)\n+                    .set(EXECUTE, ALLOW)\n+                    .closeAll();\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(pipeline)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            instanceTypesCount = profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .clear(NAME).setValue(NAME, configurationName)\n+                                    .sleep(1, SECONDS)\n+                                    .click(SAVE)\n+                                    .sleep(3, SECONDS)\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                    .dropDownCount(INSTANCE_TYPE));\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .setValue(DISK, customDisk)\n+                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                    .selectDockerImage(dockerImage ->\n+                                            dockerImage\n+                                                    .selectRegistry(defaultRegistry)\n+                                                    .selectGroup(defaultGroup)\n+                                                    .selectTool(testingTool)\n+                                                    .click(OK)\n+                                    )\n+                                    .click(SAVE)\n+                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n     @TestCase({\"EPMCMBIBPC-2638\"})\n     public void validationOfInstanceTypesRestrictionsExistingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2639\"})\n+    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .createPipeline(secondPipeline)\n+                    .clickOnDraftVersion(secondPipeline)\n+                    .configurationTab()\n+                    .editConfiguration(\"default\", profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(secondConfiguration)\n+                    .configurationWithin(secondConfiguration, configuration ->\n+                            configuration\n+                                    .sleep(2, SECONDS)\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    );\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2640\"})\n+    public void validationOfInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            validationOfInstanceTypesRestrictions();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2641\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2643\"})\n+    public void validationOfToolsInstanceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setMaskForRole(testRole, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2642\"})\n+    public void validationOfToolsInstanceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2644\"})\n+    public void validationOfInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            library()\n+                    .cd(folder)\n+                    .createConfiguration(configuration1)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .selectPipeline(selection ->\n+                                            selection.ensureVisible(TREE, FOLDERS)\n+                                                    .selectFolder(folder)\n+                                                    .selectPipeline(pipeline)\n+                                                    .sleep(2, SECONDS)\n+                                                    .selectFirstVersion()\n+                                                    .ok()\n+                                                    .also(confirmConfigurationChange())\n+                                    )\n+                                    .setValue(DISK, customDisk)\n+                                    .click(SAVE));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .ensure(DISK, not(empty))\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, not(empty))\n+                                    .checkDropDownCount(INSTANCE_TYPE, instanceTypesCount)\n+                    );\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration1, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName)\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2645\"})\n+    public void validationOfToolsInstanceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s.*\", instanceFamilyName));\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker,\n+                    defaultClusterAllowedInstanceTypes);\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2646\"})\n+    public void validationOfInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setMaskForRole(testRole, instanceTypesMask, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            logout();\n+            loginAs(user);\n+            library()\n+                    .cd(folder)\n+                    .clickOnDraftVersion(pipeline)\n+                    .configurationTab()\n+                    .editConfiguration(configurationName, profile ->\n+                            profile\n+                                    .expandTab(EXEC_ENVIRONMENT)\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[2])\n+                    )\n+                    .click(CODE_TAB)\n+                    .exitFromConfigurationWithoutSaved();\n+            library()\n+                    .cd(folder)\n+                    .configurationWithin(configuration, configuration ->\n+                            configuration\n+                                    .expandTabs(execEnvironmentTab)\n+                                    .sleep(4, SECONDS)\n+                                    .ensure(DISK, value(customDisk))\n+                                    .ensure(DOCKER_IMAGE, value(defaultGroup), value(testingTool))\n+                                    .ensure(INSTANCE_TYPE, empty)\n+                                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3])\n+                    )\n+                    .exitFromConfigurationWithoutSaved();\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .sleep(1, SECONDS)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setMaskForRole(testRole, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+        }\n+    }\n+\n+    @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2647\"})\n+    public void validationOfToolsInstanceTypesRestrictionsHierarchy() {\n+        try {\n+            String[] masks = clusterAllowedMasks.split(\",\");\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, format(\"%s*\", masks[0]));\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, format(\"%s*\", masks[1]));\n+            setMaskForUser(user.login, instanceTypesMask, format(\"%s*\", masks[2]));\n+            setMaskForUser(user.login, toolInstanceTypesMask, format(\"%s*\", masks[3]));\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(format(\"%s.*\", instanceFamilyName))\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, instanceFamilyName);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(EXEC_ENVIRONMENT)\n+                    .checkValueIsInDropDown(INSTANCE_TYPE, masks[3]);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypes, defaultClusterAllowedInstanceTypes);\n+            setClusterAllowedStringPreference(clusterAllowedInstanceTypesDocker, defaultClusterAllowedInstanceTypes);\n+            setMaskForUser(user.login, instanceTypesMask, \"\");\n+            setMaskForUser(user.login, toolInstanceTypesMask, \"\");\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .addAllowedToolInstanceTypesMask(\"\")\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2648\"})\n+    public void validationOfPriceTypesRestrictionsOverUserManagement() {\n+        try {\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2649\"})\n+    public void validationOfPriceTypesRestrictionsForUserGroup() {\n+        try {\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            navigationMenu()\n+                    .settings()\n+                    .switchToUserManagement()\n+                    .switchToRoles()\n+                    .editRole(testRole)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+        }\n+    }\n+\n+    @CloudProviderOnly(values = {Cloud.AWS, Cloud.GCP})\n+    @Test\n+    @TestCase({\"EPMCMBIBPC-2650\"})\n+    public void validationOfPriceTypesRestrictionsOverInstanceManagement() {\n+        try {\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(instanceManagement ->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(onDemandPrice)\n+                                            .clickApply()\n+                                            .sleep(2, SECONDS)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+            logout();\n+            loginAs(user);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool\n+                                    .hover(SHOW_METADATA)\n+                                    .ensure(attributesMenu, appears)\n+                                    .ensure(showInstanceManagement, not(visible)));\n+            tools()\n+                    .perform(defaultRegistry, defaultGroup, testingTool, ToolTab::runWithCustomSettings)\n+                    .expandTab(ADVANCED_PANEL)\n+                    .ensurePriceTypeList(ON_DEMAND);\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            tools()\n+                    .performWithin(defaultRegistry, defaultGroup, testingTool, tool ->\n+                            tool.showInstanceManagement(InstanceManagementSectionAO::clearAllowedPriceTypeField));\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2651\"})\n+    public void validationOfPriceTypesRestrictionsSystemSettings() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+        }\n+    }\n+\n+    @CloudProviderOnly(values={Cloud.AWS,Cloud.GCP})\n+    @Test(dependsOnMethods={\"preparationForValidationOfInstanceTypesRestrictions\"})\n+    @TestCase({\"EPMCMBIBPC-2652\"})\n+    public void validationOfPriceTypesRestrictionsHierarchy() {\n+        try {\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, clusterAllowedPrice);\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .setPriceType(spotPriceName)\n+                                            .clickApply()\n+                                            .sleep(2,SECONDS)));\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", spotPriceName);\n+            logout();\n+            loginAs(admin);\n+            openEditUserTab(user.login)\n+                    .setAllowedPriceType(onDemandPrice)\n+                    .ok();\n+            logout();\n+            loginAs(user);\n+            validationOfPriceTypesRestrictions(\"On-demand\", \"On-demand\", \"On-demand\");\n+        } finally {\n+            logout();\n+            loginAs(admin);\n+            setClusterAllowedStringPreference(clusterAllowedPriceTypes, defaultClusterAllowedPriceTypes);\n+            openEditUserTab(user.login)\n+                    .clearAllowedPriceTypeField()\n+                    .ok();\n+            tools()\n+                    .performWithin(defaultRegistry,defaultGroup,testingTool,tool->\n+                            tool.showInstanceManagement(instanceManagement->\n+                                    instanceManagement\n+                                            .clearAllowedPriceTypeField()\n+                                            .sleep(2,SECONDS)));\n+        }\n+    }\n+\n+    private EditUserPopup openEditUserTab(String user) {\n+        return navigationMenu()\n+                .settings()\n+                .switchToUserManagement()\n+                .switchToUsers()\n+                .searchForUserEntry(user)\n+                .edit();\n+    }\n+\n+    private void setMaskForUser(String user, String mask, String value) {\n+        openEditUserTab(user)\n+                .addAllowedLaunchOptions(mask, value)\n+                .ok();\n+    }\n+\n+    private void setMaskForRole(String role, String mask, String value){", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNTAwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496105002", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -115,52 +115,52 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n     @Test\n     @TestCase({\"EPMCMBIBPC-2637\"})\n     public void preparationForValidationOfInstanceTypesRestrictions() {\n-            loginAs(admin);\n-            library()\n-                    .createFolder(folder)\n-                    .clickOnFolder(folder)\n-                    .clickEditButton()\n-                    .clickOnPermissionsTab()\n-                    .addNewUser(user.login)\n-                    .selectByName(user.login)\n-                    .showPermissions()\n-                    .set(READ, ALLOW)\n-                    .set(WRITE, ALLOW)\n-                    .set(EXECUTE, ALLOW)\n-                    .closeAll();\n-            library()\n-                    .cd(folder)\n-                    .createPipeline(pipeline)\n-                    .clickOnDraftVersion(pipeline)\n-                    .configurationTab()\n-                    .editConfiguration(\"default\", profile ->\n-                            instanceTypesCount = profile\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .clear(NAME).setValue(NAME, configurationName)\n-                                    .sleep(1, SECONDS)\n-                                    .click(SAVE)\n-                                    .sleep(3, SECONDS)\n-                                    .expandTab(EXEC_ENVIRONMENT)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n-                                    .dropDownCount(INSTANCE_TYPE));\n-            library()\n-                    .cd(folder)\n-                    .createConfiguration(configuration)\n-                    .configurationWithin(configuration, configuration ->\n-                            configuration\n-                                    .expandTabs(execEnvironmentTab)\n-                                    .setValue(DISK, customDisk)\n-                                    .selectValue(INSTANCE_TYPE, defaultInstanceType)\n-                                    .selectDockerImage(dockerImage ->\n-                                            dockerImage\n-                                                    .selectRegistry(defaultRegistry)\n-                                                    .selectGroup(defaultGroup)\n-                                                    .selectTool(testingTool)\n-                                                    .click(OK)\n-                                    )\n-                                    .click(SAVE)\n-                                    .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n+        loginAs(admin);\n+        library()\n+                .createFolder(folder)\n+                .clickOnFolder(folder)\n+                .clickEditButton()\n+                .clickOnPermissionsTab()\n+                .addNewUser(user.login)\n+                .selectByName(user.login)\n+                .showPermissions()\n+                .set(READ, ALLOW)\n+                .set(WRITE, ALLOW)\n+                .set(EXECUTE, ALLOW)\n+                .closeAll();\n+        library()\n+                .cd(folder)\n+                .createPipeline(pipeline)\n+                .clickOnDraftVersion(pipeline)\n+                .configurationTab()\n+                .editConfiguration(\"default\", profile ->\n+                        instanceTypesCount = profile\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .clear(NAME).setValue(NAME, configurationName)\n+                                .sleep(1, SECONDS)\n+                                .click(SAVE)\n+                                .sleep(3, SECONDS)\n+                                .expandTab(EXEC_ENVIRONMENT)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType))\n+                                .dropDownCount(INSTANCE_TYPE));\n+        library()\n+                .cd(folder)\n+                .createConfiguration(configuration)\n+                .configurationWithin(configuration, configuration ->\n+                        configuration\n+                                .expandTabs(execEnvironmentTab)\n+                                .setValue(DISK, customDisk)\n+                                .selectValue(INSTANCE_TYPE, defaultInstanceType)\n+                                .selectDockerImage(dockerImage ->\n+                                        dockerImage\n+                                                .selectRegistry(defaultRegistry)\n+                                                .selectGroup(defaultGroup)\n+                                                .selectTool(testingTool)\n+                                                .click(OK)\n+                                )\n+                                .click(SAVE)\n+                                .ensure(INSTANCE_TYPE, text(defaultInstanceType)));\n     }\n \n     @Test(dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NzQ1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r495987457", "bodyText": "Could you please add space after , and before ->?", "author": "kamyshova", "createdAt": "2020-09-28T14:35:22Z", "path": "e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java", "diffHunk": "@@ -188,123 +693,24 @@ public void validationOfInstanceTypesRestrictionsExistingObjects() {\n                 .exitFromConfigurationWithoutSaved();\n     }\n \n-    @Test(priority = 2, dependsOnMethods = {\"preparationForValidationOfInstanceTypesRestrictions\"})\n-    @TestCase({\"EPMCMBIBPC-2639\"})\n-    public void validationOfInstanceTypesRestrictionsCreatingObjects() {\n-        loginAs(admin);\n-        setMaskForUser(user.login, instanceTypesMask, format(\"%s.*\", instanceFamilyName));\n-        logout();\n-        loginAs(user);\n+    private void validationOfPriceTypesRestrictions(String pipelinePriceTypes, String configurationPriceTypes, String toolPriceTypes) {\n         library()\n                 .cd(folder)\n-                .createPipeline(secondPipeline)\n-                .clickOnDraftVersion(secondPipeline)\n+                .clickOnDraftVersion(pipeline)\n                 .configurationTab()\n-                .editConfiguration(\"default\", profile ->\n+                .editConfiguration(configurationName,profile->", "originalCommit": "3b6fea79d885330dbc6f3a8521dd4f4baf69fe7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMzQzNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1422#discussion_r496103435", "bodyText": "done", "author": "maryvictol", "createdAt": "2020-09-28T17:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NzQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "chunk": "diff --git a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\nindex 688c5337c..c1f1c1ce9 100644\n--- a/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n+++ b/e2e/gui/src/test/java/com/epam/pipeline/autotests/RestrictionsOnInstancePriceTypeTest.java\n\n@@ -698,7 +698,7 @@ public class RestrictionsOnInstancePriceTypeTest extends AbstractBfxPipelineTest\n                 .cd(folder)\n                 .clickOnDraftVersion(pipeline)\n                 .configurationTab()\n-                .editConfiguration(configurationName,profile->\n+                .editConfiguration(configurationName, profile ->\n                         profile\n                                 .expandTab(ADVANCED_PANEL)\n                                 .checkValueIsInDropDown(PRICE_TYPE, pipelinePriceTypes));\n"}}, {"oid": "628714e3b5eae1da0cb7a77a27b188bf88c891ea", "url": "https://github.com/epam/cloud-pipeline/commit/628714e3b5eae1da0cb7a77a27b188bf88c891ea", "message": "update restrictions tests correspond review comments\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-28T18:16:58Z", "type": "commit"}, {"oid": "28f0c467d52d3c45f50cab545592465f269f290d", "url": "https://github.com/epam/cloud-pipeline/commit/28f0c467d52d3c45f50cab545592465f269f290d", "message": "remove unused import\n\nSigned-off-by: Mariia_Tolstaia <Mariia_Tolstaia@epam.com>", "committedDate": "2020-09-29T17:40:57Z", "type": "commit"}, {"oid": "48ade139f1b3f152ddb6fcc7e7d263bbc7058c26", "url": "https://github.com/epam/cloud-pipeline/commit/48ade139f1b3f152ddb6fcc7e7d263bbc7058c26", "message": "restrictions tests: minor style fix", "committedDate": "2020-09-30T10:55:56Z", "type": "commit"}]}