{"pr_number": 1657, "pr_title": "Issue #1646 Export node monitoring reports as Excel", "pr_createdAt": "2020-12-15T17:07:41Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1657", "timeline": [{"oid": "80ecab35fa28ef737f11cfc43c9d80d76d02819e", "url": "https://github.com/epam/cloud-pipeline/commit/80ecab35fa28ef737f11cfc43c9d80d76d02819e", "message": "Issue #1646 Implement export of node monitoring stats to Excel file", "committedDate": "2020-12-15T13:58:52Z", "type": "commit"}, {"oid": "1e150b1c6142e87cf869fd83678df2365a1156fe", "url": "https://github.com/epam/cloud-pipeline/commit/1e150b1c6142e87cf869fd83678df2365a1156fe", "message": "Issue #1646 Extract error messages", "committedDate": "2020-12-15T14:37:55Z", "type": "commit"}, {"oid": "fa5c6f6cfd4eb83ac2bdc7cf22e583c699fa58ee", "url": "https://github.com/epam/cloud-pipeline/commit/fa5c6f6cfd4eb83ac2bdc7cf22e583c699fa58ee", "message": "Issue #1646 Configure path to XLS template via env var", "committedDate": "2020-12-15T16:12:15Z", "type": "commit"}, {"oid": "5c80ac0602fde97757545fd5d1a0b498b71868fc", "url": "https://github.com/epam/cloud-pipeline/commit/5c80ac0602fde97757545fd5d1a0b498b71868fc", "message": "Issue #1646 Use formulas with relative links to cells instead of absolute values on the disks summary list", "committedDate": "2020-12-15T17:53:17Z", "type": "commit"}, {"oid": "b88c8091e25660ee512523510932e4ccadfe329d", "url": "https://github.com/epam/cloud-pipeline/commit/b88c8091e25660ee512523510932e4ccadfe329d", "message": "Issue #1646 Minor refactoring: reuse methods, use constants instead of plain values/literals", "committedDate": "2020-12-16T08:46:50Z", "type": "commit"}, {"oid": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "url": "https://github.com/epam/cloud-pipeline/commit/c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "message": "Issue #1646 Synchronize access to XLS report compilation method, open template in read-only mode", "committedDate": "2020-12-16T09:15:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3OTY5Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544379692", "bodyText": "Could we use approach similar to the one used in CloudFacadeImpl to determine what kind of writer is required?", "author": "tcibinan", "createdAt": "2020-12-16T15:14:37Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -93,12 +97,14 @@ public InputStream getStatsForNodeAsInputStream(final String nodeName,\n                                           ? minDuration\n                                           : interval;\n         final List<MonitoringStats> monitoringStats = getStats(nodeName, start, end, adjustedDuration);\n-        final MonitoringStatsWriter statsWriter = new MonitoringStatsWriter();\n-        try {\n-            return new StringInputStream(statsWriter.convertStatsToCsvString(monitoringStats));\n-        } catch (IOException e) {\n-            throw new IllegalStateException(messageHelper.getMessage(MessageConstants.ERROR_BAD_STATS_FILE_ENCODING),\n-                                            e);\n+        switch (type) {", "originalCommit": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MDkyNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545050925", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-12-17T12:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3OTY5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a61e0e8d8a74bbf13f9a6396e835629c3cdc47a2", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java b/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java\nindex 6d0a2e951..9074284b4 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java\n\n@@ -99,7 +98,7 @@ public class ESMonitoringManager implements UsageMonitoringManager {\n         final List<MonitoringStats> monitoringStats = getStats(nodeName, start, end, adjustedDuration);\n         switch (type) {\n             case CSV:\n-                return convertStatsToCsv(monitoringStats);\n+                return csvStatsWriter.convertStatsToFile(monitoringStats);\n             case XLS:\n                 return xlsStatsWriter.convertStatsToFile(monitoringStats);\n             default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDM0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544380342", "bodyText": "I suppose we can get rid of checked exceptions being thrown from CsvMonitoringStatsWriter to simplify the call site.", "author": "tcibinan", "createdAt": "2020-12-16T15:15:24Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java", "diffHunk": "@@ -249,4 +255,13 @@ private LocalDateTime asMonitoringDateTime(final String dateTimeString) {\n         s3.setUsableSpace(s1.getUsableSpace() + s2.getUsableSpace());\n         return s3;\n     }\n+\n+    private InputStream convertStatsToCsv(final List<MonitoringStats> monitoringStats) {\n+        try {\n+            return csvStatsWriter.convertStatsToFile(monitoringStats);", "originalCommit": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjIxOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052218", "bodyText": "Removed checked exception from method declaration in the abstract class, process writer-specific exceptions inside a concrete class", "author": "Wedds", "createdAt": "2020-12-17T12:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a61e0e8d8a74bbf13f9a6396e835629c3cdc47a2", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java b/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java\nindex 6d0a2e951..9074284b4 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/performancemonitoring/ESMonitoringManager.java\n\n@@ -255,13 +254,4 @@ public class ESMonitoringManager implements UsageMonitoringManager {\n         s3.setUsableSpace(s1.getUsableSpace() + s2.getUsableSpace());\n         return s3;\n     }\n-\n-    private InputStream convertStatsToCsv(final List<MonitoringStats> monitoringStats) {\n-        try {\n-            return csvStatsWriter.convertStatsToFile(monitoringStats);\n-        } catch (IOException e) {\n-            throw new IllegalStateException(messageHelper.getMessage(MessageConstants.ERROR_BAD_STATS_FILE_ENCODING),\n-                                            e);\n-        }\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NjA1OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544386058", "bodyText": "I assume a proper error message would be nice in case templatePath is either blank or null.", "author": "tcibinan", "createdAt": "2020-12-16T15:22:25Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {\n+        try (Workbook wb = WorkbookFactory.create(new File(templatePath), null, true);", "originalCommit": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjI5NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052295", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-12-17T12:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NjA1OA=="}], "type": "inlineReview", "revised_code": {"commit": "aa8b3e27b905188e0a61ed1b7f5647f385bde70e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java b/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java\nindex 10d6d4533..2d80ecb18 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java\n\n@@ -19,6 +19,7 @@ package com.epam.pipeline.manager.cluster.writer;\n import com.epam.pipeline.common.MessageConstants;\n import com.epam.pipeline.common.MessageHelper;\n import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.manager.cluster.MonitoringReportType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n import org.apache.poi.hssf.util.CellReference;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NzE3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544387178", "bodyText": "Why is this method synchronized? It look likes we don't use any shared objects here.", "author": "tcibinan", "createdAt": "2020-12-16T15:23:49Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.writer;\n+\n+import com.epam.pipeline.common.MessageConstants;\n+import com.epam.pipeline.common.MessageHelper;\n+import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n+import org.apache.poi.hssf.util.CellReference;\n+import org.apache.poi.openxml4j.exceptions.InvalidFormatException;\n+import org.apache.poi.ss.usermodel.Cell;\n+import org.apache.poi.ss.usermodel.CellStyle;\n+import org.apache.poi.ss.usermodel.CellType;\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.ss.usermodel.WorkbookFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@Service\n+@SuppressWarnings(\"checkstyle:MagicNumber\")\n+public class XlsMonitoringStatsWriter extends AbstractMonitoringStatsWriter {\n+\n+    private static final String SCALED_DATA_SHEET = \"SCALED_DATA\";\n+    private static final String DISK_DATA_SHEET = \"DISKS_SUMMARY\";\n+    private static final String RAW_DATA_SHEET = \"DATA\";\n+    private static final String CPU_CONVERSION_FORMULA = \"DATA!%c%d/100\";\n+    private static final String MEM_CONVERSION_FORMULA = \"DATA!E%d*DATA!%c%d/100/1073741824\";\n+    private static final String NET_CONVERSION_FORMULA = \"DATA!%s/1048576\";\n+    private static final String DISK_USED_FORMULA = \"DATA!%s/1073741824*DATA!%s/100\";\n+    private static final String DISK_FREE_FORMULA = \"DATA!%s/1073741824*(100-DATA!%s)/100\";\n+    private static final Character CPU_AVG_COLUMN = 'C';\n+    private static final Character CPU_MAX_COLUMN = 'D';\n+    private static final Character MEM_AVG_COLUMN = 'F';\n+    private static final Character MEM_MAX_COLUMN = 'G';\n+    private static final long BYTES_IN_GB = 1L << 30;\n+    private static final String DISK_NAME_TEMPLATE = \"%s[%.2fGb]\";\n+    private static final String NUMERIC_CELL_PRECISION_FORMAT = \"0.00\";\n+\n+    private final String templatePath;\n+    private final MessageHelper messageHelper;\n+\n+    public XlsMonitoringStatsWriter(final @Value(\"${monitoring.stats.export.xls.template}\") String templatePath,\n+                                    final MessageHelper messageHelper) {\n+        this.templatePath = templatePath;\n+        this.messageHelper = messageHelper;\n+    }\n+\n+    @Override\n+    public synchronized InputStream convertStatsToFile(final List<MonitoringStats> stats) {", "originalCommit": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1Mjk3Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052977", "bodyText": "Done, opening file in read-only mode should be enough", "author": "Wedds", "createdAt": "2020-12-17T12:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NzE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1ODI0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545058247", "bodyText": "Just to be clear. There are some concerns regarding thread-safety of apach poi library. Nevertheless it seems like our use case meets thread-safety requirements of the library which can be found here https://poi.apache.org/help/faq.html.", "author": "tcibinan", "createdAt": "2020-12-17T12:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4NzE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "aa8b3e27b905188e0a61ed1b7f5647f385bde70e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java b/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java\nindex 10d6d4533..2d80ecb18 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/writer/XlsMonitoringStatsWriter.java\n\n@@ -19,6 +19,7 @@ package com.epam.pipeline.manager.cluster.writer;\n import com.epam.pipeline.common.MessageConstants;\n import com.epam.pipeline.common.MessageHelper;\n import com.epam.pipeline.entity.cluster.monitoring.MonitoringStats;\n+import com.epam.pipeline.manager.cluster.MonitoringReportType;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;\n import org.apache.poi.hssf.util.CellReference;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NDg2MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r544394861", "bodyText": "Probably we can rename this test class to CsvMonitoringStatsWriterTest as long as it tests only the csv functionality.", "author": "tcibinan", "createdAt": "2020-12-16T15:33:07Z", "path": "api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java", "diffHunk": "@@ -49,7 +49,7 @@\n     @Test", "originalCommit": "c32f67580b05f6c1c476a6376ffc5ddd1bb10904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA1MjQwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545052402", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-12-17T12:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NDg2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a61e0e8d8a74bbf13f9a6396e835629c3cdc47a2", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java b/api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java\nindex 3c9addd6a..3f3a59d55 100644\n--- a/api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java\n+++ b/api/src/test/java/com/epam/pipeline/manager/cluster/writer/MonitoringStatsWriterTest.java\n\n@@ -46,10 +48,12 @@ public class MonitoringStatsWriterTest {\n     private static final double HUNDRED_PERCENTS = 100.0;\n     private static final int COMMON_INFO_SIZE = 7;\n \n+    private final MessageHelper messageHelper = Mockito.mock(MessageHelper.class);\n+    private final CsvMonitoringStatsWriter monitoringStatsWriter = new CsvMonitoringStatsWriter(messageHelper);\n+\n     @Test\n     public void testMonitoringStatsToCsvConversion() {\n         final List<MonitoringStats> stats = createStatsList();\n-        final CsvMonitoringStatsWriter monitoringStatsWriter = new CsvMonitoringStatsWriter();\n         final String csvInfo = monitoringStatsWriter.convertStatsToCsvString(stats);\n         final String[] linesOfTables = csvInfo.split(\"\\\\n\");\n         Assert.assertEquals(3, linesOfTables.length);\n"}}, {"oid": "a61e0e8d8a74bbf13f9a6396e835629c3cdc47a2", "url": "https://github.com/epam/cloud-pipeline/commit/a61e0e8d8a74bbf13f9a6396e835629c3cdc47a2", "message": "Issue #1646 Remove checked exception from `convertStatsToFile` signature", "committedDate": "2020-12-16T17:13:10Z", "type": "commit"}, {"oid": "aa8b3e27b905188e0a61ed1b7f5647f385bde70e", "url": "https://github.com/epam/cloud-pipeline/commit/aa8b3e27b905188e0a61ed1b7f5647f385bde70e", "message": "Issue #1646 Extend MonitoringStatsWriters: return supported report type to allow searching suitable writer using (type, writer) mapping instead of the switch statement", "committedDate": "2020-12-17T09:17:21Z", "type": "commit"}, {"oid": "02d2b9c515333f47e9802d371abe1b47965ffe1e", "url": "https://github.com/epam/cloud-pipeline/commit/02d2b9c515333f47e9802d371abe1b47965ffe1e", "message": "Issue #1646 Code cleanup: use suitable name for a test class, remove method synchronization", "committedDate": "2020-12-17T09:36:46Z", "type": "commit"}, {"oid": "18beba0708c614fbd2a806a1fa1f12d0d49d64c8", "url": "https://github.com/epam/cloud-pipeline/commit/18beba0708c614fbd2a806a1fa1f12d0d49d64c8", "message": "Issue #1646 Check if XLS template path is empty", "committedDate": "2020-12-17T10:23:40Z", "type": "commit"}, {"oid": "451a7818a8f02ab51b1120634bb517ef4477b8d7", "url": "https://github.com/epam/cloud-pipeline/commit/451a7818a8f02ab51b1120634bb517ef4477b8d7", "message": "Issue #1646 Add XLS monitoring template: add the file to jar at build stage, unpack it during API initialization into the place, specified by env var", "committedDate": "2020-12-17T12:14:40Z", "type": "commit"}, {"oid": "9c66762801e3f37eff67d8d1263c35b438dd8f6a", "url": "https://github.com/epam/cloud-pipeline/commit/9c66762801e3f37eff67d8d1263c35b438dd8f6a", "message": "Issue #1646 Fix template unpacking: change the target name, use the proper path", "committedDate": "2020-12-17T13:44:22Z", "type": "commit"}, {"oid": "3d650886155e94d761d04cbefdd1c764ff035758", "url": "https://github.com/epam/cloud-pipeline/commit/3d650886155e94d761d04cbefdd1c764ff035758", "message": "Issue #1646 Initiate CP_API_MONITORING_XLS_TEMPLATE_PATH with the default value", "committedDate": "2020-12-17T14:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg0OTg3Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1657#discussion_r545849876", "bodyText": "It is better to keep CSV as default value to keep existing behaviour", "author": "mzueva", "createdAt": "2020-12-18T14:03:26Z", "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -220,8 +222,9 @@ public void downloadNodeUsageStatisticsReport(\n         @DateTimeFormat(pattern = DATE_TIME_FORMAT)\n         @RequestParam(value = TO, required = false) final LocalDateTime to,\n         @RequestParam(value = INTERVAL, required = false, defaultValue = \"PT1M\") final Duration interval,\n+        @RequestParam(value = REPORT_TYPE, required = false, defaultValue = \"XLS\") final MonitoringReportType type,", "originalCommit": "3d650886155e94d761d04cbefdd1c764ff035758", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "64af642a66bc3294c8c9567555d408d8fee664c2", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\nindex 23965bb75..63454e510 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n\n@@ -222,7 +222,7 @@ public class ClusterController extends AbstractRestController {\n         @DateTimeFormat(pattern = DATE_TIME_FORMAT)\n         @RequestParam(value = TO, required = false) final LocalDateTime to,\n         @RequestParam(value = INTERVAL, required = false, defaultValue = \"PT1M\") final Duration interval,\n-        @RequestParam(value = REPORT_TYPE, required = false, defaultValue = \"XLS\") final MonitoringReportType type,\n+        @RequestParam(value = REPORT_TYPE, required = false, defaultValue = \"CSV\") final MonitoringReportType type,\n         final HttpServletResponse response) throws IOException {\n         final InputStream inputStream = clusterApiService.getUsageStatisticsFile(name, from, to, interval, type);\n         final String reportName = String.format(\"%s_%s-%s-%s\", name, from, to, interval);\n"}}, {"oid": "64af642a66bc3294c8c9567555d408d8fee664c2", "url": "https://github.com/epam/cloud-pipeline/commit/64af642a66bc3294c8c9567555d408d8fee664c2", "message": "Issue #1646 Make `CSV` report type by default at server side", "committedDate": "2020-12-18T14:26:04Z", "type": "commit"}, {"oid": "903f32f85129329e39bc5a4e0e98c4a574a9d00a", "url": "https://github.com/epam/cloud-pipeline/commit/903f32f85129329e39bc5a4e0e98c4a574a9d00a", "message": "Issue #1646 Use requested report type as a response file extension", "committedDate": "2020-12-18T14:40:47Z", "type": "commit"}, {"oid": "2e0b6fa6050d51e5b471b1d2e54861b96bf7b69d", "url": "https://github.com/epam/cloud-pipeline/commit/2e0b6fa6050d51e5b471b1d2e54861b96bf7b69d", "message": "Issue #1646 Store template in resources and use its location as a default; revert excess changes in scripts", "committedDate": "2020-12-18T15:35:27Z", "type": "commit"}]}