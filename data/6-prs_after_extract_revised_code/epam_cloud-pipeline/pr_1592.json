{"pr_number": 1592, "pr_title": "Issue #1404: Implemented tests for IssueApiService", "pr_createdAt": "2020-11-23T12:55:57Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1592", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMjk4Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r529632986", "bodyText": "Let's put it somewhere else. Probably SecurityCreatorUtils is nice place to move it.", "author": "tcibinan", "createdAt": "2020-11-24T15:26:43Z", "path": "api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.test.creator.issue;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+\n+public final class IssueCreatorUtils {\n+\n+    private IssueCreatorUtils() {\n+\n+    }\n+\n+    public static EntityVO getEntityVO(final Long id, final AclClass aclClass) {", "originalCommit": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a24997a2e68fc877ee519e26d450384fb371f067", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java b/api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java\nindex 64443c97f..4145685e7 100644\n--- a/api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java\n+++ b/api/src/test/java/com/epam/pipeline/test/creator/issue/IssueCreatorUtils.java\n\n@@ -16,52 +16,58 @@\n \n package com.epam.pipeline.test.creator.issue;\n \n-import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.Result;\n import com.epam.pipeline.controller.vo.IssueCommentVO;\n import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.issue.Attachment;\n import com.epam.pipeline.entity.issue.Issue;\n import com.epam.pipeline.entity.issue.IssueComment;\n-import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n \n public final class IssueCreatorUtils {\n \n-    private IssueCreatorUtils() {\n+    public static final TypeReference<Result<Issue>> ISSUE_TYPE =\n+            new TypeReference<Result<Issue>>() {};\n+    public static final TypeReference<Result<List<Issue>>> ISSUE_LIST_TYPE =\n+            new TypeReference<Result<List<Issue>>>() {};\n+    public static final TypeReference<Result<IssueComment>> ISSUE_COMMENT_TYPE =\n+            new TypeReference<Result<IssueComment>>() {};\n+    public static final TypeReference<Result<List<Attachment>>> ATTACHMENT_LIST_TYPE =\n+            new TypeReference<Result<List<Attachment>>>() {};\n+    public static final TypeReference<Result<PagedResult<List<Issue>>>> PAGED_RESULT_LIST_ISSUE_TYPE =\n+            new TypeReference<Result<PagedResult<List<Issue>>>>() {};\n \n-    }\n+    private IssueCreatorUtils() {\n \n-    public static EntityVO getEntityVO(final Long id, final AclClass aclClass) {\n-        return new EntityVO(id, aclClass);\n     }\n \n     public static Issue getIssue() {\n         return new Issue();\n     }\n \n-    public static Issue getIssue(final EntityVO entityVO, final String author) {\n-        final Issue issue = new Issue();\n-        issue.setEntity(entityVO);\n-        issue.setAuthor(author);\n-        return issue;\n-\n-    }\n-\n     public static IssueVO getIssueVO() {\n         return new IssueVO();\n     }\n \n-    public static IssueVO getIssueVO(final EntityVO entityVO) {\n-        final IssueVO issueVO = new IssueVO();\n-        issueVO.setEntity(entityVO);\n-        return issueVO;\n-    }\n-\n-    public static IssueComment getIssueComment(String author) {\n-        final IssueComment issueComment = new IssueComment();\n-        issueComment.setAuthor(author);\n-        return issueComment;\n+    public static IssueComment getIssueComment() {\n+        return new IssueComment();\n     }\n \n     public static IssueCommentVO getIssueCommentVO() {\n         return new IssueCommentVO();\n     }\n+\n+    public static Attachment getAttachment() {\n+        return new Attachment();\n+    }\n+\n+    public static PagedResult<List<Issue>> getPagedResult() {\n+        return new PagedResult(Collections.singletonList(getIssue()), TEST_INT);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3MzI0NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530173244", "bodyText": "Could you please delete all the test cases in the class that is covered by the new test class?\nAdditionally check if the remaining test cases (probably only testIssueOwnerCRUD) are covered by IssueManagerTest. If not please try to migrate the remaining methods to IssueManagerTest.", "author": "tcibinan", "createdAt": "2020-11-25T08:04:20Z", "path": "api/src/test/java/com/epam/pipeline/manager/issue/IssueApiServiceTest.java", "diffHunk": "@@ -16,6 +16,7 @@\n ", "originalCommit": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83af8761f311cf5dace8eb48c4dcd1d2f65a6240", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/manager/issue/IssueApiServiceTest.java b/api/src/test/java/com/epam/pipeline/manager/issue/IssueApiServiceTest.java\ndeleted file mode 100644\nindex 8411da69c..000000000\n--- a/api/src/test/java/com/epam/pipeline/manager/issue/IssueApiServiceTest.java\n+++ /dev/null\n\n@@ -1,336 +0,0 @@\n-/*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.epam.pipeline.manager.issue;\n-\n-import com.epam.pipeline.acl.issue.IssueApiService;\n-import com.epam.pipeline.app.TestApplicationWithAclSecurity;\n-import com.epam.pipeline.controller.PagedResult;\n-import com.epam.pipeline.controller.vo.EntityVO;\n-import com.epam.pipeline.controller.vo.IssueCommentVO;\n-import com.epam.pipeline.controller.vo.IssueVO;\n-import com.epam.pipeline.dao.issue.AttachmentDao;\n-import com.epam.pipeline.dao.issue.IssueCommentDao;\n-import com.epam.pipeline.dao.issue.IssueDao;\n-import com.epam.pipeline.dao.pipeline.FolderDao;\n-import com.epam.pipeline.dao.util.AclTestDao;\n-import com.epam.pipeline.entity.issue.Attachment;\n-import com.epam.pipeline.entity.issue.Issue;\n-import com.epam.pipeline.entity.issue.IssueComment;\n-import com.epam.pipeline.entity.issue.IssueStatus;\n-import com.epam.pipeline.entity.pipeline.Folder;\n-import com.epam.pipeline.entity.security.acl.AclClass;\n-import com.epam.pipeline.manager.AbstractManagerTest;\n-import com.epam.pipeline.manager.notification.NotificationManager;\n-import com.epam.pipeline.security.acl.AclPermission;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mockito;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.mock.mockito.MockBean;\n-import org.springframework.boot.test.mock.mockito.SpyBean;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.test.context.support.WithMockUser;\n-import org.springframework.test.annotation.DirtiesContext;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.util.Date;\n-import java.util.List;\n-\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Mockito.verify;\n-\n-@DirtiesContext\n-@ContextConfiguration(classes = TestApplicationWithAclSecurity.class)\n-public class IssueApiServiceTest extends AbstractManagerTest {\n-\n-    private static final String USER_OWNER = \"USER\";\n-    private static final String NO_PERMISSION_USER = \"NO_PERMISSION_USER\";\n-    private static final String CAN_READ_USER = \"CAN_READ\";\n-    private static final String TEST_FOLDER_NAME = \"folder\";\n-    private static final String ISSUE_NAME = \"Issue name\";\n-    private static final String ISSUE_TEXT = \"Issue text\";\n-    private static final String COMMENT_TEXT = \"Comment text\";\n-    private static final String TEST_USER = \"test\";\n-    private static final String TEST_USER2 = \"USER2\";\n-\n-    @Autowired\n-    private IssueApiService issueApiService;\n-    @Autowired\n-    private IssueDao issueDao;\n-    @Autowired\n-    private IssueCommentDao issueCommentDao;\n-    @Autowired\n-    private AclTestDao aclTestDao;\n-    @Autowired\n-    private FolderDao folderDao;\n-    @Autowired\n-    private AttachmentDao attachmentDao;\n-\n-\n-    @MockBean\n-    private NotificationManager notificationManager;\n-    @SpyBean\n-    private AttachmentFileManager attachmentFileManager;\n-\n-    private Attachment attachment;\n-    private EntityVO entityVO;\n-    private Issue createdIssue;\n-    private IssueComment createdIssueComment;\n-\n-    @Before\n-    public void setUp() {\n-        Folder folder = new Folder();\n-        folder.setName(TEST_FOLDER_NAME);\n-        folder.setOwner(USER_OWNER);\n-        folderDao.createFolder(folder);\n-\n-        // Mock ACL\n-        AclTestDao.AclSid testUserSid = new AclTestDao.AclSid(true, USER_OWNER);\n-        aclTestDao.createAclSid(testUserSid);\n-\n-        AclTestDao.AclClass folderAclClass = new AclTestDao.AclClass(Folder.class.getCanonicalName());\n-        aclTestDao.createAclClassIfNotPresent(folderAclClass);\n-\n-        AclTestDao.AclObjectIdentity objectIdentity = new AclTestDao.AclObjectIdentity(testUserSid, folder.getId(),\n-                folderAclClass.getId(), null, true);\n-        aclTestDao.createObjectIdentity(objectIdentity);\n-\n-        AclTestDao.AclEntry aclEntry = new AclTestDao.AclEntry(objectIdentity, 1, testUserSid,\n-                AclPermission.READ.getMask(), true);\n-        aclTestDao.createAclEntry(aclEntry);\n-\n-        AclTestDao.AclSid noPermissionUserSid = new AclTestDao.AclSid(true, NO_PERMISSION_USER);\n-        aclTestDao.createAclSid(noPermissionUserSid);\n-\n-        entityVO = new EntityVO(folder.getId(), AclClass.FOLDER);\n-\n-        createdIssue = new Issue();\n-        createdIssue.setName(ISSUE_NAME);\n-        createdIssue.setText(ISSUE_TEXT);\n-        createdIssue.setAuthor(USER_OWNER);\n-        createdIssue.setEntity(entityVO);\n-        createdIssue.setStatus(IssueStatus.OPEN);\n-        issueDao.createIssue(createdIssue);\n-\n-        createdIssueComment = new IssueComment();\n-        createdIssueComment.setIssueId(createdIssue.getId());\n-        createdIssueComment.setAuthor(USER_OWNER);\n-        createdIssueComment.setText(COMMENT_TEXT);\n-        issueCommentDao.createComment(createdIssueComment);\n-\n-        AclTestDao.AclSid canReadUserSid = new AclTestDao.AclSid(true, CAN_READ_USER);\n-        aclTestDao.createAclSid(canReadUserSid);\n-\n-        aclEntry = new AclTestDao.AclEntry(objectIdentity, 2, canReadUserSid,\n-                AclPermission.READ.getMask(), true);\n-        aclTestDao.createAclEntry(aclEntry);\n-\n-        verify(notificationManager, Mockito.never()).notifyIssue(any(), any(), any());\n-        Mockito.doNothing().when(attachmentFileManager).deleteAttachments(Mockito.anyListOf(Attachment.class));\n-\n-        attachment = new Attachment();\n-        attachment.setName(\"testAttachment\");\n-        attachment.setCreatedDate(new Date());\n-        attachment.setPath(\"///\");\n-        attachment.setOwner(TEST_USER);\n-\n-        attachmentDao.createAttachment(attachment);\n-        Mockito.doNothing().when(attachmentFileManager).deleteAttachments(Mockito.anyListOf(Attachment.class));\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @WithMockUser(username = USER_OWNER)\n-    @Test\n-    public void testIssueOwnerCRUD() {\n-        Issue issue = issueApiService.createIssue(getIssueVO(ISSUE_NAME, ISSUE_TEXT, entityVO));\n-\n-        Issue loaded = issueApiService.loadIssue(issue.getId());\n-        Assert.assertNotNull(loaded);\n-\n-        List<Issue> loadedIssues = issueApiService.loadIssuesForEntity(entityVO);\n-        Assert.assertNotNull(loadedIssues);\n-\n-        issueApiService.updateIssue(issue.getId(), getIssueVO(ISSUE_NAME, ISSUE_TEXT + \"!\", entityVO));\n-\n-        IssueCommentVO issueCommentVO = new IssueCommentVO();\n-        issueCommentVO.setText(COMMENT_TEXT);\n-        IssueComment comment = issueApiService.createComment(issue.getId(), issueCommentVO);\n-\n-        IssueComment loadedComment = issueApiService.loadComment(issue.getId(), comment.getId());\n-        Assert.assertNotNull(loadedComment);\n-\n-        issueCommentVO.setText(COMMENT_TEXT + \"!\");\n-        issueApiService.updateComment(issue.getId(), comment.getId(), issueCommentVO);\n-        issueApiService.deleteComment(issue.getId(), comment.getId());\n-        issueApiService.deleteIssue(issue.getId());\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testCreateIssueAccessDenied() {\n-        issueApiService.createIssue(getIssueVO(ISSUE_NAME, ISSUE_TEXT, entityVO));\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testLoadIssueAccessDenied() {\n-        issueApiService.loadIssue(createdIssue.getId());\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testLoadIssuesAccessDenied() {\n-        issueApiService.loadIssuesForEntity(entityVO);\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testUpdateIssueAccessDenied() {\n-        issueApiService.updateIssue(createdIssue.getId(), getIssueVO(ISSUE_NAME, ISSUE_TEXT, entityVO));\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testDeleteIssueAccessDenied() {\n-        issueApiService.deleteIssue(createdIssue.getId());\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testCreateCommentAccessDenied() {\n-        IssueCommentVO issueCommentVO = new IssueCommentVO();\n-        issueCommentVO.setText(COMMENT_TEXT);\n-        issueApiService.createComment(createdIssue.getId(), issueCommentVO);\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testLoadCommentAccessDenied() {\n-        issueApiService.loadComment(createdIssue.getId(), createdIssueComment.getId());\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testUpdateCommentAccessDenied() {\n-        IssueCommentVO issueCommentVO = new IssueCommentVO();\n-        issueCommentVO.setText(COMMENT_TEXT);\n-        issueApiService.updateComment(createdIssue.getId(), createdIssueComment.getId(), issueCommentVO);\n-    }\n-\n-    @WithMockUser(username = NO_PERMISSION_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testDeleteCommentAccessDenied() {\n-        issueApiService.deleteComment(createdIssue.getId(), createdIssueComment.getId());\n-    }\n-\n-    @WithMockUser(username = CAN_READ_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testUpdateIssueAccessDeniedForNotOwner() {\n-        issueApiService.updateIssue(createdIssue.getId(), getIssueVO(ISSUE_NAME, ISSUE_TEXT, entityVO));\n-    }\n-\n-    @WithMockUser(username = CAN_READ_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testDeleteIssueAccessDeniedForNotOwner() {\n-        issueApiService.deleteIssue(createdIssue.getId());\n-    }\n-\n-    @WithMockUser(username = CAN_READ_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testUpdateCommentAccessDeniedForNotOwner() {\n-        IssueCommentVO issueCommentVO = new IssueCommentVO();\n-        issueCommentVO.setText(COMMENT_TEXT);\n-        issueApiService.updateComment(createdIssue.getId(), createdIssueComment.getId(), issueCommentVO);\n-    }\n-\n-    @WithMockUser(username = CAN_READ_USER)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @Test(expected = AccessDeniedException.class)\n-    public void testDeleteCommentAccessDeniedForNotOwner() {\n-        issueApiService.deleteComment(createdIssue.getId(), createdIssueComment.getId());\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @WithMockUser(username = CAN_READ_USER)\n-    @Test\n-    public void testLoadIssueForNotOwner() {\n-        Issue loaded = issueApiService.loadIssue(createdIssue.getId());\n-        Assert.assertNotNull(loaded);\n-\n-        List<Issue> loadedIssues = issueApiService.loadIssuesForEntity(entityVO);\n-        Assert.assertNotNull(loadedIssues);\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @WithMockUser(username = CAN_READ_USER)\n-    @Test\n-    public void testLoadCommentForNotOwner() {\n-        IssueComment loadedComment = issueApiService.loadComment(createdIssue.getId(), createdIssueComment.getId());\n-        Assert.assertNotNull(loadedComment);\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n-    @WithMockUser(username = TEST_USER2)\n-    public void testDeleteAttachmentFail() {\n-        attachmentFileManager.deleteAttachment(attachment.getId());\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n-    @WithMockUser(username = TEST_USER)\n-    public void testDeleteAttachment() {\n-        attachmentFileManager.deleteAttachment(attachment.getId());\n-        verify(attachmentFileManager).deleteAttachment(attachment.getId());\n-    }\n-\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)\n-    @WithMockUser(username = USER_OWNER)\n-    @Test\n-    public void testLoadMy() {\n-        PagedResult<List<Issue>> result = issueApiService.loadMy(1, 10);\n-\n-        Assert.assertFalse(result.getElements().isEmpty());\n-        Assert.assertTrue(result.getElements().stream().anyMatch(i -> CollectionUtils.isNotEmpty(i.getComments())));\n-        Assert.assertEquals(result.getElements().size(), result.getTotalCount());\n-    }\n-\n-    private IssueVO getIssueVO(String name, String text, EntityVO entity) {\n-        IssueVO issueVO = new IssueVO();\n-        issueVO.setName(name);\n-        issueVO.setEntity(entity);\n-        issueVO.setText(text);\n-        issueVO.setStatus(IssueStatus.OPEN);\n-        return issueVO;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NTkxOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530175918", "bodyText": "Let's change the filed's type and name to something more common like AbstractSecuredEntity entity. This way we declare that any entity can be used not only s3 storages.", "author": "tcibinan", "createdAt": "2020-11-25T08:09:26Z", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.issue;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.issue.IssueManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.issue.IssueCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class IssueApiServiceTest extends AbstractAclTest {\n+\n+    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n+    private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n+    private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);", "originalCommit": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83af8761f311cf5dace8eb48c4dcd1d2f65a6240", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\nindex fe5764c66..b3509232c 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n\n@@ -16,10 +16,11 @@\n \n package com.epam.pipeline.acl.issue;\n \n+import com.epam.pipeline.controller.PagedResult;\n import com.epam.pipeline.controller.vo.EntityVO;\n import com.epam.pipeline.controller.vo.IssueCommentVO;\n import com.epam.pipeline.controller.vo.IssueVO;\n-import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n import com.epam.pipeline.entity.issue.Issue;\n import com.epam.pipeline.entity.issue.IssueComment;\n import com.epam.pipeline.entity.security.acl.AclClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NjYwNg==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530176606", "bodyText": "Similarly let's extract the acl class to a field and refer to it as just ACL_CLASS or ENTITY_ACL_CLASS.", "author": "tcibinan", "createdAt": "2020-11-25T08:10:38Z", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.issue;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.issue.IssueManager;\n+import com.epam.pipeline.manager.security.AuthManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.issue.IssueCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class IssueApiServiceTest extends AbstractAclTest {\n+\n+    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n+    private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n+    private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final List<Issue> issueList = Collections.singletonList(issue);\n+    private final IssueComment issueComment = IssueCreatorUtils.getIssueComment(SIMPLE_USER);\n+    private final IssueCommentVO issueCommentVO = IssueCreatorUtils.getIssueCommentVO();\n+\n+    @Autowired\n+    private IssueApiService issueApiService;\n+\n+    @Autowired\n+    private IssueManager mockIssueManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Autowired\n+    private AuthManager mockAuthManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateIssueForAdmin() {\n+        doReturn(issue).when(mockIssueManager).createIssue(issueVO);\n+\n+        assertThat(issueApiService.createIssue(issueVO)).isEqualTo(issue);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldCreateIssueWhenPermissionIsGranted() {\n+        initAclEntity(s3bucket, AclPermission.READ);\n+        doReturn(issue).when(mockIssueManager).createIssue(issueVO);\n+        doReturn(s3bucket).when(mockEntityManager).load(AclClass.DATA_STORAGE, ID);", "originalCommit": "fc04a5a4c9a3dcda90a71cf71ec2bdcca0b89bcd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83af8761f311cf5dace8eb48c4dcd1d2f65a6240", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\nindex fe5764c66..b3509232c 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n\n@@ -16,10 +16,11 @@\n \n package com.epam.pipeline.acl.issue;\n \n+import com.epam.pipeline.controller.PagedResult;\n import com.epam.pipeline.controller.vo.EntityVO;\n import com.epam.pipeline.controller.vo.IssueCommentVO;\n import com.epam.pipeline.controller.vo.IssueVO;\n-import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n import com.epam.pipeline.entity.issue.Issue;\n import com.epam.pipeline.entity.issue.IssueComment;\n import com.epam.pipeline.entity.security.acl.AclClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5ODE4MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530898180", "bodyText": "Please rename the field to entity as well.", "author": "tcibinan", "createdAt": "2020-11-26T09:44:44Z", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -39,16 +41,19 @@\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class IssueApiServiceTest extends AbstractAclTest {\n \n-    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n+    private static final AclClass ENTITY_ACL_CLASS = AclClass.DATA_STORAGE;\n+\n+    private final EntityVO entityVO = SecurityCreatorUtils.getEntityVO(ID, ENTITY_ACL_CLASS);\n     private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n     private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n-    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final AbstractSecuredEntity s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);", "originalCommit": "58e9181efa24d5cf47bcdf5ab66982c4fc71ffd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a24997a2e68fc877ee519e26d450384fb371f067", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\nindex b3509232c..fe5764c66 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n\n@@ -41,19 +39,16 @@ import java.util.Collections;\n import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class IssueApiServiceTest extends AbstractAclTest {\n \n-    private static final AclClass ENTITY_ACL_CLASS = AclClass.DATA_STORAGE;\n-\n-    private final EntityVO entityVO = SecurityCreatorUtils.getEntityVO(ID, ENTITY_ACL_CLASS);\n+    private final EntityVO entityVO = IssueCreatorUtils.getEntityVO(ID, AclClass.DATA_STORAGE);\n     private final Issue issue = IssueCreatorUtils.getIssue(entityVO, SIMPLE_USER);\n     private final IssueVO issueVO = IssueCreatorUtils.getIssueVO(entityVO);\n-    private final AbstractSecuredEntity s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n+    private final S3bucketDataStorage s3bucket = DatastorageCreatorUtils.getS3bucketDataStorage(ID, OWNER_USER);\n     private final List<Issue> issueList = Collections.singletonList(issue);\n     private final IssueComment issueComment = IssueCreatorUtils.getIssueComment(SIMPLE_USER);\n     private final IssueCommentVO issueCommentVO = IssueCreatorUtils.getIssueCommentVO();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMDk3Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530900977", "bodyText": "Please extract the pagedResult field and add line break between mocking and asserting.", "author": "tcibinan", "createdAt": "2020-11-26T09:49:02Z", "path": "api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java", "diffHunk": "@@ -326,4 +331,12 @@ public void shouldDenyDeleteCommentWhenPermissionIsNotGranted() {\n \n         assertThrows(AccessDeniedException.class, () -> issueApiService.deleteComment(ID, ID));\n     }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMyPagedResultListIssue() {\n+        final PagedResult<List<Issue>> pagedResult = IssueCreatorUtils.getPagedListIssue();\n+        doReturn(pagedResult).when(mockIssueManager).loadMy(ID, TEST_INT);\n+        assertThat(issueApiService.loadMy(ID, TEST_INT)).isEqualTo(pagedResult);", "originalCommit": "58e9181efa24d5cf47bcdf5ab66982c4fc71ffd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a24997a2e68fc877ee519e26d450384fb371f067", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\nindex b3509232c..fe5764c66 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/issue/IssueApiServiceTest.java\n\n@@ -331,12 +326,4 @@ public class IssueApiServiceTest extends AbstractAclTest {\n \n         assertThrows(AccessDeniedException.class, () -> issueApiService.deleteComment(ID, ID));\n     }\n-\n-    @Test\n-    @WithMockUser\n-    public void shouldLoadMyPagedResultListIssue() {\n-        final PagedResult<List<Issue>> pagedResult = IssueCreatorUtils.getPagedListIssue();\n-        doReturn(pagedResult).when(mockIssueManager).loadMy(ID, TEST_INT);\n-        assertThat(issueApiService.loadMy(ID, TEST_INT)).isEqualTo(pagedResult);\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwNjYyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r530906623", "bodyText": "These tests basically don't check anything. It looks like the proper place for them is AttachmentFileManagerTest. But the tests should be rewritten without Spring being used. See other tests in AttachmentFileManagerTest.", "author": "tcibinan", "createdAt": "2020-11-26T09:57:12Z", "path": "api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java", "diffHunk": "@@ -410,6 +417,22 @@ public void updateCommentWithAttachments() throws InterruptedException {\n                                                                             Mockito.anyList(), Mockito.anyBoolean());\n     }\n \n+    @Test(expected = AccessDeniedException.class)\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n+    @WithMockUser(username = TEST_USER)\n+    public void testDeleteAttachmentFail() {\n+        attachmentFileManager.deleteAttachment(testAttachment.getId());\n+    }\n+\n+    @Test\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n+    @WithMockUser(username = AUTHOR)\n+    public void testDeleteAttachment() {\n+        final AttachmentFileManager mockAttachmentFileManager = mock(AttachmentFileManager.class);\n+        mockAttachmentFileManager.deleteAttachment(testAttachment.getId());\n+        verify(mockAttachmentFileManager).deleteAttachment(testAttachment.getId());\n+    }\n+", "originalCommit": "58e9181efa24d5cf47bcdf5ab66982c4fc71ffd6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a24997a2e68fc877ee519e26d450384fb371f067", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java b/api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java\nindex 7fc336c98..e76181ac0 100644\n--- a/api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/manager/issue/IssueManagerTest.java\n\n@@ -417,22 +410,6 @@ public class IssueManagerTest extends AbstractSpringTest {\n                                                                             Mockito.anyList(), Mockito.anyBoolean());\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n-    @WithMockUser(username = TEST_USER)\n-    public void testDeleteAttachmentFail() {\n-        attachmentFileManager.deleteAttachment(testAttachment.getId());\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Throwable.class)\n-    @WithMockUser(username = AUTHOR)\n-    public void testDeleteAttachment() {\n-        final AttachmentFileManager mockAttachmentFileManager = mock(AttachmentFileManager.class);\n-        mockAttachmentFileManager.deleteAttachment(testAttachment.getId());\n-        verify(mockAttachmentFileManager).deleteAttachment(testAttachment.getId());\n-    }\n-\n     private IssueCommentVO getCommentVO(String text) {\n         IssueCommentVO commentVO = new IssueCommentVO();\n         commentVO.setText(text);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1MDUwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1592#discussion_r532450509", "bodyText": "It looks like the test only checks if admin is able to delete the attachment. At the same time if we look at the original test it tests the behavior for an attachment owner. In order to be sure that we test the same functionality and even more we should cover the lost test scenario.\nLet's keep the test but add another one with attachment deletion for attachment owner.", "author": "tcibinan", "createdAt": "2020-11-30T09:23:49Z", "path": "api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java", "diffHunk": "@@ -130,4 +134,18 @@ public void testDownloadAttachment() {\n         verify(attachmentManager).load(1L);\n         verify(dataStorageManager).getStreamingContent(testSystemDataStorage.getId(), TEST_ATTACHMENT_PATH, null);\n     }\n+\n+    @Test\n+    public void testDeleteAttachment() {\n+        doReturn(true).when(authManager).isAdmin();\n+\n+        attachmentFileManager.deleteAttachment(anyLong());\n+\n+        verify(attachmentManager).load(anyLong());\n+    }", "originalCommit": "c8389a01ac303e8bf31983b442afe17df42c91ed", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a24997a2e68fc877ee519e26d450384fb371f067", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java b/api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java\nindex 6ba85192d..fa41cee5a 100644\n--- a/api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/manager/issue/AttachmentFileManagerTest.java\n\n@@ -134,18 +130,4 @@ public class AttachmentFileManagerTest {\n         verify(attachmentManager).load(1L);\n         verify(dataStorageManager).getStreamingContent(testSystemDataStorage.getId(), TEST_ATTACHMENT_PATH, null);\n     }\n-\n-    @Test\n-    public void testDeleteAttachment() {\n-        doReturn(true).when(authManager).isAdmin();\n-\n-        attachmentFileManager.deleteAttachment(anyLong());\n-\n-        verify(attachmentManager).load(anyLong());\n-    }\n-\n-    @Test\n-    public void testDeleteAttachmentFail() {\n-        assertThrows(AccessDeniedException.class, () -> attachmentFileManager.deleteAttachment(anyLong()));\n-    }\n-}\n+}\n\\ No newline at end of file\n"}}, {"oid": "a24997a2e68fc877ee519e26d450384fb371f067", "url": "https://github.com/epam/cloud-pipeline/commit/a24997a2e68fc877ee519e26d450384fb371f067", "message": "Issue #1404: Implemented tests for IssueApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T09:22:27Z", "type": "commit"}, {"oid": "83af8761f311cf5dace8eb48c4dcd1d2f65a6240", "url": "https://github.com/epam/cloud-pipeline/commit/83af8761f311cf5dace8eb48c4dcd1d2f65a6240", "message": "Issue #1405: Improvements and fixes in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T09:23:54Z", "type": "commit"}, {"oid": "385e84ad66a24c48e5c986aa29f7f65debfbef1a", "url": "https://github.com/epam/cloud-pipeline/commit/385e84ad66a24c48e5c986aa29f7f65debfbef1a", "message": "Issue #1404: Minor fixes, two tests replaced\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T09:23:55Z", "type": "commit"}, {"oid": "f9161b48a533fb0cd9b2bdf0ff71efd314544158", "url": "https://github.com/epam/cloud-pipeline/commit/f9161b48a533fb0cd9b2bdf0ff71efd314544158", "message": "Issue #1404: One more test added to the AttachmentFileManagerTest\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T09:23:55Z", "type": "commit"}, {"oid": "8ffd497871223d311c8318fb2bc38a09d06af391", "url": "https://github.com/epam/cloud-pipeline/commit/8ffd497871223d311c8318fb2bc38a09d06af391", "message": "Issue #1404: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T09:39:24Z", "type": "commit"}, {"oid": "8ffd497871223d311c8318fb2bc38a09d06af391", "url": "https://github.com/epam/cloud-pipeline/commit/8ffd497871223d311c8318fb2bc38a09d06af391", "message": "Issue #1404: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T09:39:24Z", "type": "forcePushed"}]}