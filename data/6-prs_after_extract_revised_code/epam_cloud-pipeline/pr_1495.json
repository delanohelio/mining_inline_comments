{"pr_number": 1495, "pr_title": "Issue #1404: Implemented tests for ContextualPreferenceApiService", "pr_createdAt": "2020-10-14T10:20:35Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1495", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI4ODY5NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505288694", "bodyText": "There is a helpful method in CustomAssertions utility class. Probably it is better to use such method to assert exceptions rather than using @Test(expected = AccessDeniedException.class) cause it allows us to specify only a single line that should fail.\nassertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll())", "author": "tcibinan", "createdAt": "2020-10-15T07:49:39Z", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        preferenceApiService.loadAll();", "originalCommit": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90813079e8775671a64c552fa621b16ff8603b60", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\nindex 418106c36..76d9c67bd 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n\n@@ -32,72 +32,67 @@ import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n \n-    @Autowired\n-    private ContextualPreferenceApiService preferenceApiService;\n-\n-    @Autowired\n-    private ContextualPreferenceManager mockPreferenceManager;\n-\n     private final ContextualPreference contextualPreference =\n             ContextualPreferenceCreatorUtils.getContextualPreference();\n-\n     private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n-\n-    private final ContextualPreferenceExternalResource cpeResource =\n+    private final ContextualPreferenceExternalResource externalResource =\n             ContextualPreferenceCreatorUtils.getCPExternalResource();\n-\n     private final ContextualPreferenceVO contextualPreferenceVO =\n             ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n \n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadAllContextualPreferencesForAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+        List<ContextualPreference> loadedPreferences = preferenceApiService.loadAll();\n \n-        assertThat(resultPreferenceList.size()).isEqualTo(1);\n-        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+        assertThat(loadedPreferences.size()).isEqualTo(1);\n+        assertThat(loadedPreferences.get(0)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        preferenceApiService.loadAll();\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll());\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadContextualPreferenceForAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.load(TEST_STRING, externalResource)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        preferenceApiService.load(TEST_STRING, cpeResource);\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.load(TEST_STRING, externalResource));\n     }\n \n     @Test\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldSearchContextualPreference() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.search(TEST_STRING_LIST, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.search(TEST_STRING_LIST, externalResource)).isEqualTo(contextualPreference);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNDM4OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505304389", "bodyText": "It seems fine to just call it externalResource or even resource because we are already in the context of the contextual preference test class.", "author": "tcibinan", "createdAt": "2020-10-15T08:01:51Z", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =", "originalCommit": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90813079e8775671a64c552fa621b16ff8603b60", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\nindex 418106c36..76d9c67bd 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n\n@@ -32,72 +32,67 @@ import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n \n-    @Autowired\n-    private ContextualPreferenceApiService preferenceApiService;\n-\n-    @Autowired\n-    private ContextualPreferenceManager mockPreferenceManager;\n-\n     private final ContextualPreference contextualPreference =\n             ContextualPreferenceCreatorUtils.getContextualPreference();\n-\n     private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n-\n-    private final ContextualPreferenceExternalResource cpeResource =\n+    private final ContextualPreferenceExternalResource externalResource =\n             ContextualPreferenceCreatorUtils.getCPExternalResource();\n-\n     private final ContextualPreferenceVO contextualPreferenceVO =\n             ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n \n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadAllContextualPreferencesForAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+        List<ContextualPreference> loadedPreferences = preferenceApiService.loadAll();\n \n-        assertThat(resultPreferenceList.size()).isEqualTo(1);\n-        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+        assertThat(loadedPreferences.size()).isEqualTo(1);\n+        assertThat(loadedPreferences.get(0)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        preferenceApiService.loadAll();\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll());\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadContextualPreferenceForAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.load(TEST_STRING, externalResource)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        preferenceApiService.load(TEST_STRING, cpeResource);\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.load(TEST_STRING, externalResource));\n     }\n \n     @Test\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldSearchContextualPreference() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.search(TEST_STRING_LIST, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.search(TEST_STRING_LIST, externalResource)).isEqualTo(contextualPreference);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODE2Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505308166", "bodyText": "What about calling this loaded preferences list just loadedPreferences. Such result prefix is just a boilerplate giving no additional meaning to the reader :)", "author": "tcibinan", "createdAt": "2020-10-15T08:04:39Z", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();", "originalCommit": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxMTc0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505311742", "bodyText": "In case where there is only one assert in the test method we can even inline the variable and don't think about naming it at all.", "author": "tcibinan", "createdAt": "2020-10-15T08:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwODE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "90813079e8775671a64c552fa621b16ff8603b60", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\nindex 418106c36..76d9c67bd 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n\n@@ -32,72 +32,67 @@ import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n \n-    @Autowired\n-    private ContextualPreferenceApiService preferenceApiService;\n-\n-    @Autowired\n-    private ContextualPreferenceManager mockPreferenceManager;\n-\n     private final ContextualPreference contextualPreference =\n             ContextualPreferenceCreatorUtils.getContextualPreference();\n-\n     private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n-\n-    private final ContextualPreferenceExternalResource cpeResource =\n+    private final ContextualPreferenceExternalResource externalResource =\n             ContextualPreferenceCreatorUtils.getCPExternalResource();\n-\n     private final ContextualPreferenceVO contextualPreferenceVO =\n             ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n \n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadAllContextualPreferencesForAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+        List<ContextualPreference> loadedPreferences = preferenceApiService.loadAll();\n \n-        assertThat(resultPreferenceList.size()).isEqualTo(1);\n-        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+        assertThat(loadedPreferences.size()).isEqualTo(1);\n+        assertThat(loadedPreferences.get(0)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        preferenceApiService.loadAll();\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll());\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadContextualPreferenceForAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.load(TEST_STRING, externalResource)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        preferenceApiService.load(TEST_STRING, cpeResource);\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.load(TEST_STRING, externalResource));\n     }\n \n     @Test\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldSearchContextualPreference() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.search(TEST_STRING_LIST, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.search(TEST_STRING_LIST, externalResource)).isEqualTo(contextualPreference);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwOTgxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r505309810", "bodyText": "We expect here to be at least a simple user role here so let's add corresponding @WithMockUser annotation.", "author": "tcibinan", "createdAt": "2020-10-15T08:06:05Z", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        preferenceApiService.loadAll();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadContextualPreferenceForAdmin() {\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+\n+        assertThat(resultPreference).isEqualTo(contextualPreference);\n+    }\n+\n+    @Test(expected = AccessDeniedException.class)\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)\n+    public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        preferenceApiService.load(TEST_STRING, cpeResource);\n+    }\n+\n+    @Test\n+    public void shouldSearchContextualPreference() {", "originalCommit": "6bd2555940bf0af8b8d4ee22ecbc53a3168780cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "90813079e8775671a64c552fa621b16ff8603b60", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\nindex 418106c36..76d9c67bd 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n\n@@ -32,72 +32,67 @@ import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n \n-    @Autowired\n-    private ContextualPreferenceApiService preferenceApiService;\n-\n-    @Autowired\n-    private ContextualPreferenceManager mockPreferenceManager;\n-\n     private final ContextualPreference contextualPreference =\n             ContextualPreferenceCreatorUtils.getContextualPreference();\n-\n     private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n-\n-    private final ContextualPreferenceExternalResource cpeResource =\n+    private final ContextualPreferenceExternalResource externalResource =\n             ContextualPreferenceCreatorUtils.getCPExternalResource();\n-\n     private final ContextualPreferenceVO contextualPreferenceVO =\n             ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n \n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadAllContextualPreferencesForAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+        List<ContextualPreference> loadedPreferences = preferenceApiService.loadAll();\n \n-        assertThat(resultPreferenceList.size()).isEqualTo(1);\n-        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n+        assertThat(loadedPreferences.size()).isEqualTo(1);\n+        assertThat(loadedPreferences.get(0)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        preferenceApiService.loadAll();\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll());\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadContextualPreferenceForAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.load(TEST_STRING, externalResource)).isEqualTo(contextualPreference);\n     }\n \n-    @Test(expected = AccessDeniedException.class)\n+    @Test\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n \n-        preferenceApiService.load(TEST_STRING, cpeResource);\n+        assertThrows(AccessDeniedException.class, () -> preferenceApiService.load(TEST_STRING, externalResource));\n     }\n \n     @Test\n+    @WithMockUser(username = SIMPLE_USER)\n     public void shouldSearchContextualPreference() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, cpeResource);\n-\n-        ContextualPreference resultPreference = preferenceApiService.search(TEST_STRING_LIST, cpeResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, externalResource);\n \n-        assertThat(resultPreference).isEqualTo(contextualPreference);\n+        assertThat(preferenceApiService.search(TEST_STRING_LIST, externalResource)).isEqualTo(contextualPreference);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0ODAwNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1495#discussion_r507648005", "bodyText": "As discussed with the team let's use @WithMockUser wherever possible. Even while testing methods without acl annotations at all. Specified without arguments it mocks the test with user name and role_user authority.", "author": "tcibinan", "createdAt": "2020-10-19T10:43:32Z", "path": "api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.contextual;\n+\n+import com.epam.pipeline.controller.vo.ContextualPreferenceVO;\n+import com.epam.pipeline.entity.contextual.ContextualPreference;\n+import com.epam.pipeline.entity.contextual.ContextualPreferenceExternalResource;\n+import com.epam.pipeline.manager.contextual.ContextualPreferenceManager;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.contextual.ContextualPreferenceCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n+\n+    private final ContextualPreference contextualPreference =\n+            ContextualPreferenceCreatorUtils.getContextualPreference();\n+    private final ContextualPreferenceExternalResource externalResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n+\n+    private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n+\n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadAllContextualPreferencesForAdmin() {\n+        doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n+\n+        assertThat(preferenceApiService.loadAll()).hasSize(1).contains(contextualPreference);\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = SIMPLE_USER_ROLE)", "originalCommit": "0a448e04b0987a02c1eee08ea7dd8e267c3c7310", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "294a3c1662148ec582ab6a88284ed1703244718a", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\nindex a376bb5ce..418106c36 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/contextual/ContextualPreferenceApiServiceTest.java\n\n@@ -32,65 +32,72 @@ import java.util.List;\n \n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_LIST;\n-import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.doReturn;\n \n public class ContextualPreferenceApiServiceTest extends AbstractAclTest {\n \n+    @Autowired\n+    private ContextualPreferenceApiService preferenceApiService;\n+\n+    @Autowired\n+    private ContextualPreferenceManager mockPreferenceManager;\n+\n     private final ContextualPreference contextualPreference =\n             ContextualPreferenceCreatorUtils.getContextualPreference();\n-    private final ContextualPreferenceExternalResource externalResource =\n-            ContextualPreferenceCreatorUtils.getCPExternalResource();\n-    private final ContextualPreferenceVO contextualPreferenceVO =\n-            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n \n     private final List<ContextualPreference> preferenceList = Collections.singletonList(contextualPreference);\n \n-    @Autowired\n-    private ContextualPreferenceApiService preferenceApiService;\n+    private final ContextualPreferenceExternalResource cpeResource =\n+            ContextualPreferenceCreatorUtils.getCPExternalResource();\n \n-    @Autowired\n-    private ContextualPreferenceManager mockPreferenceManager;\n+    private final ContextualPreferenceVO contextualPreferenceVO =\n+            ContextualPreferenceCreatorUtils.getContextualPreferenceVO();\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadAllContextualPreferencesForAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        assertThat(preferenceApiService.loadAll()).hasSize(1).contains(contextualPreference);\n+        List<ContextualPreference> resultPreferenceList = preferenceApiService.loadAll();\n+\n+        assertThat(resultPreferenceList.size()).isEqualTo(1);\n+        assertThat(resultPreferenceList.get(0)).isEqualTo(contextualPreference);\n     }\n \n-    @Test\n+    @Test(expected = AccessDeniedException.class)\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingAllContextualPreferencesForNotAdmin() {\n         doReturn(preferenceList).when(mockPreferenceManager).loadAll();\n \n-        assertThrows(AccessDeniedException.class, () -> preferenceApiService.loadAll());\n+        preferenceApiService.loadAll();\n     }\n \n     @Test\n     @WithMockUser(roles = ADMIN_ROLE)\n     public void shouldLoadContextualPreferenceForAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n+\n+        ContextualPreference resultPreference = preferenceApiService.load(TEST_STRING, cpeResource);\n \n-        assertThat(preferenceApiService.load(TEST_STRING, externalResource)).isEqualTo(contextualPreference);\n+        assertThat(resultPreference).isEqualTo(contextualPreference);\n     }\n \n-    @Test\n+    @Test(expected = AccessDeniedException.class)\n     @WithMockUser(roles = SIMPLE_USER_ROLE)\n     public void shouldDenyLoadingContextualPreferenceForNotAdmin() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, externalResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).load(TEST_STRING, cpeResource);\n \n-        assertThrows(AccessDeniedException.class, () -> preferenceApiService.load(TEST_STRING, externalResource));\n+        preferenceApiService.load(TEST_STRING, cpeResource);\n     }\n \n     @Test\n-    @WithMockUser(username = SIMPLE_USER)\n     public void shouldSearchContextualPreference() {\n-        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, externalResource);\n+        doReturn(contextualPreference).when(mockPreferenceManager).search(TEST_STRING_LIST, cpeResource);\n+\n+        ContextualPreference resultPreference = preferenceApiService.search(TEST_STRING_LIST, cpeResource);\n \n-        assertThat(preferenceApiService.search(TEST_STRING_LIST, externalResource)).isEqualTo(contextualPreference);\n+        assertThat(resultPreference).isEqualTo(contextualPreference);\n     }\n \n     @Test\n"}}, {"oid": "294a3c1662148ec582ab6a88284ed1703244718a", "url": "https://github.com/epam/cloud-pipeline/commit/294a3c1662148ec582ab6a88284ed1703244718a", "message": "Issue #1404: Implemented tests for ContextualPreferenceApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-22T12:10:24Z", "type": "commit"}, {"oid": "90813079e8775671a64c552fa621b16ff8603b60", "url": "https://github.com/epam/cloud-pipeline/commit/90813079e8775671a64c552fa621b16ff8603b60", "message": "Issue #1404: Tests improvements\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-22T12:10:40Z", "type": "commit"}, {"oid": "fdd1e867ac6a15674f48a7b1d7cabd75b4ba0dba", "url": "https://github.com/epam/cloud-pipeline/commit/fdd1e867ac6a15674f48a7b1d7cabd75b4ba0dba", "message": "Issue #1404: Improvement tests for ContextualApiService\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-22T12:10:40Z", "type": "commit"}, {"oid": "0d6bf8360916e8480ffaf5a5ce4cbd8c81282d29", "url": "https://github.com/epam/cloud-pipeline/commit/0d6bf8360916e8480ffaf5a5ce4cbd8c81282d29", "message": "Issue #1404: Fixes @WithMockUser arguments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-22T12:10:40Z", "type": "commit"}, {"oid": "33e8f3725e373f6f613a99b3ed7af414ae4ab064", "url": "https://github.com/epam/cloud-pipeline/commit/33e8f3725e373f6f613a99b3ed7af414ae4ab064", "message": "Issue #1404: Minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-22T12:18:16Z", "type": "commit"}, {"oid": "33e8f3725e373f6f613a99b3ed7af414ae4ab064", "url": "https://github.com/epam/cloud-pipeline/commit/33e8f3725e373f6f613a99b3ed7af414ae4ab064", "message": "Issue #1404: Minor style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-22T12:18:16Z", "type": "forcePushed"}, {"oid": "0f223553fe1d9a00086ecff86299ece589948be6", "url": "https://github.com/epam/cloud-pipeline/commit/0f223553fe1d9a00086ecff86299ece589948be6", "message": "Issue #1404: Changes in the PMD rules\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-23T11:33:54Z", "type": "commit"}, {"oid": "92196ad1bc87d296fc8d8ef2b401ad6b30c78a8b", "url": "https://github.com/epam/cloud-pipeline/commit/92196ad1bc87d296fc8d8ef2b401ad6b30c78a8b", "message": "Issue #1404: Fix PMD config\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-10-26T08:13:28Z", "type": "commit"}]}