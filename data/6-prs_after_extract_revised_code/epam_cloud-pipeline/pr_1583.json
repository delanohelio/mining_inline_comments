{"pr_number": 1583, "pr_title": "Issue #1405: Implemented tests for Metadata package controller layer", "pr_createdAt": "2020-11-19T16:05:54Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1583", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5OTgxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r528599817", "bodyText": "Do you understand why this change resolves jackson deserialization issue? Looks like some lombok \\ jackson incompatibility. Probably we should add comment clarifying why we cannot use @AllArgsConstructor here. Additionally there seems to be no problems with NoArgsConstructor so let's use it as before.", "author": "tcibinan", "createdAt": "2020-11-23T10:23:58Z", "path": "api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java", "diffHunk": "@@ -17,21 +17,27 @@\n package com.epam.pipeline.entity.metadata;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import lombok.AllArgsConstructor;\n import lombok.Getter;\n-import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n-@NoArgsConstructor\n-@AllArgsConstructor\n public class MetadataField {\n     private String name;\n     @JsonIgnore\n     private String dbName;\n     private boolean predefined = false;\n \n+    public MetadataField(String name, String dbName, boolean predefined) {", "originalCommit": "8b3fd5694de1eb9d1826bbfa1dc61a1f32735399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java b/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java\nindex 4dece0a9e..be97efde1 100644\n--- a/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java\n+++ b/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java\n\n@@ -18,26 +18,27 @@ package com.epam.pipeline.entity.metadata;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Getter;\n+import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n+@NoArgsConstructor\n public class MetadataField {\n     private String name;\n     @JsonIgnore\n     private String dbName;\n     private boolean predefined = false;\n \n+    //todo: Replace with @AllArgsConstructor once lombok version 1.16.20 is used.\n+    // The current version causes JsonMappingException.\n+    // See more https://stackoverflow.com/questions/40546508/jsoncreator-could-not-find-creator-property-with-name-even-with-ignoreunknown\n     public MetadataField(String name, String dbName, boolean predefined) {\n         this.name = name;\n         this.dbName = dbName;\n         this.predefined = predefined;\n     }\n \n-    public MetadataField() {\n-\n-    }\n-\n     @Override public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwODUxOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r528608518", "bodyText": "Please add the proper indent", "author": "tcibinan", "createdAt": "2020-11-23T10:38:35Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.MetadataVO;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.metadata.MetadataApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = MetadataController.class)\n+public class MetadataControllerTest extends AbstractControllerTest {\n+\n+    private static final String METADATA_URL = SERVLET_PATH + \"/metadata\";\n+    private static final String UPDATE_KEY_URL = METADATA_URL + \"/updateKey\";\n+    private static final String UPDATE_KEYS_URL = METADATA_URL + \"/updateKeys\";\n+    private static final String UPDATE_ITEM_URL = METADATA_URL + \"/update\";\n+    private static final String LOAD_ITEMS_URL = METADATA_URL + \"/load\";\n+    private static final String KEYS_URL = METADATA_URL + \"/keys\";\n+    private static final String FIND_ENTITY_URL = METADATA_URL + \"/find\";\n+    private static final String DELETE_ITEM_URL = METADATA_URL + \"/delete\";\n+    private static final String DELETE_ITEM_KEY_URL = METADATA_URL + \"/deleteKey\";\n+    private static final String DELETE_ITEM_KEYS_URL = METADATA_URL + \"/deleteKeys\";\n+    private static final String UPLOAD_URL = METADATA_URL + \"/upload\";\n+    private static final String FOLDER_URL = METADATA_URL + \"/folder\";\n+    private static final String SEARCH_URL = METADATA_URL + \"/search\";\n+\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String ACL_CLASS = \"class\";\n+    private static final String ENTITY_NAME = \"entityName\";\n+    private static final String KEY = \"key\";\n+    private static final String VALUE = \"value\";\n+    private static final String ENTITY_ID = \"id\";\n+    private static final String MERGE_WITH_EXISTING_METADATA = \"merge\";\n+    private static final String PARENT_FOLDER_ID = \"parentFolderId\";\n+\n+    private final MetadataEntry metadataEntry = MetadataCreatorUtils.getMetadataEntry();\n+    private final MetadataVO metadataVO = MetadataCreatorUtils.getMetadataVO();\n+    private final EntityVO entityVO = MetadataCreatorUtils.getEntityVO();\n+    private final AclClass aclClass = AclClass.DATA_STORAGE;\n+    private final List<EntityVO> entityVOList = Collections.singletonList(entityVO);\n+\n+    @Autowired\n+    private MetadataApiService mockMetadataApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItemKey(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_KEY_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItemKey(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItemKey() {\n+        performUnauthorizedRequest(post(UPDATE_KEY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeys() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItemKeys(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_KEYS_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItemKeys(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItemKeys() {\n+        performUnauthorizedRequest(post(UPDATE_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItem() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItem(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_ITEM_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItem(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItem() {\n+        performUnauthorizedRequest(post(UPDATE_ITEM_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataItems() throws Exception {\n+        final List<MetadataEntry> metadataEntries = Collections.singletonList(metadataEntry);\n+        final String content = getObjectMapper().writeValueAsString(entityVOList);\n+        doReturn(metadataEntries).when(mockMetadataApiService).listMetadataItems(entityVOList);\n+\n+        final MvcResult mvcResult = performRequest(post(LOAD_ITEMS_URL).content(content));\n+\n+        verify(mockMetadataApiService).listMetadataItems(entityVOList);\n+        assertResponse(mvcResult, metadataEntries, MetadataCreatorUtils.METADATA_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadMetadataItems() {\n+        performUnauthorizedRequest(post(LOAD_ITEMS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataKeys() {\n+        doReturn(TEST_STRING_SET).when(mockMetadataApiService).getMetadataKeys(aclClass);\n+\n+        final MvcResult mvcResult = performRequest(get(KEYS_URL).params(multiValueMapOf(ENTITY_CLASS, aclClass)));\n+\n+        verify(mockMetadataApiService).getMetadataKeys(aclClass);\n+        assertResponse(mvcResult, TEST_STRING_SET, CommonCreatorConstants.STRING_SET_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataKeys() {\n+        performUnauthorizedRequest(get(KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindMetadataEntityIdByName() {\n+        doReturn(metadataEntry).when(mockMetadataApiService).findMetadataEntityIdByName(TEST_STRING, aclClass);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_ENTITY_URL)\n+                .params(multiValueMapOf(ENTITY_NAME, TEST_STRING,\n+                                        ENTITY_CLASS, aclClass)));\n+\n+        verify(mockMetadataApiService).findMetadataEntityIdByName(TEST_STRING, aclClass);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindMetadataEntityIdByName() {\n+        performUnauthorizedRequest(get(FIND_ENTITY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItem() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(entityVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItem(entityVO);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_URL).content(content));\n+\n+        verify(mockMetadataApiService).deleteMetadataItem(entityVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItem() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(entityVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItemKey(entityVO, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_KEY_URL).content(content)\n+                .params(multiValueMapOf(KEY, TEST_STRING)));\n+\n+        verify(mockMetadataApiService).deleteMetadataItemKey(entityVO, TEST_STRING);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItemKey() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_KEY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKeys() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItemKeys(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_KEYS_URL).content(content));\n+\n+        verify(mockMetadataApiService).deleteMetadataItemKeys(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItemKeys() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFile() {\n+        doReturn(metadataEntry).when(mockMetadataApiService)\n+                .uploadMetadataFromFile(eq(new EntityVO(ID, aclClass)), any(), eq(true));\n+\n+        final MvcResult mvcResult = performRequest(post(UPLOAD_URL).content(MULTIPART_CONTENT)\n+                        .params(multiValueMapOf(ENTITY_ID, ID,\n+                                                ACL_CLASS, aclClass,\n+                                                MERGE_WITH_EXISTING_METADATA, true)),\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);", "originalCommit": "8b3fd5694de1eb9d1826bbfa1dc61a1f32735399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\nindex 8239502da..20af7d65e 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n\n@@ -26,10 +26,13 @@ import com.epam.pipeline.test.creator.CommonCreatorConstants;\n import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.multipart.MultipartFile;\n \n import java.util.Collections;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMzY1NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r528613655", "bodyText": "Let's check the contents of the second argument using ArgumentCaptor. This is the only way to be sure that the multipart file was parsed correctly.", "author": "tcibinan", "createdAt": "2020-11-23T10:47:28Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.MetadataVO;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.metadata.MetadataApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = MetadataController.class)\n+public class MetadataControllerTest extends AbstractControllerTest {\n+\n+    private static final String METADATA_URL = SERVLET_PATH + \"/metadata\";\n+    private static final String UPDATE_KEY_URL = METADATA_URL + \"/updateKey\";\n+    private static final String UPDATE_KEYS_URL = METADATA_URL + \"/updateKeys\";\n+    private static final String UPDATE_ITEM_URL = METADATA_URL + \"/update\";\n+    private static final String LOAD_ITEMS_URL = METADATA_URL + \"/load\";\n+    private static final String KEYS_URL = METADATA_URL + \"/keys\";\n+    private static final String FIND_ENTITY_URL = METADATA_URL + \"/find\";\n+    private static final String DELETE_ITEM_URL = METADATA_URL + \"/delete\";\n+    private static final String DELETE_ITEM_KEY_URL = METADATA_URL + \"/deleteKey\";\n+    private static final String DELETE_ITEM_KEYS_URL = METADATA_URL + \"/deleteKeys\";\n+    private static final String UPLOAD_URL = METADATA_URL + \"/upload\";\n+    private static final String FOLDER_URL = METADATA_URL + \"/folder\";\n+    private static final String SEARCH_URL = METADATA_URL + \"/search\";\n+\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String ACL_CLASS = \"class\";\n+    private static final String ENTITY_NAME = \"entityName\";\n+    private static final String KEY = \"key\";\n+    private static final String VALUE = \"value\";\n+    private static final String ENTITY_ID = \"id\";\n+    private static final String MERGE_WITH_EXISTING_METADATA = \"merge\";\n+    private static final String PARENT_FOLDER_ID = \"parentFolderId\";\n+\n+    private final MetadataEntry metadataEntry = MetadataCreatorUtils.getMetadataEntry();\n+    private final MetadataVO metadataVO = MetadataCreatorUtils.getMetadataVO();\n+    private final EntityVO entityVO = MetadataCreatorUtils.getEntityVO();\n+    private final AclClass aclClass = AclClass.DATA_STORAGE;\n+    private final List<EntityVO> entityVOList = Collections.singletonList(entityVO);\n+\n+    @Autowired\n+    private MetadataApiService mockMetadataApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItemKey(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_KEY_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItemKey(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItemKey() {\n+        performUnauthorizedRequest(post(UPDATE_KEY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeys() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItemKeys(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_KEYS_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItemKeys(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItemKeys() {\n+        performUnauthorizedRequest(post(UPDATE_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItem() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItem(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_ITEM_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItem(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItem() {\n+        performUnauthorizedRequest(post(UPDATE_ITEM_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataItems() throws Exception {\n+        final List<MetadataEntry> metadataEntries = Collections.singletonList(metadataEntry);\n+        final String content = getObjectMapper().writeValueAsString(entityVOList);\n+        doReturn(metadataEntries).when(mockMetadataApiService).listMetadataItems(entityVOList);\n+\n+        final MvcResult mvcResult = performRequest(post(LOAD_ITEMS_URL).content(content));\n+\n+        verify(mockMetadataApiService).listMetadataItems(entityVOList);\n+        assertResponse(mvcResult, metadataEntries, MetadataCreatorUtils.METADATA_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadMetadataItems() {\n+        performUnauthorizedRequest(post(LOAD_ITEMS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataKeys() {\n+        doReturn(TEST_STRING_SET).when(mockMetadataApiService).getMetadataKeys(aclClass);\n+\n+        final MvcResult mvcResult = performRequest(get(KEYS_URL).params(multiValueMapOf(ENTITY_CLASS, aclClass)));\n+\n+        verify(mockMetadataApiService).getMetadataKeys(aclClass);\n+        assertResponse(mvcResult, TEST_STRING_SET, CommonCreatorConstants.STRING_SET_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataKeys() {\n+        performUnauthorizedRequest(get(KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindMetadataEntityIdByName() {\n+        doReturn(metadataEntry).when(mockMetadataApiService).findMetadataEntityIdByName(TEST_STRING, aclClass);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_ENTITY_URL)\n+                .params(multiValueMapOf(ENTITY_NAME, TEST_STRING,\n+                                        ENTITY_CLASS, aclClass)));\n+\n+        verify(mockMetadataApiService).findMetadataEntityIdByName(TEST_STRING, aclClass);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindMetadataEntityIdByName() {\n+        performUnauthorizedRequest(get(FIND_ENTITY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItem() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(entityVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItem(entityVO);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_URL).content(content));\n+\n+        verify(mockMetadataApiService).deleteMetadataItem(entityVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItem() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(entityVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItemKey(entityVO, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_KEY_URL).content(content)\n+                .params(multiValueMapOf(KEY, TEST_STRING)));\n+\n+        verify(mockMetadataApiService).deleteMetadataItemKey(entityVO, TEST_STRING);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItemKey() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_KEY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKeys() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItemKeys(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_KEYS_URL).content(content));\n+\n+        verify(mockMetadataApiService).deleteMetadataItemKeys(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItemKeys() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFile() {\n+        doReturn(metadataEntry).when(mockMetadataApiService)\n+                .uploadMetadataFromFile(eq(new EntityVO(ID, aclClass)), any(), eq(true));\n+\n+        final MvcResult mvcResult = performRequest(post(UPLOAD_URL).content(MULTIPART_CONTENT)\n+                        .params(multiValueMapOf(ENTITY_ID, ID,\n+                                                ACL_CLASS, aclClass,\n+                                                MERGE_WITH_EXISTING_METADATA, true)),\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class), any(), eq(true));", "originalCommit": "8b3fd5694de1eb9d1826bbfa1dc61a1f32735399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\nindex 8239502da..20af7d65e 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n\n@@ -26,10 +26,13 @@ import com.epam.pipeline.test.creator.CommonCreatorConstants;\n import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.multipart.MultipartFile;\n \n import java.util.Collections;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTI3Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r528619272", "bodyText": "It would be helpful to use ArgumentCaptor here as well.", "author": "tcibinan", "createdAt": "2020-11-23T10:57:39Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.amazonaws.util.StringInputStream;\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.manager.metadata.MetadataEntityApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = MetadataEntityController.class)\n+public class MetadataEntityControllerTest extends AbstractControllerTest {\n+\n+    private static final String METADATA_CLASS_URL = SERVLET_PATH + \"/metadataClass\";\n+    private static final String METADATA_CLASS_REGISTER_URL = METADATA_CLASS_URL + \"/register\";\n+    private static final String METADATA_CLASSES_LOAD_URL = METADATA_CLASS_URL + \"/loadAll\";\n+    private static final String METADATA_CLASS_DELETE_URL = METADATA_CLASS_URL + \"/%d/delete\";\n+    private static final String METADATA_CLASS_UPDATE_EXTERNAL_URL = METADATA_CLASS_URL + \"/%d/external\";\n+    private static final String METADATA_ENTITY_URL = SERVLET_PATH + \"/metadataEntity\";\n+    private static final String METADATA_ENTITY_LOAD_URL = METADATA_ENTITY_URL + \"/%d/load\";\n+    private static final String METADATA_ENTITY_LOAD_EXTERNAL_URL = METADATA_ENTITY_URL + \"/loadExternal\";\n+    private static final String METADATA_ENTITY_FILTER_URL = METADATA_ENTITY_URL + \"/filter\";\n+    private static final String METADATA_ENTITY_UPLOAD_URL = METADATA_ENTITY_URL + \"/upload\";\n+    private static final String METADATA_ENTITY_GET_KEYS_URL = METADATA_ENTITY_URL + \"/keys\";\n+    private static final String METADATA_ENTITY_GET_FIELDS_URL = METADATA_ENTITY_URL + \"/fields\";\n+    private static final String METADATA_ENTITY_DELETE_URL = METADATA_ENTITY_URL + \"/%d/delete\";\n+    private static final String METADATA_ENTITY_SAVE_URL = METADATA_ENTITY_URL + \"/save\";\n+    private static final String METADATA_ENTITY_UPDATE_KEY_URL = METADATA_ENTITY_URL + \"/updateKey\";\n+    private static final String METADATA_ENTITY_DELETE_KEY_URL = METADATA_ENTITY_URL + \"/%d/deleteKey\";\n+    private static final String METADATA_ENTITY_DELETE_LIST_URL = METADATA_ENTITY_URL + \"/deleteList\";\n+    private static final String METADATA_ENTITY_DELETE_FROM_PROJECT_URL = METADATA_ENTITY_URL + \"/deleteFromProject\";\n+    private static final String METADATA_ENTITY_ENTITIES_URL = METADATA_ENTITY_URL + \"/entities\";\n+    private static final String METADATA_ENTITY_DOWNLOAD_URL = METADATA_ENTITY_URL + \"/download\";\n+\n+    private static final String ENTITY_NAME = \"name\";\n+    private static final String EXTERNAL_CLASS_NAME = \"externalClassName\";\n+    private static final String CLASS_NAME = \"className\";\n+    private static final String FOLDER_ID = \"folderId\";\n+    private static final String STRING_ID = \"id\";\n+    private static final String PARENT_ID = \"parentId\";\n+    private static final String METADATA_CLASS = \"metadataClass\";\n+    private static final String KEY = \"key\";\n+    private static final String PROJECT_ID = \"projectId\";\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String FILE_FORMAT = \"fileFormat\";\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO();\n+\n+    @Autowired\n+    private MetadataEntityApiService mockMetadataEntityApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterMetadataClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService).createMetadataClass(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_CLASS_REGISTER_URL)\n+                .params(multiValueMapOf(ENTITY_NAME, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).createMetadataClass(TEST_STRING);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRegisterMetadataClass() {\n+        performUnauthorizedRequest(post(METADATA_CLASS_REGISTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllMetadataClasses() {\n+        final List<MetadataClass> metadataClassList = Collections.singletonList(metadataClass);\n+        doReturn(metadataClassList).when(mockMetadataEntityApiService).loadAllMetadataClasses();\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_CLASSES_LOAD_URL));\n+\n+        verify(mockMetadataEntityApiService).loadAllMetadataClasses();\n+        assertResponse(mvcResult, metadataClassList, MetadataCreatorUtils.METADATA_CLASS_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllMetadataClasses() {\n+        performUnauthorizedRequest(get(METADATA_CLASSES_LOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService).deleteMetadataClass(ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(METADATA_CLASS_DELETE_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataClass(ID);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataClass() {\n+        performUnauthorizedRequest(get(METADATA_CLASSES_LOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateExternalClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService)\n+                .updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(METADATA_CLASS_UPDATE_EXTERNAL_URL, ID))\n+                .params(multiValueMapOf(EXTERNAL_CLASS_NAME, FireCloudClass.PARTICIPANT)));\n+\n+        verify(mockMetadataEntityApiService).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateExternalClass() {\n+        performUnauthorizedRequest(post(String.format(METADATA_CLASS_UPDATE_EXTERNAL_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).loadMetadataEntity(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(METADATA_ENTITY_LOAD_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).loadMetadataEntity(ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadMetadataEntity() {\n+        performUnauthorizedRequest(get(String.format(METADATA_ENTITY_LOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadExternalMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_LOAD_EXTERNAL_URL)\n+                .params(multiValueMapOf(STRING_ID, TEST_STRING,\n+                                        CLASS_NAME, TEST_STRING,\n+                                        FOLDER_ID, ID)));\n+\n+        verify(mockMetadataEntityApiService).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadExternalMetadataEntity() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_LOAD_EXTERNAL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFilterMetadataEntities() throws Exception {\n+        final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+        final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter();\n+        final String content = getObjectMapper().writeValueAsString(metadataFilter);\n+        doReturn(pagedResult).when(mockMetadataEntityApiService).filterMetadata(metadataFilter);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_FILTER_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).filterMetadata(metadataFilter);\n+        assertResponse(mvcResult, pagedResult, MetadataCreatorUtils.PAGED_RESULT_ENTITY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFilterMetadataEntities() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_FILTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFile() {\n+        final List<MetadataEntity> entities = Collections.singletonList(metadataEntity);\n+        doReturn(entities).when(mockMetadataEntityApiService).uploadMetadataFromFile(eq(ID), any(MultipartFile.class));\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_UPLOAD_URL).content(MULTIPART_CONTENT)\n+                .params(multiValueMapOf(PARENT_ID, ID)), MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockMetadataEntityApiService).uploadMetadataFromFile(eq(ID), any(MultipartFile.class));", "originalCommit": "8b3fd5694de1eb9d1826bbfa1dc61a1f32735399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\nindex 29b162dc6..3ea7197fd 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\n\n@@ -31,6 +31,7 @@ import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.http.MediaType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTk5MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r528619991", "bodyText": "We need to create a new instance of the class here because there are no guaranties on junit tests execution order.", "author": "tcibinan", "createdAt": "2020-11-23T10:58:58Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.amazonaws.util.StringInputStream;\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.manager.metadata.MetadataEntityApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = MetadataEntityController.class)\n+public class MetadataEntityControllerTest extends AbstractControllerTest {\n+\n+    private static final String METADATA_CLASS_URL = SERVLET_PATH + \"/metadataClass\";\n+    private static final String METADATA_CLASS_REGISTER_URL = METADATA_CLASS_URL + \"/register\";\n+    private static final String METADATA_CLASSES_LOAD_URL = METADATA_CLASS_URL + \"/loadAll\";\n+    private static final String METADATA_CLASS_DELETE_URL = METADATA_CLASS_URL + \"/%d/delete\";\n+    private static final String METADATA_CLASS_UPDATE_EXTERNAL_URL = METADATA_CLASS_URL + \"/%d/external\";\n+    private static final String METADATA_ENTITY_URL = SERVLET_PATH + \"/metadataEntity\";\n+    private static final String METADATA_ENTITY_LOAD_URL = METADATA_ENTITY_URL + \"/%d/load\";\n+    private static final String METADATA_ENTITY_LOAD_EXTERNAL_URL = METADATA_ENTITY_URL + \"/loadExternal\";\n+    private static final String METADATA_ENTITY_FILTER_URL = METADATA_ENTITY_URL + \"/filter\";\n+    private static final String METADATA_ENTITY_UPLOAD_URL = METADATA_ENTITY_URL + \"/upload\";\n+    private static final String METADATA_ENTITY_GET_KEYS_URL = METADATA_ENTITY_URL + \"/keys\";\n+    private static final String METADATA_ENTITY_GET_FIELDS_URL = METADATA_ENTITY_URL + \"/fields\";\n+    private static final String METADATA_ENTITY_DELETE_URL = METADATA_ENTITY_URL + \"/%d/delete\";\n+    private static final String METADATA_ENTITY_SAVE_URL = METADATA_ENTITY_URL + \"/save\";\n+    private static final String METADATA_ENTITY_UPDATE_KEY_URL = METADATA_ENTITY_URL + \"/updateKey\";\n+    private static final String METADATA_ENTITY_DELETE_KEY_URL = METADATA_ENTITY_URL + \"/%d/deleteKey\";\n+    private static final String METADATA_ENTITY_DELETE_LIST_URL = METADATA_ENTITY_URL + \"/deleteList\";\n+    private static final String METADATA_ENTITY_DELETE_FROM_PROJECT_URL = METADATA_ENTITY_URL + \"/deleteFromProject\";\n+    private static final String METADATA_ENTITY_ENTITIES_URL = METADATA_ENTITY_URL + \"/entities\";\n+    private static final String METADATA_ENTITY_DOWNLOAD_URL = METADATA_ENTITY_URL + \"/download\";\n+\n+    private static final String ENTITY_NAME = \"name\";\n+    private static final String EXTERNAL_CLASS_NAME = \"externalClassName\";\n+    private static final String CLASS_NAME = \"className\";\n+    private static final String FOLDER_ID = \"folderId\";\n+    private static final String STRING_ID = \"id\";\n+    private static final String PARENT_ID = \"parentId\";\n+    private static final String METADATA_CLASS = \"metadataClass\";\n+    private static final String KEY = \"key\";\n+    private static final String PROJECT_ID = \"projectId\";\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String FILE_FORMAT = \"fileFormat\";\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO();\n+\n+    @Autowired\n+    private MetadataEntityApiService mockMetadataEntityApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterMetadataClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService).createMetadataClass(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_CLASS_REGISTER_URL)\n+                .params(multiValueMapOf(ENTITY_NAME, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).createMetadataClass(TEST_STRING);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRegisterMetadataClass() {\n+        performUnauthorizedRequest(post(METADATA_CLASS_REGISTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllMetadataClasses() {\n+        final List<MetadataClass> metadataClassList = Collections.singletonList(metadataClass);\n+        doReturn(metadataClassList).when(mockMetadataEntityApiService).loadAllMetadataClasses();\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_CLASSES_LOAD_URL));\n+\n+        verify(mockMetadataEntityApiService).loadAllMetadataClasses();\n+        assertResponse(mvcResult, metadataClassList, MetadataCreatorUtils.METADATA_CLASS_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllMetadataClasses() {\n+        performUnauthorizedRequest(get(METADATA_CLASSES_LOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService).deleteMetadataClass(ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(METADATA_CLASS_DELETE_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataClass(ID);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataClass() {\n+        performUnauthorizedRequest(get(METADATA_CLASSES_LOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateExternalClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService)\n+                .updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(METADATA_CLASS_UPDATE_EXTERNAL_URL, ID))\n+                .params(multiValueMapOf(EXTERNAL_CLASS_NAME, FireCloudClass.PARTICIPANT)));\n+\n+        verify(mockMetadataEntityApiService).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateExternalClass() {\n+        performUnauthorizedRequest(post(String.format(METADATA_CLASS_UPDATE_EXTERNAL_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).loadMetadataEntity(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(METADATA_ENTITY_LOAD_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).loadMetadataEntity(ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadMetadataEntity() {\n+        performUnauthorizedRequest(get(String.format(METADATA_ENTITY_LOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadExternalMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_LOAD_EXTERNAL_URL)\n+                .params(multiValueMapOf(STRING_ID, TEST_STRING,\n+                                        CLASS_NAME, TEST_STRING,\n+                                        FOLDER_ID, ID)));\n+\n+        verify(mockMetadataEntityApiService).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadExternalMetadataEntity() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_LOAD_EXTERNAL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFilterMetadataEntities() throws Exception {\n+        final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+        final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter();\n+        final String content = getObjectMapper().writeValueAsString(metadataFilter);\n+        doReturn(pagedResult).when(mockMetadataEntityApiService).filterMetadata(metadataFilter);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_FILTER_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).filterMetadata(metadataFilter);\n+        assertResponse(mvcResult, pagedResult, MetadataCreatorUtils.PAGED_RESULT_ENTITY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFilterMetadataEntities() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_FILTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFile() {\n+        final List<MetadataEntity> entities = Collections.singletonList(metadataEntity);\n+        doReturn(entities).when(mockMetadataEntityApiService).uploadMetadataFromFile(eq(ID), any(MultipartFile.class));\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_UPLOAD_URL).content(MULTIPART_CONTENT)\n+                .params(multiValueMapOf(PARENT_ID, ID)), MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockMetadataEntityApiService).uploadMetadataFromFile(eq(ID), any(MultipartFile.class));\n+        assertResponse(mvcResult, entities, MetadataCreatorUtils.METADATA_ENTITY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadMetadataFromFile() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_UPLOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataKeys() {\n+        final List<MetadataField> fields = Collections.singletonList(MetadataCreatorUtils.getMetadataField());\n+        doReturn(fields).when(mockMetadataEntityApiService).getMetadataKeys(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_GET_KEYS_URL)\n+                .params(multiValueMapOf(FOLDER_ID, ID,\n+                                        METADATA_CLASS, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).getMetadataKeys(ID, TEST_STRING);\n+        assertResponse(mvcResult, fields, MetadataCreatorUtils.METADATA_FIELD_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataKeys() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_GET_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataFields() {\n+        final List<MetadataClassDescription> list =\n+                Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+        doReturn(list).when(mockMetadataEntityApiService).getMetadataFields(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_GET_FIELDS_URL)\n+                .params(multiValueMapOf(FOLDER_ID, ID)));\n+\n+        verify(mockMetadataEntityApiService).getMetadataFields(ID);\n+        assertResponse(mvcResult, list, MetadataCreatorUtils.CLASS_DESCRIPTION_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataFields() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_GET_FIELDS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).deleteMetadataEntity(ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(METADATA_ENTITY_DELETE_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataEntity(ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataEntity() {\n+        performUnauthorizedRequest(delete(String.format(METADATA_ENTITY_DELETE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataEntityWithId() throws Exception {\n+        metadataEntityVO.setEntityId(ID);", "originalCommit": "8b3fd5694de1eb9d1826bbfa1dc61a1f32735399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\nindex 29b162dc6..3ea7197fd 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\n\n@@ -31,6 +31,7 @@ import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.http.MediaType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTc1MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r528621750", "bodyText": "Can we use assertFileResponse method here?", "author": "tcibinan", "createdAt": "2020-11-23T11:02:06Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.amazonaws.util.StringInputStream;\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.manager.metadata.MetadataEntityApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = MetadataEntityController.class)\n+public class MetadataEntityControllerTest extends AbstractControllerTest {\n+\n+    private static final String METADATA_CLASS_URL = SERVLET_PATH + \"/metadataClass\";\n+    private static final String METADATA_CLASS_REGISTER_URL = METADATA_CLASS_URL + \"/register\";\n+    private static final String METADATA_CLASSES_LOAD_URL = METADATA_CLASS_URL + \"/loadAll\";\n+    private static final String METADATA_CLASS_DELETE_URL = METADATA_CLASS_URL + \"/%d/delete\";\n+    private static final String METADATA_CLASS_UPDATE_EXTERNAL_URL = METADATA_CLASS_URL + \"/%d/external\";\n+    private static final String METADATA_ENTITY_URL = SERVLET_PATH + \"/metadataEntity\";\n+    private static final String METADATA_ENTITY_LOAD_URL = METADATA_ENTITY_URL + \"/%d/load\";\n+    private static final String METADATA_ENTITY_LOAD_EXTERNAL_URL = METADATA_ENTITY_URL + \"/loadExternal\";\n+    private static final String METADATA_ENTITY_FILTER_URL = METADATA_ENTITY_URL + \"/filter\";\n+    private static final String METADATA_ENTITY_UPLOAD_URL = METADATA_ENTITY_URL + \"/upload\";\n+    private static final String METADATA_ENTITY_GET_KEYS_URL = METADATA_ENTITY_URL + \"/keys\";\n+    private static final String METADATA_ENTITY_GET_FIELDS_URL = METADATA_ENTITY_URL + \"/fields\";\n+    private static final String METADATA_ENTITY_DELETE_URL = METADATA_ENTITY_URL + \"/%d/delete\";\n+    private static final String METADATA_ENTITY_SAVE_URL = METADATA_ENTITY_URL + \"/save\";\n+    private static final String METADATA_ENTITY_UPDATE_KEY_URL = METADATA_ENTITY_URL + \"/updateKey\";\n+    private static final String METADATA_ENTITY_DELETE_KEY_URL = METADATA_ENTITY_URL + \"/%d/deleteKey\";\n+    private static final String METADATA_ENTITY_DELETE_LIST_URL = METADATA_ENTITY_URL + \"/deleteList\";\n+    private static final String METADATA_ENTITY_DELETE_FROM_PROJECT_URL = METADATA_ENTITY_URL + \"/deleteFromProject\";\n+    private static final String METADATA_ENTITY_ENTITIES_URL = METADATA_ENTITY_URL + \"/entities\";\n+    private static final String METADATA_ENTITY_DOWNLOAD_URL = METADATA_ENTITY_URL + \"/download\";\n+\n+    private static final String ENTITY_NAME = \"name\";\n+    private static final String EXTERNAL_CLASS_NAME = \"externalClassName\";\n+    private static final String CLASS_NAME = \"className\";\n+    private static final String FOLDER_ID = \"folderId\";\n+    private static final String STRING_ID = \"id\";\n+    private static final String PARENT_ID = \"parentId\";\n+    private static final String METADATA_CLASS = \"metadataClass\";\n+    private static final String KEY = \"key\";\n+    private static final String PROJECT_ID = \"projectId\";\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String FILE_FORMAT = \"fileFormat\";\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO();\n+\n+    @Autowired\n+    private MetadataEntityApiService mockMetadataEntityApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterMetadataClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService).createMetadataClass(TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_CLASS_REGISTER_URL)\n+                .params(multiValueMapOf(ENTITY_NAME, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).createMetadataClass(TEST_STRING);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailRegisterMetadataClass() {\n+        performUnauthorizedRequest(post(METADATA_CLASS_REGISTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAllMetadataClasses() {\n+        final List<MetadataClass> metadataClassList = Collections.singletonList(metadataClass);\n+        doReturn(metadataClassList).when(mockMetadataEntityApiService).loadAllMetadataClasses();\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_CLASSES_LOAD_URL));\n+\n+        verify(mockMetadataEntityApiService).loadAllMetadataClasses();\n+        assertResponse(mvcResult, metadataClassList, MetadataCreatorUtils.METADATA_CLASS_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadAllMetadataClasses() {\n+        performUnauthorizedRequest(get(METADATA_CLASSES_LOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService).deleteMetadataClass(ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(METADATA_CLASS_DELETE_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataClass(ID);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataClass() {\n+        performUnauthorizedRequest(get(METADATA_CLASSES_LOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateExternalClass() {\n+        doReturn(metadataClass).when(mockMetadataEntityApiService)\n+                .updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(METADATA_CLASS_UPDATE_EXTERNAL_URL, ID))\n+                .params(multiValueMapOf(EXTERNAL_CLASS_NAME, FireCloudClass.PARTICIPANT)));\n+\n+        verify(mockMetadataEntityApiService).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+        assertResponse(mvcResult, metadataClass, MetadataCreatorUtils.METADATA_CLASS_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateExternalClass() {\n+        performUnauthorizedRequest(post(String.format(METADATA_CLASS_UPDATE_EXTERNAL_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).loadMetadataEntity(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(METADATA_ENTITY_LOAD_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).loadMetadataEntity(ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadMetadataEntity() {\n+        performUnauthorizedRequest(get(String.format(METADATA_ENTITY_LOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadExternalMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_LOAD_EXTERNAL_URL)\n+                .params(multiValueMapOf(STRING_ID, TEST_STRING,\n+                                        CLASS_NAME, TEST_STRING,\n+                                        FOLDER_ID, ID)));\n+\n+        verify(mockMetadataEntityApiService).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadExternalMetadataEntity() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_LOAD_EXTERNAL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFilterMetadataEntities() throws Exception {\n+        final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+        final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter();\n+        final String content = getObjectMapper().writeValueAsString(metadataFilter);\n+        doReturn(pagedResult).when(mockMetadataEntityApiService).filterMetadata(metadataFilter);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_FILTER_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).filterMetadata(metadataFilter);\n+        assertResponse(mvcResult, pagedResult, MetadataCreatorUtils.PAGED_RESULT_ENTITY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFilterMetadataEntities() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_FILTER_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFile() {\n+        final List<MetadataEntity> entities = Collections.singletonList(metadataEntity);\n+        doReturn(entities).when(mockMetadataEntityApiService).uploadMetadataFromFile(eq(ID), any(MultipartFile.class));\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_UPLOAD_URL).content(MULTIPART_CONTENT)\n+                .params(multiValueMapOf(PARENT_ID, ID)), MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockMetadataEntityApiService).uploadMetadataFromFile(eq(ID), any(MultipartFile.class));\n+        assertResponse(mvcResult, entities, MetadataCreatorUtils.METADATA_ENTITY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadMetadataFromFile() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_UPLOAD_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataKeys() {\n+        final List<MetadataField> fields = Collections.singletonList(MetadataCreatorUtils.getMetadataField());\n+        doReturn(fields).when(mockMetadataEntityApiService).getMetadataKeys(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_GET_KEYS_URL)\n+                .params(multiValueMapOf(FOLDER_ID, ID,\n+                                        METADATA_CLASS, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).getMetadataKeys(ID, TEST_STRING);\n+        assertResponse(mvcResult, fields, MetadataCreatorUtils.METADATA_FIELD_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataKeys() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_GET_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataFields() {\n+        final List<MetadataClassDescription> list =\n+                Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+        doReturn(list).when(mockMetadataEntityApiService).getMetadataFields(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_GET_FIELDS_URL)\n+                .params(multiValueMapOf(FOLDER_ID, ID)));\n+\n+        verify(mockMetadataEntityApiService).getMetadataFields(ID);\n+        assertResponse(mvcResult, list, MetadataCreatorUtils.CLASS_DESCRIPTION_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataFields() {\n+        performUnauthorizedRequest(get(METADATA_ENTITY_GET_FIELDS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataEntity() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).deleteMetadataEntity(ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(METADATA_ENTITY_DELETE_URL, ID)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataEntity(ID);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataEntity() {\n+        performUnauthorizedRequest(delete(String.format(METADATA_ENTITY_DELETE_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataEntityWithId() throws Exception {\n+        metadataEntityVO.setEntityId(ID);\n+        final String content = getObjectMapper().writeValueAsString(metadataEntityVO);\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).updateMetadataEntity(metadataEntityVO);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_SAVE_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).updateMetadataEntity(metadataEntityVO);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataEntityWithoutId() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataEntityVO);\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).createMetadataEntity(metadataEntityVO);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_SAVE_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).createMetadataEntity(metadataEntityVO);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataEntity() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_DELETE_URL, ID));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataEntityItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataEntityVO);\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).updateMetadataItemKey(metadataEntityVO);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_UPDATE_KEY_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).updateMetadataItemKey(metadataEntityVO);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataEntityItemKey() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_UPDATE_KEY_URL, ID));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataEntityItemKey() {\n+        doReturn(metadataEntity).when(mockMetadataEntityApiService).deleteMetadataItemKey(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(METADATA_ENTITY_DELETE_KEY_URL, ID))\n+                .params(multiValueMapOf(KEY, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataItemKey(ID, TEST_STRING);\n+        assertResponse(mvcResult, metadataEntity, MetadataCreatorUtils.METADATA_ENTITY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataEntityItemKey() {\n+        performUnauthorizedRequest(delete(String.format(METADATA_ENTITY_DELETE_KEY_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataEntities() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(TEST_LONG_SET);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityApiService).deleteMetadataEntities(TEST_LONG_SET);\n+\n+        final MvcResult mvcResult = performRequest(delete(METADATA_ENTITY_DELETE_LIST_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataEntities(TEST_LONG_SET);\n+        assertResponse(mvcResult, TEST_LONG_SET, CommonCreatorConstants.LONG_SET_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataEntities() {\n+        performUnauthorizedRequest(delete(METADATA_ENTITY_DELETE_LIST_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataEntitiesFromProject() {\n+        doNothing().when(mockMetadataEntityApiService).deleteMetadataFromProject(ID, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(METADATA_ENTITY_DELETE_FROM_PROJECT_URL)\n+                .params(multiValueMapOf(PROJECT_ID, ID,\n+                                        ENTITY_CLASS, TEST_STRING)));\n+\n+        verify(mockMetadataEntityApiService).deleteMetadataFromProject(ID, TEST_STRING);\n+        assertResponse(mvcResult, null, MetadataCreatorUtils.RESULT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataEntitiesFromProject() {\n+        performUnauthorizedRequest(delete(METADATA_ENTITY_DELETE_LIST_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntitiesData() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(TEST_LONG_SET);\n+        doReturn(TEST_STRING_MAP).when(mockMetadataEntityApiService).loadEntitiesData(TEST_LONG_SET);\n+\n+        final MvcResult mvcResult = performRequest(post(METADATA_ENTITY_ENTITIES_URL).content(content));\n+\n+        verify(mockMetadataEntityApiService).loadEntitiesData(TEST_LONG_SET);\n+        assertResponse(mvcResult, TEST_STRING_MAP, CommonCreatorConstants.STRING_MAP_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadEntitiesData() {\n+        performUnauthorizedRequest(post(METADATA_ENTITY_ENTITIES_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDownloadEntityAsFile() throws Exception {\n+        final InputStream inputStream = new StringInputStream(TEST_STRING);\n+        doReturn(inputStream).when(mockMetadataEntityApiService).getMetadataEntityFile(ID, TEST_STRING, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(get(METADATA_ENTITY_DOWNLOAD_URL)\n+                        .params(multiValueMapOf(FOLDER_ID, ID,\n+                                                ENTITY_CLASS, TEST_STRING,\n+                                                FILE_FORMAT, TEST_STRING)),\n+                MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+\n+        verify(mockMetadataEntityApiService).getMetadataEntityFile(ID, TEST_STRING, TEST_STRING);\n+        Assert.assertEquals(TEST_STRING, mvcResult.getResponse().getContentAsString());", "originalCommit": "8b3fd5694de1eb9d1826bbfa1dc61a1f32735399", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\nindex 29b162dc6..3ea7197fd 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataEntityControllerTest.java\n\n@@ -31,6 +31,7 @@ import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.http.MediaType;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM5MTk5NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r529391994", "bodyText": "I'm thinking that we should check returnedFile.getOriginalFilename() and file.getBytes() because these methods used in MetadataApiService.\nAdditionally it seems like a good idea to extract new assertion method which will accept the captor and check for the uploading file name and its content:\nassertRequestFile(captor, expectedFileName, expectedContent);", "author": "tcibinan", "createdAt": "2020-11-24T10:06:21Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.MetadataVO;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.metadata.MetadataApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+\n+@WebMvcTest(controllers = MetadataController.class)\n+public class MetadataControllerTest extends AbstractControllerTest {\n+\n+    private static final String METADATA_URL = SERVLET_PATH + \"/metadata\";\n+    private static final String UPDATE_KEY_URL = METADATA_URL + \"/updateKey\";\n+    private static final String UPDATE_KEYS_URL = METADATA_URL + \"/updateKeys\";\n+    private static final String UPDATE_ITEM_URL = METADATA_URL + \"/update\";\n+    private static final String LOAD_ITEMS_URL = METADATA_URL + \"/load\";\n+    private static final String KEYS_URL = METADATA_URL + \"/keys\";\n+    private static final String FIND_ENTITY_URL = METADATA_URL + \"/find\";\n+    private static final String DELETE_ITEM_URL = METADATA_URL + \"/delete\";\n+    private static final String DELETE_ITEM_KEY_URL = METADATA_URL + \"/deleteKey\";\n+    private static final String DELETE_ITEM_KEYS_URL = METADATA_URL + \"/deleteKeys\";\n+    private static final String UPLOAD_URL = METADATA_URL + \"/upload\";\n+    private static final String FOLDER_URL = METADATA_URL + \"/folder\";\n+    private static final String SEARCH_URL = METADATA_URL + \"/search\";\n+\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String ACL_CLASS = \"class\";\n+    private static final String ENTITY_NAME = \"entityName\";\n+    private static final String KEY = \"key\";\n+    private static final String VALUE = \"value\";\n+    private static final String ENTITY_ID = \"id\";\n+    private static final String MERGE_WITH_EXISTING_METADATA = \"merge\";\n+    private static final String PARENT_FOLDER_ID = \"parentFolderId\";\n+\n+    private final MetadataEntry metadataEntry = MetadataCreatorUtils.getMetadataEntry();\n+    private final MetadataVO metadataVO = MetadataCreatorUtils.getMetadataVO();\n+    private final EntityVO entityVO = MetadataCreatorUtils.getEntityVO();\n+    private final AclClass aclClass = AclClass.DATA_STORAGE;\n+    private final List<EntityVO> entityVOList = Collections.singletonList(entityVO);\n+\n+    @Autowired\n+    private MetadataApiService mockMetadataApiService;\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItemKey(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_KEY_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItemKey(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItemKey() {\n+        performUnauthorizedRequest(post(UPDATE_KEY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeys() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItemKeys(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_KEYS_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItemKeys(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItemKeys() {\n+        performUnauthorizedRequest(post(UPDATE_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItem() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).updateMetadataItem(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(post(UPDATE_ITEM_URL).content(content));\n+\n+        verify(mockMetadataApiService).updateMetadataItem(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateMetadataItem() {\n+        performUnauthorizedRequest(post(UPDATE_ITEM_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataItems() throws Exception {\n+        final List<MetadataEntry> metadataEntries = Collections.singletonList(metadataEntry);\n+        final String content = getObjectMapper().writeValueAsString(entityVOList);\n+        doReturn(metadataEntries).when(mockMetadataApiService).listMetadataItems(entityVOList);\n+\n+        final MvcResult mvcResult = performRequest(post(LOAD_ITEMS_URL).content(content));\n+\n+        verify(mockMetadataApiService).listMetadataItems(entityVOList);\n+        assertResponse(mvcResult, metadataEntries, MetadataCreatorUtils.METADATA_ENTRY_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadMetadataItems() {\n+        performUnauthorizedRequest(post(LOAD_ITEMS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetMetadataKeys() {\n+        doReturn(TEST_STRING_SET).when(mockMetadataApiService).getMetadataKeys(aclClass);\n+\n+        final MvcResult mvcResult = performRequest(get(KEYS_URL).params(multiValueMapOf(ENTITY_CLASS, aclClass)));\n+\n+        verify(mockMetadataApiService).getMetadataKeys(aclClass);\n+        assertResponse(mvcResult, TEST_STRING_SET, CommonCreatorConstants.STRING_SET_INSTANCE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetMetadataKeys() {\n+        performUnauthorizedRequest(get(KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindMetadataEntityIdByName() {\n+        doReturn(metadataEntry).when(mockMetadataApiService).findMetadataEntityIdByName(TEST_STRING, aclClass);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_ENTITY_URL)\n+                .params(multiValueMapOf(ENTITY_NAME, TEST_STRING,\n+                                        ENTITY_CLASS, aclClass)));\n+\n+        verify(mockMetadataApiService).findMetadataEntityIdByName(TEST_STRING, aclClass);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindMetadataEntityIdByName() {\n+        performUnauthorizedRequest(get(FIND_ENTITY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItem() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(entityVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItem(entityVO);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_URL).content(content));\n+\n+        verify(mockMetadataApiService).deleteMetadataItem(entityVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItem() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKey() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(entityVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItemKey(entityVO, TEST_STRING);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_KEY_URL).content(content)\n+                .params(multiValueMapOf(KEY, TEST_STRING)));\n+\n+        verify(mockMetadataApiService).deleteMetadataItemKey(entityVO, TEST_STRING);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItemKey() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_KEY_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKeys() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(metadataVO);\n+        doReturn(metadataEntry).when(mockMetadataApiService).deleteMetadataItemKeys(metadataVO);\n+\n+        final MvcResult mvcResult = performRequest(delete(DELETE_ITEM_KEYS_URL).content(content));\n+\n+        verify(mockMetadataApiService).deleteMetadataItemKeys(metadataVO);\n+        assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteMetadataItemKeys() {\n+        performUnauthorizedRequest(delete(DELETE_ITEM_KEYS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFile() throws Exception {\n+        doReturn(metadataEntry).when(mockMetadataApiService)\n+                .uploadMetadataFromFile(eq(new EntityVO(ID, aclClass)), any(), eq(true));\n+\n+        final MvcResult mvcResult = performRequest(post(UPLOAD_URL).content(MULTIPART_CONTENT)\n+                        .params(multiValueMapOf(ENTITY_ID, ID,\n+                                                ACL_CLASS, aclClass,\n+                                                MERGE_WITH_EXISTING_METADATA, true)),\n+                                                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+        final ArgumentCaptor<MultipartFile> multipartFileCaptor = ArgumentCaptor.forClass(MultipartFile.class);\n+\n+        verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class),\n+                multipartFileCaptor.capture(), eq(true));\n+        final MultipartFile returnedFile = multipartFileCaptor.getValue();\n+        assertThat(returnedFile.getContentType()).isEqualTo(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        assertThat(returnedFile.getOriginalFilename()).isEqualTo(\"file.txt\");", "originalCommit": "46dba2d0b246d3944e294cb18a06be7caa27d803", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\nindex 20af7d65e..8239502da 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n\n@@ -26,13 +26,10 @@ import com.epam.pipeline.test.creator.CommonCreatorConstants;\n import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Test;\n-import org.mockito.ArgumentCaptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n-import org.springframework.http.MediaType;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.test.web.servlet.MvcResult;\n-import org.springframework.web.multipart.MultipartFile;\n \n import java.util.Collections;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNTU1Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r530915557", "bodyText": "It looks like all all these asserts can be replaced by a single call which accepts MultipartFile rather than captor.\nassertRequestFile(captor.getValue(), fileName, fileContentInBytesOrString);\nContent type will probably be the same in all the similar cases. Therefore we don't have to pass it as a parameter and just use a default value MediaType.APPLICATION_OCTET_STREAM_VALUE.\nAlso I believe there was a similar case in this or other test class in the pull request. So it would be nice to use the same  assertRequestFile in both cases.", "author": "tcibinan", "createdAt": "2020-11-26T10:10:41Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java", "diffHunk": "@@ -255,8 +255,9 @@ public void shouldUploadMetadataFromFile() throws Exception {\n         verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class),\n                 multipartFileCaptor.capture(), eq(true));\n         final MultipartFile returnedFile = multipartFileCaptor.getValue();\n-        assertThat(returnedFile.getContentType()).isEqualTo(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n         assertThat(returnedFile.getOriginalFilename()).isEqualTo(\"file.txt\");\n+        assertThat(returnedFile.getBytes()).isEqualTo(\"file.txt\".getBytes());\n+        assertRequestFile(multipartFileCaptor, \"file\", MediaType.APPLICATION_OCTET_STREAM_VALUE);", "originalCommit": "8b1721ba52bab72b7178ff9e6f44e5e5fe2f6c47", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\nindex 9227afe3f..8239502da 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n\n@@ -249,15 +245,9 @@ public class MetadataControllerTest extends AbstractControllerTest {\n                         .params(multiValueMapOf(ENTITY_ID, ID,\n                                                 ACL_CLASS, aclClass,\n                                                 MERGE_WITH_EXISTING_METADATA, true)),\n-                                                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n-        final ArgumentCaptor<MultipartFile> multipartFileCaptor = ArgumentCaptor.forClass(MultipartFile.class);\n-\n-        verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class),\n-                multipartFileCaptor.capture(), eq(true));\n-        final MultipartFile returnedFile = multipartFileCaptor.getValue();\n-        assertThat(returnedFile.getOriginalFilename()).isEqualTo(\"file.txt\");\n-        assertThat(returnedFile.getBytes()).isEqualTo(\"file.txt\".getBytes());\n-        assertRequestFile(multipartFileCaptor, \"file\", MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class), any(), eq(true));\n         assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1NjIxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r532456210", "bodyText": "Probably there is no need for generic type here.", "author": "tcibinan", "createdAt": "2020-11-30T09:32:59Z", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -129,12 +129,13 @@ public void assertContent(final MvcResult mvcResult, final byte[] fileContent) {\n         assertThat(mvcResult.getResponse().getContentAsByteArray()).isEqualTo(fileContent);\n     }\n \n-    public void assertRequestFile(final ArgumentCaptor<MultipartFile> captor,\n-                                  final String expectedFileName,\n-                                  final String expectedContent) {\n-        final MultipartFile capturedValue = captor.getValue();\n-        assertThat(capturedValue.getName()).isEqualTo(expectedFileName);\n-        assertThat(capturedValue.getContentType()).isEqualTo(expectedContent);\n+    @SneakyThrows\n+    public <T> void assertRequestFile(final MultipartFile capturedValue,", "originalCommit": "09b567aca81ca5c938d96c9f9a0b0a2598612397", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\nindex 4ec27ad3e..1654a50dd 100644\n--- a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n\n@@ -129,15 +127,6 @@ public abstract class AbstractControllerTest {\n         assertThat(mvcResult.getResponse().getContentAsByteArray()).isEqualTo(fileContent);\n     }\n \n-    @SneakyThrows\n-    public <T> void assertRequestFile(final MultipartFile capturedValue,\n-                                      final String expectedFileName,\n-                                      final byte[] expectedContentAsBytes) {\n-        assertThat(capturedValue.getOriginalFilename()).isEqualTo(expectedFileName);\n-        assertThat(capturedValue.getContentType()).isEqualTo(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n-        assertThat(capturedValue.getBytes()).isEqualTo(expectedContentAsBytes);\n-    }\n-\n     @SneakyThrows\n     public void performUnauthorizedRequest(final MockHttpServletRequestBuilder requestBuilder) {\n         mockMvc.perform(requestBuilder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1ODE4Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r532458186", "bodyText": "I'm wondering if we can extract MULTIPART_CONTENT_FILE_CONTENT. MULTIPART_CONTENT_FILE_NAME and MULTIPART_CONTENT_FILE_CONTENT fields. Additionally let's replace the content of the file from file.txt to some more distinct string like content of file.txt. Once changed please check that no tests depending on MULTIPART_CONTENT are failing.", "author": "tcibinan", "createdAt": "2020-11-30T09:36:13Z", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -59,12 +59,12 @@\n             \"multipart/form-data; boundary=--------------------------boundary\";\n     protected static final String MULTIPART_CONTENT =\n             \"----------------------------boundary\\r\\n\" +\n-                    \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n-                    \"Content-Type:  application/octet-stream\\r\\n\" +\n-                    \"\\r\\n\" +\n-                    \"file.txt\" +\n-                    \"\\r\\n\" +\n-                    \"----------------------------boundary\";\n+            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n+            \"Content-Type:  application/octet-stream\\r\\n\" +\n+            \"\\r\\n\" +\n+            \"file.txt\" +", "originalCommit": "09b567aca81ca5c938d96c9f9a0b0a2598612397", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e9f4dceed1565218d372f364217f042509a93b3a", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\nindex 4ec27ad3e..559a7decf 100644\n--- a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n\n@@ -59,12 +59,12 @@ public abstract class AbstractControllerTest {\n             \"multipart/form-data; boundary=--------------------------boundary\";\n     protected static final String MULTIPART_CONTENT =\n             \"----------------------------boundary\\r\\n\" +\n-            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n-            \"Content-Type:  application/octet-stream\\r\\n\" +\n-            \"\\r\\n\" +\n-            \"file.txt\" +\n-            \"\\r\\n\" +\n-            \"----------------------------boundary\";\n+                    \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n+                    \"Content-Type:  application/octet-stream\\r\\n\" +\n+                    \"\\r\\n\" +\n+                    \"file.txt\" +\n+                    \"\\r\\n\" +\n+                    \"----------------------------boundary\";\n \n     private MockMvc mockMvc;\n     private ObjectMapper deserializationMapper;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAxODAxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r534018010", "bodyText": "It doesn't seem like a good idea to hardcode a file name and its content. Let's pass these parameters explicitly.", "author": "tcibinan", "createdAt": "2020-12-02T09:29:52Z", "path": "api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java", "diffHunk": "@@ -252,7 +252,7 @@ public void shouldUploadMetadataFromFile() throws Exception {\n \n         verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class),\n                 multipartFileCaptor.capture(), eq(true));\n-        assertRequestFile(multipartFileCaptor.getValue(), \"file.txt\", \"file.txt\".getBytes());\n+        assertRequestFile(multipartFileCaptor.getValue());", "originalCommit": "73e21b5fce52c0e8ab1692bac8404b8fe0bcc48d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\nindex 149739201..8239502da 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/metadata/MetadataControllerTest.java\n\n@@ -247,12 +245,9 @@ public class MetadataControllerTest extends AbstractControllerTest {\n                         .params(multiValueMapOf(ENTITY_ID, ID,\n                                                 ACL_CLASS, aclClass,\n                                                 MERGE_WITH_EXISTING_METADATA, true)),\n-                                                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n-        final ArgumentCaptor<MultipartFile> multipartFileCaptor = ArgumentCaptor.forClass(MultipartFile.class);\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n \n-        verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class),\n-                multipartFileCaptor.capture(), eq(true));\n-        assertRequestFile(multipartFileCaptor.getValue());\n+        verify(mockMetadataApiService).uploadMetadataFromFile(any(EntityVO.class), any(), eq(true));\n         assertResponse(mvcResult, metadataEntry, MetadataCreatorUtils.METADATA_ENTRY_TYPE);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3NzM4NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r535077384", "bodyText": "Please replace the string with MULTIPART_CONTENT_FILE_CONTENT.", "author": "tcibinan", "createdAt": "2020-12-03T10:35:44Z", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -55,11 +55,13 @@\n     protected static final String CERTIFICATE_NAME = \"ca.crt\";\n     private static final String CONTENT_DISPOSITION_HEADER = \"Content-Disposition\";\n     protected static final String EXPECTED_CONTENT_TYPE = \"application/json;charset=UTF-8\";\n+    protected static final String MULTIPART_CONTENT_FILE_NAME = \"file.txt\";\n+    protected static final byte[] MULTIPART_CONTENT_FILE_CONTENT = \"content of file.txt\".getBytes();\n     protected static final String MULTIPART_CONTENT_TYPE =\n             \"multipart/form-data; boundary=--------------------------boundary\";\n     protected static final String MULTIPART_CONTENT =\n             \"----------------------------boundary\\r\\n\" +\n-            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\" file.txt \\\"\\r\\n\" +\n+            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\" \" + MULTIPART_CONTENT_FILE_NAME + \" \\\"\\r\\n\" +\n             \"Content-Type:  application/octet-stream\\r\\n\" +\n             \"\\r\\n\" +\n             \"content of file.txt\" +", "originalCommit": "deb6111c6a52b5e75a4fe4edafd2311236474b7c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\nindex 3cc488d9b..1654a50dd 100644\n--- a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n\n@@ -55,16 +53,14 @@ public abstract class AbstractControllerTest {\n     protected static final String CERTIFICATE_NAME = \"ca.crt\";\n     private static final String CONTENT_DISPOSITION_HEADER = \"Content-Disposition\";\n     protected static final String EXPECTED_CONTENT_TYPE = \"application/json;charset=UTF-8\";\n-    protected static final String MULTIPART_CONTENT_FILE_NAME = \"file.txt\";\n-    protected static final byte[] MULTIPART_CONTENT_FILE_CONTENT = \"content of file.txt\".getBytes();\n     protected static final String MULTIPART_CONTENT_TYPE =\n             \"multipart/form-data; boundary=--------------------------boundary\";\n     protected static final String MULTIPART_CONTENT =\n             \"----------------------------boundary\\r\\n\" +\n-            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\" \" + MULTIPART_CONTENT_FILE_NAME + \" \\\"\\r\\n\" +\n+            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n             \"Content-Type:  application/octet-stream\\r\\n\" +\n             \"\\r\\n\" +\n-            \"content of file.txt\" +\n+            \"file.txt\" +\n             \"\\r\\n\" +\n             \"----------------------------boundary\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxODEwOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1583#discussion_r535918109", "bodyText": "Could you please suppress checkstyle warning for this line using SuppressWarnings annotation?", "author": "tcibinan", "createdAt": "2020-12-04T08:24:55Z", "path": "api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java", "diffHunk": "@@ -17,21 +17,28 @@\n package com.epam.pipeline.entity.metadata;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import lombok.AllArgsConstructor;\n import lombok.Getter;\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n @NoArgsConstructor\n-@AllArgsConstructor\n public class MetadataField {\n     private String name;\n     @JsonIgnore\n     private String dbName;\n     private boolean predefined = false;\n \n+    //todo: Replace with @AllArgsConstructor once lombok version 1.16.20 is used.\n+    // The current version causes JsonMappingException.\n+    // See more https://stackoverflow.com/questions/40546508/jsoncreator-could-not-find-creator-property-with-name-even-with-ignoreunknown", "originalCommit": "e0e07655d44e770934f1863194df5947bae73009", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java b/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java\nindex be97efde1..4dece0a9e 100644\n--- a/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java\n+++ b/api/src/main/java/com/epam/pipeline/entity/metadata/MetadataField.java\n\n@@ -18,27 +18,26 @@ package com.epam.pipeline.entity.metadata;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Getter;\n-import lombok.NoArgsConstructor;\n import lombok.Setter;\n \n @Getter\n @Setter\n-@NoArgsConstructor\n public class MetadataField {\n     private String name;\n     @JsonIgnore\n     private String dbName;\n     private boolean predefined = false;\n \n-    //todo: Replace with @AllArgsConstructor once lombok version 1.16.20 is used.\n-    // The current version causes JsonMappingException.\n-    // See more https://stackoverflow.com/questions/40546508/jsoncreator-could-not-find-creator-property-with-name-even-with-ignoreunknown\n     public MetadataField(String name, String dbName, boolean predefined) {\n         this.name = name;\n         this.dbName = dbName;\n         this.predefined = predefined;\n     }\n \n+    public MetadataField() {\n+\n+    }\n+\n     @Override public boolean equals(Object o) {\n         if (this == o) {\n             return true;\n"}}, {"oid": "ab7f209eee77911b6e076b09d4e3ed9373afeb25", "url": "https://github.com/epam/cloud-pipeline/commit/ab7f209eee77911b6e076b09d4e3ed9373afeb25", "message": "Issue #1405: Implemented tests for Metadata package controller layer\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:48:55Z", "type": "commit"}, {"oid": "0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "url": "https://github.com/epam/cloud-pipeline/commit/0dd4204ce259e5b01f580d1cd1240b63a82e6a7c", "message": "Issue #1405: Improvements and fixes in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:02Z", "type": "commit"}, {"oid": "4ceb57c6e4b25b5fa5d63bb23e74063e37f7392e", "url": "https://github.com/epam/cloud-pipeline/commit/4ceb57c6e4b25b5fa5d63bb23e74063e37f7392e", "message": "Issue #1405: Changed assertions in one method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:02Z", "type": "commit"}, {"oid": "e9f4dceed1565218d372f364217f042509a93b3a", "url": "https://github.com/epam/cloud-pipeline/commit/e9f4dceed1565218d372f364217f042509a93b3a", "message": "Issue #1405: Assertion method added\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:02Z", "type": "commit"}, {"oid": "e10287caa2a3ca33f359ad577005a32160dedc58", "url": "https://github.com/epam/cloud-pipeline/commit/e10287caa2a3ca33f359ad577005a32160dedc58", "message": "Issue #1405: Changes in method assertRequestFile()\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:03Z", "type": "commit"}, {"oid": "f29de395d135e58c7a1c0e796440cad5c6c577f5", "url": "https://github.com/epam/cloud-pipeline/commit/f29de395d135e58c7a1c0e796440cad5c6c577f5", "message": "Issue #1405: Refactoring in assertion methods\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:03Z", "type": "commit"}, {"oid": "12861685c3aefa6daa3174e29a70e8c71c1af73f", "url": "https://github.com/epam/cloud-pipeline/commit/12861685c3aefa6daa3174e29a70e8c71c1af73f", "message": "Issue #1405: Refactoring in the assertRequestFile method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:03Z", "type": "commit"}, {"oid": "f10374d87ce99f5fc6166bae17184accaa1afba3", "url": "https://github.com/epam/cloud-pipeline/commit/f10374d87ce99f5fc6166bae17184accaa1afba3", "message": "Issue #1405: file content and file name variables added to the assertRequestFile method\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:04Z", "type": "commit"}, {"oid": "ad5c1a8c9699316f324f373e8db0ffdef6783cae", "url": "https://github.com/epam/cloud-pipeline/commit/ad5c1a8c9699316f324f373e8db0ffdef6783cae", "message": "Issue #1404: Minor fix in the Multipart Content\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:04Z", "type": "commit"}, {"oid": "1b8972b53340e05d4dd124f54da390f1b0493d53", "url": "https://github.com/epam/cloud-pipeline/commit/1b8972b53340e05d4dd124f54da390f1b0493d53", "message": "Issue #1405: Warning about too long comment line was suppressed\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:49:05Z", "type": "commit"}, {"oid": "3b1e445e93baba6eda68109b495ad1fac40c6672", "url": "https://github.com/epam/cloud-pipeline/commit/3b1e445e93baba6eda68109b495ad1fac40c6672", "message": "Issue #1405: Branch rebased and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:57:04Z", "type": "commit"}, {"oid": "3b1e445e93baba6eda68109b495ad1fac40c6672", "url": "https://github.com/epam/cloud-pipeline/commit/3b1e445e93baba6eda68109b495ad1fac40c6672", "message": "Issue #1405: Branch rebased and merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-07T15:57:04Z", "type": "forcePushed"}]}