{"pr_number": 1612, "pr_title": "Issue #1404: Implemented tests for Metadata package acl layer", "pr_createdAt": "2020-11-27T13:33:05Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1612", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYwNDE2OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532604169", "bodyText": "I wonder how it ended up there :)\nIt is a good practice to review your pull request changes right before submitting it on GitHub. You can do this either in your IDE or in GitHub GUI during pull request creation.", "author": "tcibinan", "createdAt": "2020-11-30T13:41:38Z", "path": "api/src/main/java/com/epam/pipeline/acl/metadata/MetadataEntityApiService.java", "diffHunk": "@@ -129,7 +132,7 @@ public MetadataEntity deleteMetadataItemKey(Long id, String key) {\n     public Collection<MetadataClassDescription> getMetadataFields(Long folderId) {\n         return metadataEntityManager.getMetadataFields(folderId);\n     }\n-\n+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/acl/metadata/MetadataEntityApiService.java b/api/src/main/java/com/epam/pipeline/acl/metadata/MetadataEntityApiService.java\nindex 27e6f4de2..061a50c92 100644\n--- a/api/src/main/java/com/epam/pipeline/acl/metadata/MetadataEntityApiService.java\n+++ b/api/src/main/java/com/epam/pipeline/acl/metadata/MetadataEntityApiService.java\n\n@@ -132,7 +132,7 @@ public class MetadataEntityApiService {\n     public Collection<MetadataClassDescription> getMetadataFields(Long folderId) {\n         return metadataEntityManager.getMetadataFields(folderId);\n     }\n-///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n     @PreAuthorize(\"hasRole('ADMIN') OR (hasRole('ENTITIES_MANAGER') AND hasPermission(#parentId, \"\n             + \"'com.epam.pipeline.entity.pipeline.Folder', 'WRITE'))\")\n     public List<MetadataEntity> uploadMetadataFromFile(Long parentId, MultipartFile file) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzNzMyMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532637322", "bodyText": "Looks like we can use mockLoadEntity here as well.", "author": "tcibinan", "createdAt": "2020-11-30T14:29:39Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.MetadataVO;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class MetadataApiServiceTest extends AbstractAclTest {\n+\n+    private static final AclClass ENTITY_ACL_CLASS = AclClass.DATA_STORAGE;\n+\n+    private final MetadataVO metadataVO = MetadataCreatorUtils.getMetadataVO(ENTITY_ACL_CLASS);\n+    private final AbstractSecuredEntity entity = DatastorageCreatorUtils.getS3bucketDataStorage(ID, SIMPLE_USER);\n+    private final AbstractSecuredEntity anotherEntity =\n+            DatastorageCreatorUtils.getS3bucketDataStorage(ID_2, ANOTHER_SIMPLE_USER);\n+    private final EntityVO entityVO = SecurityCreatorUtils.getEntityVO(ID, ENTITY_ACL_CLASS);\n+    private final EntityVO anotherEntityVO = SecurityCreatorUtils.getEntityVO(ID_2, ENTITY_ACL_CLASS);\n+    private final MetadataEntry metadataEntry = MetadataCreatorUtils.getMetadataEntry(entityVO);\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final MetadataEntryWithIssuesCount entry = MetadataCreatorUtils.getMetadataEntryWithIssuesCount(entityVO);\n+    private final MetadataEntryWithIssuesCount anotherEntry =\n+            MetadataCreatorUtils.getMetadataEntryWithIssuesCount(anotherEntityVO);\n+\n+    private final List<MetadataEntry> metadataEntries = Collections.singletonList(metadataEntry);\n+    private final List<EntityVO> entityVOList = Collections.singletonList(entityVO);\n+\n+    @Autowired\n+    private MetadataApiService metadataApiService;\n+\n+    @Autowired\n+    private MetadataManager mockMetadataManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+\n+        assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\nindex 2a1eb700c..e6bc6d683 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n\n@@ -22,13 +22,16 @@ import com.epam.pipeline.entity.AbstractSecuredEntity;\n import com.epam.pipeline.entity.metadata.MetadataEntry;\n import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n import com.epam.pipeline.manager.EntityManager;\n import com.epam.pipeline.manager.metadata.MetadataManager;\n+import com.epam.pipeline.manager.user.UserManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mock.web.MockMultipartFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYzODkzMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532638932", "bodyText": "I suppose that these two test scenarios can be called shouldUpdateMetadataItemKeyForOwner and shouldDenyUpdateMetadataItemKeyForNonOwner. It clarifies what kind of permissions are tested.\nCould you please also check other test methods for the same issue in the test class below.", "author": "tcibinan", "createdAt": "2020-11-30T14:31:53Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.MetadataVO;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class MetadataApiServiceTest extends AbstractAclTest {\n+\n+    private static final AclClass ENTITY_ACL_CLASS = AclClass.DATA_STORAGE;\n+\n+    private final MetadataVO metadataVO = MetadataCreatorUtils.getMetadataVO(ENTITY_ACL_CLASS);\n+    private final AbstractSecuredEntity entity = DatastorageCreatorUtils.getS3bucketDataStorage(ID, SIMPLE_USER);\n+    private final AbstractSecuredEntity anotherEntity =\n+            DatastorageCreatorUtils.getS3bucketDataStorage(ID_2, ANOTHER_SIMPLE_USER);\n+    private final EntityVO entityVO = SecurityCreatorUtils.getEntityVO(ID, ENTITY_ACL_CLASS);\n+    private final EntityVO anotherEntityVO = SecurityCreatorUtils.getEntityVO(ID_2, ENTITY_ACL_CLASS);\n+    private final MetadataEntry metadataEntry = MetadataCreatorUtils.getMetadataEntry(entityVO);\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final MetadataEntryWithIssuesCount entry = MetadataCreatorUtils.getMetadataEntryWithIssuesCount(entityVO);\n+    private final MetadataEntryWithIssuesCount anotherEntry =\n+            MetadataCreatorUtils.getMetadataEntryWithIssuesCount(anotherEntityVO);\n+\n+    private final List<MetadataEntry> metadataEntries = Collections.singletonList(metadataEntry);\n+    private final List<EntityVO> entityVOList = Collections.singletonList(entityVO);\n+\n+    @Autowired\n+    private MetadataApiService metadataApiService;\n+\n+    @Autowired\n+    private MetadataManager mockMetadataManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+\n+        assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.updateMetadataItemKey(metadataVO));\n+    }", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\nindex 2a1eb700c..e6bc6d683 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n\n@@ -22,13 +22,16 @@ import com.epam.pipeline.entity.AbstractSecuredEntity;\n import com.epam.pipeline.entity.metadata.MetadataEntry;\n import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n import com.epam.pipeline.manager.EntityManager;\n import com.epam.pipeline.manager.metadata.MetadataManager;\n+import com.epam.pipeline.manager.user.UserManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mock.web.MockMultipartFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NzAzOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532647039", "bodyText": "I'm wondering if we can remove existing mockAuthUser method and rename mockAuthentication to mockAuthUser. I don't think that there is a need to have both methods.", "author": "tcibinan", "createdAt": "2020-11-30T14:42:50Z", "path": "api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java", "diffHunk": "@@ -148,7 +149,16 @@ public Sid toSid() {\n         return list;\n     }\n \n+    protected void mockAuthentication(final String user) {", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\nindex f5d9423b4..cfd73c02b 100644\n--- a/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/acl/AbstractAclTest.java\n\n@@ -149,16 +149,12 @@ public abstract class AbstractAclTest {\n         return list;\n     }\n \n-    protected void mockAuthentication(final String user) {\n+    protected void mockAuthUser(final String user) {\n         mockSecurityContext();\n-        mockAuthUser(user);\n+        doReturn(user).when(mockAuthManager).getAuthorizedUser();\n     }\n \n     protected void mockSecurityContext() {\n         doReturn(SecurityContextHolder.getContext().getAuthentication()).when(mockAuthManager).getAuthentication();\n     }\n-\n-    protected void mockAuthUser(final String user) {\n-        doReturn(user).when(mockAuthManager).getAuthorizedUser();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2NDUxMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532664513", "bodyText": "What do you think about moving mockAuthentication call to the test class setup method? User name can be retrieved from the security context. It will also require to change some of the method @WithMockUser annotations.", "author": "tcibinan", "createdAt": "2020-11-30T15:05:55Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -0,0 +1,453 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.MetadataVO;\n+import com.epam.pipeline.entity.AbstractSecuredEntity;\n+import com.epam.pipeline.entity.metadata.MetadataEntry;\n+import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID_2;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_SET;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+public class MetadataApiServiceTest extends AbstractAclTest {\n+\n+    private static final AclClass ENTITY_ACL_CLASS = AclClass.DATA_STORAGE;\n+\n+    private final MetadataVO metadataVO = MetadataCreatorUtils.getMetadataVO(ENTITY_ACL_CLASS);\n+    private final AbstractSecuredEntity entity = DatastorageCreatorUtils.getS3bucketDataStorage(ID, SIMPLE_USER);\n+    private final AbstractSecuredEntity anotherEntity =\n+            DatastorageCreatorUtils.getS3bucketDataStorage(ID_2, ANOTHER_SIMPLE_USER);\n+    private final EntityVO entityVO = SecurityCreatorUtils.getEntityVO(ID, ENTITY_ACL_CLASS);\n+    private final EntityVO anotherEntityVO = SecurityCreatorUtils.getEntityVO(ID_2, ENTITY_ACL_CLASS);\n+    private final MetadataEntry metadataEntry = MetadataCreatorUtils.getMetadataEntry(entityVO);\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final MetadataEntryWithIssuesCount entry = MetadataCreatorUtils.getMetadataEntryWithIssuesCount(entityVO);\n+    private final MetadataEntryWithIssuesCount anotherEntry =\n+            MetadataCreatorUtils.getMetadataEntryWithIssuesCount(anotherEntityVO);\n+\n+    private final List<MetadataEntry> metadataEntries = Collections.singletonList(metadataEntry);\n+    private final List<EntityVO> entityVOList = Collections.singletonList(entityVO);\n+\n+    @Autowired\n+    private MetadataApiService metadataApiService;\n+\n+    @Autowired\n+    private MetadataManager mockMetadataManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+\n+        assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.updateMetadataItemKey(metadataVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeysForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKeys(metadataVO);\n+\n+        assertThat(metadataApiService.updateMetadataItemKeys(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemKeysWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKeys(metadataVO);\n+        mockLoadEntity(entity, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.updateMetadataItemKeys(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemKeysWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKeys(metadataVO);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.updateMetadataItemKeys(metadataVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItem(metadataVO);\n+\n+        assertThat(metadataApiService.updateMetadataItem(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateMetadataItemWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItem(metadataVO);\n+        mockLoadEntity(entity, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.updateMetadataItem(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItem(metadataVO);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.updateMetadataItem(metadataVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldListMetadataItemsForAdmin() {\n+        doReturn(metadataEntries).when(mockMetadataManager).listMetadataItems(entityVOList);\n+\n+        assertThat(metadataApiService.listMetadataItems(entityVOList)).isEqualTo(metadataEntries);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldListMetadataItemsWhenPermissionIsGranted() {\n+        initAclEntity(entity, AclPermission.READ);\n+        doReturn(metadataEntries).when(mockMetadataManager).listMetadataItems(entityVOList);\n+        mockLoadEntity(entity, ID);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.listMetadataItems(entityVOList)).isEqualTo(metadataEntries);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyListMetadataItemsWhenPermissionIsNotGranted() {\n+        initAclEntity(entity);\n+        doReturn(metadataEntries).when(mockMetadataManager).listMetadataItems(entityVOList);\n+        mockLoadEntity(entity, ID);\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.listMetadataItems(entityVOList));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItemKey(entityVO, TEST_STRING);\n+\n+        assertThat(metadataApiService.deleteMetadataItemKey(entityVO, TEST_STRING)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKeyWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItemKey(entityVO, TEST_STRING);\n+        mockLoadEntity(entity, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.deleteMetadataItemKey(entityVO, TEST_STRING)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataItemKeyWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItemKey(entityVO, TEST_STRING);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                metadataApiService.deleteMetadataItemKey(entityVO, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataItemForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItem(entityVO);\n+\n+        assertThat(metadataApiService.deleteMetadataItem(entityVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItem(entityVO);\n+        mockLoadEntity(entity, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.deleteMetadataItem(entityVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataItemWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItem(entityVO);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.deleteMetadataItem(entityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataItemKeysForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItemKeys(metadataVO);\n+\n+        assertThat(metadataApiService.deleteMetadataItemKeys(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteMetadataItemKeysWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItemKeys(metadataVO);\n+        mockLoadEntity(entity, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.deleteMetadataItemKeys(metadataVO)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataItemKeysWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).deleteMetadataItemKeys(metadataVO);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> metadataApiService.deleteMetadataItemKeys(metadataVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldFindMetadataEntityIdByNameForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).findMetadataEntryByNameOrId(TEST_STRING, ENTITY_ACL_CLASS);\n+\n+        assertThat(metadataApiService.findMetadataEntityIdByName(TEST_STRING, ENTITY_ACL_CLASS))\n+                .isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindMetadataEntityIdByNameWhenPermissionIsGranted() {\n+        initAclEntity(entity, AclPermission.READ);\n+        doReturn(metadataEntry).when(mockMetadataManager).findMetadataEntryByNameOrId(TEST_STRING, ENTITY_ACL_CLASS);\n+        mockLoadEntity(entity, ID);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.findMetadataEntityIdByName(TEST_STRING, ENTITY_ACL_CLASS))\n+                .isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyFindMetadataEntityIdByNameWhenPermissionIsNotGranted() {\n+        initAclEntity(entity);\n+        doReturn(metadataEntry).when(mockMetadataManager).findMetadataEntryByNameOrId(TEST_STRING, ENTITY_ACL_CLASS);\n+        mockSecurityContext();\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                metadataApiService.findMetadataEntityIdByName(TEST_STRING, ENTITY_ACL_CLASS));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUploadMetadataFromFileForAdmin() {\n+        doReturn(metadataEntry).when(mockMetadataManager).uploadMetadataFromFile(entityVO, file, true);\n+\n+        assertThat(metadataApiService.uploadMetadataFromFile(entityVO, file, true)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadMetadataFromFileWhenPermissionIsGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).uploadMetadataFromFile(entityVO, file, true);\n+        mockLoadEntity(entity, ID);\n+        mockAuthUser(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.uploadMetadataFromFile(entityVO, file, true)).isEqualTo(metadataEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUploadMetadataFromFileWhenPermissionIsNotGranted() {\n+        doReturn(metadataEntry).when(mockMetadataManager).uploadMetadataFromFile(entityVO, file, true);\n+        mockLoadEntity(entity, ID);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                metadataApiService.uploadMetadataFromFile(entityVO, file, true));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadEntitiesMetadataFromFolderForAdmin() {\n+        doReturn(mutableListOf(entry)).when(mockMetadataManager).loadEntitiesMetadataFromFolder(ID);\n+\n+        assertThat(metadataApiService.loadEntitiesMetadataFromFolder(ID)).hasSize(1).contains(entry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntitiesMetadataFromFolderWhenPermissionIsGranted() {\n+        initAclEntity(entity, AclPermission.READ);\n+        doReturn(mutableListOf(entry)).when(mockMetadataManager).loadEntitiesMetadataFromFolder(ID);\n+        mockLoadEntity(entity, ID);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.loadEntitiesMetadataFromFolder(ID)).hasSize(1).contains(entry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadEntitiesMetadataFromFolderWhichPermissionIsGranted() {\n+        initAclEntity(entity, AclPermission.READ);\n+        initAclEntity(anotherEntity);\n+        doReturn(mutableListOf(entry, anotherEntry)).when(mockMetadataManager).loadEntitiesMetadataFromFolder(ID);\n+        mockLoadEntity(entity, ID);\n+        mockLoadEntity(anotherEntity, ID_2);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.loadEntitiesMetadataFromFolder(ID)).hasSize(1).contains(entry);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadEntitiesMetadataFromFolderWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherEntity);\n+        doReturn(mutableListOf(anotherEntry)).when(mockMetadataManager).loadEntitiesMetadataFromFolder(ID);\n+        mockLoadEntity(anotherEntity, ID_2);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.loadEntitiesMetadataFromFolder(ID)).isEmpty();\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldSearchMetadataByClassAndKeyValueForAdmin() {\n+        doReturn(mutableListOf(entityVO)).when(mockMetadataManager)\n+                .searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING);\n+\n+        assertThat(metadataApiService.searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING))\n+                .hasSize(1).contains(entityVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSearchMetadataByClassAndKeyValueWhenPermissionIsGranted() {\n+        initAclEntity(entity, AclPermission.READ);\n+        doReturn(mutableListOf(entityVO)).when(mockMetadataManager)\n+                .searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING);\n+        mockLoadEntity(entity, ID);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING))\n+                .hasSize(1).contains(entityVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSearchMetadataByClassAndKeyValueWhichPermissionIsGranted() {\n+        initAclEntity(entity, AclPermission.READ);\n+        initAclEntity(anotherEntity);\n+        doReturn(mutableListOf(entityVO, anotherEntityVO)).when(mockMetadataManager)\n+                .searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING);\n+        mockLoadEntity(entity, ID);\n+        mockLoadEntity(anotherEntity, ID_2);\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(metadataApiService.searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING))\n+                .hasSize(1).contains(entityVO);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenySearchMetadataByClassAndKeyValueWhenPermissionIsNotGranted() {\n+        initAclEntity(anotherEntity);\n+        doReturn(mutableListOf(anotherEntityVO)).when(mockMetadataManager)\n+                .searchMetadataByClassAndKeyValue(ENTITY_ACL_CLASS, TEST_STRING, TEST_STRING);\n+        mockLoadEntity(anotherEntity, ID_2);\n+        mockAuthentication(SIMPLE_USER);", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5Nzc2Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r533397762", "bodyText": "Discussed and refused.", "author": "tcibinan", "createdAt": "2020-12-01T13:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY2NDUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\nindex 2a1eb700c..e6bc6d683 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n\n@@ -22,13 +22,16 @@ import com.epam.pipeline.entity.AbstractSecuredEntity;\n import com.epam.pipeline.entity.metadata.MetadataEntry;\n import com.epam.pipeline.entity.metadata.MetadataEntryWithIssuesCount;\n import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.entity.user.PipelineUser;\n import com.epam.pipeline.manager.EntityManager;\n import com.epam.pipeline.manager.metadata.MetadataManager;\n+import com.epam.pipeline.manager.user.UserManager;\n import com.epam.pipeline.security.acl.AclPermission;\n import com.epam.pipeline.test.acl.AbstractAclTest;\n import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n import com.epam.pipeline.test.creator.security.SecurityCreatorUtils;\n+import com.epam.pipeline.test.creator.user.UserCreatorUtils;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mock.web.MockMultipartFile;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MDA2MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532670060", "bodyText": "It would be nice to extract FireCloudClass.PARTICIPANT to the class field.", "author": "tcibinan", "createdAt": "2020-11-30T15:13:22Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,587 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataDownloadManager;\n+import com.epam.pipeline.manager.metadata.MetadataEntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataUploadManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+public class MetadataEntityApiServiceTest extends AbstractAclTest {\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n+    private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+    private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n+    private final MetadataField metadataField = MetadataCreatorUtils.getMetadataField();\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n+    private final List<MetadataEntity> metadataEntities = Collections.singletonList(metadataEntity);\n+    private final List<MetadataField> metadataFields = Collections.singletonList(metadataField);\n+    private final List<MetadataClassDescription> descriptions =\n+            Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+\n+    @Autowired\n+    private MetadataEntityApiService entityApiService;\n+\n+    @Autowired\n+    private MetadataEntityManager mockMetadataEntityManager;\n+\n+    @Autowired\n+    private MetadataUploadManager mockMetadataUploadManager;\n+\n+    @Autowired\n+    private MetadataDownloadManager mockMetadataDownloadManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThat(entityApiService.createMetadataClass(TEST_STRING)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.createMetadataClass(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThat(entityApiService.deleteMetadataClass(ID)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataClass(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\nindex cc6fa5299..2fbda8711 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n\n@@ -58,9 +58,10 @@ import static org.mockito.Mockito.verify;\n \n public class MetadataEntityApiServiceTest extends AbstractAclTest {\n \n+    private static final FireCloudClass PARTICIPANT = FireCloudClass.PARTICIPANT;\n     private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n     private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n-    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, ANOTHER_SIMPLE_USER);\n     private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n     private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n     private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3MzAxMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532673010", "bodyText": "Let's add test for MetadataEntityApiService.loadAllMetadataClasses even if there is no acl on the method yet. Let's test that it works for a regular user.", "author": "tcibinan", "createdAt": "2020-11-30T15:17:13Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,587 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataDownloadManager;\n+import com.epam.pipeline.manager.metadata.MetadataEntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataUploadManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+public class MetadataEntityApiServiceTest extends AbstractAclTest {\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n+    private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+    private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n+    private final MetadataField metadataField = MetadataCreatorUtils.getMetadataField();\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n+    private final List<MetadataEntity> metadataEntities = Collections.singletonList(metadataEntity);\n+    private final List<MetadataField> metadataFields = Collections.singletonList(metadataField);\n+    private final List<MetadataClassDescription> descriptions =\n+            Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+\n+    @Autowired\n+    private MetadataEntityApiService entityApiService;\n+\n+    @Autowired\n+    private MetadataEntityManager mockMetadataEntityManager;\n+\n+    @Autowired\n+    private MetadataUploadManager mockMetadataUploadManager;\n+\n+    @Autowired\n+    private MetadataDownloadManager mockMetadataDownloadManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThat(entityApiService.createMetadataClass(TEST_STRING)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.createMetadataClass(TEST_STRING));\n+    }\n+", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\nindex cc6fa5299..2fbda8711 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n\n@@ -58,9 +58,10 @@ import static org.mockito.Mockito.verify;\n \n public class MetadataEntityApiServiceTest extends AbstractAclTest {\n \n+    private static final FireCloudClass PARTICIPANT = FireCloudClass.PARTICIPANT;\n     private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n     private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n-    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, ANOTHER_SIMPLE_USER);\n     private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n     private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n     private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3NzY2MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532677660", "bodyText": "I imagine that READ permission would be enough in this case.", "author": "tcibinan", "createdAt": "2020-11-30T15:23:19Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,587 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataDownloadManager;\n+import com.epam.pipeline.manager.metadata.MetadataEntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataUploadManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+public class MetadataEntityApiServiceTest extends AbstractAclTest {\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n+    private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+    private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n+    private final MetadataField metadataField = MetadataCreatorUtils.getMetadataField();\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n+    private final List<MetadataEntity> metadataEntities = Collections.singletonList(metadataEntity);\n+    private final List<MetadataField> metadataFields = Collections.singletonList(metadataField);\n+    private final List<MetadataClassDescription> descriptions =\n+            Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+\n+    @Autowired\n+    private MetadataEntityApiService entityApiService;\n+\n+    @Autowired\n+    private MetadataEntityManager mockMetadataEntityManager;\n+\n+    @Autowired\n+    private MetadataUploadManager mockMetadataUploadManager;\n+\n+    @Autowired\n+    private MetadataDownloadManager mockMetadataDownloadManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThat(entityApiService.createMetadataClass(TEST_STRING)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.createMetadataClass(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThat(entityApiService.deleteMetadataClass(ID)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataClass(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        assertThat(entityApiService.updateExternalClassName(ID, FireCloudClass.PARTICIPANT)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                entityApiService.updateExternalClassName(ID, FireCloudClass.PARTICIPANT));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataEntity(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.createMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldCreateMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.createMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataEntity(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).load(ID);\n+\n+        assertThat(entityApiService.loadMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.loadMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.loadMetadataEntity(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+\n+        assertThat(entityApiService.deleteMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldDeleteMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataEntity(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadMetadataEntityByClassForAdmin() {\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.loadMetadataEntityByClass(ID, TEST_STRING)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadMetadataEntityByClassWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.loadMetadataEntityByClass(ID, TEST_STRING)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadMetadataEntityByClassWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.loadMetadataEntityByClass(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataItemKey(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataItemKey(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataItemKey(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.deleteMetadataItemKey(ID, TEST_STRING)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDeleteMetadataItemKeyWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataItemKey(ID, TEST_STRING)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataItemKeyWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataItemKey(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataEntitiesForAdmin() {\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+\n+        assertThat(entityApiService.deleteMetadataEntities(TEST_LONG_SET)).isEqualTo(TEST_LONG_SET);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldDeleteMetadataEntitiesWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataEntities(TEST_LONG_SET)).isEqualTo(TEST_LONG_SET);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataEntitiesWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataEntities(TEST_LONG_SET));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldFilterMetadataForAdmin() {\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThat(entityApiService.filterMetadata(metadataFilter)).isEqualTo(pagedResult);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldFilterMetadataWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\nindex cc6fa5299..2fbda8711 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n\n@@ -58,9 +58,10 @@ import static org.mockito.Mockito.verify;\n \n public class MetadataEntityApiServiceTest extends AbstractAclTest {\n \n+    private static final FireCloudClass PARTICIPANT = FireCloudClass.PARTICIPANT;\n     private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n     private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n-    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, ANOTHER_SIMPLE_USER);\n     private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n     private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n     private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY3OTk3Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532679976", "bodyText": "Seems like WRITE permission is required for the testing method to work. I'm not pretty sure how it passes right now but it should be investigated.", "author": "tcibinan", "createdAt": "2020-11-30T15:26:12Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,587 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataDownloadManager;\n+import com.epam.pipeline.manager.metadata.MetadataEntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataUploadManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+public class MetadataEntityApiServiceTest extends AbstractAclTest {\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n+    private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+    private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n+    private final MetadataField metadataField = MetadataCreatorUtils.getMetadataField();\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n+    private final List<MetadataEntity> metadataEntities = Collections.singletonList(metadataEntity);\n+    private final List<MetadataField> metadataFields = Collections.singletonList(metadataField);\n+    private final List<MetadataClassDescription> descriptions =\n+            Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+\n+    @Autowired\n+    private MetadataEntityApiService entityApiService;\n+\n+    @Autowired\n+    private MetadataEntityManager mockMetadataEntityManager;\n+\n+    @Autowired\n+    private MetadataUploadManager mockMetadataUploadManager;\n+\n+    @Autowired\n+    private MetadataDownloadManager mockMetadataDownloadManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThat(entityApiService.createMetadataClass(TEST_STRING)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.createMetadataClass(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThat(entityApiService.deleteMetadataClass(ID)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataClass(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        assertThat(entityApiService.updateExternalClassName(ID, FireCloudClass.PARTICIPANT)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                entityApiService.updateExternalClassName(ID, FireCloudClass.PARTICIPANT));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataEntity(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.createMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldCreateMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.createMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataEntity(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).load(ID);\n+\n+        assertThat(entityApiService.loadMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.loadMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.loadMetadataEntity(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+\n+        assertThat(entityApiService.deleteMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldDeleteMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataEntity(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadMetadataEntityByClassForAdmin() {\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.loadMetadataEntityByClass(ID, TEST_STRING)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadMetadataEntityByClassWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.loadMetadataEntityByClass(ID, TEST_STRING)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadMetadataEntityByClassWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.loadMetadataEntityByClass(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataItemKey(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataItemKey(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataItemKey(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.deleteMetadataItemKey(ID, TEST_STRING)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDeleteMetadataItemKeyWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataItemKey(ID, TEST_STRING)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataItemKeyWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataItemKey(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataEntitiesForAdmin() {\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+\n+        assertThat(entityApiService.deleteMetadataEntities(TEST_LONG_SET)).isEqualTo(TEST_LONG_SET);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldDeleteMetadataEntitiesWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataEntities(TEST_LONG_SET)).isEqualTo(TEST_LONG_SET);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataEntitiesWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataEntities(TEST_LONG_SET));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldFilterMetadataForAdmin() {\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThat(entityApiService.filterMetadata(metadataFilter)).isEqualTo(pagedResult);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldFilterMetadataWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThat(entityApiService.filterMetadata(metadataFilter)).isEqualTo(pagedResult);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyFilterMetadataWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.filterMetadata(metadataFilter));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetMetadataKeysForAdmin() {\n+        doReturn(metadataFields).when(mockMetadataEntityManager).getMetadataKeys(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.getMetadataKeys(ID, TEST_STRING)).isEqualTo(metadataFields);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetMetadataKeysWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataFields).when(mockMetadataEntityManager).getMetadataKeys(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.getMetadataKeys(ID, TEST_STRING)).isEqualTo(metadataFields);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetMetadataKeysWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataFields).when(mockMetadataEntityManager).getMetadataKeys(ID, TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.getMetadataKeys(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetMetadataFieldsForAdmin() {\n+        doReturn(descriptions).when(mockMetadataEntityManager).getMetadataFields(ID);\n+\n+        assertThat(entityApiService.getMetadataFields(ID)).isEqualTo(descriptions);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetMetadataFieldsWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(descriptions).when(mockMetadataEntityManager).getMetadataFields(ID);\n+\n+        assertThat(entityApiService.getMetadataFields(ID)).isEqualTo(descriptions);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetMetadataFieldsWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(descriptions).when(mockMetadataEntityManager).getMetadataFields(ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.getMetadataFields(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUploadMetadataFromFileForAdmin() {\n+        doReturn(metadataEntities).when(mockMetadataUploadManager).uploadFromFile(ID, file);\n+\n+        assertThat(entityApiService.uploadMetadataFromFile(ID, file)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldUploadMetadataFromFileWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\nindex cc6fa5299..2fbda8711 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n\n@@ -58,9 +58,10 @@ import static org.mockito.Mockito.verify;\n \n public class MetadataEntityApiServiceTest extends AbstractAclTest {\n \n+    private static final FireCloudClass PARTICIPANT = FireCloudClass.PARTICIPANT;\n     private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n     private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n-    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, ANOTHER_SIMPLE_USER);\n     private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n     private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n     private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4MjA5MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532682090", "bodyText": "Wrong permissions again. How does this test pass?", "author": "tcibinan", "createdAt": "2020-11-30T15:28:48Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java", "diffHunk": "@@ -0,0 +1,587 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.metadata;\n+\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.metadata.MetadataEntityVO;\n+import com.epam.pipeline.entity.metadata.FireCloudClass;\n+import com.epam.pipeline.entity.metadata.MetadataClass;\n+import com.epam.pipeline.entity.metadata.MetadataClassDescription;\n+import com.epam.pipeline.entity.metadata.MetadataEntity;\n+import com.epam.pipeline.entity.metadata.MetadataField;\n+import com.epam.pipeline.entity.metadata.MetadataFilter;\n+import com.epam.pipeline.entity.pipeline.Folder;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.EntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataDownloadManager;\n+import com.epam.pipeline.manager.metadata.MetadataEntityManager;\n+import com.epam.pipeline.manager.metadata.MetadataUploadManager;\n+import com.epam.pipeline.security.acl.AclPermission;\n+import com.epam.pipeline.test.acl.AbstractAclTest;\n+import com.epam.pipeline.test.creator.folder.FolderCreatorUtils;\n+import com.epam.pipeline.test.creator.metadata.MetadataCreatorUtils;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_LONG_SET;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING_MAP;\n+import static com.epam.pipeline.util.CustomAssertions.assertThrows;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+\n+public class MetadataEntityApiServiceTest extends AbstractAclTest {\n+\n+    private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n+    private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n+    private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n+    private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n+    private final MetadataField metadataField = MetadataCreatorUtils.getMetadataField();\n+    private final MultipartFile file = new MockMultipartFile(TEST_STRING, TEST_STRING.getBytes());\n+    private final InputStream inputStream = new ByteArrayInputStream(TEST_STRING.getBytes());\n+\n+    private final List<MetadataEntity> metadataEntities = Collections.singletonList(metadataEntity);\n+    private final List<MetadataField> metadataFields = Collections.singletonList(metadataField);\n+    private final List<MetadataClassDescription> descriptions =\n+            Collections.singletonList(MetadataCreatorUtils.getMetadataClassDescription());\n+\n+    @Autowired\n+    private MetadataEntityApiService entityApiService;\n+\n+    @Autowired\n+    private MetadataEntityManager mockMetadataEntityManager;\n+\n+    @Autowired\n+    private MetadataUploadManager mockMetadataUploadManager;\n+\n+    @Autowired\n+    private MetadataDownloadManager mockMetadataDownloadManager;\n+\n+    @Autowired\n+    private EntityManager mockEntityManager;\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThat(entityApiService.createMetadataClass(TEST_STRING)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).createMetadataClass(TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.createMetadataClass(TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThat(entityApiService.deleteMetadataClass(ID)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).deleteMetadataClass(ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataClass(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataClassForAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        assertThat(entityApiService.updateExternalClassName(ID, FireCloudClass.PARTICIPANT)).isEqualTo(metadataClass);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataClassForNotAdmin() {\n+        doReturn(metadataClass).when(mockMetadataEntityManager).updateExternalClassName(ID, FireCloudClass.PARTICIPANT);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                entityApiService.updateExternalClassName(ID, FireCloudClass.PARTICIPANT));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataEntity(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldCreateMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.createMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldCreateMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThat(entityApiService.createMetadataEntity(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyCreateMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataEntity(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataEntity(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).load(ID);\n+\n+        assertThat(entityApiService.loadMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.loadMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.loadMetadataEntity(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataEntityForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+\n+        assertThat(entityApiService.deleteMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldDeleteMetadataEntityWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataEntity(ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataEntityWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataEntity(ID);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataEntity(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadMetadataEntityByClassForAdmin() {\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.loadMetadataEntityByClass(ID, TEST_STRING)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadMetadataEntityByClassWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.loadMetadataEntityByClass(ID, TEST_STRING)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadMetadataEntityByClassWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntities).when(mockMetadataEntityManager)\n+                .loadMetadataEntityByClassNameAndFolderId(ID, TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.loadMetadataEntityByClass(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataItemKey(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThat(entityApiService.updateMetadataItemKey(metadataEntityVO)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).updateMetadataItemKey(metadataEntityVO);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.updateMetadataItemKey(metadataEntityVO));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataItemKeyForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.deleteMetadataItemKey(ID, TEST_STRING)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDeleteMetadataItemKeyWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataItemKey(ID, TEST_STRING)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataItemKeyWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).deleteMetadataItemKey(ID, TEST_STRING);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataItemKey(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataEntitiesForAdmin() {\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+\n+        assertThat(entityApiService.deleteMetadataEntities(TEST_LONG_SET)).isEqualTo(TEST_LONG_SET);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldDeleteMetadataEntitiesWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+        mockLoadEntities();\n+        mockAuthentication(SIMPLE_USER);\n+\n+        assertThat(entityApiService.deleteMetadataEntities(TEST_LONG_SET)).isEqualTo(TEST_LONG_SET);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyDeleteMetadataEntitiesWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(TEST_LONG_SET).when(mockMetadataEntityManager).deleteMetadataEntities(TEST_LONG_SET);\n+        mockLoadEntities();\n+        mockSecurityContext();\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.deleteMetadataEntities(TEST_LONG_SET));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldFilterMetadataForAdmin() {\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThat(entityApiService.filterMetadata(metadataFilter)).isEqualTo(pagedResult);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldFilterMetadataWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.WRITE);\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThat(entityApiService.filterMetadata(metadataFilter)).isEqualTo(pagedResult);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyFilterMetadataWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(pagedResult).when(mockMetadataEntityManager).filterMetadata(metadataFilter);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.filterMetadata(metadataFilter));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetMetadataKeysForAdmin() {\n+        doReturn(metadataFields).when(mockMetadataEntityManager).getMetadataKeys(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.getMetadataKeys(ID, TEST_STRING)).isEqualTo(metadataFields);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetMetadataKeysWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataFields).when(mockMetadataEntityManager).getMetadataKeys(ID, TEST_STRING);\n+\n+        assertThat(entityApiService.getMetadataKeys(ID, TEST_STRING)).isEqualTo(metadataFields);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetMetadataKeysWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataFields).when(mockMetadataEntityManager).getMetadataKeys(ID, TEST_STRING);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.getMetadataKeys(ID, TEST_STRING));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldGetMetadataFieldsForAdmin() {\n+        doReturn(descriptions).when(mockMetadataEntityManager).getMetadataFields(ID);\n+\n+        assertThat(entityApiService.getMetadataFields(ID)).isEqualTo(descriptions);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldGetMetadataFieldsWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(descriptions).when(mockMetadataEntityManager).getMetadataFields(ID);\n+\n+        assertThat(entityApiService.getMetadataFields(ID)).isEqualTo(descriptions);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyGetMetadataFieldsWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(descriptions).when(mockMetadataEntityManager).getMetadataFields(ID);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.getMetadataFields(ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldUploadMetadataFromFileForAdmin() {\n+        doReturn(metadataEntities).when(mockMetadataUploadManager).uploadFromFile(ID, file);\n+\n+        assertThat(entityApiService.uploadMetadataFromFile(ID, file)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ENTITIES_MANAGER_ROLE)\n+    public void shouldUploadMetadataFromFileWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataEntities).when(mockMetadataUploadManager).uploadFromFile(ID, file);\n+\n+        assertThat(entityApiService.uploadMetadataFromFile(ID, file)).isEqualTo(metadataEntities);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyUploadMetadataFromFileWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntities).when(mockMetadataUploadManager).uploadFromFile(ID, file);\n+\n+        assertThrows(AccessDeniedException.class, () -> entityApiService.uploadMetadataFromFile(ID, file));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldLoadByExternalIdForAdmin() {\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+\n+        assertThat(entityApiService.loadByExternalId(TEST_STRING, TEST_STRING, ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldLoadByExternalIdWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+\n+        assertThat(entityApiService.loadByExternalId(TEST_STRING, TEST_STRING, ID)).isEqualTo(metadataEntity);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDenyLoadByExternalIdWhenPermissionIsNotGranted() {\n+        initAclEntity(folder);\n+        doReturn(metadataEntity).when(mockMetadataEntityManager).loadByExternalId(TEST_STRING, TEST_STRING, ID);\n+\n+        assertThrows(AccessDeniedException.class, () ->\n+                entityApiService.loadByExternalId(TEST_STRING, TEST_STRING, ID));\n+    }\n+\n+    @Test\n+    @WithMockUser(roles = ADMIN_ROLE)\n+    public void shouldDeleteMetadataFromProjectForAdmin() {\n+        doNothing().when(mockMetadataEntityManager).deleteMetadataEntitiesInProject(ID, TEST_STRING);\n+\n+        entityApiService.deleteMetadataFromProject(ID, TEST_STRING);\n+\n+        verify(mockMetadataEntityManager).deleteMetadataEntitiesInProject(ID, TEST_STRING);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldDeleteMetadataFromProjectWhenPermissionIsGranted() {\n+        initAclEntity(folder, AclPermission.READ);", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\nindex cc6fa5299..2fbda8711 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataEntityApiServiceTest.java\n\n@@ -58,9 +58,10 @@ import static org.mockito.Mockito.verify;\n \n public class MetadataEntityApiServiceTest extends AbstractAclTest {\n \n+    private static final FireCloudClass PARTICIPANT = FireCloudClass.PARTICIPANT;\n     private final MetadataClass metadataClass = MetadataCreatorUtils.getMetadataClass();\n     private final MetadataEntityVO metadataEntityVO = MetadataCreatorUtils.getMetadataEntityVO(ID);\n-    private final Folder folder = FolderCreatorUtils.getFolder(ID, SIMPLE_USER);\n+    private final Folder folder = FolderCreatorUtils.getFolder(ID, ANOTHER_SIMPLE_USER);\n     private final MetadataEntity metadataEntity = MetadataCreatorUtils.getMetadataEntity(ID, folder);\n     private final PagedResult<List<MetadataEntity>> pagedResult = MetadataCreatorUtils.getPagedResult();\n     private final MetadataFilter metadataFilter = MetadataCreatorUtils.getMetadataFilter(ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY4NTAxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r532685014", "bodyText": "This test class should be removed. But before we can do that we should either ensure that all tests in the class are covered by some tests in other classes or move them from the deleting class to some other classes.", "author": "tcibinan", "createdAt": "2020-11-30T15:32:31Z", "path": "api/src/test/java/com/epam/pipeline/manager/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -16,6 +16,7 @@\n ", "originalCommit": "245aa44ff1dcd4ead7a52e74d749c446a0dcd793", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3679473b4e51a95a2069500719e1ca80fb93d09", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/manager/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/manager/metadata/MetadataApiServiceTest.java\ndeleted file mode 100644\nindex 7687ec284..000000000\n--- a/api/src/test/java/com/epam/pipeline/manager/metadata/MetadataApiServiceTest.java\n+++ /dev/null\n\n@@ -1,231 +0,0 @@\n-/*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.epam.pipeline.manager.metadata;\n-\n-import com.epam.pipeline.acl.metadata.MetadataApiService;\n-import com.epam.pipeline.app.TestApplicationWithAclSecurity;\n-import com.epam.pipeline.controller.vo.EntityVO;\n-import com.epam.pipeline.controller.vo.MetadataVO;\n-import com.epam.pipeline.dao.util.AclTestDao;\n-import com.epam.pipeline.entity.metadata.MetadataEntry;\n-import com.epam.pipeline.entity.security.acl.AclClass;\n-import com.epam.pipeline.entity.user.PipelineUser;\n-import com.epam.pipeline.manager.AbstractManagerTest;\n-import com.epam.pipeline.manager.security.GrantPermissionManager;\n-import com.epam.pipeline.manager.user.UserManager;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockito.MockitoAnnotations;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.AccessDeniedException;\n-import org.springframework.security.test.context.support.WithMockUser;\n-import org.springframework.test.annotation.DirtiesContext;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.util.ReflectionTestUtils;\n-import org.springframework.transaction.annotation.Propagation;\n-import org.springframework.transaction.annotation.Transactional;\n-\n-import java.util.Collections;\n-import java.util.List;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.mockito.Mockito.doReturn;\n-\n-@DirtiesContext\n-@ContextConfiguration(classes = TestApplicationWithAclSecurity.class)\n-public class MetadataApiServiceTest extends AbstractManagerTest {\n-    private static final String TEST_USER1 = \"USER1\";\n-    private static final long TEST_USER1_ID = 1L;\n-    private static final String TEST_USER2 = \"USER2\";\n-    private static final String ADMIN_ROLE = \"ADMIN\";\n-\n-    @Autowired\n-    private MetadataApiService metadataApiService;\n-    @Autowired\n-    private AclTestDao aclTestDao;\n-    @Autowired\n-    private GrantPermissionManager grantPermissionManager;\n-\n-    @Mock\n-    private MetadataManager metadataManager;\n-    @Mock\n-    private UserManager userManager;\n-\n-    private final EntityVO pipelineUserEntity = new EntityVO(TEST_USER1_ID, AclClass.PIPELINE_USER);\n-    private final EntityVO roleEntity = new EntityVO(TEST_USER1_ID, AclClass.ROLE);\n-    private MetadataVO pipelineUserMetadataVO;\n-    private MetadataVO roleMetadataVO;\n-    private MetadataEntry pipelineUserMetadata;\n-    private MetadataEntry roleMetadata;\n-\n-    @Before\n-    public void setUp() {\n-        MockitoAnnotations.initMocks(this);\n-        ReflectionTestUtils.setField(metadataApiService, \"metadataManager\", metadataManager);\n-        ReflectionTestUtils.setField(grantPermissionManager, \"userManager\", userManager);\n-\n-        final AclTestDao.AclSid testUserSid1 = new AclTestDao.AclSid(true, TEST_USER1);\n-        aclTestDao.createAclSid(testUserSid1);\n-        final AclTestDao.AclSid testUserSid2 = new AclTestDao.AclSid(true, TEST_USER2);\n-        aclTestDao.createAclSid(testUserSid2);\n-        final PipelineUser pipelineUser1 = new PipelineUser();\n-        pipelineUser1.setId(TEST_USER1_ID);\n-        pipelineUser1.setUserName(TEST_USER1);\n-\n-        pipelineUserMetadata = new MetadataEntry();\n-        pipelineUserMetadata.setEntity(pipelineUserEntity);\n-        roleMetadata = new MetadataEntry();\n-        roleMetadata.setEntity(roleEntity);\n-        pipelineUserMetadataVO = new MetadataVO();\n-        pipelineUserMetadataVO.setEntity(pipelineUserEntity);\n-        roleMetadataVO = new MetadataVO();\n-        roleMetadataVO.setEntity(roleEntity);\n-\n-        doReturn(pipelineUser1).when(userManager).loadUserById(TEST_USER1_ID);\n-        doReturn(pipelineUser1).when(userManager).loadUserByNameOrId(TEST_USER1);\n-        doReturn(Collections.singletonList(pipelineUserMetadata)).when(metadataManager)\n-                .listMetadataItems(Collections.singletonList(pipelineUserEntity));\n-        doReturn(Collections.singletonList(roleMetadata)).when(metadataManager)\n-                .listMetadataItems(Collections.singletonList(roleEntity));\n-        doReturn(pipelineUserMetadata).when(metadataManager)\n-                .findMetadataEntryByNameOrId(TEST_USER1, AclClass.PIPELINE_USER);\n-        doReturn(roleMetadata).when(metadataManager).findMetadataEntryByNameOrId(TEST_USER1, AclClass.ROLE);\n-        doReturn(pipelineUserMetadata).when(metadataManager).updateMetadataItemKey(pipelineUserMetadataVO);\n-        doReturn(roleMetadata).when(metadataManager).updateMetadataItemKey(roleMetadataVO);\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1, roles = ADMIN_ROLE)\n-    public void adminShouldLoadMetadataForPipelineUser() {\n-        final List<MetadataEntry> metadataEntries = metadataApiService\n-                .listMetadataItems(Collections.singletonList(pipelineUserEntity));\n-        assertEquals(Collections.singletonList(pipelineUserMetadata), metadataEntries);\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1)\n-    public void ownerShouldLoadMetadataForPipelineUser() {\n-        final List<MetadataEntry> metadataEntries = metadataApiService\n-                .listMetadataItems(Collections.singletonList(pipelineUserEntity));\n-        assertEquals(Collections.singletonList(pipelineUserMetadata), metadataEntries);\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER2)\n-    public void nonAdminAndNotOwnerShouldNotLoadMetadataForPipelineUser() {\n-        metadataApiService.listMetadataItems(Collections.singletonList(pipelineUserEntity));\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1, roles = ADMIN_ROLE)\n-    public void adminShouldLoadMetadataForRole() {\n-        final List<MetadataEntry> metadataEntries = metadataApiService\n-                .listMetadataItems(Collections.singletonList(roleEntity));\n-        assertEquals(Collections.singletonList(roleMetadata), metadataEntries);\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1)\n-    public void nonAdminShouldNotLoadMetadataForRole() {\n-        metadataApiService.listMetadataItems(Collections.singletonList(roleEntity));\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1, roles = ADMIN_ROLE)\n-    public void adminShouldFindMetadataForPipelineUser() {\n-        final MetadataEntry metadataEntityIdByName = metadataApiService\n-                .findMetadataEntityIdByName(TEST_USER1, AclClass.PIPELINE_USER);\n-        assertEquals(pipelineUserEntity, metadataEntityIdByName.getEntity());\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1)\n-    public void ownerShouldFindMetadataForPipelineUser() {\n-        final MetadataEntry metadataEntityIdByName = metadataApiService\n-                .findMetadataEntityIdByName(TEST_USER1, AclClass.PIPELINE_USER);\n-        assertEquals(pipelineUserEntity, metadataEntityIdByName.getEntity());\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER2)\n-    public void nonAdminAndNotOwnerShouldNotFindMetadataForRole() {\n-        metadataApiService.findMetadataEntityIdByName(TEST_USER1, AclClass.PIPELINE_USER);\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1, roles = ADMIN_ROLE)\n-    public void adminShouldFindMetadataForRole() {\n-        final MetadataEntry metadataEntityIdByName = metadataApiService\n-                .findMetadataEntityIdByName(TEST_USER1, AclClass.ROLE);\n-        assertEquals(roleEntity, metadataEntityIdByName.getEntity());\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1)\n-    public void nonAdminShouldNotFindMetadataForRole() {\n-        metadataApiService.findMetadataEntityIdByName(TEST_USER1, AclClass.ROLE);\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1, roles = ADMIN_ROLE)\n-    public void adminShouldUpdateMetadataForPipelineUser() {\n-        final MetadataEntry metadataEntry = metadataApiService.updateMetadataItemKey(pipelineUserMetadataVO);\n-        assertEquals(pipelineUserEntity, metadataEntry.getEntity());\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1)\n-    public void ownerShouldUpdateMetadataForPipelineUser() {\n-        final MetadataEntry metadataEntry = metadataApiService.updateMetadataItemKey(pipelineUserMetadataVO);\n-        assertEquals(pipelineUserEntity, metadataEntry.getEntity());\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER2)\n-    public void nonAdminAndNotOwnerShouldNotUpdateMetadataForPipelineUser() {\n-        metadataApiService.updateMetadataItemKey(pipelineUserMetadataVO);\n-    }\n-\n-    @Test\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1, roles = ADMIN_ROLE)\n-    public void adminShouldUpdateMetadataForRole() {\n-        final MetadataEntry metadataEntry = metadataApiService.updateMetadataItemKey(roleMetadataVO);\n-        assertEquals(roleEntity, metadataEntry.getEntity());\n-    }\n-\n-    @Test(expected = AccessDeniedException.class)\n-    @Transactional(propagation = Propagation.REQUIRES_NEW)\n-    @WithMockUser(username = TEST_USER1)\n-    public void nonAdminShouldNotUpdateMetadataForRole() {\n-        metadataApiService.updateMetadataItemKey(roleMetadataVO);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0MDU5Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r534040596", "bodyText": "This method should have suffix ForAdmin, don't you think?", "author": "tcibinan", "createdAt": "2020-12-02T10:02:16Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -85,19 +111,37 @@ public void shouldUpdateMetadataItemKeyForAdmin() {\n \n     @Test\n     @WithMockUser\n-    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+    public void shouldUpdateMetadataItemKeyForOwner() {\n         doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n-        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);\n+        mockLoadEntity(entityWithOwner, ID);\n         mockAuthUser(SIMPLE_USER);\n \n         assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n     }\n \n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataItemKeyForPipelineUser() {\n+        doReturn(pipelineUserEntry).when(mockMetadataManager).updateMetadataItemKey(pipelineUserVO);\n+        mockAuthAndLoadUser();\n+\n+        assertThat(metadataApiService.updateMetadataItemKey(pipelineUserVO)).isEqualTo(pipelineUserEntry);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = SIMPLE_USER, roles = ADMIN_ROLE)\n+    public void shouldUpdateMetadataItemKeyForRole() {", "originalCommit": "6b275054fbddf97f411d4501445c42bfe9891287", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83660033d66225094e2ee69883b2f730ab57f03c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\nindex e6bc6d683..2a1eb700c 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n\n@@ -111,37 +85,19 @@ public class MetadataApiServiceTest extends AbstractAclTest {\n \n     @Test\n     @WithMockUser\n-    public void shouldUpdateMetadataItemKeyForOwner() {\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n         doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n-        mockLoadEntity(entityWithOwner, ID);\n+        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);\n         mockAuthUser(SIMPLE_USER);\n \n         assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n     }\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldUpdateMetadataItemKeyForPipelineUser() {\n-        doReturn(pipelineUserEntry).when(mockMetadataManager).updateMetadataItemKey(pipelineUserVO);\n-        mockAuthAndLoadUser();\n-\n-        assertThat(metadataApiService.updateMetadataItemKey(pipelineUserVO)).isEqualTo(pipelineUserEntry);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER, roles = ADMIN_ROLE)\n-    public void shouldUpdateMetadataItemKeyForRole() {\n-        doReturn(roleEntry).when(mockMetadataManager).updateMetadataItemKey(roleVO);\n-        mockAuthUser(SIMPLE_USER);\n-\n-        assertThat(metadataApiService.updateMetadataItemKey(roleVO)).isEqualTo(roleEntry);\n-    }\n-\n     @Test\n     @WithMockUser\n-    public void shouldDenyUpdateMetadataItemKeyForNonOwner() {\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n         doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n-        mockLoadEntity(entityWithOwner, ID);\n+        mockLoadEntity(entity, ID);\n \n         assertThrows(AccessDeniedException.class, () -> metadataApiService.updateMetadataItemKey(metadataVO));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0MjIyMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r534042222", "bodyText": "Let's add the similar test to check if an admin is able to perform the operation for pipeline user metadata.", "author": "tcibinan", "createdAt": "2020-12-02T10:04:40Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -85,19 +111,37 @@ public void shouldUpdateMetadataItemKeyForAdmin() {\n \n     @Test\n     @WithMockUser\n-    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n+    public void shouldUpdateMetadataItemKeyForOwner() {\n         doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n-        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);\n+        mockLoadEntity(entityWithOwner, ID);\n         mockAuthUser(SIMPLE_USER);\n \n         assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n     }\n \n+    @Test\n+    @WithMockUser(username = SIMPLE_USER)\n+    public void shouldUpdateMetadataItemKeyForPipelineUser() {", "originalCommit": "6b275054fbddf97f411d4501445c42bfe9891287", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83660033d66225094e2ee69883b2f730ab57f03c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\nindex e6bc6d683..2a1eb700c 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n\n@@ -111,37 +85,19 @@ public class MetadataApiServiceTest extends AbstractAclTest {\n \n     @Test\n     @WithMockUser\n-    public void shouldUpdateMetadataItemKeyForOwner() {\n+    public void shouldUpdateMetadataItemKeyWhenPermissionIsGranted() {\n         doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n-        mockLoadEntity(entityWithOwner, ID);\n+        doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, ID);\n         mockAuthUser(SIMPLE_USER);\n \n         assertThat(metadataApiService.updateMetadataItemKey(metadataVO)).isEqualTo(metadataEntry);\n     }\n \n-    @Test\n-    @WithMockUser(username = SIMPLE_USER)\n-    public void shouldUpdateMetadataItemKeyForPipelineUser() {\n-        doReturn(pipelineUserEntry).when(mockMetadataManager).updateMetadataItemKey(pipelineUserVO);\n-        mockAuthAndLoadUser();\n-\n-        assertThat(metadataApiService.updateMetadataItemKey(pipelineUserVO)).isEqualTo(pipelineUserEntry);\n-    }\n-\n-    @Test\n-    @WithMockUser(username = SIMPLE_USER, roles = ADMIN_ROLE)\n-    public void shouldUpdateMetadataItemKeyForRole() {\n-        doReturn(roleEntry).when(mockMetadataManager).updateMetadataItemKey(roleVO);\n-        mockAuthUser(SIMPLE_USER);\n-\n-        assertThat(metadataApiService.updateMetadataItemKey(roleVO)).isEqualTo(roleEntry);\n-    }\n-\n     @Test\n     @WithMockUser\n-    public void shouldDenyUpdateMetadataItemKeyForNonOwner() {\n+    public void shouldDenyUpdateMetadataItemKeyWhenPermissionIsNotGranted() {\n         doReturn(metadataEntry).when(mockMetadataManager).updateMetadataItemKey(metadataVO);\n-        mockLoadEntity(entityWithOwner, ID);\n+        mockLoadEntity(entity, ID);\n \n         assertThrows(AccessDeniedException.class, () -> metadataApiService.updateMetadataItemKey(metadataVO));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0NDEyNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1612#discussion_r534044125", "bodyText": "Seems like mockUser would be quite enough for this helper method.", "author": "tcibinan", "createdAt": "2020-12-02T10:07:41Z", "path": "api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java", "diffHunk": "@@ -450,4 +693,9 @@ public void shouldDenyGetMetadataKeysWithoutUserRole() {\n     private void mockLoadEntity(final AbstractSecuredEntity entity, final Long id) {\n         doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, id);\n     }\n+\n+    private void mockAuthAndLoadUser() {", "originalCommit": "6b275054fbddf97f411d4501445c42bfe9891287", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "83660033d66225094e2ee69883b2f730ab57f03c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\nindex e6bc6d683..2a1eb700c 100644\n--- a/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n+++ b/api/src/test/java/com/epam/pipeline/acl/metadata/MetadataApiServiceTest.java\n\n@@ -693,9 +450,4 @@ public class MetadataApiServiceTest extends AbstractAclTest {\n     private void mockLoadEntity(final AbstractSecuredEntity entity, final Long id) {\n         doReturn(entity).when(mockEntityManager).load(ENTITY_ACL_CLASS, id);\n     }\n-\n-    private void mockAuthAndLoadUser() {\n-        mockAuthUser(SIMPLE_USER);\n-        doReturn(pipelineUser).when(mockUserManager).loadUserById(ID);\n-    }\n }\n"}}, {"oid": "83660033d66225094e2ee69883b2f730ab57f03c", "url": "https://github.com/epam/cloud-pipeline/commit/83660033d66225094e2ee69883b2f730ab57f03c", "message": "Issue #1404: Implemented tests for Metadata package acl layer\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T11:04:39Z", "type": "commit"}, {"oid": "f3679473b4e51a95a2069500719e1ca80fb93d09", "url": "https://github.com/epam/cloud-pipeline/commit/f3679473b4e51a95a2069500719e1ca80fb93d09", "message": "Issue #1404: Improvements and refactoring in accordance with comments\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T11:04:47Z", "type": "commit"}, {"oid": "010b6913872e0446f42fe3fa80e7a0e957687709", "url": "https://github.com/epam/cloud-pipeline/commit/010b6913872e0446f42fe3fa80e7a0e957687709", "message": "Issue #1404: Tests added, names of some tests have been changed\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T11:04:48Z", "type": "commit"}, {"oid": "f1464714265c450b97c10cfe89ba055a37d6eb96", "url": "https://github.com/epam/cloud-pipeline/commit/f1464714265c450b97c10cfe89ba055a37d6eb96", "message": "Issue #1404: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T11:52:21Z", "type": "commit"}, {"oid": "f1464714265c450b97c10cfe89ba055a37d6eb96", "url": "https://github.com/epam/cloud-pipeline/commit/f1464714265c450b97c10cfe89ba055a37d6eb96", "message": "Issue #1404: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-12-08T11:52:21Z", "type": "forcePushed"}]}