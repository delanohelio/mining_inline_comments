{"pr_number": 981, "pr_title": "Issue #761 GCP storage pricing", "pr_createdAt": "2020-02-26T08:58:45Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/981", "timeline": [{"oid": "33b0c1e067cf0c7bc57cd009b8bc9497347128b8", "url": "https://github.com/epam/cloud-pipeline/commit/33b0c1e067cf0c7bc57cd009b8bc9497347128b8", "message": "Issue #761 GCP storage pricing service", "committedDate": "2020-03-05T10:28:37Z", "type": "commit"}, {"oid": "19ae4a4ecc2bde0a17c7fa7709fe57eb68ee2da8", "url": "https://github.com/epam/cloud-pipeline/commit/19ae4a4ecc2bde0a17c7fa7709fe57eb68ee2da8", "message": "Issue #761 Storage pricing services structure refactoring", "committedDate": "2020-03-05T10:28:43Z", "type": "commit"}, {"oid": "37f801a3b76086da1b74ba3edc8cece3b8e99ed0", "url": "https://github.com/epam/cloud-pipeline/commit/37f801a3b76086da1b74ba3edc8cece3b8e99ed0", "message": "Issue #761 Update tests according to services refactoring", "committedDate": "2020-03-05T10:28:45Z", "type": "commit"}, {"oid": "28de0a68ec70bcd302ead2c5a167571e6ae99fea", "url": "https://github.com/epam/cloud-pipeline/commit/28de0a68ec70bcd302ead2c5a167571e6ae99fea", "message": "Issue #761 Update sync configuration", "committedDate": "2020-03-05T10:28:46Z", "type": "commit"}, {"oid": "d5ecfed61b10bcfa1ec2e43bc0d6263bf27f4213", "url": "https://github.com/epam/cloud-pipeline/commit/d5ecfed61b10bcfa1ec2e43bc0d6263bf27f4213", "message": "Issue #761 Get GS prices for multi-regional storage", "committedDate": "2020-03-05T10:28:47Z", "type": "commit"}, {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "url": "https://github.com/epam/cloud-pipeline/commit/59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "message": "Issue #761 AbstractStoragePricingService code style fix", "committedDate": "2020-03-05T10:28:47Z", "type": "commit"}, {"oid": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "url": "https://github.com/epam/cloud-pipeline/commit/59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "message": "Issue #761 AbstractStoragePricingService code style fix", "committedDate": "2020-03-05T10:28:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTI1MA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388235250", "bodyText": "This method maybe simplefied:\n`Optional.ofNullable(aggregations).map ...", "author": "mzueva", "createdAt": "2020-03-05T11:28:27Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -138,7 +133,11 @@ public AwsStorageToBillingRequestConverter(final AbstractEntityMapper<StorageBil\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final ParsedSum sumAggResult = response.getAggregations().get(STORAGE_SIZE_AGG_NAME);\n+        final Aggregations aggregations = response.getAggregations();", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjEyOA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388476128", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-05T18:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\nindex da1674105..7fd97b5bb 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n\n@@ -133,16 +133,16 @@ public class StorageToBillingRequestConverter implements EntityToBillingRequestC\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final Aggregations aggregations = response.getAggregations();\n-        if (aggregations == null) {\n+        final long totalMatches = response.getHits().getTotalHits();\n+        if (totalMatches == 0) {\n             return Optional.empty();\n         }\n-        final ParsedSum sumAggResult = aggregations.get(STORAGE_SIZE_AGG_NAME);\n-        final long storageSize = new Double(sumAggResult.getValue()).longValue();\n-        final long totalMatches = response.getHits().getTotalHits();\n-        return (storageSize == 0 || totalMatches == 0)\n-               ? Optional.empty()\n-               : Optional.of(storageSize);\n+        return Optional.ofNullable(response.getAggregations())\n+            .map(aggregations -> aggregations.get(STORAGE_SIZE_AGG_NAME))\n+            .map(ParsedSum.class::cast)\n+            .map(ParsedSum::getValue)\n+            .map(Double::longValue)\n+            .filter(val -> !val.equals(0L));\n     }\n \n     private DocWriteRequest getDocWriteRequest(final String fullIndex,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTYzMw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388235633", "bodyText": "Let's move totalMatches check to the start of the method", "author": "mzueva", "createdAt": "2020-03-05T11:29:14Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -138,7 +133,11 @@ public AwsStorageToBillingRequestConverter(final AbstractEntityMapper<StorageBil\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final ParsedSum sumAggResult = response.getAggregations().get(STORAGE_SIZE_AGG_NAME);\n+        final Aggregations aggregations = response.getAggregations();\n+        if (aggregations == null) {\n+            return Optional.empty();\n+        }\n+        final ParsedSum sumAggResult = aggregations.get(STORAGE_SIZE_AGG_NAME);\n         final long storageSize = new Double(sumAggResult.getValue()).longValue();\n         final long totalMatches = response.getHits().getTotalHits();", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjE3Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388476177", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-05T18:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\nindex da1674105..7fd97b5bb 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n\n@@ -133,16 +133,16 @@ public class StorageToBillingRequestConverter implements EntityToBillingRequestC\n     }\n \n     private Optional<Long> extractStorageSize(final SearchResponse response) {\n-        final Aggregations aggregations = response.getAggregations();\n-        if (aggregations == null) {\n+        final long totalMatches = response.getHits().getTotalHits();\n+        if (totalMatches == 0) {\n             return Optional.empty();\n         }\n-        final ParsedSum sumAggResult = aggregations.get(STORAGE_SIZE_AGG_NAME);\n-        final long storageSize = new Double(sumAggResult.getValue()).longValue();\n-        final long totalMatches = response.getHits().getTotalHits();\n-        return (storageSize == 0 || totalMatches == 0)\n-               ? Optional.empty()\n-               : Optional.of(storageSize);\n+        return Optional.ofNullable(response.getAggregations())\n+            .map(aggregations -> aggregations.get(STORAGE_SIZE_AGG_NAME))\n+            .map(ParsedSum.class::cast)\n+            .map(ParsedSum::getValue)\n+            .map(Double::longValue)\n+            .filter(val -> !val.equals(0L));\n     }\n \n     private DocWriteRequest getDocWriteRequest(final String fullIndex,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTk4Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388235983", "bodyText": "Please, remove this suppression", "author": "mzueva", "createdAt": "2020-03-05T11:29:55Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -44,39 +47,28 @@\n import java.time.YearMonth;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n @SuppressWarnings(\"checkstyle:MagicNumber\")", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjIzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388476234", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-05T18:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTk4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\nindex da1674105..7fd97b5bb 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n\n@@ -51,28 +50,29 @@ import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n-@SuppressWarnings(\"checkstyle:MagicNumber\")\n public class StorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n \n     private static final String STORAGE_SIZE_AGG_NAME = \"sizeSumSearch\";\n     private static final String SIZE_FIELD = \"size\";\n     private static final String REGION_FIELD = \"storage_region\";\n-    private static final String ES_FILE_INDEX_PATTERN = \"*cp-%s-file-%d\";\n     private static final RoundingMode ROUNDING_MODE = RoundingMode.CEILING;\n \n     private final AbstractEntityMapper<StorageBillingInfo> mapper;\n     private final ElasticsearchServiceClient elasticsearchService;\n     private final StorageType storageType;\n-    private final AbstractStoragePricingService storagePricing;\n+    private final StoragePricingService storagePricing;\n+    private final String esFileIndexPattern;\n \n     public StorageToBillingRequestConverter(final AbstractEntityMapper<StorageBillingInfo> mapper,\n                                             final ElasticsearchServiceClient elasticsearchService,\n                                             final StorageType storageType,\n-                                            final AbstractStoragePricingService storagePricing) {\n+                                            final StoragePricingService storagePricing,\n+                                            final String esFileIndexPattern) {\n         this.mapper = mapper;\n         this.elasticsearchService = elasticsearchService;\n         this.storageType = storageType;\n         this.storagePricing = storagePricing;\n+        this.esFileIndexPattern = esFileIndexPattern;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNzAzNA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388237034", "bodyText": "I think it is better to put index pattern into application.properties.\nWhy do we need * in index pattern? As fas as I remember all indices have aliases cp-$type-file-$id.", "author": "mzueva", "createdAt": "2020-03-05T11:32:04Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java", "diffHunk": "@@ -44,39 +47,28 @@\n import java.time.YearMonth;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n @SuppressWarnings(\"checkstyle:MagicNumber\")\n-public class AwsStorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n+public class StorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n \n-    public static final int BYTES_TO_GB = 1 << 30;\n-    public static final int PRECISION = 5;\n     private static final String STORAGE_SIZE_AGG_NAME = \"sizeSumSearch\";\n     private static final String SIZE_FIELD = \"size\";\n     private static final String REGION_FIELD = \"storage_region\";\n-    private static final String ES_FILE_INDEX_PATTERN = \"cp-%s-file-%d\";\n+    private static final String ES_FILE_INDEX_PATTERN = \"*cp-%s-file-%d\";", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzEwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477102", "bodyText": "Extracted pattern to properties.\nIndices contain a randomly generated string of 5 chars at the beginning.", "author": "Wedds", "createdAt": "2020-03-05T18:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNzAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\nindex da1674105..7fd97b5bb 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StorageToBillingRequestConverter.java\n\n@@ -51,28 +50,29 @@ import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n-@SuppressWarnings(\"checkstyle:MagicNumber\")\n public class StorageToBillingRequestConverter implements EntityToBillingRequestConverter<AbstractDataStorage> {\n \n     private static final String STORAGE_SIZE_AGG_NAME = \"sizeSumSearch\";\n     private static final String SIZE_FIELD = \"size\";\n     private static final String REGION_FIELD = \"storage_region\";\n-    private static final String ES_FILE_INDEX_PATTERN = \"*cp-%s-file-%d\";\n     private static final RoundingMode ROUNDING_MODE = RoundingMode.CEILING;\n \n     private final AbstractEntityMapper<StorageBillingInfo> mapper;\n     private final ElasticsearchServiceClient elasticsearchService;\n     private final StorageType storageType;\n-    private final AbstractStoragePricingService storagePricing;\n+    private final StoragePricingService storagePricing;\n+    private final String esFileIndexPattern;\n \n     public StorageToBillingRequestConverter(final AbstractEntityMapper<StorageBillingInfo> mapper,\n                                             final ElasticsearchServiceClient elasticsearchService,\n                                             final StorageType storageType,\n-                                            final AbstractStoragePricingService storagePricing) {\n+                                            final StoragePricingService storagePricing,\n+                                            final String esFileIndexPattern) {\n         this.mapper = mapper;\n         this.elasticsearchService = elasticsearchService;\n         this.storageType = storageType;\n         this.storagePricing = storagePricing;\n+        this.esFileIndexPattern = esFileIndexPattern;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mjk5NA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388242994", "bodyText": "I'd suggest to parse prices into Object model instead of dealing with JsonNodes", "author": "mzueva", "createdAt": "2020-03-05T11:45:23Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java", "diffHunk": "@@ -32,43 +33,25 @@\n import java.math.BigDecimal;\n import java.math.MathContext;\n import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n @Slf4j\n-public class AwsStorageServicePricing {\n+public class AwsStoragePricingService extends AbstractStoragePricingService {\n \n-    private static final int CENTS_IN_DOLLAR = 100;\n-\n-    private final Map<Regions, StoragePricing> storagePriceListGb = new HashMap<>();\n-\n-    /**\n-     * Storage service name (either \"AmazonS3\" or \"AmazonEFS\")\n-     */\n-    private final String awsStorageServiceName;\n-\n-    /**\n-     * The highest price all over available regions\n-     */\n-    private BigDecimal defaultPriceGb;\n-\n-    public AwsStorageServicePricing(final String awsStorageServiceName) {\n-        this.awsStorageServiceName = awsStorageServiceName;\n-        updatePrices();\n+    public AwsStoragePricingService(final String awsStorageServiceName) {\n+        super(awsStorageServiceName);\n     }\n \n-    public AwsStorageServicePricing(final String awsStorageServiceName,\n-                                    final Map<Regions, StoragePricing> initialPriceList) {\n-        this.awsStorageServiceName = awsStorageServiceName;\n-        this.storagePriceListGb.putAll(initialPriceList);\n-        this.defaultPriceGb = calculateDefaultPriceGb();\n+    public AwsStoragePricingService(final String awsStorageServiceName,\n+                                    final Map<String, StoragePricing> initialPriceList) {\n+        super(awsStorageServiceName, initialPriceList);\n     }\n \n-    public void updatePrices() {\n-        loadFullPriceList(awsStorageServiceName).forEach(price -> {\n+    @Override\n+    public void loadFullPriceList() {\n+        loadPricesInJson(getStorageServiceGroup()).forEach(price -> {\n             try {\n                 final JsonNode regionInfo = new ObjectMapper().readTree(price);", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4NzEwOA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388887108", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-06T12:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mjk5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\nsimilarity index 84%\nrename from billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java\nrename to billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\nindex 1617efcdb..984869206 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePricingService.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n\n@@ -33,46 +33,47 @@ import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.MathContext;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n @Slf4j\n-public class AwsStoragePricingService extends AbstractStoragePricingService {\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n \n-    public AwsStoragePricingService(final String awsStorageServiceName) {\n-        super(awsStorageServiceName);\n-    }\n+    private final String awsStorageServiceName;\n \n-    public AwsStoragePricingService(final String awsStorageServiceName,\n-                                    final Map<String, StoragePricing> initialPriceList) {\n-        super(awsStorageServiceName, initialPriceList);\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n     }\n \n     @Override\n-    public void loadFullPriceList() {\n-        loadPricesInJson(getStorageServiceGroup()).forEach(price -> {\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadPricesInJson(awsStorageServiceName).forEach(price -> {\n             try {\n                 final JsonNode regionInfo = new ObjectMapper().readTree(price);\n                 final String regionName = regionInfo.path(\"product\").path(\"attributes\").path(\"location\").asText();\n-                getRegionFromFullLocation(regionName).ifPresent(region -> fillPricingInfoForRegion(region, regionInfo));\n+                getRegionFromFullLocation(regionName)\n+                    .ifPresent(region -> fullPriceList.put(region.getName(), convertPricingJsonInfo(regionInfo)));\n             } catch (IOException e) {\n                 log.error(\"Can't instantiate AWS storage price list!\");\n             }\n         });\n+        return fullPriceList;\n     }\n \n     @Override\n-    protected CloudProvider getProvider() {\n+    public CloudProvider getProvider() {\n         return CloudProvider.AWS;\n     }\n \n-    private void fillPricingInfoForRegion(final Regions region, final JsonNode regionInfo) {\n+    private StoragePricing convertPricingJsonInfo(final JsonNode regionInfo) {\n         final StoragePricing pricing = new StoragePricing();\n         regionInfo.findParents(\"pricePerUnit\").stream()\n             .map(this::extractPricingFromJson)\n             .forEach(pricing::addPrice);\n-        putRegionPricing(region.getName(), pricing);\n+        return pricing;\n     }\n \n     private List<String> loadPricesInJson(final String awsStorageServiceName) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDQ1MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388244451", "bodyText": "Currently this abstract class contains lot's of implemented methods and two abstract methods. Can we make AbstractStoragePricingService just StoragePricingService and extract all abstract methods into a separate interface with implementations for different providers? I think it will make code more readable.", "author": "mzueva", "createdAt": "2020-03-05T11:48:40Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+@SuppressWarnings(\"checkstyle:magicNumber\")\n+public abstract class AbstractStoragePricingService {", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzQ1NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477455", "bodyText": "Done, introduced StoragePriceListLoader interface", "author": "Wedds", "createdAt": "2020-03-05T18:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StoragePricingService.java\nsimilarity index 60%\nrename from billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java\nrename to billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StoragePricingService.java\nindex cb1bb0934..4e7f08f2e 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StoragePricingService.java\n\n@@ -17,7 +17,7 @@\n package com.epam.pipeline.billingreportagent.service.impl.converter;\n \n import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n-import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n \n import java.math.BigDecimal;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjE2Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388246167", "bodyText": "Please, use some more specific exception class", "author": "mzueva", "createdAt": "2020-03-05T11:52:31Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.api.services.cloudbilling.model.ListServicesResponse;\n+import com.google.api.services.cloudbilling.model.ListSkusResponse;\n+import com.google.api.services.cloudbilling.model.Service;\n+import com.google.api.services.cloudbilling.model.Sku;\n+import com.google.api.services.cloudbilling.model.TierRate;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class GcpStoragePricingService extends AbstractStoragePricingService {\n+\n+    private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n+    private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n+\n+    public GcpStoragePricingService() {\n+        super(GCP_STORAGE_SERVICES_FAMILY);\n+    }\n+\n+    @Override\n+    public void loadFullPriceList() throws IOException, GeneralSecurityException {\n+        final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n+        final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n+                                                           JacksonFactory.getDefaultInstance(),\n+                                                           null);\n+        final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n+        final Service cloudStorageService = services.getServices().stream()\n+            .filter(service -> service.getDisplayName().equals(getStorageServiceGroup()))\n+            .findAny()\n+            .orElseThrow(() -> new RuntimeException(\"No services received from GCP!\"));", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzUzMg==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477532", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-05T18:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java\nsimilarity index 78%\nrename from billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java\nrename to billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java\nindex 93ee5a440..4c5c988fb 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePricingService.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java\n\n@@ -34,31 +34,29 @@ import java.math.BigDecimal;\n import java.math.MathContext;\n import java.security.GeneralSecurityException;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n @Slf4j\n-public class GcpStoragePricingService extends AbstractStoragePricingService {\n+public class GcpStoragePriceListLoader implements StoragePriceListLoader{\n \n     private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n     private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n \n-    public GcpStoragePricingService() {\n-        super(GCP_STORAGE_SERVICES_FAMILY);\n-    }\n-\n     @Override\n-    public void loadFullPriceList() throws IOException, GeneralSecurityException {\n+    public Map<String, StoragePricing> loadFullPriceList() throws IOException, GeneralSecurityException {\n         final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n         final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n                                                            JacksonFactory.getDefaultInstance(),\n                                                            null);\n         final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n         final Service cloudStorageService = services.getServices().stream()\n-            .filter(service -> service.getDisplayName().equals(getStorageServiceGroup()))\n+            .filter(service -> service.getDisplayName().equals(GCP_STORAGE_SERVICES_FAMILY))\n             .findAny()\n-            .orElseThrow(() -> new RuntimeException(\"No services received from GCP!\"));\n+            .orElseThrow(() -> new IllegalStateException(\"No services received from GCP!\"));\n \n         final ListSkusResponse skuResponse = cloudbilling.services()\n             .skus()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjczNw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388246737", "bodyText": "I think it is better to actually return something from this method since it is called only form updatePrices method where you can assign prices to some inner field.", "author": "mzueva", "createdAt": "2020-03-05T11:53:50Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.math.BigDecimal;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Slf4j\n+@SuppressWarnings(\"checkstyle:magicNumber\")\n+public abstract class AbstractStoragePricingService {\n+\n+    public static final int CENTS_IN_DOLLAR = 100;\n+    public static final int BYTES_TO_GB = 1 << 30;\n+    public static final int PRECISION = 5;\n+\n+    private final Map<String, StoragePricing> storagePriceListGb = new HashMap<>();\n+    private BigDecimal defaultPriceGb;\n+    private final String storageServiceGroup;\n+\n+    public AbstractStoragePricingService(final String storageServiceGroup) {\n+        this.storageServiceGroup = storageServiceGroup;\n+        updatePrices();\n+    }\n+\n+    protected abstract void loadFullPriceList() throws Exception;", "originalCommit": "59a8efa988ba0eade6d4aeeb3e74eea4c9af3a7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NzgwMg==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r388477802", "bodyText": "Done, returning Map with pricing for regions from now", "author": "Wedds", "createdAt": "2020-03-05T18:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NjczNw=="}], "type": "inlineReview", "revised_code": {"commit": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StoragePricingService.java\nsimilarity index 60%\nrename from billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java\nrename to billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StoragePricingService.java\nindex cb1bb0934..4e7f08f2e 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AbstractStoragePricingService.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/StoragePricingService.java\n\n@@ -17,7 +17,7 @@\n package com.epam.pipeline.billingreportagent.service.impl.converter;\n \n import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n-import com.epam.pipeline.entity.region.CloudProvider;\n+import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n \n import java.math.BigDecimal;\n"}}, {"oid": "ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "url": "https://github.com/epam/cloud-pipeline/commit/ac05cde32afcd5fb9254dc21c8b6f087acf8f7be", "message": "Issue #761 Storage pricing refactoring: extract prices loading process from abstract class to interface.", "committedDate": "2020-03-05T15:46:03Z", "type": "commit"}, {"oid": "4bce919d58da5ab495cf6b424b432b87787ecf37", "url": "https://github.com/epam/cloud-pipeline/commit/4bce919d58da5ab495cf6b424b432b87787ecf37", "message": "Issue #761 Parse AWS prices into POJO instead of working with JsonNode", "committedDate": "2020-03-05T17:54:38Z", "type": "commit"}, {"oid": "9b03c0caa09ecca79be7ae711f54f69c917d15fd", "url": "https://github.com/epam/cloud-pipeline/commit/9b03c0caa09ecca79be7ae711f54f69c917d15fd", "message": "Issue #761 Code refactoring (extracting common settings into its own fields, remove unused import).", "committedDate": "2020-03-05T18:15:19Z", "type": "commit"}, {"oid": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "url": "https://github.com/epam/cloud-pipeline/commit/f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "message": "Issue #761 AwsStoragePriceListLoader improvements (extract constants, refine JSON price list mapping)", "committedDate": "2020-03-06T12:52:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNzcyMw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391027723", "bodyText": "Do we really need this annotation if name of the property matches json field name?", "author": "mzueva", "createdAt": "2020-03-11T14:50:35Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.model.pricing;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+import java.util.Map;\n+\n+@Data\n+public class AwsPriceDimensions {\n+\n+    @JsonProperty(value = \"priceDimensions\")", "originalCommit": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDE0OA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504148", "bodyText": "Removed for all matching fields", "author": "Wedds", "createdAt": "2020-03-12T09:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNzcyMw=="}], "type": "inlineReview", "revised_code": {"commit": "ec1b4c66f826e66eb4b49eddf304f36b6c0debff", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java\nindex 0bc6d1846..85de1df7d 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/model/pricing/AwsPriceDimensions.java\n\n@@ -16,7 +16,6 @@\n \n package com.epam.pipeline.billingreportagent.model.pricing;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Data;\n \n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODk4NA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391028984", "bodyText": "To prevent some common errors, we can set property FailOnUnknownProperties to false for this mapper. In this case parsing won't fail if some new fields will be added to AWS model.", "author": "mzueva", "createdAt": "2020-03-11T14:52:17Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();", "originalCommit": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDIyOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504229", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-12T09:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "3a77057baa31292b4c0ec280bd2b7e827319846c", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\nindex 71dfff0a1..b4d9920bd 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n\n@@ -27,6 +27,7 @@ import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.collections4.CollectionUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyOTgwNA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391029804", "bodyText": "Can't we replace foreach with map?", "author": "mzueva", "createdAt": "2020-03-11T14:53:22Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {", "originalCommit": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDI4MA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504280", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-12T09:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyOTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "3a77057baa31292b4c0ec280bd2b7e827319846c", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\nindex 71dfff0a1..b4d9920bd 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n\n@@ -27,6 +27,7 @@ import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.collections4.CollectionUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDQwMw==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391030403", "bodyText": "I think, we can init awsPricingService  once before cycle", "author": "mzueva", "createdAt": "2020-03-11T14:54:06Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {\n+            final String regionName = price.getProduct().getAttributes().get(LOCATION_KEY);\n+            getRegionFromFullLocation(regionName)\n+                .ifPresent(region -> fullPriceList.put(region.getName(),\n+                                                       convertAwsPricing(price.getTerms().getOnDemand())));\n+        });\n+        return fullPriceList;\n+    }\n+\n+    @Override\n+    public CloudProvider getProvider() {\n+        return CloudProvider.AWS;\n+    }\n+\n+    private StoragePricing convertAwsPricing(final Map<String, AwsPriceDimensions> allPrices) {\n+        final StoragePricing pricing = new StoragePricing();\n+        final List<AwsPriceRate> rates = CollectionUtils.emptyIfNull(allPrices.values()).stream()\n+            .map(AwsPriceDimensions::getPriceDimensions)\n+            .map(Map::values)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+        rates.forEach(rate -> {\n+            final BigDecimal priceGb = new BigDecimal(rate.getPricePerUnit().get(US_DOLLAR_CODE),\n+                                                      new MathContext(PRECISION))\n+                .multiply(BigDecimal.valueOf(CENTS_IN_DOLLAR));\n+            final Long beginRange = rate.getBeginRange() * BYTES_TO_GB;\n+            final Long endRange = rate.getEndRange().equals(Long.MAX_VALUE)\n+                                  ? Long.MAX_VALUE\n+                                  : rate.getEndRange() * BYTES_TO_GB;\n+            final StoragePricing.StoragePricingEntity pricingEntity =\n+                new StoragePricing.StoragePricingEntity(beginRange, endRange, priceGb);\n+            pricing.addPrice(pricingEntity);\n+        });\n+        return pricing;\n+    }\n+\n+    private List<AwsPricingCard> loadAwsPricingCards(final String awsStorageServiceName) {\n+        final List<AwsPricingCard> allPrices = new ArrayList<>();\n+        final Filter filter = new Filter();\n+        filter.setType(TERM_MATCH_FILTER);\n+        filter.setField(PRODUCT_FAMILY_KEY);\n+        filter.setValue(STORAGE);\n+        filter.setField(STORAGE_CLASS_KEY);\n+        filter.setValue(GENERAL_STORAGE);\n+\n+        String nextToken = StringUtils.EMPTY;\n+        do {\n+            final GetProductsRequest request = new GetProductsRequest()\n+                .withServiceCode(awsStorageServiceName)\n+                .withFilters(filter)\n+                .withNextToken(nextToken)\n+                .withFormatVersion(AWS_PRICE_FORMAT_VERSION);\n+\n+            final AWSPricing awsPricingService = AWSPricingClientBuilder", "originalCommit": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDMyMA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504320", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-12T09:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3a77057baa31292b4c0ec280bd2b7e827319846c", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\nindex 71dfff0a1..b4d9920bd 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n\n@@ -27,6 +27,7 @@ import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.collections4.CollectionUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTE3NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391031175", "bodyText": "We can replace cycle with stream().filter().findAny()", "author": "mzueva", "createdAt": "2020-03-11T14:55:09Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.pricing.AWSPricing;\n+import com.amazonaws.services.pricing.AWSPricingClientBuilder;\n+import com.amazonaws.services.pricing.model.Filter;\n+import com.amazonaws.services.pricing.model.GetProductsRequest;\n+import com.amazonaws.services.pricing.model.GetProductsResult;\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n+import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class AwsStoragePriceListLoader implements StoragePriceListLoader {\n+\n+    private static final String AWS_PRICE_FORMAT_VERSION = \"aws_v1\";\n+    private static final String LOCATION_KEY = \"location\";\n+    private static final String TERM_MATCH_FILTER = \"TERM_MATCH\";\n+    private static final String PRODUCT_FAMILY_KEY = \"productFamily\";\n+    private static final String STORAGE = \"Storage\";\n+    private static final String STORAGE_CLASS_KEY = \"storageClass\";\n+    private static final String GENERAL_STORAGE = \"General Purpose\";\n+    private static final String US_DOLLAR_CODE = \"USD\";\n+\n+    private final String awsStorageServiceName;\n+    private final ObjectMapper mapper;\n+\n+    public AwsStoragePriceListLoader(final String awsStorageServiceName) {\n+        this.awsStorageServiceName = awsStorageServiceName;\n+        this.mapper = new ObjectMapper();\n+    }\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() {\n+        final Map<String, StoragePricing> fullPriceList = new HashMap<>();\n+        loadAwsPricingCards(awsStorageServiceName).forEach(price -> {\n+            final String regionName = price.getProduct().getAttributes().get(LOCATION_KEY);\n+            getRegionFromFullLocation(regionName)\n+                .ifPresent(region -> fullPriceList.put(region.getName(),\n+                                                       convertAwsPricing(price.getTerms().getOnDemand())));\n+        });\n+        return fullPriceList;\n+    }\n+\n+    @Override\n+    public CloudProvider getProvider() {\n+        return CloudProvider.AWS;\n+    }\n+\n+    private StoragePricing convertAwsPricing(final Map<String, AwsPriceDimensions> allPrices) {\n+        final StoragePricing pricing = new StoragePricing();\n+        final List<AwsPriceRate> rates = CollectionUtils.emptyIfNull(allPrices.values()).stream()\n+            .map(AwsPriceDimensions::getPriceDimensions)\n+            .map(Map::values)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+        rates.forEach(rate -> {\n+            final BigDecimal priceGb = new BigDecimal(rate.getPricePerUnit().get(US_DOLLAR_CODE),\n+                                                      new MathContext(PRECISION))\n+                .multiply(BigDecimal.valueOf(CENTS_IN_DOLLAR));\n+            final Long beginRange = rate.getBeginRange() * BYTES_TO_GB;\n+            final Long endRange = rate.getEndRange().equals(Long.MAX_VALUE)\n+                                  ? Long.MAX_VALUE\n+                                  : rate.getEndRange() * BYTES_TO_GB;\n+            final StoragePricing.StoragePricingEntity pricingEntity =\n+                new StoragePricing.StoragePricingEntity(beginRange, endRange, priceGb);\n+            pricing.addPrice(pricingEntity);\n+        });\n+        return pricing;\n+    }\n+\n+    private List<AwsPricingCard> loadAwsPricingCards(final String awsStorageServiceName) {\n+        final List<AwsPricingCard> allPrices = new ArrayList<>();\n+        final Filter filter = new Filter();\n+        filter.setType(TERM_MATCH_FILTER);\n+        filter.setField(PRODUCT_FAMILY_KEY);\n+        filter.setValue(STORAGE);\n+        filter.setField(STORAGE_CLASS_KEY);\n+        filter.setValue(GENERAL_STORAGE);\n+\n+        String nextToken = StringUtils.EMPTY;\n+        do {\n+            final GetProductsRequest request = new GetProductsRequest()\n+                .withServiceCode(awsStorageServiceName)\n+                .withFilters(filter)\n+                .withNextToken(nextToken)\n+                .withFormatVersion(AWS_PRICE_FORMAT_VERSION);\n+\n+            final AWSPricing awsPricingService = AWSPricingClientBuilder\n+                .standard()\n+                .withRegion(Regions.US_EAST_1)\n+                .build();\n+\n+            final GetProductsResult result = awsPricingService.getProducts(request);\n+            result.getPriceList().stream()\n+                .map(this::parseAwsPricingCard)\n+                .forEach(allPrices::add);\n+            nextToken = result.getNextToken();\n+        } while (nextToken != null);\n+        return allPrices;\n+    }\n+\n+    private AwsPricingCard parseAwsPricingCard(final String jsonStr) {\n+        try {\n+            return mapper.readValue(jsonStr, AwsPricingCard.class);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(\"Error during AWS general pricing info parsing!\");\n+        }\n+    }\n+\n+    private Optional<Regions> getRegionFromFullLocation(final String location) {\n+        for (Regions region : Regions.values()) {", "originalCommit": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDM2Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504362", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-12T09:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMTE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3a77057baa31292b4c0ec280bd2b7e827319846c", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\nindex 71dfff0a1..b4d9920bd 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/AwsStoragePriceListLoader.java\n\n@@ -27,6 +27,7 @@ import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceDimensions;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPriceRate;\n import com.epam.pipeline.billingreportagent.model.pricing.AwsPricingCard;\n import com.epam.pipeline.entity.region.CloudProvider;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.collections4.CollectionUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMjM4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391032382", "bodyText": "Again, let's prefer map to foreach", "author": "mzueva", "createdAt": "2020-03-11T14:56:44Z", "path": "billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.billingreportagent.service.impl.converter;\n+\n+import com.epam.pipeline.billingreportagent.model.billing.StoragePricing;\n+import com.epam.pipeline.entity.region.CloudProvider;\n+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.services.cloudbilling.Cloudbilling;\n+import com.google.api.services.cloudbilling.model.ListServicesResponse;\n+import com.google.api.services.cloudbilling.model.ListSkusResponse;\n+import com.google.api.services.cloudbilling.model.Service;\n+import com.google.api.services.cloudbilling.model.Sku;\n+import com.google.api.services.cloudbilling.model.TierRate;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.security.GeneralSecurityException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@Slf4j\n+public class GcpStoragePriceListLoader implements StoragePriceListLoader{\n+\n+    private static final String GCP_STORAGE_SERVICES_FAMILY = \"Cloud Storage\";\n+    private static final List<String> SUPPORTED_STORAGE = Arrays.asList(\"RegionalStorage\", \"MultiRegionalStorage\");\n+\n+    @Override\n+    public Map<String, StoragePricing> loadFullPriceList() throws IOException, GeneralSecurityException {\n+        final String accessToken = GoogleCredential.getApplicationDefault().getAccessToken();\n+        final Cloudbilling cloudbilling = new Cloudbilling(GoogleNetHttpTransport.newTrustedTransport(),\n+                                                           JacksonFactory.getDefaultInstance(),\n+                                                           null);\n+        final ListServicesResponse services = cloudbilling.services().list().setAccessToken(accessToken).execute();\n+        final Service cloudStorageService = services.getServices().stream()\n+            .filter(service -> service.getDisplayName().equals(GCP_STORAGE_SERVICES_FAMILY))\n+            .findAny()\n+            .orElseThrow(() -> new IllegalStateException(\"No services received from GCP!\"));\n+\n+        final ListSkusResponse skuResponse = cloudbilling.services()\n+            .skus()\n+            .list(cloudStorageService.getName())\n+            .setAccessToken(accessToken)\n+            .execute();\n+\n+        return skuResponse.getSkus().stream()\n+            .filter(sku -> SUPPORTED_STORAGE.contains(sku.getCategory().getResourceGroup()))\n+            .map(this::convertSku)\n+            .map(Map::entrySet)\n+            .flatMap(Set::stream)\n+            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+    }\n+\n+    private Map<String, StoragePricing> convertSku(final Sku sku) {\n+        final Map<String, StoragePricing> flattenPrices = new HashMap<>();\n+        final List<TierRate> tieredRates = sku.getPricingInfo().get(0).getPricingExpression().getTieredRates();\n+        final StoragePricing convertedRates = convertGcpTierRateToStoragePrices(tieredRates);\n+        sku.getServiceRegions().forEach(key -> flattenPrices.put(key, convertedRates));", "originalCommit": "f0e4fd0e647bbb2744b815804799ceb9f0fffa29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwNDQzMA==", "url": "https://github.com/epam/cloud-pipeline/pull/981#discussion_r391504430", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-03-12T09:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMjM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3a77057baa31292b4c0ec280bd2b7e827319846c", "chunk": "diff --git a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java\nindex 4c5c988fb..9ce391e95 100644\n--- a/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java\n+++ b/billing-report-agent/src/main/java/com/epam/pipeline/billingreportagent/service/impl/converter/GcpStoragePriceListLoader.java\n\n@@ -34,10 +34,10 @@ import java.math.BigDecimal;\n import java.math.MathContext;\n import java.security.GeneralSecurityException;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n \n @Slf4j\n"}}, {"oid": "3a77057baa31292b4c0ec280bd2b7e827319846c", "url": "https://github.com/epam/cloud-pipeline/commit/3a77057baa31292b4c0ec280bd2b7e827319846c", "message": "Issue #761 Modify AWS, GCP price lists loading", "committedDate": "2020-03-12T09:42:58Z", "type": "commit"}, {"oid": "ec1b4c66f826e66eb4b49eddf304f36b6c0debff", "url": "https://github.com/epam/cloud-pipeline/commit/ec1b4c66f826e66eb4b49eddf304f36b6c0debff", "message": "Issue #761 Refactor AWS price list loading: remove redundant JSON property mapping", "committedDate": "2020-03-12T09:43:16Z", "type": "commit"}]}