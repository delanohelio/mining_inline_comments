{"pr_number": 1508, "pr_title": "Issue #1405: Implemented tests for datastorage controllers", "pr_createdAt": "2020-10-21T15:51:48Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1508", "timeline": [{"oid": "458a462b65a52cf95657a974e9421256fb70eaab", "url": "https://github.com/epam/cloud-pipeline/commit/458a462b65a52cf95657a974e9421256fb70eaab", "message": "Issue #1405: Implemented tests for datastorage controllers package", "committedDate": "2020-10-28T11:27:20Z", "type": "commit"}, {"oid": "35042f15e33548248f50c8dbf11a645149b7059a", "url": "https://github.com/epam/cloud-pipeline/commit/35042f15e33548248f50c8dbf11a645149b7059a", "message": "Issue #1405: Multipart and redirect tests fixed", "committedDate": "2020-10-28T11:27:21Z", "type": "commit"}, {"oid": "a51fec1b5d003fba6db0900823a74a90d76b4b9c", "url": "https://github.com/epam/cloud-pipeline/commit/a51fec1b5d003fba6db0900823a74a90d76b4b9c", "message": "Issue #1405: More common methods added to AbstractControllerTest", "committedDate": "2020-10-28T12:51:42Z", "type": "commit"}, {"oid": "a51fec1b5d003fba6db0900823a74a90d76b4b9c", "url": "https://github.com/epam/cloud-pipeline/commit/a51fec1b5d003fba6db0900823a74a90d76b4b9c", "message": "Issue #1405: More common methods added to AbstractControllerTest", "committedDate": "2020-10-28T12:51:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNTQ3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r513315478", "bodyText": "It seems like a possible common case in other controller tests. Let's introduce performRequestWithoutResponse method.", "author": "tcibinan", "createdAt": "2020-10-28T09:58:57Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/FileShareMountControllerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.datastorage;\n+\n+import com.epam.pipeline.entity.datastorage.FileShareMount;\n+import com.epam.pipeline.manager.datastorage.FileShareMountApiService;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = FileShareMountController.class)\n+public class FileShareMountControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final String FILESHAREMOUNT_URL = SERVLET_PATH + \"/filesharemount\";\n+    private static final String FILESHAREMOUNT_ID_URL = FILESHAREMOUNT_URL + \"/%d\";\n+\n+    @Autowired\n+    private FileShareMountApiService mockFileShareMountApiService;\n+\n+    @Test\n+    public void shouldFailSaveForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(FILESHAREMOUNT_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldSave() throws Exception {\n+        final FileShareMount fileShareMount = DatastorageCreatorUtils.getFileShareMount();\n+        final String content = getObjectMapper().writeValueAsString(fileShareMount);\n+        Mockito.doReturn(fileShareMount).when(mockFileShareMountApiService).save(fileShareMount);\n+\n+        final MvcResult mvcResult = performRequest(post(FILESHAREMOUNT_URL).content(content));\n+\n+        Mockito.verify(mockFileShareMountApiService).save(fileShareMount);\n+        assertResponse(mvcResult, fileShareMount, DatastorageCreatorUtils.FILE_SHARE_MOUNT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(delete(String.format(FILESHAREMOUNT_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDelete() throws Exception {\n+        mvc().perform(delete(String.format(FILESHAREMOUNT_ID_URL, ID))", "originalCommit": "f71c06d5dbc9984e4822b1428e66aa9b339b6c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18a24933f9d9324a58c7c4d2230aa8b3d09c4f64", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/FileShareMountControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/FileShareMountControllerTest.java\nindex 758384dc6..5279ff09f 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/FileShareMountControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/FileShareMountControllerTest.java\n\n@@ -29,7 +29,6 @@ import org.springframework.test.web.servlet.MvcResult;\n \n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n @WebMvcTest(controllers = FileShareMountController.class)\n public class FileShareMountControllerTest extends AbstractControllerTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNzEzMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r513317132", "bodyText": "I suppose we can move it to CommonCreatorConstants class because most likely these types will be used in different controllers in the future.", "author": "tcibinan", "createdAt": "2020-10-28T10:01:29Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java", "diffHunk": "@@ -0,0 +1,1346 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.datastorage;\n+\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.SecuredEntityWithAction;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageFolder;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.datastorage.azure.AzureBlobStorage;\n+import com.epam.pipeline.entity.datastorage.gcp.GSBucketStorage;\n+import com.epam.pipeline.entity.datastorage.nfs.NFSDataStorage;\n+import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n+import com.epam.pipeline.manager.datastorage.DataStorageApiService;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = DataStorageController.class)\n+public class DataStorageControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final int TEST_INT = 1;\n+    private static final String TEST = \"TEST\";\n+    private static final String DATASTORAGE_URL = SERVLET_PATH + \"/datastorage\";\n+    private static final String LOAD_ALL_URL = DATASTORAGE_URL + \"/loadAll\";\n+    private static final String LOAD_AVAILABLE_URL = DATASTORAGE_URL + \"/available\";\n+    private static final String LOAD_AVAILABLE_WITH_MOUNTS = DATASTORAGE_URL + \"/availableWithMounts\";\n+    private static final String LOAD_WRITABLE_URL = DATASTORAGE_URL + \"/mount\";\n+    private static final String BY_ID_URL = DATASTORAGE_URL + \"/%d\";\n+    private static final String LOAD_DATASTORAGE = BY_ID_URL + \"/load\";\n+    private static final String FIND_URL = DATASTORAGE_URL + \"/find\";\n+    private static final String FIND_BY_PATH_URL = DATASTORAGE_URL + \"/findByPath\";\n+    private static final String DATASTORAGE_ITEMS_URL = BY_ID_URL + \"/list\";\n+    private static final String DATASTORAGE_LISTING_URL = DATASTORAGE_ITEMS_URL + \"/page\";\n+    private static final String DATASTORAGE_ITEMS_UPLOAD_URL = DATASTORAGE_ITEMS_URL + \"/upload\";\n+    private static final String DATASTORAGE_UPLOAD_STREAM_URL = BY_ID_URL + \"/upload/stream\";\n+    private static final String DATASTORAGE_DOWNLOAD_STREAM_URL = BY_ID_URL + \"/download\";\n+    private static final String DATASTORAGE_ITEMS_CONTENT = BY_ID_URL + \"/content\";\n+    private static final String DOWNLOAD_REDIRECT_URL = BY_ID_URL + \"/downloadRedirect\";\n+    private static final String GENERATE_URL = BY_ID_URL + \"/generateUrl\";\n+    private static final String GENERATE_UPLOAD_URL = BY_ID_URL + \"/generateUploadUrl\";\n+    private static final String CONTENT_URL = BY_ID_URL + \"/content\";\n+    private static final String RESTORE_VERSION_URL = DATASTORAGE_ITEMS_URL + \"/restore\";\n+    private static final String DATASTORAGE_SAVE_URL= DATASTORAGE_URL + \"/save\";\n+    private static final String DATASTORAGE_UPDATE_URL = DATASTORAGE_URL + \"/update\";\n+    private static final String DATASTORAGE_POLICY_URL = DATASTORAGE_URL + \"/policy\";\n+    private static final String DATASTORAGE_DELETE_URL = BY_ID_URL + \"/delete\";\n+    private static final String DATASTORAGE_RULE_URL = DATASTORAGE_URL + \"/rule\";\n+    private static final String SAVE_RULE_URL = DATASTORAGE_RULE_URL + \"/register\";\n+    private static final String LOAD_RULES_URL = DATASTORAGE_RULE_URL + \"/load\";\n+    private static final String DELETE_RULES_URL = DATASTORAGE_RULE_URL + \"/delete\";\n+    private static final String TEMP_CREDENTIALS_URL = DATASTORAGE_URL + \"/tempCredentials/\";\n+    private static final String TAGS_URL = BY_ID_URL + \"/tags\";\n+    private static final String TAGS_LIST_URL = TAGS_URL + \"/list\";\n+    private static final String SHARED_LINK_URL = BY_ID_URL + \"/sharedLink\";\n+    private static final String PERMISSION_URL = DATASTORAGE_URL + \"/permission\";\n+    private static final String PATH_URL = DATASTORAGE_URL + \"/path\";\n+    private static final String PATH_SIZE_URL = PATH_URL + \"/size\";\n+    private static final String PATH_USAGE_URL = PATH_URL + \"/usage\";\n+    private static final String SHARED_STORAGE_URL = DATASTORAGE_URL + \"/sharedStorage\";\n+    private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String FALSE_AS_STRING = String.valueOf(false);\n+    private static final String FROM_REGION = \"fromRegion\";\n+    private static final String ID_PARAM = \"id\";\n+    private static final String PATH = \"path\";\n+    private static final String SHOW_VERSION = \"showVersion\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String MARKER = \"marker\";\n+    private static final String VERSION = \"version\";\n+    private static final String TOTALLY = \"totally\";\n+    private static final String TEST_PATH = \"localhost:root/\";\n+    private static final String CONTENT_DISPOSITION_PARAM = \"contentDisposition\";\n+    private static final String CLOUD = \"cloud\";\n+    private static final String SKIP_POLICY = \"skipPolicy\";\n+    private static final String PIPELINE_ID = \"pipelineId\";\n+    private static final String FILE_MASK = \"fileMask\";\n+    private static final String FILTER_MASK = \"filterMask\";\n+    private static final String REWRITE = \"rewrite\";\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String PAGE = \"page\";\n+    private static final String RUN_ID = \"runId\";\n+    private static final ContentDisposition CONTENT_DISPOSITION = ContentDisposition.INLINE;\n+    private static final Map<String, String> TAGS = Collections.singletonMap(TEST, TEST);\n+    private static final TypeReference<Result<Integer>> INTEGER_TYPE = new TypeReference<Result<Integer>>() { };\n+    private static final TypeReference<Result<Object>> OBJECT_TYPE = new TypeReference<Result<Object>>() { };\n+    private static final TypeReference<Result<String>> STRING_TYPE = new TypeReference<Result<String>>() { };\n+    private static final TypeReference<Result<Map<String, String>>> STRING_STRING_MAP_TYPE =\n+            new TypeReference<Result<Map<String, String>>>() { };", "originalCommit": "f71c06d5dbc9984e4822b1428e66aa9b339b6c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35042f15e33548248f50c8dbf11a645149b7059a", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\nindex ab6e11feb..f0204c25a 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n\n@@ -16,6 +16,7 @@\n \n package com.epam.pipeline.controller.datastorage;\n \n+import com.epam.pipeline.config.JsonMapper;\n import com.epam.pipeline.controller.Result;\n import com.epam.pipeline.controller.vo.DataStorageVO;\n import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMzMzI0MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r513333241", "bodyText": "Could you please also check a downloading file name.", "author": "tcibinan", "createdAt": "2020-10-28T10:26:37Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java", "diffHunk": "@@ -0,0 +1,1346 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.datastorage;\n+\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.SecuredEntityWithAction;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageFolder;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.datastorage.azure.AzureBlobStorage;\n+import com.epam.pipeline.entity.datastorage.gcp.GSBucketStorage;\n+import com.epam.pipeline.entity.datastorage.nfs.NFSDataStorage;\n+import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n+import com.epam.pipeline.manager.datastorage.DataStorageApiService;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = DataStorageController.class)\n+public class DataStorageControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final int TEST_INT = 1;\n+    private static final String TEST = \"TEST\";\n+    private static final String DATASTORAGE_URL = SERVLET_PATH + \"/datastorage\";\n+    private static final String LOAD_ALL_URL = DATASTORAGE_URL + \"/loadAll\";\n+    private static final String LOAD_AVAILABLE_URL = DATASTORAGE_URL + \"/available\";\n+    private static final String LOAD_AVAILABLE_WITH_MOUNTS = DATASTORAGE_URL + \"/availableWithMounts\";\n+    private static final String LOAD_WRITABLE_URL = DATASTORAGE_URL + \"/mount\";\n+    private static final String BY_ID_URL = DATASTORAGE_URL + \"/%d\";\n+    private static final String LOAD_DATASTORAGE = BY_ID_URL + \"/load\";\n+    private static final String FIND_URL = DATASTORAGE_URL + \"/find\";\n+    private static final String FIND_BY_PATH_URL = DATASTORAGE_URL + \"/findByPath\";\n+    private static final String DATASTORAGE_ITEMS_URL = BY_ID_URL + \"/list\";\n+    private static final String DATASTORAGE_LISTING_URL = DATASTORAGE_ITEMS_URL + \"/page\";\n+    private static final String DATASTORAGE_ITEMS_UPLOAD_URL = DATASTORAGE_ITEMS_URL + \"/upload\";\n+    private static final String DATASTORAGE_UPLOAD_STREAM_URL = BY_ID_URL + \"/upload/stream\";\n+    private static final String DATASTORAGE_DOWNLOAD_STREAM_URL = BY_ID_URL + \"/download\";\n+    private static final String DATASTORAGE_ITEMS_CONTENT = BY_ID_URL + \"/content\";\n+    private static final String DOWNLOAD_REDIRECT_URL = BY_ID_URL + \"/downloadRedirect\";\n+    private static final String GENERATE_URL = BY_ID_URL + \"/generateUrl\";\n+    private static final String GENERATE_UPLOAD_URL = BY_ID_URL + \"/generateUploadUrl\";\n+    private static final String CONTENT_URL = BY_ID_URL + \"/content\";\n+    private static final String RESTORE_VERSION_URL = DATASTORAGE_ITEMS_URL + \"/restore\";\n+    private static final String DATASTORAGE_SAVE_URL= DATASTORAGE_URL + \"/save\";\n+    private static final String DATASTORAGE_UPDATE_URL = DATASTORAGE_URL + \"/update\";\n+    private static final String DATASTORAGE_POLICY_URL = DATASTORAGE_URL + \"/policy\";\n+    private static final String DATASTORAGE_DELETE_URL = BY_ID_URL + \"/delete\";\n+    private static final String DATASTORAGE_RULE_URL = DATASTORAGE_URL + \"/rule\";\n+    private static final String SAVE_RULE_URL = DATASTORAGE_RULE_URL + \"/register\";\n+    private static final String LOAD_RULES_URL = DATASTORAGE_RULE_URL + \"/load\";\n+    private static final String DELETE_RULES_URL = DATASTORAGE_RULE_URL + \"/delete\";\n+    private static final String TEMP_CREDENTIALS_URL = DATASTORAGE_URL + \"/tempCredentials/\";\n+    private static final String TAGS_URL = BY_ID_URL + \"/tags\";\n+    private static final String TAGS_LIST_URL = TAGS_URL + \"/list\";\n+    private static final String SHARED_LINK_URL = BY_ID_URL + \"/sharedLink\";\n+    private static final String PERMISSION_URL = DATASTORAGE_URL + \"/permission\";\n+    private static final String PATH_URL = DATASTORAGE_URL + \"/path\";\n+    private static final String PATH_SIZE_URL = PATH_URL + \"/size\";\n+    private static final String PATH_USAGE_URL = PATH_URL + \"/usage\";\n+    private static final String SHARED_STORAGE_URL = DATASTORAGE_URL + \"/sharedStorage\";\n+    private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String FALSE_AS_STRING = String.valueOf(false);\n+    private static final String FROM_REGION = \"fromRegion\";\n+    private static final String ID_PARAM = \"id\";\n+    private static final String PATH = \"path\";\n+    private static final String SHOW_VERSION = \"showVersion\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String MARKER = \"marker\";\n+    private static final String VERSION = \"version\";\n+    private static final String TOTALLY = \"totally\";\n+    private static final String TEST_PATH = \"localhost:root/\";\n+    private static final String CONTENT_DISPOSITION_PARAM = \"contentDisposition\";\n+    private static final String CLOUD = \"cloud\";\n+    private static final String SKIP_POLICY = \"skipPolicy\";\n+    private static final String PIPELINE_ID = \"pipelineId\";\n+    private static final String FILE_MASK = \"fileMask\";\n+    private static final String FILTER_MASK = \"filterMask\";\n+    private static final String REWRITE = \"rewrite\";\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String PAGE = \"page\";\n+    private static final String RUN_ID = \"runId\";\n+    private static final ContentDisposition CONTENT_DISPOSITION = ContentDisposition.INLINE;\n+    private static final Map<String, String> TAGS = Collections.singletonMap(TEST, TEST);\n+    private static final TypeReference<Result<Integer>> INTEGER_TYPE = new TypeReference<Result<Integer>>() { };\n+    private static final TypeReference<Result<Object>> OBJECT_TYPE = new TypeReference<Result<Object>>() { };\n+    private static final TypeReference<Result<String>> STRING_TYPE = new TypeReference<Result<String>>() { };\n+    private static final TypeReference<Result<Map<String, String>>> STRING_STRING_MAP_TYPE =\n+            new TypeReference<Result<Map<String, String>>>() { };\n+    private final DataStorageRule dataStorageRule = DatastorageCreatorUtils.getDataStorageRule();\n+    private final S3bucketDataStorage s3Bucket = DatastorageCreatorUtils.getS3bucketDataStorage();\n+    private final AzureBlobStorage azureBlob = DatastorageCreatorUtils.getAzureBlobStorage();\n+    private final GSBucketStorage gsBucket = DatastorageCreatorUtils.getGsBucketStorage();\n+    private final NFSDataStorage nfsDataStorage = DatastorageCreatorUtils.getNfsDataStorage();\n+    private final DataStorageFile file = DatastorageCreatorUtils.getDataStorageFile();\n+    private final DataStorageFolder folder = DatastorageCreatorUtils.getDataStorageFolder();\n+    private final UpdateDataStorageItemVO update = DatastorageCreatorUtils.getUpdateDataStorageItemVO();\n+\n+    @Autowired\n+    private DataStorageApiService mockStorageApiService;\n+\n+    @Test\n+    public void shouldFaiGetDataStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getDataStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetAvailableStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_AVAILABLE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetAvailableStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getAvailableStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_AVAILABLE_URL));\n+\n+        Mockito.verify(mockStorageApiService).getAvailableStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetAvailableStoragesWithMountObjectsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_AVAILABLE_WITH_MOUNTS));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetAvailableStoragesWithMountObjects() throws Exception {\n+        final List<DataStorageWithShareMount> storagesWithShareMounts =\n+                Collections.singletonList(DatastorageCreatorUtils.getDataStorageWithShareMount());\n+        Mockito.doReturn(storagesWithShareMounts).when(mockStorageApiService).getAvailableStoragesWithShareMount(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_AVAILABLE_WITH_MOUNTS).param(FROM_REGION, ID_AS_STRING));\n+\n+        Mockito.verify(mockStorageApiService).getAvailableStoragesWithShareMount(ID);\n+        assertResponse(mvcResult, storagesWithShareMounts, DatastorageCreatorUtils.DS_WITH_SHARE_MOUNT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetWritableDataStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_WRITABLE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetWritableDataStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getWritableStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_WRITABLE_URL));\n+\n+        Mockito.verify(mockStorageApiService).getWritableStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadDataStorageForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadS3BucketDataStorage() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAzureBlobStorage() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadGSBucketStorage() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadNFS3DataStorage() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindDataStorageForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindS3BucketStorage() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAzureBlobStorage() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGSBucketStorage() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindNFSDataStorage() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindDataStorageByPathForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(FIND_BY_PATH_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindS3BucketStorageByPath() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAzureBlobStorageByPath() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGSBucketStorageByPath() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindNFSDataStorageByPath() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetDataStorageItemsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageFolder() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final List<DataStorageFolder> folders = Collections.singletonList(folder);\n+        dataStorageListing.setResults(Collections.singletonList(folder));\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, FALSE_AS_STRING);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItems(ID, TEST, false, null, null\n+        );\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)).params(params));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorageItems(ID, TEST, false, null, null);\n+        assertResponse(mvcResult, folders, DatastorageCreatorUtils.DATA_STORAGE_FOLDER_LIST_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageOwnerFile() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final List<DataStorageFile> files = Collections.singletonList(file);\n+        dataStorageListing.setResults(Collections.singletonList(file));\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, TRUE_AS_STRING);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItemsOwner(ID, TEST, true, null, null\n+        );\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)).params(params));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorageItemsOwner(ID, TEST, true, null, null);\n+        assertResponse(mvcResult, files, DatastorageCreatorUtils.DATA_STORAGE_FILE_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetDataStorageItemsListingForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_LISTING_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageItems() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, FALSE_AS_STRING);\n+        params.add(PAGE_SIZE, ID_AS_STRING);\n+        params.add(MARKER, TEST);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItems(ID, TEST, false, TEST_INT, TEST\n+        );\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DATASTORAGE_LISTING_URL, ID)).params(params));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorageItems(ID, TEST, false, TEST_INT, TEST);\n+        assertResponse(mvcResult, dataStorageListing, DatastorageCreatorUtils.DATA_STORAGE_LISTING_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateDataStorageItemsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_ITEMS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateDataStorageItems() throws Exception {\n+        final List<UpdateDataStorageItemVO> updateList = Collections.singletonList(update);\n+        final List<DataStorageFile> files = Collections.singletonList(file);\n+        final String content = getObjectMapper().writeValueAsString(updateList);\n+        Mockito.doReturn(files).when(mockStorageApiService).updateDataStorageItems(ID, updateList);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(DATASTORAGE_ITEMS_URL, ID)).content(content));\n+\n+        Mockito.verify(mockStorageApiService).updateDataStorageItems(ID, updateList);\n+        assertResponse(mvcResult, files, DatastorageCreatorUtils.DATA_STORAGE_FILE_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadFileForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_ITEMS_UPLOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadFile() throws Exception {\n+        final UploadFileMetadata uploadFileMetadata = new UploadFileMetadata();\n+        final String contentType = MediaType.MULTIPART_FORM_DATA_VALUE + \";boundary=\";\n+        final MockMultipartFile file = new MockMultipartFile(\"data\", \"file.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MockMultipartFile feli = new MockMultipartFile(\"data\", \"file2.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MvcResult mvcResult = mvc().perform(fileUpload(String.format(DATASTORAGE_ITEMS_UPLOAD_URL, ID))\n+                .file(file)\n+                .file(feli)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(contentType)\n+                .param(PATH, TEST))\n+                .andExpect(status().isOk())\n+                .andReturn();\n+\n+        Mockito.verify(mockStorageApiService).createDataStorageFile(ID, TEST, TEST, TEST.getBytes());\n+\n+        assertResponse(mvcResult, uploadFileMetadata, new TypeReference<Result<UploadFileMetadata>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailUploadStreamForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_UPLOAD_STREAM_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadStream() throws Exception {\n+        final UploadFileMetadata uploadFileMetadata = new UploadFileMetadata();\n+        final String contentType = MediaType.MULTIPART_FORM_DATA_VALUE + \";boundary=\";\n+        final MockMultipartFile file =\n+                new MockMultipartFile(\"data\", \"file.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MockMultipartFile feli =\n+                new MockMultipartFile(\"data\", \"file2.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MvcResult mvcResult = mvc().perform(fileUpload(String.format(DATASTORAGE_ITEMS_UPLOAD_URL, ID))\n+                .file(feli)\n+                .file(file)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(contentType)\n+                .param(PATH, TEST))\n+                .andExpect(status().isOk())\n+                .andReturn();\n+\n+\n+        Mockito.verify(mockStorageApiService).createDataStorageFile(ID, TEST, TEST, TEST.getBytes());\n+\n+        assertResponse(mvcResult, uploadFileMetadata, new TypeReference<Result<UploadFileMetadata>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailDownloadStreamForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_DOWNLOAD_STREAM_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDownloadStream() throws Exception {\n+        final DataStorageStreamingContent dataStorageStreamingContent =\n+                DatastorageCreatorUtils.getDataStorageStreamingContent();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(VERSION, TEST);\n+        Mockito.doReturn(dataStorageStreamingContent).when(mockStorageApiService).getStreamingContent(ID, TEST, TEST);\n+\n+        final MvcResult mvcResult = performRequest(\n+                get(String.format(DATASTORAGE_DOWNLOAD_STREAM_URL, ID)).params(params), OCTET_STREAM_CONTENT_TYPE\n+        );\n+\n+        Mockito.verify(mockStorageApiService).getStreamingContent(ID, TEST, TEST);\n+\n+        final String actualData = mvcResult.getResponse().getContentAsString();\n+        Assert.assertEquals(TEST, actualData);", "originalCommit": "f71c06d5dbc9984e4822b1428e66aa9b339b6c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35042f15e33548248f50c8dbf11a645149b7059a", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\nindex ab6e11feb..f0204c25a 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n\n@@ -16,6 +16,7 @@\n \n package com.epam.pipeline.controller.datastorage;\n \n+import com.epam.pipeline.config.JsonMapper;\n import com.epam.pipeline.controller.Result;\n import com.epam.pipeline.controller.vo.DataStorageVO;\n import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NDg5MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r513354891", "bodyText": "Probably TEST_INT can be used here as well.", "author": "tcibinan", "createdAt": "2020-10-28T11:02:50Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java", "diffHunk": "@@ -0,0 +1,1346 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.datastorage;\n+\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.SecuredEntityWithAction;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageFolder;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.datastorage.azure.AzureBlobStorage;\n+import com.epam.pipeline.entity.datastorage.gcp.GSBucketStorage;\n+import com.epam.pipeline.entity.datastorage.nfs.NFSDataStorage;\n+import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n+import com.epam.pipeline.manager.datastorage.DataStorageApiService;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@WebMvcTest(controllers = DataStorageController.class)\n+public class DataStorageControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final int TEST_INT = 1;\n+    private static final String TEST = \"TEST\";\n+    private static final String DATASTORAGE_URL = SERVLET_PATH + \"/datastorage\";\n+    private static final String LOAD_ALL_URL = DATASTORAGE_URL + \"/loadAll\";\n+    private static final String LOAD_AVAILABLE_URL = DATASTORAGE_URL + \"/available\";\n+    private static final String LOAD_AVAILABLE_WITH_MOUNTS = DATASTORAGE_URL + \"/availableWithMounts\";\n+    private static final String LOAD_WRITABLE_URL = DATASTORAGE_URL + \"/mount\";\n+    private static final String BY_ID_URL = DATASTORAGE_URL + \"/%d\";\n+    private static final String LOAD_DATASTORAGE = BY_ID_URL + \"/load\";\n+    private static final String FIND_URL = DATASTORAGE_URL + \"/find\";\n+    private static final String FIND_BY_PATH_URL = DATASTORAGE_URL + \"/findByPath\";\n+    private static final String DATASTORAGE_ITEMS_URL = BY_ID_URL + \"/list\";\n+    private static final String DATASTORAGE_LISTING_URL = DATASTORAGE_ITEMS_URL + \"/page\";\n+    private static final String DATASTORAGE_ITEMS_UPLOAD_URL = DATASTORAGE_ITEMS_URL + \"/upload\";\n+    private static final String DATASTORAGE_UPLOAD_STREAM_URL = BY_ID_URL + \"/upload/stream\";\n+    private static final String DATASTORAGE_DOWNLOAD_STREAM_URL = BY_ID_URL + \"/download\";\n+    private static final String DATASTORAGE_ITEMS_CONTENT = BY_ID_URL + \"/content\";\n+    private static final String DOWNLOAD_REDIRECT_URL = BY_ID_URL + \"/downloadRedirect\";\n+    private static final String GENERATE_URL = BY_ID_URL + \"/generateUrl\";\n+    private static final String GENERATE_UPLOAD_URL = BY_ID_URL + \"/generateUploadUrl\";\n+    private static final String CONTENT_URL = BY_ID_URL + \"/content\";\n+    private static final String RESTORE_VERSION_URL = DATASTORAGE_ITEMS_URL + \"/restore\";\n+    private static final String DATASTORAGE_SAVE_URL= DATASTORAGE_URL + \"/save\";\n+    private static final String DATASTORAGE_UPDATE_URL = DATASTORAGE_URL + \"/update\";\n+    private static final String DATASTORAGE_POLICY_URL = DATASTORAGE_URL + \"/policy\";\n+    private static final String DATASTORAGE_DELETE_URL = BY_ID_URL + \"/delete\";\n+    private static final String DATASTORAGE_RULE_URL = DATASTORAGE_URL + \"/rule\";\n+    private static final String SAVE_RULE_URL = DATASTORAGE_RULE_URL + \"/register\";\n+    private static final String LOAD_RULES_URL = DATASTORAGE_RULE_URL + \"/load\";\n+    private static final String DELETE_RULES_URL = DATASTORAGE_RULE_URL + \"/delete\";\n+    private static final String TEMP_CREDENTIALS_URL = DATASTORAGE_URL + \"/tempCredentials/\";\n+    private static final String TAGS_URL = BY_ID_URL + \"/tags\";\n+    private static final String TAGS_LIST_URL = TAGS_URL + \"/list\";\n+    private static final String SHARED_LINK_URL = BY_ID_URL + \"/sharedLink\";\n+    private static final String PERMISSION_URL = DATASTORAGE_URL + \"/permission\";\n+    private static final String PATH_URL = DATASTORAGE_URL + \"/path\";\n+    private static final String PATH_SIZE_URL = PATH_URL + \"/size\";\n+    private static final String PATH_USAGE_URL = PATH_URL + \"/usage\";\n+    private static final String SHARED_STORAGE_URL = DATASTORAGE_URL + \"/sharedStorage\";\n+    private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String FALSE_AS_STRING = String.valueOf(false);\n+    private static final String FROM_REGION = \"fromRegion\";\n+    private static final String ID_PARAM = \"id\";\n+    private static final String PATH = \"path\";\n+    private static final String SHOW_VERSION = \"showVersion\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String MARKER = \"marker\";\n+    private static final String VERSION = \"version\";\n+    private static final String TOTALLY = \"totally\";\n+    private static final String TEST_PATH = \"localhost:root/\";\n+    private static final String CONTENT_DISPOSITION_PARAM = \"contentDisposition\";\n+    private static final String CLOUD = \"cloud\";\n+    private static final String SKIP_POLICY = \"skipPolicy\";\n+    private static final String PIPELINE_ID = \"pipelineId\";\n+    private static final String FILE_MASK = \"fileMask\";\n+    private static final String FILTER_MASK = \"filterMask\";\n+    private static final String REWRITE = \"rewrite\";\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String PAGE = \"page\";\n+    private static final String RUN_ID = \"runId\";\n+    private static final ContentDisposition CONTENT_DISPOSITION = ContentDisposition.INLINE;\n+    private static final Map<String, String> TAGS = Collections.singletonMap(TEST, TEST);\n+    private static final TypeReference<Result<Integer>> INTEGER_TYPE = new TypeReference<Result<Integer>>() { };\n+    private static final TypeReference<Result<Object>> OBJECT_TYPE = new TypeReference<Result<Object>>() { };\n+    private static final TypeReference<Result<String>> STRING_TYPE = new TypeReference<Result<String>>() { };\n+    private static final TypeReference<Result<Map<String, String>>> STRING_STRING_MAP_TYPE =\n+            new TypeReference<Result<Map<String, String>>>() { };\n+    private final DataStorageRule dataStorageRule = DatastorageCreatorUtils.getDataStorageRule();\n+    private final S3bucketDataStorage s3Bucket = DatastorageCreatorUtils.getS3bucketDataStorage();\n+    private final AzureBlobStorage azureBlob = DatastorageCreatorUtils.getAzureBlobStorage();\n+    private final GSBucketStorage gsBucket = DatastorageCreatorUtils.getGsBucketStorage();\n+    private final NFSDataStorage nfsDataStorage = DatastorageCreatorUtils.getNfsDataStorage();\n+    private final DataStorageFile file = DatastorageCreatorUtils.getDataStorageFile();\n+    private final DataStorageFolder folder = DatastorageCreatorUtils.getDataStorageFolder();\n+    private final UpdateDataStorageItemVO update = DatastorageCreatorUtils.getUpdateDataStorageItemVO();\n+\n+    @Autowired\n+    private DataStorageApiService mockStorageApiService;\n+\n+    @Test\n+    public void shouldFaiGetDataStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getDataStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetAvailableStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_AVAILABLE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetAvailableStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getAvailableStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_AVAILABLE_URL));\n+\n+        Mockito.verify(mockStorageApiService).getAvailableStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetAvailableStoragesWithMountObjectsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_AVAILABLE_WITH_MOUNTS));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetAvailableStoragesWithMountObjects() throws Exception {\n+        final List<DataStorageWithShareMount> storagesWithShareMounts =\n+                Collections.singletonList(DatastorageCreatorUtils.getDataStorageWithShareMount());\n+        Mockito.doReturn(storagesWithShareMounts).when(mockStorageApiService).getAvailableStoragesWithShareMount(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_AVAILABLE_WITH_MOUNTS).param(FROM_REGION, ID_AS_STRING));\n+\n+        Mockito.verify(mockStorageApiService).getAvailableStoragesWithShareMount(ID);\n+        assertResponse(mvcResult, storagesWithShareMounts, DatastorageCreatorUtils.DS_WITH_SHARE_MOUNT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetWritableDataStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_WRITABLE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetWritableDataStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getWritableStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_WRITABLE_URL));\n+\n+        Mockito.verify(mockStorageApiService).getWritableStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadDataStorageForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadS3BucketDataStorage() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAzureBlobStorage() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadGSBucketStorage() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadNFS3DataStorage() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindDataStorageForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindS3BucketStorage() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAzureBlobStorage() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGSBucketStorage() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindNFSDataStorage() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindDataStorageByPathForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(FIND_BY_PATH_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindS3BucketStorageByPath() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAzureBlobStorageByPath() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGSBucketStorageByPath() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindNFSDataStorageByPath() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetDataStorageItemsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageFolder() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final List<DataStorageFolder> folders = Collections.singletonList(folder);\n+        dataStorageListing.setResults(Collections.singletonList(folder));\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, FALSE_AS_STRING);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItems(ID, TEST, false, null, null\n+        );\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)).params(params));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorageItems(ID, TEST, false, null, null);\n+        assertResponse(mvcResult, folders, DatastorageCreatorUtils.DATA_STORAGE_FOLDER_LIST_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageOwnerFile() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final List<DataStorageFile> files = Collections.singletonList(file);\n+        dataStorageListing.setResults(Collections.singletonList(file));\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, TRUE_AS_STRING);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItemsOwner(ID, TEST, true, null, null\n+        );\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)).params(params));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorageItemsOwner(ID, TEST, true, null, null);\n+        assertResponse(mvcResult, files, DatastorageCreatorUtils.DATA_STORAGE_FILE_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetDataStorageItemsListingForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_LISTING_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageItems() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, FALSE_AS_STRING);\n+        params.add(PAGE_SIZE, ID_AS_STRING);\n+        params.add(MARKER, TEST);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItems(ID, TEST, false, TEST_INT, TEST\n+        );\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(DATASTORAGE_LISTING_URL, ID)).params(params));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorageItems(ID, TEST, false, TEST_INT, TEST);\n+        assertResponse(mvcResult, dataStorageListing, DatastorageCreatorUtils.DATA_STORAGE_LISTING_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateDataStorageItemsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_ITEMS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateDataStorageItems() throws Exception {\n+        final List<UpdateDataStorageItemVO> updateList = Collections.singletonList(update);\n+        final List<DataStorageFile> files = Collections.singletonList(file);\n+        final String content = getObjectMapper().writeValueAsString(updateList);\n+        Mockito.doReturn(files).when(mockStorageApiService).updateDataStorageItems(ID, updateList);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(DATASTORAGE_ITEMS_URL, ID)).content(content));\n+\n+        Mockito.verify(mockStorageApiService).updateDataStorageItems(ID, updateList);\n+        assertResponse(mvcResult, files, DatastorageCreatorUtils.DATA_STORAGE_FILE_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadFileForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_ITEMS_UPLOAD_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadFile() throws Exception {\n+        final UploadFileMetadata uploadFileMetadata = new UploadFileMetadata();\n+        final String contentType = MediaType.MULTIPART_FORM_DATA_VALUE + \";boundary=\";\n+        final MockMultipartFile file = new MockMultipartFile(\"data\", \"file.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MockMultipartFile feli = new MockMultipartFile(\"data\", \"file2.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MvcResult mvcResult = mvc().perform(fileUpload(String.format(DATASTORAGE_ITEMS_UPLOAD_URL, ID))\n+                .file(file)\n+                .file(feli)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(contentType)\n+                .param(PATH, TEST))\n+                .andExpect(status().isOk())\n+                .andReturn();\n+\n+        Mockito.verify(mockStorageApiService).createDataStorageFile(ID, TEST, TEST, TEST.getBytes());\n+\n+        assertResponse(mvcResult, uploadFileMetadata, new TypeReference<Result<UploadFileMetadata>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailUploadStreamForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_UPLOAD_STREAM_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadStream() throws Exception {\n+        final UploadFileMetadata uploadFileMetadata = new UploadFileMetadata();\n+        final String contentType = MediaType.MULTIPART_FORM_DATA_VALUE + \";boundary=\";\n+        final MockMultipartFile file =\n+                new MockMultipartFile(\"data\", \"file.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MockMultipartFile feli =\n+                new MockMultipartFile(\"data\", \"file2.txt\", \"text/plain\", \"some xml\".getBytes());\n+        final MvcResult mvcResult = mvc().perform(fileUpload(String.format(DATASTORAGE_ITEMS_UPLOAD_URL, ID))\n+                .file(feli)\n+                .file(file)\n+                .servletPath(SERVLET_PATH)\n+                .contentType(contentType)\n+                .param(PATH, TEST))\n+                .andExpect(status().isOk())\n+                .andReturn();\n+\n+\n+        Mockito.verify(mockStorageApiService).createDataStorageFile(ID, TEST, TEST, TEST.getBytes());\n+\n+        assertResponse(mvcResult, uploadFileMetadata, new TypeReference<Result<UploadFileMetadata>>() { });\n+    }\n+\n+    @Test\n+    public void shouldFailDownloadStreamForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_DOWNLOAD_STREAM_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDownloadStream() throws Exception {\n+        final DataStorageStreamingContent dataStorageStreamingContent =\n+                DatastorageCreatorUtils.getDataStorageStreamingContent();\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(VERSION, TEST);\n+        Mockito.doReturn(dataStorageStreamingContent).when(mockStorageApiService).getStreamingContent(ID, TEST, TEST);\n+\n+        final MvcResult mvcResult = performRequest(\n+                get(String.format(DATASTORAGE_DOWNLOAD_STREAM_URL, ID)).params(params), OCTET_STREAM_CONTENT_TYPE\n+        );\n+\n+        Mockito.verify(mockStorageApiService).getStreamingContent(ID, TEST, TEST);\n+\n+        final String actualData = mvcResult.getResponse().getContentAsString();\n+        Assert.assertEquals(TEST, actualData);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadStorageItemForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(post(String.format(DATASTORAGE_ITEMS_CONTENT, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadStorageItem() throws Exception {\n+        Mockito.doReturn(file).when(\n+                mockStorageApiService).createDataStorageFile(ID, TEST, TEST.getBytes(Charset.defaultCharset())\n+        );\n+        final String content = getObjectMapper().writeValueAsString(TEST);\n+\n+        final MvcResult mvcResult = performRequest(\n+                post(String.format(DATASTORAGE_ITEMS_CONTENT, ID)).param(PATH, TEST).content(content)\n+        );\n+\n+        Mockito.verify(mockStorageApiService).createDataStorageFile(ID, TEST, TEST.getBytes(Charset.defaultCharset()));\n+        assertResponse(mvcResult, file, DatastorageCreatorUtils.DATA_STORAGE_FILE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteDataStorageItemForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(delete(String.format(DATASTORAGE_ITEMS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteDataStorageItems() throws Exception {\n+        final List<UpdateDataStorageItemVO> updateList = Collections.singletonList(update);\n+        final String content = getObjectMapper().writeValueAsString(updateList);\n+        Mockito.doReturn(TEST_INT).when(mockStorageApiService).deleteDataStorageItems(ID, updateList, false);\n+\n+        final MvcResult mvcResult = performRequest(\n+                delete(String.format(DATASTORAGE_ITEMS_URL, ID)).param(TOTALLY, FALSE_AS_STRING).content(content)\n+        );\n+\n+        Mockito.verify(mockStorageApiService).deleteDataStorageItems(ID, updateList, false);\n+        assertResponse(mvcResult, TEST_INT, INTEGER_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteDataStorageItemsOwner() throws Exception {\n+        final List<UpdateDataStorageItemVO> updateList = Collections.singletonList(update);\n+        final String content = getObjectMapper().writeValueAsString(updateList);\n+        Mockito.doReturn(1).when(mockStorageApiService).deleteDataStorageItemsOwner(ID, updateList, true);", "originalCommit": "f71c06d5dbc9984e4822b1428e66aa9b339b6c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "35042f15e33548248f50c8dbf11a645149b7059a", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\nindex ab6e11feb..f0204c25a 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n\n@@ -16,6 +16,7 @@\n \n package com.epam.pipeline.controller.datastorage;\n \n+import com.epam.pipeline.config.JsonMapper;\n import com.epam.pipeline.controller.Result;\n import com.epam.pipeline.controller.vo.DataStorageVO;\n import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMDM0NQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r514100345", "bodyText": "Could you please use the following syntax? It was a discussion on leaving a closing parenthesis on a new line way before and it was considered as not a java-ish syntax :)\nMockito.doReturn(dataStorageListing)\n    .when(mockStorageApiService).getDataStorageItems(ID, TEST, false, null, null);", "author": "tcibinan", "createdAt": "2020-10-29T09:01:38Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java", "diffHunk": "@@ -0,0 +1,1374 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.datastorage;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.controller.vo.DataStorageVO;\n+import com.epam.pipeline.controller.vo.GenerateDownloadUrlVO;\n+import com.epam.pipeline.controller.vo.UploadFileMetadata;\n+import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n+import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n+import com.epam.pipeline.entity.SecuredEntityWithAction;\n+import com.epam.pipeline.entity.datastorage.ContentDisposition;\n+import com.epam.pipeline.entity.datastorage.DataStorageAction;\n+import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n+import com.epam.pipeline.entity.datastorage.DataStorageFile;\n+import com.epam.pipeline.entity.datastorage.DataStorageFolder;\n+import com.epam.pipeline.entity.datastorage.DataStorageItemContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageListing;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n+import com.epam.pipeline.entity.datastorage.PathDescription;\n+import com.epam.pipeline.entity.datastorage.StorageMountPath;\n+import com.epam.pipeline.entity.datastorage.StorageUsage;\n+import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n+import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n+import com.epam.pipeline.entity.datastorage.azure.AzureBlobStorage;\n+import com.epam.pipeline.entity.datastorage.gcp.GSBucketStorage;\n+import com.epam.pipeline.entity.datastorage.nfs.NFSDataStorage;\n+import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n+import com.epam.pipeline.manager.datastorage.DataStorageApiService;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+\n+@WebMvcTest(controllers = DataStorageController.class)\n+public class DataStorageControllerTest extends AbstractControllerTest {\n+\n+    private static final long ID = 1L;\n+    private static final int TEST_INT = 1;\n+    private static final String TEST = \"TEST\";\n+    private static final String DATASTORAGE_URL = SERVLET_PATH + \"/datastorage\";\n+    private static final String LOAD_ALL_URL = DATASTORAGE_URL + \"/loadAll\";\n+    private static final String LOAD_AVAILABLE_URL = DATASTORAGE_URL + \"/available\";\n+    private static final String LOAD_AVAILABLE_WITH_MOUNTS = DATASTORAGE_URL + \"/availableWithMounts\";\n+    private static final String LOAD_WRITABLE_URL = DATASTORAGE_URL + \"/mount\";\n+    private static final String BY_ID_URL = DATASTORAGE_URL + \"/%d\";\n+    private static final String LOAD_DATASTORAGE = BY_ID_URL + \"/load\";\n+    private static final String FIND_URL = DATASTORAGE_URL + \"/find\";\n+    private static final String FIND_BY_PATH_URL = DATASTORAGE_URL + \"/findByPath\";\n+    private static final String DATASTORAGE_ITEMS_URL = BY_ID_URL + \"/list\";\n+    private static final String DATASTORAGE_LISTING_URL = DATASTORAGE_ITEMS_URL + \"/page\";\n+    private static final String DATASTORAGE_ITEMS_UPLOAD_URL = DATASTORAGE_ITEMS_URL + \"/upload\";\n+    private static final String DATASTORAGE_UPLOAD_STREAM_URL = BY_ID_URL + \"/upload/stream\";\n+    private static final String DATASTORAGE_DOWNLOAD_STREAM_URL = BY_ID_URL + \"/download\";\n+    private static final String DATASTORAGE_ITEMS_CONTENT = BY_ID_URL + \"/content\";\n+    private static final String DOWNLOAD_REDIRECT_URL = BY_ID_URL + \"/downloadRedirect\";\n+    private static final String GENERATE_URL = BY_ID_URL + \"/generateUrl\";\n+    private static final String GENERATE_UPLOAD_URL = BY_ID_URL + \"/generateUploadUrl\";\n+    private static final String CONTENT_URL = BY_ID_URL + \"/content\";\n+    private static final String RESTORE_VERSION_URL = DATASTORAGE_ITEMS_URL + \"/restore\";\n+    private static final String DATASTORAGE_SAVE_URL= DATASTORAGE_URL + \"/save\";\n+    private static final String DATASTORAGE_UPDATE_URL = DATASTORAGE_URL + \"/update\";\n+    private static final String DATASTORAGE_POLICY_URL = DATASTORAGE_URL + \"/policy\";\n+    private static final String DATASTORAGE_DELETE_URL = BY_ID_URL + \"/delete\";\n+    private static final String DATASTORAGE_RULE_URL = DATASTORAGE_URL + \"/rule\";\n+    private static final String SAVE_RULE_URL = DATASTORAGE_RULE_URL + \"/register\";\n+    private static final String LOAD_RULES_URL = DATASTORAGE_RULE_URL + \"/load\";\n+    private static final String DELETE_RULES_URL = DATASTORAGE_RULE_URL + \"/delete\";\n+    private static final String TEMP_CREDENTIALS_URL = DATASTORAGE_URL + \"/tempCredentials/\";\n+    private static final String TAGS_URL = BY_ID_URL + \"/tags\";\n+    private static final String TAGS_LIST_URL = TAGS_URL + \"/list\";\n+    private static final String SHARED_LINK_URL = BY_ID_URL + \"/sharedLink\";\n+    private static final String PERMISSION_URL = DATASTORAGE_URL + \"/permission\";\n+    private static final String PATH_URL = DATASTORAGE_URL + \"/path\";\n+    private static final String PATH_SIZE_URL = PATH_URL + \"/size\";\n+    private static final String PATH_USAGE_URL = PATH_URL + \"/usage\";\n+    private static final String SHARED_STORAGE_URL = DATASTORAGE_URL + \"/sharedStorage\";\n+    private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";\n+    private static final String ID_AS_STRING = String.valueOf(ID);\n+    private static final String TRUE_AS_STRING = String.valueOf(true);\n+    private static final String FALSE_AS_STRING = String.valueOf(false);\n+    private static final String FROM_REGION = \"fromRegion\";\n+    private static final String ID_PARAM = \"id\";\n+    private static final String PATH = \"path\";\n+    private static final String SHOW_VERSION = \"showVersion\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String MARKER = \"marker\";\n+    private static final String VERSION = \"version\";\n+    private static final String TOTALLY = \"totally\";\n+    private static final String TEST_PATH = \"localhost:root/\";\n+    private static final String CONTENT_DISPOSITION_PARAM = \"contentDisposition\";\n+    private static final String CLOUD = \"cloud\";\n+    private static final String SKIP_POLICY = \"skipPolicy\";\n+    private static final String PIPELINE_ID = \"pipelineId\";\n+    private static final String FILE_MASK = \"fileMask\";\n+    private static final String FILTER_MASK = \"filterMask\";\n+    private static final String REWRITE = \"rewrite\";\n+    private static final String EMPTY_STRING = \"\";\n+    private static final String PAGE = \"page\";\n+    private static final String RUN_ID = \"runId\";\n+    private static final String FILE_NAME = \"file.txt\";\n+    private static final String FILE_SIZE = \"0 Kb\";\n+    private static final String MULTIPART_CONTENT_TYPE =\n+            \"multipart/form-data; boundary=--------------------------boundary\";\n+    private static final String MULTIPART_CONTENT = \"----------------------------boundary\\r\\n\" +\n+            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n+            \"Content-Type: application/octet-stream\\r\\n\" +\n+            \"\\r\\n\" +\n+            TEST +\n+            \"\\r\\n\" +\n+            \"----------------------------boundary--\";\n+    private static final ContentDisposition CONTENT_DISPOSITION = ContentDisposition.INLINE;\n+    private static final Map<String, String> TAGS = Collections.singletonMap(TEST, TEST);\n+    private static final TypeReference<Result<Integer>> INTEGER_TYPE = new TypeReference<Result<Integer>>() { };\n+    private static final TypeReference<Result<Object>> OBJECT_TYPE = new TypeReference<Result<Object>>() { };\n+    private static final TypeReference<Result<String>> STRING_TYPE = new TypeReference<Result<String>>() { };\n+    private static final TypeReference<Result<Map<String, String>>> STRING_STRING_MAP_TYPE =\n+            new TypeReference<Result<Map<String, String>>>() { };\n+    private final DataStorageRule dataStorageRule = DatastorageCreatorUtils.getDataStorageRule();\n+    private final S3bucketDataStorage s3Bucket = DatastorageCreatorUtils.getS3bucketDataStorage();\n+    private final AzureBlobStorage azureBlob = DatastorageCreatorUtils.getAzureBlobStorage();\n+    private final GSBucketStorage gsBucket = DatastorageCreatorUtils.getGsBucketStorage();\n+    private final NFSDataStorage nfsDataStorage = DatastorageCreatorUtils.getNfsDataStorage();\n+    private final DataStorageFile file = DatastorageCreatorUtils.getDataStorageFile();\n+    private final DataStorageFolder folder = DatastorageCreatorUtils.getDataStorageFolder();\n+    private final UpdateDataStorageItemVO update = DatastorageCreatorUtils.getUpdateDataStorageItemVO();\n+\n+    @Autowired\n+    private DataStorageApiService mockStorageApiService;\n+\n+    @Test\n+    public void shouldFaiGetDataStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_ALL_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getDataStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_ALL_URL));\n+\n+        Mockito.verify(mockStorageApiService).getDataStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetAvailableStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_AVAILABLE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetAvailableStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getAvailableStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_AVAILABLE_URL));\n+\n+        Mockito.verify(mockStorageApiService).getAvailableStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetAvailableStoragesWithMountObjectsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_AVAILABLE_WITH_MOUNTS));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetAvailableStoragesWithMountObjects() throws Exception {\n+        final List<DataStorageWithShareMount> storagesWithShareMounts =\n+                Collections.singletonList(DatastorageCreatorUtils.getDataStorageWithShareMount());\n+        Mockito.doReturn(storagesWithShareMounts).when(mockStorageApiService).getAvailableStoragesWithShareMount(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_AVAILABLE_WITH_MOUNTS).param(FROM_REGION, ID_AS_STRING));\n+\n+        Mockito.verify(mockStorageApiService).getAvailableStoragesWithShareMount(ID);\n+        assertResponse(mvcResult, storagesWithShareMounts, DatastorageCreatorUtils.DS_WITH_SHARE_MOUNT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetWritableDataStoragesForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(LOAD_WRITABLE_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetWritableDataStorages() throws Exception {\n+        final List<S3bucketDataStorage> dataStorages = Collections.singletonList(s3Bucket);\n+        Mockito.doReturn(dataStorages).when(mockStorageApiService).getWritableStorages();\n+\n+        final MvcResult mvcResult = performRequest(get(LOAD_WRITABLE_URL));\n+\n+        Mockito.verify(mockStorageApiService).getWritableStorages();\n+        assertResponse(mvcResult, dataStorages, DatastorageCreatorUtils.S3BUCKET_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadDataStorageForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadS3BucketDataStorage() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadAzureBlobStorage() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadGSBucketStorage() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadNFS3DataStorage() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).load(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(LOAD_DATASTORAGE, ID)));\n+\n+        Mockito.verify(mockStorageApiService).load(ID);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindDataStorageForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(FIND_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindS3BucketStorage() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAzureBlobStorage() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGSBucketStorage() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindNFSDataStorage() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).loadByNameOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByNameOrId(TEST);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailFindDataStorageByPathForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(FIND_BY_PATH_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindS3BucketStorageByPath() throws Exception {\n+        Mockito.doReturn(s3Bucket).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, s3Bucket, DatastorageCreatorUtils.S3_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAzureBlobStorageByPath() throws Exception {\n+        Mockito.doReturn(azureBlob).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, azureBlob, DatastorageCreatorUtils.AZURE_BLOB_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindGSBucketStorageByPath() throws Exception {\n+        Mockito.doReturn(gsBucket).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, gsBucket, DatastorageCreatorUtils.GS_BUCKET_TYPE);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindNFSDataStorageByPath() throws Exception {\n+        Mockito.doReturn(nfsDataStorage).when(mockStorageApiService).loadByPathOrId(TEST);\n+\n+        final MvcResult mvcResult = performRequest(get(FIND_BY_PATH_URL).param(ID_PARAM, TEST));\n+\n+        Mockito.verify(mockStorageApiService).loadByPathOrId(TEST);\n+        assertResponse(mvcResult, nfsDataStorage, DatastorageCreatorUtils.NFS_STORAGE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailGetDataStorageItemsForUnauthorizedUser() throws Exception {\n+        performUnauthorizedRequest(get(String.format(DATASTORAGE_ITEMS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldGetDataStorageFolder() throws Exception {\n+        final DataStorageListing dataStorageListing = DatastorageCreatorUtils.getDataStorageListing();\n+        final List<DataStorageFolder> folders = Collections.singletonList(folder);\n+        dataStorageListing.setResults(Collections.singletonList(folder));\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        params.add(PATH, TEST);\n+        params.add(SHOW_VERSION, FALSE_AS_STRING);\n+        Mockito.doReturn(dataStorageListing).when(\n+                mockStorageApiService).getDataStorageItems(ID, TEST, false, null, null\n+        );", "originalCommit": "a51fec1b5d003fba6db0900823a74a90d76b4b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18a24933f9d9324a58c7c4d2230aa8b3d09c4f64", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\nindex ff31b9f59..439170c15 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n\n@@ -24,6 +24,7 @@ import com.epam.pipeline.controller.vo.UploadFileMetadata;\n import com.epam.pipeline.controller.vo.data.storage.UpdateDataStorageItemVO;\n import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n import com.epam.pipeline.entity.SecuredEntityWithAction;\n+import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.ContentDisposition;\n import com.epam.pipeline.entity.datastorage.DataStorageAction;\n import com.epam.pipeline.entity.datastorage.DataStorageDownloadFileUrl;\n"}}, {"oid": "18a24933f9d9324a58c7c4d2230aa8b3d09c4f64", "url": "https://github.com/epam/cloud-pipeline/commit/18a24933f9d9324a58c7c4d2230aa8b3d09c4f64", "message": "Issue #1405: datastorage controllers tests refactoring", "committedDate": "2020-10-29T14:22:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMTAzOQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r514901039", "bodyText": "Let's use @SneakyThrows for all similar request methods just to be consistent.", "author": "tcibinan", "createdAt": "2020-10-30T06:50:25Z", "path": "api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java", "diffHunk": "@@ -130,11 +136,18 @@ public MvcResult performRequest(final MockHttpServletRequestBuilder requestBuild\n ", "originalCommit": "18a24933f9d9324a58c7c4d2230aa8b3d09c4f64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdf65a4175f6d499d379eadc613f22eb6514ae2d", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\nindex 02861b1d9..19bd12751 100644\n--- a/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/test/web/AbstractControllerTest.java\n\n@@ -134,8 +134,9 @@ public abstract class AbstractControllerTest {\n                 .andReturn();\n     }\n \n+    @SneakyThrows\n     public MvcResult performRedirectedRequest(final MockHttpServletRequestBuilder requestBuilder,\n-                                              final String redirectUrl) throws Exception {\n+                                              final String redirectUrl) {\n         return mockMvc.perform(requestBuilder\n                 .servletPath(SERVLET_PATH)\n                 .contentType(EXPECTED_CONTENT_TYPE))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMzYwMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r514903603", "bodyText": "I suppose we can extract the variable to class field and rename it.", "author": "tcibinan", "createdAt": "2020-10-30T06:59:15Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java", "diffHunk": "@@ -1363,12 +972,120 @@ public void shouldFailGetSharedFSSPathForRunForUnauthorizedUser() throws Excepti\n     @WithMockUser\n     public void shouldGetSharedFSSPathForRun() throws Exception {\n         final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n-\n         Mockito.doReturn(storageMountPath).when(mockStorageApiService).getSharedFSSPathForRun(ID, false);\n \n         final MvcResult mvcResult = performRequest(get(SHARED_STORAGE_URL).param(RUN_ID, ID_AS_STRING));\n \n         Mockito.verify(mockStorageApiService).getSharedFSSPathForRun(ID, false);\n         assertResponse(mvcResult, storageMountPath, DatastorageCreatorUtils.STORAGE_MOUNT_PATH_TYPE);\n     }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldFindAnyDataStorage() {\n+        storageTypeReferenceMap.keySet().forEach(dataStorage -> {\n+            Mockito.doReturn(dataStorage).when(mockStorageApiService).loadByNameOrId(TEST);\n+            final MvcResult mvcResult = performRequest(get(FIND_URL).param(ID_PARAM, TEST));\n+\n+            Assert.assertNotNull(mvcResult);\n+            assertResponse(mvcResult, dataStorage, storageTypeReferenceMap.get(dataStorage));\n+        });\n+        Mockito.verify(mockStorageApiService, Mockito.times(storageTypeReferenceMap.size())).loadByNameOrId(TEST);\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldRegisterAnyDataStorage() throws Exception {\n+        final DataStorageVO dataStorageVO = DatastorageCreatorUtils.getDataStorageVO();\n+        final String content = getObjectMapper().writeValueAsString(dataStorageVO);\n+        final MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\n+        final Map<AbstractDataStorage, TypeReference> map = DatastorageCreatorUtils.getSecuredTypeStoragesMap();", "originalCommit": "18a24933f9d9324a58c7c4d2230aa8b3d09c4f64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdf65a4175f6d499d379eadc613f22eb6514ae2d", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\nindex 439170c15..7c6093070 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n\n@@ -964,13 +966,13 @@ public class DataStorageControllerTest extends AbstractControllerTest {\n     }\n \n     @Test\n-    public void shouldFailGetSharedFSSPathForRunForUnauthorizedUser() throws Exception {\n+    public void shouldFailGetSharedFSSPathForRunForUnauthorizedUser() {\n         performUnauthorizedRequest(get(SHARED_STORAGE_URL));\n     }\n \n     @Test\n     @WithMockUser\n-    public void shouldGetSharedFSSPathForRun() throws Exception {\n+    public void shouldGetSharedFSSPathForRun() {\n         final StorageMountPath storageMountPath = DatastorageCreatorUtils.getStorageMountPath();\n         Mockito.doReturn(storageMountPath).when(mockStorageApiService).getSharedFSSPathForRun(ID, false);\n \n"}}, {"oid": "cdf65a4175f6d499d379eadc613f22eb6514ae2d", "url": "https://github.com/epam/cloud-pipeline/commit/cdf65a4175f6d499d379eadc613f22eb6514ae2d", "message": "Issue #1405: Added SneakyThrows to the rest of the performRequest methods", "committedDate": "2020-10-30T08:03:19Z", "type": "commit"}, {"oid": "cdf65a4175f6d499d379eadc613f22eb6514ae2d", "url": "https://github.com/epam/cloud-pipeline/commit/cdf65a4175f6d499d379eadc613f22eb6514ae2d", "message": "Issue #1405: Added SneakyThrows to the rest of the performRequest methods", "committedDate": "2020-10-30T08:03:19Z", "type": "forcePushed"}, {"oid": "e19dff0a7824a3792c1e77a402d2aa9381ffdf61", "url": "https://github.com/epam/cloud-pipeline/commit/e19dff0a7824a3792c1e77a402d2aa9381ffdf61", "message": "Issue #1405: Replaced Map with Pair for test with AbstractDataStorage", "committedDate": "2020-10-30T10:37:38Z", "type": "commit"}, {"oid": "0d2c04efea041152b397b49b065ce6b2b819bf9e", "url": "https://github.com/epam/cloud-pipeline/commit/0d2c04efea041152b397b49b065ce6b2b819bf9e", "message": "Issue #1405: DataStorageControllerTest split into 3 test classes", "committedDate": "2020-10-30T12:44:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3Mzk3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1508#discussion_r515773978", "bodyText": "Could you please move remaining data storage rules tests to the corresponding rules test class? Additionally restore, upload and tags tests should be moved to the items test class.", "author": "tcibinan", "createdAt": "2020-11-02T07:10:34Z", "path": "api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java", "diffHunk": "@@ -40,129 +33,30 @@\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n-import com.epam.pipeline.manager.datastorage.DataStorageApiService;\n import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n-import com.epam.pipeline.test.web.AbstractControllerTest;\n import com.fasterxml.jackson.core.type.TypeReference;\n-import org.apache.commons.lang3.tuple.Pair;\n import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.Mockito;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.test.web.servlet.MvcResult;\n import org.springframework.util.LinkedMultiValueMap;\n import org.springframework.util.MultiValueMap;\n \n import java.io.InputStream;\n-import java.nio.charset.Charset;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n import java.util.Set;\n \n-import static com.epam.pipeline.test.creator.CommonCreatorConstants.INTEGER_TYPE;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.OBJECT_TYPE;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.STRING_STRING_MAP_TYPE;\n import static com.epam.pipeline.test.creator.CommonCreatorConstants.STRING_TYPE;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n \n-@WebMvcTest(controllers = DataStorageController.class)\n-public class DataStorageControllerTest extends AbstractControllerTest {\n-\n-    private static final long ID = 1L;\n-    private static final int TEST_INT = 1;\n-    private static final String TEST = \"TEST\";\n-    private static final String DATASTORAGE_URL = SERVLET_PATH + \"/datastorage\";\n-    private static final String LOAD_ALL_URL = DATASTORAGE_URL + \"/loadAll\";\n-    private static final String LOAD_AVAILABLE_URL = DATASTORAGE_URL + \"/available\";\n-    private static final String LOAD_AVAILABLE_WITH_MOUNTS = DATASTORAGE_URL + \"/availableWithMounts\";\n-    private static final String LOAD_WRITABLE_URL = DATASTORAGE_URL + \"/mount\";\n-    private static final String BY_ID_URL = DATASTORAGE_URL + \"/%d\";\n-    private static final String LOAD_DATASTORAGE = BY_ID_URL + \"/load\";\n-    private static final String FIND_URL = DATASTORAGE_URL + \"/find\";\n-    private static final String FIND_BY_PATH_URL = DATASTORAGE_URL + \"/findByPath\";\n-    private static final String DATASTORAGE_ITEMS_URL = BY_ID_URL + \"/list\";\n-    private static final String DATASTORAGE_LISTING_URL = DATASTORAGE_ITEMS_URL + \"/page\";\n-    private static final String DATASTORAGE_ITEMS_UPLOAD_URL = DATASTORAGE_ITEMS_URL + \"/upload\";\n-    private static final String DATASTORAGE_UPLOAD_STREAM_URL = BY_ID_URL + \"/upload/stream\";\n-    private static final String DATASTORAGE_DOWNLOAD_STREAM_URL = BY_ID_URL + \"/download\";\n-    private static final String DATASTORAGE_ITEMS_CONTENT = BY_ID_URL + \"/content\";\n-    private static final String DOWNLOAD_REDIRECT_URL = BY_ID_URL + \"/downloadRedirect\";\n-    private static final String GENERATE_URL = BY_ID_URL + \"/generateUrl\";\n-    private static final String GENERATE_UPLOAD_URL = BY_ID_URL + \"/generateUploadUrl\";\n-    private static final String CONTENT_URL = BY_ID_URL + \"/content\";\n-    private static final String RESTORE_VERSION_URL = DATASTORAGE_ITEMS_URL + \"/restore\";\n-    private static final String DATASTORAGE_SAVE_URL= DATASTORAGE_URL + \"/save\";\n-    private static final String DATASTORAGE_UPDATE_URL = DATASTORAGE_URL + \"/update\";\n-    private static final String DATASTORAGE_POLICY_URL = DATASTORAGE_URL + \"/policy\";\n-    private static final String DATASTORAGE_DELETE_URL = BY_ID_URL + \"/delete\";\n-    private static final String DATASTORAGE_RULE_URL = DATASTORAGE_URL + \"/rule\";\n-    private static final String SAVE_RULE_URL = DATASTORAGE_RULE_URL + \"/register\";\n-    private static final String LOAD_RULES_URL = DATASTORAGE_RULE_URL + \"/load\";\n-    private static final String DELETE_RULES_URL = DATASTORAGE_RULE_URL + \"/delete\";\n-    private static final String TEMP_CREDENTIALS_URL = DATASTORAGE_URL + \"/tempCredentials/\";\n-    private static final String TAGS_URL = BY_ID_URL + \"/tags\";\n-    private static final String TAGS_LIST_URL = TAGS_URL + \"/list\";\n-    private static final String SHARED_LINK_URL = BY_ID_URL + \"/sharedLink\";\n-    private static final String PERMISSION_URL = DATASTORAGE_URL + \"/permission\";\n-    private static final String PATH_URL = DATASTORAGE_URL + \"/path\";\n-    private static final String PATH_SIZE_URL = PATH_URL + \"/size\";\n-    private static final String PATH_USAGE_URL = PATH_URL + \"/usage\";\n-    private static final String SHARED_STORAGE_URL = DATASTORAGE_URL + \"/sharedStorage\";\n-    private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";\n-    private static final String ID_AS_STRING = String.valueOf(ID);\n-    private static final String TRUE_AS_STRING = String.valueOf(true);\n-    private static final String FALSE_AS_STRING = String.valueOf(false);\n-    private static final String FROM_REGION = \"fromRegion\";\n-    private static final String ID_PARAM = \"id\";\n-    private static final String PATH = \"path\";\n-    private static final String SHOW_VERSION = \"showVersion\";\n-    private static final String PAGE_SIZE = \"pageSize\";\n-    private static final String MARKER = \"marker\";\n-    private static final String VERSION = \"version\";\n-    private static final String TOTALLY = \"totally\";\n-    private static final String TEST_PATH = \"localhost:root/\";\n-    private static final String CONTENT_DISPOSITION_PARAM = \"contentDisposition\";\n-    private static final String CONTENT_DISPOSITION_HEADER = \"Content-Disposition\";\n-    private static final String CLOUD = \"cloud\";\n-    private static final String SKIP_POLICY = \"skipPolicy\";\n-    private static final String PIPELINE_ID = \"pipelineId\";\n-    private static final String FILE_MASK = \"fileMask\";\n-    private static final String FILTER_MASK = \"filterMask\";\n-    private static final String REWRITE = \"rewrite\";\n-    private static final String EMPTY_STRING = \"\";\n-    private static final String PAGE = \"page\";\n-    private static final String RUN_ID = \"runId\";\n-    private static final String FILE_NAME = \"file.txt\";\n-    private static final String FILE_SIZE = \"0 Kb\";\n-    private static final String MULTIPART_CONTENT_TYPE =\n-            \"multipart/form-data; boundary=--------------------------boundary\";\n-    private static final String MULTIPART_CONTENT = \"----------------------------boundary\\r\\n\" +\n-            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n-            \"Content-Type: application/octet-stream\\r\\n\" +\n-            \"\\r\\n\" +\n-            TEST +\n-            \"\\r\\n\" +\n-            \"----------------------------boundary--\";\n-    private static final ContentDisposition CONTENT_DISPOSITION = ContentDisposition.INLINE;\n-    private static final Map<String, String> TAGS = Collections.singletonMap(TEST, TEST);\n-    private final DataStorageRule dataStorageRule = DatastorageCreatorUtils.getDataStorageRule();\n-    private final S3bucketDataStorage s3Bucket = DatastorageCreatorUtils.getS3bucketDataStorage();\n-    private final DataStorageFile file = DatastorageCreatorUtils.getDataStorageFile();\n-    private final DataStorageFolder folder = DatastorageCreatorUtils.getDataStorageFolder();\n-    private final UpdateDataStorageItemVO update = DatastorageCreatorUtils.getUpdateDataStorageItemVO();\n-    private final List<Pair<AbstractDataStorage, TypeReference>> storageTypeReferenceList =\n-            DatastorageCreatorUtils.getRegularTypeStorages();\n-    private final List<Pair<AbstractDataStorage, TypeReference>> securedStorageTypeReferenceList =\n-            DatastorageCreatorUtils.getSecuredTypeStorages();\n-\n-    @Autowired\n-    private DataStorageApiService mockStorageApiService;\n+public class DataStorageControllerTest extends AbstractDataStorageControllerTest {", "originalCommit": "0d2c04efea041152b397b49b065ce6b2b819bf9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af4555f66376872cf7d3a97ce1bdd97da3e6de6c", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\nindex 237e75a53..854a744fe 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/datastorage/DataStorageControllerTest.java\n\n@@ -16,25 +16,18 @@\n \n package com.epam.pipeline.controller.datastorage;\n \n-import com.epam.pipeline.config.JsonMapper;\n-import com.epam.pipeline.controller.Result;\n import com.epam.pipeline.controller.vo.DataStorageVO;\n-import com.epam.pipeline.controller.vo.UploadFileMetadata;\n import com.epam.pipeline.controller.vo.security.EntityWithPermissionVO;\n import com.epam.pipeline.entity.SecuredEntityWithAction;\n import com.epam.pipeline.entity.datastorage.AbstractDataStorage;\n import com.epam.pipeline.entity.datastorage.DataStorageAction;\n-import com.epam.pipeline.entity.datastorage.DataStorageFile;\n-import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n import com.epam.pipeline.entity.datastorage.DataStorageWithShareMount;\n import com.epam.pipeline.entity.datastorage.PathDescription;\n import com.epam.pipeline.entity.datastorage.StorageMountPath;\n import com.epam.pipeline.entity.datastorage.StorageUsage;\n import com.epam.pipeline.entity.datastorage.TemporaryCredentials;\n import com.epam.pipeline.entity.datastorage.aws.S3bucketDataStorage;\n-import com.epam.pipeline.entity.datastorage.rules.DataStorageRule;\n import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n-import com.fasterxml.jackson.core.type.TypeReference;\n import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.Mockito;\n"}}, {"oid": "af4555f66376872cf7d3a97ce1bdd97da3e6de6c", "url": "https://github.com/epam/cloud-pipeline/commit/af4555f66376872cf7d3a97ce1bdd97da3e6de6c", "message": "Issue #1405: Removed duplicate tests, DataStorageItem tests moved to corresponding class", "committedDate": "2020-11-02T09:38:26Z", "type": "commit"}]}