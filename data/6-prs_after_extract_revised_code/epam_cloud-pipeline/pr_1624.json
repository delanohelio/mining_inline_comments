{"pr_number": 1624, "pr_title": "Issue 1615 Route53 integration to be able to create custom dns records for the tools", "pr_createdAt": "2020-12-02T10:45:37Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1624", "timeline": [{"oid": "3648e6e743151cc5199dfb7ebd98973e2259ec95", "url": "https://github.com/epam/cloud-pipeline/commit/3648e6e743151cc5199dfb7ebd98973e2259ec95", "message": "issue #1615 WIP implement possibility to create custom dns records if specified (aws only)", "committedDate": "2020-12-03T08:48:33Z", "type": "commit"}, {"oid": "f0d141a49773ee95a8b2715ecb7526b7b0ac9d33", "url": "https://github.com/epam/cloud-pipeline/commit/f0d141a49773ee95a8b2715ecb7526b7b0ac9d33", "message": "issue #1615 fail run if custom DNS record couldn't be created", "committedDate": "2020-12-03T08:48:33Z", "type": "commit"}, {"oid": "9c3e5e025c83bc11784e43a87c9082047e723441", "url": "https://github.com/epam/cloud-pipeline/commit/9c3e5e025c83bc11784e43a87c9082047e723441", "message": "issue #1615 do not fail if DNS record already exist when api trying to create it", "committedDate": "2020-12-03T08:48:33Z", "type": "commit"}, {"oid": "f46649cea028c2ae50938c7692b609024769d61c", "url": "https://github.com/epam/cloud-pipeline/commit/f46649cea028c2ae50938c7692b609024769d61c", "message": "issue #1615 refactor", "committedDate": "2020-12-03T08:48:34Z", "type": "commit"}, {"oid": "0510ac5cef2b7e13f19c5164d760dab331004a55", "url": "https://github.com/epam/cloud-pipeline/commit/0510ac5cef2b7e13f19c5164d760dab331004a55", "message": "issue #1615 move removing of DNS records to api server code", "committedDate": "2020-12-03T08:48:34Z", "type": "commit"}, {"oid": "a74d4f8e5e5fc88f6ffc48b3dba86d5541efda12", "url": "https://github.com/epam/cloud-pipeline/commit/a74d4f8e5e5fc88f6ffc48b3dba86d5541efda12", "message": "issue #1615 small fixes", "committedDate": "2020-12-03T08:48:34Z", "type": "commit"}, {"oid": "24e76195180b1e0ab775b3ed82b8bef68140efa8", "url": "https://github.com/epam/cloud-pipeline/commit/24e76195180b1e0ab775b3ed82b8bef68140efa8", "message": "issue #1615 change customDNS flag location", "committedDate": "2020-12-03T08:48:35Z", "type": "commit"}, {"oid": "a9658a811ac8ce41ac5f2a094ec98108ac782d75", "url": "https://github.com/epam/cloud-pipeline/commit/a9658a811ac8ce41ac5f2a094ec98108ac782d75", "message": "issue #1615 refactor", "committedDate": "2020-12-03T11:00:21Z", "type": "forcePushed"}, {"oid": "0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "url": "https://github.com/epam/cloud-pipeline/commit/0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "message": "issue #1615 refactor", "committedDate": "2020-12-03T11:02:52Z", "type": "commit"}, {"oid": "0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "url": "https://github.com/epam/cloud-pipeline/commit/0c7595d54aeb5ea3d128db5d60ca5ace260bdd44", "message": "issue #1615 refactor", "committedDate": "2020-12-03T11:02:52Z", "type": "forcePushed"}, {"oid": "435f9959dce4776b0379e59451cef842bf1bb81c", "url": "https://github.com/epam/cloud-pipeline/commit/435f9959dce4776b0379e59451cef842bf1bb81c", "message": "Tool settings: 'Use sub-domain' property", "committedDate": "2020-12-03T13:57:52Z", "type": "commit"}, {"oid": "27fc6341bf88fcedbfed609d228a544ac04ed9e4", "url": "https://github.com/epam/cloud-pipeline/commit/27fc6341bf88fcedbfed609d228a544ac04ed9e4", "message": "issue #1615 fixes", "committedDate": "2020-12-04T16:57:58Z", "type": "commit"}, {"oid": "27fc6341bf88fcedbfed609d228a544ac04ed9e4", "url": "https://github.com/epam/cloud-pipeline/commit/27fc6341bf88fcedbfed609d228a544ac04ed9e4", "message": "issue #1615 fixes", "committedDate": "2020-12-04T16:57:58Z", "type": "forcePushed"}, {"oid": "06622f2a75c59a881dec09e1209eeb41d47a9c3d", "url": "https://github.com/epam/cloud-pipeline/commit/06622f2a75c59a881dec09e1209eeb41d47a9c3d", "message": "issue #1615 fixe to create inc file instead of loc file for all locations with custom dns", "committedDate": "2020-12-06T16:54:25Z", "type": "commit"}, {"oid": "abe8d3e6b3c31523c251d5eacfa7b7b43d2bea0e", "url": "https://github.com/epam/cloud-pipeline/commit/abe8d3e6b3c31523c251d5eacfa7b7b43d2bea0e", "message": "issue #1615 fix to correctly fail run if creation of dns record is impossible", "committedDate": "2020-12-07T09:37:18Z", "type": "commit"}, {"oid": "38281883b85092024e5f25d4272855f9bb1dcc7e", "url": "https://github.com/epam/cloud-pipeline/commit/38281883b85092024e5f25d4272855f9bb1dcc7e", "message": "issue #1615 do not wait when trying to delete DNS record", "committedDate": "2020-12-07T12:17:36Z", "type": "commit"}, {"oid": "391f0ea482b8fe2d669efcf5a71f9239bfedecb5", "url": "https://github.com/epam/cloud-pipeline/commit/391f0ea482b8fe2d669efcf5a71f9239bfedecb5", "message": "issue #1615 create locations for custom dns asynchronously", "committedDate": "2020-12-08T08:33:59Z", "type": "commit"}, {"oid": "45122747b4ea27ce806f5e00e6c33db321363db6", "url": "https://github.com/epam/cloud-pipeline/commit/45122747b4ea27ce806f5e00e6c33db321363db6", "message": "issue #1615 do not sort locations before process", "committedDate": "2020-12-08T08:54:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxODQ4Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538418487", "bodyText": "I think that edge service is running under admin account, so we can add @PreAuthorize(ADMIN_ONLY) here", "author": "mzueva", "createdAt": "2020-12-08T14:14:34Z", "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -112,4 +113,11 @@ public AllowedInstanceAndPriceTypes getAllowedInstanceAndPriceTypes(final Long t\n     public List<NodeDisk> loadNodeDisks(final String name) {\n         return nodeDiskManager.loadByNodeId(name);\n     }\n+\n+\n+    public InstanceDNSRecord changeInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord,", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\nindex ae4756095..5e780c200 100644\n--- a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n+++ b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n\n@@ -115,9 +113,9 @@ public class ClusterApiService {\n     }\n \n \n-    public InstanceDNSRecord changeInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord,\n-                                                     final boolean delete) {\n-        return nodesManager.changeInstanceDNSRecord(regionId, dnsRecord, delete);\n+    @PreAuthorize(ADMIN_ONLY)\n+    public InstanceDNSRecord createInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        return nodesManager.createInstanceDNSRecord(regionId, dnsRecord);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMDA2Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538420062", "bodyText": "missing final", "author": "mzueva", "createdAt": "2020-12-08T14:16:09Z", "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -236,4 +238,17 @@ public void downloadNodeUsageStatisticsReport(\n     public Result<List<NodeDisk>> loadNodeDisks(@PathVariable(value = NAME) final String name) {\n         return Result.success(clusterApiService.loadNodeDisks(name));\n     }\n+\n+    @PostMapping(\"/cluster/dnsrecord\")\n+    @ResponseBody\n+    @ApiOperation(\n+            value = \"Creates or deletes dns record.\",\n+            notes = \"Creates or deletes dns record.\",\n+            produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n+    public Result<InstanceDNSRecord> dnsRecordChangeRequest(@RequestParam(required = false) final Long regionId,\n+                                                            @RequestParam(defaultValue = \"false\") final boolean delete,\n+                                                            @RequestBody InstanceDNSRecord dnsRecord) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\nindex 273417c58..642234051 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n\n@@ -242,13 +242,12 @@ public class ClusterController extends AbstractRestController {\n     @PostMapping(\"/cluster/dnsrecord\")\n     @ResponseBody\n     @ApiOperation(\n-            value = \"Creates or deletes dns record.\",\n-            notes = \"Creates or deletes dns record.\",\n+            value = \"Creates dns record.\",\n+            notes = \"Creates dns record.\",\n             produces = MediaType.APPLICATION_JSON_VALUE)\n     @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n-    public Result<InstanceDNSRecord> dnsRecordChangeRequest(@RequestParam(required = false) final Long regionId,\n-                                                            @RequestParam(defaultValue = \"false\") final boolean delete,\n-                                                            @RequestBody InstanceDNSRecord dnsRecord) {\n-        return Result.success(clusterApiService.changeInstanceDNSRecord(regionId, dnsRecord, delete));\n+    public Result<InstanceDNSRecord> requestDnsRecord(@RequestParam final Long regionId,\n+                                                      @RequestBody final InstanceDNSRecord dnsRecord) {\n+        return Result.success(clusterApiService.createInstanceDNSRecord(regionId, dnsRecord));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMTQ4Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538421486", "bodyText": "missing final", "author": "mzueva", "createdAt": "2020-12-08T14:17:21Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex e59c478f1..1721d771c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -260,21 +260,9 @@ public class CloudFacadeImpl implements CloudFacade {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n-    @Override\n-    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n-\n-        if (delete && regionId == null) {\n-            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n-            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n-                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n-                return null;\n-            } else {\n-                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);\n-            }\n-        }\n-\n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n         AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n-        return getInstanceService(cloudRegion).changeInstanceDNSRecord(dnsRecord, delete);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     private AbstractCloudRegion getRegionByRunId(final Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMjQ4OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538422489", "bodyText": "redundant empty line", "author": "mzueva", "createdAt": "2020-12-08T14:18:13Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex e59c478f1..1721d771c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -260,21 +260,9 @@ public class CloudFacadeImpl implements CloudFacade {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n-    @Override\n-    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n-\n-        if (delete && regionId == null) {\n-            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n-            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n-                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n-                return null;\n-            } else {\n-                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);\n-            }\n-        }\n-\n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n         AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n-        return getInstanceService(cloudRegion).changeInstanceDNSRecord(dnsRecord, delete);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     private AbstractCloudRegion getRegionByRunId(final Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMzE2OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538423168", "bodyText": "We can use noneMatch here", "author": "mzueva", "createdAt": "2020-12-08T14:18:52Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+\n+        if (delete && regionId == null) {\n+            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n+            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex e59c478f1..1721d771c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -260,21 +260,9 @@ public class CloudFacadeImpl implements CloudFacade {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n-    @Override\n-    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n-\n-        if (delete && regionId == null) {\n-            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n-            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n-                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n-                return null;\n-            } else {\n-                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);\n-            }\n-        }\n-\n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n         AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n-        return getInstanceService(cloudRegion).changeInstanceDNSRecord(dnsRecord, delete);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     private AbstractCloudRegion getRegionByRunId(final Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyNDM0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538424347", "bodyText": "I would also add or !pipelineRun.getStatus().isFinal()", "author": "mzueva", "createdAt": "2020-12-08T14:19:55Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+\n+        if (delete && regionId == null) {\n+            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n+            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex e59c478f1..1721d771c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -260,21 +260,9 @@ public class CloudFacadeImpl implements CloudFacade {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n-    @Override\n-    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n-\n-        if (delete && regionId == null) {\n-            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n-            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n-                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n-                return null;\n-            } else {\n-                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);\n-            }\n-        }\n-\n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n         AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n-        return getInstanceService(cloudRegion).changeInstanceDNSRecord(dnsRecord, delete);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     private AbstractCloudRegion getRegionByRunId(final Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyNjI0MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538426240", "bodyText": "Please, do not mutate input arguments, introduce a new variable instead. You can extract logic to determine actual region id to a separate method.", "author": "mzueva", "createdAt": "2020-12-08T14:21:38Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,23 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n+\n+        if (delete && regionId == null) {\n+            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n+            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n+                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n+                return null;\n+            } else {\n+                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex e59c478f1..1721d771c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -260,21 +260,9 @@ public class CloudFacadeImpl implements CloudFacade {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n-    @Override\n-    public InstanceDNSRecord changeInstanceDNSRecord(Long regionId, final InstanceDNSRecord dnsRecord, final boolean delete) {\n-\n-        if (delete && regionId == null) {\n-            List<PipelineRun> runs = pipelineRunManager.loadAllRunsByServiceURL(dnsRecord.getDnsRecord());\n-            if (!runs.stream().allMatch(pipelineRun -> pipelineRun.getEndDate() != null)) {\n-                log.warn(\"Won't try to delete dns record: \" + dnsRecord.getDnsRecord() + \" because it is still used a least in one active run.\");\n-                return null;\n-            } else {\n-                regionId = runs.stream().findFirst().map(pipelineRun -> pipelineRun.getInstance().getCloudRegionId()).orElse(null);\n-            }\n-        }\n-\n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n         AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n-        return getInstanceService(cloudRegion).changeInstanceDNSRecord(dnsRecord, delete);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     private AbstractCloudRegion getRegionByRunId(final Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyOTc5Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538429792", "bodyText": "What is the goal of using one method for getOrCreate and delete operations? If there is no some issues with this, I'd prefer to split these methods on all layers.", "author": "mzueva", "createdAt": "2020-12-08T14:25:11Z", "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -236,4 +238,17 @@ public void downloadNodeUsageStatisticsReport(\n     public Result<List<NodeDisk>> loadNodeDisks(@PathVariable(value = NAME) final String name) {\n         return Result.success(clusterApiService.loadNodeDisks(name));\n     }\n+\n+    @PostMapping(\"/cluster/dnsrecord\")", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\nindex 273417c58..642234051 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n\n@@ -242,13 +242,12 @@ public class ClusterController extends AbstractRestController {\n     @PostMapping(\"/cluster/dnsrecord\")\n     @ResponseBody\n     @ApiOperation(\n-            value = \"Creates or deletes dns record.\",\n-            notes = \"Creates or deletes dns record.\",\n+            value = \"Creates dns record.\",\n+            notes = \"Creates dns record.\",\n             produces = MediaType.APPLICATION_JSON_VALUE)\n     @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n-    public Result<InstanceDNSRecord> dnsRecordChangeRequest(@RequestParam(required = false) final Long regionId,\n-                                                            @RequestParam(defaultValue = \"false\") final boolean delete,\n-                                                            @RequestBody InstanceDNSRecord dnsRecord) {\n-        return Result.success(clusterApiService.changeInstanceDNSRecord(regionId, dnsRecord, delete));\n+    public Result<InstanceDNSRecord> requestDnsRecord(@RequestParam final Long regionId,\n+                                                      @RequestBody final InstanceDNSRecord dnsRecord) {\n+        return Result.success(clusterApiService.createInstanceDNSRecord(regionId, dnsRecord));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMDgzOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538430838", "bodyText": "We can make Route53Helper a bean to skip constructor call at every method call", "author": "mzueva", "createdAt": "2020-12-08T14:26:19Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/AWSInstanceService.java", "diffHunk": "@@ -271,6 +274,25 @@ public CloudInstanceState getInstanceState(final AwsRegion region, final String\n         return null;\n     }\n \n+    @Override\n+    public InstanceDNSRecord changeInstanceDNSRecord(final InstanceDNSRecord dnsRecord, final boolean delete) {\n+        if (dnsRecord.getDnsRecord().contains(preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE))) {\n+            if (delete) {\n+                return new Route53Helper()", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/AWSInstanceService.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/AWSInstanceService.java\nindex a23184c77..9aab74ac3 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/AWSInstanceService.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/AWSInstanceService.java\n\n@@ -275,19 +281,13 @@ public class AWSInstanceService implements CloudInstanceService<AwsRegion> {\n     }\n \n     @Override\n-    public InstanceDNSRecord changeInstanceDNSRecord(final InstanceDNSRecord dnsRecord, final boolean delete) {\n-        if (dnsRecord.getDnsRecord().contains(preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE))) {\n-            if (delete) {\n-                return new Route53Helper()\n-                        .removeDNSRecord(preferenceManager.getPreference(\n-                                SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID), dnsRecord\n-                        );\n-            } else {\n-                return new Route53Helper()\n-                        .createDNSRecord(preferenceManager.getPreference(\n-                                SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID), dnsRecord\n-                        );\n-            }\n+    public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n+        if (dnsRecord.getDnsRecord().contains(\n+                preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE))) {\n+            return route53Helper\n+                    .createDNSRecord(preferenceManager.getPreference(\n+                            SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID), dnsRecord\n+                    );\n         } else {\n             return NO_OP_INSTANCE_DNS_RECORD;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMTg4MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538431880", "bodyText": "Missing final or you can simply return client without local variable assignment", "author": "mzueva", "createdAt": "2020-12-08T14:27:24Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public AmazonRoute53 getRoute53Client() {\n+        AmazonRoute53AsyncClientBuilder builder = AmazonRoute53AsyncClientBuilder.standard();", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\nindex 1afd87f2d..b762e4db0 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n\n@@ -40,7 +40,9 @@ import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n import lombok.RequiredArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n \n+@Service\n @RequiredArgsConstructor\n public class Route53Helper {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMjk3OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538432978", "bodyText": "Let's call method getOrCreate to make it more clear", "author": "mzueva", "createdAt": "2020-12-08T14:28:32Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public AmazonRoute53 getRoute53Client() {\n+        AmazonRoute53AsyncClientBuilder builder = AmazonRoute53AsyncClientBuilder.standard();\n+        return builder.build();\n+    }\n+\n+    public InstanceDNSRecord createDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\nindex 1afd87f2d..b762e4db0 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n\n@@ -40,7 +40,9 @@ import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n import lombok.RequiredArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n \n+@Service\n @RequiredArgsConstructor\n public class Route53Helper {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzMzY2MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538433660", "bodyText": "Missing final", "author": "mzueva", "createdAt": "2020-12-08T14:29:15Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public AmazonRoute53 getRoute53Client() {\n+        AmazonRoute53AsyncClientBuilder builder = AmazonRoute53AsyncClientBuilder.standard();\n+        return builder.build();\n+    }\n+\n+    public InstanceDNSRecord createDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {\n+        LOGGER.info(\"Creating DNS record for hostedZoneId: \" + hostedZoneId + \" record: \" + dnsRecord.getDnsRecord() + \" and target: \" + dnsRecord.getTarget());\n+        final AmazonRoute53 client = getRoute53Client();\n+        if (!isDnsRecordExists(hostedZoneId, dnsRecord, client)) {\n+            try {\n+                final ChangeResourceRecordSetsResult result = performChangeRequest(hostedZoneId,\n+                        dnsRecord.getDnsRecord(), dnsRecord.getTarget(), client, ChangeAction.CREATE, true);\n+                return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), result.getChangeInfo().getStatus());\n+            } catch (InvalidChangeBatchException e) {\n+                LOGGER.error(\"AWS 53 Route service responded with: \" + e.getLocalizedMessage());\n+                if (e.getLocalizedMessage().matches(\".*Tried to create resource record set.*but it already exists.*\")) {\n+                    LOGGER.info(\"DNS Record already exists, API will proceed with this record.\");\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        }\n+        return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), InstanceDNSRecord.DNSRecordStatus.INSYNC.name());\n+    }\n+\n+    public InstanceDNSRecord removeDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {\n+        LOGGER.info(\"Removing DNS record: \" + dnsRecord.getDnsRecord() + \" for target: \" + dnsRecord.getTarget() + \" in hostedZoneId: \" + hostedZoneId);\n+        final AmazonRoute53 client = getRoute53Client();\n+        if (!isDnsRecordExists(hostedZoneId, dnsRecord, client)) {\n+            LOGGER.info(\"DNS record: \" + dnsRecord.getDnsRecord() + \" type: \" + getRRType(dnsRecord.getTarget()) + \" for target: \" + dnsRecord.getTarget()\n+                    + \" in hostedZoneId: \" + hostedZoneId + \" doesn't exists\");\n+            return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), InstanceDNSRecord.DNSRecordStatus.INSYNC.name());\n+        } else {\n+            final ChangeResourceRecordSetsResult result = performChangeRequest(hostedZoneId,\n+                    dnsRecord.getDnsRecord(), dnsRecord.getTarget(), client, ChangeAction.DELETE, false);\n+            return buildInstanceDNSRecord(dnsRecord.getDnsRecord(), dnsRecord.getTarget(), result.getChangeInfo().getStatus());\n+        }\n+\n+    }\n+\n+    private boolean isDnsRecordExists(final String hostedZoneId, final InstanceDNSRecord dnsRecord, final AmazonRoute53 client) {\n+        return client.listResourceRecordSets(new ListResourceRecordSetsRequest()\n+                .withHostedZoneId(hostedZoneId)\n+                .withStartRecordName(dnsRecord.getDnsRecord())\n+                .withStartRecordType(getRRType(dnsRecord.getTarget()))).getResourceRecordSets().stream()\n+                .map(ResourceRecordSet::getName)\n+                .anyMatch(resourceRecord -> resourceRecord.equalsIgnoreCase(dnsRecord.getDnsRecord())\n+                        || resourceRecord.equalsIgnoreCase(dnsRecord.getDnsRecord() + \".\"));\n+    }\n+\n+    private InstanceDNSRecord buildInstanceDNSRecord(final String dnsRecord,\n+                                                     final String target, final String status) {\n+        return new InstanceDNSRecord(dnsRecord, target, getStatus(status));\n+    }\n+\n+    private InstanceDNSRecord.DNSRecordStatus getStatus(final String status) {\n+        switch (status) {\n+            case \"PENDING\":\n+                return InstanceDNSRecord.DNSRecordStatus.PENDING;\n+            case \"INSYNC\":\n+                return InstanceDNSRecord.DNSRecordStatus.INSYNC;\n+            default:\n+                return InstanceDNSRecord.DNSRecordStatus.NO_OP;\n+        }\n+    }\n+\n+    private ChangeResourceRecordSetsResult performChangeRequest(final String hostedZoneId, final String dnsRecord,\n+                                                                final String target, final AmazonRoute53 client,\n+                                                                final ChangeAction action, final boolean await) {\n+        ChangeResourceRecordSetsResult result = client.changeResourceRecordSets(new ChangeResourceRecordSetsRequest()", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\nindex 1afd87f2d..b762e4db0 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n\n@@ -40,7 +40,9 @@ import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n import lombok.RequiredArgsConstructor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n \n+@Service\n @RequiredArgsConstructor\n public class Route53Helper {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzOTUxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538439514", "bodyText": "I'd suggest to move dns method/methods to a new apiService and manager classes, as ClusterApiService mostly works with kubernetes cluster, except for instance offers (but is another topic to discuss).", "author": "mzueva", "createdAt": "2020-12-08T14:34:52Z", "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -112,4 +113,11 @@ public AllowedInstanceAndPriceTypes getAllowedInstanceAndPriceTypes(final Long t\n     public List<NodeDisk> loadNodeDisks(final String name) {\n         return nodeDiskManager.loadByNodeId(name);\n     }\n+\n+\n+    public InstanceDNSRecord changeInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord,", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\nindex ae4756095..5e780c200 100644\n--- a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n+++ b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n\n@@ -115,9 +113,9 @@ public class ClusterApiService {\n     }\n \n \n-    public InstanceDNSRecord changeInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord,\n-                                                     final boolean delete) {\n-        return nodesManager.changeInstanceDNSRecord(regionId, dnsRecord, delete);\n+    @PreAuthorize(ADMIN_ONLY)\n+    public InstanceDNSRecord createInstanceDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        return nodesManager.createInstanceDNSRecord(regionId, dnsRecord);\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0MTc4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538441782", "bodyText": "Can't we use JsonMapper.parseData instead of creating a new mapper?", "author": "mzueva", "createdAt": "2020-12-08T14:36:58Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper = new Route53Helper();\n+    private final ObjectMapper mapper = new ObjectMapper();", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\nindex 07616f124..b20e2afc9 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n\n@@ -25,7 +25,6 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0MjI3MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538442271", "bodyText": "missing final", "author": "mzueva", "createdAt": "2020-12-08T14:37:21Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper = new Route53Helper();\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               UtilsManager utilsManager) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\nindex 07616f124..b20e2afc9 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n\n@@ -25,7 +25,6 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0NDM1NA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538444354", "bodyText": "Let's invert if to improve readability.\nif (StringUtils.isEmpty(serviceUrls)) {\n    return;\n}\nfinal String hostZoneId = ...\n...", "author": "mzueva", "createdAt": "2020-12-08T14:39:10Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper = new Route53Helper();\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               UtilsManager utilsManager) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+    }\n+\n+    @Override\n+    public void cleanResources(final PipelineRun run) {\n+        final String serviceUrls = run.getServiceUrl();\n+        if (!StringUtils.isEmpty(serviceUrls)) {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\nindex 07616f124..b20e2afc9 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n\n@@ -25,7 +25,6 @@ import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0NTU2Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538445567", "bodyText": "missing final", "author": "mzueva", "createdAt": "2020-12-08T14:40:18Z", "path": "api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public String buildSshUrl(Long runId) {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n+    public String getEdgeUrl() {\n+        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java b/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\nindex d4f56b23d..d3235288c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\n\n@@ -53,12 +53,8 @@ public class UtilsManager {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n-    public String getEdgeUrl() {\n-        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);\n-        if (service == null) {\n-            throw new IllegalArgumentException(\"Edge server is not registered in the cluster.\");\n-        }\n-        return service.getIp();\n+    public String getEdgeDomainNameOrIP() {\n+        return getServiceDescription(edgeLabel).getIp();\n     }\n \n     public String buildFSBrowserUrl(Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0NzQ4Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538447487", "bodyText": "It seems that some code is duplicated with buildUrl method", "author": "mzueva", "createdAt": "2020-12-08T14:42:00Z", "path": "api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public String buildSshUrl(Long runId) {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n+    public String getEdgeUrl() {", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java b/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\nindex d4f56b23d..d3235288c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\n\n@@ -53,12 +53,8 @@ public class UtilsManager {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n-    public String getEdgeUrl() {\n-        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);\n-        if (service == null) {\n-            throw new IllegalArgumentException(\"Edge server is not registered in the cluster.\");\n-        }\n-        return service.getIp();\n+    public String getEdgeDomainNameOrIP() {\n+        return getServiceDescription(edgeLabel).getIp();\n     }\n \n     public String buildFSBrowserUrl(Long runId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0ODc0Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r538448746", "bodyText": "Is ip enough here? If it is so, let's rename method to getEdgeIP", "author": "mzueva", "createdAt": "2020-12-08T14:43:08Z", "path": "api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java", "diffHunk": "@@ -53,6 +53,14 @@ public String buildSshUrl(Long runId) {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n+    public String getEdgeUrl() {\n+        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);\n+        if (service == null) {\n+            throw new IllegalArgumentException(\"Edge server is not registered in the cluster.\");\n+        }\n+        return service.getIp();", "originalCommit": "45122747b4ea27ce806f5e00e6c33db321363db6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java b/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\nindex d4f56b23d..d3235288c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/utils/UtilsManager.java\n\n@@ -53,12 +53,8 @@ public class UtilsManager {\n         return buildUrl(SSH_URL_TEMPLATE, runId);\n     }\n \n-    public String getEdgeUrl() {\n-        ServiceDescription service = kubeManager.getServiceByLabel(edgeLabel);\n-        if (service == null) {\n-            throw new IllegalArgumentException(\"Edge server is not registered in the cluster.\");\n-        }\n-        return service.getIp();\n+    public String getEdgeDomainNameOrIP() {\n+        return getServiceDescription(edgeLabel).getIp();\n     }\n \n     public String buildFSBrowserUrl(Long runId) {\n"}}, {"oid": "42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "url": "https://github.com/epam/cloud-pipeline/commit/42f79f2c04ca163f598c7c321f20a97e3ab19b6e", "message": "issue #1615 correction on review", "committedDate": "2020-12-08T16:15:19Z", "type": "commit"}, {"oid": "db6ca713431f437ef37455ba04edf049c14e247f", "url": "https://github.com/epam/cloud-pipeline/commit/db6ca713431f437ef37455ba04edf049c14e247f", "message": "issue #1615 move methods to new manager and service classes", "committedDate": "2020-12-08T16:30:47Z", "type": "commit"}, {"oid": "70f2fbcad92a3cd3157ac1aa6e2536524143360d", "url": "https://github.com/epam/cloud-pipeline/commit/70f2fbcad92a3cd3157ac1aa6e2536524143360d", "message": "issue #1615 corrections on review", "committedDate": "2020-12-09T10:34:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5NjkxMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540096912", "bodyText": "Please, do not use star imports in the source code", "author": "mzueva", "createdAt": "2020-12-10T11:35:21Z", "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -39,9 +40,7 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n-import static com.epam.pipeline.security.acl.AclExpressions.NODE_READ;\n-import static com.epam.pipeline.security.acl.AclExpressions.NODE_READ_FILTER;\n-import static com.epam.pipeline.security.acl.AclExpressions.NODE_STOP;\n+import static com.epam.pipeline.security.acl.AclExpressions.*;", "originalCommit": "70f2fbcad92a3cd3157ac1aa6e2536524143360d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\nindex c454ee27b..cbdcf4bbf 100644\n--- a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n+++ b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n\n@@ -40,7 +39,9 @@ import org.springframework.security.access.prepost.PostFilter;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n-import static com.epam.pipeline.security.acl.AclExpressions.*;\n+import static com.epam.pipeline.security.acl.AclExpressions.NODE_READ;\n+import static com.epam.pipeline.security.acl.AclExpressions.NODE_READ_FILTER;\n+import static com.epam.pipeline.security.acl.AclExpressions.NODE_STOP;\n \n @Service\n @RequiredArgsConstructor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA5OTU0MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540099540", "bodyText": "It is better to use CloudFacade here rather than directly call AWS implementation as run may be assigned to any of cloud regions.", "author": "mzueva", "createdAt": "2020-12-10T11:39:48Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final Route53Helper route53Helper;\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               final UtilsManager utilsManager,\n+                               final Route53Helper route53Helper) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+        this.route53Helper = route53Helper;", "originalCommit": "70f2fbcad92a3cd3157ac1aa6e2536524143360d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\nindex 426580a1b..9c5597f3c 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n\n@@ -18,7 +18,7 @@ package com.epam.pipeline.manager.cluster.cleaner;\n import com.epam.pipeline.config.JsonMapper;\n import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n import com.epam.pipeline.entity.pipeline.PipelineRun;\n-import com.epam.pipeline.manager.cloud.aws.Route53Helper;\n+import com.epam.pipeline.manager.cloud.CloudFacade;\n import com.epam.pipeline.manager.preference.PreferenceManager;\n import com.epam.pipeline.manager.preference.SystemPreferences;\n import com.epam.pipeline.manager.utils.UtilsManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEwMTU1Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540101552", "bodyText": "Unused import", "author": "mzueva", "createdAt": "2020-12-10T11:43:13Z", "path": "api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java", "diffHunk": "@@ -22,6 +22,7 @@\n import java.util.List;\n \n import com.epam.pipeline.controller.vo.FilterNodesVO;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;", "originalCommit": "70f2fbcad92a3cd3157ac1aa6e2536524143360d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\nindex c454ee27b..cbdcf4bbf 100644\n--- a/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n+++ b/api/src/main/java/com/epam/pipeline/acl/cluster/ClusterApiService.java\n\n@@ -22,7 +22,6 @@ import java.time.LocalDateTime;\n import java.util.List;\n \n import com.epam.pipeline.controller.vo.FilterNodesVO;\n-import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n import com.epam.pipeline.entity.cluster.AllowedInstanceAndPriceTypes;\n import com.epam.pipeline.entity.cluster.FilterPodsRequest;\n import com.epam.pipeline.entity.cluster.InstanceType;\n"}}, {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "url": "https://github.com/epam/cloud-pipeline/commit/9b2d7ab8169fe76fc2a606fde7055af897268eb3", "message": "issue #1615 fix tests", "committedDate": "2020-12-11T11:18:53Z", "type": "commit"}, {"oid": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "url": "https://github.com/epam/cloud-pipeline/commit/9b2d7ab8169fe76fc2a606fde7055af897268eb3", "message": "issue #1615 fix tests", "committedDate": "2020-12-11T11:18:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTQxNw==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540891417", "bodyText": "Do not use star imports", "author": "mzueva", "createdAt": "2020-12-11T11:47:48Z", "path": "api/src/main/java/com/epam/pipeline/acl/cluster/InfrastructureApiService.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.acl.cluster;\n+\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.manager.cluster.InfrastructureManager;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Service;\n+\n+import static com.epam.pipeline.security.acl.AclExpressions.*;", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/acl/cluster/InfrastructureApiService.java b/api/src/main/java/com/epam/pipeline/acl/cluster/InfrastructureApiService.java\nindex f632f3a0f..c52e8bb90 100644\n--- a/api/src/main/java/com/epam/pipeline/acl/cluster/InfrastructureApiService.java\n+++ b/api/src/main/java/com/epam/pipeline/acl/cluster/InfrastructureApiService.java\n\n@@ -22,7 +22,7 @@ import lombok.RequiredArgsConstructor;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Service;\n \n-import static com.epam.pipeline.security.acl.AclExpressions.*;\n+import static com.epam.pipeline.security.acl.AclExpressions.ADMIN_ONLY;\n \n @Service\n @RequiredArgsConstructor\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTg3MA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540891870", "bodyText": "missing final", "author": "mzueva", "createdAt": "2020-12-11T11:48:38Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,17 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex fdedf1de3..98aaeff4d 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -261,13 +261,13 @@ public class CloudFacadeImpl implements CloudFacade {\n     }\n \n     public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n-        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n+        final AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n         return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     @Override\n     public InstanceDNSRecord removeDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n-        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n+        final AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n         return getInstanceService(cloudRegion).deleteInstanceDNSRecord(dnsRecord);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MTkwMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540891900", "bodyText": "missing final", "author": "mzueva", "createdAt": "2020-12-11T11:48:42Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java", "diffHunk": "@@ -259,6 +260,17 @@ public CloudInstanceState getInstanceState(final Long runId) {\n         return getInstanceService(region).getInstanceState(region, String.valueOf(runId));\n     }\n \n+    public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n+        return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n+    }\n+\n+    @Override\n+    public InstanceDNSRecord removeDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n+        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\nindex fdedf1de3..98aaeff4d 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/CloudFacadeImpl.java\n\n@@ -261,13 +261,13 @@ public class CloudFacadeImpl implements CloudFacade {\n     }\n \n     public InstanceDNSRecord createDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n-        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n+        final AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n         return getInstanceService(cloudRegion).getOrCreateInstanceDNSRecord(dnsRecord);\n     }\n \n     @Override\n     public InstanceDNSRecord removeDNSRecord(final Long regionId, final InstanceDNSRecord dnsRecord) {\n-        AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n+        final AbstractCloudRegion cloudRegion = regionManager.loadOrDefault(regionId);\n         return getInstanceService(cloudRegion).deleteInstanceDNSRecord(dnsRecord);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MjU3MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540892571", "bodyText": "license year -> 2017-2020", "author": "mzueva", "createdAt": "2020-12-11T11:49:58Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\nindex b762e4db0..9e488729f 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzIzMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540893232", "bodyText": "Let's use @Sl4j annotation instead of declaring a logger manually", "author": "mzueva", "createdAt": "2020-12-11T11:51:22Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\nindex b762e4db0..9e488729f 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5Mzc1MQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540893751", "bodyText": "To make logging more readable we can use log.info(\"Creating DNS record for hostedZoneid : {} record {}\",  hostedZoneId, dnsRecord.getDnsRecord())", "author": "mzueva", "createdAt": "2020-12-11T11:52:16Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cloud.aws;\n+\n+import com.amazonaws.services.route53.AmazonRoute53;\n+import com.amazonaws.services.route53.AmazonRoute53AsyncClientBuilder;\n+import com.amazonaws.services.route53.model.Change;\n+import com.amazonaws.services.route53.model.ChangeAction;\n+import com.amazonaws.services.route53.model.ChangeBatch;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.ChangeResourceRecordSetsResult;\n+import com.amazonaws.services.route53.model.ChangeStatus;\n+import com.amazonaws.services.route53.model.GetChangeRequest;\n+import com.amazonaws.services.route53.model.GetChangeResult;\n+import com.amazonaws.services.route53.model.InvalidChangeBatchException;\n+import com.amazonaws.services.route53.model.ListResourceRecordSetsRequest;\n+import com.amazonaws.services.route53.model.RRType;\n+import com.amazonaws.services.route53.model.ResourceRecord;\n+import com.amazonaws.services.route53.model.ResourceRecordSet;\n+import com.amazonaws.services.route53.waiters.AmazonRoute53Waiters;\n+import com.amazonaws.waiters.FixedDelayStrategy;\n+import com.amazonaws.waiters.MaxAttemptsRetryStrategy;\n+import com.amazonaws.waiters.PollingStrategy;\n+import com.amazonaws.waiters.WaiterParameters;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@RequiredArgsConstructor\n+public class Route53Helper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(Route53Helper.class);\n+    private static final long TTL_TIME = 60L;\n+    private static final int MAX_ATTEMPTS = 100;\n+    private static final int DELAY_IN_SECONDS = 1;\n+\n+    public InstanceDNSRecord createDNSRecord(final String hostedZoneId, final InstanceDNSRecord dnsRecord) {\n+        LOGGER.info(\"Creating DNS record for hostedZoneId: \" + hostedZoneId + \" record: \"", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\nindex b762e4db0..9e488729f 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/aws/Route53Helper.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NDczOA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540894738", "bodyText": "License year 2017-2020", "author": "mzueva", "createdAt": "2020-12-11T11:54:07Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/InfrastructureManager.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/InfrastructureManager.java b/api/src/main/java/com/epam/pipeline/manager/cluster/InfrastructureManager.java\nindex 61b8be678..eb9226393 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/InfrastructureManager.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/InfrastructureManager.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017-2019 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NTAxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540895014", "bodyText": "Missing final", "author": "mzueva", "createdAt": "2020-12-11T11:54:33Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.CloudFacade;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final CloudFacade cloudFacade;\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               final UtilsManager utilsManager,\n+                               final CloudFacade cloudFacade) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+        this.cloudFacade = cloudFacade;\n+    }\n+\n+    @Override\n+    public void cleanResources(final PipelineRun run) {\n+        final String serviceUrls = run.getServiceUrl();\n+        if (StringUtils.isEmpty(serviceUrls)) {\n+            return;\n+        }\n+\n+        final String hostZoneId = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID);\n+        final String hostZoneUrlBase = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE);\n+        Assert.isTrue(\n+                !StringUtils.isEmpty(hostZoneId) && !StringUtils.isEmpty(hostZoneUrlBase),\n+                \"instance.dns.hosted.zone.id or instance.dns.hosted.zone.base is empty can't remove DNS record.\"\n+        );\n+\n+        List<Map<String, String>> serviceUrlsList = JsonMapper.parseData(", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\nindex 9c5597f3c..c17aadcfb 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n\n@@ -61,12 +61,8 @@ public class DNSRecordRunCleaner implements RunCleaner {\n \n         final String hostZoneId = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID);\n         final String hostZoneUrlBase = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE);\n-        Assert.isTrue(\n-                !StringUtils.isEmpty(hostZoneId) && !StringUtils.isEmpty(hostZoneUrlBase),\n-                \"instance.dns.hosted.zone.id or instance.dns.hosted.zone.base is empty can't remove DNS record.\"\n-        );\n \n-        List<Map<String, String>> serviceUrlsList = JsonMapper.parseData(\n+        final List<Map<String, String>> serviceUrlsList = JsonMapper.parseData(\n                 serviceUrls,\n                 new TypeReference<List<Map<String, String>>>(){}\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NzA1OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540897058", "bodyText": "At the moment this method will throw an error for all runs with service URLs if DNS settings are not configured. Can we at first check whether run uses custom DNS approach at first and only then check the settings?", "author": "mzueva", "createdAt": "2020-12-11T11:58:20Z", "path": "api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.manager.cluster.cleaner;\n+\n+import com.epam.pipeline.config.JsonMapper;\n+import com.epam.pipeline.entity.cloud.InstanceDNSRecord;\n+import com.epam.pipeline.entity.pipeline.PipelineRun;\n+import com.epam.pipeline.manager.cloud.CloudFacade;\n+import com.epam.pipeline.manager.preference.PreferenceManager;\n+import com.epam.pipeline.manager.preference.SystemPreferences;\n+import com.epam.pipeline.manager.utils.UtilsManager;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Service\n+@Slf4j\n+public class DNSRecordRunCleaner implements RunCleaner {\n+\n+    private static final String HTTP = \"http://\";\n+    private static final String HTTPS = \"https://\";\n+    private static final String DELIMITER = \"/\";\n+    private static final String PORT_DELIMITER = \":\";\n+\n+    private final PreferenceManager preferenceManager;\n+    private final UtilsManager utilsManager;\n+    private final CloudFacade cloudFacade;\n+\n+    public DNSRecordRunCleaner(final PreferenceManager preferenceManager,\n+                               final UtilsManager utilsManager,\n+                               final CloudFacade cloudFacade) {\n+        this.preferenceManager = preferenceManager;\n+        this.utilsManager = utilsManager;\n+        this.cloudFacade = cloudFacade;\n+    }\n+\n+    @Override\n+    public void cleanResources(final PipelineRun run) {\n+        final String serviceUrls = run.getServiceUrl();\n+        if (StringUtils.isEmpty(serviceUrls)) {\n+            return;\n+        }\n+\n+        final String hostZoneId = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID);\n+        final String hostZoneUrlBase = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE);\n+        Assert.isTrue(", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\nindex 9c5597f3c..c17aadcfb 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cluster/cleaner/DNSRecordRunCleaner.java\n\n@@ -61,12 +61,8 @@ public class DNSRecordRunCleaner implements RunCleaner {\n \n         final String hostZoneId = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_ID);\n         final String hostZoneUrlBase = preferenceManager.getPreference(SystemPreferences.INSTANCE_DNS_HOSTED_ZONE_BASE);\n-        Assert.isTrue(\n-                !StringUtils.isEmpty(hostZoneId) && !StringUtils.isEmpty(hostZoneUrlBase),\n-                \"instance.dns.hosted.zone.id or instance.dns.hosted.zone.base is empty can't remove DNS record.\"\n-        );\n \n-        List<Map<String, String>> serviceUrlsList = JsonMapper.parseData(\n+        final List<Map<String, String>> serviceUrlsList = JsonMapper.parseData(\n                 serviceUrls,\n                 new TypeReference<List<Map<String, String>>>(){}\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODAxMg==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540898012", "bodyText": "Controller should use InfrastructureApiService not InfrastructureManager", "author": "mzueva", "createdAt": "2020-12-11T12:00:11Z", "path": "api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java", "diffHunk": "@@ -236,4 +240,16 @@ public void downloadNodeUsageStatisticsReport(\n     public Result<List<NodeDisk>> loadNodeDisks(@PathVariable(value = NAME) final String name) {\n         return Result.success(clusterApiService.loadNodeDisks(name));\n     }\n+\n+    @PostMapping(\"/cluster/dnsrecord\")\n+    @ResponseBody\n+    @ApiOperation(\n+            value = \"Creates dns record.\",\n+            notes = \"Creates dns record.\",\n+            produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n+    public Result<InstanceDNSRecord> requestDnsRecord(@RequestParam final Long regionId,\n+                                                      @RequestBody final InstanceDNSRecord dnsRecord) {\n+        return Result.success(infrastructureManager.createInstanceDNSRecord(regionId, dnsRecord));", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\nindex e4df2fa89..903b3698f 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/cluster/ClusterController.java\n\n@@ -250,6 +250,6 @@ public class ClusterController extends AbstractRestController {\n     @ApiResponses(value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)})\n     public Result<InstanceDNSRecord> requestDnsRecord(@RequestParam final Long regionId,\n                                                       @RequestBody final InstanceDNSRecord dnsRecord) {\n-        return Result.success(infrastructureManager.createInstanceDNSRecord(regionId, dnsRecord));\n+        return Result.success(infrastructureApiService.createInstanceDNSRecord(regionId, dnsRecord));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODUwMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540898500", "bodyText": "Wrong message Deletion -> Creation", "author": "mzueva", "createdAt": "2020-12-11T12:01:07Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/azure/AzureInstanceService.java", "diffHunk": "@@ -257,6 +258,15 @@ public CloudInstanceState getInstanceState(final AzureRegion region, final Strin\n         }\n     }\n \n+    public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n+        throw new UnsupportedOperationException(\"Deletion of DNS record doesn't work with Azure provider yet.\");", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/azure/AzureInstanceService.java b/api/src/main/java/com/epam/pipeline/manager/cloud/azure/AzureInstanceService.java\nindex 6a9bca9e0..dac7a37c2 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/azure/AzureInstanceService.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/azure/AzureInstanceService.java\n\n@@ -259,7 +259,7 @@ public class AzureInstanceService implements CloudInstanceService<AzureRegion> {\n     }\n \n     public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n-        throw new UnsupportedOperationException(\"Deletion of DNS record doesn't work with Azure provider yet.\");\n+        throw new UnsupportedOperationException(\"Creation of DNS record doesn't work with Azure provider yet.\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5ODU1OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1624#discussion_r540898558", "bodyText": "Wrong message Deletion -> Creation", "author": "mzueva", "createdAt": "2020-12-11T12:01:14Z", "path": "api/src/main/java/com/epam/pipeline/manager/cloud/gcp/GCPInstanceService.java", "diffHunk": "@@ -214,6 +215,16 @@ public void attachDisk(final GCPRegion region, final Long runId, final DiskAttac\n         throw new UnsupportedOperationException(\"Disk attaching doesn't work with GCP provider yet.\");\n     }\n \n+    @Override\n+    public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n+        throw new UnsupportedOperationException(\"Deletion of DNS record doesn't work with GCP provider yet.\");", "originalCommit": "9b2d7ab8169fe76fc2a606fde7055af897268eb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/manager/cloud/gcp/GCPInstanceService.java b/api/src/main/java/com/epam/pipeline/manager/cloud/gcp/GCPInstanceService.java\nindex 29f6eaa04..825736ff1 100644\n--- a/api/src/main/java/com/epam/pipeline/manager/cloud/gcp/GCPInstanceService.java\n+++ b/api/src/main/java/com/epam/pipeline/manager/cloud/gcp/GCPInstanceService.java\n\n@@ -217,7 +217,7 @@ public class GCPInstanceService implements CloudInstanceService<GCPRegion> {\n \n     @Override\n     public InstanceDNSRecord getOrCreateInstanceDNSRecord(final InstanceDNSRecord dnsRecord) {\n-        throw new UnsupportedOperationException(\"Deletion of DNS record doesn't work with GCP provider yet.\");\n+        throw new UnsupportedOperationException(\"Creation of DNS record doesn't work with GCP provider yet.\");\n     }\n \n     @Override\n"}}, {"oid": "5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "url": "https://github.com/epam/cloud-pipeline/commit/5462cd39a7d2e56ab3fc0550cfd3f7bdfe3401d3", "message": "issue #1615 corrections on review", "committedDate": "2020-12-11T12:42:33Z", "type": "commit"}, {"oid": "57a1880572d32dba1bbdbbf80dfe6af9163bbf47", "url": "https://github.com/epam/cloud-pipeline/commit/57a1880572d32dba1bbdbbf80dfe6af9163bbf47", "message": "issue #1615 reload nginx two times", "committedDate": "2020-12-11T13:59:16Z", "type": "commit"}, {"oid": "c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "url": "https://github.com/epam/cloud-pipeline/commit/c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "message": "issue #1615 check exception in dns record creation thread", "committedDate": "2020-12-11T14:28:24Z", "type": "commit"}, {"oid": "c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "url": "https://github.com/epam/cloud-pipeline/commit/c7c65db12259a0b8abfcb1461bcd8ca4bd05e2e2", "message": "issue #1615 check exception in dns record creation thread", "committedDate": "2020-12-11T14:28:24Z", "type": "forcePushed"}, {"oid": "28ec04f6ad9dfac3e1ea7cae35e3f22f1cf86397", "url": "https://github.com/epam/cloud-pipeline/commit/28ec04f6ad9dfac3e1ea7cae35e3f22f1cf86397", "message": "Merge remote-tracking branch 'origin/develop' into issue_1615_route53_integration\n\n# Conflicts:\n#\tapi/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java\n#\tapi/src/test/java/com/epam/pipeline/test/web/ControllerTestBeans.java", "committedDate": "2020-12-13T21:28:11Z", "type": "commit"}, {"oid": "26875cb1b1ec0a09305d5791aed47df4c380d991", "url": "https://github.com/epam/cloud-pipeline/commit/26875cb1b1ec0a09305d5791aed47df4c380d991", "message": "issue #1615 deal with routes without dns first", "committedDate": "2020-12-14T15:10:25Z", "type": "commit"}, {"oid": "26875cb1b1ec0a09305d5791aed47df4c380d991", "url": "https://github.com/epam/cloud-pipeline/commit/26875cb1b1ec0a09305d5791aed47df4c380d991", "message": "issue #1615 deal with routes without dns first", "committedDate": "2020-12-14T15:10:25Z", "type": "forcePushed"}, {"oid": "bcfb7e4d77144d0df59362d2ed36055361b4f79a", "url": "https://github.com/epam/cloud-pipeline/commit/bcfb7e4d77144d0df59362d2ed36055361b4f79a", "message": "issue 1615 merge async results synchronously", "committedDate": "2020-12-18T10:21:27Z", "type": "commit"}, {"oid": "cf1181e42ede30c71ba06099a08b2df17bc4bac4", "url": "https://github.com/epam/cloud-pipeline/commit/cf1181e42ede30c71ba06099a08b2df17bc4bac4", "message": "Merge remote-tracking branch 'origin/develop' into issue_1615_route53_integration\n\n# Conflicts:\n#\tapi/src/test/java/com/epam/pipeline/app/AclTestConfiguration.java", "committedDate": "2020-12-22T15:23:46Z", "type": "commit"}, {"oid": "9380279a830d659fd67f375133aa24b26a90f7d1", "url": "https://github.com/epam/cloud-pipeline/commit/9380279a830d659fd67f375133aa24b26a90f7d1", "message": "issue 1615 fix tests", "committedDate": "2020-12-22T15:25:02Z", "type": "commit"}]}