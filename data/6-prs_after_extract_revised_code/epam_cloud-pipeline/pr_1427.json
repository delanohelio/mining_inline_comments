{"pr_number": 1427, "pr_title": "Issue #1426 System dictionaries", "pr_createdAt": "2020-09-21T19:49:42Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1427", "timeline": [{"oid": "3758609ffc5297bbf821b3beef5ea8e16f2de867", "url": "https://github.com/epam/cloud-pipeline/commit/3758609ffc5297bbf821b3beef5ea8e16f2de867", "message": "Issue #1426 Categorical attributes CRUD operations", "committedDate": "2020-09-21T19:41:13Z", "type": "commit"}, {"oid": "95601a7d627bc01a5ddd4e83bff22bcfdb47690f", "url": "https://github.com/epam/cloud-pipeline/commit/95601a7d627bc01a5ddd4e83bff22bcfdb47690f", "message": "Issue #1426 Categorical attributes DAO tests", "committedDate": "2020-09-21T19:41:40Z", "type": "commit"}, {"oid": "949344f3bc84485318bedcc5f45e4b60817dcb12", "url": "https://github.com/epam/cloud-pipeline/commit/949344f3bc84485318bedcc5f45e4b60817dcb12", "message": "Issue #1426 Implement synchronization of current metadata state into categorical attributes", "committedDate": "2020-09-21T19:41:53Z", "type": "commit"}, {"oid": "7a276419d168ef96c38a65195a8416b4ba44c16c", "url": "https://github.com/epam/cloud-pipeline/commit/7a276419d168ef96c38a65195a8416b4ba44c16c", "message": "Issue #1426 Provide tests on the process of synchronization of the metadata into categorical attributes", "committedDate": "2020-09-21T19:42:24Z", "type": "commit"}, {"oid": "fb3f231e0338435460725fd4ae6a7109720e4f99", "url": "https://github.com/epam/cloud-pipeline/commit/fb3f231e0338435460725fd4ae6a7109720e4f99", "message": "Issue #1426 Refactoring regarding code style and static analyzers violations", "committedDate": "2020-09-21T19:42:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MjQzMQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492682431", "bodyText": "Let's user @RestController and remove @responsebody from all methods", "author": "mzueva", "createdAt": "2020-09-22T12:11:13Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMTYwNQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492911605", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-09-22T17:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4MjQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NjkxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492686914", "bodyText": "I'd suggest to use common path /categoricalAttribute and do not add load/loadAll/delete/deleteValue suffixes. To distinguish load and loadAll we can use @GetMapping(params = { \"attributeKey\"}).", "author": "mzueva", "createdAt": "2020-09-22T12:19:08Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMTY0Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492911642", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-09-22T17:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NjkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzMwMA==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492687300", "bodyText": "I'd suggest to allow only one attributeKey for this method since we already have a method to loadAll. And let's move to path from request params", "author": "mzueva", "createdAt": "2020-09-22T12:19:47Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMTkyNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492911924", "bodyText": "Done, extracted to the path", "author": "Wedds", "createdAt": "2020-09-22T17:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzY0Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492687647", "bodyText": "Let's move attributeKey to path", "author": "mzueva", "createdAt": "2020-09-22T12:20:15Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjA3OQ==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912079", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-09-22T17:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4NzY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODU0OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492688548", "bodyText": "Also, let's do not action to path and use params in DeleteMapping annotation", "author": "mzueva", "createdAt": "2020-09-22T12:21:43Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjI4Mg==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912282", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-09-22T17:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODU0OA=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODg4Mw==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492688883", "bodyText": "Let's make it POST, since this request is not idempotent", "author": "mzueva", "createdAt": "2020-09-22T12:22:18Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;\n+\n+    @PostMapping\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Add categorical attributes values.\",\n+        notes = \"Add categorical attributes values\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> insertCategoricalAttributes(@RequestBody final Map<String, List<String>> dict) {\n+        return Result.success(categoricalAttributeApiService.insertAttributesValues(dict));\n+    }\n+\n+    @GetMapping(\"/loadAll\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all categorical attributes with values.\",\n+        notes = \"Load all categorical attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadAllCategoricalAttributes() {\n+        return Result.success(categoricalAttributeApiService.loadAll());\n+    }\n+\n+    @GetMapping(\"/load\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Load all requested attributes with values.\",\n+        notes = \"Load all requested attributes with values.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Map<String, List<String>>> loadCategoricalAttributes(@RequestParam final List<String> attributeKeys) {\n+        return Result.success(categoricalAttributeApiService.loadAllValuesForKeys(attributeKeys));\n+    }\n+\n+    @DeleteMapping(\"/delete\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete all values for a requested attribute.\",\n+        notes = \"Delete all values for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAllAttributeValues(@RequestParam final String attributeKey) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValues(attributeKey));\n+    }\n+\n+    @DeleteMapping(\"/deleteValue\")\n+    @ResponseBody\n+    @ApiOperation(\n+        value = \"Delete one specific value for a requested attribute.\",\n+        notes = \"Delete one specific value for a requested attribute.\",\n+        produces = MediaType.APPLICATION_JSON_VALUE)\n+    @ApiResponses(\n+        value = {@ApiResponse(code = HTTP_STATUS_OK, message = API_STATUS_DESCRIPTION)\n+        })\n+    public Result<Boolean> deleteAttributeValue(@RequestParam final String attributeKey,\n+                                                @RequestParam final String value) {\n+        return Result.success(categoricalAttributeApiService.deleteAttributeValue(attributeKey, value));\n+    }\n+\n+    @GetMapping(\"/sync\")", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjM2Nw==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912367", "bodyText": "Done", "author": "Wedds", "createdAt": "2020-09-22T17:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY4ODg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MDYxNA==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492690614", "bodyText": "Let's introduce a separate class CategoricalAttribute and use it instead of Map<String, List<String, String>>. It will increase readability of the code and may be useful if decide to introduce more complex ACL permissions.", "author": "mzueva", "createdAt": "2020-09-22T12:25:13Z", "path": "api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.metadata;\n+\n+import com.epam.pipeline.controller.AbstractRestController;\n+import com.epam.pipeline.controller.Result;\n+import com.epam.pipeline.manager.metadata.CategoricalAttributeApiService;\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiResponse;\n+import io.swagger.annotations.ApiResponses;\n+import lombok.RequiredArgsConstructor;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Controller\n+@Api(value = \"CategoricalAttributes\")\n+@RequiredArgsConstructor\n+@RequestMapping(value = \"/categoricalAttribute\")\n+public class CategoricalAttributeController extends AbstractRestController {\n+\n+    private final CategoricalAttributeApiService categoricalAttributeApiService;", "originalCommit": "fb3f231e0338435460725fd4ae6a7109720e4f99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMjc5OA==", "url": "https://github.com/epam/cloud-pipeline/pull/1427#discussion_r492912798", "bodyText": "Done, using List<CategoricalAttribute> instead of Map<String, List<String>> and return single CategoricalAttribute, when loading by one key", "author": "Wedds", "createdAt": "2020-09-22T17:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5MDYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "a99433b287fc85c76a97a632068e8b88257b1bea", "chunk": "diff --git a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\nindex 77d8b05c1..099d9b3b7 100644\n--- a/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n+++ b/api/src/main/java/com/epam/pipeline/controller/metadata/CategoricalAttributeController.java\n\n@@ -25,19 +25,18 @@ import io.swagger.annotations.ApiResponse;\n import io.swagger.annotations.ApiResponses;\n import lombok.RequiredArgsConstructor;\n import org.springframework.http.MediaType;\n-import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n \n import java.util.List;\n import java.util.Map;\n \n-@Controller\n+@RestController\n @Api(value = \"CategoricalAttributes\")\n @RequiredArgsConstructor\n @RequestMapping(value = \"/categoricalAttribute\")\n"}}, {"oid": "a99433b287fc85c76a97a632068e8b88257b1bea", "url": "https://github.com/epam/cloud-pipeline/commit/a99433b287fc85c76a97a632068e8b88257b1bea", "message": "Issue #1426 Use correct annotation for controller and `POST` mapping for sync method", "committedDate": "2020-09-22T13:58:24Z", "type": "commit"}, {"oid": "abbfc5b5927035e97c16467fd02f983d6b7c5fcd", "url": "https://github.com/epam/cloud-pipeline/commit/abbfc5b5927035e97c16467fd02f983d6b7c5fcd", "message": "Issue #1426 Accept only one value, when loading values for a key", "committedDate": "2020-09-22T14:04:24Z", "type": "commit"}, {"oid": "c51ae6b577370649813436bb3c223a99faaa12f0", "url": "https://github.com/epam/cloud-pipeline/commit/c51ae6b577370649813436bb3c223a99faaa12f0", "message": "Issue #1426 Refactor endpoints URL format", "committedDate": "2020-09-22T16:36:24Z", "type": "commit"}, {"oid": "3385feb1a00731600e9cd9c4518abb7c41ec5436", "url": "https://github.com/epam/cloud-pipeline/commit/3385feb1a00731600e9cd9c4518abb7c41ec5436", "message": "Issue #1426 Introduce CategoricalAttribute entity to store system dictionaries values", "committedDate": "2020-09-22T16:36:25Z", "type": "commit"}, {"oid": "04bc603a1962cf0a045aa7d784b3ce15213f74f1", "url": "https://github.com/epam/cloud-pipeline/commit/04bc603a1962cf0a045aa7d784b3ce15213f74f1", "message": "Issue #1426 Add test on the conversion of string pairs to list of categorical attributes", "committedDate": "2020-09-22T16:49:53Z", "type": "commit"}, {"oid": "e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "url": "https://github.com/epam/cloud-pipeline/commit/e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "message": "Issue #1426 Change the way of responding to requests, when trying to load a dictionary for a non-existent key", "committedDate": "2020-09-22T17:44:07Z", "type": "commit"}, {"oid": "e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "url": "https://github.com/epam/cloud-pipeline/commit/e1ebd5fdf79019fd2b3228d21eb743584ad46de5", "message": "Issue #1426 Change the way of responding to requests, when trying to load a dictionary for a non-existent key", "committedDate": "2020-09-22T17:44:07Z", "type": "forcePushed"}, {"oid": "f3caef30b53d8e0437382294a3816715ec2722f1", "url": "https://github.com/epam/cloud-pipeline/commit/f3caef30b53d8e0437382294a3816715ec2722f1", "message": "Issue #1426 Unify endpoint for attribute values removal", "committedDate": "2020-09-23T10:39:11Z", "type": "commit"}, {"oid": "1e60b61d815d48467ec6cbdb305eb25e0c790673", "url": "https://github.com/epam/cloud-pipeline/commit/1e60b61d815d48467ec6cbdb305eb25e0c790673", "message": "Issue #1426 Fix naming for db migration file", "committedDate": "2020-09-23T12:58:55Z", "type": "commit"}]}