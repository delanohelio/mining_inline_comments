{"pr_number": 1575, "pr_title": "Issue #1405: Implemented tests for IssueController", "pr_createdAt": "2020-11-17T13:02:07Z", "pr_url": "https://github.com/epam/cloud-pipeline/pull/1575", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2OTkwMw==", "url": "https://github.com/epam/cloud-pipeline/pull/1575#discussion_r525969903", "bodyText": "Am I right that we already have handy assertResponseFile method in the abstract class?", "author": "tcibinan", "createdAt": "2020-11-18T10:18:34Z", "path": "api/src/test/java/com/epam/pipeline/controller/issue/IssueControllerTest.java", "diffHunk": "@@ -0,0 +1,323 @@\n+/*\n+ * Copyright 2017-2020 EPAM Systems, Inc. (https://www.epam.com/)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.epam.pipeline.controller.issue;\n+\n+import com.epam.pipeline.controller.PagedResult;\n+import com.epam.pipeline.controller.vo.EntityVO;\n+import com.epam.pipeline.controller.vo.IssueCommentVO;\n+import com.epam.pipeline.controller.vo.IssueVO;\n+import com.epam.pipeline.entity.datastorage.DataStorageStreamingContent;\n+import com.epam.pipeline.entity.issue.Attachment;\n+import com.epam.pipeline.entity.issue.Issue;\n+import com.epam.pipeline.entity.issue.IssueComment;\n+import com.epam.pipeline.entity.security.acl.AclClass;\n+import com.epam.pipeline.manager.issue.AttachmentFileManager;\n+import com.epam.pipeline.manager.issue.IssueApiService;\n+import com.epam.pipeline.test.creator.CommonCreatorConstants;\n+import com.epam.pipeline.test.creator.datastorage.DatastorageCreatorUtils;\n+import com.epam.pipeline.test.creator.issue.IssueCreatorUtils;\n+import com.epam.pipeline.test.web.AbstractControllerTest;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.ID;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_INT;\n+import static com.epam.pipeline.test.creator.CommonCreatorConstants.TEST_STRING;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.verify;\n+import static org.springframework.http.MediaType.APPLICATION_OCTET_STREAM_VALUE;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+\n+@WebMvcTest(controllers = IssueController.class)\n+public class IssueControllerTest extends AbstractControllerTest {\n+\n+    private static final String ISSUES_URL = SERVLET_PATH + \"/issues\";\n+    private static final String MY_ISSUES_URL = ISSUES_URL + \"/my\";\n+    private static final String ISSUES_ID_URL = ISSUES_URL + \"/%d\";\n+    private static final String ISSUES_COMMENTS_URL = ISSUES_ID_URL + \"/comments\";\n+    private static final String ISSUES_COMMENTS_ID_URL = ISSUES_COMMENTS_URL + \"/%d\";\n+    private static final String ATTACHMENTS_URL = SERVLET_PATH + \"/attachment\";\n+    private static final String ATTACHMENTS_ID_URL = ATTACHMENTS_URL + \"/%d\";\n+\n+\n+    private static final String ENTITY_ID = \"entityId\";\n+    private static final String ENTITY_CLASS = \"entityClass\";\n+    private static final String PAGE = \"page\";\n+    private static final String PAGE_SIZE = \"pageSize\";\n+    private static final String FILE = \"file.txt\";\n+    private static final String PATH = \"path\";\n+    private static final String MULTIPART_CONTENT_TYPE =\n+            \"multipart/form-data; boundary=--------------------------boundary\";\n+    private static final String MULTIPART_CONTENT =\n+            \"----------------------------boundary\\r\\n\" +\n+            \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"file.txt\\\"\\r\\n\" +\n+            \"Content-Type:  application/octet-stream\\r\\n\" +\n+            \"\\r\\n\" +\n+            \"file.txt\" +\n+            \"\\r\\n\" +\n+            \"----------------------------boundary\";\n+\n+\n+    private final Issue issue = IssueCreatorUtils.getIssue();\n+    private final IssueVO issueVO = IssueCreatorUtils.getIssueVO();\n+    private final IssueComment issueComment = IssueCreatorUtils.getIssueComment();\n+    private final IssueCommentVO issueCommentVO = IssueCreatorUtils.getIssueCommentVO();\n+    private final Attachment attachment = IssueCreatorUtils.getAttachment();\n+\n+    @Autowired\n+    private IssueApiService mockIssueApiService;\n+\n+    @Autowired\n+    private AttachmentFileManager mockAttachmentFileManager;\n+\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateIssue() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(issueVO);\n+        doReturn(issue).when(mockIssueApiService).createIssue(issueVO);\n+\n+        final MvcResult mvcResult = performRequest(post(ISSUES_URL).content(content));\n+\n+        verify(mockIssueApiService).createIssue(issueVO);\n+        assertResponse(mvcResult, issue, IssueCreatorUtils.ISSUE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateIssue() {\n+        performUnauthorizedRequest(post(ISSUES_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadIssue() {\n+        doReturn(issue).when(mockIssueApiService).loadIssue(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(ISSUES_ID_URL, ID)));\n+\n+        verify(mockIssueApiService).loadIssue(ID);\n+        assertResponse(mvcResult, issue, IssueCreatorUtils.ISSUE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadIssue() {\n+        performUnauthorizedRequest(get(String.format(ISSUES_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadIssues() {\n+        final List<Issue> issues = Collections.singletonList(issue);\n+        final EntityVO entityVO = new EntityVO(ID, AclClass.DATA_STORAGE);\n+        final MultiValueMap<String, String> params =\n+                multiValueMapOf(ENTITY_ID, ID, ENTITY_CLASS, AclClass.DATA_STORAGE);\n+        doReturn(issues).when(mockIssueApiService).loadIssuesForEntity(entityVO);\n+\n+        final MvcResult mvcResult = performRequest(get(ISSUES_URL).params(params));\n+\n+        verify(mockIssueApiService).loadIssuesForEntity(entityVO);\n+        assertResponse(mvcResult, issues, IssueCreatorUtils.ISSUE_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadIssues() {\n+        performUnauthorizedRequest(get(ISSUES_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateIssue() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(issueVO);\n+        doReturn(issue).when(mockIssueApiService).updateIssue(ID, issueVO);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(ISSUES_ID_URL, ID)).content(content));\n+\n+        verify(mockIssueApiService).updateIssue(ID, issueVO);\n+        assertResponse(mvcResult, issue, IssueCreatorUtils.ISSUE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateIssue() {\n+        performUnauthorizedRequest(put(String.format(ISSUES_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteIssue() {\n+        doReturn(issue).when(mockIssueApiService).deleteIssue(ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(ISSUES_ID_URL, ID)));\n+\n+        verify(mockIssueApiService).deleteIssue(ID);\n+        assertResponse(mvcResult, issue, IssueCreatorUtils.ISSUE_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteIssue() {\n+        performUnauthorizedRequest(delete(String.format(ISSUES_ID_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldCreateIssueComment() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(issueCommentVO);\n+        doReturn(issueComment).when(mockIssueApiService).createComment(ID, issueCommentVO);\n+\n+        final MvcResult mvcResult = performRequest(post(String.format(ISSUES_COMMENTS_URL, ID)).content(content));\n+\n+        verify(mockIssueApiService).createComment(ID, issueCommentVO);\n+        assertResponse(mvcResult, issueComment, IssueCreatorUtils.ISSUE_COMMENT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailCreateIssueComment() {\n+        performUnauthorizedRequest(post(String.format(ISSUES_COMMENTS_URL, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldLoadIssueComment() {\n+        doReturn(issueComment).when(mockIssueApiService).loadComment(ID, ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(ISSUES_COMMENTS_ID_URL, ID, ID)));\n+\n+        verify(mockIssueApiService).loadComment(ID, ID);\n+        assertResponse(mvcResult, issueComment, IssueCreatorUtils.ISSUE_COMMENT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailLoadIssueComment() {\n+        performUnauthorizedRequest(get(String.format(ISSUES_COMMENTS_ID_URL, ID, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUpdateIssueComment() throws Exception {\n+        final String content = getObjectMapper().writeValueAsString(issueCommentVO);\n+        doReturn(issueComment).when(mockIssueApiService).updateComment(ID, ID, issueCommentVO);\n+\n+        final MvcResult mvcResult = performRequest(put(String.format(ISSUES_COMMENTS_ID_URL, ID, ID)).content(content));\n+\n+        verify(mockIssueApiService).updateComment(ID, ID, issueCommentVO);\n+        assertResponse(mvcResult, issueComment, IssueCreatorUtils.ISSUE_COMMENT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUpdateIssueComment() {\n+        performUnauthorizedRequest(put(String.format(ISSUES_COMMENTS_ID_URL, ID, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDeleteIssueComment() {\n+        doReturn(issueComment).when(mockIssueApiService).deleteComment(ID, ID);\n+\n+        final MvcResult mvcResult = performRequest(delete(String.format(ISSUES_COMMENTS_ID_URL, ID, ID)));\n+\n+        verify(mockIssueApiService).deleteComment(ID, ID);\n+        assertResponse(mvcResult, issueComment, IssueCreatorUtils.ISSUE_COMMENT_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailDeleteIssueComment() {\n+        performUnauthorizedRequest(get(String.format(ISSUES_COMMENTS_ID_URL, ID, ID)));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldUploadAttachments() {\n+        final List<Attachment> attachments = Collections.singletonList(attachment);\n+        doReturn(attachment).when(mockAttachmentFileManager).uploadAttachment(any(), eq(FILE));\n+\n+        final MvcResult mvcResult = performRequest(post(ATTACHMENTS_URL).content(MULTIPART_CONTENT).param(PATH, FILE),\n+                MULTIPART_CONTENT_TYPE, EXPECTED_CONTENT_TYPE);\n+\n+        verify(mockAttachmentFileManager).uploadAttachment(any(), eq(FILE));\n+        assertResponse(mvcResult, attachments, IssueCreatorUtils.ATTACHMENT_LIST_TYPE);\n+    }\n+\n+    @Test\n+    public void shouldFailUploadAttachments() {\n+        performUnauthorizedRequest(post(ATTACHMENTS_URL));\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    public void shouldDownloadAttachment() throws Exception {\n+        final DataStorageStreamingContent content = DatastorageCreatorUtils.getDataStorageStreamingContent();\n+        doReturn(content).when(mockAttachmentFileManager).downloadAttachment(ID);\n+\n+        final MvcResult mvcResult = performRequest(get(String.format(ATTACHMENTS_ID_URL, ID)),\n+                APPLICATION_OCTET_STREAM_VALUE);\n+\n+        verify(mockAttachmentFileManager).downloadAttachment(ID);\n+        Assert.assertEquals(TEST_STRING, mvcResult.getResponse().getContentAsString());", "originalCommit": "ad65bd04ea38a5021636d083c6dbf7e783b7e952", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4NzM3Ng==", "url": "https://github.com/epam/cloud-pipeline/pull/1575#discussion_r525987376", "bodyText": "My bad, the referenced method is not applicable here.", "author": "tcibinan", "createdAt": "2020-11-18T10:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2OTkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3a767e0c61cdff5ba0719934c0293ff3f12b00d2", "chunk": "diff --git a/api/src/test/java/com/epam/pipeline/controller/issue/IssueControllerTest.java b/api/src/test/java/com/epam/pipeline/controller/issue/IssueControllerTest.java\nindex 875a819ad..1e63e83de 100644\n--- a/api/src/test/java/com/epam/pipeline/controller/issue/IssueControllerTest.java\n+++ b/api/src/test/java/com/epam/pipeline/controller/issue/IssueControllerTest.java\n\n@@ -33,6 +33,7 @@ import com.epam.pipeline.test.creator.issue.IssueCreatorUtils;\n import com.epam.pipeline.test.web.AbstractControllerTest;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.mockito.Mockito;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\n import org.springframework.security.test.context.support.WithMockUser;\n"}}, {"oid": "3a767e0c61cdff5ba0719934c0293ff3f12b00d2", "url": "https://github.com/epam/cloud-pipeline/commit/3a767e0c61cdff5ba0719934c0293ff3f12b00d2", "message": "Issue #1405: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-11-25T10:38:15Z", "type": "commit"}, {"oid": "09fc6c9c0a4cca8327807f9da7a59151e6e6eb66", "url": "https://github.com/epam/cloud-pipeline/commit/09fc6c9c0a4cca8327807f9da7a59151e6e6eb66", "message": "Issue #1405: Minor multiValueMapOf method refactoring\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-11-25T10:39:15Z", "type": "commit"}, {"oid": "73e4a9f25746404b248cdd272faeb8d42eb5a387", "url": "https://github.com/epam/cloud-pipeline/commit/73e4a9f25746404b248cdd272faeb8d42eb5a387", "message": "Issue #1405: Style fixes\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-11-25T10:39:48Z", "type": "commit"}, {"oid": "182d32591c2994ba9f2338b37240a87a284bd523", "url": "https://github.com/epam/cloud-pipeline/commit/182d32591c2994ba9f2338b37240a87a284bd523", "message": "Issue #1405: Refactoring of parameters map creation\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-11-25T10:39:49Z", "type": "commit"}, {"oid": "8bdd12994ade064657878899710a80ab95d8b8a4", "url": "https://github.com/epam/cloud-pipeline/commit/8bdd12994ade064657878899710a80ab95d8b8a4", "message": "Issue #1405: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-11-25T11:10:58Z", "type": "commit"}, {"oid": "8bdd12994ade064657878899710a80ab95d8b8a4", "url": "https://github.com/epam/cloud-pipeline/commit/8bdd12994ade064657878899710a80ab95d8b8a4", "message": "Issue #1405: Branch rebased, merge conflicts resolved\n\nSigned-off-by: Iurii_Kofanov <youkofan@gmail.com>", "committedDate": "2020-11-25T11:10:58Z", "type": "forcePushed"}, {"oid": "758ad9115af6528b101be7640378597fb0339086", "url": "https://github.com/epam/cloud-pipeline/commit/758ad9115af6528b101be7640378597fb0339086", "message": "Merge branch 'develop' into issue_1405_Implemented_test_for_controller_layer_issue", "committedDate": "2020-11-25T13:52:22Z", "type": "commit"}]}