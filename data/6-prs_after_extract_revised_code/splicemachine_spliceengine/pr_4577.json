{"pr_number": 4577, "pr_title": "DB-10690 fix duplicate FirstWriteToken", "pr_createdAt": "2020-11-12T20:10:02Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4577", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2NzMxMA==", "url": "https://github.com/splicemachine/spliceengine/pull/4577#discussion_r522467310", "bodyText": "note for myself: are these conflicts collected? why does getLatest have parameter possibleConfilcts?", "author": "martinrupp", "createdAt": "2020-11-12T22:20:53Z", "path": "splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java", "diffHunk": "@@ -284,6 +284,17 @@ private void releaseLocksForKvBatch(Pair<KVPair, Lock>[] locks){\n             ConflictResults conflictResults=ConflictResults.NO_CONFLICT;\n             KVPair kvPair=baseDataAndLock.getFirst();\n             KVPair.Type writeType=kvPair.getType();\n+\n+            DataResult possibleConflicts = null;\n+            if(!skipConflictDetection)\n+            {\n+                // we need the possibleConflicts for\n+                // - has constraintChecker && writeType == UPSERT/UPDATE/DELETE: checking for constraint violations\n+                // - writeType == INSERT/UPSERT/DELETE: evaluating addFirstOccurrenceToken\n+                if( bloomInMemoryCheck == null || bloomInMemoryCheck.get(i) ) {\n+                    possibleConflicts = table.getLatest(kvPair.getRowKey(), possibleConflicts);", "originalCommit": "e74c822da95e0badc23e553b02936aeb91fe736b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4a2ed9d11319977edde317d36d15de9939751e9", "chunk": "diff --git a/splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java b/splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java\nindex 0ba596700d..7b060eedb5 100644\n--- a/splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java\n+++ b/splice_si_api/src/main/java/com/splicemachine/si/impl/server/SITransactor.java\n\n@@ -284,17 +284,7 @@ public class SITransactor implements Transactor{\n             ConflictResults conflictResults=ConflictResults.NO_CONFLICT;\n             KVPair kvPair=baseDataAndLock.getFirst();\n             KVPair.Type writeType=kvPair.getType();\n-\n-            DataResult possibleConflicts = null;\n-            if(!skipConflictDetection)\n-            {\n-                // we need the possibleConflicts for\n-                // - has constraintChecker && writeType == UPSERT/UPDATE/DELETE: checking for constraint violations\n-                // - writeType == INSERT/UPSERT/DELETE: evaluating addFirstOccurrenceToken\n-                if( bloomInMemoryCheck == null || bloomInMemoryCheck.get(i) ) {\n-                    possibleConflicts = table.getLatest(kvPair.getRowKey(), possibleConflicts);\n-                }\n-            }\n+            boolean checkedConflicts = false;\n             if(!skipConflictDetection && (constraintChecker!=null || !KVPair.Type.INSERT.equals(writeType))){\n                 /*\n                  *\n"}}, {"oid": "d4a2ed9d11319977edde317d36d15de9939751e9", "url": "https://github.com/splicemachine/spliceengine/commit/d4a2ed9d11319977edde317d36d15de9939751e9", "message": "DB-10690 fix duplicate FirstWriteToken", "committedDate": "2020-11-13T12:10:06Z", "type": "commit"}, {"oid": "d4a2ed9d11319977edde317d36d15de9939751e9", "url": "https://github.com/splicemachine/spliceengine/commit/d4a2ed9d11319977edde317d36d15de9939751e9", "message": "DB-10690 fix duplicate FirstWriteToken", "committedDate": "2020-11-13T12:10:06Z", "type": "forcePushed"}, {"oid": "cce89377a2b233de28b4ddcf8868396396fae09e", "url": "https://github.com/splicemachine/spliceengine/commit/cce89377a2b233de28b4ddcf8868396396fae09e", "message": "DB-10690 SICompactionStateMutate shouldn't have public state", "committedDate": "2020-11-13T12:38:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4OTg0Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4577#discussion_r522989847", "bodyText": "Remove", "author": "dgomezferro", "createdAt": "2020-11-13T14:37:24Z", "path": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java", "diffHunk": "@@ -412,6 +441,8 @@ public void mutatePurgeLatestTombstoneInMinorCompaction() throws IOException {\n                 SITestUtils.getMockFirstWriteCell(100)\n         ));\n \n+        System.out.println(toString(inputCells, false));", "originalCommit": "cce89377a2b233de28b4ddcf8868396396fae09e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4OTk1MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4577#discussion_r522989950", "bodyText": "Remove", "author": "dgomezferro", "createdAt": "2020-11-13T14:37:33Z", "path": "hbase_storage/src/test/java/com/splicemachine/si/impl/server/SICompactionStateMutateTest.java", "diffHunk": "@@ -422,8 +453,9 @@ public void mutatePurgeLatestTombstoneInMinorCompaction() throws IOException {\n                 transaction2,\n                 transaction1\n         ));\n-        cutPurgeDuringMinorCompaction.mutate(inputCells, transactions, outputCells);\n+        SICompactionStateMutate.mutate(cutPurgeDuringMinorCompaction, context, inputCells, transactions, outputCells);\n         assertThat(outputCells, is(empty()));\n+        System.out.println(toString(outputCells, false));", "originalCommit": "cce89377a2b233de28b4ddcf8868396396fae09e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}