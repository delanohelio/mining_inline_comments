{"pr_number": 4223, "pr_title": "DB-10328: clean up serialization for spark execution", "pr_createdAt": "2020-10-04T20:42:49Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4223", "timeline": [{"oid": "559b33f44dad12ea2ee23652548b14b8154794dc", "url": "https://github.com/splicemachine/spliceengine/commit/559b33f44dad12ea2ee23652548b14b8154794dc", "message": "DB-10328: clean up serialization for spark execution", "committedDate": "2020-10-05T22:21:01Z", "type": "forcePushed"}, {"oid": "a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "url": "https://github.com/splicemachine/spliceengine/commit/a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "message": "DB-10328: clean up serialization for spark execution", "committedDate": "2020-10-05T22:30:40Z", "type": "commit"}, {"oid": "a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "url": "https://github.com/splicemachine/spliceengine/commit/a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "message": "DB-10328: clean up serialization for spark execution", "committedDate": "2020-10-05T22:30:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyMjMyNg==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r500122326", "bodyText": "This method is very similar to generateExpression(), would it be possible to extract the commonalities so that there isn't so much copy paste?", "author": "dgomezferro", "createdAt": "2020-10-06T09:08:23Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java", "diffHunk": "@@ -1386,6 +1386,209 @@ public void generateExpression(ExpressionClassBuilder expressionBuilder,\n             mbex.pushThis();\n             mbex.callMethod(VMOpcode.INVOKEVIRTUAL,null,mb.getName(),subqueryTypeString,0);\n         }\n+\n+        generateSubqueryResultSet(expressionBuilder);\n+    }\n+\n+    public void generateSubqueryResultSet(ExpressionClassBuilder expressionBuilder) throws StandardException {\n+        CompilerContext cc=getCompilerContext();", "originalCommit": "a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1OTczMA==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r500159730", "bodyText": "\ud83d\udc4d", "author": "hatyo", "createdAt": "2020-10-06T10:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyMjMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MTkyMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r501061922", "bodyText": "Refactored and extracted common code.", "author": "jyuanca", "createdAt": "2020-10-07T14:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyMjMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "1262d7086d36fbe923ee9e9d8afa2a3e7c075468", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java\nindex 63ef050038..dfd0262143 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/SubqueryNode.java\n\n@@ -1386,13 +1200,10 @@ public class SubqueryNode extends ValueNode{\n             mbex.pushThis();\n             mbex.callMethod(VMOpcode.INVOKEVIRTUAL,null,mb.getName(),subqueryTypeString,0);\n         }\n-\n-        generateSubqueryResultSet(expressionBuilder);\n     }\n \n-    public void generateSubqueryResultSet(ExpressionClassBuilder expressionBuilder) throws StandardException {\n-        CompilerContext cc=getCompilerContext();\n-        String resultSetString;\n+    public void generateSubqueryResultSets(ExpressionClassBuilder expressionBuilder) throws StandardException {\n+\n \n         ///////////////////////////////////////////////////////////////////////////\n         //\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyMzc1NA==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r500123754", "bodyText": "Why do we need this one to be externalizable?", "author": "dgomezferro", "createdAt": "2020-10-06T09:10:42Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java", "diffHunk": "@@ -34,12 +34,13 @@\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.apache.log4j.Logger;\n \n+import java.io.Externalizable;\n import java.io.IOException;\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.util.Arrays;\n \n-public abstract class ScanOperation extends SpliceBaseOperation{\n+public abstract class ScanOperation extends SpliceBaseOperation implements Externalizable {", "originalCommit": "a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MTE1Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r501061153", "bodyText": "Removed", "author": "jyuanca", "createdAt": "2020-10-07T14:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyMzc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "1262d7086d36fbe923ee9e9d8afa2a3e7c075468", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java\nindex b881a66a0f..8115a93c4b 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java\n\n@@ -40,7 +40,7 @@ import java.io.ObjectInput;\n import java.io.ObjectOutput;\n import java.util.Arrays;\n \n-public abstract class ScanOperation extends SpliceBaseOperation implements Externalizable {\n+public abstract class ScanOperation extends SpliceBaseOperation {\n     private static final Logger LOG=Logger.getLogger(ScanOperation.class);\n     private static final long serialVersionUID=7l;\n     public int lockMode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MTA1MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r500161050", "bodyText": "please remove (same below)", "author": "hatyo", "createdAt": "2020-10-06T10:13:26Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java", "diffHunk": "@@ -135,7 +136,7 @@ public ScanOperation(long conglomId,Activation activation,int resultSetNumber,\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{\n-        super.readExternal(in);\n+        //super.readExternal(in);", "originalCommit": "a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MTMzNw==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r501061337", "bodyText": "Removed", "author": "jyuanca", "createdAt": "2020-10-07T14:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MTA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "1262d7086d36fbe923ee9e9d8afa2a3e7c075468", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java\nindex b881a66a0f..8115a93c4b 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/ScanOperation.java\n\n@@ -133,55 +133,6 @@ public abstract class ScanOperation extends SpliceBaseOperation implements Exter\n         return columnOrdering;\n     }\n \n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException{\n-        //super.readExternal(in);\n-        oneRowScan=in.readBoolean();\n-        lockMode=in.readInt();\n-        isolationLevel=in.readInt();\n-        scanInformation=(ScanInformation<ExecRow>)in.readObject();\n-        tableVersion=in.readUTF();\n-        rowIdKey = in.readBoolean();\n-        pin = in.readBoolean();\n-        delimited = in.readBoolean()?in.readUTF():null;\n-        escaped = in.readBoolean()?in.readUTF():null;\n-        lines = in.readBoolean()?in.readUTF():null;\n-        storedAs = in.readBoolean()?in.readUTF():null;\n-        location = in.readBoolean()?in.readUTF():null;\n-        partitionRefItem = in.readInt();\n-        splits = in.readInt();\n-    }\n-\n-    @Override\n-    public void writeExternal(ObjectOutput out) throws IOException{\n-        //super.writeExternal(out);\n-        out.writeBoolean(oneRowScan);\n-        out.writeInt(lockMode);\n-        out.writeInt(isolationLevel);\n-        out.writeObject(scanInformation);\n-        out.writeUTF(tableVersion);\n-        out.writeBoolean(rowIdKey);\n-        out.writeBoolean(pin);\n-        out.writeBoolean(delimited!=null);\n-        if (delimited!=null)\n-            out.writeUTF(delimited);\n-        out.writeBoolean(escaped!=null);\n-        if (escaped!=null)\n-            out.writeUTF(escaped);\n-        out.writeBoolean(lines!=null);\n-        if (lines!=null)\n-            out.writeUTF(lines);\n-        out.writeBoolean(storedAs!=null);\n-        if (storedAs!=null)\n-            out.writeUTF(storedAs);\n-        out.writeBoolean(location!=null);\n-        if (location!=null)\n-            out.writeUTF(location);\n-        out.writeInt(partitionRefItem);\n-        out.writeInt(splits);\n-    }\n-\n     @Override\n     public void init(SpliceOperationContext context) throws StandardException, IOException{\n         SpliceLogUtils.trace(LOG,\"init called\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NjU4NA==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r500166584", "bodyText": "source.openCore(); is already called once in populateCache(), is it necessary to call it again here?", "author": "hatyo", "createdAt": "2020-10-06T10:23:38Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/CachedOperation.java", "diffHunk": "@@ -134,6 +109,8 @@ public String prettyPrint(int indentLevel) {\n     public DataSet<ExecRow> getDataSet(DataSetProcessor dsp) throws StandardException {\n         if (!isOpen)\n             throw new IllegalStateException(\"Operation is not open\");\n+        populateCache();\n+        source.openCore(dsp);", "originalCommit": "a8a0eb0788ba7eb099ff981c583965a3e88f3f3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcxNzcyNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4223#discussion_r500717725", "bodyText": "It it closed by populateCache() eventually", "author": "jyuanca", "createdAt": "2020-10-07T03:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2NjU4NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1262d7086d36fbe923ee9e9d8afa2a3e7c075468", "url": "https://github.com/splicemachine/spliceengine/commit/1262d7086d36fbe923ee9e9d8afa2a3e7c075468", "message": "refactor", "committedDate": "2020-10-07T04:34:13Z", "type": "commit"}, {"oid": "9b502f279a9a952aab6994eba51ca2df3da99aa3", "url": "https://github.com/splicemachine/spliceengine/commit/9b502f279a9a952aab6994eba51ca2df3da99aa3", "message": "cleanup", "committedDate": "2020-10-07T14:32:52Z", "type": "commit"}]}