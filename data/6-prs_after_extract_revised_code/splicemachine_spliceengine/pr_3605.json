{"pr_number": 3605, "pr_title": "DB-9405: set replication role before splice is up", "pr_createdAt": "2020-05-27T00:04:25Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3605", "timeline": [{"oid": "4a12335fbb09f75c6d2e44c410e9387b97ab5788", "url": "https://github.com/splicemachine/spliceengine/commit/4a12335fbb09f75c6d2e44c410e9387b97ab5788", "message": "DB-9405: set replication role before splice is up", "committedDate": "2020-05-27T00:20:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NDExNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3605#discussion_r442644115", "bodyText": "@jyuanca Why we don't need to set replication role for MasterObserver?", "author": "yxia92", "createdAt": "2020-06-19T05:51:49Z", "path": "hbase_sql/src/main/java/com/splicemachine/hbase/SpliceMasterObserver.java", "diffHunk": "@@ -270,7 +266,7 @@ public void shutdown() throws Exception {\n             try {\n                 MasterLifecycle distributedStartupSequence = new MasterLifecycle();\n                 manager.registerEngineService(new EngineLifecycleService(distributedStartupSequence, config, true));\n-                manager.start();\n+                manager.start(null);", "originalCommit": "4a12335fbb09f75c6d2e44c410e9387b97ab5788", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczNTY5MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3605#discussion_r443735690", "bodyText": "This flag is to prevent a writeable transaction. No one can connect to master and run write workload", "author": "jyuanca", "createdAt": "2020-06-22T18:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NDExNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NzUxNw==", "url": "https://github.com/splicemachine/spliceengine/pull/3605#discussion_r451387517", "bodyText": "I think it is a good idea to throw an exception is role doesn't match (or at least add an assert)", "author": "hatyo", "createdAt": "2020-07-08T08:52:52Z", "path": "pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java", "diffHunk": "@@ -255,6 +267,28 @@ private boolean bootServices(State nextState,List<DatabaseLifecycleService> serv\n             }\n             return true;\n         }\n+\n+        public void setReplicationRole(byte[] role) {\n+            if (role == null)\n+                return;\n+            if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_NONE) != 0) {\n+                if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_MASTER) == 0) {\n+                    setReplicationRoleLocal(\"MASTER\");\n+                } else if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_SLAVE) == 0) {\n+                    setReplicationRoleLocal(\"SLAVE\");\n+                }", "originalCommit": "4a12335fbb09f75c6d2e44c410e9387b97ab5788", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e56c33339223169643238ea1ef17f5fc01de6b", "chunk": "diff --git a/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java b/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java\nindex 25ac81ea38..8fb9b3c57c 100644\n--- a/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java\n+++ b/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java\n\n@@ -272,15 +276,19 @@ public class DatabaseLifecycleManager{\n             if (role == null)\n                 return;\n             if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_NONE) != 0) {\n-                if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_MASTER) == 0) {\n-                    setReplicationRoleLocal(\"MASTER\");\n-                } else if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_SLAVE) == 0) {\n-                    setReplicationRoleLocal(\"SLAVE\");\n+                if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_PRIMARY) == 0) {\n+                    setReplicationRoleLocal(SIConstants.REPLICATION_ROLE_PRIMARY);\n+                } else if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_REPLICA) == 0) {\n+                    setReplicationRoleLocal(SIConstants.REPLICATION_ROLE_REPLICA);\n+                } else {\n+                    throw new RuntimeException(\n+                            StandardException.newException(SQLState.INVALID_PARAMETER, \"REPLICAITON_ROLE\",\n+                                    new String(role, Charset.defaultCharset())));\n                 }\n             }\n         }\n \n-        public void setReplicationRoleLocal(String role) {\n+        private void setReplicationRoleLocal(String role) {\n             SIDriver.driver().lifecycleManager().setReplicationRole(role);\n             Collection<Context> allContexts=\n                     ContextService.getFactory().getAllContexts(LanguageConnectionContext.CONTEXT_ID);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4Nzk4OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3605#discussion_r451387988", "bodyText": "can this be made private?", "author": "hatyo", "createdAt": "2020-07-08T08:53:36Z", "path": "pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java", "diffHunk": "@@ -255,6 +267,28 @@ private boolean bootServices(State nextState,List<DatabaseLifecycleService> serv\n             }\n             return true;\n         }\n+\n+        public void setReplicationRole(byte[] role) {\n+            if (role == null)\n+                return;\n+            if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_NONE) != 0) {\n+                if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_MASTER) == 0) {\n+                    setReplicationRoleLocal(\"MASTER\");\n+                } else if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_SLAVE) == 0) {\n+                    setReplicationRoleLocal(\"SLAVE\");\n+                }\n+            }\n+        }\n+\n+        public void setReplicationRoleLocal(String role) {", "originalCommit": "4a12335fbb09f75c6d2e44c410e9387b97ab5788", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63e56c33339223169643238ea1ef17f5fc01de6b", "chunk": "diff --git a/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java b/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java\nindex 25ac81ea38..8fb9b3c57c 100644\n--- a/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java\n+++ b/pipeline_api/src/main/java/com/splicemachine/lifecycle/DatabaseLifecycleManager.java\n\n@@ -272,15 +276,19 @@ public class DatabaseLifecycleManager{\n             if (role == null)\n                 return;\n             if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_NONE) != 0) {\n-                if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_MASTER) == 0) {\n-                    setReplicationRoleLocal(\"MASTER\");\n-                } else if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_SLAVE) == 0) {\n-                    setReplicationRoleLocal(\"SLAVE\");\n+                if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_PRIMARY) == 0) {\n+                    setReplicationRoleLocal(SIConstants.REPLICATION_ROLE_PRIMARY);\n+                } else if (Bytes.compareTo(role, HBaseConfiguration.REPLICATION_REPLICA) == 0) {\n+                    setReplicationRoleLocal(SIConstants.REPLICATION_ROLE_REPLICA);\n+                } else {\n+                    throw new RuntimeException(\n+                            StandardException.newException(SQLState.INVALID_PARAMETER, \"REPLICAITON_ROLE\",\n+                                    new String(role, Charset.defaultCharset())));\n                 }\n             }\n         }\n \n-        public void setReplicationRoleLocal(String role) {\n+        private void setReplicationRoleLocal(String role) {\n             SIDriver.driver().lifecycleManager().setReplicationRole(role);\n             Collection<Context> allContexts=\n                     ContextService.getFactory().getAllContexts(LanguageConnectionContext.CONTEXT_ID);\n"}}, {"oid": "63e56c33339223169643238ea1ef17f5fc01de6b", "url": "https://github.com/splicemachine/spliceengine/commit/63e56c33339223169643238ea1ef17f5fc01de6b", "message": "clean up", "committedDate": "2020-07-09T01:00:41Z", "type": "forcePushed"}, {"oid": "6daf12e3a08a00b568162dec9f3ad5e32dc6997c", "url": "https://github.com/splicemachine/spliceengine/commit/6daf12e3a08a00b568162dec9f3ad5e32dc6997c", "message": "DB-9405: set replication role before splice is up", "committedDate": "2020-07-09T15:12:30Z", "type": "forcePushed"}, {"oid": "39e7e981ebb976357b0db5c6abebccb29b1f8977", "url": "https://github.com/splicemachine/spliceengine/commit/39e7e981ebb976357b0db5c6abebccb29b1f8977", "message": "DB-9405: set replication role before splice is up", "committedDate": "2020-07-10T16:19:04Z", "type": "commit"}, {"oid": "39e7e981ebb976357b0db5c6abebccb29b1f8977", "url": "https://github.com/splicemachine/spliceengine/commit/39e7e981ebb976357b0db5c6abebccb29b1f8977", "message": "DB-9405: set replication role before splice is up", "committedDate": "2020-07-10T16:19:04Z", "type": "forcePushed"}]}