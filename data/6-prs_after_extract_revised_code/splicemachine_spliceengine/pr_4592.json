{"pr_number": 4592, "pr_title": "DB-10723 Support cast to [VAR]CHAR as SBCS DATA ", "pr_createdAt": "2020-11-13T11:54:48Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4592", "timeline": [{"oid": "a2af3089cacda1908e4d1073df7464299d426efb", "url": "https://github.com/splicemachine/spliceengine/commit/a2af3089cacda1908e4d1073df7464299d426efb", "message": "DB-10722 Support cast as [var]char(n) ccsid ascii\n\nThis is basically a no-op", "committedDate": "2020-11-13T09:43:19Z", "type": "commit"}, {"oid": "9ab8fc35d280435182265459ab00ff52e5501fb3", "url": "https://github.com/splicemachine/spliceengine/commit/9ab8fc35d280435182265459ab00ff52e5501fb3", "message": "DB-10723 Support cast to [VAR]CHAR as SBCS DATA", "committedDate": "2020-11-13T11:49:01Z", "type": "commit"}, {"oid": "bd4dae8a1c72a77b342d75c586a1322518cc63af", "url": "https://github.com/splicemachine/spliceengine/commit/bd4dae8a1c72a77b342d75c586a1322518cc63af", "message": "Merge remote-tracking branch 'origin/master' into DB-10723", "committedDate": "2020-11-13T13:41:25Z", "type": "commit"}, {"oid": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57", "url": "https://github.com/splicemachine/spliceengine/commit/2fe0add2b542e22e53e35a8db3f8ac7d80e44e57", "message": "DB-10723 Test on spark and control", "committedDate": "2020-11-13T13:43:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NTY0MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r522985640", "bodyText": "You can do insert into sbcs values (NULL, NULL) the case trick is only needed when you want a NULL in the select portion of a query I think.", "author": "dgomezferro", "createdAt": "2020-11-13T14:30:50Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java", "diffHunk": "@@ -782,5 +782,36 @@ public void testLengthOfCastToVarchar() throws Exception {\n             assertEquals(2, rs.getInt(1));\n         }\n     }\n+\n+    @Test\n+    public void testCastToCharCcsidAscii() throws SQLException {\n+        try (ResultSet rs = methodWatcher.executeQuery(\"select cast('abc' as char(5)), cast('abc' as char(5) ccsid ascii),\" +\n+                \"cast('abc' as varchar(5)), cast('abc' as varchar(5) ccsid ascii)\")) {\n+            rs.next();\n+            assertEquals(rs.getString(1), rs.getString(2));\n+            assertEquals(rs.getString(3), rs.getString(4));\n+        }\n+    }\n+\n+    @Test\n+    public void testCastToCharForSbcsData() throws Exception\n+    {\n+        methodWatcher.executeUpdate(\"drop table sbcs if exists\");\n+        methodWatcher.executeUpdate(\"create table sbcs(a varchar(30) for bit data, b char(30) for bit data)\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (cast('a' as varchar(30) for bit data), cast('b' as char(30) for bit data))\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (case when 1 = 2 then 'dummy' end, case when 1 = 2 then 'dummy' end)\");", "originalCommit": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwMzkzOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r523003938", "bodyText": "Ah, good to know, thanks!", "author": "arnaud-splice", "createdAt": "2020-11-13T14:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NTY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "3c6e938f58ccef181e8549eeb949815c923a22ef", "chunk": "diff --git a/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java b/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java\nindex c0ef5cda53..0494b3cf31 100644\n--- a/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java\n+++ b/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/FunctionIT.java\n\n@@ -799,7 +799,7 @@ public class FunctionIT extends SpliceUnitTest {\n         methodWatcher.executeUpdate(\"drop table sbcs if exists\");\n         methodWatcher.executeUpdate(\"create table sbcs(a varchar(30) for bit data, b char(30) for bit data)\");\n         methodWatcher.executeUpdate(\"insert into sbcs values (cast('a' as varchar(30) for bit data), cast('b' as char(30) for bit data))\");\n-        methodWatcher.executeUpdate(\"insert into sbcs values (case when 1 = 2 then 'dummy' end, case when 1 = 2 then 'dummy' end)\");\n+        methodWatcher.executeUpdate(\"insert into sbcs values (null, null)\");\n         String sql = \"select cast(a as varchar(30)), cast(a as varchar(30) for sbcs data),\" +\n                 \"cast(b as char(30)), cast(b as char(30) for sbcs data) from sbcs --splice-properties useSpark=%s\\n order by a\";\n             String expected = \"1  |  2  |               3               |  4  |\\n\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjMxNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r522986314", "bodyText": "@arnaud-splice have you tested this with triggers?\n@jyuanca @yxia92 do you think this could cause issues if we don't serialize it?", "author": "dgomezferro", "createdAt": "2020-11-13T14:31:48Z", "path": "db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java", "diffHunk": "@@ -65,6 +65,8 @@\n     private int                        scale;\n     private boolean                    isNullable;\n     private int                        maximumWidth;\n+\n+    transient private boolean          forSbcsData;", "originalCommit": "2fe0add2b542e22e53e35a8db3f8ac7d80e44e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwNDY1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r523004659", "bodyText": "I have, everything works well. We only use this variable in CastNode.generateExpression. I think it'd be cleaner to add this boolean to the cast node itself, but that means reworking the grammar quite a bit, I'll see what I can do there. (May have to push that refactor to next sprint)", "author": "arnaud-splice", "createdAt": "2020-11-13T14:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyMDcyNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4592#discussion_r523020724", "bodyText": "Refactoring done.", "author": "arnaud-splice", "createdAt": "2020-11-13T15:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4NjMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "3c6e938f58ccef181e8549eeb949815c923a22ef", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java b/db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java\nindex 53922523b0..d1942494b3 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/catalog/types/TypeDescriptorImpl.java\n\n@@ -66,7 +66,6 @@ public class TypeDescriptorImpl implements TypeDescriptor, Formatable {\n     private boolean                    isNullable;\n     private int                        maximumWidth;\n \n-    transient private boolean          forSbcsData;\n     private TypeDescriptor[] children;\n     /** @see TypeDescriptor#getCollationType() */\n     private int    collationType = StringDataValue.COLLATION_TYPE_UCS_BASIC;\n"}}, {"oid": "3c6e938f58ccef181e8549eeb949815c923a22ef", "url": "https://github.com/splicemachine/spliceengine/commit/3c6e938f58ccef181e8549eeb949815c923a22ef", "message": "DB-10723 Address comments", "committedDate": "2020-11-13T15:23:41Z", "type": "commit"}, {"oid": "dd4eb6b5007075f06aeaf7727f1bd08c97e9677f", "url": "https://github.com/splicemachine/spliceengine/commit/dd4eb6b5007075f06aeaf7727f1bd08c97e9677f", "message": "Merge remote-tracking branch 'origin/master' into DB-10723", "committedDate": "2020-11-13T17:15:00Z", "type": "commit"}]}