{"pr_number": 3777, "pr_title": "DB-9171 Allow defining unique and PK constraint on same column(s)", "pr_createdAt": "2020-07-08T13:51:23Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3777", "timeline": [{"oid": "e2b92ce17b8781ccbde601d1ae634f1fb0b5424a", "url": "https://github.com/splicemachine/spliceengine/commit/e2b92ce17b8781ccbde601d1ae634f1fb0b5424a", "message": "DB-9171 Allow defining unique constraint and PK constraint on same column.\n\n- Some tools (e.g. SQLAlchemy) is reported to generate a DDL statement\n  against SpliceMachine containing PK and UQ constraints on the same\n  set of columns.\n- The fix allow this syntax, but under the hood it ignores the UQ\n  constraint since it is redundant.\n- If a user attempts to add a redundant UQ constraint via ALTER table\n  then we still throw an exception.\n- Add tests and address SpotBug reported issues on affected files.", "committedDate": "2020-07-08T13:45:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MTczNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3777#discussion_r452781735", "bodyText": "Please use lower case method names", "author": "dgomezferro", "createdAt": "2020-07-10T11:16:32Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.splicemachine.derby.impl.sql.execute.operations;\n+\n+import com.splicemachine.derby.test.framework.SpliceSchemaWatcher;\n+import com.splicemachine.derby.test.framework.SpliceWatcher;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.junit.Assert;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+public class CreateTableIT {\n+    private static final String SCHEMA = CreateTableIT.class.getSimpleName().toUpperCase();\n+\n+    @ClassRule\n+    public final static SpliceWatcher watcher = new SpliceWatcher(SCHEMA);\n+\n+    @ClassRule\n+    public static SpliceSchemaWatcher spliceSchemaWatcher = new SpliceSchemaWatcher(SCHEMA);\n+\n+    static int counter = 0;\n+    private static String GenerateTableName() {\n+        return \"T\" + counter++;\n+    }\n+\n+    private void ShouldContains(String tableName, List<List<Integer>> rows) throws SQLException {", "originalCommit": "e2b92ce17b8781ccbde601d1ae634f1fb0b5424a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3NjQ2Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3777#discussion_r452976467", "bodyText": "Thanks, I fixed them.", "author": "hatyo", "createdAt": "2020-07-10T17:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4MTczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "977b0f0ad3ef714779e5615445a1524af13502f1", "chunk": "diff --git a/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java b/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java\nindex 97acaf7c48..be48ef6cb4 100644\n--- a/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java\n+++ b/splice_machine/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/CreateTableIT.java\n\n@@ -26,11 +26,11 @@ public class CreateTableIT {\n     public static SpliceSchemaWatcher spliceSchemaWatcher = new SpliceSchemaWatcher(SCHEMA);\n \n     static int counter = 0;\n-    private static String GenerateTableName() {\n+    private static String generateTableName() {\n         return \"T\" + counter++;\n     }\n \n-    private void ShouldContains(String tableName, List<List<Integer>> rows) throws SQLException {\n+    private void shouldContain(String tableName, List<List<Integer>> rows) throws SQLException {\n         ResultSet rs =  watcher.executeQuery(\"SELECT * FROM \" + tableName + \" ORDER BY c1 ASC\");\n         for(List<Integer> row : rows) {\n             Assert.assertTrue(rs.next());\n"}}, {"oid": "977b0f0ad3ef714779e5615445a1524af13502f1", "url": "https://github.com/splicemachine/spliceengine/commit/977b0f0ad3ef714779e5615445a1524af13502f1", "message": "Addressed comments.", "committedDate": "2020-07-10T17:21:27Z", "type": "commit"}, {"oid": "223a3ab08c10431ebf38c606aa256e3f766180b1", "url": "https://github.com/splicemachine/spliceengine/commit/223a3ab08c10431ebf38c606aa256e3f766180b1", "message": "Merge remote-tracking branch 'origin/master' into DB-9171", "committedDate": "2020-07-10T17:21:47Z", "type": "commit"}]}