{"pr_number": 3986, "pr_title": "DB-9980 Report tables and columns missing statistics in explain statement", "pr_createdAt": "2020-08-14T14:59:05Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3986", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjY5OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472552699", "bodyText": "Same here", "author": "jyuanca", "createdAt": "2020-08-18T23:41:24Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -393,7 +417,8 @@ public static int getPartitions(String table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();\n             } catch (IOException e) {\n                 // ignore\n             }", "originalCommit": "35d1d723095b2507d471ee9850395b3de0cdc021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyODQ2MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r473028460", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-08-19T13:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3ODAxNA==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r474678014", "bodyText": "I have to rebase this branch, otherwise it doesn't compile due to dependency issues. You can review the new commits starting from this one: f236e62", "author": "ascend1", "createdAt": "2020-08-21T12:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "276d4124da849e2868da81fa73ef97cb892132fc", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\nindex ebe75d7452..ac22ce010b 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\n\n@@ -407,21 +385,13 @@ public class StoreCostControllerImpl implements StoreCostController {\n         return getPartitions(table,partitions,false);\n     }\n \n+    @SuppressFBWarnings(value = \"NP_NULL_ON_SOME_PATH_EXCEPTION\", justification = \"DB-9844\")\n     public static int getPartitions(String table, List<Partition> partitions, boolean refresh) throws StandardException {\n-        Partition root = null;\n-        try {\n-            root = SIDriver.driver().getTableFactory().getTable(table);\n+        try (Partition root = SIDriver.driver().getTableFactory().getTable(table)) {\n             partitions.addAll(root.subPartitions(refresh));\n             return partitions.size();\n         } catch (Exception ioe) {\n             throw StandardException.plainWrapException(ioe);\n-        } finally {\n-            try {\n-                if (root != null)\n-                    root.close();\n-            } catch (IOException e) {\n-                // ignore\n-            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjgzOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472552839", "bodyText": "You can rewrite this with try-with-resources block", "author": "jyuanca", "createdAt": "2020-08-18T23:41:43Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -372,7 +395,8 @@ public static int getPartitions(byte[] table, List<Partition> partitions, boolea\n             throw StandardException.plainWrapException(ioe);\n         } finally {\n             try {\n-                root.close();\n+                if (root != null)\n+                    root.close();", "originalCommit": "35d1d723095b2507d471ee9850395b3de0cdc021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyODM5Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r473028397", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-08-19T13:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MjgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "276d4124da849e2868da81fa73ef97cb892132fc", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\nindex ebe75d7452..ac22ce010b 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\n\n@@ -385,21 +371,13 @@ public class StoreCostControllerImpl implements StoreCostController {\n         }\n     }\n \n+    @SuppressFBWarnings(value = \"NP_NULL_ON_SOME_PATH_EXCEPTION\", justification = \"DB-9844\")\n     public static int getPartitions(byte[] table, List<Partition> partitions, boolean refresh) throws StandardException {\n-        Partition root = null;\n-        try {\n-            root = SIDriver.driver().getTableFactory().getTable(table);\n+        try (Partition root = SIDriver.driver().getTableFactory().getTable(table)) {\n             partitions.addAll(root.subPartitions(refresh));\n             return partitions.size();\n         } catch (Exception ioe) {\n             throw StandardException.plainWrapException(ioe);\n-        } finally {\n-            try {\n-                if (root != null)\n-                    root.close();\n-            } catch (IOException e) {\n-                // ignore\n-            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNzU1NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472727554", "bodyText": "Ideally, missing column stats should not be all the columns in the table that do not have stats. It should only be the columns that are used by optimizer to estimate selectivity or cost. For example,\ncreate table t1 (a1 int, b1 int, c1 int);\ncreate table t2(a2 int, b2 int, c2 int);\n\ncall syscs_util.disable_column_statistics('SPLICE', 'T1', 'C1');\nanalyze table t1;\nanalyze table t2;\nexplain\nselect * from t1, t2 where a1=a2 and b1=1;\n\nFor this query, we don't care whether there is stats on c1 and b2, c2, we only care if there is stats on b1, a1, and a2 as they are the ones used by optimizer. So we should only report missing stats on these columns, but not on c1,  b2, and c2.", "author": "yxia92", "createdAt": "2020-08-19T05:48:31Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java", "diffHunk": "@@ -173,8 +178,26 @@ public StoreCostControllerImpl(TableDescriptor td, ConglomerateDescriptor conglo\n                     throw StandardException.plainWrapException(e);\n                 }\n             }\n+            useRealTableStatistics = false;\n         } else {\n             tableStatistics = new TableStatisticsImpl(tableId, partitionStats,fallbackNullFraction,extraQualifierMultiplier);\n+            useRealTableStatistics = true;\n+            assert !partitionStatistics.isEmpty();\n+\n+            List<ColumnStatisticsDescriptor> columnStats = partitionStatistics.get(0).getColumnStatsDescriptors();", "originalCommit": "35d1d723095b2507d471ee9850395b3de0cdc021", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r472729059", "bodyText": "So ideally, the missing column or stats info is specific to a query, and the info should be stored in the FromBaseTable instances instead of StoreCostControllerImpl which is shared among all the instances of the same table with in the same session.", "author": "yxia92", "createdAt": "2020-08-19T05:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNzU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3NzUyNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r474677525", "bodyText": "I made further commits implementing the ideas according to your comment and our discussion. I have to rebase on master since this branch is getting old. To review the new commits, you can start from this one: f236e62", "author": "ascend1", "createdAt": "2020-08-21T12:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNzU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "276d4124da849e2868da81fa73ef97cb892132fc", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\nindex ebe75d7452..ac22ce010b 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/StoreCostControllerImpl.java\n\n@@ -182,22 +182,6 @@ public class StoreCostControllerImpl implements StoreCostController {\n         } else {\n             tableStatistics = new TableStatisticsImpl(tableId, partitionStats,fallbackNullFraction,extraQualifierMultiplier);\n             useRealTableStatistics = true;\n-            assert !partitionStatistics.isEmpty();\n-\n-            List<ColumnStatisticsDescriptor> columnStats = partitionStatistics.get(0).getColumnStatsDescriptors();\n-            int numColumns = td.getColumnDescriptorList().size();\n-            assert columnStats.size() <= numColumns : \"Number of column statistics is bigger than number of columns\";\n-\n-            if (columnStats.size() < numColumns) {\n-                HashSet<Integer> statsColIds = new HashSet<>();\n-                for (ColumnStatisticsDescriptor colStats : columnStats) {\n-                    statsColIds.add(colStats.getColumnId());\n-                }\n-                for (ColumnDescriptor colDesc : td.getColumnDescriptorList()) {\n-                    if (!statsColIds.contains(colDesc.getPosition()))\n-                        noStatsColumnIds.add(colDesc.getPosition());\n-                }\n-            }\n         }\n     }\n \n"}}, {"oid": "276d4124da849e2868da81fa73ef97cb892132fc", "url": "https://github.com/splicemachine/spliceengine/commit/276d4124da849e2868da81fa73ef97cb892132fc", "message": "DB-9980 Fix SpotBugs", "committedDate": "2020-08-21T12:41:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODQyMw==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r477498423", "bodyText": "Object from the leftOperandList of an inlist may not be a ColumnReference, for example: a1+1 in (1,2,3). So it is better to be conservative to check the type before casting. The above code does not have problem now as currently, only inlist with column can come here.", "author": "yxia92", "createdAt": "2020-08-26T18:21:11Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "diffHunk": "@@ -147,6 +150,25 @@ private void addSelectivity(SelectivityHolder holder) {\n         return holders;\n     }\n \n+    private void checkInListPredColumnStats(Predicate p) throws StandardException {\n+        if (p.getSourceInList() != null) {\n+            for (Object o : p.getSourceInList().leftOperandList) {\n+                ColumnReference cr = (ColumnReference) o;", "originalCommit": "276d4124da849e2868da81fa73ef97cb892132fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MjE3NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r480392175", "bodyText": "I see. Added a check before casting.", "author": "ascend1", "createdAt": "2020-08-31T20:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "2d198939043539e6cb3e1133239b3d430da331b8", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java\nindex 4a6c97a753..2a703e3ae6 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java\n\n@@ -153,9 +153,11 @@ public class ScanCostFunction{\n     private void checkInListPredColumnStats(Predicate p) throws StandardException {\n         if (p.getSourceInList() != null) {\n             for (Object o : p.getSourceInList().leftOperandList) {\n-                ColumnReference cr = (ColumnReference) o;\n-                if (!scc.useRealColumnStatistics(cr.getColumnNumber()))\n-                    usedNoStatsColumnIds.add(cr.getColumnNumber());\n+                if (o instanceof ColumnReference) {\n+                    ColumnReference cr = (ColumnReference) o;\n+                    if (!scc.useRealColumnStatistics(cr.getColumnNumber()))\n+                        usedNoStatsColumnIds.add(cr.getColumnNumber());\n+                }\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODg3OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r477498878", "bodyText": "We do not need the stats on columns inside the aggregate function. So there is no need to visit the aggregate function nodes.", "author": "yxia92", "createdAt": "2020-08-26T18:22:01Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "diffHunk": "@@ -1445,4 +1445,24 @@ public String printExplainInformation(String attrDelim) throws StandardException\n         return sb.toString();\n     }\n \n+    public HashSet<String> getNoStatsColumns() throws StandardException {\n+        if (costEstimate == null)\n+            throw new RuntimeException(\"Should not be null\");\n+\n+        HashSet<String> noStatsColumns = new HashSet<>();\n+        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n+        for (OrderedColumn oc : groupingList) {\n+            oc.accept(cnv);\n+        }\n+        for (AggregateNode an : aggregateVector) {", "originalCommit": "276d4124da849e2868da81fa73ef97cb892132fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5MzE4Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r480393183", "bodyText": "Got it, removed in new commit.", "author": "ascend1", "createdAt": "2020-08-31T20:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5ODg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2d198939043539e6cb3e1133239b3d430da331b8", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java\nindex 719719d4a1..f5f070bda4 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java\n\n@@ -1454,9 +1454,7 @@ public class GroupByNode extends SingleChildResultSetNode{\n         for (OrderedColumn oc : groupingList) {\n             oc.accept(cnv);\n         }\n-        for (AggregateNode an : aggregateVector) {\n-            an.accept(cnv);\n-        }\n+        // we do not need stats on columns inside aggregate functions, no need to visit them\n         List<ColumnReference> columnRefNodes = cnv.getList();\n         for (ColumnReference cr : columnRefNodes) {\n             if (!cr.useRealColumnStatistics())\n"}}, {"oid": "2d198939043539e6cb3e1133239b3d430da331b8", "url": "https://github.com/splicemachine/spliceengine/commit/2d198939043539e6cb3e1133239b3d430da331b8", "message": "DB-9980 Address comments", "committedDate": "2020-08-31T20:56:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0Njc4MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482146780", "bodyText": "Nitpick: there's a single space added to the beginning of these lines", "author": "dgomezferro", "createdAt": "2020-09-02T15:09:09Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -31,24 +31,25 @@\n \n package com.splicemachine.db.impl.sql.compile;\n \n-import com.splicemachine.db.iapi.error.StandardException;\n-import com.splicemachine.db.iapi.reference.ClassName;\n-import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n-import com.splicemachine.db.iapi.services.sanity.SanityManager;\n-import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n-import com.splicemachine.db.iapi.sql.compile.Optimizable;\n-import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n-import com.splicemachine.db.iapi.store.access.ScanController;\n-import com.splicemachine.db.iapi.store.access.StoreCostController;\n-import com.splicemachine.db.iapi.types.DataValueDescriptor;\n-import com.splicemachine.db.iapi.types.Orderable;\n-import com.splicemachine.db.iapi.types.TypeId;\n-import com.splicemachine.db.iapi.util.JBitSet;\n-\n-import java.sql.Types;\n-import java.util.List;\n-\n-import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;\n+ import com.splicemachine.db.iapi.error.StandardException;\n+ import com.splicemachine.db.iapi.reference.ClassName;\n+ import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n+ import com.splicemachine.db.iapi.services.sanity.SanityManager;\n+ import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n+ import com.splicemachine.db.iapi.sql.compile.Optimizable;\n+ import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n+ import com.splicemachine.db.iapi.store.access.ScanController;\n+ import com.splicemachine.db.iapi.store.access.StoreCostController;\n+ import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+ import com.splicemachine.db.iapi.types.Orderable;\n+ import com.splicemachine.db.iapi.types.TypeId;\n+ import com.splicemachine.db.iapi.util.JBitSet;\n+\n+ import java.sql.Types;\n+ import java.util.HashSet;\n+ import java.util.List;\n+\n+ import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;", "originalCommit": "2d198939043539e6cb3e1133239b3d430da331b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1Nzc1Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483657756", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-09-04T14:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE0Njc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "1ca8d9b9c2d900f47d770858493c562a78db153b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java\nindex 9b8f97d4cb..021bffacb3 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java\n\n@@ -31,25 +31,24 @@\n \n package com.splicemachine.db.impl.sql.compile;\n \n- import com.splicemachine.db.iapi.error.StandardException;\n- import com.splicemachine.db.iapi.reference.ClassName;\n- import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n- import com.splicemachine.db.iapi.services.sanity.SanityManager;\n- import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n- import com.splicemachine.db.iapi.sql.compile.Optimizable;\n- import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n- import com.splicemachine.db.iapi.store.access.ScanController;\n- import com.splicemachine.db.iapi.store.access.StoreCostController;\n- import com.splicemachine.db.iapi.types.DataValueDescriptor;\n- import com.splicemachine.db.iapi.types.Orderable;\n- import com.splicemachine.db.iapi.types.TypeId;\n- import com.splicemachine.db.iapi.util.JBitSet;\n-\n- import java.sql.Types;\n- import java.util.HashSet;\n- import java.util.List;\n-\n- import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;\n+import com.splicemachine.db.iapi.error.StandardException;\n+import com.splicemachine.db.iapi.reference.ClassName;\n+import com.splicemachine.db.iapi.services.compiler.MethodBuilder;\n+import com.splicemachine.db.iapi.services.sanity.SanityManager;\n+import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;\n+import com.splicemachine.db.iapi.sql.compile.Optimizable;\n+import com.splicemachine.db.iapi.sql.dictionary.ConglomerateDescriptor;\n+import com.splicemachine.db.iapi.store.access.ScanController;\n+import com.splicemachine.db.iapi.store.access.StoreCostController;\n+import com.splicemachine.db.iapi.types.DataValueDescriptor;\n+import com.splicemachine.db.iapi.types.Orderable;\n+import com.splicemachine.db.iapi.types.TypeId;\n+import com.splicemachine.db.iapi.util.JBitSet;\n+\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static com.splicemachine.db.impl.sql.compile.SelectivityUtil.*;\n \n  /**\n  * This class represents the 6 binary operators: LessThan, LessThanEquals,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MDQ4NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482150485", "bodyText": "Should this be an assert instead of a RuntimeException?", "author": "dgomezferro", "createdAt": "2020-09-02T15:12:16Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java", "diffHunk": "@@ -1445,4 +1445,22 @@ public String printExplainInformation(String attrDelim) throws StandardException\n         return sb.toString();\n     }\n \n+    public HashSet<String> getNoStatsColumns() throws StandardException {\n+        if (costEstimate == null)\n+            throw new RuntimeException(\"Should not be null\");", "originalCommit": "2d198939043539e6cb3e1133239b3d430da331b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1OTE0Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483659142", "bodyText": "Ah, right, I forget to clean that up. Fixed in the latest commit.", "author": "ascend1", "createdAt": "2020-09-04T14:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MDQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ca8d9b9c2d900f47d770858493c562a78db153b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java\nindex f5f070bda4..04eb41ac71 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/GroupByNode.java\n\n@@ -1445,22 +1445,4 @@ public class GroupByNode extends SingleChildResultSetNode{\n         return sb.toString();\n     }\n \n-    public HashSet<String> getNoStatsColumns() throws StandardException {\n-        if (costEstimate == null)\n-            throw new RuntimeException(\"Should not be null\");\n-\n-        HashSet<String> noStatsColumns = new HashSet<>();\n-        CollectNodesVisitor cnv = new CollectNodesVisitor(ColumnReference.class);\n-        for (OrderedColumn oc : groupingList) {\n-            oc.accept(cnv);\n-        }\n-        // we do not need stats on columns inside aggregate functions, no need to visit them\n-        List<ColumnReference> columnRefNodes = cnv.getList();\n-        for (ColumnReference cr : columnRefNodes) {\n-            if (!cr.useRealColumnStatistics())\n-                noStatsColumns.add(cr.getSource().getSchemaName() + \".\" + cr.getSource().getFullName());\n-        }\n-        return noStatsColumns;\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1Mzk0OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482753949", "bodyText": "since we're using it here 3 times, maybe add function\npublic String getSchemaTableName() throws StandardException\n{\n   return getSchemaName() + \".\" + getFullName();\n}\n\nto ResultColumn.java", "author": "martinrupp", "createdAt": "2020-09-03T07:07:36Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java", "diffHunk": "@@ -1513,13 +1517,19 @@ public double joinSelectivity(Optimizable optTable,\n \n         if (rightOperand instanceof ColumnReference && ((ColumnReference) rightOperand).getSource().getTableColumnDescriptor() != null) {\n             ColumnReference right = (ColumnReference) rightOperand;\n+            if (!right.useRealColumnStatistics()) {\n+                noStatsColumns.add(right.getSource().getSchemaName() + \".\" + right.getSource().getFullName());", "originalCommit": "2d198939043539e6cb3e1133239b3d430da331b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2Mjg5MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483662891", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-09-04T14:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1Mzk0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ca8d9b9c2d900f47d770858493c562a78db153b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java\nindex 9b8f97d4cb..021bffacb3 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/BinaryRelationalOperatorNode.java\n\n@@ -1517,9 +1513,6 @@ public class BinaryRelationalOperatorNode\n \n         if (rightOperand instanceof ColumnReference && ((ColumnReference) rightOperand).getSource().getTableColumnDescriptor() != null) {\n             ColumnReference right = (ColumnReference) rightOperand;\n-            if (!right.useRealColumnStatistics()) {\n-                noStatsColumns.add(right.getSource().getSchemaName() + \".\" + right.getSource().getFullName());\n-            }\n             if (selectivityJoinType.equals(SelectivityUtil.SelectivityJoinType.LEFTOUTER)) {\n                 selectivity = (1.0d - right.nullSelectivity()) / right.nonZeroCardinality(innerRowCount);\n             } else if (selectivityJoinType.equals(SelectivityUtil.SelectivityJoinType.FULLOUTER)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDQwNw==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482760407", "bodyText": "this \"early out\" somehow looks dangerous to me. someone might miss that and add something to the end of the function, not seeing most of this function is only executed if showNoStatsObjects.\ni'd rather do\nif( showNoStatsObjects )\n{ \n  // code\n}\n\nor better - extract to a function\nif( showNoStatsObjects )\n  noStatsColumns = getNoStatsColumns();", "author": "martinrupp", "createdAt": "2020-09-03T07:20:24Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java", "diffHunk": "@@ -104,6 +115,49 @@ public void optimizeStatement() throws StandardException {\n             getCompilerContext().setDataSetProcessorType(DataSetProcessorType.FORCED_SPARK);\n         }\n         node.optimizeStatement();\n+\n+        // collect tables and columns that are missing statistics only for splice explain\n+        // showNoStatsObjects == false for all kinds of spark explain\n+        if (!showNoStatsObjects)\n+            return;", "originalCommit": "2d198939043539e6cb3e1133239b3d430da331b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2NzU1Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483667552", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-09-04T14:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MDQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "1ca8d9b9c2d900f47d770858493c562a78db153b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java\nindex e5b95c8767..4ea0ec1b90 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ExplainNode.java\n\n@@ -116,48 +110,20 @@ public class ExplainNode extends DMLStatementNode {\n         }\n         node.optimizeStatement();\n \n-        // collect tables and columns that are missing statistics only for splice explain\n-        // showNoStatsObjects == false for all kinds of spark explain\n-        if (!showNoStatsObjects)\n-            return;\n-\n-        HashSet<String> noStatsColumnSet = new HashSet<>();\n-\n-        // collect no stats columns used to estimate scan cost\n         CollectNodesVisitor cnv = new CollectNodesVisitor(FromBaseTable.class);\n         node.accept(cnv);\n         List<FromBaseTable> baseTableNodes = cnv.getList();\n         for (FromBaseTable t : baseTableNodes) {\n             String tableName = t.getExposedName();\n             if (!t.useRealTableStats()) {\n-                noStatsTables.add(new SQLVarchar(tableName));\n+                noStatsTables.add(tableName);\n             } else if (!t.getNoStatsColumnIds().isEmpty()) {\n                 TableDescriptor td = t.getTableDescriptor();\n                 for (int columnId : t.getNoStatsColumnIds()) {\n-                    noStatsColumnSet.add(tableName + \".\" + td.getColumnDescriptor(columnId).getColumnName());\n+                    noStatsColumns.add(tableName + \".\" + td.getColumnDescriptor(columnId).getColumnName());\n                 }\n             }\n         }\n-\n-        // collect no stats columns used to estimate join selectivity\n-        cnv = new CollectNodesVisitor(BinaryRelationalOperatorNode.class);\n-        node.accept(cnv);\n-        List<BinaryRelationalOperatorNode> binaryOpNodes = cnv.getList();\n-        for (BinaryRelationalOperatorNode bop : binaryOpNodes) {\n-            noStatsColumnSet.addAll(bop.getNoStatsColumns());\n-        }\n-\n-        // collect no stats columns used to estimate grouping cardinality\n-        cnv = new CollectNodesVisitor(GroupByNode.class);\n-        node.accept(cnv);\n-        List<GroupByNode> groupByNodes = cnv.getList();\n-        for (GroupByNode gbn : groupByNodes) {\n-            noStatsColumnSet.addAll(gbn.getNoStatsColumns());\n-        }\n-\n-        for (String columnName : noStatsColumnSet) {\n-            noStatsColumns.add(new SQLVarchar(columnName));\n-        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MzQzOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r482763439", "bodyText": "a \"check\" function for me is either throwing an error or returning bool true/false = check succeeded / check failed. these two functions are filling the usedNoStatsColumnIds, so i would say a better name would be\ncheckInListPredColumnStats -> addNoStatsColsFromInListPred(usedNoStatsColumnIds)\ncheckUnaryAndBinaryPredColumnStats -> addNoStatsColsFromUnaryAndBinaryPred(p, usedNoStatsColumnIds)", "author": "martinrupp", "createdAt": "2020-09-03T07:25:58Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java", "diffHunk": "@@ -147,6 +150,27 @@ private void addSelectivity(SelectivityHolder holder) {\n         return holders;\n     }\n \n+    private void checkInListPredColumnStats(Predicate p) throws StandardException {", "originalCommit": "2d198939043539e6cb3e1133239b3d430da331b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MDY0OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3986#discussion_r483670648", "bodyText": "Done.", "author": "ascend1", "createdAt": "2020-09-04T14:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MzQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1ca8d9b9c2d900f47d770858493c562a78db153b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java\nindex 2a703e3ae6..248da0a5de 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/ScanCostFunction.java\n\n@@ -150,27 +147,6 @@ public class ScanCostFunction{\n         return holders;\n     }\n \n-    private void checkInListPredColumnStats(Predicate p) throws StandardException {\n-        if (p.getSourceInList() != null) {\n-            for (Object o : p.getSourceInList().leftOperandList) {\n-                if (o instanceof ColumnReference) {\n-                    ColumnReference cr = (ColumnReference) o;\n-                    if (!scc.useRealColumnStatistics(cr.getColumnNumber()))\n-                        usedNoStatsColumnIds.add(cr.getColumnNumber());\n-                }\n-            }\n-        }\n-    }\n-\n-    private void checkUnaryAndBinaryPredColumnStats(Predicate p) throws StandardException {\n-        if (p.getRelop() != null) {\n-            ColumnReference cr = p.getRelop().getColumnOperand(baseTable);\n-            if (cr != null && !scc.useRealColumnStatistics(cr.getColumnNumber())) {\n-                usedNoStatsColumnIds.add(cr.getColumnNumber());\n-            }\n-        }\n-    }\n-\n     /**\n      *\n      * Add Predicate and keep track of the selectivity\n"}}, {"oid": "1ca8d9b9c2d900f47d770858493c562a78db153b", "url": "https://github.com/splicemachine/spliceengine/commit/1ca8d9b9c2d900f47d770858493c562a78db153b", "message": "DB-9980 Collect tables and columns missing statistics in EXPLAIN", "committedDate": "2020-09-04T14:35:15Z", "type": "commit"}, {"oid": "5867222e7e9c91095da12f8a6967ca91a7e0b6eb", "url": "https://github.com/splicemachine/spliceengine/commit/5867222e7e9c91095da12f8a6967ca91a7e0b6eb", "message": "DB-9980 Print tables and columns missing statistics in EXPLAIN", "committedDate": "2020-09-04T14:35:15Z", "type": "commit"}, {"oid": "7eee62e1e265678bf417473b99da30076b31d7c8", "url": "https://github.com/splicemachine/spliceengine/commit/7eee62e1e265678bf417473b99da30076b31d7c8", "message": "DB-9980 Add tests and fix existing tests", "committedDate": "2020-09-04T14:35:15Z", "type": "commit"}, {"oid": "2e4455017680454608e1f5ee90fb22edda42a543", "url": "https://github.com/splicemachine/spliceengine/commit/2e4455017680454608e1f5ee90fb22edda42a543", "message": "DB-9980 Fix SpotBugs", "committedDate": "2020-09-04T14:35:15Z", "type": "commit"}, {"oid": "d0ebc88834e12fc2774cc81a6743927d47a32118", "url": "https://github.com/splicemachine/spliceengine/commit/d0ebc88834e12fc2774cc81a6743927d47a32118", "message": "DB-9980 Report only columns used by optimizer but missing statistics", "committedDate": "2020-09-04T14:35:16Z", "type": "commit"}, {"oid": "a41b42b9a313563e974408cead3f36e6f86acd93", "url": "https://github.com/splicemachine/spliceengine/commit/a41b42b9a313563e974408cead3f36e6f86acd93", "message": "DB-9980 Add a switch of show missing stats objects to explain command", "committedDate": "2020-09-04T14:35:16Z", "type": "commit"}, {"oid": "9a410b141725e34811d287d9f5515d3a81b7f69e", "url": "https://github.com/splicemachine/spliceengine/commit/9a410b141725e34811d287d9f5515d3a81b7f69e", "message": "DB-9980 Fix SpotBugs", "committedDate": "2020-09-04T14:35:16Z", "type": "commit"}, {"oid": "5d5596e3f96985ede0d5258ba80ec9837cd043f1", "url": "https://github.com/splicemachine/spliceengine/commit/5d5596e3f96985ede0d5258ba80ec9837cd043f1", "message": "DB-9980 Address comments", "committedDate": "2020-09-04T14:35:16Z", "type": "commit"}, {"oid": "d443cc92a7ff694696664e2bc47e0cf11ce25a5c", "url": "https://github.com/splicemachine/spliceengine/commit/d443cc92a7ff694696664e2bc47e0cf11ce25a5c", "message": "DB-9980 Address comments", "committedDate": "2020-09-04T14:56:04Z", "type": "commit"}, {"oid": "d443cc92a7ff694696664e2bc47e0cf11ce25a5c", "url": "https://github.com/splicemachine/spliceengine/commit/d443cc92a7ff694696664e2bc47e0cf11ce25a5c", "message": "DB-9980 Address comments", "committedDate": "2020-09-04T14:56:04Z", "type": "forcePushed"}, {"oid": "7550ccb5e25620628a6e3af2846e3fadb118b3dd", "url": "https://github.com/splicemachine/spliceengine/commit/7550ccb5e25620628a6e3af2846e3fadb118b3dd", "message": "Merge branch 'master' into DB-9980", "committedDate": "2020-09-09T14:01:34Z", "type": "commit"}]}