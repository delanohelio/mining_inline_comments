{"pr_number": 3486, "pr_title": "DB-9109 fix problems with parallel runs of tests all writing to xxx/target/external", "pr_createdAt": "2020-04-24T16:38:53Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3486", "timeline": [{"oid": "37b9b78eda90185372073a8f6d0462761f41060b", "url": "https://github.com/splicemachine/spliceengine/commit/37b9b78eda90185372073a8f6d0462761f41060b", "message": "DB-9109 fix problems with parallel runs of tests all writing to xxx/target/external\n\nevery test that needs a temporary output dir will now on-demand create a temp directory,\nthat will be deleted automatically after the test has run, using the @After annotation of JUnit.", "committedDate": "2020-04-24T16:36:22Z", "type": "commit"}, {"oid": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b", "url": "https://github.com/splicemachine/spliceengine/commit/7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b", "message": "Merge remote-tracking branch 'origin/master' into DB-9109", "committedDate": "2020-04-24T18:20:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDI5MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414810291", "bodyText": "I think \"null_test_location_avro\" should be \"/null_test_location_avro\", otherwise, the temporary directory used would be something like \"SpliceUnitTest_temp_xxxxnull_test_location_avro\" instead of \"SpliceUnitTest_temp_xxxxn/ull_test_location_avro\". And the after test call deleteTempDirectory() wouldn't be able to delete this directory.  Everything else looks good to me.", "author": "yxia92", "createdAt": "2020-04-24T19:25:07Z", "path": "hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java", "diffHunk": "@@ -572,7 +562,7 @@ public void testWriteReadNullValues() throws Exception {\n     @Test\n     public void testWriteReadNullValuesAvro() throws Exception {\n \n-        String tablePath = getExternalResourceDirectory()+\"null_test_location_avro\";\n+        String tablePath = getTempOutputDirectory() + \"null_test_location_avro\";", "originalCommit": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NTQ4OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414895489", "bodyText": "actually a lot of tests forgot the /, so i added it to getTempOutputDirectory", "author": "martinrupp", "createdAt": "2020-04-24T22:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI1NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016255", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-04-25T08:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMDI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b7525f1a7075dfb1b40d0eca66c0217957f2ae96", "chunk": "diff --git a/hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java b/hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java\nindex 33962dbd1a..e7e7419e10 100644\n--- a/hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java\n+++ b/hbase_sql/src/test/java/com/splicemachine/derby/impl/sql/execute/operations/ExternalTableIT.java\n\n@@ -562,7 +562,7 @@ public class ExternalTableIT extends SpliceUnitTestWithTempDirectory {\n     @Test\n     public void testWriteReadNullValuesAvro() throws Exception {\n \n-        String tablePath = getTempOutputDirectory() + \"null_test_location_avro\";\n+        String tablePath = getExternalResourceDirectory()+\"null_test_location_avro\";\n         methodWatcher.executeUpdate(String.format(\"create external table null_test_avro (col1 int, col2 varchar(24))\" +\n                 \" STORED AS AVRO LOCATION '%s'\",tablePath));\n         int insertCount = methodWatcher.executeUpdate(String.format(\"insert into null_test_avro values (1,null),\" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODA4Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414838083", "bodyText": "Better create temp directories in \"/target\" as previously - build is self-contained, more control, less surprises.", "author": "OlegMazurov", "createdAt": "2020-04-24T20:17:44Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest\n+{\n+    /// set the following boolean to true to prevent deletion of temporary files (e.g. for debugging)\n+    public boolean debug_no_delete = false;\n+    /// the temporary directory (created on demand)\n+    private Path tempDir = null;\n+\n+    /// this will be called after each test, deleting possible temp directories.\n+    @After\n+    public void deleteTempDirectory() throws Exception\n+    {\n+        if( tempDir == null )\n+            return;\n+        else if( debug_no_delete )\n+            System.out.println( \"Not deleting test temporary directory \" + tempDir );\n+        else\n+            FileUtils.deleteDirectory( tempDir.toFile() );\n+    }\n+\n+    /// this will return the temp directory, that is created on demand once for each test\n+    public String getTempOutputDirectory() throws Exception\n+    {\n+        if( tempDir == null)\n+            tempDir = Files.createTempDirectory( \"SpliceUnitTest_temp_\" );", "originalCommit": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NDIwMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414894201", "bodyText": "ok", "author": "martinrupp", "createdAt": "2020-04-24T22:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODA4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI3Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016273", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-04-25T08:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7b0e07f773291341050fcc7e592ea69b12f54118", "chunk": "diff --git a/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java b/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java\nindex 779bbdbe81..855c42c5fc 100644\n--- a/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java\n+++ b/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java\n\n@@ -4,6 +4,7 @@ import org.apache.commons.io.FileUtils;\n import org.junit.After;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODQwMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414838401", "bodyText": "Why not merge the content of this class into SpliceUnitTest. We already have createBadLogDirectory there, f.e.\nDevelopers creating new unit tests won't need to differentiate between SpliceUnitTest and SpliceUnitTestWithTempDirectory: either you use the temporary directory or not. Passive overhead is negligible.", "author": "OlegMazurov", "createdAt": "2020-04-24T20:18:20Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.splicemachine.derby.test.framework;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/// this class extends SpliceUnitTest so that each test\n+/// can access a temporary output directory that is removed after the test is run\n+/// the temporary output directory is created only on demand.\n+/// might be also doable like SpliceSchemaWatcher extends TestWatcher\n+public class SpliceUnitTestWithTempDirectory extends SpliceUnitTest", "originalCommit": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NDY3NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414894675", "bodyText": "if preferred, also possible.", "author": "martinrupp", "createdAt": "2020-04-24T22:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI5NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016294", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-04-25T08:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzODQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7b0e07f773291341050fcc7e592ea69b12f54118", "chunk": "diff --git a/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java b/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java\nindex 779bbdbe81..855c42c5fc 100644\n--- a/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java\n+++ b/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTestWithTempDirectory.java\n\n@@ -4,6 +4,7 @@ import org.apache.commons.io.FileUtils;\n import org.junit.After;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzOTM5MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r414839390", "bodyText": "Not used?", "author": "OlegMazurov", "createdAt": "2020-04-24T20:20:19Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java", "diffHunk": "@@ -17,7 +17,9 @@\n import com.splicemachine.homeless.TestUtils;\n import com.splicemachine.utils.Pair;\n import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n import org.junit.Assert;\n+import org.junit.BeforeClass;", "originalCommit": "7f0f076aef9c07ef99d334cf0c81c9fffc6bb67b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjMxMA==", "url": "https://github.com/splicemachine/spliceengine/pull/3486#discussion_r415016310", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-04-25T08:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzOTM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b7525f1a7075dfb1b40d0eca66c0217957f2ae96", "chunk": "diff --git a/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java b/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java\nindex 24bcc1a7e5..a1c85e8c61 100644\n--- a/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java\n+++ b/splice_machine/src/test/java/com/splicemachine/derby/test/framework/SpliceUnitTest.java\n\n@@ -17,9 +17,8 @@ package com.splicemachine.derby.test.framework;\n import com.splicemachine.homeless.TestUtils;\n import com.splicemachine.utils.Pair;\n import org.apache.commons.io.FileUtils;\n-import org.junit.AfterClass;\n+import org.junit.After;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n import org.junit.runner.Description;\n import org.spark_project.guava.base.Joiner;\n \n"}}, {"oid": "7b0e07f773291341050fcc7e592ea69b12f54118", "url": "https://github.com/splicemachine/spliceengine/commit/7b0e07f773291341050fcc7e592ea69b12f54118", "message": "DB-9109 fix / missing in directory leading to temp dir leak\n\ndelete temporary files created in two places", "committedDate": "2020-04-24T22:07:49Z", "type": "commit"}, {"oid": "b7525f1a7075dfb1b40d0eca66c0217957f2ae96", "url": "https://github.com/splicemachine/spliceengine/commit/b7525f1a7075dfb1b40d0eca66c0217957f2ae96", "message": "DB-9109 create temp files in /target/external so build is self-contained", "committedDate": "2020-04-25T08:32:50Z", "type": "forcePushed"}, {"oid": "0f2ecf0c2910bb4064c0389ad6d6f57192cb3e26", "url": "https://github.com/splicemachine/spliceengine/commit/0f2ecf0c2910bb4064c0389ad6d6f57192cb3e26", "message": "DB-9109 create temp files in /target/external so build is self-contained", "committedDate": "2020-04-25T08:37:45Z", "type": "forcePushed"}, {"oid": "ecf6ef36a644ddcc0bc48bebfa37001439e9e4c6", "url": "https://github.com/splicemachine/spliceengine/commit/ecf6ef36a644ddcc0bc48bebfa37001439e9e4c6", "message": "DB-9109 create temp files in /target/external so build is self-contained", "committedDate": "2020-04-25T08:41:55Z", "type": "commit"}, {"oid": "ecf6ef36a644ddcc0bc48bebfa37001439e9e4c6", "url": "https://github.com/splicemachine/spliceengine/commit/ecf6ef36a644ddcc0bc48bebfa37001439e9e4c6", "message": "DB-9109 create temp files in /target/external so build is self-contained", "committedDate": "2020-04-25T08:41:55Z", "type": "forcePushed"}]}