{"pr_number": 3969, "pr_title": "DB-10025 Fix issues that cause a full IT run to fail.", "pr_createdAt": "2020-08-11T19:58:34Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3969", "timeline": [{"oid": "3f8103094d5e34e941a6f05afef7bd78160df2d6", "url": "https://github.com/splicemachine/spliceengine/commit/3f8103094d5e34e941a6f05afef7bd78160df2d6", "message": "Fix SparkExplainIT and spotbugs.", "committedDate": "2020-08-13T00:43:06Z", "type": "forcePushed"}, {"oid": "d5f170f6a9fcfae6ee494d4fc7aa104382b069d9", "url": "https://github.com/splicemachine/spliceengine/commit/d5f170f6a9fcfae6ee494d4fc7aa104382b069d9", "message": "DB-10025 Fix SparkExplainIT and spotbugs.", "committedDate": "2020-08-13T01:23:39Z", "type": "forcePushed"}, {"oid": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "url": "https://github.com/splicemachine/spliceengine/commit/fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "message": "DB-10025 Ignore PinTableIT.", "committedDate": "2020-08-14T09:00:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDU1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470564559", "bodyText": "Can we get rid of spark.driver.allowMultipleContexts in tests and remove this special case?", "author": "dgomezferro", "createdAt": "2020-08-14T11:18:43Z", "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "diffHunk": "@@ -108,11 +111,30 @@ public static synchronized SparkSession getSessionUnsafe() {\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n-            System.exit(0);\n-            session = initializeSparkSession();\n+            if (isOlapWorker)\n+                System.exit(0);\n+            sessionToUse = session = initializeSparkSession();\n             ctx =  new JavaSparkContext(session.sparkContext());\n         }\n-        return session;\n+        else {\n+            if (sessionToUse == null || needsReinitialization) {\n+                String allowMultipleContextsString = null;\n+                try {\n+                    allowMultipleContextsString = session.conf().get(\"spark.driver.allowMultipleContexts\");", "originalCommit": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDUwOA==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470844508", "bodyText": "Done.  spark.driver.allowMultipleContexts doesn't exist in the tests.  This is just a spark setting I was experimenting with.  I've removed this option.", "author": "msirek", "createdAt": "2020-08-14T20:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bccc93e96a14dcd2786e94363d0befbe49b077bd", "chunk": "diff --git a/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java b/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java\nindex 22ef3e6354..4779188075 100644\n--- a/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java\n+++ b/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java\n\n@@ -111,30 +108,11 @@ public class SpliceSpark {\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n-            if (isOlapWorker)\n-                System.exit(0);\n-            sessionToUse = session = initializeSparkSession();\n+            System.exit(0);\n+            session = initializeSparkSession();\n             ctx =  new JavaSparkContext(session.sparkContext());\n         }\n-        else {\n-            if (sessionToUse == null || needsReinitialization) {\n-                String allowMultipleContextsString = null;\n-                try {\n-                    allowMultipleContextsString = session.conf().get(\"spark.driver.allowMultipleContexts\");\n-                }\n-                catch (NoSuchElementException e) {\n-                }\n-                boolean allowMultipleContexts =\n-                        allowMultipleContextsString != null &&\n-                        allowMultipleContextsString.equals(\"true\");\n-                if (session != null && !allowMultipleContexts)\n-                    sessionToUse = session.newSession();\n-                else\n-                    sessionToUse = initializeSparkSession();\n-            }\n-        }\n-        sessions.set(sessionToUse);\n-        return sessionToUse;\n+        return session;\n     }\n \n     public static synchronized JavaSparkContext getContext() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDk4Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470564987", "bodyText": "Please add a LOG here so it's clear why we are shutting down", "author": "dgomezferro", "createdAt": "2020-08-14T11:19:50Z", "path": "hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java", "diffHunk": "@@ -108,11 +111,30 @@ public static synchronized SparkSession getSessionUnsafe() {\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n-            System.exit(0);\n-            session = initializeSparkSession();\n+            if (isOlapWorker)\n+                System.exit(0);", "originalCommit": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDU1Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470844557", "bodyText": "Done.", "author": "msirek", "createdAt": "2020-08-14T20:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bccc93e96a14dcd2786e94363d0befbe49b077bd", "chunk": "diff --git a/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java b/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java\nindex 22ef3e6354..4779188075 100644\n--- a/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java\n+++ b/hbase_sql/src/main/java/com/splicemachine/derby/impl/SpliceSpark.java\n\n@@ -111,30 +108,11 @@ public class SpliceSpark {\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n-            if (isOlapWorker)\n-                System.exit(0);\n-            sessionToUse = session = initializeSparkSession();\n+            System.exit(0);\n+            session = initializeSparkSession();\n             ctx =  new JavaSparkContext(session.sparkContext());\n         }\n-        else {\n-            if (sessionToUse == null || needsReinitialization) {\n-                String allowMultipleContextsString = null;\n-                try {\n-                    allowMultipleContextsString = session.conf().get(\"spark.driver.allowMultipleContexts\");\n-                }\n-                catch (NoSuchElementException e) {\n-                }\n-                boolean allowMultipleContexts =\n-                        allowMultipleContextsString != null &&\n-                        allowMultipleContextsString.equals(\"true\");\n-                if (session != null && !allowMultipleContexts)\n-                    sessionToUse = session.newSession();\n-                else\n-                    sessionToUse = initializeSparkSession();\n-            }\n-        }\n-        sessions.set(sessionToUse);\n-        return sessionToUse;\n+        return session;\n     }\n \n     public static synchronized JavaSparkContext getContext() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NjQyMw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470566423", "bodyText": "Can you remove the stack trace from the comment? I think it makes sense to have it on the JIRA but not here (feel free to keep the explanation and a pointer to the JIRA for instance)", "author": "dgomezferro", "createdAt": "2020-08-14T11:23:31Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLWatchRefresher.java", "diffHunk": "@@ -214,7 +216,30 @@ private void clearFinishedChanges(Collection<String> children,Collection<DDLWatc\n     private void assignDDLDemarcationPoint(DDLChange ddlChange) {\n         try {\n             TxnView txn = new LazyTxnView(ddlChange.getTxnId(),txnSupplier,exceptionFactory);\n-            assert txn.allowsWrites(): \"DDLChange \"+ddlChange+\" does not have a writable transaction\";\n+            // A full Restore operation overwrite SPLICE_TXN, so the transaction used by the restore\n+            // may not be found.  Avoid the assertion to avoid crashing, e.g.,\n+            // 2020-08-11 18:28:11,785 (ZooKeeperDDLWatcherRefresher) ERROR [c.s.d.d.AsynchronousDDLWatcher] - Failed to refresh ddl\n+            //java.lang.RuntimeException: com.splicemachine.si.api.txn.TransactionMissing: Couldn't resolve transaction with id 81981952", "originalCommit": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDYzMw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470844633", "bodyText": "Done.", "author": "msirek", "createdAt": "2020-08-14T20:13:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NjQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "39205abe0fae937044b4c2af77cc9e14afa315cc", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLWatchRefresher.java b/splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLWatchRefresher.java\nindex 399c96ff78..0e17b6a087 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLWatchRefresher.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/ddl/DDLWatchRefresher.java\n\n@@ -216,30 +214,7 @@ public class DDLWatchRefresher{\n     private void assignDDLDemarcationPoint(DDLChange ddlChange) {\n         try {\n             TxnView txn = new LazyTxnView(ddlChange.getTxnId(),txnSupplier,exceptionFactory);\n-            // A full Restore operation overwrite SPLICE_TXN, so the transaction used by the restore\n-            // may not be found.  Avoid the assertion to avoid crashing, e.g.,\n-            // 2020-08-11 18:28:11,785 (ZooKeeperDDLWatcherRefresher) ERROR [c.s.d.d.AsynchronousDDLWatcher] - Failed to refresh ddl\n-            //java.lang.RuntimeException: com.splicemachine.si.api.txn.TransactionMissing: Couldn't resolve transaction with id 81981952\n-            //        at com.splicemachine.si.impl.txn.LazyTxnView.lookup(LazyTxnView.java:270)\n-            //        at com.splicemachine.si.impl.txn.LazyTxnView.allowsWrites(LazyTxnView.java:197)\n-            //        at com.splicemachine.derby.ddl.DDLWatchRefresher.assignDDLDemarcationPoint(DDLWatchRefresher.java:217)\n-            //        at com.splicemachine.derby.ddl.DDLWatchRefresher.clearFinishedChanges(DDLWatchRefresher.java:203)\n-            //        at com.splicemachine.derby.ddl.DDLWatchRefresher.refreshDDL(DDLWatchRefresher.java:90)\n-            //        at com.splicemachine.derby.ddl.AsynchronousDDLWatcher$1.run(AsynchronousDDLWatcher.java:97)\n-            //        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n-            //        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n-            //        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n-            //        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n-            //        at java.lang.Thread.run(Thread.java:748)\n-            //Caused by: com.splicemachine.si.api.txn.TransactionMissing: Couldn't resolve transaction with id 81981952\n-            //        at com.splicemachine.si.impl.CoprocessorTxnStore.decode(CoprocessorTxnStore.java:426)\n-            //        at com.splicemachine.si.impl.CoprocessorTxnStore.getTransaction(CoprocessorTxnStore.java:299)\n-            //        at com.splicemachine.si.impl.store.CompletedTxnCacheSupplier.getTransaction(CompletedTxnCacheSupplier.java:86)\n-            //        at com.splicemachine.si.impl.store.CompletedTxnCacheSupplier.getTransaction(CompletedTxnCacheSupplier.java:72)\n-            //        at com.splicemachine.si.impl.txn.LazyTxnView.lookup(LazyTxnView.java:266)\n-            if (ddlChange.getDdlChangeType() != ENTER_RESTORE_MODE) {\n-                assert txn.allowsWrites() : \"DDLChange \" + ddlChange + \" does not have a writable transaction\";\n-            }\n+            assert txn.allowsWrites(): \"DDLChange \"+ddlChange+\" does not have a writable transaction\";\n             DDLFilter ddlFilter = txController.newDDLFilter(txn);\n             if (ddlFilter.compareTo(ddlDemarcationPoint.get()) > 0) {\n                 ddlDemarcationPoint.set(ddlFilter);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzA1Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470573057", "bodyText": "Can you move all these checks to a separate method to bring into focus the logic of the method?", "author": "dgomezferro", "createdAt": "2020-08-14T11:39:35Z", "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -71,11 +72,36 @@ private boolean isSorted(List<Cell> list) {\n     }\n \n     public void mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        assert dataToReturn.isEmpty();\n-        assert results.isEmpty();\n-        assert maxTombstone == null;\n-        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawList.size() == txns.size();\n+        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n+        final boolean resultsIsEmpty = results.isEmpty();\n+        final boolean maxTombstoneIsNull = maxTombstone == null;\n+        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n+        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n+        if (!debugSortCheck) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  rawList is not sorted.\");\n+        }\n+        if (!dataToReturnIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  dataToReturn is not properly initialized.\");\n+        }\n+        if (!resultsIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  results list not properly initialized.\");\n+        }\n+        if (!maxTombstoneIsNull) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  maxTombstone not properly initialized to null.\");\n+        }\n+        if (!rawListAndTxnListSameSize) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  rawList and txn list not the same length.\");\n+        }\n+        assert dataToReturnIsEmpty;\n+        assert resultsIsEmpty;\n+        assert maxTombstoneIsNull;\n+        assert debugSortCheck : \"CompactionStateMutate: rawList not sorted\";\n+        assert rawListAndTxnListSameSize;", "originalCommit": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTc2Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470845762", "bodyText": "Done.", "author": "msirek", "createdAt": "2020-08-14T20:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "39205abe0fae937044b4c2af77cc9e14afa315cc", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java b/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java\nindex c30c3cb2f6..dce12fa2e3 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java\n\n@@ -72,36 +72,11 @@ class SICompactionStateMutate {\n     }\n \n     public void mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n-        final boolean resultsIsEmpty = results.isEmpty();\n-        final boolean maxTombstoneIsNull = maxTombstone == null;\n-        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n-        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n-        if (!debugSortCheck) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  rawList is not sorted.\");\n-        }\n-        if (!dataToReturnIsEmpty) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  dataToReturn is not properly initialized.\");\n-        }\n-        if (!resultsIsEmpty) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  results list not properly initialized.\");\n-        }\n-        if (!maxTombstoneIsNull) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  maxTombstone not properly initialized to null.\");\n-        }\n-        if (!rawListAndTxnListSameSize) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  rawList and txn list not the same length.\");\n-        }\n-        assert dataToReturnIsEmpty;\n-        assert resultsIsEmpty;\n-        assert maxTombstoneIsNull;\n-        assert debugSortCheck : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawListAndTxnListSameSize;\n+        assert dataToReturn.isEmpty();\n+        assert results.isEmpty();\n+        assert maxTombstone == null;\n+        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n+        assert rawList.size() == txns.size();\n \n         try {\n             Iterator<TxnView> it = txns.iterator();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzI3Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470573277", "bodyText": "Is this something that happens sometimes or just defensive programming?", "author": "dgomezferro", "createdAt": "2020-08-14T11:40:02Z", "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -71,11 +72,36 @@ private boolean isSorted(List<Cell> list) {\n     }\n \n     public void mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        assert dataToReturn.isEmpty();\n-        assert results.isEmpty();\n-        assert maxTombstone == null;\n-        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawList.size() == txns.size();\n+        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n+        final boolean resultsIsEmpty = results.isEmpty();\n+        final boolean maxTombstoneIsNull = maxTombstone == null;\n+        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n+        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n+        if (!debugSortCheck) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  rawList is not sorted.\");\n+        }\n+        if (!dataToReturnIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  dataToReturn is not properly initialized.\");\n+        }\n+        if (!resultsIsEmpty) {\n+            bypassPurge = true;\n+            LOG.warn(\"Skipping tombstone purge.  results list not properly initialized.\");\n+        }", "originalCommit": "fa47b88ff181212c6e4ec3d9f9d9ffc3edb01d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzA4NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r470847084", "bodyText": "Yes, this is mainly just defensive programming.  I only ran across 2 of the assertions being hit (not the above 2 you highlighted), but I decided to handle all assertions, just in case.  An alternative would be to convert the assert statements into checks which throw IOExceptions.  These would be active on a cluster as well, whether or not assertions were enabled on it.", "author": "msirek", "createdAt": "2020-08-14T20:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU3MzI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "39205abe0fae937044b4c2af77cc9e14afa315cc", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java b/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java\nindex c30c3cb2f6..dce12fa2e3 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java\n\n@@ -72,36 +72,11 @@ class SICompactionStateMutate {\n     }\n \n     public void mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n-        final boolean resultsIsEmpty = results.isEmpty();\n-        final boolean maxTombstoneIsNull = maxTombstone == null;\n-        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n-        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n-        if (!debugSortCheck) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  rawList is not sorted.\");\n-        }\n-        if (!dataToReturnIsEmpty) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  dataToReturn is not properly initialized.\");\n-        }\n-        if (!resultsIsEmpty) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  results list not properly initialized.\");\n-        }\n-        if (!maxTombstoneIsNull) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  maxTombstone not properly initialized to null.\");\n-        }\n-        if (!rawListAndTxnListSameSize) {\n-            bypassPurge = true;\n-            LOG.warn(\"Skipping tombstone purge.  rawList and txn list not the same length.\");\n-        }\n-        assert dataToReturnIsEmpty;\n-        assert resultsIsEmpty;\n-        assert maxTombstoneIsNull;\n-        assert debugSortCheck : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawListAndTxnListSameSize;\n+        assert dataToReturn.isEmpty();\n+        assert results.isEmpty();\n+        assert maxTombstone == null;\n+        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n+        assert rawList.size() == txns.size();\n \n         try {\n             Iterator<TxnView> it = txns.iterator();\n"}}, {"oid": "39205abe0fae937044b4c2af77cc9e14afa315cc", "url": "https://github.com/splicemachine/spliceengine/commit/39205abe0fae937044b4c2af77cc9e14afa315cc", "message": "DB-10025 Improve stability of the ITs.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "c1a8e9d26e424d3fcf14cf1461362cd62d3398e5", "url": "https://github.com/splicemachine/spliceengine/commit/c1a8e9d26e424d3fcf14cf1461362cd62d3398e5", "message": "DB-10025 Avoid expensive operations.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "79df44c555b44a6d312023c43aa841e686608aaa", "url": "https://github.com/splicemachine/spliceengine/commit/79df44c555b44a6d312023c43aa841e686608aaa", "message": "DB-10025 Identify empty keys in more cases in tombstone purging logic.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "b76704cfbdc09d2c2c44957c6013848bc29e54a8", "url": "https://github.com/splicemachine/spliceengine/commit/b76704cfbdc09d2c2c44957c6013848bc29e54a8", "message": "DB-10025 Don't add first write marker when skipping transaction conflict detection.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "bccc93e96a14dcd2786e94363d0befbe49b077bd", "url": "https://github.com/splicemachine/spliceengine/commit/bccc93e96a14dcd2786e94363d0befbe49b077bd", "message": "DB-10025 A first write marker should only flag an insert or upsert, not a delete.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "5d4e7c0b2a10675c258ad0d4f27eff3e6b67307a", "url": "https://github.com/splicemachine/spliceengine/commit/5d4e7c0b2a10675c258ad0d4f27eff3e6b67307a", "message": "DB-10025 Avoid purging tombstones in problematic cases on a cluster.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "e12b25f41b744fbf845416d35830d6681db51ca5", "url": "https://github.com/splicemachine/spliceengine/commit/e12b25f41b744fbf845416d35830d6681db51ca5", "message": "DB-10025 Avoid crash on restore when the restore's txnId is not in cache.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "2f9bb6a2d29b220369f3c4f88226497b90479b7b", "url": "https://github.com/splicemachine/spliceengine/commit/2f9bb6a2d29b220369f3c4f88226497b90479b7b", "message": "DB-10025 Fix NativeSparkJoinWithInequalityPredsIT.", "committedDate": "2020-08-16T08:40:24Z", "type": "commit"}, {"oid": "1d184962d58ed6126a45dffddd771dd7ce57a8ec", "url": "https://github.com/splicemachine/spliceengine/commit/1d184962d58ed6126a45dffddd771dd7ce57a8ec", "message": "DB-10025 Fix SparkExplainIT and spotbugs.", "committedDate": "2020-08-16T08:40:25Z", "type": "commit"}, {"oid": "1520a4d2d276b569386b350f7e420fa511ef1718", "url": "https://github.com/splicemachine/spliceengine/commit/1520a4d2d276b569386b350f7e420fa511ef1718", "message": "DB-10025 Ignore PinTableIT.", "committedDate": "2020-08-16T08:40:25Z", "type": "commit"}, {"oid": "ee6dde149f9b3355067637db18e13bcba9330e36", "url": "https://github.com/splicemachine/spliceengine/commit/ee6dde149f9b3355067637db18e13bcba9330e36", "message": "DB-10025 Address review comments.", "committedDate": "2020-08-16T08:40:25Z", "type": "commit"}, {"oid": "4d60151e397bd8b22339ecf6364d69a43c026f16", "url": "https://github.com/splicemachine/spliceengine/commit/4d60151e397bd8b22339ecf6364d69a43c026f16", "message": "DB-10025 Fix SessionPropertyIT.", "committedDate": "2020-08-16T08:40:25Z", "type": "commit"}, {"oid": "373310bac46d91677f37ae31211861f5dbed2487", "url": "https://github.com/splicemachine/spliceengine/commit/373310bac46d91677f37ae31211861f5dbed2487", "message": "DB-10025 Fix SessionPropertyIT, take 2.", "committedDate": "2020-08-16T08:40:25Z", "type": "commit"}, {"oid": "373310bac46d91677f37ae31211861f5dbed2487", "url": "https://github.com/splicemachine/spliceengine/commit/373310bac46d91677f37ae31211861f5dbed2487", "message": "DB-10025 Fix SessionPropertyIT, take 2.", "committedDate": "2020-08-16T08:40:25Z", "type": "forcePushed"}, {"oid": "b39c1c40b153247b302ad5897b30a8e85a41d098", "url": "https://github.com/splicemachine/spliceengine/commit/b39c1c40b153247b302ad5897b30a8e85a41d098", "message": "DB-10025 Speed up the parallel ITs with forking.", "committedDate": "2020-08-16T17:53:16Z", "type": "commit"}, {"oid": "237aeaeaed9b9470ed6dfe280f1d045a12f661fc", "url": "https://github.com/splicemachine/spliceengine/commit/237aeaeaed9b9470ed6dfe280f1d045a12f661fc", "message": "DB-10025 Fix SessionPropertyIT, take 3.", "committedDate": "2020-08-16T18:45:45Z", "type": "commit"}, {"oid": "d5389c7a3a2872eab22ecfa596ad0982d370da7d", "url": "https://github.com/splicemachine/spliceengine/commit/d5389c7a3a2872eab22ecfa596ad0982d370da7d", "message": "Revert \"DB-10025 Speed up the parallel ITs with forking.\"\n\nThis reverts commit b39c1c40b153247b302ad5897b30a8e85a41d098.", "committedDate": "2020-08-16T21:56:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzcyNA==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r471603724", "bodyText": "More accurately, assertions are thrown during our IT runs as well.", "author": "arnaud-splice", "createdAt": "2020-08-17T16:41:25Z", "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -161,10 +206,24 @@ private void mutate(Cell element, TxnView txn) throws IOException {\n                 lastSeenAntiTombstone = element;\n                 break;\n             case FIRST_WRITE_TOKEN:\n+                // Assertions are only thrown on standalone.", "originalCommit": "d5389c7a3a2872eab22ecfa596ad0982d370da7d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "77e5ad1bc16f7fdffc5ef613366f7116cb279833", "url": "https://github.com/splicemachine/spliceengine/commit/77e5ad1bc16f7fdffc5ef613366f7116cb279833", "message": "Merge branch 'master' into IT_Stability", "committedDate": "2020-08-20T20:53:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMDY1Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r474320652", "bodyText": "We may want to keep assertions because they are fired during ITs and can catch bugs. In case they are disables on a cluster, handleSanity Checks can safely bypass purge.", "author": "jyuanca", "createdAt": "2020-08-20T23:11:24Z", "path": "hbase_storage/src/main/java/com/splicemachine/si/impl/server/SICompactionStateMutate.java", "diffHunk": "@@ -71,15 +72,43 @@ private boolean isSorted(List<Cell> list) {\n         return true;\n     }\n \n+    private void handleSanityChecks(List<Cell> results,\n+                                    List<Cell> rawList,\n+                                    List<TxnView> txns) {\n+        final boolean dataToReturnIsEmpty = dataToReturn.isEmpty();\n+        final boolean resultsIsEmpty = results.isEmpty();\n+        final boolean maxTombstoneIsNull = maxTombstone == null;\n+        final boolean rawListAndTxnListSameSize = rawList.size() == txns.size();\n+        final boolean debugSortCheck = !LOG.isDebugEnabled() || isSorted(rawList);\n+\n+        if (!debugSortCheck)\n+            setBypassPurgeWithWarning(\"CompactionStateMutate: rawList is not sorted.\");\n+        if (!dataToReturnIsEmpty)\n+            setBypassPurgeWithWarning(\"dataToReturn is not properly initialized.\");\n+        if (!resultsIsEmpty)\n+            setBypassPurgeWithWarning(\"results list not properly initialized.\");\n+        if (!maxTombstoneIsNull)\n+            setBypassPurgeWithWarning(\"maxTombstone not properly initialized to null.\");\n+        if (!rawListAndTxnListSameSize)\n+            setBypassPurgeWithWarning(\"rawList and txn list not the same length.\");\n+\n+        assert dataToReturnIsEmpty;\n+        assert resultsIsEmpty;\n+        assert maxTombstoneIsNull;\n+        assert debugSortCheck : \"CompactionStateMutate: rawList not sorted\";\n+        assert rawListAndTxnListSameSize;\n+    }\n+\n+    private void setBypassPurgeWithWarning(String warningMessage) {\n+        bypassPurge = true;\n+        LOG.warn(\"Skipping tombstone purge.  \" + warningMessage);\n+    }\n+\n     /***\n      * @return the size of all cells in the `rawList` parameter.\n      */\n     public long mutate(List<Cell> rawList, List<TxnView> txns, List<Cell> results) throws IOException {\n-        assert dataToReturn.isEmpty();\n-        assert results.isEmpty();\n-        assert maxTombstone == null;\n-        assert !LOG.isDebugEnabled() || isSorted(rawList) : \"CompactionStateMutate: rawList not sorted\";\n-        assert rawList.size() == txns.size();", "originalCommit": "77e5ad1bc16f7fdffc5ef613366f7116cb279833", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyOTkyMw==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r474329923", "bodyText": "Looks like the same assertions were moved into the handleSanityChecks method, so they are being kept.", "author": "jpanko1", "createdAt": "2020-08-20T23:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMDkwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r474330909", "bodyText": "They become warning messages and does not cause a failure for IT", "author": "jyuanca", "createdAt": "2020-08-20T23:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMDY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3MDQyMA==", "url": "https://github.com/splicemachine/spliceengine/pull/3969#discussion_r474370420", "bodyText": "Feel free to write a Jira.  I'm merging now so it can get into this week's build.", "author": "jpanko1", "createdAt": "2020-08-21T02:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMDY1Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "39385f66b150b53d16176f35f174c35bb9f2c7c4", "url": "https://github.com/splicemachine/spliceengine/commit/39385f66b150b53d16176f35f174c35bb9f2c7c4", "message": "Merge branch 'master' into IT_Stability", "committedDate": "2020-08-21T01:37:04Z", "type": "commit"}]}