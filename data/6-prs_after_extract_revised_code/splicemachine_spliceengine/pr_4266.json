{"pr_number": 4266, "pr_title": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "pr_createdAt": "2020-10-12T11:16:08Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4266", "timeline": [{"oid": "1eb3b09a7544320526e5a519348fb456c151ee91", "url": "https://github.com/splicemachine/spliceengine/commit/1eb3b09a7544320526e5a519348fb456c151ee91", "message": "DB-10350 add DELETE mode noChecks", "committedDate": "2020-10-16T12:10:53Z", "type": "forcePushed"}, {"oid": "c93ab4d2e90d386feb124c936fa532aad85c326b", "url": "https://github.com/splicemachine/spliceengine/commit/c93ab4d2e90d386feb124c936fa532aad85c326b", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-16T13:35:01Z", "type": "forcePushed"}, {"oid": "1d4de26af694c3d6d3ebfdfd1add6abe29c47412", "url": "https://github.com/splicemachine/spliceengine/commit/1d4de26af694c3d6d3ebfdfd1add6abe29c47412", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-16T14:05:52Z", "type": "forcePushed"}, {"oid": "f8b3eebcf699edaf269cca77eaf25669ee9b09f2", "url": "https://github.com/splicemachine/spliceengine/commit/f8b3eebcf699edaf269cca77eaf25669ee9b09f2", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-16T14:12:00Z", "type": "forcePushed"}, {"oid": "08d0083cbb87802eac20bb4020ff2676f0771ed8", "url": "https://github.com/splicemachine/spliceengine/commit/08d0083cbb87802eac20bb4020ff2676f0771ed8", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-18T20:27:13Z", "type": "forcePushed"}, {"oid": "f3d56a222cff1c704162a07936787ac681c75e63", "url": "https://github.com/splicemachine/spliceengine/commit/f3d56a222cff1c704162a07936787ac681c75e63", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-18T21:24:12Z", "type": "forcePushed"}, {"oid": "fdc2afe1c0eef2c76e192dd9e080f09f29f3a99d", "url": "https://github.com/splicemachine/spliceengine/commit/fdc2afe1c0eef2c76e192dd9e080f09f29f3a99d", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-19T15:47:24Z", "type": "forcePushed"}, {"oid": "4757cabd9efff16cb2e6e1b6454f8399f7c2212d", "url": "https://github.com/splicemachine/spliceengine/commit/4757cabd9efff16cb2e6e1b6454f8399f7c2212d", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-19T18:54:24Z", "type": "forcePushed"}, {"oid": "975a1528f2ffd0c3e289db92f7c07f65e26a2f6a", "url": "https://github.com/splicemachine/spliceengine/commit/975a1528f2ffd0c3e289db92f7c07f65e26a2f6a", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-10-19T18:55:30Z", "type": "forcePushed"}, {"oid": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "url": "https://github.com/splicemachine/spliceengine/commit/f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "message": "DB-10350 fix mem", "committedDate": "2020-10-20T07:42:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MTMyOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508371329", "bodyText": "makes sense to check, that conn != null, as SpliceAdmin.getDefaultConn can throw SQLException", "author": "ipraznik-splice", "createdAt": "2020-10-20T10:01:22Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -770,6 +828,9 @@ private static void doImport(String schemaName,\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n+                if( isLoadReplaceMode ) {\n+                    conn.rollback();", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxNzkxNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508617914", "bodyText": "good find! fixed", "author": "martinrupp", "createdAt": "2020-10-20T15:34:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MTMyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "28d61c9a0a096916a991681ae15a215590367942", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\nindex 08a5b9e845..47e3a25225 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\n\n@@ -828,7 +828,8 @@ public class HdfsImport {\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n-                if( isLoadReplaceMode ) {\n+                if( conn != null && isLoadReplaceMode ) {\n+                    // rolling back the DELETE we've done\n                     conn.rollback();\n                 }\n                 throw new SQLException(e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzAwMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508373001", "bodyText": "looks like not used", "author": "ipraznik-splice", "createdAt": "2020-10-20T10:04:04Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java", "diffHunk": "@@ -38,6 +38,7 @@\n import com.splicemachine.derby.impl.sql.execute.actions.InsertConstantOperation;\n import com.splicemachine.derby.impl.sql.execute.sequence.SequenceKey;\n import com.splicemachine.derby.impl.sql.execute.sequence.SpliceSequence;\n+import com.splicemachine.derby.stream.control.ControlDataSet;", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODA3OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509078079", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-10-21T08:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MzAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "28d61c9a0a096916a991681ae15a215590367942", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java\nindex b36d76dc81..c5b61e49f2 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/operations/InsertOperation.java\n\n@@ -35,10 +35,10 @@ import com.splicemachine.db.impl.sql.execute.BaseActivation;\n import com.splicemachine.derby.iapi.sql.execute.SpliceOperation;\n import com.splicemachine.derby.iapi.sql.execute.SpliceOperationContext;\n import com.splicemachine.derby.impl.load.ImportUtils;\n+import com.splicemachine.derby.impl.sql.execute.TriggerRowHolderImpl;\n import com.splicemachine.derby.impl.sql.execute.actions.InsertConstantOperation;\n import com.splicemachine.derby.impl.sql.execute.sequence.SequenceKey;\n import com.splicemachine.derby.impl.sql.execute.sequence.SpliceSequence;\n-import com.splicemachine.derby.stream.control.ControlDataSet;\n import com.splicemachine.derby.stream.iapi.DataSet;\n import com.splicemachine.derby.stream.iapi.DataSetProcessor;\n import com.splicemachine.derby.stream.output.DataSetWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjE4MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508376181", "bodyText": "field name is not in Java style", "author": "ipraznik-splice", "createdAt": "2020-10-20T10:08:55Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java", "diffHunk": "@@ -58,6 +57,7 @@\n     protected InsertOperation insertOperation;\n     protected boolean isUpsert;\n     private Partition table;\n+    private boolean load_replace_mode;", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODE5NA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509078194", "bodyText": "done (also others in change)", "author": "martinrupp", "createdAt": "2020-10-21T08:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "28d61c9a0a096916a991681ae15a215590367942", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java b/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java\nindex 6ffc1b005a..46f1324cbb 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertPipelineWriter.java\n\n@@ -57,7 +57,6 @@ public class InsertPipelineWriter extends AbstractPipelineWriter<ExecRow>{\n     protected InsertOperation insertOperation;\n     protected boolean isUpsert;\n     private Partition table;\n-    private boolean load_replace_mode;\n \n     @SuppressFBWarnings(value=\"EI_EXPOSE_REP2\", justification=\"Intentional\")\n     public InsertPipelineWriter(int[] pkCols,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjczOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508376738", "bodyText": "parameter load_replace_mode  name not in Java style", "author": "ipraznik-splice", "createdAt": "2020-10-20T10:09:50Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java", "diffHunk": "@@ -243,4 +247,16 @@ public static InsertTableWriterBuilder getInsertTableWriterBuilderFromBase64Stri\n     public String getInsertTableWriterBuilderBase64String() throws IOException, StandardException {\n         return Base64.encodeBase64String(SerializationUtils.serialize(this));\n     }\n+\n+\n+    @Override\n+    public DataSetWriterBuilder loadReplaceMode(boolean load_replace_mode) {\n+        this.loadReplaceMode = load_replace_mode;", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODI2Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509078262", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-10-21T08:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NjczOA=="}], "type": "inlineReview", "revised_code": {"commit": "28d61c9a0a096916a991681ae15a215590367942", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java b/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java\nindex de5fa58185..bc5f9bf1ca 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/stream/output/insert/InsertTableWriterBuilder.java\n\n@@ -250,8 +250,8 @@ public abstract class InsertTableWriterBuilder implements Externalizable,InsertD\n \n \n     @Override\n-    public DataSetWriterBuilder loadReplaceMode(boolean load_replace_mode) {\n-        this.loadReplaceMode = load_replace_mode;\n+    public DataSetWriterBuilder loadReplaceMode(boolean loadReplaceMode) {\n+        this.loadReplaceMode = loadReplaceMode;\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MDgzNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508370834", "bodyText": "maybe the last parameter should be argCount+4 as well?", "author": "hatyo", "createdAt": "2020-10-20T10:00:33Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -703,12 +730,14 @@ public void generate(ActivationClassBuilder acb,\n         if (\"getDeleteResultSet\".equals(resultSetGetter)) {\n             mb.push(this.printExplainInformationForActivation());\n             BaseJoinStrategy.pushNullableString(mb, bulkDeleteDirectory);\n+            BaseJoinStrategy.pushNullableString(mb, isNoTriggerRIMode() ? \"1\" : \"0\" );\n+\n             if (colMap != null && colMap.length > 0) {\n                 mb.push(acb.addItem(colMap));\n             } else {\n                 mb.push(-1);\n             }\n-            argCount += 3;\n+            argCount += 4;\n         }\n         mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, resultSetGetter, ClassName.ResultSet, argCount+3);", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5MDE2Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509090162", "bodyText": "no, the argCount+=4 is specific for the if (\"getDeleteResultSet\".equals(resultSetGetter)).\nWe push here to mb the 4 parameters printExplainInformationForActivation, bulkDeleteDirectory, isNoTriggerRIMode and colMap.\nThe arg+3 is for the parameters (String) null, resultSetGetter, ClassName.ResultSet.\nI mean to be honest, we should change how we do this. There's reflection and stuff that should make this rock solid.", "author": "martinrupp", "createdAt": "2020-10-21T08:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MDgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "acac977240bf45649358961a128bc1e101bad440", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java\nindex fe73ea634c..e454a0ea31 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java\n\n@@ -730,7 +730,7 @@ public class DeleteNode extends DMLModStatementNode\n         if (\"getDeleteResultSet\".equals(resultSetGetter)) {\n             mb.push(this.printExplainInformationForActivation());\n             BaseJoinStrategy.pushNullableString(mb, bulkDeleteDirectory);\n-            BaseJoinStrategy.pushNullableString(mb, isNoTriggerRIMode() ? \"1\" : \"0\" );\n+            mb.push(isNoTriggerRIMode());\n \n             if (colMap != null && colMap.length > 0) {\n                 mb.push(acb.addItem(colMap));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MzU1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508383559", "bodyText": "nice refactoring.", "author": "hatyo", "createdAt": "2020-10-20T10:21:11Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/TableDescriptor.java", "diffHunk": "@@ -784,6 +784,18 @@ public int getQualifiedNumberOfIndexes(int minColCount,boolean nonUniqeTrumpsCol\n         return matches;\n     }\n \n+    private static void assertValidStatementType(int statementType)", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4NTg1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508385859", "bodyText": "Out of curiosity, why do we call remove here causing a side-effect? If that's intentional, should be maybe change the method name into something like spliceDeleteProperties ( no puns intended! :) )", "author": "hatyo", "createdAt": "2020-10-20T10:24:54Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/DeleteNode.java", "diffHunk": "@@ -112,6 +114,32 @@ public void init(Object targetTableName,\n         this.targetProperties = (Properties) targetProperties;\n     }\n \n+    static public boolean isBulkDelete(Properties properties)\n+    {\n+        return properties == null ? false :\n+                properties.getProperty(BULK_DELETE_DIRECTORY) != null;\n+    }\n+\n+    static public Properties getDeleteProperties(Properties tableProperties)\n+    {\n+        if (tableProperties == null) {\n+            return null;\n+        }\n+        String dir = (String)tableProperties.remove(BULK_DELETE_DIRECTORY);", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5MDcyMw==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509090723", "bodyText": "you are right. i have no idea, i just mimicked the original code", "author": "martinrupp", "createdAt": "2020-10-21T08:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4NTg1OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4OTY5Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508389692", "bodyText": "I guess you want to have something similar to reverse iterator, right? (not that it exists AFAIK, but maybe you can wrap this in a special method to make the intention clear.", "author": "hatyo", "createdAt": "2020-10-20T10:31:21Z", "path": "hbase_pipeline/src/main/java/com/splicemachine/derby/hbase/SpliceIndexEndpoint.java", "diffHunk": "@@ -198,15 +199,26 @@ private boolean useToken(BulkWrites bulkWrites) {\n         return true;\n     }\n \n+    // todo: improve this\n+    private boolean isLoadReplaceMode(BulkWrites bulkWrites) {\n+        boolean loadReplaceMode = false;\n+        Iterator<BulkWrite> iterator = bulkWrites.getBulkWrites().iterator();\n+        if (iterator.hasNext()) {\n+            BulkWrite bw = iterator.next();\n+            loadReplaceMode = bw.isLoadReplaceMode();\n+        }", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MTI1Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r508391252", "bodyText": "please write a comment here explaining situations where foreignKeyChecks can be set to false.", "author": "hatyo", "createdAt": "2020-10-20T10:34:00Z", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "diffHunk": "@@ -231,7 +222,8 @@ private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext c\n             ddlFactories.addFactories(context,true,expectedWrites);\n \n             // FK - child intercept (of inserts/updates)\n-            fkGroup.addFactories(context,false,expectedWrites);\n+            if( foreignKeyChecks )", "originalCommit": "f72f583f6f1ecd3e12917d696c3b00b6cd7c7bd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA5NzU2NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r509097565", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-10-21T08:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MTI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "28d61c9a0a096916a991681ae15a215590367942", "chunk": "diff --git a/pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java b/pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java\nindex 3f3b9d0cb8..542858c89f 100644\n--- a/pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java\n+++ b/pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java\n\n@@ -221,9 +226,10 @@ class LocalWriteContextFactory<TableInfo> implements WriteContextFactory<Transac\n \n             ddlFactories.addFactories(context,true,expectedWrites);\n \n-            // FK - child intercept (of inserts/updates)\n-            if( foreignKeyChecks )\n+            if( foreignKeyChecks ) {\n+                // FK - child intercept (of inserts/updates)\n                 fkGroup.addFactories(context,false,expectedWrites);\n+            }\n         }\n     }\n \n"}}, {"oid": "28d61c9a0a096916a991681ae15a215590367942", "url": "https://github.com/splicemachine/spliceengine/commit/28d61c9a0a096916a991681ae15a215590367942", "message": "DB-10350 address code reviews", "committedDate": "2020-10-21T11:22:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMTk2MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r510911960", "bodyText": "Is it possible to get a better datatype here? are we expecting to pass more info in this parameter in the future?", "author": "dgomezferro", "createdAt": "2020-10-23T14:11:33Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java", "diffHunk": "@@ -185,12 +185,13 @@ ResultSet getDeleteVTIResultSet(NoPutResultSet source, double optimizerEstimated\n      *               be deleted from the target table. This result set must\n      *               contain one column which provides RowLocations that are\n      *               valid in the target table.\n+     * @param noTriggerRI if set to 1, DELETE will not fire triggers or check foreign key constraints\n      * @return the delete operation as a result set.\n      * @throws StandardException thrown when unable to perform the delete\n      */\n     ResultSet getDeleteResultSet(NoPutResultSet source, double optimizerEstimatedRowCount,\n                                  double optimizerEstimatedCost, String tableVersion,\n-                                 String explainPlan, String bulkDeleteDirectory, int colMapRefItem)\n+                                 String explainPlan, String bulkDeleteDirectory, String noTriggerRI, int colMapRefItem)", "originalCommit": "28d61c9a0a096916a991681ae15a215590367942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMjUyMw==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516522523", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-11-03T09:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxMTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "acac977240bf45649358961a128bc1e101bad440", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java b/db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java\nindex 607c177ab5..b6961451a8 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/iapi/sql/execute/ResultSetFactory.java\n\n@@ -191,7 +191,7 @@ public interface ResultSetFactory {\n      */\n     ResultSet getDeleteResultSet(NoPutResultSet source, double optimizerEstimatedRowCount,\n                                  double optimizerEstimatedCost, String tableVersion,\n-                                 String explainPlan, String bulkDeleteDirectory, String noTriggerRI, int colMapRefItem)\n+                                 String explainPlan, String bulkDeleteDirectory, boolean noTriggerRI, int colMapRefItem)\n             throws StandardException;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNTAwOA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512615008", "bodyText": "Isn't it possible you are changing here a shared writeConfiguration?", "author": "dgomezferro", "createdAt": "2020-10-27T11:31:50Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java", "diffHunk": "@@ -44,23 +44,27 @@\n     public int rowsDeleted = 0;\n     protected DeleteOperation deleteOperation;\n \n-    public DeletePipelineWriter(TxnView txn,byte[] token,long heapConglom,long tempConglomID, String tableVersion, ExecRow execRowDefinition, OperationContext operationContext) throws StandardException {\n-        super(txn, token, heapConglom, tempConglomID, tableVersion, execRowDefinition, operationContext);\n+    public DeletePipelineWriter(TxnView txn, byte[] token, long heapConglom, long tempConglomID,\n+                                String tableVersion, ExecRow execRowDefinition, OperationContext operationContext,\n+                                boolean loadReplaceMode)\n+            throws StandardException {\n+        super(txn, token, heapConglom, tempConglomID, tableVersion, execRowDefinition, operationContext, loadReplaceMode);\n         if (operationContext != null) {\n             deleteOperation = (DeleteOperation)operationContext.getOperation();\n         }\n     }\n \n     public void open() throws StandardException {\n-        open(deleteOperation != null ? deleteOperation.getTriggerHandler() : null, deleteOperation);\n+        open(deleteOperation != null ? deleteOperation.getTriggerHandler() : null, deleteOperation, loadReplaceMode);\n     }\n \n-    public void open(TriggerHandler triggerHandler, SpliceOperation operation) throws StandardException {\n-        super.open(triggerHandler, operation);\n+    public void open(TriggerHandler triggerHandler, SpliceOperation operation, boolean loadReplaceMode) throws StandardException {\n+        super.open(triggerHandler, operation, loadReplaceMode);\n         try{\n             WriteConfiguration writeConfiguration = writeCoordinator.defaultWriteConfiguration();\n             if(rollforward)\n                 writeConfiguration = new RollforwardWriteConfiguration(writeConfiguration);\n+            writeConfiguration.setLoadReplaceMode(loadReplaceMode);", "originalCommit": "28d61c9a0a096916a991681ae15a215590367942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjM5NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516546395", "bodyText": "you're right, i replaced with newDefaultWriteConfiguration, which returns a new object", "author": "martinrupp", "createdAt": "2020-11-03T10:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNTAwOA=="}], "type": "inlineReview", "revised_code": {"commit": "0d5aa2af43feea6340100e2a1059d262a53ae4a7", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java b/splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java\nindex 730548458c..f13d4864be 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/stream/output/delete/DeletePipelineWriter.java\n\n@@ -68,9 +68,6 @@ public class DeletePipelineWriter extends AbstractPipelineWriter<ExecRow>{\n             writeBuffer=writeCoordinator.writeBuffer(destinationTable,txn,null, PipelineUtils.noOpFlushHook, writeConfiguration, Metrics.noOpMetricFactory());\n             encoder=new PairEncoder(getKeyEncoder(),getRowHash(),dataType);\n             flushCallback=triggerHandler==null?null:TriggerHandler.flushCallback(writeBuffer);\n-\n-        if (triggerHandler != null && triggerHandler.hasStatementTriggerWithReferencingClause())\n-            triggerRowsEncoder=new PairEncoder(getTriggerKeyEncoder(),getTriggerRowHash(),KVPair.Type.INSERT);\n         }catch(IOException ioe){\n            throw Exceptions.parseException(ioe);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMDg0OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512620849", "bodyText": "If the parent connection has autocommit=true, does this work? In any case it would be better to use savepoints I think, rather than rolling back the whole user transaction.", "author": "dgomezferro", "createdAt": "2020-10-27T11:42:20Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -770,6 +828,10 @@ private static void doImport(String schemaName,\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n+                if( conn != null && isLoadReplaceMode ) {\n+                    // rolling back the DELETE we've done\n+                    conn.rollback();", "originalCommit": "28d61c9a0a096916a991681ae15a215590367942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjYwNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516546604", "bodyText": "ok, using savepoints now and added a test", "author": "martinrupp", "createdAt": "2020-11-03T10:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMDg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c61b10747be2e2fe020a9f2f95d42f174f7c20e8", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\nindex 47e3a25225..6156bf976d 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\n\n@@ -828,9 +830,9 @@ public class HdfsImport {\n                 rs.open();\n                 results[0] = new EmbedResultSet40((EmbedConnection) conn, rs, false, null, true);\n             } catch (SQLException | StandardException | IOException e) {\n-                if( conn != null && isLoadReplaceMode ) {\n+                if( sp != null ) {\n                     // rolling back the DELETE we've done\n-                    conn.rollback();\n+                    conn.rollback(sp);\n                 }\n                 throw new SQLException(e);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTM3OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512621379", "bodyText": "Are we deleting all rows? Should we use truncate here instead?", "author": "dgomezferro", "createdAt": "2020-10-27T11:43:21Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java", "diffHunk": "@@ -670,18 +715,31 @@ private static void doImport(String schemaName,\n                 throw new SQLException(e);\n             }\n \n+            String insertMode = (isUpsert ? \"UPSERT\" : \"INSERT\");\n+            if( isLoadReplaceMode ) insertMode = InsertNode.LOAD_REPLACE;\n+\n             ColumnInfo columnInfo = new ColumnInfo(conn, schemaName, tableName, insertColumnList);\n             String selectList = generateColumnList(lcc,schemaName,tableName,insertColumnList, true, null);\n             String vtiTable = importVTI + \" AS importVTI (\" + columnInfo.getImportAsColumns() + \")\";\n             String insertSql = \"INSERT INTO \" + entityName + \"(\" + columnInfo.getInsertColumnNames() + \") \" +\n-                    \"--splice-properties useSpark=true , insertMode=\" + (isUpsert ? \"UPSERT\" : \"INSERT\") + \", statusDirectory=\" +\n+                    \"--splice-properties useSpark=true , insertMode=\" + insertMode + \", statusDirectory=\" +\n                     badRecordDirectory + \", badRecordsAllowed=\" + badRecordsAllowed + \", bulkImportDirectory=\" + bulkImportDirectory\n                     + \", samplingOnly=\" + samplingOnly + \", outputKeysOnly=\" + outputKeysOnly + \", skipSampling=\" + skipSampling\n                     + (skipConflictDetection ? \", skipConflictDetection=true\" : \"\") + (skipWAL ? \", skipWAL=true\" : \"\")\n                     + (indexName !=null ? (\", index=\" + indexName):\"\") + \"\\n\" +\n                     \" SELECT \"+ selectList +\n                     \" from \" + vtiTable;\n \n+            if(isLoadReplaceMode)\n+            {\n+                // delete table before inserting\n+                try (PreparedStatement ips = conn.prepareStatement(\"DELETE FROM \" + entityName + DeleteNode.NO_TRIGGER_RI_PROPERTY)) {", "originalCommit": "28d61c9a0a096916a991681ae15a215590367942", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE5MTU3MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r513191571", "bodyText": "My understanding is that not all rows are to be deleted from the table. Should join the table with input file using PK as join key, and delete all rows from the table whose PK is in the join result.", "author": "jyuanca", "createdAt": "2020-10-28T05:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NzkyNw==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r516547927", "bodyText": "discussed with Gene, he thinks the DELETE+INSERT is the thing the customer wants. We can add an UPSERT mode later if needed.\nTRUNCATE would be possible, but is more difficult to implement. As it is a performance improvement over this, i created DB-10642 .", "author": "martinrupp", "createdAt": "2020-11-03T10:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMTM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c61b10747be2e2fe020a9f2f95d42f174f7c20e8", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\nindex 47e3a25225..6156bf976d 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/load/HdfsImport.java\n\n@@ -732,6 +733,7 @@ public class HdfsImport {\n \n             if(isLoadReplaceMode)\n             {\n+                sp = conn.setSavepoint();\n                 // delete table before inserting\n                 try (PreparedStatement ips = conn.prepareStatement(\"DELETE FROM \" + entityName + DeleteNode.NO_TRIGGER_RI_PROPERTY)) {\n                     ips.executeUpdate();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYyMjc1Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4266#discussion_r512622757", "bodyText": "missing comment?", "author": "dgomezferro", "createdAt": "2020-10-27T11:45:35Z", "path": "pipeline_api/src/main/java/com/splicemachine/pipeline/contextfactory/LocalWriteContextFactory.java", "diffHunk": "@@ -216,11 +204,19 @@ private void isInitialized(TxnView txn) throws IOException, InterruptedException\n         }\n     }\n \n-    private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext context) throws IOException, InterruptedException {\n+    /**\n+     * addWriteHandlerFactories\n+     * @param foreignKeyChecks if set to false, we don't check referential integrity (foreign key checks)\n+     *                         this is used e.g. with INSERT ... insertMode=LOAD_REPLACE or DELETE ... noTriggerRI=1\n+     */\n+    private void addWriteHandlerFactories(int expectedWrites, PipelineWriteContext context,\n+                                          boolean foreignKeyChecks) throws IOException, InterruptedException {\n         isInitialized(context.getTxn());\n         //only add constraints and indices when we are in a RUNNING state\n         if (state.get() == State.RUNNING) {\n             //add Constraint checks before anything else\n+\n+            // ?", "originalCommit": "28d61c9a0a096916a991681ae15a215590367942", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "0d5aa2af43feea6340100e2a1059d262a53ae4a7", "url": "https://github.com/splicemachine/spliceengine/commit/0d5aa2af43feea6340100e2a1059d262a53ae4a7", "message": "fix", "committedDate": "2020-10-30T21:43:07Z", "type": "forcePushed"}, {"oid": "acac977240bf45649358961a128bc1e101bad440", "url": "https://github.com/splicemachine/spliceengine/commit/acac977240bf45649358961a128bc1e101bad440", "message": "DB-10350 address code review, test", "committedDate": "2020-11-02T16:45:46Z", "type": "forcePushed"}, {"oid": "979cf0f1be323dd12f615eddab473c00598d71c0", "url": "https://github.com/splicemachine/spliceengine/commit/979cf0f1be323dd12f615eddab473c00598d71c0", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-11-02T21:42:05Z", "type": "forcePushed"}, {"oid": "7d052bcc44dc94d9248e3cb80084bd5794a9398d", "url": "https://github.com/splicemachine/spliceengine/commit/7d052bcc44dc94d9248e3cb80084bd5794a9398d", "message": "DB-10350 Special import mode that does not check referential integrity or fire triggers", "committedDate": "2020-11-04T08:12:11Z", "type": "commit"}, {"oid": "c61b10747be2e2fe020a9f2f95d42f174f7c20e8", "url": "https://github.com/splicemachine/spliceengine/commit/c61b10747be2e2fe020a9f2f95d42f174f7c20e8", "message": "DB-10350 address code review: using savepoints to rollback failed inserts", "committedDate": "2020-11-04T08:12:11Z", "type": "commit"}, {"oid": "c61b10747be2e2fe020a9f2f95d42f174f7c20e8", "url": "https://github.com/splicemachine/spliceengine/commit/c61b10747be2e2fe020a9f2f95d42f174f7c20e8", "message": "DB-10350 address code review: using savepoints to rollback failed inserts", "committedDate": "2020-11-04T08:12:11Z", "type": "forcePushed"}]}