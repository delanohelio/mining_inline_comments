{"pr_number": 3160, "pr_title": "DB-9012 Flatten half outer joins", "pr_createdAt": "2020-01-27T20:35:50Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3160", "timeline": [{"oid": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "url": "https://github.com/splicemachine/spliceengine/commit/e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "message": "DB-9012 Flatten half outer joins", "committedDate": "2020-01-27T20:36:54Z", "type": "commit"}, {"oid": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "url": "https://github.com/splicemachine/spliceengine/commit/e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "message": "DB-9012 Flatten half outer joins", "committedDate": "2020-01-27T20:36:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczMzU4NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r371733585", "bodyText": "Minor nitpick, but can you rename this field so it doesn't start with an upper case letter? By convention that's reserved for classes. I think outerJoinLevel is not much more verbose", "author": "dgomezferro", "createdAt": "2020-01-28T10:55:48Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromTable.java", "diffHunk": "@@ -123,6 +123,12 @@\n      * SSQ join related variables\n      */\n     public boolean fromSSQ;\n+\n+    /* variable tracking the info of a FromTable node flattened from a HalfJoinNode.\n+     * if OJLevel = 0, the table is free to join with other tables in the FromList, if OJLevel > 0, it can only\n+     * join with its left table indicated in the dependencyMap */\n+    protected int OJLevel;", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1MzIxMA==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372753210", "bodyText": "Done!", "author": "yxia92", "createdAt": "2020-01-30T04:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczMzU4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromTable.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromTable.java\nindex 925b9716d6..5a1bba0f83 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromTable.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromTable.java\n\n@@ -125,9 +125,9 @@ public abstract class FromTable extends ResultSetNode implements Optimizable{\n     public boolean fromSSQ;\n \n     /* variable tracking the info of a FromTable node flattened from a HalfJoinNode.\n-     * if OJLevel = 0, the table is free to join with other tables in the FromList, if OJLevel > 0, it can only\n+     * if outerJoinLevel = 0, the table is free to join with other tables in the FromList, if outerJoinLevel > 0, it can only\n      * join with its left table indicated in the dependencyMap */\n-    protected int OJLevel;\n+    protected int outerJoinLevel;\n     PredicateList postJoinPredicates;\n     /**\n      * Initializer for a table in a FROM list.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNTI3MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r371735270", "bodyText": "Same here", "author": "dgomezferro", "createdAt": "2020-01-28T10:59:13Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java", "diffHunk": "@@ -67,6 +67,8 @@\n     protected boolean isQualifier;\n     // Whether this is full outer join predicate\n     protected boolean  forFullJoin;\n+    // indicate whether the predicate is from the ON cluase of a particular half outer join\n+    protected int OJLevel;", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1MzI1Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372753252", "bodyText": "I renamed it to outerJoinLevel.", "author": "yxia92", "createdAt": "2020-01-30T04:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNTI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java\nindex 2ac7bc133c..32a2eb9ceb 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/Predicate.java\n\n@@ -68,7 +68,7 @@ public final class Predicate extends QueryTreeNode implements OptimizablePredica\n     // Whether this is full outer join predicate\n     protected boolean  forFullJoin;\n     // indicate whether the predicate is from the ON cluase of a particular half outer join\n-    protected int OJLevel;\n+    protected int outerJoinLevel;\n     private boolean pulled;\n \n     /* Hashtable used for tracking the search clause types that have been\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMzUwNw==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372213507", "bodyText": "Can you expand on the \"why\" for this?  \"To stay safe\" is a bit more nebulous than \"if we push this to the right side of the outer join, there's a chance for incorrect results or bad performance because we're postponing excluding matches.  No need to hold up the review for this, but if you're changing other things anyway", "author": "carolp-503", "createdAt": "2020-01-29T06:51:15Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromList.java", "diffHunk": "@@ -700,6 +703,10 @@ void pushPredicates(PredicateList predicateList) throws StandardException{\n         int size=size();\n         for(int index=0;index<size;index++){\n             FromTable fromTable=(FromTable)elementAt(index);\n+            // to stay safe, we will not push where clause condition(including flattened outer join", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1NDIzOA==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372754238", "bodyText": "This is just to simplify the logic and reduce the risk, we can enhance it in the future. This is consistent with the existing behavior. I rephrased the comment.", "author": "yxia92", "createdAt": "2020-01-30T04:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMzUwNw=="}], "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromList.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromList.java\nindex e06bde526b..c05313f8f9 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromList.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/FromList.java\n\n@@ -703,9 +703,10 @@ public class FromList extends QueryTreeNodeVector<QueryTreeNode> implements Opti\n         int size=size();\n         for(int index=0;index<size;index++){\n             FromTable fromTable=(FromTable)elementAt(index);\n-            // to stay safe, we will not push where clause condition(including flattened outer join\n-            // ON clause condition) to right of outer join\n-            if (fromTable.getOJLevel() > 0)\n+            // To simplify the logic and preserve the existing behavior,\n+            // we will not push where clause condition(including flattened outer join\n+            // ON clause condition) to right of outer join for now, it can be enhanced in the future\n+            if (fromTable.getOuterJoinLevel() > 0)\n                 continue;\n             fromTable.pushExpressions(predicateList);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzNzA0Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372337042", "bodyText": "outerJoinFatteningDisabled -> outerJoinFlatteningDisabled", "author": "arnaud-splice", "createdAt": "2020-01-29T11:47:55Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -564,6 +564,19 @@ else if (nativeSparkAggregationModeString.equals(\"forced\"))\n             }\n             cc.setCurrentTimestampPrecision(currentTimestampPrecision);\n \n+            String outerJoinFlatteningDisabledString =\n+                    PropertyUtil.getCachedDatabaseProperty(lcc, Property.OUTERJOIN_FLATTENING_DISABLED);\n+            boolean outerJoinFatteningDisabled = CompilerContext.DEFAULT_OUTERJOIN_FLATTENING_DISABLED;", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1NDM4MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372754381", "bodyText": "I've corrected the typo, thanks!", "author": "yxia92", "createdAt": "2020-01-30T04:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzNzA0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java\nindex 29501aaf5b..20ae0af28c 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java\n\n@@ -566,16 +566,16 @@ public class GenericStatement implements Statement{\n \n             String outerJoinFlatteningDisabledString =\n                     PropertyUtil.getCachedDatabaseProperty(lcc, Property.OUTERJOIN_FLATTENING_DISABLED);\n-            boolean outerJoinFatteningDisabled = CompilerContext.DEFAULT_OUTERJOIN_FLATTENING_DISABLED;\n+            boolean outerJoinFlatteningDisabled = CompilerContext.DEFAULT_OUTERJOIN_FLATTENING_DISABLED;\n             try {\n                 if (outerJoinFlatteningDisabledString != null)\n-                    outerJoinFatteningDisabled =\n+                    outerJoinFlatteningDisabled =\n                             Boolean.valueOf(outerJoinFlatteningDisabledString);\n             } catch (Exception e) {\n                 // If the property value failed to convert to a boolean, don't throw an error,\n                 // just use the default setting.\n             }\n-            cc.setOuterJoinFlatteningDisabled(outerJoinFatteningDisabled);\n+            cc.setOuterJoinFlatteningDisabled(outerJoinFlatteningDisabled);\n \n             if (! cc.isSparkVersionInitialized()) {\n                 // If splice.spark.version is manually set, use it...\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMzOTcwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372339709", "bodyText": "Boolean.valueOf does not throw an exception as far as I know.\nIt returns\n       ((s != null) && s.equalsIgnoreCase(\"true\"));\nSo you can remove the try catch", "author": "arnaud-splice", "createdAt": "2020-01-29T11:54:16Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java", "diffHunk": "@@ -564,6 +564,19 @@ else if (nativeSparkAggregationModeString.equals(\"forced\"))\n             }\n             cc.setCurrentTimestampPrecision(currentTimestampPrecision);\n \n+            String outerJoinFlatteningDisabledString =\n+                    PropertyUtil.getCachedDatabaseProperty(lcc, Property.OUTERJOIN_FLATTENING_DISABLED);\n+            boolean outerJoinFatteningDisabled = CompilerContext.DEFAULT_OUTERJOIN_FLATTENING_DISABLED;\n+            try {\n+                if (outerJoinFlatteningDisabledString != null)\n+                    outerJoinFatteningDisabled =\n+                            Boolean.valueOf(outerJoinFlatteningDisabledString);", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java\nindex 29501aaf5b..20ae0af28c 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericStatement.java\n\n@@ -566,16 +566,16 @@ public class GenericStatement implements Statement{\n \n             String outerJoinFlatteningDisabledString =\n                     PropertyUtil.getCachedDatabaseProperty(lcc, Property.OUTERJOIN_FLATTENING_DISABLED);\n-            boolean outerJoinFatteningDisabled = CompilerContext.DEFAULT_OUTERJOIN_FLATTENING_DISABLED;\n+            boolean outerJoinFlatteningDisabled = CompilerContext.DEFAULT_OUTERJOIN_FLATTENING_DISABLED;\n             try {\n                 if (outerJoinFlatteningDisabledString != null)\n-                    outerJoinFatteningDisabled =\n+                    outerJoinFlatteningDisabled =\n                             Boolean.valueOf(outerJoinFlatteningDisabledString);\n             } catch (Exception e) {\n                 // If the property value failed to convert to a boolean, don't throw an error,\n                 // just use the default setting.\n             }\n-            cc.setOuterJoinFlatteningDisabled(outerJoinFatteningDisabled);\n+            cc.setOuterJoinFlatteningDisabled(outerJoinFlatteningDisabled);\n \n             if (! cc.isSparkVersionInitialized()) {\n                 // If splice.spark.version is manually set, use it...\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDkzOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372340939", "bodyText": "indent", "author": "arnaud-splice", "createdAt": "2020-01-29T11:57:17Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CompilerContextImpl.java", "diffHunk": "@@ -141,6 +141,8 @@ public\tvoid\tresetContext()\n         selectivityEstimationIncludingSkewedDefault = false;\n         projectionPruningEnabled = false;\n         maxMulticolumnProbeValues = DEFAULT_MAX_MULTICOLUMN_PROBE_VALUES;\n+        nextOJLevel = 1;\n+\t\touterJoinFlatteningDisabled = false;", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1NDcwMg==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372754702", "bodyText": "Done.", "author": "yxia92", "createdAt": "2020-01-30T04:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CompilerContextImpl.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CompilerContextImpl.java\nindex c5855c3303..d68a67f25e 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CompilerContextImpl.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/CompilerContextImpl.java\n\n@@ -142,7 +142,7 @@ public class CompilerContextImpl extends ContextImpl\n         projectionPruningEnabled = false;\n         maxMulticolumnProbeValues = DEFAULT_MAX_MULTICOLUMN_PROBE_VALUES;\n         nextOJLevel = 1;\n-\t\touterJoinFlatteningDisabled = false;\n+        outerJoinFlatteningDisabled = false;\n \t}\n \n \t//\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NTQ3NA==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372345474", "bodyText": "rename to maxNumTables", "author": "arnaud-splice", "createdAt": "2020-01-29T12:07:40Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/compile/JoinNode.java", "diffHunk": "@@ -873,6 +873,7 @@ public void pushExpressions(PredicateList outerPredicateList) throws StandardExc\n      * @param sql          The SubqueryList from the outer query\n      * @param gbl          The group by list, if any\n      * @param havingClause The HAVING clause, if any\n+     * @param numTables     maximum number of tables in the query", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NzI4MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372347281", "bodyText": "remove duplicated line", "author": "arnaud-splice", "createdAt": "2020-01-29T12:11:54Z", "path": "hbase_sql/src/test/java/com/splicemachine/hbase/CostEstimationIT.java", "diffHunk": "@@ -225,23 +225,25 @@ public void testOuterJoinRowCount() throws Exception {\n             The plan is similar to the following:\n             --------------------------------------------------------------------\n             Cursor(n=10,rows=1,updateMode=READ_ONLY (1),engine=control)\n-              ->  ScrollInsensitive(n=9,totalCost=131.717,outputRows=1,outputHeapSize=0 B,partitions=1)\n-                ->  ProjectRestrict(n=8,totalCost=29.575,outputRows=1,outputHeapSize=0 B,partitions=1)\n-                  ->  GroupBy(n=7,totalCost=29.575,outputRows=1,outputHeapSize=0 B,partitions=1)\n-                    ->  ProjectRestrict(n=6,totalCost=24.84,outputRows=219,outputHeapSize=296 B,partitions=1)\n-                      ->  BroadcastJoin(n=5,totalCost=24.84,outputRows=219,outputHeapSize=296 B,partitions=1,preds=[(A1[8:1] = A2[8:2])])\n-                        ->  BroadcastLeftOuterJoin(n=4,totalCost=12.28,outputRows=18,outputHeapSize=78 B,partitions=1,preds=[(A2[6:1] = A3[6:2])])\n-                          ->  TableScan[T33(1920)](n=3,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=78 B,partitions=1)\n-                          ->  TableScan[T22(1904)](n=2,totalCost=4.04,scannedRows=20,outputRows=18,outputHeapSize=18 B,partitions=1,preds=[(A2[2:1] = 90)])\n-                        ->  TableScan[T11(1888)](n=1,totalCost=4.6,scannedRows=300,outputRows=270,outputHeapSize=270 B,partitions=1,preds=[(A1[0:1] = 90)])\n+              ->  ScrollInsensitive(n=9,totalCost=141.458,outputRows=1,outputHeapSize=0 B,partitions=1)\n+                ->  ProjectRestrict(n=8,totalCost=39.315,outputRows=1,outputHeapSize=0 B,partitions=1)\n+                  ->  GroupBy(n=7,totalCost=39.315,outputRows=1,outputHeapSize=0 B,partitions=1)\n+                    ->  ProjectRestrict(n=6,totalCost=21.497,outputRows=219,outputHeapSize=332 B,partitions=1)\n+                      ->  BroadcastLeftOuterJoin(n=5,totalCost=21.497,outputRows=219,outputHeapSize=332 B,partitions=1,preds=[(A2[8:2] = A3[8:3])])\n+                        ->  TableScan[T33(48224)](n=4,totalCost=4.04,scannedRows=20,outputRows=20,outputHeapSize=332 B,partitions=1)\n+                        ->  BroadcastJoin(n=3,totalCost=13.039,outputRows=219,outputHeapSize=272 B,partitions=1,preds=[(A1[4:1] = A2[4:2])])\n+                          ->  TableScan[T22(48208)](n=2,totalCost=4.04,scannedRows=20,outputRows=18,outputHeapSize=272 B,partitions=1,preds=[(A2[2:1] = 90)])\n+                          ->  TableScan[T11(48192)](n=1,totalCost=4.6,scannedRows=300,outputRows=270,outputHeapSize=270 B,partitions=1,preds=[(A1[0:1] = 90)])\n+\n+            10 rows selected\n \n             10 rows selected", "originalCommit": "e9c5a4bc7756e3e00bc12d75ef74361a80508fdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1NDg4OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3160#discussion_r372754888", "bodyText": "Done!", "author": "yxia92", "createdAt": "2020-01-30T04:30:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NzI4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff2f2eedf72331157fc529fb870030d953e91c0b", "chunk": "diff --git a/hbase_sql/src/test/java/com/splicemachine/hbase/CostEstimationIT.java b/hbase_sql/src/test/java/com/splicemachine/hbase/CostEstimationIT.java\nindex eb638e6493..41162ad297 100644\n--- a/hbase_sql/src/test/java/com/splicemachine/hbase/CostEstimationIT.java\n+++ b/hbase_sql/src/test/java/com/splicemachine/hbase/CostEstimationIT.java\n\n@@ -236,8 +236,6 @@ public class CostEstimationIT extends SpliceUnitTest {\n                           ->  TableScan[T11(48192)](n=1,totalCost=4.6,scannedRows=300,outputRows=270,outputHeapSize=270 B,partitions=1,preds=[(A1[0:1] = 90)])\n \n             10 rows selected\n-\n-            10 rows selected\n          */\n         rowContainsQuery(new int[]{2,3,4,5,6,7,8,9,10},\"explain select count(*) from --splice-properties joinOrder=fixed\\n\" +\n                         \"t11  --splice-properties useDefaultRowCount=300\\n\" +\n"}}, {"oid": "ff2f2eedf72331157fc529fb870030d953e91c0b", "url": "https://github.com/splicemachine/spliceengine/commit/ff2f2eedf72331157fc529fb870030d953e91c0b", "message": "DB-9012 address review comments", "committedDate": "2020-01-30T04:38:37Z", "type": "commit"}]}