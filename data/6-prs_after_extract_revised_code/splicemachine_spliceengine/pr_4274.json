{"pr_number": 4274, "pr_title": "DB-10460 fix default value for bit data type in show_create_table sta\u2026", "pr_createdAt": "2020-10-13T00:02:09Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4274", "timeline": [{"oid": "b4325170e8d362e3edadc6ce20854679c9845a2e", "url": "https://github.com/splicemachine/spliceengine/commit/b4325170e8d362e3edadc6ce20854679c9845a2e", "message": "DB-10460 fix default value for bit data type in show_create_table statement", "committedDate": "2020-10-12T23:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MzI0Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4274#discussion_r503793243", "bodyText": "this is necessary since we are putting that generated DDL string into this\nStringBuilder sb = new StringBuilder(\"SELECT * FROM (VALUES '\");\nsb.append(DDL);\nString extStr = extTblString.toString();\nif (extStr.length() > 0)\n\tsb.append(extStr);\nsb.append(\";') FOO (DDL)\");\nresultSet[0] = executeStatement(sb);\n\nand therefore all quotes like ' have to be escaped, resulting in double quotes \u2018'. For X\u2019000' this means X''000''.\nThis scheme of creating a `\u201dSELECT * FROM (VALUES \u2018\u201c + result + \u201c;) FOO(col1, col2)\u2019 is used in all of SpliceAdmin.java, might be up for some more surprises.\nActually maybe simple would have been to solve escaping generally here by using sth like\nString escapeAsValue(String val) {\n  return val.replaceAll(\"'\", \"''\"); \n}\n\nand then use everywhere sth  like \u201dSELECT * FROM (VALUES \u2018\u201c + doEscaping(result) + \u201c;) FOO(col1, col2)\u201d;", "author": "martinrupp", "createdAt": "2020-10-13T09:12:23Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/utils/SpliceAdmin.java", "diffHunk": "@@ -2387,6 +2387,10 @@ private static String createColumn(ColumnDescriptor columnDescriptor) throws SQL\n                         ) {\n                     if ((defaultText = defaultText.toUpperCase()).startsWith(\"'\"))\n                         defaultText = \"'\" + defaultText + \"'\";\n+                    if (columnDescriptor.getType().getTypeId().isBitTypeId() &&\n+                            defaultText.startsWith(\"X'\")) {\n+                        defaultText = \"X'\" + defaultText.substring(1) + \"'\";\n+                    }", "originalCommit": "b4325170e8d362e3edadc6ce20854679c9845a2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}