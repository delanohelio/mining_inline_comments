{"pr_number": 3348, "pr_title": "DB-9313 Move getpartitionedstmt to external table related scope in SHOW_CREATE_TABLE", "pr_createdAt": "2020-03-26T16:07:42Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3348", "timeline": [{"oid": "ca815467a50842bfb10dfa41caadd9c20b509424", "url": "https://github.com/splicemachine/spliceengine/commit/ca815467a50842bfb10dfa41caadd9c20b509424", "message": "DB-9313 Move getpartitionedstmt to external table related scope in SHOW_CREATE_TABLE", "committedDate": "2020-03-26T16:02:03Z", "type": "commit"}, {"oid": "f1bd2bcaf6c6684f39f7addc0304736d5551054b", "url": "https://github.com/splicemachine/spliceengine/commit/f1bd2bcaf6c6684f39f7addc0304736d5551054b", "message": "Merge branch 'master' into DB-9313", "committedDate": "2020-03-26T16:03:56Z", "type": "commit"}, {"oid": "0fc1a40f14a909c822fb4b6829b4d8e57c18c450", "url": "https://github.com/splicemachine/spliceengine/commit/0fc1a40f14a909c822fb4b6829b4d8e57c18c450", "message": "Address test case on hbase only", "committedDate": "2020-03-26T18:32:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjUwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3348#discussion_r401436509", "bodyText": "Did you mean to call this on the view instead of the system table?", "author": "dgomezferro", "createdAt": "2020-04-01T08:19:55Z", "path": "splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java", "diffHunk": "@@ -382,4 +397,93 @@ public void testTextDefaultUserRole() throws Exception\n                 \") ;\", rs.getString(1));\n \n     }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTablePlainText() throws Exception {\n+        //Plain text\n+        String textDLL = String.format(\"CREATE EXTERNAL TABLE SHOWCREATETABLEIT.testCsvFile (id INT, c_text varchar(30)) \\n\" +\n+                \"ROW FORMAT DELIMITED \\n\" +\n+                \"FIELDS TERMINATED BY ','\\n\" +\n+                \"STORED AS TEXTFILE\\n\" +\n+                \"location '%s'\", getExternalResourceDirectory() + \"testCsvFile\");\n+        methodWatcher.executeUpdate(textDLL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTCSVFILE')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTCSVFILE\\\" (\\n\" +\n+                \"\\\"ID\\\" INTEGER\\n\" +\n+                \",\\\"C_TEXT\\\" VARCHAR(30)\\n\" +\n+                \") \\n\" +\n+                \"ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\\n\" +\n+                \"STORED AS TEXTFILE\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testCsvFile';\", rs.getString(1));\n+    }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTableParquetWithoutCompression() throws Exception {\n+        //Parquet Without compression\n+        String parquetDDL = String.format(\"create external table SHOWCREATETABLEIT.testParquet (col1 int, col2 varchar(24))\" +\n+                \"partitioned by (col1) STORED AS parquet LOCATION '%s'\", getExternalResourceDirectory() + \"testParquet\");\n+\n+        methodWatcher.executeUpdate(parquetDDL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTPARQUET')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTPARQUET\\\" (\\n\" +\n+                \"\\\"COL1\\\" INTEGER\\n\" +\n+                \",\\\"COL2\\\" VARCHAR(24)\\n\" +\n+                \") \\n\" +\n+                \"PARTITIONED BY (COL1)\\n\" +\n+                \"STORED AS PARQUET\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testParquet';\", rs.getString(1));\n+    }\n+\n+    @Category(HBaseTest.class)\n+    @Test\n+    public void testExternalTableOrcSnappy() throws Exception {\n+        //Orc With compression\n+        String orcDDL = String.format(\"create external table SHOWCREATETABLEIT.testOrcSnappy (col1 int, col2 varchar(24))\" +\n+                \"compressed with snappy partitioned by (col2) STORED AS ORC LOCATION '%s'\", getExternalResourceDirectory()+\"testOrcSnappy\");\n+        methodWatcher.executeUpdate(orcDDL);\n+        ResultSet rs = methodWatcher.executeQuery(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','TESTORCSNAPPY')\");\n+        rs.next();\n+        Assert.assertEquals(\"CREATE EXTERNAL TABLE \\\"SHOWCREATETABLEIT\\\".\\\"TESTORCSNAPPY\\\" (\\n\" +\n+                \"\\\"COL1\\\" INTEGER\\n\" +\n+                \",\\\"COL2\\\" VARCHAR(24)\\n\" +\n+                \") \\n\" +\n+                \"COMPRESSED WITH snappy\\n\" +\n+                \"PARTITIONED BY (COL2)\\n\" +\n+                \"STORED AS ORC\\n\" +\n+                \"LOCATION '\"+getExternalResourceDirectory()+\"testOrcSnappy';\", rs.getString(1));\n+    }\n+\n+    @Test\n+    public void testSystemTable() throws Exception {\n+        try\n+        {\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");\n+            Assert.fail(\"Expected to fail\");\n+        }\n+        catch (SQLException e)\n+        {\n+            String sqlState = e.getSQLState();\n+            Assert.assertEquals(\"42X62\",sqlState);\n+        }\n+    }\n+\n+    @Test\n+    public void testView() throws Exception {\n+        try\n+        {\n+            methodWatcher.executeUpdate(\"create view v1 as (select a1 from showcreatetableit.t1)\");\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");", "originalCommit": "0fc1a40f14a909c822fb4b6829b4d8e57c18c450", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1Mzk5MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3348#discussion_r401553990", "bodyText": "Thanks for catching it!", "author": "changli6", "createdAt": "2020-04-01T11:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQzNjUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "222c5557a5915970906d592e7aec346a06d8351f", "chunk": "diff --git a/splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java b/splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java\nindex 8f7896521e..bdb3d69b20 100644\n--- a/splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java\n+++ b/splice_machine/src/test/java/com/splicemachine/derby/utils/ShowCreateTableIT.java\n\n@@ -475,14 +475,14 @@ public class ShowCreateTableIT extends SpliceUnitTest\n     public void testView() throws Exception {\n         try\n         {\n-            methodWatcher.executeUpdate(\"create view v1 as (select a1 from showcreatetableit.t1)\");\n-            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SYS','SYSTABLES')\");\n+            methodWatcher.executeUpdate(\"create view showcreatetableit.v1 as (select a1 from showcreatetableit.t1)\");\n+            methodWatcher.execute(\"call syscs_util.SHOW_CREATE_TABLE('SHOWCREATETABLEIT','V1')\");\n             Assert.fail(\"Expected to fail\");\n         }\n         catch (SQLException e)\n         {\n             String sqlState = e.getSQLState();\n-            Assert.assertEquals(\"42X62\",sqlState);\n+            Assert.assertEquals(\"42Y62\",sqlState);\n         }\n     }\n \n"}}, {"oid": "222c5557a5915970906d592e7aec346a06d8351f", "url": "https://github.com/splicemachine/spliceengine/commit/222c5557a5915970906d592e7aec346a06d8351f", "message": "Fix test case", "committedDate": "2020-04-01T11:42:25Z", "type": "commit"}, {"oid": "c3ebe94ad5889102d7818a43cc4716e061d1c9db", "url": "https://github.com/splicemachine/spliceengine/commit/c3ebe94ad5889102d7818a43cc4716e061d1c9db", "message": "Clean spotbugs errors", "committedDate": "2020-04-13T22:20:36Z", "type": "commit"}]}