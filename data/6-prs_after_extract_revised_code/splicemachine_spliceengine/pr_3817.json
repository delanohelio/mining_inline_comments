{"pr_number": 3817, "pr_title": "DB-9745: add version number to dictionary tables", "pr_createdAt": "2020-07-13T20:09:25Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/3817", "timeline": [{"oid": "f83552b4f30fb0a725b317252bf0e3717681086b", "url": "https://github.com/splicemachine/spliceengine/commit/f83552b4f30fb0a725b317252bf0e3717681086b", "message": "DB-9745: add version number to dictionary tables", "committedDate": "2020-07-13T20:12:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MTI4Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460051286", "bodyText": "maybe add a justification for suppressing this warning", "author": "hatyo", "createdAt": "2020-07-24T13:27:34Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/CatalogRowFactory.java", "diffHunk": "@@ -48,6 +49,7 @@\n  * @version 0.2\n  */\n \n+@SuppressFBWarnings(value=\"EI_EXPOSE_REP2\")", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMTk2NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467321965", "bodyText": "It turned out this is not needed", "author": "jyuanca", "createdAt": "2020-08-07T23:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/CatalogRowFactory.java b/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/CatalogRowFactory.java\nindex 1a4658b84d..3b1611b907 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/CatalogRowFactory.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/CatalogRowFactory.java\n\n@@ -49,7 +49,6 @@ import java.util.List;\n  * @version 0.2\n  */\n \n-@SuppressFBWarnings(value=\"EI_EXPOSE_REP2\")\n public abstract\tclass CatalogRowFactory\n {\n \t///////////////////////////////////////////////////////////////////////////\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NTE1OA==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460055158", "bodyText": "Could use a not-null assertion here.", "author": "hatyo", "createdAt": "2020-07-24T13:34:38Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/CatalogRowFactory.java", "diffHunk": "@@ -337,4 +360,16 @@ public ExecRow makeRow(TupleDescriptor td, TupleDescriptor parent) throws Standa\n \tpublic List<ColumnDescriptor[]> getViewColumns(TableDescriptor view, UUID viewId) throws StandardException {\n \t\treturn null;\n \t}\n+\n+\tpublic void setHeapConglomerate (long heapConglomerate) {\n+\t\tthis.heapConglomerate = heapConglomerate;\n+\t}\n+\n+\tpublic void setDataDictionary(DataDictionary dd) {", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNzkwMg==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467317902", "bodyText": "It would be verbose to assert all set methods", "author": "jyuanca", "createdAt": "2020-08-07T22:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NTE1OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NzcxMw==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460057713", "bodyText": "I would use a Map<Name, String> where Name is an Enumeration of catalog names (SYSCONGLOMERATES, SYSTABLES, SYSCOLUMNS, ...). This makes it easier to change and work with IMHO.", "author": "hatyo", "createdAt": "2020-07-24T13:39:09Z", "path": "db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DataDictionary.java", "diffHunk": "@@ -254,6 +250,42 @@\n     int DROP_CONSTRAINT=5;\n     int FOREIGNKEY_CONSTRAINT=6;\n \n+    List<String> catalogVersions = Collections.unmodifiableList(Arrays.asList(", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27334dc4d433622fc0dac7b1733e14b03d164fec", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DataDictionary.java b/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DataDictionary.java\nindex 9a130d0c68..750e1b6c88 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DataDictionary.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/iapi/sql/dictionary/DataDictionary.java\n\n@@ -283,7 +284,8 @@ public interface DataDictionary{\n             \"1\", // SYSSOURCECODE\n             \"1\", // SYSSNAPSHOT\n             \"1\", // SYSTOKENS\n-            \"1\"  // SYSREPLICATION\n+            \"1\", // SYSREPLICATION\n+            \"1\"  // SYSMONGETCONNECTION_CATALOG_NUM\n     ));\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2NjA5Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460066093", "bodyText": "nice! \ud83d\udc4d", "author": "hatyo", "createdAt": "2020-07-24T13:53:07Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryCache.java", "diffHunk": "@@ -85,11 +86,15 @@\n     private ManagedCache<Pair<String, String>, Optional<RoleGrantDescriptor>> roleGrantCache;\n     private ManagedCache<ByteSlice,TokenDescriptor> tokenCache;\n     private ManagedCache<String, Optional<String>> propertyCache;\n+    private ManagedCache<Long, Optional<String>> catalogVersionCache;\n     private DataDictionary dd;\n-    public static final String [] cacheNames = new String[] {\"oidTdCache\", \"nameTdCache\", \"spsNameCache\", \"sequenceGeneratorCache\", \"permissionsCache\", \"partitionStatisticsCache\",\n+    private static final String [] cacheNames = new String[] {\"oidTdCache\", \"nameTdCache\", \"spsNameCache\", \"sequenceGeneratorCache\", \"permissionsCache\", \"partitionStatisticsCache\",\n             \"storedPreparedStatementCache\", \"conglomerateCache\", \"statementCache\", \"schemaCache\", \"aliasDescriptorCache\", \"roleCache\", \"defaultRoleCache\", \"roleGrantCache\",\n-            \"tokenCache\", \"propertyCache\", \"conglomerateDescriptorCache\", \"oldSchemaCache\"};\n+            \"tokenCache\", \"propertyCache\", \"conglomerateDescriptorCache\", \"oldSchemaCache\", \"catalogVersionCache\"};\n \n+    public static List<String> getCacheNames() {\n+        return Collections.unmodifiableList(Arrays.asList(cacheNames));\n+    }", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3OTg2NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460079865", "bodyText": "what's is SysIBMSchema and why do we search it if we can't find the table in the SystemSchema?", "author": "hatyo", "createdAt": "2020-07-24T14:15:40Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -7852,7 +7865,11 @@ public void faultInTabInfo(TabInfoImpl ti) throws StandardException{\n             // Just return in this case, so we don't get a null pointer\n             // exception.\n             if(td==null){\n-                return;\n+                // look up from SYSIBM schema\n+                td=getTableDescriptor(ti.getTableName(),getSysIBMSchemaDescriptor(),null);\n+                if ( td == null) {", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNzczOA==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467317738", "bodyText": "SYSIBM schema is a legacy system schema inherited from Derby. It is not very useful, but for completeness, splice should also search for this schema, and populate TabInfoImpl for sysibm.sysdummy1 table.", "author": "jyuanca", "createdAt": "2020-08-07T22:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3OTg2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4NDkzMA==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460084930", "bodyText": "hmm .. we always return an empty row here, why is that?", "author": "hatyo", "createdAt": "2020-07-24T14:23:28Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSSTATEMENTSRowFactory.java", "diffHunk": "@@ -352,6 +351,11 @@ public TupleDescriptor buildDescriptor(\n         return descriptor;\n     }\n \n+\tpublic ExecRow makeRow(boolean latestVersion, TupleDescriptor td, TupleDescriptor parent) throws StandardException\n+\t{\n+\t\treturn makeEmptyRow();\n+\t}", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSSTATEMENTSRowFactory.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSSTATEMENTSRowFactory.java\nindex e2a9dfe69e..f080dd9813 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSSTATEMENTSRowFactory.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/SYSSTATEMENTSRowFactory.java\n\n@@ -353,7 +346,10 @@ public class SYSSTATEMENTSRowFactory extends CatalogRowFactory\n \n \tpublic ExecRow makeRow(boolean latestVersion, TupleDescriptor td, TupleDescriptor parent) throws StandardException\n \t{\n-\t\treturn makeEmptyRow();\n+\t\tif (!(td instanceof SPSDescriptor))\n+\t\t\tthrow new RuntimeException(\"Unexpected TupleDescriptor \" + td.getClass().getName());\n+\n+\t\treturn makeSYSSTATEMENTSrow(latestVersion, (SPSDescriptor) td);\n \t}\n \n \tpublic ExecRow makeEmptyRow()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MjY4OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460092689", "bodyText": "maybe you should again after exiting the while loop that the table is enabled (and throw exception if it is not), because wait could've reached 2000 retries and the loop exited however the table is still not enabled yet.", "author": "hatyo", "createdAt": "2020-07-24T14:35:39Z", "path": "hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java", "diffHunk": "@@ -595,6 +595,45 @@ public boolean replicationEnabled(String tableName) throws IOException {\n         return false;\n     }\n \n+    @Override\n+    public void setCatalogVersion(long conglomerateNumber, String version) throws IOException {\n+\n+        TableName tn = tableInfoFactory.getTableInfo(Long.toString(conglomerateNumber));\n+        try {\n+            org.apache.hadoop.hbase.client.TableDescriptor td = admin.getDescriptor(tn);\n+            ((TableDescriptorBuilder.ModifyableTableDescriptor) td).setValue(SIConstants.CATALOG_VERSION_ATTR, version);\n+            boolean tableEnabled = admin.isTableEnabled(tn);\n+            if (tableEnabled) {\n+                admin.disableTable(tn);\n+            }\n+            admin.modifyTable(td);\n+        }\n+        finally {\n+            int wait = 0;\n+            if (tn != null && !admin.isTableEnabled(tn)) {\n+                admin.enableTable(tn);\n+                while (wait < 2000 && !admin.isTableEnabled(tn)) {\n+                    try {\n+                        Thread.sleep(100);\n+                        wait++;\n+                    } catch (InterruptedException e) {\n+                        throw new IOException(e);\n+                    }\n+                }", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxOTQ4OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467319489", "bodyText": "Good point!", "author": "jyuanca", "createdAt": "2020-08-07T22:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MjY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxOTU3MA==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467319570", "bodyText": "Good point!", "author": "jyuanca", "createdAt": "2020-08-07T22:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MjY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\nindex c03d48cb1f..5ea7ea6a65 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\n\n@@ -621,6 +621,9 @@ public class HBasePartitionAdmin implements PartitionAdmin{\n                     }\n                 }\n             }\n+            if (!admin.isTableEnabled(tn)) {\n+                throw new IOException(\"Table \" + tn.getNameAsString() + \" is not enabled\");\n+            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5Mzc0Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460093743", "bodyText": "I would throw, this could be misleading for users.", "author": "hatyo", "createdAt": "2020-07-24T14:37:26Z", "path": "mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java", "diffHunk": "@@ -101,6 +101,11 @@ public PartitionCreator withSplitKeys(byte[][] splitKeys) {\n             return this;\n         }\n \n+        @Override\n+        public PartitionCreator withCatalogVersion(String version) {\n+            //no-op", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMDY2Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467320666", "bodyText": "+1", "author": "jyuanca", "createdAt": "2020-08-07T23:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5Mzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "chunk": "diff --git a/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java b/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java\nindex 4603eb8676..3ffb57f0af 100644\n--- a/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java\n+++ b/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java\n\n@@ -103,8 +103,7 @@ public class MPartitionFactory implements PartitionFactory<Object>{\n \n         @Override\n         public PartitionCreator withCatalogVersion(String version) {\n-            //no-op\n-            return this;\n+            throw new UnsupportedOperationException(\"Operation not supported in mem storage engine\");\n         }\n         @Override\n         public Partition create() throws IOException{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NTExNQ==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460095115", "bodyText": "should be 1966 right?", "author": "hatyo", "createdAt": "2020-07-24T14:39:44Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java", "diffHunk": "@@ -85,6 +85,7 @@ else if(v1==v2)\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1959), new UpgradeScriptForTriggerMultipleStatements(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1962), new UpgradeScriptForAddDefaultToColumnViewInSYSVW(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1964), new UpgradeScriptForAliasToTableView(sdd,tc));\n+        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1965), new UpgradeScriptToAddCatalogVersion(sdd,tc));", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMDYwMw==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467320603", "bodyText": "I'll make it 1970", "author": "jyuanca", "createdAt": "2020-08-07T23:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NTExNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java\nindex b067e8cd12..aa64c8484c 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/SpliceCatalogUpgradeScripts.java\n\n@@ -58,34 +58,21 @@ public class SpliceCatalogUpgradeScripts{\n             }\n         };\n         scripts=new TreeMap<>(ddComparator);\n-        scripts.put(new Splice_DD_Version(sdd,1,0,0),new UpgradeScriptForFuji(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,1,1,1),new LassenUpgradeScript(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,6,0),new UpgradeScriptFor260(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,8,1), new UpgradeScriptForModifySchemaPermissionAndDefaultRole(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,8,0, 1812), new UpgradeScriptToCleanSysRoutinePerms(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,8,0, 1817), new UpgradeScriptForSysTokens(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,8,0, 1842), new UpgradeScriptForDroppedConglomerates(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,8,0, 1849), new UpgradeScriptToRemoveFKDependencyOnPrivileges(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,2,8,0, 1851), new UpgradeScriptToAddUseExtrapolationInSysColumns(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,2,8,0, 1901), new UpgradeScriptToRemoveUnusedBackupTables(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,2,8,0, 1909), new UpgradeScriptForReplication(sdd, tc));\n         scripts.put(new Splice_DD_Version(sdd,2,8,0, 1917), new UpgradeScriptForMultiTenancy(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,2,8,0, 1924), new UpgradeScriptToAddPermissionViewsForMultiTenancy(sdd,tc));\n \n-        // Two system procedures are moved, so we need to run base script to update all system procedures\n-        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1928), new UpgradeScriptBase(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1933), new UpgradeScriptToUpdateViewForSYSCONGLOMERATEINSCHEMAS(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1938), new UpgradeScriptForTriggerWhenClause(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1940), new UpgradeScriptForReplicationSystemTables(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1941), new UpgradeScriptForTableColumnViewInSYSIBM(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1948), new UpgradeScriptBase(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1948), new UpgradeScriptForAddDefaultToColumnViewInSYSIBM(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1953), new UpgradeScriptForRemoveUnusedIndexInSYSFILESTable(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1954), new UpgradeScriptToInvalidateStoredStatement(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1959), new UpgradeScriptForTriggerMultipleStatements(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1962), new UpgradeScriptForAddDefaultToColumnViewInSYSVW(sdd,tc));\n         scripts.put(new Splice_DD_Version(sdd,3,1,0, 1964), new UpgradeScriptForAliasToTableView(sdd,tc));\n-        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1965), new UpgradeScriptToAddCatalogVersion(sdd,tc));\n+        scripts.put(new Splice_DD_Version(sdd,3,1,0, 1970), new UpgradeScriptToAddCatalogVersion(sdd,tc));\n     }\n     public void run() throws StandardException{\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5Nzk3Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r460097977", "bodyText": "Or maybe:\nfor(String s : mc) {\n  managedCache.add(getNewMBeanProxy(mbsc.getSecond(), MANAGED_CACHE + s, ManagedCacheMBean.class));\n}", "author": "hatyo", "createdAt": "2020-07-24T14:44:26Z", "path": "splice_machine/src/main/java/com/splicemachine/hbase/jmx/JMXUtils.java", "diffHunk": "@@ -112,18 +112,17 @@ public static ObjectName getRegionServerStatistics() throws MalformedObjectNameE\n         }\n         return jmxThreadList;\n     }\n-    public static List<ManagedCacheMBean> getManagedCache(List<Pair<String,JMXConnector>> mbscArray, String [] mc) throws MalformedObjectNameException, IOException {\n+    public static List<ManagedCacheMBean> getManagedCache(List<Pair<String,JMXConnector>> mbscArray, List<String> mc) throws MalformedObjectNameException, IOException {\n         List<ManagedCacheMBean> managedCache =new ArrayList<>();\n         for (Pair<String,JMXConnector> mbsc: mbscArray) {\n-            for(int i = 0; i < mc.length; i++) {\n-                managedCache.add(getNewMBeanProxy(mbsc.getSecond(), MANAGED_CACHE + mc[i], ManagedCacheMBean.class));\n+            for(int i = 0; i < mc.size(); i++) {", "originalCommit": "883a987df38d6ea4351d0cc7243e1099700c5bab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMDcyOA==", "url": "https://github.com/splicemachine/spliceengine/pull/3817#discussion_r467320728", "bodyText": "+1", "author": "jyuanca", "createdAt": "2020-08-07T23:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5Nzk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/hbase/jmx/JMXUtils.java b/splice_machine/src/main/java/com/splicemachine/hbase/jmx/JMXUtils.java\nindex 8c305b72f9..b5086e3ae6 100644\n--- a/splice_machine/src/main/java/com/splicemachine/hbase/jmx/JMXUtils.java\n+++ b/splice_machine/src/main/java/com/splicemachine/hbase/jmx/JMXUtils.java\n\n@@ -115,8 +115,8 @@ public class JMXUtils {\n     public static List<ManagedCacheMBean> getManagedCache(List<Pair<String,JMXConnector>> mbscArray, List<String> mc) throws MalformedObjectNameException, IOException {\n         List<ManagedCacheMBean> managedCache =new ArrayList<>();\n         for (Pair<String,JMXConnector> mbsc: mbscArray) {\n-            for(int i = 0; i < mc.size(); i++) {\n-                managedCache.add(getNewMBeanProxy(mbsc.getSecond(), MANAGED_CACHE + mc.get(i), ManagedCacheMBean.class));\n+            for(String s : mc) {\n+                managedCache.add(getNewMBeanProxy(mbsc.getSecond(), MANAGED_CACHE + s, ManagedCacheMBean.class));\n             }\n         }\n         return managedCache;\n"}}, {"oid": "cbe358dd993f374392fa2d16c474a50bb4fa5da3", "url": "https://github.com/splicemachine/spliceengine/commit/cbe358dd993f374392fa2d16c474a50bb4fa5da3", "message": "address review comments", "committedDate": "2020-08-07T23:25:17Z", "type": "forcePushed"}, {"oid": "27334dc4d433622fc0dac7b1733e14b03d164fec", "url": "https://github.com/splicemachine/spliceengine/commit/27334dc4d433622fc0dac7b1733e14b03d164fec", "message": "fix startup", "committedDate": "2020-08-15T18:25:07Z", "type": "forcePushed"}, {"oid": "625159506ee2b4f857767736f74a88c533a3d1fc", "url": "https://github.com/splicemachine/spliceengine/commit/625159506ee2b4f857767736f74a88c533a3d1fc", "message": "fix startup", "committedDate": "2020-08-15T19:09:44Z", "type": "forcePushed"}, {"oid": "9dcd86645f7125fccb08ee419ac01e023621d19c", "url": "https://github.com/splicemachine/spliceengine/commit/9dcd86645f7125fccb08ee419ac01e023621d19c", "message": "DB-9745: add version number to dictionary tables", "committedDate": "2020-08-17T15:48:32Z", "type": "forcePushed"}, {"oid": "704a9efe6271cdd2f6b75eadbb1f6f71cfde84a3", "url": "https://github.com/splicemachine/spliceengine/commit/704a9efe6271cdd2f6b75eadbb1f6f71cfde84a3", "message": "DB-9745: add version number to dictionary tables", "committedDate": "2020-08-19T15:18:33Z", "type": "commit"}, {"oid": "704a9efe6271cdd2f6b75eadbb1f6f71cfde84a3", "url": "https://github.com/splicemachine/spliceengine/commit/704a9efe6271cdd2f6b75eadbb1f6f71cfde84a3", "message": "DB-9745: add version number to dictionary tables", "committedDate": "2020-08-19T15:18:33Z", "type": "forcePushed"}, {"oid": "16f1d8313035b9d4196072b0981441fa04d7d740", "url": "https://github.com/splicemachine/spliceengine/commit/16f1d8313035b9d4196072b0981441fa04d7d740", "message": "fix spotbugs warning", "committedDate": "2020-08-19T16:03:45Z", "type": "commit"}]}