{"pr_number": 4182, "pr_title": "DB-10230 Prioritize bringing metadata tables online after a failure", "pr_createdAt": "2020-09-23T21:10:00Z", "pr_url": "https://github.com/splicemachine/spliceengine/pull/4182", "timeline": [{"oid": "ba7931ab879253e1248c8692395dad7840b3fed3", "url": "https://github.com/splicemachine/spliceengine/commit/ba7931ab879253e1248c8692395dad7840b3fed3", "message": "DB-10230 Prioritize bringing metadata tables online after a failure", "committedDate": "2020-09-24T09:06:41Z", "type": "forcePushed"}, {"oid": "7295271066a3fc6dcae711ebe32dad096fa5bfc8", "url": "https://github.com/splicemachine/spliceengine/commit/7295271066a3fc6dcae711ebe32dad096fa5bfc8", "message": "DB-10230 Prioritize bringing metadata tables online after a failure", "committedDate": "2020-09-24T09:41:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MjY5Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494882697", "bodyText": "Address SE_NO_SERIALVERSIONID spotbugs", "author": "arnaud-splice", "createdAt": "2020-09-25T09:59:52Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericResultDescription.java", "diffHunk": "@@ -57,8 +58,7 @@\n  *\n  */\n public final class GenericResultDescription", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MTA2NA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r495871064", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-09-28T11:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MjY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericResultDescription.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericResultDescription.java\nindex c5755e12e3..802f1852d7 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericResultDescription.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/GenericResultDescription.java\n\n@@ -59,6 +60,7 @@ import java.util.Map;\n  */\n public final class GenericResultDescription\n \t\timplements ResultDescription, Formatable, Serializable {\n+\tstatic final long serialVersionUID = 1L; //assign a long value\n \n \t/********************************************************\n \t**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MzEyNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494883124", "bodyText": "Use Constant enum instead.", "author": "arnaud-splice", "createdAt": "2020-09-25T10:00:40Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -6693,8 +6693,8 @@ public void makeCatalog(TabInfoImpl ti,SchemaDescriptor sd,\n                         tc,\n                         ti.getCatalogRowFactory().makeEmptyRowForLatestVersion(),\n                         heapProperties,\n-                        columnOrder\n-                )\n+                        columnOrder,\n+                        100)", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxMjYzNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r495212634", "bodyText": "replace it with HConstants.ADMIN_QOS", "author": "jyuanca", "createdAt": "2020-09-25T20:21:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MzEyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MDc1Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r495870757", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-09-28T11:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MzEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\nindex 555e615b3e..da44b7ef05 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\n\n@@ -6694,7 +6695,7 @@ public abstract class DataDictionaryImpl extends BaseDataDictionary{\n                         ti.getCatalogRowFactory().makeEmptyRowForLatestVersion(),\n                         heapProperties,\n                         columnOrder,\n-                        100)\n+                        Conglomerate.Priority.HIGH)\n         );\n \n         // bootstrap indexes on core tables before bootstrapping the tables themselves\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4MzI2Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494883262", "bodyText": "use constant enum instead.\nAlso, the //not temporary comment refers to TransactionController.IS_DEFAULT, which becomes less apparent after your change. I suggest bringing the priority to the next line.", "author": "arnaud-splice", "createdAt": "2020-09-25T10:00:55Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -7134,7 +7135,7 @@ protected ConglomerateDescriptor bootstrapOneIndex(SchemaDescriptor sd,\n                 null, //default sort order\n                 null, //default collation id's for collumns in all system congloms\n                 indexProperties, // default properties\n-                TransactionController.IS_DEFAULT); // not temporary\n+                TransactionController.IS_DEFAULT, 100); // not temporary", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\nindex 555e615b3e..da44b7ef05 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\n\n@@ -7135,7 +7136,8 @@ public abstract class DataDictionaryImpl extends BaseDataDictionary{\n                 null, //default sort order\n                 null, //default collation id's for collumns in all system congloms\n                 indexProperties, // default properties\n-                TransactionController.IS_DEFAULT, 100); // not temporary\n+                TransactionController.IS_DEFAULT,  // not temporary\n+                Conglomerate.Priority.HIGH);\n \n         conglomerateDescriptor=\n                 ddg.newConglomerateDescriptor(conglomId,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDE2Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494884167", "bodyText": "Same comment about // not temporary", "author": "arnaud-splice", "createdAt": "2020-09-25T10:02:45Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -7296,7 +7298,7 @@ protected long createConglomerate(TransactionController tc,\n                 columnOrdering,\n                 null, // default collation ids\n                 properties, // default properties\n-                TransactionController.IS_DEFAULT); // not temporary\n+                TransactionController.IS_DEFAULT, priority); // not temporary", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MDg0MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r495870841", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-09-28T11:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDE2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDI3Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494884276", "bodyText": "Use a constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:02:57Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java", "diffHunk": "@@ -10635,7 +10637,8 @@ public void run(){\n                 heapProperties.setProperty(\"tableDisplayName\", ti.getTableName());\n                 heapProperties.setProperty(\"catalogVersion\", version);\n                 ExecRow rowTemplate=ti.getCatalogRowFactory().makeEmptyRowForLatestVersion();\n-                long conglomerate=createConglomerate(tc,rowTemplate,heapProperties);\n+\n+                long conglomerate=createConglomerate(tc,rowTemplate,heapProperties, 100);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\nindex 555e615b3e..da44b7ef05 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/catalog/DataDictionaryImpl.java\n\n@@ -10638,7 +10642,7 @@ public abstract class DataDictionaryImpl extends BaseDataDictionary{\n                 heapProperties.setProperty(\"catalogVersion\", version);\n                 ExecRow rowTemplate=ti.getCatalogRowFactory().makeEmptyRowForLatestVersion();\n \n-                long conglomerate=createConglomerate(tc,rowTemplate,heapProperties, 100);\n+                long conglomerate=createConglomerate(tc,rowTemplate,heapProperties, Conglomerate.Priority.HIGH);\n                 ti.setHeapConglomerate(conglomerate);\n             }catch(Exception e){\n                 e.printStackTrace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDM1OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494884359", "bodyText": "Use a constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:03:05Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java", "diffHunk": "@@ -1640,7 +1640,7 @@ private TableDescriptor cleanupTempTableOnCommitOrRollback(TableDescriptor td,\n                         td.getColumnCollationIds(),  // same ids as old conglomerate\n                         null, // properties\n                         (TransactionController.IS_TEMPORARY|\n-                                TransactionController.IS_KEPT));\n+                                TransactionController.IS_KEPT), 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java\nindex 65d53e65ee..8c8badac69 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/conn/GenericLanguageConnectionContext.java\n\n@@ -1640,7 +1641,7 @@ public class GenericLanguageConnectionContext extends ContextImpl implements Lan\n                         td.getColumnCollationIds(),  // same ids as old conglomerate\n                         null, // properties\n                         (TransactionController.IS_TEMPORARY|\n-                                TransactionController.IS_KEPT), 0);\n+                                TransactionController.IS_KEPT), Conglomerate.Priority.NORMAL);\n \n         long cid=td.getHeapConglomerateId();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NDcyMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494884722", "bodyText": "Use constant (also later in this file)", "author": "arnaud-splice", "createdAt": "2020-09-25T10:03:51Z", "path": "db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TemporaryRowHolderImpl.java", "diffHunk": "@@ -282,7 +280,7 @@ public void insert(ExecRow inputRow)\n                     collation_ids,\n                     properties,\n                     TransactionController.IS_TEMPORARY | \n-                    TransactionController.IS_KEPT);\n+                    TransactionController.IS_KEPT, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TemporaryRowHolderImpl.java b/db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TemporaryRowHolderImpl.java\nindex d1b4a9e3f4..5c965b2743 100644\n--- a/db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TemporaryRowHolderImpl.java\n+++ b/db-engine/src/main/java/com/splicemachine/db/impl/sql/execute/TemporaryRowHolderImpl.java\n\n@@ -280,7 +281,7 @@ public class TemporaryRowHolderImpl implements TemporaryRowHolder\n                     collation_ids,\n                     properties,\n                     TransactionController.IS_TEMPORARY | \n-                    TransactionController.IS_KEPT, 0);\n+                    TransactionController.IS_KEPT, Conglomerate.Priority.NORMAL);\n \n \t\t\tconglomCreated = true;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NTQ4Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494885483", "bodyText": "Same as above.", "author": "arnaud-splice", "createdAt": "2020-09-25T10:05:13Z", "path": "db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java", "diffHunk": "@@ -221,7 +221,7 @@ void XATest_1(\n \t\t\t\tnull,  \t//column sort order - not required for heap\n \t\t\t\tnull,  \t//default collation\n                 null,         // default properties\n-                TransactionController.IS_DEFAULT);       // not temporary\n+                TransactionController.IS_DEFAULT, 0);       // not temporary", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java b/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java\nindex dcc75f091b..6767c72872 100644\n--- a/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java\n+++ b/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java\n\n@@ -212,17 +213,10 @@ public class T_XA extends T_Generic\n                 global_id,\n                 branch_id);\n \n-\t\t// Create a heap conglomerate.\n+        // Create a heap conglomerate.\n         T_AccessRow template_row = new T_AccessRow(1);\n-\t\tlong conglomid = \n-            xa_tc.createConglomerate(false,\n-                \"heap\",       // create a heap conglomerate\n-                template_row.getRowArray(), // 1 column template.\n-\t\t\t\tnull,  \t//column sort order - not required for heap\n-\t\t\t\tnull,  \t//default collation\n-                null,         // default properties\n-                TransactionController.IS_DEFAULT, 0);       // not temporary\n \n+        long conglomid = CreateHeapConglomerate(xa_tc, template_row);\n \n         // commit an idle transaction - using onePhase optimization.\n         commit_method.commit(true, 42, global_id, branch_id, xa_tc);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NjEwMQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494886101", "bodyText": "Remove import", "author": "arnaud-splice", "createdAt": "2020-09-25T10:06:28Z", "path": "hbase_sql/src/test/java/com/splicemachine/derby/utils/VacuumIT.java", "diffHunk": "@@ -23,6 +23,7 @@\n import com.splicemachine.si.constants.SIConstants;\n import com.splicemachine.test.LongerThanTwoMinutes;\n import com.splicemachine.test.SerialTest;\n+import org.apache.commons.lang.ArrayUtils;", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NjY0Mg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494886642", "bodyText": "Should we really use such a high number? If I understand correctly, hbase's own system tables use 200, so I don't think we should go above that.", "author": "arnaud-splice", "createdAt": "2020-09-25T10:07:37Z", "path": "hbase_sql/src/main/java/com/splicemachine/lifecycle/RegionServerLifecycle.java", "diffHunk": "@@ -64,7 +64,7 @@ public void distributedStart() throws IOException{\n                             .newBuilder(spliceInit)\n                             .setColumnFamily(\n                                     ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(\"FOO\")).build()\n-                            ).build();\n+                            ).setPriority(1000).build();", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIwNzQyMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r495207422", "bodyText": "SPLICE_INIT table should not be created, so no need to change its priority.", "author": "jyuanca", "createdAt": "2020-09-25T20:08:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4NjY0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eb5b08e33be8fdadbf3167717adf979d2536b2af", "chunk": "diff --git a/hbase_sql/src/main/java/com/splicemachine/lifecycle/RegionServerLifecycle.java b/hbase_sql/src/main/java/com/splicemachine/lifecycle/RegionServerLifecycle.java\nindex 47955b95ad..24c4b5a604 100644\n--- a/hbase_sql/src/main/java/com/splicemachine/lifecycle/RegionServerLifecycle.java\n+++ b/hbase_sql/src/main/java/com/splicemachine/lifecycle/RegionServerLifecycle.java\n\n@@ -64,7 +64,7 @@ public class RegionServerLifecycle implements DistributedDerbyStartup{\n                             .newBuilder(spliceInit)\n                             .setColumnFamily(\n                                     ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(\"FOO\")).build()\n-                            ).setPriority(1000).build();\n+                            ).build();\n \n                     // Create the special \"SPLICE_INIT\" table which triggers the creation of the SpliceMasterObserver and ultimately\n                     // triggers the creation of the \"SPLICE_*\" HBase tables.  This is an asynchronous call and so we \"loop\" via a\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4Njc0Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494886747", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:07:49Z", "path": "hbase_storage/src/main/java/com/splicemachine/access/hbase/HBaseConnectionFactory.java", "diffHunk": "@@ -151,12 +151,14 @@ public ServerName getMasterServer() throws SQLException{\n \n     public HTableDescriptor generateDefaultSIGovernedTable(String tableName){\n         HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(namespace,tableName));\n+        desc.setPriority(110);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBaseConnectionFactory.java b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBaseConnectionFactory.java\nindex d7eeee1304..4f40b21ebf 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBaseConnectionFactory.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBaseConnectionFactory.java\n\n@@ -149,16 +149,18 @@ public class HBaseConnectionFactory{\n     //        admin.deleteTable(id);\n     //    }\n \n+    private final int TABLE_PRIORITY = HConstants.HIGH_QOS;\n+\n     public HTableDescriptor generateDefaultSIGovernedTable(String tableName){\n         HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(namespace,tableName));\n-        desc.setPriority(110);\n+        desc.setPriority(TABLE_PRIORITY);\n         desc.addFamily(createDataFamily());\n         return desc;\n     }\n \n     public HTableDescriptor generateNonSITable(String tableName){\n         HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(namespace,tableName));\n-        desc.setPriority(110);\n+        desc.setPriority(TABLE_PRIORITY);\n         desc.addFamily(createDataFamily());\n         return desc;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODA5MQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494888091", "bodyText": "Define a separate withPriority instead of conflating name and priority setters in one method.", "author": "arnaud-splice", "createdAt": "2020-09-25T10:10:28Z", "path": "hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java", "diffHunk": "@@ -54,9 +54,15 @@ public HPartitionCreator(HBaseTableInfoFactory tableInfoFactory,Connection conne\n \n     @Override\n     public PartitionCreator withName(String name){\n+        return withName(name, 0);\n+    }\n+\n+    @Override\n+    public PartitionCreator withName(String name, int priority){", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java\nindex da8bb112ac..c8b7b5bf04 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java\n\n@@ -54,15 +56,25 @@ public class HPartitionCreator implements PartitionCreator{\n \n     @Override\n     public PartitionCreator withName(String name){\n-        return withName(name, 0);\n+        return withName(name, Conglomerate.Priority.NORMAL);\n+    }\n+\n+    public static int GetHBasePriority(Conglomerate.Priority priority)\n+    {\n+        switch(priority){\n+            case NORMAL: return HConstants.NORMAL_QOS;\n+            case HIGH: return HConstants.ADMIN_QOS;\n+            case VERY_HIGH:   return HConstants.HIGH_QOS;\n+            default:     throw new RuntimeException(\"Not implemented priority \" + priority);\n+        }\n     }\n \n     @Override\n-    public PartitionCreator withName(String name, int priority){\n+    public PartitionCreator withName(String name, Conglomerate.Priority priority){\n         assert tableName == null;\n         tableName = tableInfoFactory.getTableInfo(name);\n         descriptorBuilder = TableDescriptorBuilder.newBuilder(tableName);\n-        descriptorBuilder.setPriority(priority);\n+        descriptorBuilder.setPriority(GetHBasePriority(priority));\n         return this;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODIzNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494888234", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:10:43Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java", "diffHunk": "@@ -39,12 +39,12 @@ protected void upgradeSystemTables() throws StandardException {\n             PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n             if (!admin.tableExists(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME).create();\n+                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME, 100).create();", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java\nindex c9edd05a07..4c97ad0bf9 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java\n\n@@ -39,12 +40,14 @@ public class UpgradeScriptForReplication extends UpgradeScriptBase {\n             PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n             if (!admin.tableExists(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME, 100).create();\n+                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME,\n+                        Conglomerate.Priority.HIGH).create();\n             }\n \n             if (!admin.tableExists(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME, 100).create();\n+                admin.newPartition().withName(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME,\n+                        Conglomerate.Priority.HIGH).create();\n             }\n         } catch (IOException e) {\n             LOG.warn(\"Exception while creating while creating replication tables\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODMwNA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494888304", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:10:50Z", "path": "mem_sql/src/main/java/com/splicemachine/derby/lifecycle/PipelinePartitionCreator.java", "diffHunk": "@@ -42,6 +42,10 @@ public PipelinePartitionCreator(PartitionCreator baseCreator){\n     }\n \n     public PartitionCreator withName(String name){\n+        return withName(name, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb5b08e33be8fdadbf3167717adf979d2536b2af", "chunk": "diff --git a/mem_sql/src/main/java/com/splicemachine/derby/lifecycle/PipelinePartitionCreator.java b/mem_sql/src/main/java/com/splicemachine/derby/lifecycle/PipelinePartitionCreator.java\nindex 5d6b6ba4ee..1c07850d2d 100644\n--- a/mem_sql/src/main/java/com/splicemachine/derby/lifecycle/PipelinePartitionCreator.java\n+++ b/mem_sql/src/main/java/com/splicemachine/derby/lifecycle/PipelinePartitionCreator.java\n\n@@ -42,10 +43,11 @@ public class PipelinePartitionCreator implements PartitionCreator{\n     }\n \n     public PartitionCreator withName(String name){\n-        return withName(name, 0);\n+        return withName(name, Conglomerate.Priority.NORMAL);\n     }\n \n-    public PartitionCreator withName(String name, int priority){\n+    public PartitionCreator withName(String name, Conglomerate.Priority priority){\n+        // mem can ignore priority\n         baseCreator=baseCreator.withName(name);\n         try{\n             //noinspection ResultOfMethodCallIgnored\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg4ODM0MA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494888340", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:10:56Z", "path": "mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java", "diffHunk": "@@ -67,6 +67,11 @@ public PartitionAdmin getAdmin() throws IOException{\n \n         @Override\n         public PartitionCreator withName(String name){\n+            return withName(name, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java b/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java\nindex 32cc3a3a20..f5088862f9 100644\n--- a/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java\n+++ b/mem_storage/src/main/java/com/splicemachine/storage/MPartitionFactory.java\n\n@@ -67,11 +67,12 @@ public class MPartitionFactory implements PartitionFactory<Object>{\n \n         @Override\n         public PartitionCreator withName(String name){\n-            return withName(name, 0);\n+            return withName(name, Priority.NORMAL);\n         }\n \n         @Override\n-        public PartitionCreator withName(String name, int priority){\n+        public PartitionCreator withName(String name, Priority priority){\n+            // mem can ignore priority\n             this.name=name;\n             return this;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MDM1Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494890356", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:14:56Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java", "diffHunk": "@@ -306,7 +309,7 @@ private void createConglomerate(ExecRow templateRow) throws StandardException{\n                  null, //collation_ids\n                  properties,\n                  TransactionController.IS_TEMPORARY |\n-                 TransactionController.IS_KEPT);\n+                 TransactionController.IS_KEPT, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java\nindex e3f9065287..55c83737ad 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/TriggerRowHolderImpl.java\n\n@@ -309,7 +310,7 @@ public class TriggerRowHolderImpl implements TemporaryRowHolder, Externalizable\n                  null, //collation_ids\n                  properties,\n                  TransactionController.IS_TEMPORARY |\n-                 TransactionController.IS_KEPT, 0);\n+                 TransactionController.IS_KEPT, Conglomerate.Priority.NORMAL);\n \n             LOG.trace(format(\"Created temporary conglomerate splice:%d\", CID));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTAyMA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494891020", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:16:12Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java", "diffHunk": "@@ -412,7 +405,7 @@ private void executeDropPrimaryKey(Activation activation,\n             properties, // properties\n             tableType == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE ?\n                 (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :\n-                TransactionController.IS_DEFAULT);\n+                TransactionController.IS_DEFAULT, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java\nindex 6f548147ef..10f5fbd98f 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/AlterTableConstantOperation.java\n\n@@ -405,7 +406,7 @@ public class AlterTableConstantOperation extends IndexConstantOperation {\n             properties, // properties\n             tableType == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE ?\n                 (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :\n-                TransactionController.IS_DEFAULT, 0);\n+                TransactionController.IS_DEFAULT, Conglomerate.Priority.NORMAL);\n \n         // follow thru with remaining constraint actions, create, store, etc.\n         constraint.executeConstantAction(activation);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTEwOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494891109", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:16:25Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java", "diffHunk": "@@ -850,7 +850,7 @@ private void createAndPopulateIndex(Activation activation,\n              */\n             conglomId = tc.createConglomerate(td.isExternal(),indexType, indexTemplateRow.getRowArray(),\n                     getColumnOrderings(isAscending.length), indexRowGenerator.getColumnCollationIds(\n-                            td.getColumnDescriptorList()), indexProperties, TransactionController.IS_DEFAULT, splitKeys);\n+                            td.getColumnDescriptorList()), indexProperties, TransactionController.IS_DEFAULT, splitKeys, 0 /* priority = 0 */);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java\nindex b4cb103215..7d2b7c804f 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateIndexConstantOperation.java\n\n@@ -850,7 +851,8 @@ public class CreateIndexConstantOperation extends IndexConstantOperation impleme\n              */\n             conglomId = tc.createConglomerate(td.isExternal(),indexType, indexTemplateRow.getRowArray(),\n                     getColumnOrderings(isAscending.length), indexRowGenerator.getColumnCollationIds(\n-                            td.getColumnDescriptorList()), indexProperties, TransactionController.IS_DEFAULT, splitKeys, 0 /* priority = 0 */);\n+                            td.getColumnDescriptorList()), indexProperties, TransactionController.IS_DEFAULT,\n+                    splitKeys, Conglomerate.Priority.NORMAL);\n \n             PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n             // Enable replication for index if that's enables for base table\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTE3OA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494891178", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:16:36Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java", "diffHunk": "@@ -315,7 +315,7 @@ protected void createTable(Activation activation) throws StandardException {\n                 tableType == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE ?\n                         (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :\n                         TransactionController.IS_DEFAULT,\n-                splitKeys);\n+                splitKeys, 0 /* priority = 0 */ );", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java\nindex af09609831..582f4fc170 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/CreateTableConstantOperation.java\n\n@@ -315,7 +316,7 @@ public class CreateTableConstantOperation extends DDLConstantOperation {\n                 tableType == TableDescriptor.GLOBAL_TEMPORARY_TABLE_TYPE ?\n                         (TransactionController.IS_TEMPORARY | TransactionController.IS_KEPT) :\n                         TransactionController.IS_DEFAULT,\n-                splitKeys, 0 /* priority = 0 */ );\n+                splitKeys, Conglomerate.Priority.NORMAL);\n         SchemaDescriptor sd = DDLConstantOperation.getSchemaDescriptorForCreate(dd, activation, schemaName);\n \n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTI0Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494891247", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:16:43Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java", "diffHunk": "@@ -190,7 +190,7 @@ private void truncateTable(TableDescriptor td, Activation activation) throws Sta\n                         columnOrdering, //column sort order - not required for heap\n                         td.getColumnCollationIds(),\n                         properties,\n-                        TransactionController.IS_DEFAULT);\n+                        TransactionController.IS_DEFAULT, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java\nindex c79f7ad249..eb6de46b46 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/execute/actions/TruncateTableConstantOperation.java\n\n@@ -190,7 +191,7 @@ public class TruncateTableConstantOperation extends AlterTableConstantOperation{\n                         columnOrdering, //column sort order - not required for heap\n                         td.getColumnCollationIds(),\n                         properties,\n-                        TransactionController.IS_DEFAULT, 0);\n+                        TransactionController.IS_DEFAULT, Conglomerate.Priority.NORMAL);\n \n \t\t    /* Set up index info to perform truncate on them*/\n         int numIndexes = getAffectedIndexes(td);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTI5Nw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494891297", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:16:50Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java", "diffHunk": "@@ -94,7 +94,7 @@ public PropertyConglomerate(TransactionController tc, boolean create, Properties\n                     null,\n \t\t\t\t\t\tnull, // use default collation for property conglom.\n                     conglomProperties, \n-                    TransactionController.IS_DEFAULT);\n+                    TransactionController.IS_DEFAULT, 100);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java\nindex f9d4861096..ca8d49160d 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/PropertyConglomerate.java\n\n@@ -94,7 +95,7 @@ public class PropertyConglomerate {\n                     null,\n \t\t\t\t\t\tnull, // use default collation for property conglom.\n                     conglomProperties, \n-                    TransactionController.IS_DEFAULT, 100);\n+                    TransactionController.IS_DEFAULT, Conglomerate.Priority.HIGH);\n \n \t\t\t//\n \t\t\t// IMPORTANT: Hey, you!  Yeah, you!  Before you think about adding another \"service\" property default here,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5MTM2OQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r494891369", "bodyText": "Use constant", "author": "arnaud-splice", "createdAt": "2020-09-25T10:17:00Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java", "diffHunk": "@@ -616,7 +617,7 @@ public long recreateAndLoadConglomerate(boolean isExternal, String implementatio\n         // RESOLVE: this create the conglom LOGGED, this is slower than\n         // necessary although still correct.\n         long conglomId = createConglomerate(isExternal,implementation, template,\n-                columnOrder, collationIds, properties, temporaryFlag);\n+                columnOrder, collationIds, properties, temporaryFlag, 0);", "originalCommit": "225eca6056527ca6aeb3b526a7e478ce8dea6cba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d66d9af371d7f58f8012666ea18b295c82176077", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java\nindex ae89d96243..1b1082dbb0 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/SpliceTransactionManager.java\n\n@@ -617,7 +618,7 @@ public class SpliceTransactionManager implements XATransactionController,\n         // RESOLVE: this create the conglom LOGGED, this is slower than\n         // necessary although still correct.\n         long conglomId = createConglomerate(isExternal,implementation, template,\n-                columnOrder, collationIds, properties, temporaryFlag, 0);\n+                columnOrder, collationIds, properties, temporaryFlag, Conglomerate.Priority.NORMAL);\n \n         long rows_loaded = loadConglomerate(conglomId, true, // conglom is being\n                 // created\n"}}, {"oid": "d66d9af371d7f58f8012666ea18b295c82176077", "url": "https://github.com/splicemachine/spliceengine/commit/d66d9af371d7f58f8012666ea18b295c82176077", "message": "DB-10230 code review 1: use constants", "committedDate": "2020-09-28T11:35:25Z", "type": "forcePushed"}, {"oid": "ed0d72d11cc46a8ad7ebbf9e0425ef28a9856dc5", "url": "https://github.com/splicemachine/spliceengine/commit/ed0d72d11cc46a8ad7ebbf9e0425ef28a9856dc5", "message": "DB-10230 code review 1: use constants", "committedDate": "2020-09-28T11:35:57Z", "type": "forcePushed"}, {"oid": "eb5b08e33be8fdadbf3167717adf979d2536b2af", "url": "https://github.com/splicemachine/spliceengine/commit/eb5b08e33be8fdadbf3167717adf979d2536b2af", "message": "DB-10230 code review 1: use constants", "committedDate": "2020-09-28T14:23:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3MDY3NQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r496570675", "bodyText": "Please use first lower case for method names", "author": "dgomezferro", "createdAt": "2020-09-29T09:24:22Z", "path": "db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java", "diffHunk": "@@ -266,6 +260,17 @@ void XATest_1(\n         REPORT(\"(XATest_1) finishing\");\n     }\n \n+    private long CreateHeapConglomerate(TransactionController tc, T_AccessRow template_row) throws StandardException {", "originalCommit": "eb5b08e33be8fdadbf3167717adf979d2536b2af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzOTQxMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r496639412", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-09-29T11:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3MDY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "fdfa2afedbc9b83fa9e38684fe2232db12bcbf3b", "chunk": "diff --git a/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java b/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java\nindex 6767c72872..c4b9374e27 100644\n--- a/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java\n+++ b/db-testing/src/test/java/com/splicemachine/dbTesting/unitTests/store/T_XA.java\n\n@@ -260,7 +260,7 @@ public class T_XA extends T_Generic\n         REPORT(\"(XATest_1) finishing\");\n     }\n \n-    private long CreateHeapConglomerate(TransactionController tc, T_AccessRow template_row) throws StandardException {\n+    private long createHeapConglomerate(TransactionController tc, T_AccessRow template_row) throws StandardException {\n         return tc.createConglomerate(false,\n                 \"heap\", // create a heap conglomerate\n                 template_row.getRowArray(), // 1 column template.\n"}}, {"oid": "fdfa2afedbc9b83fa9e38684fe2232db12bcbf3b", "url": "https://github.com/splicemachine/spliceengine/commit/fdfa2afedbc9b83fa9e38684fe2232db12bcbf3b", "message": "[WIP] DB-10230 code review 2: upgrade script", "committedDate": "2020-09-29T09:37:25Z", "type": "forcePushed"}, {"oid": "5057785e6c1ccf338fd904e048a887e973e76366", "url": "https://github.com/splicemachine/spliceengine/commit/5057785e6c1ccf338fd904e048a887e973e76366", "message": "[WIP] DB-10230 code review 2: upgrade script", "committedDate": "2020-09-29T09:38:53Z", "type": "forcePushed"}, {"oid": "d49aa3c9e2df21d09f19ab00dc240eb336628f3d", "url": "https://github.com/splicemachine/spliceengine/commit/d49aa3c9e2df21d09f19ab00dc240eb336628f3d", "message": "[WIP] DB-10230 code review 2: upgrade script", "committedDate": "2020-09-29T11:33:20Z", "type": "forcePushed"}, {"oid": "21a2d6343ba867e3dd0a8c9e1551c037bf131266", "url": "https://github.com/splicemachine/spliceengine/commit/21a2d6343ba867e3dd0a8c9e1551c037bf131266", "message": "[WIP] DB-10230 code review 2: upgrade script", "committedDate": "2020-09-29T14:52:49Z", "type": "forcePushed"}, {"oid": "71ec0bdc926efd0f28b2393e28b0d526b917ebe2", "url": "https://github.com/splicemachine/spliceengine/commit/71ec0bdc926efd0f28b2393e28b0d526b917ebe2", "message": "[WIP] DB-10230 code review 2: upgrade script", "committedDate": "2020-09-29T15:38:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwMjQ3Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497102476", "bodyText": "The change are not necessary, because priority will be bumped up in UpgradeScriptForTablePriorities", "author": "jyuanca", "createdAt": "2020-09-29T22:41:00Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java", "diffHunk": "@@ -39,12 +40,14 @@ protected void upgradeSystemTables() throws StandardException {\n             PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n             if (!admin.tableExists(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME).create();\n+                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME,\n+                        Conglomerate.Priority.HIGH).create();\n             }\n \n             if (!admin.tableExists(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME).create();\n+                admin.newPartition().withName(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME,\n+                        Conglomerate.Priority.HIGH).create();\n             }\n         } catch (IOException e) {\n             LOG.warn(\"Exception while creating while creating replication tables\", e);", "originalCommit": "71ec0bdc926efd0f28b2393e28b0d526b917ebe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI2Mjk1Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497262956", "bodyText": "when we have to change the priority of a table, we have to 1. disable the table 2. change priority 3. re-enable the table. That process of enable + disable takes about 1s per table, however when we set the table priority already when creating, it is 0ms. So doing it like this is faster. The actual check if a priority is correct or needs upgrade is very fast.", "author": "martinrupp", "createdAt": "2020-09-30T06:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzEwMjQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2e47cb10387c1b64bfce399f41bac4251e671d64", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java\nindex 4c97ad0bf9..c9edd05a07 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/upgrade/UpgradeScriptForReplication.java\n\n@@ -40,14 +39,12 @@ public class UpgradeScriptForReplication extends UpgradeScriptBase {\n             PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n             if (!admin.tableExists(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME,\n-                        Conglomerate.Priority.HIGH).create();\n+                admin.newPartition().withName(HBaseConfiguration.MASTER_SNAPSHOTS_TABLE_NAME, 100).create();\n             }\n \n             if (!admin.tableExists(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME)) {\n                 LOG.info(\"Creating \" + HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME);\n-                admin.newPartition().withName(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME,\n-                        Conglomerate.Priority.HIGH).create();\n+                admin.newPartition().withName(HBaseConfiguration.REPLICA_REPLICATION_PROGRESS_TABLE_NAME, 100).create();\n             }\n         } catch (IOException e) {\n             LOG.warn(\"Exception while creating while creating replication tables\", e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1MzIxMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497153212", "bodyText": "Try not to use deprecated HTableDescripor", "author": "jyuanca", "createdAt": "2020-09-29T23:50:25Z", "path": "hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java", "diffHunk": "@@ -720,4 +724,65 @@ private UserPermission getPermission(List<UserPermission> permissions, String us\n         }\n         return null;\n     }\n+\n+    static public int getPriorityShouldHave(HTableDescriptor td)\n+    {\n+        String s = td.getValue(\"tableDisplayName\");\n+        if( s == null ) {\n+            return HConstants.HIGH_QOS;\n+        }\n+        else {\n+            if (s.startsWith(\"SYS\") || s.startsWith(\"splice:\") || s.equals(\"MON_GET_CONNECTION\")) {\n+                return HConstants.ADMIN_QOS;\n+            } else {\n+                return HConstants.NORMAL_QOS;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int upgradeTablePriorities() throws Exception {\n+        return upgradeTablePriorities(admin);\n+    }\n+\n+    public static int upgradeTablePriorities(Admin admin) throws Exception\n+    {\n+        final int NUM_THREADS = 10;\n+        ExecutorService executor = null;\n+        try {\n+            HTableDescriptor[] tableDescriptors = admin.listTables();\n+", "originalCommit": "71ec0bdc926efd0f28b2393e28b0d526b917ebe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMjc1Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497602753", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-09-30T15:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE1MzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "5907b48e4e07eba02078cf13f8a67780b057118f", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\nindex 5385df4471..8313dc5216 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\n\n@@ -740,29 +740,51 @@ public class HBasePartitionAdmin implements PartitionAdmin{\n         }\n     }\n \n-    @Override\n-    public int upgradeTablePriorities() throws Exception {\n-        return upgradeTablePriorities(admin);\n+    static public int getPriorityShouldHave(org.apache.hadoop.hbase.client.TableDescriptor td)\n+    {\n+        String s = td.getValue(\"tableDisplayName\");\n+        if( s == null ) {\n+            return HConstants.HIGH_QOS;\n+        }\n+        else {\n+            if (s.startsWith(\"SYS\") || s.startsWith(\"splice:\") || s.equals(\"MON_GET_CONNECTION\")) {\n+                return HConstants.ADMIN_QOS;\n+            } else {\n+                return HConstants.NORMAL_QOS;\n+            }\n+        }\n+    }\n+    public static void setHTablePriority(Admin admin, TableName tn,\n+                                         org.apache.hadoop.hbase.client.TableDescriptor td,\n+                                         int priority) throws IOException {\n+        boolean tableEnabled = admin.isTableEnabled(tn);\n+        if (tableEnabled) {\n+            admin.disableTable(tn);\n+        }\n+        ((TableDescriptorBuilder.ModifyableTableDescriptor) td).setPriority(priority);\n+        admin.modifyTable(td);\n+        admin.enableTable(tn);\n     }\n \n-    public static int upgradeTablePriorities(Admin admin) throws Exception\n+    public static int upgradeTablePrioritiesFromList(Admin admin,\n+                                                     List<org.apache.hadoop.hbase.client.TableDescriptor> tableDescriptors)\n+            throws Exception\n     {\n         final int NUM_THREADS = 10;\n         ExecutorService executor = null;\n         try {\n-            HTableDescriptor[] tableDescriptors = admin.listTables();\n \n-            List<Callable<Void>> upgradeTasks = Arrays.stream(tableDescriptors)\n+            List<Callable<Void>> upgradeTasks = tableDescriptors.stream()\n                     .filter( td -> td.getPriority() != getPriorityShouldHave(td))\n                     .map( td -> (Callable<Void>) () -> {\n-                        setHTablePriority(admin, td, getPriorityShouldHave(td));\n+                        setHTablePriority(admin, td.getTableName(), td, getPriorityShouldHave(td));\n                         return null;\n                     })\n                     .collect(Collectors.toList());\n             executor = Executors.newFixedThreadPool( NUM_THREADS );\n             executor.invokeAll( upgradeTasks );\n             return upgradeTasks.size();\n-        } catch (IOException | InterruptedException e) {\n+        } catch (InterruptedException e) {\n             throw e;\n         }\n         finally\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MTE0Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497161143", "bodyText": "We only need to set priority for splice system tables, so no need to check for all tables in HBase, especially when there are 100K+ tables on the cluster. It will take a while to read all the table descriptors.\nYou can get all tables and indexes in schema SYS, SYSIBM, and SYSIBMADMIN are available at DataDicitonaryImpl.coreInfo and DataDicitonaryImpl.noncoreInfo. Other important tables are HBaseBackupUtils.spliceSystemTables. Only processing these tables can make upgrade time independent of cluster size. An example to add a property value to table descriptor is UpgradeScriptToAddCatalogVersion.", "author": "jyuanca", "createdAt": "2020-09-30T00:02:00Z", "path": "hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java", "diffHunk": "@@ -720,4 +724,65 @@ private UserPermission getPermission(List<UserPermission> permissions, String us\n         }\n         return null;\n     }\n+\n+    static public int getPriorityShouldHave(HTableDescriptor td)\n+    {\n+        String s = td.getValue(\"tableDisplayName\");\n+        if( s == null ) {\n+            return HConstants.HIGH_QOS;\n+        }\n+        else {\n+            if (s.startsWith(\"SYS\") || s.startsWith(\"splice:\") || s.equals(\"MON_GET_CONNECTION\")) {\n+                return HConstants.ADMIN_QOS;\n+            } else {\n+                return HConstants.NORMAL_QOS;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int upgradeTablePriorities() throws Exception {\n+        return upgradeTablePriorities(admin);\n+    }\n+\n+    public static int upgradeTablePriorities(Admin admin) throws Exception\n+    {\n+        final int NUM_THREADS = 10;\n+        ExecutorService executor = null;\n+        try {\n+            HTableDescriptor[] tableDescriptors = admin.listTables();\n+\n+            List<Callable<Void>> upgradeTasks = Arrays.stream(tableDescriptors)\n+                    .filter( td -> td.getPriority() != getPriorityShouldHave(td))\n+                    .map( td -> (Callable<Void>) () -> {\n+                        setHTablePriority(admin, td, getPriorityShouldHave(td));\n+                        return null;\n+                    })\n+                    .collect(Collectors.toList());\n+            executor = Executors.newFixedThreadPool( NUM_THREADS );", "originalCommit": "71ec0bdc926efd0f28b2393e28b0d526b917ebe2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYwMDYzMA==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497600630", "bodyText": "ok, fixed. sdd.upgradeTablePriorities will have a list of tables to check", "author": "martinrupp", "createdAt": "2020-09-30T15:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE2MTE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5907b48e4e07eba02078cf13f8a67780b057118f", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\nindex 5385df4471..8313dc5216 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HBasePartitionAdmin.java\n\n@@ -740,29 +740,51 @@ public class HBasePartitionAdmin implements PartitionAdmin{\n         }\n     }\n \n-    @Override\n-    public int upgradeTablePriorities() throws Exception {\n-        return upgradeTablePriorities(admin);\n+    static public int getPriorityShouldHave(org.apache.hadoop.hbase.client.TableDescriptor td)\n+    {\n+        String s = td.getValue(\"tableDisplayName\");\n+        if( s == null ) {\n+            return HConstants.HIGH_QOS;\n+        }\n+        else {\n+            if (s.startsWith(\"SYS\") || s.startsWith(\"splice:\") || s.equals(\"MON_GET_CONNECTION\")) {\n+                return HConstants.ADMIN_QOS;\n+            } else {\n+                return HConstants.NORMAL_QOS;\n+            }\n+        }\n+    }\n+    public static void setHTablePriority(Admin admin, TableName tn,\n+                                         org.apache.hadoop.hbase.client.TableDescriptor td,\n+                                         int priority) throws IOException {\n+        boolean tableEnabled = admin.isTableEnabled(tn);\n+        if (tableEnabled) {\n+            admin.disableTable(tn);\n+        }\n+        ((TableDescriptorBuilder.ModifyableTableDescriptor) td).setPriority(priority);\n+        admin.modifyTable(td);\n+        admin.enableTable(tn);\n     }\n \n-    public static int upgradeTablePriorities(Admin admin) throws Exception\n+    public static int upgradeTablePrioritiesFromList(Admin admin,\n+                                                     List<org.apache.hadoop.hbase.client.TableDescriptor> tableDescriptors)\n+            throws Exception\n     {\n         final int NUM_THREADS = 10;\n         ExecutorService executor = null;\n         try {\n-            HTableDescriptor[] tableDescriptors = admin.listTables();\n \n-            List<Callable<Void>> upgradeTasks = Arrays.stream(tableDescriptors)\n+            List<Callable<Void>> upgradeTasks = tableDescriptors.stream()\n                     .filter( td -> td.getPriority() != getPriorityShouldHave(td))\n                     .map( td -> (Callable<Void>) () -> {\n-                        setHTablePriority(admin, td, getPriorityShouldHave(td));\n+                        setHTablePriority(admin, td.getTableName(), td, getPriorityShouldHave(td));\n                         return null;\n                     })\n                     .collect(Collectors.toList());\n             executor = Executors.newFixedThreadPool( NUM_THREADS );\n             executor.invokeAll( upgradeTasks );\n             return upgradeTasks.size();\n-        } catch (IOException | InterruptedException e) {\n+        } catch (InterruptedException e) {\n             throw e;\n         }\n         finally\n"}}, {"oid": "5907b48e4e07eba02078cf13f8a67780b057118f", "url": "https://github.com/splicemachine/spliceengine/commit/5907b48e4e07eba02078cf13f8a67780b057118f", "message": "DB-10230 upgrade script 2", "committedDate": "2020-09-30T15:17:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxMzM4Mw==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497613383", "bodyText": "Nitpick: use getNonCoreTI(), which invokes faultInTabInfo for you.", "author": "jyuanca", "createdAt": "2020-09-30T15:43:39Z", "path": "splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java", "diffHunk": "@@ -1331,6 +1333,37 @@ public void removeFKDependencyOnPrivileges(TransactionController tc) throws Stan\n                 \"SYS.SYSDEPENDS updated: Foreign keys dependencies on RoleDescriptors or permission descriptors deleted, total rows deleted: \" + rowsToDelete.size());\n     }\n \n+    public int upgradeTablePriorities(TransactionController tc) throws Exception {\n+        PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n+        ArrayList<String> toUpgrade = new ArrayList<>();\n+        Function<TabInfoImpl, Void> addTabInfo =  (TabInfoImpl info ) ->\n+                {\n+                    toUpgrade.add( Long.toString(info.getHeapConglomerate()) );\n+                    for( int j = 0; j < info.getNumberOfIndexes(); j++ )\n+                        toUpgrade.add( Long.toString(info.getIndexConglomerate(j)) );\n+                    return null;\n+                };\n+        for (int i = 0; i < coreInfo.length; ++i) {\n+            assert coreInfo[i] != null;\n+            addTabInfo.apply(coreInfo[i]);\n+        }\n+        for (int i = 0; i < NUM_NONCORE; ++i) {\n+            // noncoreInfo[x] will be null otherwise\n+            TabInfoImpl ti = getNonCoreTIByNumber(i+NUM_CORE);", "originalCommit": "5907b48e4e07eba02078cf13f8a67780b057118f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5NzQyOQ==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497797429", "bodyText": "done", "author": "martinrupp", "createdAt": "2020-09-30T21:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYxMzM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2e47cb10387c1b64bfce399f41bac4251e671d64", "chunk": "diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java\nindex f87ade6378..02d9360a74 100644\n--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java\n+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/sql/catalog/SpliceDataDictionary.java\n\n@@ -1333,37 +1331,6 @@ public class SpliceDataDictionary extends DataDictionaryImpl{\n                 \"SYS.SYSDEPENDS updated: Foreign keys dependencies on RoleDescriptors or permission descriptors deleted, total rows deleted: \" + rowsToDelete.size());\n     }\n \n-    public int upgradeTablePriorities(TransactionController tc) throws Exception {\n-        PartitionAdmin admin = SIDriver.driver().getTableFactory().getAdmin();\n-        ArrayList<String> toUpgrade = new ArrayList<>();\n-        Function<TabInfoImpl, Void> addTabInfo =  (TabInfoImpl info ) ->\n-                {\n-                    toUpgrade.add( Long.toString(info.getHeapConglomerate()) );\n-                    for( int j = 0; j < info.getNumberOfIndexes(); j++ )\n-                        toUpgrade.add( Long.toString(info.getIndexConglomerate(j)) );\n-                    return null;\n-                };\n-        for (int i = 0; i < coreInfo.length; ++i) {\n-            assert coreInfo[i] != null;\n-            addTabInfo.apply(coreInfo[i]);\n-        }\n-        for (int i = 0; i < NUM_NONCORE; ++i) {\n-            // noncoreInfo[x] will be null otherwise\n-            TabInfoImpl ti = getNonCoreTIByNumber(i+NUM_CORE);\n-            // conglomerate ids will be -1 otherwise\n-            faultInTabInfo(ti);\n-            addTabInfo.apply(ti);\n-        }\n-\n-        for( String s : HBaseConfiguration.internalTablesArr) {\n-            toUpgrade.add(s);\n-        }\n-        toUpgrade.add(\"16\"); // splice:16 core table\n-        toUpgrade.add(SIConfigurations.CONGLOMERATE_TABLE_NAME);\n-\n-        return admin.upgradeTablePrioritiesFromList(toUpgrade);\n-    }\n-\n     public void upgradeSysColumnsWithUseExtrapolationColumn(TransactionController tc) throws StandardException {\n         SchemaDescriptor sd = getSystemSchemaDescriptor();\n         TableDescriptor td = getTableDescriptor(SYSCOLUMNSRowFactory.TABLENAME_STRING, sd, tc);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyOTk1Ng==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497629956", "bodyText": "Nitpick: I would not even include VERY_HIGH since it maps to something that may be dangerous to use. (HIGH_QOS being even greater than SYSTEMTABLE_QOS that is used for HBASE system tables)", "author": "arnaud-splice", "createdAt": "2020-09-30T16:07:14Z", "path": "hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java", "diffHunk": "@@ -54,9 +56,25 @@ public HPartitionCreator(HBaseTableInfoFactory tableInfoFactory,Connection conne\n \n     @Override\n     public PartitionCreator withName(String name){\n+        return withName(name, Conglomerate.Priority.NORMAL);\n+    }\n+\n+    public static int GetHBasePriority(Conglomerate.Priority priority)\n+    {\n+        switch(priority){\n+            case NORMAL:    return HConstants.NORMAL_QOS;\n+            case HIGH:      return HConstants.ADMIN_QOS;\n+            case VERY_HIGH: return HConstants.HIGH_QOS;", "originalCommit": "5907b48e4e07eba02078cf13f8a67780b057118f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5NjQwMg==", "url": "https://github.com/splicemachine/spliceengine/pull/4182#discussion_r497796402", "bodyText": "it's not higher, it's equal. Still, i can remove.\npublic static final int SYSTEMTABLE_QOS = HIGH_QOS;", "author": "martinrupp", "createdAt": "2020-09-30T20:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyOTk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2e47cb10387c1b64bfce399f41bac4251e671d64", "chunk": "diff --git a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java\nindex f9d08ba7f1..da8bb112ac 100644\n--- a/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java\n+++ b/hbase_storage/src/main/java/com/splicemachine/access/hbase/HPartitionCreator.java\n\n@@ -56,25 +54,15 @@ public class HPartitionCreator implements PartitionCreator{\n \n     @Override\n     public PartitionCreator withName(String name){\n-        return withName(name, Conglomerate.Priority.NORMAL);\n-    }\n-\n-    public static int GetHBasePriority(Conglomerate.Priority priority)\n-    {\n-        switch(priority){\n-            case NORMAL:    return HConstants.NORMAL_QOS;\n-            case HIGH:      return HConstants.ADMIN_QOS;\n-            case VERY_HIGH: return HConstants.HIGH_QOS;\n-            default:        throw new RuntimeException(\"Not implemented priority \" + priority);\n-        }\n+        return withName(name, 0);\n     }\n \n     @Override\n-    public PartitionCreator withName(String name, Conglomerate.Priority priority){\n+    public PartitionCreator withName(String name, int priority){\n         assert tableName == null;\n         tableName = tableInfoFactory.getTableInfo(name);\n         descriptorBuilder = TableDescriptorBuilder.newBuilder(tableName);\n-        descriptorBuilder.setPriority(GetHBasePriority(priority));\n+        descriptorBuilder.setPriority(priority);\n         return this;\n     }\n \n"}}, {"oid": "2e47cb10387c1b64bfce399f41bac4251e671d64", "url": "https://github.com/splicemachine/spliceengine/commit/2e47cb10387c1b64bfce399f41bac4251e671d64", "message": "DB-10230 Prioritize bringing metadata tables online after a failure", "committedDate": "2020-09-30T21:01:31Z", "type": "commit"}, {"oid": "3c0abf18a426a12d869fc5e053fc9c4db74e5833", "url": "https://github.com/splicemachine/spliceengine/commit/3c0abf18a426a12d869fc5e053fc9c4db74e5833", "message": "DB-10230 fix SpotBugs", "committedDate": "2020-09-30T21:01:31Z", "type": "commit"}, {"oid": "b7c26db28fd4f4c9e469222f7f03a15aa41f55e0", "url": "https://github.com/splicemachine/spliceengine/commit/b7c26db28fd4f4c9e469222f7f03a15aa41f55e0", "message": "DB-10230 extract HTablePrioritiesIT", "committedDate": "2020-09-30T21:01:31Z", "type": "commit"}, {"oid": "89ea206d7ae10e497c86a523fee0635daac2bd5b", "url": "https://github.com/splicemachine/spliceengine/commit/89ea206d7ae10e497c86a523fee0635daac2bd5b", "message": "DB-10230 code review 1: use constants", "committedDate": "2020-09-30T21:02:43Z", "type": "commit"}, {"oid": "971a356f2bcd0d8d26dd78584449c05dec0e0731", "url": "https://github.com/splicemachine/spliceengine/commit/971a356f2bcd0d8d26dd78584449c05dec0e0731", "message": "[WIP] DB-10230 code review 2: upgrade script", "committedDate": "2020-09-30T21:02:43Z", "type": "commit"}, {"oid": "4995af729680f01509a0c6c8d02b4c1f9d31cb05", "url": "https://github.com/splicemachine/spliceengine/commit/4995af729680f01509a0c6c8d02b4c1f9d31cb05", "message": "DB-10230 upgrade script 2", "committedDate": "2020-09-30T21:02:43Z", "type": "commit"}, {"oid": "bd4cfb28179a88754fb953ee96246fc66bf0fc01", "url": "https://github.com/splicemachine/spliceengine/commit/bd4cfb28179a88754fb953ee96246fc66bf0fc01", "message": "DB-10230 fix / code review", "committedDate": "2020-09-30T21:02:43Z", "type": "forcePushed"}, {"oid": "9856a69583a038b0dc59f84b0d58f7f5343c9fa1", "url": "https://github.com/splicemachine/spliceengine/commit/9856a69583a038b0dc59f84b0d58f7f5343c9fa1", "message": "DB-10230 fix / code review", "committedDate": "2020-10-01T05:45:49Z", "type": "commit"}, {"oid": "9856a69583a038b0dc59f84b0d58f7f5343c9fa1", "url": "https://github.com/splicemachine/spliceengine/commit/9856a69583a038b0dc59f84b0d58f7f5343c9fa1", "message": "DB-10230 fix / code review", "committedDate": "2020-10-01T05:45:49Z", "type": "forcePushed"}, {"oid": "3d077042f111667826b9f2385b586bdf235297bc", "url": "https://github.com/splicemachine/spliceengine/commit/3d077042f111667826b9f2385b586bdf235297bc", "message": "Merge remote-tracking branch 'origin/master' into DB-10230", "committedDate": "2020-10-01T17:18:31Z", "type": "commit"}, {"oid": "b40a2fd2bee1f3e58d8b42e5100a582a92604e1d", "url": "https://github.com/splicemachine/spliceengine/commit/b40a2fd2bee1f3e58d8b42e5100a582a92604e1d", "message": "Merge branch 'master' into DB-10230", "committedDate": "2020-10-02T07:07:10Z", "type": "commit"}]}