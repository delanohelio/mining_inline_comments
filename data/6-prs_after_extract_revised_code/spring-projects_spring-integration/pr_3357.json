{"pr_number": 3357, "pr_title": "Remove Legacy Metrics", "pr_createdAt": "2020-08-06T19:49:41Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3357", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTgxOA==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r466761818", "bodyText": "The @ManagedResource is missed then.\nOr you placed it on QueueChannelOperations...", "author": "artembilan", "createdAt": "2020-08-07T00:53:57Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java", "diffHunk": "@@ -219,11 +219,13 @@ protected boolean doSend(Message<?> message, long timeout) {\n \t\treturn purgedMessages;\n \t}\n \n+\t@ManagedAttribute(description = \"Queue size\")", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2OTg5NA==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r467069894", "bodyText": "AbstractMessageChannel is annotated with @IntegrationManagedResource.", "author": "garyrussell", "createdAt": "2020-08-07T14:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "33b32ac463b49fe64b26a34e798d1ca4af1eacea", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java b/spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java\nindex d4a74cf17f..e4a00cfa01 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java\n\n@@ -219,13 +218,11 @@ public class QueueChannel extends AbstractPollableChannel implements QueueChanne\n \t\treturn purgedMessages;\n \t}\n \n-\t@ManagedAttribute(description = \"Queue size\")\n \t@Override\n \tpublic int getQueueSize() {\n \t\treturn this.queue.size();\n \t}\n \n-\t@ManagedAttribute(description = \"Queue remaining capacity\")\n \t@Override\n \tpublic int getRemainingCapacity() {\n \t\tif (this.queue instanceof BlockingQueue) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MjQzMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r466762433", "bodyText": "Hm. Looks like we don't need a @ManagedResource.\nWhat do I miss?\nThanks", "author": "artembilan", "createdAt": "2020-08-07T00:56:24Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/core/Pausable.java", "diffHunk": "@@ -27,16 +28,18 @@\n  * @since 5.0.3\n  *\n  */\n-public interface Pausable extends Lifecycle {\n+public interface Pausable extends ManageableLifecycle {\n \n \t/**\n \t * Pause the endpoint.\n \t */\n+\t@ManagedOperation(description = \"Pause the component\")", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4ODQxNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r467088414", "bodyText": "We export all components; they don't need @ManagedResource; they do, however, need @IntegrationManagedResource to prevent the normal MBE from exporting.\nThat said, pause/resume are not showing up - investigating...", "author": "garyrussell", "createdAt": "2020-08-07T14:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MjQzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NDU0Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r466764543", "bodyText": "I'm not sure this one has to be manageable - it is just an inner one", "author": "artembilan", "createdAt": "2020-08-07T01:04:46Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/endpoint/ReactiveStreamsConsumer.java", "diffHunk": "@@ -209,7 +210,7 @@ protected void doStop() {\n \t}\n \n \tprivate static final class MessageHandlerSubscriber\n-\t\t\timplements CoreSubscriber<Message<?>>, Disposable, Lifecycle {\n+\t\t\timplements CoreSubscriber<Message<?>>, Disposable, ManageableLifecycle {", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33b32ac463b49fe64b26a34e798d1ca4af1eacea", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/endpoint/ReactiveStreamsConsumer.java b/spring-integration-core/src/main/java/org/springframework/integration/endpoint/ReactiveStreamsConsumer.java\nindex 3065563ebb..0b7901c25d 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/endpoint/ReactiveStreamsConsumer.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/endpoint/ReactiveStreamsConsumer.java\n\n@@ -210,7 +188,7 @@ public class ReactiveStreamsConsumer extends AbstractEndpoint implements Integra\n \t}\n \n \tprivate static final class MessageHandlerSubscriber\n-\t\t\timplements CoreSubscriber<Message<?>>, Disposable, ManageableLifecycle {\n+\t\t\timplements CoreSubscriber<Message<?>>, Disposable, Lifecycle {\n \n \t\tprivate final Consumer<Message<?>> consumer;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NDgwNw==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r466764807", "bodyText": "Probably we need to raise an issue to not forget this TODO...", "author": "artembilan", "createdAt": "2020-08-07T01:05:50Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/gateway/MessagingGatewaySupport.java", "diffHunk": "@@ -675,8 +646,8 @@ private void sendMessageForReactiveFlow(MessageChannel requestChannel, Message<?\n \n \t\treturn reply\n \t\t\t\t.doOnSubscribe(s -> {\n-\t\t\t\t\tif (!error && this.countsEnabled) {\n-\t\t\t\t\t\tthis.messageCount.incrementAndGet();\n+\t\t\t\t\tif (!error) {\n+\t\t\t\t\t\t// TODO Micrometer counter", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NzEyOA==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r466767128", "bodyText": "I wonder if we really should apply our Integration management logic to not integration components.\nThis one sounds more like regular Spring bean, so what is the point to manage it.\nI might be not reached JMX yet, but just in case I won't forget in this number of file to review...\nThanks for understanding", "author": "artembilan", "createdAt": "2020-08-07T01:14:43Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupStoreReaper.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @author Dave Turanski\n  * @author Artem Bilan\n  */\n-public class MessageGroupStoreReaper implements Runnable, DisposableBean, InitializingBean, SmartLifecycle {\n+public class MessageGroupStoreReaper implements Runnable, DisposableBean, InitializingBean, ManageableSmartLifecycle {", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33b32ac463b49fe64b26a34e798d1ca4af1eacea", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupStoreReaper.java b/spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupStoreReaper.java\nindex dc8f308444..b17ec50d26 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupStoreReaper.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupStoreReaper.java\n\n@@ -35,7 +35,7 @@ import org.springframework.util.Assert;\n  * @author Dave Turanski\n  * @author Artem Bilan\n  */\n-public class MessageGroupStoreReaper implements Runnable, DisposableBean, InitializingBean, ManageableSmartLifecycle {\n+public class MessageGroupStoreReaper implements Runnable, DisposableBean, InitializingBean, SmartLifecycle {\n \n \tprivate static Log logger = LogFactory.getLog(MessageGroupStoreReaper.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2ODAwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r466768006", "bodyText": "Do we really need this?\nI'm sorry to asking nit-pick questions: you definitely spent some effort on the matter, but it is very hard to review this big PR.", "author": "artembilan", "createdAt": "2020-08-07T01:17:58Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/support/management/IntegrationManagement.java", "diffHunk": "@@ -84,14 +83,21 @@ default void registerMetricsCaptor(MetricsCaptor captor) {\n \t\t// no op\n \t}\n \n-\n-\n \t@Override\n \tdefault void destroy() {\n \t\t// no op\n \t}\n \n-\n+\t/**\n+\t * Return this {@link IntegrationManagement} as its concrete type.\n+\t * @param <T> the type.\n+\t * @return this.\n+\t * @since 5.4\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tdefault <T> T getThisAs() {", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTU1MA==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r467089550", "bodyText": "I understand; this is hard to review; I just thought this would be a convenience to avoid casting.", "author": "garyrussell", "createdAt": "2020-08-07T14:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2ODAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDI1NA==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r467090254", "bodyText": "Sure! We can give it a shot!\n\ud83d\udc4d", "author": "artembilan", "createdAt": "2020-08-07T14:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2ODAwNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2Mjk3Nw==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r467062977", "bodyText": "I think we don't need this if. The logic below covers everything we needed.\nAnd having a MessageHandler as a proxy won't give us a positive match with this if anyway.", "author": "artembilan", "createdAt": "2020-08-07T14:07:02Z", "path": "spring-integration-jmx/src/main/java/org/springframework/integration/monitor/IntegrationMBeanExporter.java", "diffHunk": "@@ -348,25 +344,25 @@ private void postProcessAbstractEndpoint(Object bean) {\n \t\tif (bean instanceof IntegrationConsumer) {\n \t\t\tIntegrationConsumer integrationConsumer = (IntegrationConsumer) bean;\n \t\t\tMessageHandler handler = integrationConsumer.getHandler();\n-\t\t\tif (handler instanceof org.springframework.integration.support.management.MessageHandlerMetrics) {\n-\t\t\t\torg.springframework.integration.support.management.MessageHandlerMetrics messageHandlerMetrics =\n-\t\t\t\t\t\t(org.springframework.integration.support.management.MessageHandlerMetrics) extractTarget(handler);\n-\t\t\t\tregisterHandler(messageHandlerMetrics);\n-\t\t\t\tthis.handlers.add(messageHandlerMetrics);\n-\t\t\t\tthis.runtimeBeans.add(messageHandlerMetrics);\n+\t\t\tif (handler instanceof AbstractMessageHandler) {", "originalCommit": "b939ba1e97287522a9117aa4afdf934ed823adf1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDI0Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3357#discussion_r467090243", "bodyText": "Yeah - I went through a lot of iterations with this; I thought I had cleaned all these up. Good catch.", "author": "garyrussell", "createdAt": "2020-08-07T14:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2Mjk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "33b32ac463b49fe64b26a34e798d1ca4af1eacea", "chunk": "diff --git a/spring-integration-jmx/src/main/java/org/springframework/integration/monitor/IntegrationMBeanExporter.java b/spring-integration-jmx/src/main/java/org/springframework/integration/monitor/IntegrationMBeanExporter.java\nindex 0824297299..25839d24aa 100644\n--- a/spring-integration-jmx/src/main/java/org/springframework/integration/monitor/IntegrationMBeanExporter.java\n+++ b/spring-integration-jmx/src/main/java/org/springframework/integration/monitor/IntegrationMBeanExporter.java\n\n@@ -344,16 +344,14 @@ public class IntegrationMBeanExporter extends MBeanExporter\n \t\tif (bean instanceof IntegrationConsumer) {\n \t\t\tIntegrationConsumer integrationConsumer = (IntegrationConsumer) bean;\n \t\t\tMessageHandler handler = integrationConsumer.getHandler();\n-\t\t\tif (handler instanceof AbstractMessageHandler) {\n-\t\t\t\tMessageHandler monitor = (MessageHandler) extractTarget(handler);\n-\t\t\t\tif (monitor instanceof IntegrationManagement) {\n-\t\t\t\t\tregisterHandler((IntegrationManagement) monitor);\n-\t\t\t\t\tthis.handlers.put(((IntegrationManagement) monitor).getComponentName(),\n-\t\t\t\t\t\t\t(IntegrationManagement) monitor);\n-\t\t\t\t\tthis.runtimeBeans.add(monitor);\n-\t\t\t\t}\n-\t\t\t\treturn;\n+\t\t\tMessageHandler monitor = (MessageHandler) extractTarget(handler);\n+\t\t\tif (monitor instanceof IntegrationManagement) {\n+\t\t\t\tregisterHandler((IntegrationManagement) monitor);\n+\t\t\t\tthis.handlers.put(((IntegrationManagement) monitor).getComponentName(),\n+\t\t\t\t\t\t(IntegrationManagement) monitor);\n+\t\t\t\tthis.runtimeBeans.add(monitor);\n \t\t\t}\n+\t\t\treturn;\n \t\t}\n \t\telse if (bean instanceof SourcePollingChannelAdapter) {\n \t\t\tSourcePollingChannelAdapter pollingChannelAdapter = (SourcePollingChannelAdapter) bean;\n"}}, {"oid": "d5d3714d005ea40bd6e4216decaab1900364f23c", "url": "https://github.com/spring-projects/spring-integration/commit/d5d3714d005ea40bd6e4216decaab1900364f23c", "message": "Remove Legacy Metrics\n\n- Simplify MBeans - instead of wrapping to expose lifecycle methods,\n  implement `ManageableLifecycle`. Register an additional MBean for\n  polled endpoints to control the lifecycle.", "committedDate": "2020-08-07T14:42:00Z", "type": "commit"}, {"oid": "33b32ac463b49fe64b26a34e798d1ca4af1eacea", "url": "https://github.com/spring-projects/spring-integration/commit/33b32ac463b49fe64b26a34e798d1ca4af1eacea", "message": "Polishing\n\n- Move `QueueChannel` `@ManagedAttribute`s to `QueueChannelOperations`\n- Make all `AbstractEndpoints` `IntegrationManagedResource`s and remove `ManagedEndpoint`\n  to allow exposure of any `@Managed*` methods (including those on `Pausable`)\n- Revert to `Lifecycle` for classes that are not related to endpoints\n- Remove legacy metrics from docs", "committedDate": "2020-08-07T16:19:36Z", "type": "commit"}, {"oid": "33b32ac463b49fe64b26a34e798d1ca4af1eacea", "url": "https://github.com/spring-projects/spring-integration/commit/33b32ac463b49fe64b26a34e798d1ca4af1eacea", "message": "Polishing\n\n- Move `QueueChannel` `@ManagedAttribute`s to `QueueChannelOperations`\n- Make all `AbstractEndpoints` `IntegrationManagedResource`s and remove `ManagedEndpoint`\n  to allow exposure of any `@Managed*` methods (including those on `Pausable`)\n- Revert to `Lifecycle` for classes that are not related to endpoints\n- Remove legacy metrics from docs", "committedDate": "2020-08-07T16:19:36Z", "type": "forcePushed"}]}