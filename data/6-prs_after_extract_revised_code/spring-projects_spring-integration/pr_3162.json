{"pr_number": 3162, "pr_title": "GH-3154: Support `UriBuilderFactory.EncodingMode`", "pr_createdAt": "2020-01-30T16:24:59Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3162", "timeline": [{"oid": "473bbb4879ad9148bae714c663045b47656e75fb", "url": "https://github.com/spring-projects/spring-integration/commit/473bbb4879ad9148bae714c663045b47656e75fb", "message": "GH-3154: Support `UriBuilderFactory.EncodingMode`\n\nFixes https://github.com/spring-projects/spring-integration/issues/3154\n\nSpring Framework now provides a `DefaultUriBuilderFactory.EncodingMode`\nfor encoding URIs in the `RestTemplate` before and after uri template\nenrichment with uri variables.\nTherefore `encodeUri` and manual uri variables substitution is not necessary\nin Spring Integration HTTP components\n\n* Deprecate `AbstractHttpRequestExecutingMessageHandler.encodeUri` in favor of\n`DefaultUriBuilderFactory.EncodingMode` and respective configuration\non the `RestTemplate` in HTTP module and `WebClient` in WebFlux module", "committedDate": "2020-01-30T16:24:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2ODU3OA==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373068578", "bodyText": "Why is this needed? This is the default.", "author": "garyrussell", "createdAt": "2020-01-30T16:52:12Z", "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -118,6 +115,7 @@\n \tpublic AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t\tAssert.notNull(uriExpression, \"URI Expression is required\");\n \t\tthis.uriExpression = uriExpression;\n+\t\tthis.uriFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES);", "originalCommit": "473bbb4879ad9148bae714c663045b47656e75fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4002501289ec0bb7877b85e6b40f92d5011a618f", "chunk": "diff --git a/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java b/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\nindex e05b00c3da..229e383039 100644\n--- a/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\n+++ b/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\n\n@@ -115,7 +115,6 @@ public abstract class AbstractHttpRequestExecutingMessageHandler extends Abstrac\n \tpublic AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t\tAssert.notNull(uriExpression, \"URI Expression is required\");\n \t\tthis.uriExpression = uriExpression;\n-\t\tthis.uriFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373069277", "bodyText": "Why package visibility?\nWhy not UriBuilderFactory?", "author": "garyrussell", "createdAt": "2020-01-30T16:53:28Z", "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -85,6 +82,8 @@\n \tprivate static final List<HttpMethod> NO_BODY_HTTP_METHODS =\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE);\n \n+\tDefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();", "originalCommit": "473bbb4879ad9148bae714c663045b47656e75fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3MzcxMQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373073711", "bodyText": "The UriBuilderFactory doesn't have a setEncodingMode()", "author": "artembilan", "createdAt": "2020-01-30T17:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3ODQzMA==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373078430", "bodyText": "and package?", "author": "garyrussell", "createdAt": "2020-01-30T17:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4002501289ec0bb7877b85e6b40f92d5011a618f", "chunk": "diff --git a/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java b/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\nindex e05b00c3da..229e383039 100644\n--- a/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\n+++ b/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\n\n@@ -82,7 +82,7 @@ public abstract class AbstractHttpRequestExecutingMessageHandler extends Abstrac\n \tprivate static final List<HttpMethod> NO_BODY_HTTP_METHODS =\n \t\t\tArrays.asList(HttpMethod.GET, HttpMethod.HEAD, HttpMethod.TRACE);\n \n-\tDefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();\n+\tprotected final DefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory(); // NOSONAR - final\n \n \tprivate final Map<String, Expression> uriVariableExpressions = new HashMap<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373069975", "bodyText": "Why not setUriBuilderFactory ?", "author": "garyrussell", "createdAt": "2020-01-30T16:54:41Z", "path": "spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java", "diffHunk": "@@ -127,9 +125,25 @@ public AbstractHttpRequestExecutingMessageHandler(Expression uriExpression) {\n \t * <code>true</code>.\n \t * @param encodeUri true if the URI should be encoded.\n \t * @see UriComponentsBuilder\n+\t * @deprecated since 5.3 in favor of {@link #setEncodingMode}\n \t */\n+\t@Deprecated\n \tpublic void setEncodeUri(boolean encodeUri) {\n-\t\tthis.encodeUri = encodeUri;\n+\t\tsetEncodingMode(\n+\t\t\t\tencodeUri\n+\t\t\t\t\t\t? DefaultUriBuilderFactory.EncodingMode.TEMPLATE_AND_VALUES\n+\t\t\t\t\t\t: DefaultUriBuilderFactory.EncodingMode.NONE);\n+\t}\n+\n+\t/**\n+\t * Set the encoding mode to use.\n+\t * By default this is set to {@link DefaultUriBuilderFactory.EncodingMode#TEMPLATE_AND_VALUES}.\n+\t * @param encodingMode the mode to use for uri encoding\n+\t * @since 5.3\n+\t */\n+\tpublic void setEncodingMode(DefaultUriBuilderFactory.EncodingMode encodingMode) {", "originalCommit": "473bbb4879ad9148bae714c663045b47656e75fb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3NTEyNQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373075125", "bodyText": "Right. I'm going to document that for more complex scenarios it would be better to configure an external RestTemplate and already use its setUriTemplateHandler().\nI would even go with all the RestTempalte options as an external reference. I'm not a fun of mutating internal objects.\nBut that would be too drastic even in the point release...", "author": "artembilan", "createdAt": "2020-01-30T17:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA3ODczMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373078733", "bodyText": "Ok, makes sense; proceed with the remaining work \ud83d\ude04", "author": "garyrussell", "createdAt": "2020-01-30T17:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2OTk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4002501289ec0bb7877b85e6b40f92d5011a618f", "chunk": "diff --git a/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java b/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\nindex e05b00c3da..229e383039 100644\n--- a/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\n+++ b/spring-integration-http/src/main/java/org/springframework/integration/http/outbound/AbstractHttpRequestExecutingMessageHandler.java\n\n@@ -138,6 +137,8 @@ public abstract class AbstractHttpRequestExecutingMessageHandler extends Abstrac\n \t/**\n \t * Set the encoding mode to use.\n \t * By default this is set to {@link DefaultUriBuilderFactory.EncodingMode#TEMPLATE_AND_VALUES}.\n+\t * For more complicated scenarios consider to configure an {@link org.springframework.web.util.UriTemplateHandler}\n+\t * on an externally provided {@link org.springframework.web.client.RestTemplate}.\n \t * @param encodingMode the mode to use for uri encoding\n \t * @since 5.3\n \t */\n"}}, {"oid": "4002501289ec0bb7877b85e6b40f92d5011a618f", "url": "https://github.com/spring-projects/spring-integration/commit/4002501289ec0bb7877b85e6b40f92d5011a618f", "message": "* Really populate `uriFactory` into an internal `RestTemplate`\n* Ensure in tests that `encoding-mode` is populated properly into an internal `RestTemplate`\n* Clean up affected HTTP tests for AssertJ and JUnit 5", "committedDate": "2020-01-30T17:36:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzIwOQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093209", "bodyText": "Unusual formatting.", "author": "garyrussell", "createdAt": "2020-01-30T17:38:06Z", "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -192,13 +200,15 @@ public void withUrlAndTemplate() {\n \t\tRestTemplate restTemplate =\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlAndTemplate, \"handler.restTemplate\", RestTemplate.class);\n \t\tassertThat(restTemplate).isSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "originalCommit": "4002501289ec0bb7877b85e6b40f92d5011a618f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "chunk": "diff --git a/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java b/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\nindex d90700b776..92c6b4304b 100644\n--- a/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\n+++ b/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\n\n@@ -207,8 +208,8 @@ public class HttpOutboundChannelAdapterParserTests {\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n-\t\t));\n+\t\tDirectFieldAccessor templateAccessor =\n+\t\t\t\tnew DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n \t\tClientHttpRequestFactory requestFactory = (ClientHttpRequestFactory)\n \t\t\t\ttemplateAccessor.getPropertyValue(\"requestFactory\");\n \t\tassertThat(requestFactory instanceof SimpleClientHttpRequestFactory).isTrue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzMxOQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093319", "bodyText": "Here too.", "author": "garyrussell", "createdAt": "2020-01-30T17:38:18Z", "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -224,13 +234,15 @@ public void withUrlExpression() {\n \t\tRestTemplate restTemplate =\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlExpression, \"handler.restTemplate\", RestTemplate.class);\n \t\tassertThat(restTemplate).isNotSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "originalCommit": "4002501289ec0bb7877b85e6b40f92d5011a618f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "chunk": "diff --git a/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java b/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\nindex d90700b776..92c6b4304b 100644\n--- a/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\n+++ b/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\n\n@@ -241,8 +242,8 @@ public class HttpOutboundChannelAdapterParserTests {\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n-\t\t));\n+\t\tDirectFieldAccessor templateAccessor =\n+\t\t\t\tnew DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n \t\tClientHttpRequestFactory requestFactory = (ClientHttpRequestFactory)\n \t\t\t\ttemplateAccessor.getPropertyValue(\"requestFactory\");\n \t\tassertThat(requestFactory instanceof SimpleClientHttpRequestFactory).isTrue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MzQzOA==", "url": "https://github.com/spring-projects/spring-integration/pull/3162#discussion_r373093438", "bodyText": "And here", "author": "garyrussell", "createdAt": "2020-01-30T17:38:33Z", "path": "spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java", "diffHunk": "@@ -257,13 +269,15 @@ public void withUrlExpressionAndTemplate() {\n \t\t\t\tTestUtils.getPropertyValue(this.withUrlExpressionAndTemplate, \"handler.restTemplate\",\n \t\t\t\t\t\tRestTemplate.class);\n \t\tassertThat(restTemplate).isSameAs(customRestTemplate);\n-\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor.getPropertyValue(\"handler\");\n+\t\tHttpRequestExecutingMessageHandler handler = (HttpRequestExecutingMessageHandler) endpointAccessor\n+\t\t\t\t.getPropertyValue(\"handler\");\n \t\tDirectFieldAccessor handlerAccessor = new DirectFieldAccessor(handler);\n \t\tassertThat(handlerAccessor.getPropertyValue(\"expectReply\")).isEqualTo(false);\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n+\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n+\t\t));", "originalCommit": "4002501289ec0bb7877b85e6b40f92d5011a618f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "chunk": "diff --git a/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java b/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\nindex d90700b776..92c6b4304b 100644\n--- a/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\n+++ b/spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpOutboundChannelAdapterParserTests.java\n\n@@ -276,8 +277,8 @@ public class HttpOutboundChannelAdapterParserTests {\n \t\tassertThat(endpointAccessor.getPropertyValue(\"inputChannel\"))\n \t\t\t\t.isEqualTo(this.applicationContext.getBean(\"requests\"));\n \t\tassertThat(handlerAccessor.getPropertyValue(\"outputChannel\")).isNull();\n-\t\tDirectFieldAccessor templateAccessor = new DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"\n-\t\t));\n+\t\tDirectFieldAccessor templateAccessor =\n+\t\t\t\tnew DirectFieldAccessor(handlerAccessor.getPropertyValue(\"restTemplate\"));\n \t\tClientHttpRequestFactory requestFactory = (ClientHttpRequestFactory)\n \t\t\t\ttemplateAccessor.getPropertyValue(\"requestFactory\");\n \t\tassertThat(requestFactory instanceof SimpleClientHttpRequestFactory).isTrue();\n"}}, {"oid": "615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "url": "https://github.com/spring-projects/spring-integration/commit/615c36d6cc9b01cf774d14ce3999fd9dbcfabb9a", "message": "* Clean up formatting", "committedDate": "2020-01-30T17:45:47Z", "type": "commit"}, {"oid": "6a30f1cde80316a323d7fcea165d1f927972d951", "url": "https://github.com/spring-projects/spring-integration/commit/6a30f1cde80316a323d7fcea165d1f927972d951", "message": "* Apply fix for WebFlux module\n* Add docs for new `encoding-mode` option", "committedDate": "2020-01-30T19:10:35Z", "type": "commit"}, {"oid": "a884203f4f0274a81ac9ba47a29535447aa7b23f", "url": "https://github.com/spring-projects/spring-integration/commit/a884203f4f0274a81ac9ba47a29535447aa7b23f", "message": "* Remove unused import in the test", "committedDate": "2020-01-30T19:22:11Z", "type": "commit"}]}