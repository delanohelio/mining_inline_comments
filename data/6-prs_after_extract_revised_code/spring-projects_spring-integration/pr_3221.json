{"pr_number": 3221, "pr_title": "GH-3181: MQTT: Support MANUAL Acks", "pr_createdAt": "2020-03-17T21:19:40Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3221", "timeline": [{"oid": "b04be544cab1f13a8d7b69adfc590990ce7323c0", "url": "https://github.com/spring-projects/spring-integration/commit/b04be544cab1f13a8d7b69adfc590990ce7323c0", "message": "GH-3181: MQTT: Support MANUAL Acks\n\nResolves https://github.com/spring-projects/spring-integration/issues/3181", "committedDate": "2020-03-17T21:19:22Z", "type": "commit"}, {"oid": "c7b2fd49c7feec3784f0e313108fcff7684ebdcc", "url": "https://github.com/spring-projects/spring-integration/commit/c7b2fd49c7feec3784f0e313108fcff7684ebdcc", "message": "Doc polishing", "committedDate": "2020-03-17T21:46:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MzY3NQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r394583675", "bodyText": "Can't we just live with similar to the client option like manualAcks(boolean) ?", "author": "artembilan", "createdAt": "2020-03-18T19:18:20Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -51,6 +54,25 @@\n public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter\n \t\timplements MqttCallback, ApplicationEventPublisherAware {\n \n+\t/**\n+\t * Acknowledgment mode.\n+\t *\n+\t * @since 5.3\n+\t */\n+\tpublic enum AckMode {\n+\n+\t\t/**\n+\t\t * Client will auto ack when integration flow returns.\n+\t\t */\n+\t\tAUTO,\n+\n+\t\t/**\n+\t\t * User must ack via the {@link IntegrationMessageHeaderAccessor#ACKNOWLEDGMENT_CALLBACK} header.\n+\t\t */\n+\t\tMANUAL", "originalCommit": "c7b2fd49c7feec3784f0e313108fcff7684ebdcc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\nindex 3b72b4f8d0..23e69a6906 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n\n@@ -54,25 +54,6 @@ import org.springframework.util.Assert;\n public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDrivenChannelAdapter\n \t\timplements MqttCallback, ApplicationEventPublisherAware {\n \n-\t/**\n-\t * Acknowledgment mode.\n-\t *\n-\t * @since 5.3\n-\t */\n-\tpublic enum AckMode {\n-\n-\t\t/**\n-\t\t * Client will auto ack when integration flow returns.\n-\t\t */\n-\t\tAUTO,\n-\n-\t\t/**\n-\t\t * User must ack via the {@link IntegrationMessageHeaderAccessor#ACKNOWLEDGMENT_CALLBACK} header.\n-\t\t */\n-\t\tMANUAL\n-\n-\t}\n-\n \t/**\n \t * The default completion timeout in milliseconds.\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4Njc1NA==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r394586754", "bodyText": "I wonder why do we care about this.\nWe are just have her self-containing AcknowledgmentImpl  with the client it has been created.\nIf that client becomes invalid at the moment of acknowledge() we have nothing to do anyway.\nWhat am I missing?", "author": "artembilan", "createdAt": "2020-03-18T19:24:06Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -379,4 +420,46 @@ public void messageArrived(String topic, MqttMessage mqttMessage) {\n \tpublic void deliveryComplete(IMqttDeliveryToken token) {\n \t}\n \n+\t/**\n+\t * Used to complete message arrival when {@link AckMode#MANUAL}.\n+\t *\n+\t * @since 5.3\n+\t */\n+\tprivate class AcknowledgmentImpl implements Acknowledgment {\n+\n+\t\tprivate final int id;\n+\n+\t\tprivate final int qos;\n+\n+\t\tprivate final IMqttClient ackClient;\n+\n+\t\t/**\n+\t\t * Construct an instance with the provided properties.\n+\t\t * @param id the message id.\n+\t\t * @param qos the message QOS.\n+\t\t * @param client the client.\n+\t\t */\n+\t\tAcknowledgmentImpl(int id, int qos, IMqttClient client) {\n+\t\t\tthis.id = id;\n+\t\t\tthis.qos = qos;\n+\t\t\tthis.ackClient = client;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void acknowledge() {\n+\t\t\tif (this.ackClient != null || !this.ackClient.equals(MqttPahoMessageDrivenChannelAdapter.this.client)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tthis.ackClient.messageArrivedComplete(this.id, this.qos);\n+\t\t\t\t}\n+\t\t\t\tcatch (MqttException e) {\n+\t\t\t\t\tthrow new IllegalStateException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tthrow new IllegalStateException(\"Client has changed\");", "originalCommit": "c7b2fd49c7feec3784f0e313108fcff7684ebdcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwODk0OA==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395208948", "bodyText": "How that is possible that this.ackClient can be a null?\nWhy do we need this if..else logic here at all?", "author": "artembilan", "createdAt": "2020-03-19T17:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4Njc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMDczNw==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395220737", "bodyText": "It's just for safety. I don't know the client internals and whether connectionLost can be called concurrently with messageArrived so there could be a race.", "author": "garyrussell", "createdAt": "2020-03-19T18:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4Njc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\nindex 3b72b4f8d0..23e69a6906 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n\n@@ -425,7 +404,7 @@ public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDriv\n \t *\n \t * @since 5.3\n \t */\n-\tprivate class AcknowledgmentImpl implements Acknowledgment {\n+\tprivate static class AcknowledgmentImpl implements SimpleAcknowledgment {\n \n \t\tprivate final int id;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4OTU0Mg==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r394589542", "bodyText": "@FunctionalInterface ?", "author": "artembilan", "createdAt": "2020-03-18T19:29:28Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/Acknowledgment.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.mqtt.support;\n+\n+/**\n+ * Opaque object for manually acknowledging.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public interface Acknowledgment {\n+\n+\t/**\n+\t * Complete the message arrival.\n+\t * @throws IllegalStateException if the client has been disconnected since this\n+\t * was created.\n+\t */\n+\tvoid acknowledge();", "originalCommit": "c7b2fd49c7feec3784f0e313108fcff7684ebdcc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/Acknowledgment.java b/spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java\nsimilarity index 89%\nrename from spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/Acknowledgment.java\nrename to spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java\nindex b882626dd4..c439117dc0 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/Acknowledgment.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java\n\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.integration.mqtt.support;\n+package org.springframework.integration.acks;\n \n /**\n  * Opaque object for manually acknowledging.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MTkyMQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r394591921", "bodyText": "This is kinda not compatible with what we have in the StaticMessageHeaderAccessor.getAcknowledgmentCallback().\nShouldn't we have a singe place of truce even if that AcknowledgmentCallback is not going to be in a full power for MQTT as it was designed?\nThanks", "author": "artembilan", "createdAt": "2020-03-18T19:34:01Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttHeaderAccessor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.mqtt.support;\n+\n+import org.springframework.integration.IntegrationMessageHeaderAccessor;\n+import org.springframework.lang.Nullable;\n+import org.springframework.messaging.Message;\n+\n+/**\n+ * Helper for typed access to incoming MQTT message headers.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public final class MqttHeaderAccessor {\n+\n+\tprivate MqttHeaderAccessor() {\n+\t}\n+\n+\t/**\n+\t * Return the received topic header.\n+\t * @param message the message.\n+\t * @return the header.\n+\t */\n+\t@Nullable\n+\tpublic static String receivedTopic(Message<?> message) {\n+\t\treturn message.getHeaders().get(MqttHeaders.RECEIVED_TOPIC, String.class);\n+\t}\n+\n+\t/**\n+\t * Return the MQTT message id.\n+\t * @param message the message.\n+\t * @return the header.\n+\t */\n+\t@Nullable\n+\tpublic static Integer id(Message<?> message) {\n+\t\treturn message.getHeaders().get(MqttHeaders.ID, Integer.class);\n+\t}\n+\n+\t/**\n+\t * Return the received QOS header.\n+\t * @param message the message.\n+\t * @return the header.\n+\t */\n+\t@Nullable\n+\tpublic static Integer receivedQos(Message<?> message) {\n+\t\treturn message.getHeaders().get(MqttHeaders.RECEIVED_QOS, Integer.class);\n+\t}\n+\n+\t/**\n+\t * Return the received retained header.\n+\t * @param message the message.\n+\t * @return the header.\n+\t */\n+\t@Nullable\n+\tpublic static Boolean receivedRetained(Message<?> message) {\n+\t\treturn message.getHeaders().get(MqttHeaders.RECEIVED_RETAINED, Boolean.class);\n+\t}\n+\n+\t/**\n+\t * Return the duplicate header.\n+\t * @param message the message.\n+\t * @return the header.\n+\t */\n+\t@Nullable\n+\tpublic static Boolean duplicate(Message<?> message) {\n+\t\treturn message.getHeaders().get(MqttHeaders.DUPLICATE, Boolean.class);\n+\t}\n+\n+\t/**\n+\t * Return the acknowledgment callback header.\n+\t * @param message the message.\n+\t * @return the header.\n+\t */\n+\tpublic static Acknowledgment acknowledgment(Message<?> message) {\n+\t\treturn message.getHeaders().get(IntegrationMessageHeaderAccessor.ACKNOWLEDGMENT_CALLBACK, Acknowledgment.class);", "originalCommit": "c7b2fd49c7feec3784f0e313108fcff7684ebdcc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MTA3Mg==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395041072", "bodyText": "Good point.", "author": "garyrussell", "createdAt": "2020-03-19T13:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MTkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2MTI2NA==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395061264", "bodyText": "I fact I see that SIK implements an org.springframework.kafka.support.Acknowledgment for full compatibility.\nSo, probably we really need to introduce that simple Acknowledgment here and have it extended from the AcknowledgmentCallback.\nThen we may introduce a new Acknowledgment ack = StaticMessageHeaderAccessor.getAcknowledgment() for end-user convenience.", "author": "artembilan", "createdAt": "2020-03-19T14:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MTkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttHeaderAccessor.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttHeaderAccessor.java\nindex 8dcfa274f2..5e42b0b85f 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttHeaderAccessor.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttHeaderAccessor.java\n\n@@ -16,7 +16,6 @@\n \n package org.springframework.integration.mqtt.support;\n \n-import org.springframework.integration.IntegrationMessageHeaderAccessor;\n import org.springframework.lang.Nullable;\n import org.springframework.messaging.Message;\n \n"}}, {"oid": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "url": "https://github.com/spring-projects/spring-integration/commit/cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "message": "Rework acknowledgment into the existing `AcknowledgmentCallback`.", "committedDate": "2020-03-19T17:37:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNzQwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395207406", "bodyText": "I think this one is not relavant to the generic contract...", "author": "artembilan", "createdAt": "2020-03-19T17:42:02Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.acks;\n+\n+/**\n+ * Opaque object for manually acknowledging.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+@FunctionalInterface\n+public interface SimpleAcknowledgment {\n+\n+\t/**\n+\t * Complete the message arrival.\n+\t * @throws IllegalStateException if the client has been disconnected since this", "originalCommit": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ac916d12088cfe63233250f3293d6e1e0d10452", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java b/spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java\nindex c439117dc0..07f9a0f10f 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/acks/SimpleAcknowledgment.java\n\n@@ -27,9 +27,7 @@ package org.springframework.integration.acks;\n public interface SimpleAcknowledgment {\n \n \t/**\n-\t * Complete the message arrival.\n-\t * @throws IllegalStateException if the client has been disconnected since this\n-\t * was created.\n+\t * Acknowledge the message delivery.\n \t */\n \tvoid acknowledge();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjAwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395212006", "bodyText": "I wonder if this internal one should fully implement a AcknowledgmentCallback fro compatibility with a AcknowledgmentCallback getAcknowledgmentCallback(Message<?> message)  contract...\nAny objection do not do that?\nThanks", "author": "artembilan", "createdAt": "2020-03-19T17:49:20Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -379,4 +399,46 @@ public void messageArrived(String topic, MqttMessage mqttMessage) {\n \tpublic void deliveryComplete(IMqttDeliveryToken token) {\n \t}\n \n+\t/**\n+\t * Used to complete message arrival when {@link AckMode#MANUAL}.\n+\t *\n+\t * @since 5.3\n+\t */\n+\tprivate static class AcknowledgmentImpl implements SimpleAcknowledgment {", "originalCommit": "cdd4afb2cbea51aeb86a00d23f7f350a6294ba4e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNDA4Nw==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395224087", "bodyText": "That is intended for message source implementations. We can't support its other features here.", "author": "garyrussell", "createdAt": "2020-03-19T18:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyNTkzNQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395225935", "bodyText": "OK. We an give it a shot.\nBut let's document it in that docs properly, that this MQTT ack is not an AcknowledgmentCallback.\nAlso I wonder if we should say something on the matter in the polling-consumer.adoc#deferred-acks-message-source ...", "author": "artembilan", "createdAt": "2020-03-19T18:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyODQxNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3221#discussion_r395228414", "bodyText": "I will add some more docs...", "author": "garyrussell", "createdAt": "2020-03-19T18:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjAwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "4ac916d12088cfe63233250f3293d6e1e0d10452", "url": "https://github.com/spring-projects/spring-integration/commit/4ac916d12088cfe63233250f3293d6e1e0d10452", "message": "Fix javadocs and doc linFix javadocs and doc linkk", "committedDate": "2020-03-19T18:10:57Z", "type": "commit"}, {"oid": "26181fb6b13a21559644787df892e6d17f92f03a", "url": "https://github.com/spring-projects/spring-integration/commit/26181fb6b13a21559644787df892e6d17f92f03a", "message": "Doc polishing; explain uses of `ACKNOWLEDGMENT_CALLBACK` header.", "committedDate": "2020-03-19T18:28:03Z", "type": "commit"}]}