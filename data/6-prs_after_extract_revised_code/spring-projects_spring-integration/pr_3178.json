{"pr_number": 3178, "pr_title": "GH-2818: DSL support for -ws module", "pr_createdAt": "2020-02-12T22:59:03Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3178", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NzE5Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379047193", "bodyText": "Would you mind to change logic then in favor of calling a replacing API instead?\nThen it is going to be much easier to support possible changes in the target logic afterward.", "author": "artembilan", "createdAt": "2020-02-13T18:41:16Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/AbstractWebServiceOutboundGateway.java", "diffHunk": "@@ -165,6 +165,12 @@ public void setFaultMessageResolver(FaultMessageResolver faultMessageResolver) {\n \t\tthis.webServiceTemplate.setFaultMessageResolver(faultMessageResolver);\n \t}\n \n+\t/**\n+\t * Specify the {@link WebServiceMessageSender} to use.\n+\t * @param messageSender the sender.\n+\t * @deprecated in favor of {@link #setMessageSenders(WebServiceMessageSender...)}\n+\t */\n+\t@Deprecated\n \tpublic void setMessageSender(WebServiceMessageSender messageSender) {\n \t\tAssert.state(!this.webServiceTemplateExplicitlySet,", "originalCommit": "2a96e81b5a3e0faf34792956000e365159974112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MDEwNQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382190105", "bodyText": "This has not been addressed.\nThanks", "author": "artembilan", "createdAt": "2020-02-20T18:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NzE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwMzY4OA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382203688", "bodyText": "Sorry, I missed this; but, that said, I don't understand it.", "author": "garyrussell", "createdAt": "2020-02-20T19:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NzE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwOTg2Nw==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382209867", "bodyText": "I mean this:\npublic void setMessageSender(WebServiceMessageSender messageSender) {\n   setMessageSenders(messageSender);\n}\n\nSo, we don't need to have that Assert in this method any more. The logic from a deprecated method is fully delegated to replacing API.", "author": "artembilan", "createdAt": "2020-02-20T19:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NzE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzI3NA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382217274", "bodyText": "Doh; ok.", "author": "garyrussell", "createdAt": "2020-02-20T19:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0NzE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4f09d5a2d6a5e504b6d13ca25d15c1586f7b969b", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/AbstractWebServiceOutboundGateway.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/AbstractWebServiceOutboundGateway.java\nindex c4546999e6..6b82fec441 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/AbstractWebServiceOutboundGateway.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/AbstractWebServiceOutboundGateway.java\n\n@@ -172,9 +172,7 @@ public abstract class AbstractWebServiceOutboundGateway extends AbstractReplyPro\n \t */\n \t@Deprecated\n \tpublic void setMessageSender(WebServiceMessageSender messageSender) {\n-\t\tAssert.state(!this.webServiceTemplateExplicitlySet,\n-\t\t\t\t() -> \"'messageSender' must be specified on the provided: \" + this.webServiceTemplate);\n-\t\tthis.webServiceTemplate.setMessageSender(messageSender);\n+\t\tsetMessageSenders(messageSender);\n \t}\n \n \tpublic void setMessageSenders(WebServiceMessageSender... messageSenders) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTcwMA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379049700", "bodyText": "Hm. Looks like we need to consider to support an EncodingMode instead. Similar to what we have now in HTTP and WebFlux.\nDifferent issue though", "author": "artembilan", "createdAt": "2020-02-13T18:46:04Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsOutboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import java.util.Map;\n+\n+import org.springframework.expression.Expression;\n+import org.springframework.integration.dsl.MessageHandlerSpec;\n+import org.springframework.integration.ws.AbstractWebServiceOutboundGateway;\n+import org.springframework.integration.ws.SoapHeaderMapper;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n+import org.springframework.ws.client.core.WebServiceMessageCallback;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n+\n+/**\n+ * The base {@link MessageHandlerSpec} for {@link AbstractWebServiceOutboundGateway}s.\n+ *\n+ * @param <S> the target {@link BaseWsOutboundGatewaySpec} implementation type.\n+ * @param <E> the target {@link AbstractWebServiceOutboundGateway} implementation type.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class BaseWsOutboundGatewaySpec<\n+\t\tS extends BaseWsOutboundGatewaySpec<S, E>, E extends AbstractWebServiceOutboundGateway>\n+\textends MessageHandlerSpec<S, E> {\n+\n+\t/**\n+\t * Configure the header mapper.\n+\t * @param headerMapper the mapper.\n+\t * @return the spec.\n+\t */\n+\tpublic S headerMapper(SoapHeaderMapper headerMapper) {\n+\t\tthis.target.setHeaderMapper(headerMapper);\n+\t\treturn _this();\n+\t}\n+\n+\t/**\n+\t * Set the Map of URI variable expressions to evaluate against the outbound message\n+\t * when replacing the variable placeholders in a URI template.\n+\t * @param uriVariableExpressions The URI variable expressions.\n+\t * @return the spec.\n+\t */\n+\tpublic S uriVariableExpressions(Map<String, Expression> uriVariableExpressions) {\n+\t\tthis.target.setUriVariableExpressions(uriVariableExpressions);\n+\t\treturn _this();\n+\t}\n+\n+\t/**\n+\t * Specify whether the URI should be encoded after any <code>uriVariables</code>\n+\t * are expanded and before sending the request. The default value is <code>true</code>.\n+\t * @param encodeUri true if the URI should be encoded.\n+\t * @return the spec.\n+\t * @see org.springframework.web.util.UriComponentsBuilder\n+\t */\n+\tpublic S encodeUri(boolean encodeUri) {", "originalCommit": "2a96e81b5a3e0faf34792956000e365159974112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NDAxNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379064016", "bodyText": "True (different issue).", "author": "garyrussell", "createdAt": "2020-02-13T19:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NjIyMA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379076220", "bodyText": "#3180", "author": "artembilan", "createdAt": "2020-02-13T19:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsOutboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsOutboundGatewaySpec.java\nindex 979cadf948..0f36d86436 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsOutboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsOutboundGatewaySpec.java\n\n@@ -16,16 +16,19 @@\n \n package org.springframework.integration.ws.dsl;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n import org.springframework.expression.Expression;\n import org.springframework.integration.dsl.MessageHandlerSpec;\n+import org.springframework.integration.util.JavaUtils;\n import org.springframework.integration.ws.AbstractWebServiceOutboundGateway;\n import org.springframework.integration.ws.SoapHeaderMapper;\n import org.springframework.ws.WebServiceMessageFactory;\n import org.springframework.ws.client.core.FaultMessageResolver;\n import org.springframework.ws.client.core.WebServiceMessageCallback;\n import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n import org.springframework.ws.transport.WebServiceMessageSender;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MDM4OA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379050388", "bodyText": "I wouldn't expose two of these ctors since it feels much natural just to call those configuration options...", "author": "artembilan", "createdAt": "2020-02-13T18:47:24Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsInboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import org.springframework.integration.ws.MarshallingWebServiceInboundGateway;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+\n+/**\n+ * The spec for a {@link MarshallingWebServiceInboundGateway}.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class MarshallingWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<MarshallingWsInboundGatewaySpec,\n+\tMarshallingWebServiceInboundGateway> {\n+\n+\tprotected MarshallingWsInboundGatewaySpec() {\n+\t\tsuper(new MarshallingWebServiceInboundGateway());\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided {@link Marshaller} (which must also implement\n+\t * {@link Unmarshaller}).\n+\t * @param marshaller the marshaller.\n+\t */\n+\tprotected MarshallingWsInboundGatewaySpec(Marshaller marshaller) {\n+\t\tsuper(new MarshallingWebServiceInboundGateway(marshaller));\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param marshaller the marshaller.\n+\t * @param unmarshaller the unmarshaller.\n+\t */\n+\tprotected MarshallingWsInboundGatewaySpec(Marshaller marshaller, Unmarshaller unmarshaller) {", "originalCommit": "2a96e81b5a3e0faf34792956000e365159974112", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsInboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsInboundGatewaySpec.java\nindex e29357e524..70d47c887e 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsInboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsInboundGatewaySpec.java\n\n@@ -30,27 +30,9 @@ import org.springframework.oxm.Unmarshaller;\n public class MarshallingWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<MarshallingWsInboundGatewaySpec,\n \tMarshallingWebServiceInboundGateway> {\n \n-\tprotected MarshallingWsInboundGatewaySpec() {\n-\t\tsuper(new MarshallingWebServiceInboundGateway());\n-\t}\n+\tprotected Marshaller gatewayMarshaller; // NOSONAR\n \n-\t/**\n-\t * Construct an instance with the provided {@link Marshaller} (which must also implement\n-\t * {@link Unmarshaller}).\n-\t * @param marshaller the marshaller.\n-\t */\n-\tprotected MarshallingWsInboundGatewaySpec(Marshaller marshaller) {\n-\t\tsuper(new MarshallingWebServiceInboundGateway(marshaller));\n-\t}\n-\n-\t/**\n-\t * Construct an instance with the provided arguments.\n-\t * @param marshaller the marshaller.\n-\t * @param unmarshaller the unmarshaller.\n-\t */\n-\tprotected MarshallingWsInboundGatewaySpec(Marshaller marshaller, Unmarshaller unmarshaller) {\n-\t\tsuper(new MarshallingWebServiceInboundGateway(marshaller, unmarshaller));\n-\t}\n+\tprotected Unmarshaller gatewayUnmarshaller; // NOSONAR\n \n \t/**\n \t * Specify a marshaller to use.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1Mjk0Mg==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379052942", "bodyText": "I think we need to consider to have all of these ctors spreaded as options and build the final MarshallingWebServiceOutboundGateway in the doGet().\nIf possible, of course...\nOtherwise it doesn't look too useful to have such a DSL spec based only on ctors", "author": "artembilan", "createdAt": "2020-02-13T18:52:13Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.lang.Nullable;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n+\n+/**\n+ * The spec for a {@link MarshallingWebServiceOutboundGateway}.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class MarshallingWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<\n+\tMarshallingWsOutboundGatewaySpec, MarshallingWebServiceOutboundGateway> {\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t * @param marshaller the marshaller.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(DestinationProvider destinationProvider, Marshaller marshaller) {\n+\t\tthis(destinationProvider, marshaller, null, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t * @param marshaller the marshaller.\n+\t * @param unmarshaller the unmarshaller.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(DestinationProvider destinationProvider, Marshaller marshaller,\n+\t\t\tUnmarshaller unmarshaller) {\n+\t\tthis(destinationProvider, marshaller, unmarshaller, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t * @param marshaller the marshaller.\n+\t * @param messageFactory the message factory.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(DestinationProvider destinationProvider, Marshaller marshaller,\n+\t\t\tWebServiceMessageFactory messageFactory) {\n+\n+\t\tthis(destinationProvider, marshaller, null, messageFactory);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t * @param marshaller the marshaller.\n+\t * @param unmarshaller the unmarshaller.\n+\t * @param messageFactory the message factory.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(DestinationProvider destinationProvider,\n+\t\t\t@Nullable Marshaller marshaller, @Nullable Unmarshaller unmarshaller,\n+\t\t\tWebServiceMessageFactory messageFactory) {\n+\n+\t\tthis.target = new MarshallingWebServiceOutboundGateway(destinationProvider, marshaller, unmarshaller,\n+\t\t\t\tmessageFactory);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t * @param marshaller the marshaller.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(String uri, Marshaller marshaller) {\n+\t\tthis(uri, marshaller, (WebServiceMessageFactory) null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t * @param marshaller the marshaller.\n+\t * @param messageFactory the message factory.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(String uri, Marshaller marshaller,\n+\t\t\tWebServiceMessageFactory messageFactory) {\n+\n+\t\tthis(uri, marshaller, null, messageFactory);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t * @param marshaller the marshaller.\n+\t * @param unmarshaller the unmarshaller.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(String uri, Marshaller marshaller, Unmarshaller unmarshaller) {\n+\t\tthis(uri, marshaller, unmarshaller, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t * @param marshaller the marshaller.\n+\t * @param unmarshaller the unmarshaller.\n+\t * @param messageFactory the message factory.\n+\t */\n+\tprotected MarshallingWsOutboundGatewaySpec(String uri,", "originalCommit": "2a96e81b5a3e0faf34792956000e365159974112", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2NDk1OQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379064959", "bodyText": "Yeah - will rework - seemed a little clunky to me; I think a CTOR that takes a WST would be useful and return a different spec in that case (one that doesn't offer the properties that are disallowed with an explicit WST; there are many).", "author": "garyrussell", "createdAt": "2020-02-13T19:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1Mjk0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\nindex 0f4c23ddae..2a8e7ddab3 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\n\n@@ -16,12 +16,16 @@\n \n package org.springframework.integration.ws.dsl;\n \n+import java.util.Arrays;\n+\n import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n-import org.springframework.lang.Nullable;\n import org.springframework.oxm.Marshaller;\n import org.springframework.oxm.Unmarshaller;\n import org.springframework.ws.WebServiceMessageFactory;\n-import org.springframework.ws.client.support.destination.DestinationProvider;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n \n /**\n  * The spec for a {@link MarshallingWebServiceOutboundGateway}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1Mzk2NQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r379053965", "bodyText": "Same here.\nWe may live with what you have so far, but I wonder if we really can make it more natural builder style way...", "author": "artembilan", "createdAt": "2020-02-13T18:53:50Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import org.springframework.integration.ws.SimpleWebServiceOutboundGateway;\n+import org.springframework.lang.Nullable;\n+import org.springframework.ws.WebServiceMessage;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.SourceExtractor;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n+\n+/**\n+ * The spec for a {@link SimpleWebServiceOutboundGateway}.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class SimpleWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<\n+\tSimpleWsOutboundGatewaySpec, SimpleWebServiceOutboundGateway> {\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t */\n+\tprotected SimpleWsOutboundGatewaySpec(DestinationProvider destinationProvider) {\n+\t\tthis(destinationProvider, null, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t * @param sourceExtractor the source extractor.\n+\t */\n+\tprotected SimpleWsOutboundGatewaySpec(DestinationProvider destinationProvider, SourceExtractor<?> sourceExtractor) {\n+\t\tthis(destinationProvider, sourceExtractor, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param destinationProvider the destination provider.\n+\t * @param sourceExtractor the source extractor.\n+\t * @param messageFactory the message factory.\n+\t */\n+\tprotected SimpleWsOutboundGatewaySpec(DestinationProvider destinationProvider,\n+\t\t\t@Nullable SourceExtractor<?> sourceExtractor,\n+\t\t\t@Nullable WebServiceMessageFactory messageFactory) {\n+\n+\t\tthis.target = new SimpleWebServiceOutboundGateway(destinationProvider, sourceExtractor, messageFactory);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t */\n+\tprotected SimpleWsOutboundGatewaySpec(String uri) {\n+\t\tthis(uri, null, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t * @param sourceExtractor the source extractor.\n+\t */\n+\tprotected SimpleWsOutboundGatewaySpec(String uri, SourceExtractor<?> sourceExtractor) {\n+\t\tthis(uri, sourceExtractor, null);\n+\t}\n+\n+\t/**\n+\t * Construct an instance with the provided arguments.\n+\t * @param uri the URI.\n+\t * @param sourceExtractor the source extractor.\n+\t * @param messageFactory the message factory.\n+\t */\n+\tprotected SimpleWsOutboundGatewaySpec(String uri,", "originalCommit": "2a96e81b5a3e0faf34792956000e365159974112", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java\nindex 47ef4cde9d..697452645f 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java\n\n@@ -16,12 +16,17 @@\n \n package org.springframework.integration.ws.dsl;\n \n+import java.util.Arrays;\n+\n+import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n import org.springframework.integration.ws.SimpleWebServiceOutboundGateway;\n-import org.springframework.lang.Nullable;\n import org.springframework.ws.WebServiceMessage;\n import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n import org.springframework.ws.client.core.SourceExtractor;\n-import org.springframework.ws.client.support.destination.DestinationProvider;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n \n /**\n  * The spec for a {@link SimpleWebServiceOutboundGateway}.\n"}}, {"oid": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "url": "https://github.com/spring-projects/spring-integration/commit/d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "message": "* Rework to improve fluency\n\n- reduce the number of factory methods and use a different spec when\n  an external WST is provided.", "committedDate": "2020-02-18T22:21:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MTAwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382191006", "bodyText": "Any hints about this assemble API?\nWhy do we need it?\nLooks like there is no override.\nPossible even won't be ...", "author": "artembilan", "createdAt": "2020-02-20T18:51:49Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsInboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import org.springframework.integration.dsl.MessagingGatewaySpec;\n+import org.springframework.integration.ws.AbstractWebServiceInboundGateway;\n+import org.springframework.integration.ws.SoapHeaderMapper;\n+\n+/**\n+ * Base {@link MessagingGatewaySpec} for web services.\n+ *\n+ * @param <S> the target {@link BaseWsInboundGatewaySpec} implementation type.\n+ * @param <E> the target {@link AbstractWebServiceInboundGateway} implementation type.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public abstract class BaseWsInboundGatewaySpec<\n+\t\tS extends BaseWsInboundGatewaySpec<S, E>, E extends AbstractWebServiceInboundGateway>\n+\textends MessagingGatewaySpec<S, E> {\n+\n+\t/**\n+\t * Construct an instance.\n+\t */\n+\tprotected BaseWsInboundGatewaySpec() {\n+\t\tsuper(null);\n+\t}\n+\n+\t/**\n+\t * Configure the header mapper.\n+\t * @param headerMapper the mapper.\n+\t * @return the spec.\n+\t */\n+\tpublic S headerMapper(SoapHeaderMapper headerMapper) {\n+\t\tthis.target.setHeaderMapper(headerMapper);\n+\t\treturn _this();\n+\t}\n+\n+\t@Override\n+\tprotected E doGet() {\n+\t\treturn assemble(create());\n+\t}\n+\n+\tprotected abstract E create();\n+\n+\tprotected E assemble(E gateway) {", "originalCommit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwNTkwOA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382205908", "bodyText": "Just for consistency with the outbound spec, in case common properties are added later.", "author": "garyrussell", "createdAt": "2020-02-20T19:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5MTAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "5789d7409fd05394e0f1fee63455f79caaf9572d", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsInboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsInboundGatewaySpec.java\nindex fa0e02320e..b664a62cb4 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsInboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/BaseWsInboundGatewaySpec.java\n\n@@ -30,15 +30,16 @@ import org.springframework.integration.ws.SoapHeaderMapper;\n  * @since 5.3\n  *\n  */\n-public abstract class BaseWsInboundGatewaySpec<\n+public class BaseWsInboundGatewaySpec<\n \t\tS extends BaseWsInboundGatewaySpec<S, E>, E extends AbstractWebServiceInboundGateway>\n \textends MessagingGatewaySpec<S, E> {\n \n \t/**\n-\t * Construct an instance.\n+\t * Construct an instance for the gateway.\n+\t * @param gateway the gateway.\n \t */\n-\tprotected BaseWsInboundGatewaySpec() {\n-\t\tsuper(null);\n+\tprotected BaseWsInboundGatewaySpec(E gateway) {\n+\t\tsuper(gateway);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NDI0MQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382194241", "bodyText": "Blank line in between class members.", "author": "artembilan", "createdAt": "2020-02-20T18:57:55Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import java.util.Arrays;\n+\n+import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.integration.ws.SimpleWebServiceOutboundGateway;\n+import org.springframework.ws.WebServiceMessage;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n+import org.springframework.ws.client.core.SourceExtractor;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n+\n+/**\n+ * The spec for a {@link SimpleWebServiceOutboundGateway}.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class SimpleWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<\n+\tSimpleWsOutboundGatewaySpec, SimpleWebServiceOutboundGateway> {\n+\n+\tprotected SourceExtractor<?> sourceExtractor; // NOSONAR\n+\n+\tprotected SimpleWsOutboundGatewaySpec(WebServiceTemplate template) {\n+\t\tthis.template = template;\n+\t}\n+\n+\t/**\n+\t * Configure a {@link SourceExtractor} to use.\n+\t * @param extractor the extractor.\n+\t * @return the spec.\n+\t */\n+\tpublic SimpleWsOutboundGatewaySpec sourceExtractor(SourceExtractor<?> extractor) {\n+\t\tthis.sourceExtractor = extractor;\n+\t\treturn this;\n+\t}\n+\n+\t/**\n+\t * Specify a flag to return the whole {@link WebServiceMessage} or build the\n+\t * {@code payload} based on {@link WebServiceMessage}\n+\t * and populated headers according {@code headerMapper} configuration.\n+\t * Defaults to extract payload.\n+\t * @param extract build payload or return a whole {@link WebServiceMessage}\n+\t * @return the spec.\n+\t */\n+\tpublic SimpleWsOutboundGatewaySpec extractPayload(boolean extract) {\n+\t\tthis.extractPayload = extract;\n+\t\treturn this;\n+\t}\n+\n+\n+\t@Override\n+\tprotected SimpleWebServiceOutboundGateway assemble(SimpleWebServiceOutboundGateway gateway) {\n+\t\tSimpleWebServiceOutboundGateway assembled = super.assemble(gateway);\n+\t\tassembled.setExtractPayload(this.extractPayload);\n+\t\treturn assembled;\n+\t}\n+\n+\t@Override\n+\tprotected SimpleWebServiceOutboundGateway create() {\n+\t\tSimpleWebServiceOutboundGateway gateway;\n+\t\tif (this.destinationProvider != null) {\n+\t\t\tgateway = new SimpleWebServiceOutboundGateway(this.destinationProvider, this.sourceExtractor,\n+\t\t\t\t\tthis.webServiceMessageFactory);\n+\t\t}\n+\t\telse {\n+\t\t\tgateway = new SimpleWebServiceOutboundGateway(this.uri, this.sourceExtractor,\n+\t\t\t\t\tthis.webServiceMessageFactory);\n+\t\t}\n+\t\tgateway.setWebServiceTemplate(this.template);\n+\t\treturn gateway;\n+\t}\n+\n+\t/**\n+\t * Spec for a {@link MarshallingWebServiceOutboundGateway} where an external\n+\t * {@link WebServiceTemplate} is not provided.\n+\t *\n+\t */\n+\tpublic static class SimpleWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<\n+\t\t\tSimpleWsOutboundGatewayNoTemplateSpec, SimpleWebServiceOutboundGateway> {\n+\n+\t\tprotected SourceExtractor<?> sourceExtractor; // NOSONAR\n+\t\tprivate boolean extractPayload;", "originalCommit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5789d7409fd05394e0f1fee63455f79caaf9572d", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java\nindex 697452645f..47ef4cde9d 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/SimpleWsOutboundGatewaySpec.java\n\n@@ -16,17 +16,12 @@\n \n package org.springframework.integration.ws.dsl;\n \n-import java.util.Arrays;\n-\n-import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n import org.springframework.integration.ws.SimpleWebServiceOutboundGateway;\n+import org.springframework.lang.Nullable;\n import org.springframework.ws.WebServiceMessage;\n import org.springframework.ws.WebServiceMessageFactory;\n-import org.springframework.ws.client.core.FaultMessageResolver;\n import org.springframework.ws.client.core.SourceExtractor;\n-import org.springframework.ws.client.core.WebServiceTemplate;\n-import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n-import org.springframework.ws.transport.WebServiceMessageSender;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n \n /**\n  * The spec for a {@link SimpleWebServiceOutboundGateway}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NDgzNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382194834", "bodyText": "Longer than 120.", "author": "artembilan", "createdAt": "2020-02-20T18:59:04Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import java.util.Arrays;\n+\n+import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n+\n+/**\n+ * The spec for a {@link MarshallingWebServiceOutboundGateway}.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class MarshallingWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<\n+\t\tMarshallingWsOutboundGatewaySpec, MarshallingWebServiceOutboundGateway> {\n+\n+\tprotected MarshallingWsOutboundGatewaySpec(WebServiceTemplate template) {\n+\t\tthis.template = template;\n+\t}\n+\n+\t@Override\n+\tprotected MarshallingWebServiceOutboundGateway create() {\n+\t\tif (this.destinationProvider != null) {\n+\t\t\treturn new MarshallingWebServiceOutboundGateway(this.destinationProvider, this.template);\n+\t\t}\n+\t\telse {\n+\t\t\treturn new MarshallingWebServiceOutboundGateway(this.uri, this.template);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Spec for a {@link MarshallingWebServiceOutboundGateway} where an external\n+\t * {@link WebServiceTemplate} is not provided.\n+\t *\n+\t */\n+\tpublic static class MarshallingWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<\n+\t\t\tMarshallingWsOutboundGatewayNoTemplateSpec, MarshallingWebServiceOutboundGateway> {\n+\n+\t\tprotected Marshaller gatewayMarshaller;\n+\n+\t\tprotected Unmarshaller gatewayUnmarshaller;\n+\n+\t\t/**\n+\t\t * Configure the marshaller to use.\n+\t\t * @param marshaller the marshaller.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec marshaller(Marshaller marshaller) {\n+\t\t\tthis.gatewayMarshaller = marshaller;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Configure the unmarshaller to use.\n+\t\t * @param unmarshaller the unmarshaller.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec unmarshaller(Unmarshaller unmarshaller) {\n+\t\t\tthis.gatewayUnmarshaller = unmarshaller;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Specify the {@link WebServiceMessageFactory} to use.\n+\t\t * @param messageFactory the message factory.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec messageFactory(WebServiceMessageFactory messageFactory) {\n+\t\t\tthis.webServiceMessageFactory = messageFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Specify the {@link FaultMessageResolver} to use.\n+\t\t * @param faultMessageResolver the resolver.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec faultMessageResolver(FaultMessageResolver faultMessageResolver) {", "originalCommit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5789d7409fd05394e0f1fee63455f79caaf9572d", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\nindex 2a8e7ddab3..0f4c23ddae 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\n\n@@ -16,16 +16,12 @@\n \n package org.springframework.integration.ws.dsl;\n \n-import java.util.Arrays;\n-\n import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.lang.Nullable;\n import org.springframework.oxm.Marshaller;\n import org.springframework.oxm.Unmarshaller;\n import org.springframework.ws.WebServiceMessageFactory;\n-import org.springframework.ws.client.core.FaultMessageResolver;\n-import org.springframework.ws.client.core.WebServiceTemplate;\n-import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n-import org.springframework.ws.transport.WebServiceMessageSender;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n \n /**\n  * The spec for a {@link MarshallingWebServiceOutboundGateway}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NTAxMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382195013", "bodyText": "Longer than 120.", "author": "artembilan", "createdAt": "2020-02-20T18:59:22Z", "path": "spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import java.util.Arrays;\n+\n+import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n+\n+/**\n+ * The spec for a {@link MarshallingWebServiceOutboundGateway}.\n+ *\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class MarshallingWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<\n+\t\tMarshallingWsOutboundGatewaySpec, MarshallingWebServiceOutboundGateway> {\n+\n+\tprotected MarshallingWsOutboundGatewaySpec(WebServiceTemplate template) {\n+\t\tthis.template = template;\n+\t}\n+\n+\t@Override\n+\tprotected MarshallingWebServiceOutboundGateway create() {\n+\t\tif (this.destinationProvider != null) {\n+\t\t\treturn new MarshallingWebServiceOutboundGateway(this.destinationProvider, this.template);\n+\t\t}\n+\t\telse {\n+\t\t\treturn new MarshallingWebServiceOutboundGateway(this.uri, this.template);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Spec for a {@link MarshallingWebServiceOutboundGateway} where an external\n+\t * {@link WebServiceTemplate} is not provided.\n+\t *\n+\t */\n+\tpublic static class MarshallingWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<\n+\t\t\tMarshallingWsOutboundGatewayNoTemplateSpec, MarshallingWebServiceOutboundGateway> {\n+\n+\t\tprotected Marshaller gatewayMarshaller;\n+\n+\t\tprotected Unmarshaller gatewayUnmarshaller;\n+\n+\t\t/**\n+\t\t * Configure the marshaller to use.\n+\t\t * @param marshaller the marshaller.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec marshaller(Marshaller marshaller) {\n+\t\t\tthis.gatewayMarshaller = marshaller;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Configure the unmarshaller to use.\n+\t\t * @param unmarshaller the unmarshaller.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec unmarshaller(Unmarshaller unmarshaller) {\n+\t\t\tthis.gatewayUnmarshaller = unmarshaller;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Specify the {@link WebServiceMessageFactory} to use.\n+\t\t * @param messageFactory the message factory.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec messageFactory(WebServiceMessageFactory messageFactory) {\n+\t\t\tthis.webServiceMessageFactory = messageFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Specify the {@link FaultMessageResolver} to use.\n+\t\t * @param faultMessageResolver the resolver.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec faultMessageResolver(FaultMessageResolver faultMessageResolver) {\n+\t\t\tthis.faultMessageResolver = faultMessageResolver;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Specify the {@link WebServiceMessageSender}s to use.\n+\t\t * @param messageSenders the senders.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec messageSenders(WebServiceMessageSender... messageSenders) {\n+\t\t\tthis.messageSenders = Arrays.copyOf(messageSenders, messageSenders.length);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Specify the {@link ClientInterceptor}s to use.\n+\t\t * @param interceptors the interceptors.\n+\t\t * @return the spec.\n+\t\t */\n+\t\tpublic MarshallingWsOutboundGatewayNoTemplateSpec interceptors(ClientInterceptor... interceptors) {\n+\t\t\tthis.gatewayInterceptors = Arrays.copyOf(interceptors, interceptors.length);\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected MarshallingWebServiceOutboundGateway create() {\n+\t\t\tif (this.destinationProvider != null) {\n+\t\t\t\treturn new MarshallingWebServiceOutboundGateway(this.destinationProvider, this.gatewayMarshaller,\n+\t\t\t\t\t\tthis.gatewayUnmarshaller, this.webServiceMessageFactory);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\treturn new MarshallingWebServiceOutboundGateway(this.uri, this.gatewayMarshaller, this.gatewayUnmarshaller,", "originalCommit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5789d7409fd05394e0f1fee63455f79caaf9572d", "chunk": "diff --git a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\nindex 2a8e7ddab3..0f4c23ddae 100644\n--- a/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\n+++ b/spring-integration-ws/src/main/java/org/springframework/integration/ws/dsl/MarshallingWsOutboundGatewaySpec.java\n\n@@ -16,16 +16,12 @@\n \n package org.springframework.integration.ws.dsl;\n \n-import java.util.Arrays;\n-\n import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.lang.Nullable;\n import org.springframework.oxm.Marshaller;\n import org.springframework.oxm.Unmarshaller;\n import org.springframework.ws.WebServiceMessageFactory;\n-import org.springframework.ws.client.core.FaultMessageResolver;\n-import org.springframework.ws.client.core.WebServiceTemplate;\n-import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n-import org.springframework.ws.transport.WebServiceMessageSender;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n \n /**\n  * The spec for a {@link MarshallingWebServiceOutboundGateway}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NjI5MQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382196291", "bodyText": "Is it expected that we don't have any integration test with this new DSL used from an IntegrationFlow?", "author": "artembilan", "createdAt": "2020-02-20T19:01:44Z", "path": "spring-integration-ws/src/test/java/org/springframework/integration/ws/dsl/WsDslTests.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.ws.dsl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import org.springframework.expression.Expression;\n+import org.springframework.expression.common.LiteralExpression;\n+import org.springframework.integration.test.util.TestUtils;\n+import org.springframework.integration.ws.MarshallingWebServiceInboundGateway;\n+import org.springframework.integration.ws.MarshallingWebServiceOutboundGateway;\n+import org.springframework.integration.ws.SimpleWebServiceInboundGateway;\n+import org.springframework.integration.ws.SimpleWebServiceOutboundGateway;\n+import org.springframework.integration.ws.SoapHeaderMapper;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.Unmarshaller;\n+import org.springframework.ws.WebServiceMessageFactory;\n+import org.springframework.ws.client.core.FaultMessageResolver;\n+import org.springframework.ws.client.core.SourceExtractor;\n+import org.springframework.ws.client.core.WebServiceMessageCallback;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.client.support.destination.DestinationProvider;\n+import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n+import org.springframework.ws.transport.WebServiceMessageSender;\n+\n+/**\n+ * @author Gary Russell\n+ * @since 5.3\n+ *\n+ */\n+public class WsDslTests {", "originalCommit": "d4bdbc011bbc316ef64b278ef2cf70e735baf52c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwNDYxMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3178#discussion_r382204613", "bodyText": "I am not sure why an integration test is necessary since these tests verify the adapters are populated properly. But I can add one if you insist.", "author": "garyrussell", "createdAt": "2020-02-20T19:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NjI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5789d7409fd05394e0f1fee63455f79caaf9572d", "chunk": "diff --git a/spring-integration-ws/src/test/java/org/springframework/integration/ws/dsl/WsDslTests.java b/spring-integration-ws/src/test/java/org/springframework/integration/ws/dsl/WsDslTests.java\nindex 9f329a5905..d4b998df66 100644\n--- a/spring-integration-ws/src/test/java/org/springframework/integration/ws/dsl/WsDslTests.java\n+++ b/spring-integration-ws/src/test/java/org/springframework/integration/ws/dsl/WsDslTests.java\n\n@@ -38,7 +38,6 @@ import org.springframework.ws.WebServiceMessageFactory;\n import org.springframework.ws.client.core.FaultMessageResolver;\n import org.springframework.ws.client.core.SourceExtractor;\n import org.springframework.ws.client.core.WebServiceMessageCallback;\n-import org.springframework.ws.client.core.WebServiceTemplate;\n import org.springframework.ws.client.support.destination.DestinationProvider;\n import org.springframework.ws.client.support.interceptor.ClientInterceptor;\n import org.springframework.ws.transport.WebServiceMessageSender;\n"}}, {"oid": "5789d7409fd05394e0f1fee63455f79caaf9572d", "url": "https://github.com/spring-projects/spring-integration/commit/5789d7409fd05394e0f1fee63455f79caaf9572d", "message": "GH-2818: DSL support for -ws module\n\nResolves https://github.com/spring-projects/spring-integration/issues/2818", "committedDate": "2020-02-20T19:26:30Z", "type": "commit"}, {"oid": "1575fbe37c234c24f9fa00beefba4df27366149d", "url": "https://github.com/spring-projects/spring-integration/commit/1575fbe37c234c24f9fa00beefba4df27366149d", "message": "* Rework to improve fluency\n\n- reduce the number of factory methods and use a different spec when\n  an external WST is provided.", "committedDate": "2020-02-20T19:26:30Z", "type": "commit"}, {"oid": "4f09d5a2d6a5e504b6d13ca25d15c1586f7b969b", "url": "https://github.com/spring-projects/spring-integration/commit/4f09d5a2d6a5e504b6d13ca25d15c1586f7b969b", "message": "* Docs and address comments", "committedDate": "2020-02-20T19:54:43Z", "type": "commit"}, {"oid": "4f09d5a2d6a5e504b6d13ca25d15c1586f7b969b", "url": "https://github.com/spring-projects/spring-integration/commit/4f09d5a2d6a5e504b6d13ca25d15c1586f7b969b", "message": "* Docs and address comments", "committedDate": "2020-02-20T19:54:43Z", "type": "forcePushed"}]}