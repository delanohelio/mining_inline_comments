{"pr_number": 3163, "pr_title": "Populate a JsonHeaders.RESOLVABLE_TYPE on reply", "pr_createdAt": "2020-01-30T22:22:03Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3163", "timeline": [{"oid": "1ee090ca8fa94578962ee7e437e4602070864f85", "url": "https://github.com/spring-projects/spring-integration/commit/1ee090ca8fa94578962ee7e437e4602070864f85", "message": "Populate a JsonHeaders.RESOLVABLE_TYPE on reply\n\nFixes https://github.com/spring-projects/spring-integration-samples/issues/277\n\nIn the `AbstractAmqpOutboundEndpoint` the `JsonHeaders.RESOLVABLE_TYPE`\nfrom request message is copied to reply message making inconsistency downstream.\nThe `JsonToObjectTransformer` consults first a `JsonHeaders.RESOLVABLE_TYPE`\nand deserialize payload to wrong type\n\n* Fix `DefaultAmqpHeaderMapper` to populate a `JsonHeaders.RESOLVABLE_TYPE`\nalongside with other `JsonHeaders` populated from the reply AMQP message.\nThis way a `JsonHeaders.RESOLVABLE_TYPE` from request message won't have effect\n* To get access to classes, supply `AbstractHeaderMapper` with a bean factory `ClassLoader`\n* Introduce a couple utility methods into `JsonHeaders` for building a `ResolvableType`\n\n**Cherry-pick to 5.2.x**", "committedDate": "2020-01-30T22:21:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373584013", "bodyText": "Formatting inconsistent with the two changes above. This one looks more correct to me.", "author": "garyrussell", "createdAt": "2020-01-31T17:01:35Z", "path": "spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java", "diffHunk": "@@ -109,40 +109,43 @@ protected DefaultAmqpHeaderMapper(String[] requestHeaderNames, String[] replyHea\n \t\tMap<String, Object> headers = new HashMap<>();\n \t\ttry {\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.APP_ID, amqpMessageProperties.getAppId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CLUSTER_ID, amqpMessageProperties.getClusterId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.CONTENT_ENCODING, amqpMessageProperties.getContentEncoding(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong contentLength = amqpMessageProperties.getContentLength();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE, amqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t.acceptIfCondition(contentLength > 0, AmqpHeaders.CONTENT_LENGTH, contentLength, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n+\t\t\t\t\t\t\theaders::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.EXPIRATION, amqpMessageProperties.getExpiration(), headers::put);\n \t\t\tInteger messageCount = amqpMessageProperties.getMessageCount();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT, messageCount,\n-\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(messageCount != null && messageCount > 0, AmqpHeaders.MESSAGE_COUNT,\n+\t\t\t\t\t\t\tmessageCount,\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.MESSAGE_ID, amqpMessageProperties.getMessageId(), headers::put);\n \t\t\tInteger priority = amqpMessageProperties.getPriority();\n \t\t\tJavaUtils.INSTANCE\n-\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n-\t\t\t\t\tpriority, headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n-\t\t\t\t\t\theaders::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n-\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n-\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties.getReceivedUserId(), headers::put);\n+\t\t\t\t\t.acceptIfCondition(priority != null && priority > 0, IntegrationMessageHeaderAccessor.PRIORITY,\n+\t\t\t\t\t\t\tpriority, headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELAY, amqpMessageProperties.getReceivedDelay(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_EXCHANGE, amqpMessageProperties.getReceivedExchange(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_ROUTING_KEY, amqpMessageProperties.getReceivedRoutingKey(),\n+\t\t\t\t\t\t\theaders::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REDELIVERED, amqpMessageProperties.isRedelivered(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.REPLY_TO, amqpMessageProperties.getReplyTo(), headers::put)\n+\t\t\t\t\t.acceptIfNotNull(AmqpHeaders.TIMESTAMP, amqpMessageProperties.getTimestamp(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.TYPE, amqpMessageProperties.getType(), headers::put)\n+\t\t\t\t\t.acceptIfHasText(AmqpHeaders.RECEIVED_USER_ID, amqpMessageProperties\n+\t\t\t\t\t\t\t.getReceivedUserId(), headers::put);", "originalCommit": "1ee090ca8fa94578962ee7e437e4602070864f85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4OTA5MA==", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373589090", "bodyText": "Really? And I don't like breaking by dot and leaving a variable on the line with other calls. \ud83d\ude04", "author": "artembilan", "createdAt": "2020-01-31T17:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MDI2Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373590263", "bodyText": "I don't really mind either way; but I think it should be consistent.", "author": "garyrussell", "createdAt": "2020-01-31T17:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MTM3MA==", "url": "https://github.com/spring-projects/spring-integration/pull/3163#discussion_r373591370", "bodyText": "Yes, please, see the latest commit.\nThanks", "author": "artembilan", "createdAt": "2020-01-31T17:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NDAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "33e0c72102348574daa18dbdee0e0657caf2bf84", "chunk": "diff --git a/spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java b/spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java\nindex be8f3629a1..17d89133b2 100644\n--- a/spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java\n+++ b/spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java\n\n@@ -119,8 +119,7 @@ public class DefaultAmqpHeaderMapper extends AbstractHeaderMapper<MessagePropert\n \t\t\t\t\t.acceptIfHasText(AmqpHeaders.CONTENT_TYPE, amqpMessageProperties.getContentType(), headers::put)\n \t\t\t\t\t.acceptIfHasText(AmqpHeaders.CORRELATION_ID, amqpMessageProperties.getCorrelationId(), headers::put)\n \t\t\t\t\t.acceptIfNotNull(AmqpHeaders.RECEIVED_DELIVERY_MODE,\n-\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(),\n-\t\t\t\t\t\t\theaders::put);\n+\t\t\t\t\t\t\tamqpMessageProperties.getReceivedDeliveryMode(), headers::put);\n \t\t\tlong deliveryTag = amqpMessageProperties.getDeliveryTag();\n \t\t\tJavaUtils.INSTANCE\n \t\t\t\t\t.acceptIfCondition(deliveryTag > 0, AmqpHeaders.DELIVERY_TAG, deliveryTag, headers::put)\n"}}, {"oid": "33e0c72102348574daa18dbdee0e0657caf2bf84", "url": "https://github.com/spring-projects/spring-integration/commit/33e0c72102348574daa18dbdee0e0657caf2bf84", "message": "* Fix code formatting for arguments wrapping", "committedDate": "2020-01-31T17:14:27Z", "type": "commit"}]}