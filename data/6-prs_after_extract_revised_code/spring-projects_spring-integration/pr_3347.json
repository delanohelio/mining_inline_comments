{"pr_number": 3347, "pr_title": "GH-3340: IntegrationEvents  -add getSourceAsType()", "pr_createdAt": "2020-07-17T21:45:14Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2MjY4Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r457562683", "bodyText": "Yeah... I didn't mean to deprecate per-channel-adapter URL configuration.\nMy idea was just to deprecate a getUrl() since it not always reflect a connection reality.\nSince we have now that MqttConnectOptions getConnectionInfo() may be it is better to clone its instance and modify its serverURIs with the provided URL. So, we still can keep existing apps without respective modification for per-channel-adapter-client-factory.\nWDYT?", "author": "artembilan", "createdAt": "2020-07-20T17:07:15Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/AbstractMqttMessageDrivenChannelAdapter.java", "diffHunk": "@@ -54,14 +55,35 @@\n \n \tprotected final Lock topicLock = new ReentrantLock(); // NOSONAR\n \n-\tpublic AbstractMqttMessageDrivenChannelAdapter(String url, String clientId, String... topic) {\n+\t/**\n+\t * Construct an instance with the provided properties.\n+\t * @param clientId the client id.\n+\t * @param topics the topics.\n+\t * @since 5.4.\n+\t */\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic AbstractMqttMessageDrivenChannelAdapter(String clientId, String... topics) {\n+\t\tthis(null, clientId, topics);\n+\t}\n+\n+\t/**\n+\t * Deprecated - do not use; implementations must maintain the url or other connection\n+\t * information.\n+\t * @deprecated in favor of\n+\t * {@link #AbstractMqttMessageDrivenChannelAdapter(String, String...)}.\n+\t * @param url the url.\n+\t * @param clientId the client id.\n+\t * @param topics the topics.\n+\t */\n+\t@Deprecated", "originalCommit": "8b76bc84ac660e8345828c5453be0d40968bea4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMjgzNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r457602834", "bodyText": "Good point - I hadn't thought of the shared factory.", "author": "garyrussell", "createdAt": "2020-07-20T18:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2MjY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/AbstractMqttMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/AbstractMqttMessageDrivenChannelAdapter.java\nindex ef6b4a862f..366b36a21d 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/AbstractMqttMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/AbstractMqttMessageDrivenChannelAdapter.java\n\n@@ -55,35 +55,14 @@ public abstract class AbstractMqttMessageDrivenChannelAdapter extends MessagePro\n \n \tprotected final Lock topicLock = new ReentrantLock(); // NOSONAR\n \n-\t/**\n-\t * Construct an instance with the provided properties.\n-\t * @param clientId the client id.\n-\t * @param topics the topics.\n-\t * @since 5.4.\n-\t */\n-\t@SuppressWarnings(\"deprecation\")\n-\tpublic AbstractMqttMessageDrivenChannelAdapter(String clientId, String... topics) {\n-\t\tthis(null, clientId, topics);\n-\t}\n-\n-\t/**\n-\t * Deprecated - do not use; implementations must maintain the url or other connection\n-\t * information.\n-\t * @deprecated in favor of\n-\t * {@link #AbstractMqttMessageDrivenChannelAdapter(String, String...)}.\n-\t * @param url the url.\n-\t * @param clientId the client id.\n-\t * @param topics the topics.\n-\t */\n-\t@Deprecated\n-\tpublic AbstractMqttMessageDrivenChannelAdapter(@Nullable String url, String clientId, String... topics) {\n+\tpublic AbstractMqttMessageDrivenChannelAdapter(@Nullable String url, String clientId, String... topic) {\n \t\tAssert.hasText(clientId, \"'clientId' cannot be null or empty\");\n-\t\tAssert.notNull(topics, \"'topics' cannot be null\");\n-\t\tAssert.noNullElements(topics, \"'topics' cannot have null elements\");\n+\t\tAssert.notNull(topic, \"'topics' cannot be null\");\n+\t\tAssert.noNullElements(topic, \"'topics' cannot have null elements\");\n \t\tthis.url = url;\n \t\tthis.clientId = clientId;\n \t\tthis.topics = new LinkedHashSet<>();\n-\t\tfor (String t : topics) {\n+\t\tfor (String t : topic) {\n \t\t\tthis.topics.add(new Topic(t, 1));\n \t\t}\n \t}\n"}}, {"oid": "473ccc983cfdb1f4b35aa4da8d88b248499ecd35", "url": "https://github.com/spring-projects/spring-integration/commit/473ccc983cfdb1f4b35aa4da8d88b248499ecd35", "message": "GH-3340: IntegrationEvents  -add getSourceAsType()\n\nResolves https://github.com/spring-projects/spring-integration/issues/3340\n\n- add common super-interface for MQTT components\n- add `getConnectionInfo()` so users can examine server URIs etc", "committedDate": "2020-07-21T14:02:45Z", "type": "commit"}, {"oid": "69d0db064cd9e8f3c7389650fef6fa5d33a13340", "url": "https://github.com/spring-projects/spring-integration/commit/69d0db064cd9e8f3c7389650fef6fa5d33a13340", "message": "Reinstate per-adapter URIs - support multiple", "committedDate": "2020-07-21T14:02:45Z", "type": "commit"}, {"oid": "69d0db064cd9e8f3c7389650fef6fa5d33a13340", "url": "https://github.com/spring-projects/spring-integration/commit/69d0db064cd9e8f3c7389650fef6fa5d33a13340", "message": "Reinstate per-adapter URIs - support multiple", "committedDate": "2020-07-21T14:02:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4MjQ5NQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458182495", "bodyText": "M-m-m. May be this delegate should be just \"read-only\"?\nAnd all the setters should throw UnsupportedOperationException instead of delegation?", "author": "artembilan", "createdAt": "2020-07-21T15:22:18Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/core/DefaultMqttPahoClientFactory.java", "diffHunk": "@@ -95,9 +105,270 @@ public void setConnectionOptions(MqttConnectOptions options) {\n \n \t@Override\n \tpublic MqttConnectOptions getConnectionOptions() {\n-\t\treturn this.options;\n+\t\tif (this.serverUris == null) {\n+\t\t\treturn this.options;\n+\t\t}\n+\t\telse {\n+\t\t\treturn new ExtendedOptions();\n+\t\t}\n \t}\n \n+\t@Override\n+\tpublic void setServerUris(List<String> serverUris) {\n+\t\tthis.serverUris = serverUris;\n+\t}\n+\n+\tprivate class ExtendedOptions extends MqttConnectOptions {\n+\n+\t\t@Override\n+\t\tpublic char[] getPassword() {\n+\t\t\treturn DefaultMqttPahoClientFactory.this.options.getPassword();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setPassword(char[] password) {\n+\t\t\tDefaultMqttPahoClientFactory.this.options.setPassword(password);", "originalCommit": "69d0db064cd9e8f3c7389650fef6fa5d33a13340", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/core/DefaultMqttPahoClientFactory.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/core/DefaultMqttPahoClientFactory.java\nindex b8890dff87..c17eed727e 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/core/DefaultMqttPahoClientFactory.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/core/DefaultMqttPahoClientFactory.java\n\n@@ -105,270 +95,9 @@ public class DefaultMqttPahoClientFactory implements MqttPahoClientFactory {\n \n \t@Override\n \tpublic MqttConnectOptions getConnectionOptions() {\n-\t\tif (this.serverUris == null) {\n-\t\t\treturn this.options;\n-\t\t}\n-\t\telse {\n-\t\t\treturn new ExtendedOptions();\n-\t\t}\n+\t\treturn this.options;\n \t}\n \n-\t@Override\n-\tpublic void setServerUris(List<String> serverUris) {\n-\t\tthis.serverUris = serverUris;\n-\t}\n-\n-\tprivate class ExtendedOptions extends MqttConnectOptions {\n-\n-\t\t@Override\n-\t\tpublic char[] getPassword() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getPassword();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setPassword(char[] password) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setPassword(password);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getUserName() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getUserName();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setUserName(String userName) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setUserName(userName);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getMaxReconnectDelay() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getMaxReconnectDelay();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setMaxReconnectDelay(int maxReconnectDelay) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setMaxReconnectDelay(maxReconnectDelay);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setWill(MqttTopic topic, byte[] payload, int qos, boolean retained) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setWill(topic, payload, qos, retained);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setWill(String topic, byte[] payload, int qos, boolean retained) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setWill(topic, payload, qos, retained);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getKeepAliveInterval() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getKeepAliveInterval();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getMqttVersion() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getMqttVersion();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setKeepAliveInterval(int keepAliveInterval) throws IllegalArgumentException {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setKeepAliveInterval(keepAliveInterval);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getMaxInflight() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getMaxInflight();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setMaxInflight(int maxInflight) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setMaxInflight(maxInflight);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getConnectionTimeout() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getConnectionTimeout();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setConnectionTimeout(int connectionTimeout) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setConnectionTimeout(connectionTimeout);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic SocketFactory getSocketFactory() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getSocketFactory();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setSocketFactory(SocketFactory socketFactory) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setSocketFactory(socketFactory);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getWillDestination() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getWillDestination();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic MqttMessage getWillMessage() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getWillMessage();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Properties getSSLProperties() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getSSLProperties();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setSSLProperties(Properties props) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setSSLProperties(props);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean isHttpsHostnameVerificationEnabled() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.isHttpsHostnameVerificationEnabled();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setHttpsHostnameVerificationEnabled(boolean httpsHostnameVerificationEnabled) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setHttpsHostnameVerificationEnabled(httpsHostnameVerificationEnabled);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic HostnameVerifier getSSLHostnameVerifier() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getSSLHostnameVerifier();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setSSLHostnameVerifier(HostnameVerifier hostnameVerifier) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setSSLHostnameVerifier(hostnameVerifier);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean isCleanSession() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.isCleanSession();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setCleanSession(boolean cleanSession) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setCleanSession(cleanSession);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String[] getServerURIs() {\n-\t\t\tif (DefaultMqttPahoClientFactory.this.serverUris != null) {\n-\t\t\t\treturn DefaultMqttPahoClientFactory.this.serverUris.toArray(new String[0]);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\treturn DefaultMqttPahoClientFactory.this.options.getServerURIs();\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setServerURIs(String[] serverURIs) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setServerURIs(serverURIs);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setMqttVersion(int mqttVersion) throws IllegalArgumentException {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setMqttVersion(mqttVersion);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean isAutomaticReconnect() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.isAutomaticReconnect();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setAutomaticReconnect(boolean automaticReconnect) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setAutomaticReconnect(automaticReconnect);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getExecutorServiceTimeout() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getExecutorServiceTimeout();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setExecutorServiceTimeout(int executorServiceTimeout) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setExecutorServiceTimeout(executorServiceTimeout);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Properties getDebug() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getDebug();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void setCustomWebSocketHeaders(Properties props) {\n-\t\t\tDefaultMqttPahoClientFactory.this.options.setCustomWebSocketHeaders(props);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Properties getCustomWebSocketHeaders() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.getCustomWebSocketHeaders();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int hashCode() {\n-\t\t\tfinal int prime = 31;\n-\t\t\tint result = 1;\n-\t\t\tresult = prime * result + ((DefaultMqttPahoClientFactory.this.options == null)\n-\t\t\t\t\t? 0\n-\t\t\t\t\t: DefaultMqttPahoClientFactory.this.options.hashCode());\n-\t\t\tif (DefaultMqttPahoClientFactory.this.serverUris != null) {\n-\t\t\t\tresult += DefaultMqttPahoClientFactory.this.serverUris.hashCode();\n-\t\t\t}\n-\t\t\treturn result;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean equals(Object obj) {\n-\t\t\tif (obj == null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (getClass() != obj.getClass()) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tExtendedOptions other = (ExtendedOptions) obj;\n-\t\t\tif (DefaultMqttPahoClientFactory.this.options == null) {\n-\t\t\t\tif (other.getEnclosingInstance().options != null) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse if (!DefaultMqttPahoClientFactory.this.options.equals(other.getEnclosingInstance().options)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\treturn urisEqual(other.getEnclosingInstance().serverUris);\n-\t\t}\n-\n-\t\tprivate boolean urisEqual(List<String> other) {\n-\t\t\tif (other == null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (DefaultMqttPahoClientFactory.this.serverUris == null) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\treturn DefaultMqttPahoClientFactory.this.serverUris.equals(other);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String toString() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this.options.toString();\n-\t\t}\n-\n-\t\tprivate DefaultMqttPahoClientFactory getEnclosingInstance() {\n-\t\t\treturn DefaultMqttPahoClientFactory.this;\n-\t\t}\n-\n-\t}\n-\n-\t/**\n-\t * Deprecated.\n-\t * @deprecated - no longer used.\n-\t */\n-\t@Deprecated\n \tpublic static class Will {\n \n \t\tprivate final String topic;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjcwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458186706", "bodyText": "I wouldn't do this. It is mutation of an external shared factory.\nWhat drove you to drop that url-based configuration?\nI thought we just need to have a consistency on the read side...", "author": "artembilan", "createdAt": "2020-07-21T15:27:57Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -89,42 +94,91 @@\n \tprivate ApplicationEventPublisher applicationEventPublisher;\n \n \t/**\n-\t * Use this constructor for a single url (although it may be overridden\n-\t * if the server URI(s) are provided by the {@link MqttConnectOptions#getServerURIs()}\n-\t * provided by the {@link MqttPahoClientFactory}).\n+\t * Use this constructor for a single url (although it may be overridden if the server\n+\t * URI(s) are provided by the {@link MqttConnectOptions#getServerURIs()} provided by\n+\t * the {@link MqttPahoClientFactory}).\n+\t * @deprecated in favor of\n+\t * {@link #MqttPahoMessageDrivenChannelAdapter(List, String, MqttPahoClientFactory, String...)}\n+\t * - set the url in the client factory connection options.\n \t * @param url the URL.\n \t * @param clientId The client id.\n \t * @param clientFactory The client factory.\n \t * @param topic The topic(s).\n \t */\n+\t@Deprecated\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic MqttPahoMessageDrivenChannelAdapter(String url, String clientId, MqttPahoClientFactory clientFactory,\n \t\t\tString... topic) {\n \t\tsuper(url, clientId, topic);\n \t\tthis.clientFactory = clientFactory;\n \t}\n \n \t/**\n-\t * Use this constructor if the server URI(s) are provided by the {@link MqttConnectOptions#getServerURIs()}\n-\t * provided by the {@link MqttPahoClientFactory}.\n+\t * Use this constructor with a list of server URIs, which will take precedence over\n+\t * the factory's connection options' server URIs.\n+\t * @param serverUris the server URIs.\n+\t * @param clientId The client id.\n+\t * @param clientFactory The client factory.\n+\t * @param topic The topic(s).\n+\t * @since 5.4\n+\t */\n+\tpublic MqttPahoMessageDrivenChannelAdapter(List<String> serverUris, String clientId,\n+\t\t\tMqttPahoClientFactory clientFactory, String... topic) {\n+\t\tsuper(clientId, topic);\n+\t\tthis.clientFactory = clientFactory;\n+\t\tthis.clientFactory.setServerUris(serverUris);", "originalCommit": "69d0db064cd9e8f3c7389650fef6fa5d33a13340", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0ODUzMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458248533", "bodyText": "Oh, you're right - need to rethink.\nThe reason is if you want to connect to a cluster, the only way you can do it is via the connect options - here I am restoring the functionality, but enhanced to allow cluster per adapter with a single factory.", "author": "garyrussell", "createdAt": "2020-07-21T16:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NjcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\nindex 2e68437753..9a2fc0d3f4 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n\n@@ -97,36 +98,16 @@ public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDriv\n \t * Use this constructor for a single url (although it may be overridden if the server\n \t * URI(s) are provided by the {@link MqttConnectOptions#getServerURIs()} provided by\n \t * the {@link MqttPahoClientFactory}).\n-\t * @deprecated in favor of\n-\t * {@link #MqttPahoMessageDrivenChannelAdapter(List, String, MqttPahoClientFactory, String...)}\n-\t * - set the url in the client factory connection options.\n \t * @param url the URL.\n \t * @param clientId The client id.\n \t * @param clientFactory The client factory.\n \t * @param topic The topic(s).\n \t */\n-\t@Deprecated\n-\t@SuppressWarnings(\"deprecation\")\n \tpublic MqttPahoMessageDrivenChannelAdapter(String url, String clientId, MqttPahoClientFactory clientFactory,\n \t\t\tString... topic) {\n-\t\tsuper(url, clientId, topic);\n-\t\tthis.clientFactory = clientFactory;\n-\t}\n \n-\t/**\n-\t * Use this constructor with a list of server URIs, which will take precedence over\n-\t * the factory's connection options' server URIs.\n-\t * @param serverUris the server URIs.\n-\t * @param clientId The client id.\n-\t * @param clientFactory The client factory.\n-\t * @param topic The topic(s).\n-\t * @since 5.4\n-\t */\n-\tpublic MqttPahoMessageDrivenChannelAdapter(List<String> serverUris, String clientId,\n-\t\t\tMqttPahoClientFactory clientFactory, String... topic) {\n-\t\tsuper(clientId, topic);\n+\t\tsuper(url, clientId, topic);\n \t\tthis.clientFactory = clientFactory;\n-\t\tthis.clientFactory.setServerUris(serverUris);\n \t}\n \n \t/**\n"}}, {"oid": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "url": "https://github.com/spring-projects/spring-integration/commit/9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "message": "Restore single URL per adapter.", "committedDate": "2020-07-21T17:46:50Z", "type": "commit"}, {"oid": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "url": "https://github.com/spring-projects/spring-integration/commit/9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "message": "Restore single URL per adapter.", "committedDate": "2020-07-21T17:46:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4NzYxMQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458287611", "bodyText": "Better to extract local variable for URL to avoid noise from Sonar that we defer NPE calling the method several times.", "author": "artembilan", "createdAt": "2020-07-21T18:00:56Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -174,6 +183,16 @@ public void setApplicationEventPublisher(ApplicationEventPublisher applicationEv\n \t\tthis.applicationEventPublisher = applicationEventPublisher; // NOSONAR (inconsistent synchronization)\n \t}\n \n+\t@Override\n+\tpublic MqttConnectOptions getConnectionInfo() {\n+\t\tMqttConnectOptions options = this.clientFactory.getConnectionOptions();\n+\t\tif (options.getServerURIs() == null && getUrl() != null) {\n+\t\t\toptions = MqttUtils.cloneConnectOptions(options);\n+\t\t\toptions.setServerURIs(new String[] { getUrl() });", "originalCommit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c986a3f7d56a53659249261447f1ec891ea1a597", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\nindex 9a2fc0d3f4..570c921c05 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n\n@@ -186,9 +187,12 @@ public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDriv\n \t@Override\n \tpublic MqttConnectOptions getConnectionInfo() {\n \t\tMqttConnectOptions options = this.clientFactory.getConnectionOptions();\n-\t\tif (options.getServerURIs() == null && getUrl() != null) {\n-\t\t\toptions = MqttUtils.cloneConnectOptions(options);\n-\t\t\toptions.setServerURIs(new String[] { getUrl() });\n+\t\tif (options.getServerURIs() == null) {\n+\t\t\tString url = getUrl();\n+\t\t\tif (url != null) {\n+\t\t\t\toptions = MqttUtils.cloneConnectOptions(options);\n+\t\t\t\toptions.setServerURIs(new String[] { url });\n+\t\t\t}\n \t\t}\n \t\treturn options;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4Nzc2Mg==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458287762", "bodyText": "I think there is no deprecations any more.", "author": "artembilan", "createdAt": "2020-07-21T18:01:10Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -258,6 +277,7 @@ public void removeTopic(String... topic) {\n \t\t}\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")", "originalCommit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c986a3f7d56a53659249261447f1ec891ea1a597", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\nindex 9a2fc0d3f4..570c921c05 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n\n@@ -277,7 +281,6 @@ public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDriv\n \t\t}\n \t}\n \n-\t@SuppressWarnings(\"deprecation\")\n \tprivate synchronized void connectAndSubscribe() throws MqttException {\n \t\tMqttConnectOptions connectionOptions = this.clientFactory.getConnectionOptions();\n \t\tthis.cleanSession = connectionOptions.isCleanSession();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODE5NA==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458288194", "bodyText": "Looks like this one is out of use", "author": "artembilan", "createdAt": "2020-07-21T18:01:53Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java", "diffHunk": "@@ -68,6 +72,8 @@\n \n \tprivate final MqttPahoClientFactory clientFactory;\n \n+\tprivate Supplier<List<String>> uriSupplier;", "originalCommit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c986a3f7d56a53659249261447f1ec891ea1a597", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\nindex 9a2fc0d3f4..570c921c05 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/inbound/MqttPahoMessageDrivenChannelAdapter.java\n\n@@ -72,8 +75,6 @@ public class MqttPahoMessageDrivenChannelAdapter extends AbstractMqttMessageDriv\n \n \tprivate final MqttPahoClientFactory clientFactory;\n \n-\tprivate Supplier<List<String>> uriSupplier;\n-\n \tprivate int recoveryInterval = DEFAULT_RECOVERY_INTERVAL;\n \n \tprivate long completionTimeout = DEFAULT_COMPLETION_TIMEOUT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODQ4MQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458288481", "bodyText": "I don't see deprecations any more", "author": "artembilan", "createdAt": "2020-07-21T18:02:22Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java", "diffHunk": "@@ -92,13 +94,14 @@ public MqttPahoMessageHandler(String url, String clientId, MqttPahoClientFactory\n \t * @param clientFactory The client factory.\n \t * @since 4.1\n \t */\n+\t@SuppressWarnings(\"deprecation\")", "originalCommit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c986a3f7d56a53659249261447f1ec891ea1a597", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java\nindex f9e040b1b4..e291708444 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java\n\n@@ -94,7 +99,6 @@ public class MqttPahoMessageHandler extends AbstractMqttMessageHandler\n \t * @param clientFactory The client factory.\n \t * @since 4.1\n \t */\n-\t@SuppressWarnings(\"deprecation\")\n \tpublic MqttPahoMessageHandler(String clientId, MqttPahoClientFactory clientFactory) {\n \t\tsuper(null, clientId);\n \t\tthis.clientFactory = clientFactory;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4ODk0Mw==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458288943", "bodyText": "Looks like duplication for this ifs", "author": "artembilan", "createdAt": "2020-07-21T18:03:12Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java", "diffHunk": "@@ -154,6 +157,19 @@ public void setApplicationEventPublisher(ApplicationEventPublisher applicationEv\n \t\tthis.applicationEventPublisher = applicationEventPublisher;\n \t}\n \n+\t@Override\n+\tpublic MqttConnectOptions getConnectionInfo() {\n+\t\tMqttConnectOptions options = this.clientFactory.getConnectionOptions();\n+\t\tif (options.getServerURIs() == null && getUrl() != null) {\n+\t\t\tif (options.getServerURIs() == null && getUrl() != null) {", "originalCommit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c986a3f7d56a53659249261447f1ec891ea1a597", "chunk": "diff --git a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java\nindex f9e040b1b4..e291708444 100644\n--- a/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java\n+++ b/spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/outbound/MqttPahoMessageHandler.java\n\n@@ -160,12 +164,12 @@ public class MqttPahoMessageHandler extends AbstractMqttMessageHandler\n \t@Override\n \tpublic MqttConnectOptions getConnectionInfo() {\n \t\tMqttConnectOptions options = this.clientFactory.getConnectionOptions();\n-\t\tif (options.getServerURIs() == null && getUrl() != null) {\n-\t\t\tif (options.getServerURIs() == null && getUrl() != null) {\n+\t\tif (options.getServerURIs() == null) {\n+\t\t\tString url = getUrl();\n+\t\t\tif (url != null) {\n \t\t\t\toptions = MqttUtils.cloneConnectOptions(options);\n-\t\t\t\toptions.setServerURIs(new String[] { getUrl() });\n+\t\t\t\toptions.setServerURIs(new String[] { url });\n \t\t\t}\n-\t\t\toptions.setServerURIs(new String[] { getUrl() });\n \t\t}\n \t\treturn options;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTYwNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458289606", "bodyText": "Why does password have a special treatment?", "author": "artembilan", "createdAt": "2020-07-21T18:04:21Z", "path": "spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttUtils.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.mqtt.support;\n+\n+import org.eclipse.paho.client.mqttv3.MqttConnectOptions;\n+\n+import org.springframework.beans.BeanUtils;\n+\n+/**\n+ * MQTT Utilities\n+ *\n+ * @author Gary Russell\n+ * @since 5.4\n+ *\n+ */\n+public final class MqttUtils {\n+\n+\tprivate MqttUtils() {\n+\t}\n+\n+\t/**\n+\t * Clone the {@link MqttConnectOptions}, except the serverUris.\n+\t * @param options the options to clone.\n+\t * @return the clone.\n+\t */\n+\tpublic static MqttConnectOptions cloneConnectOptions(MqttConnectOptions options) {\n+\t\tMqttConnectOptions options2 = new MqttConnectOptions();\n+\t\tBeanUtils.copyProperties(options, options2, \"password\", \"serverURIs\");\n+\t\tif (options.getPassword() != null) {", "originalCommit": "9f1153b761f2478f6e0dacbabd8b76f2485a7dc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMjYyNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3347#discussion_r458302624", "bodyText": "setPassword clones the Char[]. Same thing with serverURIs - but we know they are null.", "author": "garyrussell", "createdAt": "2020-07-21T18:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTYwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c986a3f7d56a53659249261447f1ec891ea1a597", "url": "https://github.com/spring-projects/spring-integration/commit/c986a3f7d56a53659249261447f1ec891ea1a597", "message": "Code cleanup for previous commit.", "committedDate": "2020-07-21T18:39:39Z", "type": "commit"}]}