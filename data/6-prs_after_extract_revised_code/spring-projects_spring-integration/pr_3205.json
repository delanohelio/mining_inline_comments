{"pr_number": 3205, "pr_title": "GH-3204: Add channel interceptor support to flow definition", "pr_createdAt": "2020-02-29T21:11:11Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3205", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NjcwNw==", "url": "https://github.com/spring-projects/spring-integration/pull/3205#discussion_r386596707", "bodyText": "I think we need to return exactly an InterceptableChannel from here.\nAnd let's call it like currentInterceptableChannel()! A \"make\" is confusing a little bit...", "author": "artembilan", "createdAt": "2020-03-02T19:18:59Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java", "diffHunk": "@@ -179,6 +180,21 @@ protected MessageChannel getCurrentMessageChannel() {\n \t\treturn this.currentMessageChannel;\n \t}\n \n+\t/**\n+\t * Returns the current channel if it is an {@link InterceptableChannel}, otherwise registers a new implicit\n+\t * {@link DirectChannel} in the flow and returns that one.\n+\t * @return the current channel after the operation\n+\t */\n+\tprotected MessageChannel makeCurrentMessageChannelInterceptable() {", "originalCommit": "6dfd84db5129d75a2818abe6914b016564977676", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfba5449d28215bc1be19a99570e8f8e47710791", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java b/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\nindex ac79dcd582..aefd5bbc5f 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\n\n@@ -181,18 +182,21 @@ public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlo\n \t}\n \n \t/**\n-\t * Returns the current channel if it is an {@link InterceptableChannel}, otherwise registers a new implicit\n-\t * {@link DirectChannel} in the flow and returns that one.\n+\t * Return the current channel if it is an {@link InterceptableChannel}, otherwise register a new implicit\n+\t * {@link DirectChannel} in the flow and return that one.\n \t * @return the current channel after the operation\n \t */\n-\tprotected MessageChannel makeCurrentMessageChannelInterceptable() {\n+\tprotected InterceptableChannel currentInterceptableChannel() {\n \t\tMessageChannel currentChannel = getCurrentMessageChannel();\n-\t\tif (!(currentChannel instanceof InterceptableChannel)) {\n-\t\t\tcurrentChannel = new DirectChannel();\n-\t\t\tchannel(currentChannel);\n+\t\tif (currentChannel instanceof InterceptableChannel) {\n+\t\t\treturn (InterceptableChannel) currentChannel;\n+\t\t}\n+\t\telse {\n+\t\t\tDirectChannel newCurrentChannel = new DirectChannel();\n+\t\t\tchannel(newCurrentChannel);\n \t\t\tsetImplicitChannel(true);\n+\t\t\treturn newCurrentChannel;\n \t\t}\n-\t\treturn currentChannel;\n \t}\n \n \tprotected void setImplicitChannel(boolean implicitChannel) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NzIxNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3205#discussion_r386597216", "bodyText": "Method JavaDocs must be imperative style: https://github.com/spring-projects/spring-framework/wiki/Code-Style#javadoc-formatting", "author": "artembilan", "createdAt": "2020-03-02T19:20:03Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java", "diffHunk": "@@ -2829,6 +2840,26 @@ public B trigger(MessageTriggerAction triggerAction,\n \t\treturn handle(new ServiceActivatingHandler(triggerAction, \"trigger\"), endpointConfigurer);\n \t}\n \n+\t/**\n+\t * Adds one or more {@link ChannelInterceptor} implementations", "originalCommit": "6dfd84db5129d75a2818abe6914b016564977676", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfba5449d28215bc1be19a99570e8f8e47710791", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java b/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\nindex ac79dcd582..aefd5bbc5f 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\n\n@@ -2841,20 +2845,20 @@ public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlo\n \t}\n \n \t/**\n-\t * Adds one or more {@link ChannelInterceptor} implementations\n+\t * Add one or more {@link ChannelInterceptor} implementations\n \t * to the current {@link #currentMessageChannel}, in the given order, after any interceptors already registered.\n \t * @param interceptorArray one or more {@link ChannelInterceptor}s.\n \t * @return the current {@link BaseIntegrationFlowDefinition}.\n-\t * @throws IllegalArgumentException if no interceptors or at least one null value are provided\n+\t * @throws IllegalArgumentException if one or more null arguments are provided\n \t * @since 5.3\n \t */\n-\tpublic B interceptor(ChannelInterceptor... interceptorArray) {\n-\t\tAssert.notEmpty(interceptorArray, \"'interceptorArray' must not be null or empty.\");\n-\t\tAssert.noNullElements(interceptorArray, \"'interceptorArray' must not contain null values.\");\n+\tpublic B intercept(ChannelInterceptor... interceptorArray) {\n+\t\tAssert.notNull(interceptorArray, \"'interceptorArray' must not be null\");\n+\t\tAssert.noNullElements(interceptorArray, \"'interceptorArray' must not contain null elements\");\n \n-\t\tMessageChannel currentChannel = makeCurrentMessageChannelInterceptable();\n+\t\tInterceptableChannel currentChannel = currentInterceptableChannel();\n \t\tfor (ChannelInterceptor interceptor : interceptorArray) {\n-\t\t\t((InterceptableChannel) currentChannel).addInterceptor(interceptor);\n+\t\t\tcurrentChannel.addInterceptor(interceptor);\n \t\t}\n \n \t\treturn _this();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5OTMzNQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3205#discussion_r386599335", "bodyText": "Well, our style to make methods on this builder as verbs, in other words commands: do this or that.\nLook at this as EIP-operators!\nTherefore if we add this feature here, it has to be named as intercept().", "author": "artembilan", "createdAt": "2020-03-02T19:23:29Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java", "diffHunk": "@@ -2829,6 +2840,26 @@ public B trigger(MessageTriggerAction triggerAction,\n \t\treturn handle(new ServiceActivatingHandler(triggerAction, \"trigger\"), endpointConfigurer);\n \t}\n \n+\t/**\n+\t * Adds one or more {@link ChannelInterceptor} implementations\n+\t * to the current {@link #currentMessageChannel}, in the given order, after any interceptors already registered.\n+\t * @param interceptorArray one or more {@link ChannelInterceptor}s.\n+\t * @return the current {@link BaseIntegrationFlowDefinition}.\n+\t * @throws IllegalArgumentException if no interceptors or at least one null value are provided\n+\t * @since 5.3\n+\t */\n+\tpublic B interceptor(ChannelInterceptor... interceptorArray) {", "originalCommit": "6dfd84db5129d75a2818abe6914b016564977676", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dfba5449d28215bc1be19a99570e8f8e47710791", "chunk": "diff --git a/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java b/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\nindex ac79dcd582..aefd5bbc5f 100644\n--- a/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\n+++ b/spring-integration-core/src/main/java/org/springframework/integration/dsl/BaseIntegrationFlowDefinition.java\n\n@@ -2841,20 +2845,20 @@ public abstract class BaseIntegrationFlowDefinition<B extends BaseIntegrationFlo\n \t}\n \n \t/**\n-\t * Adds one or more {@link ChannelInterceptor} implementations\n+\t * Add one or more {@link ChannelInterceptor} implementations\n \t * to the current {@link #currentMessageChannel}, in the given order, after any interceptors already registered.\n \t * @param interceptorArray one or more {@link ChannelInterceptor}s.\n \t * @return the current {@link BaseIntegrationFlowDefinition}.\n-\t * @throws IllegalArgumentException if no interceptors or at least one null value are provided\n+\t * @throws IllegalArgumentException if one or more null arguments are provided\n \t * @since 5.3\n \t */\n-\tpublic B interceptor(ChannelInterceptor... interceptorArray) {\n-\t\tAssert.notEmpty(interceptorArray, \"'interceptorArray' must not be null or empty.\");\n-\t\tAssert.noNullElements(interceptorArray, \"'interceptorArray' must not contain null values.\");\n+\tpublic B intercept(ChannelInterceptor... interceptorArray) {\n+\t\tAssert.notNull(interceptorArray, \"'interceptorArray' must not be null\");\n+\t\tAssert.noNullElements(interceptorArray, \"'interceptorArray' must not contain null elements\");\n \n-\t\tMessageChannel currentChannel = makeCurrentMessageChannelInterceptable();\n+\t\tInterceptableChannel currentChannel = currentInterceptableChannel();\n \t\tfor (ChannelInterceptor interceptor : interceptorArray) {\n-\t\t\t((InterceptableChannel) currentChannel).addInterceptor(interceptor);\n+\t\t\tcurrentChannel.addInterceptor(interceptor);\n \t\t}\n \n \t\treturn _this();\n"}}, {"oid": "dfba5449d28215bc1be19a99570e8f8e47710791", "url": "https://github.com/spring-projects/spring-integration/commit/dfba5449d28215bc1be19a99570e8f8e47710791", "message": "GH-3204: Add channel interceptor support to flow definition\n\nAdds an `intercept()` builder method to register one or more\nchannel interceptors at the current flow position.\n\nFixes https://github.com/spring-projects/spring-integration/issues/3204\n\n* add `intercept(ChannelInterceptor...)` to `BaseIntegrationFlowDefinition`\n* refactor to reuse interceptable channel creation from `wireTap`\n* document the new operator", "committedDate": "2020-03-05T20:08:28Z", "type": "commit"}, {"oid": "dfba5449d28215bc1be19a99570e8f8e47710791", "url": "https://github.com/spring-projects/spring-integration/commit/dfba5449d28215bc1be19a99570e8f8e47710791", "message": "GH-3204: Add channel interceptor support to flow definition\n\nAdds an `intercept()` builder method to register one or more\nchannel interceptors at the current flow position.\n\nFixes https://github.com/spring-projects/spring-integration/issues/3204\n\n* add `intercept(ChannelInterceptor...)` to `BaseIntegrationFlowDefinition`\n* refactor to reuse interceptable channel creation from `wireTap`\n* document the new operator", "committedDate": "2020-03-05T20:08:28Z", "type": "forcePushed"}]}