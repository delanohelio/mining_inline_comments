{"pr_number": 3397, "pr_title": "GH-3395: Fix XML expression default for ARFOGateway", "pr_createdAt": "2020-10-02T15:55:04Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3397", "timeline": [{"oid": "11440576f8c26c75d5d5dbce9fe9ed95f655503b", "url": "https://github.com/spring-projects/spring-integration/commit/11440576f8c26c75d5d5dbce9fe9ed95f655503b", "message": "GH-3395: Fix XML expression default for ARFOGateway\n\nResolves https://github.com/spring-projects/spring-integration/issues/3395\n\nOutbound remote file gateway parser requires `expression` even though some\ncommands don't need or use it.\n\nTo avoid adding a factory bean, set a default value in the schema and interpret\nthat default as needed, depending on the command.", "committedDate": "2020-10-02T15:49:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNzc0Ng==", "url": "https://github.com/spring-projects/spring-integration/pull/3397#discussion_r498927746", "bodyText": "Why can't we set it to null from the parser and override it to \"payload\" if needed according command logic?", "author": "artembilan", "createdAt": "2020-10-02T16:33:26Z", "path": "spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java", "diffHunk": "@@ -187,21 +187,27 @@ public AbstractRemoteFileOutboundGateway(RemoteFileTemplate<F> remoteFileTemplat\n \t * 'get' etc), and an expression to determine the filename.\n \t * @param remoteFileTemplate the remote file template.\n \t * @param command the command.\n-\t * @param expression the filename expression.\n+\t * @param expressionArg the filename expression.\n \t */\n \tpublic AbstractRemoteFileOutboundGateway(RemoteFileTemplate<F> remoteFileTemplate, Command command,\n-\t\t\t@Nullable String expression) {\n+\t\t\t@Nullable String expressionArg) {\n \n \t\tAssert.notNull(remoteFileTemplate, \"'remoteFileTemplate' cannot be null\");\n \t\tthis.remoteFileTemplate = remoteFileTemplate;\n \t\tthis.command = command;\n+\t\tString expression = expressionArg;\n+\t\tboolean noExpressionNeeded = Command.LS.equals(this.command)\n+\t\t\t\t|| Command.NLST.equals(this.command)\n+\t\t\t\t|| Command.PUT.equals(this.command)\n+\t\t\t\t|| Command.MPUT.equals(this.command);\n+\t\tif (\"++xsd.expression.default++\".equals(expression)) {\n+\t\t\texpression = noExpressionNeeded ? null : \"payload\";", "originalCommit": "11440576f8c26c75d5d5dbce9fe9ed95f655503b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbafac4eb1b08f37a54a8488c3336750f5149ee1", "chunk": "diff --git a/spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java b/spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java\nindex b3b5f347ba..e3cee19327 100644\n--- a/spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java\n+++ b/spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java\n\n@@ -196,18 +196,14 @@ public abstract class AbstractRemoteFileOutboundGateway<F> extends AbstractReply\n \t\tthis.remoteFileTemplate = remoteFileTemplate;\n \t\tthis.command = command;\n \t\tString expression = expressionArg;\n-\t\tboolean noExpressionNeeded = Command.LS.equals(this.command)\n+\t\tboolean expressionNeeded = !(Command.LS.equals(this.command)\n \t\t\t\t|| Command.NLST.equals(this.command)\n \t\t\t\t|| Command.PUT.equals(this.command)\n-\t\t\t\t|| Command.MPUT.equals(this.command);\n-\t\tif (\"++xsd.expression.default++\".equals(expression)) {\n-\t\t\texpression = noExpressionNeeded ? null : \"payload\";\n+\t\t\t\t|| Command.MPUT.equals(this.command));\n+\t\tif (expression == null && expressionNeeded) {\n+\t\t\texpression = \"payload\";\n \t\t}\n \t\tif (expression == null) {\n-\t\t\tAssert.state(noExpressionNeeded,\n-\t\t\t\t\t\"Only LS, and NLST commands can rely on the working directory.\\n\" +\n-\t\t\t\t\t\t\t\"PUT and MPUT commands always use the payload.\\n\" +\n-\t\t\t\t\t\t\t\"All other commands must be supplied with a filename expression\");\n \t\t\tthis.fileNameProcessor = null;\n \t\t}\n \t\telse {\n"}}, {"oid": "cbafac4eb1b08f37a54a8488c3336750f5149ee1", "url": "https://github.com/spring-projects/spring-integration/commit/cbafac4eb1b08f37a54a8488c3336750f5149ee1", "message": "Move detection of default expression to parser.", "committedDate": "2020-10-02T17:25:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NTczMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3397#discussion_r498955733", "bodyText": "Why just this not enough?\nI mean we just call builder.addConstructorArgValue(element.getAttribute(EXPRESSION_ATTRIBUTE));.\nNothing more.\nWhat am I missing with null propagation and defering logic into the AbstractRemoteFileOutboundGateway.\nProbably that point is that expression was not optional in the past, so we left that if (element.hasAttribute(EXPRESSION_ATTRIBUTE)) { logic in the parser.\nBut it turns out that we just need to always call builder.addConstructorArgValue(expression);, so we got the proper ctor resolution even if expression is null.", "author": "artembilan", "createdAt": "2020-10-02T17:31:10Z", "path": "spring-integration-file/src/main/java/org/springframework/integration/file/config/AbstractRemoteFileOutboundGatewayParser.java", "diffHunk": "@@ -59,7 +59,11 @@ protected BeanDefinitionBuilder parseHandler(Element element, ParserContext pars\n \t\telse {\n \t\t\tbuilder.addConstructorArgValue(element.getAttribute(\"command\"));\n \t\t\tif (element.hasAttribute(EXPRESSION_ATTRIBUTE)) {\n-\t\t\t\tbuilder.addConstructorArgValue(element.getAttribute(EXPRESSION_ATTRIBUTE));\n+\t\t\t\tString expression = element.getAttribute(EXPRESSION_ATTRIBUTE);\n+\t\t\t\tif (\"++xsd.expression.default++\".equals(expression)) {\n+\t\t\t\t\texpression = null;\n+\t\t\t\t}\n+\t\t\t\tbuilder.addConstructorArgValue(expression);", "originalCommit": "cbafac4eb1b08f37a54a8488c3336750f5149ee1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "469e81750e921b899f7bfbf25d5234ab25b89f78", "chunk": "diff --git a/spring-integration-file/src/main/java/org/springframework/integration/file/config/AbstractRemoteFileOutboundGatewayParser.java b/spring-integration-file/src/main/java/org/springframework/integration/file/config/AbstractRemoteFileOutboundGatewayParser.java\nindex 81af665768..0a486a1641 100644\n--- a/spring-integration-file/src/main/java/org/springframework/integration/file/config/AbstractRemoteFileOutboundGatewayParser.java\n+++ b/spring-integration-file/src/main/java/org/springframework/integration/file/config/AbstractRemoteFileOutboundGatewayParser.java\n\n@@ -58,13 +58,7 @@ public abstract class AbstractRemoteFileOutboundGatewayParser extends AbstractCo\n \t\t}\n \t\telse {\n \t\t\tbuilder.addConstructorArgValue(element.getAttribute(\"command\"));\n-\t\t\tif (element.hasAttribute(EXPRESSION_ATTRIBUTE)) {\n-\t\t\t\tString expression = element.getAttribute(EXPRESSION_ATTRIBUTE);\n-\t\t\t\tif (\"++xsd.expression.default++\".equals(expression)) {\n-\t\t\t\t\texpression = null;\n-\t\t\t\t}\n-\t\t\t\tbuilder.addConstructorArgValue(expression);\n-\t\t\t}\n+\t\t\tbuilder.addConstructorArgValue(element.getAttribute(EXPRESSION_ATTRIBUTE));\n \t\t}\n \t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"command-options\", \"options\");\n \t\tIntegrationNamespaceUtils.setValueIfAttributeDefined(builder, element, \"reply-timeout\", \"sendTimeout\");\n"}}, {"oid": "469e81750e921b899f7bfbf25d5234ab25b89f78", "url": "https://github.com/spring-projects/spring-integration/commit/469e81750e921b899f7bfbf25d5234ab25b89f78", "message": "Polishing - just propagate the empty string attribute.", "committedDate": "2020-10-02T18:16:02Z", "type": "commit"}]}