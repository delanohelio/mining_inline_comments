{"pr_number": 142, "pr_title": "Sb sonarcloud issues", "pr_createdAt": "2020-03-30T22:05:22Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/142", "timeline": [{"oid": "cc4e59c91ccabb498143c3b023d8496d50913ded", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/cc4e59c91ccabb498143c3b023d8496d50913ded", "message": "refactor: bazel: sonarqube issues", "committedDate": "2020-03-30T21:43:03Z", "type": "commit"}, {"oid": "30e8b17b848443fd309dff2713df5d86cc1b5769", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/30e8b17b848443fd309dff2713df5d86cc1b5769", "message": "refactor: clang: sonarcloud issues", "committedDate": "2020-03-30T21:43:39Z", "type": "commit"}, {"oid": "7f2d0c848b2bca4974533f4c627d9cdbfa0aac9e", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/7f2d0c848b2bca4974533f4c627d9cdbfa0aac9e", "message": "refactor: clang: sonarcloud issue (complexity)", "committedDate": "2020-03-30T21:52:22Z", "type": "commit"}, {"oid": "6868ccfe8746a34981739c3f5b3d94f990f1f547", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/6868ccfe8746a34981739c3f5b3d94f990f1f547", "message": "refactor: whitespace", "committedDate": "2020-03-30T21:52:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MzMwNg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r400543306", "bodyText": "I'd prefer we changed this as it reads strangely to me. So instead of \"isLastCharWasEscapeChar\" we could do \"wasLastCharEscapeChar\".", "author": "taikuukaits", "createdAt": "2020-03-30T22:55:23Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {\n-                // Currently inside a quoted substring\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR) && !quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR) && quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (c == SPACE_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n-                } else if (c == TAB_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n-                } else {\n-                    newString.append(c);\n-                }\n+                processQuotedChar(parserState, c, newString);\n             }\n-            lastCharWasEscapeChar = (c == ESCAPE_CHAR);\n+            parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n         logger.trace(String.format(\"escapeQuotedWhitespace() changed %s to %s\", givenString, newString.toString()));\n         return newString.toString();\n     }\n+\n+    private void processQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        // Currently inside a quoted substring\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR) && !parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR) && parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (c == SPACE_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n+        } else if (c == TAB_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private void processNonQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(true);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private class ParserState {\n+        private boolean lastCharWasEscapeChar = false;\n+        private boolean inQuotes = false;\n+        private boolean quoteTypeIsDouble = false;\n+\n+        public boolean isLastCharWasEscapeChar() {", "originalCommit": "6868ccfe8746a34981739c3f5b3d94f990f1f547", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MzUwNQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r400543505", "bodyText": "Or if we wanted to keep the \"is\" maybe \"isLastCharEscapeChar\".", "author": "taikuukaits", "createdAt": "2020-03-30T22:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MzMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "66dd30b8f3eac44ee951aab4225d61deb1b61c22", "chunk": "diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\nindex 11f1c20d4..7616f90ca 100644\n--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\n+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\n\n@@ -107,10 +107,10 @@ public class CompileCommandParser {\n         final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!parserState.isInQuotes()) {\n-                processNonQuotedChar(parserState, c, newString);\n-            } else {\n+            if (parserState.isInQuotes()) {\n                 processQuotedChar(parserState, c, newString);\n+            } else {\n+                processNonQuotedChar(parserState, c, newString);\n             }\n             parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0Mzg1NQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r400543855", "bodyText": "Similarly this reads strangely. Maybe \"isDoubleQuoteType\" instead.", "author": "taikuukaits", "createdAt": "2020-03-30T22:56:52Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {\n-                // Currently inside a quoted substring\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR) && !quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR) && quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (c == SPACE_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n-                } else if (c == TAB_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n-                } else {\n-                    newString.append(c);\n-                }\n+                processQuotedChar(parserState, c, newString);\n             }\n-            lastCharWasEscapeChar = (c == ESCAPE_CHAR);\n+            parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n         logger.trace(String.format(\"escapeQuotedWhitespace() changed %s to %s\", givenString, newString.toString()));\n         return newString.toString();\n     }\n+\n+    private void processQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        // Currently inside a quoted substring\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR) && !parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR) && parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (c == SPACE_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n+        } else if (c == TAB_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private void processNonQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(true);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private class ParserState {\n+        private boolean lastCharWasEscapeChar = false;\n+        private boolean inQuotes = false;\n+        private boolean quoteTypeIsDouble = false;\n+\n+        public boolean isLastCharWasEscapeChar() {\n+            return lastCharWasEscapeChar;\n+        }\n+\n+        public boolean isInQuotes() {\n+            return inQuotes;\n+        }\n+\n+        public boolean isQuoteTypeIsDouble() {", "originalCommit": "6868ccfe8746a34981739c3f5b3d94f990f1f547", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66dd30b8f3eac44ee951aab4225d61deb1b61c22", "chunk": "diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\nindex 11f1c20d4..7616f90ca 100644\n--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\n+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\n\n@@ -107,10 +107,10 @@ public class CompileCommandParser {\n         final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!parserState.isInQuotes()) {\n-                processNonQuotedChar(parserState, c, newString);\n-            } else {\n+            if (parserState.isInQuotes()) {\n                 processQuotedChar(parserState, c, newString);\n+            } else {\n+                processNonQuotedChar(parserState, c, newString);\n             }\n             parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4Mjk4Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r401082982", "bodyText": "Small nitpick, but could we swap the if so we aren't negating the statement? I think it makes it easier to read.", "author": "JakeMathews", "createdAt": "2020-03-31T17:19:40Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {", "originalCommit": "6868ccfe8746a34981739c3f5b3d94f990f1f547", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66dd30b8f3eac44ee951aab4225d61deb1b61c22", "chunk": "diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\nindex 11f1c20d4..7616f90ca 100644\n--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\n+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java\n\n@@ -107,10 +107,10 @@ public class CompileCommandParser {\n         final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!parserState.isInQuotes()) {\n-                processNonQuotedChar(parserState, c, newString);\n-            } else {\n+            if (parserState.isInQuotes()) {\n                 processQuotedChar(parserState, c, newString);\n+            } else {\n+                processNonQuotedChar(parserState, c, newString);\n             }\n             parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n"}}, {"oid": "66dd30b8f3eac44ee951aab4225d61deb1b61c22", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/66dd30b8f3eac44ee951aab4225d61deb1b61c22", "message": "refactor: updates for PR feedback", "committedDate": "2020-03-31T18:42:52Z", "type": "commit"}]}