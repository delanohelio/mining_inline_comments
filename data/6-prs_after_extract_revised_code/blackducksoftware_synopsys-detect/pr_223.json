{"pr_number": 223, "pr_title": "refactor: Distributed responsibilities of GoModCliExtractor to distin\u2026", "pr_createdAt": "2020-09-10T16:51:53Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/223", "timeline": [{"oid": "39b08b4bdc21c9f59edfa1f5cdd6cfb3307a9470", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/39b08b4bdc21c9f59edfa1f5cdd6cfb3307a9470", "message": "refactor: Distributed responsibilities of GoModCliExtractor to distinct classes (IDETECT-2174).", "committedDate": "2020-09-10T16:50:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1ODczNg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/223#discussion_r486558736", "bodyText": "This class isn't doing something particularly complex or GoMod specific.  I would have GoListUJsonGenerator call the ExecutableRunner directly and save the complication of an additional class.", "author": "JakeMathews", "createdAt": "2020-09-10T18:40:47Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCommandExecutor.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.synopsys.integration.detectable.detectables.go.gomod;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectable.executable.ExecutableOutput;\n+import com.synopsys.integration.detectable.detectable.executable.ExecutableRunner;\n+import com.synopsys.integration.detectable.detectable.executable.ExecutableRunnerException;\n+\n+public class GoModCommandExecutor {", "originalCommit": "39b08b4bdc21c9f59edfa1f5cdd6cfb3307a9470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2Mzk2Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/223#discussion_r486563966", "bodyText": "The only reason I pulled it out is because otherwise you'd have that execute wrapper method in every class that runs a go mod command (and it didn't appear that any other detectors used that wrapper method).  If you think that would be preferable, I can do that.", "author": "crowleySynopsys", "createdAt": "2020-09-10T18:50:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1ODczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NzMzOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/223#discussion_r486567339", "bodyText": "I'd be fine adding a method to ExecutableOutput called throwOnNonZeroExitCode(String message) so that\n`\nExecutableOutput output = executableRunner.execute(directory, goExe, arguments);\n    if (output.getReturnCode() == 0) {\n        return output.getStandardOutputAsList();\n    } else {\n        throw new DetectableException(failureMessage + output.getReturnCode());\n    }\n\nwould become \nExecutableOutput output = executableRunner.execute(directory, goExe, arguments);\noutput.throwOnNonZeroExitCode(failureMessage);\nreturn output.getStandardOutputAsList();\n`\nAnd if that's the only thing in this class, I have no problem with GoListUJsonGenerator and GoModGraphTransformer both having a method like this. In reality I think only GoListUJsonGenerator would benefit from putting that code in a method.", "author": "JakeMathews", "createdAt": "2020-09-10T18:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU1ODczNg=="}], "type": "inlineReview", "revised_code": {"commit": "b4c16b8d3911f0305ff55c2a0fd9d09f61ac0809", "chunk": "diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCommandExecutor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCommandExecutor.java\nindex b9d1544f5..0968d9de3 100644\n--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCommandExecutor.java\n+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCommandExecutor.java\n\n@@ -1,21 +1,48 @@\n package com.synopsys.integration.detectable.detectables.go.gomod;\n \n import java.io.File;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n import com.synopsys.integration.detectable.detectable.executable.ExecutableOutput;\n import com.synopsys.integration.detectable.detectable.executable.ExecutableRunner;\n import com.synopsys.integration.detectable.detectable.executable.ExecutableRunnerException;\n \n-public class GoModCommandExecutor {\n+class GoModCommandExecutor {\n     private final ExecutableRunner executableRunner;\n \n-    public GoModCommandExecutor(final ExecutableRunner executableRunner) {\n+    GoModCommandExecutor(final ExecutableRunner executableRunner) {\n         this.executableRunner = executableRunner;\n     }\n \n-    public List<String> execute(File directory, File goExe, String failureMessage, String... arguments) throws DetectableException, ExecutableRunnerException {\n+    List<String> generateGoListOutput(File directory, File goExe) throws ExecutableRunnerException, DetectableException {\n+        return execute(directory, goExe, \"Querying go for the list of modules failed: \", \"list\", \"-m\");\n+    }\n+\n+    List<String> generateGoListUJsonOutput(File directory, File goExe) throws ExecutableRunnerException, DetectableException {\n+        List<String> goVersionOutput = execute(directory, goExe, \"Querying for the version failed: \", \"version\");\n+        Pattern pattern = Pattern.compile(\"\\\\d+\\\\.[\\\\d.]+\");\n+        Matcher matcher = pattern.matcher(goVersionOutput.get(0));\n+        if (matcher.find()) {\n+            String version = matcher.group();\n+            String[] parts = version.split(\"\\\\.\");\n+            if (Integer.parseInt(parts[0]) > 1 || Integer.parseInt(parts[1]) >= 14) {\n+                return execute(directory, goExe, \"Querying for the go mod graph failed:\", \"list\", \"-mod=readonly\", \"-m\", \"-u\", \"-json\", \"all\");\n+            } else {\n+                return execute(directory, goExe, \"Querying for the go mod graph failed:\", \"list\", \"-m\", \"-u\", \"-json\", \"all\");\n+            }\n+        }\n+        return new ArrayList<>();\n+    }\n+\n+    List<String> generateGoModGraphOutput(File directory, File goExe) throws ExecutableRunnerException, DetectableException {\n+        return execute(directory, goExe, \"Querying for the go mod graph failed:\", \"mod\", \"graph\");\n+    }\n+\n+    private List<String> execute(File directory, File goExe, String failureMessage, String... arguments) throws DetectableException, ExecutableRunnerException {\n         ExecutableOutput output = executableRunner.execute(directory, goExe, arguments);\n \n         if (output.getReturnCode() == 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MTA1Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/223#discussion_r486561052", "bodyText": "Perhaps change this to GoModGraphGenerator to be more inline with GoListUJsonGenerator? Or vice versa. They both execute go mod commands and put that data in a useable format.", "author": "JakeMathews", "createdAt": "2020-09-10T18:45:18Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModGraphTransformer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.synopsys.integration.detectable.detectables.go.gomod;\n+\n+import java.io.File;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectable.executable.ExecutableRunnerException;\n+\n+public class GoModGraphTransformer {", "originalCommit": "39b08b4bdc21c9f59edfa1f5cdd6cfb3307a9470", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NTU0OQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/223#discussion_r486565549", "bodyText": "Hmm I see your point.  I thought there might be enough of a distinction in that GoListUJsonGenerator doesn't change the output of the go mod command, it just does work to decide which command to execute, whereas GoModGraphTransformer gets the command output and then makes changes.  I'm okay calling them both generators if you disagree.", "author": "crowleySynopsys", "createdAt": "2020-09-10T18:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2ODQxMA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/223#discussion_r486568410", "bodyText": "Okay so what if you had one class called GoModCommandExecutor that did all the executing of commands, and this class would just do the transformation.", "author": "JakeMathews", "createdAt": "2020-09-10T18:58:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2MTA1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b4c16b8d3911f0305ff55c2a0fd9d09f61ac0809", "chunk": "diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModGraphTransformer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModGraphTransformer.java\nindex 281a718f9..c04ef4541 100644\n--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModGraphTransformer.java\n+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModGraphTransformer.java\n\n@@ -1,51 +1,37 @@\n package com.synopsys.integration.detectable.detectables.go.gomod;\n \n-import java.io.File;\n import java.util.List;\n import java.util.Map;\n \n import com.google.gson.Gson;\n import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n-import com.synopsys.integration.detectable.detectable.executable.ExecutableRunnerException;\n \n-public class GoModGraphTransformer {\n-    private GoModCommandExecutor goModCommandExecutor;\n+class GoModGraphTransformer {\n     private Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().setLenient().create();\n     private ReplacementDataExtractor replacementDataExtractor = new ReplacementDataExtractor(gson);\n \n-    public GoModGraphTransformer(final GoModCommandExecutor goModCommandExecutor) {\n-        this.goModCommandExecutor = goModCommandExecutor;\n-    }\n-\n-    public List<String> generateGoModGraphOutput(File directory, File goExe, List<String> listUJsonOutput) throws ExecutableRunnerException, DetectableException {\n-        List<String> modGraphOutput = goModCommandExecutor.execute(directory, goExe, \"Querying for the go mod graph failed:\", \"mod\", \"graph\");\n+    List<String> transformGoModGraphOutput(List<String> modGraphOutput, List<String> listUJsonOutput) throws DetectableException {\n         if (!listUJsonOutput.isEmpty()) {\n-            return modGraphOutputWithReplacements(modGraphOutput, listUJsonOutput);\n-        } else {\n-            return modGraphOutput;\n-        }\n-    }\n-\n-    private List<String> modGraphOutputWithReplacements(List<String> modGraphOutput, List<String> listUJsonOutput) throws DetectableException {\n-        Map<String, String> replacementData = replacementDataExtractor.extractReplacementData(listUJsonOutput);\n-\n-        for (String line : modGraphOutput) {\n-            int indexOfLine = modGraphOutput.indexOf(line);\n-            boolean hasBeenModified = false;\n-            for (Map.Entry<String, String> replacement : replacementData.entrySet()) {\n-                String newLine;\n-                boolean shouldModify;\n-                if (hasBeenModified) {\n-                    newLine = modGraphOutput.get(indexOfLine).replace(replacement.getKey(), replacement.getValue());\n-                    shouldModify = !modGraphOutput.get(indexOfLine).equals(newLine);\n-                } else {\n-                    newLine = line.replace(replacement.getKey(), replacement.getValue());\n-                    shouldModify = !line.equals(newLine);\n-                }\n-                if (shouldModify) {\n-                    modGraphOutput.set(indexOfLine, newLine);\n-                    hasBeenModified = true;\n+            Map<String, String> replacementData = replacementDataExtractor.extractReplacementData(listUJsonOutput);\n+\n+            for (String line : modGraphOutput) {\n+                int indexOfLine = modGraphOutput.indexOf(line);\n+                boolean hasBeenModified = false;\n+                for (Map.Entry<String, String> replacement : replacementData.entrySet()) {\n+                    String newLine;\n+                    boolean shouldModify;\n+                    if (hasBeenModified) {\n+                        newLine = modGraphOutput.get(indexOfLine).replace(replacement.getKey(), replacement.getValue());\n+                        shouldModify = !modGraphOutput.get(indexOfLine).equals(newLine);\n+                    } else {\n+                        newLine = line.replace(replacement.getKey(), replacement.getValue());\n+                        shouldModify = !line.equals(newLine);\n+                    }\n+                    if (shouldModify) {\n+                        modGraphOutput.set(indexOfLine, newLine);\n+                        hasBeenModified = true;\n+                    }\n                 }\n             }\n         }\n"}}, {"oid": "b4c16b8d3911f0305ff55c2a0fd9d09f61ac0809", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/b4c16b8d3911f0305ff55c2a0fd9d09f61ac0809", "message": "refactor: Delegated all command execution to GoModCommandExecutor.", "committedDate": "2020-09-10T19:38:20Z", "type": "commit"}]}