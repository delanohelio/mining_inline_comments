{"pr_number": 243, "pr_title": "Sb clang canonicalize dep paths", "pr_createdAt": "2020-10-28T16:40:28Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/243", "timeline": [{"oid": "a83acc8608fa86cd0e0979c5f6a9628e09d30783", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a83acc8608fa86cd0e0979c5f6a9628e09d30783", "message": "fix(clang): canonicalize dependency paths before using them", "committedDate": "2020-10-28T16:29:40Z", "type": "commit"}, {"oid": "0ef95ce9cff66ea7cc09bfab65cdb374d83f4b72", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/0ef95ce9cff66ea7cc09bfab65cdb374d83f4b72", "message": "Merge branch 'master' into sb_clangCanonicalizeDepPaths", "committedDate": "2020-10-28T16:34:31Z", "type": "commit"}, {"oid": "17e8667c09127595103f4b259d775eec638450e6", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/17e8667c09127595103f4b259d775eec638450e6", "message": "fix(clang): keep blanks out of dependency list", "committedDate": "2020-10-28T16:58:49Z", "type": "commit"}, {"oid": "2ccf3be5f947d550a3d5c57b7094b36680ad3bd3", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/2ccf3be5f947d550a3d5c57b7094b36680ad3bd3", "message": "style(help): release note", "committedDate": "2020-10-28T18:24:09Z", "type": "commit"}, {"oid": "44c39ebb86487a4ac7d8d9c27450fa1014fddc9f", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/44c39ebb86487a4ac7d8d9c27450fa1014fddc9f", "message": "style(clang): eliminated a redundant log msg", "committedDate": "2020-10-28T18:41:41Z", "type": "commit"}, {"oid": "ab0324b70128ef7be16423fffa3d0f236dc10f06", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/ab0324b70128ef7be16423fffa3d0f236dc10f06", "message": "style(help): fixed typo in release note", "committedDate": "2020-10-28T18:42:19Z", "type": "commit"}, {"oid": "936b9cb75395c16646b2061ab350991257188c73", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/936b9cb75395c16646b2061ab350991257188c73", "message": "Merge branch 'master' into sb_clangCanonicalizeDepPaths", "committedDate": "2020-10-29T14:03:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyODAzNw==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/243#discussion_r514328037", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String canonicalPath;\n          \n          \n            \n                    try {\n          \n          \n            \n                        canonicalPath = targetFile.getCanonicalPath();\n          \n          \n            \n                    } catch (final IOException e) {\n          \n          \n            \n                        logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n          \n          \n            \n                        return rawPath;\n          \n          \n            \n                    }\n          \n          \n            \n                    logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n          \n          \n            \n                    return canonicalPath;\n          \n          \n            \n                   String canonicalPath = rawPath;\n          \n          \n            \n                    try {\n          \n          \n            \n                        canonicalPath = targetFile.getCanonicalPath();\n          \n          \n            \n                         logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n          \n          \n            \n                    } catch (final IOException e) {\n          \n          \n            \n                        logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n          \n          \n            \n                    }\n          \n          \n            \n                   \n          \n          \n            \n                    return canonicalPath;", "author": "psantos1113", "createdAt": "2020-10-29T15:00:44Z", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java", "diffHunk": "@@ -61,9 +63,25 @@\n         logger.trace(String.format(\"dependencies, backslashes removed: %s\", depsListString));\n \n         final String[] deps = depsListString.split(\"\\\\s+\");\n+        final List<String> depsList = new ArrayList<>(deps.length);\n         for (final String includeFile : deps) {\n-            logger.trace(String.format(\"\\t%s\", includeFile));\n+            if (StringUtils.isNotBlank(includeFile)) {\n+                depsList.add(toCanonical(includeFile));\n+            }\n         }\n-        return Arrays.asList(deps);\n+        return depsList;\n+    }\n+\n+    private String toCanonical(final String rawPath) {\n+        final File targetFile = new File(rawPath);\n+        final String canonicalPath;\n+        try {\n+            canonicalPath = targetFile.getCanonicalPath();\n+        } catch (final IOException e) {\n+            logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n+            return rawPath;\n+        }\n+        logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n+        return canonicalPath;", "originalCommit": "936b9cb75395c16646b2061ab350991257188c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8827632d066c024bc6778ecae242b1ef1b9ed42d", "chunk": "diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java\nindex 4cc07dfce..ba1f685d3 100644\n--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java\n+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java\n\n@@ -66,22 +66,15 @@ public class DependenyListFileParser {\n         final List<String> depsList = new ArrayList<>(deps.length);\n         for (final String includeFile : deps) {\n             if (StringUtils.isNotBlank(includeFile)) {\n-                depsList.add(toCanonical(includeFile));\n+                depsList.add(normalize(includeFile));\n             }\n         }\n         return depsList;\n     }\n \n-    private String toCanonical(final String rawPath) {\n-        final File targetFile = new File(rawPath);\n-        final String canonicalPath;\n-        try {\n-            canonicalPath = targetFile.getCanonicalPath();\n-        } catch (final IOException e) {\n-            logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n-            return rawPath;\n-        }\n-        logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n-        return canonicalPath;\n+    private String normalize(final String rawPath) {\n+        final String normalizedPath = Paths.get(rawPath).normalize().toString();\n+        logger.trace(String.format(\"Normalized %s to %s\", rawPath, normalizedPath));\n+        return normalizedPath;\n     }\n }\n"}}, {"oid": "8827632d066c024bc6778ecae242b1ef1b9ed42d", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/8827632d066c024bc6778ecae242b1ef1b9ed42d", "message": "refactor: replace File.getCanonicalPath() with Path.normalize()", "committedDate": "2020-10-29T15:16:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NDk0MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/243#discussion_r514344941", "bodyText": "If these files are all empty below can we just create files in the unit test without including empty files in the resources?  The files created in the test would have paths similar to the paths after clang portion of the file paths currently.\ni.e.\n        final File testParent = new File(curDir,\"test\");\n        final File canonicalTestParent = new File(testParent, \"subDir1/subDir2);\n        final File sourceFile = new File(testParent, \"src/process.c\");\n        final File includeFile1 = new File(testParent, \"include/stdc-predef.h\");\n        final File includeFile2 = new File(canonicalTestParent, \"../../include/./assert.h\");\n        canonicalTestParent.mkdirs();\n        sourceFile.create();\n        includeFile1.create();\n        includeFile2.create();\n\nAt the end of the test you can delete the files you created for this test.", "author": "psantos1113", "createdAt": "2020-10-29T15:22:18Z", "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.synopsys.integration.detectable.detectables.clang.functional;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.detectable.detectables.clang.dependencyfile.DependenyListFileParser;\n+\n+public class DependencyListFileParserTest {\n+\n+    @Test\n+    public void testSimple() {\n+        final String curDirPath = System.getProperty(\"user.dir\");\n+        final File curDir = new File(curDirPath);\n+        final File sourceFile = new File(curDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n+        final File includeFile1 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n+        final File includeFile2 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/assert.h\");\n+        final String fileContents = String.format(\"dependencies: %s \\\\\\n %s %s\\\\\\n\",\n+            sourceFile.getAbsolutePath(), includeFile1.getAbsolutePath(), includeFile2.getAbsolutePath());\n+\n+        final DependenyListFileParser parser = new DependenyListFileParser();\n+        final List<String> deps = parser.parseDepsMk(fileContents);\n+\n+        for (final String dep : deps) {\n+            System.out.printf(\"dep: %s\\n\", dep);\n+        }\n+        assertTrue(deps.contains(sourceFile.getAbsolutePath()));\n+        assertTrue(deps.contains(includeFile1.getAbsolutePath()));\n+        assertTrue(deps.contains(includeFile2.getAbsolutePath()));\n+    }\n+\n+    @Test\n+    public void testNonCanonical() throws IOException {\n+        final String curDirPath = System.getProperty(\"user.dir\");\n+        final File curDir = new File(curDirPath);\n+        final File sourceFile = new File(curDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n+        final File includeFile1 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n+        final File includeFile2 = new File(curDir, \"src/test/resources/../../test/resources/detectables/functional/clang/include/assert.h\");", "originalCommit": "936b9cb75395c16646b2061ab350991257188c73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4a8259ac69d74828b2a38a18065d56bb2b894ca", "chunk": "diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java\nindex a7666905a..aae96fc93 100644\n--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java\n+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java\n\n@@ -4,53 +4,50 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Path;\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junitpioneer.jupiter.TempDirectory;\n \n import com.synopsys.integration.detectable.detectables.clang.dependencyfile.DependenyListFileParser;\n \n public class DependencyListFileParserTest {\n \n     @Test\n-    public void testSimple() {\n-        final String curDirPath = System.getProperty(\"user.dir\");\n-        final File curDir = new File(curDirPath);\n-        final File sourceFile = new File(curDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n-        final File includeFile1 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n-        final File includeFile2 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/assert.h\");\n+    @ExtendWith(TempDirectory.class)\n+    public void testSimple(@TempDirectory.TempDir final Path tempOutputDirectory) throws IOException {\n+        final File baseDir = tempOutputDirectory.toFile();\n+        final File sourceFile = new File(baseDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n+        final File includeFile1 = new File(baseDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n+        final File includeFile2 = new File(baseDir, \"src/test/resources/detectables/functional/clang/include/assert.h\");\n         final String fileContents = String.format(\"dependencies: %s \\\\\\n %s %s\\\\\\n\",\n             sourceFile.getAbsolutePath(), includeFile1.getAbsolutePath(), includeFile2.getAbsolutePath());\n \n         final DependenyListFileParser parser = new DependenyListFileParser();\n         final List<String> deps = parser.parseDepsMk(fileContents);\n \n-        for (final String dep : deps) {\n-            System.out.printf(\"dep: %s\\n\", dep);\n-        }\n-        assertTrue(deps.contains(sourceFile.getAbsolutePath()));\n-        assertTrue(deps.contains(includeFile1.getAbsolutePath()));\n-        assertTrue(deps.contains(includeFile2.getAbsolutePath()));\n+        assertTrue(deps.contains(sourceFile.toPath().normalize().toString()));\n+        assertTrue(deps.contains(includeFile1.toPath().normalize().toString()));\n+        assertTrue(deps.contains(includeFile2.toPath().normalize().toString()));\n     }\n \n     @Test\n-    public void testNonCanonical() throws IOException {\n-        final String curDirPath = System.getProperty(\"user.dir\");\n-        final File curDir = new File(curDirPath);\n-        final File sourceFile = new File(curDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n-        final File includeFile1 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n-        final File includeFile2 = new File(curDir, \"src/test/resources/../../test/resources/detectables/functional/clang/include/assert.h\");\n+    @ExtendWith(TempDirectory.class)\n+    public void testNonCanonical(@TempDirectory.TempDir final Path tempOutputDirectory) throws IOException {\n+        final File baseDir = tempOutputDirectory.toFile();\n+        final File sourceFile = new File(baseDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n+        final File includeFile1 = new File(baseDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n+        final File includeFile2 = new File(baseDir, \"src/test/resources/../../test/resources/detectables/functional/clang/include/assert.h\");\n         final String fileContents = String.format(\"dependencies: %s \\\\\\n %s %s\\\\\\n\",\n             sourceFile.getAbsolutePath(), includeFile1.getAbsolutePath(), includeFile2.getAbsolutePath());\n \n         final DependenyListFileParser parser = new DependenyListFileParser();\n         final List<String> deps = parser.parseDepsMk(fileContents);\n-\n-        for (final String dep : deps) {\n-            System.out.printf(\"dep: %s\\n\", dep);\n-        }\n-        assertTrue(deps.contains(sourceFile.getCanonicalPath()));\n-        assertTrue(deps.contains(includeFile1.getCanonicalPath()));\n-        assertTrue(deps.contains(includeFile2.getCanonicalPath()));\n+        \n+        assertTrue(deps.contains(sourceFile.toPath().normalize().toString()));\n+        assertTrue(deps.contains(includeFile1.toPath().normalize().toString()));\n+        assertTrue(deps.contains(includeFile2.toPath().normalize().toString()));\n     }\n }\n"}}, {"oid": "0f26ed215503927afc9bc1f90a135b5ae8f50869", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/0f26ed215503927afc9bc1f90a135b5ae8f50869", "message": "refactor: streamified a for loop", "committedDate": "2020-10-29T15:34:28Z", "type": "commit"}, {"oid": "d4a8259ac69d74828b2a38a18065d56bb2b894ca", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/d4a8259ac69d74828b2a38a18065d56bb2b894ca", "message": "test(clang): eliminated need for test resource files", "committedDate": "2020-10-29T16:35:03Z", "type": "commit"}, {"oid": "da0de22c7168f3864461cc63cad6d5fe73930e1d", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/da0de22c7168f3864461cc63cad6d5fe73930e1d", "message": "style: fixed my save actions and applied to DependencyListFileParserTest", "committedDate": "2020-10-29T16:41:51Z", "type": "commit"}]}