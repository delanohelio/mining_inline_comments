{"pr_number": 206, "pr_title": "Impact analysis", "pr_createdAt": "2020-07-21T21:43:42Z", "pr_url": "https://github.com/blackducksoftware/synopsys-detect/pull/206", "timeline": [{"oid": "f2fe709acfeae2d5d62c04dfc2630c249d8b4aea", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/f2fe709acfeae2d5d62c04dfc2630c249d8b4aea", "message": "feat(impact-analysis): Added Vulnerability Impact Analysis tool.", "committedDate": "2020-06-24T17:04:33Z", "type": "commit"}, {"oid": "4243b28e006d362ccb38a2491d602ce2eca04a17", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/4243b28e006d362ccb38a2491d602ce2eca04a17", "message": "fix(impact-analysis): Added code location name generation for impact analysis.", "committedDate": "2020-06-25T16:34:42Z", "type": "commit"}, {"oid": "41e225d3c98e200b51ecca34390ebef7116576c7", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/41e225d3c98e200b51ecca34390ebef7116576c7", "message": "feat(impact-analysis): Added ability to upload impact analysis report.", "committedDate": "2020-06-29T16:45:59Z", "type": "commit"}, {"oid": "cfc8e8485e1c76e02c066b9b437b7f512c1905a7", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/cfc8e8485e1c76e02c066b9b437b7f512c1905a7", "message": "refactor(impact-analysis): Moved service to separate package.", "committedDate": "2020-06-29T18:52:27Z", "type": "commit"}, {"oid": "bf4cee6721bbf3166f01938e3e8313a277f4774a", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/bf4cee6721bbf3166f01938e3e8313a277f4774a", "message": "test(impact-analysis): Added ImpactAnalysisServiceTest.", "committedDate": "2020-06-30T15:30:41Z", "type": "commit"}, {"oid": "2f2048b99e4302ce9db7c725245126b32d4d084f", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/2f2048b99e4302ce9db7c725245126b32d4d084f", "message": "style(licence-header): Added license headers,", "committedDate": "2020-06-30T15:32:24Z", "type": "commit"}, {"oid": "a29319ebac80d531de0109fd3092a5a02030c313", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a29319ebac80d531de0109fd3092a5a02030c313", "message": "refactor(path-adapter): Removing PathAdapter because it was unused.", "committedDate": "2020-06-30T15:33:45Z", "type": "commit"}, {"oid": "acbcad90d90662700f6191e405adaaa483467810", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/acbcad90d90662700f6191e405adaaa483467810", "message": "Merge branch 'master' into impact-analysis\n\n# Conflicts:\n#\tsrc/main/java/com/synopsys/integration/detect/lifecycle/run/RunManager.java", "committedDate": "2020-06-30T15:40:31Z", "type": "commit"}, {"oid": "ffe8180ada57551bf2334b49a1e5fbc4b577de57", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/ffe8180ada57551bf2334b49a1e5fbc4b577de57", "message": "Merge branch 'master' into impact-analysis", "committedDate": "2020-07-21T20:48:39Z", "type": "commit"}, {"oid": "bfdef88877e2e95cb12e6e688ae949dd675bc41c", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/bfdef88877e2e95cb12e6e688ae949dd675bc41c", "message": "build(dependency): Switched from local to published version of com.synopsys:method-analyzer-core.", "committedDate": "2020-07-21T20:50:55Z", "type": "commit"}, {"oid": "b008def2b887b08620850985a5e317382ea31ab6", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/b008def2b887b08620850985a5e317382ea31ab6", "message": "doc(impact-analysis): Added some doc to indicate the impact analysis can be enabled.", "committedDate": "2020-07-21T21:42:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTU0Mg==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459669542", "bodyText": "Should be directoryManager.getImpactOutputDirectory()", "author": "taikuukaits", "createdAt": "2020-07-23T19:11:30Z", "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisService;\n+import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisUploadResult;\n+import com.synopsys.integration.detect.workflow.codelocation.CodeLocationNameManager;\n+import com.synopsys.integration.detect.workflow.file.DirectoryManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+import com.synopsys.integration.util.NameVersion;\n+import com.synopsys.method.analyzer.core.MethodUseAnalyzer;\n+\n+public class VulnerabilityImpactAnalysisTool {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    private final DirectoryManager directoryManager;\n+    private final CodeLocationNameManager codeLocationNameManager;\n+\n+    public VulnerabilityImpactAnalysisTool(DirectoryManager directoryManager, CodeLocationNameManager codeLocationNameManager) {\n+        this.directoryManager = directoryManager;\n+        this.codeLocationNameManager = codeLocationNameManager;\n+    }\n+\n+    public Path generateReport(NameVersion projectNameVersion) throws IOException {\n+        MethodUseAnalyzer analyzer = new MethodUseAnalyzer();\n+        String impactAnalysisCodeLocationName = codeLocationNameManager.createImpactAnalysisCodeLocationName(directoryManager.getSourceDirectory(), projectNameVersion.getName(), projectNameVersion.getVersion(), null, null);\n+\n+        Path outputReportPath = analyzer.analyze(directoryManager.getSourceDirectory().toPath(), directoryManager.getBinaryOutputDirectory().toPath(), impactAnalysisCodeLocationName);", "originalCommit": "b008def2b887b08620850985a5e317382ea31ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTY0MQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459675641", "bodyText": "Good catch.", "author": "JakeMathews", "createdAt": "2020-07-23T19:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTU0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "47c405253fcff0af2aa16457d8851795a8f4ffd3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java\nindex 9c1ed876d..c16500688 100644\n--- a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java\n+++ b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java\n\n@@ -52,7 +52,7 @@ public class VulnerabilityImpactAnalysisTool {\n         MethodUseAnalyzer analyzer = new MethodUseAnalyzer();\n         String impactAnalysisCodeLocationName = codeLocationNameManager.createImpactAnalysisCodeLocationName(directoryManager.getSourceDirectory(), projectNameVersion.getName(), projectNameVersion.getVersion(), null, null);\n \n-        Path outputReportPath = analyzer.analyze(directoryManager.getSourceDirectory().toPath(), directoryManager.getBinaryOutputDirectory().toPath(), impactAnalysisCodeLocationName);\n+        Path outputReportPath = analyzer.analyze(directoryManager.getSourceDirectory().toPath(), directoryManager.getImpactAnalysisOutputDirectory().toPath(), impactAnalysisCodeLocationName);\n         logger.info(String.format(\"Vulnerability Impact Analysis generated report at %s\", outputReportPath));\n \n         return outputReportPath;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTczOQ==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459669739", "bodyText": "Would prefer static creation methods like ImpactAnalysisUploadResult.success()", "author": "taikuukaits", "createdAt": "2020-07-23T19:11:54Z", "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.blackduck.api.core.BlackDuckPath;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.model.RequestFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.request.Request;\n+import com.synopsys.integration.rest.response.Response;\n+\n+public class ImpactAnalysisService {\n+    private static final BlackDuckPath IMPACT_ANALYSIS_PATH = new BlackDuckPath(\"/api/scans/vulnerability-impact\");\n+\n+    private final BlackDuckService blackDuckService;\n+    private final Gson gson;\n+\n+    public ImpactAnalysisService(BlackDuckService blackDuckService, Gson gson) {\n+        this.blackDuckService = blackDuckService;\n+        this.gson = gson;\n+    }\n+\n+    public ImpactAnalysisUploadResult uploadImpactAnalysisReport(Path reportPath) throws IntegrationException, IOException {\n+        String uri = blackDuckService.getUri(IMPACT_ANALYSIS_PATH);\n+\n+        Map<String, File> fileMap = new HashMap<>();\n+        fileMap.put(\"file\", reportPath.toFile());\n+        Request request = RequestFactory.createCommonPostRequestBuilder(fileMap, new HashMap<>())\n+                              .uri(uri)\n+                              .build();\n+\n+        try (Response response = blackDuckService.execute(request)) {\n+            ImpactAnalysisSuccessResult impactAnalysisSuccessResult = null;\n+            ImpactAnalysisErrorResult impactAnalysisErrorResult = null;\n+\n+            if (response.isStatusCodeSuccess()) {\n+                impactAnalysisSuccessResult = gson.fromJson(response.getContentString(), ImpactAnalysisSuccessResult.class);\n+            } else {\n+                impactAnalysisErrorResult = gson.fromJson(response.getContentString(), ImpactAnalysisErrorResult.class);", "originalCommit": "b008def2b887b08620850985a5e317382ea31ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTAzNA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459675034", "bodyText": "Done", "author": "JakeMathews", "createdAt": "2020-07-23T19:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b8f97ce95deaf3094f9cb3eb8cc101d749055f95", "chunk": "diff --git a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java\nindex 254b22007..9ef27eb20 100644\n--- a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java\n+++ b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java\n\n@@ -57,16 +57,11 @@ public class ImpactAnalysisService {\n                               .build();\n \n         try (Response response = blackDuckService.execute(request)) {\n-            ImpactAnalysisSuccessResult impactAnalysisSuccessResult = null;\n-            ImpactAnalysisErrorResult impactAnalysisErrorResult = null;\n-\n             if (response.isStatusCodeSuccess()) {\n-                impactAnalysisSuccessResult = gson.fromJson(response.getContentString(), ImpactAnalysisSuccessResult.class);\n+                return ImpactAnalysisUploadResult.success(gson.fromJson(response.getContentString(), ImpactAnalysisSuccessResult.class));\n             } else {\n-                impactAnalysisErrorResult = gson.fromJson(response.getContentString(), ImpactAnalysisErrorResult.class);\n+                return ImpactAnalysisUploadResult.failure(gson.fromJson(response.getContentString(), ImpactAnalysisErrorResult.class));\n             }\n-\n-            return new ImpactAnalysisUploadResult(impactAnalysisSuccessResult, impactAnalysisErrorResult);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDE2Ng==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459670166", "bodyText": "I don't love writing our json pojo's with these constructors but I'm not requesting they be changed, just wanted to note it.", "author": "taikuukaits", "createdAt": "2020-07-23T19:12:44Z", "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.annotations.SerializedName;\n+\n+public class ImpactAnalysisSuccessResult {\n+\n+    @SerializedName(\"codeLocationId\")\n+    public final String codeLocationId;\n+\n+    @SerializedName(\"scannerVersion\")\n+    public final String scannerVersion;\n+\n+    @SerializedName(\"signatureVersion\")\n+    public final String signatureVersion;\n+\n+    @SerializedName(\"id\")\n+    public final String id;\n+\n+    @SerializedName(\"scanType\")\n+    public final String scanType;\n+\n+    @SerializedName(\"name\")\n+    public final String codeLocationName;\n+\n+    @SerializedName(\"hostName\")\n+    public final String hostName;\n+\n+    @SerializedName(\"baseDir\")\n+    public final String baseDir;\n+\n+    @SerializedName(\"ownerEntityKeyToken\")\n+    public final String ownerEntityKeyToken;\n+\n+    @SerializedName(\"createdOn\")\n+    public final String createdOn;\n+\n+    @SerializedName(\"timeToScan\")\n+    public final Integer timeToScan;\n+\n+    @SerializedName(\"createdByUserId\")\n+    public final String createdByUserId;\n+\n+    @SerializedName(\"status\")\n+    public final String status;\n+\n+    @SerializedName(\"statusMessage\")\n+    public final String statusMessage;\n+\n+    @SerializedName(\"matchCount\")\n+    public final Integer matchCount;\n+\n+    @SerializedName(\"numDirs\")\n+    public final Integer numberOfDirectories;\n+\n+    @SerializedName(\"numNonDirFiles\")\n+    public final Integer numberOfNonDirectoryFiles;\n+\n+    @SerializedName(\"scanSourceType\")\n+    public final String scanSourceType;\n+\n+    @SerializedName(\"scanSourceId\")\n+    public final String scanSourceId;\n+\n+    @SerializedName(\"scanTime\")\n+    public final Integer scanTime;\n+\n+    @SerializedName(\"timeLastModified\")\n+    public final Integer timeLastModified;\n+\n+    @SerializedName(\"timeToPersistMs\")\n+    public final Integer timeToPersistMs;\n+\n+    @SerializedName(\"arguments\")\n+    public final JsonObject arguments;\n+\n+    public ImpactAnalysisSuccessResult(String codeLocationId, String scannerVersion, String signatureVersion, String id, String scanType, String codeLocationName, String hostName, String baseDir, String ownerEntityKeyToken,", "originalCommit": "b008def2b887b08620850985a5e317382ea31ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDIzOA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459674238", "bodyText": "I'm of the belief that data coming into Detect should be final. The risk in allowing the input data to accidentally be modified seems unnecessary. Kotlin or Project Lombok would make this a non-issue. I agree it isn't pretty to look at though.", "author": "JakeMathews", "createdAt": "2020-07-23T19:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a28269e5dfc582ba282da318e74d0c8c1671b079", "chunk": "diff --git a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java\nindex aa85edb05..bc3694467 100644\n--- a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java\n+++ b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java\n\n@@ -26,101 +26,72 @@ import com.google.gson.JsonObject;\n import com.google.gson.annotations.SerializedName;\n \n public class ImpactAnalysisSuccessResult {\n-\n     @SerializedName(\"codeLocationId\")\n-    public final String codeLocationId;\n+    public String codeLocationId;\n \n     @SerializedName(\"scannerVersion\")\n-    public final String scannerVersion;\n+    public String scannerVersion;\n \n     @SerializedName(\"signatureVersion\")\n-    public final String signatureVersion;\n+    public String signatureVersion;\n \n     @SerializedName(\"id\")\n-    public final String id;\n+    public String id;\n \n     @SerializedName(\"scanType\")\n-    public final String scanType;\n+    public String scanType;\n \n     @SerializedName(\"name\")\n-    public final String codeLocationName;\n+    public String codeLocationName;\n \n     @SerializedName(\"hostName\")\n-    public final String hostName;\n+    public String hostName;\n \n     @SerializedName(\"baseDir\")\n-    public final String baseDir;\n+    public String baseDir;\n \n     @SerializedName(\"ownerEntityKeyToken\")\n-    public final String ownerEntityKeyToken;\n+    public String ownerEntityKeyToken;\n \n     @SerializedName(\"createdOn\")\n-    public final String createdOn;\n+    public String createdOn;\n \n     @SerializedName(\"timeToScan\")\n-    public final Integer timeToScan;\n+    public Integer timeToScan;\n \n     @SerializedName(\"createdByUserId\")\n-    public final String createdByUserId;\n+    public String createdByUserId;\n \n     @SerializedName(\"status\")\n-    public final String status;\n+    public String status;\n \n     @SerializedName(\"statusMessage\")\n-    public final String statusMessage;\n+    public String statusMessage;\n \n     @SerializedName(\"matchCount\")\n-    public final Integer matchCount;\n+    public Integer matchCount;\n \n     @SerializedName(\"numDirs\")\n-    public final Integer numberOfDirectories;\n+    public Integer numberOfDirectories;\n \n     @SerializedName(\"numNonDirFiles\")\n-    public final Integer numberOfNonDirectoryFiles;\n+    public Integer numberOfNonDirectoryFiles;\n \n     @SerializedName(\"scanSourceType\")\n-    public final String scanSourceType;\n+    public String scanSourceType;\n \n     @SerializedName(\"scanSourceId\")\n-    public final String scanSourceId;\n+    public String scanSourceId;\n \n     @SerializedName(\"scanTime\")\n-    public final Integer scanTime;\n+    public Integer scanTime;\n \n     @SerializedName(\"timeLastModified\")\n-    public final Integer timeLastModified;\n+    public Integer timeLastModified;\n \n     @SerializedName(\"timeToPersistMs\")\n-    public final Integer timeToPersistMs;\n+    public Integer timeToPersistMs;\n \n     @SerializedName(\"arguments\")\n-    public final JsonObject arguments;\n-\n-    public ImpactAnalysisSuccessResult(String codeLocationId, String scannerVersion, String signatureVersion, String id, String scanType, String codeLocationName, String hostName, String baseDir, String ownerEntityKeyToken,\n-        String createdOn, Integer timeToScan, String createdByUserId, String status, String statusMessage, Integer matchCount, Integer numberOfDirectories, Integer numberOfNonDirectoryFiles, String scanSourceType, String scanSourceId,\n-        Integer scanTime, Integer timeLastModified, Integer timeToPersistMs, JsonObject arguments) {\n-        this.codeLocationId = codeLocationId;\n-        this.scannerVersion = scannerVersion;\n-        this.signatureVersion = signatureVersion;\n-        this.id = id;\n-        this.scanType = scanType;\n-        this.codeLocationName = codeLocationName;\n-        this.hostName = hostName;\n-        this.baseDir = baseDir;\n-        this.ownerEntityKeyToken = ownerEntityKeyToken;\n-        this.createdOn = createdOn;\n-        this.timeToScan = timeToScan;\n-        this.createdByUserId = createdByUserId;\n-        this.status = status;\n-        this.statusMessage = statusMessage;\n-        this.matchCount = matchCount;\n-        this.numberOfDirectories = numberOfDirectories;\n-        this.numberOfNonDirectoryFiles = numberOfNonDirectoryFiles;\n-        this.scanSourceType = scanSourceType;\n-        this.scanSourceId = scanSourceId;\n-        this.scanTime = scanTime;\n-        this.timeLastModified = timeLastModified;\n-        this.timeToPersistMs = timeToPersistMs;\n-        this.arguments = arguments;\n-    }\n+    public JsonObject arguments2;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTE5OA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459671198", "bodyText": "I question that these tests provide any tangible value and are worth the 'code liability' though there is something to be said about whether or not tests are considered 'code liability'.", "author": "taikuukaits", "createdAt": "2020-07-23T19:14:39Z", "path": "src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.detect.testutils.TestUtil;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.response.Response;\n+\n+class ImpactAnalysisServiceTest {", "originalCommit": "b008def2b887b08620850985a5e317382ea31ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzA0MA==", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459677040", "bodyText": "I agree. I would like to add add an integration test when we have a Black Duck instance producing code locations.\nIt would feel weird for this tool to not have any test coverage, as there isn't any logic to test. I agree this particular test is not very useful, and in fact may be a code liability.", "author": "JakeMathews", "createdAt": "2020-07-23T19:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8cfdf8ba118a13837bd3df003e5b138ab42c89c4", "chunk": "diff --git a/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java b/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java\nindex 2e44bf52a..cfa77c53f 100644\n--- a/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java\n+++ b/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java\n\n@@ -22,8 +22,10 @@\n  */\n package com.synopsys.integration.detect.tool.impactanalysis.service;\n \n-import java.io.IOException;\n+import java.io.File;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Map;\n \n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "b8f97ce95deaf3094f9cb3eb8cc101d749055f95", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/b8f97ce95deaf3094f9cb3eb8cc101d749055f95", "message": "refactor(impact-analysis): Added named constructors to ImpactAnalysisUploadResult.", "committedDate": "2020-07-23T19:22:01Z", "type": "commit"}, {"oid": "47c405253fcff0af2aa16457d8851795a8f4ffd3", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/47c405253fcff0af2aa16457d8851795a8f4ffd3", "message": "fix(impact-analysis): Impact Analysis report was being sent to the wrong output directory.", "committedDate": "2020-07-23T19:22:43Z", "type": "commit"}, {"oid": "a28269e5dfc582ba282da318e74d0c8c1671b079", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a28269e5dfc582ba282da318e74d0c8c1671b079", "message": "refactor(impact-analysis): Removed constructor ignored by Gson.", "committedDate": "2020-07-24T16:41:34Z", "type": "commit"}, {"oid": "8cfdf8ba118a13837bd3df003e5b138ab42c89c4", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/8cfdf8ba118a13837bd3df003e5b138ab42c89c4", "message": "test(impact-analysis): Tested request creation rather than Gson.", "committedDate": "2020-07-24T16:42:11Z", "type": "commit"}, {"oid": "df6dfaa12764914abbc58dea64068bc3d145635b", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/df6dfaa12764914abbc58dea64068bc3d145635b", "message": "test-refactor(impact-analysis): Removed unused test files.", "committedDate": "2020-07-24T16:45:30Z", "type": "commit"}, {"oid": "2463c36cfcb8787c2c93064d0b01572d86dda6ad", "url": "https://github.com/blackducksoftware/synopsys-detect/commit/2463c36cfcb8787c2c93064d0b01572d86dda6ad", "message": "refactor(impact-analysis): Made the constructor private for ImpactAnalysisUploadResult.", "committedDate": "2020-07-24T16:46:12Z", "type": "commit"}]}