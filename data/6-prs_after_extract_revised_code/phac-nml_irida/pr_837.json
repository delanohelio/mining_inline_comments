{"pr_number": 837, "pr_title": "Pipeline Launch - saved parameters", "pr_createdAt": "2020-10-26T19:31:31Z", "pr_url": "https://github.com/phac-nml/irida/pull/837", "timeline": [{"oid": "46de75157ee5f7ed72ac82e90e393ca5cc7d7a59", "url": "https://github.com/phac-nml/irida/commit/46de75157ee5f7ed72ac82e90e393ca5cc7d7a59", "message": ":construction: Initial work on saved parameters", "committedDate": "2020-10-22T15:55:31Z", "type": "commit"}, {"oid": "9ecec1b84090f4b01bd734465d63006ed538459e", "url": "https://github.com/phac-nml/irida/commit/9ecec1b84090f4b01bd734465d63006ed538459e", "message": ":construction: Display modified saved pipeline parameter sets", "committedDate": "2020-10-23T17:37:48Z", "type": "commit"}, {"oid": "bb579e06fc394193377fc84724926b0b8d0e63de", "url": "https://github.com/phac-nml/irida/commit/bb579e06fc394193377fc84724926b0b8d0e63de", "message": "Initial layout for the saved pipeline parameters", "committedDate": "2020-10-26T19:00:29Z", "type": "commit"}, {"oid": "2d3d6de563c0ab13768a633206969a101aeb6fad", "url": "https://github.com/phac-nml/irida/commit/2d3d6de563c0ab13768a633206969a101aeb6fad", "message": "Updated CHANGELOG", "committedDate": "2020-10-26T19:29:05Z", "type": "commit"}, {"oid": "f5eb5199b629005f974ef19f6a5430107f76868d", "url": "https://github.com/phac-nml/irida/commit/f5eb5199b629005f974ef19f6a5430107f76868d", "message": "Merge branch 'launch__base' into launch__saved_parameters", "committedDate": "2020-10-26T19:30:26Z", "type": "commit"}, {"oid": "ea419934a9b484799142ac6fa87392c0be0b409a", "url": "https://github.com/phac-nml/irida/commit/ea419934a9b484799142ac6fa87392c0be0b409a", "message": ":construction: cleaned up layout of the saved parameters inputs", "committedDate": "2020-10-27T15:34:06Z", "type": "commit"}, {"oid": "3714179e81fadbb5a171df01acf02875b418d092", "url": "https://github.com/phac-nml/irida/commit/3714179e81fadbb5a171df01acf02875b418d092", "message": ":construction: cleaned up spacing a little more on the saved parameters select", "committedDate": "2020-10-27T15:45:43Z", "type": "commit"}, {"oid": "3e725c4ece8f76625b8e95fbc9e765c6300260e4", "url": "https://github.com/phac-nml/irida/commit/3e725c4ece8f76625b8e95fbc9e765c6300260e4", "message": "Updated JSDoc", "committedDate": "2020-10-27T15:51:00Z", "type": "commit"}, {"oid": "064248821728c397223a6b0bd0d20642553d9164", "url": "https://github.com/phac-nml/irida/commit/064248821728c397223a6b0bd0d20642553d9164", "message": ":construction: fixed layout of modal body so that the scroll bar would be on the side.", "committedDate": "2020-10-27T16:00:19Z", "type": "commit"}, {"oid": "5a4d32aceecfd6c3e72add6be49ed2a97a4f2a74", "url": "https://github.com/phac-nml/irida/commit/5a4d32aceecfd6c3e72add6be49ed2a97a4f2a74", "message": "Updated JSDoc", "committedDate": "2020-10-27T16:00:27Z", "type": "commit"}, {"oid": "a98de784186d607ade494aff81c2c81d9c101f8c", "url": "https://github.com/phac-nml/irida/commit/a98de784186d607ade494aff81c2c81d9c101f8c", "message": "Working on separating out the parameters modal.", "committedDate": "2020-10-27T17:59:49Z", "type": "commit"}, {"oid": "fee9bd677b36b17da7b2d3239f1a26b378a575ce", "url": "https://github.com/phac-nml/irida/commit/fee9bd677b36b17da7b2d3239f1a26b378a575ce", "message": "Merge branch 'launch__base' into launch__saved_parameters", "committedDate": "2020-10-27T18:08:45Z", "type": "commit"}, {"oid": "fd85d9199f3e94c6ef8c68b31373a416584de9dd", "url": "https://github.com/phac-nml/irida/commit/fd85d9199f3e94c6ef8c68b31373a416584de9dd", "message": ":construction: fixed issue with modifying parameters\n\nNow if user modifies, but does not save, first time a modified version is created.  After that, the modified version gets overwritten.", "committedDate": "2020-10-28T19:41:34Z", "type": "commit"}, {"oid": "3d121b10b6a3cc942228df3f92dbee88443e2392", "url": "https://github.com/phac-nml/irida/commit/3d121b10b6a3cc942228df3f92dbee88443e2392", "message": "Updated comments", "committedDate": "2020-10-28T19:42:12Z", "type": "commit"}, {"oid": "201a97c490fea7e4e8ece36af541f54cb75f8f1a", "url": "https://github.com/phac-nml/irida/commit/201a97c490fea7e4e8ece36af541f54cb75f8f1a", "message": ":construction: working on save as", "committedDate": "2020-10-29T18:09:07Z", "type": "commit"}, {"oid": "9c9f841fdd2f9980f50eb18c0563db543ee99b4f", "url": "https://github.com/phac-nml/irida/commit/9c9f841fdd2f9980f50eb18c0563db543ee99b4f", "message": ":construction: hitting the server now need to save and return new id.", "committedDate": "2020-10-29T19:21:50Z", "type": "commit"}, {"oid": "46311eb2ada2d206ab5f44c500705ea7255faad9", "url": "https://github.com/phac-nml/irida/commit/46311eb2ada2d206ab5f44c500705ea7255faad9", "message": ":construction: Working on server calls", "committedDate": "2020-10-29T21:26:09Z", "type": "commit"}, {"oid": "32d9b0f1a9509ef8eda4971500659ace6ff9d233", "url": "https://github.com/phac-nml/irida/commit/32d9b0f1a9509ef8eda4971500659ace6ff9d233", "message": ":construction: Added server code to create new saved pipeline parameters", "committedDate": "2020-10-30T10:09:31Z", "type": "commit"}, {"oid": "40bf8458842168b5591e1d7e5d6c1f8e3c12c3fd", "url": "https://github.com/phac-nml/irida/commit/40bf8458842168b5591e1d7e5d6c1f8e3c12c3fd", "message": ":construction: working sava as", "committedDate": "2020-10-30T10:37:47Z", "type": "commit"}, {"oid": "917408a8d0419a00f9542321d44dcbd8a1eb2fe8", "url": "https://github.com/phac-nml/irida/commit/917408a8d0419a00f9542321d44dcbd8a1eb2fe8", "message": ":bulb: Updated JSDoc and JavaDoc", "committedDate": "2020-10-30T12:40:43Z", "type": "commit"}, {"oid": "2362e6e46e3ebb76c99c505dcea5471e6c74ca77", "url": "https://github.com/phac-nml/irida/commit/2362e6e46e3ebb76c99c505dcea5471e6c74ca77", "message": ":recycle: Removed save over code since this was never an option", "committedDate": "2020-11-02T16:38:54Z", "type": "commit"}, {"oid": "372cc4e82de72d0ca1260329837b2aab99ece813", "url": "https://github.com/phac-nml/irida/commit/372cc4e82de72d0ca1260329837b2aab99ece813", "message": "Remove unused import", "committedDate": "2020-11-03T14:14:29Z", "type": "commit"}, {"oid": "e061e384abe47fbd0f621f69ce0e96009c70d311", "url": "https://github.com/phac-nml/irida/commit/e061e384abe47fbd0f621f69ce0e96009c70d311", "message": "Updated JavaDoc", "committedDate": "2020-11-03T14:15:13Z", "type": "commit"}, {"oid": "02f55eaa00b8c62adeba78411c19efbf2345bf09", "url": "https://github.com/phac-nml/irida/commit/02f55eaa00b8c62adeba78411c19efbf2345bf09", "message": "Updated JavaDoc", "committedDate": "2020-11-03T14:16:34Z", "type": "commit"}, {"oid": "6dd91fa4fc1d0f344efaa24934e9ce8c9b8792fb", "url": "https://github.com/phac-nml/irida/commit/6dd91fa4fc1d0f344efaa24934e9ce8c9b8792fb", "message": "Updated JavaDoc", "committedDate": "2020-11-03T14:16:54Z", "type": "commit"}, {"oid": "9e273f0334b2cda04de0a1070d70409efea7df3d", "url": "https://github.com/phac-nml/irida/commit/9e273f0334b2cda04de0a1070d70409efea7df3d", "message": "Fixed random 's' left behind", "committedDate": "2020-11-03T14:58:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyODMxMA==", "url": "https://github.com/phac-nml/irida/pull/837#discussion_r518328310", "bodyText": "Is this empty constructor required?", "author": "deepsidhu85", "createdAt": "2020-11-05T19:57:55Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/ajax/dto/pipeline/SavedPipelineParameters.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package ca.corefacility.bioinformatics.irida.ria.web.ajax.dto.pipeline;\n+\n+import java.util.List;\n+\n+/**\n+ * Used by the UI for displaying a named pipeline parameter set.\n+ */\n+public class SavedPipelineParameters {\n+    private  Long id;\n+    private  String label;\n+    private  List<PipelineParameter> parameters;\n+\n+    public SavedPipelineParameters() {", "originalCommit": "9e273f0334b2cda04de0a1070d70409efea7df3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1MzA3Ng==", "url": "https://github.com/phac-nml/irida/pull/837#discussion_r518853076", "bodyText": "I believe so since it is used as part of a request body.", "author": "joshsadam", "createdAt": "2020-11-06T16:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyODMxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzMDU3Ng==", "url": "https://github.com/phac-nml/irida/pull/837#discussion_r518330576", "bodyText": "Add javadoc", "author": "deepsidhu85", "createdAt": "2020-11-05T20:02:04Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java", "diffHunk": "@@ -128,4 +156,52 @@ private String localizedParamOptionLabel(Locale locale, String workflowName, Str\n             return paramName + \".\" + optionName;\n         }\n     }\n+\n+    private List<SavedPipelineParameters> getSavedPipelineParameters(IridaWorkflow workflow, Locale locale) {", "originalCommit": "9e273f0334b2cda04de0a1070d70409efea7df3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MjUwOQ==", "url": "https://github.com/phac-nml/irida/pull/837#discussion_r518862509", "bodyText": "Updated in ff30fb6", "author": "joshsadam", "createdAt": "2020-11-06T16:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzMDU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ff30fb64d75064b84c44c6d33bf4579f0f827d7e", "chunk": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java\nindex e6a208b270..6b53bd1df3 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java\n\n@@ -26,182 +26,196 @@ import ca.corefacility.bioinformatics.irida.service.workflow.WorkflowNamedParame\n  */\n @Component\n public class UIPipelineService {\n-    private final IridaWorkflowsService workflowsService;\n-    private final WorkflowNamedParametersService namedParametersService;\n-    private final MessageSource messageSource;\n-\n-    @Autowired\n-    public UIPipelineService(IridaWorkflowsService workflowsService, WorkflowNamedParametersService namedParametersService, MessageSource messageSource) {\n-        this.workflowsService = workflowsService;\n-        this.namedParametersService = namedParametersService;\n-        this.messageSource = messageSource;\n-    }\n-\n-    /**\n-     * Get the information about a specific workflow pipeline\n-     *\n-     * @param id     for a {@link IridaWorkflow}\n-     * @param locale current users {@link Locale}\n-     * @return Details contained within a {@link UIPipelineDetailsResponse}\n-     * @throws IridaWorkflowNotFoundException exception thrown if the workflow cannot be found.\n-     */\n-    public UIPipelineDetailsResponse getPipelineDetails(UUID id, Locale locale) throws IridaWorkflowNotFoundException {\n-        IridaWorkflow workflow = workflowsService.getIridaWorkflow(id);\n-        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n-        UIPipelineDetailsResponse detailsResponse = new UIPipelineDetailsResponse();\n+\tprivate final IridaWorkflowsService workflowsService;\n+\tprivate final WorkflowNamedParametersService namedParametersService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIPipelineService(IridaWorkflowsService workflowsService,\n+\t\t\tWorkflowNamedParametersService namedParametersService, MessageSource messageSource) {\n+\t\tthis.workflowsService = workflowsService;\n+\t\tthis.namedParametersService = namedParametersService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Get the information about a specific workflow pipeline\n+\t *\n+\t * @param id     for a {@link IridaWorkflow}\n+\t * @param locale current users {@link Locale}\n+\t * @return Details contained within a {@link UIPipelineDetailsResponse}\n+\t * @throws IridaWorkflowNotFoundException exception thrown if the workflow cannot be found.\n+\t */\n+\tpublic UIPipelineDetailsResponse getPipelineDetails(UUID id, Locale locale) throws IridaWorkflowNotFoundException {\n+\t\tIridaWorkflow workflow = workflowsService.getIridaWorkflow(id);\n+\t\tIridaWorkflowDescription description = workflow.getWorkflowDescription();\n+\t\tUIPipelineDetailsResponse detailsResponse = new UIPipelineDetailsResponse();\n \n         /*\n         Prefix for getting messages from IRIDA message properties file\n          */\n-        String prefix = \"workflow.\" + description.getAnalysisType()\n-                .getType() + \".\";\n+\t\tString prefix = \"workflow.\" + description.getAnalysisType()\n+\t\t\t\t.getType() + \".\";\n \n         /*\n         Set up basic information for the pipeline being launched.\n          */\n-        detailsResponse.setName(messageSource.getMessage(prefix + \"title\", new Object[]{}, locale));\n-        detailsResponse.setDescription(messageSource.getMessage(prefix + \"description\", new Object[]{}, locale));\n-        detailsResponse.setType(description.getName());\n+\t\tdetailsResponse.setName(messageSource.getMessage(prefix + \"title\", new Object[] {}, locale));\n+\t\tdetailsResponse.setDescription(messageSource.getMessage(prefix + \"description\", new Object[] {}, locale));\n+\t\tdetailsResponse.setType(description.getName());\n \n         /*\n         Add all pipeline parameters\n          */\n-        detailsResponse.setParameterWithOptions(getPipelineSpecificParametersWithOptions(description, locale));\n+\t\tdetailsResponse.setParameterWithOptions(getPipelineSpecificParametersWithOptions(description, locale));\n \n         /*\n         Add saved parameter sets\n          */\n-        detailsResponse.setSavedPipelineParameters(getSavedPipelineParameters(workflow, locale));\n-\n-        return detailsResponse;\n-    }\n-\n-    /**\n-     * Save a new set of {@link IridaWorkflowNamedParameters}\n-     *\n-     * @param id                      UUID identifier for w {@link IridaWorkflow}\n-     * @param savedPipelineParameters details about the new set of saved pipeline parameters\n-     * @return the identifier for the new set\n-     */\n-    public Long saveNewPipelineParameters(UUID id, SavedPipelineParameters savedPipelineParameters) {\n-        Map<String, String> parameters = new HashMap<>();\n-\n-        for (PipelineParameter parameter : savedPipelineParameters.getParameters()) {\n-            parameters.put(parameter.getName(), parameter.getValue());\n-        }\n-        IridaWorkflowNamedParameters namedParameters = new IridaWorkflowNamedParameters(\n-                savedPipelineParameters.getLabel(), id, parameters);\n-        namedParameters = namedParametersService.create(namedParameters);\n-        return namedParameters.getId();\n-    }\n-\n-    /**\n-     * Get a list of pipeline parameters that have specific options.\n-     *\n-     * @param description {@link IridaWorkflowDescription}\n-     * @param locale      {@link Locale} current users locale\n-     * @return List of pipeline parameters with options\n-     */\n-    private List<PipelineParameterWithOptions> getPipelineSpecificParametersWithOptions(\n-            IridaWorkflowDescription description, Locale locale) {\n-        return description.getParameters()\n-                .stream()\n-                .filter(IridaWorkflowParameter::hasChoices)\n-                .map(parameter -> {\n-                    String name = description.getName()\n-                            .toLowerCase();\n-                    String label = localizedParamLabel(locale, name, parameter.getName());\n-                    String defaultValue = parameter.getDefaultValue();\n-                    List<SelectOption> options = parameter.getChoices()\n-                            .stream()\n-                            .map(option -> new SelectOption(option.getValue(),\n-                                    localizedParamOptionLabel(locale, name, parameter.getName(), option.getName())))\n-                            .collect(Collectors.toUnmodifiableList());\n-                    return new PipelineParameterWithOptions(parameter.getName(), label, defaultValue, options);\n-                })\n-                .collect(Collectors.toUnmodifiableList());\n-    }\n-\n-    /**\n-     * Internationalize a parameter label.  If there is not translation for it, just return the default text.\n-     *\n-     * @param locale       current users {@link Locale}\n-     * @param workflowName name of the current {@link IridaWorkflow}\n-     * @param paramName    name of the parameter to internationalize.\n-     * @return the translated value\n-     */\n-    private String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n-        final String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n-        try {\n-            return messageSource.getMessage(messageName, null, locale);\n-        } catch (NoSuchMessageException e) {\n-            return paramName;\n-        }\n-    }\n-\n-    /**\n-     * Internationalize a parameter option.\n-     *\n-     * @param locale       current users {@link Locale}\n-     * @param workflowName name of the current {@link IridaWorkflow\n-     * @param paramName    name of the parameter the option belong to\n-     * @param optionName   name of the option\n-     * @return the translated value for the option\n-     */\n-    private String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n-        String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n-        try {\n-            return messageSource.getMessage(messageName, null, locale);\n-        } catch (NoSuchMessageException e) {\n-            return paramName + \".\" + optionName;\n-        }\n-    }\n-\n-    private List<SavedPipelineParameters> getSavedPipelineParameters(IridaWorkflow workflow, Locale locale) {\n-        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n-        List<IridaWorkflowParameter> workflowParameters = description.getParameters();\n-        String pipelineName = description.getName()\n-                .toLowerCase();\n-        List<SavedPipelineParameters> savedParameters = new ArrayList<>();\n+\t\tdetailsResponse.setSavedPipelineParameters(getSavedPipelineParameters(workflow, locale));\n+\n+\t\treturn detailsResponse;\n+\t}\n+\n+\t/**\n+\t * Save a new set of {@link IridaWorkflowNamedParameters}\n+\t *\n+\t * @param id                      UUID identifier for w {@link IridaWorkflow}\n+\t * @param savedPipelineParameters details about the new set of saved pipeline parameters\n+\t * @return the identifier for the new set\n+\t */\n+\tpublic Long saveNewPipelineParameters(UUID id, SavedPipelineParameters savedPipelineParameters) {\n+\t\tMap<String, String> parameters = new HashMap<>();\n+\n+\t\tfor (PipelineParameter parameter : savedPipelineParameters.getParameters()) {\n+\t\t\tparameters.put(parameter.getName(), parameter.getValue());\n+\t\t}\n+\t\tIridaWorkflowNamedParameters namedParameters = new IridaWorkflowNamedParameters(\n+\t\t\t\tsavedPipelineParameters.getLabel(), id, parameters);\n+\t\tnamedParameters = namedParametersService.create(namedParameters);\n+\t\treturn namedParameters.getId();\n+\t}\n+\n+\t/**\n+\t * Get a list of pipeline parameters that have specific options.\n+\t *\n+\t * @param description {@link IridaWorkflowDescription}\n+\t * @param locale      {@link Locale} current users locale\n+\t * @return List of pipeline parameters with options\n+\t */\n+\tprivate List<PipelineParameterWithOptions> getPipelineSpecificParametersWithOptions(\n+\t\t\tIridaWorkflowDescription description, Locale locale) {\n+\t\treturn description.getParameters()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(IridaWorkflowParameter::hasChoices)\n+\t\t\t\t.map(parameter -> {\n+\t\t\t\t\tString name = description.getName()\n+\t\t\t\t\t\t\t.toLowerCase();\n+\t\t\t\t\tString label = localizedParamLabel(locale, name, parameter.getName());\n+\t\t\t\t\tString defaultValue = parameter.getDefaultValue();\n+\t\t\t\t\tList<SelectOption> options = parameter.getChoices()\n+\t\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.map(option -> new SelectOption(option.getValue(),\n+\t\t\t\t\t\t\t\t\tlocalizedParamOptionLabel(locale, name, parameter.getName(), option.getName())))\n+\t\t\t\t\t\t\t.collect(Collectors.toUnmodifiableList());\n+\t\t\t\t\treturn new PipelineParameterWithOptions(parameter.getName(), label, defaultValue, options);\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toUnmodifiableList());\n+\t}\n+\n+\t/**\n+\t * Internationalize a parameter label.  If there is not translation for it, just return the default text.\n+\t *\n+\t * @param locale       current users {@link Locale}\n+\t * @param workflowName name of the current {@link IridaWorkflow}\n+\t * @param paramName    name of the parameter to internationalize.\n+\t * @return the translated value\n+\t */\n+\tprivate String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n+\t\tfinal String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n+\t\ttry {\n+\t\t\treturn messageSource.getMessage(messageName, null, locale);\n+\t\t} catch (NoSuchMessageException e) {\n+\t\t\treturn paramName;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Internationalize a parameter option.\n+\t *\n+\t * @param locale       current users {@link Locale}\n+\t * @param workflowName name of the current {@link IridaWorkflow\n+\t * @param paramName    name of the parameter the option belong to\n+\t * @param optionName   name of the option\n+\t * @return the translated value for the option\n+\t */\n+\tprivate String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n+\t\tString messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n+\t\ttry {\n+\t\t\treturn messageSource.getMessage(messageName, null, locale);\n+\t\t} catch (NoSuchMessageException e) {\n+\t\t\treturn paramName + \".\" + optionName;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get a list of all saved named pipeline parameters for a workflow\n+\t *\n+\t * @param workflow - {@link IridaWorkflow}\n+\t * @param locale   - currently logged in users locale\n+\t * @return list of {@link SavedPipelineParameters}\n+\t */\n+\tprivate List<SavedPipelineParameters> getSavedPipelineParameters(IridaWorkflow workflow, Locale locale) {\n+\t\tIridaWorkflowDescription description = workflow.getWorkflowDescription();\n+\t\tList<IridaWorkflowParameter> workflowParameters = description.getParameters();\n+\t\tString pipelineName = description.getName()\n+\t\t\t\t.toLowerCase();\n+\t\tList<SavedPipelineParameters> savedParameters = new ArrayList<>();\n \n         /*\n         If there are no parameters just return an empty list.\n          */\n-        if (workflowParameters == null) {\n-            return savedParameters;\n-        }\n+\t\tif (workflowParameters == null) {\n+\t\t\treturn savedParameters;\n+\t\t}\n \n         /*\n         Get the default parameter set\n          */\n-        List<PipelineParameter> defaultParameters = workflowParameters.stream()\n-                .filter(p -> !p.isRequired())\n-                .map(p -> new PipelineParameter(\n-                        p.getName(),\n-                        messageSource.getMessage(\"pipeline.parameters.\" + pipelineName + \".\" + p.getName(), new Object[]{}, locale),\n-                        p.getDefaultValue()))\n-                .collect(Collectors.toList());\n-        savedParameters.add(new SavedPipelineParameters(0L, messageSource.getMessage(\"workflow.parameters.named.default\", new Object[]{}, locale), defaultParameters));\n+\t\tList<PipelineParameter> defaultParameters = workflowParameters.stream()\n+\t\t\t\t.filter(p -> !p.isRequired())\n+\t\t\t\t.map(p -> new PipelineParameter(p.getName(),\n+\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.\" + pipelineName + \".\" + p.getName(),\n+\t\t\t\t\t\t\t\tnew Object[] {}, locale), p.getDefaultValue()))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tsavedParameters.add(new SavedPipelineParameters(0L,\n+\t\t\t\tmessageSource.getMessage(\"workflow.parameters.named.default\", new Object[] {}, locale),\n+\t\t\t\tdefaultParameters));\n \n         /*\n         Add any saved parameter sets\n          */\n-        List<IridaWorkflowNamedParameters> namedParameters = namedParametersService.findNamedParametersForWorkflow(workflow.getWorkflowIdentifier());\n-        savedParameters.addAll(namedParameters.stream().map(wp -> {\n-            Map<String, String> inputParameter = wp.getInputParameters();\n-\n-            // Go through the parameters and see which ones are getting overwritten.\n-            List<PipelineParameter> parameters = defaultParameters.stream()\n-                    .map(parameter -> {\n-                        if (inputParameter.containsKey(parameter.getName())) {\n-                            return new PipelineParameter(parameter.getName(), parameter.getLabel(), inputParameter.get(parameter.getName()));\n-                        }\n-                        return new PipelineParameter(parameter.getName(), parameter.getLabel(), parameter.getValue());\n-                    }).collect(Collectors.toList());\n-            return new SavedPipelineParameters(wp.getId(), wp.getLabel(), parameters);\n-        }).collect(Collectors.toList()));\n-\n-\n-        return savedParameters;\n-    }\n+\t\tList<IridaWorkflowNamedParameters> namedParameters = namedParametersService.findNamedParametersForWorkflow(\n+\t\t\t\tworkflow.getWorkflowIdentifier());\n+\t\tsavedParameters.addAll(namedParameters.stream()\n+\t\t\t\t.map(wp -> {\n+\t\t\t\t\tMap<String, String> inputParameter = wp.getInputParameters();\n+\n+\t\t\t\t\t// Go through the parameters and see which ones are getting overwritten.\n+\t\t\t\t\tList<PipelineParameter> parameters = defaultParameters.stream()\n+\t\t\t\t\t\t\t.map(parameter -> {\n+\t\t\t\t\t\t\t\tif (inputParameter.containsKey(parameter.getName())) {\n+\t\t\t\t\t\t\t\t\treturn new PipelineParameter(parameter.getName(), parameter.getLabel(),\n+\t\t\t\t\t\t\t\t\t\t\tinputParameter.get(parameter.getName()));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\treturn new PipelineParameter(parameter.getName(), parameter.getLabel(),\n+\t\t\t\t\t\t\t\t\t\tparameter.getValue());\n+\t\t\t\t\t\t\t})\n+\t\t\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t\t\treturn new SavedPipelineParameters(wp.getId(), wp.getLabel(), parameters);\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\treturn savedParameters;\n+\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzMzExOQ==", "url": "https://github.com/phac-nml/irida/pull/837#discussion_r518333119", "bodyText": "Shouldn't 0L be the actual id. Wouldn't this just set the id to 0 for all of the SavedPipelineParameters?", "author": "deepsidhu85", "createdAt": "2020-11-05T20:06:38Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java", "diffHunk": "@@ -128,4 +156,52 @@ private String localizedParamOptionLabel(Locale locale, String workflowName, Str\n             return paramName + \".\" + optionName;\n         }\n     }\n+\n+    private List<SavedPipelineParameters> getSavedPipelineParameters(IridaWorkflow workflow, Locale locale) {\n+        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n+        List<IridaWorkflowParameter> workflowParameters = description.getParameters();\n+        String pipelineName = description.getName()\n+                .toLowerCase();\n+        List<SavedPipelineParameters> savedParameters = new ArrayList<>();\n+\n+        /*\n+        If there are no parameters just return an empty list.\n+         */\n+        if (workflowParameters == null) {\n+            return savedParameters;\n+        }\n+\n+        /*\n+        Get the default parameter set\n+         */\n+        List<PipelineParameter> defaultParameters = workflowParameters.stream()\n+                .filter(p -> !p.isRequired())\n+                .map(p -> new PipelineParameter(\n+                        p.getName(),\n+                        messageSource.getMessage(\"pipeline.parameters.\" + pipelineName + \".\" + p.getName(), new Object[]{}, locale),\n+                        p.getDefaultValue()))\n+                .collect(Collectors.toList());\n+        savedParameters.add(new SavedPipelineParameters(0L, messageSource.getMessage(\"workflow.parameters.named.default\", new Object[]{}, locale), defaultParameters));", "originalCommit": "9e273f0334b2cda04de0a1070d70409efea7df3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg2MzI4Mg==", "url": "https://github.com/phac-nml/irida/pull/837#discussion_r518863282", "bodyText": "So this is a special case because it is the \"default\" set it doesn't actually have it own identifier.", "author": "joshsadam", "createdAt": "2020-11-06T16:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMzMzExOQ=="}], "type": "inlineReview", "revised_code": {"commit": "ff30fb64d75064b84c44c6d33bf4579f0f827d7e", "chunk": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java\nindex e6a208b270..6b53bd1df3 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/services/UIPipelineService.java\n\n@@ -26,182 +26,196 @@ import ca.corefacility.bioinformatics.irida.service.workflow.WorkflowNamedParame\n  */\n @Component\n public class UIPipelineService {\n-    private final IridaWorkflowsService workflowsService;\n-    private final WorkflowNamedParametersService namedParametersService;\n-    private final MessageSource messageSource;\n-\n-    @Autowired\n-    public UIPipelineService(IridaWorkflowsService workflowsService, WorkflowNamedParametersService namedParametersService, MessageSource messageSource) {\n-        this.workflowsService = workflowsService;\n-        this.namedParametersService = namedParametersService;\n-        this.messageSource = messageSource;\n-    }\n-\n-    /**\n-     * Get the information about a specific workflow pipeline\n-     *\n-     * @param id     for a {@link IridaWorkflow}\n-     * @param locale current users {@link Locale}\n-     * @return Details contained within a {@link UIPipelineDetailsResponse}\n-     * @throws IridaWorkflowNotFoundException exception thrown if the workflow cannot be found.\n-     */\n-    public UIPipelineDetailsResponse getPipelineDetails(UUID id, Locale locale) throws IridaWorkflowNotFoundException {\n-        IridaWorkflow workflow = workflowsService.getIridaWorkflow(id);\n-        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n-        UIPipelineDetailsResponse detailsResponse = new UIPipelineDetailsResponse();\n+\tprivate final IridaWorkflowsService workflowsService;\n+\tprivate final WorkflowNamedParametersService namedParametersService;\n+\tprivate final MessageSource messageSource;\n+\n+\t@Autowired\n+\tpublic UIPipelineService(IridaWorkflowsService workflowsService,\n+\t\t\tWorkflowNamedParametersService namedParametersService, MessageSource messageSource) {\n+\t\tthis.workflowsService = workflowsService;\n+\t\tthis.namedParametersService = namedParametersService;\n+\t\tthis.messageSource = messageSource;\n+\t}\n+\n+\t/**\n+\t * Get the information about a specific workflow pipeline\n+\t *\n+\t * @param id     for a {@link IridaWorkflow}\n+\t * @param locale current users {@link Locale}\n+\t * @return Details contained within a {@link UIPipelineDetailsResponse}\n+\t * @throws IridaWorkflowNotFoundException exception thrown if the workflow cannot be found.\n+\t */\n+\tpublic UIPipelineDetailsResponse getPipelineDetails(UUID id, Locale locale) throws IridaWorkflowNotFoundException {\n+\t\tIridaWorkflow workflow = workflowsService.getIridaWorkflow(id);\n+\t\tIridaWorkflowDescription description = workflow.getWorkflowDescription();\n+\t\tUIPipelineDetailsResponse detailsResponse = new UIPipelineDetailsResponse();\n \n         /*\n         Prefix for getting messages from IRIDA message properties file\n          */\n-        String prefix = \"workflow.\" + description.getAnalysisType()\n-                .getType() + \".\";\n+\t\tString prefix = \"workflow.\" + description.getAnalysisType()\n+\t\t\t\t.getType() + \".\";\n \n         /*\n         Set up basic information for the pipeline being launched.\n          */\n-        detailsResponse.setName(messageSource.getMessage(prefix + \"title\", new Object[]{}, locale));\n-        detailsResponse.setDescription(messageSource.getMessage(prefix + \"description\", new Object[]{}, locale));\n-        detailsResponse.setType(description.getName());\n+\t\tdetailsResponse.setName(messageSource.getMessage(prefix + \"title\", new Object[] {}, locale));\n+\t\tdetailsResponse.setDescription(messageSource.getMessage(prefix + \"description\", new Object[] {}, locale));\n+\t\tdetailsResponse.setType(description.getName());\n \n         /*\n         Add all pipeline parameters\n          */\n-        detailsResponse.setParameterWithOptions(getPipelineSpecificParametersWithOptions(description, locale));\n+\t\tdetailsResponse.setParameterWithOptions(getPipelineSpecificParametersWithOptions(description, locale));\n \n         /*\n         Add saved parameter sets\n          */\n-        detailsResponse.setSavedPipelineParameters(getSavedPipelineParameters(workflow, locale));\n-\n-        return detailsResponse;\n-    }\n-\n-    /**\n-     * Save a new set of {@link IridaWorkflowNamedParameters}\n-     *\n-     * @param id                      UUID identifier for w {@link IridaWorkflow}\n-     * @param savedPipelineParameters details about the new set of saved pipeline parameters\n-     * @return the identifier for the new set\n-     */\n-    public Long saveNewPipelineParameters(UUID id, SavedPipelineParameters savedPipelineParameters) {\n-        Map<String, String> parameters = new HashMap<>();\n-\n-        for (PipelineParameter parameter : savedPipelineParameters.getParameters()) {\n-            parameters.put(parameter.getName(), parameter.getValue());\n-        }\n-        IridaWorkflowNamedParameters namedParameters = new IridaWorkflowNamedParameters(\n-                savedPipelineParameters.getLabel(), id, parameters);\n-        namedParameters = namedParametersService.create(namedParameters);\n-        return namedParameters.getId();\n-    }\n-\n-    /**\n-     * Get a list of pipeline parameters that have specific options.\n-     *\n-     * @param description {@link IridaWorkflowDescription}\n-     * @param locale      {@link Locale} current users locale\n-     * @return List of pipeline parameters with options\n-     */\n-    private List<PipelineParameterWithOptions> getPipelineSpecificParametersWithOptions(\n-            IridaWorkflowDescription description, Locale locale) {\n-        return description.getParameters()\n-                .stream()\n-                .filter(IridaWorkflowParameter::hasChoices)\n-                .map(parameter -> {\n-                    String name = description.getName()\n-                            .toLowerCase();\n-                    String label = localizedParamLabel(locale, name, parameter.getName());\n-                    String defaultValue = parameter.getDefaultValue();\n-                    List<SelectOption> options = parameter.getChoices()\n-                            .stream()\n-                            .map(option -> new SelectOption(option.getValue(),\n-                                    localizedParamOptionLabel(locale, name, parameter.getName(), option.getName())))\n-                            .collect(Collectors.toUnmodifiableList());\n-                    return new PipelineParameterWithOptions(parameter.getName(), label, defaultValue, options);\n-                })\n-                .collect(Collectors.toUnmodifiableList());\n-    }\n-\n-    /**\n-     * Internationalize a parameter label.  If there is not translation for it, just return the default text.\n-     *\n-     * @param locale       current users {@link Locale}\n-     * @param workflowName name of the current {@link IridaWorkflow}\n-     * @param paramName    name of the parameter to internationalize.\n-     * @return the translated value\n-     */\n-    private String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n-        final String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n-        try {\n-            return messageSource.getMessage(messageName, null, locale);\n-        } catch (NoSuchMessageException e) {\n-            return paramName;\n-        }\n-    }\n-\n-    /**\n-     * Internationalize a parameter option.\n-     *\n-     * @param locale       current users {@link Locale}\n-     * @param workflowName name of the current {@link IridaWorkflow\n-     * @param paramName    name of the parameter the option belong to\n-     * @param optionName   name of the option\n-     * @return the translated value for the option\n-     */\n-    private String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n-        String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n-        try {\n-            return messageSource.getMessage(messageName, null, locale);\n-        } catch (NoSuchMessageException e) {\n-            return paramName + \".\" + optionName;\n-        }\n-    }\n-\n-    private List<SavedPipelineParameters> getSavedPipelineParameters(IridaWorkflow workflow, Locale locale) {\n-        IridaWorkflowDescription description = workflow.getWorkflowDescription();\n-        List<IridaWorkflowParameter> workflowParameters = description.getParameters();\n-        String pipelineName = description.getName()\n-                .toLowerCase();\n-        List<SavedPipelineParameters> savedParameters = new ArrayList<>();\n+\t\tdetailsResponse.setSavedPipelineParameters(getSavedPipelineParameters(workflow, locale));\n+\n+\t\treturn detailsResponse;\n+\t}\n+\n+\t/**\n+\t * Save a new set of {@link IridaWorkflowNamedParameters}\n+\t *\n+\t * @param id                      UUID identifier for w {@link IridaWorkflow}\n+\t * @param savedPipelineParameters details about the new set of saved pipeline parameters\n+\t * @return the identifier for the new set\n+\t */\n+\tpublic Long saveNewPipelineParameters(UUID id, SavedPipelineParameters savedPipelineParameters) {\n+\t\tMap<String, String> parameters = new HashMap<>();\n+\n+\t\tfor (PipelineParameter parameter : savedPipelineParameters.getParameters()) {\n+\t\t\tparameters.put(parameter.getName(), parameter.getValue());\n+\t\t}\n+\t\tIridaWorkflowNamedParameters namedParameters = new IridaWorkflowNamedParameters(\n+\t\t\t\tsavedPipelineParameters.getLabel(), id, parameters);\n+\t\tnamedParameters = namedParametersService.create(namedParameters);\n+\t\treturn namedParameters.getId();\n+\t}\n+\n+\t/**\n+\t * Get a list of pipeline parameters that have specific options.\n+\t *\n+\t * @param description {@link IridaWorkflowDescription}\n+\t * @param locale      {@link Locale} current users locale\n+\t * @return List of pipeline parameters with options\n+\t */\n+\tprivate List<PipelineParameterWithOptions> getPipelineSpecificParametersWithOptions(\n+\t\t\tIridaWorkflowDescription description, Locale locale) {\n+\t\treturn description.getParameters()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(IridaWorkflowParameter::hasChoices)\n+\t\t\t\t.map(parameter -> {\n+\t\t\t\t\tString name = description.getName()\n+\t\t\t\t\t\t\t.toLowerCase();\n+\t\t\t\t\tString label = localizedParamLabel(locale, name, parameter.getName());\n+\t\t\t\t\tString defaultValue = parameter.getDefaultValue();\n+\t\t\t\t\tList<SelectOption> options = parameter.getChoices()\n+\t\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.map(option -> new SelectOption(option.getValue(),\n+\t\t\t\t\t\t\t\t\tlocalizedParamOptionLabel(locale, name, parameter.getName(), option.getName())))\n+\t\t\t\t\t\t\t.collect(Collectors.toUnmodifiableList());\n+\t\t\t\t\treturn new PipelineParameterWithOptions(parameter.getName(), label, defaultValue, options);\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toUnmodifiableList());\n+\t}\n+\n+\t/**\n+\t * Internationalize a parameter label.  If there is not translation for it, just return the default text.\n+\t *\n+\t * @param locale       current users {@link Locale}\n+\t * @param workflowName name of the current {@link IridaWorkflow}\n+\t * @param paramName    name of the parameter to internationalize.\n+\t * @return the translated value\n+\t */\n+\tprivate String localizedParamLabel(Locale locale, String workflowName, String paramName) {\n+\t\tfinal String messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName;\n+\t\ttry {\n+\t\t\treturn messageSource.getMessage(messageName, null, locale);\n+\t\t} catch (NoSuchMessageException e) {\n+\t\t\treturn paramName;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Internationalize a parameter option.\n+\t *\n+\t * @param locale       current users {@link Locale}\n+\t * @param workflowName name of the current {@link IridaWorkflow\n+\t * @param paramName    name of the parameter the option belong to\n+\t * @param optionName   name of the option\n+\t * @return the translated value for the option\n+\t */\n+\tprivate String localizedParamOptionLabel(Locale locale, String workflowName, String paramName, String optionName) {\n+\t\tString messageName = \"pipeline.parameters.\" + workflowName + \".\" + paramName + \".\" + optionName;\n+\t\ttry {\n+\t\t\treturn messageSource.getMessage(messageName, null, locale);\n+\t\t} catch (NoSuchMessageException e) {\n+\t\t\treturn paramName + \".\" + optionName;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get a list of all saved named pipeline parameters for a workflow\n+\t *\n+\t * @param workflow - {@link IridaWorkflow}\n+\t * @param locale   - currently logged in users locale\n+\t * @return list of {@link SavedPipelineParameters}\n+\t */\n+\tprivate List<SavedPipelineParameters> getSavedPipelineParameters(IridaWorkflow workflow, Locale locale) {\n+\t\tIridaWorkflowDescription description = workflow.getWorkflowDescription();\n+\t\tList<IridaWorkflowParameter> workflowParameters = description.getParameters();\n+\t\tString pipelineName = description.getName()\n+\t\t\t\t.toLowerCase();\n+\t\tList<SavedPipelineParameters> savedParameters = new ArrayList<>();\n \n         /*\n         If there are no parameters just return an empty list.\n          */\n-        if (workflowParameters == null) {\n-            return savedParameters;\n-        }\n+\t\tif (workflowParameters == null) {\n+\t\t\treturn savedParameters;\n+\t\t}\n \n         /*\n         Get the default parameter set\n          */\n-        List<PipelineParameter> defaultParameters = workflowParameters.stream()\n-                .filter(p -> !p.isRequired())\n-                .map(p -> new PipelineParameter(\n-                        p.getName(),\n-                        messageSource.getMessage(\"pipeline.parameters.\" + pipelineName + \".\" + p.getName(), new Object[]{}, locale),\n-                        p.getDefaultValue()))\n-                .collect(Collectors.toList());\n-        savedParameters.add(new SavedPipelineParameters(0L, messageSource.getMessage(\"workflow.parameters.named.default\", new Object[]{}, locale), defaultParameters));\n+\t\tList<PipelineParameter> defaultParameters = workflowParameters.stream()\n+\t\t\t\t.filter(p -> !p.isRequired())\n+\t\t\t\t.map(p -> new PipelineParameter(p.getName(),\n+\t\t\t\t\t\tmessageSource.getMessage(\"pipeline.parameters.\" + pipelineName + \".\" + p.getName(),\n+\t\t\t\t\t\t\t\tnew Object[] {}, locale), p.getDefaultValue()))\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tsavedParameters.add(new SavedPipelineParameters(0L,\n+\t\t\t\tmessageSource.getMessage(\"workflow.parameters.named.default\", new Object[] {}, locale),\n+\t\t\t\tdefaultParameters));\n \n         /*\n         Add any saved parameter sets\n          */\n-        List<IridaWorkflowNamedParameters> namedParameters = namedParametersService.findNamedParametersForWorkflow(workflow.getWorkflowIdentifier());\n-        savedParameters.addAll(namedParameters.stream().map(wp -> {\n-            Map<String, String> inputParameter = wp.getInputParameters();\n-\n-            // Go through the parameters and see which ones are getting overwritten.\n-            List<PipelineParameter> parameters = defaultParameters.stream()\n-                    .map(parameter -> {\n-                        if (inputParameter.containsKey(parameter.getName())) {\n-                            return new PipelineParameter(parameter.getName(), parameter.getLabel(), inputParameter.get(parameter.getName()));\n-                        }\n-                        return new PipelineParameter(parameter.getName(), parameter.getLabel(), parameter.getValue());\n-                    }).collect(Collectors.toList());\n-            return new SavedPipelineParameters(wp.getId(), wp.getLabel(), parameters);\n-        }).collect(Collectors.toList()));\n-\n-\n-        return savedParameters;\n-    }\n+\t\tList<IridaWorkflowNamedParameters> namedParameters = namedParametersService.findNamedParametersForWorkflow(\n+\t\t\t\tworkflow.getWorkflowIdentifier());\n+\t\tsavedParameters.addAll(namedParameters.stream()\n+\t\t\t\t.map(wp -> {\n+\t\t\t\t\tMap<String, String> inputParameter = wp.getInputParameters();\n+\n+\t\t\t\t\t// Go through the parameters and see which ones are getting overwritten.\n+\t\t\t\t\tList<PipelineParameter> parameters = defaultParameters.stream()\n+\t\t\t\t\t\t\t.map(parameter -> {\n+\t\t\t\t\t\t\t\tif (inputParameter.containsKey(parameter.getName())) {\n+\t\t\t\t\t\t\t\t\treturn new PipelineParameter(parameter.getName(), parameter.getLabel(),\n+\t\t\t\t\t\t\t\t\t\t\tinputParameter.get(parameter.getName()));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\treturn new PipelineParameter(parameter.getName(), parameter.getLabel(),\n+\t\t\t\t\t\t\t\t\t\tparameter.getValue());\n+\t\t\t\t\t\t\t})\n+\t\t\t\t\t\t\t.collect(Collectors.toList());\n+\t\t\t\t\treturn new SavedPipelineParameters(wp.getId(), wp.getLabel(), parameters);\n+\t\t\t\t})\n+\t\t\t\t.collect(Collectors.toList()));\n+\n+\t\treturn savedParameters;\n+\t}\n }\n"}}, {"oid": "ff30fb64d75064b84c44c6d33bf4579f0f827d7e", "url": "https://github.com/phac-nml/irida/commit/ff30fb64d75064b84c44c6d33bf4579f0f827d7e", "message": ":bulb: Updated JavaDoc", "committedDate": "2020-11-06T16:27:09Z", "type": "commit"}, {"oid": "9230a9b964afe32d63260345073a932dba82c78f", "url": "https://github.com/phac-nml/irida/commit/9230a9b964afe32d63260345073a932dba82c78f", "message": ":ok_hand: Throw any possible error", "committedDate": "2020-11-06T16:30:21Z", "type": "commit"}, {"oid": "94c9af7850021190520c1ac344c6c0a3ca8c88c1", "url": "https://github.com/phac-nml/irida/commit/94c9af7850021190520c1ac344c6c0a3ca8c88c1", "message": "Fixed import for form", "committedDate": "2020-11-06T16:33:13Z", "type": "commit"}, {"oid": "84c7e7860c649dce50072cc9191e39e3a46c522b", "url": "https://github.com/phac-nml/irida/commit/84c7e7860c649dce50072cc9191e39e3a46c522b", "message": ":pencil2: Fixed typo", "committedDate": "2020-11-06T16:34:43Z", "type": "commit"}, {"oid": "da2f590075a4125763860023854e9d25c38ac202", "url": "https://github.com/phac-nml/irida/commit/da2f590075a4125763860023854e9d25c38ac202", "message": ":bulb: Updated JSDoc", "committedDate": "2020-11-06T16:36:43Z", "type": "commit"}, {"oid": "7fe76aabd899430c263f776fc61c75da7a697cd7", "url": "https://github.com/phac-nml/irida/commit/7fe76aabd899430c263f776fc61c75da7a697cd7", "message": ":pencil2: Fixed typo", "committedDate": "2020-11-06T16:38:00Z", "type": "commit"}, {"oid": "5516b97c5795112166fac883ac2d1361259b729c", "url": "https://github.com/phac-nml/irida/commit/5516b97c5795112166fac883ac2d1361259b729c", "message": "Fixed isssue with not displaying new saved modified parameters", "committedDate": "2020-11-09T11:40:44Z", "type": "commit"}]}