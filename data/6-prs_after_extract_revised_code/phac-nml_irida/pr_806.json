{"pr_number": 806, "pr_title": "cgMLST update for the SISTR Viewer (cgmlst_found_loci field addition)", "pr_createdAt": "2020-09-23T17:58:16Z", "pr_url": "https://github.com/phac-nml/irida/pull/806", "timeline": [{"oid": "9f199afd845c483dd2f6cd161c5bfe14e0d90bdf", "url": "https://github.com/phac-nml/irida/commit/9f199afd845c483dd2f6cd161c5bfe14e0d90bdf", "message": "two new fields cgmlst_found_loci and percent of the cgmlst_found_loci field that shows number of alleles that were found in sample as a useful QC metic. Tested both with SISTR v1.0.2 and the newest SISTR v1.1.1 containing the cgmlst_found_loci field. Corrected cgmlst_distance declaration to float type (was integer)", "committedDate": "2020-09-23T16:14:40Z", "type": "commit"}, {"oid": "830007ea84fb6e7102c7ca9c5a0c470d629d34f0", "url": "https://github.com/phac-nml/irida/commit/830007ea84fb6e7102c7ca9c5a0c470d629d34f0", "message": "Changed number of items in cgMLST SISTR Viewer section from 5 to 7", "committedDate": "2020-09-23T19:18:14Z", "type": "commit"}, {"oid": "589898bdfdd03da513878579a999863f48fb0184", "url": "https://github.com/phac-nml/irida/commit/589898bdfdd03da513878579a999863f48fb0184", "message": "updated pom and changelog versions to 21.01", "committedDate": "2020-09-24T14:55:28Z", "type": "commit"}, {"oid": "508053e67ddbb365752410d989fb4b46c7a83159", "url": "https://github.com/phac-nml/irida/commit/508053e67ddbb365752410d989fb4b46c7a83159", "message": "Merge branch 'doc/snvphyl' into development", "committedDate": "2020-09-24T17:02:36Z", "type": "commit"}, {"oid": "1b3a73d35f298793625d903f1b1707c8dde81f67", "url": "https://github.com/phac-nml/irida/commit/1b3a73d35f298793625d903f1b1707c8dde81f67", "message": "Updated AnalysisAjaxController.java getSistrAnalysis() to accept calls not only from built-in SISTR workflow but also from IRIDA plugins by checking not AnalysisType but requested viewer for final results rendering (i.e. results page in Analysis view). Checked to make sure this code update works with both built-in and plugin SISTR versions. Removed analysisType.equals(BuiltInAnalysisTypes.SISTR_TYPING) as checking is done based on the results viewer requested only", "committedDate": "2020-09-26T12:31:48Z", "type": "commit"}, {"oid": "de06006aaf6f9e26457fe500b1752889bf414bed", "url": "https://github.com/phac-nml/irida/commit/de06006aaf6f9e26457fe500b1752889bf414bed", "message": "removed unused import statement import ca.corefacility.bioinformatics.irida.model.workflow.analysis.type.BuiltInAnalysisTypes from AnalysisAjaxController.java", "committedDate": "2020-09-28T15:11:49Z", "type": "commit"}, {"oid": "a5aef4cb6b9421876f84f9c0087c28d4e28a98a2", "url": "https://github.com/phac-nml/irida/commit/a5aef4cb6b9421876f84f9c0087c28d4e28a98a2", "message": "Updated CHANGELOG.md with new relaease changes related to SISTRViewer results rendering", "committedDate": "2020-09-28T16:51:13Z", "type": "commit"}, {"oid": "9085c49c621ab094acc6f7424290b313974aa5b7", "url": "https://github.com/phac-nml/irida/commit/9085c49c621ab094acc6f7424290b313974aa5b7", "message": "Merge branch 'development' into sistr-viewer-fix", "committedDate": "2020-09-28T18:24:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4MzU0Ng==", "url": "https://github.com/phac-nml/irida/pull/806#discussion_r496083546", "bodyText": "Could you fix up formatting around else (add spaces around }else{).", "author": "apetkau", "createdAt": "2020-09-28T16:32:50Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -750,10 +749,18 @@ public AnalysisSistrResults getSistrAnalysis(@PathVariable Long id) {\n \t\t}\n \t\tAnalysisType analysisType = iridaWorkflow.getWorkflowDescription()\n \t\t\t\t.getAnalysisType();\n-\t\tif (analysisType.equals(BuiltInAnalysisTypes.SISTR_TYPING)) {\n+\t\tif (analysisTypesService.getViewerForAnalysisType(analysisType).get().equals(\"sistr\")) {\n \t\t\tAnalysis analysis = submission.getAnalysis();\n-\t\t\tPath path = analysis.getAnalysisOutputFile(sistrFileKey)\n-\t\t\t\t\t.getFile();\n+\n+\t\t\tPath path = null;\n+\t\t\tif(analysis.getAnalysisOutputFile(sistrFileKey) != null) {\n+\t\t\t\tpath = analysis.getAnalysisOutputFile(sistrFileKey).getFile();\n+\t\t\t}else{", "originalCommit": "de06006aaf6f9e26457fe500b1752889bf414bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5OTkyMQ==", "url": "https://github.com/phac-nml/irida/pull/806#discussion_r496199921", "bodyText": "Sure. Spaces added around else", "author": "kbessonov1984", "createdAt": "2020-09-28T20:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4MzU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b1260bbcdd7d9b5d6db61120508228f185bbb4b3", "chunk": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\nindex c316113242..058e4f6284 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\n\n@@ -755,40 +755,40 @@ public class AnalysisAjaxController {\n \t\t\tPath path = null;\n \t\t\tif(analysis.getAnalysisOutputFile(sistrFileKey) != null) {\n \t\t\t\tpath = analysis.getAnalysisOutputFile(sistrFileKey).getFile();\n-\t\t\t}else{\n-\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n-\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\".\"+\n-\t\t\t\t\t\t\"Check irida_workflow.xml for \\\"sistr-predictions\\\" attribute (<output name=\\\"sistr-predictions\\\">)\");\n-\t\t\t}\n \n+\t\t\t\ttry {\n+\t\t\t\t\tString json = new Scanner(new BufferedReader(new FileReader(path.toFile()))).useDelimiter(\"\\\\Z\")\n+\t\t\t\t\t\t\t.next();\n \n-\t\t\ttry {\n-\t\t\t\tString json = new Scanner(new BufferedReader(new FileReader(path.toFile()))).useDelimiter(\"\\\\Z\")\n-\t\t\t\t\t\t.next();\n-\n-\t\t\t\t// verify file is proper json file and map to a SistrResult list\n-\t\t\t\tObjectMapper mapper = new ObjectMapper();\n-\t\t\t\tList<SistrResult> sistrResults = mapper.readValue(json, new TypeReference<List<SistrResult>>() {\n-\t\t\t\t});\n-\n-\t\t\t\tif (sistrResults.size() > 0) {\n-\t\t\t\t\t// should only ever be one sample for these results\n-\t\t\t\t\tif (samples != null && samples.size() == 1) {\n-\t\t\t\t\t\tSample sample = samples.iterator().next();\n-\t\t\t\t\t\treturn new AnalysisSistrResults(sample.getSampleName(), false, sistrResults.get(0));\n+\t\t\t\t\t// verify file is proper json file and map to a SistrResult list\n+\t\t\t\t\tObjectMapper mapper = new ObjectMapper();\n+\t\t\t\t\tList<SistrResult> sistrResults = mapper.readValue(json, new TypeReference<List<SistrResult>>() {\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (sistrResults.size() > 0) {\n+\t\t\t\t\t\t// should only ever be one sample for these results\n+\t\t\t\t\t\tif (samples != null && samples.size() == 1) {\n+\t\t\t\t\t\t\tSample sample = samples.iterator().next();\n+\t\t\t\t\t\t\treturn new AnalysisSistrResults(sample.getSampleName(), false, sistrResults.get(0));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tlogger.error(\"Invalid number of associated samples for submission \" + submission);\n+\t\t\t\t\t\t}\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tlogger.error(\"Invalid number of associated samples for submission \" + submission);\n+\t\t\t\t\t\tlogger.error(\"SISTR results for file [\" + path + \"] are not correctly formatted\");\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.error(\"SISTR results for file [\" + path + \"] are not correctly formatted\");\n+\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\tlogger.error(\"File [\" + path + \"] not found\", e);\n+\t\t\t\t} catch (JsonParseException | JsonMappingException e) {\n+\t\t\t\t\tlogger.error(\"Error attempting to parse file [\" + path + \"] as JSON\", e);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tlogger.error(\"Error reading file [\" + path + \"]\", e);\n \t\t\t\t}\n-\t\t\t} catch (FileNotFoundException e) {\n-\t\t\t\tlogger.error(\"File [\" + path + \"] not found\", e);\n-\t\t\t} catch (JsonParseException | JsonMappingException e) {\n-\t\t\t\tlogger.error(\"Error attempting to parse file [\" + path + \"] as JSON\", e);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error reading file [\" + path + \"]\", e);\n+\t\t\t} else {\n+\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n+\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\". \"+\n+\t\t\t\t\t\t\"Check irida_workflow.xml for \\\"sistr-predictions\\\" attribute (<output name=\\\"sistr-predictions\\\">).\");\n \t\t\t}\n+\n \t\t}\n \t\treturn new AnalysisSistrResults(null, true, null);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExOTY0MQ==", "url": "https://github.com/phac-nml/irida/pull/806#discussion_r496119641", "bodyText": "Could you move the entire try-catch block below into this if statement? Since it only applies if there is a SISTR results file available.\nWith the try-catch outside of the if-statement then, if no SISTR output file is found the IRIDA UI won't display anything for the output page.", "author": "apetkau", "createdAt": "2020-09-28T17:32:34Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -750,10 +749,18 @@ public AnalysisSistrResults getSistrAnalysis(@PathVariable Long id) {\n \t\t}\n \t\tAnalysisType analysisType = iridaWorkflow.getWorkflowDescription()\n \t\t\t\t.getAnalysisType();\n-\t\tif (analysisType.equals(BuiltInAnalysisTypes.SISTR_TYPING)) {\n+\t\tif (analysisTypesService.getViewerForAnalysisType(analysisType).get().equals(\"sistr\")) {\n \t\t\tAnalysis analysis = submission.getAnalysis();\n-\t\t\tPath path = analysis.getAnalysisOutputFile(sistrFileKey)\n-\t\t\t\t\t.getFile();\n+\n+\t\t\tPath path = null;\n+\t\t\tif(analysis.getAnalysisOutputFile(sistrFileKey) != null) {", "originalCommit": "a5aef4cb6b9421876f84f9c0087c28d4e28a98a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5NjcxNQ==", "url": "https://github.com/phac-nml/irida/pull/806#discussion_r496196715", "bodyText": "I do agree that it makes sense to move that try-catch statement into if statement that checks if SISTR results JSON file is present. It is more logical. Thank you", "author": "kbessonov1984", "createdAt": "2020-09-28T19:55:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjExOTY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1260bbcdd7d9b5d6db61120508228f185bbb4b3", "chunk": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\nindex c316113242..058e4f6284 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\n\n@@ -755,40 +755,40 @@ public class AnalysisAjaxController {\n \t\t\tPath path = null;\n \t\t\tif(analysis.getAnalysisOutputFile(sistrFileKey) != null) {\n \t\t\t\tpath = analysis.getAnalysisOutputFile(sistrFileKey).getFile();\n-\t\t\t}else{\n-\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n-\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\".\"+\n-\t\t\t\t\t\t\"Check irida_workflow.xml for \\\"sistr-predictions\\\" attribute (<output name=\\\"sistr-predictions\\\">)\");\n-\t\t\t}\n \n+\t\t\t\ttry {\n+\t\t\t\t\tString json = new Scanner(new BufferedReader(new FileReader(path.toFile()))).useDelimiter(\"\\\\Z\")\n+\t\t\t\t\t\t\t.next();\n \n-\t\t\ttry {\n-\t\t\t\tString json = new Scanner(new BufferedReader(new FileReader(path.toFile()))).useDelimiter(\"\\\\Z\")\n-\t\t\t\t\t\t.next();\n-\n-\t\t\t\t// verify file is proper json file and map to a SistrResult list\n-\t\t\t\tObjectMapper mapper = new ObjectMapper();\n-\t\t\t\tList<SistrResult> sistrResults = mapper.readValue(json, new TypeReference<List<SistrResult>>() {\n-\t\t\t\t});\n-\n-\t\t\t\tif (sistrResults.size() > 0) {\n-\t\t\t\t\t// should only ever be one sample for these results\n-\t\t\t\t\tif (samples != null && samples.size() == 1) {\n-\t\t\t\t\t\tSample sample = samples.iterator().next();\n-\t\t\t\t\t\treturn new AnalysisSistrResults(sample.getSampleName(), false, sistrResults.get(0));\n+\t\t\t\t\t// verify file is proper json file and map to a SistrResult list\n+\t\t\t\t\tObjectMapper mapper = new ObjectMapper();\n+\t\t\t\t\tList<SistrResult> sistrResults = mapper.readValue(json, new TypeReference<List<SistrResult>>() {\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (sistrResults.size() > 0) {\n+\t\t\t\t\t\t// should only ever be one sample for these results\n+\t\t\t\t\t\tif (samples != null && samples.size() == 1) {\n+\t\t\t\t\t\t\tSample sample = samples.iterator().next();\n+\t\t\t\t\t\t\treturn new AnalysisSistrResults(sample.getSampleName(), false, sistrResults.get(0));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tlogger.error(\"Invalid number of associated samples for submission \" + submission);\n+\t\t\t\t\t\t}\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tlogger.error(\"Invalid number of associated samples for submission \" + submission);\n+\t\t\t\t\t\tlogger.error(\"SISTR results for file [\" + path + \"] are not correctly formatted\");\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.error(\"SISTR results for file [\" + path + \"] are not correctly formatted\");\n+\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\tlogger.error(\"File [\" + path + \"] not found\", e);\n+\t\t\t\t} catch (JsonParseException | JsonMappingException e) {\n+\t\t\t\t\tlogger.error(\"Error attempting to parse file [\" + path + \"] as JSON\", e);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tlogger.error(\"Error reading file [\" + path + \"]\", e);\n \t\t\t\t}\n-\t\t\t} catch (FileNotFoundException e) {\n-\t\t\t\tlogger.error(\"File [\" + path + \"] not found\", e);\n-\t\t\t} catch (JsonParseException | JsonMappingException e) {\n-\t\t\t\tlogger.error(\"Error attempting to parse file [\" + path + \"] as JSON\", e);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error reading file [\" + path + \"]\", e);\n+\t\t\t} else {\n+\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n+\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\". \"+\n+\t\t\t\t\t\t\"Check irida_workflow.xml for \\\"sistr-predictions\\\" attribute (<output name=\\\"sistr-predictions\\\">).\");\n \t\t\t}\n+\n \t\t}\n \t\treturn new AnalysisSistrResults(null, true, null);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMzcxOQ==", "url": "https://github.com/phac-nml/irida/pull/806#discussion_r496123719", "bodyText": "Could you add a space after the final period \".\" here?", "author": "apetkau", "createdAt": "2020-09-28T17:40:01Z", "path": "src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java", "diffHunk": "@@ -750,10 +749,18 @@ public AnalysisSistrResults getSistrAnalysis(@PathVariable Long id) {\n \t\t}\n \t\tAnalysisType analysisType = iridaWorkflow.getWorkflowDescription()\n \t\t\t\t.getAnalysisType();\n-\t\tif (analysisType.equals(BuiltInAnalysisTypes.SISTR_TYPING)) {\n+\t\tif (analysisTypesService.getViewerForAnalysisType(analysisType).get().equals(\"sistr\")) {\n \t\t\tAnalysis analysis = submission.getAnalysis();\n-\t\t\tPath path = analysis.getAnalysisOutputFile(sistrFileKey)\n-\t\t\t\t\t.getFile();\n+\n+\t\t\tPath path = null;\n+\t\t\tif(analysis.getAnalysisOutputFile(sistrFileKey) != null) {\n+\t\t\t\tpath = analysis.getAnalysisOutputFile(sistrFileKey).getFile();\n+\t\t\t}else{\n+\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n+\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\".\"+", "originalCommit": "a5aef4cb6b9421876f84f9c0087c28d4e28a98a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE5OTA2Nw==", "url": "https://github.com/phac-nml/irida/pull/806#discussion_r496199067", "bodyText": "Sure", "author": "kbessonov1984", "createdAt": "2020-09-28T20:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyMzcxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b1260bbcdd7d9b5d6db61120508228f185bbb4b3", "chunk": "diff --git a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\nindex c316113242..058e4f6284 100644\n--- a/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\n+++ b/src/main/java/ca/corefacility/bioinformatics/irida/ria/web/analysis/AnalysisAjaxController.java\n\n@@ -755,40 +755,40 @@ public class AnalysisAjaxController {\n \t\t\tPath path = null;\n \t\t\tif(analysis.getAnalysisOutputFile(sistrFileKey) != null) {\n \t\t\t\tpath = analysis.getAnalysisOutputFile(sistrFileKey).getFile();\n-\t\t\t}else{\n-\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n-\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\".\"+\n-\t\t\t\t\t\t\"Check irida_workflow.xml for \\\"sistr-predictions\\\" attribute (<output name=\\\"sistr-predictions\\\">)\");\n-\t\t\t}\n \n+\t\t\t\ttry {\n+\t\t\t\t\tString json = new Scanner(new BufferedReader(new FileReader(path.toFile()))).useDelimiter(\"\\\\Z\")\n+\t\t\t\t\t\t\t.next();\n \n-\t\t\ttry {\n-\t\t\t\tString json = new Scanner(new BufferedReader(new FileReader(path.toFile()))).useDelimiter(\"\\\\Z\")\n-\t\t\t\t\t\t.next();\n-\n-\t\t\t\t// verify file is proper json file and map to a SistrResult list\n-\t\t\t\tObjectMapper mapper = new ObjectMapper();\n-\t\t\t\tList<SistrResult> sistrResults = mapper.readValue(json, new TypeReference<List<SistrResult>>() {\n-\t\t\t\t});\n-\n-\t\t\t\tif (sistrResults.size() > 0) {\n-\t\t\t\t\t// should only ever be one sample for these results\n-\t\t\t\t\tif (samples != null && samples.size() == 1) {\n-\t\t\t\t\t\tSample sample = samples.iterator().next();\n-\t\t\t\t\t\treturn new AnalysisSistrResults(sample.getSampleName(), false, sistrResults.get(0));\n+\t\t\t\t\t// verify file is proper json file and map to a SistrResult list\n+\t\t\t\t\tObjectMapper mapper = new ObjectMapper();\n+\t\t\t\t\tList<SistrResult> sistrResults = mapper.readValue(json, new TypeReference<List<SistrResult>>() {\n+\t\t\t\t\t});\n+\n+\t\t\t\t\tif (sistrResults.size() > 0) {\n+\t\t\t\t\t\t// should only ever be one sample for these results\n+\t\t\t\t\t\tif (samples != null && samples.size() == 1) {\n+\t\t\t\t\t\t\tSample sample = samples.iterator().next();\n+\t\t\t\t\t\t\treturn new AnalysisSistrResults(sample.getSampleName(), false, sistrResults.get(0));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tlogger.error(\"Invalid number of associated samples for submission \" + submission);\n+\t\t\t\t\t\t}\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tlogger.error(\"Invalid number of associated samples for submission \" + submission);\n+\t\t\t\t\t\tlogger.error(\"SISTR results for file [\" + path + \"] are not correctly formatted\");\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tlogger.error(\"SISTR results for file [\" + path + \"] are not correctly formatted\");\n+\t\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\t\tlogger.error(\"File [\" + path + \"] not found\", e);\n+\t\t\t\t} catch (JsonParseException | JsonMappingException e) {\n+\t\t\t\t\tlogger.error(\"Error attempting to parse file [\" + path + \"] as JSON\", e);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tlogger.error(\"Error reading file [\" + path + \"]\", e);\n \t\t\t\t}\n-\t\t\t} catch (FileNotFoundException e) {\n-\t\t\t\tlogger.error(\"File [\" + path + \"] not found\", e);\n-\t\t\t} catch (JsonParseException | JsonMappingException e) {\n-\t\t\t\tlogger.error(\"Error attempting to parse file [\" + path + \"] as JSON\", e);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tlogger.error(\"Error reading file [\" + path + \"]\", e);\n+\t\t\t} else {\n+\t\t\t\tlogger.error(\"Null response from analysis.getAnalysisOutputFile(sistrFileKey). \" +\n+\t\t\t\t\t\t\"No output file was found for the default sistrFileKey \\\"\"+sistrFileKey + \"\\\". \"+\n+\t\t\t\t\t\t\"Check irida_workflow.xml for \\\"sistr-predictions\\\" attribute (<output name=\\\"sistr-predictions\\\">).\");\n \t\t\t}\n+\n \t\t}\n \t\treturn new AnalysisSistrResults(null, true, null);\n \t}\n"}}, {"oid": "b1260bbcdd7d9b5d6db61120508228f185bbb4b3", "url": "https://github.com/phac-nml/irida/commit/b1260bbcdd7d9b5d6db61120508228f185bbb4b3", "message": "Had made changes in pom.xml and cosmetic code appearance changes in AnalysisAjaxController.java", "committedDate": "2020-09-28T20:05:53Z", "type": "commit"}, {"oid": "b50639053178970cd24bef9bfb732846e8cee490", "url": "https://github.com/phac-nml/irida/commit/b50639053178970cd24bef9bfb732846e8cee490", "message": "Modified CgMLST.jsx with definition of the 330 magic number (now a constant) for easier modifictaion. Commented function getPercentageFromDistance(str) function.", "committedDate": "2020-09-30T19:03:54Z", "type": "commit"}]}