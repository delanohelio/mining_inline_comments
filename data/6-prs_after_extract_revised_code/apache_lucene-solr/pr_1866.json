{"pr_number": 1866, "pr_title": "LUCENE-9523: Speed up query shapes for geometries that generate multiple points", "pr_createdAt": "2020-09-14T07:42:38Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1866", "timeline": [{"oid": "4fd7915532c38eed3152329e44fc340639df4700", "url": "https://github.com/apache/lucene-solr/commit/4fd7915532c38eed3152329e44fc340639df4700", "message": "Speed up queryShape by checking if the relationship is already known", "committedDate": "2020-09-14T07:28:19Z", "type": "commit"}, {"oid": "5b80145209142e9d0cf50d97516397f1e65b472d", "url": "https://github.com/apache/lucene-solr/commit/5b80145209142e9d0cf50d97516397f1e65b472d", "message": "iter", "committedDate": "2020-09-14T07:28:33Z", "type": "commit"}, {"oid": "60c95d987bf354b01952cab63758f4dd81cc581b", "url": "https://github.com/apache/lucene-solr/commit/60c95d987bf354b01952cab63758f4dd81cc581b", "message": "use bitwise", "committedDate": "2020-09-14T12:33:51Z", "type": "commit"}, {"oid": "59911274be343a622159693daf2c3da7eff5848e", "url": "https://github.com/apache/lucene-solr/commit/59911274be343a622159693daf2c3da7eff5848e", "message": "iter", "committedDate": "2020-09-14T12:50:51Z", "type": "commit"}, {"oid": "099328084c3496739befd902ce944fea43c305b4", "url": "https://github.com/apache/lucene-solr/commit/099328084c3496739befd902ce944fea43c305b4", "message": "fix javadocs", "committedDate": "2020-09-16T08:53:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwODk1Nw==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489308957", "bodyText": "I think we should be careful with overflows, maybe divide instead of multiplying, ie.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (values.getDocCount() << 2 < values.size()) {\n          \n          \n            \n                  if (values.getDocCount() < (values.size() >>> 2)) {", "author": "jpountz", "createdAt": "2020-09-16T09:47:15Z", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {", "originalCommit": "099328084c3496739befd902ce944fea43c305b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwNzgxOA==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489407818", "bodyText": "indeed that is safer", "author": "iverase", "createdAt": "2020-09-16T12:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwODk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "254071d6ded11319f1926d78665737985c80d686", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\nindex 0e76d3216ba..051f4b6b541 100644\n--- a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n\n@@ -265,10 +265,10 @@ abstract class ShapeQuery extends Query {\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      if (values.getDocCount() << 2 < values.size()) {\n+      if (values.getDocCount() < (values.size() >>> 2)) {\n         // we use a dense structure so we can skip already visited documents\n         final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n-        final long[] cost = new long[]{reader.maxDoc()};\n+        final long[] cost = new long[]{0};\n         values.intersect(getIntersectsDenseVisitor(query, result, cost));\n         assert cost[0] > 0 || result.cardinality() == 0;\n         final DocIdSetIterator iterator = cost[0] == 0 ? DocIdSetIterator.empty() : new BitSetIterator(result, cost[0]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMTU1Ng==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489311556", "bodyText": "We just need one long?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final long[] cost = new long[]{reader.maxDoc()};\n          \n          \n            \n                    final long[] cost = new long[]{1};", "author": "jpountz", "createdAt": "2020-09-16T09:51:19Z", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n+        final long[] cost = new long[]{reader.maxDoc()};", "originalCommit": "099328084c3496739befd902ce944fea43c305b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQwODM5Mg==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489408392", "bodyText": "Copy/paste error, it should be :\nfinal long[] cost = new long[]{0};", "author": "iverase", "createdAt": "2020-09-16T12:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMTU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "254071d6ded11319f1926d78665737985c80d686", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\nindex 0e76d3216ba..051f4b6b541 100644\n--- a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n\n@@ -265,10 +265,10 @@ abstract class ShapeQuery extends Query {\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      if (values.getDocCount() << 2 < values.size()) {\n+      if (values.getDocCount() < (values.size() >>> 2)) {\n         // we use a dense structure so we can skip already visited documents\n         final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n-        final long[] cost = new long[]{reader.maxDoc()};\n+        final long[] cost = new long[]{0};\n         values.intersect(getIntersectsDenseVisitor(query, result, cost));\n         assert cost[0] > 0 || result.cardinality() == 0;\n         final DocIdSetIterator iterator = cost[0] == 0 ? DocIdSetIterator.empty() : new BitSetIterator(result, cost[0]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMjc5OA==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489312798", "bodyText": "I wonder if we should use SparseFixedBitSet to avoid allocating so much memory at once.", "author": "jpountz", "createdAt": "2020-09-16T09:53:33Z", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -265,10 +265,20 @@ private Scorer getSparseScorer(final LeafReader reader, final Weight weight, fin\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      final DocIdSetBuilder docIdSetBuilder = new DocIdSetBuilder(reader.maxDoc(), values, query.getField());\n-      values.intersect(getSparseVisitor(query, docIdSetBuilder));\n-      final DocIdSetIterator iterator = docIdSetBuilder.build().iterator();\n-      return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n+      if (values.getDocCount() << 2 < values.size()) {\n+        // we use a dense structure so we can skip already visited documents\n+        final FixedBitSet result = new FixedBitSet(reader.maxDoc());", "originalCommit": "099328084c3496739befd902ce944fea43c305b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxMjc3OQ==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489412779", "bodyText": "Using a SparseFixedBitSet the gain is not so significant expect for complex queries:\n|point|intersects|0.00|0.00|-2%|347.46|356.09|-2%|2644|2644| 0%|\n|box|intersects|5.57|5.64|-1%|37.86|38.35|-1%|33081264|33081264| 0%|\n|distance|intersects|5.33|5.25| 2%|18.72|18.42| 2%|64062400|64062400| 0%|\n|poly 10|intersects|4.73|4.51| 5%|18.00|17.19| 5%|59064569|59064569| 0%|\n|polyMedium|intersects|0.43|0.34|24%|26.53|21.41|24%|528812|528812| 0%|\n|polyRussia|intersects|1.68|1.10|52%|6.87|4.51|52%|244848|244848| 0%|", "author": "iverase", "createdAt": "2020-09-16T12:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMjc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1MjkzNA==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489452934", "bodyText": "ok, let's keep a FixedBitSet for now then", "author": "jpountz", "createdAt": "2020-09-16T13:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMjc5OA=="}], "type": "inlineReview", "revised_code": {"commit": "254071d6ded11319f1926d78665737985c80d686", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\nindex 0e76d3216ba..051f4b6b541 100644\n--- a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n\n@@ -265,10 +265,10 @@ abstract class ShapeQuery extends Query {\n         final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n         return new ConstantScoreScorer(weight, boost, scoreMode, iterator);\n       }\n-      if (values.getDocCount() << 2 < values.size()) {\n+      if (values.getDocCount() < (values.size() >>> 2)) {\n         // we use a dense structure so we can skip already visited documents\n         final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n-        final long[] cost = new long[]{reader.maxDoc()};\n+        final long[] cost = new long[]{0};\n         values.intersect(getIntersectsDenseVisitor(query, result, cost));\n         assert cost[0] > 0 || result.cardinality() == 0;\n         final DocIdSetIterator iterator = cost[0] == 0 ? DocIdSetIterator.empty() : new BitSetIterator(result, cost[0]);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNDAxNQ==", "url": "https://github.com/apache/lucene-solr/pull/1866#discussion_r489314015", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * when the number of points <= 4 * number of docs ) */\n          \n          \n            \n               * when the number of docs <= 4 * number of points ) */", "author": "jpountz", "createdAt": "2020-09-16T09:55:30Z", "path": "lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java", "diffHunk": "@@ -340,7 +351,8 @@ public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n     };\n   }\n \n-  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n+  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT\n+   * when the number of points <= 4 * number of docs ) */", "originalCommit": "099328084c3496739befd902ce944fea43c305b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "254071d6ded11319f1926d78665737985c80d686", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\nindex 0e76d3216ba..051f4b6b541 100644\n--- a/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/document/ShapeQuery.java\n\n@@ -352,7 +352,7 @@ abstract class ShapeQuery extends Query {\n   }\n \n   /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT\n-   * when the number of points <= 4 * number of docs ) */\n+   * when the number of docs <= 4 * number of points ) */\n   private static IntersectVisitor getSparseVisitor(final ShapeQuery query, final DocIdSetBuilder result) {\n     return new IntersectVisitor() {\n       final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n"}}, {"oid": "254071d6ded11319f1926d78665737985c80d686", "url": "https://github.com/apache/lucene-solr/commit/254071d6ded11319f1926d78665737985c80d686", "message": "address review comments", "committedDate": "2020-09-16T11:58:06Z", "type": "commit"}, {"oid": "55745fab06ea415516e69d71e1588134cccbc1ad", "url": "https://github.com/apache/lucene-solr/commit/55745fab06ea415516e69d71e1588134cccbc1ad", "message": "Merge branch 'master' into speedupQueryShape", "committedDate": "2020-09-18T05:03:28Z", "type": "commit"}, {"oid": "99156b54e0449fc7bd29013c0010d2facedfd641", "url": "https://github.com/apache/lucene-solr/commit/99156b54e0449fc7bd29013c0010d2facedfd641", "message": "add entry in CHANGES.txt", "committedDate": "2020-09-18T05:14:19Z", "type": "commit"}]}