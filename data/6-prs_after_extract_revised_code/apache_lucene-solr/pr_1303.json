{"pr_number": 1303, "pr_title": "LUCENE-9114: Improve ValueSourceScorer's Default Cost Implementation", "pr_createdAt": "2020-03-01T08:10:59Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1303", "timeline": [{"oid": "db229d5a8799444986c468c02ab55208b2503058", "url": "https://github.com/apache/lucene-solr/commit/db229d5a8799444986c468c02ab55208b2503058", "message": "LUCENE-9114: Improve ValueSourceScorer's Default Cost Implementation", "committedDate": "2020-03-01T08:07:00Z", "type": "commit"}, {"oid": "ba3fa3b7ac4a031956e1e6a7d592e0a969d66b80", "url": "https://github.com/apache/lucene-solr/commit/ba3fa3b7ac4a031956e1e6a7d592e0a969d66b80", "message": "Iteration 2", "committedDate": "2020-03-03T18:38:17Z", "type": "commit"}, {"oid": "5d5b43de94eca448e11b2ba052916f801310a6e8", "url": "https://github.com/apache/lucene-solr/commit/5d5b43de94eca448e11b2ba052916f801310a6e8", "message": "Add documentation", "committedDate": "2020-03-03T18:49:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTI4Ng==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387435286", "bodyText": "Really needs javadoc explaining what this is.  See TPI.matchCost for inspiration.  I suggest:\n\nAn estimate of the expected cost to return a value for a document.\nIt's intended to be used by TwoPhaseIterator.matchCost implementations.\nReturns an expected cost in number of simple operations like addition, multiplication,\ncomparing two numbers and indexing an array.\nThe returned value must be positive.", "author": "dsmiley", "createdAt": "2020-03-04T03:48:07Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java", "diffHunk": "@@ -90,6 +93,9 @@ public int ordVal(int doc) throws IOException {\n    * @return the number of unique sort ordinals this instance has\n    */\n   public int numOrd() { throw new UnsupportedOperationException(); }\n+", "originalCommit": "5d5b43de94eca448e11b2ba052916f801310a6e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1MTE1NQ==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387451155", "bodyText": "Used your recommendation, thanks", "author": "atris", "createdAt": "2020-03-04T05:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ed97c8ec51749dc09884210be25565bf6f79bbeb", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\nindex 05297088009..99f70a82193 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\n\n@@ -94,6 +94,13 @@ public abstract class FunctionValues {\n    */\n   public int numOrd() { throw new UnsupportedOperationException(); }\n \n+  /**\n+   * An estimate of the expected cost to return a value for a document.\n+   * It's intended to be used by TwoPhaseIterator.matchCost implementations.\n+   * Returns an expected cost in number of simple operations like addition, multiplication,\n+   * comparing two numbers and indexing an array.\n+   * The returned value must be positive.\n+   */\n   public float cost() { return DEFAULT_COST; }\n \n   public abstract String toString(int doc) throws IOException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzNjI5MA==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387436290", "bodyText": "Or we could use a Float object to more clearly show as user-settable via non-null?", "author": "dsmiley", "createdAt": "2020-03-04T03:52:46Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java", "diffHunk": "@@ -39,9 +39,13 @@\n  * @lucene.experimental\n  */\n public abstract class ValueSourceScorer extends Scorer {\n+  // Fixed cost for a single iteration of the TwoPhaseIterator instance\n+  private static final int DEF_COST = 5;\n+\n   protected final FunctionValues values;\n   private final TwoPhaseIterator twoPhaseIterator;\n   private final DocIdSetIterator disi;\n+  private float externallyMutableCost;", "originalCommit": "5d5b43de94eca448e11b2ba052916f801310a6e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed97c8ec51749dc09884210be25565bf6f79bbeb", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\nindex 3c88ffce5ac..b016ef50965 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n\n@@ -45,7 +45,7 @@ public abstract class ValueSourceScorer extends Scorer {\n   protected final FunctionValues values;\n   private final TwoPhaseIterator twoPhaseIterator;\n   private final DocIdSetIterator disi;\n-  private float externallyMutableCost;\n+  private Float matchCost;\n \n   protected ValueSourceScorer(Weight weight, LeafReaderContext readerContext, FunctionValues values) {\n     super(weight);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODU4MA==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387438580", "bodyText": "I suppose the purpose of DEF_COST here is to add on the cost of the ValueSourceScorer.matches code that is separate from fetching the value from the FunctionValues.  That cost varies by the VSC subclass.  If we want to be thorough then maybe this should be settable somehow as well?   One easy way to do this is to simply refactor out this one line (def cost + FV cost) into a protected method on the VSC that may be over-ridden if desired.   Or we could just say that is too pedantic, and prefer simplicity.  I'm fine either way.", "author": "dsmiley", "createdAt": "2020-03-04T04:04:22Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java", "diffHunk": "@@ -55,7 +59,13 @@ public boolean matches() throws IOException {\n \n       @Override\n       public float matchCost() {\n-        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n+        // If an external cost is set, use that\n+        if (externallyMutableCost != 0.0) {\n+          return externallyMutableCost;\n+        }\n+\n+        // Cost of iteration is fixed cost + cost exposed by delegated FunctionValues instance\n+        return DEF_COST + values.cost();", "originalCommit": "5d5b43de94eca448e11b2ba052916f801310a6e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0OTk5Mw==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387449993", "bodyText": "I felt that DEF_COST defines the cost of the VSC.matches call itself and if the user prefers to do a complex cost, then override matchCost() :) I agree with your approach, added the cost evaluation method as a separate class method", "author": "atris", "createdAt": "2020-03-04T05:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ed97c8ec51749dc09884210be25565bf6f79bbeb", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\nindex 3c88ffce5ac..b016ef50965 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n\n@@ -60,12 +60,11 @@ public abstract class ValueSourceScorer extends Scorer {\n       @Override\n       public float matchCost() {\n         // If an external cost is set, use that\n-        if (externallyMutableCost != 0.0) {\n-          return externallyMutableCost;\n+        if (matchCost != 0.0) {\n+          return matchCost;\n         }\n \n-        // Cost of iteration is fixed cost + cost exposed by delegated FunctionValues instance\n-        return DEF_COST + values.cost();\n+        return costEvaluationFunction();\n       }\n     };\n     this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQzODc2Mw==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387438763", "bodyText": "Why not simply setMatchCost ?  It's apparent it's \"mutable\", and it's public and thus \"externally\" so :-)\nI think the javadocs should reference TPI.matchCost.", "author": "dsmiley", "createdAt": "2020-03-04T04:05:28Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java", "diffHunk": "@@ -94,4 +104,12 @@ public float getMaxScore(int upTo) throws IOException {\n     return Float.POSITIVE_INFINITY;\n   }\n \n+  /**\n+   * Used to externally set a mutable cost for this instance. If set, this cost gets preference over the FunctionValues's cost\n+   *\n+   * @lucene.experimental\n+   */\n+  public void setExternallyMutableCost(float cost) {", "originalCommit": "5d5b43de94eca448e11b2ba052916f801310a6e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed97c8ec51749dc09884210be25565bf6f79bbeb", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\nindex 3c88ffce5ac..b016ef50965 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n\n@@ -106,10 +105,25 @@ public abstract class ValueSourceScorer extends Scorer {\n \n   /**\n    * Used to externally set a mutable cost for this instance. If set, this cost gets preference over the FunctionValues's cost\n+   * The value set here is used by {@link TwoPhaseIterator#matchCost()} for the TwoPhaseIterator owned by this class\n    *\n    * @lucene.experimental\n    */\n-  public void setExternallyMutableCost(float cost) {\n-    externallyMutableCost = cost;\n+  public void setMatchCost(float cost) {\n+    matchCost = cost;\n+  }\n+\n+  /**\n+   * Cost evaluation function which defines the cost of access for the TwoPhaseIterator for this class\n+   * This method should be overridden for specifying custom cost methods. Used by {@link TwoPhaseIterator#matchCost()}\n+   * for the instance owned by this class\n+   *\n+   * @return cost of access\n+   *\n+   * @lucene.experimental\n+   */\n+  protected float costEvaluationFunction() {\n+    // Cost of iteration is fixed cost + cost exposed by delegated FunctionValues instance\n+    return DEF_COST + values.cost();\n   }\n }\n"}}, {"oid": "ed97c8ec51749dc09884210be25565bf6f79bbeb", "url": "https://github.com/apache/lucene-solr/commit/ed97c8ec51749dc09884210be25565bf6f79bbeb", "message": "Update per comments", "committedDate": "2020-03-04T05:12:57Z", "type": "commit"}, {"oid": "9e13ddf6b211a4c58955252e05262571c667e09e", "url": "https://github.com/apache/lucene-solr/commit/9e13ddf6b211a4c58955252e05262571c667e09e", "message": "Remove mutable cost functionality", "committedDate": "2020-03-04T06:36:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MDI0NA==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387660244", "bodyText": "Can we call this simply matchCost now since, after all, the TPI.matchCost just calls it now with no mutable override?", "author": "dsmiley", "createdAt": "2020-03-04T13:19:29Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java", "diffHunk": "@@ -94,4 +97,17 @@ public float getMaxScore(int upTo) throws IOException {\n     return Float.POSITIVE_INFINITY;\n   }\n \n+  /**\n+   * Cost evaluation function which defines the cost of access for the TwoPhaseIterator for this class\n+   * This method should be overridden for specifying custom cost methods. Used by {@link TwoPhaseIterator#matchCost()}\n+   * for the instance owned by this class\n+   *\n+   * @return cost of access\n+   *\n+   * @lucene.experimental\n+   */\n+  protected float costEvaluationFunction() {", "originalCommit": "9e13ddf6b211a4c58955252e05262571c667e09e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5601e0133c1262c97ce3e80552ad2e3882a8d06", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\nindex 3576a7bee77..d8278afe191 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java\n\n@@ -106,7 +106,7 @@ public abstract class ValueSourceScorer extends Scorer {\n    *\n    * @lucene.experimental\n    */\n-  protected float costEvaluationFunction() {\n+  protected float matchCost() {\n     // Cost of iteration is fixed cost + cost exposed by delegated FunctionValues instance\n     return DEF_COST + values.cost();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MjU2Nw==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387662567", "bodyText": "This is fine with me but FWIW I wouldn't even bother defining it.  It has no value set aside like this; I doubt any user code would want to refer to it.  If we want to document what the default cost is, we should say so in cost()'s javadoc.  I know some devs like to make static constants for everything but IMO it's sometimes wasted ceremony.", "author": "dsmiley", "createdAt": "2020-03-04T13:23:38Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java", "diffHunk": "@@ -41,6 +41,9 @@\n //   want the Query carrying around big objects\n public abstract class FunctionValues {\n \n+  // Default cost for FunctionValues -- ideally should be overriden by concrete implementations\n+  public static final int DEFAULT_COST = 100;", "originalCommit": "9e13ddf6b211a4c58955252e05262571c667e09e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDIzOQ==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387794239", "bodyText": "Fixed, thanks", "author": "atris", "createdAt": "2020-03-04T16:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MjU2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5601e0133c1262c97ce3e80552ad2e3882a8d06", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\nindex f13dfda0e54..f81d80660fc 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\n\n@@ -41,9 +41,6 @@ import org.apache.lucene.util.mutable.MutableValueFloat;\n //   want the Query carrying around big objects\n public abstract class FunctionValues {\n \n-  // Default cost for FunctionValues -- ideally should be overriden by concrete implementations\n-  public static final int DEFAULT_COST = 100;\n-\n   public byte byteVal(int doc) throws IOException { throw new UnsupportedOperationException(); }\n   public short shortVal(int doc) throws IOException { throw new UnsupportedOperationException(); }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MzM3NA==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387663374", "bodyText": "Nitpick comment: the point isn't that we're matching everything, the point is that matches() merely returns a constant and is thus virtually free.", "author": "dsmiley", "createdAt": "2020-03-04T13:25:10Z", "path": "lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java", "diffHunk": "@@ -151,6 +164,11 @@ public ValueSourceScorer getScorer(Weight weight, LeafReaderContext readerContex\n       public boolean matches(int doc) {\n         return true;\n       }\n+      @Override\n+      public float costEvaluationFunction() {\n+        // Match everything", "originalCommit": "9e13ddf6b211a4c58955252e05262571c667e09e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDY2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1303#discussion_r387794662", "bodyText": "Removed the comment, thanks", "author": "atris", "createdAt": "2020-03-04T16:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MzM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5601e0133c1262c97ce3e80552ad2e3882a8d06", "chunk": "diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\nindex f13dfda0e54..f81d80660fc 100644\n--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\n+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java\n\n@@ -165,8 +162,7 @@ public abstract class FunctionValues {\n         return true;\n       }\n       @Override\n-      public float costEvaluationFunction() {\n-        // Match everything\n+      public float matchCost() {\n         return 0f;\n       }\n     };\n"}}, {"oid": "c5601e0133c1262c97ce3e80552ad2e3882a8d06", "url": "https://github.com/apache/lucene-solr/commit/c5601e0133c1262c97ce3e80552ad2e3882a8d06", "message": "Rename methods and clean up constants", "committedDate": "2020-03-04T16:47:22Z", "type": "commit"}, {"oid": "8cf712be11e28acd89096f8a20e4c76088f2fd18", "url": "https://github.com/apache/lucene-solr/commit/8cf712be11e28acd89096f8a20e4c76088f2fd18", "message": "Add CHANGES.txt Entry", "committedDate": "2020-03-05T03:26:11Z", "type": "commit"}]}