{"pr_number": 2004, "pr_title": "SOLR-14942: Reduce leader election time on node shutdown", "pr_createdAt": "2020-10-19T11:07:45Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2004", "timeline": [{"oid": "4f855e46c1f1c3324c5285fb224bec07f8a81994", "url": "https://github.com/apache/lucene-solr/commit/4f855e46c1f1c3324c5285fb224bec07f8a81994", "message": "SOLR-14982: Reduce leader election time on node shutdown\n\nThe shutdown process waits for all replicas/cores to be closed before removing the election node of the leader. This can take some time due to index flush or merge activities on the leader cores and delays new leaders from being elected. Moreover, jetty stops accepting new requests on receiving SIGTERM which means that even though a leader technically exists, no new indexing requests can be processed by the node. This commit waits for all in-flight indexing requests to complete, removes election nodes (thus triggering leader election) and then closes all replicas.", "committedDate": "2020-10-19T06:10:37Z", "type": "commit"}, {"oid": "b4337a9e12fd66a8f6ef96b4624b2c09c18bacbb", "url": "https://github.com/apache/lucene-solr/commit/b4337a9e12fd66a8f6ef96b4624b2c09c18bacbb", "message": "SOLR-14942: Pay cost of phaser only for leader cores", "committedDate": "2020-10-19T06:20:26Z", "type": "commit"}, {"oid": "097eb5dd4cb7a9dd963f745a2217a1c40882563e", "url": "https://github.com/apache/lucene-solr/commit/097eb5dd4cb7a9dd963f745a2217a1c40882563e", "message": "SOLR-14942: Revert isLeader check because it can cause many race conditions", "committedDate": "2020-10-19T10:33:13Z", "type": "commit"}, {"oid": "250da57bb50cd51423a01d91848c5f5afae7415d", "url": "https://github.com/apache/lucene-solr/commit/250da57bb50cd51423a01d91848c5f5afae7415d", "message": "SOLR-14942: Remove javadoc comment that no longer applies", "committedDate": "2020-10-19T13:52:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMDk2Nw==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r507800967", "bodyText": "How many contexts do we expect here. Does it actually make sense to do a parallel stream?", "author": "madrob", "createdAt": "2020-10-19T14:32:48Z", "path": "solr/core/src/java/org/apache/solr/cloud/ZkController.java", "diffHunk": "@@ -1838,6 +1838,22 @@ private void checkStateInZk(CoreDescriptor cd) throws InterruptedException, NotI\n     }\n   }\n \n+  public void tryCancelAllElections() {\n+    if (zkClient.isClosed()) {\n+      return;\n+    }\n+    electionContexts.values().parallelStream().forEach(context -> {", "originalCommit": "250da57bb50cd51423a01d91848c5f5afae7415d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MzIxNQ==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508473215", "bodyText": "No, it does not. Parallelstream was being used for close in ZkController.close() as well so this was basically copied code. However I checked and it is a lightweight operation. It basically removes a zk node and sets a volatile member. I have replaced this call with a serial forEach in both places.\n@hossman pointed out that this iteration wasn't safe so I have put the forEach inside a synchronized block", "author": "shalinmangar", "createdAt": "2020-10-20T12:51:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMDk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java\nindex f6f8c3e5d25..f2de3a9e9ec 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java\n\n@@ -1838,20 +1843,26 @@ public class ZkController implements Closeable {\n     }\n   }\n \n+  /**\n+   * Attempts to cancel all leader elections. This method should be called on node shutdown.\n+   */\n   public void tryCancelAllElections() {\n     if (zkClient.isClosed()) {\n       return;\n     }\n-    electionContexts.values().parallelStream().forEach(context -> {\n-      try {\n-        context.cancelElection();\n-        context.close();\n-      } catch (InterruptedException e) {\n-        Thread.currentThread().interrupt();\n-      } catch (KeeperException e) {\n-        log.error(\"Error on cancelling elections of {}\", context.leaderPath, e);\n-      }\n-    });\n+    Collection<ElectionContext> values = electionContexts.values();\n+    synchronized (electionContexts) {\n+      values.forEach(context -> {\n+        try {\n+          context.cancelElection();\n+          context.close();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+        } catch (KeeperException e) {\n+          log.warn(\"Error on cancelling elections of {}\", context.leaderPath, e);\n+        }\n+      });\n+    }\n   }\n \n   private ZkCoreNodeProps waitForLeaderToSeeDownState(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwODUxMQ==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r507808511", "bodyText": "This is never used?", "author": "madrob", "createdAt": "2020-10-19T14:40:40Z", "path": "solr/core/src/java/org/apache/solr/update/SolrCoreState.java", "diffHunk": "@@ -86,7 +103,45 @@ public boolean decrefSolrCoreState(IndexWriterCloser closer) {\n     }\n     return close;\n   }\n-  \n+\n+  /**\n+   * Pauses all update requests to this core and waits (indefinitely) for all in-flight\n+   * update requests to finish\n+   */\n+  public void pauseUpdatesAndAwaitInflightRequests() {\n+    if (pauseUpdateRequests.compareAndSet(false, true)) {\n+      inflightUpdatesCounter.register();\n+      inflightUpdatesCounter.arriveAndAwaitAdvance();\n+    }\n+  }\n+\n+  /**\n+   * Unpauses update requests to this core\n+   */\n+  public void unpauseUpdates() {", "originalCommit": "250da57bb50cd51423a01d91848c5f5afae7415d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MzI5MA==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508473290", "bodyText": "Removed", "author": "shalinmangar", "createdAt": "2020-10-20T12:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwODUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/update/SolrCoreState.java b/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\nindex 95eab76c8c0..f38fb2b3886 100644\n--- a/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\n+++ b/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\n\n@@ -108,20 +112,15 @@ public abstract class SolrCoreState {\n    * Pauses all update requests to this core and waits (indefinitely) for all in-flight\n    * update requests to finish\n    */\n-  public void pauseUpdatesAndAwaitInflightRequests() {\n+  public void pauseUpdatesAndAwaitInflightRequests() throws TimeoutException, InterruptedException {\n     if (pauseUpdateRequests.compareAndSet(false, true)) {\n-      inflightUpdatesCounter.register();\n-      inflightUpdatesCounter.arriveAndAwaitAdvance();\n+      int arrivalNumber = inflightUpdatesCounter.register();\n+      if (arrivalNumber != -1) {\n+        inflightUpdatesCounter.awaitAdvanceInterruptibly(inflightUpdatesCounter.arrive(), PAUSE_UPDATES_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n+      }\n     }\n   }\n \n-  /**\n-   * Unpauses update requests to this core\n-   */\n-  public void unpauseUpdates() {\n-    this.pauseUpdateRequests.set(false);\n-  }\n-\n   /**\n    * Registers in-flight update requests to this core.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwOTY2Mg==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r507809662", "bodyText": "Do we need to check for termination?", "author": "madrob", "createdAt": "2020-10-19T14:42:18Z", "path": "solr/core/src/java/org/apache/solr/update/SolrCoreState.java", "diffHunk": "@@ -86,7 +103,45 @@ public boolean decrefSolrCoreState(IndexWriterCloser closer) {\n     }\n     return close;\n   }\n-  \n+\n+  /**\n+   * Pauses all update requests to this core and waits (indefinitely) for all in-flight\n+   * update requests to finish\n+   */\n+  public void pauseUpdatesAndAwaitInflightRequests() {\n+    if (pauseUpdateRequests.compareAndSet(false, true)) {\n+      inflightUpdatesCounter.register();\n+      inflightUpdatesCounter.arriveAndAwaitAdvance();\n+    }\n+  }\n+\n+  /**\n+   * Unpauses update requests to this core\n+   */\n+  public void unpauseUpdates() {\n+    this.pauseUpdateRequests.set(false);\n+  }\n+\n+  /**\n+   * Registers in-flight update requests to this core.\n+   *\n+   * @return true if request was registered, false if update requests are paused\n+   */\n+  public boolean registerInFlightUpdate() {\n+    if (pauseUpdateRequests.get()) {\n+      return false;\n+    }\n+    inflightUpdatesCounter.register();", "originalCommit": "250da57bb50cd51423a01d91848c5f5afae7415d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MzgxOA==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508473818", "bodyText": "According to the javadocs, register() is a no-op if phaser has terminated so we don't need to worry about it.", "author": "shalinmangar", "createdAt": "2020-10-20T12:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwOTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4NjU5MA==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508586590", "bodyText": "Should we return an error in this case? Does termination imply that the core is closed?", "author": "madrob", "createdAt": "2020-10-20T15:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwOTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MTQxMA==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508591410", "bodyText": "Maybe return inflightUpdatesCounter.register() > 0? Or >=, I'm not sure.", "author": "madrob", "createdAt": "2020-10-20T15:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwOTY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3MjMwMg==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r510072302", "bodyText": "Thanks for bringing my attention to termination. The usage of the phaser was wrong before because it would get terminated the moment there were no in-flight requests. We actually never need to terminate the phaser at all. Now, we override onAdvance() and disable termination such that the phase keeps advancing and wraps around after reaching 65536.", "author": "shalinmangar", "createdAt": "2020-10-22T11:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwOTY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/update/SolrCoreState.java b/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\nindex 95eab76c8c0..f38fb2b3886 100644\n--- a/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\n+++ b/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\n\n@@ -108,20 +112,15 @@ public abstract class SolrCoreState {\n    * Pauses all update requests to this core and waits (indefinitely) for all in-flight\n    * update requests to finish\n    */\n-  public void pauseUpdatesAndAwaitInflightRequests() {\n+  public void pauseUpdatesAndAwaitInflightRequests() throws TimeoutException, InterruptedException {\n     if (pauseUpdateRequests.compareAndSet(false, true)) {\n-      inflightUpdatesCounter.register();\n-      inflightUpdatesCounter.arriveAndAwaitAdvance();\n+      int arrivalNumber = inflightUpdatesCounter.register();\n+      if (arrivalNumber != -1) {\n+        inflightUpdatesCounter.awaitAdvanceInterruptibly(inflightUpdatesCounter.arrive(), PAUSE_UPDATES_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n+      }\n     }\n   }\n \n-  /**\n-   * Unpauses update requests to this core\n-   */\n-  public void unpauseUpdates() {\n-    this.pauseUpdateRequests.set(false);\n-  }\n-\n   /**\n    * Registers in-flight update requests to this core.\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMDIxOQ==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r507820219", "bodyText": "This is in the shutdown path, should we add a timeout? What happens if a disk is slow on write and something else times out underneath us?", "author": "madrob", "createdAt": "2020-10-19T14:55:21Z", "path": "solr/core/src/java/org/apache/solr/update/SolrCoreState.java", "diffHunk": "@@ -86,7 +103,45 @@ public boolean decrefSolrCoreState(IndexWriterCloser closer) {\n     }\n     return close;\n   }\n-  \n+\n+  /**\n+   * Pauses all update requests to this core and waits (indefinitely) for all in-flight\n+   * update requests to finish\n+   */\n+  public void pauseUpdatesAndAwaitInflightRequests() {\n+    if (pauseUpdateRequests.compareAndSet(false, true)) {\n+      inflightUpdatesCounter.register();\n+      inflightUpdatesCounter.arriveAndAwaitAdvance();", "originalCommit": "250da57bb50cd51423a01d91848c5f5afae7415d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3NDc0OQ==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508474749", "bodyText": "Good point. I have added a small timeout (2500 ms) with the same value as the one used inside RecoveryStrategy for leader to finish in-flight requests. I think this default should be enough but it can be changed using a sysprop if needed.", "author": "shalinmangar", "createdAt": "2020-10-20T12:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMDIxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/update/SolrCoreState.java b/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\nindex 95eab76c8c0..f38fb2b3886 100644\n--- a/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\n+++ b/solr/core/src/java/org/apache/solr/update/SolrCoreState.java\n\n@@ -108,20 +112,15 @@ public abstract class SolrCoreState {\n    * Pauses all update requests to this core and waits (indefinitely) for all in-flight\n    * update requests to finish\n    */\n-  public void pauseUpdatesAndAwaitInflightRequests() {\n+  public void pauseUpdatesAndAwaitInflightRequests() throws TimeoutException, InterruptedException {\n     if (pauseUpdateRequests.compareAndSet(false, true)) {\n-      inflightUpdatesCounter.register();\n-      inflightUpdatesCounter.arriveAndAwaitAdvance();\n+      int arrivalNumber = inflightUpdatesCounter.register();\n+      if (arrivalNumber != -1) {\n+        inflightUpdatesCounter.awaitAdvanceInterruptibly(inflightUpdatesCounter.arrive(), PAUSE_UPDATES_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);\n+      }\n     }\n   }\n \n-  /**\n-   * Unpauses update requests to this core\n-   */\n-  public void unpauseUpdates() {\n-    this.pauseUpdateRequests.set(false);\n-  }\n-\n   /**\n    * Registers in-flight update requests to this core.\n    *\n"}}, {"oid": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "url": "https://github.com/apache/lucene-solr/commit/0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "message": "SOLR-14942: Address review feedback.\n\n* Iterate electionContexts inside a synchronized block. Fixes iteration of electionContexts inside ZkController.close as well\n* Added javadocs for ZkController.tryCancelAllElections\n* Replaces parallelStream with serial stream call for closing election contexts since it is a very lightweight operation\n* Removes unused SolrCoreState.unpauseUpdates method\n* Adds a timeout to SolrCoreState.pauseUpdatesAndAwaitInflightRequests (defaults to 2500 millis)", "committedDate": "2020-10-20T12:49:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4Nzc2Nw==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508587767", "bodyText": "Please check your IDE settings to not collapse imports like this.", "author": "madrob", "createdAt": "2020-10-20T15:03:55Z", "path": "solr/core/src/java/org/apache/solr/core/CoreContainer.java", "diffHunk": "@@ -38,10 +38,7 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Future;\n+import java.util.concurrent.*;", "originalCommit": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae1dee771f241cb58f0fb827aadbafb877e3fea8", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/solr/core/src/java/org/apache/solr/core/CoreContainer.java\nindex ff3d2a94709..a6ae3662671 100644\n--- a/solr/core/src/java/org/apache/solr/core/CoreContainer.java\n+++ b/solr/core/src/java/org/apache/solr/core/CoreContainer.java\n\n@@ -38,7 +38,11 @@ import java.util.Optional;\n import java.util.Properties;\n import java.util.Set;\n import java.util.UUID;\n-import java.util.concurrent.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n import java.util.function.Supplier;\n \n import com.google.common.annotations.VisibleForTesting;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMzgwMg==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r508733802", "bodyText": "While we're here, this line (and a few others) should be customThreadPool.submit(() -> IOUtils.closeQuietly(overseer); I have no idea why we're creating a collection and a stream for a single object.", "author": "madrob", "createdAt": "2020-10-20T18:06:24Z", "path": "solr/core/src/java/org/apache/solr/cloud/ZkController.java", "diffHunk": "@@ -653,7 +653,12 @@ public void close() {\n     customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));", "originalCommit": "0a8ae69bcb6f49d2f7f38fca915d9000cc675e97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2OTYyMw==", "url": "https://github.com/apache/lucene-solr/pull/2004#discussion_r510069623", "bodyText": "I have cleaned it up", "author": "shalinmangar", "createdAt": "2020-10-22T10:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "9a85b98efb5f5fc1d9a6ce1e71a3e2bba1068acd", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/solr/core/src/java/org/apache/solr/cloud/ZkController.java\nindex f2de3a9e9ec..7daa6b16df6 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/ZkController.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/ZkController.java\n\n@@ -648,9 +648,9 @@ public class ZkController implements Closeable {\n \n     ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n \n-    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(IOUtils::closeQuietly));\n+    customThreadPool.submit(() -> IOUtils.closeQuietly(overseerElector.getContext()));\n \n-    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));\n+    customThreadPool.submit(() -> IOUtils.closeQuietly(overseer));\n \n     try {\n       customThreadPool.submit(() -> {\n"}}, {"oid": "cd2c436751977e7404dcd8a472ba3a27067c5a5a", "url": "https://github.com/apache/lucene-solr/commit/cd2c436751977e7404dcd8a472ba3a27067c5a5a", "message": "SOLR-14982: Disable automatic termination of phaser", "committedDate": "2020-10-22T10:48:21Z", "type": "commit"}, {"oid": "9a85b98efb5f5fc1d9a6ce1e71a3e2bba1068acd", "url": "https://github.com/apache/lucene-solr/commit/9a85b98efb5f5fc1d9a6ce1e71a3e2bba1068acd", "message": "SOLR-14982: Remove use of streaming for singleton lists", "committedDate": "2020-10-22T10:57:44Z", "type": "commit"}, {"oid": "ae1dee771f241cb58f0fb827aadbafb877e3fea8", "url": "https://github.com/apache/lucene-solr/commit/ae1dee771f241cb58f0fb827aadbafb877e3fea8", "message": "SOLR-14982: Added asserts on registration and de-registration and code comments", "committedDate": "2020-10-23T09:46:01Z", "type": "commit"}, {"oid": "3ed7c7819cc4b1e8e9191738000147ba746c00b4", "url": "https://github.com/apache/lucene-solr/commit/3ed7c7819cc4b1e8e9191738000147ba746c00b4", "message": "SOLR-14942: Added change log entry", "committedDate": "2020-10-24T11:45:09Z", "type": "commit"}]}