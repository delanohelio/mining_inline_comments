{"pr_number": 1955, "pr_title": "LUCENE-9566 TestApproximationSearchEquivalence.testExclusion fix", "pr_createdAt": "2020-10-06T21:49:48Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1955", "timeline": [{"oid": "d5ca2deba729549f127890198725ea2b4304b05e", "url": "https://github.com/apache/lucene-solr/commit/d5ca2deba729549f127890198725ea2b4304b05e", "message": "LUCENE-9566 Move collectorIterator to the same doc as scorerIterator", "committedDate": "2020-10-06T21:47:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDgzOQ==", "url": "https://github.com/apache/lucene-solr/pull/1955#discussion_r500624839", "bodyText": "but that's not true, it it?", "author": "jpountz", "createdAt": "2020-10-06T22:10:42Z", "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -204,21 +204,21 @@ public int score(LeafCollector collector, Bits acceptDocs, int min, int max) thr\n       collector.setScorer(scorer);\n       DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n       DocIdSetIterator collectorIterator = collector.competitiveIterator();\n-      DocIdSetIterator filteredIterator;\n-      if (collectorIterator == null) {\n-        filteredIterator = scorerIterator;\n-      } else {\n-        if (scorerIterator.docID() != -1) {\n-          // Wrap ScorerIterator to start from -1 for conjunction \n-          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n-        }\n-        // filter scorerIterator to keep only competitive docs as defined by collector\n-        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n-      }\n+      DocIdSetIterator filteredIterator = scorerIterator;\n       if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n+        if (collectorIterator != null) {\n+          filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+        }\n         scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n+        if (collectorIterator != null) {\n+          if (scorerIterator.docID() != -1) {\n+            // here we assume that the initial version of collectorIterator matches all docs and can advance exactly to the desired docID", "originalCommit": "d5ca2deba729549f127890198725ea2b4304b05e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MzgxMw==", "url": "https://github.com/apache/lucene-solr/pull/1955#discussion_r500673813", "bodyText": "Thanks for the comment, I will think about this more", "author": "mayya-sharipova", "createdAt": "2020-10-07T00:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDgzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwODI3Ng==", "url": "https://github.com/apache/lucene-solr/pull/1955#discussion_r500708276", "bodyText": "@jpountz  My last  commit 4c5d828 seems to address the test failures.  I think it may work. Sorry again for the trouble.", "author": "mayya-sharipova", "createdAt": "2020-10-07T02:54:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNDgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "154a62de87eb47994e93363febfea05a2e8abec9", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/search/Weight.java b/lucene/core/src/java/org/apache/lucene/search/Weight.java\nindex eaa0e6cd15e..ba3755a5f4e 100644\n--- a/lucene/core/src/java/org/apache/lucene/search/Weight.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/Weight.java\n\n@@ -204,21 +204,21 @@ public abstract class Weight implements SegmentCacheable {\n       collector.setScorer(scorer);\n       DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n       DocIdSetIterator collectorIterator = collector.competitiveIterator();\n-      DocIdSetIterator filteredIterator = scorerIterator;\n-      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n-        if (collectorIterator != null) {\n-          filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+      DocIdSetIterator filteredIterator;\n+      if (collectorIterator == null) {\n+        filteredIterator = scorerIterator;\n+      } else {\n+        if (scorerIterator.docID() != -1) {\n+          // Wrap ScorerIterator to start from -1 for conjunction \n+          scorerIterator = new RangeDISIWrapper(scorerIterator, max);\n         }\n+        // filter scorerIterator to keep only competitive docs as defined by collector\n+        filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+      }\n+      if (filteredIterator.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n         scoreAll(collector, filteredIterator, twoPhase, acceptDocs);\n         return DocIdSetIterator.NO_MORE_DOCS;\n       } else {\n-        if (collectorIterator != null) {\n-          if (scorerIterator.docID() != -1) {\n-            // here we assume that the initial version of collectorIterator matches all docs and can advance exactly to the desired docID\n-            collectorIterator.advance(scorerIterator.docID());\n-          }\n-          filteredIterator = ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n-        }\n         int doc = filteredIterator.docID();\n         if (doc < min) {\n           doc = filteredIterator.advance(min);\n"}}, {"oid": "154a62de87eb47994e93363febfea05a2e8abec9", "url": "https://github.com/apache/lucene-solr/commit/154a62de87eb47994e93363febfea05a2e8abec9", "message": "Revert \"LUCENE-9566 Move collectorIterator to the same doc as scorerIterator\"\n\nThis reverts commit d5ca2deba729549f127890198725ea2b4304b05e.", "committedDate": "2020-10-07T01:51:46Z", "type": "commit"}, {"oid": "4c5d8284941d315b7f15d819fbbc5d156421f02d", "url": "https://github.com/apache/lucene-solr/commit/4c5d8284941d315b7f15d819fbbc5d156421f02d", "message": "Corrections", "committedDate": "2020-10-07T02:51:00Z", "type": "commit"}]}