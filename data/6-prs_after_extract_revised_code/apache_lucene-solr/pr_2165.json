{"pr_number": 2165, "pr_title": "SOLR-15059: Improve query performance monitoring", "pr_createdAt": "2020-12-23T17:22:28Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2165", "timeline": [{"oid": "b32cb0e513fb5eca82d08955abd038188d172d43", "url": "https://github.com/apache/lucene-solr/commit/b32cb0e513fb5eca82d08955abd038188d172d43", "message": "SOLR-15059: Improve query performance monitoring", "committedDate": "2020-12-23T17:19:57Z", "type": "commit"}, {"oid": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "url": "https://github.com/apache/lucene-solr/commit/0b4aab8ef1d050b14e44e46053fb942dad682a78", "message": "Add unit test for extracting query metrics", "committedDate": "2020-12-23T18:26:59Z", "type": "commit"}, {"oid": "1e92c766880c87ce74417820cf24094724323b8b", "url": "https://github.com/apache/lucene-solr/commit/1e92c766880c87ce74417820cf24094724323b8b", "message": "Back to [1m] for increase, inadvertently changed to [5m]", "committedDate": "2020-12-23T18:37:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3MzQ0MQ==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548073441", "bodyText": "Please add a human readable comment describing the intent", "author": "madrob", "createdAt": "2020-12-23T17:32:19Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");", "originalCommit": "b32cb0e513fb5eca82d08955abd038188d172d43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\nindex 4784b92d0e6..71cc0526d4b 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n\n@@ -23,6 +23,21 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class MetricsQueryTemplate {\n+  /*\n+  A regex with named groups is used to match template references to template + vars using the basic pattern:\n+\n+      $jq:<TEMPLATE>( <UNIQUE>, <KEYSELECTOR>, <METRIC>, <TYPE> )\n+\n+  For instance,\n+\n+      $jq:core(requests_total, endswith(\".requestTimes\"), count, COUNTER)\n+\n+  TEMPLATE = core\n+  UNIQUE = requests_total (unique suffix for this metric, results in a metric named \"solr_metrics_core_requests_total\")\n+  KEYSELECTOR = endswith(\".requestTimes\") (filter to select the specific key for this metric)\n+  METRIC = count\n+  TYPE = COUNTER\n+  */\n   private static final Pattern matchJqTemplate =\n       Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NjE5Mg==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548076192", "bodyText": "Noble just spent a bunch of effort getting rid of XPath in other places, is this a good direction to be going now?", "author": "madrob", "createdAt": "2020-12-23T17:36:01Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -105,17 +108,23 @@ public static MetricsConfiguration from(String resource) throws Exception {\n   public static MetricsConfiguration from(Document config) throws Exception {\n     Node settings = getNode(config, \"/config/settings\");\n \n+    Map<String,MetricsQueryTemplate> jqTemplatesMap = null;\n+    NodeList jqTemplates = (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);", "originalCommit": "b32cb0e513fb5eca82d08955abd038188d172d43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNjkwOQ==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548126909", "bodyText": "The code is already using XPath, I'm not introducing it here?", "author": "thelabdude", "createdAt": "2020-12-23T18:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NjE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE1ODA4Ng==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548158086", "bodyText": "Also, this happens once during initialization of the Prom exporter, so efficiency of XPath isn't so much of a concern. A few extra millis (if that much) during init doesn't seem like a problem to me, esp. if it makes the code cleaner.", "author": "thelabdude", "createdAt": "2020-12-23T19:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NjE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\nindex 2b21051de58..6f84bd4c5d1 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n\n@@ -108,11 +108,10 @@ public class MetricsConfiguration {\n   public static MetricsConfiguration from(Document config) throws Exception {\n     Node settings = getNode(config, \"/config/settings\");\n \n-    Map<String,MetricsQueryTemplate> jqTemplatesMap = null;\n-    NodeList jqTemplates = (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);\n-    if (jqTemplates.getLength() > 0) {\n-      jqTemplatesMap = loadJqTemplates(jqTemplates);\n-    }\n+    NodeList jqTemplates =\n+        (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);\n+    Map<String,MetricsQueryTemplate> jqTemplatesMap =\n+        (jqTemplates != null && jqTemplates.getLength() > 0) ? loadJqTemplates(jqTemplates) : Collections.emptyMap();\n \n     Node pingConfig = getNode(config, \"/config/rules/ping\");\n     Node metricsConfig = getNode(config, \"/config/rules/metrics\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NjM3Mg==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548076372", "bodyText": "Did we need a null check first?", "author": "madrob", "createdAt": "2020-12-23T17:36:14Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -105,17 +108,23 @@ public static MetricsConfiguration from(String resource) throws Exception {\n   public static MetricsConfiguration from(Document config) throws Exception {\n     Node settings = getNode(config, \"/config/settings\");\n \n+    Map<String,MetricsQueryTemplate> jqTemplatesMap = null;\n+    NodeList jqTemplates = (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);\n+    if (jqTemplates.getLength() > 0) {", "originalCommit": "b32cb0e513fb5eca82d08955abd038188d172d43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\nindex 2b21051de58..6f84bd4c5d1 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n\n@@ -108,11 +108,10 @@ public class MetricsConfiguration {\n   public static MetricsConfiguration from(Document config) throws Exception {\n     Node settings = getNode(config, \"/config/settings\");\n \n-    Map<String,MetricsQueryTemplate> jqTemplatesMap = null;\n-    NodeList jqTemplates = (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);\n-    if (jqTemplates.getLength() > 0) {\n-      jqTemplatesMap = loadJqTemplates(jqTemplates);\n-    }\n+    NodeList jqTemplates =\n+        (NodeList)(xpathFactory.newXPath()).evaluate(\"/config/jq-templates/template\", config, XPathConstants.NODESET);\n+    Map<String,MetricsQueryTemplate> jqTemplatesMap =\n+        (jqTemplates != null && jqTemplates.getLength() > 0) ? loadJqTemplates(jqTemplates) : Collections.emptyMap();\n \n     Node pingConfig = getNode(config, \"/config/rules/ping\");\n     Node metricsConfig = getNode(config, \"/config/rules/metrics\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NzEzMg==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548077132", "bodyText": "jqTemplates could be null", "author": "madrob", "createdAt": "2020-12-23T17:37:03Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery.java", "diffHunk": "@@ -116,6 +117,23 @@ public String getPath() {\n       List<JsonQuery> compiledQueries = new ArrayList<>();\n       if (jsonQueries != null) {\n         for (String jsonQuery : jsonQueries) {\n+\n+          // does this query refer to a reusable jq template to reduce boilerplate in the config?\n+          String stripWs = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+          if (stripWs.startsWith(\"$jq:\")) {\n+            Optional<Matcher> maybeMatcher = MetricsQueryTemplate.matches(stripWs);\n+            if (maybeMatcher.isPresent()) {\n+              Matcher matcher = maybeMatcher.get();\n+              String templateName = matcher.group(\"TEMPLATE\");\n+              MetricsQueryTemplate template = jqTemplates.get(templateName);", "originalCommit": "b32cb0e513fb5eca82d08955abd038188d172d43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery.java\nindex 988133773d3..7448a7ec9e2 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQuery.java\n\n@@ -119,15 +119,15 @@ public class MetricsQuery {\n         for (String jsonQuery : jsonQueries) {\n \n           // does this query refer to a reusable jq template to reduce boilerplate in the config?\n-          String stripWs = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n-          if (stripWs.startsWith(\"$jq:\")) {\n-            Optional<Matcher> maybeMatcher = MetricsQueryTemplate.matches(stripWs);\n+          final String jsonQueryCollapseWs = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+          if (jsonQueryCollapseWs.startsWith(\"$jq:\")) {\n+            Optional<Matcher> maybeMatcher = MetricsQueryTemplate.matches(jsonQueryCollapseWs);\n             if (maybeMatcher.isPresent()) {\n               Matcher matcher = maybeMatcher.get();\n               String templateName = matcher.group(\"TEMPLATE\");\n               MetricsQueryTemplate template = jqTemplates.get(templateName);\n               if (template == null) {\n-                throw new IllegalStateException(\"jq template '\"+matcher.group(\"TEMPLATE\")+\"' not found!\");\n+                throw new IllegalStateException(\"jq template '\" + matcher.group(\"TEMPLATE\") + \"' not found!\");\n               }\n \n               jsonQuery = template.applyTemplate(matcher);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3NzM5Nw==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548077397", "bodyText": "Is this going to be slooooooow?", "author": "madrob", "createdAt": "2020-12-23T17:37:24Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -141,12 +150,29 @@ private static Node getNode(Document doc, String path) {\n     }\n   }\n \n-  private static List<MetricsQuery> toMetricQueries(Node node) throws JsonQueryException {\n+  private static List<MetricsQuery> toMetricQueries(Node node, Map<String,MetricsQueryTemplate> jqTemplatesMap) throws JsonQueryException {\n     if (node == null) {\n       return Collections.emptyList();\n     }\n \n-    return MetricsQuery.from(node);\n+    return MetricsQuery.from(node, jqTemplatesMap);\n   }\n \n+  private static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n+    Map<String,MetricsQueryTemplate> map = new HashMap<>();\n+    for (int t=0; t < jqTemplates.getLength(); t++) {\n+      Node template = jqTemplates.item(t);", "originalCommit": "b32cb0e513fb5eca82d08955abd038188d172d43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\nindex 2b21051de58..6f84bd4c5d1 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n\n@@ -158,7 +157,7 @@ public class MetricsConfiguration {\n     return MetricsQuery.from(node, jqTemplatesMap);\n   }\n \n-  private static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n+  static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n     Map<String,MetricsQueryTemplate> map = new HashMap<>();\n     for (int t=0; t < jqTemplates.getLength(); t++) {\n       Node template = jqTemplates.item(t);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3ODI4MQ==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548078281", "bodyText": "Check for name.trim.isEmpty also? Isn't there a StringUtils method that does this for us safely?", "author": "madrob", "createdAt": "2020-12-23T17:38:27Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java", "diffHunk": "@@ -141,12 +150,29 @@ private static Node getNode(Document doc, String path) {\n     }\n   }\n \n-  private static List<MetricsQuery> toMetricQueries(Node node) throws JsonQueryException {\n+  private static List<MetricsQuery> toMetricQueries(Node node, Map<String,MetricsQueryTemplate> jqTemplatesMap) throws JsonQueryException {\n     if (node == null) {\n       return Collections.emptyList();\n     }\n \n-    return MetricsQuery.from(node);\n+    return MetricsQuery.from(node, jqTemplatesMap);\n   }\n \n+  private static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n+    Map<String,MetricsQueryTemplate> map = new HashMap<>();\n+    for (int t=0; t < jqTemplates.getLength(); t++) {\n+      Node template = jqTemplates.item(t);\n+      if (template.getNodeType() == Node.ELEMENT_NODE && template.hasAttributes()) {\n+        Node nameAttr = template.getAttributes().getNamedItem(\"name\");\n+        String tmpl = template.getTextContent();\n+        if (nameAttr != null && tmpl != null && !tmpl.trim().isEmpty()) {", "originalCommit": "b32cb0e513fb5eca82d08955abd038188d172d43", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\nindex 2b21051de58..6f84bd4c5d1 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsConfiguration.java\n\n@@ -158,7 +157,7 @@ public class MetricsConfiguration {\n     return MetricsQuery.from(node, jqTemplatesMap);\n   }\n \n-  private static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n+  static Map<String,MetricsQueryTemplate> loadJqTemplates(NodeList jqTemplates) {\n     Map<String,MetricsQueryTemplate> map = new HashMap<>();\n     for (int t=0; t < jqTemplates.getLength(); t++) {\n       Node template = jqTemplates.item(t);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyMzQ4NQ==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548123485", "bodyText": "Are we trying to be too helpful here? Or is this matching some existing spec?", "author": "madrob", "createdAt": "2020-12-23T18:35:05Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getDefaultType() {\n+    return defaultType;\n+  }\n+\n+  public String getTemplate() {\n+    return template;\n+  }\n+\n+  public String applyTemplate(final Matcher matched) {\n+    String keySelector = matched.group(\"KEYSELECTOR\");\n+    if (keySelector != null) {\n+      if (!keySelector.contains(\"select(\") && !keySelector.contains(\".key\")) {\n+        if (keySelector.contains(\"(\") && keySelector.contains(\")\")) {\n+          // some kind of function here ...\n+          keySelector = \".key | \" + keySelector.trim();\n+        } else {\n+          keySelector = \".key == \" + keySelector.trim();\n+        }\n+      }\n+    }\n+    String unique = matched.group(\"UNIQUE\").trim();\n+    String type = matched.group(\"TYPE\");\n+    if (type == null) {\n+      type = defaultType;\n+    }\n+\n+    String metric = matched.group(\"METRIC\");\n+    if (metric == null) {\n+      metric = unique;\n+    }\n+\n+    // could be a simple field name or some kind of function here\n+    if (!metric.contains(\"$\")) {\n+      if (\"object.value\".equals(metric)) {\n+        metric = \"$object.value\"; // don't require the user to supply the $", "originalCommit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyODE1OA==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548128158", "bodyText": "just trying to be helpful to keep the template syntax simpler ... e.g. I like {{count}} vs. {{$object.value.count}}", "author": "thelabdude", "createdAt": "2020-12-23T18:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyMzQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\nindex 4784b92d0e6..71cc0526d4b 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n\n@@ -23,6 +23,21 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class MetricsQueryTemplate {\n+  /*\n+  A regex with named groups is used to match template references to template + vars using the basic pattern:\n+\n+      $jq:<TEMPLATE>( <UNIQUE>, <KEYSELECTOR>, <METRIC>, <TYPE> )\n+\n+  For instance,\n+\n+      $jq:core(requests_total, endswith(\".requestTimes\"), count, COUNTER)\n+\n+  TEMPLATE = core\n+  UNIQUE = requests_total (unique suffix for this metric, results in a metric named \"solr_metrics_core_requests_total\")\n+  KEYSELECTOR = endswith(\".requestTimes\") (filter to select the specific key for this metric)\n+  METRIC = count\n+  TYPE = COUNTER\n+  */\n   private static final Pattern matchJqTemplate =\n       Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNDgwNw==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548124807", "bodyText": "unused?", "author": "madrob", "createdAt": "2020-12-23T18:36:40Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getDefaultType() {", "originalCommit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\nindex 4784b92d0e6..71cc0526d4b 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n\n@@ -23,6 +23,21 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class MetricsQueryTemplate {\n+  /*\n+  A regex with named groups is used to match template references to template + vars using the basic pattern:\n+\n+      $jq:<TEMPLATE>( <UNIQUE>, <KEYSELECTOR>, <METRIC>, <TYPE> )\n+\n+  For instance,\n+\n+      $jq:core(requests_total, endswith(\".requestTimes\"), count, COUNTER)\n+\n+  TEMPLATE = core\n+  UNIQUE = requests_total (unique suffix for this metric, results in a metric named \"solr_metrics_core_requests_total\")\n+  KEYSELECTOR = endswith(\".requestTimes\") (filter to select the specific key for this metric)\n+  METRIC = count\n+  TYPE = COUNTER\n+  */\n   private static final Pattern matchJqTemplate =\n       Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNDk5OA==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r548124998", "bodyText": "unused", "author": "madrob", "createdAt": "2020-12-23T18:36:53Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String getDefaultType() {\n+    return defaultType;\n+  }\n+\n+  public String getTemplate() {", "originalCommit": "0b4aab8ef1d050b14e44e46053fb942dad682a78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\nindex 4784b92d0e6..71cc0526d4b 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n\n@@ -23,6 +23,21 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n public class MetricsQueryTemplate {\n+  /*\n+  A regex with named groups is used to match template references to template + vars using the basic pattern:\n+\n+      $jq:<TEMPLATE>( <UNIQUE>, <KEYSELECTOR>, <METRIC>, <TYPE> )\n+\n+  For instance,\n+\n+      $jq:core(requests_total, endswith(\".requestTimes\"), count, COUNTER)\n+\n+  TEMPLATE = core\n+  UNIQUE = requests_total (unique suffix for this metric, results in a metric named \"solr_metrics_core_requests_total\")\n+  KEYSELECTOR = endswith(\".requestTimes\") (filter to select the specific key for this metric)\n+  METRIC = count\n+  TYPE = COUNTER\n+  */\n   private static final Pattern matchJqTemplate =\n       Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n \n"}}, {"oid": "5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "url": "https://github.com/apache/lucene-solr/commit/5c49dd2e84f5b2ecf6bf8cc6b432d3f1d74ce724", "message": "Fix broken test and remove unused getters", "committedDate": "2020-12-23T18:45:28Z", "type": "commit"}, {"oid": "f5a91430428f53871df0a10e8a033879a3bad68b", "url": "https://github.com/apache/lucene-solr/commit/f5a91430428f53871df0a10e8a033879a3bad68b", "message": "Use StringUtils", "committedDate": "2020-12-23T18:48:15Z", "type": "commit"}, {"oid": "98e333719019663fb8a4208f352c3e12d5cab15e", "url": "https://github.com/apache/lucene-solr/commit/98e333719019663fb8a4208f352c3e12d5cab15e", "message": "Merge remote-tracking branch 'asf/master' into SOLR-15059", "committedDate": "2021-01-05T20:27:08Z", "type": "commit"}, {"oid": "507656e3626be9f79ad3ec726362eba3c6c83dd6", "url": "https://github.com/apache/lucene-solr/commit/507656e3626be9f79ad3ec726362eba3c6c83dd6", "message": "Update the key selectors for core-query template to be more clear and add a panel showing number of leaders per node", "committedDate": "2021-01-05T21:01:36Z", "type": "commit"}, {"oid": "f4883ae752e752f976d873d04b86a71e4126f553", "url": "https://github.com/apache/lucene-solr/commit/f4883ae752e752f976d873d04b86a71e4126f553", "message": "Update test to reflect changes to templates", "committedDate": "2021-01-05T21:12:29Z", "type": "commit"}, {"oid": "34914b5fea297865d7c3517e015d878320c167a2", "url": "https://github.com/apache/lucene-solr/commit/34914b5fea297865d7c3517e015d878320c167a2", "message": "Remove auto-decoration around the KEYSELECTOR clause", "committedDate": "2021-01-05T21:29:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIyNzAzNQ==", "url": "https://github.com/apache/lucene-solr/pull/2165#discussion_r552227035", "bodyText": "NULL_DEREFERENCE:  object returned by matched.group(\"UNIQUE\") could be null and is dereferenced at line 88.", "author": "sonatype-lift", "createdAt": "2021-01-05T22:05:44Z", "path": "solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.prometheus.exporter;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class MetricsQueryTemplate {\n+  /*\n+  A regex with named groups is used to match template references to template + vars using the basic pattern:\n+\n+      $jq:<TEMPLATE>( <UNIQUE>, <KEYSELECTOR>, <METRIC>, <TYPE> )\n+\n+  For instance,\n+\n+      $jq:core(requests_total, endswith(\".requestTimes\"), count, COUNTER)\n+\n+  TEMPLATE = core\n+  UNIQUE = requests_total (unique suffix for this metric, results in a metric named \"solr_metrics_core_requests_total\")\n+  KEYSELECTOR = endswith(\".requestTimes\") (filter to select the specific key for this metric)\n+  METRIC = count\n+  TYPE = COUNTER\n+  */\n+  private static final Pattern matchJqTemplate =\n+      Pattern.compile(\"^\\\\$jq:(?<TEMPLATE>.*?)\\\\(\\\\s?(?<UNIQUE>[^,]*),\\\\s?(?<KEYSELECTOR>[^,]*)(,\\\\s?(?<METRIC>[^,]*)\\\\s?)?(,\\\\s?(?<TYPE>[^,]*)\\\\s?)?\\\\)$\");\n+\n+  public static Optional<Matcher> matches(String jsonQuery) {\n+    Optional<Matcher> maybe = Optional.empty();\n+    if (jsonQuery != null) {\n+      String toMatch = jsonQuery.replaceAll(\"\\\\s+\", \" \").trim();\n+      Matcher m = matchJqTemplate.matcher(toMatch);\n+      if (m.matches()) {\n+        maybe = Optional.of(m);\n+      }\n+    }\n+    return maybe;\n+  }\n+\n+  private final String name;\n+  private final String defaultType;\n+  private final String template;\n+\n+  public MetricsQueryTemplate(String name, String template, String defaultType) {\n+    Objects.requireNonNull(name, \"jq template must have a name\");\n+    Objects.requireNonNull(template, \"jq template is required\");\n+\n+    this.name = name;\n+    this.template = template.replaceAll(\"\\\\s+\", \" \").trim();\n+    if (this.template.isEmpty()) {\n+      throw new IllegalArgumentException(\"jq template must not be empty\");\n+    }\n+    this.defaultType = defaultType != null ? defaultType : \"GAUGE\";\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public String applyTemplate(final Matcher matched) {\n+    String keySelector = matched.group(\"KEYSELECTOR\");\n+    if (keySelector != null) {\n+      if (!keySelector.contains(\"select(\") && !keySelector.contains(\".key\")) {\n+        if (keySelector.contains(\"(\") && keySelector.contains(\")\")) {\n+          // some kind of function here ...\n+          keySelector = \".key | \" + keySelector.trim();\n+        } else {\n+          keySelector = \".key == \" + keySelector.trim();\n+        }\n+      }\n+    }\n+    String unique = matched.group(\"UNIQUE\").trim();", "originalCommit": "98e333719019663fb8a4208f352c3e12d5cab15e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a759efa9cb5ad50c33c9c855131032f53232f21", "chunk": "diff --git a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\nindex 71cc0526d4b..0b89455b1b5 100644\n--- a/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n+++ b/solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/MetricsQueryTemplate.java\n\n@@ -75,17 +75,11 @@ public class MetricsQueryTemplate {\n \n   public String applyTemplate(final Matcher matched) {\n     String keySelector = matched.group(\"KEYSELECTOR\");\n-    if (keySelector != null) {\n-      if (!keySelector.contains(\"select(\") && !keySelector.contains(\".key\")) {\n-        if (keySelector.contains(\"(\") && keySelector.contains(\")\")) {\n-          // some kind of function here ...\n-          keySelector = \".key | \" + keySelector.trim();\n-        } else {\n-          keySelector = \".key == \" + keySelector.trim();\n-        }\n-      }\n-    }\n-    String unique = matched.group(\"UNIQUE\").trim();\n+    if (keySelector == null) keySelector = \"\";\n+\n+    String unique = matched.group(\"UNIQUE\");\n+    unique = unique != null ? unique.trim() : \"\";\n+\n     String type = matched.group(\"TYPE\");\n     if (type == null) {\n       type = defaultType;\n"}}, {"oid": "7a759efa9cb5ad50c33c9c855131032f53232f21", "url": "https://github.com/apache/lucene-solr/commit/7a759efa9cb5ad50c33c9c855131032f53232f21", "message": "Fix musedev issue", "committedDate": "2021-01-05T22:21:27Z", "type": "commit"}, {"oid": "1494cab289caf0d67d7fa83e360ee6116b1c4fdc", "url": "https://github.com/apache/lucene-solr/commit/1494cab289caf0d67d7fa83e360ee6116b1c4fdc", "message": "Merge remote-tracking branch 'asf/master' into SOLR-15059", "committedDate": "2021-01-07T15:55:54Z", "type": "commit"}, {"oid": "0a580f87a5a71941ffbfa3092e1f29e3a4a0826f", "url": "https://github.com/apache/lucene-solr/commit/0a580f87a5a71941ffbfa3092e1f29e3a4a0826f", "message": "Update changes", "committedDate": "2021-01-07T15:58:34Z", "type": "commit"}]}