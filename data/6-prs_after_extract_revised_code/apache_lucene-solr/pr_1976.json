{"pr_number": 1976, "pr_title": "LUCENE-9578: TermRangeQuery empty string lower bound edge case", "pr_createdAt": "2020-10-12T15:48:06Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1976", "timeline": [{"oid": "52fff170add92002a2affafa850e922c94b9b3a6", "url": "https://github.com/apache/lucene-solr/commit/52fff170add92002a2affafa850e922c94b9b3a6", "message": "LUCENE-9578: TermRangeQuery empty string lower bound edge case\n\nCurrently a TermRangeQuery with the empty String (\"\") as lower bound and\nincludeLower=false leads internally constructs an Automaton that doesn't match\nanything. This is unexpected expecially for open upper bounds where any string\nshould be considered to be \"higher\" than the empty string.\n\nThis PR changes \"Automata#makeBinaryInterval\" so that for an empty string lower\nbound and an open upper bound, any String should match the query regardless or\nthe includeLower flag.", "committedDate": "2020-10-12T15:01:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzOTUzNA==", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r503439534", "bodyText": "this looks wrong as we should still make sure that the empty string is rejected if min==\"\" and minInclusive==false?", "author": "jpountz", "createdAt": "2020-10-12T17:35:20Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -254,7 +254,7 @@ public static Automaton makeBinaryInterval(BytesRef min, boolean minInclusive, B\n       cmp = min.compareTo(max);\n     } else {\n       cmp = -1;\n-      if (min.length == 0 && minInclusive) {\n+      if (min.length == 0) {", "originalCommit": "52fff170add92002a2affafa850e922c94b9b3a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f52c0b0885f785d9eaa056208630d097d2362a4", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\nindex f6a55ef8ade..d62378c9fda 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n\n@@ -255,7 +263,11 @@ final public class Automata {\n     } else {\n       cmp = -1;\n       if (min.length == 0) {\n-        return makeAnyBinary();\n+        if (minInclusive) {\n+          return makeAnyBinary();\n+        } else {\n+          return makeAnyBinaryExceptEmpty();\n+        }\n       }\n     }\n \n"}}, {"oid": "3f52c0b0885f785d9eaa056208630d097d2362a4", "url": "https://github.com/apache/lucene-solr/commit/3f52c0b0885f785d9eaa056208630d097d2362a4", "message": "iter", "committedDate": "2020-10-13T09:42:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxMjAyNg==", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505012026", "bodyText": "I don't think this is right since this only accepts strings of length 1.", "author": "jpountz", "createdAt": "2020-10-14T22:13:05Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,15 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    return makeCharRange(0, 255);", "originalCommit": "3f52c0b0885f785d9eaa056208630d097d2362a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3MzM0NA==", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505373344", "bodyText": "Yes, I was missing that this doesn't include a self-referencing accept state. Fixed that and added more tests to check this is working now.", "author": "cbuescher", "createdAt": "2020-10-15T09:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxMjAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "8d6ea1a9fbf32880510208d630b1314f9679e628", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\nindex d62378c9fda..9653a64b851 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n\n@@ -91,7 +91,14 @@ final public class Automata {\n    * the empty string.\n    */\n   public static Automaton makeAnyBinaryExceptEmpty() {\n-    return makeCharRange(0, 255);\n+    Automaton a = new Automaton();\n+    int s1 = a.createState();\n+    int s2 = a.createState();\n+    a.setAccept(s2, true);\n+    a.addTransition(s1, s2, 0, 255);\n+    a.addTransition(s2, s2, 0, 255);\n+    a.finishState();\n+    return a;\n   }\n \n   /**\n"}}, {"oid": "8d6ea1a9fbf32880510208d630b1314f9679e628", "url": "https://github.com/apache/lucene-solr/commit/8d6ea1a9fbf32880510208d630b1314f9679e628", "message": "fix", "committedDate": "2020-10-15T08:55:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDYyNA==", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505814624", "bodyText": "Do we need to call setAccept on s1 too? Or is it done implicitly elsewhere (I'm not completely familiar with the Automaton code)", "author": "jpountz", "createdAt": "2020-10-15T20:20:04Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {\n+    Automaton a = new Automaton();\n+    int s1 = a.createState();\n+    int s2 = a.createState();\n+    a.setAccept(s2, true);", "originalCommit": "8d6ea1a9fbf32880510208d630b1314f9679e628", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA4NTM5MQ==", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r506085391", "bodyText": "Oops ignore this comment I was totally confused. :)", "author": "jpountz", "createdAt": "2020-10-16T06:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDYyNA=="}], "type": "inlineReview", "revised_code": {"commit": "4db020db12ae165db7824c9eb2a256dbe9a3c41c", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\nindex 9653a64b851..deb73752d2c 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n\n@@ -90,7 +90,7 @@ final public class Automata {\n    * Returns a new (deterministic) automaton that accepts all binary terms except\n    * the empty string.\n    */\n-  public static Automaton makeAnyBinaryExceptEmpty() {\n+  public static Automaton makeNonEmptyBinary() {\n     Automaton a = new Automaton();\n     int s1 = a.createState();\n     int s2 = a.createState();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDg2Mw==", "url": "https://github.com/apache/lucene-solr/pull/1976#discussion_r505814863", "bodyText": "Maybe call makeNonEmptyBinary?", "author": "jpountz", "createdAt": "2020-10-15T20:20:34Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java", "diffHunk": "@@ -85,7 +85,22 @@ public static Automaton makeAnyBinary() {\n     a.finishState();\n     return a;\n   }\n-  \n+\n+  /**\n+   * Returns a new (deterministic) automaton that accepts all binary terms except\n+   * the empty string.\n+   */\n+  public static Automaton makeAnyBinaryExceptEmpty() {", "originalCommit": "8d6ea1a9fbf32880510208d630b1314f9679e628", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4db020db12ae165db7824c9eb2a256dbe9a3c41c", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\nindex 9653a64b851..deb73752d2c 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/Automata.java\n\n@@ -90,7 +90,7 @@ final public class Automata {\n    * Returns a new (deterministic) automaton that accepts all binary terms except\n    * the empty string.\n    */\n-  public static Automaton makeAnyBinaryExceptEmpty() {\n+  public static Automaton makeNonEmptyBinary() {\n     Automaton a = new Automaton();\n     int s1 = a.createState();\n     int s2 = a.createState();\n"}}, {"oid": "4db020db12ae165db7824c9eb2a256dbe9a3c41c", "url": "https://github.com/apache/lucene-solr/commit/4db020db12ae165db7824c9eb2a256dbe9a3c41c", "message": "rename method", "committedDate": "2020-10-16T09:22:48Z", "type": "commit"}]}