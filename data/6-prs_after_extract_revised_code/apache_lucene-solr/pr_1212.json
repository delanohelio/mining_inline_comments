{"pr_number": 1212, "pr_title": "LUCENE-9176: Handle the case when there is only one leaf node in TestEstimatePointCount", "pr_createdAt": "2020-01-27T07:32:32Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1212", "timeline": [{"oid": "09261337347abea2d77fe829ed2c8bea09fe038f", "url": "https://github.com/apache/lucene-solr/commit/09261337347abea2d77fe829ed2c8bea09fe038f", "message": "Handle the case when there is only one leaf node", "committedDate": "2020-01-27T07:27:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwMDM5Nw==", "url": "https://github.com/apache/lucene-solr/pull/1212#discussion_r371100397", "bodyText": "I don't think this line needs to change, we already get a number of leaves equal to 1 when there are fewer points than number of points per leaf?", "author": "jpountz", "createdAt": "2020-01-27T08:01:57Z", "path": "lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat.java", "diffHunk": "@@ -132,7 +132,7 @@ public void testEstimatePointCount() throws IOException {\n     PointValues points = lr.getPointValues(\"f\");\n \n     // If all points match, then the point count is numLeaves * maxPointsInLeafNode\n-    final int numLeaves = (int) Math.ceil((double) points.size() / maxPointsInLeafNode);\n+    final int numLeaves = (int) Math.max(Math.ceil((double) points.size() / maxPointsInLeafNode), 1);", "originalCommit": "09261337347abea2d77fe829ed2c8bea09fe038f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExMzEwNw==", "url": "https://github.com/apache/lucene-solr/pull/1212#discussion_r371113107", "bodyText": "Yes, you are right, I reverted that change.", "author": "iverase", "createdAt": "2020-01-27T08:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwMDM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b65df4235e2f3393b53575c5a6223f81c214d3c1", "chunk": "diff --git a/lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat.java b/lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat.java\nindex 2d5577c223a..5f907b1d205 100644\n--- a/lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat.java\n+++ b/lucene/core/src/test/org/apache/lucene/codecs/lucene60/TestLucene60PointsFormat.java\n\n@@ -132,7 +132,7 @@ public class TestLucene60PointsFormat extends BasePointsFormatTestCase {\n     PointValues points = lr.getPointValues(\"f\");\n \n     // If all points match, then the point count is numLeaves * maxPointsInLeafNode\n-    final int numLeaves = (int) Math.max(Math.ceil((double) points.size() / maxPointsInLeafNode), 1);\n+    final int numLeaves = (int) Math.ceil((double) points.size() / maxPointsInLeafNode);\n \n     IntersectVisitor allPointsVisitor = new IntersectVisitor() {\n       @Override\n"}}, {"oid": "b65df4235e2f3393b53575c5a6223f81c214d3c1", "url": "https://github.com/apache/lucene-solr/commit/b65df4235e2f3393b53575c5a6223f81c214d3c1", "message": "revert unnecessary change", "committedDate": "2020-01-27T08:37:11Z", "type": "commit"}]}