{"pr_number": 1217, "pr_title": "SOLR-14223 PublicKeyHandler consumes a lot of entropy during tests", "pr_createdAt": "2020-01-28T00:06:31Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1217", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTYzNA==", "url": "https://github.com/apache/lucene-solr/pull/1217#discussion_r371655634", "bodyText": "This must not be static or shared across test instances. A better solution would be to create this off an initial long seed and this seed should be taken from RandomizedContext.current..().random().nextLong().", "author": "dweiss", "createdAt": "2020-01-28T08:12:35Z", "path": "solr/test-framework/src/java/org/apache/solr/util/NotSecurePsuedoRandom.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.util;\n+\n+import java.security.SecureRandom;\n+import java.security.SecureRandomSpi;\n+import java.util.Random;\n+\n+/**\n+ * A mocked up instance of SecureRandom that just uses {@link Random} under the covers.\n+ * This is to prevent blocking issues that arise in platform default\n+ * SecureRandom instances due to too many instances / not enough random entropy.\n+ * Tests do not need secure SSL.\n+ */\n+public class NotSecurePsuedoRandom extends SecureRandom {\n+  public static final SecureRandom INSTANCE = new NotSecurePsuedoRandom();\n+  private static final Random RAND = new Random(42);", "originalCommit": "7c1ee0872df629df95104a1ac4a847912f5237ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNDUyMQ==", "url": "https://github.com/apache/lucene-solr/pull/1217#discussion_r373134521", "bodyText": "Hmm, not sure how that would work. Not every test runs with RandomizedContext, and even for those that do according to the code \"static test class initializers are not permitted to access random contexts\"", "author": "madrob", "createdAt": "2020-01-30T19:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNTA5NQ==", "url": "https://github.com/apache/lucene-solr/pull/1217#discussion_r373135095", "bodyText": "If the concern is that the random seeds are not reproducible across test runs... nothing using SecureRandom right now is reproducible anyway by design, so this wouldn't be a regression.", "author": "madrob", "createdAt": "2020-01-30T19:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMTQ4Mw==", "url": "https://github.com/apache/lucene-solr/pull/1217#discussion_r373201483", "bodyText": "All tests should extend from LuceneTestCase. If they don't, it's likely a problem already (because this also dodges thread leak checks, etc.). As for static variables - don't make it a static instance (it wasn't before if I see the diff right). Static instances make the reasoning about tests a lot more difficult and order-dependent.\nbq. \"static test class initializers are not permitted to access random contexts\"\nCorrect. Because this happens outside of the control of the test runner. Again - it makes reasoning about leaked threads (and anything else) more difficult.", "author": "dweiss", "createdAt": "2020-01-30T21:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1NTYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "c1c6fcadc94c0bbab1e16a99be8bd81fd7049d76", "chunk": "diff --git a/solr/test-framework/src/java/org/apache/solr/util/NotSecurePsuedoRandom.java b/solr/test-framework/src/java/org/apache/solr/util/NotSecurePsuedoRandom.java\ndeleted file mode 100644\nindex 5f280564542..00000000000\n--- a/solr/test-framework/src/java/org/apache/solr/util/NotSecurePsuedoRandom.java\n+++ /dev/null\n\n@@ -1,73 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.util;\n-\n-import java.security.SecureRandom;\n-import java.security.SecureRandomSpi;\n-import java.util.Random;\n-\n-/**\n- * A mocked up instance of SecureRandom that just uses {@link Random} under the covers.\n- * This is to prevent blocking issues that arise in platform default\n- * SecureRandom instances due to too many instances / not enough random entropy.\n- * Tests do not need secure SSL.\n- */\n-public class NotSecurePsuedoRandom extends SecureRandom {\n-  public static final SecureRandom INSTANCE = new NotSecurePsuedoRandom();\n-  private static final Random RAND = new Random(42);\n-\n-  /**\n-   * Helper method that can be used to fill an array with non-zero data.\n-   * (Attempted workaround of Solaris SSL Padding bug: SOLR-9068)\n-   */\n-  private static final byte[] fillData(byte[] data) {\n-    RAND.nextBytes(data);\n-    return data;\n-  }\n-\n-  /** SPI Used to init all instances */\n-  private static final SecureRandomSpi NOT_SECURE_SPI = new SecureRandomSpi() {\n-    /** returns a new byte[] filled with static data */\n-    public byte[] engineGenerateSeed(int numBytes) {\n-      return fillData(new byte[numBytes]);\n-    }\n-    /** fills the byte[] with static data */\n-    public void engineNextBytes(byte[] bytes) {\n-      fillData(bytes);\n-    }\n-    /** NOOP */\n-    public void engineSetSeed(byte[] seed) { /* NOOP */ }\n-  };\n-\n-  private NotSecurePsuedoRandom() {\n-    super(NOT_SECURE_SPI, null) ;\n-  }\n-\n-  /** returns a new byte[] filled with static data */\n-  public byte[] generateSeed(int numBytes) {\n-    return fillData(new byte[numBytes]);\n-  }\n-  /** fills the byte[] with static data */\n-  synchronized public void nextBytes(byte[] bytes) {\n-    fillData(bytes);\n-  }\n-  /** NOOP */\n-  synchronized public void setSeed(byte[] seed) { /* NOOP */ }\n-  /** NOOP */\n-  synchronized public void setSeed(long seed) { /* NOOP */ }\n-\n-}\n"}}, {"oid": "c1c6fcadc94c0bbab1e16a99be8bd81fd7049d76", "url": "https://github.com/apache/lucene-solr/commit/c1c6fcadc94c0bbab1e16a99be8bd81fd7049d76", "message": "SOLR-14223 Create RSAKeyPair from disk", "committedDate": "2020-02-03T22:22:19Z", "type": "forcePushed"}, {"oid": "ac2eb75d122eaca955f433d0c3876d4270568642", "url": "https://github.com/apache/lucene-solr/commit/ac2eb75d122eaca955f433d0c3876d4270568642", "message": "SOLR-14223 Create RSAKeyPair from disk\n\n* Create properties for PublicKeyHandler to read existing keys from disk\n* Move pregenerated keys from core/test-files to test-framework\n* Update tests to use existing keys instead of new keys each run", "committedDate": "2020-02-17T20:11:28Z", "type": "commit"}, {"oid": "ac2eb75d122eaca955f433d0c3876d4270568642", "url": "https://github.com/apache/lucene-solr/commit/ac2eb75d122eaca955f433d0c3876d4270568642", "message": "SOLR-14223 Create RSAKeyPair from disk\n\n* Create properties for PublicKeyHandler to read existing keys from disk\n* Move pregenerated keys from core/test-files to test-framework\n* Update tests to use existing keys instead of new keys each run", "committedDate": "2020-02-17T20:11:28Z", "type": "forcePushed"}]}