{"pr_number": 1298, "pr_title": "SOLR-14289 Skip ZkChroot check when not necessary", "pr_createdAt": "2020-02-27T20:10:41Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1298", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTE3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1298#discussion_r389891175", "bodyText": "So, what other than \"zookeeper\" is used here?  Do we just need a boolean if this is the only value?", "author": "dsmiley", "createdAt": "2020-03-09T18:48:02Z", "path": "solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java", "diffHunk": "@@ -285,7 +285,7 @@ public static NodeConfig loadNodeConfig(Path solrHome, Properties nodeProperties\n           if (zkClient.exists(\"/solr.xml\", true)) {\n             log.info(\"solr.xml found in ZooKeeper. Loading...\");\n             byte[] data = zkClient.getData(\"/solr.xml\", null, null, true);\n-            return SolrXmlConfig.fromInputStream(loader, new ByteArrayInputStream(data));\n+            return SolrXmlConfig.fromInputStream(loader, new ByteArrayInputStream(data), \"zookeeper\");", "originalCommit": "8b3daed9654613c3fa19f14b127ef5623097e014", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5ODQ3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1298#discussion_r391898475", "bodyText": "Yea, a boolean would be sufficient. I was thinking about if we need to have other sources in the future, but we can change this to a string/enum later.", "author": "madrob", "createdAt": "2020-03-12T21:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk4NTQzNQ==", "url": "https://github.com/apache/lucene-solr/pull/1298#discussion_r391985435", "bodyText": "Then I much prefer a boolean as it'd be much clearer -- \"isInZooKeeper\" or some-such.", "author": "dsmiley", "createdAt": "2020-03-13T01:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "66fb54394fa98bc07cfcdac745f877e4eec088dd", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java\nindex 9f78cb5d9a4..8123f478695 100644\n--- a/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java\n+++ b/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java\n\n@@ -270,33 +270,28 @@ public class SolrDispatchFilter extends BaseSolrFilter {\n    * @return the NodeConfig\n    */\n   public static NodeConfig loadNodeConfig(Path solrHome, Properties nodeProperties) {\n-    NodeConfig cfg = null;\n-    try (SolrResourceLoader loader = new SolrResourceLoader(solrHome, SolrDispatchFilter.class.getClassLoader(), nodeProperties)) {\n-      if (!StringUtils.isEmpty(System.getProperty(\"solr.solrxml.location\"))) {\n-        log.warn(\"Solr property solr.solrxml.location is no longer supported. \" +\n-            \"Will automatically load solr.xml from ZooKeeper if it exists\");\n-      }\n+    if (!StringUtils.isEmpty(System.getProperty(\"solr.solrxml.location\"))) {\n+      log.warn(\"Solr property solr.solrxml.location is no longer supported. \" +\n+          \"Will automatically load solr.xml from ZooKeeper if it exists\");\n+    }\n \n-      String zkHost = System.getProperty(\"zkHost\");\n-      if (!StringUtils.isEmpty(zkHost)) {\n-        int startUpZkTimeOut = Integer.getInteger(\"waitForZk\", 30);\n-        startUpZkTimeOut *= 1000;\n-        try (SolrZkClient zkClient = new SolrZkClient(zkHost, startUpZkTimeOut)) {\n-          if (zkClient.exists(\"/solr.xml\", true)) {\n-            log.info(\"solr.xml found in ZooKeeper. Loading...\");\n-            byte[] data = zkClient.getData(\"/solr.xml\", null, null, true);\n-            return SolrXmlConfig.fromInputStream(loader, new ByteArrayInputStream(data), \"zookeeper\");\n-          }\n-        } catch (Exception e) {\n-          throw new SolrException(ErrorCode.SERVER_ERROR, \"Error occurred while loading solr.xml from zookeeper\", e);\n+    String zkHost = System.getProperty(\"zkHost\");\n+    if (!StringUtils.isEmpty(zkHost)) {\n+      int startUpZkTimeOut = Integer.getInteger(\"waitForZk\", 30);\n+      startUpZkTimeOut *= 1000;\n+      try (SolrZkClient zkClient = new SolrZkClient(zkHost, startUpZkTimeOut)) {\n+        if (zkClient.exists(\"/solr.xml\", true)) {\n+          log.info(\"solr.xml found in ZooKeeper. Loading...\");\n+          byte[] data = zkClient.getData(\"/solr.xml\", null, null, true);\n+          return SolrXmlConfig.fromInputStream(solrHome, new ByteArrayInputStream(data), nodeProperties, true);\n         }\n-        log.info(\"Loading solr.xml from SolrHome (not found in ZooKeeper)\");\n+      } catch (Exception e) {\n+        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error occurred while loading solr.xml from zookeeper\", e);\n       }\n-      cfg = SolrXmlConfig.fromSolrHome(loader, loader.getInstancePath());\n-    } catch (IOException e) {\n-      // do nothing.\n+      log.info(\"Loading solr.xml from SolrHome (not found in ZooKeeper)\");\n     }\n-    return cfg;\n+\n+    return SolrXmlConfig.fromSolrHome(solrHome, nodeProperties);\n   }\n   \n   public CoreContainer getCores() {\n"}}, {"oid": "66fb54394fa98bc07cfcdac745f877e4eec088dd", "url": "https://github.com/apache/lucene-solr/commit/66fb54394fa98bc07cfcdac745f877e4eec088dd", "message": "SOLR-14289 Skip ZkChroot check when not necessary", "committedDate": "2020-03-13T14:46:33Z", "type": "commit"}, {"oid": "66fb54394fa98bc07cfcdac745f877e4eec088dd", "url": "https://github.com/apache/lucene-solr/commit/66fb54394fa98bc07cfcdac745f877e4eec088dd", "message": "SOLR-14289 Skip ZkChroot check when not necessary", "committedDate": "2020-03-13T14:46:33Z", "type": "forcePushed"}]}