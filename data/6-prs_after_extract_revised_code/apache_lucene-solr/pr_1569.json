{"pr_number": 1569, "pr_title": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips.", "pr_createdAt": "2020-06-11T11:54:38Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1569", "timeline": [{"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "url": "https://github.com/apache/lucene-solr/commit/e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "message": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips.", "committedDate": "2020-06-11T11:54:29Z", "type": "commit"}, {"oid": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "url": "https://github.com/apache/lucene-solr/commit/e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "message": "LUCENE-9356: Add a test that verifies that Lucene catches bit flips.", "committedDate": "2020-06-11T11:54:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1MTk4OA==", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438751988", "bodyText": "curious if you saw this much?", "author": "msokolov", "createdAt": "2020-06-11T12:40:19Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.index;\n+\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.BaseDirectoryWrapper;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.LineFileDocs;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;\n+import org.apache.lucene.util.TestUtil;\n+\n+/**\n+ * Test that the default codec detects bit flips at open or checkIntegrity time.\n+ */\n+@SuppressFileSystems(\"ExtrasFS\")\n+public class TestAllFilesDetectBitFlips extends LuceneTestCase {\n+\n+  public void test() throws Exception {\n+    doTest(false);\n+  }\n+\n+  public void testCFS() throws Exception {\n+    doTest(true);\n+  }\n+\n+  public void doTest(boolean cfs) throws Exception {\n+    Directory dir = newDirectory();\n+\n+    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+    conf.setCodec(TestUtil.getDefaultCodec());\n+\n+    if (cfs == false) {\n+      conf.setUseCompoundFile(false);\n+      conf.getMergePolicy().setNoCFSRatio(0.0);\n+    }\n+\n+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n+    // Use LineFileDocs so we (hopefully) get most Lucene features\n+    // tested, e.g. IntPoint was recently added to it:\n+    LineFileDocs docs = new LineFileDocs(random());\n+    for (int i = 0; i < 100; i++) {\n+      riw.addDocument(docs.nextDoc());\n+      if (random().nextInt(7) == 0) {\n+        riw.commit();\n+      }\n+      if (random().nextInt(20) == 0) {\n+        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n+      }\n+      if (random().nextInt(15) == 0) {\n+        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n+      }\n+    }\n+    if (TEST_NIGHTLY == false) {\n+      riw.forceMerge(1);\n+    }\n+    riw.close();\n+    checkBitFlips(dir);\n+    dir.close();\n+  }\n+  \n+  private void checkBitFlips(Directory dir) throws IOException {\n+    for(String name : dir.listAll()) {\n+      if (name.equals(IndexWriter.WRITE_LOCK_NAME) == false) {\n+        corruptFile(dir, name);\n+      }\n+    }\n+  }\n+  \n+  private void corruptFile(Directory dir, String victim) throws IOException {\n+    try (BaseDirectoryWrapper dirCopy = newDirectory()) {\n+      dirCopy.setCheckIndexOnClose(false);\n+\n+      long victimLength = dir.fileLength(victim);\n+      long flipOffset = TestUtil.nextLong(random(), 0, victimLength - 1);\n+\n+      if (VERBOSE) {\n+        System.out.println(\"TEST: now corrupt file \" + victim + \" by changing byte at offset \" + flipOffset + \" (length= \" + victimLength + \")\");\n+      }\n+\n+      for(String name : dir.listAll()) {\n+        if (name.equals(victim) == false) {\n+          dirCopy.copyFrom(dir, name, name, IOContext.DEFAULT);\n+        } else {\n+          try (IndexOutput out = dirCopy.createOutput(name, IOContext.DEFAULT);\n+              IndexInput in = dir.openInput(name, IOContext.DEFAULT)) {\n+              out.copyBytes(in, flipOffset);\n+              out.writeByte((byte) (in.readByte() + TestUtil.nextInt(random(), 0x01, 0xFF)));\n+              out.copyBytes(in, victimLength - flipOffset - 1);\n+          }\n+          try (IndexInput in = dirCopy.openInput(name, IOContext.DEFAULT)) {\n+            try {\n+              CodecUtil.checksumEntireFile(in);\n+              System.out.println(\"TEST: changing a byte in \" + victim + \" did not update the checksum)\");", "originalCommit": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1NDYxOQ==", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438754619", "bodyText": "I haven't seen a single occurrence of it (fortunately! :) )", "author": "jpountz", "createdAt": "2020-06-11T12:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc1MTk4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDUxMg==", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438774512", "bodyText": "Woohoo!", "author": "mikemccand", "createdAt": "2020-06-11T13:19:15Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.index;\n+\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.BaseDirectoryWrapper;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.LineFileDocs;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;\n+import org.apache.lucene.util.TestUtil;\n+\n+/**\n+ * Test that the default codec detects bit flips at open or checkIntegrity time.\n+ */\n+@SuppressFileSystems(\"ExtrasFS\")\n+public class TestAllFilesDetectBitFlips extends LuceneTestCase {\n+\n+  public void test() throws Exception {\n+    doTest(false);\n+  }\n+\n+  public void testCFS() throws Exception {\n+    doTest(true);\n+  }\n+\n+  public void doTest(boolean cfs) throws Exception {\n+    Directory dir = newDirectory();\n+\n+    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+    conf.setCodec(TestUtil.getDefaultCodec());\n+\n+    if (cfs == false) {\n+      conf.setUseCompoundFile(false);\n+      conf.getMergePolicy().setNoCFSRatio(0.0);\n+    }\n+\n+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n+    // Use LineFileDocs so we (hopefully) get most Lucene features", "originalCommit": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMTgzNA==", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438831834", "bodyText": "This is actually copy-pasted from TestAllFilesDetectTruncation :)", "author": "jpountz", "createdAt": "2020-06-11T14:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDUxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NDk5OQ==", "url": "https://github.com/apache/lucene-solr/pull/1569#discussion_r438774999", "bodyText": "Do you maybe need to exclude extraN files for when ExtraFS randomly strikes?\nEdit: oh, nevermind, I see we suppress ExtraFS above :)", "author": "mikemccand", "createdAt": "2020-06-11T13:20:05Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectBitFlips.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.index;\n+\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.apache.lucene.analysis.MockAnalyzer;\n+import org.apache.lucene.codecs.CodecUtil;\n+import org.apache.lucene.store.BaseDirectoryWrapper;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.IOContext;\n+import org.apache.lucene.store.IndexInput;\n+import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.util.LineFileDocs;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.LuceneTestCase.SuppressFileSystems;\n+import org.apache.lucene.util.TestUtil;\n+\n+/**\n+ * Test that the default codec detects bit flips at open or checkIntegrity time.\n+ */\n+@SuppressFileSystems(\"ExtrasFS\")\n+public class TestAllFilesDetectBitFlips extends LuceneTestCase {\n+\n+  public void test() throws Exception {\n+    doTest(false);\n+  }\n+\n+  public void testCFS() throws Exception {\n+    doTest(true);\n+  }\n+\n+  public void doTest(boolean cfs) throws Exception {\n+    Directory dir = newDirectory();\n+\n+    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n+    conf.setCodec(TestUtil.getDefaultCodec());\n+\n+    if (cfs == false) {\n+      conf.setUseCompoundFile(false);\n+      conf.getMergePolicy().setNoCFSRatio(0.0);\n+    }\n+\n+    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n+    // Use LineFileDocs so we (hopefully) get most Lucene features\n+    // tested, e.g. IntPoint was recently added to it:\n+    LineFileDocs docs = new LineFileDocs(random());\n+    for (int i = 0; i < 100; i++) {\n+      riw.addDocument(docs.nextDoc());\n+      if (random().nextInt(7) == 0) {\n+        riw.commit();\n+      }\n+      if (random().nextInt(20) == 0) {\n+        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n+      }\n+      if (random().nextInt(15) == 0) {\n+        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n+      }\n+    }\n+    if (TEST_NIGHTLY == false) {\n+      riw.forceMerge(1);\n+    }\n+    riw.close();\n+    checkBitFlips(dir);\n+    dir.close();\n+  }\n+  \n+  private void checkBitFlips(Directory dir) throws IOException {\n+    for(String name : dir.listAll()) {\n+      if (name.equals(IndexWriter.WRITE_LOCK_NAME) == false) {\n+        corruptFile(dir, name);", "originalCommit": "e231f6636dfe9479cf3dd7fe3c5f38dcc119fdf9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}