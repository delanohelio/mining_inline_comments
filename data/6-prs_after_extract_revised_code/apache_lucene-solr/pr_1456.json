{"pr_number": 1456, "pr_title": "SOLR-13289: Support for BlockMax WAND", "pr_createdAt": "2020-04-24T19:08:28Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1456", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjE5NA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r416796194", "bodyText": "@jpountz, What did you mean with this comment? MultiCollector will set the scoreMode to COMPLETE in the case of the main collector being something other than TOP_SCORES, right?", "author": "tflobbe", "createdAt": "2020-04-28T17:31:51Z", "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "diffHunk": "@@ -39,7 +39,7 @@ public float getMaxScore() {\n   public ScoreMode scoreMode() {\n     // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n     // this collector is only used in a MultiCollector.\n-    return ScoreMode.COMPLETE;\n+    return ScoreMode.TOP_SCORES;", "originalCommit": "982b753963c659007692d03538f81fa4d0dc7b92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3Mjk1MA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r416972950", "bodyText": "Yeah I think that at some point we tried not to wrap the scorer when all score modes were COMPLETE but apparently now we do, so this comment is stale. https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/MultiCollector.java#L158", "author": "jpountz", "createdAt": "2020-04-28T22:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java b/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java\nindex 08af77ecbcf..1b8987dbfcc 100644\n--- a/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java\n+++ b/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java\n\n@@ -37,8 +37,6 @@ public class MaxScoreCollector extends SimpleCollector {\n \n   @Override\n   public ScoreMode scoreMode() {\n-    // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n-    // this collector is only used in a MultiCollector.\n     return ScoreMode.TOP_SCORES;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NjcyMw==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r416956723", "bodyText": "I plan to move the default value to a solrconfig config in a future PR, for now, MAX_VALUE (disabled)", "author": "tflobbe", "createdAt": "2020-04-28T22:15:31Z", "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "diffHunk": "@@ -401,6 +403,14 @@ public void process(ResponseBuilder rb) throws IOException\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n+  private int getMinExactHits(SolrParams params) {\n+    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);", "originalCommit": "4e2c5aa08086176dbbd7f2c0da3cd7a8ca8c12df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "81f88f425ba034bf3545131b0630bd68f5f8329b", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\nindex da299045ad3..5a7d76b56fe 100644\n--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\n+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\n\n@@ -403,14 +408,6 @@ public class QueryComponent extends SearchComponent\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n-  private int getMinExactHits(SolrParams params) {\n-    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);\n-    if (minExactHits < 0 || minExactHits > Integer.MAX_VALUE) {\n-      minExactHits = Integer.MAX_VALUE;\n-    }\n-    return (int)minExactHits;\n-  }\n-\n   protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n   {\n     SolrQueryRequest req = rb.req;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTUyOA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418739528", "bodyText": "Why? We can't pick a default and still use this?", "author": "madrob", "createdAt": "2020-05-01T21:10:42Z", "path": "solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java", "diffHunk": "@@ -292,11 +293,18 @@ else if(geo instanceof WriteableGeoJSON) {\n     }\n   }\n \n+  @Deprecated\n   @Override\n   public void writeStartDocumentList(String name, \n-      long start, int size, long numFound, Float maxScore) throws IOException\n+      long start, int size, long numFound, Float maxScore) throws IOException {\n+    throw new UnsupportedOperationException();", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0ODEwMg==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418748102", "bodyText": "This method Shouldn't be called at all for writing a response. In other ResponseWriters, I left the code untouched for support in case someone is extending the Writer. In this case, since it's an inner class, I decided to throw an exception to catch potential bugs (internal code calling this)", "author": "tflobbe", "createdAt": "2020-05-01T21:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODczOTUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java b/solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java\nindex 91f2cc5aea1..2e5ad32e4c8 100644\n--- a/solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java\n+++ b/solr/core/src/java/org/apache/solr/response/GeoJSONResponseWriter.java\n\n@@ -302,9 +301,9 @@ class GeoJSONWriter extends JSONWriter {\n   \n   @Override\n   public void writeStartDocumentList(String name, \n-      long start, int size, long numFound, Float maxScore, HitCountRelation hitCountRelation) throws IOException\n+      long start, int size, long numFound, Float maxScore, Boolean hitCountExact) throws IOException\n   {\n-    writeMapOpener(headerSize(maxScore, hitCountRelation));\n+    writeMapOpener(headerSize(maxScore, hitCountExact));\n     incLevel();\n     writeKey(\"type\",false);\n     writeStr(null, \"FeatureCollection\", false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDE1MQ==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418740151", "bodyText": "do you mean solr 10? we don't need a major version with it deprecated before we can jettison it? folks upgrading from 8.5->9 might be surprised by this.", "author": "madrob", "createdAt": "2020-05-01T21:12:31Z", "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "diffHunk": "@@ -132,11 +133,16 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return\n   //       that the size could not be reliably determined.\n   //\n \n+  /**\n+   * This method will be removed in Solr 9", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0OTA1OA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418749058", "bodyText": "My understanding is that it's OK to change methods across major versions? Unless it's something needed for rolling upgrade or something.", "author": "tflobbe", "createdAt": "2020-05-01T21:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDE1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/response/JSONWriter.java b/solr/core/src/java/org/apache/solr/response/JSONWriter.java\nindex b0c6211d77f..5d357accfe8 100644\n--- a/solr/core/src/java/org/apache/solr/response/JSONWriter.java\n+++ b/solr/core/src/java/org/apache/solr/response/JSONWriter.java\n\n@@ -135,7 +134,7 @@ public class JSONWriter extends TextResponseWriter implements JsonTextWriter {\n \n   /**\n    * This method will be removed in Solr 9\n-   * @deprecated Use {{@link #writeStartDocumentList(String, long, int, long, Float, HitCountRelation)}.\n+   * @deprecated Use {{@link #writeStartDocumentList(String, long, int, long, Float, Boolean)}.\n    */\n   @Override\n   @Deprecated\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDk4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418740989", "bodyText": "why can we make this change?", "author": "madrob", "createdAt": "2020-05-01T21:14:51Z", "path": "solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java", "diffHunk": "@@ -37,9 +37,7 @@ public float getMaxScore() {\n \n   @Override\n   public ScoreMode scoreMode() {\n-    // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n-    // this collector is only used in a MultiCollector.\n-    return ScoreMode.COMPLETE;\n+    return ScoreMode.TOP_SCORES;", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MDE2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418750165", "bodyText": "There is a previous discussion in this PR about it:\n\ntflobbe:\n@jpountz, What did you mean with this comment? MultiCollector will set the scoreMode to COMPLETE in the case of the main collector being something other than TOP_SCORES, right?\njpountz:\nYeah I think that at some point we tried not to wrap the scorer when all score modes were COMPLETE but apparently now we do, so this comment is stale. https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/MultiCollector.java#L158", "author": "tflobbe", "createdAt": "2020-05-01T21:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MDk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "81f88f425ba034bf3545131b0630bd68f5f8329b", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java b/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java\nindex 1b8987dbfcc..abb2243fae2 100644\n--- a/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java\n+++ b/solr/core/src/java/org/apache/solr/search/MaxScoreCollector.java\n\n@@ -37,7 +37,9 @@ public class MaxScoreCollector extends SimpleCollector {\n \n   @Override\n   public ScoreMode scoreMode() {\n-    return ScoreMode.TOP_SCORES;\n+    // Should be TOP_SCORES but this would wrap the scorer unnecessarily since\n+    // this collector is only used in a MultiCollector.\n+    return ScoreMode.COMPLETE;\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MTgzMw==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418741833", "bodyText": "this is going to overflow in the default case, is that ok?", "author": "madrob", "createdAt": "2020-05-01T21:17:13Z", "path": "solr/core/src/java/org/apache/solr/search/QueryResultKey.java", "diffHunk": "@@ -65,6 +70,7 @@ public QueryResultKey(Query query, List<Query> filters, Sort sort, int nc_flags)\n       h = h*29 + sf.hashCode();\n       ramSfields += BASE_SF_RAM_BYTES_USED + RamUsageEstimator.sizeOfObject(sf.getField());\n     }\n+    h = h*31 + minExactHits;", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MjU4Mg==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418752582", "bodyText": "ah! Good question. I guess yes?", "author": "tflobbe", "createdAt": "2020-05-01T21:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NTU3NA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r422255574", "bodyText": "Added a test", "author": "tflobbe", "createdAt": "2020-05-08T16:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MTgzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDM2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418744362", "bodyText": "s/mun/min", "author": "madrob", "createdAt": "2020-05-01T21:24:24Z", "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());\n+    }\n+    ModifiableSolrParams params = new ModifiableSolrParams();\n+    params.set(\"q\", \"title_ws:Book1\");\n+    params.set(FacetParams.FACET, \"true\");\n+    params.set(FacetParams.FACET_FIELD, \"title_ws\");\n+    assertQ(req(params),\n+        \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n+        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n+    \n+    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/request/TestFaceting.java b/solr/core/src/test/org/apache/solr/request/TestFaceting.java\nindex acd9231f6a6..7a0ca1062e6 100644\n--- a/solr/core/src/test/org/apache/solr/request/TestFaceting.java\n+++ b/solr/core/src/test/org/apache/solr/request/TestFaceting.java\n\n@@ -948,13 +947,13 @@ public class TestFaceting extends SolrTestCaseJ4 {\n     params.set(FacetParams.FACET_FIELD, \"title_ws\");\n     assertQ(req(params),\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n-        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@hitCountExact='true']\"\n         ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n     \n-    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise\n+    // It doesn't matter if we request minExactHits, when requesting facets, the numFound value is precise\n     assertQ(req(params, CommonParams.MIN_EXACT_HITS, \"2\", CommonParams.ROWS, \"2\"),\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n-        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@hitCountExact='true']\"\n         ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODMyNw==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418678327", "bodyText": "This doesn't really allow anyone to specify a minExactHits value between Integer.MAX_VALUE and Long.MAX_VALUE. For practical reasons, that is ok but just not consistent and would require a note in the ref guide too. Do you think we should just switch this out with Long instead?", "author": "anshumg", "createdAt": "2020-05-01T18:38:47Z", "path": "solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java", "diffHunk": "@@ -401,6 +403,14 @@ public void process(ResponseBuilder rb) throws IOException\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n+  private int getMinExactHits(SolrParams params) {\n+    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);\n+    if (minExactHits < 0 || minExactHits > Integer.MAX_VALUE) {", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1Njg1MQ==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418756851", "bodyText": "This is intentional. See the discussion with Adrien in this same PR. We allow longs just because the minExactHits is in relation to the numFound, which is a long, however, any value greater than Integer.MAX_VALUE doesn't make sense, since Lucene doesn't allow more than that in a single shard. In case of distributed queries, the minExactHits is used by every shard", "author": "tflobbe", "createdAt": "2020-05-01T22:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "81f88f425ba034bf3545131b0630bd68f5f8329b", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\nindex 6a3eb6f3f87..5a7d76b56fe 100644\n--- a/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\n+++ b/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\n\n@@ -403,14 +408,6 @@ public class QueryComponent extends SearchComponent\n     doProcessUngroupedSearch(rb, cmd, result);\n   }\n \n-  private int getMinExactHits(SolrParams params) {\n-    long minExactHits = params.getLong(CommonParams.MIN_EXACT_HITS, Integer.MAX_VALUE);\n-    if (minExactHits < 0 || minExactHits > Integer.MAX_VALUE) {\n-      minExactHits = Integer.MAX_VALUE;\n-    }\n-    return (int)minExactHits;\n-  }\n-\n   protected void doFieldSortValues(ResponseBuilder rb, SolrIndexSearcher searcher) throws IOException\n   {\n     SolrQueryRequest req = rb.req;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTk3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418681975", "bodyText": "This method will be removed after Solr 9, right?", "author": "anshumg", "createdAt": "2020-05-01T18:46:53Z", "path": "solr/core/src/java/org/apache/solr/response/JSONWriter.java", "diffHunk": "@@ -132,11 +133,16 @@ public void writeSolrDocument(String name, SolrDocument doc, ReturnFields return\n   //       that the size could not be reliably determined.\n   //\n \n+  /**\n+   * This method will be removed in Solr 9", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3MjU1Ng==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418772556", "bodyText": "I really don't think we need to keep this around longer than 9.0. People upgrading a major version expect to have to change some code. This is a trivial change, they'll get a compile-time error and notice there is a new parameter added. This doesn't even change the client, just plugins.", "author": "tflobbe", "createdAt": "2020-05-01T23:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/response/JSONWriter.java b/solr/core/src/java/org/apache/solr/response/JSONWriter.java\nindex b0c6211d77f..5d357accfe8 100644\n--- a/solr/core/src/java/org/apache/solr/response/JSONWriter.java\n+++ b/solr/core/src/java/org/apache/solr/response/JSONWriter.java\n\n@@ -135,7 +134,7 @@ public class JSONWriter extends TextResponseWriter implements JsonTextWriter {\n \n   /**\n    * This method will be removed in Solr 9\n-   * @deprecated Use {{@link #writeStartDocumentList(String, long, int, long, Float, HitCountRelation)}.\n+   * @deprecated Use {{@link #writeStartDocumentList(String, long, int, long, Float, Boolean)}.\n    */\n   @Override\n   @Deprecated\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MDE4Mw==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418690183", "bodyText": ":)", "author": "anshumg", "createdAt": "2020-05-01T19:05:12Z", "path": "solr/core/src/test/org/apache/solr/TestDistributedSearch.java", "diffHunk": "@@ -1082,11 +1086,32 @@ public void test() throws Exception {\n     assertEquals(new EnumFieldValue(11, \"Critical\"),\n                  rsp.getFieldStatsInfo().get(fieldName).getMax());\n \n-    handle.put(\"severity\", UNORDERED); // this is stupid, but stats.facet doesn't garuntee order\n+    handle.put(\"severity\", UNORDERED); // this is stupid, but stats.facet doesn't guarantee order\n     query(\"q\", \"*:*\", \"stats\", \"true\", \"stats.field\", fieldName, \n           \"stats.facet\", fieldName);\n   }\n \n+  private void testMinExactHits() throws Exception {\n+    assertIsExactHitCount(\"q\",\"{!cache=false}dog OR men OR cow OR country OR dumpty\", CommonParams.MIN_EXACT_HITS, \"200\", CommonParams.ROWS, \"2\", CommonParams.SORT, \"score desc, id asc\");", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/TestDistributedSearch.java b/solr/core/src/test/org/apache/solr/TestDistributedSearch.java\nindex 2c0d2da07d4..6861111bb84 100644\n--- a/solr/core/src/test/org/apache/solr/TestDistributedSearch.java\n+++ b/solr/core/src/test/org/apache/solr/TestDistributedSearch.java\n\n@@ -1102,13 +1101,15 @@ public class TestDistributedSearch extends BaseDistributedSearchTestCase {\n   \n   private void assertIsExactHitCount(Object... requestParams) throws Exception {\n     QueryResponse response = query(requestParams);\n-    assertEquals(HitCountRelation.EQ, response.getResults().getHitCountRelation());\n+    assertNotNull(response.getResults().toString(), response.getResults().getHitCountExact());\n+    assertTrue(response.getResults().toString(), response.getResults().getHitCountExact());\n   }\n   \n   private void assertApproximatedHitCount(Object...requestParams) throws Exception {\n     handle.put(\"numFound\", SKIPVAL);\n     QueryResponse response = query(requestParams);\n-    assertEquals(HitCountRelation.GT_EQ, response.getResults().getHitCountRelation());\n+    assertNotNull(response.getResults().toString(), response.getResults().getHitCountExact());\n+    assertFalse(response.getResults().toString(), response.getResults().getHitCountExact());\n     handle.remove(\"numFound\", SKIPVAL);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MTI5NA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418691294", "bodyText": "We can move this commit out of the loop and just commit once.", "author": "anshumg", "createdAt": "2020-05-01T19:07:55Z", "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MTU3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r419791575", "bodyText": "Actually, I wanted to have multiple segments. I could do something like \"sometimes()\", but since the number of docs is low, I didn't think it was needed to add any randomization or more complex logic.", "author": "tflobbe", "createdAt": "2020-05-04T23:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/request/TestFaceting.java b/solr/core/src/test/org/apache/solr/request/TestFaceting.java\nindex acd9231f6a6..7a0ca1062e6 100644\n--- a/solr/core/src/test/org/apache/solr/request/TestFaceting.java\n+++ b/solr/core/src/test/org/apache/solr/request/TestFaceting.java\n\n@@ -948,13 +947,13 @@ public class TestFaceting extends SolrTestCaseJ4 {\n     params.set(FacetParams.FACET_FIELD, \"title_ws\");\n     assertQ(req(params),\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n-        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@hitCountExact='true']\"\n         ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n     \n-    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise\n+    // It doesn't matter if we request minExactHits, when requesting facets, the numFound value is precise\n     assertQ(req(params, CommonParams.MIN_EXACT_HITS, \"2\", CommonParams.ROWS, \"2\"),\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n-        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@hitCountExact='true']\"\n         ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MTU2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418691562", "bodyText": "munExactHits -> numExactHits", "author": "anshumg", "createdAt": "2020-05-01T19:08:32Z", "path": "solr/core/src/test/org/apache/solr/request/TestFaceting.java", "diffHunk": "@@ -931,5 +934,28 @@ public void testListedTermCounts() throws Exception {\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[2][@name='Book2']\",\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[3][@name='Book3']\");\n   }\n+  \n+  @Test\n+  public void testFacetCountsWithMinExactHits() throws Exception {\n+    final int NUM_DOCS = 20;\n+    for (int i = 0; i < NUM_DOCS ; i++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"title_ws\", \"Book1\"));\n+      assertU(commit());\n+    }\n+    ModifiableSolrParams params = new ModifiableSolrParams();\n+    params.set(\"q\", \"title_ws:Book1\");\n+    params.set(FacetParams.FACET, \"true\");\n+    params.set(FacetParams.FACET_FIELD, \"title_ws\");\n+    assertQ(req(params),\n+        \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n+        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n+    \n+    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/request/TestFaceting.java b/solr/core/src/test/org/apache/solr/request/TestFaceting.java\nindex acd9231f6a6..7a0ca1062e6 100644\n--- a/solr/core/src/test/org/apache/solr/request/TestFaceting.java\n+++ b/solr/core/src/test/org/apache/solr/request/TestFaceting.java\n\n@@ -948,13 +947,13 @@ public class TestFaceting extends SolrTestCaseJ4 {\n     params.set(FacetParams.FACET_FIELD, \"title_ws\");\n     assertQ(req(params),\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n-        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@hitCountExact='true']\"\n         ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n     \n-    // It doesn't matter if we request munExactHits, when requesting facets, the numFound value is precise\n+    // It doesn't matter if we request minExactHits, when requesting facets, the numFound value is precise\n     assertQ(req(params, CommonParams.MIN_EXACT_HITS, \"2\", CommonParams.ROWS, \"2\"),\n         \"//lst[@name='facet_fields']/lst[@name='title_ws']/int[1][@name='Book1'][.='20']\"\n-        ,\"//*[@hitCountRelation='\" + HitCountRelation.EQ + \"']\"\n+        ,\"//*[@hitCountExact='true']\"\n         ,\"//*[@numFound='\" + NUM_DOCS + \"']\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MjM5OA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418692398", "bodyText": "We can move the commit out of the loop", "author": "anshumg", "createdAt": "2020-05-01T19:10:36Z", "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.search;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.search.TermQuery;\n+import org.apache.solr.SolrTestCaseJ4;\n+import org.apache.solr.common.HitCountRelation;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+\n+import java.io.IOException;\n+\n+public class SolrIndexSearcherTest extends SolrTestCaseJ4 {\n+  \n+  private final static int NUM_DOCS = 20;\n+\n+  @BeforeClass\n+  public static void setUpClass() throws Exception {\n+    initCore(\"solrconfig.xml\", \"schema.xml\");\n+    for (int i = 0 ; i < NUM_DOCS ; i ++) {\n+      assertU(adoc(\"id\", String.valueOf(i), \"field1_s\", \"foo\", \"field2_s\", String.valueOf(i % 2), \"field3_s\", String.valueOf(i)));\n+      assertU(commit());", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MTgwNw==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r419791807", "bodyText": "Same as above, wanted multiple segments", "author": "tflobbe", "createdAt": "2020-05-04T23:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY5MjM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "8b123f2501c8f4e390a889a4a798dce8608a1655", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java b/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\nindex 1557a229837..de5bf81c321 100644\n--- a/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\n+++ b/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\n\n@@ -18,8 +18,8 @@ package org.apache.solr.search;\n \n import org.apache.lucene.index.Term;\n import org.apache.lucene.search.TermQuery;\n+import org.apache.lucene.search.TotalHits;\n import org.apache.solr.SolrTestCaseJ4;\n-import org.apache.solr.common.HitCountRelation;\n import org.junit.Before;\n import org.junit.BeforeClass;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MzEwNA==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r418753104", "bodyText": "s/change/changed", "author": "anshumg", "createdAt": "2020-05-01T21:50:21Z", "path": "solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java", "diffHunk": "@@ -242,6 +243,7 @@ public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n   }\n \n   @Test\n+  @Ignore(\"This test compares binaries, which change due to SOLR-13289\")", "originalCommit": "4bb3447bf59fab33681ca5af7e758a0a575d59b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzYyMg==", "url": "https://github.com/apache/lucene-solr/pull/1456#discussion_r422397622", "bodyText": "I fixed this test.", "author": "tflobbe", "createdAt": "2020-05-08T22:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MzEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "81f88f425ba034bf3545131b0630bd68f5f8329b", "chunk": "diff --git a/solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java b/solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java\nindex 443baf5d2d0..7737f0c7fa6 100644\n--- a/solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java\n+++ b/solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java\n\n@@ -243,7 +242,6 @@ public class TestJavaBinCodec extends SolrTestCaseJ4 {\n   }\n \n   @Test\n-  @Ignore(\"This test compares binaries, which change due to SOLR-13289\")\n   public void testForwardCompat() throws IOException {\n     try (JavaBinCodec javabin = new JavaBinCodec(); ByteArrayOutputStream os = new ByteArrayOutputStream()) {\n \n"}}, {"oid": "8b123f2501c8f4e390a889a4a798dce8608a1655", "url": "https://github.com/apache/lucene-solr/commit/8b123f2501c8f4e390a889a4a798dce8608a1655", "message": "Add equality test for QueryResultKey", "committedDate": "2020-05-08T17:09:20Z", "type": "forcePushed"}, {"oid": "81f88f425ba034bf3545131b0630bd68f5f8329b", "url": "https://github.com/apache/lucene-solr/commit/81f88f425ba034bf3545131b0630bd68f5f8329b", "message": "WIP", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "0fbbb423a2ed80e807feb218d76c231901c4bf59", "url": "https://github.com/apache/lucene-solr/commit/0fbbb423a2ed80e807feb218d76c231901c4bf59", "message": "More WIP", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "62fd01ae55371cf0678ca54326aa271a20fff036", "url": "https://github.com/apache/lucene-solr/commit/62fd01ae55371cf0678ca54326aa271a20fff036", "message": "WIP", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "17f7aa2527d8118af21a1d3ec840d866a20a19ad", "url": "https://github.com/apache/lucene-solr/commit/17f7aa2527d8118af21a1d3ec840d866a20a19ad", "message": "Include new relation in SolrJ response", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "9f36f2f9ff4f6ead984bee418bfbbc7c2cf8e17a", "url": "https://github.com/apache/lucene-solr/commit/9f36f2f9ff4f6ead984bee418bfbbc7c2cf8e17a", "message": "Unignore test that now passes", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "9c773d7c1427de9ee2ff681dfe03f07c0e573b3c", "url": "https://github.com/apache/lucene-solr/commit/9c773d7c1427de9ee2ff681dfe03f07c0e573b3c", "message": "Default to counting all hits", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "19a7a9e0d0990fe4ada885a5d507ef149f615700", "url": "https://github.com/apache/lucene-solr/commit/19a7a9e0d0990fe4ada885a5d507ef149f615700", "message": "Add support and tests for distribution", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "f5f4935da8312bd063b203a8d6f77b9a00bb3569", "url": "https://github.com/apache/lucene-solr/commit/f5f4935da8312bd063b203a8d6f77b9a00bb3569", "message": "Refactor things a bit", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "a225853cddc224ef900df85762eb2b2f9fff9b36", "url": "https://github.com/apache/lucene-solr/commit/a225853cddc224ef900df85762eb2b2f9fff9b36", "message": "Fix BasicFunctionalityTest", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "aafc447ac5c962a0f41bc0ee37777e1f5a735d7b", "url": "https://github.com/apache/lucene-solr/commit/aafc447ac5c962a0f41bc0ee37777e1f5a735d7b", "message": "Minor improvements to tests and fix overflow bug", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "2beb768be9ccd0202c4193b3dbd6d290ffc702d7", "url": "https://github.com/apache/lucene-solr/commit/2beb768be9ccd0202c4193b3dbd6d290ffc702d7", "message": "Use correct key in shards.info for hit count relation", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "ab81e1335717223b1b60aab2359d44281c7fddaa", "url": "https://github.com/apache/lucene-solr/commit/ab81e1335717223b1b60aab2359d44281c7fddaa", "message": "Calculate score, even when minExactHits is provided", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "df6b1bf88dd9391a641d360e1f3879ad5ee1c48b", "url": "https://github.com/apache/lucene-solr/commit/df6b1bf88dd9391a641d360e1f3879ad5ee1c48b", "message": "Remove SolrDocumentList.isExactHitCount() method\n\nclients should use getter instead", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "1d3046a445502413d61fd91f25b3f54b25cdac29", "url": "https://github.com/apache/lucene-solr/commit/1d3046a445502413d61fd91f25b3f54b25cdac29", "message": "Rename HitCountRelation in SolrJ to match attribute in text response writers", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "a1eb9b3ad0d83971084801fbb5a303462efda9b8", "url": "https://github.com/apache/lucene-solr/commit/a1eb9b3ad0d83971084801fbb5a303462efda9b8", "message": "Add hitCountRelation to JSON output", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "fc39337506fcd20e99039c63e4f1ee882186a2d5", "url": "https://github.com/apache/lucene-solr/commit/fc39337506fcd20e99039c63e4f1ee882186a2d5", "message": "Include relation in all ResponseWriters", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "353e4e1407b660a4c6e5374f1b1685ab226bea5b", "url": "https://github.com/apache/lucene-solr/commit/353e4e1407b660a4c6e5374f1b1685ab226bea5b", "message": "Fix TestGroupingSearch", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "0e2c1aaf143fa7c84d3c4c6fdd767f4d6a46dadf", "url": "https://github.com/apache/lucene-solr/commit/0e2c1aaf143fa7c84d3c4c6fdd767f4d6a46dadf", "message": "Add test for facets\n\nCount is precise when requesting facets", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "40a0e89ee2593317aa5999d53d360a2a5065487e", "url": "https://github.com/apache/lucene-solr/commit/40a0e89ee2593317aa5999d53d360a2a5065487e", "message": "Fix TestJoin", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "d196cf05062542340e8baa9babac47069111894b", "url": "https://github.com/apache/lucene-solr/commit/d196cf05062542340e8baa9babac47069111894b", "message": "Minor improvements to tests", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "6ca1679701639406b842426e7d856f994b373293", "url": "https://github.com/apache/lucene-solr/commit/6ca1679701639406b842426e7d856f994b373293", "message": "Fix TestRealtimeGet", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "430898d77b7e55bcd72cf14162e7a76df4489fd4", "url": "https://github.com/apache/lucene-solr/commit/430898d77b7e55bcd72cf14162e7a76df4489fd4", "message": "Minor fixes", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "badd558d6951473480cc4c3dc4d062d9f181b20b", "url": "https://github.com/apache/lucene-solr/commit/badd558d6951473480cc4c3dc4d062d9f181b20b", "message": "Use shorter Enum values", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "1ea9adfec9da1ea3fea1c9405c7b1ff009685c1c", "url": "https://github.com/apache/lucene-solr/commit/1ea9adfec9da1ea3fea1c9405c7b1ff009685c1c", "message": "Make response a boolean", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "292261cbebc5777c1afdf1ad14c2cef95135253b", "url": "https://github.com/apache/lucene-solr/commit/292261cbebc5777c1afdf1ad14c2cef95135253b", "message": "Rename attribute", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "4cbc8ec149c0509c84e7902f85ccb99646c5e57c", "url": "https://github.com/apache/lucene-solr/commit/4cbc8ec149c0509c84e7902f85ccb99646c5e57c", "message": "Fix test", "committedDate": "2020-05-08T21:04:24Z", "type": "commit"}, {"oid": "d1a8cc6f325e9dafa5387e95d80c8f95421b2137", "url": "https://github.com/apache/lucene-solr/commit/d1a8cc6f325e9dafa5387e95d80c8f95421b2137", "message": "Add equality test for QueryResultKey", "committedDate": "2020-05-08T21:04:25Z", "type": "commit"}, {"oid": "0f07efd981027bf1f8c62e8d0dbb376209bfb64c", "url": "https://github.com/apache/lucene-solr/commit/0f07efd981027bf1f8c62e8d0dbb376209bfb64c", "message": "Minor changes", "committedDate": "2020-05-08T21:04:25Z", "type": "commit"}, {"oid": "6de5b96cd0a9d3b8469c46fadde20a80917853ca", "url": "https://github.com/apache/lucene-solr/commit/6de5b96cd0a9d3b8469c46fadde20a80917853ca", "message": "Rename hitCountExact->numFoundExact", "committedDate": "2020-05-08T21:04:25Z", "type": "commit"}, {"oid": "6082ab987b6d8e778386e69c2dc7a16b4b151bdd", "url": "https://github.com/apache/lucene-solr/commit/6082ab987b6d8e778386e69c2dc7a16b4b151bdd", "message": "Update binaries for testForwardCompat", "committedDate": "2020-05-08T21:04:25Z", "type": "commit"}, {"oid": "6082ab987b6d8e778386e69c2dc7a16b4b151bdd", "url": "https://github.com/apache/lucene-solr/commit/6082ab987b6d8e778386e69c2dc7a16b4b151bdd", "message": "Update binaries for testForwardCompat", "committedDate": "2020-05-08T21:04:25Z", "type": "forcePushed"}, {"oid": "4ab00a4f035d1a3ce18121d8d95a608520de5686", "url": "https://github.com/apache/lucene-solr/commit/4ab00a4f035d1a3ce18121d8d95a608520de5686", "message": "Add Changes entry", "committedDate": "2020-05-08T21:18:12Z", "type": "commit"}]}