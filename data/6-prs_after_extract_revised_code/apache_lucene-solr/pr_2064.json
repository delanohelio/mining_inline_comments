{"pr_number": 2064, "pr_title": "LUCENE-9600: Clean up package name conflicts between misc and core modules", "pr_createdAt": "2020-11-05T08:50:14Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2064", "timeline": [{"oid": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "url": "https://github.com/apache/lucene-solr/commit/354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "message": "LUCENE-9660: clean up split pacages in misc module", "committedDate": "2020-11-05T08:32:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg4ODExMQ==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517888111", "bodyText": "SegmentInfos.remove(int) isn't accessible from external packages. This method call can be switched to SegmentInfo.remove(SegmentCommitInfo); that is already opened to public.", "author": "mocobeta", "createdAt": "2020-11-05T08:58:48Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/index/IndexSplitter.java", "diffHunk": "@@ -123,8 +118,8 @@ private SegmentCommitInfo getInfo(String name) {\n \n   public void remove(String[] segs) throws IOException {\n     for (String n : segs) {\n-      int idx = getIdx(n);\n-      infos.remove(idx);\n+      SegmentCommitInfo info = getInfo(n);\n+      infos.remove(info);", "originalCommit": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5MTU3NA==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517891574", "bodyText": "BaseCompositeReader.getSequentialSubReaders() is a protected method so it cannot be directly called from here. A wrapper method is needed to move this class to o.a.l.misc.index from o.a.l.index.", "author": "mocobeta", "createdAt": "2020-11-05T09:04:25Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/index/MultiPassIndexSplitter.java", "diffHunk": "@@ -101,7 +111,7 @@ public void split(IndexReader in, Directory[] outputs, boolean seq) throws IOExc\n           .setOpenMode(OpenMode.CREATE));\n       System.err.println(\"Writing part \" + (i + 1) + \" ...\");\n       // pass the subreaders directly, as our wrapper's numDocs/hasDeletetions are not up-to-date\n-      final List<? extends FakeDeleteLeafIndexReader> sr = input.getSequentialSubReaders();\n+      final List<? extends FakeDeleteLeafIndexReader> sr = input.getSequentialSubReadersWrapper();", "originalCommit": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NTI1OA==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517895258", "bodyText": "IndexWriter.getReader() is package-private so it cannot be accessed from here. It would be better that we omit this assertion (it seems these lines are not the main part of the test anyway), instead of opening IW.getReader() up to public?", "author": "mocobeta", "createdAt": "2020-11-05T09:10:25Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/index/TestIndexSplitter.java", "diffHunk": "@@ -60,9 +67,9 @@ public void test() throws Exception {\n       iw.addDocument(doc);\n     }\n     iw.commit();\n-    DirectoryReader iwReader = iw.getReader();\n-    assertEquals(3, iwReader.leaves().size());\n-    iwReader.close();\n+    //DirectoryReader iwReader = iw.getReader();\n+    //assertEquals(3, iwReader.leaves().size());\n+    //iwReader.close();", "originalCommit": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5ODMyMA==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517898320", "bodyText": "Or maybe switch to DirectoryReader.open(iw...) and keep the assertion? This is public.", "author": "dweiss", "createdAt": "2020-11-05T09:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NTI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkxMDQyMA==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517910420", "bodyText": "Thanks! DirectoryReader.open(iw) and IW.getReader() are actually equivalent. 4858a5d", "author": "mocobeta", "createdAt": "2020-11-05T09:33:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NTI1OA=="}], "type": "inlineReview", "revised_code": {"commit": "4858a5d8347c72364c4a6572345a3fc52f43cc77", "chunk": "diff --git a/lucene/misc/src/test/org/apache/lucene/misc/index/TestIndexSplitter.java b/lucene/misc/src/test/org/apache/lucene/misc/index/TestIndexSplitter.java\nindex ed8dd3352dc..448012ca356 100644\n--- a/lucene/misc/src/test/org/apache/lucene/misc/index/TestIndexSplitter.java\n+++ b/lucene/misc/src/test/org/apache/lucene/misc/index/TestIndexSplitter.java\n\n@@ -67,9 +67,9 @@ public class TestIndexSplitter extends LuceneTestCase {\n       iw.addDocument(doc);\n     }\n     iw.commit();\n-    //DirectoryReader iwReader = iw.getReader();\n-    //assertEquals(3, iwReader.leaves().size());\n-    //iwReader.close();\n+    DirectoryReader iwReader = DirectoryReader.open(iw);\n+    assertEquals(3, iwReader.leaves().size());\n+    iwReader.close();\n     iw.close();\n     // we should have 2 segments now\n     IndexSplitter is = new IndexSplitter(dir);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517897262", "bodyText": "Looks like this should be publicly accessible for tests in any modules?", "author": "mocobeta", "createdAt": "2020-11-05T09:13:28Z", "path": "lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java", "diffHunk": "@@ -95,7 +95,7 @@ private static BytesRef toBytesRef(IntsRef ir) {\n     return br;\n   }\n \n-  static String getRandomString(Random random) {\n+  public static String getRandomString(Random random) {", "originalCommit": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5OTEwNw==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517899107", "bodyText": "Don't know what it actually does but randomizedtesting has a number of utility methods for random strings:\nhttp://labs.carrotsearch.com/download/randomizedtesting/2.0.0/api/randomizedtesting-runner/com/carrotsearch/randomizedtesting/generators/RandomStrings.html", "author": "dweiss", "createdAt": "2020-11-05T09:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyOTM1Nw==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517929357", "bodyText": "Yes, they look similar except for that Lucene's TestUtil selects different codepoint range (blockStarts and blockEnds) to generate random String instance  each time. I think both of them are okay for the test, what do you think?\no.a.l.util.TestUtil.randomRealisticUnicodeString()\n  /** Returns random string of length between min and max codepoints, all codepoints within the same unicode block. */\n  public static String randomRealisticUnicodeString(Random r, int minLength, int maxLength) {\n    final int end = nextInt(r, minLength, maxLength);\n    final int block = r.nextInt(blockStarts.length);\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < end; i++)\n      sb.appendCodePoint(nextInt(r, blockStarts[block], blockEnds[block]));\n    return sb.toString();\n  }\n\ncom.carrotsearch.randomizedtesting.generators.UnicodeGenerator.ofCodePointsLength()\n  public String ofCodePointsLength(Random r, int minCodePoints, int maxCodePoints) {\n    int length = RandomNumbers.randomIntBetween(r, minCodePoints, maxCodePoints);\n    int [] chars = new int [length];\n    for (int i = 0; i < chars.length; i++) {\n      int v = RandomNumbers.randomIntBetween(r, 0, CODEPOINT_RANGE);\n      if (v >= Character.MIN_SURROGATE)\n        v += SURROGATE_RANGE;\n      chars[i] = v;\n    }\n    return new String(chars, 0, chars.length);\n  }", "author": "mocobeta", "createdAt": "2020-11-05T10:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkzMjU5OQ==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517932599", "bodyText": "Not sure whether the difference matters. It shouldn't at first glance.", "author": "dweiss", "createdAt": "2020-11-05T10:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk0MTc5NQ==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517941795", "bodyText": "If there's no good reason to change, I'd like to keep the original test code here and make the test utility method publicly accessible (the change shouldn't hurt anything, to me) :)", "author": "mocobeta", "createdAt": "2020-11-05T10:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkzMTI1MQ==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r518931251", "bodyText": "If you're going to make this method public... I think even a tiny bit of documentation would be helpful.  Like maybe recommend callers consider the methods Dawid mentioned in RandomizedTesting instead.  After all, we're only making this public for some test in misc to call it.  We aren't signaling to all of Lucene, Solr, and any of the plugin writers, that we've got some awesome random string generating that everyone should use :-)\nFWIW I prefer that we maintain less code and use whatever's in RandomizedTesting when possible, but I won't stand in the way of your judgement here.", "author": "dsmiley", "createdAt": "2020-11-06T18:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM1NTI1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r519355253", "bodyText": "I'd use RandomStrings instead of making the FSTTester method public and adding extra documentation for it (I prefer only one recommended way to implement one thing), if we can safely switch them.\nI checked the FSTTester.getRandomString() method if we can safely replace it with RandomStrings.randomUnicodeOfCodepointLength(). It seems there is a small, but intentional difference (it generates strings that consists of characters within the range of codepoint 97('a') to 102('f'), with a 50% possibility)... not fully sure the details, but it somewhat serves for testing FST?\nhttps://github.com/apache/lucene-solr/blob/master/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java#L98-L122", "author": "mocobeta", "createdAt": "2020-11-08T11:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM2MzY0OA==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r519363648", "bodyText": "RandomStrings might be okay here but I'm not so confident about switching to it because of the difference... i added a note to the method's javadoc. a0d97b5", "author": "mocobeta", "createdAt": "2020-11-08T11:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a0d97b595f8d01f81db6d1f068aa8ae11d47887e", "chunk": "diff --git a/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java b/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java\nindex 437b9b2a6da..b6a320aa704 100644\n--- a/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java\n+++ b/lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java\n\n@@ -95,6 +95,10 @@ public class FSTTester<T> {\n     return br;\n   }\n \n+  /**\n+   * [LUCENE-9600] This was made public because a misc module test depends on it.\n+   * It is not recommended for generic usecase; consider {@link com.carrotsearch.randomizedtesting.generators.RandomStrings} to generate random strings.\n+   */\n   public static String getRandomString(Random random) {\n     final String term;\n     if (random.nextBoolean()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzM1MA==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517897350", "bodyText": "Looks like this should be publicly accessible for tests in any modules?", "author": "mocobeta", "createdAt": "2020-11-05T09:13:36Z", "path": "lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester.java", "diffHunk": "@@ -121,7 +121,7 @@ static String simpleRandomString(Random r) {\n     return new String(buffer, 0, end);\n   }\n \n-  static IntsRef toIntsRef(String s, int inputMode) {\n+  public static IntsRef toIntsRef(String s, int inputMode) {", "originalCommit": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5NzUzMQ==", "url": "https://github.com/apache/lucene-solr/pull/2064#discussion_r517897531", "bodyText": "Looks like this should be publicly accessible for tests in any modules?", "author": "mocobeta", "createdAt": "2020-11-05T09:13:53Z", "path": "lucene/test-framework/src/java/org/apache/lucene/index/DocHelper.java", "diffHunk": "@@ -35,7 +35,8 @@\n import org.apache.lucene.search.similarities.Similarity;\n import org.apache.lucene.store.Directory;\n \n-class DocHelper {\n+/** Helper functions for tests that handles documents */\n+public class DocHelper {", "originalCommit": "354dccbcbbcc79ac981c5fe7c506d5c5e629c7bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "4858a5d8347c72364c4a6572345a3fc52f43cc77", "url": "https://github.com/apache/lucene-solr/commit/4858a5d8347c72364c4a6572345a3fc52f43cc77", "message": "use DirectoryReader.open(iw) instead of IndexWriter.getReader()", "committedDate": "2020-11-05T09:30:33Z", "type": "commit"}, {"oid": "381a3727894febf8a4caec973d4b435cc02a5380", "url": "https://github.com/apache/lucene-solr/commit/381a3727894febf8a4caec973d4b435cc02a5380", "message": "move InetAddressPoint and InetAddressRange to core.", "committedDate": "2020-11-05T23:49:59Z", "type": "commit"}, {"oid": "a0d97b595f8d01f81db6d1f068aa8ae11d47887e", "url": "https://github.com/apache/lucene-solr/commit/a0d97b595f8d01f81db6d1f068aa8ae11d47887e", "message": "add note to FSTTester.getRandomString()", "committedDate": "2020-11-08T11:30:59Z", "type": "commit"}, {"oid": "3f8d50c75bbd1588a9ad227360ebea571cf0a4a5", "url": "https://github.com/apache/lucene-solr/commit/3f8d50c75bbd1588a9ad227360ebea571cf0a4a5", "message": "Merge branch 'master' into jira/LUCENE-9600", "committedDate": "2020-11-10T12:59:15Z", "type": "commit"}, {"oid": "2c6fa54f1b282706f27ae27575824bd43ad003c7", "url": "https://github.com/apache/lucene-solr/commit/2c6fa54f1b282706f27ae27575824bd43ad003c7", "message": "add CHANGES", "committedDate": "2020-11-10T13:00:37Z", "type": "commit"}, {"oid": "2b8a47b4efcd3ca3e8ca4e871d90110794e02580", "url": "https://github.com/apache/lucene-solr/commit/2b8a47b4efcd3ca3e8ca4e871d90110794e02580", "message": "add MIGRATE entry", "committedDate": "2020-11-10T13:05:01Z", "type": "commit"}]}