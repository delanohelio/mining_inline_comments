{"pr_number": 1563, "pr_title": "LUCENE-9394: fix and suppress warnings", "pr_createdAt": "2020-06-10T11:27:08Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1563", "timeline": [{"oid": "49be796e8fe086226d16eb5e5bdf3314a8266a27", "url": "https://github.com/apache/lucene-solr/commit/49be796e8fe086226d16eb5e5bdf3314a8266a27", "message": "LUCENE-9394: fix and suppress warnings", "committedDate": "2020-06-10T11:25:35Z", "type": "commit"}, {"oid": "8d03bc1c6fe04264d4274d6204f7843c09f98c32", "url": "https://github.com/apache/lucene-solr/commit/8d03bc1c6fe04264d4274d6204f7843c09f98c32", "message": "a few cosmetic issues", "committedDate": "2020-06-10T11:36:42Z", "type": "commit"}, {"oid": "b55c52028ecb5867a9d0cfc3880682257a66c271", "url": "https://github.com/apache/lucene-solr/commit/b55c52028ecb5867a9d0cfc3880682257a66c271", "message": "Change type of ValuesSource context from raw Map to Map<Object, Object>", "committedDate": "2020-06-10T14:54:23Z", "type": "commit"}, {"oid": "87317c83c6047828976d09268465b1b190855557", "url": "https://github.com/apache/lucene-solr/commit/87317c83c6047828976d09268465b1b190855557", "message": "A few more raw Map -> Map<Object, Object>", "committedDate": "2020-06-10T16:36:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NTczMA==", "url": "https://github.com/apache/lucene-solr/pull/1563#discussion_r438975730", "bodyText": "Add a comment that we're explicitly avoiding the Integer cache, and an assertNotSame(val, val1)?", "author": "madrob", "createdAt": "2020-06-11T18:04:24Z", "path": "lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java", "diffHunk": "@@ -61,15 +61,17 @@ public void testNonZeroOffset() {\n   public void testObjectContains() {\n     CharArraySet set = new CharArraySet(10, true);\n     Integer val = Integer.valueOf(1);\n+    @SuppressWarnings(\"deprecation\")\n+    Integer val1 = new Integer(1);", "originalCommit": "87317c83c6047828976d09268465b1b190855557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "109075e280da8f02f5af0182e4684393c1b6a55f", "chunk": "diff --git a/lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java b/lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java\nindex 615ac4b15fa..1a32a800bbb 100644\n--- a/lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java\n+++ b/lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet.java\n\n@@ -63,6 +63,8 @@ public class TestCharArraySet extends LuceneTestCase {\n     Integer val = Integer.valueOf(1);\n     @SuppressWarnings(\"deprecation\")\n     Integer val1 = new Integer(1);\n+    // Verify explicitly the case of different Integer instances\n+    assertNotSame(val, val1);\n     set.add(val);\n     assertTrue(set.contains(val));\n     assertTrue(set.contains(val1)); // another integer\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MjkyNw==", "url": "https://github.com/apache/lucene-solr/pull/1563#discussion_r438982927", "bodyText": "wildcard import", "author": "madrob", "createdAt": "2020-06-11T18:17:43Z", "path": "lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest.java", "diffHunk": "@@ -33,11 +33,7 @@\n import org.locationtech.spatial4j.context.SpatialContext;\n import org.locationtech.spatial4j.context.SpatialContextFactory;\n import org.locationtech.spatial4j.distance.DistanceUtils;\n-import org.locationtech.spatial4j.shape.Circle;\n-import org.locationtech.spatial4j.shape.Point;\n-import org.locationtech.spatial4j.shape.Rectangle;\n-import org.locationtech.spatial4j.shape.Shape;\n-import org.locationtech.spatial4j.shape.SpatialRelation;\n+import org.locationtech.spatial4j.shape.*;", "originalCommit": "87317c83c6047828976d09268465b1b190855557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "109075e280da8f02f5af0182e4684393c1b6a55f", "chunk": "diff --git a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest.java b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest.java\nindex 5f157c97f03..357a48774ca 100644\n--- a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest.java\n+++ b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest.java\n\n@@ -33,7 +33,12 @@ import org.junit.Test;\n import org.locationtech.spatial4j.context.SpatialContext;\n import org.locationtech.spatial4j.context.SpatialContextFactory;\n import org.locationtech.spatial4j.distance.DistanceUtils;\n-import org.locationtech.spatial4j.shape.*;\n+import org.locationtech.spatial4j.shape.Circle;\n+import org.locationtech.spatial4j.shape.Point;\n+import org.locationtech.spatial4j.shape.Rectangle;\n+import org.locationtech.spatial4j.shape.Shape;\n+import org.locationtech.spatial4j.shape.ShapeFactory;\n+import org.locationtech.spatial4j.shape.SpatialRelation;\n import org.locationtech.spatial4j.shape.impl.RectangleImpl;\n \n import static com.carrotsearch.randomizedtesting.RandomizedTest.atMost;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4NDA4NQ==", "url": "https://github.com/apache/lucene-solr/pull/1563#discussion_r438984085", "bodyText": "There appear to be more unused methods in this class, why did we keep them but not these?", "author": "madrob", "createdAt": "2020-06-11T18:19:58Z", "path": "lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase.java", "diffHunk": "@@ -183,106 +179,4 @@ private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Sha\n     }\n   }\n \n-  protected void assertEqualsRatio(String msg, double expected, double actual) {", "originalCommit": "87317c83c6047828976d09268465b1b190855557", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "109075e280da8f02f5af0182e4684393c1b6a55f", "chunk": "diff --git a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase.java b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase.java\nindex 74204cc95c8..eb3563bad1f 100644\n--- a/lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase.java\n+++ b/lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/RandomizedShapeTestCase.java\n\n@@ -67,116 +48,8 @@ public abstract class RandomizedShapeTestCase extends LuceneTestCase {\n     }\n   }\n \n-  //These few norm methods normalize the arguments for creating a shape to\n-  // account for the dateline. Some tests loop past the dateline or have offsets\n-  // that go past it and it's easier to have them coded that way and correct for\n-  // it here.  These norm methods should be used when needed, not frivolously.\n-\n-  protected double normX(double x) {\n-    return ctx.isGeo() ? DistanceUtils.normLonDEG(x) : x;\n-  }\n-\n-  protected double normY(double y) {\n-    return ctx.isGeo() ? DistanceUtils.normLatDEG(y) : y;\n-  }\n-\n-  protected Rectangle makeNormRect(double minX, double maxX, double minY, double maxY) {\n-    if (ctx.isGeo()) {\n-      if (Math.abs(maxX - minX) >= 360) {\n-        minX = -180;\n-        maxX = 180;\n-      } else {\n-        minX = DistanceUtils.normLonDEG(minX);\n-        maxX = DistanceUtils.normLonDEG(maxX);\n-      }\n-\n-    } else {\n-      if (maxX < minX) {\n-        double t = minX;\n-        minX = maxX;\n-        maxX = t;\n-      }\n-      minX = boundX(minX, ctx.getWorldBounds());\n-      maxX = boundX(maxX, ctx.getWorldBounds());\n-    }\n-    if (maxY < minY) {\n-      double t = minY;\n-      minY = maxY;\n-      maxY = t;\n-    }\n-    minY = boundY(minY, ctx.getWorldBounds());\n-    maxY = boundY(maxY, ctx.getWorldBounds());\n-    return ctx.getShapeFactory().rect(minX, maxX, minY, maxY);\n-  }\n-\n   public static double divisible(double v, double divisible) {\n     return (int) (Math.round(v / divisible) * divisible);\n   }\n \n-  protected double divisible(double v) {\n-    return divisible(v, DIVISIBLE);\n-  }\n-\n-  /** reset()'s p, and confines to world bounds. Might not be divisible if\n-   * the world bound isn't divisible too.\n-   */\n-  protected Point divisible(Point p) {\n-    Rectangle bounds = ctx.getWorldBounds();\n-    double newX = boundX( divisible(p.getX()), bounds );\n-    double newY = boundY( divisible(p.getY()), bounds );\n-    p.reset(newX, newY);\n-    return p;\n-  }\n-\n-  static double boundX(double i, Rectangle bounds) {\n-    return bound(i, bounds.getMinX(), bounds.getMaxX());\n-  }\n-\n-  static double boundY(double i, Rectangle bounds) {\n-    return bound(i, bounds.getMinY(), bounds.getMaxY());\n-  }\n-\n-  static double bound(double i, double min, double max) {\n-    if (i < min) return min;\n-    if (i > max) return max;\n-    return i;\n-  }\n-\n-  protected void assertRelation(SpatialRelation expected, Shape a, Shape b) {\n-    assertRelation(null, expected, a, b);\n-  }\n-\n-  protected void assertRelation(String msg, SpatialRelation expected, Shape a, Shape b) {\n-    _assertIntersect(msg, expected, a, b);\n-    //check flipped a & b w/ transpose(), while we're at it\n-    _assertIntersect(msg, expected.transpose(), b, a);\n-  }\n-\n-  private void _assertIntersect(String msg, SpatialRelation expected, Shape a, Shape b) {\n-    SpatialRelation sect = a.relate(b);\n-    if (sect == expected)\n-      return;\n-    msg = ((msg == null) ? \"\" : msg+\"\\r\") + a +\" intersect \"+b;\n-    if (expected == WITHIN || expected == CONTAINS) {\n-      if (a.getClass().equals(b.getClass())) // they are the same shape type\n-        assertEquals(msg,a,b);\n-      else {\n-        //they are effectively points or lines that are the same location\n-        assertTrue(msg,!a.hasArea());\n-        assertTrue(msg,!b.hasArea());\n-\n-        Rectangle aBBox = a.getBoundingBox();\n-        Rectangle bBBox = b.getBoundingBox();\n-        if (aBBox.getHeight() == 0 && bBBox.getHeight() == 0\n-            && (aBBox.getMaxY() == 90 && bBBox.getMaxY() == 90\n-            || aBBox.getMinY() == -90 && bBBox.getMinY() == -90))\n-          ;//== a point at the pole\n-        else\n-          assertEquals(msg, aBBox, bBBox);\n-      }\n-    } else {\n-      assertEquals(msg,expected,sect);//always fails\n-    }\n-  }\n-\n }\n"}}, {"oid": "109075e280da8f02f5af0182e4684393c1b6a55f", "url": "https://github.com/apache/lucene-solr/commit/109075e280da8f02f5af0182e4684393c1b6a55f", "message": "Address PR comments", "committedDate": "2020-06-11T19:31:22Z", "type": "commit"}]}