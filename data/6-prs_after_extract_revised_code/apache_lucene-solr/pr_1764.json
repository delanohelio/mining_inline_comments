{"pr_number": 1764, "pr_title": "Ensure we only rollback IW once", "pr_createdAt": "2020-08-19T18:35:16Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1764", "timeline": [{"oid": "1a12e1f7f64a717360424e49bc3382d69fa08d8b", "url": "https://github.com/apache/lucene-solr/commit/1a12e1f7f64a717360424e49bc3382d69fa08d8b", "message": "Ensure we only rollback IW once\n\nToday we might rollback IW more than once if we hit an exception during\nthe rollback code when we shutdown. This change moves the rollback code outside\nof the try block to ensure we always roll back but never roll back twice.", "committedDate": "2020-08-19T07:55:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA==", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473254890", "bodyText": "why x ;)", "author": "dnhatn", "createdAt": "2020-08-19T19:01:52Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java", "diffHunk": "@@ -2023,4 +2023,44 @@ public void eval(MockDirectoryWrapper dir) throws IOException {\n \n     dir.close();\n   }\n+\n+\n+  public void testOnlyRollbackOnceOnException() throws IOException {\n+    AtomicBoolean once = new AtomicBoolean(false);\n+    InfoStream stream = new InfoStream() {\n+      @Override\n+      public void message(String component, String message) {\n+        if (\"TP\".equals(component) && \"rollback before checkpoint\".equals(message)) {\n+          if (once.compareAndSet(false, true)) {\n+            throw new RuntimeException(\"boom\");\n+          } else {\n+            throw new AssertionError(\"has been rolled back twice\");\n+          }\n+\n+        }\n+      }\n+\n+      @Override\n+      public boolean isEnabled(String component) {\n+        return \"TP\".equals(component);\n+      }\n+\n+      @Override\n+      public void close() {\n+      }\n+    };\n+    try (Directory dir = newDirectory()) {\n+      try (IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig().setInfoStream(stream)){\n+        @Override\n+        protected boolean isEnableTestPoints() {\n+          return true;\n+        }\n+      }) {\n+      }\n+    } catch (RuntimeException x) {", "originalCommit": "1a12e1f7f64a717360424e49bc3382d69fa08d8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY1NDA4Mg==", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473654082", "bodyText": "yeah why x.... :D", "author": "s1monw", "createdAt": "2020-08-20T06:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY3NTc5OA==", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473675798", "bodyText": "I think I have to veto this. I liked x better.", "author": "dweiss", "createdAt": "2020-08-20T07:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4MTIxNQ==", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473681215", "bodyText": "let the bikeshedding begin \ud83d\udc6f I call a vote...", "author": "s1monw", "createdAt": "2020-08-20T07:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY4MzQ3OQ==", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r473683479", "bodyText": "In the spirit peaceful atmosphere: let's call it e + x = \"ex\"...", "author": "dweiss", "createdAt": "2020-08-20T07:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4NTA5OQ==", "url": "https://github.com/apache/lucene-solr/pull/1764#discussion_r474285099", "bodyText": "I'm really happy there were no votes for runtimeException (IDE generated code fancult vote)", "author": "msokolov", "createdAt": "2020-08-20T21:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NDg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "9cf6f4f51269d7c0f37ee4fc7883a80e08ab35a8", "chunk": "diff --git a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java\nindex 4743c320a46..2594f2f6d9f 100644\n--- a/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java\n+++ b/lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java\n\n@@ -2057,10 +2057,10 @@ public class TestIndexWriterExceptions extends LuceneTestCase {\n         }\n       }) {\n       }\n-    } catch (RuntimeException x) {\n-      assertEquals(\"boom\", x.getMessage());\n-      assertEquals(\"has suppressed exceptions: \" + Arrays.toString(x.getSuppressed()), 0, x.getSuppressed().length);\n-      assertNull(x.getCause());\n+    } catch (RuntimeException e) {\n+      assertEquals(\"boom\", e.getMessage());\n+      assertEquals(\"has suppressed exceptions: \" + Arrays.toString(e.getSuppressed()), 0, e.getSuppressed().length);\n+      assertNull(e.getCause());\n     }\n   }\n }\n"}}, {"oid": "9cf6f4f51269d7c0f37ee4fc7883a80e08ab35a8", "url": "https://github.com/apache/lucene-solr/commit/9cf6f4f51269d7c0f37ee4fc7883a80e08ab35a8", "message": "why not e", "committedDate": "2020-08-20T06:39:27Z", "type": "commit"}]}