{"pr_number": 1517, "pr_title": "SOLR-13289: Use the final collector's scoreMode", "pr_createdAt": "2020-05-14T22:14:29Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1517", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMTA0NQ==", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425521045", "bodyText": "FYI today FunctionRangeQuery implements PostFilter but it soon won't: https://issues.apache.org/jira/browse/SOLR-14164", "author": "dsmiley", "createdAt": "2020-05-15T01:45:35Z", "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -189,12 +206,95 @@ public void testMinExactHitsWithMaxScoreRequested() throws IOException {\n       cmd.setMinExactHits(2);\n       cmd.setFlags(SolrIndexSearcher.GET_SCORES);\n       cmd.setQuery(new TermQuery(new Term(\"field1_s\", \"foo\")));\n-      searcher.search(new QueryResult(), cmd);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n       assertMatchesGraterThan(NUM_DOCS, qr);\n       assertNotEquals(Float.NaN, qr.getDocList().maxScore());\n       return null;\n     });\n   }\n+  \n+  public void testMinExactWithFilters() throws Exception {\n+    \n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesGraterThan(NUM_DOCS, qr);\n+      return null;\n+    });\n+    \n+    \n+    h.getCore().withSearcher(searcher -> {\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));\n+      cmd.setFilterList(filterQuery);\n+      filterQuery.setCache(false);\n+      filterQuery.setCost(0);\n+      assertNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesEqual(1, qr);\n+      return null;\n+    });\n+  }\n+  \n+  public void testMinExactWithPostFilters() throws Exception {\n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      QueryResult qr = new QueryResult();\n+      searcher.search(qr, cmd);\n+      assertMatchesGraterThan(NUM_DOCS, qr);\n+      return null;\n+    });\n+    \n+    \n+    h.getCore().withSearcher(searcher -> {\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n+      cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n+      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));", "originalCommit": "351c97f21542d81de6996a748c8cae779f6ca662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1Nzk0Mw==", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425557943", "bodyText": "I didn't know about that Jira. I can look at having a Mock PostFilter here instead", "author": "tflobbe", "createdAt": "2020-05-15T04:21:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMTA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "288f5d2407c060fad662307bb20e17fff925fc58", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java b/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\nindex cd75dde5d99..00f8545ea86 100644\n--- a/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\n+++ b/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\n\n@@ -236,10 +238,8 @@ public class SolrIndexSearcherTest extends SolrTestCaseJ4 {\n       cmd.setLen(1);\n       cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n       cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n-      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));\n+      Query filterQuery = new TermQuery(new Term(\"field4_t\", \"19\"));\n       cmd.setFilterList(filterQuery);\n-      filterQuery.setCache(false);\n-      filterQuery.setCost(0);\n       assertNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyNTY0MQ==", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425525641", "bodyText": "Curious; why are you writing tests with this low-level way vs testMinExactHitsDisabledByCollapse which I wrote in a more common higher level style that is more succinct?  Is it only for this NO_CHECK_QCACHE distinction?  Can that be done simply by disabling the cache?  Not a big deal but just want to know your point of view.", "author": "dsmiley", "createdAt": "2020-05-15T02:04:15Z", "path": "solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java", "diffHunk": "@@ -189,12 +206,95 @@ public void testMinExactHitsWithMaxScoreRequested() throws IOException {\n       cmd.setMinExactHits(2);\n       cmd.setFlags(SolrIndexSearcher.GET_SCORES);\n       cmd.setQuery(new TermQuery(new Term(\"field1_s\", \"foo\")));\n-      searcher.search(new QueryResult(), cmd);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n       assertMatchesGraterThan(NUM_DOCS, qr);\n       assertNotEquals(Float.NaN, qr.getDocList().maxScore());\n       return null;\n     });\n   }\n+  \n+  public void testMinExactWithFilters() throws Exception {\n+    \n+    h.getCore().withSearcher(searcher -> {\n+      //Sanity Check - No Filter\n+      QueryCommand cmd = new QueryCommand();\n+      cmd.setMinExactHits(1);\n+      cmd.setLen(1);\n+      cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);", "originalCommit": "351c97f21542d81de6996a748c8cae779f6ca662", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU1Nzc0MQ==", "url": "https://github.com/apache/lucene-solr/pull/1517#discussion_r425557741", "bodyText": "just trying to make the test cover specifically what I was working on. It can definitely be done with a higher level test or integration test.", "author": "tflobbe", "createdAt": "2020-05-15T04:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyNTY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "288f5d2407c060fad662307bb20e17fff925fc58", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java b/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\nindex cd75dde5d99..00f8545ea86 100644\n--- a/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\n+++ b/solr/core/src/test/org/apache/solr/search/SolrIndexSearcherTest.java\n\n@@ -236,10 +238,8 @@ public class SolrIndexSearcherTest extends SolrTestCaseJ4 {\n       cmd.setLen(1);\n       cmd.setFlags(SolrIndexSearcher.NO_CHECK_QCACHE | SolrIndexSearcher.NO_SET_QCACHE);\n       cmd.setQuery(new TermQuery(new Term(\"field4_t\", \"0\")));\n-      FunctionRangeQuery filterQuery = new FunctionRangeQuery(new ValueSourceRangeFilter(new IntFieldSource(\"field3_i_dvo\"), \"19\", \"19\", true, true));\n+      Query filterQuery = new TermQuery(new Term(\"field4_t\", \"19\"));\n       cmd.setFilterList(filterQuery);\n-      filterQuery.setCache(false);\n-      filterQuery.setCost(0);\n       assertNull(searcher.getProcessedFilter(null, cmd.getFilterList()).postFilter);\n       QueryResult qr = new QueryResult();\n       searcher.search(qr, cmd);\n"}}, {"oid": "9a87fbe3b61cb523470be3fee075972655c6d633", "url": "https://github.com/apache/lucene-solr/commit/9a87fbe3b61cb523470be3fee075972655c6d633", "message": "Use the final collector's scoreMode", "committedDate": "2020-05-21T21:07:23Z", "type": "commit"}, {"oid": "288f5d2407c060fad662307bb20e17fff925fc58", "url": "https://github.com/apache/lucene-solr/commit/288f5d2407c060fad662307bb20e17fff925fc58", "message": "Don't use FunctionRangeQuery", "committedDate": "2020-05-21T21:07:23Z", "type": "commit"}, {"oid": "dd01dce44995e9d99da7a96707572f8e02190c55", "url": "https://github.com/apache/lucene-solr/commit/dd01dce44995e9d99da7a96707572f8e02190c55", "message": "Minor refactor to the test", "committedDate": "2020-05-21T22:31:20Z", "type": "commit"}, {"oid": "03c1a9bd0a4ba32715659c827031652766227761", "url": "https://github.com/apache/lucene-solr/commit/03c1a9bd0a4ba32715659c827031652766227761", "message": "Update CHANGES file", "committedDate": "2020-05-21T22:32:18Z", "type": "commit"}, {"oid": "03c1a9bd0a4ba32715659c827031652766227761", "url": "https://github.com/apache/lucene-solr/commit/03c1a9bd0a4ba32715659c827031652766227761", "message": "Update CHANGES file", "committedDate": "2020-05-21T22:32:18Z", "type": "forcePushed"}]}