{"pr_number": 1561, "pr_title": "SOLR-14546: OverseerTaskProcessor can process messages out of order", "pr_createdAt": "2020-06-10T01:34:01Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1561", "timeline": [{"oid": "0946eca60887308bbc2b186512659cc66c935d07", "url": "https://github.com/apache/lucene-solr/commit/0946eca60887308bbc2b186512659cc66c935d07", "message": "SOLR-14546: OverseerTaskProcessor can process messages out of order", "committedDate": "2020-06-10T01:21:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzM2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438907365", "bodyText": "This javadoc includes a sentence fragment, can we complete the thought while we're improving documentation in this area?", "author": "madrob", "createdAt": "2020-06-11T16:13:59Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerMessageHandler.java", "diffHunk": "@@ -50,7 +50,7 @@\n   /**Try to provide an exclusive lock for this particular task\n    * return null if locking is not possible. If locking is not necessary", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerMessageHandler.java b/solr/core/src/java/org/apache/solr/cloud/OverseerMessageHandler.java\nindex f7650358da3..f4601ae844e 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/OverseerMessageHandler.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/OverseerMessageHandler.java\n\n@@ -47,8 +47,9 @@ public interface OverseerMessageHandler {\n     void unlock();\n   }\n \n-  /**Try to provide an exclusive lock for this particular task\n-   * return null if locking is not possible. If locking is not necessary\n+  /**\n+   * Grabs an exclusive lock for this particular task.\n+   * @return <code>null</code> if locking is not possible.\n    */\n   Lock lockTask(ZkNodeProps message, long batchSessionId);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzk3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438907975", "bodyText": "I don't understand what this comment means.", "author": "madrob", "createdAt": "2020-06-11T16:14:58Z", "path": "solr/core/src/java/org/apache/solr/cloud/LockTree.java", "diffHunk": "@@ -89,22 +98,29 @@ public Lock lock(CollectionParams.CollectionAction action, List<String> path) {\n       this.level = level;\n     }\n \n-    void markBusy(List<String> path, int depth) {\n-      if (path.size() == depth) {\n+    /**\n+     * Marks busy the SessionNode corresponding to lockLevel (node names coming from <code>path</code>).\n+     * @param path size is at least <code>lockLevel.getHeight()</code>, to capture which node should be marked busy", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/LockTree.java b/solr/core/src/java/org/apache/solr/cloud/LockTree.java\nindex ad7dc92824c..1ada7d7a221 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/LockTree.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/LockTree.java\n\n@@ -99,8 +93,10 @@ public class LockTree {\n     }\n \n     /**\n-     * Marks busy the SessionNode corresponding to lockLevel (node names coming from <code>path</code>).\n-     * @param path size is at least <code>lockLevel.getHeight()</code>, to capture which node should be marked busy\n+     * Marks busy the SessionNode corresponding to <code>lockLevel</code> (node names coming from <code>path</code>).\n+     * @param path contains at least <code>lockLevel.getHeight()</code> strings, capturing the names of the\n+     *             <code>SessionNode</code> being walked from the {@link Session#root} to the <code>SessionNode</code>\n+     *             that is to be marked busy.\n      * @param lockLevel the level of the node that should be marked busy.\n      */\n     void markBusy(LockLevel lockLevel, List<String> path) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMzY3MA==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438923670", "bodyText": "This reference to runningTasks isn't synchronized. Is that an issue?", "author": "madrob", "createdAt": "2020-06-11T16:40:19Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -95,16 +95,25 @@\n \n   private volatile Stats stats;\n \n-  // Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n-  // It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n-  // deleted from the work-queue as that is a batched operation.\n+  /**\n+   * Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n+   * It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n+   * deleted from the work-queue as that is a batched operation.\n+   */\n   final private Set<String> runningZKTasks;\n-  // This map may contain tasks which are read from work queue but could not\n-  // be executed because they are blocked or the execution queue is full\n-  // This is an optimization to ensure that we do not read the same tasks\n-  // again and again from ZK.\n+\n+  /**\n+   * This map may contain tasks which are read from work queue but could not\n+   * be executed because they are blocked or the execution queue is full\n+   * This is an optimization to ensure that we do not read the same tasks\n+   * again and again from ZK.\n+   */\n   final private Map<String, QueueEvent> blockedTasks = Collections.synchronizedMap(new LinkedHashMap<>());\n-  final private Predicate<String> excludedTasks = new Predicate<String>() {\n+\n+  /**\n+   * Predicate used to filter out tasks from the Zookeeper queue that should not be returned for processing.\n+   */\n+  final private Predicate<String> excludedTasks = new Predicate<>() {\n     @Override\n     public boolean test(String s) {\n       return runningTasks.contains(s) || blockedTasks.containsKey(s);", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NjU1Mg==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438976552", "bodyText": "Yes it is. Can likely change this one into a ConcurrentHashMap.newKeySet() as well.", "author": "murblanc", "createdAt": "2020-06-11T18:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyMzY3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTU0MA==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438925540", "bodyText": "Since there is so much synchronized access to this, should it be a ConcurrentHashMap.newKeySet();", "author": "madrob", "createdAt": "2020-06-11T16:43:32Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -95,16 +95,25 @@\n \n   private volatile Stats stats;\n \n-  // Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n-  // It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n-  // deleted from the work-queue as that is a batched operation.\n+  /**\n+   * Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n+   * It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n+   * deleted from the work-queue as that is a batched operation.\n+   */\n   final private Set<String> runningZKTasks;", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NDcxOQ==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438974719", "bodyText": "Yes, will change that.", "author": "murblanc", "createdAt": "2020-06-11T18:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTU0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTg3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438925877", "bodyText": "Similar here, can this be a ConcurrentHashMap instead of a synchronized map?", "author": "madrob", "createdAt": "2020-06-11T16:44:06Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -95,16 +95,25 @@\n \n   private volatile Stats stats;\n \n-  // Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n-  // It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n-  // deleted from the work-queue as that is a batched operation.\n+  /**\n+   * Set of tasks that have been picked up for processing but not cleaned up from zk work-queue.\n+   * It may contain tasks that have completed execution, have been entered into the completed/failed map in zk but not\n+   * deleted from the work-queue as that is a batched operation.\n+   */\n   final private Set<String> runningZKTasks;\n-  // This map may contain tasks which are read from work queue but could not\n-  // be executed because they are blocked or the execution queue is full\n-  // This is an optimization to ensure that we do not read the same tasks\n-  // again and again from ZK.\n+\n+  /**\n+   * This map may contain tasks which are read from work queue but could not\n+   * be executed because they are blocked or the execution queue is full\n+   * This is an optimization to ensure that we do not read the same tasks\n+   * again and again from ZK.\n+   */\n   final private Map<String, QueueEvent> blockedTasks = Collections.synchronizedMap(new LinkedHashMap<>());", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MDY4Ng==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438970686", "bodyText": "We'd need a concurrent linked hash map because we need iteration order == insert order...", "author": "murblanc", "createdAt": "2020-06-11T17:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwOTg4NQ==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r439009885", "bodyText": "We need a map for the predicate to check presence of an id (map keys also used for logs, but if it was the only use we could work around).", "author": "murblanc", "createdAt": "2020-06-11T19:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTg3Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTQxNg==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438955416", "bodyText": "This is the only usage of clear in the code, can we remove that method completely? Is this safe to not call clear?", "author": "madrob", "createdAt": "2020-06-11T17:36:44Z", "path": "solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java", "diffHunk": "@@ -867,26 +866,25 @@ public String getTaskKey(ZkNodeProps message) {\n   }\n \n \n+  // -1 is not a possible batchSessionId so -1 will force initialization of lockSession\n   private long sessionId = -1;\n   private LockTree.Session lockSession;\n \n   @Override\n-  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n-    if (lockSession == null || sessionId != taskBatch.getId()) {\n+  public Lock lockTask(ZkNodeProps message, long batchSessionId) {\n+    if (sessionId != batchSessionId) {\n       //this is always called in the same thread.\n       //Each batch is supposed to have a new taskBatch\n       //So if taskBatch changes we must create a new Session\n-      // also check if the running tasks are empty. If yes, clear lockTree\n-      // this will ensure that locks are not 'leaked'\n-      if(taskBatch.getRunningTasks() == 0) lockTree.clear();", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2Njk3NA==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438966974", "bodyText": "I hope (and think) it is... A lock can leak if an executor thread dies in a place where it shouldn't be dying (just before the try with the lock released in the finally.\nClearing all locks is not a solution IMO. If we do end up with lock leaks we should address those in a more elegant way (fix the leak).", "author": "murblanc", "createdAt": "2020-06-11T17:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTQxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java b/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java\nindex 320b49ed994..63366a81aef 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java\n\n@@ -870,6 +870,12 @@ public class OverseerCollectionMessageHandler implements OverseerMessageHandler,\n   private long sessionId = -1;\n   private LockTree.Session lockSession;\n \n+  /**\n+   * Grabs an exclusive lock for this particular task.\n+   * @return <code>null</code> if locking is not possible. When locking is not possible, it will remain\n+   * impossible for the passed value of <code>batchSessionId</code>. This is to guarantee tasks are executed\n+   * in queue order (and a later task is not run earlier than its turn just because it happens that a lock got released).\n+   */\n   @Override\n   public Lock lockTask(ZkNodeProps message, long batchSessionId) {\n     if (sessionId != batchSessionId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTk0Ng==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438955946", "bodyText": "I don't think it makes sense to reorder them here.", "author": "madrob", "createdAt": "2020-06-11T17:37:47Z", "path": "solr/solrj/src/java/org/apache/solr/common/params/CollectionParams.java", "diffHunk": "@@ -42,31 +42,30 @@\n \n \n   enum LockLevel {\n-    CLUSTER(0),\n-    COLLECTION(1),\n-    SHARD(2),\n-    REPLICA(3),\n-    NONE(10);\n-\n-    public final int level;\n-\n-    LockLevel(int i) {\n-      this.level = i;\n+    NONE(10, null),", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NzM4Nw==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438967387", "bodyText": "Compiler complained of forward reference when I didn't.", "author": "murblanc", "createdAt": "2020-06-11T17:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNzg5Mg==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r439007892", "bodyText": "Didn't consider that; yea, that's a good reason for reordering.", "author": "madrob", "createdAt": "2020-06-11T19:05:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NTk0Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjUxNg==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438956516", "bodyText": "Why do we no longer need to check against the upper limit of BLOCKED_TASKS?", "author": "madrob", "createdAt": "2020-06-11T17:38:45Z", "path": "solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java", "diffHunk": "@@ -253,20 +277,22 @@ public void run() {\n             continue;\n           }\n \n-          blockedTasks.clear(); // clear it now; may get refilled below.\n+          // clear the blocked tasks, may get refilled below. Given blockedTasks can only get entries from heads and heads\n+          // has at most MAX_BLOCKED_TASKS tasks, blockedTasks will never exceed MAX_BLOCKED_TASKS entries.\n+          // Note blockedTasks can't be cleared too early as it is used in the excludedTasks Predicate above.\n+          blockedTasks.clear();\n+\n+          // Trigger the creation of a new Session used for locking when/if a lock is later acquired on the OverseerCollectionMessageHandler\n+          batchSessionId++;\n \n-          taskBatch.batchId++;\n           boolean tooManyTasks = false;\n           for (QueueEvent head : heads) {\n             if (!tooManyTasks) {\n-              synchronized (runningTasks) {\n                 tooManyTasks = runningTasksSize() >= MAX_PARALLEL_TASKS;\n-              }\n             }\n             if (tooManyTasks) {\n               // Too many tasks are running, just shove the rest into the \"blocked\" queue.\n-              if(blockedTasks.size() < MAX_BLOCKED_TASKS)\n-                blockedTasks.put(head.getId(), head);\n+              blockedTasks.put(head.getId(), head);", "originalCommit": "0946eca60887308bbc2b186512659cc66c935d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NTA4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r438965089", "bodyText": "Commented line 280 above.", "author": "murblanc", "createdAt": "2020-06-11T17:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxMDIxNw==", "url": "https://github.com/apache/lucene-solr/pull/1561#discussion_r439010217", "bodyText": "Ah, ok, I saw that but then missed the connection by the time I got to this method.", "author": "madrob", "createdAt": "2020-06-11T19:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java b/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java\nindex 9be7e52fb41..993582cd4b4 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.java\n\n@@ -288,16 +288,14 @@ public class OverseerTaskProcessor implements Runnable, Closeable {\n           boolean tooManyTasks = false;\n           for (QueueEvent head : heads) {\n             if (!tooManyTasks) {\n-                tooManyTasks = runningTasksSize() >= MAX_PARALLEL_TASKS;\n+                tooManyTasks = runningTasks.size() >= MAX_PARALLEL_TASKS;\n             }\n             if (tooManyTasks) {\n               // Too many tasks are running, just shove the rest into the \"blocked\" queue.\n               blockedTasks.put(head.getId(), head);\n               continue;\n             }\n-            synchronized (runningZKTasks) {\n-              if (runningZKTasks.contains(head.getId())) continue;\n-            }\n+            if (runningZKTasks.contains(head.getId())) continue;\n             final ZkNodeProps message = ZkNodeProps.load(head.getBytes());\n             final String asyncId = message.getStr(ASYNC);\n             if (hasLeftOverItems) {\n"}}, {"oid": "3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "url": "https://github.com/apache/lucene-solr/commit/3c05a011df9ec94f1d3e0be36381eaa50e3919bd", "message": "SOLR-14546: comments from Mike Drob", "committedDate": "2020-06-11T19:24:28Z", "type": "commit"}, {"oid": "77b171b6fd5ef2eff05ea6e6d29905d3b31e5a98", "url": "https://github.com/apache/lucene-solr/commit/77b171b6fd5ef2eff05ea6e6d29905d3b31e5a98", "message": "SOLR-14546: OverseerTaskProcessor can process messages out of order", "committedDate": "2020-06-22T17:04:51Z", "type": "commit"}, {"oid": "f304263cb4109b90d24bc9876944ee5cb6df0a10", "url": "https://github.com/apache/lucene-solr/commit/f304263cb4109b90d24bc9876944ee5cb6df0a10", "message": "SOLR-14546: comments from Mike Drob", "committedDate": "2020-06-22T17:04:51Z", "type": "commit"}, {"oid": "9ef911accb077ccca93f8838a952fd40e2c2b073", "url": "https://github.com/apache/lucene-solr/commit/9ef911accb077ccca93f8838a952fd40e2c2b073", "message": "SOLR-14546: update CHANGES.txt", "committedDate": "2020-06-22T17:30:15Z", "type": "commit"}, {"oid": "9a6d922e52efef91fc0cb5c318353d1d8be9372f", "url": "https://github.com/apache/lucene-solr/commit/9a6d922e52efef91fc0cb5c318353d1d8be9372f", "message": "Merge branch 'SOLR-14546' of github.com:murblanc/lucene-solr into SOLR-14546", "committedDate": "2020-06-22T18:01:03Z", "type": "commit"}, {"oid": "c96ef71f73170fd13dcf337f1a0ceb347c450542", "url": "https://github.com/apache/lucene-solr/commit/c96ef71f73170fd13dcf337f1a0ceb347c450542", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into SOLR-14546", "committedDate": "2020-06-22T21:54:58Z", "type": "commit"}]}