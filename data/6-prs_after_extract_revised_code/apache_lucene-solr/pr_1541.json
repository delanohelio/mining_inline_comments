{"pr_number": 1541, "pr_title": "RegExp - add case insensitive matching option", "pr_createdAt": "2020-05-28T13:40:59Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1541", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3Nzc2MA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431877760", "bodyText": "Should it be new RegExp(regexPattern, RegExp.ALL | RegExp.CASE_INSENSITIVE) ?", "author": "jimczi", "createdAt": "2020-05-28T14:28:01Z", "path": "lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java", "diffHunk": "@@ -215,11 +238,13 @@ protected String checkRandomExpression(String docValue) {\n \n     String regexPattern = result.toString();\n     // Assert our randomly generated regex actually matches the provided raw input using java's expression matcher\n-    Pattern pattern = Pattern.compile(regexPattern);\n+    Pattern pattern = caseSensitiveQuery ? Pattern.compile(regexPattern): \n+                                           Pattern.compile(regexPattern, Pattern.CASE_INSENSITIVE); \n+                                             ;\n     Matcher matcher = pattern.matcher(docValue);\n     assertTrue(\"Java regex \" + regexPattern + \" did not match doc value \" + docValue, matcher.matches());\n \n-    RegExp regex = new RegExp(regexPattern);\n+    RegExp regex = caseSensitiveQuery ? new RegExp(regexPattern) : new RegExp(regexPattern, RegExp.CASE_INSENSITIVE);", "originalCommit": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0358840359960501e98090d33ef116650622a27", "chunk": "diff --git a/lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java b/lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java\nindex 03996a87870..4c248f08dd7 100644\n--- a/lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java\n+++ b/lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java\n\n@@ -244,7 +244,7 @@ public class TestRegExp extends LuceneTestCase {\n     Matcher matcher = pattern.matcher(docValue);\n     assertTrue(\"Java regex \" + regexPattern + \" did not match doc value \" + docValue, matcher.matches());\n \n-    RegExp regex = caseSensitiveQuery ? new RegExp(regexPattern) : new RegExp(regexPattern, RegExp.CASE_INSENSITIVE);\n+    RegExp regex =  new RegExp(regexPattern, RegExp.ALL, caseSensitiveQuery);\n     Automaton automaton = regex.toAutomaton();\n     ByteRunAutomaton bytesMatcher = new ByteRunAutomaton(automaton);\n     BytesRef br = new BytesRef(docValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3ODU4OA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431878588", "bodyText": "should use randomization ?", "author": "jimczi", "createdAt": "2020-05-28T14:28:51Z", "path": "lucene/core/src/test/org/apache/lucene/util/automaton/TestRegExp.java", "diffHunk": "@@ -88,10 +88,14 @@ public void testRepeatWithEmptyLanguage() throws Exception {\n     assertTrue(a.toString().length() > 0);\n   }\n   \n+  \n+  boolean caseSensitiveQuery = true;\n+  \n   public void testCoreJavaParity() {\n     // Generate random doc values and random regular expressions\n     // and check for same matching behaviour as Java's Pattern class.\n     for (int i = 0; i < 1000; i++) {\n+      caseSensitiveQuery = true;      ", "originalCommit": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5MTEwNQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431891105", "bodyText": "The randomisation comes from the choice of string mutation later that produces the regex - this is just initialising the variable.", "author": "markharwood", "createdAt": "2020-05-28T14:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3ODU4OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3OTU5NA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r431879594", "bodyText": "Maybe add a ALL_AND_CASE_INSENSITIVE ?", "author": "jimczi", "createdAt": "2020-05-28T14:29:47Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -437,9 +437,15 @@\n   public static final int INTERVAL = 0x0020;\n   \n   /**\n-   * Syntax flag, enables all optional regexp syntax.\n+   * Allows case insensitive matching.\n    */\n-  public static final int ALL = 0xffff;\n+  public static final int CASE_INSENSITIVE = 0x0040;  \n+  \n+  /**\n+   * Syntax flag, enables all optional regexp syntax\n+   * but preserves default setting of case sensitive matching. \n+   */\n+  public static final int ALL = 0xffff ^ CASE_INSENSITIVE ;", "originalCommit": "f67a783b8eaf685c27a3b46c97ed2679ce0b9370", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a0358840359960501e98090d33ef116650622a27", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 29b8efed501..288adc8b1b7 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -437,20 +438,21 @@ public class RegExp {\n   public static final int INTERVAL = 0x0020;\n   \n   /**\n-   * Allows case insensitive matching.\n+   * Syntax flag, enables all optional regexp syntax.\n    */\n-  public static final int CASE_INSENSITIVE = 0x0040;  \n-  \n+  public static final int ALL = 0xff;\n+      \n   /**\n-   * Syntax flag, enables all optional regexp syntax\n-   * but preserves default setting of case sensitive matching. \n+   * Syntax flag, enables no optional regexp syntax.\n    */\n-  public static final int ALL = 0xffff ^ CASE_INSENSITIVE ;\n+  public static final int NONE = 0x0000;\n+  \n+  //-----  Non-syntax flags ( > 0xff )  ------\n   \n   /**\n-   * Syntax flag, enables no optional regexp syntax.\n+   * Allows case insensitive matching.\n    */\n-  public static final int NONE = 0x0000;\n+  static final int UNICODE_CASE_INSENSITIVE = 0x0100;    \n \n   //Immutable parsed state\n   /**\n"}}, {"oid": "a0358840359960501e98090d33ef116650622a27", "url": "https://github.com/apache/lucene-solr/commit/a0358840359960501e98090d33ef116650622a27", "message": "Revert irrelevant javadoc change", "committedDate": "2020-06-09T14:49:09Z", "type": "forcePushed"}, {"oid": "7bc5c1da21029f2945d2c9bd5d91c818f8dab803", "url": "https://github.com/apache/lucene-solr/commit/7bc5c1da21029f2945d2c9bd5d91c818f8dab803", "message": "Revert irrelevant javadoc change", "committedDate": "2020-06-10T08:38:45Z", "type": "forcePushed"}, {"oid": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "url": "https://github.com/apache/lucene-solr/commit/def0f8e75595617f8527e9b305ea59279e2e7a8f", "message": "Revert irrelevant javadoc change", "committedDate": "2020-06-16T13:00:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5NjMxNQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r440896315", "bodyText": "In order not to have a combinatorial explosion of the number of ctors, I think we could consider dropping this one: I think it's fine to require users to provide flags if they also want to configure case sensitivity?", "author": "jpountz", "createdAt": "2020-06-16T14:30:18Z", "path": "lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java", "diffHunk": "@@ -68,6 +68,19 @@ public RegexpQuery(Term term) {\n     this(term, RegExp.ALL);\n   }\n   \n+  /**\n+   * Constructs a query for terms matching <code>term</code>.\n+   * <p>\n+   * By default, all regular expression features are enabled.\n+   * </p>\n+   * \n+   * @param term regular expression.\n+   * @param caseSensitive set to false for case insensitive matching \n+   */\n+  public RegexpQuery(Term term, boolean caseSensitive) {\n+    this(term, RegExp.ALL, caseSensitive);\n+  }  ", "originalCommit": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "990c3d08a2dd39061e0564974cb6eab85bb76924", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\nindex 5018032bd3e..3c6ebcf5c8e 100644\n--- a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\n\n@@ -68,19 +68,6 @@ public class RegexpQuery extends AutomatonQuery {\n     this(term, RegExp.ALL);\n   }\n   \n-  /**\n-   * Constructs a query for terms matching <code>term</code>.\n-   * <p>\n-   * By default, all regular expression features are enabled.\n-   * </p>\n-   * \n-   * @param term regular expression.\n-   * @param caseSensitive set to false for case insensitive matching \n-   */\n-  public RegexpQuery(Term term, boolean caseSensitive) {\n-    this(term, RegExp.ALL, caseSensitive);\n-  }  \n-  \n   /**\n    * Constructs a query for terms matching <code>term</code>.\n    * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMDI4NA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r440900284", "bodyText": "same here, maybe it's fine to require passing syntax flags when you want to configure case sensitivity?", "author": "jpountz", "createdAt": "2020-06-16T14:35:22Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -489,6 +497,19 @@ public RegExp(String s) throws IllegalArgumentException {\n     this(s, ALL);\n   }\n   \n+  /**\n+   * Constructs new <code>RegExp</code> from a string. Same as\n+   * <code>RegExp(s, ALL)</code>.\n+   * \n+   * @param s regexp string\n+   * @param caseSensitive case sensitive matching\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp(String s, boolean caseSensitive) throws IllegalArgumentException {\n+    this(s, ALL, caseSensitive);\n+  }  ", "originalCommit": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "990c3d08a2dd39061e0564974cb6eab85bb76924", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 288adc8b1b7..6dec002b260 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -497,19 +498,6 @@ public class RegExp {\n     this(s, ALL);\n   }\n   \n-  /**\n-   * Constructs new <code>RegExp</code> from a string. Same as\n-   * <code>RegExp(s, ALL)</code>.\n-   * \n-   * @param s regexp string\n-   * @param caseSensitive case sensitive matching\n-   * @exception IllegalArgumentException if an error occurred while parsing the\n-   *              regular expression\n-   */\n-  public RegExp(String s, boolean caseSensitive) throws IllegalArgumentException {\n-    this(s, ALL, caseSensitive);\n-  }  \n-  \n   /**\n    * Constructs new <code>RegExp</code> from a string.\n    * \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDgxMQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r440904811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  flags = syntax_flags  | UNICODE_CASE_INSENSITIVE;\n          \n          \n            \n                  flags = syntax_flags | UNICODE_CASE_INSENSITIVE;", "author": "jpountz", "createdAt": "2020-06-16T14:41:09Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -499,10 +520,30 @@ public RegExp(String s) throws IllegalArgumentException {\n    *              regular expression\n    */\n   public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n+    this(s, syntax_flags, true);\n+  }\n+  /**\n+   * Constructs new <code>RegExp</code> from a string.\n+   * \n+   * @param s regexp string\n+   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n+   *          enabled\n+   * @param caseSensitive case sensitive matching\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp(String s, int syntax_flags, boolean caseSensitive) throws IllegalArgumentException {    \n     originalString = s;\n-    flags = syntax_flags;\n+    // Trim any bits unrelated to syntax flags\n+    syntax_flags  = syntax_flags & 0xff;\n+    if (caseSensitive) {\n+      flags = syntax_flags;\n+    } else {      \n+      // Add in the case-insensitive setting\n+      flags = syntax_flags  | UNICODE_CASE_INSENSITIVE;", "originalCommit": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "990c3d08a2dd39061e0564974cb6eab85bb76924", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 288adc8b1b7..6dec002b260 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -520,7 +508,7 @@ public class RegExp {\n    *              regular expression\n    */\n   public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n-    this(s, syntax_flags, true);\n+    this(s, syntax_flags, 0);\n   }\n   /**\n    * Constructs new <code>RegExp</code> from a string.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r441002695", "bodyText": "I think that this is incorrect as there is no 1:1 mapping between lowercase and uppercase letters, for instance \u03c2 and \u03c3 both have \u03a3 as their uppercase variant. And if someone uses \u03a3 in their regexes, \u03c2 wouldn't match as toLowerCase(\u03a3) returns \u03c3.\nShould we make this only about ASCII for now, like Java's Pattern class? https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/regex/Pattern.html#CASE_INSENSITIVE We could add support for full Unicode later but this doesn't look like a low hanging fruit to me?", "author": "jpountz", "createdAt": "2020-06-16T16:56:43Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -743,6 +792,30 @@ private Automaton toAutomatonInternal(Map<String,Automaton> automata,\n     }\n     return a;\n   }\n+  private Automaton toCaseInsensitiveChar(int codepoint, int maxDeterminizedStates) {\n+    Automaton case1 = Automata.makeChar(codepoint);\n+    int altCase = Character.isLowerCase(codepoint) ? Character.toUpperCase(codepoint) : Character.toLowerCase(codepoint);\n+    Automaton result;\n+    if (altCase != codepoint) {\n+      result = Operations.union(case1, Automata.makeChar(altCase));\n+      result = MinimizationOperations.minimize(result, maxDeterminizedStates);          \n+    } else {\n+      result = case1;                      \n+    }          \n+    return result;\n+  }", "originalCommit": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMzk5OA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r441813998", "bodyText": "good catch, +1 for ASCII only for now, I guess it was too ambitious to handle unicode in the first run", "author": "jimczi", "createdAt": "2020-06-17T20:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDAzOQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r444134039", "bodyText": "Would that be an argument for having a bit mask for case sensitivity flags instead of a Boolean? Java has the UNICODE_CASE flag which differs from the ASCII one and it might be an idea to leave something in the API open to future work.", "author": "markharwood", "createdAt": "2020-06-23T10:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2MzQxMQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r444163411", "bodyText": "So you mean having two bit mask flags, one for the operators and one for the matching behavior ?  I think that makes sense and could avoid complicating the ctrs in the future so +1.", "author": "jimczi", "createdAt": "2020-06-23T11:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MjUxMA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r444182510", "bodyText": "Yes, that's what I was thinking", "author": "markharwood", "createdAt": "2020-06-23T12:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMTI2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r444201265", "bodyText": "The one downside is RegExpQuery already has a (Term, int, int) constructor for syntax flags and maxDeterminizedStates so I added a (int, int, Term) variation for passing the syntax and match flags.", "author": "markharwood", "createdAt": "2020-06-23T12:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NDQyMw==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r444284423", "bodyText": "An alternative would be an overhaul of RegExp.\n\nIntroducing a Builder class for the parser with named properties for settings\nseparating the RegExp parser logic from the  parsed objects (currently they are the same class).\nseparating rendering functions (toString, to Automaton, toStringTree) from the parsed objects.\n\nI'm not sure if we're at the tipping point where all of that would make sense.", "author": "markharwood", "createdAt": "2020-06-23T14:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxNzUyOQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r444817529", "bodyText": "so I added a (int, int, Term) variation for passing the syntax and match flags.\n\nI am not sure this is clearer ;). It's not ideal but I prefer adding only one ctr (Term, int, int, int).", "author": "jimczi", "createdAt": "2020-06-24T11:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMjY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "990c3d08a2dd39061e0564974cb6eab85bb76924", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 288adc8b1b7..6dec002b260 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -794,6 +781,10 @@ public class RegExp {\n   }\n   private Automaton toCaseInsensitiveChar(int codepoint, int maxDeterminizedStates) {\n     Automaton case1 = Automata.makeChar(codepoint);\n+    // For now we only work with ASCII characters\n+    if (codepoint > 128) {\n+      return case1;\n+    }\n     int altCase = Character.isLowerCase(codepoint) ? Character.toUpperCase(codepoint) : Character.toLowerCase(codepoint);\n     Automaton result;\n     if (altCase != codepoint) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNDAyMw==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r441004023", "bodyText": "I'd rather like a regular for loop, this is a bit abusing lambdas to my taste. :)", "author": "jpountz", "createdAt": "2020-06-16T16:58:50Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -743,6 +792,30 @@ private Automaton toAutomatonInternal(Map<String,Automaton> automata,\n     }\n     return a;\n   }\n+  private Automaton toCaseInsensitiveChar(int codepoint, int maxDeterminizedStates) {\n+    Automaton case1 = Automata.makeChar(codepoint);\n+    int altCase = Character.isLowerCase(codepoint) ? Character.toUpperCase(codepoint) : Character.toLowerCase(codepoint);\n+    Automaton result;\n+    if (altCase != codepoint) {\n+      result = Operations.union(case1, Automata.makeChar(altCase));\n+      result = MinimizationOperations.minimize(result, maxDeterminizedStates);          \n+    } else {\n+      result = case1;                      \n+    }          \n+    return result;\n+  }\n+  \n+  private Automaton toCaseInsensitiveString(int maxDeterminizedStates) {\n+    List<Automaton> list = new ArrayList<>();\n+    s.codePoints().forEach(\n+        p -> {\n+          list.add(toCaseInsensitiveChar(p, maxDeterminizedStates));\n+        }\n+    );", "originalCommit": "def0f8e75595617f8527e9b305ea59279e2e7a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "990c3d08a2dd39061e0564974cb6eab85bb76924", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 288adc8b1b7..6dec002b260 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -794,6 +781,10 @@ public class RegExp {\n   }\n   private Automaton toCaseInsensitiveChar(int codepoint, int maxDeterminizedStates) {\n     Automaton case1 = Automata.makeChar(codepoint);\n+    // For now we only work with ASCII characters\n+    if (codepoint > 128) {\n+      return case1;\n+    }\n     int altCase = Character.isLowerCase(codepoint) ? Character.toUpperCase(codepoint) : Character.toLowerCase(codepoint);\n     Automaton result;\n     if (altCase != codepoint) {\n"}}, {"oid": "990c3d08a2dd39061e0564974cb6eab85bb76924", "url": "https://github.com/apache/lucene-solr/commit/990c3d08a2dd39061e0564974cb6eab85bb76924", "message": "Remove superfluous constructor", "committedDate": "2020-06-24T11:37:08Z", "type": "forcePushed"}, {"oid": "750d61278f017722485d618334c1e49d854e5849", "url": "https://github.com/apache/lucene-solr/commit/750d61278f017722485d618334c1e49d854e5849", "message": "Remove superfluous constructor", "committedDate": "2020-06-24T16:30:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445476294", "bodyText": "Let's call it CASE_INSENSITIVE since we want to leave the door for another flag that would control if unicode should be handled fully ?", "author": "jimczi", "createdAt": "2020-06-25T10:59:53Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -439,12 +441,19 @@\n   /**\n    * Syntax flag, enables all optional regexp syntax.\n    */\n-  public static final int ALL = 0xffff;\n-  \n+  public static final int ALL = 0xff;\n+      \n   /**\n    * Syntax flag, enables no optional regexp syntax.\n    */\n   public static final int NONE = 0x0000;\n+  \n+  //-----  Matching flags ( > 0xff )  ------\n+  \n+  /**\n+   * Allows case insensitive matching of ASCII characters.\n+   */\n+  public static final int ASCII_CASE_INSENSITIVE = 0x0100;    ", "originalCommit": "750d61278f017722485d618334c1e49d854e5849", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ5MDUwMQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445490501", "bodyText": "I thought it might be useful if the flag name reflected the current limitations?", "author": "markharwood", "createdAt": "2020-06-25T11:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ5MTMwOQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445491309", "bodyText": "But then what would be the other flag to allow unicode support ?", "author": "jimczi", "createdAt": "2020-06-25T11:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ5NzYyMQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445497621", "bodyText": "UNICODE_CASE_INSENSITIVE or just CASE_INSENSITIVE?\nEither way it would cover ASCII and all other UNICODE characters.\nAdmittedly slightly odd that the two flags overlap but the alternative is people may assume that a non-qualified name like \"CASE_INSENSITIVE\" would cover all the bases when we only currently support ASCII.", "author": "markharwood", "createdAt": "2020-06-25T11:45:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwNDkxMA==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445504910", "bodyText": "ok fine by me.", "author": "jimczi", "createdAt": "2020-06-25T11:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwNTUyNg==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445505526", "bodyText": "should we ensure that the flag is not used in the syntax_flags since we merge the two internally ?", "author": "jimczi", "createdAt": "2020-06-25T12:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzODg3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r445538877", "bodyText": "My assumption was this class was lenient to syntax flags > 0xff before this change so should remain so for BWC reasons", "author": "markharwood", "createdAt": "2020-06-25T13:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NjI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 6dec002b260..29b8efed501 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -439,21 +437,20 @@ public class RegExp {\n   public static final int INTERVAL = 0x0020;\n   \n   /**\n-   * Syntax flag, enables all optional regexp syntax.\n+   * Allows case insensitive matching.\n    */\n-  public static final int ALL = 0xff;\n-      \n+  public static final int CASE_INSENSITIVE = 0x0040;  \n+  \n   /**\n-   * Syntax flag, enables no optional regexp syntax.\n+   * Syntax flag, enables all optional regexp syntax\n+   * but preserves default setting of case sensitive matching. \n    */\n-  public static final int NONE = 0x0000;\n-  \n-  //-----  Matching flags ( > 0xff )  ------\n+  public static final int ALL = 0xffff ^ CASE_INSENSITIVE ;\n   \n   /**\n-   * Allows case insensitive matching of ASCII characters.\n+   * Syntax flag, enables no optional regexp syntax.\n    */\n-  public static final int ASCII_CASE_INSENSITIVE = 0x0100;    \n+  public static final int NONE = 0x0000;\n \n   //Immutable parsed state\n   /**\n"}}, {"oid": "ef958843f355e5508b7d6466df3057e86584096e", "url": "https://github.com/apache/lucene-solr/commit/ef958843f355e5508b7d6466df3057e86584096e", "message": "Remove superfluous constructor", "committedDate": "2020-07-06T08:45:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNTc4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r450935789", "bodyText": "I don't think we need to maintain bw compat for this, is there any test that fails if you remove this line?", "author": "jpountz", "createdAt": "2020-07-07T15:04:48Z", "path": "lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java", "diffHunk": "@@ -499,10 +508,29 @@ public RegExp(String s) throws IllegalArgumentException {\n    *              regular expression\n    */\n   public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n+    this(s, syntax_flags, 0);\n+  }\n+  /**\n+   * Constructs new <code>RegExp</code> from a string.\n+   * \n+   * @param s regexp string\n+   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n+   *          enabled\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   * @exception IllegalArgumentException if an error occurred while parsing the\n+   *              regular expression\n+   */\n+  public RegExp(String s, int syntax_flags, int match_flags) throws IllegalArgumentException {    \n+    // (for BWC reasons we don't validate invalid bits, just trim instead)\n+    syntax_flags  = syntax_flags & 0xff;", "originalCommit": "ef958843f355e5508b7d6466df3057e86584096e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU4MTIzNw==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r451581237", "bodyText": "As far as I can see, no. The change would be to remove that line and replace with\nif (syntax_flags >  ALL) {\n  throw new IllegalArgumentException(\"Illegal syntax flag\");\n}", "author": "markharwood", "createdAt": "2020-07-08T14:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNTc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\nindex 6dec002b260..29b8efed501 100644\n--- a/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n+++ b/lucene/core/src/java/org/apache/lucene/util/automaton/RegExp.java\n\n@@ -508,27 +505,8 @@ public class RegExp {\n    *              regular expression\n    */\n   public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n-    this(s, syntax_flags, 0);\n-  }\n-  /**\n-   * Constructs new <code>RegExp</code> from a string.\n-   * \n-   * @param s regexp string\n-   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n-   *          enabled\n-   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n-   * @exception IllegalArgumentException if an error occurred while parsing the\n-   *              regular expression\n-   */\n-  public RegExp(String s, int syntax_flags, int match_flags) throws IllegalArgumentException {    \n-    // (for BWC reasons we don't validate invalid bits, just trim instead)\n-    syntax_flags  = syntax_flags & 0xff;\n-    \n-    if (match_flags > 0 && match_flags <= ALL) {\n-      throw new IllegalArgumentException(\"Illegal match flag\");\n-    }\n-    flags = syntax_flags | match_flags;\n     originalString = s;\n+    flags = syntax_flags;\n     RegExp e;\n     if (s.length() == 0) e = makeString(flags, \"\");\n     else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NDcxNg==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r450944716", "bodyText": "In my opinion, all constructors should always take parameters in the same order. The current longest constructor does RegexpQuery(Term term, int syntaxFlags, AutomatonProvider provider, int maxDeterminizedStates), so I think that this one should be RegexpQuery(Term term, int syntaxFlags, int matchFlags, AutomatonProvider provider, int maxDeterminizedStates).", "author": "jpountz", "createdAt": "2020-07-07T15:17:01Z", "path": "lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java", "diffHunk": "@@ -96,16 +96,46 @@ public RegexpQuery(Term term, int flags, int maxDeterminizedStates) {\n    * Constructs a query for terms matching <code>term</code>.\n    * \n    * @param term regular expression.\n-   * @param flags optional RegExp features from {@link RegExp}\n+   * @param maxDeterminizedStates maximum number of states that compiling the\n+   * @param syntax_flags optional RegExp syntax features from {@link RegExp}\n+   *  automaton for the regexp can result in.  Set higher to allow more complex\n+   *  queries and lower to prevent memory exhaustion.\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   */\n+  public RegexpQuery(Term term,  int maxDeterminizedStates, int syntax_flags, int match_flags) {\n+    this(term, defaultProvider, maxDeterminizedStates, syntax_flags, match_flags);\n+  }\n+  \n+  /**\n+   * Constructs a query for terms matching <code>term</code>.\n+   * \n+   * @param term regular expression.\n+   * @param syntax_flags optional RegExp features from {@link RegExp}\n    * @param provider custom AutomatonProvider for named automata\n    * @param maxDeterminizedStates maximum number of states that compiling the\n    *  automaton for the regexp can result in.  Set higher to allow more complex\n    *  queries and lower to prevent memory exhaustion.\n    */\n-  public RegexpQuery(Term term, int flags, AutomatonProvider provider,\n+  public RegexpQuery(Term term, int syntax_flags, AutomatonProvider provider,\n       int maxDeterminizedStates) {\n+    this(term, provider, maxDeterminizedStates, syntax_flags, 0);\n+  }\n+  \n+  /**\n+   * Constructs a query for terms matching <code>term</code>.\n+   * \n+   * @param term regular expression.\n+   * @param syntax_flags optional RegExp features from {@link RegExp}\n+   * @param provider custom AutomatonProvider for named automata\n+   * @param maxDeterminizedStates maximum number of states that compiling the\n+   *  automaton for the regexp can result in.  Set higher to allow more complex\n+   *  queries and lower to prevent memory exhaustion.\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   */\n+  public RegexpQuery(Term term, AutomatonProvider provider,\n+      int maxDeterminizedStates, int syntax_flags, int match_flags) {", "originalCommit": "ef958843f355e5508b7d6466df3057e86584096e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\nindex 3c6ebcf5c8e..b3c8ad2e2d5 100644\n--- a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\n\n@@ -96,46 +96,16 @@ public class RegexpQuery extends AutomatonQuery {\n    * Constructs a query for terms matching <code>term</code>.\n    * \n    * @param term regular expression.\n-   * @param maxDeterminizedStates maximum number of states that compiling the\n-   * @param syntax_flags optional RegExp syntax features from {@link RegExp}\n-   *  automaton for the regexp can result in.  Set higher to allow more complex\n-   *  queries and lower to prevent memory exhaustion.\n-   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n-   */\n-  public RegexpQuery(Term term,  int maxDeterminizedStates, int syntax_flags, int match_flags) {\n-    this(term, defaultProvider, maxDeterminizedStates, syntax_flags, match_flags);\n-  }\n-  \n-  /**\n-   * Constructs a query for terms matching <code>term</code>.\n-   * \n-   * @param term regular expression.\n-   * @param syntax_flags optional RegExp features from {@link RegExp}\n+   * @param flags optional RegExp features from {@link RegExp}\n    * @param provider custom AutomatonProvider for named automata\n    * @param maxDeterminizedStates maximum number of states that compiling the\n    *  automaton for the regexp can result in.  Set higher to allow more complex\n    *  queries and lower to prevent memory exhaustion.\n    */\n-  public RegexpQuery(Term term, int syntax_flags, AutomatonProvider provider,\n+  public RegexpQuery(Term term, int flags, AutomatonProvider provider,\n       int maxDeterminizedStates) {\n-    this(term, provider, maxDeterminizedStates, syntax_flags, 0);\n-  }\n-  \n-  /**\n-   * Constructs a query for terms matching <code>term</code>.\n-   * \n-   * @param term regular expression.\n-   * @param syntax_flags optional RegExp features from {@link RegExp}\n-   * @param provider custom AutomatonProvider for named automata\n-   * @param maxDeterminizedStates maximum number of states that compiling the\n-   *  automaton for the regexp can result in.  Set higher to allow more complex\n-   *  queries and lower to prevent memory exhaustion.\n-   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n-   */\n-  public RegexpQuery(Term term, AutomatonProvider provider,\n-      int maxDeterminizedStates, int syntax_flags, int match_flags) {\n     super(term,\n-          new RegExp(term.text(), syntax_flags, match_flags).toAutomaton(\n+          new RegExp(term.text(), flags).toAutomaton(\n                        provider, maxDeterminizedStates), maxDeterminizedStates);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NTI0Mg==", "url": "https://github.com/apache/lucene-solr/pull/1541#discussion_r450945242", "bodyText": "I'd keep maxDeterminizedStates last so that all constructors take parameters in the same order.", "author": "jpountz", "createdAt": "2020-07-07T15:17:45Z", "path": "lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java", "diffHunk": "@@ -96,16 +96,46 @@ public RegexpQuery(Term term, int flags, int maxDeterminizedStates) {\n    * Constructs a query for terms matching <code>term</code>.\n    * \n    * @param term regular expression.\n-   * @param flags optional RegExp features from {@link RegExp}\n+   * @param maxDeterminizedStates maximum number of states that compiling the\n+   * @param syntax_flags optional RegExp syntax features from {@link RegExp}\n+   *  automaton for the regexp can result in.  Set higher to allow more complex\n+   *  queries and lower to prevent memory exhaustion.\n+   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n+   */\n+  public RegexpQuery(Term term,  int maxDeterminizedStates, int syntax_flags, int match_flags) {", "originalCommit": "ef958843f355e5508b7d6466df3057e86584096e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "chunk": "diff --git a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\nindex 3c6ebcf5c8e..b3c8ad2e2d5 100644\n--- a/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/RegexpQuery.java\n\n@@ -96,46 +96,16 @@ public class RegexpQuery extends AutomatonQuery {\n    * Constructs a query for terms matching <code>term</code>.\n    * \n    * @param term regular expression.\n-   * @param maxDeterminizedStates maximum number of states that compiling the\n-   * @param syntax_flags optional RegExp syntax features from {@link RegExp}\n-   *  automaton for the regexp can result in.  Set higher to allow more complex\n-   *  queries and lower to prevent memory exhaustion.\n-   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n-   */\n-  public RegexpQuery(Term term,  int maxDeterminizedStates, int syntax_flags, int match_flags) {\n-    this(term, defaultProvider, maxDeterminizedStates, syntax_flags, match_flags);\n-  }\n-  \n-  /**\n-   * Constructs a query for terms matching <code>term</code>.\n-   * \n-   * @param term regular expression.\n-   * @param syntax_flags optional RegExp features from {@link RegExp}\n+   * @param flags optional RegExp features from {@link RegExp}\n    * @param provider custom AutomatonProvider for named automata\n    * @param maxDeterminizedStates maximum number of states that compiling the\n    *  automaton for the regexp can result in.  Set higher to allow more complex\n    *  queries and lower to prevent memory exhaustion.\n    */\n-  public RegexpQuery(Term term, int syntax_flags, AutomatonProvider provider,\n+  public RegexpQuery(Term term, int flags, AutomatonProvider provider,\n       int maxDeterminizedStates) {\n-    this(term, provider, maxDeterminizedStates, syntax_flags, 0);\n-  }\n-  \n-  /**\n-   * Constructs a query for terms matching <code>term</code>.\n-   * \n-   * @param term regular expression.\n-   * @param syntax_flags optional RegExp features from {@link RegExp}\n-   * @param provider custom AutomatonProvider for named automata\n-   * @param maxDeterminizedStates maximum number of states that compiling the\n-   *  automaton for the regexp can result in.  Set higher to allow more complex\n-   *  queries and lower to prevent memory exhaustion.\n-   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n-   */\n-  public RegexpQuery(Term term, AutomatonProvider provider,\n-      int maxDeterminizedStates, int syntax_flags, int match_flags) {\n     super(term,\n-          new RegExp(term.text(), syntax_flags, match_flags).toAutomaton(\n+          new RegExp(term.text(), flags).toAutomaton(\n                        provider, maxDeterminizedStates), maxDeterminizedStates);\n   }\n \n"}}, {"oid": "5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "url": "https://github.com/apache/lucene-solr/commit/5bcaac7ff79d7dd8689b458d3c36399c9b5edc4d", "message": "Added case insensitive search option", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "07f94036ede9993492e5350b8197e997ea921251", "url": "https://github.com/apache/lucene-solr/commit/07f94036ede9993492e5350b8197e997ea921251", "message": "Addressing review comments", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "16c198a5654c76641c2e0c114906cac72f3bd6c4", "url": "https://github.com/apache/lucene-solr/commit/16c198a5654c76641c2e0c114906cac72f3bd6c4", "message": "Changed case sensitive flag to a boolean in constructors.", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "fce454a0305554ddacb28291af17f46649a9443a", "url": "https://github.com/apache/lucene-solr/commit/fce454a0305554ddacb28291af17f46649a9443a", "message": "Reduced visibility of case insensitive flag as a non-user-facing flag", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "0857aadd2e4a4f95a81ba8f906b47b522e777de4", "url": "https://github.com/apache/lucene-solr/commit/0857aadd2e4a4f95a81ba8f906b47b522e777de4", "message": "Expose case sensitivity options in RegExpQuery", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "678a572a8b9894274a92ea1c4a1719ff09b140d6", "url": "https://github.com/apache/lucene-solr/commit/678a572a8b9894274a92ea1c4a1719ff09b140d6", "message": "Revert irrelevant javadoc change", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "bb1bf20ce818baf2dd2924d6f931c7569c8c477e", "url": "https://github.com/apache/lucene-solr/commit/bb1bf20ce818baf2dd2924d6f931c7569c8c477e", "message": "Addressed review comments - ASCII-only case changes, reduce num constructors and for loop tweak", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "fff3712b293a4987ae7eec15b063cac019e988ee", "url": "https://github.com/apache/lucene-solr/commit/fff3712b293a4987ae7eec15b063cac019e988ee", "message": "Changed case sensitivity options to be a bit mask rather than a simple boolean to allow for future developments.", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "52788bc735234b61f917d31a627d521829cd8c03", "url": "https://github.com/apache/lucene-solr/commit/52788bc735234b61f917d31a627d521829cd8c03", "message": "Remove superfluous constructor", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "e4424fead3684b5e317ce8f10336de491e9f744e", "url": "https://github.com/apache/lucene-solr/commit/e4424fead3684b5e317ce8f10336de491e9f744e", "message": "Addressed review comments (thanks @jpountz !)\nReordered constructor args and added arg validation.", "committedDate": "2020-07-08T14:45:31Z", "type": "commit"}, {"oid": "e4424fead3684b5e317ce8f10336de491e9f744e", "url": "https://github.com/apache/lucene-solr/commit/e4424fead3684b5e317ce8f10336de491e9f744e", "message": "Addressed review comments (thanks @jpountz !)\nReordered constructor args and added arg validation.", "committedDate": "2020-07-08T14:45:31Z", "type": "forcePushed"}]}