{"pr_number": 1759, "pr_title": "SOLR-13438: on collection delete, also delete .AUTOCREATED config set", "pr_createdAt": "2020-08-17T22:41:35Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1759", "timeline": [{"oid": "ca4e50faad7dfa9a75ff8db85a53183440ee6e25", "url": "https://github.com/apache/lucene-solr/commit/ca4e50faad7dfa9a75ff8db85a53183440ee6e25", "message": "SOLR-13438: when deleting a collection, delete also its config set if it is auto-created, and there are no other references to it", "committedDate": "2020-08-17T21:36:04Z", "type": "commit"}, {"oid": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "url": "https://github.com/apache/lucene-solr/commit/b08b7ed50f5c9460ba691dd3268e93d940faab0e", "message": "SOLR-13438: added change to CHANGES.txt", "committedDate": "2020-08-17T22:06:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0NTA1MQ==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473345051", "bodyText": "Please avoid suppressing warnings in new code and use generics", "author": "madrob", "createdAt": "2020-08-19T21:34:59Z", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})", "originalCommit": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0124ea6c03411c51f355039482361c26bcc7a945", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java b/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\ndeleted file mode 100644\nindex c8f30247673..00000000000\n--- a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.cloud.api.collections;\n-\n-import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n-import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n-import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n-import org.apache.solr.common.cloud.ZkStateReader;\n-import org.apache.solr.common.util.NamedList;\n-import org.junit.Test;\n-\n-public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n-\n-  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-\n-    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      // collection exists now\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n-\n-      // config for this collection is '.AUTOCREATED', and exists globally\n-      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n-      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      // collection has been deleted\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      // ... and so has its autocreated config set\n-      assertFalse(\"The auto-created config set should have been deleted with its collection\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzc2MQ==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473347761", "bodyText": "Instead of new file, can this be part of SimpleCollectionCreateDeleteTest?", "author": "madrob", "createdAt": "2020-08-19T21:38:15Z", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {", "originalCommit": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcxMDkwMQ==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473710901", "bodyText": "@madrob I will look into that, should be simple to do.\nI opted for the separate file initially mainly because that seemed to be the standard for most of the tests I looked into. Is there some specific agreement that I should look into for future reference? Thanks!\nEDIT: I'm renaming the other test in SimpleCollectionCreateDeleteTest from test to testCreateAndDeleteThenCreateAgain, and naming the new test testDeleteAlsoDeletesAutocreatedConfigSet, to better differentiate between them.", "author": "adorow", "createdAt": "2020-08-20T07:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0124ea6c03411c51f355039482361c26bcc7a945", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java b/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\ndeleted file mode 100644\nindex c8f30247673..00000000000\n--- a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.cloud.api.collections;\n-\n-import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n-import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n-import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n-import org.apache.solr.common.cloud.ZkStateReader;\n-import org.apache.solr.common.util.NamedList;\n-import org.junit.Test;\n-\n-public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n-\n-  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-\n-    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      // collection exists now\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n-\n-      // config for this collection is '.AUTOCREATED', and exists globally\n-      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n-      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      // collection has been deleted\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      // ... and so has its autocreated config set\n-      assertFalse(\"The auto-created config set should have been deleted with its collection\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTI5MA==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473349290", "bodyText": "Declare as CollectionAdminRequest.Delete", "author": "madrob", "createdAt": "2020-08-19T21:40:04Z", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);\n+\n+    NamedList<Object> request = create.process(cloudClient).getResponse();\n+\n+    if (request.get(\"success\") != null) {\n+      // collection exists now\n+      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n+\n+      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n+\n+      // config for this collection is '.AUTOCREATED', and exists globally\n+      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n+      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n+\n+      @SuppressWarnings({\"rawtypes\"})\n+      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);", "originalCommit": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNDgxMg==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473724812", "bodyText": "Since I'm now adding this new scenario into SimpleCollectionCreateDeleteTest, I'll apply the same into the other scenario (and therefore also remove @SuppressWarnings from that test.", "author": "adorow", "createdAt": "2020-08-20T07:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0124ea6c03411c51f355039482361c26bcc7a945", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java b/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\ndeleted file mode 100644\nindex c8f30247673..00000000000\n--- a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.cloud.api.collections;\n-\n-import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n-import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n-import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n-import org.apache.solr.common.cloud.ZkStateReader;\n-import org.apache.solr.common.util.NamedList;\n-import org.junit.Test;\n-\n-public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n-\n-  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-\n-    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      // collection exists now\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n-\n-      // config for this collection is '.AUTOCREATED', and exists globally\n-      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n-      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      // collection has been deleted\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      // ... and so has its autocreated config set\n-      assertFalse(\"The auto-created config set should have been deleted with its collection\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MDc5Mw==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473350793", "bodyText": "Do we need this call to setCreateNodeSet? If not, can also delete getting overseerNode above. If so, add a comment explaining why.", "author": "madrob", "createdAt": "2020-08-19T21:41:58Z", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {\n+    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n+\n+    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n+    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n+            .setCreateNodeSet(overseerNode);", "originalCommit": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNzExNQ==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473727115", "bodyText": "@madrob no other reason besides lack of knowledge on my part :) I'm removing that part of the code, tests still work accordingly.", "author": "adorow", "createdAt": "2020-08-20T07:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MDc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0124ea6c03411c51f355039482361c26bcc7a945", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java b/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\ndeleted file mode 100644\nindex c8f30247673..00000000000\n--- a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.cloud.api.collections;\n-\n-import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n-import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n-import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n-import org.apache.solr.common.cloud.ZkStateReader;\n-import org.apache.solr.common.util.NamedList;\n-import org.junit.Test;\n-\n-public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n-\n-  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-\n-    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      // collection exists now\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n-\n-      // config for this collection is '.AUTOCREATED', and exists globally\n-      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n-      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      // collection has been deleted\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      // ... and so has its autocreated config set\n-      assertFalse(\"The auto-created config set should have been deleted with its collection\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-    }\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MzY4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r473353689", "bodyText": "Please add another test where we have two collections sharing the same autogenerated configset, and verify deleting one of them doesn't orphan the other.", "author": "madrob", "createdAt": "2020-08-19T21:45:28Z", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.cloud.api.collections;\n+\n+import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n+import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n+import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n+import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.common.util.NamedList;\n+import org.junit.Test;\n+\n+public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n+\n+  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n+    sliceCount = 1;\n+  }\n+\n+  @Test\n+  @ShardsFixed(num = 1)\n+  public void test() throws Exception {", "originalCommit": "b08b7ed50f5c9460ba691dd3268e93d940faab0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0124ea6c03411c51f355039482361c26bcc7a945", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java b/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\ndeleted file mode 100644\nindex c8f30247673..00000000000\n--- a/solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionDeleteAlsoDeletesAutocreatedConfigSetTest.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.solr.cloud.api.collections;\n-\n-import org.apache.solr.client.solrj.request.CollectionAdminRequest;\n-import org.apache.solr.cloud.AbstractFullDistribZkTestBase;\n-import org.apache.solr.cloud.OverseerCollectionConfigSetProcessor;\n-import org.apache.solr.common.cloud.ZkStateReader;\n-import org.apache.solr.common.util.NamedList;\n-import org.junit.Test;\n-\n-public class CollectionDeleteAlsoDeletesAutocreatedConfigSetTest extends AbstractFullDistribZkTestBase {\n-\n-  public CollectionDeleteAlsoDeletesAutocreatedConfigSetTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-\n-    String collectionName = \"CollectionDeleteAlsoDeletesAutocreatedConfigSetTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      // collection exists now\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      String configName = cloudClient.getZkStateReader().readConfigName(collectionName);\n-\n-      // config for this collection is '.AUTOCREATED', and exists globally\n-      assertTrue(configName.endsWith(\".AUTOCREATED\"));\n-      assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      // collection has been deleted\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      // ... and so has its autocreated config set\n-      assertFalse(\"The auto-created config set should have been deleted with its collection\", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));\n-    }\n-  }\n-}\n"}}, {"oid": "0124ea6c03411c51f355039482361c26bcc7a945", "url": "https://github.com/apache/lucene-solr/commit/0124ea6c03411c51f355039482361c26bcc7a945", "message": "SOLR-13438: applied changes from PR comments", "committedDate": "2020-08-20T09:11:18Z", "type": "commit"}, {"oid": "93df217b3cecfa34a23554e6a6f5de650ad662f0", "url": "https://github.com/apache/lucene-solr/commit/93df217b3cecfa34a23554e6a6f5de650ad662f0", "message": "Merge branch 'master' into solr13438", "committedDate": "2020-08-20T09:14:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTM4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1759#discussion_r474835389", "bodyText": "\ud83d\udc4d", "author": "madrob", "createdAt": "2020-08-21T17:36:21Z", "path": "solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest.java", "diffHunk": "@@ -32,69 +28,151 @@\n import org.apache.solr.util.TimeOut;\n import org.junit.Test;\n \n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n public class SimpleCollectionCreateDeleteTest extends AbstractFullDistribZkTestBase {\n \n-  public SimpleCollectionCreateDeleteTest() {\n-    sliceCount = 1;\n-  }\n-\n-  @Test\n-  @ShardsFixed(num = 1)\n-  public void test() throws Exception {\n-    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n-    String notOverseerNode = null;\n-    for (CloudJettyRunner cloudJetty : cloudJettys) {\n-      if (!overseerNode.equals(cloudJetty.nodeName)) {\n-        notOverseerNode = cloudJetty.nodeName;\n-        break;\n-      }\n+    public SimpleCollectionCreateDeleteTest() {\n+        sliceCount = 1;\n     }\n-    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n-    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n-            .setCreateNodeSet(overseerNode);\n-\n-    NamedList<Object> request = create.process(cloudClient).getResponse();\n-\n-    if (request.get(\"success\") != null) {\n-      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-\n-      @SuppressWarnings({\"rawtypes\"})\n-      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n-      cloudClient.request(delete);\n-\n-      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n-      \n-      // currently, removing a collection does not wait for cores to be unloaded\n-      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n-      while (true) {\n-        \n-        if( timeout.hasTimedOut() ) {\n-          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n+\n+    @Test\n+    @ShardsFixed(num = 1)\n+    public void testCreateAndDeleteThenCreateAgain() throws Exception {", "originalCommit": "93df217b3cecfa34a23554e6a6f5de650ad662f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}