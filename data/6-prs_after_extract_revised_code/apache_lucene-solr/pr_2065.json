{"pr_number": 2065, "pr_title": "SOLR-14977 :  ContainerPlugins should be configurable", "pr_createdAt": "2020-11-06T04:17:29Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2065", "timeline": [{"oid": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "url": "https://github.com/apache/lucene-solr/commit/b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "message": "SOLR-14977 :  ContainerPlugins should be configurable", "committedDate": "2020-11-06T04:16:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTE2Ng==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255166", "bodyText": "This is super fragile and fails if we have Widget implements ConfigurablePlugin<WidgetInfo> and then NewerWidget extends Widget", "author": "madrob", "createdAt": "2020-11-08T04:33:24Z", "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -372,9 +396,27 @@ public void init() throws Exception {\n         holders.add(new ApiHolder((AnnotatedApi) api));\n       }\n     }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private Class getConfigObj(Object o) {\n+      Type[] interfaces = o.getClass().getGenericInterfaces();", "originalCommit": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NzA0MQ==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519487041", "bodyText": "fixed", "author": "noblepaul", "createdAt": "2020-11-08T22:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "df7840dee5894dd819fbd552f1cbe002729e6dd5", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\nindex 690aee872d6..883767a49f9 100644\n--- a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n+++ b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n\n@@ -397,19 +397,26 @@ public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapW\n       }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private Class getConfigObj(Object o) {\n-      Type[] interfaces = o.getClass().getGenericInterfaces();\n+  }\n+\n+  /**Get the generic type of a {@link ConfigurablePlugin}\n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  public static Class getConfigClass(ConfigurablePlugin<?> o) {\n+    Class klas = o.getClass();\n+    do {\n+      Type[] interfaces = klas.getGenericInterfaces();\n       for (Type type : interfaces) {\n         if (type instanceof ParameterizedType) {\n           ParameterizedType parameterizedType = (ParameterizedType) type;\n-          if(parameterizedType.getRawType() == ConfigurablePlugin.class) {\n+          if (parameterizedType.getRawType() == ConfigurablePlugin.class) {\n             return (Class) parameterizedType.getActualTypeArguments()[0];\n           }\n         }\n       }\n-      return null;\n-    }\n+      klas = klas.getSuperclass();\n+    } while (klas != null && klas != Object.class);\n+    return null;\n   }\n \n   public ApiInfo createInfo(Map<String,Object> info, List<String> errs) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTIwNw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255207", "bodyText": "At the very least, don't suppress raw types here.", "author": "madrob", "createdAt": "2020-11-08T04:33:49Z", "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -372,9 +396,27 @@ public void init() throws Exception {\n         holders.add(new ApiHolder((AnnotatedApi) api));\n       }\n     }\n+\n+    @SuppressWarnings(\"rawtypes\")", "originalCommit": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ5NTc5Mw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519495793", "bodyText": "it's not required", "author": "noblepaul", "createdAt": "2020-11-08T23:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "df7840dee5894dd819fbd552f1cbe002729e6dd5", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\nindex 690aee872d6..883767a49f9 100644\n--- a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n+++ b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n\n@@ -397,19 +397,26 @@ public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapW\n       }\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private Class getConfigObj(Object o) {\n-      Type[] interfaces = o.getClass().getGenericInterfaces();\n+  }\n+\n+  /**Get the generic type of a {@link ConfigurablePlugin}\n+   */\n+  @SuppressWarnings(\"rawtypes\")\n+  public static Class getConfigClass(ConfigurablePlugin<?> o) {\n+    Class klas = o.getClass();\n+    do {\n+      Type[] interfaces = klas.getGenericInterfaces();\n       for (Type type : interfaces) {\n         if (type instanceof ParameterizedType) {\n           ParameterizedType parameterizedType = (ParameterizedType) type;\n-          if(parameterizedType.getRawType() == ConfigurablePlugin.class) {\n+          if (parameterizedType.getRawType() == ConfigurablePlugin.class) {\n             return (Class) parameterizedType.getActualTypeArguments()[0];\n           }\n         }\n       }\n-      return null;\n-    }\n+      klas = klas.getSuperclass();\n+    } while (klas != null && klas != Object.class);\n+    return null;\n   }\n \n   public ApiInfo createInfo(Map<String,Object> info, List<String> errs) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTQ0Ng==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255446", "bodyText": "Does T need to extend PluginMeta as you do in the unit test or no?", "author": "madrob", "createdAt": "2020-11-08T04:37:11Z", "path": "solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.api;\n+\n+/**Implement this interface if your plugin needs to accept some configuration\n+ * \n+ * @param <T> the configuration Object type\n+ */\n+public interface ConfigurablePlugin<T> {", "originalCommit": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NDQxMA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519484410", "bodyText": "No,it does not have to. I did it to make writing the test easy", "author": "noblepaul", "createdAt": "2020-11-08T22:13:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java b/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\nindex 969cc8dc754..e549bac30f5 100644\n--- a/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\n+++ b/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\n\n@@ -27,5 +27,5 @@ public interface ConfigurablePlugin<T> {\n    * \n    * @param cfg value deserialized from JSON\n    */\n-  void initConfig(T cfg);\n+  void configure(T cfg);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTQ1Ng==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519255456", "bodyText": "Is this a security risk? Why do we need this?", "author": "madrob", "createdAt": "2020-11-08T04:37:32Z", "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -69,7 +72,8 @@\n public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapWriter, Closeable {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n-  private final ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper();\n+  private static final ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()\n+      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "originalCommit": "b59e29d90f585b8a8f2ee8d3dfd2a36ca968d075", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NDU3NA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r519484574", "bodyText": "This is not a security risk. In general it's better to ignore extra attributes for backcompat. Imagine adding an extra attribute to your plugin in a newer version and old Solr nodes failing because of that", "author": "noblepaul", "createdAt": "2020-11-08T22:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1NTQ1Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "df7840dee5894dd819fbd552f1cbe002729e6dd5", "url": "https://github.com/apache/lucene-solr/commit/df7840dee5894dd819fbd552f1cbe002729e6dd5", "message": "support super classes implementing COnfigurablePlugin<T>", "committedDate": "2020-11-08T22:35:41Z", "type": "commit"}, {"oid": "1e1a164dad555c726c9d1b09ff553b186ce5e12d", "url": "https://github.com/apache/lucene-solr/commit/1e1a164dad555c726c9d1b09ff553b186ce5e12d", "message": "more tests", "committedDate": "2020-11-08T23:58:48Z", "type": "commit"}, {"oid": "196d610783315930963558963eedfdc1ca1df252", "url": "https://github.com/apache/lucene-solr/commit/196d610783315930963558963eedfdc1ca1df252", "message": "cleanup", "committedDate": "2020-11-09T00:44:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4Mzg1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520483853", "bodyText": "Maybe configure(T cfg)? the current name looks awkward.", "author": "sigram", "createdAt": "2020-11-10T11:15:28Z", "path": "solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.api;\n+\n+/**Implement this interface if your plugin needs to accept some configuration\n+ * \n+ * @param <T> the configuration Object type\n+ */\n+public interface ConfigurablePlugin<T> {\n+\n+  /**This is invoked soon after the Object is initialized\n+   * \n+   * @param cfg value deserialized from JSON\n+   */\n+  void initConfig(T cfg);", "originalCommit": "196d610783315930963558963eedfdc1ca1df252", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java b/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\nindex 969cc8dc754..e549bac30f5 100644\n--- a/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\n+++ b/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\n\n@@ -27,5 +27,5 @@ public interface ConfigurablePlugin<T> {\n    * \n    * @param cfg value deserialized from JSON\n    */\n-  void initConfig(T cfg);\n+  void configure(T cfg);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NTMzNQ==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520485335", "bodyText": "ObjectMapper is a relatively heavy object, we should not create new instances in every class that needs it - maybe put a common instance somewhere in Utils?", "author": "sigram", "createdAt": "2020-11-10T11:17:58Z", "path": "solr/core/src/java/org/apache/solr/api/AnnotatedApi.java", "diffHunk": "@@ -222,7 +223,8 @@ public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n     final String command;\n     final MethodHandle method;\n     final Object obj;\n-    ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper();\n+    ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()", "originalCommit": "196d610783315930963558963eedfdc1ca1df252", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/AnnotatedApi.java b/solr/core/src/java/org/apache/solr/api/AnnotatedApi.java\nindex df373ea3601..9ec86ce7595 100644\n--- a/solr/core/src/java/org/apache/solr/api/AnnotatedApi.java\n+++ b/solr/core/src/java/org/apache/solr/api/AnnotatedApi.java\n\n@@ -223,8 +225,7 @@ public class AnnotatedApi extends Api implements PermissionNameProvider , Closea\n     final String command;\n     final MethodHandle method;\n     final Object obj;\n-    ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()\n-        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n     int paramsCount;\n     @SuppressWarnings({\"rawtypes\"})\n     Class parameterClass;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520486344", "bodyText": "Does PluginMeta still need a separate pathPrefix? I think this could become a config property.", "author": "sigram", "createdAt": "2020-11-10T11:19:43Z", "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -114,6 +118,16 @@ public synchronized ApiInfo getPlugin(String name) {\n     return currentPlugins.get(name);\n   }\n \n+  static class PluginMetaHolder {\n+    private final Map<String, Object> original;\n+    private final PluginMeta meta;", "originalCommit": "196d610783315930963558963eedfdc1ca1df252", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNjEyMw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520936123", "bodyText": "It's a standard property , that is a part of the plugin definition", "author": "noblepaul", "createdAt": "2020-11-10T23:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyMzM2Mw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521323363", "bodyText": "It made sense when all plugins were request handlers, which is no longer true. In case of plugins that are not handlers a \"standard\" pathPrefix property doesn't make sense.", "author": "sigram", "createdAt": "2020-11-11T12:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwODA2Mg==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521708062", "bodyText": "PluginMeta is the information used by the framework. It's optional, so your plugin can choose to ignore it", "author": "noblepaul", "createdAt": "2020-11-11T23:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzOTcyMg==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r522039722", "bodyText": "I know that I can ignore it - my point was that this property is a relic of the time when we allowed only Api handlers as plugins. Now when non-Api plugins are first-class citizens half of the time this property doesn't make sense because it's specific only to Api plugins - so it should not be exposed as a standard property for all plugins.", "author": "sigram", "createdAt": "2020-11-12T11:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4OTA0OQ==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r524089049", "bodyText": "It can be a specific sub-class of PluginMeta say EndPointPluginMeta .\nHowever, that change does not belong here", "author": "noblepaul", "createdAt": "2020-11-16T10:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIxMTY0MA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r524211640", "bodyText": "Let's make it a sub-class.\n(I would argue that it belongs in this PR because it's a part of the configuration mechanism for the plugins that this PR defines. Since we are adding a flexible config bean it doesn't make sense to still keep the old primitive field. And you can always ADD fields in subclasses but removing them is much harder... ;) )", "author": "sigram", "createdAt": "2020-11-16T12:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\nindex 883767a49f9..62dab206eda 100644\n--- a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n+++ b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n\n@@ -126,6 +126,20 @@ public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapW\n       this.original = original;\n       meta = mapper.readValue(Utils.toJSON(original), PluginMeta.class);\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+      if (obj instanceof PluginMetaHolder) {\n+        PluginMetaHolder that = (PluginMetaHolder) obj;\n+        return Objects.equals(this.original,that.original);\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return original.hashCode();\n+    }\n   }\n   @SuppressWarnings(\"unchecked\")\n   public synchronized void refresh() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjYxNg==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520486616", "bodyText": "Whitespace.", "author": "sigram", "createdAt": "2020-11-10T11:20:13Z", "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -349,7 +365,7 @@ public ApiInfo(PluginMeta info, List<String> errs) {\n       }\n     }\n \n-    @SuppressWarnings({\"rawtypes\"})\n+    @SuppressWarnings({\"rawtypes\",\"unchecked\"})", "originalCommit": "196d610783315930963558963eedfdc1ca1df252", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\nindex 883767a49f9..62dab206eda 100644\n--- a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n+++ b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n\n@@ -365,7 +379,7 @@ public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapW\n       }\n     }\n \n-    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     public void init() throws Exception {\n       if (this.holders != null) return;\n       Constructor constructor = klas.getConstructors()[0];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4NjcwNw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520486707", "bodyText": "Whitespace.", "author": "sigram", "createdAt": "2020-11-10T11:20:22Z", "path": "solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java", "diffHunk": "@@ -360,6 +376,14 @@ public void init() throws Exception {\n       } else {\n         throw new RuntimeException(\"Must have a no-arg constructor or CoreContainer constructor \");\n       }\n+      if (instance instanceof ConfigurablePlugin) {\n+        Class c = getConfigClass((ConfigurablePlugin<?>) instance);\n+        if(c != null) {", "originalCommit": "196d610783315930963558963eedfdc1ca1df252", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\nindex 883767a49f9..62dab206eda 100644\n--- a/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n+++ b/solr/core/src/java/org/apache/solr/api/ContainerPluginsRegistry.java\n\n@@ -378,11 +392,10 @@ public class ContainerPluginsRegistry implements ClusterPropertiesListener, MapW\n       }\n       if (instance instanceof ConfigurablePlugin) {\n         Class c = getConfigClass((ConfigurablePlugin<?>) instance);\n-        if(c != null) {\n-          Object initVal =  mapper.readValue(Utils.toJSON(holder.original), c);\n-          ((ConfigurablePlugin) instance).initConfig(initVal);\n+        if (c != null) {\n+          Object initVal = mapper.readValue(Utils.toJSON(holder.original), c);\n+          ((ConfigurablePlugin) instance).configure(initVal);\n         }\n-\n       }\n       if (instance instanceof ResourceLoaderAware) {\n         try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4ODMzMQ==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r520488331", "bodyText": "This example may be confusing because in general case configuration classes don't have to subclass PluginMeta. I propose removing this subclassing here to make it clear that's the case.", "author": "sigram", "createdAt": "2020-11-10T11:23:15Z", "path": "solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java", "diffHunk": "@@ -312,6 +340,45 @@ public void testApiFromPackage() throws Exception {\n     }\n   }\n \n+  public static class CC1 extends CC {\n+\n+  }\n+  public static class CC2 extends CC1 {\n+\n+  }\n+  public static class CC implements ConfigurablePlugin<CConfig> {\n+    private CConfig cfg;\n+\n+\n+\n+    @Override\n+    public void initConfig(CConfig cfg) {\n+      this.cfg = cfg;\n+\n+    }\n+\n+    @EndPoint(method = GET,\n+        path = \"/hello/plugin\",\n+        permission = PermissionNameProvider.Name.READ_PERM)\n+    public void m2(SolrQueryRequest req, SolrQueryResponse rsp) {\n+      rsp.add(\"config\", cfg);\n+    }\n+\n+  }\n+\n+  public static class CConfig extends PluginMeta {", "originalCommit": "196d610783315930963558963eedfdc1ca1df252", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b7983a765c883014ad47d7a1735d7d337047846e", "chunk": "diff --git a/solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java b/solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java\nindex 7f9a9279d3b..01ab39f3162 100644\n--- a/solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java\n+++ b/solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java\n\n@@ -352,7 +367,7 @@ public class TestContainerPlugin extends SolrCloudTestCase {\n \n \n     @Override\n-    public void initConfig(CConfig cfg) {\n+    public void configure(CConfig cfg) {\n       this.cfg = cfg;\n \n     }\n"}}, {"oid": "b7983a765c883014ad47d7a1735d7d337047846e", "url": "https://github.com/apache/lucene-solr/commit/b7983a765c883014ad47d7a1735d7d337047846e", "message": "incorporating several review feedbacks. Added more tests. Changed the config object type", "committedDate": "2020-11-10T23:58:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyMjE4NA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521322184", "bodyText": "I don't understand this change. Do all config beans have to implement ReflectMapWriter?\nIf that's the case, and all config beans have to implement ReflectMapWriter then that's what the generic type in ConfigurablePlugin should use. If not then this test is misleading again because it suggests you have to implement additional interfaces to have a usable config bean.", "author": "sigram", "createdAt": "2020-11-11T12:25:27Z", "path": "solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java", "diffHunk": "@@ -366,7 +381,7 @@ public void m2(SolrQueryRequest req, SolrQueryResponse rsp) {\n \n   }\n \n-  public static class CConfig extends PluginMeta {\n+  public static class CConfig implements ReflectMapWriter {", "originalCommit": "b7983a765c883014ad47d7a1735d7d337047846e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNzY1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521707653", "bodyText": "All beans must implement MapWriter", "author": "noblepaul", "createdAt": "2020-11-11T23:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyMjE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDk4OA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r522034988", "bodyText": "Then we have to explicitly say so in ConfigurablePlugin<T extends MapWriter>.", "author": "sigram", "createdAt": "2020-11-12T11:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyMjE4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNTI2MA==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521325260", "bodyText": "Oh, I didn't notice before that it was created for each request. That was horrible!\nStill, we already have one instance here and another (configured the same) in ContainerPluginsRegistry. We should probably expose this instance here and reuse it in ContainerPluginsRegistry.", "author": "sigram", "createdAt": "2020-11-11T12:31:13Z", "path": "solr/core/src/java/org/apache/solr/api/AnnotatedApi.java", "diffHunk": "@@ -62,6 +63,8 @@\n \n public class AnnotatedApi extends Api implements PermissionNameProvider , Closeable {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private static final ObjectMapper mapper = SolrJacksonAnnotationInspector.createObjectMapper()", "originalCommit": "b7983a765c883014ad47d7a1735d7d337047846e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNzM2OQ==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521707369", "bodyText": "It was not created per request. it was created per API", "author": "noblepaul", "createdAt": "2020-11-11T23:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNTI2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNTg4Mw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521325883", "bodyText": "Should this be <T extends ReflectMapWriter> ? See my comment below in TestContainerPlugin.java", "author": "sigram", "createdAt": "2020-11-11T12:32:22Z", "path": "solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.solr.api;\n+\n+/**Implement this interface if your plugin needs to accept some configuration\n+ * \n+ * @param <T> the configuration Object type\n+ */\n+public interface ConfigurablePlugin<T> {", "originalCommit": "b7983a765c883014ad47d7a1735d7d337047846e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNzUwMw==", "url": "https://github.com/apache/lucene-solr/pull/2065#discussion_r521707503", "bodyText": "may be <T extends MapWriter>", "author": "noblepaul", "createdAt": "2020-11-11T23:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMyNTg4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "71c52f68d1a4e7dbce8eb6a758cba36c173a524f", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java b/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\nindex e549bac30f5..ef13d8a312a 100644\n--- a/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\n+++ b/solr/core/src/java/org/apache/solr/api/ConfigurablePlugin.java\n\n@@ -17,11 +17,13 @@\n \n package org.apache.solr.api;\n \n+import org.apache.solr.common.MapWriter;\n+\n /**Implement this interface if your plugin needs to accept some configuration\n  * \n  * @param <T> the configuration Object type\n  */\n-public interface ConfigurablePlugin<T> {\n+public interface ConfigurablePlugin<T extends MapWriter> {\n \n   /**This is invoked soon after the Object is initialized\n    * \n"}}, {"oid": "71c52f68d1a4e7dbce8eb6a758cba36c173a524f", "url": "https://github.com/apache/lucene-solr/commit/71c52f68d1a4e7dbce8eb6a758cba36c173a524f", "message": "configure() should use a method that implements MapWriter", "committedDate": "2020-11-16T12:37:21Z", "type": "commit"}, {"oid": "9481353bb6ab65cabdc311553d1d5cdae21f5816", "url": "https://github.com/apache/lucene-solr/commit/9481353bb6ab65cabdc311553d1d5cdae21f5816", "message": "CHANGES.txt", "committedDate": "2020-11-16T12:40:29Z", "type": "commit"}, {"oid": "cf8d1f01e8247a755762582f1905686553039493", "url": "https://github.com/apache/lucene-solr/commit/cf8d1f01e8247a755762582f1905686553039493", "message": "Merge branch 'master' into jira/solr14977", "committedDate": "2020-11-16T12:41:44Z", "type": "commit"}]}