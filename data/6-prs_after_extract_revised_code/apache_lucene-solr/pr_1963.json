{"pr_number": 1963, "pr_title": "SOLR-14827: Refactor schema loading to not use XPath", "pr_createdAt": "2020-10-08T11:18:03Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1963", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjcwMA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702700", "bodyText": "NULL_DEREFERENCE:  object returned by getDocument(schemaConf) could be null and is dereferenced at line 496.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:03:59Z", "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -474,23 +481,28 @@ protected Analyzer getWrappedAnalyzer(String fieldName) {\n     }\n   }\n \n-  protected void readSchema(InputSource is) {\n+  protected void readSchema(ConfigSetService.ConfigResource is) {\n     assert null != is : \"schema InputSource should never be null\";\n     try {\n-      // pass the config resource loader to avoid building an empty one for no reason:\n-      // in the current case though, the stream is valid so we wont load the resource by name\n-      XmlConfigFile schemaConf = new XmlConfigFile(loader, SCHEMA, is, SLASH+SCHEMA+SLASH, substitutableProperties);\n-      Document document = schemaConf.getDocument();\n-      final XPath xpath = schemaConf.getXPath();\n-      String expression = stepsToPath(SCHEMA, AT + NAME);\n-      Node nd = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n+      rootNode = is.getParsed();\n+      if(rootNode == null) {\n+        // pass the config resource loader to avoid building an empty one for no reason:\n+        // in the current case though, the stream is valid so we wont load the resource by name\n+        XmlConfigFile schemaConf = new XmlConfigFile(loader, SCHEMA, is.getSource(), SLASH+SCHEMA+SLASH, null);\n+//      Document document = schemaConf.getDocument();\n+//      final XPath xpath = schemaConf.getXPath();\n+//      String expression = stepsToPath(SCHEMA, AT + NAME);\n+//      Node nd = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n+        rootNode = new DataConfigNode(new DOMConfigNode(schemaConf.getDocument().getDocumentElement())) ;", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\nindex 3f6a7cbd9c2..c4511767186 100644\n--- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\n+++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\n\n@@ -481,21 +473,17 @@ public class IndexSchema {\n     }\n   }\n \n-  protected void readSchema(ConfigSetService.ConfigResource is) {\n+  protected void readSchema(InputSource is) {\n     assert null != is : \"schema InputSource should never be null\";\n     try {\n-      rootNode = is.getParsed();\n-      if(rootNode == null) {\n-        // pass the config resource loader to avoid building an empty one for no reason:\n-        // in the current case though, the stream is valid so we wont load the resource by name\n-        XmlConfigFile schemaConf = new XmlConfigFile(loader, SCHEMA, is.getSource(), SLASH+SCHEMA+SLASH, null);\n+      // pass the config resource loader to avoid building an empty one for no reason:\n+      // in the current case though, the stream is valid so we wont load the resource by name\n+      XmlConfigFile schemaConf = new XmlConfigFile(loader, SCHEMA, is, SLASH+SCHEMA+SLASH, substitutableProperties);\n //      Document document = schemaConf.getDocument();\n //      final XPath xpath = schemaConf.getXPath();\n //      String expression = stepsToPath(SCHEMA, AT + NAME);\n //      Node nd = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n-        rootNode = new DataConfigNode(new DOMConfigNode(schemaConf.getDocument().getDocumentElement())) ;\n-        is.storeParsed(rootNode);\n-      }\n+      ConfigNode rootNode = schemaConf.rootNode();\n       name = rootNode.attributes().get(\"name\");\n       StringBuilder sb = new StringBuilder();\n       // Another case where the initialization from the test harness is different than the \"real world\"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjcyOQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702729", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method IndexSchema.readSchema(...) writes to field this.dynamicCopyFields outside of synchronization.\nReporting because another access to the same memory occurs on a background thread, although this access may not.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:01Z", "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -608,7 +629,7 @@ protected void readSchema(InputSource is) {\n       // expression = \"/schema/copyField\";\n \n       dynamicCopyFields = new DynamicCopy[] {};", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53817fef47ca9e3dd08127f03891638bd4ad31a0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\nindex 3f6a7cbd9c2..c2f3579ba1e 100644\n--- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\n+++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\n\n@@ -625,8 +588,6 @@ public class IndexSchema {\n       }\n \n       /////////////// parse out copyField commands ///////////////\n-      // Map<String,ArrayList<SchemaField>> cfields = new HashMap<String,ArrayList<SchemaField>>();\n-      // expression = \"/schema/copyField\";\n \n       dynamicCopyFields = new DynamicCopy[] {};\n       loadCopyFields(rootNode);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjc1MQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702751", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method ManagedIndexSchemaFactory.create(...) reads without synchronization from this.loadedResource. Potentially races with write in method ManagedIndexSchemaFactory.create(...).\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:03Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -174,8 +175,8 @@ public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\nindex a7e6aefd5a4..ef5df423b87 100644\n--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n\n@@ -175,8 +174,8 @@ public class ManagedIndexSchemaFactory extends IndexSchemaFactory implements Sol\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n-    schema = new ManagedIndexSchema(config, loadedResource, () -> inputSource, isMutable,\n-        managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n+    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n+                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n     if (shouldUpgrade) {\n       // Persist the managed schema if it doesn't already exist\n       synchronized (schema.getSchemaUpdateLock()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjc2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702765", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method ManagedIndexSchemaFactory.create(...) reads without synchronization from this.shouldUpgrade. Potentially races with write in method ManagedIndexSchemaFactory.create(...).\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:05Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -174,8 +175,8 @@ public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n-    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n-                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n+    schema = new ManagedIndexSchema(config, loadedResource, () -> inputSource, isMutable,\n+        managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n     if (shouldUpgrade) {", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\nindex a7e6aefd5a4..ef5df423b87 100644\n--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n\n@@ -175,8 +174,8 @@ public class ManagedIndexSchemaFactory extends IndexSchemaFactory implements Sol\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n-    schema = new ManagedIndexSchema(config, loadedResource, () -> inputSource, isMutable,\n-        managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n+    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n+                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n     if (shouldUpgrade) {\n       // Persist the managed schema if it doesn't already exist\n       synchronized (schema.getSchemaUpdateLock()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjc3OQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702779", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method ManagedIndexSchemaFactory.create(...) indirectly writes to field config.overlay outside of synchronization.\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:06Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -174,8 +175,8 @@ public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n-    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n-                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n+    schema = new ManagedIndexSchema(config, loadedResource, () -> inputSource, isMutable,\n+        managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\nindex a7e6aefd5a4..ef5df423b87 100644\n--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n\n@@ -175,8 +174,8 @@ public class ManagedIndexSchemaFactory extends IndexSchemaFactory implements Sol\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n-    schema = new ManagedIndexSchema(config, loadedResource, () -> inputSource, isMutable,\n-        managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n+    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n+                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n     if (shouldUpgrade) {\n       // Persist the managed schema if it doesn't already exist\n       synchronized (schema.getSchemaUpdateLock()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjc5Mw==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702793", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method ManagedIndexSchemaFactory.create(...) writes to field this.config outside of synchronization.\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:08Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -109,7 +110,7 @@ public String getSchemaResourceName(String cdResourceName) {\n    * renamed by appending the extension named in {@link #UPGRADED_SCHEMA_EXTENSION}.\n    */\n   @Override\n-  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n+  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n     this.resourceName = resourceName;\n     this.config = config;", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\nindex a7e6aefd5a4..ef5df423b87 100644\n--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n\n@@ -110,7 +109,7 @@ public class ManagedIndexSchemaFactory extends IndexSchemaFactory implements Sol\n    * renamed by appending the extension named in {@link #UPGRADED_SCHEMA_EXTENSION}.\n    */\n   @Override\n-  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n+  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     this.resourceName = resourceName;\n     this.config = config;\n     this.loader = config.getResourceLoader();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjgxMg==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702812", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method ManagedIndexSchemaFactory.create(...) writes to field this.loader outside of synchronization.\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:09Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -109,7 +110,7 @@ public String getSchemaResourceName(String cdResourceName) {\n    * renamed by appending the extension named in {@link #UPGRADED_SCHEMA_EXTENSION}.\n    */\n   @Override\n-  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n+  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n     this.resourceName = resourceName;\n     this.config = config;\n     this.loader = config.getResourceLoader();", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\nindex a7e6aefd5a4..ef5df423b87 100644\n--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n\n@@ -110,7 +109,7 @@ public class ManagedIndexSchemaFactory extends IndexSchemaFactory implements Sol\n    * renamed by appending the extension named in {@link #UPGRADED_SCHEMA_EXTENSION}.\n    */\n   @Override\n-  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n+  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     this.resourceName = resourceName;\n     this.config = config;\n     this.loader = config.getResourceLoader();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMjgyOQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r501702829", "bodyText": "THREAD_SAFETY_VIOLATION:  Unprotected write. Non-private method ManagedIndexSchemaFactory.create(...) writes to field this.resourceName outside of synchronization.\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-10-08T13:04:10Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -109,7 +110,7 @@ public String getSchemaResourceName(String cdResourceName) {\n    * renamed by appending the extension named in {@link #UPGRADED_SCHEMA_EXTENSION}.\n    */\n   @Override\n-  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n+  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n     this.resourceName = resourceName;", "originalCommit": "1b991edc3eca1ca16f5a6b7074eaf43264ec9d2e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\nindex a7e6aefd5a4..ef5df423b87 100644\n--- a/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n+++ b/solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java\n\n@@ -110,7 +109,7 @@ public class ManagedIndexSchemaFactory extends IndexSchemaFactory implements Sol\n    * renamed by appending the extension named in {@link #UPGRADED_SCHEMA_EXTENSION}.\n    */\n   @Override\n-  public ManagedIndexSchema create(String resourceName, SolrConfig config, ConfigSetService configSetService) {\n+  public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     this.resourceName = resourceName;\n     this.config = config;\n     this.loader = config.getResourceLoader();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1NTM0Mg==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502655342", "bodyText": "this probably needs to be static.", "author": "madrob", "createdAt": "2020-10-09T20:25:39Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();", "originalCommit": "4772a5c9dc3248beea053e5c63e6a86775e4f35b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MzgzNg==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502753836", "bodyText": "It's an interface. All fields are public static final by default", "author": "noblepaul", "createdAt": "2020-10-10T06:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1NTM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 0f6a813e7ab..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1NjE3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502656177", "bodyText": "Please add javadoc for what these methods do", "author": "madrob", "createdAt": "2020-10-09T20:27:38Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();\n+\n+  /**\n+   * Name of the tag\n+   */\n+  String name();\n+\n+  /**\n+   * Text value of the node\n+   */\n+  String textValue();\n+\n+  /**\n+   * Attributes\n+   */\n+  SimpleMap<String> attributes();\n+\n+  /**\n+   * Child by name\n+   */\n+  default ConfigNode child(String name) {\n+    return child(null, name);\n+  }\n+\n+  default ConfigNode child(Predicate<ConfigNode> test, String name) {", "originalCommit": "4772a5c9dc3248beea053e5c63e6a86775e4f35b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 0f6a813e7ab..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1NjI3Ng==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502656276", "bodyText": "I don't understand what the return value of the function is supposed to represent", "author": "madrob", "createdAt": "2020-10-09T20:27:53Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();\n+\n+  /**\n+   * Name of the tag\n+   */\n+  String name();\n+\n+  /**\n+   * Text value of the node\n+   */\n+  String textValue();\n+\n+  /**\n+   * Attributes\n+   */\n+  SimpleMap<String> attributes();\n+\n+  /**\n+   * Child by name\n+   */\n+  default ConfigNode child(String name) {\n+    return child(null, name);\n+  }\n+\n+  default ConfigNode child(Predicate<ConfigNode> test, String name) {\n+    ConfigNode[] result = new ConfigNode[1];\n+    forEachChild(it -> {\n+      if (name!=null && !name.equals(it.name())) return Boolean.TRUE;\n+      if (test == null || test.test(it)) {\n+        result[0] = it;\n+        return Boolean.FALSE;\n+      }\n+      return Boolean.TRUE;\n+    });\n+    return result[0];\n+  }\n+\n+  default List<ConfigNode> children(Predicate<ConfigNode> test, String... nodeNames) {\n+    return children(test, nodeNames == null ? Collections.emptySet() : Set.of(nodeNames));\n+  }\n+\n+  default List<ConfigNode> children(Predicate<ConfigNode> test, Set<String> set) {\n+    List<ConfigNode> result = new ArrayList<>();\n+    forEachChild(it -> {\n+      if (set != null && !set.isEmpty() && !set.contains(it.name())) return Boolean.TRUE;\n+      if (test == null || test.test(it)) result.add(it);\n+      return Boolean.TRUE;\n+    });\n+    return result;\n+  }\n+\n+  default List<ConfigNode> children(String name) {\n+    return children(null, Collections.singleton(name));\n+  }\n+\n+  void forEachChild(Function<ConfigNode, Boolean> fun);", "originalCommit": "4772a5c9dc3248beea053e5c63e6a86775e4f35b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 0f6a813e7ab..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MDkyMQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502660921", "bodyText": "can we use Set.of instead of ImmutableSet", "author": "madrob", "createdAt": "2020-10-09T20:39:39Z", "path": "solr/core/src/java/org/apache/solr/util/DOMUtil.java", "diffHunk": "@@ -39,9 +42,23 @@\n \n   public static final String XML_RESERVED_PREFIX = \"xml\";\n \n+  static final Set<String>  NL_TAGS = ImmutableSet.of(\"str\", \"int\",\"long\",\"float\",\"double\",\"bool\");", "originalCommit": "4772a5c9dc3248beea053e5c63e6a86775e4f35b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MzIzNA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502753234", "bodyText": "Set.of() is java 9. I'm hoping to put this into Solr 8.x", "author": "noblepaul", "createdAt": "2020-10-10T06:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MDkyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5746feef7c6cf029d72e6c88cf25c93c41ef54c6", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/util/DOMUtil.java b/solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java\nsimilarity index 98%\nrename from solr/core/src/java/org/apache/solr/util/DOMUtil.java\nrename to solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java\nindex 9e23c35fd83..2b3219d662a 100644\n--- a/solr/core/src/java/org/apache/solr/util/DOMUtil.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java\n\n@@ -42,7 +40,7 @@ public class DOMUtil {\n \n   public static final String XML_RESERVED_PREFIX = \"xml\";\n \n-  static final Set<String>  NL_TAGS = ImmutableSet.of(\"str\", \"int\",\"long\",\"float\",\"double\",\"bool\");\n+  public static final Set<String>  NL_TAGS = ImmutableSet.of(\"str\", \"int\",\"long\",\"float\",\"double\",\"bool\");\n \n \n   public static Map<String,String> toMap(NamedNodeMap attrs) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2NjE1OQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r502666159", "bodyText": "missing @defaultOperator?", "author": "madrob", "createdAt": "2020-10-09T20:53:08Z", "path": "solr/core/src/java/org/apache/solr/schema/IndexSchema.java", "diffHunk": "@@ -537,26 +554,30 @@ protected void readSchema(InputSource is) {\n       }\n \n       //                      /schema/defaultSearchField/text()\n-      expression = stepsToPath(SCHEMA, \"defaultSearchField\", TEXT_FUNCTION);\n-      node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n+//      expression = stepsToPath(SCHEMA, \"defaultSearchField\", TEXT_FUNCTION);\n+//      node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n+      ConfigNode node = rootNode.child(\"defaultSearchField\");\n       if (node != null) {\n         throw new SolrException(ErrorCode.SERVER_ERROR, \"Setting defaultSearchField in schema not supported since Solr 7\");\n       }\n+      node = rootNode.child(\"solrQueryParser\");", "originalCommit": "4772a5c9dc3248beea053e5c63e6a86775e4f35b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "504740f1551591f35f690b6cb96c4b684e085a7a", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\nindex 3f6a7cbd9c2..97d786b0206 100644\n--- a/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\n+++ b/solr/core/src/java/org/apache/solr/schema/IndexSchema.java\n\n@@ -560,16 +561,16 @@ public class IndexSchema {\n       if (node != null) {\n         throw new SolrException(ErrorCode.SERVER_ERROR, \"Setting defaultSearchField in schema not supported since Solr 7\");\n       }\n-      node = rootNode.child(\"solrQueryParser\");\n \n-      //                      /schema/solrQueryParser/@defaultOperator\n+      ///schema/solrQueryParser/@defaultOperator\n //      expression = stepsToPath(SCHEMA, \"solrQueryParser\", AT + \"defaultOperator\");\n //      node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n+      node = rootNode.child(it -> it.attributes().get(\"defaultOperator\") != null, \"solrQueryParser\");\n       if (node != null) {\n         throw new SolrException(ErrorCode.SERVER_ERROR, \"Setting default operator in schema (solrQueryParser/@defaultOperator) not supported\");\n       }\n \n-      //                      /schema/uniqueKey/text()\n+      //  /schema/uniqueKey/text()\n //      expression = stepsToPath(SCHEMA, UNIQUE_KEY, TEXT_FUNCTION);\n //      node = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);\n       node = rootNode.child(UNIQUE_KEY);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMTE3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503331177", "bodyText": "nit: make final?", "author": "madrob", "createdAt": "2020-10-12T14:23:36Z", "path": "solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java", "diffHunk": "@@ -39,14 +43,28 @@\n  */\n public class CloudConfigSetService extends ConfigSetService {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-  \n+  private Map<String, ConfigCacheEntry> cache = new ConcurrentHashMap<>();", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java b/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java\nindex 54c515e67b5..644b49ee47f 100644\n--- a/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java\n+++ b/solr/core/src/java/org/apache/solr/cloud/CloudConfigSetService.java\n\n@@ -43,7 +39,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class CloudConfigSetService extends ConfigSetService {\n   private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-  private Map<String, ConfigCacheEntry> cache = new ConcurrentHashMap<>();\n+  \n   private final ZkController zkController;\n \n   public CloudConfigSetService(SolrResourceLoader loader, boolean shareSchema, ZkController zkController) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMjIyNA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503332224", "bodyText": "If these are always the same, down still need two copies of it?", "author": "madrob", "createdAt": "2020-10-12T14:25:10Z", "path": "solr/core/src/java/org/apache/solr/core/XmlConfigFile.java", "diffHunk": "@@ -145,15 +139,15 @@ public XmlConfigFile(SolrResourceLoader loader, String name, InputSource is, Str\n       db.setErrorHandler(xmllog);\n       try {\n         doc = db.parse(is);\n-        origDoc = copyDoc(doc);\n+        origDoc = doc;", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/core/src/java/org/apache/solr/core/XmlConfigFile.java b/solr/core/src/java/org/apache/solr/core/XmlConfigFile.java\nindex de675035bba..ed2807539b2 100644\n--- a/solr/core/src/java/org/apache/solr/core/XmlConfigFile.java\n+++ b/solr/core/src/java/org/apache/solr/core/XmlConfigFile.java\n\n@@ -139,7 +149,7 @@ public class XmlConfigFile { // formerly simply \"Config\"\n       db.setErrorHandler(xmllog);\n       try {\n         doc = db.parse(is);\n-        origDoc = doc;\n+        origDoc = copyDoc(doc);\n       } finally {\n         // some XML parsers are broken and don't close the byte stream (but they should according to spec)\n         IOUtils.closeQuietly(is.getByteStream());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzNzc0Mw==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503337743", "bodyText": "We can remove this and a few of the other suppressions.", "author": "madrob", "createdAt": "2020-10-12T14:33:16Z", "path": "solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader.java", "diffHunk": "@@ -254,9 +253,9 @@ private Analyzer readAnalyzer(Node node) throws XPathExpressionException {\n       (\"[schema.xml] analyzer/charFilter\", CharFilterFactory.class, false, false) {\n \n       @Override\n-      @SuppressWarnings({\"rawtypes\"})\n-      protected CharFilterFactory create(SolrClassLoader loader, String name, String className, Node node) throws Exception {\n-        final Map<String,String> params = DOMUtil.toMap(node.getAttributes());\n+      @SuppressWarnings(\"rawtypes\")", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzOTgwMw==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503339803", "bodyText": "I think these are more natural with the order of the parameters reversed. It also aligns better with the single argument version calling child(name, null) - easier to reason about in an IDE autocomplete.\nchild(name, test) reads more similarly to the previous XPath //name[test].", "author": "madrob", "createdAt": "2020-10-12T14:36:20Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();\n+\n+  /**\n+   * Name of the tag\n+   */\n+  String name();\n+\n+  /**\n+   * Text value of the node\n+   */\n+  String textValue();\n+\n+  /**\n+   * Attributes\n+   */\n+  SimpleMap<String> attributes();\n+\n+  /**\n+   * Child by name\n+   */\n+  default ConfigNode child(String name) {\n+    return child(null, name);\n+  }\n+\n+  /**Iterate through child nodes with the name and return the first child that matches\n+   */\n+  default ConfigNode child(Predicate<ConfigNode> test, String name) {", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 1a67b5232ca..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0MDA4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503340089", "bodyText": "This is never used, let's not add new API methods that we don't need", "author": "madrob", "createdAt": "2020-10-12T14:36:48Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();\n+\n+  /**\n+   * Name of the tag\n+   */\n+  String name();\n+\n+  /**\n+   * Text value of the node\n+   */\n+  String textValue();\n+\n+  /**\n+   * Attributes\n+   */\n+  SimpleMap<String> attributes();\n+\n+  /**\n+   * Child by name\n+   */\n+  default ConfigNode child(String name) {\n+    return child(null, name);\n+  }\n+\n+  /**Iterate through child nodes with the name and return the first child that matches\n+   */\n+  default ConfigNode child(Predicate<ConfigNode> test, String name) {\n+    ConfigNode[] result = new ConfigNode[1];\n+    forEachChild(it -> {\n+      if (name!=null && !name.equals(it.name())) return Boolean.TRUE;\n+      if (test == null || test.test(it)) {\n+        result[0] = it;\n+        return Boolean.FALSE;\n+      }\n+      return Boolean.TRUE;\n+    });\n+    return result[0];\n+  }\n+\n+  /**Iterate through child nodes with the names and return all the matching children\n+   * @param nodeNames names of tags to be returned\n+   * @param  test check for the nodes to be returned\n+   */\n+  default List<ConfigNode> children(Predicate<ConfigNode> test, String... nodeNames) {", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 1a67b5232ca..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0MDYzOQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503340639", "bodyText": "I would reverse this argument order too.", "author": "madrob", "createdAt": "2020-10-12T14:37:40Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();\n+\n+  /**\n+   * Name of the tag\n+   */\n+  String name();\n+\n+  /**\n+   * Text value of the node\n+   */\n+  String textValue();\n+\n+  /**\n+   * Attributes\n+   */\n+  SimpleMap<String> attributes();\n+\n+  /**\n+   * Child by name\n+   */\n+  default ConfigNode child(String name) {\n+    return child(null, name);\n+  }\n+\n+  /**Iterate through child nodes with the name and return the first child that matches\n+   */\n+  default ConfigNode child(Predicate<ConfigNode> test, String name) {\n+    ConfigNode[] result = new ConfigNode[1];\n+    forEachChild(it -> {\n+      if (name!=null && !name.equals(it.name())) return Boolean.TRUE;\n+      if (test == null || test.test(it)) {\n+        result[0] = it;\n+        return Boolean.FALSE;\n+      }\n+      return Boolean.TRUE;\n+    });\n+    return result[0];\n+  }\n+\n+  /**Iterate through child nodes with the names and return all the matching children\n+   * @param nodeNames names of tags to be returned\n+   * @param  test check for the nodes to be returned\n+   */\n+  default List<ConfigNode> children(Predicate<ConfigNode> test, String... nodeNames) {\n+    return children(test, nodeNames == null ? Collections.emptySet() : Set.of(nodeNames));\n+  }\n+\n+  /**Iterate through child nodes with the names and return all the matching children\n+   * @param matchNames names of tags to be returned\n+   * @param  test check for the nodes to be returned\n+   */\n+  default List<ConfigNode> children(Predicate<ConfigNode> test, Set<String> matchNames) {", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 1a67b5232ca..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0ODQ2OA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503348468", "bodyText": "I think this is a place where returning Optional<ConfigNode> makes sense, to align ourselves with JDK stream findFirst-like methods.", "author": "madrob", "createdAt": "2020-10-12T14:49:45Z", "path": "solr/solrj/src/java/org/apache/solr/common/ConfigNode.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.solr.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import org.apache.solr.cluster.api.SimpleMap;\n+\n+/**\n+ * A generic interface that represents a config file, mostly XML\n+ */\n+public interface ConfigNode {\n+  ThreadLocal<Function<String,String>> SUBSTITUTES = new ThreadLocal<>();\n+\n+  /**\n+   * Name of the tag\n+   */\n+  String name();\n+\n+  /**\n+   * Text value of the node\n+   */\n+  String textValue();\n+\n+  /**\n+   * Attributes\n+   */\n+  SimpleMap<String> attributes();\n+\n+  /**\n+   * Child by name\n+   */\n+  default ConfigNode child(String name) {", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\nindex 1a67b5232ca..90b0b81c23e 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/ConfigNode.java\n\n@@ -17,9 +17,7 @@\n package org.apache.solr.common;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Predicate;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0OTE0OA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503349148", "bodyText": "Does this have to be a list? Iterable<? extends ConfigNode>?", "author": "madrob", "createdAt": "2020-10-12T14:50:45Z", "path": "solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java", "diffHunk": "@@ -135,15 +134,13 @@ protected T create(SolrClassLoader loader, String name, String className, Node n\n    * If a default element is defined, it will be returned from this function.\n    * \n    */\n-  public T load(SolrClassLoader loader, NodeList nodes )", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTc3NA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503655774", "bodyText": "it could be", "author": "noblepaul", "createdAt": "2020-10-13T04:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0OTE0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM2Mjk3MA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r503362970", "bodyText": "I wish this were a Set instead of an array, but I see the parallel to the other implementation of this.", "author": "madrob", "createdAt": "2020-10-12T15:12:40Z", "path": "solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java", "diffHunk": "@@ -37,9 +39,24 @@\n \n   public static final String XML_RESERVED_PREFIX = \"xml\";\n \n+  public static final Set<String>  NL_TAGS = Set.of(\"str\", \"int\",\"long\",\"float\",\"double\",\"bool\");\n+\n+\n   public static Map<String,String> toMap(NamedNodeMap attrs) {\n     return toMapExcept(attrs);\n   }\n+  public static Map<String,String> toMap(ConfigNode node) {\n+    return toMapExcept(node);\n+  }\n+  public static Map<String,String> toMapExcept(ConfigNode node, String... exclusions) {", "originalCommit": "499d6ab50d44140d158ee4f0260548f4afb65339", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "chunk": "diff --git a/solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java b/solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java\nindex 3825ae038bc..206d84b8e87 100644\n--- a/solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java\n+++ b/solr/solrj/src/java/org/apache/solr/common/util/DOMUtil.java\n\n@@ -39,7 +40,7 @@ public class DOMUtil {\n \n   public static final String XML_RESERVED_PREFIX = \"xml\";\n \n-  public static final Set<String>  NL_TAGS = Set.of(\"str\", \"int\",\"long\",\"float\",\"double\",\"bool\");\n+  static final Set<String>  NL_TAGS = ImmutableSet.of(\"str\", \"int\",\"long\",\"float\",\"double\",\"bool\");\n \n \n   public static Map<String,String> toMap(NamedNodeMap attrs) {\n"}}, {"oid": "74c98f04e6dfbe848d2462e51927d4ddda975ae0", "url": "https://github.com/apache/lucene-solr/commit/74c98f04e6dfbe848d2462e51927d4ddda975ae0", "message": "SOLR-14827: Refactor schema loading to not use XPath", "committedDate": "2020-12-05T04:19:50Z", "type": "commit"}, {"oid": "976608dcdac97f71271df7ea9a58830c6d71eede", "url": "https://github.com/apache/lucene-solr/commit/976608dcdac97f71271df7ea9a58830c6d71eede", "message": "preload conf", "committedDate": "2020-12-05T04:20:26Z", "type": "commit"}, {"oid": "a6f6330607318d200b6e4e574e9462b0c1aba6a6", "url": "https://github.com/apache/lucene-solr/commit/a6f6330607318d200b6e4e574e9462b0c1aba6a6", "message": "bug fix", "committedDate": "2020-12-05T04:20:30Z", "type": "commit"}, {"oid": "70b5ad3af246afd5f59d040eebb3fa83ecb74b1d", "url": "https://github.com/apache/lucene-solr/commit/70b5ad3af246afd5f59d040eebb3fa83ecb74b1d", "message": "bug fix", "committedDate": "2020-12-05T04:21:53Z", "type": "commit"}, {"oid": "def7db590a14d5c4b88742110e4cb25e88fb4e85", "url": "https://github.com/apache/lucene-solr/commit/def7db590a14d5c4b88742110e4cb25e88fb4e85", "message": "unused import", "committedDate": "2020-12-05T04:21:56Z", "type": "commit"}, {"oid": "f313d6c3f78be6f135c3afd9021605aff5a90ba3", "url": "https://github.com/apache/lucene-solr/commit/f313d6c3f78be6f135c3afd9021605aff5a90ba3", "message": "unused import", "committedDate": "2020-12-05T04:21:56Z", "type": "commit"}, {"oid": "cecf1f9aa32652c986dad2ce4893d47a6e2e2054", "url": "https://github.com/apache/lucene-solr/commit/cecf1f9aa32652c986dad2ce4893d47a6e2e2054", "message": "substitute properties real time", "committedDate": "2020-12-05T04:21:57Z", "type": "commit"}, {"oid": "a73c2c526782cd6d0e4ccbe1eb4cc139ecd1e052", "url": "https://github.com/apache/lucene-solr/commit/a73c2c526782cd6d0e4ccbe1eb4cc139ecd1e052", "message": "cache and reuse", "committedDate": "2020-12-05T04:22:19Z", "type": "commit"}, {"oid": "6319582fdd9dd737a10599145f1f80341c3ee9c2", "url": "https://github.com/apache/lucene-solr/commit/6319582fdd9dd737a10599145f1f80341c3ee9c2", "message": "test failure", "committedDate": "2020-12-05T04:22:21Z", "type": "commit"}, {"oid": "504740f1551591f35f690b6cb96c4b684e085a7a", "url": "https://github.com/apache/lucene-solr/commit/504740f1551591f35f690b6cb96c4b684e085a7a", "message": "javadocs and other review comments", "committedDate": "2020-12-05T04:22:21Z", "type": "commit"}, {"oid": "5746feef7c6cf029d72e6c88cf25c93c41ef54c6", "url": "https://github.com/apache/lucene-solr/commit/5746feef7c6cf029d72e6c88cf25c93c41ef54c6", "message": "merging with master", "committedDate": "2020-12-05T04:22:22Z", "type": "commit"}, {"oid": "e49e3a54fe33527aed93010d644360c9ecd66717", "url": "https://github.com/apache/lucene-solr/commit/e49e3a54fe33527aed93010d644360c9ecd66717", "message": "javadocs fix", "committedDate": "2020-12-05T04:22:22Z", "type": "commit"}, {"oid": "f3ac2e93cd6ab4b2030dcbb69e5ad3a114b12665", "url": "https://github.com/apache/lucene-solr/commit/f3ac2e93cd6ab4b2030dcbb69e5ad3a114b12665", "message": "merging with master", "committedDate": "2020-12-05T04:23:37Z", "type": "commit"}, {"oid": "12d492ac83a9205cd236ad99801b90286438cff9", "url": "https://github.com/apache/lucene-solr/commit/12d492ac83a9205cd236ad99801b90286438cff9", "message": "merge with master", "committedDate": "2020-12-05T04:23:40Z", "type": "commit"}, {"oid": "ac536c49add2a42cd4f6baa2577f4e68cca200fb", "url": "https://github.com/apache/lucene-solr/commit/ac536c49add2a42cd4f6baa2577f4e68cca200fb", "message": "merging with masster", "committedDate": "2020-12-05T04:23:41Z", "type": "commit"}, {"oid": "6ad7716e8f4ee77ec48f689e9cccdec7e0983056", "url": "https://github.com/apache/lucene-solr/commit/6ad7716e8f4ee77ec48f689e9cccdec7e0983056", "message": "merging with master", "committedDate": "2020-12-05T04:24:15Z", "type": "commit"}, {"oid": "491f172ed3b858a2f7b1a3a8f9953be172d55f6d", "url": "https://github.com/apache/lucene-solr/commit/491f172ed3b858a2f7b1a3a8f9953be172d55f6d", "message": "unused imp[ort", "committedDate": "2020-12-05T04:24:17Z", "type": "commit"}, {"oid": "54c6f222868f611e1b3af8b88531c1bb14089496", "url": "https://github.com/apache/lucene-solr/commit/54c6f222868f611e1b3af8b88531c1bb14089496", "message": "Fixing imports", "committedDate": "2020-12-05T04:34:41Z", "type": "commit"}, {"oid": "54c6f222868f611e1b3af8b88531c1bb14089496", "url": "https://github.com/apache/lucene-solr/commit/54c6f222868f611e1b3af8b88531c1bb14089496", "message": "Fixing imports", "committedDate": "2020-12-05T04:34:41Z", "type": "forcePushed"}, {"oid": "b580c77143bad4056af8b0ac774d0c18fde68fef", "url": "https://github.com/apache/lucene-solr/commit/b580c77143bad4056af8b0ac774d0c18fde68fef", "message": "Optimized", "committedDate": "2020-12-07T13:51:38Z", "type": "commit"}, {"oid": "898a8d9826770b9504748bd0095b634e7bdde0f4", "url": "https://github.com/apache/lucene-solr/commit/898a8d9826770b9504748bd0095b634e7bdde0f4", "message": "test fixed", "committedDate": "2020-12-08T00:26:07Z", "type": "commit"}, {"oid": "1783bf2d1768e65e537a32a2c21ff74acdd17d79", "url": "https://github.com/apache/lucene-solr/commit/1783bf2d1768e65e537a32a2c21ff74acdd17d79", "message": "unused imports", "committedDate": "2020-12-08T00:39:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDE2OQ==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r537974169", "bodyText": "NULL_DEREFERENCE:  object returned by getDocument(schemaConf) could be null and is dereferenced at line 211.", "author": "sonatype-lift", "createdAt": "2020-12-08T01:58:58Z", "path": "solr/core/src/java/org/apache/solr/core/ConfigSetService.java", "diffHunk": "@@ -186,6 +198,20 @@ protected NamedList loadConfigSetFlags(CoreDescriptor cd, SolrResourceLoader loa\n    */\n   public abstract String configSetName(CoreDescriptor cd);\n \n+  public interface ConfigResource {\n+\n+    ConfigNode get() throws Exception;\n+\n+  }\n+  public static ConfigNode getParsedSchema(InputStream is, SolrResourceLoader loader, String name) throws IOException, SAXException, ParserConfigurationException {\n+    XmlConfigFile schemaConf = null;\n+    InputSource inputSource = new InputSource(is);\n+    inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(name));\n+    schemaConf = new XmlConfigFile(loader, SCHEMA, inputSource, SLASH + SCHEMA + SLASH, null);\n+    return new DataConfigNode(new DOMConfigNode(schemaConf.getDocument().getDocumentElement()));", "originalCommit": "898a8d9826770b9504748bd0095b634e7bdde0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDE4Mg==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r537974182", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method ManagedIndexSchemaFactory.create(...) indirectly reads with synchronization from this.config. Potentially races with unsynchronized write in method ManagedIndexSchemaFactory.create(...).\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-12-08T01:59:02Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -210,7 +215,7 @@ private InputStream readSchemaLocally() {", "originalCommit": "898a8d9826770b9504748bd0095b634e7bdde0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDE4OA==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r537974188", "bodyText": "THREAD_SAFETY_VIOLATION:  Read/Write race. Non-private method ManagedIndexSchemaFactory.create(...) indirectly reads without synchronization from configSetService.zkController.cloudManager. Potentially races with write in method ManagedIndexSchemaFactory.create(...).\nReporting because this access may occur on a background thread.", "author": "sonatype-lift", "createdAt": "2020-12-08T01:59:03Z", "path": "solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory.java", "diffHunk": "@@ -174,8 +175,12 @@ public ManagedIndexSchema create(String resourceName, SolrConfig config) {\n     }\n     InputSource inputSource = new InputSource(schemaInputStream);\n     inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(loadedResource));\n-    schema = new ManagedIndexSchema(config, loadedResource, inputSource, isMutable,\n-                                    managedSchemaResourceName, schemaZkVersion, getSchemaUpdateLock());\n+    try {\n+      schema = new ManagedIndexSchema(config, loadedResource,IndexSchemaFactory.getConfigResource(configSetService, schemaInputStream, loader, managedSchemaResourceName) , isMutable,", "originalCommit": "898a8d9826770b9504748bd0095b634e7bdde0f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "53817fef47ca9e3dd08127f03891638bd4ad31a0", "url": "https://github.com/apache/lucene-solr/commit/53817fef47ca9e3dd08127f03891638bd4ad31a0", "message": "removed unused code", "committedDate": "2020-12-11T03:34:40Z", "type": "commit"}, {"oid": "7251b65b804636bc6d023607101202271e56ff0e", "url": "https://github.com/apache/lucene-solr/commit/7251b65b804636bc6d023607101202271e56ff0e", "message": "Update CHANGES.txt", "committedDate": "2020-12-11T04:25:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzNTQ3Ng==", "url": "https://github.com/apache/lucene-solr/pull/1963#discussion_r545935476", "bodyText": "@noblepaul  FYI java.util.function.UnaryOperator is a Function over same-type.  No need to go change this now; it's a minor point.", "author": "dsmiley", "createdAt": "2020-12-18T16:11:51Z", "path": "solr/solrj/src/java/org/apache/solr/common/util/PropertiesUtil.java", "diffHunk": "@@ -22,17 +22,23 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Properties;\n+import java.util.function.Function;\n+\n \n /**\n  * Breaking out some utility methods into a separate class as part of SOLR-4196. These utils have nothing to do with\n  * the DOM (they came from DomUtils) and it's really confusing to see them in something labeled DOM\n  */\n public class PropertiesUtil {\n+  public static String substituteProperty(String value, Properties coreProperties) {\n+    if(coreProperties == null) return substitute(value, null);\n+    return substitute(value, coreProperties::getProperty);\n+  }\n   /*\n   * This method borrowed from Ant's PropertyHelper.replaceProperties:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n-  public static String substituteProperty(String value, Properties coreProperties) {\n+  public static String substitute(String value, Function<String,String> coreProperties) {", "originalCommit": "7251b65b804636bc6d023607101202271e56ff0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}