{"pr_number": 1282, "pr_title": "Fix #1279 EWS address parsing problem, added 'bestReplyAddress'", "pr_createdAt": "2020-11-20T15:05:40Z", "pr_url": "https://github.com/ibissource/iaf/pull/1282", "timeline": [{"oid": "21d0e6b1a1330e334d41d805011e882ff8bbe9b4", "url": "https://github.com/ibissource/iaf/commit/21d0e6b1a1330e334d41d805011e882ff8bbe9b4", "message": "First test", "committedDate": "2020-11-19T17:10:09Z", "type": "commit"}, {"oid": "d40fcee0a730561554303ec26289c183e79b3439", "url": "https://github.com/ibissource/iaf/commit/d40fcee0a730561554303ec26289c183e79b3439", "message": "add bestReplyAddress field to email", "committedDate": "2020-11-20T15:03:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3OTI0MA==", "url": "https://github.com/ibissource/iaf/pull/1282#discussion_r528579240", "bodyText": "Ik zou het fijn vinden als er een regel commentaar bij staat wat het verschil tussen een from en een sender is...", "author": "nielsm5", "createdAt": "2020-11-23T09:50:21Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/IMailFileSystem.java", "diffHunk": "@@ -25,25 +25,21 @@\n \tpublic String MAIL_MESSAGE_ID = \"Message-ID\";\n \t\n \tpublic Iterable<String> getToRecipients(M emailMessage) throws FileSystemException ;\n-\n \tpublic Iterable<String> getCCRecipients(M emailMessage) throws FileSystemException;\n-\t\n \tpublic Iterable<String> getBCCRecipients(M emailMessage) throws FileSystemException;\n \t\n \tpublic String getFrom(M emailMessage) throws FileSystemException;\n+\tpublic String getSender(M emailMessage) throws FileSystemException;", "originalCommit": "d40fcee0a730561554303ec26289c183e79b3439", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1a6c1c77f2aca487fa94aef7285e86dfe66e490", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/IMailFileSystem.java b/core/src/main/java/nl/nn/adapterframework/filesystem/IMailFileSystem.java\nindex 3703d3765..adff0488f 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/IMailFileSystem.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/IMailFileSystem.java\n\n@@ -15,26 +15,28 @@\n */\n package nl.nn.adapterframework.filesystem;\n \n-import java.util.Date;\n-\n import nl.nn.adapterframework.stream.Message;\n import nl.nn.adapterframework.xml.SaxElementBuilder;\n \n public interface IMailFileSystem<M,A> extends IWithAttachments<M,A> {\n \n-\tpublic String MAIL_MESSAGE_ID = \"Message-ID\";\n-\t\n-\tpublic Iterable<String> getToRecipients(M emailMessage) throws FileSystemException ;\n-\tpublic Iterable<String> getCCRecipients(M emailMessage) throws FileSystemException;\n-\tpublic Iterable<String> getBCCRecipients(M emailMessage) throws FileSystemException;\n+\tpublic final String MAIL_MESSAGE_ID = \"Message-ID\";\n+\tpublic final String RETURN_PATH_HEADER=\"Return-Path\";\n \t\n-\tpublic String getFrom(M emailMessage) throws FileSystemException;\n-\tpublic String getSender(M emailMessage) throws FileSystemException;\n-\tpublic String getReplyTo(M emailMessage) throws FileSystemException;\n+\t/*\n+\t * IMailFileSystems should make sure the additionalProperties contain also the following keys:\n+\t */\n+\tpublic final String TO_RECEPIENTS_KEY = \"to\";\n+\tpublic final String CC_RECEPIENTS_KEY = \"cc\";\n+\tpublic final String BCC_RECEPIENTS_KEY = \"bcc\";\n+\tpublic final String FROM_ADDRESS_KEY = \"from\";     // originator of the message\n+\tpublic final String SENDER_ADDRESS_KEY = \"sender\"; // identifies who submitted the messages, probably on behalf of the 'From'\n+\tpublic final String REPLY_TO_RECEPIENTS_KEY = \"replyTo\";\n+\tpublic final String DATETIME_SENT_KEY = \"DateTimeSent\";         // as Date, or in XML format: yyyy-MM-dd'T'HH:mm:ss.SSSZ\n+\tpublic final String DATETIME_RECEIVED_KEY = \"DateTimeReceived\";\n \n+\t\n \tpublic String getSubject(M emailMessage) throws FileSystemException;\n-\tpublic Date getDateTimeSent(M emailMessage) throws FileSystemException;\n-\tpublic Date getDateTimeReceived(M emailMessage) throws FileSystemException;\n \n \tpublic String getMessageBody(M emailMessage) throws FileSystemException;\n \tpublic Message getMimeContent(M emailMessage) throws FileSystemException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3OTkyNw==", "url": "https://github.com/ibissource/iaf/pull/1282#discussion_r528579927", "bodyText": "Moet hier geen getValidAddress(...) ?", "author": "nielsm5", "createdAt": "2020-11-23T09:51:30Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java", "diffHunk": "@@ -697,6 +697,38 @@ public String getFrom(EmailMessage emailMessage) throws FileSystemException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic String getSender(EmailMessage emailMessage) throws FileSystemException {\n+\t\ttry {\n+\t\t\tEmailAddress sender = emailMessage.getSender();\n+\t\t\treturn sender==null ? null : sender.getAddress();", "originalCommit": "d40fcee0a730561554303ec26289c183e79b3439", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1a6c1c77f2aca487fa94aef7285e86dfe66e490", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java b/core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java\nindex 6678eae6f..bab161cb0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/ExchangeFileSystem.java\n\n@@ -661,43 +669,7 @@ public class ExchangeFileSystem implements IMailFileSystem<EmailMessage,Attachme\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic Iterable<String> getToRecipients(EmailMessage emailMessage) throws FileSystemException {\n-\t\ttry {\n-\t\t\treturn asList(emailMessage.getToRecipients());\n-\t\t} catch (ServiceLocalException e) {\n-\t\t\tthrow new FileSystemException(\"Could not get ToRecipients\", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Iterable<String> getCCRecipients(EmailMessage emailMessage) throws FileSystemException {\n-\t\ttry {\n-\t\t\treturn asList(emailMessage.getCcRecipients());\n-\t\t} catch (ServiceLocalException e) {\n-\t\t\tthrow new FileSystemException(\"Could not get CCRecipients\", e);\n-\t\t}\n-\t}\n-\t\n-\t@Override\n-\tpublic Iterable<String> getBCCRecipients(EmailMessage emailMessage) throws FileSystemException {\n-\t\ttry {\n-\t\t\treturn asList(emailMessage.getBccRecipients());\n-\t\t} catch (ServiceLocalException e) {\n-\t\t\tthrow new FileSystemException(\"Could not get BCCRecipients\", e);\n-\t\t}\n-\t}\n \t\n-\t@Override\n-\tpublic String getFrom(EmailMessage emailMessage) throws FileSystemException {\n-\t\ttry {\n-\t\t\treturn emailMessage.getFrom().getAddress();\n-\t\t} catch (ServiceLocalException e) {\n-\t\t\tthrow new FileSystemException(\"Could not get From Address\", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n \tpublic String getSender(EmailMessage emailMessage) throws FileSystemException {\n \t\ttry {\n \t\t\tEmailAddress sender = emailMessage.getSender();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDc2NA==", "url": "https://github.com/ibissource/iaf/pull/1282#discussion_r528580764", "bodyText": "Ik denk dat je als type hier beter de RETURN_PATH_HEADER constant kan gebruiken", "author": "nielsm5", "createdAt": "2020-11-23T09:52:49Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java", "diffHunk": "@@ -88,4 +101,40 @@\n \t\t}\n \t}\n \t\n+\n+\tpublic static String findBestReplyAddress(String from, String replyTo, String sender, Map<String,Object> headers) {\n+\t\tString result;\n+\t\t\n+\t\tif (null != (result = getValidAddress(\"replyTo\", replyTo))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\tif (null != (result = getValidAddress(\"from\", from))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\tif (null != (result = getValidAddress(\"sender\", sender))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\tObject returnPath = headers.get(RETURN_PATH_HEADER);\n+\t\tif (returnPath instanceof String && null != (result = getValidAddress(\"return path\", (String)returnPath))) {", "originalCommit": "d40fcee0a730561554303ec26289c183e79b3439", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1a6c1c77f2aca487fa94aef7285e86dfe66e490", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java b/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java\nindex ce66b33bf..e4d776bc0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java\n\n@@ -102,24 +131,40 @@ public class MailFileSystemUtils {\n \t}\n \t\n \n-\tpublic static String findBestReplyAddress(String from, String replyTo, String sender, Map<String,Object> headers) {\n+\tpublic static String findBestReplyAddress(Map<String,Object> headers) {\n \t\tString result;\n \t\t\n-\t\tif (null != (result = getValidAddress(\"replyTo\", replyTo))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.REPLY_TO_RECEPIENTS_KEY, headers))) {\n \t\t\treturn result; \n \t\t}\n-\t\tif (null != (result = getValidAddress(\"from\", from))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.FROM_ADDRESS_KEY, headers))) {\n \t\t\treturn result; \n \t\t}\n-\t\tif (null != (result = getValidAddress(\"sender\", sender))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.SENDER_ADDRESS_KEY, headers))) {\n \t\t\treturn result; \n \t\t}\n-\t\tObject returnPath = headers.get(RETURN_PATH_HEADER);\n-\t\tif (returnPath instanceof String && null != (result = getValidAddress(\"return path\", (String)returnPath))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.RETURN_PATH_HEADER, headers))) {\n \t\t\treturn result; \n \t\t}\n \t\treturn null;\n \t}\n+\n+\tpublic static String getValidAddressFromHeader(String key, Map<String,Object> headers) {\n+\t\tObject item = headers.get(key);\n+\t\tif (item == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (item instanceof List) {\n+\t\t\tString result;\n+\t\t\tfor(String address:(List<String>) item) {\n+\t\t\t\tif (null != (result = getValidAddress(key, address))) {\n+\t\t\t\t\treturn result; \n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getValidAddress(key, item.toString());\n+\t}\n \t\n \tpublic static String getValidAddress(String type, String address) {\n \t\ttry {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MTY5Ng==", "url": "https://github.com/ibissource/iaf/pull/1282#discussion_r528581696", "bodyText": "type en address omdraaien? Het is een adres-type niet een type-adres\naddress [xyz] of type [abc] is invalid, vs type [abc] address [xyz] is invalid", "author": "nielsm5", "createdAt": "2020-11-23T09:54:18Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java", "diffHunk": "@@ -88,4 +101,40 @@\n \t\t}\n \t}\n \t\n+\n+\tpublic static String findBestReplyAddress(String from, String replyTo, String sender, Map<String,Object> headers) {\n+\t\tString result;\n+\t\t\n+\t\tif (null != (result = getValidAddress(\"replyTo\", replyTo))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\tif (null != (result = getValidAddress(\"from\", from))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\tif (null != (result = getValidAddress(\"sender\", sender))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\tObject returnPath = headers.get(RETURN_PATH_HEADER);\n+\t\tif (returnPath instanceof String && null != (result = getValidAddress(\"return path\", (String)returnPath))) {\n+\t\t\treturn result; \n+\t\t}\n+\t\treturn null;\n+\t}\n+\t\n+\tpublic static String getValidAddress(String type, String address) {\n+\t\ttry {\n+\t\t\tif (StringUtils.isEmpty(address)) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tInternetAddress[] addresses = InternetAddress.parseHeader(address, true);\n+\t\t\tif (addresses.length==0) {\n+\t\t\t\treturn null;\n+\t\t\t} \n+\t\t\treturn InternetAddress.toString(addresses);\n+\t\t} catch (AddressException e) {\n+\t\t\tlog.warn(\"type [\"+type+\"] address [\"+address+\"] is invalid: \"+e.getMessage());", "originalCommit": "d40fcee0a730561554303ec26289c183e79b3439", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1a6c1c77f2aca487fa94aef7285e86dfe66e490", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java b/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java\nindex ce66b33bf..e4d776bc0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/MailFileSystemUtils.java\n\n@@ -102,24 +131,40 @@ public class MailFileSystemUtils {\n \t}\n \t\n \n-\tpublic static String findBestReplyAddress(String from, String replyTo, String sender, Map<String,Object> headers) {\n+\tpublic static String findBestReplyAddress(Map<String,Object> headers) {\n \t\tString result;\n \t\t\n-\t\tif (null != (result = getValidAddress(\"replyTo\", replyTo))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.REPLY_TO_RECEPIENTS_KEY, headers))) {\n \t\t\treturn result; \n \t\t}\n-\t\tif (null != (result = getValidAddress(\"from\", from))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.FROM_ADDRESS_KEY, headers))) {\n \t\t\treturn result; \n \t\t}\n-\t\tif (null != (result = getValidAddress(\"sender\", sender))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.SENDER_ADDRESS_KEY, headers))) {\n \t\t\treturn result; \n \t\t}\n-\t\tObject returnPath = headers.get(RETURN_PATH_HEADER);\n-\t\tif (returnPath instanceof String && null != (result = getValidAddress(\"return path\", (String)returnPath))) {\n+\t\tif (null != (result = getValidAddressFromHeader(IMailFileSystem.RETURN_PATH_HEADER, headers))) {\n \t\t\treturn result; \n \t\t}\n \t\treturn null;\n \t}\n+\n+\tpublic static String getValidAddressFromHeader(String key, Map<String,Object> headers) {\n+\t\tObject item = headers.get(key);\n+\t\tif (item == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (item instanceof List) {\n+\t\t\tString result;\n+\t\t\tfor(String address:(List<String>) item) {\n+\t\t\t\tif (null != (result = getValidAddress(key, address))) {\n+\t\t\t\t\treturn result; \n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn getValidAddress(key, item.toString());\n+\t}\n \t\n \tpublic static String getValidAddress(String type, String address) {\n \t\ttry {\n"}}, {"oid": "f1a6c1c77f2aca487fa94aef7285e86dfe66e490", "url": "https://github.com/ibissource/iaf/commit/f1a6c1c77f2aca487fa94aef7285e86dfe66e490", "message": "Special fields via additionalProperties", "committedDate": "2020-11-23T16:56:30Z", "type": "commit"}, {"oid": "b4b66df16251aaf6f5911253d8bd0fe258a01650", "url": "https://github.com/ibissource/iaf/commit/b4b66df16251aaf6f5911253d8bd0fe258a01650", "message": "Make replyAddressFields configurable", "committedDate": "2020-11-24T09:27:27Z", "type": "commit"}, {"oid": "266f06a7a81c09e98f43bc1bc3717faacc736bac", "url": "https://github.com/ibissource/iaf/commit/266f06a7a81c09e98f43bc1bc3717faacc736bac", "message": "Add more tests", "committedDate": "2020-11-24T09:34:17Z", "type": "commit"}]}