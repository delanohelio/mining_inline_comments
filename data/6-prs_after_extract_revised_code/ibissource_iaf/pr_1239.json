{"pr_number": 1239, "pr_title": "Create first iteration of the list of groups and use them for first XSD", "pr_createdAt": "2020-11-05T11:18:47Z", "pr_url": "https://github.com/ibissource/iaf/pull/1239", "timeline": [{"oid": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "url": "https://github.com/ibissource/iaf/commit/6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "message": "Rename ElementTypeRole to ElementRole", "committedDate": "2020-12-11T16:39:14Z", "type": "commit"}, {"oid": "26b5c075c312352d0506c4d20a21295cef61c00c", "url": "https://github.com/ibissource/iaf/commit/26b5c075c312352d0506c4d20a21295cef61c00c", "message": "Integration test ElementRole", "committedDate": "2020-12-11T17:59:56Z", "type": "commit"}, {"oid": "321ac5bceb0ddea89b6ee44464ca9d2fe8396c02", "url": "https://github.com/ibissource/iaf/commit/321ac5bceb0ddea89b6ee44464ca9d2fe8396c02", "message": "Correct typo", "committedDate": "2020-12-11T18:01:45Z", "type": "commit"}, {"oid": "a00ae973cbf9355824d26b1554e5fba6bcb6812d", "url": "https://github.com/ibissource/iaf/commit/a00ae973cbf9355824d26b1554e5fba6bcb6812d", "message": "Move convenience methods from DocWriterNew to FrankElement\n\nHave to better sort the methods of FrankElement\nHave to cover the convenience methdos by the unit tests", "committedDate": "2020-12-11T18:33:11Z", "type": "commit"}, {"oid": "9f92980f7a2edd61a2de3b8dc1fd76a5fc010b70", "url": "https://github.com/ibissource/iaf/commit/9f92980f7a2edd61a2de3b8dc1fd76a5fc010b70", "message": "Set up test suite in which ancestors will be tested", "committedDate": "2020-12-14T11:01:45Z", "type": "commit"}, {"oid": "bfdf93eef28c3c52fdaf091cdc0a23a518d30652", "url": "https://github.com/ibissource/iaf/commit/bfdf93eef28c3c52fdaf091cdc0a23a518d30652", "message": "Cover that the ancestor finding methods check the predicate arg", "committedDate": "2020-12-14T11:52:13Z", "type": "commit"}, {"oid": "44b05d6daac70042aa81180e8328f5bcada1abf9", "url": "https://github.com/ibissource/iaf/commit/44b05d6daac70042aa81180e8328f5bcada1abf9", "message": "Improve code", "committedDate": "2020-12-14T15:26:04Z", "type": "commit"}, {"oid": "27d8673d5f801c6c54d95131ae68a1036cfcfb4f", "url": "https://github.com/ibissource/iaf/commit/27d8673d5f801c6c54d95131ae68a1036cfcfb4f", "message": "Merge branch 'master' into fillDataModel4", "committedDate": "2020-12-14T15:26:37Z", "type": "commit"}, {"oid": "8a4cdb0deba9559a877b1b9d409653afaf59b16c", "url": "https://github.com/ibissource/iaf/commit/8a4cdb0deba9559a877b1b9d409653afaf59b16c", "message": "Add simple elements before complex stuff", "committedDate": "2020-12-14T18:25:30Z", "type": "commit"}, {"oid": "f36d62964ec62605e775bd2246fb6465c775e756", "url": "https://github.com/ibissource/iaf/commit/f36d62964ec62605e775bd2246fb6465c775e756", "message": "General element option in group uppercase", "committedDate": "2020-12-15T08:48:51Z", "type": "commit"}, {"oid": "69ae5a07dfda8b3f2cc3f4eeaaad7eee0976b139", "url": "https://github.com/ibissource/iaf/commit/69ae5a07dfda8b3f2cc3f4eeaaad7eee0976b139", "message": "Add getting cumulative children to the model", "committedDate": "2020-12-15T11:50:25Z", "type": "commit"}, {"oid": "e2982fb38376c01fd2562b5c0b87950511c2092c", "url": "https://github.com/ibissource/iaf/commit/e2982fb38376c01fd2562b5c0b87950511c2092c", "message": "More tests", "committedDate": "2020-12-15T12:06:25Z", "type": "commit"}, {"oid": "4e290a23922688352c08208fb007bf8c4e010031", "url": "https://github.com/ibissource/iaf/commit/4e290a23922688352c08208fb007bf8c4e010031", "message": "Get child element roles of an element type", "committedDate": "2020-12-15T14:58:43Z", "type": "commit"}, {"oid": "174f70fee40e5c1eee1575ab3b4d1e195a5f8e86", "url": "https://github.com/ibissource/iaf/commit/174f70fee40e5c1eee1575ab3b4d1e195a5f8e86", "message": "Always write simple elements if type non-interface", "committedDate": "2020-12-15T15:49:04Z", "type": "commit"}, {"oid": "be2dfa9eb7bb7a35167be309dd1f603782c80733", "url": "https://github.com/ibissource/iaf/commit/be2dfa9eb7bb7a35167be309dd1f603782c80733", "message": "Add option to element groups for any element - not working yet!", "committedDate": "2020-12-15T19:48:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMjg5OQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r544132899", "bodyText": "Deze class heet 'Filter', maar is nu een wrapper rondom DocWriterNewXmlUtils.\nHet lijkt me een complexe oplossing voor de wens om de simpele elementen eerst af te drukken.\nIk had me voorgesteld dat je dat niet zou bouwen als een afdrukfilter, maar als een selectiefilter:\nDat je eerst door alle simpele elementen heen itereert, en daar je ding op doet,\nen vervolgens door de complexe elementen, en dan die doet.\nOok vind ik het niet elegant dat deze class all DocWriterNewXmlUtils methods kopieert.", "author": "gvanbrakel", "createdAt": "2020-12-16T09:14:16Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+import nl.nn.adapterframework.util.XmlBuilder;\n+\n+abstract class XsdWriteFilter {\n+\tboolean isWritingOn;", "originalCommit": "be2dfa9eb7bb7a35167be309dd1f603782c80733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NDM2NA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545964364", "bodyText": "Gerrit we hebben overlegd over de oplossing. Ik ga na de vacantie een helper class XmlGroupBuilder maken in package nl.nn.adapterframework.util. Die krijgt ongeveer dezelfde interface als XmlBuilder, maar maakt het mogelijk om XML elementen toe te voegen in een groep. In mijn helper class DocWriterNewXmlUtils heb ik nu methods als addElement, addComplexContent, etc. om de verschillende elementen aan de XSD toe te voegen. Die gebruiken onder water XmlBuilder, maar kunnen dan XmlGroupBuilder gaan gebruiken waar nodig. Het groeperen voegt dan bijna geen complexiteit meer toe aan DocWriterNew.", "author": "mhdirkse", "createdAt": "2020-12-18T17:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMjg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NTMwNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551265306", "bodyText": "We hebben na mijn vakantie kort overlegd over bovenstaand idee. Er is geen helper class nodig, alleen twee lijstjes met XmlBuilder objecten. Ik heb net een commit gepushed met deze oplossing, en het wordt best elegant. Er is geen complexe architectuur nodig. Dank voor je feedback.", "author": "mhdirkse", "createdAt": "2021-01-04T11:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEzMjg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "195f27b7b9ebf312bfb2bb89218b1d2fe27fcb03", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java b/core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java\ndeleted file mode 100644\nindex 1558eb4ec..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java\n+++ /dev/null\n\n@@ -1,226 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.ArrayDeque;\n-import java.util.Deque;\n-\n-import nl.nn.adapterframework.util.XmlBuilder;\n-\n-abstract class XsdWriteFilter {\n-\tboolean isWritingOn;\n-\n-\tabstract void startSimpleElement();\n-\tabstract void startComplexStuff();\n-\t\n-\tstatic class EnableSimpleElements extends XsdWriteFilter {\n-\t\t@Override\n-\t\tvoid startSimpleElement() {\n-\t\t\tthis.isWritingOn = true;\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tvoid startComplexStuff() {\n-\t\t\tisWritingOn = false;\n-\t\t}\n-\t}\n-\n-\tstatic class EnableComplexStuff extends XsdWriteFilter {\n-\t\t@Override\n-\t\tvoid startSimpleElement() {\n-\t\t\tisWritingOn = false;\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tvoid startComplexStuff() {\n-\t\t\tisWritingOn = true;\n-\t\t}\n-\t}\n-\n-\tprivate enum ControlNode {\n-\t\tSIMPLE_ELEMENT,\n-\t\tCOMPLEX_STUFF;\n-\t}\n-\n-\tstatic class ControlStack {\n-\t\tprivate final XsdWriteFilter slave;\n-\t\tprivate final Deque<ControlNode> controlNodes = new ArrayDeque<>();\n-\n-\t\tControlStack(XsdWriteFilter slave) {\n-\t\t\tthis.slave = slave;\n-\t\t\t// If all other write controls are popped, then we have complex stuff.\n-\t\t\tpushComplexStuff();\n-\t\t}\n-\n-\t\tvoid pushSimpleElement() {\n-\t\t\tcontrolNodes.addLast(ControlNode.SIMPLE_ELEMENT);\n-\t\t\tapply();\n-\t\t}\n-\n-\t\tvoid pushComplexStuff() {\n-\t\t\tcontrolNodes.addLast(ControlNode.COMPLEX_STUFF);\n-\t\t\tapply();\n-\t\t}\n-\n-\t\tvoid pop() {\n-\t\t\tcontrolNodes.removeLast();\n-\t\t\tapply();\n-\t\t}\n-\n-\t\tprivate void apply() {\n-\t\t\tswitch(controlNodes.getLast()) {\n-\t\t\tcase SIMPLE_ELEMENT:\n-\t\t\t\tslave.startSimpleElement();\n-\t\t\t\tbreak;\n-\t\t\tcase COMPLEX_STUFF:\n-\t\t\t\tslave.startComplexStuff();\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid addElement(XmlBuilder context, String elementName, String elementType) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addElement(context, elementName, elementType);\n-\t\t}\n-\t}\n-\n-\tvoid addElementRef(\n-\t\t\tXmlBuilder context,\n-\t\t\tString elementName) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addElementRef(context, elementName);\n-\t\t}\n-\t}\n-\n-\tvoid addElementRef(\n-\t\t\tXmlBuilder context,\n-\t\t\tString elementName,\n-\t\t\tString minOccurs,\n-\t\t\tString maxOccurs) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addElementRef(context, elementName, minOccurs, maxOccurs);\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addElementWithType(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addElementWithType(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addComplexType(XmlBuilder schema) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addComplexType(schema);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addComplexType(XmlBuilder schema, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addComplexType(schema, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addChoice(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addChoice(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addSequence(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addSequence(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAttribute(\n-\t\t\tXmlBuilder context,\n-\t\t\tString name,\n-\t\t\tDocWriterNewXmlUtils.AttributeValueStatus valueStatus,\n-\t\t\tString value,\n-\t\t\tDocWriterNewXmlUtils.AttributeUse attributeUse) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAttribute(context, name, valueStatus, value, attributeUse);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAnyAttribute(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAnyAttribute(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tvoid addDocumentation(XmlBuilder context, String description) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addDocumentation(context, description);\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addGroup(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addGroup(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addGroupRef(XmlBuilder context, String id) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addGroupRef(context, id);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addGroupRef(XmlBuilder context, String id, String minOccurs, String maxOccurs) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addGroupRef(context, id, minOccurs, maxOccurs);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAttributeGroup(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAttributeGroup(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAttributeGroupRef(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAttributeGroupRef(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addComplexContent(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addComplexContent(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addExtension(XmlBuilder context, String base) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addExtension(context, base);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MTMzMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r544151333", "bodyText": "Moet dit niet zijn: findOrRegisterElementRole() ?", "author": "gvanbrakel", "createdAt": "2020-12-16T09:40:28Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -143,10 +177,18 @@ public FrankElement findOrCreateFrankElement(Class<?> clazz) throws ReflectiveOp\n \t\tFrankElement parent = superClass == null ? null : findOrCreateFrankElement(superClass);\n \t\tcurrent.setParent(parent);\n \t\tcurrent.setAttributes(createAttributes(clazz.getDeclaredMethods(), current));\n-\t\tcurrent.setConfigChildren(createConfigChildren(clazz.getMethods(), current));\n+\t\tcurrent.setConfigChildren(createConfigChildren(clazz.getDeclaredMethods(), current));\n+\t\t// Cannot be done directly by ConfigChild because the sequence is important.\n+\t\t// The call to setConfigChildren does the sorting.\n+\t\tcurrent.getConfigChildren(ALL).forEach(\n+\t\t\t\tc -> c.registerSyntax1NameWithElementType(c.getSyntax1Name()));", "originalCommit": "be2dfa9eb7bb7a35167be309dd1f603782c80733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NDUyMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545874523", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-18T14:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1MTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0c3a92f2680d45f17a66fc0a2f7e321e4873bd18", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\nindex c42109b8e..a71de0e98 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n\n@@ -178,10 +154,6 @@ public class FrankDocModel {\n \t\tcurrent.setParent(parent);\n \t\tcurrent.setAttributes(createAttributes(clazz.getDeclaredMethods(), current));\n \t\tcurrent.setConfigChildren(createConfigChildren(clazz.getDeclaredMethods(), current));\n-\t\t// Cannot be done directly by ConfigChild because the sequence is important.\n-\t\t// The call to setConfigChildren does the sorting.\n-\t\tcurrent.getConfigChildren(ALL).forEach(\n-\t\t\t\tc -> c.registerSyntax1NameWithElementType(c.getSyntax1Name()));\n \t\treturn current;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDQzMQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r544170431", "bodyText": "Een ConfigChild ontstaat doordat er een ConfigChildSetter method is in een FrankElement.\nEr is dan een 'syntax1naam' en een 'class of interface'.\nDe 'class of interface' definieert het ElementType\nDe combinatie van 'syntax1naam' en ElementType bepaalt ElementRole\nNu heeft ConfigChild een syntax1Naam en ElementType.\nDat zou moeten zijn: een ElementRole\nIk denk dat het beter is om in ConfigChild alleen maar een verwijzing naar ElementRole te hebben, en geen syntax1Name en ElementType meer.", "author": "gvanbrakel", "createdAt": "2020-12-16T10:07:51Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -1,31 +1,82 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.util.LogUtil;\n \n-public class ConfigChild {\n+public class ConfigChild extends ElementChild {\n \tprivate static Logger log = LogUtil.getLogger(ConfigChild.class);\n \n-\tprivate @Getter FrankElement configParent;\n+\t@EqualsAndHashCode(callSuper = false)\n+\tstatic final class Key extends AbstractKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;", "originalCommit": "be2dfa9eb7bb7a35167be309dd1f603782c80733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyMDcyNQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545320725", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-17T18:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDQzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1fc16be024845d2ab47ae64fcca6800a05e520b2", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex ea0b4249f..5798217a9 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -16,21 +16,84 @@ limitations under the License.\n \n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n import java.util.stream.Collectors;\n \n-import org.apache.logging.log4j.Logger;\n+import org.springframework.core.annotation.AnnotationUtils;\n \n import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n-import nl.nn.adapterframework.util.LogUtil;\n \n public class ConfigChild extends ElementChild {\n-\tprivate static Logger log = LogUtil.getLogger(ConfigChild.class);\n+\tprivate static final Comparator<SortNode> SORT_NODE_COMPARATOR =\n+\t\t\tComparator.comparing(SortNode::getSequenceInConfig)\n+\t\t\t.thenComparing(SortNode::getName);\n+\n+\tstatic final class SortNode implements Comparable<SortNode> {\n+\t\tprivate @Getter int sequenceInConfig = Integer.MAX_VALUE;\n+\t\tprivate @Getter String name;\n+\t\tprivate @Getter boolean documented;\n+\t\tprivate @Getter boolean deprecated;\n+\t\tprivate @Getter Method method;\n+\n+\t\tSortNode(Method method) {\n+\t\t\tthis.name = method.getName();\n+\t\t\tthis.method = method;\n+\t\t\tthis.documented = (method.getAnnotation(IbisDoc.class) != null);\n+\t\t\tthis.deprecated = isDeprecated(method);\n+\t\t}\n+\n+\t\tvoid parseIbisDocAnnotation() throws IbisDocAnnotationException {\n+\t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(method, IbisDoc.class);\n+\t\t\tif(ibisDoc == null) {\n+\t\t\t\tthrow new IbisDocAnnotationException(String.format(\n+\t\t\t\t\t\t\"No @IbisDoc annotation on method [%s]\", name));\n+\t\t\t}\n+\t\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\t\tif(optionalOrder != null) {\n+\t\t\t\tsequenceInConfig = optionalOrder;\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate Integer parseIbisDocAnnotation(IbisDoc ibisDoc) throws IbisDocAnnotationException {\n+\t\t\tInteger result = null;\n+\t\t\tif(ibisDoc.value().length >= 1) {\n+\t\t\t\ttry {\n+\t\t\t\t\tresult = Integer.valueOf(ibisDoc.value()[0]);\n+\t\t\t\t} catch(Exception e) {\n+\t\t\t\t\tthrow new IbisDocAnnotationException(String.format(\n+\t\t\t\t\t\t\t\"@IbisDoc annotation on method [%s] has no valid order\", name));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\tprivate static boolean isDeprecated(Method m) {\n+\t\t\tDeprecated deprecated = m.getAnnotation(Deprecated.class);\n+\t\t\treturn (deprecated != null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int compareTo(SortNode other) {\n+\t\t\treturn SORT_NODE_COMPARATOR.compare(this, other);\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"serial\")\n+\tpublic static class IbisDocAnnotationException extends Exception {\t\t\n+\t\tIbisDocAnnotationException(String message) {\n+\t\t\tsuper(message);\n+\t\t}\n+\n+\t\tIbisDocAnnotationException(String message, Throwable cause) {\n+\t\t\tsuper(message, cause);\n+\t\t}\n+\t}\n \n \t@EqualsAndHashCode(callSuper = false)\n \tstatic final class Key extends AbstractKey {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3NDQ5NA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r544174494", "bodyText": "Ik denk dat dit beter een Map<String,ElementRole>kan zijn", "author": "gvanbrakel", "createdAt": "2020-12-16T10:13:54Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java", "diffHunk": "@@ -1,15 +1,53 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n import java.util.HashMap;\n+import java.util.LinkedHashSet;\n import java.util.Map;\n \n import lombok.Getter;\n \n+/**\n+ * Represents a type of FrankElement instances, which appears in the FF! Java code as\n+ * a Java interface. FrankElement objects that represent an abstract Java class should\n+ * be omitted as members. This is done automatically when Spring is used to get the\n+ * implementing classes of a Java interface.\n+ *\n+ * @author martijn\n+ *\n+ */\n public class ElementType {\n \tprivate @Getter String fullName;\n \tprivate @Getter String simpleName;\n \tprivate @Getter Map<String, FrankElement> members;\n \tprivate @Getter boolean fromJavaInterface;\n+\t\n+\t/**\n+\t * For each syntax 1 name in this set, an &lt;xs:choice&gt; of &lt;xs:element&gt;\n+\t * is created in the XSD. The elements in a group correspond to the Java\n+\t * classes that implement the Java interface represented by this {@link ElementChild}.\n+\t * For each syntax 1 name a different group is needed because the syntax 2\n+\t * names of the elements are different.\n+\t * <p>\n+\t * A {@link LinkedHashSet} is being used to preserve the sequence with which\n+\t * the syntax 1 names were inserted.\n+\t */\n+\tprivate @Getter LinkedHashSet<String> configChildSyntax1Names = new LinkedHashSet<>();", "originalCommit": "be2dfa9eb7bb7a35167be309dd1f603782c80733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3NDA2Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545874066", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-18T14:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3NDQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "7e873640c8ae1292b0d5c1ea19679cf3807228f2", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java\nindex b2e717292..116c13249 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java\n\n@@ -16,11 +16,20 @@ limitations under the License.\n \n package nl.nn.adapterframework.doc.model;\n \n+import static java.util.Arrays.asList;\n+\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n  * Represents a type of FrankElement instances, which appears in the FF! Java code as\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1MDMxNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r544350316", "bodyText": "Dit moet dan zijn: findOrCreateElementRole(ElementType, syntax1naam)", "author": "gvanbrakel", "createdAt": "2020-12-16T14:39:43Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -41,11 +92,34 @@ private Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {\n \t\t\t\tresult = Integer.valueOf(ibisDoc.value()[0]);\n \t\t\t} catch(Exception e) {\n \t\t\t\tlog.warn(String.format(\"@IbisDoc for config child with parent [%s] and type [%s] has a non-integer order [%s], ignored\",\n-\t\t\t\t\t\tconfigParent.getSimpleName(),\n+\t\t\t\t\t\tgetOwningElement().getSimpleName(),\n \t\t\t\t\t\telementType.getSimpleName(),\n \t\t\t\t\t\tibisDoc.value()[0]));\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n+\n+\tpublic String getSyntax1NamePlural() {\n+\t\tif(syntax1Name.endsWith(\"s\")) {\n+\t\t\treturn syntax1Name;\n+\t\t} else {\n+\t\t\treturn syntax1Name + \"s\";\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic int compareTo(ElementChild other) {\n+\t\treturn CONFIG_CHILD_COMPARATOR.compare(this, (ConfigChild) other);\n+\t}\n+\n+\tvoid registerSyntax1NameWithElementType(final String syntax1Name) {", "originalCommit": "be2dfa9eb7bb7a35167be309dd1f603782c80733", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MjkzNw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545872937", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-18T14:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1MDMxNg=="}], "type": "inlineReview", "revised_code": {"commit": "1fc16be024845d2ab47ae64fcca6800a05e520b2", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex ea0b4249f..5798217a9 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -72,34 +135,6 @@ public class ConfigChild extends ElementChild {\n \t\treturn new Key(this);\n \t}\n \n-\tpublic void setSequenceInConfigFromIbisDocAnnotation(IbisDoc ibisDoc) {\n-\t\tsequenceInConfig = Integer.MAX_VALUE;\n-\t\tif(ibisDoc == null) {\n-\t\t\tlog.warn(String.format(\"No @IbisDoc annotation for config child, parent [%s] and element type [%s]\",\n-\t\t\t\t\tgetOwningElement().getSimpleName(), elementType.getSimpleName()));\n-\t\t\treturn;\n-\t\t}\n-\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n-\t\tif(optionalOrder != null) {\n-\t\t\tsequenceInConfig = optionalOrder;\n-\t\t}\n-\t}\n-\n-\tprivate Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {\n-\t\tInteger result = null;\n-\t\tif(ibisDoc.value().length >= 1) {\n-\t\t\ttry {\n-\t\t\t\tresult = Integer.valueOf(ibisDoc.value()[0]);\n-\t\t\t} catch(Exception e) {\n-\t\t\t\tlog.warn(String.format(\"@IbisDoc for config child with parent [%s] and type [%s] has a non-integer order [%s], ignored\",\n-\t\t\t\t\t\tgetOwningElement().getSimpleName(),\n-\t\t\t\t\t\telementType.getSimpleName(),\n-\t\t\t\t\t\tibisDoc.value()[0]));\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n \tpublic String getSyntax1NamePlural() {\n \t\tif(syntax1Name.endsWith(\"s\")) {\n \t\t\treturn syntax1Name;\n"}}, {"oid": "7e873640c8ae1292b0d5c1ea19679cf3807228f2", "url": "https://github.com/ibissource/iaf/commit/7e873640c8ae1292b0d5c1ea19679cf3807228f2", "message": "Fix that the XSD was incorrect", "committedDate": "2020-12-17T13:20:42Z", "type": "commit"}, {"oid": "1cad66a2db200172a79ae63131af53e8558c44ee", "url": "https://github.com/ibissource/iaf/commit/1cad66a2db200172a79ae63131af53e8558c44ee", "message": "Rename attribute \"elementType\" to \"elementRole\"", "committedDate": "2020-12-17T15:41:39Z", "type": "commit"}, {"oid": "1fc16be024845d2ab47ae64fcca6800a05e520b2", "url": "https://github.com/ibissource/iaf/commit/1fc16be024845d2ab47ae64fcca6800a05e520b2", "message": "Sort config child setters before creating ConfigChild", "committedDate": "2020-12-17T17:49:42Z", "type": "commit"}, {"oid": "996f4920681af38a912065044d5d2e83a8591318", "url": "https://github.com/ibissource/iaf/commit/996f4920681af38a912065044d5d2e83a8591318", "message": "ConfigChild creates ElementRole creates ElementType", "committedDate": "2020-12-17T18:33:47Z", "type": "commit"}, {"oid": "6fc7c42c961b38c1c2edf1d1c7ee8ad3ca558b4c", "url": "https://github.com/ibissource/iaf/commit/6fc7c42c961b38c1c2edf1d1c7ee8ad3ca558b4c", "message": "Rename methods and reorder them", "committedDate": "2020-12-17T18:43:07Z", "type": "commit"}, {"oid": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "url": "https://github.com/ibissource/iaf/commit/6e0745df244d5e86d13e504f6f73ec158254ee1f", "message": "Unit test calculating the founder", "committedDate": "2020-12-18T09:35:17Z", "type": "commit"}, {"oid": "15172a6b64ac78a2654fbeb8471f3c206104672f", "url": "https://github.com/ibissource/iaf/commit/15172a6b64ac78a2654fbeb8471f3c206104672f", "message": "Introduce name highestCommonInterface", "committedDate": "2020-12-18T09:50:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyMjQzNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545722436", "bodyText": "Mooi gedaan, ook met classbacks en de leesbare lambda's.\nHet valt mij wel op dat alle xsdElementType, xsdElementTypeMemberChildGroup, xsdDeclaredGroupNameForAttributes en xsdCumulativeGroupNameForAttributes methodes door elkaar staan. Voor de leesbaarheid is het handig deze bij elkaar te groeperen.", "author": "nielsm5", "createdAt": "2020-12-18T09:53:46Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java", "diffHunk": "@@ -0,0 +1,646 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc;\n+\n+import static java.util.Arrays.asList;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.getXmlSchema;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.OPTIONAL;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.PROHIBITED;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.REQUIRED;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeValueStatus.DEFAULT;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeValueStatus.FIXED;\n+import static nl.nn.adapterframework.doc.model.ElementChild.DEPRECATED;\n+import static nl.nn.adapterframework.doc.model.ElementChild.IN_XSD;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import nl.nn.adapterframework.core.IListener;\n+import nl.nn.adapterframework.doc.model.ConfigChild;\n+import nl.nn.adapterframework.doc.model.ElementChild;\n+import nl.nn.adapterframework.doc.model.ElementRole;\n+import nl.nn.adapterframework.doc.model.ElementType;\n+import nl.nn.adapterframework.doc.model.FrankAttribute;\n+import nl.nn.adapterframework.doc.model.FrankDocModel;\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+import nl.nn.adapterframework.util.XmlBuilder;\n+\n+/**\n+ * This class writes the XML Schema document (XSD) that checks the validity of a\n+ * Frank configuration XML file. The XML Schema is written based on the information\n+ * in a {@link FrankDocModel} object (the model).\n+ * \n+ * <h1>The syntax 2 name</h1>\n+ *\n+ * Below, a few implementation details are explained. First, the integration specialist\n+ * references an element by a name the reveals both the requested Java class\n+ * (expressed as a {@link FrankElement} in the model)\n+ * and the role it plays (e.g. sender or error sender). These requirements are\n+ * implemented by model method {@link FrankElement#getXsdElementName}. This\n+ * method takes as an argument the relevant {@link ElementType} to which the {@link FrankElement}\n+ * of the Java class belongs. The link between this {@link ElementType} and the\n+ * containing &lt;xs:element&gt; is made through a {@link ConfigChild}.\n+ * The <code>syntax1Name</code> attribute of this {@link ConfigChild}\n+ * is the other argument required by {@link FrankElement#getXsdElementName}.\n+ * <p>\n+ * Each element within the Frank!Framework appears as an &lt;complexType&gt;\n+ * under the XSD root. It is not duplicated for the different roles it\n+ * can play. This complex type references a group of config children and a group\n+ * of attributes. A group of config children consists of &lt;xs:choice&gt; elements that\n+ * each list the allowed elements available to the integration specialist, element groups.\n+ * An option within an element group appears as an &lt;xs:element&gt; that has\n+ * the syntax 2 name as name and the XSD type of the referenced {@link FrankElement} as type.\n+ * <p>\n+ * There is a different element group for each combination of an {@link ElementType} and\n+ * config child syntax 1 name, so there can be multiple element groups per {@link ElementType}. This is\n+ * the only duplication we need because of syntax 2 names. A {@link FrankElement} is\n+ * represented in the XSD with a top-level &lt;xs:complexType&gt; item. That item references\n+ * attribute groups and XSD sequences for config children, but these are not duplicated\n+ * because of the syntax 2 name issue.\n+ *\n+ * <h1>Inheritance of attributes and config children</h1>\n+ * \n+ * Each {@link FrankElement} is represented by a top-level &lt;xs:complexType&gt;.\n+ * Each Frank!Framework element can have attributes or other elements. \n+ * These correspond to {@link FrankAttribute}\n+ * objects or {@link ConfigChild} objects in the model.\n+ * <p>\n+ * In the model, a {@link FrankElement} only holds its declared attributes, but\n+ * the top-level &lt;xs:complexType&gt; should allow both the declared attributes and the attributes\n+ * inherited from the ancestors of the {@link FrankElement} (the inherited attributes).\n+ * The same holds for configuration children. This similarity appears in the model\n+ * through the common base class {@link ElementChild}, which is a parent class of both\n+ * {@link FrankAttribute} and {@link ConfigChild}. An attribute defined high in the\n+ * class hierarchy of the Frank!Framework can be allowed for many FF! elements,\n+ * but we do not want to repeat the same &lt;xs:attribute&gt; tags in all these cases.\n+ * We solve this by grouping the attributes, and the config children, in the XSD, for example:\n+ * \n+ * <pre>\n+ * {@code\n+<xs:complexType name=\"ConfigurationType\">\n+  <xs:group ref=\"ConfigurationDeclaredChildGroup\" />\n+  <xs:attributeGroup ref=\"ConfigurationDeclaredAttributeGroup\" />\n+</xs:complexType>\n+}\n+ * </pre>\n+ * <p>\n+ * The example shows a group named <code>ConfigurationDeclaredChildGroup</code>. This group\n+ * declares all allowed child FF! elements.\n+ * <p>\n+ * An XSD group ending with \"DeclaredChildGroup\" only holds the <em>declared</em> configuration children\n+ * or attributes. This is sufficient for Frank config element &lt;Configuration&gt; because the corresponding\n+ * Java class has only <code>Object</code> as parent. We also use cumulative groups\n+ * that allow the declared items (attributes / config children) of a {@link FrankElement}\n+ * as well as the inherited items. The following example in the XSD illustrates this:\n+ * <pre>\n+ {@code\n+<xs:attributeGroup name=\"LockerCumulativeAttributeGroup\">\n+  <xs:attributeGroup ref=\"LockerDeclaredAttributeGroup\" />\n+  <xs:attributeGroup ref=\"JdbcFacadeCumulativeAttributeGroup\" />\n+</xs:attributeGroup>\n+}\n+ * </pre>\n+ * The Frank!Framework has a Java class named <code>Locker</code> that has class\n+ * <code>JdbcFacade</code> as its parent. The group <code>LockerCumulativeAttributeGroup</code>\n+ * is defined recursively: all declared attributes of <code>Locker</code> are in, and all\n+ * declared and inherited attributes of the parent class <code>JdbcFacade</code>. The\n+ * recursion stops with the ancestor that holds the last inherited attributes, because\n+ * for that ancestor we do not introduce a cumulative group and use the declared group\n+ * only.\n+ * <p>\n+ * Another issue about groups needs explanation. Some Java classes of the Frank!Framework override\n+ * attributes that become then duplicate in the model. They appear as declared attributes\n+ * in two {@link FrankElement} objects, one modeling the Java subclass and one modeling the\n+ * Java ancestor class. In this situation, only the attribute (or config child) corresponding\n+ * to the Java subclass is needed. The attribute\n+ * of the ancestor class is omitted. The following example illustrates this:\n+ * <pre>\n+ {@code\n+<xs:attributeGroup name=\"SoapValidatorCumulativeAttributeGroup\">\n+  <xs:attributeGroup ref=\"SoapValidatorDeclaredAttributeGroup\" />\n+  <xs:attributeGroup ref=\"Json2XmlValidatorDeclaredAttributeGroup\" />\n+  <xs:attribute name=\"ignoreUnknownNamespaces\" type=\"xs:string\" />\n+  ...\n+  <xs:attributeGroup ref=\"FixedForwardPipeCumulativeAttributeGroup\" />\n+</xs:attributeGroup>\n+ }\n+ * </pre>\n+ * Java class <code>SoapValidator</code> overrides a method <code>setRoot()</code> from\n+ * the grand-parent class <code>XmlValidator</code>. If the cumulative group of\n+ * the parent class <code>Json2XmlValidatorCumulativeAttributeGroup</code> would be referenced,\n+ * we would have attribute \"<code>root</code>\" twice. To avoid this, only the declared group\n+ * <code>Json2XmlValidatorDeclaredAttributeGroup</code> is referenced and the non-duplicate\n+ * attributes of <code>XmlValidator</code> are repeated. Higher up the dependency\n+ * hierarchy, there are no duplicate attributes. Therefore, the list of attributes\n+ * can end with referencing group <code>FixedForwardPipeCumulativeAttributeGroup</code>.\n+ * <p>\n+ * Please note that <code>SoapValidator</code> has a deprecated method <code>setSchema()</code>\n+ * that it overrdes from <code>XmlValidator</code>. The algorithm takes care to not only omit\n+ * attribute <code>schema</code> as a declared attribute,\n+ * but also as an inherited attributre of <code>SoapValidator</code>. Other descendants\n+ * of <code>XmlValidator</code> are not influenced by the override by <code>SoapValidator</code>.\n+ * This part of the algorithm is handled by package-private class\n+ * <code>nl.nn.adapterframework.doc.model.ChildRejector</code>.\n+ * <p>\n+ * Finally, 'technical' overrides are ignored by this algorithm, which are\n+ * setters with an override annotation that are not deprecated and lack\n+ * IbisDoc or IbisDocRef annotations.\n+ * \n+ * <h1> The options for a config child</h1>\n+ *\n+ * The {@link ConfigChild} class in the model determines what &lt;xs:element&gt; are allowed\n+ * as children of another &lt;xs:element&gt;. The containing &lt;xs:element&gt; is the\n+ * <code>owningElement</code> field, which is of type {@link FrankElement}. A {@link ConfigChild} is\n+ * characterized by the combination of an owning element and an {@link ElementType}. As an example\n+ * consider the {@link ConfigChild} that exists for the combination of owning element\n+ * \"<code>Receiver</code>\" and element type \"<code>IListener</code>\". It produces\n+ * the following XML schema:\n+ * <pre>\n+ * {@code\n+<xs:group ref=\"IListenerListenerElementGroup\" minOccurs=\"0\" maxOccurs=\"1\" />\n+}\n+ * </pre>\n+ * This snippet appears within <code>&lt;xs:group name=\"ReceiverDeclaredChildGroup\"&gt;&lt;xs:sequence&gt;</code>.\n+ * The snippet states that a Receiver can contain all elements related to a Java class implementing\n+ * {@link IListener}, playing the role of a listener. The duplication because of syntax 2 names becomes\n+ * visible here.\n+ *\n+ * @author martijn\n+ *\n+ */\n+public class DocWriterNew {\n+\tprivate static final String CONFIGURATION = \"nl.nn.adapterframework.configuration.Configuration\";\n+\tprivate static final String ELEMENT_GROUP = \"ElementGroup\";\n+\tprivate static final String ELEMENT_ROLE = \"elementRole\";\n+\n+\tprivate FrankDocModel model;\n+\tprivate String startClassName;\n+\tprivate XmlBuilder xsdRoot;\n+\tprivate Set<String> namesCreatedFrankElements;\n+\tprivate Set<ElementRole.Key> idsCreatedElementGroups;\n+\tprivate Set<String> namesElementTypesWithChildMemberGroup;\n+\tprivate XsdWriteFilter writeFilter;\n+\tprivate XsdWriteFilter.ControlStack writeControl;\n+\n+\tpublic DocWriterNew(FrankDocModel model) {\n+\t\tthis.model = model;\n+\t}\n+\n+\tpublic void init() {\n+\t\tinit(CONFIGURATION);\n+\t}\n+\n+\tpublic void init(String startClassName) {\n+\t\tthis.startClassName = startClassName;\n+\t}\n+\n+\tpublic String getSchema() {\n+\t\txsdRoot = getXmlSchema();\n+\t\tList<XsdWriteFilter> writeFilters = asList(\n+\t\t\t\tnew XsdWriteFilter.EnableSimpleElements(), new XsdWriteFilter.EnableComplexStuff());\n+\t\tfor(XsdWriteFilter writeFilter: writeFilters) {\n+\t\t\tthis.writeFilter = writeFilter;\n+\t\t\twriteControl = new XsdWriteFilter.ControlStack(writeFilter);\n+\t\t\tnamesCreatedFrankElements = new HashSet<>();\n+\t\t\tidsCreatedElementGroups = new HashSet<>();\n+\t\t\tnamesElementTypesWithChildMemberGroup = new HashSet<>();\n+\t\t\tFrankElement startElement = model.findFrankElement(startClassName);\n+\t\t\trecursivelyDefineXsdElementOfRoot(startElement);\n+\t\t}\n+\t\treturn xsdRoot.toXML(true);\n+\t}\n+\n+\tprivate String xsdElementType(FrankElement frankElement) {\n+\t\treturn frankElement.getSimpleName() + \"Type\";\n+\t}\n+\n+\tprivate void recursivelyDefineXsdElementOfRoot(FrankElement frankElement) {\n+\t\tif(checkNotDefined(frankElement)) {\n+\t\t\twriteControl.pushSimpleElement();\n+\t\t\tString xsdElementName = frankElement.getSimpleName();\n+\t\t\tXmlBuilder attributeBuilder = recursivelyDefineXsdElementUnchecked(\n+\t\t\t\t\txsdRoot, frankElement, xsdElementName);\n+\t\t\taddClassNameAttribute(attributeBuilder, frankElement);\n+\t\t\twriteControl.pop();\n+\t\t}\n+\t}\n+\n+\tprivate void addClassNameAttribute(XmlBuilder context, FrankElement frankElement) {\n+\t\twriteFilter.addAttribute(context, \"className\", FIXED, frankElement.getFullName(), PROHIBITED);\n+\t}\n+\n+\tprivate XmlBuilder recursivelyDefineXsdElementUnchecked(XmlBuilder context, FrankElement frankElement, String xsdElementName) {\n+\t\tXmlBuilder elementBuilder = writeFilter.addElementWithType(context, xsdElementName);\n+\t\tXmlBuilder complexType = writeFilter.addComplexType(elementBuilder);\n+\t\tXmlBuilder sequence = writeFilter.addSequence(complexType);\n+\t\tfrankElement.getCumulativeConfigChildren(IN_XSD, DEPRECATED).forEach(c -> addConfigChild(sequence, c));\n+\t\taddAttributeList(complexType, frankElement.getCumulativeAttributes(IN_XSD, DEPRECATED));\n+\t\treturn complexType;\n+\t}\n+\n+\tprivate void recursivelyDefineXsdElementType(FrankElement frankElement) {\n+\t\tif(checkNotDefined(frankElement)) {\n+\t\t\tElementBuildingStrategy elementBuildingStrategy = getElementBuildingStrategy(frankElement);\n+\t\t\taddConfigChildren(elementBuildingStrategy, frankElement);\n+\t\t\taddAttributes(elementBuildingStrategy, frankElement);\n+\t\t\trecursivelyDefineXsdElementType(frankElement.getNextAncestorThatHasConfigChildren(IN_XSD));\n+\t\t\trecursivelyDefineXsdElementType(frankElement.getNextAncestorThatHasAttributes(IN_XSD));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * @param frankElement The {@link FrankElement} for which an XSD element or XSD type is needed, or null\n+\t * @return true if the input is not null and if the element is not yet created.\n+\t */\n+\tprivate boolean checkNotDefined(FrankElement frankElement) {\n+\t\tif(frankElement == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif(namesCreatedFrankElements.contains(frankElement.getFullName())) {\n+\t\t\treturn false;\n+\t\t} else {\n+\t\t\tnamesCreatedFrankElements.add(frankElement.getFullName());\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * This class is responsible for adding an xs:element in the XML schema if required.\n+\t * If a FrankElement corresponds to an abstract class, then no XML element\n+\t * should be added. This is achieved using the derived class ElementOmitter.\n+\t *\n+\t * For an abstract FrankElement, the config child declared/cumulative groups\n+\t * and the attribute declared/cumulative groups are still needed. Adding them is\n+\t * outside the scope of this class.\n+\t */\n+\tprivate abstract class ElementBuildingStrategy {\n+\t\tabstract void addGroupRef(String referencedGroupName);\n+\t\tabstract void addAttributeGroupRef(String referencedGroupName);\n+\t}\n+\n+\tprivate ElementBuildingStrategy getElementBuildingStrategy(FrankElement element) {\n+\t\tif(element.isAbstract()) {\n+\t\t\treturn new ElementOmitter();\n+\t\t} else {\n+\t\t\treturn new ElementAdder(element);\n+\t\t}\n+\t}\n+\n+\tprivate class ElementAdder extends ElementBuildingStrategy {\n+\t\tprivate final XmlBuilder complexType;\n+\t\t\n+\t\tElementAdder(FrankElement frankElement) {\n+\t\t\tcomplexType = writeFilter.addComplexType(xsdRoot, xsdElementType(frankElement));\n+\t\t}\n+\n+\t\t@Override\n+\t\tvoid addGroupRef(String referencedGroupName) {\n+\t\t\twriteFilter.addGroupRef(complexType, referencedGroupName);\n+\t\t}\n+\n+\t\t@Override\n+\t\tvoid addAttributeGroupRef(String referencedGroupName) {\n+\t\t\twriteFilter.addAttributeGroupRef(complexType, referencedGroupName);\n+\t\t}\n+\t}\n+\n+\tprivate class ElementOmitter extends ElementBuildingStrategy {\n+\t\t@Override\n+\t\tvoid addGroupRef(String referencedGroupName) {\n+\t\t}\n+\t\t@Override\n+\t\tvoid addAttributeGroupRef(String referencedGroupName) {\n+\t\t}\n+\t}\n+\n+\tprivate void addConfigChildren(ElementBuildingStrategy elementBuildingStrategy, FrankElement frankElement) {\n+\t\tConsumer<GroupCreator.Callback<ConfigChild>> cumulativeGroupTrigger =\n+\t\t\t\tca -> frankElement.walkCumulativeConfigChildren(ca, IN_XSD, DEPRECATED);\n+\t\tnew GroupCreator<ConfigChild>(frankElement, cumulativeGroupTrigger, new GroupCreator.Callback<ConfigChild>() {\n+\t\t\tprivate XmlBuilder cumulativeBuilder;\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic List<ConfigChild> getChildrenOf(FrankElement elem) {\n+\t\t\t\treturn elem.getConfigChildren(IN_XSD);\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic FrankElement getAncestorOf(FrankElement elem) {\n+\t\t\t\treturn elem.getNextAncestorThatHasConfigChildren(IN_XSD);\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void addDeclaredGroupRef(FrankElement referee) {\n+\t\t\t\telementBuildingStrategy.addGroupRef(xsdDeclaredGroupNameForChildren(referee));\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void addCumulativeGroupRef(FrankElement referee) {\n+\t\t\t\telementBuildingStrategy.addGroupRef(xsdCumulativeGroupNameForChildren(referee));\t\t\t\t\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void addDeclaredGroup() {\n+\t\t\t\tXmlBuilder group = writeFilter.addGroup(xsdRoot, xsdDeclaredGroupNameForChildren(frankElement));\n+\t\t\t\tXmlBuilder sequence = writeFilter.addSequence(group);\n+\t\t\t\tfrankElement.getConfigChildren(IN_XSD).forEach(\n+\t\t\t\t\t\tc -> addConfigChild(sequence, c));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void addCumulativeGroup() {\n+\t\t\t\tXmlBuilder group = writeFilter.addGroup(xsdRoot, xsdCumulativeGroupNameForChildren(frankElement));\n+\t\t\t\tcumulativeBuilder = writeFilter.addSequence(group);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void handleSelectedChildren(List<ConfigChild> children, FrankElement owner) {\n+\t\t\t\tchildren.forEach(c -> addConfigChild(cumulativeBuilder, c));\n+\t\t\t}\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tpublic void handleChildrenOf(FrankElement elem) {\n+\t\t\t\twriteFilter.addGroupRef(cumulativeBuilder, xsdDeclaredGroupNameForChildren(elem));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void handleCumulativeChildrenOf(FrankElement elem) {\n+\t\t\t\twriteFilter.addGroupRef(cumulativeBuilder, xsdCumulativeGroupNameForChildren(elem));\n+\t\t\t}\n+\t\t}).run();\n+\t}\n+\n+\tprivate static String xsdDeclaredGroupNameForChildren(FrankElement element) {\n+\t\treturn element.getSimpleName() + \"DeclaredChildGroup\";\n+\t}\n+\n+\tprivate static String xsdCumulativeGroupNameForChildren(FrankElement element) {\n+\t\treturn element.getSimpleName() + \"CumulativeChildGroup\";\n+\t}\n+\n+\tprivate void addConfigChild(XmlBuilder context, ConfigChild child) {\n+\t\tElementRole theRole = model.findElementRole(child);\n+\t\tif(isNoElementTypeNeeded(theRole)) {\n+\t\t\taddConfigChildSingleReferredElement(context, child);\n+\t\t} else {\n+\t\t\taddConfigChildWithElementGroup(context, child);\n+\t\t}\n+\t}\n+\n+\tprivate boolean isNoElementTypeNeeded(ElementRole role) {\n+\t\tElementType elementType = role.getElementType();\n+\t\tif(elementType.isFromJavaInterface()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\telse {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n+\tprivate void addConfigChildSingleReferredElement(XmlBuilder context, ConfigChild child) {\n+\t\tElementRole role = model.findElementRole(child);\n+\t\tFrankElement elementInType = singleElementOf(role.getElementType());\n+\t\twriteFilter.addElementRef(\n+\t\t\t\tcontext,\n+\t\t\t\telementInType.getXsdElementName(role),\n+\t\t\t\tgetMinOccurs(child),\n+\t\t\t\tgetMaxOccurs(child));\n+\t\twriteControl.pushSimpleElement();\n+\t\trecursivelyDefineXsdElement(elementInType, role);\n+\t\twriteControl.pop();\n+\t}\n+\n+\tprivate void addConfigChildWithElementGroup(XmlBuilder context, ConfigChild child) {\n+\t\tElementRole role = model.findElementRole(child);\n+\t\twriteControl.pushComplexStuff();\n+\t\tdefineElementTypeGroup(role);\n+\t\twriteControl.pop();\n+\t\twriteFilter.addGroupRef(context, role.createXsdElementName(ELEMENT_GROUP), getMinOccurs(child), getMaxOccurs(child));\n+\t}\n+\n+\tprivate FrankElement singleElementOf(ElementType elementType) {\n+\t\treturn elementType.getMembers().values().iterator().next();\n+\t}\n+\n+\tprivate static String getMinOccurs(ConfigChild child) {\n+\t\tif(child.isMandatory()) {\n+\t\t\treturn \"1\";\n+\t\t} else {\n+\t\t\treturn \"0\";\n+\t\t}\n+\t}\n+\n+\tprivate static String getMaxOccurs(ConfigChild child) {\n+\t\tif(child.isAllowMultiple()) {\n+\t\t\treturn \"unbounded\";\n+\t\t} else {\n+\t\t\treturn \"1\";\n+\t\t}\n+\t}\n+\n+\tprivate void recursivelyDefineXsdElement(FrankElement frankElement, ElementRole role) {\n+\t\tif(checkNotDefined(frankElement)) {\n+\t\t\tString xsdElementName = frankElement.getXsdElementName(role);\n+\t\t\tXmlBuilder attributeBuilder = recursivelyDefineXsdElementUnchecked(xsdRoot, frankElement, xsdElementName);\n+\t\t\taddExtraAttributesNotFromModel(attributeBuilder, frankElement, role);\n+\t\t}\n+\t}\n+\n+\tprivate void defineElementTypeGroup(ElementRole role) {\n+\t\tElementRole.Key key = role.getKey();\n+\t\tif(! idsCreatedElementGroups.contains(key)) {\n+\t\t\tidsCreatedElementGroups.add(key);\n+\t\t\tdefineElementTypeGroupUnchecked(role);\n+\t\t}\n+\t}\n+\n+\tprivate void defineElementTypeGroupUnchecked(ElementRole role) {\n+\t\tXmlBuilder group = writeFilter.addGroup(xsdRoot, role.createXsdElementName(ELEMENT_GROUP));\n+\t\tXmlBuilder choice = writeFilter.addChoice(group);\n+\t\tList<FrankElement> frankElementOptions = role.getElementType().getMembers().values().stream()\n+\t\t\t\t.filter(f -> ! f.isDeprecated())\n+\t\t\t\t.filter(f -> ! f.isAbstract())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\taddGenericElementOption(choice, role, disambiguateGenericOptionElementName(role, frankElementOptions));\n+\t\tfrankElementOptions.sort((o1, o2) -> o1.getSimpleName().compareTo(o2.getSimpleName()));\n+\t\tfor(FrankElement frankElement: frankElementOptions) {\n+\t\t\taddElementToElementGroup(choice, frankElement, role);\n+\t\t}\t\t\n+\t}\n+\n+\t// TODO: Move this to the model.\n+\tprivate String disambiguateGenericOptionElementName(ElementRole role, List<FrankElement> membersToInclude) {\n+\t\t// TODO: This is not nice but it is currently needed to properly disambiguate the\n+\t\t// different sequence numbers for Listener. We have generic elements like\n+\t\t// \"Listener_2\" and \"Listener_3\" for now.\n+\t\tString result = Utils.toUpperCamelCase(role.createXsdElementName(\"\"));\n+\t\tSet<String> conflictCandidates = membersToInclude.stream()\n+\t\t\t\t.map(f -> f.getXsdElementName(role))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\tif(conflictCandidates.contains(result)) {\n+\t\t\tresult = \"Generic\" + result;\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprivate void addGenericElementOption(XmlBuilder choice, ElementRole role, String elementNameGenericOption) {\n+\t\tXmlBuilder genericElementOption = writeFilter.addElementWithType(\n+\t\t\t\tchoice, elementNameGenericOption);\n+\t\tXmlBuilder complexType = writeFilter.addComplexType(genericElementOption);\n+\t\taddElementTypeChildMembers(complexType, role);\n+\t\twriteFilter.addAttribute(complexType, ELEMENT_ROLE, FIXED, role.getSyntax1Name(), PROHIBITED);\n+\t\twriteFilter.addAttribute(complexType, \"className\", DEFAULT, null, REQUIRED);\n+\t\t// The XSD is invalid if addAnyAttribute is added before attributes elementType and className.\n+\t\twriteFilter.addAnyAttribute(complexType);\n+\t}\n+\n+\tprivate void addElementTypeChildMembers(XmlBuilder context, ElementRole role) {\n+\t\twriteFilter.addGroupRef(context, xsdElementTypeMemberChildGroup(role.getElementType()), \"0\", \"unbounded\");\n+\t\taddElementTypeMemberChildGroup(role);\n+\t}\n+\n+\tprivate String xsdElementTypeMemberChildGroup(ElementType elementType) {\n+\t\treturn elementType.getSimpleName() + \"MemberChildGroup\";\n+\t}\n+\n+\tprivate void addElementTypeMemberChildGroup(ElementRole role) {\n+\t\tif(! namesElementTypesWithChildMemberGroup.contains(role.getElementType().getFullName())) {\n+\t\t\tnamesElementTypesWithChildMemberGroup.add(role.getElementType().getFullName());\n+\t\t\taddElementTypeMemberChildGroupUnchecked(role);\n+\t\t}\n+\t}\n+\n+\tprivate void addElementTypeMemberChildGroupUnchecked(ElementRole role) {\n+\t\tXmlBuilder group = writeFilter.addGroup(xsdRoot, xsdElementTypeMemberChildGroup(role.getElementType()));\n+\t\tXmlBuilder choice = writeFilter.addChoice(group);\n+\t\tList<ElementRole> childRoles = model.getElementTypeMemberChildRoles(\n+\t\t\t\trole.getElementType(), IN_XSD, DEPRECATED, f -> ! f.isDeprecated());\n+\t\tchildRoles = childRoles.stream()\n+\t\t\t\t.map(ElementRole::getFounder)\n+\t\t\t\t.distinct()\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tfor(ElementRole childRole: childRoles) {\n+\t\t\taddElementTypeMemberChildGroupOption(choice, childRole);\n+\t\t}\n+\t}\n+\n+\tprivate void addElementTypeMemberChildGroupOption(XmlBuilder choice, ElementRole childRole) {\n+\t\tif(isNoElementTypeNeeded(childRole)) {\n+\t\t\tFrankElement frankElement = singleElementOf(childRole.getElementType());\n+\t\t\tString xsdElementName = frankElement.getXsdElementName(childRole);\n+\t\t\twriteFilter.addElementRef(choice, xsdElementName);\n+\t\t} else {\n+\t\t\twriteFilter.addGroupRef(choice, childRole.createXsdElementName(ELEMENT_GROUP));\n+\t\t}\n+\t}\n+\n+\tprivate void addElementToElementGroup(XmlBuilder context, FrankElement frankElement, ElementRole role) {\n+\t\taddElementTypeRefToElementGroup(context, frankElement, role);\n+\t\trecursivelyDefineXsdElementType(frankElement);\n+\t}\n+\n+\tprivate void addElementTypeRefToElementGroup(XmlBuilder context, FrankElement frankElement, ElementRole role) {\n+\t\tXmlBuilder element = writeFilter.addElementWithType(context, frankElement.getXsdElementName(role));\n+\t\tXmlBuilder complexType = writeFilter.addComplexType(element);\n+\t\tXmlBuilder complexContent = writeFilter.addComplexContent(complexType);\n+\t\tXmlBuilder extension = writeFilter.addExtension(complexContent, xsdElementType(frankElement));\n+\t\taddExtraAttributesNotFromModel(extension, frankElement, role);\n+\t}\n+\n+\tprivate void addExtraAttributesNotFromModel(XmlBuilder context, FrankElement frankElement, ElementRole role) {\n+\t\twriteFilter.addAttribute(context, ELEMENT_ROLE, FIXED, role.getSyntax1Name(), PROHIBITED);\n+\t\taddClassNameAttribute(context, frankElement);\n+\t}\n+\n+\tprivate void addAttributes(ElementBuildingStrategy elementBuildingStrategy, FrankElement frankElement) {\n+\t\tConsumer<GroupCreator.Callback<FrankAttribute>> cumulativeGroupTrigger =\n+\t\t\t\tca -> frankElement.walkCumulativeAttributes(ca, IN_XSD, DEPRECATED);\n+\t\tnew GroupCreator<FrankAttribute>(frankElement, cumulativeGroupTrigger, new GroupCreator.Callback<FrankAttribute>() {\n+\t\t\tprivate XmlBuilder cumulativeBuilder;\n+\n+\t\t\t@Override\n+\t\t\tpublic List<FrankAttribute> getChildrenOf(FrankElement elem) {\n+\t\t\t\treturn elem.getAttributes(IN_XSD);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic FrankElement getAncestorOf(FrankElement elem) {\n+\t\t\t\treturn elem.getNextAncestorThatHasAttributes(IN_XSD);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void addDeclaredGroupRef(FrankElement referee) {\n+\t\t\t\telementBuildingStrategy.addAttributeGroupRef(xsdDeclaredGroupNameForAttributes(referee));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void addCumulativeGroupRef(FrankElement referee) {\n+\t\t\t\telementBuildingStrategy.addAttributeGroupRef(xsdCumulativeGroupNameForAttributes(referee));\t\t\t\t\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void addDeclaredGroup() {\n+\t\t\t\tXmlBuilder attributeGroup = writeFilter.addAttributeGroup(xsdRoot, xsdDeclaredGroupNameForAttributes(frankElement));\n+\t\t\t\taddAttributeList(attributeGroup, frankElement.getAttributes(IN_XSD));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void addCumulativeGroup() {\n+\t\t\t\tcumulativeBuilder = writeFilter.addAttributeGroup(xsdRoot, xsdCumulativeGroupNameForAttributes(frankElement));\t\t\t\t\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void handleSelectedChildren(List<FrankAttribute> children, FrankElement owner) {\n+\t\t\t\taddAttributeList(cumulativeBuilder, children);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void handleChildrenOf(FrankElement elem) {\n+\t\t\t\twriteFilter.addAttributeGroupRef(cumulativeBuilder, xsdDeclaredGroupNameForAttributes(elem));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void handleCumulativeChildrenOf(FrankElement elem) {\n+\t\t\t\twriteFilter.addAttributeGroupRef(cumulativeBuilder, xsdCumulativeGroupNameForAttributes(elem));\t\t\t\t\n+\t\t\t}\n+\t\t}).run();", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MTEzOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551281138", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2021-01-04T12:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyMjQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "334506a03de7c63043e227aa836cb92ebfeef413", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java b/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\nindex e1dfcec62..01a7c35b7 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\n\n@@ -191,7 +191,8 @@ public class DocWriterNew {\n \tprivate static final String CONFIGURATION = \"nl.nn.adapterframework.configuration.Configuration\";\n \tprivate static final String ELEMENT_GROUP = \"ElementGroup\";\n \tprivate static final String ELEMENT_ROLE = \"elementRole\";\n-\n+\tstatic final String MEMBER_CHILD_GROUP = \"MemberChildGroup\";\n+\t\n \tprivate FrankDocModel model;\n \tprivate String startClassName;\n \tprivate XmlBuilder xsdRoot;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNjYxMA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545726610", "bodyText": "informative: Ik ben zelf geen grote fan van het importeren van static helper methodes. Dit heeft vooral te maken met de grote hoeveelheid dependencies in het project en de grote overlap aan duplicate methode namen in verschillende packages. Je kan zo niet (goed) zien waar iets vandaan komt.", "author": "nielsm5", "createdAt": "2020-12-18T10:01:14Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java", "diffHunk": "@@ -0,0 +1,646 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc;\n+\n+import static java.util.Arrays.asList;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.getXmlSchema;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.OPTIONAL;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.PROHIBITED;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.REQUIRED;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeValueStatus.DEFAULT;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeValueStatus.FIXED;\n+import static nl.nn.adapterframework.doc.model.ElementChild.DEPRECATED;\n+import static nl.nn.adapterframework.doc.model.ElementChild.IN_XSD;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import nl.nn.adapterframework.core.IListener;\n+import nl.nn.adapterframework.doc.model.ConfigChild;\n+import nl.nn.adapterframework.doc.model.ElementChild;\n+import nl.nn.adapterframework.doc.model.ElementRole;\n+import nl.nn.adapterframework.doc.model.ElementType;\n+import nl.nn.adapterframework.doc.model.FrankAttribute;\n+import nl.nn.adapterframework.doc.model.FrankDocModel;\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+import nl.nn.adapterframework.util.XmlBuilder;\n+\n+/**\n+ * This class writes the XML Schema document (XSD) that checks the validity of a\n+ * Frank configuration XML file. The XML Schema is written based on the information\n+ * in a {@link FrankDocModel} object (the model).\n+ * \n+ * <h1>The syntax 2 name</h1>\n+ *\n+ * Below, a few implementation details are explained. First, the integration specialist\n+ * references an element by a name the reveals both the requested Java class\n+ * (expressed as a {@link FrankElement} in the model)\n+ * and the role it plays (e.g. sender or error sender). These requirements are\n+ * implemented by model method {@link FrankElement#getXsdElementName}. This\n+ * method takes as an argument the relevant {@link ElementType} to which the {@link FrankElement}\n+ * of the Java class belongs. The link between this {@link ElementType} and the\n+ * containing &lt;xs:element&gt; is made through a {@link ConfigChild}.\n+ * The <code>syntax1Name</code> attribute of this {@link ConfigChild}\n+ * is the other argument required by {@link FrankElement#getXsdElementName}.\n+ * <p>\n+ * Each element within the Frank!Framework appears as an &lt;complexType&gt;\n+ * under the XSD root. It is not duplicated for the different roles it\n+ * can play. This complex type references a group of config children and a group\n+ * of attributes. A group of config children consists of &lt;xs:choice&gt; elements that\n+ * each list the allowed elements available to the integration specialist, element groups.\n+ * An option within an element group appears as an &lt;xs:element&gt; that has\n+ * the syntax 2 name as name and the XSD type of the referenced {@link FrankElement} as type.\n+ * <p>\n+ * There is a different element group for each combination of an {@link ElementType} and\n+ * config child syntax 1 name, so there can be multiple element groups per {@link ElementType}. This is\n+ * the only duplication we need because of syntax 2 names. A {@link FrankElement} is\n+ * represented in the XSD with a top-level &lt;xs:complexType&gt; item. That item references\n+ * attribute groups and XSD sequences for config children, but these are not duplicated\n+ * because of the syntax 2 name issue.\n+ *\n+ * <h1>Inheritance of attributes and config children</h1>\n+ * \n+ * Each {@link FrankElement} is represented by a top-level &lt;xs:complexType&gt;.\n+ * Each Frank!Framework element can have attributes or other elements. \n+ * These correspond to {@link FrankAttribute}\n+ * objects or {@link ConfigChild} objects in the model.\n+ * <p>\n+ * In the model, a {@link FrankElement} only holds its declared attributes, but\n+ * the top-level &lt;xs:complexType&gt; should allow both the declared attributes and the attributes\n+ * inherited from the ancestors of the {@link FrankElement} (the inherited attributes).\n+ * The same holds for configuration children. This similarity appears in the model\n+ * through the common base class {@link ElementChild}, which is a parent class of both\n+ * {@link FrankAttribute} and {@link ConfigChild}. An attribute defined high in the\n+ * class hierarchy of the Frank!Framework can be allowed for many FF! elements,\n+ * but we do not want to repeat the same &lt;xs:attribute&gt; tags in all these cases.\n+ * We solve this by grouping the attributes, and the config children, in the XSD, for example:\n+ * \n+ * <pre>\n+ * {@code\n+<xs:complexType name=\"ConfigurationType\">\n+  <xs:group ref=\"ConfigurationDeclaredChildGroup\" />\n+  <xs:attributeGroup ref=\"ConfigurationDeclaredAttributeGroup\" />\n+</xs:complexType>\n+}\n+ * </pre>\n+ * <p>\n+ * The example shows a group named <code>ConfigurationDeclaredChildGroup</code>. This group\n+ * declares all allowed child FF! elements.\n+ * <p>\n+ * An XSD group ending with \"DeclaredChildGroup\" only holds the <em>declared</em> configuration children\n+ * or attributes. This is sufficient for Frank config element &lt;Configuration&gt; because the corresponding\n+ * Java class has only <code>Object</code> as parent. We also use cumulative groups\n+ * that allow the declared items (attributes / config children) of a {@link FrankElement}\n+ * as well as the inherited items. The following example in the XSD illustrates this:\n+ * <pre>\n+ {@code\n+<xs:attributeGroup name=\"LockerCumulativeAttributeGroup\">\n+  <xs:attributeGroup ref=\"LockerDeclaredAttributeGroup\" />\n+  <xs:attributeGroup ref=\"JdbcFacadeCumulativeAttributeGroup\" />\n+</xs:attributeGroup>\n+}\n+ * </pre>\n+ * The Frank!Framework has a Java class named <code>Locker</code> that has class\n+ * <code>JdbcFacade</code> as its parent. The group <code>LockerCumulativeAttributeGroup</code>\n+ * is defined recursively: all declared attributes of <code>Locker</code> are in, and all\n+ * declared and inherited attributes of the parent class <code>JdbcFacade</code>. The\n+ * recursion stops with the ancestor that holds the last inherited attributes, because\n+ * for that ancestor we do not introduce a cumulative group and use the declared group\n+ * only.\n+ * <p>\n+ * Another issue about groups needs explanation. Some Java classes of the Frank!Framework override\n+ * attributes that become then duplicate in the model. They appear as declared attributes\n+ * in two {@link FrankElement} objects, one modeling the Java subclass and one modeling the\n+ * Java ancestor class. In this situation, only the attribute (or config child) corresponding\n+ * to the Java subclass is needed. The attribute\n+ * of the ancestor class is omitted. The following example illustrates this:\n+ * <pre>\n+ {@code\n+<xs:attributeGroup name=\"SoapValidatorCumulativeAttributeGroup\">\n+  <xs:attributeGroup ref=\"SoapValidatorDeclaredAttributeGroup\" />\n+  <xs:attributeGroup ref=\"Json2XmlValidatorDeclaredAttributeGroup\" />\n+  <xs:attribute name=\"ignoreUnknownNamespaces\" type=\"xs:string\" />\n+  ...\n+  <xs:attributeGroup ref=\"FixedForwardPipeCumulativeAttributeGroup\" />\n+</xs:attributeGroup>\n+ }\n+ * </pre>\n+ * Java class <code>SoapValidator</code> overrides a method <code>setRoot()</code> from\n+ * the grand-parent class <code>XmlValidator</code>. If the cumulative group of\n+ * the parent class <code>Json2XmlValidatorCumulativeAttributeGroup</code> would be referenced,\n+ * we would have attribute \"<code>root</code>\" twice. To avoid this, only the declared group\n+ * <code>Json2XmlValidatorDeclaredAttributeGroup</code> is referenced and the non-duplicate\n+ * attributes of <code>XmlValidator</code> are repeated. Higher up the dependency\n+ * hierarchy, there are no duplicate attributes. Therefore, the list of attributes\n+ * can end with referencing group <code>FixedForwardPipeCumulativeAttributeGroup</code>.\n+ * <p>\n+ * Please note that <code>SoapValidator</code> has a deprecated method <code>setSchema()</code>\n+ * that it overrdes from <code>XmlValidator</code>. The algorithm takes care to not only omit\n+ * attribute <code>schema</code> as a declared attribute,\n+ * but also as an inherited attributre of <code>SoapValidator</code>. Other descendants\n+ * of <code>XmlValidator</code> are not influenced by the override by <code>SoapValidator</code>.\n+ * This part of the algorithm is handled by package-private class\n+ * <code>nl.nn.adapterframework.doc.model.ChildRejector</code>.\n+ * <p>\n+ * Finally, 'technical' overrides are ignored by this algorithm, which are\n+ * setters with an override annotation that are not deprecated and lack\n+ * IbisDoc or IbisDocRef annotations.\n+ * \n+ * <h1> The options for a config child</h1>\n+ *\n+ * The {@link ConfigChild} class in the model determines what &lt;xs:element&gt; are allowed\n+ * as children of another &lt;xs:element&gt;. The containing &lt;xs:element&gt; is the\n+ * <code>owningElement</code> field, which is of type {@link FrankElement}. A {@link ConfigChild} is\n+ * characterized by the combination of an owning element and an {@link ElementType}. As an example\n+ * consider the {@link ConfigChild} that exists for the combination of owning element\n+ * \"<code>Receiver</code>\" and element type \"<code>IListener</code>\". It produces\n+ * the following XML schema:\n+ * <pre>\n+ * {@code\n+<xs:group ref=\"IListenerListenerElementGroup\" minOccurs=\"0\" maxOccurs=\"1\" />\n+}\n+ * </pre>\n+ * This snippet appears within <code>&lt;xs:group name=\"ReceiverDeclaredChildGroup\"&gt;&lt;xs:sequence&gt;</code>.\n+ * The snippet states that a Receiver can contain all elements related to a Java class implementing\n+ * {@link IListener}, playing the role of a listener. The duplication because of syntax 2 names becomes\n+ * visible here.\n+ *\n+ * @author martijn\n+ *\n+ */\n+public class DocWriterNew {\n+\tprivate static final String CONFIGURATION = \"nl.nn.adapterframework.configuration.Configuration\";\n+\tprivate static final String ELEMENT_GROUP = \"ElementGroup\";\n+\tprivate static final String ELEMENT_ROLE = \"elementRole\";\n+\n+\tprivate FrankDocModel model;\n+\tprivate String startClassName;\n+\tprivate XmlBuilder xsdRoot;\n+\tprivate Set<String> namesCreatedFrankElements;\n+\tprivate Set<ElementRole.Key> idsCreatedElementGroups;\n+\tprivate Set<String> namesElementTypesWithChildMemberGroup;\n+\tprivate XsdWriteFilter writeFilter;\n+\tprivate XsdWriteFilter.ControlStack writeControl;\n+\n+\tpublic DocWriterNew(FrankDocModel model) {\n+\t\tthis.model = model;\n+\t}\n+\n+\tpublic void init() {\n+\t\tinit(CONFIGURATION);\n+\t}\n+\n+\tpublic void init(String startClassName) {\n+\t\tthis.startClassName = startClassName;\n+\t}\n+\n+\tpublic String getSchema() {\n+\t\txsdRoot = getXmlSchema();\n+\t\tList<XsdWriteFilter> writeFilters = asList(", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MTMxMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545871312", "bodyText": "Gerrit wou juist wel static imports voor functies van org.junit.Assert. Wanneer wel en wanneer geen statische imports?", "author": "mhdirkse", "createdAt": "2020-12-18T14:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNjYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MTM3MQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545961371", "bodyText": "Gerrit, je hebt me door de telefoon verteld wat het criterium is. Als duidelijk is waar een method vandaan komt, zoals bij org.junit.Assert.* in unit tests, dan doen we een statische import. Als uit de context niet duidelijk is waar een method vandaan komt, dan doen we geen statische import.", "author": "mhdirkse", "createdAt": "2020-12-18T16:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNjYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk0NjIyNQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554946225", "bodyText": "Precies!", "author": "nielsm5", "createdAt": "2021-01-11T10:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNjYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "334506a03de7c63043e227aa836cb92ebfeef413", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java b/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\nindex e1dfcec62..01a7c35b7 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\n\n@@ -191,7 +191,8 @@ public class DocWriterNew {\n \tprivate static final String CONFIGURATION = \"nl.nn.adapterframework.configuration.Configuration\";\n \tprivate static final String ELEMENT_GROUP = \"ElementGroup\";\n \tprivate static final String ELEMENT_ROLE = \"elementRole\";\n-\n+\tstatic final String MEMBER_CHILD_GROUP = \"MemberChildGroup\";\n+\t\n \tprivate FrankDocModel model;\n \tprivate String startClassName;\n \tprivate XmlBuilder xsdRoot;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMjg4MQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545732881", "bodyText": "Is het een idee om de methodes geheel te verplaatsen naar de Utils klasse in plaats van er naar te refereren? Dit zijn utilities, en horen daarom hier thuis.", "author": "nielsm5", "createdAt": "2020-12-18T10:13:09Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/Utils.java", "diffHunk": "@@ -44,4 +60,12 @@ public static boolean isAttributeGetterOrSetter(Method method) {\n \tpublic static boolean isConfigChildSetter(Method method) {\n \t\treturn InfoBuilderSource.isConfigChildSetter(method);\n \t}\n+\n+\tpublic static String toUpperCamelCase(String arg) {\n+\t\treturn InfoBuilderSource.toUpperCamelCase(arg);\n+\t}\n+\n+\tpublic static String promoteIfPrimitive(String typeName) {\n+\t\treturn InfoBuilderSource.promoteIfPrimitive(typeName);\n+\t}", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg3MDM0MQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545870341", "bodyText": "Dat kan denk ik pas als we de bestaande code voor ibisdoc.xsd weggooien. Nu is er gemeenschappelijke code tussen de oude en de nieuwe oplossing. Deze verwijzingen zijn een manier om daarmee om te gaan.", "author": "mhdirkse", "createdAt": "2020-12-18T14:37:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMjg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyNzE2Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554927163", "bodyText": "Okey, zolang we het maar niet vergeten!", "author": "nielsm5", "createdAt": "2021-01-11T09:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMjg4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNjEyMA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545736120", "bodyText": "informative: probeer overal de methode argumenten op 1 regel te zetten, en niet soms op 1 regel, en soms onder elkaar. Het wordt er echt niet leesbaarder door om alles onder elkaar te zetten, en omdat onze schermen horizontaal staan mogen de regels best 150 characters lang zijn.", "author": "nielsm5", "createdAt": "2020-12-18T10:18:57Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+import nl.nn.adapterframework.util.XmlBuilder;\n+\n+abstract class XsdWriteFilter {\n+\tboolean isWritingOn;\n+\n+\tabstract void startSimpleElement();\n+\tabstract void startComplexStuff();\n+\t\n+\tstatic class EnableSimpleElements extends XsdWriteFilter {\n+\t\t@Override\n+\t\tvoid startSimpleElement() {\n+\t\t\tthis.isWritingOn = true;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tvoid startComplexStuff() {\n+\t\t\tisWritingOn = false;\n+\t\t}\n+\t}\n+\n+\tstatic class EnableComplexStuff extends XsdWriteFilter {\n+\t\t@Override\n+\t\tvoid startSimpleElement() {\n+\t\t\tisWritingOn = false;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tvoid startComplexStuff() {\n+\t\t\tisWritingOn = true;\n+\t\t}\n+\t}\n+\n+\tprivate enum ControlNode {\n+\t\tSIMPLE_ELEMENT,\n+\t\tCOMPLEX_STUFF;\n+\t}\n+\n+\tstatic class ControlStack {\n+\t\tprivate final XsdWriteFilter slave;\n+\t\tprivate final Deque<ControlNode> controlNodes = new ArrayDeque<>();\n+\n+\t\tControlStack(XsdWriteFilter slave) {\n+\t\t\tthis.slave = slave;\n+\t\t\t// If all other write controls are popped, then we have complex stuff.\n+\t\t\tpushComplexStuff();\n+\t\t}\n+\n+\t\tvoid pushSimpleElement() {\n+\t\t\tcontrolNodes.addLast(ControlNode.SIMPLE_ELEMENT);\n+\t\t\tapply();\n+\t\t}\n+\n+\t\tvoid pushComplexStuff() {\n+\t\t\tcontrolNodes.addLast(ControlNode.COMPLEX_STUFF);\n+\t\t\tapply();\n+\t\t}\n+\n+\t\tvoid pop() {\n+\t\t\tcontrolNodes.removeLast();\n+\t\t\tapply();\n+\t\t}\n+\n+\t\tprivate void apply() {\n+\t\t\tswitch(controlNodes.getLast()) {\n+\t\t\tcase SIMPLE_ELEMENT:\n+\t\t\t\tslave.startSimpleElement();\n+\t\t\t\tbreak;\n+\t\t\tcase COMPLEX_STUFF:\n+\t\t\t\tslave.startComplexStuff();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tvoid addElement(XmlBuilder context, String elementName, String elementType) {\n+\t\tif(isWritingOn) {\n+\t\t\tDocWriterNewXmlUtils.addElement(context, elementName, elementType);\n+\t\t}\n+\t}\n+\n+\tvoid addElementRef(\n+\t\t\tXmlBuilder context,\n+\t\t\tString elementName) {", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQwNzI3Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551407276", "bodyText": "Gedaan", "author": "mhdirkse", "createdAt": "2021-01-04T16:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNjEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "195f27b7b9ebf312bfb2bb89218b1d2fe27fcb03", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java b/core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java\ndeleted file mode 100644\nindex 1558eb4ec..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/XsdWriteFilter.java\n+++ /dev/null\n\n@@ -1,226 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.ArrayDeque;\n-import java.util.Deque;\n-\n-import nl.nn.adapterframework.util.XmlBuilder;\n-\n-abstract class XsdWriteFilter {\n-\tboolean isWritingOn;\n-\n-\tabstract void startSimpleElement();\n-\tabstract void startComplexStuff();\n-\t\n-\tstatic class EnableSimpleElements extends XsdWriteFilter {\n-\t\t@Override\n-\t\tvoid startSimpleElement() {\n-\t\t\tthis.isWritingOn = true;\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tvoid startComplexStuff() {\n-\t\t\tisWritingOn = false;\n-\t\t}\n-\t}\n-\n-\tstatic class EnableComplexStuff extends XsdWriteFilter {\n-\t\t@Override\n-\t\tvoid startSimpleElement() {\n-\t\t\tisWritingOn = false;\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tvoid startComplexStuff() {\n-\t\t\tisWritingOn = true;\n-\t\t}\n-\t}\n-\n-\tprivate enum ControlNode {\n-\t\tSIMPLE_ELEMENT,\n-\t\tCOMPLEX_STUFF;\n-\t}\n-\n-\tstatic class ControlStack {\n-\t\tprivate final XsdWriteFilter slave;\n-\t\tprivate final Deque<ControlNode> controlNodes = new ArrayDeque<>();\n-\n-\t\tControlStack(XsdWriteFilter slave) {\n-\t\t\tthis.slave = slave;\n-\t\t\t// If all other write controls are popped, then we have complex stuff.\n-\t\t\tpushComplexStuff();\n-\t\t}\n-\n-\t\tvoid pushSimpleElement() {\n-\t\t\tcontrolNodes.addLast(ControlNode.SIMPLE_ELEMENT);\n-\t\t\tapply();\n-\t\t}\n-\n-\t\tvoid pushComplexStuff() {\n-\t\t\tcontrolNodes.addLast(ControlNode.COMPLEX_STUFF);\n-\t\t\tapply();\n-\t\t}\n-\n-\t\tvoid pop() {\n-\t\t\tcontrolNodes.removeLast();\n-\t\t\tapply();\n-\t\t}\n-\n-\t\tprivate void apply() {\n-\t\t\tswitch(controlNodes.getLast()) {\n-\t\t\tcase SIMPLE_ELEMENT:\n-\t\t\t\tslave.startSimpleElement();\n-\t\t\t\tbreak;\n-\t\t\tcase COMPLEX_STUFF:\n-\t\t\t\tslave.startComplexStuff();\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tvoid addElement(XmlBuilder context, String elementName, String elementType) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addElement(context, elementName, elementType);\n-\t\t}\n-\t}\n-\n-\tvoid addElementRef(\n-\t\t\tXmlBuilder context,\n-\t\t\tString elementName) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addElementRef(context, elementName);\n-\t\t}\n-\t}\n-\n-\tvoid addElementRef(\n-\t\t\tXmlBuilder context,\n-\t\t\tString elementName,\n-\t\t\tString minOccurs,\n-\t\t\tString maxOccurs) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addElementRef(context, elementName, minOccurs, maxOccurs);\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addElementWithType(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addElementWithType(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addComplexType(XmlBuilder schema) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addComplexType(schema);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addComplexType(XmlBuilder schema, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addComplexType(schema, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addChoice(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addChoice(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addSequence(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addSequence(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAttribute(\n-\t\t\tXmlBuilder context,\n-\t\t\tString name,\n-\t\t\tDocWriterNewXmlUtils.AttributeValueStatus valueStatus,\n-\t\t\tString value,\n-\t\t\tDocWriterNewXmlUtils.AttributeUse attributeUse) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAttribute(context, name, valueStatus, value, attributeUse);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAnyAttribute(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAnyAttribute(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tvoid addDocumentation(XmlBuilder context, String description) {\n-\t\tif(isWritingOn) {\n-\t\t\tDocWriterNewXmlUtils.addDocumentation(context, description);\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addGroup(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addGroup(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addGroupRef(XmlBuilder context, String id) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addGroupRef(context, id);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addGroupRef(XmlBuilder context, String id, String minOccurs, String maxOccurs) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addGroupRef(context, id, minOccurs, maxOccurs);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAttributeGroup(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAttributeGroup(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addAttributeGroupRef(XmlBuilder context, String name) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addAttributeGroupRef(context, name);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addComplexContent(XmlBuilder context) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addComplexContent(context);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tXmlBuilder addExtension(XmlBuilder context, String base) {\n-\t\tif(isWritingOn) {\n-\t\t\treturn DocWriterNewXmlUtils.addExtension(context, base);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1MzgwMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545753802", "bodyText": "Ik ben zelf geen grote fan van nested classes. Ik zie hier 3 nested classes voorkomen. Ik snap dat dit soms handig is, maar maak van deze Exceptie een losse klasse.", "author": "nielsm5", "createdAt": "2020-12-18T10:52:15Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -1,51 +1,162 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n-import org.apache.logging.log4j.Logger;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.core.annotation.AnnotationUtils;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n-import nl.nn.adapterframework.util.LogUtil;\n \n-public class ConfigChild {\n-\tprivate static Logger log = LogUtil.getLogger(ConfigChild.class);\n+public class ConfigChild extends ElementChild {\n+\tprivate static final Comparator<SortNode> SORT_NODE_COMPARATOR =\n+\t\t\tComparator.comparing(SortNode::getSequenceInConfig)\n+\t\t\t.thenComparing(SortNode::getName);\n+\n+\tstatic final class SortNode implements Comparable<SortNode> {\n+\t\tprivate @Getter int sequenceInConfig = Integer.MAX_VALUE;\n+\t\tprivate @Getter String name;\n+\t\tprivate @Getter boolean documented;\n+\t\tprivate @Getter boolean deprecated;\n+\t\tprivate @Getter Method method;\n+\n+\t\tSortNode(Method method) {\n+\t\t\tthis.name = method.getName();\n+\t\t\tthis.method = method;\n+\t\t\tthis.documented = (method.getAnnotation(IbisDoc.class) != null);\n+\t\t\tthis.deprecated = isDeprecated(method);\n+\t\t}\n+\n+\t\tvoid parseIbisDocAnnotation() throws IbisDocAnnotationException {\n+\t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(method, IbisDoc.class);\n+\t\t\tif(ibisDoc == null) {\n+\t\t\t\tthrow new IbisDocAnnotationException(String.format(\n+\t\t\t\t\t\t\"No @IbisDoc annotation on method [%s]\", name));\n+\t\t\t}\n+\t\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\t\tif(optionalOrder != null) {\n+\t\t\t\tsequenceInConfig = optionalOrder;\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate Integer parseIbisDocAnnotation(IbisDoc ibisDoc) throws IbisDocAnnotationException {\n+\t\t\tInteger result = null;\n+\t\t\tif(ibisDoc.value().length >= 1) {\n+\t\t\t\ttry {\n+\t\t\t\t\tresult = Integer.valueOf(ibisDoc.value()[0]);\n+\t\t\t\t} catch(Exception e) {\n+\t\t\t\t\tthrow new IbisDocAnnotationException(String.format(\n+\t\t\t\t\t\t\t\"@IbisDoc annotation on method [%s] has no valid order\", name));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\tprivate static boolean isDeprecated(Method m) {\n+\t\t\tDeprecated deprecated = m.getAnnotation(Deprecated.class);\n+\t\t\treturn (deprecated != null);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int compareTo(SortNode other) {\n+\t\t\treturn SORT_NODE_COMPARATOR.compare(this, other);\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"serial\")\n+\tpublic static class IbisDocAnnotationException extends Exception {\t\t", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQxMjQ3OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551412478", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2021-01-04T16:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1MzgwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0c3a92f2680d45f17a66fc0a2f7e321e4873bd18", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex 528e86a80..0275c034d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -137,14 +137,6 @@ public class ConfigChild extends ElementChild {\n \t\treturn new Key(this);\n \t}\n \n-\tpublic String getSyntax1NamePlural() {\n-\t\tif(getSyntax1Name().endsWith(\"s\")) {\n-\t\t\treturn getSyntax1Name();\n-\t\t} else {\n-\t\t\treturn getSyntax1Name() + \"s\";\n-\t\t}\n-\t}\n-\n \tpublic String getSyntax1Name() {\n \t\treturn elementRole.getSyntax1Name();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MzI0Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545763246", "bodyText": "Kan je van ? een generic parameter maken?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tElementChild findElementChildMatch(ElementChild elementChild, Class<? extends ElementChild> kind) {\n          \n          \n            \n            \t\tMap<? extends AbstractKey, ? extends ElementChild> lookup = allChildren.get(kind);\n          \n          \n            \n            \t\treturn lookup.get(elementChild.getKey());\n          \n          \n            \n            \t}\n          \n          \n            \n            \t<C extends ElementChild> C findElementChildMatch(C elementChild) {\n          \n          \n            \n            \t\tMap<? extends AbstractKey, ? extends ElementChild> lookup = allChildren.get(elementChild.getClass());\n          \n          \n            \n            \t\treturn lookup.get(elementChild.getKey());\n          \n          \n            \n            \t}", "author": "nielsm5", "createdAt": "2020-12-18T11:10:26Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,209 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.model.ElementChild.AbstractKey;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter boolean isDeprecated = false;\n+\n+\t// Represents the Java superclass.\n+\tprivate @Getter FrankElement parent;\n+\n+\tprivate Map<Class<? extends ElementChild>, LinkedHashMap<? extends AbstractKey, ? extends ElementChild>> allChildren;\n+\tprivate @Getter FrankElementStatistics statistics;\n \n \tFrankElement(Class<?> clazz) {\n-\t\tthis(clazz.getName(), clazz.getSimpleName());\n+\t\tthis(clazz.getName(), clazz.getSimpleName(), Modifier.isAbstract(clazz.getModifiers()));\n+\t\tisDeprecated = clazz.getAnnotation(Deprecated.class) != null;\n \t}\n \n \t/**\n \t * Constructor for testing purposes. We want to test attribute construction in isolation,\n \t * in which case we do not have a parent.\n+\t * TODO: Reorganize files such that this test constructor need not be public.\n \t */\n-\tFrankElement(final String fullName, final String simpleName) {\n+\tpublic FrankElement(final String fullName, final String simpleName, boolean isAbstract) {\n \t\tthis.fullName = fullName;\n \t\tthis.simpleName = simpleName;\n+\t\tthis.isAbstract = isAbstract;\n+\t\tthis.allChildren = new HashMap<>();\n+\t\tthis.allChildren.put(FrankAttribute.class, new LinkedHashMap<>());\n+\t\tthis.allChildren.put(ConfigChild.class, new LinkedHashMap<>());\n+\t}\n+\n+\tpublic void setParent(FrankElement parent) {\n+\t\tthis.parent = parent;\n+\t\tthis.statistics = new FrankElementStatistics(this);\n+\t}\n+\n+\tpublic void setAttributes(List<FrankAttribute> inputAttributes) {\n+\t\tsetChildrenOfKind(inputAttributes, FrankAttribute.class);\n+\t}\n+\n+\tprivate <C extends ElementChild> void setChildrenOfKind(List<C> inputChildren, Class<C> kind) {\n+\t\tLinkedHashMap<AbstractKey, C> children = new LinkedHashMap<>();\n+\t\tfor(C c: inputChildren) {\n+\t\t\tif(children.containsKey(c.getKey())) {\n+\t\t\t\tlog.warn(String.format(\"Frank element [%s] has multiple attributes / config children with key [%s]\",\n+\t\t\t\t\t\tfullName, c.getKey().toString()));\n+\t\t\t} else {\n+\t\t\t\tchildren.put(c.getKey(), c);\n+\t\t\t}\n+\t\t}\n+\t\tallChildren.put(kind, children);\n+\t}\n+\n+\tpublic List<FrankAttribute> getAttributes(Predicate<ElementChild> filter) {\n+\t\treturn getChildrenOfKind(filter, FrankAttribute.class);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T extends ElementChild> List<T> getChildrenOfKind(\n+\t\t\tPredicate<ElementChild> selector, Class<T> kind) {\n+\t\tMap<? extends AbstractKey, ? extends ElementChild> lookup = allChildren.get(kind);\n+\t\treturn lookup.values().stream().filter(selector).map(c -> (T) c).collect(Collectors.toList());\n+\t}\n+\n+\tpublic void setConfigChildren(List<ConfigChild> children) {\n+\t\tsetChildrenOfKind(children, ConfigChild.class);\n+\t}\n+\n+\tpublic List<ConfigChild> getConfigChildren(Predicate<ElementChild> filter) {\n+\t\treturn getChildrenOfKind(filter, ConfigChild.class);\n+\t}\n+\n+\tElementChild findElementChildMatch(ElementChild elementChild, Class<? extends ElementChild> kind) {\n+\t\tMap<? extends AbstractKey, ? extends ElementChild> lookup = allChildren.get(kind);\n+\t\treturn lookup.get(elementChild.getKey());\n+\t}", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyMTQ2MA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551421460", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2021-01-04T16:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MzI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d97907306a7565e49c16c419b2409d8dc06b0c58", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 3b943929b..769d144e2 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -92,8 +92,7 @@ public class FrankElement {\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tpublic <T extends ElementChild> List<T> getChildrenOfKind(\n-\t\t\tPredicate<ElementChild> selector, Class<T> kind) {\n+\tpublic <T extends ElementChild> List<T> getChildrenOfKind(Predicate<ElementChild> selector, Class<T> kind) {\n \t\tMap<? extends AbstractKey, ? extends ElementChild> lookup = allChildren.get(kind);\n \t\treturn lookup.values().stream().filter(selector).map(c -> (T) c).collect(Collectors.toList());\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2ODc5NA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545768794", "bodyText": "Gelieve hier nl.nn.adapterframework.testutil.TestFileUtils voor gebruiken, dan hebben wij 1 uniforme manier om testbestanden op te halen.", "author": "nielsm5", "createdAt": "2020-12-18T11:21:46Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package nl.nn.adapterframework.doc;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.doc.model.FrankDocModel;\n+import nl.nn.adapterframework.util.Misc;\n+\n+@RunWith(Parameterized.class)\n+public class DocWriterNewExamplesTest {\n+\t@Parameters(name = \"{1}\")\n+\tpublic static Collection<Object[]> data() {\n+\t\treturn Arrays.asList(new Object[][] {\n+\t\t\t{\"examples-simple-digester-rules.xml\", \"nl.nn.adapterframework.doc.testtarget.examples.simple.Start\", \"simple.xsd\"}\n+\t\t});\n+\t}\n+\n+\t@Parameter(0)\n+\tpublic String digesterRulesFileName;\n+\n+\t@Parameter(1)\n+\tpublic String startClassName;\n+\n+\t@Parameter(2)\n+\tpublic String expectedXsdFileName;\n+\n+\t@Test\n+\tpublic void testXsd() throws Exception {\n+\t\tFrankDocModel model = createModel();\n+\t\tDocWriterNew docWriter = new DocWriterNew(model);\n+\t\tdocWriter.init(startClassName);\n+\t\tString actualXsd = docWriter.getSchema();\n+\t\tSystem.out.println(actualXsd);\n+\t\tString expectedXsd = getExpectedXsd();\n+\t\tassertEquals(expectedXsd.replace(\"\\r\\n\", \"\\n\"), actualXsd.replace(\"\\r\\n\", \"\\n\"));\n+\t}\n+\n+\tprivate FrankDocModel createModel() throws Exception {\n+\t\treturn FrankDocModel.populate(\n+\t\t\t\tgetDigesterRulesPath(digesterRulesFileName), startClassName);\n+\t}\n+\n+\tprivate String getDigesterRulesPath(String fileName) {\n+\t\treturn \"doc/\" + fileName;\n+\t}\n+\n+\tprivate String getExpectedXsd() throws Exception {\n+\t\tString fileName = \"doc/examplesExpected/\" + expectedXsdFileName;\n+\t\tResource resource = Resource.getResource(fileName);\n+\t\tInputStream is = resource.openStream();\n+\t\tReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n+\t\treturn Misc.readerToString(reader, \"\\n\", false);\n+\t}", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyOTYyOQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551429629", "bodyText": "In dit citaat staat geen assert. Moet hier iets veranderen?", "author": "mhdirkse", "createdAt": "2021-01-04T16:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2ODc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTgyNjE0Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551826143", "bodyText": "het gaat hier om nl.nn.adapterframework.testutil.TestFileUtils.getTestFile()", "author": "gvanbrakel", "createdAt": "2021-01-05T09:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2ODc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1ODE5OQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551858199", "bodyText": "Gerrit heeft verteld dat deze code vervangen kan worden door de bestaande method TestFileUtils.getTestFile(). Dit heb ik gedaan.", "author": "mhdirkse", "createdAt": "2021-01-05T10:54:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2ODc5NA=="}], "type": "inlineReview", "revised_code": {"commit": "10b7170097bb1d9f6d7d7ad7a985d129b3bf9bb4", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java b/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java\nindex 18103b7d1..4794cbb1a 100644\n--- a/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java\n\n@@ -1,7 +1,5 @@\n package nl.nn.adapterframework.doc;\n \n-import static org.junit.Assert.assertEquals;\n-\n import java.io.BufferedReader;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2OTI1Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545769252", "bodyText": "Gelieve hier nl.nn.adapterframework.testutil.TestAssertions voor gebruiken, dan hebben wij 1 uniforme manier om testbestanden cr/lf insensitive te vergelijken.", "author": "nielsm5", "createdAt": "2020-12-18T11:22:48Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package nl.nn.adapterframework.doc;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.doc.model.FrankDocModel;\n+import nl.nn.adapterframework.util.Misc;\n+\n+@RunWith(Parameterized.class)\n+public class DocWriterNewExamplesTest {\n+\t@Parameters(name = \"{1}\")\n+\tpublic static Collection<Object[]> data() {\n+\t\treturn Arrays.asList(new Object[][] {\n+\t\t\t{\"examples-simple-digester-rules.xml\", \"nl.nn.adapterframework.doc.testtarget.examples.simple.Start\", \"simple.xsd\"}\n+\t\t});\n+\t}\n+\n+\t@Parameter(0)\n+\tpublic String digesterRulesFileName;\n+\n+\t@Parameter(1)\n+\tpublic String startClassName;\n+\n+\t@Parameter(2)\n+\tpublic String expectedXsdFileName;\n+\n+\t@Test\n+\tpublic void testXsd() throws Exception {\n+\t\tFrankDocModel model = createModel();\n+\t\tDocWriterNew docWriter = new DocWriterNew(model);\n+\t\tdocWriter.init(startClassName);\n+\t\tString actualXsd = docWriter.getSchema();\n+\t\tSystem.out.println(actualXsd);\n+\t\tString expectedXsd = getExpectedXsd();\n+\t\tassertEquals(expectedXsd.replace(\"\\r\\n\", \"\\n\"), actualXsd.replace(\"\\r\\n\", \"\\n\"));", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyNzc2Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551427766", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2021-01-04T16:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2OTI1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "10b7170097bb1d9f6d7d7ad7a985d129b3bf9bb4", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java b/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java\nindex 18103b7d1..4794cbb1a 100644\n--- a/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/doc/DocWriterNewExamplesTest.java\n\n@@ -1,7 +1,5 @@\n package nl.nn.adapterframework.doc;\n \n-import static org.junit.Assert.assertEquals;\n-\n import java.io.BufferedReader;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2OTk4NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545769985", "bodyText": "Kan elke assertion statement hier ook op 1 regel?", "author": "nielsm5", "createdAt": "2020-12-18T11:24:13Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import static nl.nn.adapterframework.doc.model.ElementChild.ALL;\n+import static nl.nn.adapterframework.doc.model.ElementChild.IN_XSD;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Class {@link FrankElement} has many different method to get children\n+ * and to search ancestors that have children. The tests in this class\n+ * are to test all these methods.\n+ * @author martijn\n+ *\n+ */\n+public class AncestorKindsTest {\n+\tprivate static final String PACKAGE = \"nl.nn.adapterframework.doc.testtarget.sparse.\";\n+\n+\tprivate FrankDocModel model;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tmodel = FrankDocModel.populate(\"doc/sparse-digester-rules.xml\", PACKAGE + \"ContainerChild\");\n+\t}\n+\n+\t@Test\n+\tpublic void testConfigChildrenOfPackageSparse() {\n+\t\tConfigChild child = model.findFrankElement(PACKAGE + \"ContainerChild\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertFalse(child.isDeprecated());\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertTrue(child.isDeprecated());\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerAncestor\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertFalse(child.isDeprecated());\n+\t\tchild = model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertTrue(child.isDeprecated());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeChild\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeAncestor\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t}\n+\n+\t@Test\n+\tpublic void testAttributesOfPackageSparse() {\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerChild\")", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDUyMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551440522", "bodyText": "Gedaan. Ik heb alle test code beter geformat.", "author": "mhdirkse", "createdAt": "2021-01-04T16:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2OTk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "da38a8fd896e13c8601762435aa4d81ebb7961b9", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java b/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java\nindex 547b93562..49389817c 100644\n--- a/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java\n\n@@ -28,46 +28,30 @@ public class AncestorKindsTest {\n \n \t@Test\n \tpublic void testConfigChildrenOfPackageSparse() {\n-\t\tConfigChild child = model.findFrankElement(PACKAGE + \"ContainerChild\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tConfigChild child = model.findFrankElement(PACKAGE + \"ContainerChild\").getConfigChildren(ALL).get(0);\n \t\tassertFalse(child.isDeprecated());\n-\t\tchild = model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\").getConfigChildren(ALL).get(0);\n \t\tassertTrue(child.isDeprecated());\n-\t\tchild = model.findFrankElement(PACKAGE + \"ContainerAncestor\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerAncestor\").getConfigChildren(ALL).get(0);\n \t\tassertFalse(child.isDeprecated());\n-\t\tchild = model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tchild = model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\").getConfigChildren(ALL).get(0);\n \t\tassertTrue(child.isDeprecated());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeChild\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeAncestor\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeChild\").getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\").getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeAncestor\").getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\").getConfigChildren(ALL).size());\n \t}\n \n \t@Test\n \tpublic void testAttributesOfPackageSparse() {\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerChild\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerAncestor\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeChild\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n-\t\tassertTrue(model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n-\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeAncestor\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n-\t\tassertTrue(model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerChild\").getAttributes(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\").getAttributes(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerAncestor\").getAttributes(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\").getAttributes(ALL).size());\n+\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeChild\").getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertTrue(model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\").getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeAncestor\").getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertTrue(model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\").getAttributes(ALL).get(0).isDeprecated());\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MDM5Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545770396", "bodyText": "Probeer statements zo veel mogelijk op 1 regel te plaatsen. Dat is veel leesbaarder!", "author": "nielsm5", "createdAt": "2020-12-18T11:25:02Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import static nl.nn.adapterframework.doc.model.ElementChild.ALL;\n+import static nl.nn.adapterframework.doc.model.ElementChild.IN_XSD;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Class {@link FrankElement} has many different method to get children\n+ * and to search ancestors that have children. The tests in this class\n+ * are to test all these methods.\n+ * @author martijn\n+ *\n+ */\n+public class AncestorKindsTest {\n+\tprivate static final String PACKAGE = \"nl.nn.adapterframework.doc.testtarget.sparse.\";\n+\n+\tprivate FrankDocModel model;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tmodel = FrankDocModel.populate(\"doc/sparse-digester-rules.xml\", PACKAGE + \"ContainerChild\");\n+\t}\n+\n+\t@Test\n+\tpublic void testConfigChildrenOfPackageSparse() {\n+\t\tConfigChild child = model.findFrankElement(PACKAGE + \"ContainerChild\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertFalse(child.isDeprecated());\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertTrue(child.isDeprecated());\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerAncestor\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertFalse(child.isDeprecated());\n+\t\tchild = model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\")\n+\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tassertTrue(child.isDeprecated());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeChild\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeAncestor\")\n+\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\")\n+\t\t\t\t.getConfigChildren(ALL).size());", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MDg5Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551440893", "bodyText": "Gedaan. Is het nu goed?", "author": "mhdirkse", "createdAt": "2021-01-04T16:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "da38a8fd896e13c8601762435aa4d81ebb7961b9", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java b/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java\nindex 547b93562..49389817c 100644\n--- a/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/doc/model/AncestorKindsTest.java\n\n@@ -28,46 +28,30 @@ public class AncestorKindsTest {\n \n \t@Test\n \tpublic void testConfigChildrenOfPackageSparse() {\n-\t\tConfigChild child = model.findFrankElement(PACKAGE + \"ContainerChild\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tConfigChild child = model.findFrankElement(PACKAGE + \"ContainerChild\").getConfigChildren(ALL).get(0);\n \t\tassertFalse(child.isDeprecated());\n-\t\tchild = model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\").getConfigChildren(ALL).get(0);\n \t\tassertTrue(child.isDeprecated());\n-\t\tchild = model.findFrankElement(PACKAGE + \"ContainerAncestor\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tchild = model.findFrankElement(PACKAGE + \"ContainerAncestor\").getConfigChildren(ALL).get(0);\n \t\tassertFalse(child.isDeprecated());\n-\t\tchild = model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\")\n-\t\t\t\t.getConfigChildren(ALL).get(0);\n+\t\tchild = model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\").getConfigChildren(ALL).get(0);\n \t\tassertTrue(child.isDeprecated());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeChild\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeAncestor\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\")\n-\t\t\t\t.getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeChild\").getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\").getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"AttributeAncestor\").getConfigChildren(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\").getConfigChildren(ALL).size());\n \t}\n \n \t@Test\n \tpublic void testAttributesOfPackageSparse() {\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerChild\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerAncestor\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\")\n-\t\t\t\t.getAttributes(ALL).size());\n-\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeChild\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n-\t\tassertTrue(model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n-\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeAncestor\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n-\t\tassertTrue(model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\")\n-\t\t\t\t.getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerChild\").getAttributes(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerNoAncestorBecauseChildrenDeprecated\").getAttributes(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"ContainerAncestor\").getAttributes(ALL).size());\n+\t\tassertEquals(0, model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedConfigChildren\").getAttributes(ALL).size());\n+\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeChild\").getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertTrue(model.findFrankElement(PACKAGE + \"AttributeNoAncestorBecauseAttributesDeprecated\").getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertFalse(model.findFrankElement(PACKAGE + \"AttributeAncestor\").getAttributes(ALL).get(0).isDeprecated());\n+\t\tassertTrue(model.findFrankElement(PACKAGE + \"GrandParentWithDeprecatedAttributes\").getAttributes(ALL).get(0).isDeprecated());\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTY4Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545771682", "bodyText": "Hier ook graag elk statement op 1 regel.", "author": "nielsm5", "createdAt": "2020-12-18T11:27:49Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/model/FrankDocModelConfigChildrenTest.java", "diffHunk": "@@ -16,28 +20,42 @@\n \n public class FrankDocModelConfigChildrenTest {\n \tprivate static String CONTAINER = \"nl.nn.adapterframework.doc.testtarget.children.Container\";\n-\n+\tprivate static String CONTAINER_DERIVED = \"nl.nn.adapterframework.doc.testtarget.children.ContainerDerived\";\n+\tprivate static String CONTAINER_OTHER = \"nl.nn.adapterframework.doc.testtarget.children.ContainerOther\";\n+\t\n \tprivate FrankDocModel instance;\n \tprivate List<ConfigChild> configChildren;\n+\tprivate List<ConfigChild> configChildrenOfDerived;\n \n \t@Before\n \tpublic void setUp() throws SAXException, IOException, ReflectiveOperationException {\n \t\tinstance = new FrankDocModel();\n \t\tinstance.createConfigChildDescriptorsFrom(\"doc/simple-digester-rules.xml\");\n \t\tinstance.findOrCreateElementType(\n \t\t\t\tUtils.getClass(CONTAINER));\n-\t\tconfigChildren = instance.getAllElements().get(CONTAINER).getConfigChildren();\n+\t\tinstance.findOrCreateElementType(\n+\t\t\t\tUtils.getClass(CONTAINER_DERIVED));\n+\t\tinstance.findOrCreateElementType(\n+\t\t\t\tUtils.getClass(CONTAINER_OTHER));\n+\t\tinstance.setOverriddenFrom();", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MTc0Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551441743", "bodyText": "Gedaan. Mogen de stream stappen wel ieder op hun eigen regel?", "author": "mhdirkse", "createdAt": "2021-01-04T16:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk0NTgxOQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554945819", "bodyText": "Het ziet er zo goed uit!", "author": "nielsm5", "createdAt": "2021-01-11T10:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MTY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0c3a92f2680d45f17a66fc0a2f7e321e4873bd18", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/doc/model/FrankDocModelConfigChildrenTest.java b/core/src/test/java/nl/nn/adapterframework/doc/model/FrankDocModelConfigChildrenTest.java\nindex 8533809c8..a3c1175cc 100644\n--- a/core/src/test/java/nl/nn/adapterframework/doc/model/FrankDocModelConfigChildrenTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/doc/model/FrankDocModelConfigChildrenTest.java\n\n@@ -46,7 +46,6 @@ public class FrankDocModelConfigChildrenTest {\n \tpublic void whenConfigChildMethodThenConfigChildProduced() throws Exception {\n \t\tConfigChild actual = selectChild(\"syntax1NameChild\");\n \t\tassertEquals(\"syntax1NameChild\", actual.getSyntax1Name());\n-\t\tassertEquals(\"syntax1NameChilds\", actual.getSyntax1NamePlural());\n \t\tassertEquals(\"Container\", actual.getOwningElement().getSimpleName());\n \t\tassertEquals(\"Child\", actual.getElementType().getSimpleName());\n \t\tassertTrue(actual.isDocumented());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MzU0NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r545773545", "bodyText": "Fijn dat je commentaar toevoegt!", "author": "nielsm5", "createdAt": "2020-12-18T11:31:54Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/testtarget/examples/simple/AbstractParentOfStart.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package nl.nn.adapterframework.doc.testtarget.examples.simple;\n+\n+//Should not appear as element in the XSD because it is abstract.\n+//Should appear as attribute group because it has an attribute", "originalCommit": "6e0745df244d5e86d13e504f6f73ec158254ee1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0MTg4OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r551441888", "bodyText": "Graag gedaan.", "author": "mhdirkse", "createdAt": "2021-01-04T16:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MzU0NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "334506a03de7c63043e227aa836cb92ebfeef413", "url": "https://github.com/ibissource/iaf/commit/334506a03de7c63043e227aa836cb92ebfeef413", "message": "Multiple improvements", "committedDate": "2020-12-18T12:03:43Z", "type": "commit"}, {"oid": "3ed303d4f82b3e67b8f9f5932a3954f798fd4eb2", "url": "https://github.com/ibissource/iaf/commit/3ed303d4f82b3e67b8f9f5932a3954f798fd4eb2", "message": "Improve a test", "committedDate": "2020-12-18T12:07:29Z", "type": "commit"}, {"oid": "0c3a92f2680d45f17a66fc0a2f7e321e4873bd18", "url": "https://github.com/ibissource/iaf/commit/0c3a92f2680d45f17a66fc0a2f7e321e4873bd18", "message": "Let ElementType maintain ElementRole instead of syntax1Name", "committedDate": "2020-12-18T14:33:15Z", "type": "commit"}, {"oid": "195f27b7b9ebf312bfb2bb89218b1d2fe27fcb03", "url": "https://github.com/ibissource/iaf/commit/195f27b7b9ebf312bfb2bb89218b1d2fe27fcb03", "message": "Eliminate complex code of XsdWriteFilter", "committedDate": "2021-01-04T11:28:10Z", "type": "commit"}, {"oid": "d805c47cc137952f52cd569dcdaf6600bb927cac", "url": "https://github.com/ibissource/iaf/commit/d805c47cc137952f52cd569dcdaf6600bb927cac", "message": "Move methods for names to the same spot in DocWriterNew", "committedDate": "2021-01-04T12:11:34Z", "type": "commit"}, {"oid": "d97907306a7565e49c16c419b2409d8dc06b0c58", "url": "https://github.com/ibissource/iaf/commit/d97907306a7565e49c16c419b2409d8dc06b0c58", "message": "Formatting", "committedDate": "2021-01-04T16:02:47Z", "type": "commit"}, {"oid": "c335923885e2a66fcbb30b9746197a51b25d1ec2", "url": "https://github.com/ibissource/iaf/commit/c335923885e2a66fcbb30b9746197a51b25d1ec2", "message": "Give IbisDocAnnotationException its own file", "committedDate": "2021-01-04T16:10:41Z", "type": "commit"}, {"oid": "ef5efb8ab653a29f4f25957818289e66e55d1fda", "url": "https://github.com/ibissource/iaf/commit/ef5efb8ab653a29f4f25957818289e66e55d1fda", "message": "Remove unneccessary arg of FrankElement.findElementChildMatch", "committedDate": "2021-01-04T16:24:37Z", "type": "commit"}, {"oid": "10b7170097bb1d9f6d7d7ad7a985d129b3bf9bb4", "url": "https://github.com/ibissource/iaf/commit/10b7170097bb1d9f6d7d7ad7a985d129b3bf9bb4", "message": "Use TestAssertions.assertEqualsIgnoreCRLF", "committedDate": "2021-01-04T16:34:44Z", "type": "commit"}, {"oid": "da38a8fd896e13c8601762435aa4d81ebb7961b9", "url": "https://github.com/ibissource/iaf/commit/da38a8fd896e13c8601762435aa4d81ebb7961b9", "message": "Format test code", "committedDate": "2021-01-04T16:54:59Z", "type": "commit"}, {"oid": "369577a4b20709beaf38cbdfe5afcb0fbc1fdb04", "url": "https://github.com/ibissource/iaf/commit/369577a4b20709beaf38cbdfe5afcb0fbc1fdb04", "message": "Use method getTestFile()", "committedDate": "2021-01-05T10:50:49Z", "type": "commit"}, {"oid": "4dc4c7b7019ca6e242893414cbbf82c44c431480", "url": "https://github.com/ibissource/iaf/commit/4dc4c7b7019ca6e242893414cbbf82c44c431480", "message": "Add the default value of an attribute to its documentation", "committedDate": "2021-01-05T11:37:28Z", "type": "commit"}, {"oid": "92765b60c37296fb6908a7c2ebdfe75ba5167d65", "url": "https://github.com/ibissource/iaf/commit/92765b60c37296fb6908a7c2ebdfe75ba5167d65", "message": "Added tracing - not tested in any way yet", "committedDate": "2021-01-05T17:32:00Z", "type": "commit"}, {"oid": "a45f70bef3b415d76a47b3286873977717734109", "url": "https://github.com/ibissource/iaf/commit/a45f70bef3b415d76a47b3286873977717734109", "message": "Fix tracing", "committedDate": "2021-01-06T17:20:07Z", "type": "commit"}, {"oid": "4b04084f4f5b39864aa39550740b45f2d3049e66", "url": "https://github.com/ibissource/iaf/commit/4b04084f4f5b39864aa39550740b45f2d3049e66", "message": "Write JavaDoc package overview of the model", "committedDate": "2021-01-07T17:26:52Z", "type": "commit"}, {"oid": "f6a5549407c52a6673282a326b2c2730b2233204", "url": "https://github.com/ibissource/iaf/commit/f6a5549407c52a6673282a326b2c2730b2233204", "message": "Finish Javadocs", "committedDate": "2021-01-08T13:43:26Z", "type": "commit"}, {"oid": "099e626cb07ed5c5ecafdf50909e7ad1315647da", "url": "https://github.com/ibissource/iaf/commit/099e626cb07ed5c5ecafdf50909e7ad1315647da", "message": "Update license texts", "committedDate": "2021-01-11T08:56:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMDUyOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554930528", "bodyText": "Vergeet niet je HTML tags te sluiten!", "author": "nielsm5", "createdAt": "2021-01-11T09:56:27Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/* \n+Copyright 2020, 2021 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.util.function.Predicate;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import nl.nn.adapterframework.doc.DocWriterNew;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Base class of FrankAttribute and ConfigChild. This class was introduced\n+ * to implement the following common logic:\n+ * <ul>\n+ * <li> The decision whether to include an attribute or config child in the XML schema\n+ * is based on the same information.\n+ * <li> The structure is very similar in the XML schema for config children and\n+ * attributes. In both cases, we have cumulative groups that include inherited\n+ * items and declared groups that hold only items at the present level of the\n+ * inheritance hierarchy. Please see this in action at {@link DocWriterNew}.", "originalCommit": "099e626cb07ed5c5ecafdf50909e7ad1315647da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk3MTA1MA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554971050", "bodyText": "Gedaan. Ik heb op <ul> en <ol> gezocht om te zien of dit probleem ook elders speelt. Ik heb dit probleem nergens anders gevonden.", "author": "mhdirkse", "createdAt": "2021-01-11T11:07:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMTA5NA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r555001094", "bodyText": "De li's moeten ook nog gesloten worden", "author": "nielsm5", "createdAt": "2021-01-11T12:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE2Njc1Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r555166752", "bodyText": "Ik heb een pagina gevonden waar staat dat dat niet hoeft. Zie https://stackoverflow.com/questions/33787753/javadoc-closing-tags", "author": "mhdirkse", "createdAt": "2021-01-11T16:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMDUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7787152fd4a41a7d1167835ad4b9c4d4976e4262", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\nindex eedbe233c..38ae19ad1 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n\n@@ -35,6 +35,7 @@ import nl.nn.adapterframework.util.LogUtil;\n  * attributes. In both cases, we have cumulative groups that include inherited\n  * items and declared groups that hold only items at the present level of the\n  * inheritance hierarchy. Please see this in action at {@link DocWriterNew}.\n+ * </ul>\n  *\n  * @author martijn\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMzM2Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554933367", "bodyText": "Geeft getFullName() altijd de juiste waarde terug voor candidates.get(0) ?\nMoet dit niet result.getFullName() zijn?", "author": "nielsm5", "createdAt": "2021-01-11T10:01:13Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java", "diffHunk": "@@ -1,24 +1,149 @@\n+/* \n+Copyright 2020, 2021 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n+/**\n+ * Models a collection of FrankElement. The collection can be characterized by\n+ * a Java interface in the FF! sources, or there can be one member that is referenced\n+ * by its FrankElement. FrankElement objects that model an abstract Java class should\n+ * be omitted as members. This is done automatically when Spring is used to get the\n+ * implementing classes of a modeled Java interface.\n+ *\n+ * @author martijn\n+ *\n+ */\n public class ElementType {\n-\tprivate @Getter String fullName;\n-\tprivate @Getter String simpleName;\n+\tprivate static Logger log = LogUtil.getLogger(ElementType.class);\n \tprivate @Getter Map<String, FrankElement> members;\n \tprivate @Getter boolean fromJavaInterface;\n+\t\n+\tprivate @Getter LinkedHashSet<ElementRole> elementRoles = new LinkedHashSet<>();\n+\n+\tprivate static class InterfaceHierarchyItem {\n+\t\tprivate @Getter String fullName;\n+\t\tprivate @Getter String simpleName;\n+\t\tprivate @Getter Map<String, InterfaceHierarchyItem> parentInterfaces = new TreeMap<>();\n+\n+\t\tInterfaceHierarchyItem(Class<?> clazz) {\n+\t\t\tthis.fullName = clazz.getName();\n+\t\t\tthis.simpleName = clazz.getSimpleName();\n+\t\t\tif(clazz.isInterface()) {\n+\t\t\t\tfor(Class<?> superInterface: clazz.getInterfaces()) {\n+\t\t\t\t\tInterfaceHierarchyItem superInterfaceHierarchyItem = new InterfaceHierarchyItem(superInterface);\n+\t\t\t\t\tparentInterfaces.put(superInterfaceHierarchyItem.getFullName(), superInterfaceHierarchyItem);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tList<ElementType> findMatchingElementTypes(FrankDocModel model) {\n+\t\t\tElementType currentMatch = model.findElementType(fullName);\n+\t\t\tif(currentMatch != null) {\n+\t\t\t\treturn Arrays.asList(currentMatch);\n+\t\t\t}\n+\t\t\tList<ElementType> result = new ArrayList<>();\n+\t\t\tfor(String parentKey: parentInterfaces.keySet()) {\n+\t\t\t\tresult.addAll(parentInterfaces.get(parentKey).findMatchingElementTypes(model));\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\tprivate final InterfaceHierarchyItem interfaceHierarchy;\n+\tprivate @Getter ElementType highestCommonInterface;\n \n \tElementType(Class<?> clazz) {\n-\t\tfullName = clazz.getName();\n-\t\tsimpleName = clazz.getSimpleName();\n+\t\tinterfaceHierarchy = new InterfaceHierarchyItem(clazz);\n \t\tmembers = new HashMap<>();\n \t\tthis.fromJavaInterface = clazz.isInterface();\n \t}\n \n+\tpublic String getFullName() {\n+\t\treturn interfaceHierarchy.getFullName();\n+\t}\n+\n+\tpublic String getSimpleName() {\n+\t\treturn interfaceHierarchy.getSimpleName();\n+\t}\n+\n \tvoid addMember(FrankElement member) {\n \t\tmembers.put(member.getFullName(), member);\n \t}\n+\n+\tFrankElement getSingletonElement() throws ReflectiveOperationException {\n+\t\tif(members.size() != 1) {\n+\t\t\tthrow new ReflectiveOperationException(String.format(\"Expected that ElementType [%s] contains exactly one element\", getFullName()));\n+\t\t}\n+\t\treturn members.values().iterator().next();\n+\t}\n+\n+\tvoid registerElementRole(ElementRole elementRole) {\n+\t\telementRoles.add(elementRole);\n+\t}\n+\n+\tvoid calculateHighestCommonInterface(FrankDocModel model) {\n+\t\thighestCommonInterface = this;\n+\t\tElementType nextCandidate = highestCommonInterface.getNextCommonInterface(model);\n+\t\twhile(nextCandidate != null) {\n+\t\t\thighestCommonInterface = nextCandidate;\n+\t\t\tnextCandidate = highestCommonInterface.getNextCommonInterface(model);\n+\t\t}\n+\t\tif(log.isTraceEnabled()) {\n+\t\t\tlog.trace(String.format(\"ElementType [%s] has highest common interface [%s]\", this.getFullName(), highestCommonInterface.getFullName()));\n+\t\t}\n+\t}\n+\n+\tprivate ElementType getNextCommonInterface(FrankDocModel model) {\n+\t\tif(! fromJavaInterface) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tList<ElementType> candidates = new ArrayList<>();\n+\t\tfor(String key: interfaceHierarchy.getParentInterfaces().keySet()) {\n+\t\t\tcandidates.addAll(interfaceHierarchy.getParentInterfaces().get(key).findMatchingElementTypes(model));\n+\t\t}\n+\t\tif(candidates.isEmpty()) {\n+\t\t\treturn null;\n+\t\t} else {\n+\t\t\tElementType result = candidates.get(0);\n+\t\t\tif(candidates.size() >= 2) {\n+\t\t\t\tlog.warn(String.format(\"There are multiple candidates for the next common interface of ElementType [%s], which are [%s]. Chose [%s]\",\n+\t\t\t\t\t\tgetFullName(),", "originalCommit": "099e626cb07ed5c5ecafdf50909e7ad1315647da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk1NzU3OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554957578", "bodyText": "Hier wordt een foutmelding in de log geschreven. In die foutmelding moet staan op welk ElementType object de getNextCommonInterface() method wordt toegepast. Dat ElementType wordt hier gerefereerd.", "author": "mhdirkse", "createdAt": "2021-01-11T10:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMzM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMTkwOQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r555001909", "bodyText": "Ah, ik vroeg het mij af omdat in de log regel Chose staat... Misschien dat het duidelijke is/wordt als je er elementType [...] fullName [...] oid van maakt.", "author": "nielsm5", "createdAt": "2021-01-11T12:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMzM2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzNzA2NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554937065", "bodyText": "Ik denk dat je de verkeerde Collections geselecteerd hebt?", "author": "nielsm5", "createdAt": "2021-01-11T10:07:50Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,22 +1,45 @@\n+/* \n+Copyright 2020, 2021 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import static nl.nn.adapterframework.doc.model.ElementChild.ALL;\n+\n import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n import java.util.StringTokenizer;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n import org.xml.sax.SAXException;\n \n+import edu.emory.mathcs.backport.java.util.Collections;", "originalCommit": "099e626cb07ed5c5ecafdf50909e7ad1315647da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk3MTQxNw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r554971417", "bodyText": "Gefixed.", "author": "mhdirkse", "createdAt": "2021-01-11T11:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzNzA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7787152fd4a41a7d1167835ad4b9c4d4976e4262", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\nindex c0843526f..28494f514 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n\n@@ -23,6 +23,7 @@ import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n"}}, {"oid": "7787152fd4a41a7d1167835ad4b9c4d4976e4262", "url": "https://github.com/ibissource/iaf/commit/7787152fd4a41a7d1167835ad4b9c4d4976e4262", "message": "Follow-up review comments by Niels", "committedDate": "2021-01-11T10:51:39Z", "type": "commit"}, {"oid": "a0a3d69816a9e8eb843645a652bc4b29b3bd271d", "url": "https://github.com/ibissource/iaf/commit/a0a3d69816a9e8eb843645a652bc4b29b3bd271d", "message": "Create first iteration of the list of groups", "committedDate": "2020-11-05T11:16:08Z", "type": "commit"}, {"oid": "e894a8374dc22b222a29abb29f289d5291461722", "url": "https://github.com/ibissource/iaf/commit/e894a8374dc22b222a29abb29f289d5291461722", "message": "Log exception and ignore long test", "committedDate": "2020-11-05T11:24:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3MDE0Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r518570143", "bodyText": "Het is heel goed dat je test classes en interfaces maakt, maar ik kan me voorstellen dat het verwarrend gaat zijn dat je daarvoor bekende termen als 'Pipe' en 'Listener' gebruikt, met name als ze af gaan wijken van wat bekend is.\nIn deze class heeft een 'Pipe' een 'Listener'. Dat is in het echt niet zo.\nIk herinner me nog een telefoongesprek waarin jij zoiets zei als dat een Pipe een Listener had. Je bedoelde toen misschien dit geval, maar ik was toen in verwarring.\nIk denk dat je hier dus beter andere termen kan gebruiken, zoals Parent en Child, of StructuredItem en SubItem", "author": "gvanbrakel", "createdAt": "2020-11-06T07:37:31Z", "path": "core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/Pipe.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package nl.nn.adapterframework.doc.testtarget.groups;\n+\n+import nl.nn.adapterframework.doc.IbisDoc;\n+\n+public class Pipe implements IPipe {\n+\t@IbisDoc(\"10\")\n+\tpublic void setListener(Listener listener) {\n+\t}\n+}", "originalCommit": "e894a8374dc22b222a29abb29f289d5291461722", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MjkwMQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r531142901", "bodyText": "Ik heb dit punt gedeeltelijk opgelost. Op deze specifieke plaats heb ik de namen veranderd, maar ik heb ook ergens de naam\nIListener laten staan. Dat is in package nl.nn.adapterframework.doc.testtarget.simple. Er is daar geen conflict omdat alleen het woord \"Listener\" overeen komt met het FF!. Alle andere classes in dit package hebben namen die niets met het FF! te maken hebben. Een andere reden om dit tweede geval niet te veranderen is dat de gerelateerde test code complexer is dus moeilijker aan te passen. Maar als ik er een of twee uur aan besteed dan is het gebeurd. Wil je dat ik dit af maak of is het goed zoals ik het gemaakt heb?", "author": "mhdirkse", "createdAt": "2020-11-26T16:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3MDE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0NDQxNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535944416", "bodyText": "Ik heb geen bezwaar gezien. Daarom resolve ik hem nu.", "author": "mhdirkse", "createdAt": "2020-12-04T09:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3MDE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/Pipe.java b/core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/GroupContainer.java\nsimilarity index 52%\nrename from core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/Pipe.java\nrename to core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/GroupContainer.java\nindex 490c651f2..3316b7237 100644\n--- a/core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/Pipe.java\n+++ b/core/src/test/java/nl/nn/adapterframework/doc/testtarget/groups/GroupContainer.java\n\n@@ -2,8 +2,8 @@ package nl.nn.adapterframework.doc.testtarget.groups;\n \n import nl.nn.adapterframework.doc.IbisDoc;\n \n-public class Pipe implements IPipe {\n+public class GroupContainer implements IGroupContainer {\n \t@IbisDoc(\"10\")\n-\tpublic void setListener(Listener listener) {\n+\tpublic void setListener(GroupChild groupChild) {\n \t}\n }\n"}}, {"oid": "2991813f65bd948c7b5edefa862032efe6fbfdce", "url": "https://github.com/ibissource/iaf/commit/2991813f65bd948c7b5edefa862032efe6fbfdce", "message": "First iteration of writing an XSD", "committedDate": "2020-11-06T12:51:25Z", "type": "commit"}, {"oid": "ef66f0e13b6ba0d713f60625c3a79e1977b354b8", "url": "https://github.com/ibissource/iaf/commit/ef66f0e13b6ba0d713f60625c3a79e1977b354b8", "message": "A complex type must always have a sequence", "committedDate": "2020-11-06T13:18:56Z", "type": "commit"}, {"oid": "af93f5e49327c03cf5d1d76788b8fe44d964f99d", "url": "https://github.com/ibissource/iaf/commit/af93f5e49327c03cf5d1d76788b8fe44d964f99d", "message": "Wrap config children in a tag indicating their function", "committedDate": "2020-11-09T08:54:29Z", "type": "commit"}, {"oid": "e908619a21f7a76d4e8bd05393d34ade15b1f07a", "url": "https://github.com/ibissource/iaf/commit/e908619a21f7a76d4e8bd05393d34ade15b1f07a", "message": "Omit deprecated config children and attributes from XSD", "committedDate": "2020-11-09T09:53:42Z", "type": "commit"}, {"oid": "d52e80ba30cf64b2dd9b8232ee746a376b12712b", "url": "https://github.com/ibissource/iaf/commit/d52e80ba30cf64b2dd9b8232ee746a376b12712b", "message": "Merge branch 'master' into fillDataModel4", "committedDate": "2020-11-09T11:34:26Z", "type": "commit"}, {"oid": "24ab13d5df47762195c7f6b08775cee7e62377dd", "url": "https://github.com/ibissource/iaf/commit/24ab13d5df47762195c7f6b08775cee7e62377dd", "message": "Fix new ibisdoc.xsd by updating digester-rules.xml", "committedDate": "2020-11-09T13:32:40Z", "type": "commit"}, {"oid": "8fdcdbb2228dc81336172ce278273119ad383375", "url": "https://github.com/ibissource/iaf/commit/8fdcdbb2228dc81336172ce278273119ad383375", "message": "Apply inheritance for config children\n\nAttributes not yet done", "committedDate": "2020-11-10T13:55:00Z", "type": "commit"}, {"oid": "771f22d4f26977acb87848b7394f4243d959e0a6", "url": "https://github.com/ibissource/iaf/commit/771f22d4f26977acb87848b7394f4243d959e0a6", "message": "Omit attribute overrides from XSD", "committedDate": "2020-11-12T14:26:27Z", "type": "commit"}, {"oid": "d4be7722914f46e44142a761c44690c0dbc13189", "url": "https://github.com/ibissource/iaf/commit/d4be7722914f46e44142a761c44690c0dbc13189", "message": "Add FrankElementStatistics - not unit tested", "committedDate": "2020-11-13T11:26:26Z", "type": "commit"}, {"oid": "bec56d604e12c634c2574dcdb68d734a2a5b16ba", "url": "https://github.com/ibissource/iaf/commit/bec56d604e12c634c2574dcdb68d734a2a5b16ba", "message": "Handle overrides in the XSD - not enough unit tests", "committedDate": "2020-11-13T17:23:47Z", "type": "commit"}, {"oid": "6066ea08bed168ddab879a2e964628acc7aa7e08", "url": "https://github.com/ibissource/iaf/commit/6066ea08bed168ddab879a2e964628acc7aa7e08", "message": "Fixed bugs", "committedDate": "2020-11-13T19:19:05Z", "type": "commit"}, {"oid": "9ed18aa958face00d75ee463163956ad15252316", "url": "https://github.com/ibissource/iaf/commit/9ed18aa958face00d75ee463163956ad15252316", "message": "More statistics", "committedDate": "2020-11-16T09:59:13Z", "type": "commit"}, {"oid": "cea6e3a7e695600d240fd943b41ae1b002334c12", "url": "https://github.com/ibissource/iaf/commit/cea6e3a7e695600d240fd943b41ae1b002334c12", "message": "More common code for groups and take care of abstract classes", "committedDate": "2020-11-16T14:08:59Z", "type": "commit"}, {"oid": "eba36da1970f29b337968e9048b062c9eb8e9d33", "url": "https://github.com/ibissource/iaf/commit/eba36da1970f29b337968e9048b062c9eb8e9d33", "message": "Maintain property whether an attribute is documented", "committedDate": "2020-11-16T15:08:26Z", "type": "commit"}, {"oid": "95648a42abf9e1b76d72de1c8276c1abb4f45e68", "url": "https://github.com/ibissource/iaf/commit/95648a42abf9e1b76d72de1c8276c1abb4f45e68", "message": "Finish documented properties of ConfigChild and FrankAttribute", "committedDate": "2020-11-16T15:52:35Z", "type": "commit"}, {"oid": "b1a81dd99717baca6b38d558f6e9975ca5a61b79", "url": "https://github.com/ibissource/iaf/commit/b1a81dd99717baca6b38d558f6e9975ca5a61b79", "message": "Children that are overridden but not documented are ignored for XSD", "committedDate": "2020-11-16T16:02:48Z", "type": "commit"}, {"oid": "23fd64bb1e271dda471abb3ec983d92994a846c7", "url": "https://github.com/ibissource/iaf/commit/23fd64bb1e271dda471abb3ec983d92994a846c7", "message": "Flatten the element hierarchy prescribed by the XSD", "committedDate": "2020-11-16T16:44:32Z", "type": "commit"}, {"oid": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "url": "https://github.com/ibissource/iaf/commit/d9d30609981971b04f05ad4fd69792be2b0d4a61", "message": "Omit useless types from XSD", "committedDate": "2020-11-16T17:41:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMjQyOQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525132429", "bodyText": "Ik denk dat je hier zou moeten zeggen:\n\"all attributes: all declared attributes as well as all inherited attributes.\"", "author": "gvanbrakel", "createdAt": "2020-11-17T12:56:12Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+\n+/**\n+ * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n+ * This class is reused for building attribute groups and building config child groups.\n+ * The use of this class is explained for attribute groups.\n+ *\n+ * For each FrankElement in the model, we need an XSD attributeGroup that lists\n+ * all attributes and all inherited attributes. To keep the XSD small, we would like", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwNTk5Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r531005992", "bodyText": "Deze opmerking slaat nu op een andere class, en daar heb ik hem ter harte genomen. Deze class is ondertussen weggehaald; hij was dubbelop.", "author": "mhdirkse", "createdAt": "2020-11-26T12:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMjQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java b/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\ndeleted file mode 100644\nindex aeb1489f7..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import nl.nn.adapterframework.doc.model.FrankElement;\n-\n-/**\n- * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n- * This class is reused for building attribute groups and building config child groups.\n- * The use of this class is explained for attribute groups.\n- *\n- * For each FrankElement in the model, we need an XSD attributeGroup that lists\n- * all attributes and all inherited attributes. To keep the XSD small, we would like\n- * to list the inherited attributes by referencing the attributeGroup of the parent.\n- * This is not possible however when the current FrankElement overrides attributes.\n- * In this case, the data from the current FrankElement is needed and attribute that\n- * was overridden should be omitted.\n- *\n- * To support this, we make two kinds of groups for each FrankElement:\n- * <ul>\n- * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n- * <li> The declared group that holds only the declared attributes (config children).\n- * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n- * to repeat attributes, to reference the declared group or to reference the cumulative group.\n- * @author martijn\n- *\n- * @param <K> The key type for referencing attributes or config children.\n- */\n-abstract class CumulativeGroupCreator<K> {\n-\tprivate FrankElement current;\n-\tprivate Map<K, Boolean> items;\n-\tprivate Set<K> overridden;\n-\tprivate boolean isGroupRefRepetitionNotified;\n-\n-\tCumulativeGroupCreator() {\n-\t}\n-\n-\tvoid run(FrankElement start) {\n-\t\tenter(start);\n-\t\taddDeclaredGroup(start);\n-\t\toverridden = getCurrentOverrides();\n-\t\twhile(nextAncestor(current) != null) {\n-\t\t\tenter(nextAncestor(current));\n-\t\t\tif(overridden.isEmpty()) {\n-\t\t\t\tsafeAddCumulative();\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\thandleOverridesForCurrent();\n-\t\t}\n-\t}\n-\n-\tprivate void enter(FrankElement current) {\n-\t\tthis.current = current;\n-\t\titems = itemsOf(current);\t\t\n-\t}\n-\n-\tprivate void safeAddCumulative() {\n-\t\tif(nextAncestor(current) == null) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t} else {\n-\t\t\taddCumulativeGroup(current);\n-\t\t}\n-\t}\n-\n-\tprivate void handleOverridesForCurrent() {\n-\t\thandleNotifyGroupRepetition();\n-\t\tSet<K> omit = new HashSet<>(items.keySet());\n-\t\tomit.retainAll(overridden);\n-\t\tif(omit.isEmpty()) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t}\n-\t\telse {\n-\t\t\trepeatNonOverriddenItems();\n-\t\t}\n-\t\toverridden.addAll(getCurrentOverrides());\n-\t\toverridden.removeAll(getCurrentNonOverrides());\n-\t}\n-\n-\tprivate void repeatNonOverriddenItems() {\n-\t\tnotifyItemsRepeated(current);\n-\t\tSet<K> retain = new HashSet<>(items.keySet());\n-\t\tretain.removeAll(overridden);\n-\t\tif(! retain.isEmpty()) {\n-\t\t\taddItemsOf(retain, current);\t\n-\t\t}\n-\t}\n-\n-\tprivate Set<K> getCurrentOverrides() {\n-\t\treturn getWithOverrideStatus(true);\n-\t}\n-\n-\tprivate Set<K> getCurrentNonOverrides() {\n-\t\treturn getWithOverrideStatus(false);\n-\t}\n-\n-\tprivate Set<K> getWithOverrideStatus(final boolean overrideStatus) {\n-\t\treturn items.keySet().stream()\n-\t\t\t\t.filter(k -> items.get(k).booleanValue() == overrideStatus)\n-\t\t\t\t.collect(Collectors.toSet());\t\t\n-\t}\n-\n-\tprivate void handleNotifyGroupRepetition() {\n-\t\tif(! isGroupRefRepetitionNotified) {\n-\t\t\tnotifyGroupRefRepeated(current);\n-\t\t\tisGroupRefRepetitionNotified = true;\n-\t\t}\n-\t}\n-\n-\tabstract FrankElement nextAncestor(FrankElement element);\n-\tabstract Map<K, Boolean> itemsOf(FrankElement frankElement);\n-\tabstract void addItemsOf(Set<K> items, FrankElement itemOwner);\n-\tabstract void addDeclaredGroup(FrankElement frankElement);\n-\tabstract void addCumulativeGroup(FrankElement frankElement);\n-\tabstract void notifyGroupRefRepeated(FrankElement frankElement);\n-\tabstract void notifyItemsRepeated(FrankElement frankElement);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMzczMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525133733", "bodyText": "Woord toevoegen:\nand an attribute that", "author": "gvanbrakel", "createdAt": "2020-11-17T12:58:28Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+\n+/**\n+ * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n+ * This class is reused for building attribute groups and building config child groups.\n+ * The use of this class is explained for attribute groups.\n+ *\n+ * For each FrankElement in the model, we need an XSD attributeGroup that lists\n+ * all attributes and all inherited attributes. To keep the XSD small, we would like\n+ * to list the inherited attributes by referencing the attributeGroup of the parent.\n+ * This is not possible however when the current FrankElement overrides attributes.\n+ * In this case, the data from the current FrankElement is needed and attribute that", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0NjM4OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529546388", "bodyText": "This text is not present anymore, because we have base class ElementChild and callback interface CumulativeChildHandler. I hope the code explains itself now.", "author": "mhdirkse", "createdAt": "2020-11-24T13:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMzczMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwNjc5MQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r531006791", "bodyText": "De formuleringen zijn nu anders. De uitleg staat nu in DocWriterNew en daar heb ik voorbeelden toegevoegd om te laten zien wat we willen bereiken.", "author": "mhdirkse", "createdAt": "2020-11-26T12:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMzczMw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java b/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\ndeleted file mode 100644\nindex aeb1489f7..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import nl.nn.adapterframework.doc.model.FrankElement;\n-\n-/**\n- * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n- * This class is reused for building attribute groups and building config child groups.\n- * The use of this class is explained for attribute groups.\n- *\n- * For each FrankElement in the model, we need an XSD attributeGroup that lists\n- * all attributes and all inherited attributes. To keep the XSD small, we would like\n- * to list the inherited attributes by referencing the attributeGroup of the parent.\n- * This is not possible however when the current FrankElement overrides attributes.\n- * In this case, the data from the current FrankElement is needed and attribute that\n- * was overridden should be omitted.\n- *\n- * To support this, we make two kinds of groups for each FrankElement:\n- * <ul>\n- * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n- * <li> The declared group that holds only the declared attributes (config children).\n- * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n- * to repeat attributes, to reference the declared group or to reference the cumulative group.\n- * @author martijn\n- *\n- * @param <K> The key type for referencing attributes or config children.\n- */\n-abstract class CumulativeGroupCreator<K> {\n-\tprivate FrankElement current;\n-\tprivate Map<K, Boolean> items;\n-\tprivate Set<K> overridden;\n-\tprivate boolean isGroupRefRepetitionNotified;\n-\n-\tCumulativeGroupCreator() {\n-\t}\n-\n-\tvoid run(FrankElement start) {\n-\t\tenter(start);\n-\t\taddDeclaredGroup(start);\n-\t\toverridden = getCurrentOverrides();\n-\t\twhile(nextAncestor(current) != null) {\n-\t\t\tenter(nextAncestor(current));\n-\t\t\tif(overridden.isEmpty()) {\n-\t\t\t\tsafeAddCumulative();\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\thandleOverridesForCurrent();\n-\t\t}\n-\t}\n-\n-\tprivate void enter(FrankElement current) {\n-\t\tthis.current = current;\n-\t\titems = itemsOf(current);\t\t\n-\t}\n-\n-\tprivate void safeAddCumulative() {\n-\t\tif(nextAncestor(current) == null) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t} else {\n-\t\t\taddCumulativeGroup(current);\n-\t\t}\n-\t}\n-\n-\tprivate void handleOverridesForCurrent() {\n-\t\thandleNotifyGroupRepetition();\n-\t\tSet<K> omit = new HashSet<>(items.keySet());\n-\t\tomit.retainAll(overridden);\n-\t\tif(omit.isEmpty()) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t}\n-\t\telse {\n-\t\t\trepeatNonOverriddenItems();\n-\t\t}\n-\t\toverridden.addAll(getCurrentOverrides());\n-\t\toverridden.removeAll(getCurrentNonOverrides());\n-\t}\n-\n-\tprivate void repeatNonOverriddenItems() {\n-\t\tnotifyItemsRepeated(current);\n-\t\tSet<K> retain = new HashSet<>(items.keySet());\n-\t\tretain.removeAll(overridden);\n-\t\tif(! retain.isEmpty()) {\n-\t\t\taddItemsOf(retain, current);\t\n-\t\t}\n-\t}\n-\n-\tprivate Set<K> getCurrentOverrides() {\n-\t\treturn getWithOverrideStatus(true);\n-\t}\n-\n-\tprivate Set<K> getCurrentNonOverrides() {\n-\t\treturn getWithOverrideStatus(false);\n-\t}\n-\n-\tprivate Set<K> getWithOverrideStatus(final boolean overrideStatus) {\n-\t\treturn items.keySet().stream()\n-\t\t\t\t.filter(k -> items.get(k).booleanValue() == overrideStatus)\n-\t\t\t\t.collect(Collectors.toSet());\t\t\n-\t}\n-\n-\tprivate void handleNotifyGroupRepetition() {\n-\t\tif(! isGroupRefRepetitionNotified) {\n-\t\t\tnotifyGroupRefRepeated(current);\n-\t\t\tisGroupRefRepetitionNotified = true;\n-\t\t}\n-\t}\n-\n-\tabstract FrankElement nextAncestor(FrankElement element);\n-\tabstract Map<K, Boolean> itemsOf(FrankElement frankElement);\n-\tabstract void addItemsOf(Set<K> items, FrankElement itemOwner);\n-\tabstract void addDeclaredGroup(FrankElement frankElement);\n-\tabstract void addCumulativeGroup(FrankElement frankElement);\n-\tabstract void notifyGroupRefRepeated(FrankElement frankElement);\n-\tabstract void notifyItemsRepeated(FrankElement frankElement);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNDMxMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525134312", "bodyText": "Hierboven nog de copyright notice toevoegen", "author": "gvanbrakel", "createdAt": "2020-11-17T12:59:32Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package nl.nn.adapterframework.doc;", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg1ODAwOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r530858008", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-11-26T08:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNDMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg3MTQyMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r530871422", "bodyText": "I discovered that this file is obsolete and it has been removed. But I did take care of the copy right notices first.", "author": "mhdirkse", "createdAt": "2020-11-26T09:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNDMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java b/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\ndeleted file mode 100644\nindex aeb1489f7..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import nl.nn.adapterframework.doc.model.FrankElement;\n-\n-/**\n- * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n- * This class is reused for building attribute groups and building config child groups.\n- * The use of this class is explained for attribute groups.\n- *\n- * For each FrankElement in the model, we need an XSD attributeGroup that lists\n- * all attributes and all inherited attributes. To keep the XSD small, we would like\n- * to list the inherited attributes by referencing the attributeGroup of the parent.\n- * This is not possible however when the current FrankElement overrides attributes.\n- * In this case, the data from the current FrankElement is needed and attribute that\n- * was overridden should be omitted.\n- *\n- * To support this, we make two kinds of groups for each FrankElement:\n- * <ul>\n- * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n- * <li> The declared group that holds only the declared attributes (config children).\n- * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n- * to repeat attributes, to reference the declared group or to reference the cumulative group.\n- * @author martijn\n- *\n- * @param <K> The key type for referencing attributes or config children.\n- */\n-abstract class CumulativeGroupCreator<K> {\n-\tprivate FrankElement current;\n-\tprivate Map<K, Boolean> items;\n-\tprivate Set<K> overridden;\n-\tprivate boolean isGroupRefRepetitionNotified;\n-\n-\tCumulativeGroupCreator() {\n-\t}\n-\n-\tvoid run(FrankElement start) {\n-\t\tenter(start);\n-\t\taddDeclaredGroup(start);\n-\t\toverridden = getCurrentOverrides();\n-\t\twhile(nextAncestor(current) != null) {\n-\t\t\tenter(nextAncestor(current));\n-\t\t\tif(overridden.isEmpty()) {\n-\t\t\t\tsafeAddCumulative();\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\thandleOverridesForCurrent();\n-\t\t}\n-\t}\n-\n-\tprivate void enter(FrankElement current) {\n-\t\tthis.current = current;\n-\t\titems = itemsOf(current);\t\t\n-\t}\n-\n-\tprivate void safeAddCumulative() {\n-\t\tif(nextAncestor(current) == null) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t} else {\n-\t\t\taddCumulativeGroup(current);\n-\t\t}\n-\t}\n-\n-\tprivate void handleOverridesForCurrent() {\n-\t\thandleNotifyGroupRepetition();\n-\t\tSet<K> omit = new HashSet<>(items.keySet());\n-\t\tomit.retainAll(overridden);\n-\t\tif(omit.isEmpty()) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t}\n-\t\telse {\n-\t\t\trepeatNonOverriddenItems();\n-\t\t}\n-\t\toverridden.addAll(getCurrentOverrides());\n-\t\toverridden.removeAll(getCurrentNonOverrides());\n-\t}\n-\n-\tprivate void repeatNonOverriddenItems() {\n-\t\tnotifyItemsRepeated(current);\n-\t\tSet<K> retain = new HashSet<>(items.keySet());\n-\t\tretain.removeAll(overridden);\n-\t\tif(! retain.isEmpty()) {\n-\t\t\taddItemsOf(retain, current);\t\n-\t\t}\n-\t}\n-\n-\tprivate Set<K> getCurrentOverrides() {\n-\t\treturn getWithOverrideStatus(true);\n-\t}\n-\n-\tprivate Set<K> getCurrentNonOverrides() {\n-\t\treturn getWithOverrideStatus(false);\n-\t}\n-\n-\tprivate Set<K> getWithOverrideStatus(final boolean overrideStatus) {\n-\t\treturn items.keySet().stream()\n-\t\t\t\t.filter(k -> items.get(k).booleanValue() == overrideStatus)\n-\t\t\t\t.collect(Collectors.toSet());\t\t\n-\t}\n-\n-\tprivate void handleNotifyGroupRepetition() {\n-\t\tif(! isGroupRefRepetitionNotified) {\n-\t\t\tnotifyGroupRefRepeated(current);\n-\t\t\tisGroupRefRepetitionNotified = true;\n-\t\t}\n-\t}\n-\n-\tabstract FrankElement nextAncestor(FrankElement element);\n-\tabstract Map<K, Boolean> itemsOf(FrankElement frankElement);\n-\tabstract void addItemsOf(Set<K> items, FrankElement itemOwner);\n-\tabstract void addDeclaredGroup(FrankElement frankElement);\n-\tabstract void addCumulativeGroup(FrankElement frankElement);\n-\tabstract void notifyGroupRefRepeated(FrankElement frankElement);\n-\tabstract void notifyItemsRepeated(FrankElement frankElement);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNjcyMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525136722", "bodyText": "Je kan hier toch altijd addCumulativeGroup() doen?", "author": "gvanbrakel", "createdAt": "2020-11-17T13:03:46Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+\n+/**\n+ * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n+ * This class is reused for building attribute groups and building config child groups.\n+ * The use of this class is explained for attribute groups.\n+ *\n+ * For each FrankElement in the model, we need an XSD attributeGroup that lists\n+ * all attributes and all inherited attributes. To keep the XSD small, we would like\n+ * to list the inherited attributes by referencing the attributeGroup of the parent.\n+ * This is not possible however when the current FrankElement overrides attributes.\n+ * In this case, the data from the current FrankElement is needed and attribute that\n+ * was overridden should be omitted.\n+ *\n+ * To support this, we make two kinds of groups for each FrankElement:\n+ * <ul>\n+ * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n+ * <li> The declared group that holds only the declared attributes (config children).\n+ * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n+ * to repeat attributes, to reference the declared group or to reference the cumulative group.\n+ * @author martijn\n+ *\n+ * @param <K> The key type for referencing attributes or config children.\n+ */\n+abstract class CumulativeGroupCreator<K> {\n+\tprivate FrankElement current;\n+\tprivate Map<K, Boolean> items;\n+\tprivate Set<K> overridden;\n+\tprivate boolean isGroupRefRepetitionNotified;\n+\n+\tCumulativeGroupCreator() {\n+\t}\n+\n+\tvoid run(FrankElement start) {\n+\t\tenter(start);\n+\t\taddDeclaredGroup(start);\n+\t\toverridden = getCurrentOverrides();\n+\t\twhile(nextAncestor(current) != null) {\n+\t\t\tenter(nextAncestor(current));\n+\t\t\tif(overridden.isEmpty()) {\n+\t\t\t\tsafeAddCumulative();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\thandleOverridesForCurrent();\n+\t\t}\n+\t}\n+\n+\tprivate void enter(FrankElement current) {\n+\t\tthis.current = current;\n+\t\titems = itemsOf(current);\t\t\n+\t}\n+\n+\tprivate void safeAddCumulative() {\n+\t\tif(nextAncestor(current) == null) {\n+\t\t\taddDeclaredGroup(current);\n+\t\t} else {\n+\t\t\taddCumulativeGroup(current);\n+\t\t}", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MTM5Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525241392", "bodyText": "Als een FrankElement geen relevante ancestors heeft, dan is het niet nodig om een cumulatieve groep te maken. Die zou dubbel op zijn met de declared group. En als er geen cumulative group is, dan kan je hem ook niet gebruiken.", "author": "mhdirkse", "createdAt": "2020-11-17T15:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java b/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\ndeleted file mode 100644\nindex aeb1489f7..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import nl.nn.adapterframework.doc.model.FrankElement;\n-\n-/**\n- * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n- * This class is reused for building attribute groups and building config child groups.\n- * The use of this class is explained for attribute groups.\n- *\n- * For each FrankElement in the model, we need an XSD attributeGroup that lists\n- * all attributes and all inherited attributes. To keep the XSD small, we would like\n- * to list the inherited attributes by referencing the attributeGroup of the parent.\n- * This is not possible however when the current FrankElement overrides attributes.\n- * In this case, the data from the current FrankElement is needed and attribute that\n- * was overridden should be omitted.\n- *\n- * To support this, we make two kinds of groups for each FrankElement:\n- * <ul>\n- * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n- * <li> The declared group that holds only the declared attributes (config children).\n- * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n- * to repeat attributes, to reference the declared group or to reference the cumulative group.\n- * @author martijn\n- *\n- * @param <K> The key type for referencing attributes or config children.\n- */\n-abstract class CumulativeGroupCreator<K> {\n-\tprivate FrankElement current;\n-\tprivate Map<K, Boolean> items;\n-\tprivate Set<K> overridden;\n-\tprivate boolean isGroupRefRepetitionNotified;\n-\n-\tCumulativeGroupCreator() {\n-\t}\n-\n-\tvoid run(FrankElement start) {\n-\t\tenter(start);\n-\t\taddDeclaredGroup(start);\n-\t\toverridden = getCurrentOverrides();\n-\t\twhile(nextAncestor(current) != null) {\n-\t\t\tenter(nextAncestor(current));\n-\t\t\tif(overridden.isEmpty()) {\n-\t\t\t\tsafeAddCumulative();\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\thandleOverridesForCurrent();\n-\t\t}\n-\t}\n-\n-\tprivate void enter(FrankElement current) {\n-\t\tthis.current = current;\n-\t\titems = itemsOf(current);\t\t\n-\t}\n-\n-\tprivate void safeAddCumulative() {\n-\t\tif(nextAncestor(current) == null) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t} else {\n-\t\t\taddCumulativeGroup(current);\n-\t\t}\n-\t}\n-\n-\tprivate void handleOverridesForCurrent() {\n-\t\thandleNotifyGroupRepetition();\n-\t\tSet<K> omit = new HashSet<>(items.keySet());\n-\t\tomit.retainAll(overridden);\n-\t\tif(omit.isEmpty()) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t}\n-\t\telse {\n-\t\t\trepeatNonOverriddenItems();\n-\t\t}\n-\t\toverridden.addAll(getCurrentOverrides());\n-\t\toverridden.removeAll(getCurrentNonOverrides());\n-\t}\n-\n-\tprivate void repeatNonOverriddenItems() {\n-\t\tnotifyItemsRepeated(current);\n-\t\tSet<K> retain = new HashSet<>(items.keySet());\n-\t\tretain.removeAll(overridden);\n-\t\tif(! retain.isEmpty()) {\n-\t\t\taddItemsOf(retain, current);\t\n-\t\t}\n-\t}\n-\n-\tprivate Set<K> getCurrentOverrides() {\n-\t\treturn getWithOverrideStatus(true);\n-\t}\n-\n-\tprivate Set<K> getCurrentNonOverrides() {\n-\t\treturn getWithOverrideStatus(false);\n-\t}\n-\n-\tprivate Set<K> getWithOverrideStatus(final boolean overrideStatus) {\n-\t\treturn items.keySet().stream()\n-\t\t\t\t.filter(k -> items.get(k).booleanValue() == overrideStatus)\n-\t\t\t\t.collect(Collectors.toSet());\t\t\n-\t}\n-\n-\tprivate void handleNotifyGroupRepetition() {\n-\t\tif(! isGroupRefRepetitionNotified) {\n-\t\t\tnotifyGroupRefRepeated(current);\n-\t\t\tisGroupRefRepetitionNotified = true;\n-\t\t}\n-\t}\n-\n-\tabstract FrankElement nextAncestor(FrankElement element);\n-\tabstract Map<K, Boolean> itemsOf(FrankElement frankElement);\n-\tabstract void addItemsOf(Set<K> items, FrankElement itemOwner);\n-\tabstract void addDeclaredGroup(FrankElement frankElement);\n-\tabstract void addCumulativeGroup(FrankElement frankElement);\n-\tabstract void notifyGroupRefRepeated(FrankElement frankElement);\n-\tabstract void notifyItemsRepeated(FrankElement frankElement);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0Njk4Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525146987", "bodyText": "Kan je hier in twee regels commentaar uitleggen wat deze method doet?", "author": "gvanbrakel", "createdAt": "2020-11-17T13:20:28Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+\n+/**\n+ * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n+ * This class is reused for building attribute groups and building config child groups.\n+ * The use of this class is explained for attribute groups.\n+ *\n+ * For each FrankElement in the model, we need an XSD attributeGroup that lists\n+ * all attributes and all inherited attributes. To keep the XSD small, we would like\n+ * to list the inherited attributes by referencing the attributeGroup of the parent.\n+ * This is not possible however when the current FrankElement overrides attributes.\n+ * In this case, the data from the current FrankElement is needed and attribute that\n+ * was overridden should be omitted.\n+ *\n+ * To support this, we make two kinds of groups for each FrankElement:\n+ * <ul>\n+ * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n+ * <li> The declared group that holds only the declared attributes (config children).\n+ * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n+ * to repeat attributes, to reference the declared group or to reference the cumulative group.\n+ * @author martijn\n+ *\n+ * @param <K> The key type for referencing attributes or config children.\n+ */\n+abstract class CumulativeGroupCreator<K> {\n+\tprivate FrankElement current;\n+\tprivate Map<K, Boolean> items;\n+\tprivate Set<K> overridden;\n+\tprivate boolean isGroupRefRepetitionNotified;\n+\n+\tCumulativeGroupCreator() {\n+\t}\n+\n+\tvoid run(FrankElement start) {\n+\t\tenter(start);\n+\t\taddDeclaredGroup(start);\n+\t\toverridden = getCurrentOverrides();\n+\t\twhile(nextAncestor(current) != null) {\n+\t\t\tenter(nextAncestor(current));\n+\t\t\tif(overridden.isEmpty()) {\n+\t\t\t\tsafeAddCumulative();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\thandleOverridesForCurrent();\n+\t\t}\n+\t}\n+\n+\tprivate void enter(FrankElement current) {\n+\t\tthis.current = current;\n+\t\titems = itemsOf(current);\t\t\n+\t}\n+\n+\tprivate void safeAddCumulative() {\n+\t\tif(nextAncestor(current) == null) {\n+\t\t\taddDeclaredGroup(current);\n+\t\t} else {\n+\t\t\taddCumulativeGroup(current);\n+\t\t}\n+\t}\n+\n+\tprivate void handleOverridesForCurrent() {", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0NzU1OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529547558", "bodyText": "De structuur is veranderd. Ik heb nog steeds niet veel commentaar, maar ik hoop dat de nieuwe structuur duidelijker is. Is er nog commentaar nodig?", "author": "mhdirkse", "createdAt": "2020-11-24T13:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0Njk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NDU0NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r531144545", "bodyText": "Deze class is weg. We hebben nu callback interface CumulativeChildHandler, waarvan de methods een Javadoc comment hebben. Verder begint DocWriterNew nu met een algemeen overzicht van de XSD en van het model. Ten slotte is ElementChild gedocumenteerd.", "author": "mhdirkse", "createdAt": "2020-11-26T16:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0Njk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM3MDI2NA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533370264", "bodyText": "Deze method heeft nu een betere naam.", "author": "mhdirkse", "createdAt": "2020-12-01T12:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0Njk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java b/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\ndeleted file mode 100644\nindex aeb1489f7..000000000\n--- a/core/src/main/java/nl/nn/adapterframework/doc/CumulativeGroupCreator.java\n+++ /dev/null\n\n@@ -1,119 +0,0 @@\n-package nl.nn.adapterframework.doc;\n-\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import nl.nn.adapterframework.doc.model.FrankElement;\n-\n-/**\n- * Strategy class for handling overrides while writing an XML schema from a FrankDocModel.\n- * This class is reused for building attribute groups and building config child groups.\n- * The use of this class is explained for attribute groups.\n- *\n- * For each FrankElement in the model, we need an XSD attributeGroup that lists\n- * all attributes and all inherited attributes. To keep the XSD small, we would like\n- * to list the inherited attributes by referencing the attributeGroup of the parent.\n- * This is not possible however when the current FrankElement overrides attributes.\n- * In this case, the data from the current FrankElement is needed and attribute that\n- * was overridden should be omitted.\n- *\n- * To support this, we make two kinds of groups for each FrankElement:\n- * <ul>\n- * <li> The cumulative group that holds all attributes (config children) and all inherited attributes.\n- * <li> The declared group that holds only the declared attributes (config children).\n- * This class traverses the inheritance hierarchy of a FrankElement and chooses whether\n- * to repeat attributes, to reference the declared group or to reference the cumulative group.\n- * @author martijn\n- *\n- * @param <K> The key type for referencing attributes or config children.\n- */\n-abstract class CumulativeGroupCreator<K> {\n-\tprivate FrankElement current;\n-\tprivate Map<K, Boolean> items;\n-\tprivate Set<K> overridden;\n-\tprivate boolean isGroupRefRepetitionNotified;\n-\n-\tCumulativeGroupCreator() {\n-\t}\n-\n-\tvoid run(FrankElement start) {\n-\t\tenter(start);\n-\t\taddDeclaredGroup(start);\n-\t\toverridden = getCurrentOverrides();\n-\t\twhile(nextAncestor(current) != null) {\n-\t\t\tenter(nextAncestor(current));\n-\t\t\tif(overridden.isEmpty()) {\n-\t\t\t\tsafeAddCumulative();\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\thandleOverridesForCurrent();\n-\t\t}\n-\t}\n-\n-\tprivate void enter(FrankElement current) {\n-\t\tthis.current = current;\n-\t\titems = itemsOf(current);\t\t\n-\t}\n-\n-\tprivate void safeAddCumulative() {\n-\t\tif(nextAncestor(current) == null) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t} else {\n-\t\t\taddCumulativeGroup(current);\n-\t\t}\n-\t}\n-\n-\tprivate void handleOverridesForCurrent() {\n-\t\thandleNotifyGroupRepetition();\n-\t\tSet<K> omit = new HashSet<>(items.keySet());\n-\t\tomit.retainAll(overridden);\n-\t\tif(omit.isEmpty()) {\n-\t\t\taddDeclaredGroup(current);\n-\t\t}\n-\t\telse {\n-\t\t\trepeatNonOverriddenItems();\n-\t\t}\n-\t\toverridden.addAll(getCurrentOverrides());\n-\t\toverridden.removeAll(getCurrentNonOverrides());\n-\t}\n-\n-\tprivate void repeatNonOverriddenItems() {\n-\t\tnotifyItemsRepeated(current);\n-\t\tSet<K> retain = new HashSet<>(items.keySet());\n-\t\tretain.removeAll(overridden);\n-\t\tif(! retain.isEmpty()) {\n-\t\t\taddItemsOf(retain, current);\t\n-\t\t}\n-\t}\n-\n-\tprivate Set<K> getCurrentOverrides() {\n-\t\treturn getWithOverrideStatus(true);\n-\t}\n-\n-\tprivate Set<K> getCurrentNonOverrides() {\n-\t\treturn getWithOverrideStatus(false);\n-\t}\n-\n-\tprivate Set<K> getWithOverrideStatus(final boolean overrideStatus) {\n-\t\treturn items.keySet().stream()\n-\t\t\t\t.filter(k -> items.get(k).booleanValue() == overrideStatus)\n-\t\t\t\t.collect(Collectors.toSet());\t\t\n-\t}\n-\n-\tprivate void handleNotifyGroupRepetition() {\n-\t\tif(! isGroupRefRepetitionNotified) {\n-\t\t\tnotifyGroupRefRepeated(current);\n-\t\t\tisGroupRefRepetitionNotified = true;\n-\t\t}\n-\t}\n-\n-\tabstract FrankElement nextAncestor(FrankElement element);\n-\tabstract Map<K, Boolean> itemsOf(FrankElement frankElement);\n-\tabstract void addItemsOf(Set<K> items, FrankElement itemOwner);\n-\tabstract void addDeclaredGroup(FrankElement frankElement);\n-\tabstract void addCumulativeGroup(FrankElement frankElement);\n-\tabstract void notifyGroupRefRepeated(FrankElement frankElement);\n-\tabstract void notifyItemsRepeated(FrankElement frankElement);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0OTIzOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525149238", "bodyText": "Kan je in twee regels commentaar uitleggen wat hieronder gebeurt?", "author": "gvanbrakel", "createdAt": "2020-11-17T13:24:13Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java", "diffHunk": "@@ -0,0 +1,470 @@\n+package nl.nn.adapterframework.doc;\n+\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAttribute;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAttributeGroup;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAttributeGroupRef;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addChoice;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addComplexType;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addDocumentation;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addElement;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addGroup;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addGroupRef;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addSequence;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.getXmlSchema;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Deque;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.doc.model.ConfigChild;\n+import nl.nn.adapterframework.doc.model.ConfigChildKey;\n+import nl.nn.adapterframework.doc.model.ElementType;\n+import nl.nn.adapterframework.doc.model.FrankAttribute;\n+import nl.nn.adapterframework.doc.model.FrankDocModel;\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlBuilder;\n+\n+public class DocWriterNew {\n+\tprivate static final String CONFIGURATION = \"nl.nn.adapterframework.configuration.Configuration\";\n+\n+\tprivate static Logger log = LogUtil.getLogger(DocWriterNew.class);\n+\n+\tprivate FrankDocModel model;\n+\tprivate Map<String, String> syntax2Names;\n+\tList<SortKeyForXsd> xsdSortOrder;\n+\tprivate XmlBuilder xsdRoot;\n+\n+\tpublic DocWriterNew(FrankDocModel model) {\n+\t\tthis.model = model;\n+\t\tMap<String, List<FrankElement>> simpleNamePartitions = model.getAllElements().values().stream()\n+\t\t\t\t.collect(Collectors.groupingBy(\n+\t\t\t\t\t\tFrankElement::getSimpleName,\n+\t\t\t\t\t\tCollectors.toList()));\n+\t\tsyntax2Names = new HashMap<>();\n+\t\tfor(List<FrankElement> partition: simpleNamePartitions.values()) {\n+\t\t\tsyntax2Names.putAll(chooseSyntax2Names(partition));\n+\t\t}\n+\t}\n+\n+\tpublic void init() {\n+\t\txsdSortOrder = breadthFirstSort(CONFIGURATION);\n+\t}\n+\n+\tstatic Map<String, String> chooseSyntax2Names(List<FrankElement> elementPartition) {\n+\t\tMap<String, String> result = new HashMap<>();\n+\t\tif(elementPartition.size() == 1) {\n+\t\t\tFrankElement theElement = elementPartition.get(0);\n+\t\t\tresult.put(theElement.getFullName(), theElement.getSimpleName());\n+\t\t\treturn result;\n+\t\t}\n+\t\telse {\n+\t\t\tList<List<String>> nameComponents = new ArrayList<>();\n+\t\t\tfor(FrankElement element: elementPartition) {\n+\t\t\t\tList<String> packageNameComponents = Arrays.asList(element.getFullName().split(\"\\\\.\", -1));\n+\t\t\t\tif(! element.getSimpleName().equals(packageNameComponents.get(packageNameComponents.size() - 1))) {\n+\t\t\t\t\tlog.warn(String.format(\"Syntax 2 names may be wrong because there is a FrankElement with full name [%s] but simple name [%s]\",\n+\t\t\t\t\t\t\telement.getFullName(), element.getSimpleName()));\n+\t\t\t\t}\n+\t\t\t\tnameComponents.add(packageNameComponents);\n+\t\t\t}\n+\t\t\tList<String> fullNames = elementPartition.stream().map(elem -> elem.getFullName()).collect(Collectors.toList());\n+\t\t\tint numComponents = 2;\n+\t\t\twhile(true) {", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0ODA3Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529548076", "bodyText": "Dit was functionaliteit die we bij nader inzien niet willen. Deze code is weg.", "author": "mhdirkse", "createdAt": "2020-11-24T13:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0OTIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java b/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\nindex 7d694905a..a5b377911 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/DocWriterNew.java\n\n@@ -1,36 +1,61 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc;\n \n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAnyAttribute;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAttribute;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAttributeGroup;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addAttributeGroupRef;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addChoice;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addComplexContent;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addComplexType;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addDocumentation;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addElement;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addElementRef;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addElementWithType;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addExtension;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addGroup;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addGroupRef;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.addSequence;\n import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.getXmlSchema;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.OPTIONAL;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.PROHIBITED;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeUse.REQUIRED;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeValueStatus.DEFAULT;\n+import static nl.nn.adapterframework.doc.DocWriterNewXmlUtils.AttributeValueStatus.FIXED;\n+import static nl.nn.adapterframework.doc.model.ElementChild.DEPRECATED;\n+import static nl.nn.adapterframework.doc.model.ElementChild.IN_XSD;\n \n-import java.util.ArrayDeque;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.Deque;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n-import java.util.function.Predicate;\n+import java.util.function.Consumer;\n import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import nl.nn.adapterframework.core.IListener;\n import nl.nn.adapterframework.doc.model.ConfigChild;\n-import nl.nn.adapterframework.doc.model.ConfigChildKey;\n+import nl.nn.adapterframework.doc.model.ElementChild;\n import nl.nn.adapterframework.doc.model.ElementType;\n import nl.nn.adapterframework.doc.model.FrankAttribute;\n import nl.nn.adapterframework.doc.model.FrankDocModel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE1ODM0Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525158342", "bodyText": "Hier vind je de eerste definitie van het attribuut / het configChild. Is dat wat je wilt? Wil je niet de laatste hebben? Als je bijvoorbeeld documentatie wil overnemen, wil je die van de laatste.", "author": "gvanbrakel", "createdAt": "2020-11-17T13:38:20Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -48,4 +51,25 @@ private Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {\n \t\t}\n \t\treturn result;\n \t}\n+\n+\t/**\n+\t * Calculate property overriddenFrom. Assumes that overriddenFrom has been\n+\t * set already for all ancestors in the FrankElement inheritance hierarchy.\n+\t */\n+\tpublic void calculateOverriddenFrom() {\n+\t\tConfigChildKey key = new ConfigChildKey(this);\n+\t\tFrankElement match = configParent;\n+\t\twhile(match.getParent() != null) {\n+\t\t\tmatch = match.getParent();\n+\t\t\tConfigChild matchingChild = match.find(key);\n+\t\t\tif(matchingChild != null) {\n+\t\t\t\tif(matchingChild.overriddenFrom != null) {\n+\t\t\t\t\tthis.overriddenFrom = matchingChild.overriddenFrom;", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzOTc4NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525239785", "bodyText": "In DocWriterNew itereer ik al vanaf een child over al zijn ancestors. Dan is het niet meer nodig om op te slaan waarvandaan een method overridden is. Als je in een ancestor de method vind, dan heb je de originele method. Zal ik dit veld vervangen door een boolean?", "author": "mhdirkse", "createdAt": "2020-11-17T15:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE1ODM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDM2Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529550367", "bodyText": "Ik neem bovenstaande opmerking terug. We willen geen informatie weggooien, dus de FrankElement referentie vervangen door een Boolean lijkt met toch geen goed idee. Ik heb de code veranderd zodat we in overriddenFrom de eerste match stoppen, zonder meteen de eerste definitie in de inheritance hierarchie op te zoeken.", "author": "mhdirkse", "createdAt": "2020-11-24T13:37:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE1ODM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex 89bc1d931..ea0b4249f 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -44,7 +92,7 @@ public class ConfigChild {\n \t\t\t\tresult = Integer.valueOf(ibisDoc.value()[0]);\n \t\t\t} catch(Exception e) {\n \t\t\t\tlog.warn(String.format(\"@IbisDoc for config child with parent [%s] and type [%s] has a non-integer order [%s], ignored\",\n-\t\t\t\t\t\tconfigParent.getSimpleName(),\n+\t\t\t\t\t\tgetOwningElement().getSimpleName(),\n \t\t\t\t\t\telementType.getSimpleName(),\n \t\t\t\t\t\tibisDoc.value()[0]));\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE2MTM2Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r525161366", "bodyText": "Ik denk dat ik ConfigChild en FrankElement een gezamelijk parent zou willen geven waarin calculateOverriddenFrom() z'n plek kan vinden.\nIk denk dat je GroupCreator daar ook simpeler van kan worden.", "author": "gvanbrakel", "createdAt": "2020-11-17T13:41:45Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankAttribute.java", "diffHunk": "@@ -49,4 +53,21 @@ void parseIbisDocAnnotation(IbisDoc ibisDoc) {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tvoid calculateOverriddenFrom() {", "originalCommit": "d9d30609981971b04f05ad4fd69792be2b0d4a61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDY2Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529550667", "bodyText": "Heb ik inmiddels gedaan.", "author": "mhdirkse", "createdAt": "2020-11-24T13:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE2MTM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankAttribute.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankAttribute.java\nindex 32cc2eb67..27412abaf 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankAttribute.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankAttribute.java\n\n@@ -54,20 +88,12 @@ public class FrankAttribute {\n \t\t}\n \t}\n \n-\tvoid calculateOverriddenFrom() {\n-\t\tFrankElement match = owningElement;\n-\t\twhile(match.getParent() != null) {\n-\t\t\tmatch = match.getParent();\n-\t\t\tFrankAttribute matchingAttribute = match.find(name);\n-\t\t\tif(matchingAttribute != null) {\n-\t\t\t\tFrankElement matchOverriddenFrom = matchingAttribute.overriddenFrom;\n-\t\t\t\tif(matchOverriddenFrom != null) {\n-\t\t\t\t\toverriddenFrom = matchOverriddenFrom;\n-\t\t\t\t} else {\n-\t\t\t\t\toverriddenFrom = match;\n-\t\t\t\t}\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t}\n+\t@Override\n+\tpublic int compareTo(ElementChild other) {\n+\t\treturn FRANK_ATTRIBUTE_COMPARATOR.compare(this, (FrankAttribute) other);\n \t}\n+\n+\tprivate static final Comparator<FrankAttribute> FRANK_ATTRIBUTE_COMPARATOR =\n+\t\t\tComparator.comparing(FrankAttribute::getOrder)\n+\t\t\t.thenComparing(FrankAttribute::getName);\n }\n"}}, {"oid": "c9c62dac7aece9180bf1fb17f7708536c3196aac", "url": "https://github.com/ibissource/iaf/commit/c9c62dac7aece9180bf1fb17f7708536c3196aac", "message": "Have first unit test of DocWriterNew", "committedDate": "2020-11-17T15:44:19Z", "type": "commit"}, {"oid": "fd7cf1552cda0884523cd72b657c130a8cdff5cc", "url": "https://github.com/ibissource/iaf/commit/fd7cf1552cda0884523cd72b657c130a8cdff5cc", "message": "Not tested - Common base class for ConfigChild and FrankAttribute", "committedDate": "2020-11-19T18:37:13Z", "type": "commit"}, {"oid": "bd2cebae4492633f190197a27aec4ef799196a1f", "url": "https://github.com/ibissource/iaf/commit/bd2cebae4492633f190197a27aec4ef799196a1f", "message": "Existing unit tests fixed", "committedDate": "2020-11-20T11:44:28Z", "type": "commit"}, {"oid": "ad3cd336cc5101096cd543a1f9faeb54e10485bb", "url": "https://github.com/ibissource/iaf/commit/ad3cd336cc5101096cd543a1f9faeb54e10485bb", "message": "Sort it out about annotation inheritance and the SELECTED predicate\n\nOne loose end still for attributes", "committedDate": "2020-11-20T17:15:33Z", "type": "commit"}, {"oid": "f555067e6d26bc1aeb1932d8cef791f3df8d9c5f", "url": "https://github.com/ibissource/iaf/commit/f555067e6d26bc1aeb1932d8cef791f3df8d9c5f", "message": "Fix the loose end of the previous commit", "committedDate": "2020-11-20T17:33:36Z", "type": "commit"}, {"oid": "46919143f063e8b0a96c0414b9584d70e0f2a40d", "url": "https://github.com/ibissource/iaf/commit/46919143f063e8b0a96c0414b9584d70e0f2a40d", "message": "Cover walking XML schema groups with unit tests", "committedDate": "2020-11-20T19:58:41Z", "type": "commit"}, {"oid": "f777f17773ed98606dcc9a4e34bf86abbcec233b", "url": "https://github.com/ibissource/iaf/commit/f777f17773ed98606dcc9a4e34bf86abbcec233b", "message": "Omit irrelevant ancestors with writing XSD", "committedDate": "2020-11-20T20:30:10Z", "type": "commit"}, {"oid": "6c67190d2d94fb39bfa9a2d52f48819ca13e039c", "url": "https://github.com/ibissource/iaf/commit/6c67190d2d94fb39bfa9a2d52f48819ca13e039c", "message": "Produce an XSD with element references", "committedDate": "2020-11-23T11:47:12Z", "type": "commit"}, {"oid": "c30920590844d75920d44249267c278ece04112a", "url": "https://github.com/ibissource/iaf/commit/c30920590844d75920d44249267c278ece04112a", "message": "Merge branch 'master' into fillDataModel4", "committedDate": "2020-11-23T11:50:29Z", "type": "commit"}, {"oid": "da239c7fe5cb76b52bcca19bbacbad2164b1d13a", "url": "https://github.com/ibissource/iaf/commit/da239c7fe5cb76b52bcca19bbacbad2164b1d13a", "message": "Add message to ignore", "committedDate": "2020-11-23T11:52:14Z", "type": "commit"}, {"oid": "656edc3bb3ab9dafcc6957df5e4f98397b95b290", "url": "https://github.com/ibissource/iaf/commit/656edc3bb3ab9dafcc6957df5e4f98397b95b290", "message": "Rename xxxCombinationType to xxxElementType", "committedDate": "2020-11-24T08:35:21Z", "type": "commit"}, {"oid": "c9e95d484f720ad9894fd707be9b2f71d25c6009", "url": "https://github.com/ibissource/iaf/commit/c9e95d484f720ad9894fd707be9b2f71d25c6009", "message": "Add property ConfigChild.syntax1NamePlural", "committedDate": "2020-11-24T09:12:43Z", "type": "commit"}, {"oid": "40446561c879ff0d8bf5f690cb3687fd053da2a8", "url": "https://github.com/ibissource/iaf/commit/40446561c879ff0d8bf5f690cb3687fd053da2a8", "message": "When allowMultiple, wrap the config child only once\n\nAlso fix bug that caused the element order to be non-deterministic", "committedDate": "2020-11-24T10:53:38Z", "type": "commit"}, {"oid": "67606376f4b6357c8b4eb8fd13a92178ccdecceb", "url": "https://github.com/ibissource/iaf/commit/67606376f4b6357c8b4eb8fd13a92178ccdecceb", "message": "Property overriddenFrom should not throw away information", "committedDate": "2020-11-24T13:21:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NjQwMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r528686403", "bodyText": "Wat doet cast()?\nIk zie hem twee keer ge\u00efmplementeerd zijn met 'return this'.\nMoet hij dan abstract zijn?", "author": "gvanbrakel", "createdAt": "2020-11-23T13:01:23Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import nl.nn.adapterframework.doc.DocWriterNew;\n+\n+/**\n+ * Base class of FrankAttribute and ConfigChild. This class was introduced\n+ * to implement the following common logic:\n+ * <ul>\n+ * <li> The decision whether to include an attribute or config child in the XML schema\n+ * is based on the same information.\n+ * <li> The structure is very similar in the XML schema for config children and\n+ * attributes. In both cases, we have cumulative groups that include inherited\n+ * items and declared groups that hold only items at the present level of the\n+ * inheritance hierarchy. Please see this in action at {@link DocWriterNew}\n+ *\n+ * @author martijn\n+ *\n+ * @param <T>\n+ */\n+public abstract class ElementChild<T extends ElementChild<?>> {\n+\tprivate @Getter FrankElement owningElement;\n+\t\n+\t/**\n+\t * The value is inherited from ElementChild corresponding to superclass.\n+\t */\n+\tprivate @Getter @Setter boolean deprecated;\n+\t\n+\t/**\n+\t * Only set to true if there is an IbisDoc or IbisDocRef annotation for\n+\t * this specific ElementChild, excluding inheritance. This property is\n+\t * intended to detect Java Override annotations that are only there for\n+\t * technical reasons, without relevance to the Frank developer.\n+\t * \n+\t * But values inside IbisDoc or IbisDocRef annotations are inherited.\n+\t * That is the case to allow documentation information to be stored more\n+\t * centrally.\n+\t */\n+\tprivate @Getter @Setter boolean documented;\n+\tprivate @Getter FrankElement overriddenFrom;\n+\n+\tpublic static Predicate<ElementChild<?>> SELECTED = c ->\n+\t\t(! c.isDeprecated())\n+\t\t&& (c.isDocumented() || (c.getOverriddenFrom() == null));\n+\n+\tElementChild(final FrankElement owningElement) {\n+\t\tthis.owningElement = owningElement;\n+\t}\n+\n+\tpublic static Predicate<ElementChild<?>> ALL = c -> true;\n+\n+\tvoid calculateOverriddenFrom(BiFunction<FrankElement, T, T> lookup) {\n+\t\tFrankElement match = getOwningElement();\n+\t\twhile(match.getParent() != null) {\n+\t\t\tmatch = match.getParent();\n+\t\t\tT matchingChild = lookup.apply(match, cast());\n+\t\t\tif(matchingChild != null) {\n+\t\t\t\tFrankElement matchOverriddenFrom = matchingChild.getOverriddenFrom();\n+\t\t\t\tif(matchOverriddenFrom != null) {\n+\t\t\t\t\toverriddenFrom = matchOverriddenFrom;\n+\t\t\t\t} else {\n+\t\t\t\t\toverriddenFrom = match;\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tabstract T cast();", "originalCommit": "6c67190d2d94fb39bfa9a2d52f48819ca13e039c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5Nzg1NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529797855", "bodyText": "Mijn code werkte niet omdat ik een ChildElement als argument meegaf in plaats van een ConfigChild of FrankAttribute. Dit heb ik opgelost met de cast() functie, die ElementChild naar T converteert. Dit is een abstracte method. De type parameter T is bounded en moet een subclass zijn van ElementChild. De implementatie van cast() verschijnt in FrankAttribute en in ConfigChild. Maar daar is de this pointer al van het juiste type. \"return this\" doet dus precies wat nodig is.\nIk had ook gewoon een cast kunnen maken als \"(FrankAttribute) elementChild\" of \"(ConfigChild) elementChild\", maar dan had je minder duidelijk kunnen zien dat die cast toegestaan is.", "author": "mhdirkse", "createdAt": "2020-11-24T18:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NjQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1Mjg1Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r531152852", "bodyText": "Ik heb een comment toegevoegd om dit uit te leggen. Dit zal ik binnenkort pushen.", "author": "mhdirkse", "createdAt": "2020-11-26T17:06:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NjQwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2OTg5Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533369893", "bodyText": "De oplossing met cast() was inderdaad te complex. Dit is opgeschoond.", "author": "mhdirkse", "createdAt": "2020-12-01T12:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NjQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\nindex dfc3df225..be8f2596d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n\n@@ -1,11 +1,29 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n-import java.util.function.BiFunction;\n import java.util.function.Predicate;\n \n+import org.apache.logging.log4j.Logger;\n+\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.DocWriterNew;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n  * Base class of FrankAttribute and ConfigChild. This class was introduced\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNDQwNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529724406", "bodyText": "Daar waar je cast() zou kunnen gebruiken, kan je toch ook gewoon 'this' gebruiken?", "author": "gvanbrakel", "createdAt": "2020-11-24T16:47:29Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -41,11 +40,24 @@ private Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {\n \t\t\t\tresult = Integer.valueOf(ibisDoc.value()[0]);\n \t\t\t} catch(Exception e) {\n \t\t\t\tlog.warn(String.format(\"@IbisDoc for config child with parent [%s] and type [%s] has a non-integer order [%s], ignored\",\n-\t\t\t\t\t\tconfigParent.getSimpleName(),\n+\t\t\t\t\t\tgetOwningElement().getSimpleName(),\n \t\t\t\t\t\telementType.getSimpleName(),\n \t\t\t\t\t\tibisDoc.value()[0]));\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n+\n+\tpublic String getSyntax1NamePlural() {\n+\t\tif(syntax1Name.endsWith(\"s\")) {\n+\t\t\treturn syntax1Name;\n+\t\t} else {\n+\t\t\treturn syntax1Name + \"s\";\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tConfigChild cast() {\n+\t\treturn this;\n+\t}", "originalCommit": "67606376f4b6357c8b4eb8fd13a92178ccdecceb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5OTAyNw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529799027", "bodyText": "Dan heb je een type mismatch, omdat ElementChild niet hetzelfde is als FrankAttribute en omdat ElementChild niet hetzelfde is als ConfigChild.", "author": "mhdirkse", "createdAt": "2020-11-24T18:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNDQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5OTY0Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529799647", "bodyText": "Sorry, angular brackets vallen weg. ElementChild<FrankAttribute> is niet hetzelfde als FrankAttribute", "author": "mhdirkse", "createdAt": "2020-11-24T18:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNDQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2OTM0OQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533369349", "bodyText": "Er is nu geen cast() meer. De complexiteit waar je bezwaar tegen had is opgeschoond.", "author": "mhdirkse", "createdAt": "2020-12-01T12:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNDQwNg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex 59eb0d1b4..ea0b4249f 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -57,7 +109,17 @@ public class ConfigChild extends ElementChild<ConfigChild> {\n \t}\n \n \t@Override\n-\tConfigChild cast() {\n-\t\treturn this;\n+\tpublic int compareTo(ElementChild other) {\n+\t\treturn CONFIG_CHILD_COMPARATOR.compare(this, (ConfigChild) other);\n \t}\n+\n+\tvoid registerSyntax1NameWithElementType(final String syntax1Name) {\n+\t\tif(IN_XSD.test(this)) {\n+\t\t\telementType.addConfigChildSyntax1Name(syntax1Name);\n+\t\t}\n+\t}\n+\n+\tprivate static final Comparator<ConfigChild> CONFIG_CHILD_COMPARATOR =\n+\t\t\tComparator.comparing(ConfigChild::getSequenceInConfig)\n+\t\t\t.thenComparing(ConfigChild::getSyntax1Name);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTU4Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529729582", "bodyText": "Ik zou verwachten dat dit implementaties zouden zijn van een abstract method, en dat ze in ConfigChild resp. FrankAttribute gedefinieerd zouden zijn", "author": "gvanbrakel", "createdAt": "2020-11-24T16:54:36Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,199 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n \n+import org.apache.logging.log4j.Logger;\n+\n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\tprivate static final Comparator<ConfigChild> CONFIG_CHILD_COMPARATOR =\n+\t\t\tComparator.comparing(ConfigChild::getSequenceInConfig)\n+\t\t\t.thenComparing(ConfigChild::getSyntax1Name);\n+\tprivate static final Comparator<FrankAttribute> FRANK_ATTRIBUTE_COMPARATOR =\n+\t\t\tComparator.comparing(FrankAttribute::getOrder)\n+\t\t\t.thenComparing(FrankAttribute::getName);", "originalCommit": "67606376f4b6357c8b4eb8fd13a92178ccdecceb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMzY3Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r529803672", "bodyText": "Ik had ook ElementChild.compareTo() kunnen invoeren, maar dan had ik het niet zo compact kunnen opschrijven. Je gebruikt twee velden om een totale ordening te krijgen, en dat gaat makkelijker met deze syntax dan als je het procedureel uitschrijft. Ik zou de comparators ook als static variables van ConfigChild en FrankAttribute kunnen defini\u00ebren, maar dan kunnen ze niet private zijn. Het FrankElement is de enige class die attributes en config children hoeft te sorteren volgens deze ordeningen.", "author": "mhdirkse", "createdAt": "2020-11-24T18:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2NzQyMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r530167423", "bodyText": "Ik zou er in ElementChild een protected veld van maken, met implementaties in ConfigChild en FrankAttribute. Ik zou dan daarmee de concessie doen dat het instance methods worden, terwijl het eigenlijk static methods zouden moeten zijn, (maar die kunnen niet erven zoals je zou willen). Het voordeel daarvan is, dat alle ConfigChild code in ConfigChild zit, en alle FrankAttriubte code in FrankAttribute. Ook is het een voordeel dat dan als je calculateOverriddenFrom() aanroept, niet ook nog een comparator functie hoeft mee te geven.\nIk denk dat ik dat toch wel het belangrijkst/prettigst vind, omdat het me helpt om overzicht over de code te krijgen.\nBedenk ook dat het hele idee van de ElementChild is om code die gezamelijk is voor ConfigChild en FrankAttribute bijeen te brengen. Het hebben van een comparator is er daar \u00e9\u00e9n van. De implementaties van het gezamelijke moeten dan ook in ConfigChild en FrankAttribute komen, en niet weer in een andere class.", "author": "gvanbrakel", "createdAt": "2020-11-25T07:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNTU5OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r532735598", "bodyText": "We hebben dit telefonisch besproken. De uitkomst van dat gesprek heb ik geimplementeerd.", "author": "mhdirkse", "createdAt": "2020-11-30T16:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyOTU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex a4b84342b..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -1,9 +1,25 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n-import java.util.ArrayList;\n+import java.lang.reflect.Modifier;\n import java.util.Collections;\n-import java.util.Comparator;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"oid": "7d657e7d272652297db15d560ae60befd2770a79", "url": "https://github.com/ibissource/iaf/commit/7d657e7d272652297db15d560ae60befd2770a79", "message": "Merge branch 'master' into fillDataModel4", "committedDate": "2020-11-26T08:09:48Z", "type": "commit"}, {"oid": "44aceb92ec9818b808fca59645c81f59a6c903fd", "url": "https://github.com/ibissource/iaf/commit/44aceb92ec9818b808fca59645c81f59a6c903fd", "message": "Add copyright notices", "committedDate": "2020-11-26T08:39:07Z", "type": "commit"}, {"oid": "524a9fcde8634261359273bc3dbdf648e935f9fd", "url": "https://github.com/ibissource/iaf/commit/524a9fcde8634261359273bc3dbdf648e935f9fd", "message": "Document attribute groups and config child groups", "committedDate": "2020-11-26T12:45:00Z", "type": "commit"}, {"oid": "4377852273667aad4038ed80af5f8943cc2dee5e", "url": "https://github.com/ibissource/iaf/commit/4377852273667aad4038ed80af5f8943cc2dee5e", "message": "Document in DocWriterNew how the options are added for config children", "committedDate": "2020-11-26T16:23:07Z", "type": "commit"}, {"oid": "0ab12a5d2e358afab972785c2ffbfd2c02a80435", "url": "https://github.com/ibissource/iaf/commit/0ab12a5d2e358afab972785c2ffbfd2c02a80435", "message": "Give testtarget classes names that do not conflict with the FF!", "committedDate": "2020-11-26T16:36:16Z", "type": "commit"}, {"oid": "ab0ee0096874f112072de95161a48313268c0203", "url": "https://github.com/ibissource/iaf/commit/ab0ee0096874f112072de95161a48313268c0203", "message": "Document method named cast", "committedDate": "2020-11-26T16:52:47Z", "type": "commit"}, {"oid": "6ec46f2cb5334cd747fbda09e5c2a7cd7ec21d5b", "url": "https://github.com/ibissource/iaf/commit/6ec46f2cb5334cd747fbda09e5c2a7cd7ec21d5b", "message": "Cover FrankElement.getAlias() with unit tests", "committedDate": "2020-11-27T08:52:20Z", "type": "commit"}, {"oid": "af74567efe941ee24a9bbbe3502f4814295497fc", "url": "https://github.com/ibissource/iaf/commit/af74567efe941ee24a9bbbe3502f4814295497fc", "message": "Omit abstract FrankElement as xs:element not not for groups", "committedDate": "2020-11-27T11:47:39Z", "type": "commit"}, {"oid": "ec2a837a32e094962bd394023b7b494e893b94db", "url": "https://github.com/ibissource/iaf/commit/ec2a837a32e094962bd394023b7b494e893b94db", "message": "First draft of rejecting deprecated children\n\nNot enough test coverage yet", "committedDate": "2020-11-27T18:30:36Z", "type": "commit"}, {"oid": "a53fc448f291148c1fb382a2cce09b1f770404a4", "url": "https://github.com/ibissource/iaf/commit/a53fc448f291148c1fb382a2cce09b1f770404a4", "message": "Cover ChildRejector met unit tests.", "committedDate": "2020-11-30T11:04:55Z", "type": "commit"}, {"oid": "dd9f82fc7e735249cf39ee9e01bf2a0abae8fa31", "url": "https://github.com/ibissource/iaf/commit/dd9f82fc7e735249cf39ee9e01bf2a0abae8fa31", "message": "Improve code quality", "committedDate": "2020-11-30T11:25:42Z", "type": "commit"}, {"oid": "2938904be668777d69afd57081469ccdf4049886", "url": "https://github.com/ibissource/iaf/commit/2938904be668777d69afd57081469ccdf4049886", "message": "Make attribute setter deprecated that only throws exception.", "committedDate": "2020-11-30T14:17:44Z", "type": "commit"}, {"oid": "0598d0e29dceb12b5c06ccd8f23edfbd54067785", "url": "https://github.com/ibissource/iaf/commit/0598d0e29dceb12b5c06ccd8f23edfbd54067785", "message": "Move sorting children out of FrankElement", "committedDate": "2020-11-30T14:29:35Z", "type": "commit"}, {"oid": "a45fc83ab8d062830f36c0ee8e5ad86dcc93a220", "url": "https://github.com/ibissource/iaf/commit/a45fc83ab8d062830f36c0ee8e5ad86dcc93a220", "message": "Fix checkForTypeConflict warnings", "committedDate": "2020-11-30T15:45:29Z", "type": "commit"}, {"oid": "e714d148a33c04e00ba50958bfafc839c3bfc26e", "url": "https://github.com/ibissource/iaf/commit/e714d148a33c04e00ba50958bfafc839c3bfc26e", "message": "Explain child rejection", "committedDate": "2020-11-30T16:12:18Z", "type": "commit"}, {"oid": "6e689a0db593710b69e9f5c1f30ec96b6ba142c2", "url": "https://github.com/ibissource/iaf/commit/6e689a0db593710b69e9f5c1f30ec96b6ba142c2", "message": "Simplify by removing the type argument from ElementChild", "committedDate": "2020-12-01T11:35:57Z", "type": "commit"}, {"oid": "1b1653caa8c81f7e9c4b0786a58d75e8badde7c6", "url": "https://github.com/ibissource/iaf/commit/1b1653caa8c81f7e9c4b0786a58d75e8badde7c6", "message": "ElementChild is not comparable, only its subclasses", "committedDate": "2020-12-01T11:41:31Z", "type": "commit"}, {"oid": "c73e7597062e96b0b6548604e17bfee63f37d102", "url": "https://github.com/ibissource/iaf/commit/c73e7597062e96b0b6548604e17bfee63f37d102", "message": "Ignore DocWriterNew tests again", "committedDate": "2020-12-01T12:13:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NTEzNQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533455135", "bodyText": "Als ik 'Selected' lees, vraag ik me af 'waarvoor?' Volgens mij in dit geval: 'ElementToBeIncludedInXmlSchema'.\nKan je er zoiets van maken?", "author": "gvanbrakel", "createdAt": "2020-12-01T14:37:39Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.util.function.Predicate;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import nl.nn.adapterframework.doc.DocWriterNew;\n+\n+/**\n+ * Base class of FrankAttribute and ConfigChild. This class was introduced\n+ * to implement the following common logic:\n+ * <ul>\n+ * <li> The decision whether to include an attribute or config child in the XML schema\n+ * is based on the same information.\n+ * <li> The structure is very similar in the XML schema for config children and\n+ * attributes. In both cases, we have cumulative groups that include inherited\n+ * items and declared groups that hold only items at the present level of the\n+ * inheritance hierarchy. Please see this in action at {@link DocWriterNew}.\n+ *\n+ * @author martijn\n+ */\n+public abstract class ElementChild {\n+\tprivate @Getter FrankElement owningElement;\n+\t\n+\t/**\n+\t * The value is inherited from ElementChild corresponding to superclass.\n+\t */\n+\tprivate @Getter @Setter boolean deprecated;\n+\t\n+\t/**\n+\t * Only set to true if there is an IbisDoc or IbisDocRef annotation for\n+\t * this specific ElementChild, excluding inheritance. This property is\n+\t * intended to detect Java Override annotations that are only there for\n+\t * technical reasons, without relevance to the Frank developer.\n+\t * \n+\t * But values inside IbisDoc or IbisDocRef annotations are inherited.\n+\t * That is the case to allow documentation information to be stored more\n+\t * centrally.\n+\t */\n+\tprivate @Getter @Setter boolean documented;\n+\tprivate @Getter FrankElement overriddenFrom;\n+\n+\tpublic static Predicate<ElementChild> SELECTED = c ->", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzQxOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r534913418", "bodyText": "Ik heb er IN_XSD van gemaakt. Is dat OK?", "author": "mhdirkse", "createdAt": "2020-12-03T08:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NTEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk0Mzg3OQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535943879", "bodyText": "Je hebt hem sinds dit commentaar gereviewed. Ik heb geen bezwaar gezien. Daarom resolve ik hem nu.", "author": "mhdirkse", "createdAt": "2020-12-04T09:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NTEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\nindex e334c7a76..be8f2596d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n\n@@ -18,9 +18,12 @@ package nl.nn.adapterframework.doc.model;\n \n import java.util.function.Predicate;\n \n+import org.apache.logging.log4j.Logger;\n+\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.DocWriterNew;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n  * Base class of FrankAttribute and ConfigChild. This class was introduced\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2MzQyNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533463426", "bodyText": "Kan je hier in javadoc een beschrijving geven wat deze class is, en wat z'n twee descendants voorstellen?", "author": "gvanbrakel", "createdAt": "2020-12-01T14:44:30Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java", "diffHunk": "@@ -1,13 +1,96 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import lombok.Getter;\n \n-public class FrankDocGroup {\n+public abstract class FrankDocGroup {", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkxMzkzMA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r534913930", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T08:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2MzQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\nindex f8079a8ba..52d8d43c0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\n\n@@ -24,6 +24,26 @@ import java.util.Map;\n \n import lombok.Getter;\n \n+/**\n+ * Holds a group of FrankElement objects for the Frank!Doc website.\n+ * This website will show a table-of-contents with the groups. When you\n+ * select a group, the FrankElement objects inside will be shown.\n+ * <p>\n+ * There are two kinds of groups that are represented by two subclasses of\n+ * {@link FrankDocGroup} that are also inner classes, namely\n+ * <code>FromType</code> and <code>Other</code>. <code>FromType</code>\n+ * holds a group that has the {@link FrankElement} objects that represent\n+ * the Java classes that implement a Java interface.\n+ * That Java interface is represented by a model object of class\n+ * {@link ElementType}. <code>Other</code> holds a group of remaining\n+ * {@link FrankElement}\n+ * that are each defined with a class rather then with an interface.\n+ * <p>\n+ * The Frank!Doc website has not been created yet.\n+ *\n+ * @author martijn\n+ *\n+ */\n public abstract class FrankDocGroup {\n \tprivate @Getter String name;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2Njk5MA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533466990", "bodyText": "Als je hier LinkedHashMaps gebruikt, kan je er later over itereren in de volgorde waarin je de elementen er in gestopt hebt", "author": "gvanbrakel", "createdAt": "2020-12-01T14:47:07Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -32,9 +51,10 @@\n public class FrankDocModel {\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n-\t\n+\tstatic final String OTHER = \"Other\";\n+\n \tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n-\tprivate @Getter Map<String, FrankDocGroup> groups;\n+\tprivate @Getter Map<String, FrankDocGroup> groups = new HashMap<>();\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n \tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk1Mzc3NA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r534953774", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T08:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2Njk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\nindex 849e788c6..06fa763a6 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n\n@@ -53,10 +55,12 @@ public class FrankDocModel {\n \tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n \tstatic final String OTHER = \"Other\";\n \n-\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n-\tprivate @Getter Map<String, FrankDocGroup> groups = new HashMap<>();\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors = new HashMap<>();\n+\tprivate @Getter LinkedHashMap<String, FrankDocGroup> groups = new LinkedHashMap<>();\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n \tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\tprivate @Getter Map<ElementRole.Key, ElementRole> allElementRoles = new HashMap<>();\n+\tprivate final ElementRole.Factory ElementRoleFactory = new ElementRole.Factory();\n \n \t/**\n \t * Get the FrankDocModel needed in production. This is just a first draft. The\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MjIzMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533472233", "bodyText": "Hier graag toevoegen, ter verduidelijking: \"This allows the framework code to distinguish null values (=not configured) from default values.\"", "author": "gvanbrakel", "createdAt": "2020-12-01T14:52:01Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -200,6 +227,12 @@ public FrankElement findOrCreateFrankElement(Class<?> clazz) throws ReflectiveOp\n \tprivate void checkForTypeConflict(Method setter, Method getter, FrankElement attributeOwner) {\n \t\tString setterType = setter.getParameterTypes()[0].getName();\n \t\tString getterType = getter.getReturnType().getName();\n+\t\tif(getter.getName().startsWith(\"get\")) {\n+\t\t\t// For issers we require an exact match of the type name. For getters,\n+\t\t\t// the setter and the getter may mix boxed and unboxed types.", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAwNTg1MA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535005850", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T09:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MjIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\nindex 849e788c6..06fa763a6 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n\n@@ -230,6 +241,8 @@ public class FrankDocModel {\n \t\tif(getter.getName().startsWith(\"get\")) {\n \t\t\t// For issers we require an exact match of the type name. For getters,\n \t\t\t// the setter and the getter may mix boxed and unboxed types.\n+\t\t\t// This allows the framework code to distinguish null values\n+\t\t\t// (=not configured) from default values.\n \t\t\tsetterType = Utils.promoteIfPrimitive(setterType);\n \t\t\tgetterType = Utils.promoteIfPrimitive(getterType);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3NTMyMA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533475320", "bodyText": "Het is duidelijker als je hier de groepnaam tussen aanhalingstekens zet, als in: 'other'", "author": "gvanbrakel", "createdAt": "2020-12-01T14:56:00Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -308,13 +345,87 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t\tConfigChildSetterDescriptor configChildDescriptor = configChildDescriptors.get(m.getName());\n \t\t\tClass<?> elementClass = m.getParameterTypes()[0];\n \t\t\tconfigChild.setElementType(findOrCreateElementType(elementClass));\n+\t\t\tconfigChild.setDocumented(m.getAnnotation(IbisDoc.class) != null);\n \t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(m, IbisDoc.class);\n \t\t\tconfigChild.setSequenceInConfigFromIbisDocAnnotation(ibisDoc);\n \t\t\tconfigChild.setAllowMultiple(configChildDescriptor.isAllowMultiple());\n \t\t\tconfigChild.setMandatory(configChildDescriptor.isMandatory());\n+\t\t\tconfigChild.setDeprecated(isDeprecated(m));\n \t\t\tconfigChild.setSyntax1Name(configChildDescriptor.getSyntax1Name());\n \t\t\tresult.add(configChild);\n+\t\t\tcalculateAliases(configChild);\n \t\t}\n \t\treturn result;\n \t}\n+\n+\tprivate boolean isDeprecated(Method m) {\n+\t\tDeprecated deprecated = AnnotationUtils.findAnnotation(m, Deprecated.class);\n+\t\treturn (deprecated != null);\n+\t}\n+\n+\t// TODO: Unit test this\n+\tprivate void calculateAliases(ConfigChild configChild) {\n+\t\tif(! configChild.getElementType().isFromJavaInterface()) {\n+\t\t\tCollection<FrankElement> members = configChild.getElementType().getMembers().values();\n+\t\t\tif(members.size() >= 1) {\n+\t\t\t\tFrankElement aliased = members.iterator().next();\n+\t\t\t\taliased.addAliasSource(configChild);\n+\t\t\t} else {\n+\t\t\t\tlog.warn(String.format(\"Found empty element type: [%s]\", configChild.getElementType().getFullName()));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void buildGroups() {\n+\t\tMap<String, List<FrankDocGroup>> groupsBase = new HashMap<>();\n+\t\tList<FrankElement> membersOfOther = new ArrayList<>();\n+\t\tfor(ElementType elementType: getAllTypes().values()) {\n+\t\t\tif(elementType.isFromJavaInterface()) {\n+\t\t\t\tif(groupsBase.containsKey(elementType.getSimpleName())) {\n+\t\t\t\t\tgroupsBase.get(elementType.getSimpleName()).add(FrankDocGroup.getInstanceFromElementType(elementType));\n+\t\t\t\t} else {\n+\t\t\t\t\tgroupsBase.put(elementType.getSimpleName(), Arrays.asList(FrankDocGroup.getInstanceFromElementType(elementType)));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\ttry {\n+\t\t\t\t\tmembersOfOther.add(elementType.getSingletonElement());\n+\t\t\t\t} catch(ReflectiveOperationException e) {\n+\t\t\t\t\tlog.warn(String.format(\"Error adding ElementType [%s] to group other because it has multiple FrankElement objects: [%s]\",\n+\t\t\t\t\t\t\t\telementType.getFullName(),\n+\t\t\t\t\t\t\t\telementType.getMembers().values().stream().map(FrankElement::getSimpleName).collect(Collectors.joining(\", \"))),\n+\t\t\t\t\t\t\te);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif(groupsBase.containsKey(OTHER)) {\n+\t\t\tlog.warn(String.format(\"Name [%s] cannot been used for other because it is the name of an ElementType\", OTHER));", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAwNTIzNg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535005236", "bodyText": "Ik heb dit comment ter harte genomen, maar ik weet niet zeker of je het zo goed vind. Ik resolve hem daarom nog niet.", "author": "mhdirkse", "createdAt": "2020-12-03T09:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3NTMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\nindex 849e788c6..06fa763a6 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n\n@@ -352,31 +365,33 @@ public class FrankDocModel {\n \t\t\tconfigChild.setMandatory(configChildDescriptor.isMandatory());\n \t\t\tconfigChild.setDeprecated(isDeprecated(m));\n \t\t\tconfigChild.setSyntax1Name(configChildDescriptor.getSyntax1Name());\n+\t\t\tcreateElementRoleIfNotPresent(configChild);\n \t\t\tresult.add(configChild);\n-\t\t\tcalculateAliases(configChild);\n \t\t}\n \t\treturn result;\n \t}\n \n \tprivate boolean isDeprecated(Method m) {\n-\t\tDeprecated deprecated = AnnotationUtils.findAnnotation(m, Deprecated.class);\n+\t\tDeprecated deprecated = m.getAnnotation(Deprecated.class);\n \t\treturn (deprecated != null);\n \t}\n \n-\t// TODO: Unit test this\n-\tprivate void calculateAliases(ConfigChild configChild) {\n-\t\tif(! configChild.getElementType().isFromJavaInterface()) {\n-\t\t\tCollection<FrankElement> members = configChild.getElementType().getMembers().values();\n-\t\t\tif(members.size() >= 1) {\n-\t\t\t\tFrankElement aliased = members.iterator().next();\n-\t\t\t\taliased.addAliasSource(configChild);\n-\t\t\t} else {\n-\t\t\t\tlog.warn(String.format(\"Found empty element type: [%s]\", configChild.getElementType().getFullName()));\n-\t\t\t}\n+\tvoid createElementRoleIfNotPresent(ConfigChild configChild) {\n+\t\tElementRole.Key key = new ElementRole.Key(configChild);\n+\t\tif(! allElementRoles.containsKey(key)) {\n+\t\t\tallElementRoles.put(key, ElementRoleFactory.create(configChild));\n \t\t}\n \t}\n \n-\tpublic void buildGroups() {\n+\tpublic ElementRole findElementRole(ConfigChild configChild) {\n+\t\treturn allElementRoles.get(new ElementRole.Key(configChild));\n+\t}\n+\n+\tElementRole findElementRole(String fullElementTypeName, String syntax1Name) {\n+\t\treturn allElementRoles.get(new ElementRole.Key(fullElementTypeName, syntax1Name));\n+\t}\n+\n+\tvoid buildGroups() {\n \t\tMap<String, List<FrankDocGroup>> groupsBase = new HashMap<>();\n \t\tList<FrankElement> membersOfOther = new ArrayList<>();\n \t\tfor(ElementType elementType: getAllTypes().values()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3ODI5MA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533478290", "bodyText": "Parent is hier toch: de java superclass? Dat mag hier wel in een comment.", "author": "gvanbrakel", "createdAt": "2020-12-01T14:59:33Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,225 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\t@EqualsAndHashCode\n+\tprivate final class ConfigChildKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic ConfigChildKey(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter FrankElement parent;", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAwMzk2Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535003963", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T09:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3ODI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 5d5116316..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,9 +17,9 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4MDcxMw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533480713", "bodyText": "Je kan hier volstaan met een LinkedHashMap<String, FrankAttribute> attributes, en een LinkedHashMap<ConfigChildKey, ConfigChild> configChildren. Als je de List wil hebben, vraag je daar de .values() van op.\nHet voorkomt dat je dubbele inserts moet doen, en dat je velden hebt die '...lookup' heten.", "author": "gvanbrakel", "createdAt": "2020-12-01T15:02:30Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,225 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\t@EqualsAndHashCode\n+\tprivate final class ConfigChildKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic ConfigChildKey(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter FrankElement parent;\n+\tprivate @Getter List<FrankAttribute> attributes;\n+\tprivate Map<String, FrankAttribute> attributeLookup;\n+\tprivate @Getter List<ConfigChild> configChildren;\n+\tprivate Map<ConfigChildKey, ConfigChild> configChildLookup;", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAwMzE5Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535003193", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T09:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4MDcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 5d5116316..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,9 +17,9 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4OTUwNA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533489504", "bodyText": "Kan ConfigChild niet gewoon een getKey() method hebben?", "author": "gvanbrakel", "createdAt": "2020-12-01T15:13:19Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,225 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\t@EqualsAndHashCode\n+\tprivate final class ConfigChildKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic ConfigChildKey(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter FrankElement parent;\n+\tprivate @Getter List<FrankAttribute> attributes;\n+\tprivate Map<String, FrankAttribute> attributeLookup;\n+\tprivate @Getter List<ConfigChild> configChildren;\n+\tprivate Map<ConfigChildKey, ConfigChild> configChildLookup;\n+\tprivate @Getter List<ConfigChild> aliasSources;\n+\tprivate String cachedAlias = null;\n+\tprivate @Getter FrankElementStatistics statistics;\n \n \tFrankElement(Class<?> clazz) {\n-\t\tthis(clazz.getName(), clazz.getSimpleName());\n+\t\tthis(clazz.getName(), clazz.getSimpleName(), Modifier.isAbstract(clazz.getModifiers()));\n \t}\n \n \t/**\n \t * Constructor for testing purposes. We want to test attribute construction in isolation,\n \t * in which case we do not have a parent.\n+\t * TODO: Reorganize files such that this test constructor need not be public.\n \t */\n-\tFrankElement(final String fullName, final String simpleName) {\n+\tpublic FrankElement(final String fullName, final String simpleName, boolean isAbstract) {\n \t\tthis.fullName = fullName;\n \t\tthis.simpleName = simpleName;\n+\t\tthis.isAbstract = isAbstract;\n+\t\tthis.aliasSources = new ArrayList<>();\n+\t}\n+\n+\tpublic FrankElement(final String fullName, final String simpleName) {\n+\t\tthis(fullName, simpleName, false);\n+\t}\n+\t\n+\tpublic void setParent(FrankElement parent) {\n+\t\tthis.parent = parent;\n+\t\tthis.statistics = new FrankElementStatistics(this);\n+\t}\n+\n+\t/**\n+\t * Setter for attributes. We prevent modifying the list of attributes\n+\t * because we want to maintain the private field attributeLookup.\n+\t * @param inputAttributes\n+\t */\n+\tpublic void setAttributes(List<FrankAttribute> inputAttributes) {\n+\t\tCollections.sort(inputAttributes);\n+\t\tthis.attributes = Collections.unmodifiableList(inputAttributes);\n+\t\tattributeLookup = new HashMap<>();\n+\t\tfor(FrankAttribute a: attributes) {\n+\t\t\tif(attributeLookup.containsKey(a.getName())) {\n+\t\t\t\tlog.warn(String.format(\"Frank element [%s] has multiple attributes with name [%s]\",\n+\t\t\t\t\t\tfullName, a.getName()));\n+\t\t\t} else {\n+\t\t\t\tattributeLookup.put(a.getName(), a);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<FrankAttribute> getAttributes(Predicate<? super FrankAttribute> filter) {\n+\t\treturn attributes.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Setter for config children. We prevent modifying the list of config children\n+\t * because we want to maintain the private field configChildLookup.\n+\t * @param children\n+\t */\n+\tpublic void setConfigChildren(List<ConfigChild> children) {\n+\t\tCollections.sort(children);\n+\t\tthis.configChildren = Collections.unmodifiableList(children);\n+\t\tconfigChildLookup = new HashMap<>();\n+\t\tfor(ConfigChild c: children) {\n+\t\t\tConfigChildKey key = new ConfigChildKey(c);\n+\t\t\tif(configChildLookup.containsKey(key)) {\n+\t\t\t\tlog.warn(String.format(\"Different config children of Frank element [%s] have the same key\", fullName));\n+\t\t\t} else {\n+\t\t\t\tconfigChildLookup.put(key, c);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<ConfigChild> getConfigChildren(Predicate<? super ConfigChild> filter) {\n+\t\treturn configChildren.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\tElementChild findElementChildMatch(ElementChild elementChild) {\n+\t\tif(elementChild instanceof FrankAttribute) {\n+\t\t\treturn findAttributeMatch((FrankAttribute) elementChild);\n+\t\t} else if(elementChild instanceof ConfigChild) {\n+\t\t\treturn findConfigChildMatch((ConfigChild) elementChild);\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\t\"Expected a FrankAttribute or ConfigChild, but got a [%s]\",\n+\t\t\t\t\telementChild.getClass().getName()));\n+\t\t}\n+\t}\n+\n+\tFrankAttribute findAttributeMatch(FrankAttribute attribute) {\n+\t\treturn attributeLookup.get(attribute.getName());\n+\t}\n+\n+\tConfigChild findConfigChildMatch(ConfigChild configChild) {\n+\t\treturn configChildLookup.get(new ConfigChildKey(configChild));", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3MTU4OQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535071589", "bodyText": "Gedaan. De prijs die we betalen is dat de key velden van ConfigChild in een String gecombineerd moeten worden. Dat was nodig om te zorgen dat ElementChild.getKey() van het type String kan zijn. Ik wilde het type argument K voor de key niet opnieuw invoeren, want ik voorzag veel problemen met type conversies tussen FrankAttribute, ConfigChild, ElementChild en ElementChild<?>", "author": "mhdirkse", "createdAt": "2020-12-03T10:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4OTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA4ODk4Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535088983", "bodyText": "Door de telefoon zei je dat je dat ik hier nog mee verder moet. Dat ga ik nog doen.", "author": "mhdirkse", "createdAt": "2020-12-03T10:46:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4OTUwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5MDgwMA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535290800", "bodyText": "Ik heb mijn best gedaan. Er zijn in FrankElement vrij veel kasts tussen FrankAttribute, ElementChild en ConfigChild. Kan je kijken of je zo tevreden bent?", "author": "mhdirkse", "createdAt": "2020-12-03T14:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4OTUwNA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 5d5116316..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,9 +17,9 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5MTMyMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533491322", "bodyText": "Dit is eigenlijk: getNextAncestorThatHasChildren(). Dan is het beter om het ook zo te noemen.", "author": "gvanbrakel", "createdAt": "2020-12-01T15:15:38Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,225 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\t@EqualsAndHashCode\n+\tprivate final class ConfigChildKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic ConfigChildKey(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter FrankElement parent;\n+\tprivate @Getter List<FrankAttribute> attributes;\n+\tprivate Map<String, FrankAttribute> attributeLookup;\n+\tprivate @Getter List<ConfigChild> configChildren;\n+\tprivate Map<ConfigChildKey, ConfigChild> configChildLookup;\n+\tprivate @Getter List<ConfigChild> aliasSources;\n+\tprivate String cachedAlias = null;\n+\tprivate @Getter FrankElementStatistics statistics;\n \n \tFrankElement(Class<?> clazz) {\n-\t\tthis(clazz.getName(), clazz.getSimpleName());\n+\t\tthis(clazz.getName(), clazz.getSimpleName(), Modifier.isAbstract(clazz.getModifiers()));\n \t}\n \n \t/**\n \t * Constructor for testing purposes. We want to test attribute construction in isolation,\n \t * in which case we do not have a parent.\n+\t * TODO: Reorganize files such that this test constructor need not be public.\n \t */\n-\tFrankElement(final String fullName, final String simpleName) {\n+\tpublic FrankElement(final String fullName, final String simpleName, boolean isAbstract) {\n \t\tthis.fullName = fullName;\n \t\tthis.simpleName = simpleName;\n+\t\tthis.isAbstract = isAbstract;\n+\t\tthis.aliasSources = new ArrayList<>();\n+\t}\n+\n+\tpublic FrankElement(final String fullName, final String simpleName) {\n+\t\tthis(fullName, simpleName, false);\n+\t}\n+\t\n+\tpublic void setParent(FrankElement parent) {\n+\t\tthis.parent = parent;\n+\t\tthis.statistics = new FrankElementStatistics(this);\n+\t}\n+\n+\t/**\n+\t * Setter for attributes. We prevent modifying the list of attributes\n+\t * because we want to maintain the private field attributeLookup.\n+\t * @param inputAttributes\n+\t */\n+\tpublic void setAttributes(List<FrankAttribute> inputAttributes) {\n+\t\tCollections.sort(inputAttributes);\n+\t\tthis.attributes = Collections.unmodifiableList(inputAttributes);\n+\t\tattributeLookup = new HashMap<>();\n+\t\tfor(FrankAttribute a: attributes) {\n+\t\t\tif(attributeLookup.containsKey(a.getName())) {\n+\t\t\t\tlog.warn(String.format(\"Frank element [%s] has multiple attributes with name [%s]\",\n+\t\t\t\t\t\tfullName, a.getName()));\n+\t\t\t} else {\n+\t\t\t\tattributeLookup.put(a.getName(), a);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<FrankAttribute> getAttributes(Predicate<? super FrankAttribute> filter) {\n+\t\treturn attributes.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Setter for config children. We prevent modifying the list of config children\n+\t * because we want to maintain the private field configChildLookup.\n+\t * @param children\n+\t */\n+\tpublic void setConfigChildren(List<ConfigChild> children) {\n+\t\tCollections.sort(children);\n+\t\tthis.configChildren = Collections.unmodifiableList(children);\n+\t\tconfigChildLookup = new HashMap<>();\n+\t\tfor(ConfigChild c: children) {\n+\t\t\tConfigChildKey key = new ConfigChildKey(c);\n+\t\t\tif(configChildLookup.containsKey(key)) {\n+\t\t\t\tlog.warn(String.format(\"Different config children of Frank element [%s] have the same key\", fullName));\n+\t\t\t} else {\n+\t\t\t\tconfigChildLookup.put(key, c);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<ConfigChild> getConfigChildren(Predicate<? super ConfigChild> filter) {\n+\t\treturn configChildren.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\tElementChild findElementChildMatch(ElementChild elementChild) {\n+\t\tif(elementChild instanceof FrankAttribute) {\n+\t\t\treturn findAttributeMatch((FrankAttribute) elementChild);\n+\t\t} else if(elementChild instanceof ConfigChild) {\n+\t\t\treturn findConfigChildMatch((ConfigChild) elementChild);\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\t\"Expected a FrankAttribute or ConfigChild, but got a [%s]\",\n+\t\t\t\t\telementChild.getClass().getName()));\n+\t\t}\n+\t}\n+\n+\tFrankAttribute findAttributeMatch(FrankAttribute attribute) {\n+\t\treturn attributeLookup.get(attribute.getName());\n+\t}\n+\n+\tConfigChild findConfigChildMatch(ConfigChild configChild) {\n+\t\treturn configChildLookup.get(new ConfigChildKey(configChild));\n+\t}\n+\n+\tpublic <T extends ElementChild> FrankElement getNextAncestor(Predicate<ElementChild> childFilter, Class<T> kind) {", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA4OTQxMQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535089411", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T10:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5MTMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 5d5116316..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,9 +17,9 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5NDA3Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533494077", "bodyText": "als je getKey() in ElementChild definieert, en voor FrankAttribute implementeert als getName(), dan wordt deze code een stuk eenvoudiger.", "author": "gvanbrakel", "createdAt": "2020-12-01T15:19:06Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,225 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\t@EqualsAndHashCode\n+\tprivate final class ConfigChildKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic ConfigChildKey(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter FrankElement parent;\n+\tprivate @Getter List<FrankAttribute> attributes;\n+\tprivate Map<String, FrankAttribute> attributeLookup;\n+\tprivate @Getter List<ConfigChild> configChildren;\n+\tprivate Map<ConfigChildKey, ConfigChild> configChildLookup;\n+\tprivate @Getter List<ConfigChild> aliasSources;\n+\tprivate String cachedAlias = null;\n+\tprivate @Getter FrankElementStatistics statistics;\n \n \tFrankElement(Class<?> clazz) {\n-\t\tthis(clazz.getName(), clazz.getSimpleName());\n+\t\tthis(clazz.getName(), clazz.getSimpleName(), Modifier.isAbstract(clazz.getModifiers()));\n \t}\n \n \t/**\n \t * Constructor for testing purposes. We want to test attribute construction in isolation,\n \t * in which case we do not have a parent.\n+\t * TODO: Reorganize files such that this test constructor need not be public.\n \t */\n-\tFrankElement(final String fullName, final String simpleName) {\n+\tpublic FrankElement(final String fullName, final String simpleName, boolean isAbstract) {\n \t\tthis.fullName = fullName;\n \t\tthis.simpleName = simpleName;\n+\t\tthis.isAbstract = isAbstract;\n+\t\tthis.aliasSources = new ArrayList<>();\n+\t}\n+\n+\tpublic FrankElement(final String fullName, final String simpleName) {\n+\t\tthis(fullName, simpleName, false);\n+\t}\n+\t\n+\tpublic void setParent(FrankElement parent) {\n+\t\tthis.parent = parent;\n+\t\tthis.statistics = new FrankElementStatistics(this);\n+\t}\n+\n+\t/**\n+\t * Setter for attributes. We prevent modifying the list of attributes\n+\t * because we want to maintain the private field attributeLookup.\n+\t * @param inputAttributes\n+\t */\n+\tpublic void setAttributes(List<FrankAttribute> inputAttributes) {\n+\t\tCollections.sort(inputAttributes);\n+\t\tthis.attributes = Collections.unmodifiableList(inputAttributes);\n+\t\tattributeLookup = new HashMap<>();\n+\t\tfor(FrankAttribute a: attributes) {\n+\t\t\tif(attributeLookup.containsKey(a.getName())) {\n+\t\t\t\tlog.warn(String.format(\"Frank element [%s] has multiple attributes with name [%s]\",\n+\t\t\t\t\t\tfullName, a.getName()));\n+\t\t\t} else {\n+\t\t\t\tattributeLookup.put(a.getName(), a);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<FrankAttribute> getAttributes(Predicate<? super FrankAttribute> filter) {\n+\t\treturn attributes.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Setter for config children. We prevent modifying the list of config children\n+\t * because we want to maintain the private field configChildLookup.\n+\t * @param children\n+\t */\n+\tpublic void setConfigChildren(List<ConfigChild> children) {\n+\t\tCollections.sort(children);\n+\t\tthis.configChildren = Collections.unmodifiableList(children);\n+\t\tconfigChildLookup = new HashMap<>();\n+\t\tfor(ConfigChild c: children) {\n+\t\t\tConfigChildKey key = new ConfigChildKey(c);\n+\t\t\tif(configChildLookup.containsKey(key)) {\n+\t\t\t\tlog.warn(String.format(\"Different config children of Frank element [%s] have the same key\", fullName));\n+\t\t\t} else {\n+\t\t\t\tconfigChildLookup.put(key, c);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<ConfigChild> getConfigChildren(Predicate<? super ConfigChild> filter) {\n+\t\treturn configChildren.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\tElementChild findElementChildMatch(ElementChild elementChild) {\n+\t\tif(elementChild instanceof FrankAttribute) {\n+\t\t\treturn findAttributeMatch((FrankAttribute) elementChild);\n+\t\t} else if(elementChild instanceof ConfigChild) {\n+\t\t\treturn findConfigChildMatch((ConfigChild) elementChild);\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\t\"Expected a FrankAttribute or ConfigChild, but got a [%s]\",\n+\t\t\t\t\telementChild.getClass().getName()));\n+\t\t}\n+\t}\n+\n+\tFrankAttribute findAttributeMatch(FrankAttribute attribute) {\n+\t\treturn attributeLookup.get(attribute.getName());\n+\t}\n+\n+\tConfigChild findConfigChildMatch(ConfigChild configChild) {\n+\t\treturn configChildLookup.get(new ConfigChildKey(configChild));\n+\t}\n+\n+\tpublic <T extends ElementChild> FrankElement getNextAncestor(Predicate<ElementChild> childFilter, Class<T> kind) {\n+\t\tFrankElement ancestor = parent;\n+\t\twhile((ancestor != null) && (ancestor.getChildren(childFilter, kind).size() == 0)) {\n+\t\t\tancestor = ancestor.getParent();\n+\t\t}\n+\t\treturn ancestor;\n+\t}\n+\n+\tpublic <T extends ElementChild> List<ElementChild> getChildren(Predicate<ElementChild> selector, Class<T> kind) {\n+\t\tList<ElementChild> result = new ArrayList<>();\n+\t\tif(kind.isAssignableFrom(FrankAttribute.class)) {\n+\t\t\tresult.addAll(getAttributes(selector));\n+\t\t}\n+\t\tif(kind.isAssignableFrom(ConfigChild.class)) {\n+\t\t\tresult.addAll(getConfigChildren(selector));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic void walkCumulativeAttributes(\n+\t\t\tCumulativeChildHandler<FrankAttribute> handler,\n+\t\t\tPredicate<ElementChild> childSelector,\n+\t\t\tPredicate<ElementChild> childRejector) {\n+\t\tnew AncestorChildNavigation<String, FrankAttribute>(\n+\t\t\t\thandler, childSelector, childRejector, FrankAttribute.class) {\n+\t\t\t@Override\n+\t\t\tString keyOf(ElementChild child) {\n+\t\t\t\treturn ((FrankAttribute) child).getName();", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5MDAyMQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535090021", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T10:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5NDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 5d5116316..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,9 +17,9 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5NDc1OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533494758", "bodyText": "Wat is een alias in dit geval? Zou je dat hier kunnen documenteren?\n-> ik zag later dat je dit al gedocumenteerd heb bij DocWriterNew. Toch graag hier ook twee regels, en evt. verwijzen naar DocWriterNew.", "author": "gvanbrakel", "createdAt": "2020-12-01T15:19:55Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,225 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n+\t@EqualsAndHashCode\n+\tprivate final class ConfigChildKey {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic ConfigChildKey(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\tprivate @Getter FrankElement parent;\n+\tprivate @Getter List<FrankAttribute> attributes;\n+\tprivate Map<String, FrankAttribute> attributeLookup;\n+\tprivate @Getter List<ConfigChild> configChildren;\n+\tprivate Map<ConfigChildKey, ConfigChild> configChildLookup;\n+\tprivate @Getter List<ConfigChild> aliasSources;\n+\tprivate String cachedAlias = null;\n+\tprivate @Getter FrankElementStatistics statistics;\n \n \tFrankElement(Class<?> clazz) {\n-\t\tthis(clazz.getName(), clazz.getSimpleName());\n+\t\tthis(clazz.getName(), clazz.getSimpleName(), Modifier.isAbstract(clazz.getModifiers()));\n \t}\n \n \t/**\n \t * Constructor for testing purposes. We want to test attribute construction in isolation,\n \t * in which case we do not have a parent.\n+\t * TODO: Reorganize files such that this test constructor need not be public.\n \t */\n-\tFrankElement(final String fullName, final String simpleName) {\n+\tpublic FrankElement(final String fullName, final String simpleName, boolean isAbstract) {\n \t\tthis.fullName = fullName;\n \t\tthis.simpleName = simpleName;\n+\t\tthis.isAbstract = isAbstract;\n+\t\tthis.aliasSources = new ArrayList<>();\n+\t}\n+\n+\tpublic FrankElement(final String fullName, final String simpleName) {\n+\t\tthis(fullName, simpleName, false);\n+\t}\n+\t\n+\tpublic void setParent(FrankElement parent) {\n+\t\tthis.parent = parent;\n+\t\tthis.statistics = new FrankElementStatistics(this);\n+\t}\n+\n+\t/**\n+\t * Setter for attributes. We prevent modifying the list of attributes\n+\t * because we want to maintain the private field attributeLookup.\n+\t * @param inputAttributes\n+\t */\n+\tpublic void setAttributes(List<FrankAttribute> inputAttributes) {\n+\t\tCollections.sort(inputAttributes);\n+\t\tthis.attributes = Collections.unmodifiableList(inputAttributes);\n+\t\tattributeLookup = new HashMap<>();\n+\t\tfor(FrankAttribute a: attributes) {\n+\t\t\tif(attributeLookup.containsKey(a.getName())) {\n+\t\t\t\tlog.warn(String.format(\"Frank element [%s] has multiple attributes with name [%s]\",\n+\t\t\t\t\t\tfullName, a.getName()));\n+\t\t\t} else {\n+\t\t\t\tattributeLookup.put(a.getName(), a);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<FrankAttribute> getAttributes(Predicate<? super FrankAttribute> filter) {\n+\t\treturn attributes.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\t/**\n+\t * Setter for config children. We prevent modifying the list of config children\n+\t * because we want to maintain the private field configChildLookup.\n+\t * @param children\n+\t */\n+\tpublic void setConfigChildren(List<ConfigChild> children) {\n+\t\tCollections.sort(children);\n+\t\tthis.configChildren = Collections.unmodifiableList(children);\n+\t\tconfigChildLookup = new HashMap<>();\n+\t\tfor(ConfigChild c: children) {\n+\t\t\tConfigChildKey key = new ConfigChildKey(c);\n+\t\t\tif(configChildLookup.containsKey(key)) {\n+\t\t\t\tlog.warn(String.format(\"Different config children of Frank element [%s] have the same key\", fullName));\n+\t\t\t} else {\n+\t\t\t\tconfigChildLookup.put(key, c);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic List<ConfigChild> getConfigChildren(Predicate<? super ConfigChild> filter) {\n+\t\treturn configChildren.stream().filter(filter).collect(Collectors.toList());\n+\t}\n+\n+\tElementChild findElementChildMatch(ElementChild elementChild) {\n+\t\tif(elementChild instanceof FrankAttribute) {\n+\t\t\treturn findAttributeMatch((FrankAttribute) elementChild);\n+\t\t} else if(elementChild instanceof ConfigChild) {\n+\t\t\treturn findConfigChildMatch((ConfigChild) elementChild);\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\t\"Expected a FrankAttribute or ConfigChild, but got a [%s]\",\n+\t\t\t\t\telementChild.getClass().getName()));\n+\t\t}\n+\t}\n+\n+\tFrankAttribute findAttributeMatch(FrankAttribute attribute) {\n+\t\treturn attributeLookup.get(attribute.getName());\n+\t}\n+\n+\tConfigChild findConfigChildMatch(ConfigChild configChild) {\n+\t\treturn configChildLookup.get(new ConfigChildKey(configChild));\n+\t}\n+\n+\tpublic <T extends ElementChild> FrankElement getNextAncestor(Predicate<ElementChild> childFilter, Class<T> kind) {\n+\t\tFrankElement ancestor = parent;\n+\t\twhile((ancestor != null) && (ancestor.getChildren(childFilter, kind).size() == 0)) {\n+\t\t\tancestor = ancestor.getParent();\n+\t\t}\n+\t\treturn ancestor;\n+\t}\n+\n+\tpublic <T extends ElementChild> List<ElementChild> getChildren(Predicate<ElementChild> selector, Class<T> kind) {\n+\t\tList<ElementChild> result = new ArrayList<>();\n+\t\tif(kind.isAssignableFrom(FrankAttribute.class)) {\n+\t\t\tresult.addAll(getAttributes(selector));\n+\t\t}\n+\t\tif(kind.isAssignableFrom(ConfigChild.class)) {\n+\t\t\tresult.addAll(getConfigChildren(selector));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic void walkCumulativeAttributes(\n+\t\t\tCumulativeChildHandler<FrankAttribute> handler,\n+\t\t\tPredicate<ElementChild> childSelector,\n+\t\t\tPredicate<ElementChild> childRejector) {\n+\t\tnew AncestorChildNavigation<String, FrankAttribute>(\n+\t\t\t\thandler, childSelector, childRejector, FrankAttribute.class) {\n+\t\t\t@Override\n+\t\t\tString keyOf(ElementChild child) {\n+\t\t\t\treturn ((FrankAttribute) child).getName();\n+\t\t\t}\n+\t\t}.run(this);\n+\t}\n+\n+\tpublic void walkCumulativeConfigChildren(\n+\t\t\tCumulativeChildHandler<ConfigChild> handler,\n+\t\t\tPredicate<ElementChild> childSelector,\n+\t\t\tPredicate<ElementChild> childRejector) {\n+\t\tnew AncestorChildNavigation<ConfigChildKey, ConfigChild>(\n+\t\t\t\thandler, childSelector, childRejector, ConfigChild.class) {\n+\t\t\t@Override\n+\t\t\tConfigChildKey keyOf(ElementChild child) {\n+\t\t\t\treturn new ConfigChildKey((ConfigChild) child);\n+\t\t\t}\n+\t\t}.run(this);\t\t\n+\t}\n+\n+\tpublic void addAliasSource(ConfigChild aliasSource) {\n+\t\taliasSources.add(aliasSource);\n+\t}\n+\n+\tpublic String getAlias() {", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNjg5Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535116892", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T11:12:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5NDc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 5d5116316..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,9 +17,9 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Predicate;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyMDA5NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r533520095", "bodyText": "Uit de private methods declaredGroupOrRepeatedChildren() in deze class maak ik op dat deze bedoeld is voor gebruik bij het opbouwen van de Xsd. Klopt dat? Dan zou dat ook in de naam naar voren moeten komen.", "author": "gvanbrakel", "createdAt": "2020-12-01T15:51:37Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/AncestorChildNavigation.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc.model;\n+\n+import static nl.nn.adapterframework.doc.model.ElementChild.ALL;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+abstract class AncestorChildNavigation<K, T extends ElementChild> {", "originalCommit": "c73e7597062e96b0b6548604e17bfee63f37d102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMDI4Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535120283", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-03T11:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyMDA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/AncestorChildNavigation.java b/core/src/main/java/nl/nn/adapterframework/doc/model/AncestorChildNavigation.java\nindex b3412bb2a..89cf4ac3d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/AncestorChildNavigation.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/AncestorChildNavigation.java\n\n@@ -26,15 +26,16 @@ import java.util.Set;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n-abstract class AncestorChildNavigation<K, T extends ElementChild> {\n+import nl.nn.adapterframework.doc.model.ElementChild.AbstractKey;\n+\n+class AncestorChildNavigation<T extends ElementChild> {\n \tprivate final CumulativeChildHandler<T> handler;\n-\tprivate final Predicate<ElementChild> childSelector;\n-\tprivate final ChildRejector<K, T> rejector;\n+\tprivate final ChildRejector<T> rejector;\n \tprivate final Class<T> kind;\n \tprivate FrankElement current;\n-\tprivate Map<K, Boolean> items;\n-\tprivate Set<K> overridden;\n-\t\n+\tprivate Map<AbstractKey, Boolean> items;\n+\tprivate Set<AbstractKey> overridden;\n+\tprivate Predicate<FrankElement> noChildren;\n \n \tAncestorChildNavigation(\n \t\t\tCumulativeChildHandler<T> handler,\n"}}, {"oid": "1582f815ed877d92e632db607e50a490f52224cf", "url": "https://github.com/ibissource/iaf/commit/1582f815ed877d92e632db607e50a490f52224cf", "message": "Rename predicate SELECTED to IN_XSD and improve docs FrankDocGroup", "committedDate": "2020-12-03T08:29:06Z", "type": "commit"}, {"oid": "55974d960e21e500039e14025cb2edf3d0981bde", "url": "https://github.com/ibissource/iaf/commit/55974d960e21e500039e14025cb2edf3d0981bde", "message": "Use LinkedHashMap for groups", "committedDate": "2020-12-03T08:52:38Z", "type": "commit"}, {"oid": "15b4acd0496a769d77ff3e24382d4e097a698a2e", "url": "https://github.com/ibissource/iaf/commit/15b4acd0496a769d77ff3e24382d4e097a698a2e", "message": "Apply LinkedHashMap also in FrankElement", "committedDate": "2020-12-03T09:13:24Z", "type": "commit"}, {"oid": "befff9097f69570ab402524ceaea1edeee11c96b", "url": "https://github.com/ibissource/iaf/commit/befff9097f69570ab402524ceaea1edeee11c96b", "message": "Documentation updates and renames", "committedDate": "2020-12-03T09:29:54Z", "type": "commit"}, {"oid": "22656186e90f130b7576c69adb58760c279053ab", "url": "https://github.com/ibissource/iaf/commit/22656186e90f130b7576c69adb58760c279053ab", "message": "Introduce ElementChild.getKey(), always of type String", "committedDate": "2020-12-03T10:27:46Z", "type": "commit"}, {"oid": "75947f0d3f8f9ba83e0d04589e6280f304cc84d7", "url": "https://github.com/ibissource/iaf/commit/75947f0d3f8f9ba83e0d04589e6280f304cc84d7", "message": "Rename to getNextAncestorThatHasChildren", "committedDate": "2020-12-03T10:33:16Z", "type": "commit"}, {"oid": "84ddcfb76d092cfb92af362f4a77cf14363aeff8", "url": "https://github.com/ibissource/iaf/commit/84ddcfb76d092cfb92af362f4a77cf14363aeff8", "message": "Document FrankElement.getAlias()", "committedDate": "2020-12-03T11:12:20Z", "type": "commit"}, {"oid": "2913ea5da20b962a48a3588ce49378a187511b67", "url": "https://github.com/ibissource/iaf/commit/2913ea5da20b962a48a3588ce49378a187511b67", "message": "Rename", "committedDate": "2020-12-03T11:15:39Z", "type": "commit"}, {"oid": "49d222d771beb9dd63341feedf51bdf5a065ce08", "url": "https://github.com/ibissource/iaf/commit/49d222d771beb9dd63341feedf51bdf5a065ce08", "message": "Reintroduce ConfigChildKey", "committedDate": "2020-12-03T14:28:18Z", "type": "commit"}, {"oid": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "url": "https://github.com/ibissource/iaf/commit/419ff084eae3388bebafc4f07d03beb6ebbf30d9", "message": "Rename ConfigChildKey to Key", "committedDate": "2020-12-03T14:29:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NDc5Mg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535354792", "bodyText": "Key kan in deze samenstelling ook een interface zijn, wat door ConfigChild ge\u00efmplementeerd wordt.\nDan hoef je niet steeds een nieuw object te maken, maar kan je in getKey() gewoon 'this' teruggeven.\nHm, oh nee, toch niet, gaat niet goed met hashCode() en equals().\nNegeer deze feedback dus maar.", "author": "gvanbrakel", "createdAt": "2020-12-03T15:50:14Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -1,31 +1,69 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.Comparator;\n+\n import org.apache.logging.log4j.Logger;\n \n+import lombok.EqualsAndHashCode;\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.util.LogUtil;\n \n-public class ConfigChild {\n+public class ConfigChild extends ElementChild<ConfigChild.Key, ConfigChild> implements Comparable<ConfigChild> {\n \tprivate static Logger log = LogUtil.getLogger(ConfigChild.class);\n \n-\tprivate @Getter FrankElement configParent;\n+\t@EqualsAndHashCode\n+\tstatic final class Key {\n+\t\tprivate final @Getter String syntax1Name;\n+\t\tprivate final @Getter ElementType elementType;\n+\t\tprivate final @Getter boolean mandatory;\n+\t\tprivate final @Getter boolean allowMultiple;\n+\n+\t\tpublic Key(ConfigChild configChild) {\n+\t\t\tsyntax1Name = configChild.getSyntax1Name();\n+\t\t\telementType = configChild.getElementType();\n+\t\t\tmandatory = configChild.isMandatory();\n+\t\t\tallowMultiple = configChild.isAllowMultiple();\n+\t\t}\n+\t}", "originalCommit": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex 90e52e9f2..ea0b4249f 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -16,7 +16,10 @@ limitations under the License.\n \n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.apache.logging.log4j.Logger;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MDMxOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535360318", "bodyText": "is a descendant of {@link FrankElement} <code>B</code>, toch?", "author": "gvanbrakel", "createdAt": "2020-12-03T15:56:38Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.util.function.Predicate;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import nl.nn.adapterframework.doc.DocWriterNew;\n+\n+/**\n+ * Base class of FrankAttribute and ConfigChild. This class was introduced\n+ * to implement the following common logic:\n+ * <ul>\n+ * <li> The decision whether to include an attribute or config child in the XML schema\n+ * is based on the same information.\n+ * <li> The structure is very similar in the XML schema for config children and\n+ * attributes. In both cases, we have cumulative groups that include inherited\n+ * items and declared groups that hold only items at the present level of the\n+ * inheritance hierarchy. Please see this in action at {@link DocWriterNew}.\n+ *\n+ * @param <K> The type used to store keys, which are used to search for overrides.\n+ * @param <T> {@link FrankAttribute} or {@link ConfigChild}\n+ * \n+ * @author martijn\n+ */\n+public abstract class ElementChild<K, T extends ElementChild<K, T>> {\n+\tprivate @Getter FrankElement owningElement;\n+\t\n+\t/**\n+\t * The value is inherited from ElementChild corresponding to superclass.\n+\t */\n+\tprivate @Getter @Setter boolean deprecated;\n+\t\n+\t/**\n+\t * Only set to true if there is an IbisDoc or IbisDocRef annotation for\n+\t * this specific ElementChild, excluding inheritance. This property is\n+\t * intended to detect Java Override annotations that are only there for\n+\t * technical reasons, without relevance to the Frank developer.\n+\t * \n+\t * But values inside IbisDoc or IbisDocRef annotations are inherited.\n+\t * That is the case to allow documentation information to be stored more\n+\t * centrally.\n+\t */\n+\tprivate @Getter @Setter boolean documented;\n+\tprivate @Getter FrankElement overriddenFrom;\n+\n+\tpublic static Predicate<ElementChild<?, ?>> IN_XSD = c ->\n+\t\t(! c.isDeprecated())\n+\t\t&& (c.isDocumented() || (c.getOverriddenFrom() == null));\n+\n+\tpublic static Predicate<ElementChild<?, ?>> DEPRECATED = c -> c.isDeprecated();\n+\tpublic static Predicate<ElementChild<?, ?>> ALL = c -> true;\n+\tpublic static Predicate<ElementChild<?, ?>> NONE = c -> false;\n+\n+\tElementChild(final FrankElement owningElement) {\n+\t\tthis.owningElement = owningElement;\n+\t}\n+\n+\tvoid calculateOverriddenFrom() {\n+\t\tFrankElement match = getOwningElement();\n+\t\twhile(match.getParent() != null) {\n+\t\t\tmatch = match.getParent();\n+\t\t\tElementChild<K, T> matchingChild = match.findElementChildMatch(this);\n+\t\t\tif(matchingChild != null) {\n+\t\t\t\toverriddenFrom = match;\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get key that is used to match overrides. If {@link FrankElement} <code>A</code>\n+\t * is a descendant of {@link FrankAttribute} <code>B</code> and if their", "originalCommit": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1ODA1Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535958053", "bodyText": "Ja, je hebt gelijk. Ik heb het verbeterd.", "author": "mhdirkse", "createdAt": "2020-12-04T09:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MDMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\nindex 1b701c29f..be8f2596d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementChild.java\n\n@@ -18,9 +18,12 @@ package nl.nn.adapterframework.doc.model;\n \n import java.util.function.Predicate;\n \n+import org.apache.logging.log4j.Logger;\n+\n import lombok.Getter;\n import lombok.Setter;\n import nl.nn.adapterframework.doc.DocWriterNew;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n  * Base class of FrankAttribute and ConfigChild. This class was introduced\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NjQ2Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535376466", "bodyText": "'that has the classes that implement the interface of an {@link ElementType} that is defined with that interface',", "author": "gvanbrakel", "createdAt": "2020-12-03T16:16:51Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java", "diffHunk": "@@ -1,13 +1,113 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import lombok.Getter;\n \n-public class FrankDocGroup {\n+/**\n+ * Holds a group of FrankElement objects for the Frank!Doc website.\n+ * This website will show a table-of-contents with the groups. When you\n+ * select a group, the FrankElement objects inside will be shown.\n+ * <p>\n+ * There are two kinds of groups that are represented by two subclasses of\n+ * {@link FrankDocGroup} that are also inner classes, namely\n+ * <code>FromType</code> and <code>Other</code>. <code>FromType</code>\n+ * holds a group that has the classes of an {@link ElementType}.", "originalCommit": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NzY4Mw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535957683", "bodyText": "Ik haal hier uit dat je het onderscheid wilt zien tussen model objecten (bijvoorbeeld FrankElement) en de Java classes die erdoor worden gerepresenteerd. Ik heb je suggestie niet letterlijk overgenomen, maar deze gedachte heb ik verwerkt. Ik ben benieuwd wat je ervan vindt.", "author": "mhdirkse", "createdAt": "2020-12-04T09:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NjQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\nindex aaf36ca11..52d8d43c0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\n\n@@ -32,9 +32,12 @@ import lombok.Getter;\n  * There are two kinds of groups that are represented by two subclasses of\n  * {@link FrankDocGroup} that are also inner classes, namely\n  * <code>FromType</code> and <code>Other</code>. <code>FromType</code>\n- * holds a group that has the classes of an {@link ElementType}.\n- * <code>Other</code> holds a group of remaining {@link FrankElement}\n- * that can be part of different {@link ElementType} objects.\n+ * holds a group that has the {@link FrankElement} objects that represent\n+ * the Java classes that implement a Java interface.\n+ * That Java interface is represented by a model object of class\n+ * {@link ElementType}. <code>Other</code> holds a group of remaining\n+ * {@link FrankElement}\n+ * that are each defined with a class rather then with an interface.\n  * <p>\n  * The Frank!Doc website has not been created yet.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NzE2Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535377167", "bodyText": "'that are each defined with a class rather then with an interface'", "author": "gvanbrakel", "createdAt": "2020-12-03T16:17:43Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java", "diffHunk": "@@ -1,13 +1,113 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n import lombok.Getter;\n \n-public class FrankDocGroup {\n+/**\n+ * Holds a group of FrankElement objects for the Frank!Doc website.\n+ * This website will show a table-of-contents with the groups. When you\n+ * select a group, the FrankElement objects inside will be shown.\n+ * <p>\n+ * There are two kinds of groups that are represented by two subclasses of\n+ * {@link FrankDocGroup} that are also inner classes, namely\n+ * <code>FromType</code> and <code>Other</code>. <code>FromType</code>\n+ * holds a group that has the classes of an {@link ElementType}.\n+ * <code>Other</code> holds a group of remaining {@link FrankElement}\n+ * that can be part of different {@link ElementType} objects.", "originalCommit": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk1NTQ3OQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535955479", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-04T09:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM3NzE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\nindex aaf36ca11..52d8d43c0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocGroup.java\n\n@@ -32,9 +32,12 @@ import lombok.Getter;\n  * There are two kinds of groups that are represented by two subclasses of\n  * {@link FrankDocGroup} that are also inner classes, namely\n  * <code>FromType</code> and <code>Other</code>. <code>FromType</code>\n- * holds a group that has the classes of an {@link ElementType}.\n- * <code>Other</code> holds a group of remaining {@link FrankElement}\n- * that can be part of different {@link ElementType} objects.\n+ * holds a group that has the {@link FrankElement} objects that represent\n+ * the Java classes that implement a Java interface.\n+ * That Java interface is represented by a model object of class\n+ * {@link ElementType}. <code>Other</code> holds a group of remaining\n+ * {@link FrankElement}\n+ * that are each defined with a class rather then with an interface.\n  * <p>\n  * The Frank!Doc website has not been created yet.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MDU4OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535380588", "bodyText": "De reden om de attributes niet te kunnen modificeren is er niet meer. Of is er nog een andere reden?", "author": "gvanbrakel", "createdAt": "2020-12-03T16:22:09Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,231 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.DocWriterNew;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\n+\t// Represents the Java superclass.\n+\tprivate @Getter FrankElement parent;\n+\n+\tprivate LinkedHashMap<String, FrankAttribute> attributes;\n+\tprivate LinkedHashMap<ConfigChild.Key, ConfigChild> configChildren;\n+\tprivate @Getter List<ConfigChild> aliasSources;\n+\tprivate String cachedAlias = null;\n+\tprivate @Getter FrankElementStatistics statistics;\n \n \tFrankElement(Class<?> clazz) {\n-\t\tthis(clazz.getName(), clazz.getSimpleName());\n+\t\tthis(clazz.getName(), clazz.getSimpleName(), Modifier.isAbstract(clazz.getModifiers()));\n \t}\n \n \t/**\n \t * Constructor for testing purposes. We want to test attribute construction in isolation,\n \t * in which case we do not have a parent.\n+\t * TODO: Reorganize files such that this test constructor need not be public.\n \t */\n-\tFrankElement(final String fullName, final String simpleName) {\n+\tpublic FrankElement(final String fullName, final String simpleName, boolean isAbstract) {\n \t\tthis.fullName = fullName;\n \t\tthis.simpleName = simpleName;\n+\t\tthis.isAbstract = isAbstract;\n+\t\tthis.aliasSources = new ArrayList<>();\n+\t}\n+\n+\tpublic FrankElement(final String fullName, final String simpleName) {\n+\t\tthis(fullName, simpleName, false);\n+\t}\n+\t\n+\tpublic void setParent(FrankElement parent) {\n+\t\tthis.parent = parent;\n+\t\tthis.statistics = new FrankElementStatistics(this);\n+\t}\n+\n+\t/**\n+\t * Setter for attributes. We prevent modifying the list of attributes\n+\t * because we want to maintain the private field attributeLookup.", "originalCommit": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkzNTM0NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535935345", "bodyText": "Ik heb dit comment weggehaald.", "author": "mhdirkse", "createdAt": "2020-12-04T08:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MDU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4NzA5NQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r536087095", "bodyText": "Dit overbodige commentaar stond er ook voor config children. Daar is het nu ook weg.", "author": "mhdirkse", "createdAt": "2020-12-04T13:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MDU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 73d8bb349..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,18 +17,19 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n-import nl.nn.adapterframework.doc.DocWriterNew;\n import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.model.ElementChild.AbstractKey;\n import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NzcxNQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r535887715", "bodyText": "Als je in ElementChild een Kind maakt, zoals:\nenum Kind {\n\tATTRIBUTE,\n\tCONFIGCHILD;\n}\n\nen ElementChild een getKind() geeft, dan kan je in FrankElement:\nprivate LinkedHashMap<String, FrankAttribute> attributes;\nprivate LinkedHashMap<ConfigChild.Key, ConfigChild> configChildren;\n\nvervangen door:\nprivate Map<Kind, LinkedHashMap<Object, ElementChild>> children;\n\nJe kan dan heel veel code die je nu apart hebt uitgeschreven voor Attributes en ConfigChildren op het niveau van ElementChild brengen.\nBijvoorbeeld:\nFrankAttribute findAttributeMatch(FrankAttribute attribute) {\n\treturn attributes.get(attribute.getKey());\n}\n\nConfigChild findConfigChildMatch(ConfigChild configChild) {\n\treturn configChildren.get(configChild.getKey());\n}\n\nvervangen door\n<C extends ElementChild> C findElementChild(C child) {\n\treturn children.get(child.getKind()).get(child.getKey());\n}\n\nJe hoeft dan ook geen elementChild instanceof meer te doen.", "author": "gvanbrakel", "createdAt": "2020-12-04T07:23:23Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java", "diffHunk": "@@ -1,27 +1,231 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n package nl.nn.adapterframework.doc.model;\n \n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n-import lombok.Setter;\n+import nl.nn.adapterframework.doc.DocWriterNew;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n+\tprivate static Logger log = LogUtil.getLogger(FrankElement.class);\n+\n \tprivate final @Getter String fullName;\n \tprivate final @Getter String simpleName;\n-\tprivate @Getter @Setter FrankElement parent;\n-\tprivate @Getter @Setter List<FrankAttribute> attributes;\n-\tprivate @Getter @Setter List<ConfigChild> configChildren;\n+\tprivate final @Getter boolean isAbstract;\n+\n+\t// Represents the Java superclass.\n+\tprivate @Getter FrankElement parent;\n+\n+\tprivate LinkedHashMap<String, FrankAttribute> attributes;\n+\tprivate LinkedHashMap<ConfigChild.Key, ConfigChild> configChildren;", "originalCommit": "419ff084eae3388bebafc4f07d03beb6ebbf30d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4NTg4MA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r536085880", "bodyText": "Gelukt! Dank voor deze tip!", "author": "mhdirkse", "createdAt": "2020-12-04T13:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NzcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\nindex 73d8bb349..ef98ff6be 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankElement.java\n\n@@ -17,18 +17,19 @@ limitations under the License.\n package nl.nn.adapterframework.doc.model;\n \n import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.apache.logging.log4j.Logger;\n \n import lombok.Getter;\n-import nl.nn.adapterframework.doc.DocWriterNew;\n import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.model.ElementChild.AbstractKey;\n import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankElement {\n"}}, {"oid": "f5e8fa9d9c6f42148c8940ff0629d7eb3e5db263", "url": "https://github.com/ibissource/iaf/commit/f5e8fa9d9c6f42148c8940ff0629d7eb3e5db263", "message": "Merge branch 'master' into fillDataModel4", "committedDate": "2020-12-04T08:44:27Z", "type": "commit"}, {"oid": "cfb14837ba6ec9da30667fdf1c14f07e4169dba3", "url": "https://github.com/ibissource/iaf/commit/cfb14837ba6ec9da30667fdf1c14f07e4169dba3", "message": "Remove obsolete comment", "committedDate": "2020-12-04T08:53:16Z", "type": "commit"}, {"oid": "a6f69409afe10d6f16fb7f469772cd3c82adcbe4", "url": "https://github.com/ibissource/iaf/commit/a6f69409afe10d6f16fb7f469772cd3c82adcbe4", "message": "Fix documentation", "committedDate": "2020-12-04T09:22:00Z", "type": "commit"}, {"oid": "c47648ca7106b3116de75621ec8f4aefad7b90cd", "url": "https://github.com/ibissource/iaf/commit/c47648ca7106b3116de75621ec8f4aefad7b90cd", "message": "Removed unused type argument T of ElementChild", "committedDate": "2020-12-04T10:07:04Z", "type": "commit"}, {"oid": "49de83b4d520696ce1ad29ec157c6b84c2811293", "url": "https://github.com/ibissource/iaf/commit/49de83b4d520696ce1ad29ec157c6b84c2811293", "message": "Remove type argument K from ElementChild", "committedDate": "2020-12-04T11:15:57Z", "type": "commit"}, {"oid": "0ac7137eee271ec1c3396dc873266fab10b28c02", "url": "https://github.com/ibissource/iaf/commit/0ac7137eee271ec1c3396dc873266fab10b28c02", "message": "Make common logic for config children and attributes in FrankElement", "committedDate": "2020-12-04T12:12:24Z", "type": "commit"}, {"oid": "fa13e63c0a53f9c0b17f8b665dd1351421372cfc", "url": "https://github.com/ibissource/iaf/commit/fa13e63c0a53f9c0b17f8b665dd1351421372cfc", "message": "Remove getAttributes() and getConfigChildren() without predicate", "committedDate": "2020-12-04T12:54:44Z", "type": "commit"}, {"oid": "3c61ea434d430051261716c91140e822403b7f98", "url": "https://github.com/ibissource/iaf/commit/3c61ea434d430051261716c91140e822403b7f98", "message": "Add warning when overridden from deprecated ElementChild", "committedDate": "2020-12-04T13:04:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjQwOQ==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r536096409", "bodyText": "Deze doe je ook al op regel 60", "author": "gvanbrakel", "createdAt": "2020-12-04T13:23:53Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -57,7 +86,7 @@ public static FrankDocModel populate() {\n \n \tpublic FrankDocModel() {\n \t\tconfigChildDescriptors = new HashMap<>();\n-\t\tgroups = new HashMap<>();\n+\t\tgroups = new LinkedHashMap<>();", "originalCommit": "3c61ea434d430051261716c91140e822403b7f98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4NDE4Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r537384186", "bodyText": "Gedaan. Ik heb de laatste initializatie ook uit de constructor gehaald zodat de constructor weg kan.", "author": "mhdirkse", "createdAt": "2020-12-07T10:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjQwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\nindex 503371128..06fa763a6 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java\n\n@@ -84,12 +85,7 @@ public class FrankDocModel {\n \t\treturn result;\n \t}\n \n-\tpublic FrankDocModel() {\n-\t\tconfigChildDescriptors = new HashMap<>();\n-\t\tgroups = new LinkedHashMap<>();\n-\t}\n-\n-\tpublic void createConfigChildDescriptorsFrom(String path) throws IOException, SAXException {\n+\tvoid createConfigChildDescriptorsFrom(String path) throws IOException, SAXException {\n \t\tResource resource = Resource.getResource(path);\n \t\tif(resource == null) {\n \t\t\tthrow new IOException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMTM4Nw==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r536101387", "bodyText": "hasNoConfigChildren is hier eigenlijk: hasNoElementChildrenOfKind", "author": "gvanbrakel", "createdAt": "2020-12-04T13:32:11Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/GroupCreator.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* \n+Copyright 2020 WeAreFrank! \n+\n+Licensed under the Apache License, Version 2.0 (the \"License\"); \n+you may not use this file except in compliance with the License. \n+You may obtain a copy of the License at \n+\n+    http://www.apache.org/licenses/LICENSE-2.0 \n+\n+Unless required by applicable law or agreed to in writing, software \n+distributed under the License is distributed on an \"AS IS\" BASIS, \n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n+See the License for the specific language governing permissions and \n+limitations under the License. \n+*/\n+\n+package nl.nn.adapterframework.doc;\n+\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import nl.nn.adapterframework.doc.model.CumulativeChildHandler;\n+import nl.nn.adapterframework.doc.model.ElementChild;\n+import nl.nn.adapterframework.doc.model.FrankElement;\n+\n+/**\n+ * Helper class for building attribute groups and config child groups from the model.\n+ * See {@link DocWriterNew} to understand what we try to achieve.\n+ *\n+ * @author martijn\n+ *\n+ */\n+class GroupCreator<T extends ElementChild> {\n+\tstatic interface Callback<T extends ElementChild> extends CumulativeChildHandler<T> {\n+\t\tList<T> getChildrenOf(FrankElement elem);\n+\t\tFrankElement getAncestorOf(FrankElement elem);\n+\t\tvoid addDeclaredGroup();\n+\t\tvoid addCumulativeGroup();\n+\t\tvoid addDeclaredGroupRef(FrankElement referee);\n+\t\tvoid addCumulativeGroupRef(FrankElement referee);\n+\t}\n+\n+\tprivate FrankElement frankElement;\n+\tprivate Callback<T> callback;\n+\tprivate Consumer<Callback<T>> cumulativeGroupTrigger;\n+\n+\tGroupCreator(\n+\t\t\tFrankElement frankElement,\n+\t\t\tConsumer<Callback<T>> cumulativeGroupTrigger,\n+\t\t\tCallback<T> callback) {\n+\t\tthis.frankElement = frankElement;\n+\t\tthis.cumulativeGroupTrigger = cumulativeGroupTrigger;\n+\t\tthis.callback = callback;\n+\t}\n+\n+\tvoid run() {\n+\t\tboolean hasNoConfigChildren = callback.getChildrenOf(frankElement).isEmpty();", "originalCommit": "3c61ea434d430051261716c91140e822403b7f98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM4MzUxOA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r537383518", "bodyText": "Gedaan.", "author": "mhdirkse", "createdAt": "2020-12-07T10:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/GroupCreator.java b/core/src/main/java/nl/nn/adapterframework/doc/GroupCreator.java\nindex f5b8abdea..6439701a9 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/GroupCreator.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/GroupCreator.java\n\n@@ -54,9 +54,9 @@ class GroupCreator<T extends ElementChild> {\n \t}\n \n \tvoid run() {\n-\t\tboolean hasNoConfigChildren = callback.getChildrenOf(frankElement).isEmpty();\n+\t\tboolean hasNoElementChildrenOfKind = callback.getChildrenOf(frankElement).isEmpty();\n \t\tFrankElement ancestor = callback.getAncestorOf(frankElement);\n-\t\tif(hasNoConfigChildren) {\n+\t\tif(hasNoElementChildrenOfKind) {\n \t\t\tif(ancestor == null) {\n \t\t\t\treturn;\n \t\t\t}\n"}}, {"oid": "b923ad6407f0c84124beea27d129934a32e853ac", "url": "https://github.com/ibissource/iaf/commit/b923ad6407f0c84124beea27d129934a32e853ac", "message": "Deprecation should not inherit", "committedDate": "2020-12-04T16:45:53Z", "type": "commit"}, {"oid": "c6d7892abf92082aa4e28079c69e255d4c494b54", "url": "https://github.com/ibissource/iaf/commit/c6d7892abf92082aa4e28079c69e255d4c494b54", "message": "Follow up small review comments", "committedDate": "2020-12-07T10:11:07Z", "type": "commit"}, {"oid": "4c855863f4f3dba92856a0ec10a51b6ed35fe5fe", "url": "https://github.com/ibissource/iaf/commit/4c855863f4f3dba92856a0ec10a51b6ed35fe5fe", "message": "Calculate the syntax 2 xsd name of a FrankElement", "committedDate": "2020-12-07T13:51:18Z", "type": "commit"}, {"oid": "44d04fb72fd6a983e48a44437e921e02b06da1eb", "url": "https://github.com/ibissource/iaf/commit/44d04fb72fd6a983e48a44437e921e02b06da1eb", "message": "Register syntax 1 name with ElementChild", "committedDate": "2020-12-07T16:09:45Z", "type": "commit"}, {"oid": "75b2992ff345ee93dc62f47664ad0983c2a00568", "url": "https://github.com/ibissource/iaf/commit/75b2992ff345ee93dc62f47664ad0983c2a00568", "message": "Add extra test", "committedDate": "2020-12-07T16:29:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0NjY2OA==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r537646668", "bodyText": "Volgens mij is recursie niet nodig. Uit het ElementType genereer je groepen voor elke syntax1naam. Die groepen bevatten een choice van elementen met een samengestelde naam (bijv. JavaErrorSender) en een verwijzing naar een complex-type. Die complex-types zijn voor elke syntax1naam binnen het ElementType hetzelfde, en kunnen dus gedeeld worden.", "author": "gvanbrakel", "createdAt": "2020-12-07T16:31:45Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -113,6 +113,29 @@ public int compareTo(ElementChild other) {\n \t\treturn CONFIG_CHILD_COMPARATOR.compare(this, (ConfigChild) other);\n \t}\n \n+\t/**\n+\t * Registers the syntax 1 name of this {@link ConfigChild} with the\n+\t * {@link ElementType}. This is done recursively because the XSD does\n+\t * not only use the declared config children, but also the inherited\n+\t * config children of a {@link FrankElement}. For each combination of\n+\t * a syntax 1 name and an {@link ElementChild}, we have &lt;xs:group&gt;\n+\t * declarations in the XSD. The recursion ensures that references to\n+\t * ancestor groups are valid.\n+\t */", "originalCommit": "44d04fb72fd6a983e48a44437e921e02b06da1eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4NjU0Ng==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r538286546", "bodyText": "Je hebt gelijk. Ik heb het aangepast.", "author": "mhdirkse", "createdAt": "2020-12-08T11:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0NjY2OA=="}], "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\nindex 7e0b10a7f..ea0b4249f 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java\n\n@@ -113,26 +113,9 @@ public class ConfigChild extends ElementChild {\n \t\treturn CONFIG_CHILD_COMPARATOR.compare(this, (ConfigChild) other);\n \t}\n \n-\t/**\n-\t * Registers the syntax 1 name of this {@link ConfigChild} with the\n-\t * {@link ElementType}. This is done recursively because the XSD does\n-\t * not only use the declared config children, but also the inherited\n-\t * config children of a {@link FrankElement}. For each combination of\n-\t * a syntax 1 name and an {@link ElementChild}, we have &lt;xs:group&gt;\n-\t * declarations in the XSD. The recursion ensures that references to\n-\t * ancestor groups are valid.\n-\t */\n-\tvoid recursivelyRegisterSyntax1NameWithElementType(final String syntax1Name) {\n+\tvoid registerSyntax1NameWithElementType(final String syntax1Name) {\n \t\tif(IN_XSD.test(this)) {\n \t\t\telementType.addConfigChildSyntax1Name(syntax1Name);\n-\t\t\tFrankElement parent = getOwningElement().getNextAncestorThatHasChildren(\n-\t\t\t\t\tf -> f.getChildrenOfKind(IN_XSD, ConfigChild.class).isEmpty());\n-\t\t\tif(parent != null) {\n-\t\t\t\tConfigChild match = (ConfigChild) parent.findElementChildMatch(this, ConfigChild.class);\n-\t\t\t\tif(match != null) {\n-\t\t\t\t\tmatch.recursivelyRegisterSyntax1NameWithElementType(syntax1Name);\n-\t\t\t\t}\n-\t\t\t}\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0ODQyMg==", "url": "https://github.com/ibissource/iaf/pull/1239#discussion_r537648422", "bodyText": "Als je in plaats van een TreeSet een LinkedHashSet gebruikt, blijft de volgorde van toevoegen behouden. Dan komt Sender voor ErrorSender, en dat is prettig.", "author": "gvanbrakel", "createdAt": "2020-12-07T16:34:06Z", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java", "diffHunk": "@@ -35,6 +37,15 @@\n \tprivate @Getter String simpleName;\n \tprivate @Getter Map<String, FrankElement> members;\n \tprivate @Getter boolean fromJavaInterface;\n+\t\n+\t/**\n+\t * For each syntax 1 name in this set, an &lt;xs:choice&gt; of &lt;xs:element&gt;\n+\t * is created in the XSD. The elements in a group correspond to the Java\n+\t * classes that implement the Java interface represented by this {@link ElementChild}.\n+\t * For each syntax 1 name a different group is needed because the syntax 2\n+\t * names of the elements are different.\n+\t */\n+\tprivate @Getter Set<String> configChildSyntax1Names = new TreeSet<>();", "originalCommit": "44d04fb72fd6a983e48a44437e921e02b06da1eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d9b92e4e5269404a82cdd1bfc9e297cc8a6c37b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java\nindex a37051fe8..b2e717292 100644\n--- a/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java\n+++ b/core/src/main/java/nl/nn/adapterframework/doc/model/ElementType.java\n\n@@ -44,8 +43,11 @@ public class ElementType {\n \t * classes that implement the Java interface represented by this {@link ElementChild}.\n \t * For each syntax 1 name a different group is needed because the syntax 2\n \t * names of the elements are different.\n+\t * <p>\n+\t * A {@link LinkedHashSet} is being used to preserve the sequence with which\n+\t * the syntax 1 names were inserted.\n \t */\n-\tprivate @Getter Set<String> configChildSyntax1Names = new TreeSet<>();\n+\tprivate @Getter LinkedHashSet<String> configChildSyntax1Names = new LinkedHashSet<>();\n \n \tElementType(Class<?> clazz) {\n \t\tfullName = clazz.getName();\n"}}, {"oid": "6e29c7782a7a1427ab08782b85acebe9f0a6491d", "url": "https://github.com/ibissource/iaf/commit/6e29c7782a7a1427ab08782b85acebe9f0a6491d", "message": "Produce XSD that can validate in online tester\n\nNot all unit tests succeed yet", "committedDate": "2020-12-08T11:22:06Z", "type": "commit"}, {"oid": "b583ca7f9b7c3655928eb6f03b44541b787d65dc", "url": "https://github.com/ibissource/iaf/commit/b583ca7f9b7c3655928eb6f03b44541b787d65dc", "message": "Add the fixed attributes that we need now\n\nNot yet for the root element", "committedDate": "2020-12-08T11:55:59Z", "type": "commit"}, {"oid": "60f9307a0e507ccfe6a97c586d0c06bf829b7e1a", "url": "https://github.com/ibissource/iaf/commit/60f9307a0e507ccfe6a97c586d0c06bf829b7e1a", "message": "Omit abstracts from ElementGroup and extend ElementGroup with generic", "committedDate": "2020-12-08T15:02:48Z", "type": "commit"}, {"oid": "4bc1961a55622cfa69c0ed3409a7525ea94323eb", "url": "https://github.com/ibissource/iaf/commit/4bc1961a55622cfa69c0ed3409a7525ea94323eb", "message": "Fixed unit tests, a few small review comments followed", "committedDate": "2020-12-08T17:40:38Z", "type": "commit"}, {"oid": "e775f9de02e7a6605748434c656854a5d667da31", "url": "https://github.com/ibissource/iaf/commit/e775f9de02e7a6605748434c656854a5d667da31", "message": "Start improving the doc of DocWriterNew, not yet OK", "committedDate": "2020-12-08T19:36:19Z", "type": "commit"}, {"oid": "55581441ea385a3ffe6b3de193ab57848d2e6791", "url": "https://github.com/ibissource/iaf/commit/55581441ea385a3ffe6b3de193ab57848d2e6791", "message": "Remove dead code about aliases", "committedDate": "2020-12-10T09:09:32Z", "type": "commit"}, {"oid": "3b4125074744207945aadeeffa412e514b08cbbb", "url": "https://github.com/ibissource/iaf/commit/3b4125074744207945aadeeffa412e514b08cbbb", "message": "Add required and fixed modifiers to attributes as requested", "committedDate": "2020-12-10T10:34:02Z", "type": "commit"}, {"oid": "5e20d090e43cf9a2ba46b445d09160eb0330a7b2", "url": "https://github.com/ibissource/iaf/commit/5e20d090e43cf9a2ba46b445d09160eb0330a7b2", "message": "Simplify element group names", "committedDate": "2020-12-10T10:46:55Z", "type": "commit"}, {"oid": "122b64900678d06b5eec90d7f595ea221533f6eb", "url": "https://github.com/ibissource/iaf/commit/122b64900678d06b5eec90d7f595ea221533f6eb", "message": "Add the creatingElementType to FrankElement", "committedDate": "2020-12-10T13:31:09Z", "type": "commit"}, {"oid": "c11f26806cda49ed848c84e2777bc72ac9826329", "url": "https://github.com/ibissource/iaf/commit/c11f26806cda49ed848c84e2777bc72ac9826329", "message": "Revert \"Add the creatingElementType to FrankElement\"\n\nThis reverts commit 122b64900678d06b5eec90d7f595ea221533f6eb.", "committedDate": "2020-12-10T14:27:49Z", "type": "commit"}, {"oid": "ec8f8c376b6acadab3039a328ab1cb6b68f916a9", "url": "https://github.com/ibissource/iaf/commit/ec8f8c376b6acadab3039a328ab1cb6b68f916a9", "message": "Omit FrankElement complex type and groups when possible", "committedDate": "2020-12-10T19:19:08Z", "type": "commit"}, {"oid": "53fb8f241917ad11417a1e05b2e3dff82a6d0cac", "url": "https://github.com/ibissource/iaf/commit/53fb8f241917ad11417a1e05b2e3dff82a6d0cac", "message": "Fix name clash for listener element groups - still hacky", "committedDate": "2020-12-10T21:05:54Z", "type": "commit"}, {"oid": "95472834490481ae9c4c08c2bfa0f5ab3b5374b0", "url": "https://github.com/ibissource/iaf/commit/95472834490481ae9c4c08c2bfa0f5ab3b5374b0", "message": "Fix warning", "committedDate": "2020-12-10T21:09:09Z", "type": "commit"}, {"oid": "ea0d442c84b0aa9a4757d7a8bce687edd9cce48f", "url": "https://github.com/ibissource/iaf/commit/ea0d442c84b0aa9a4757d7a8bce687edd9cce48f", "message": "Code class ElementTypeRole with unit test coverage", "committedDate": "2020-12-11T11:15:25Z", "type": "commit"}, {"oid": "e5038380a83ae53d537321cedfdf1b668fb12567", "url": "https://github.com/ibissource/iaf/commit/e5038380a83ae53d537321cedfdf1b668fb12567", "message": "Add Key class to ElementTypeRole", "committedDate": "2020-12-11T11:30:14Z", "type": "commit"}, {"oid": "57b901a498e1271f25414720ca9374c6d65e81c7", "url": "https://github.com/ibissource/iaf/commit/57b901a498e1271f25414720ca9374c6d65e81c7", "message": "Let FrankDocModel create ElementTypeRole objects", "committedDate": "2020-12-11T13:53:36Z", "type": "commit"}, {"oid": "4018f3263a519e7cf03369bd852d9eba0964f27c", "url": "https://github.com/ibissource/iaf/commit/4018f3263a519e7cf03369bd852d9eba0964f27c", "message": "Move statics of ElementTypeRole to a factory class", "committedDate": "2020-12-11T14:50:14Z", "type": "commit"}]}