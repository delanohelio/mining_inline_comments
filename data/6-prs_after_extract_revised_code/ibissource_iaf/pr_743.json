{"pr_number": 743, "pr_title": "Cleanup JSEngine code and introduce Nashorn", "pr_createdAt": "2020-05-20T16:25:48Z", "pr_url": "https://github.com/ibissource/iaf/pull/743", "timeline": [{"oid": "54a3c1f70e1defd247d79cb31690201fe894ed6d", "url": "https://github.com/ibissource/iaf/commit/54a3c1f70e1defd247d79cb31690201fe894ed6d", "message": "Cleanup JSEngine code and introduce Nashorn", "committedDate": "2020-05-20T08:40:19Z", "type": "commit"}, {"oid": "4512c5361fd7bcca34085822c6b6e3cad8aab598", "url": "https://github.com/ibissource/iaf/commit/4512c5361fd7bcca34085822c6b6e3cad8aab598", "message": "Add setResultHandler to javascript engine.", "committedDate": "2020-05-27T15:52:40Z", "type": "commit"}, {"oid": "54685430d03574c7fa072c3060e9d9b009006bcc", "url": "https://github.com/ibissource/iaf/commit/54685430d03574c7fa072c3060e9d9b009006bcc", "message": "Implement Nashorn JS engine.", "committedDate": "2020-05-27T15:53:00Z", "type": "commit"}, {"oid": "0f9b1500391a06d7d9925c62366f694eb316e07e", "url": "https://github.com/ibissource/iaf/commit/0f9b1500391a06d7d9925c62366f694eb316e07e", "message": "Use Nashorn engine.", "committedDate": "2020-05-27T15:54:46Z", "type": "commit"}, {"oid": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87", "url": "https://github.com/ibissource/iaf/commit/6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87", "message": "Add polyfill for Nashorn.", "committedDate": "2020-05-27T15:55:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MTM4Ng==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r432481386", "bodyText": "I'm unsure what will happen when you call executeScript (with promises) in a multithreaded environment.. In the graphviz bit I made sure to use a new environment. Maybe you could have a look, potentially create a junit test for it.", "author": "nielsm5", "createdAt": "2020-05-29T13:27:05Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "diffHunk": "@@ -107,4 +114,20 @@ public Object invoke(V8Object receiver, V8Array parameters) {\n \t\t\t}\n \t\t}, sender.getName());\n \t}\n+\n+\t@Override\n+\tpublic void setResultHandler(ResultHandler resultHandler) {\n+\t\tgetEngine().registerJavaMethod(new JavaVoidCallback() {\n+\t\t\t@Override\n+\t\t\tpublic void invoke(V8Object receiver, V8Array parameters) {\n+\t\t\t\tresultHandler.setResult(parameters.getString(0));\n+\t\t\t}\n+\t\t}, \"result\");\n+\t\tgetEngine().registerJavaMethod(new JavaVoidCallback() {\n+\t\t\t@Override\n+\t\t\tpublic void invoke(V8Object receiver, V8Array parameters) {\n+\t\t\t\tresultHandler.setError(parameters.getString(0));\n+\t\t\t}\n+\t\t}, \"error\");\n+\t}", "originalCommit": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjA0OA==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r432482048", "bodyText": "I dislike these spaces being added purely because your IDE likes it. There is a codestyle which we all have to follow.", "author": "nielsm5", "createdAt": "2020-05-29T13:28:11Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "diffHunk": "@@ -35,41 +37,46 @@\n \n \tprivate Logger log = LogUtil.getLogger(this);\n \tprivate V8 v8;\n+\tprivate String alias = null;\n \n \t@Override\n-\tpublic void startRuntime() {\n-\t\tstartRuntime(null, null);\n+\tpublic void setScriptAlias(String alias) {\n+\t\tthis.alias = alias;\n \t}\n \n-\t/**\n-\t * If path is null or empty, it will use the log.dir\n-\t * If the log.dir is relative it will turn it into an absolute path\n-\t */\n-\tpublic void startRuntime(String alias, String path) {\n-\t\tString directory = path;\n-\t\tif(StringUtils.isEmpty(directory)) {\n-\t\t\tdirectory = AppConstants.getInstance().getResolvedProperty(\"ibis.tmpdir\");\n-\t\t}\n-\t\tif(directory != null) {\n+\tprivate String getTempDirectory() {\n+\t\tString directory = AppConstants.getInstance().getResolvedProperty(\"ibis.tmpdir\");\n+\n+\t\tif (StringUtils.isNotEmpty(directory)) {\n \t\t\tFile file = new File(directory);\n \t\t\tif (!file.isAbsolute()) {\n \t\t\t\tString absPath = new File(\"\").getAbsolutePath();\n-\t\t\t\tif(absPath != null) {\n+\t\t\t\tif (absPath != null) {\n \t\t\t\t\tfile = new File(absPath, directory);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif(!file.exists()) {\n+\t\t\tif (!file.exists()) {\n \t\t\t\tfile.mkdirs();\n \t\t\t}\n \t\t\tString fileDir = file.getPath();\n-\t\t\tif(StringUtils.isEmpty(fileDir) || !file.isDirectory()) {\n-\t\t\t\tthrow new IllegalStateException(\"unknown or invalid path [\"+((StringUtils.isEmpty(fileDir))?\"NULL\":fileDir)+\"], unable to load J2V8 binaries\");\n+\t\t\tif (StringUtils.isEmpty(fileDir) || !file.isDirectory()) {\n+\t\t\t\tthrow new IllegalStateException(\"unknown or invalid path [\" + ((StringUtils.isEmpty(fileDir)) ? \"NULL\" : fileDir) + \"], unable to load J2V8 binaries\");\n \t\t\t}", "originalCommit": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5f5eb5217b1e2c69941aca5679d14b4bc59b7c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java\nindex 9c556cde2..4b87d77fe 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java\n\n@@ -51,16 +51,16 @@ public class J2V8 implements JavascriptEngine<V8> {\n \t\t\tFile file = new File(directory);\n \t\t\tif (!file.isAbsolute()) {\n \t\t\t\tString absPath = new File(\"\").getAbsolutePath();\n-\t\t\t\tif (absPath != null) {\n+\t\t\t\tif(absPath != null) {\n \t\t\t\t\tfile = new File(absPath, directory);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (!file.exists()) {\n+\t\t\tif(!file.exists()) {\n \t\t\t\tfile.mkdirs();\n \t\t\t}\n \t\t\tString fileDir = file.getPath();\n-\t\t\tif (StringUtils.isEmpty(fileDir) || !file.isDirectory()) {\n-\t\t\t\tthrow new IllegalStateException(\"unknown or invalid path [\" + ((StringUtils.isEmpty(fileDir)) ? \"NULL\" : fileDir) + \"], unable to load J2V8 binaries\");\n+\t\t\tif(StringUtils.isEmpty(fileDir) || !file.isDirectory()) {\n+\t\t\t\tthrow new IllegalStateException(\"unknown or invalid path [\"+((StringUtils.isEmpty(fileDir))?\"NULL\":fileDir) + \"], unable to load J2V8 binaries\");\n \t\t\t}\n \t\t\tdirectory = file.getAbsolutePath();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjUwOA==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r432482508", "bodyText": "This needs to be configurable. J2V8 is by far much faster then nashorn. Nashorn should be a backup if the v8 engine can't be loaded", "author": "nielsm5", "createdAt": "2020-05-29T13:28:57Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "diffHunk": "@@ -157,7 +157,7 @@ private String getVisJsWrapper() {\n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n \n-\t\tJ2V8 V8Instance = new J2V8();\n+\t\tJavascriptEngine<NashornScriptEngine> jsEngine = new Nashorn();", "originalCommit": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7fcecc398267f5007d02a307bb35e588510fbb", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java b/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\nindex 799612505..9a874d986 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\n\n@@ -156,23 +158,47 @@ public class GraphvizEngine {\n \n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n-\n-\t\tJavascriptEngine<NashornScriptEngine> jsEngine = new Nashorn();\n-\t\tfinal ResultHandler resultHandler = new ResultHandler();\n+\t\tprivate JavascriptEngine<?> jsEngine;\n+\t\tprivate ResultHandler resultHandler;\n \n \t\t/**\n \t\t * It's important to register the JS scripts under the same alias so it can be cached\n \t\t * Use the log.dir to extract the SO/DLL files into, make sure this is using an absolute path and not a relative one!!\n \t\t */\n \t\tEnv(String initScript, String graphvisJsLibrary, String alias) {\n-\t\t\tlog.info(\"starting V8 runtime...\");\n-\t\t\tjsEngine.setScriptAlias(alias);\n-\t\t\tjsEngine.startRuntime();\n-\t\t\tlog.info(\"started V8 runtime. Initializing graphviz...\");\n-\t\t\tjsEngine.executeScript(graphvisJsLibrary);\n-\t\t\tjsEngine.executeScript(initScript);\n-\t\t\tjsEngine.setResultHandler(resultHandler);\n-\t\t\tlog.info(\"initialized graphviz\");\n+\t\t\t// Available JS Engines. Lower index has priority.\n+\t\t\tClass<?>[] engines = new Class[]{J2V8.class, Nashorn.class};\n+\n+\t\t\tfor (int i = 0; i < engines.length && jsEngine == null; i++) {\n+\t\t\t\ttry {\n+\t\t\t\t\tlog.debug(\"Trying Javascript engine [\" + engines[i].getName() + \"] for Graphviz.\");\n+\t\t\t\t\tJavascriptEngine<?> engine = ((JavascriptEngine<?>) engines[i].newInstance());\n+\t\t\t\t\tResultHandler resultHandler = new ResultHandler();\n+\n+\t\t\t\t\tstartEngine(engine, resultHandler, initScript, graphvisJsLibrary, alias);\n+\n+\t\t\t\t\tlog.info(\"Using Javascript engine [\" + engines[i].getName() + \"] for Graphviz.\");\n+\t\t\t\t\tjsEngine = engine;\n+\t\t\t\t\tthis.resultHandler = resultHandler;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\tlog.error(\"Javascript engine [\" + engines[i].getName() + \"] could not be initialized.\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (jsEngine == null)\n+\t\t\t\tthrow new UnsupportedOperationException(\"Javascript engines could not be initialized.\");\n+\t\t}\n+\n+\t\tprivate void startEngine(JavascriptEngine<?> engine, ResultHandler resultHandler, String initScript, String graphvisJsLibrary, String alias) throws Exception {\n+\t\t\tlog.info(\"Starting runtime for Javascript Engine...\");\n+\t\t\tengine.setScriptAlias(alias);\n+\t\t\tengine.startRuntime();\n+\t\t\tlog.info(\"Started Javascript Engine runtime. Initializing Graphviz...\");\n+\t\t\tengine.executeScript(graphvisJsLibrary);\n+\t\t\tengine.executeScript(initScript);\n+\t\t\tengine.setResultHandler(resultHandler);\n+\t\t\tlog.info(\"Initialized Graphviz\");\n \t\t}\n \n \t\tpublic String execute(String call) throws GraphvizException {\n"}}, {"oid": "f8e980cbc2e16ab6fc56744d47654d7ed618e5c3", "url": "https://github.com/ibissource/iaf/commit/f8e980cbc2e16ab6fc56744d47654d7ed618e5c3", "message": "Delete nashorn-polyfill.", "committedDate": "2020-06-02T10:36:40Z", "type": "commit"}, {"oid": "7b66f031d428afcdafda8f0ae8b4c43c8283acaf", "url": "https://github.com/ibissource/iaf/commit/7b66f031d428afcdafda8f0ae8b4c43c8283acaf", "message": "Debug Nashorn by using nashorn-promise instead of nashorn-polyfill", "committedDate": "2020-06-02T10:43:57Z", "type": "commit"}, {"oid": "9a010200a4211673d75d36b2035db1df4f526d81", "url": "https://github.com/ibissource/iaf/commit/9a010200a4211673d75d36b2035db1df4f526d81", "message": "Add tests for nashorn.", "committedDate": "2020-06-02T12:55:57Z", "type": "commit"}, {"oid": "42c0a84a6d549eb97294613d060b2c275bf49a49", "url": "https://github.com/ibissource/iaf/commit/42c0a84a6d549eb97294613d060b2c275bf49a49", "message": "Remove println", "committedDate": "2020-06-02T12:57:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNTY4MQ==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436525681", "bodyText": "I think you can just use ScriptEngine here. There is nothing special/specific happening in the NashornScriptEngine class afaik.", "author": "nielsm5", "createdAt": "2020-06-08T08:14:17Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.extensions.javascript;\n+\n+import jdk.nashorn.api.scripting.NashornScriptEngine;", "originalCommit": "42c0a84a6d549eb97294613d060b2c275bf49a49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5f5eb5217b1e2c69941aca5679d14b4bc59b7c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java\nindex 15cbd433f..4a8815000 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java\n\n@@ -1,3 +1,18 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.extensions.javascript;\n \n import jdk.nashorn.api.scripting.NashornScriptEngine;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNTg3MA==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436525870", "bodyText": "Don't forget to add a copyright notice :)", "author": "nielsm5", "createdAt": "2020-06-08T08:14:38Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.extensions.javascript;", "originalCommit": "42c0a84a6d549eb97294613d060b2c275bf49a49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4e5f5eb5217b1e2c69941aca5679d14b4bc59b7c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java\nindex 15cbd433f..4a8815000 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java\n\n@@ -1,3 +1,18 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.extensions.javascript;\n \n import jdk.nashorn.api.scripting.NashornScriptEngine;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNjI3OQ==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436526279", "bodyText": "When you work on a class you have to update the copyright notice. And since we change name Integration Partners can be changed with WeAreFrank!", "author": "nielsm5", "createdAt": "2020-06-08T08:15:33Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Rhino.java", "diffHunk": "@@ -15,6 +15,7 @@\n */\n package nl.nn.adapterframework.extensions.javascript;\n ", "originalCommit": "42c0a84a6d549eb97294613d060b2c275bf49a49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNjU2NQ==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436526565", "bodyText": "When you work on a class you have to update the copyright notice. And since we change name Integration Partners can be changed with WeAreFrank!", "author": "nielsm5", "createdAt": "2020-06-08T08:16:04Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n import java.io.File;", "originalCommit": "42c0a84a6d549eb97294613d060b2c275bf49a49", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1e7fcecc398267f5007d02a307bb35e588510fbb", "url": "https://github.com/ibissource/iaf/commit/1e7fcecc398267f5007d02a307bb35e588510fbb", "message": "Add support for multiple engines.", "committedDate": "2020-06-10T12:23:07Z", "type": "commit"}, {"oid": "4e5f5eb5217b1e2c69941aca5679d14b4bc59b7c", "url": "https://github.com/ibissource/iaf/commit/4e5f5eb5217b1e2c69941aca5679d14b4bc59b7c", "message": "Optimize imports and fix code styling.", "committedDate": "2020-06-10T13:17:08Z", "type": "commit"}, {"oid": "1a70b95251eaf724a320986d72469f2bfc903230", "url": "https://github.com/ibissource/iaf/commit/1a70b95251eaf724a320986d72469f2bfc903230", "message": "Add copyright.", "committedDate": "2020-06-10T13:18:05Z", "type": "commit"}, {"oid": "1490aac580c44dfcae8b18feb6f317ccbbe5c295", "url": "https://github.com/ibissource/iaf/commit/1490aac580c44dfcae8b18feb6f317ccbbe5c295", "message": "Remove spaces.", "committedDate": "2020-06-10T13:34:31Z", "type": "commit"}, {"oid": "1ffe5427915249e7e104d81546a2fa20dfd5646c", "url": "https://github.com/ibissource/iaf/commit/1ffe5427915249e7e104d81546a2fa20dfd5646c", "message": "Fix years.", "committedDate": "2020-06-10T14:05:31Z", "type": "commit"}, {"oid": "97cba0faeae8fd83d75faa733690ef9c9a5dfae7", "url": "https://github.com/ibissource/iaf/commit/97cba0faeae8fd83d75faa733690ef9c9a5dfae7", "message": "Comply with silly codacy bs", "committedDate": "2020-06-11T12:03:39Z", "type": "commit"}, {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c", "url": "https://github.com/ibissource/iaf/commit/ef0af1c993a8a121c7accac2cef7f0f6c075701c", "message": "Remove stacktrace", "committedDate": "2020-06-11T12:18:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMDMzMw==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439230333", "bodyText": "geen log.dir, daar hebben we ibis.tmpdir voor.", "author": "gvanbrakel", "createdAt": "2020-06-12T06:26:54Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "diffHunk": "@@ -156,46 +153,59 @@ private String getVisJsWrapper() {\n \n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n-\n-\t\tJ2V8 V8Instance = new J2V8();\n-\t\tfinal ResultHandler resultHandler = new ResultHandler();\n+\t\tprivate JavascriptEngine<?> jsEngine;\n+\t\tprivate ResultHandler resultHandler;\n \n \t\t/**\n \t\t * It's important to register the JS scripts under the same alias so it can be cached\n \t\t * Use the log.dir to extract the SO/DLL files into, make sure this is using an absolute path and not a relative one!!", "originalCommit": "ef0af1c993a8a121c7accac2cef7f0f6c075701c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6156bbe7395e2695b8f1ec379ba0387d9a145636", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java b/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\nindex b0965eca0..3f2be3100 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\n\n@@ -156,11 +156,7 @@ public class GraphvizEngine {\n \t\tprivate JavascriptEngine<?> jsEngine;\n \t\tprivate ResultHandler resultHandler;\n \n-\t\t/**\n-\t\t * It's important to register the JS scripts under the same alias so it can be cached\n-\t\t * Use the log.dir to extract the SO/DLL files into, make sure this is using an absolute path and not a relative one!!\n-\t\t */\n-\t\tEnv(String initScript, String graphvisJsLibrary, String alias) {\n+\t\tEnv(String initScript, String graphvisJsLibrary) {\n \t\t\t// Available JS Engines. Lower index has priority.\n \t\t\tClass<?>[] engines = new Class[]{J2V8.class, Nashorn.class};\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMTI3Nw==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439231277", "bodyText": "Hoezo 'same alias'? Snap er niks van. Je bedoelt vast niet dat je vijf scripts hebt die je allemaal hetzelfde noemt.", "author": "gvanbrakel", "createdAt": "2020-06-12T06:29:38Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "diffHunk": "@@ -156,46 +153,59 @@ private String getVisJsWrapper() {\n \n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n-\n-\t\tJ2V8 V8Instance = new J2V8();\n-\t\tfinal ResultHandler resultHandler = new ResultHandler();\n+\t\tprivate JavascriptEngine<?> jsEngine;\n+\t\tprivate ResultHandler resultHandler;\n \n \t\t/**\n \t\t * It's important to register the JS scripts under the same alias so it can be cached", "originalCommit": "ef0af1c993a8a121c7accac2cef7f0f6c075701c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6156bbe7395e2695b8f1ec379ba0387d9a145636", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java b/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\nindex b0965eca0..3f2be3100 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java\n\n@@ -156,11 +156,7 @@ public class GraphvizEngine {\n \t\tprivate JavascriptEngine<?> jsEngine;\n \t\tprivate ResultHandler resultHandler;\n \n-\t\t/**\n-\t\t * It's important to register the JS scripts under the same alias so it can be cached\n-\t\t * Use the log.dir to extract the SO/DLL files into, make sure this is using an absolute path and not a relative one!!\n-\t\t */\n-\t\tEnv(String initScript, String graphvisJsLibrary, String alias) {\n+\t\tEnv(String initScript, String graphvisJsLibrary) {\n \t\t\t// Available JS Engines. Lower index has priority.\n \t\t\tClass<?>[] engines = new Class[]{J2V8.class, Nashorn.class};\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMTcyMQ==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439231721", "bodyText": "Ik snap niet wat een alias is.", "author": "gvanbrakel", "createdAt": "2020-06-12T06:30:47Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java", "diffHunk": "@@ -29,6 +30,11 @@\n \n public interface JavascriptEngine<E> {\n \n+\t/**\n+\t * @param alias\t\ta string describing the source, such as a filename\n+\t */\n+\tvoid setScriptAlias(String alias);", "originalCommit": "ef0af1c993a8a121c7accac2cef7f0f6c075701c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6156bbe7395e2695b8f1ec379ba0387d9a145636", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java\nindex 892b0d414..47e65ca7e 100644\n--- a/core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java\n+++ b/core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java\n\n@@ -31,7 +31,7 @@ import nl.nn.adapterframework.extensions.graphviz.ResultHandler;\n public interface JavascriptEngine<E> {\n \n \t/**\n-\t * @param alias\t\ta string describing the source, such as a filename\n+\t * @param alias An identifier which describes the script(s) that are being executed.\n \t */\n \tvoid setScriptAlias(String alias);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMjQwMg==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439232402", "bodyText": "Wat doet deze default?", "author": "gvanbrakel", "createdAt": "2020-06-12T06:32:37Z", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Rhino.java", "diffHunk": "@@ -24,25 +25,36 @@\n \n \tprivate Context cx;\n \tprivate Scriptable scope;\n+\tprivate String alias = \"jsScript\";", "originalCommit": "ef0af1c993a8a121c7accac2cef7f0f6c075701c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzE5MQ==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439233191", "bodyText": "Hier zou ik eigenlijk graag zien dat dit geimplementeerd was als:\nextends JavascriptEngineTest<NashhornEngine>", "author": "gvanbrakel", "createdAt": "2020-06-12T06:35:02Z", "path": "core/src/test/java/nl/nn/adapterframework/extensions/javascript/NashornTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.extensions.javascript;\n+\n+import nl.nn.adapterframework.extensions.graphviz.ResultHandler;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class NashornTest {", "originalCommit": "ef0af1c993a8a121c7accac2cef7f0f6c075701c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3MzQ2Mg==", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439573462", "bodyText": "Ja goed idee!", "author": "nielsm5", "createdAt": "2020-06-12T18:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzE5MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6156bbe7395e2695b8f1ec379ba0387d9a145636", "url": "https://github.com/ibissource/iaf/commit/6156bbe7395e2695b8f1ec379ba0387d9a145636", "message": "Fix comments", "committedDate": "2020-06-12T18:15:05Z", "type": "commit"}]}