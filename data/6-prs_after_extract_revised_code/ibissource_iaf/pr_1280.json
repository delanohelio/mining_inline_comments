{"pr_number": 1280, "pr_title": "Introduce \"action\" parameter for file systems", "pr_createdAt": "2020-11-20T08:22:35Z", "pr_url": "https://github.com/ibissource/iaf/pull/1280", "timeline": [{"oid": "1e16a6770d9ab6ef35d06ce2a967234d4e6e62c7", "url": "https://github.com/ibissource/iaf/commit/1e16a6770d9ab6ef35d06ce2a967234d4e6e62c7", "message": "first draft with missing test of open method", "committedDate": "2020-11-19T16:55:43Z", "type": "commit"}, {"oid": "d9dc63be33ae91980df9291c5cea4b9204853302", "url": "https://github.com/ibissource/iaf/commit/d9dc63be33ae91980df9291c5cea4b9204853302", "message": "fix possible npe", "committedDate": "2020-11-20T08:21:05Z", "type": "commit"}, {"oid": "1c8428d6e61dd9de667f6212a4b2c2253518ef21", "url": "https://github.com/ibissource/iaf/commit/1c8428d6e61dd9de667f6212a4b2c2253518ef21", "message": "remove unused import", "committedDate": "2020-11-20T08:27:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY3MTc1Ng==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r528671756", "bodyText": "This part can stay at configure(). It is not dependent on the action itself", "author": "gvanbrakel", "createdAt": "2020-11-23T12:35:01Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -186,17 +171,39 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void checkConfiguration(String action) throws ConfigurationException {\n+\t\tif (fileSystem instanceof IWritableFileSystem) {\n+\t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n+\t\t}", "originalCommit": "1c8428d6e61dd9de667f6212a4b2c2253518ef21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex 589796e30..d65f592f3 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -173,9 +177,6 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t}\n \n \tprivate void checkConfiguration(String action) throws ConfigurationException {\n-\t\tif (fileSystem instanceof IWritableFileSystem) {\n-\t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n-\t\t}\n \t\tif (!actions.contains(action))\n \t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + action + \"] supported actions are \" + actions.toString() + \"\");\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY3NTc0NA==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r528675744", "bodyText": "Should check here for action to be non-null", "author": "gvanbrakel", "createdAt": "2020-11-23T12:42:24Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -283,6 +290,14 @@ private String determineInputFoldername(Message input, ParameterValueList pvl) t\n \t\n \tpublic Object doAction(Message input, ParameterValueList pvl, IPipeLineSession session) throws FileSystemException, TimeOutException {\n \t\ttry {\n+\t\t\tString action;\n+\t\t\tif (pvl != null && pvl.containsKey(PARAMETER_ACTION)) {\n+\t\t\t\taction = pvl.getParameterValue(PARAMETER_ACTION).asStringValue(getAction());\n+\t\t\t\tcheckConfiguration(action);\n+\t\t\t} else {\n+\t\t\t\taction = getAction();\n+\t\t\t}\n+", "originalCommit": "1c8428d6e61dd9de667f6212a4b2c2253518ef21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex 589796e30..d65f592f3 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -293,6 +294,9 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t\t\tString action;\n \t\t\tif (pvl != null && pvl.containsKey(PARAMETER_ACTION)) {\n \t\t\t\taction = pvl.getParameterValue(PARAMETER_ACTION).asStringValue(getAction());\n+\t\t\t\tif(StringUtils.isEmpty(action)) {\n+\t\t\t\t\tthrow new FileSystemException(\"unable to resolve the value of parameter [\"+PARAMETER_ACTION+\"]\");\n+\t\t\t\t}\n \t\t\t\tcheckConfiguration(action);\n \t\t\t} else {\n \t\t\t\taction = getAction();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY3Njg0Ng==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r528676846", "bodyText": "I think it will be more clear to say: \"either attribute [action] or parameter [action] must be specified\"", "author": "gvanbrakel", "createdAt": "2020-11-23T12:44:27Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -141,42 +142,26 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\tthis.owner=owner;\n \t\tthis.fileSystem=fileSystem;\n \t\tthis.parameterList=parameterList;\n-\t\tif (fileSystem instanceof IWritableFileSystem) {\n-\t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n-\t\t}\n \n-\t\tif (getAction() == null)\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: action must be specified\");\n-\t\tif (!actions.contains(getAction()))\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + getAction() + \"] supported actions are \" + actions.toString() + \"\");\n-\n-\t\tif (getAction().equals(ACTION_READ2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n-\t\t\tsetAction(ACTION_READ1);\n-\t\t}\n-\t\tif (getAction().equals(ACTION_WRITE2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n-\t\t\tsetAction(ACTION_WRITE1);\n-\t\t}\n-\t\t\n-\t\tif (StringUtils.isNotEmpty(getBase64()) && !(getBase64().equals(BASE64_ENCODE) || getBase64().equals(BASE64_DECODE))) {\n-\t\t\tthrow new ConfigurationException(\"attribute 'base64' can have value '\"+BASE64_ENCODE+\"' or '\"+BASE64_DECODE+\"' or can be left empty\");\n-\t\t}\n-\t\t\n \t\tif (parameterList!=null && parameterList.findParameter(PARAMETER_CONTENTS2) != null && parameterList.findParameter(PARAMETER_CONTENTS1) == null) {\n \t\t\tConfigurationWarnings.add(owner, log, \"parameter [\"+PARAMETER_CONTENTS2+\"] has been replaced with [\"+PARAMETER_CONTENTS1+\"]\");\n \t\t\tparameterList.findParameter(PARAMETER_CONTENTS2).setName(PARAMETER_CONTENTS1);\n \t\t}\n-\t\t\n-\t\t//Check if necessarily parameters are available\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_WRITE1, PARAMETER_CONTENTS1, PARAMETER_FILENAME, \"filename\", getFilename());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_MOVE,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_COPY,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_RENAME, PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\t\n+\n+\t\tif (StringUtils.isNotEmpty(getAction())) {\n+\t\t\tcheckConfiguration(getAction());\n+\t\t} else if (parameterList == null || parameterList.findParameter(PARAMETER_ACTION) == null) {\n+\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: either action or parameter [\"+PARAMETER_ACTION+\"] must be specified\");\n+\t\t}", "originalCommit": "1c8428d6e61dd9de667f6212a4b2c2253518ef21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex 589796e30..d65f592f3 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -143,6 +143,10 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t\tthis.fileSystem=fileSystem;\n \t\tthis.parameterList=parameterList;\n \n+\t\tif (fileSystem instanceof IWritableFileSystem) {\n+\t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n+\t\t}\n+\n \t\tif (parameterList!=null && parameterList.findParameter(PARAMETER_CONTENTS2) != null && parameterList.findParameter(PARAMETER_CONTENTS1) == null) {\n \t\t\tConfigurationWarnings.add(owner, log, \"parameter [\"+PARAMETER_CONTENTS2+\"] has been replaced with [\"+PARAMETER_CONTENTS1+\"]\");\n \t\t\tparameterList.findParameter(PARAMETER_CONTENTS2).setName(PARAMETER_CONTENTS1);\n"}}, {"oid": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "url": "https://github.com/ibissource/iaf/commit/29217fc00ae9e3478753aa8dd6c67e94515afd3e", "message": "work on the feedback", "committedDate": "2020-11-24T09:25:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE5Mzk5NA==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r530193994", "bodyText": "Please use ClassUtils.nameOf()", "author": "gvanbrakel", "createdAt": "2020-11-25T08:41:26Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -141,42 +142,30 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\tthis.owner=owner;\n \t\tthis.fileSystem=fileSystem;\n \t\tthis.parameterList=parameterList;\n+\n \t\tif (fileSystem instanceof IWritableFileSystem) {\n \t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n \t\t}\n \n-\t\tif (getAction() == null)\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: action must be specified\");\n-\t\tif (!actions.contains(getAction()))\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + getAction() + \"] supported actions are \" + actions.toString() + \"\");\n-\n-\t\tif (getAction().equals(ACTION_READ2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n-\t\t\tsetAction(ACTION_READ1);\n-\t\t}\n-\t\tif (getAction().equals(ACTION_WRITE2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n-\t\t\tsetAction(ACTION_WRITE1);\n-\t\t}\n-\t\t\n-\t\tif (StringUtils.isNotEmpty(getBase64()) && !(getBase64().equals(BASE64_ENCODE) || getBase64().equals(BASE64_DECODE))) {\n-\t\t\tthrow new ConfigurationException(\"attribute 'base64' can have value '\"+BASE64_ENCODE+\"' or '\"+BASE64_DECODE+\"' or can be left empty\");\n-\t\t}\n-\t\t\n \t\tif (parameterList!=null && parameterList.findParameter(PARAMETER_CONTENTS2) != null && parameterList.findParameter(PARAMETER_CONTENTS1) == null) {\n \t\t\tConfigurationWarnings.add(owner, log, \"parameter [\"+PARAMETER_CONTENTS2+\"] has been replaced with [\"+PARAMETER_CONTENTS1+\"]\");\n \t\t\tparameterList.findParameter(PARAMETER_CONTENTS2).setName(PARAMETER_CONTENTS1);\n \t\t}\n-\t\t\n-\t\t//Check if necessarily parameters are available\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_WRITE1, PARAMETER_CONTENTS1, PARAMETER_FILENAME, \"filename\", getFilename());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_MOVE,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_COPY,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_RENAME, PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\t\n+\n+\t\tif (StringUtils.isNotEmpty(getAction())) {\n+\t\t\tcheckConfiguration(getAction());\n+\t\t} else if (parameterList == null || parameterList.findParameter(PARAMETER_ACTION) == null) {\n+\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");", "originalCommit": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9606ab135987fd89a1b945eaf0345624276cb98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex d65f592f3..718c9b06e 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -155,7 +155,7 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t\tif (StringUtils.isNotEmpty(getAction())) {\n \t\t\tcheckConfiguration(getAction());\n \t\t} else if (parameterList == null || parameterList.findParameter(PARAMETER_ACTION) == null) {\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");\n+\t\t\tthrow new ConfigurationException(ClassUtils.nameOf(owner)+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");\n \t\t}\n \n \t\tif (StringUtils.isNotEmpty(getInputFolder()) && parameterList!=null && parameterList.findParameter(PARAMETER_INPUTFOLDER) != null) {\n"}}, {"oid": "b9606ab135987fd89a1b945eaf0345624276cb98", "url": "https://github.com/ibissource/iaf/commit/b9606ab135987fd89a1b945eaf0345624276cb98", "message": "change the way to get a classname", "committedDate": "2020-11-25T09:31:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MDIwOA==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r529740208", "bodyText": "niet owner.getClass().getSimpleName() maar ClassUtils.nameOf(...)", "author": "nielsm5", "createdAt": "2020-11-24T17:09:57Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -141,42 +142,30 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\tthis.owner=owner;\n \t\tthis.fileSystem=fileSystem;\n \t\tthis.parameterList=parameterList;\n+\n \t\tif (fileSystem instanceof IWritableFileSystem) {\n \t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n \t\t}\n \n-\t\tif (getAction() == null)\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: action must be specified\");\n-\t\tif (!actions.contains(getAction()))\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + getAction() + \"] supported actions are \" + actions.toString() + \"\");\n-\n-\t\tif (getAction().equals(ACTION_READ2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n-\t\t\tsetAction(ACTION_READ1);\n-\t\t}\n-\t\tif (getAction().equals(ACTION_WRITE2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n-\t\t\tsetAction(ACTION_WRITE1);\n-\t\t}\n-\t\t\n-\t\tif (StringUtils.isNotEmpty(getBase64()) && !(getBase64().equals(BASE64_ENCODE) || getBase64().equals(BASE64_DECODE))) {\n-\t\t\tthrow new ConfigurationException(\"attribute 'base64' can have value '\"+BASE64_ENCODE+\"' or '\"+BASE64_DECODE+\"' or can be left empty\");\n-\t\t}\n-\t\t\n \t\tif (parameterList!=null && parameterList.findParameter(PARAMETER_CONTENTS2) != null && parameterList.findParameter(PARAMETER_CONTENTS1) == null) {\n \t\t\tConfigurationWarnings.add(owner, log, \"parameter [\"+PARAMETER_CONTENTS2+\"] has been replaced with [\"+PARAMETER_CONTENTS1+\"]\");\n \t\t\tparameterList.findParameter(PARAMETER_CONTENTS2).setName(PARAMETER_CONTENTS1);\n \t\t}\n-\t\t\n-\t\t//Check if necessarily parameters are available\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_WRITE1, PARAMETER_CONTENTS1, PARAMETER_FILENAME, \"filename\", getFilename());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_MOVE,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_COPY,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_RENAME, PARAMETER_DESTINATION, null, \"destination\", getDestination());\n-\t\t\n+\n+\t\tif (StringUtils.isNotEmpty(getAction())) {\n+\t\t\tcheckConfiguration(getAction());\n+\t\t} else if (parameterList == null || parameterList.findParameter(PARAMETER_ACTION) == null) {\n+\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");", "originalCommit": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9606ab135987fd89a1b945eaf0345624276cb98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex d65f592f3..718c9b06e 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -155,7 +155,7 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t\tif (StringUtils.isNotEmpty(getAction())) {\n \t\t\tcheckConfiguration(getAction());\n \t\t} else if (parameterList == null || parameterList.findParameter(PARAMETER_ACTION) == null) {\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");\n+\t\t\tthrow new ConfigurationException(ClassUtils.nameOf(owner)+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");\n \t\t}\n \n \t\tif (StringUtils.isNotEmpty(getInputFolder()) && parameterList!=null && parameterList.findParameter(PARAMETER_INPUTFOLDER) != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MTEwMw==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r529741103", "bodyText": "niet owner.getClass().getSimpleName() maar ClassUtils.nameOf(...)", "author": "nielsm5", "createdAt": "2020-11-24T17:11:18Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -186,17 +175,36 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void checkConfiguration(String action) throws ConfigurationException {\n+\t\tif (!actions.contains(action))\n+\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + action + \"] supported actions are \" + actions.toString() + \"\");", "originalCommit": "29217fc00ae9e3478753aa8dd6c67e94515afd3e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9606ab135987fd89a1b945eaf0345624276cb98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex d65f592f3..718c9b06e 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -178,7 +178,7 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \n \tprivate void checkConfiguration(String action) throws ConfigurationException {\n \t\tif (!actions.contains(action))\n-\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + action + \"] supported actions are \" + actions.toString() + \"\");\n+\t\t\tthrow new ConfigurationException(ClassUtils.nameOf(owner)+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + action + \"] supported actions are \" + actions.toString() + \"\");\n \n \t\tif (action.equals(ACTION_READ2)) {\n \t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1NTI0Mg==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r530455242", "bodyText": "This part must be at configure(), to support legacy action names. We do not want/need to support those names for dynamic actions, and therefore the code can be moved back to configure(). It cannot stay here, because it sets the action via setAction().", "author": "gvanbrakel", "createdAt": "2020-11-25T15:25:01Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -186,28 +175,47 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void checkConfiguration(String action) throws ConfigurationException {\n+\t\tif (!actions.contains(action))\n+\t\t\tthrow new ConfigurationException(ClassUtils.nameOf(owner)+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + action + \"] supported actions are \" + actions.toString() + \"\");\n+\n+\t\tif (action.equals(ACTION_READ2)) {\n+\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n+\t\t\tsetAction(ACTION_READ1);\n+\t\t}\n+\t\tif (action.equals(ACTION_WRITE2)) {\n+\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n+\t\t\tsetAction(ACTION_WRITE1);\n+\t\t}", "originalCommit": "b9606ab135987fd89a1b945eaf0345624276cb98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "234e9ddec4d9c8564ed0a14a1ba9698ad660426a", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex 718c9b06e..24f9a43af 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -180,15 +189,6 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t\tif (!actions.contains(action))\n \t\t\tthrow new ConfigurationException(ClassUtils.nameOf(owner)+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + action + \"] supported actions are \" + actions.toString() + \"\");\n \n-\t\tif (action.equals(ACTION_READ2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n-\t\t\tsetAction(ACTION_READ1);\n-\t\t}\n-\t\tif (action.equals(ACTION_WRITE2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n-\t\t\tsetAction(ACTION_WRITE1);\n-\t\t}\n-\n \t\t//Check if necessary parameters are available\n \t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, action, ACTION_WRITE1, PARAMETER_CONTENTS1, PARAMETER_FILENAME, \"filename\", getFilename());\n \t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, action, ACTION_MOVE,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n"}}, {"oid": "234e9ddec4d9c8564ed0a14a1ba9698ad660426a", "url": "https://github.com/ibissource/iaf/commit/234e9ddec4d9c8564ed0a14a1ba9698ad660426a", "message": "overwrite legacy actions in configure", "committedDate": "2020-11-25T15:57:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ4ODMyNQ==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r530488325", "bodyText": "Sorry to bother you again, but this part needs to be before the call to checkConfiguration(), e.g. at line 154, as it could modify the action.", "author": "gvanbrakel", "createdAt": "2020-11-25T16:10:11Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java", "diffHunk": "@@ -158,25 +166,15 @@ public void configure(FS fileSystem, ParameterList parameterList, INamedObject o\n \t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n \t\t\tsetAction(ACTION_WRITE1);\n \t\t}", "originalCommit": "234e9ddec4d9c8564ed0a14a1ba9698ad660426a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99fd24a3908efd4279b032e3c504681a0590f629", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\nindex 24f9a43af..80ee88199 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java\n\n@@ -153,20 +153,19 @@ public class FileSystemActor<F, FS extends IBasicFileSystem<F>> implements IOutp\n \t\t}\n \n \t\tif (StringUtils.isNotEmpty(getAction())) {\n+\t\t\tif (getAction().equals(ACTION_READ2)) {\n+\t\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n+\t\t\t\tsetAction(ACTION_READ1);\n+\t\t\t}\n+\t\t\tif (getAction().equals(ACTION_WRITE2)) {\n+\t\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n+\t\t\t\tsetAction(ACTION_WRITE1);\n+\t\t\t}\n \t\t\tcheckConfiguration(getAction());\n \t\t} else if (parameterList == null || parameterList.findParameter(PARAMETER_ACTION) == null) {\n \t\t\tthrow new ConfigurationException(ClassUtils.nameOf(owner)+\" [\"+owner.getName()+\"]: either attribute [action] or parameter [\"+PARAMETER_ACTION+\"] must be specified\");\n \t\t}\n \n-\t\tif (getAction().equals(ACTION_READ2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n-\t\t\tsetAction(ACTION_READ1);\n-\t\t}\n-\t\tif (getAction().equals(ACTION_WRITE2)) {\n-\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n-\t\t\tsetAction(ACTION_WRITE1);\n-\t\t}\n-\n \t\tif (StringUtils.isNotEmpty(getInputFolder()) && parameterList!=null && parameterList.findParameter(PARAMETER_INPUTFOLDER) != null) {\n \t\t\tConfigurationWarnings.add(owner, log, \"inputFolder configured via attribute [inputFolder] as well as via parameter [\"+PARAMETER_INPUTFOLDER+\"], parameter will be ignored\");\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5MTM3Mw==", "url": "https://github.com/ibissource/iaf/pull/1280#discussion_r530491373", "bodyText": "Please add two more tests:\n\nto show that when the value of the parameter is empty, the configured action is taken as a default\nto show when both attribute and parameter action are set and valid, then the value of the parameter is used.", "author": "gvanbrakel", "createdAt": "2020-11-25T16:14:40Z", "path": "core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemActorTest.java", "diffHunk": "@@ -82,11 +82,36 @@ public void fileSystemActorTestConfigureBasic() throws Exception {\n \n \t@Test\n \tpublic void fileSystemActorTestConfigureNoAction() throws Exception {\n-\t\tthrown.expectMessage(\"action must be specified\");\n+\t\tthrown.expectMessage(\"either attribute [action] or parameter [action] must be specified\");\n \t\tthrown.expectMessage(\"fake owner of FileSystemActor\");\n \t\tactor.configure(fileSystem,null,owner);\n \t}\n \n+\t@Test\n+\tpublic void fileSystemActorEmptyParameterAction() throws Exception {\n+\t\tthrown.expectMessage(\"unable to resolve the value of parameter\");", "originalCommit": "234e9ddec4d9c8564ed0a14a1ba9698ad660426a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99fd24a3908efd4279b032e3c504681a0590f629", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemActorTest.java b/core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemActorTest.java\nindex 413e2cc4f..a64390486 100644\n--- a/core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemActorTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemActorTest.java\n\n@@ -112,6 +112,65 @@ public abstract class FileSystemActorTest<F, FS extends IWritableFileSystem<F>>\n \t\tactor.doAction(message, pvl, session);\n \t}\n \n+\t@Test\n+\tpublic void fileSystemActorEmptyParameterActionWillBeOverridenByConfiguredAction() throws Exception {\n+\t\tString filename = \"overwriteEmptyParameter\" + FILE1;\n+\t\tString contents = \"Tekst om te lezen\";\n+\n+\t\tcreateFile(null, filename, contents);\n+\t\twaitForActionToFinish();\n+\n+\t\tParameterList params = new ParameterList();\n+\t\tParameter p = new Parameter();\n+\t\tp.setName(\"action\");\n+\t\tp.setValue(null);\n+\t\tparams.add(p);\n+\t\tparams.configure();\n+\t\tactor.setAction(\"read\");\n+\t\tactor.configure(fileSystem,params,owner);\n+\t\tactor.open();\n+\n+\t\tMessage message= new Message(filename);\n+\t\tParameterValueList pvl = params.getValues(null, session);\n+\n+\t\tObject result = actor.doAction(message, pvl, session);\n+\t\tassertThat(result, IsInstanceOf.instanceOf(InputStream.class));\n+\t\tString actualContents = Misc.streamToString((InputStream)result);\n+\t\tassertEquals(contents, actualContents);\n+\t}\n+\n+\t@Test\n+\tpublic void fileSystemActorParameterActionAndAttributeActionConfigured() throws Exception {\n+\t\tString filename = \"actionParamAndAttr\" + FILE1;\n+\t\tString contents = \"Text to read\";\n+\n+\t\tcreateFile(null, filename, contents);\n+\t\twaitForActionToFinish();\n+\n+\t\tParameterList params = new ParameterList();\n+\t\tParameter pAction = new Parameter();\n+\t\tpAction.setName(\"action\");\n+\t\tpAction.setValue(\"read\");\n+\t\tparams.add(pAction);\n+\t\tParameter pFilename = new Parameter();\n+\t\tpFilename.setName(\"filename\");\n+\t\tpFilename.setValue(filename);\n+\t\tparams.add(pFilename);\n+\t\tparams.configure();\n+\n+\t\tactor.setAction(\"write\");\n+\t\tactor.configure(fileSystem,params,owner);\n+\t\tactor.open();\n+\n+\t\tMessage message= new Message(filename);\n+\t\tParameterValueList pvl = params.getValues(null, session);\n+\n+\t\tObject result = actor.doAction(message, pvl, session);\n+\t\tassertThat(result, IsInstanceOf.instanceOf(InputStream.class));\n+\t\tString actualContents = Misc.streamToString((InputStream)result);\n+\t\tassertEquals(contents, actualContents);\n+\t}\n+\n \t@Test\n \tpublic void fileSystemActorTestConfigureInvalidAction() throws Exception {\n \t\tthrown.expectMessage(\"unknown or invalid action [xxx]\");\n"}}, {"oid": "99fd24a3908efd4279b032e3c504681a0590f629", "url": "https://github.com/ibissource/iaf/commit/99fd24a3908efd4279b032e3c504681a0590f629", "message": "more tests", "committedDate": "2020-11-26T10:40:48Z", "type": "commit"}, {"oid": "cebdbcdad873a1ac28e6d3532882e778fdd9574c", "url": "https://github.com/ibissource/iaf/commit/cebdbcdad873a1ac28e6d3532882e778fdd9574c", "message": "cosmetic move, to reduce the amount of changes", "committedDate": "2020-11-26T11:05:35Z", "type": "commit"}, {"oid": "ca8feb29da30039f83d816a7fe5f8f856cee5d4c", "url": "https://github.com/ibissource/iaf/commit/ca8feb29da30039f83d816a7fe5f8f856cee5d4c", "message": "rename legacy parameter before checking the requirements", "committedDate": "2020-11-26T11:45:27Z", "type": "commit"}]}