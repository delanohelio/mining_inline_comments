{"pr_number": 981, "pr_title": "Filename comparator test", "pr_createdAt": "2020-08-06T11:46:23Z", "pr_url": "https://github.com/ibissource/iaf/pull/981", "timeline": [{"oid": "f923a6756882aa8f22776ce84ff8532c8bc9dcfb", "url": "https://github.com/ibissource/iaf/commit/f923a6756882aa8f22776ce84ff8532c8bc9dcfb", "message": "[maven-release-plugin] prepare release v7.5-RC1", "committedDate": "2020-02-18T13:56:47Z", "type": "commit"}, {"oid": "bab86966e83621208227871eafc4504bdc6d2d21", "url": "https://github.com/ibissource/iaf/commit/bab86966e83621208227871eafc4504bdc6d2d21", "message": "[maven-release-plugin] prepare for next development iteration", "committedDate": "2020-02-18T13:56:48Z", "type": "commit"}, {"oid": "331ffb127fa2c18b59892b4d9de013b87ae57f6c", "url": "https://github.com/ibissource/iaf/commit/331ffb127fa2c18b59892b4d9de013b87ae57f6c", "message": "Update releases.md", "committedDate": "2020-02-18T15:44:41Z", "type": "commit"}, {"oid": "ef4d497de45dc4bd07cbd86d9547167a37db93e2", "url": "https://github.com/ibissource/iaf/commit/ef4d497de45dc4bd07cbd86d9547167a37db93e2", "message": "Fix for #426: null sender result throws NPE in MessageSendingPipe (#431)", "committedDate": "2020-02-19T11:10:42Z", "type": "commit"}, {"oid": "39a54bd2ea32632918c676d60c0c66669c1b1e3d", "url": "https://github.com/ibissource/iaf/commit/39a54bd2ea32632918c676d60c0c66669c1b1e3d", "message": "Fix version dependency in iaf-test (#430)", "committedDate": "2020-02-19T11:11:44Z", "type": "commit"}, {"oid": "2b7842eb9f04547575f7d222233ff8e222ea67f9", "url": "https://github.com/ibissource/iaf/commit/2b7842eb9f04547575f7d222233ff8e222ea67f9", "message": "Fix for #425: Nested stacktrace ends at ForEachChildElementPipe (#429)", "committedDate": "2020-02-19T11:57:40Z", "type": "commit"}, {"oid": "e9a3ed66855c3030e7b3e5bc00e1b83117205984", "url": "https://github.com/ibissource/iaf/commit/e9a3ed66855c3030e7b3e5bc00e1b83117205984", "message": "Make sure the proper SpringBus is passed through to the IbisContext #445 (#446)", "committedDate": "2020-02-21T13:27:26Z", "type": "commit"}, {"oid": "0c022e55e45569932581e0fb37ac823d01d42c28", "url": "https://github.com/ibissource/iaf/commit/0c022e55e45569932581e0fb37ac823d01d42c28", "message": "Add timeout to window reload", "committedDate": "2020-03-02T11:04:38Z", "type": "commit"}, {"oid": "c8d68ed98409cf3c5285d5e1a32c105e99cf2f80", "url": "https://github.com/ibissource/iaf/commit/c8d68ed98409cf3c5285d5e1a32c105e99cf2f80", "message": "Add confirm when removing schedules", "committedDate": "2020-03-02T11:05:22Z", "type": "commit"}, {"oid": "195654e097893ac580592a1f882d4d1ed586af0c", "url": "https://github.com/ibissource/iaf/commit/195654e097893ac580592a1f882d4d1ed586af0c", "message": "Move menu expand button", "committedDate": "2020-03-02T15:12:45Z", "type": "commit"}, {"oid": "fc409974d2461da5609e24ebaad1696bd07a1b1a", "url": "https://github.com/ibissource/iaf/commit/fc409974d2461da5609e24ebaad1696bd07a1b1a", "message": "Fix security role bindings not being displayed", "committedDate": "2020-03-02T16:26:47Z", "type": "commit"}, {"oid": "278971105b5d310a0512c036984be0d92ce7df18", "url": "https://github.com/ibissource/iaf/commit/278971105b5d310a0512c036984be0d92ce7df18", "message": "Make sure menu item and breadcrum are consistent #448", "committedDate": "2020-03-02T17:07:09Z", "type": "commit"}, {"oid": "8e64a6b4ee0da568939e053aa1ad66765c22c361", "url": "https://github.com/ibissource/iaf/commit/8e64a6b4ee0da568939e053aa1ad66765c22c361", "message": "Add ladda and log full stacktrace #450", "committedDate": "2020-03-03T10:14:44Z", "type": "commit"}, {"oid": "6616ff4d8e841cb50169f430ae4b3a2deb0a4c70", "url": "https://github.com/ibissource/iaf/commit/6616ff4d8e841cb50169f430ae4b3a2deb0a4c70", "message": "Remove formatted strings in IAF API #443", "committedDate": "2020-03-03T13:31:04Z", "type": "commit"}, {"oid": "84511677e42dd9b55c1600f32d043c4f168db027", "url": "https://github.com/ibissource/iaf/commit/84511677e42dd9b55c1600f32d043c4f168db027", "message": "added test classes for some pipes", "committedDate": "2020-03-05T12:11:16Z", "type": "commit"}, {"oid": "c48ca4a5ea942bb81e4f0b1591de1452fed56131", "url": "https://github.com/ibissource/iaf/commit/c48ca4a5ea942bb81e4f0b1591de1452fed56131", "message": "added ReplacerPipe\n\nadded with full coverage, however I still need to add one case which does replace non xml characters and unicode supplementary characters", "committedDate": "2020-03-05T14:54:47Z", "type": "commit"}, {"oid": "0e47da865d46fdab0bdf7af05930f0357858aee4", "url": "https://github.com/ibissource/iaf/commit/0e47da865d46fdab0bdf7af05930f0357858aee4", "message": "created uploadFilePipe\n\ncreated a template of createFilePipe", "committedDate": "2020-03-05T15:48:51Z", "type": "commit"}, {"oid": "58dfe76044a5ad630333d60a4dbf2cbe6f0ce436", "url": "https://github.com/ibissource/iaf/commit/58dfe76044a5ad630333d60a4dbf2cbe6f0ce436", "message": "added Text2XMLPipeTest\n\n%90 coverage, one fix or improvement can be to find a way to throw an io exception. i couldnt think of a case where the program throws an io exception", "committedDate": "2020-03-06T09:51:32Z", "type": "commit"}, {"oid": "ccb78d47aafa2121fc9285637cbc3db3fa11a373", "url": "https://github.com/ibissource/iaf/commit/ccb78d47aafa2121fc9285637cbc3db3fa11a373", "message": "added UploadFilePipe\n\nWith full coverage. I think the class name should be changed to UploadZipFilePipe though, as it only supports zip files", "committedDate": "2020-03-06T13:15:00Z", "type": "commit"}, {"oid": "3ab68449d3f5d45dd9d194827900c5ec49269de4", "url": "https://github.com/ibissource/iaf/commit/3ab68449d3f5d45dd9d194827900c5ec49269de4", "message": "quick fix on replaceFilePipe", "committedDate": "2020-03-06T13:19:00Z", "type": "commit"}, {"oid": "ae9ddaf1ed238abbdf92d279380663b57b5f0433", "url": "https://github.com/ibissource/iaf/commit/ae9ddaf1ed238abbdf92d279380663b57b5f0433", "message": "ReplaceFilePipe back to original version\n\nI had to change the method access modifier to public to test out one method to understand how it works, now it is back to its normal version", "committedDate": "2020-03-06T13:20:27Z", "type": "commit"}, {"oid": "d8c48548dfe15dac4ca6732937760e1cea54fd05", "url": "https://github.com/ibissource/iaf/commit/d8c48548dfe15dac4ca6732937760e1cea54fd05", "message": "remove redundant tests", "committedDate": "2020-03-06T13:25:59Z", "type": "commit"}, {"oid": "9538cd22b2405d308b4e744f65c212e45a2030d4", "url": "https://github.com/ibissource/iaf/commit/9538cd22b2405d308b4e744f65c212e45a2030d4", "message": "Delete IsUserInRolePipeTest\n\ndeleted as I couldn't figure out a way yet to modify the roles, will look  further in this class after I finish the tests of other classes", "committedDate": "2020-03-06T15:04:22Z", "type": "commit"}, {"oid": "268252a731237942cca83ebcad1f6be8600f8748", "url": "https://github.com/ibissource/iaf/commit/268252a731237942cca83ebcad1f6be8600f8748", "message": "add 2 complete test classes\n\nadded 2 complete classes and several incomplete classes that I will try to finish up this afternoon", "committedDate": "2020-03-12T11:06:00Z", "type": "commit"}, {"oid": "e92d47a98de655edb213867df56752962bda5403", "url": "https://github.com/ibissource/iaf/commit/e92d47a98de655edb213867df56752962bda5403", "message": "Add test classes for pipes\n\nNearly all pipe classes are tested now with a few important exceptions like MessageSendingPipe.", "committedDate": "2020-04-10T13:23:17Z", "type": "commit"}, {"oid": "d7365adaa0ae74b11b35eb3b789eaf2fab0e083b", "url": "https://github.com/ibissource/iaf/commit/d7365adaa0ae74b11b35eb3b789eaf2fab0e083b", "message": "Merge pull request #1 from ibissource/master\n\nsyncing the main and forked repository", "committedDate": "2020-04-16T14:21:07Z", "type": "commit"}, {"oid": "f0f7abc29f07b60a70107559f9be6678936bc704", "url": "https://github.com/ibissource/iaf/commit/f0f7abc29f07b60a70107559f9be6678936bc704", "message": "Merge branch 'PipeTest' into master", "committedDate": "2020-04-16T14:33:55Z", "type": "commit"}, {"oid": "c021e57eba2fdb46ec1920bc24df86c7b0df5f31", "url": "https://github.com/ibissource/iaf/commit/c021e57eba2fdb46ec1920bc24df86c7b0df5f31", "message": "Merge pull request #2 from sinasen2000/master\n\nmerge master into pipetest branch to sync the pipe test with the main master", "committedDate": "2020-04-16T14:34:12Z", "type": "commit"}, {"oid": "99e183c1f21ecabb868caf854178a8adfd12cf45", "url": "https://github.com/ibissource/iaf/commit/99e183c1f21ecabb868caf854178a8adfd12cf45", "message": "refactor test files for syncing\n\nRefactored the test files for pipes with to have them in sync with the master. \nRemoved some test classes whose classes are deprecated.", "committedDate": "2020-04-17T12:17:49Z", "type": "commit"}, {"oid": "4c042d8aac2209b129108ef6fd4b8ef1a109ba7d", "url": "https://github.com/ibissource/iaf/commit/4c042d8aac2209b129108ef6fd4b8ef1a109ba7d", "message": "refactor code for code quality\n\nrefactored the code for improving the code quality.\ndeleted classes which are vaguely tested, will have to retest those.", "committedDate": "2020-04-17T13:06:23Z", "type": "commit"}, {"oid": "ef437faad8857f5a797d3b2f8ba7b58256346ed4", "url": "https://github.com/ibissource/iaf/commit/ef437faad8857f5a797d3b2f8ba7b58256346ed4", "message": "resolve build error", "committedDate": "2020-04-17T13:25:26Z", "type": "commit"}, {"oid": "ceeee7d7db13df6657ea0b7f5a26a6eb814e749f", "url": "https://github.com/ibissource/iaf/commit/ceeee7d7db13df6657ea0b7f5a26a6eb814e749f", "message": "fix test that blocks the build", "committedDate": "2020-04-17T13:40:50Z", "type": "commit"}, {"oid": "3af2dc43c7d8aed9decf8931a269b8a0a05a513d", "url": "https://github.com/ibissource/iaf/commit/3af2dc43c7d8aed9decf8931a269b8a0a05a513d", "message": "fix build", "committedDate": "2020-04-17T13:44:41Z", "type": "commit"}, {"oid": "7c2a1d2f4fe5fcb8b58bd707dc588d8f5b6a7b8f", "url": "https://github.com/ibissource/iaf/commit/7c2a1d2f4fe5fcb8b58bd707dc588d8f5b6a7b8f", "message": "add util test classes", "committedDate": "2020-05-13T18:56:33Z", "type": "commit"}, {"oid": "6f5c6a4b05855c8114f6ec297a53aa10bdc77334", "url": "https://github.com/ibissource/iaf/commit/6f5c6a4b05855c8114f6ec297a53aa10bdc77334", "message": "fix conflicts", "committedDate": "2020-05-13T19:10:53Z", "type": "commit"}, {"oid": "d6a910f179fa3b260c13353e219fca74b2ef41fc", "url": "https://github.com/ibissource/iaf/commit/d6a910f179fa3b260c13353e219fca74b2ef41fc", "message": "fix conflicts", "committedDate": "2020-05-14T08:20:24Z", "type": "commit"}, {"oid": "058578c56239c809a521f6a273c6285c60ef86d9", "url": "https://github.com/ibissource/iaf/commit/058578c56239c809a521f6a273c6285c60ef86d9", "message": "Merge pull request #9 from ibissource/master\n\nsync forked master", "committedDate": "2020-05-27T13:28:51Z", "type": "commit"}, {"oid": "a1934c9e2a363052602477ec6bae87b69637185a", "url": "https://github.com/ibissource/iaf/commit/a1934c9e2a363052602477ec6bae87b69637185a", "message": "Merge branch 'ibissource-master' into forked-master", "committedDate": "2020-06-17T11:54:30Z", "type": "commit"}, {"oid": "3d969aa37da3f78cd40f7912fe6369cd0a47502e", "url": "https://github.com/ibissource/iaf/commit/3d969aa37da3f78cd40f7912fe6369cd0a47502e", "message": "Resolve conflicts", "committedDate": "2020-07-29T13:33:06Z", "type": "commit"}, {"oid": "92fab827e3ed32cb548600236a1ad475722c1abc", "url": "https://github.com/ibissource/iaf/commit/92fab827e3ed32cb548600236a1ad475722c1abc", "message": "Sync forked master", "committedDate": "2020-07-29T13:38:44Z", "type": "commit"}, {"oid": "0164d7adbc9d8d51f38cde6b5549f4bd4b1fbf34", "url": "https://github.com/ibissource/iaf/commit/0164d7adbc9d8d51f38cde6b5549f4bd4b1fbf34", "message": "Sync forked master", "committedDate": "2020-07-29T13:38:55Z", "type": "commit"}, {"oid": "8860af2424696443769604221d712c81f62d2c82", "url": "https://github.com/ibissource/iaf/commit/8860af2424696443769604221d712c81f62d2c82", "message": "Sync forked master", "committedDate": "2020-07-29T13:42:30Z", "type": "commit"}, {"oid": "768d86a827de6b41a7f0e94fc88b91fe54ea6f14", "url": "https://github.com/ibissource/iaf/commit/768d86a827de6b41a7f0e94fc88b91fe54ea6f14", "message": "Sync fork", "committedDate": "2020-07-29T13:44:56Z", "type": "commit"}, {"oid": "5a6ae07e30b9c324a937dd6bd129f960e305805a", "url": "https://github.com/ibissource/iaf/commit/5a6ae07e30b9c324a937dd6bd129f960e305805a", "message": "Sync fork", "committedDate": "2020-07-29T13:45:57Z", "type": "commit"}, {"oid": "931fa54ef73670468b578983c28d49bc89997c37", "url": "https://github.com/ibissource/iaf/commit/931fa54ef73670468b578983c28d49bc89997c37", "message": "Finish test class", "committedDate": "2020-08-06T11:43:42Z", "type": "commit"}, {"oid": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4", "url": "https://github.com/ibissource/iaf/commit/459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4", "message": "Update FileName comparator test cases", "committedDate": "2020-08-28T10:24:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNDY0OQ==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r481134649", "bodyText": "Instead of giving exact values, perhaps you can use\n ... == 0, ... < 0 and ... > 0 instead.", "author": "nielsm5", "createdAt": "2020-09-01T13:24:55Z", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNextIndex(String s, int start, boolean numericPart)\n+\t */\n+\t@Test\n+\tpublic void testGetNextIndex() throws Exception {\n+\t\tint i = FileNameComparator.getNextIndex(\"test.txt\", 0, true);\n+\t\tint j = FileNameComparator.getNextIndex(\"test.txt\", 0, false);\n+\t\tassertEquals(0, i);\n+\t\tassertEquals(8, j);\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s3 = \"file1.txt\";\n+\t\tString s4 = \"File2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint b = FileNameComparator.compareStringsNaturalOrder(s1, s3, true);\n+\t\tint c = FileNameComparator.compareStringsNaturalOrder(s2, s3, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, true);\n+\t\tassertEquals(32, a);\n+\t\tassertEquals(0, b);\n+\t\tassertEquals(-32, c);\n+\t\tassertEquals(0, d);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertEquals(-13, i);\n+\t\tassertEquals(0, j);\n+\t\tassertEquals(32, k);\n+\t\tassertEquals(13, l);", "originalCommit": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "131233a74bfc5c5a5f1eebfc7727627375b15476", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\nindex b643cadcd..1f75f1217 100644\n--- a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n\n@@ -9,6 +9,7 @@ import java.util.Comparator;\n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  * FileNameComparator Tester.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNzYyMw==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r481137623", "bodyText": "This test looks a lot like the test underneath, perhaps here you can test the 3rd argument of the compareStringsNaturalOrder method instead (case sensitivity)", "author": "nielsm5", "createdAt": "2020-09-01T13:29:22Z", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNextIndex(String s, int start, boolean numericPart)\n+\t */\n+\t@Test\n+\tpublic void testGetNextIndex() throws Exception {\n+\t\tint i = FileNameComparator.getNextIndex(\"test.txt\", 0, true);\n+\t\tint j = FileNameComparator.getNextIndex(\"test.txt\", 0, false);\n+\t\tassertEquals(0, i);\n+\t\tassertEquals(8, j);\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s3 = \"file1.txt\";\n+\t\tString s4 = \"File2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint b = FileNameComparator.compareStringsNaturalOrder(s1, s3, true);\n+\t\tint c = FileNameComparator.compareStringsNaturalOrder(s2, s3, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, true);\n+\t\tassertEquals(32, a);\n+\t\tassertEquals(0, b);\n+\t\tassertEquals(-32, c);\n+\t\tassertEquals(0, d);\n+\t}", "originalCommit": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "131233a74bfc5c5a5f1eebfc7727627375b15476", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\nindex b643cadcd..1f75f1217 100644\n--- a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n\n@@ -9,6 +9,7 @@ import java.util.Comparator;\n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  * FileNameComparator Tester.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0MzIyOQ==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r481143229", "bodyText": "This is an edge case. In a filesystem it's not possible to have 2 files with the same name. Use test.txt twice theoretically cannot happen. Also don't test for an exact integer, but rather something equal, higher or lower then 0.", "author": "nielsm5", "createdAt": "2020-09-01T13:37:17Z", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNextIndex(String s, int start, boolean numericPart)\n+\t */\n+\t@Test\n+\tpublic void testGetNextIndex() throws Exception {\n+\t\tint i = FileNameComparator.getNextIndex(\"test.txt\", 0, true);\n+\t\tint j = FileNameComparator.getNextIndex(\"test.txt\", 0, false);\n+\t\tassertEquals(0, i);\n+\t\tassertEquals(8, j);\n+\t}", "originalCommit": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "131233a74bfc5c5a5f1eebfc7727627375b15476", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\nindex b643cadcd..1f75f1217 100644\n--- a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n\n@@ -9,6 +9,7 @@ import java.util.Comparator;\n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  * FileNameComparator Tester.\n"}}, {"oid": "131233a74bfc5c5a5f1eebfc7727627375b15476", "url": "https://github.com/ibissource/iaf/commit/131233a74bfc5c5a5f1eebfc7727627375b15476", "message": "Edit pr", "committedDate": "2020-09-03T07:40:44Z", "type": "commit"}, {"oid": "7defce1a7751e1e0f23b38c9442ed1092b423600", "url": "https://github.com/ibissource/iaf/commit/7defce1a7751e1e0f23b38c9442ed1092b423600", "message": "Improve code quality", "committedDate": "2020-09-03T07:46:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTcyNw==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r484431727", "bodyText": "Please put each of these test on a single line, like:\nassertTrue(FileNameComparator.compareFilenames(f1, f2) < 0);\n\n(also for other similar cases)", "author": "gvanbrakel", "createdAt": "2020-09-07T13:27:38Z", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);", "originalCommit": "7defce1a7751e1e0f23b38c9442ed1092b423600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxNjY0MQ==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r486216641", "bodyText": "thank you, changing right now!", "author": "sinasen2000", "createdAt": "2020-09-10T10:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "9cf649573c6446cfa3e4e8ad1c9658a06a4f68f7", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\nindex ac3eee436..3b7594bd9 100644\n--- a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n\n@@ -49,10 +49,8 @@ public class FileNameComparatorTest {\n \t\tString s1 = \"file1.txt\";\n \t\tString s2 = \"File2.txt\";\n \t\tString s4 = \"file2.txt\";\n-\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n-\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n-\t\tassertTrue(a > 0);\n-\t\tassertTrue(d == 0);\n+\t\tassertTrue(FileNameComparator.compareStringsNaturalOrder(s1, s2, true) > 0);\n+\t\tassertTrue(FileNameComparator.compareStringsNaturalOrder(s2, s4, false) == 0);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjQ2NQ==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r484432465", "bodyText": "Can you also add test for file names that end with a number? ibis_xml.log.1  ibis_xml.log.2 etc\nthose should also be sorted properly.\nAlso the ibis-stats_2020W31.log files?", "author": "nielsm5", "createdAt": "2020-09-07T13:29:05Z", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);\n+\t}\n+", "originalCommit": "7defce1a7751e1e0f23b38c9442ed1092b423600", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjgxNQ==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r484432815", "bodyText": "And also compare filename4.txt to filename13.txt", "author": "gvanbrakel", "createdAt": "2020-09-07T13:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0Njc4MQ==", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r486246781", "bodyText": "Added both, adding some more interesting cases as well.", "author": "sinasen2000", "createdAt": "2020-09-10T10:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjQ2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cf649573c6446cfa3e4e8ad1c9658a06a4f68f7", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\nindex ac3eee436..3b7594bd9 100644\n--- a/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java\n\n@@ -49,10 +49,8 @@ public class FileNameComparatorTest {\n \t\tString s1 = \"file1.txt\";\n \t\tString s2 = \"File2.txt\";\n \t\tString s4 = \"file2.txt\";\n-\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n-\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n-\t\tassertTrue(a > 0);\n-\t\tassertTrue(d == 0);\n+\t\tassertTrue(FileNameComparator.compareStringsNaturalOrder(s1, s2, true) > 0);\n+\t\tassertTrue(FileNameComparator.compareStringsNaturalOrder(s2, s4, false) == 0);\n \t}\n \n \t/**\n"}}, {"oid": "9cf649573c6446cfa3e4e8ad1c9658a06a4f68f7", "url": "https://github.com/ibissource/iaf/commit/9cf649573c6446cfa3e4e8ad1c9658a06a4f68f7", "message": "Add new test cases", "committedDate": "2020-09-10T10:50:53Z", "type": "commit"}, {"oid": "056817ec9202d2c81c9f8557970bc64d41b33c16", "url": "https://github.com/ibissource/iaf/commit/056817ec9202d2c81c9f8557970bc64d41b33c16", "message": "Finalize test class", "committedDate": "2020-09-10T14:07:19Z", "type": "commit"}]}