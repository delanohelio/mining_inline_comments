{"pr_number": 367, "pr_title": "Pgp pipes", "pr_createdAt": "2020-01-17T10:45:04Z", "pr_url": "https://github.com/ibissource/iaf/pull/367", "timeline": [{"oid": "0ac4ef7e937818c574cd2020637018f5768c5f73", "url": "https://github.com/ibissource/iaf/commit/0ac4ef7e937818c574cd2020637018f5768c5f73", "message": "Create basic pgp encryption and decryption pipes.", "committedDate": "2020-01-10T13:13:03Z", "type": "commit"}, {"oid": "4ab7e93e3260408fba1e7ee1056ff2ce1d3a462e", "url": "https://github.com/ibissource/iaf/commit/4ab7e93e3260408fba1e7ee1056ff2ce1d3a462e", "message": "Add basic test for pgp encryption.", "committedDate": "2020-01-10T13:16:42Z", "type": "commit"}, {"oid": "5c55371d475d145e522bf7a4a5183a8599d04006", "url": "https://github.com/ibissource/iaf/commit/5c55371d475d145e522bf7a4a5183a8599d04006", "message": "Debug signing.", "committedDate": "2020-01-10T13:17:20Z", "type": "commit"}, {"oid": "0400dfa07415b8beaf4f6237b6200c0c6b3daa56", "url": "https://github.com/ibissource/iaf/commit/0400dfa07415b8beaf4f6237b6200c0c6b3daa56", "message": "Update test suite for pgp testing.", "committedDate": "2020-01-10T16:05:16Z", "type": "commit"}, {"oid": "a5d7520d477d7521703a267a22ed1e372c63c942", "url": "https://github.com/ibissource/iaf/commit/a5d7520d477d7521703a267a22ed1e372c63c942", "message": "Extend implementation to multiple receivers. Also workaround for bug in\nlibrary used.", "committedDate": "2020-01-10T16:14:44Z", "type": "commit"}, {"oid": "9836c320614139175da0cc127019f531a04486c4", "url": "https://github.com/ibissource/iaf/commit/9836c320614139175da0cc127019f531a04486c4", "message": "Add more test cases.", "committedDate": "2020-01-10T16:53:43Z", "type": "commit"}, {"oid": "f8fafb51a9e5050f576b2233d36aa40513c3f9c9", "url": "https://github.com/ibissource/iaf/commit/f8fafb51a9e5050f576b2233d36aa40513c3f9c9", "message": "Solve null pointer problems for pgp pipes.", "committedDate": "2020-01-10T16:53:58Z", "type": "commit"}, {"oid": "4d982fa57cd4b2fd40db8d9a1cbd2ab14baa2d5a", "url": "https://github.com/ibissource/iaf/commit/4d982fa57cd4b2fd40db8d9a1cbd2ab14baa2d5a", "message": "Debug signing and encryption combined.", "committedDate": "2020-01-15T13:12:50Z", "type": "commit"}, {"oid": "f6312ee676cc8514adb1b98936d7a2b6b9996b97", "url": "https://github.com/ibissource/iaf/commit/f6312ee676cc8514adb1b98936d7a2b6b9996b97", "message": "Create a base for pgp encryption.", "committedDate": "2020-01-15T16:00:00Z", "type": "commit"}, {"oid": "7c9e29a8498e82dc71b0b80c59eef10374d4fbdf", "url": "https://github.com/ibissource/iaf/commit/7c9e29a8498e82dc71b0b80c59eef10374d4fbdf", "message": "Combine two different pipes using the pgp base.", "committedDate": "2020-01-15T16:30:39Z", "type": "commit"}, {"oid": "f03ec919316bcf30dc0bf14f0052887a106839b5", "url": "https://github.com/ibissource/iaf/commit/f03ec919316bcf30dc0bf14f0052887a106839b5", "message": "Remove old versions of the pgp pipe.", "committedDate": "2020-01-15T16:31:47Z", "type": "commit"}, {"oid": "8bb6df022e195e86bb86f13f6348cfe95868833b", "url": "https://github.com/ibissource/iaf/commit/8bb6df022e195e86bb86f13f6348cfe95868833b", "message": "Refactor PGP pipe tests.", "committedDate": "2020-01-17T10:12:55Z", "type": "commit"}, {"oid": "d6c7e051f31a56f367738ed9769e62f91c499dea", "url": "https://github.com/ibissource/iaf/commit/d6c7e051f31a56f367738ed9769e62f91c499dea", "message": "Remove sender parameter and add provider to security.", "committedDate": "2020-01-17T10:13:28Z", "type": "commit"}, {"oid": "4f9504d2c209ea23cb0a78e46209939d64802810", "url": "https://github.com/ibissource/iaf/commit/4f9504d2c209ea23cb0a78e46209939d64802810", "message": "Add extra tests.", "committedDate": "2020-01-17T10:37:27Z", "type": "commit"}, {"oid": "56ec16d1d293926c2e85a9c87457bf37f341f560", "url": "https://github.com/ibissource/iaf/commit/56ec16d1d293926c2e85a9c87457bf37f341f560", "message": "Optimize imports.", "committedDate": "2020-01-17T10:39:04Z", "type": "commit"}, {"oid": "6515a1220b0329aead1aa7bf54453696d895aa98", "url": "https://github.com/ibissource/iaf/commit/6515a1220b0329aead1aa7bf54453696d895aa98", "message": "Remove repository from pom.", "committedDate": "2020-01-17T10:42:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MjMwOA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r367982308", "bodyText": "When you nest operations (if/for) and you traverse more then 1 layer deep, it's more readable to use brackets...", "author": "nielsm5", "createdAt": "2020-01-17T15:07:06Z", "path": "core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package nl.nn.adapterframework.pgp;\n+\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import org.apache.commons.io.IOUtils;\n+import org.bouncycastle.openpgp.PGPException;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * This is an abstraction of general pgp actions\n+ * such as encryption, verification, etc.\n+ * to be used for {@link nl.nn.adapterframework.pipes.PGPPipe}\n+ *\n+ * @author Murat Kaan Meral\n+ */\n+public abstract class PGPAction {\n+\n+\tprotected InMemoryKeyring keyringConfig;\n+\tprivate String[] publicKey;\n+\tprivate String secretKey, secretPassword;\n+\n+\t/**\n+\t * A general constructor. It checks if any of the vars are null.\n+\t * @param publicKey Array of path strings that point to public keys.\n+\t * @param secretKey String that contains the path to the secret key.\n+\t * @param secretPassword String that contains the password for the secret key.\n+\t * @param vars Objects that should not be null for the action to be performed.\n+\t * @throws ConfigurationException When any of the given vars is null.\n+\t */\n+\tPGPAction(String[] publicKey, String secretKey, String secretPassword, Object... vars) throws ConfigurationException {\n+\t\tverifyNotNull(vars);\n+\t\tthis.publicKey = publicKey;\n+\t\tthis.secretPassword = secretPassword;\n+\t\tthis.secretKey = secretKey;\n+\t}\n+\n+\t/**\n+\t * Generates a keyring configuration with public keys and the private key.\n+\t * @throws ConfigurationException When the files do not exist, or unexpected PGP exception has occurred.\n+\t */\n+\tpublic void configure() throws ConfigurationException {\n+\t\ttry {\n+\t\t\t// Create configuration\n+\t\t\tKeyringConfigCallback callback = KeyringConfigCallbacks.withUnprotectedKeys();\n+\t\t\tif(secretPassword != null)\n+\t\t\t\tcallback = KeyringConfigCallbacks.withPassword(secretPassword);\n+\n+\t\t\tkeyringConfig = KeyringConfigs.forGpgExportedKeys(callback);\n+\n+\t\t\t// Add public keys\n+\t\t\tif(publicKey != null)\n+\t\t\t\tfor(String s : publicKey)", "originalCommit": "6515a1220b0329aead1aa7bf54453696d895aa98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NjY2NQ==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r369986665", "bodyText": "After you get used to python this feels easier :) but I changed it \ud83d\udc4d", "author": "mkmeral", "createdAt": "2020-01-23T08:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MjMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "99d6fe06d8cc8ff1ec0462677cbfefdc028af9cb", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\nindex f80930324..2d5bd8fe4 100644\n--- a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n+++ b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n\n@@ -23,44 +23,47 @@ import java.io.OutputStream;\n public abstract class PGPAction {\n \n \tprotected InMemoryKeyring keyringConfig;\n-\tprivate String[] publicKey;\n+\tprivate String[] publicKeys;\n \tprivate String secretKey, secretPassword;\n \n \t/**\n \t * A general constructor. It checks if any of the vars are null.\n-\t * @param publicKey Array of path strings that point to public keys.\n-\t * @param secretKey String that contains the path to the secret key.\n+\t *\n+\t * @param publicKey      Array of path strings that point to public keys.\n+\t * @param secretKey      String that contains the path to the secret key.\n \t * @param secretPassword String that contains the password for the secret key.\n-\t * @param vars Objects that should not be null for the action to be performed.\n+\t * @param vars           Objects that should not be null for the action to be performed.\n \t * @throws ConfigurationException When any of the given vars is null.\n \t */\n \tPGPAction(String[] publicKey, String secretKey, String secretPassword, Object... vars) throws ConfigurationException {\n \t\tverifyNotNull(vars);\n-\t\tthis.publicKey = publicKey;\n+\t\tthis.publicKeys = publicKey;\n \t\tthis.secretPassword = secretPassword;\n \t\tthis.secretKey = secretKey;\n \t}\n \n \t/**\n \t * Generates a keyring configuration with public keys and the private key.\n+\t *\n \t * @throws ConfigurationException When the files do not exist, or unexpected PGP exception has occurred.\n \t */\n \tpublic void configure() throws ConfigurationException {\n \t\ttry {\n \t\t\t// Create configuration\n \t\t\tKeyringConfigCallback callback = KeyringConfigCallbacks.withUnprotectedKeys();\n-\t\t\tif(secretPassword != null)\n+\t\t\tif (secretPassword != null)\n \t\t\t\tcallback = KeyringConfigCallbacks.withPassword(secretPassword);\n \n \t\t\tkeyringConfig = KeyringConfigs.forGpgExportedKeys(callback);\n \n \t\t\t// Add public keys\n-\t\t\tif(publicKey != null)\n-\t\t\t\tfor(String s : publicKey)\n+\t\t\tif (publicKeys != null) {\n+\t\t\t\tfor (String s : publicKeys) {\n \t\t\t\t\tkeyringConfig.addPublicKey(IOUtils.toByteArray(new FileInputStream(s)));\n-\n+\t\t\t\t}\n+\t\t\t}\n \t\t\t// Add private key\n-\t\t\tif(secretKey != null )\n+\t\t\tif (secretKey != null)\n \t\t\t\tkeyringConfig.addSecretKey(IOUtils.toByteArray(new FileInputStream(secretKey)));\n \n \t\t} catch (IOException | PGPException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MjkwNA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r367982904", "bodyText": "shouldn't the name be the plural publicKeys?", "author": "nielsm5", "createdAt": "2020-01-17T15:08:23Z", "path": "core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package nl.nn.adapterframework.pgp;\n+\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import org.apache.commons.io.IOUtils;\n+import org.bouncycastle.openpgp.PGPException;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * This is an abstraction of general pgp actions\n+ * such as encryption, verification, etc.\n+ * to be used for {@link nl.nn.adapterframework.pipes.PGPPipe}\n+ *\n+ * @author Murat Kaan Meral\n+ */\n+public abstract class PGPAction {\n+\n+\tprotected InMemoryKeyring keyringConfig;\n+\tprivate String[] publicKey;", "originalCommit": "6515a1220b0329aead1aa7bf54453696d895aa98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NzAyOA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r369987028", "bodyText": "Yeah it should be, also the one in pgp pipe also should be publickeys", "author": "mkmeral", "createdAt": "2020-01-23T08:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4MjkwNA=="}], "type": "inlineReview", "revised_code": {"commit": "99d6fe06d8cc8ff1ec0462677cbfefdc028af9cb", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\nindex f80930324..2d5bd8fe4 100644\n--- a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n+++ b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n\n@@ -23,44 +23,47 @@ import java.io.OutputStream;\n public abstract class PGPAction {\n \n \tprotected InMemoryKeyring keyringConfig;\n-\tprivate String[] publicKey;\n+\tprivate String[] publicKeys;\n \tprivate String secretKey, secretPassword;\n \n \t/**\n \t * A general constructor. It checks if any of the vars are null.\n-\t * @param publicKey Array of path strings that point to public keys.\n-\t * @param secretKey String that contains the path to the secret key.\n+\t *\n+\t * @param publicKey      Array of path strings that point to public keys.\n+\t * @param secretKey      String that contains the path to the secret key.\n \t * @param secretPassword String that contains the password for the secret key.\n-\t * @param vars Objects that should not be null for the action to be performed.\n+\t * @param vars           Objects that should not be null for the action to be performed.\n \t * @throws ConfigurationException When any of the given vars is null.\n \t */\n \tPGPAction(String[] publicKey, String secretKey, String secretPassword, Object... vars) throws ConfigurationException {\n \t\tverifyNotNull(vars);\n-\t\tthis.publicKey = publicKey;\n+\t\tthis.publicKeys = publicKey;\n \t\tthis.secretPassword = secretPassword;\n \t\tthis.secretKey = secretKey;\n \t}\n \n \t/**\n \t * Generates a keyring configuration with public keys and the private key.\n+\t *\n \t * @throws ConfigurationException When the files do not exist, or unexpected PGP exception has occurred.\n \t */\n \tpublic void configure() throws ConfigurationException {\n \t\ttry {\n \t\t\t// Create configuration\n \t\t\tKeyringConfigCallback callback = KeyringConfigCallbacks.withUnprotectedKeys();\n-\t\t\tif(secretPassword != null)\n+\t\t\tif (secretPassword != null)\n \t\t\t\tcallback = KeyringConfigCallbacks.withPassword(secretPassword);\n \n \t\t\tkeyringConfig = KeyringConfigs.forGpgExportedKeys(callback);\n \n \t\t\t// Add public keys\n-\t\t\tif(publicKey != null)\n-\t\t\t\tfor(String s : publicKey)\n+\t\t\tif (publicKeys != null) {\n+\t\t\t\tfor (String s : publicKeys) {\n \t\t\t\t\tkeyringConfig.addPublicKey(IOUtils.toByteArray(new FileInputStream(s)));\n-\n+\t\t\t\t}\n+\t\t\t}\n \t\t\t// Add private key\n-\t\t\tif(secretKey != null )\n+\t\t\tif (secretKey != null)\n \t\t\t\tkeyringConfig.addSecretKey(IOUtils.toByteArray(new FileInputStream(secretKey)));\n \n \t\t} catch (IOException | PGPException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4NTIzNA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r367985234", "bodyText": "I'm afraid the name senders might confuse people... not sure if we should change this to something like verificationAddresses?", "author": "nielsm5", "createdAt": "2020-01-17T15:12:56Z", "path": "core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.pgp.*;\n+import nl.nn.adapterframework.stream.Message;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+\n+import java.io.OutputStream;\n+import java.security.Security;\n+\n+/**\n+ * <p>Performs various PGP (Pretty Good Privacy) actions such as Encrypt, Sign, Decrypt, Verify.</p>\n+ * <p>To use this pipe action parameter has to be set to one of the actions above.</p>\n+ * <p>\n+ * <br/><strong>Encrypt:</strong>\n+ * <p>\n+ * Requires the publicKey to be set to recipients public key,\n+ * and recipients to be set to recipients email addresses.\n+ * </p>\n+ * <p>\n+ * <br/><strong>Sign:</strong>\n+ * <p>\n+ * On top of the requirements for <i>Encrypt</i> action,\n+ * signing requires senders to bet set for user's email;\n+ * and secretKey & secretPassword to be set to private key's path and it's password\n+ * (password is optional, if private key does not have protection).\n+ * </p>\n+ * <p>\n+ * <br/><strong>Decrypt:</strong>\n+ * <p>\n+ * Requires secretKey and secretPassword to bet set to private key's path and it's password.\n+ * Just like signing, password is not required, if private key does not have protection.\n+ * </p>\n+ * <p>\n+ * <br/><strong>Verify:</strong>\n+ * <p>\n+ * On top of the requirements for <i>Decrypt</i> action,\n+ * verification expects list of senders' email's and corresponding public keys.\n+ * However, sender emails does not have to be set, and in that case,\n+ * this pipe will only validate that someone signed the input.\n+ * </p>\n+ * <p>\n+ * <br/>\n+ * <p>\n+ * <strong>Note:</strong> When secret key is required in any of the actions,\n+ * the related public key should also be included in public keys.\n+ * </p>\n+ *\n+ * <p>\n+ * <strong>Note:</strong> For fields that require multiple input\n+ * (such as recipients, senders and publicKey -in certain actions-)\n+ * you can seperate multiple values with \";\" (semicolon).\n+ * </p>\n+ */\n+public class PGPPipe extends FixedForwardPipe {\n+\t/**\n+\t * Action to be taken by pipe.\n+\t * Available Actions:\n+\t * <ul>\n+\t *     <li>Encrypt: Encrypts the given input</li>\n+\t *     <li>Sign: Encrypts and then signs the given input</li>\n+\t *     <li>Decrypt: Decrypts the given input</li>\n+\t *     <li>Verify: Decrypts and verifies the given input</li>\n+\t * </ul>\n+\t */\n+\tprivate String action;\n+\t/**\n+\t * Emails of the recipients\n+\t */\n+\tprivate String[] recipients;\n+\t/**\n+\t * Emails of the senders. This will be used to verify that all the senders have signed the given message.\n+\t * If not set, and the action is verify; this pipe will validate that at least one person has signed.\n+\t *\n+\t * For signing action, it needs to be set to the email that was used to generate the private key\n+\t * that is being used for this process.\n+\t */\n+\tprivate String[] senders;", "originalCommit": "6515a1220b0329aead1aa7bf54453696d895aa98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5Nzg4MQ==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r369997881", "bodyText": "Changed to verificationAddresses.", "author": "mkmeral", "createdAt": "2020-01-23T09:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4NTIzNA=="}], "type": "inlineReview", "revised_code": {"commit": "15189ead3481e2cdad067e17d335145f1bb4f7da", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java b/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java\nindex 2795c592d..da1dc9f96 100644\n--- a/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java\n+++ b/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java\n\n@@ -4,6 +4,7 @@ import nl.nn.adapterframework.configuration.ConfigurationException;\n import nl.nn.adapterframework.core.IPipeLineSession;\n import nl.nn.adapterframework.core.PipeRunException;\n import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.pgp.*;\n import nl.nn.adapterframework.stream.Message;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4Njc0MQ==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r367986741", "bodyText": "Can you add the IbisDoc annotation for all setters, so the ibisdevelopers can see what all these things do?", "author": "nielsm5", "createdAt": "2020-01-17T15:15:45Z", "path": "core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.pgp.*;\n+import nl.nn.adapterframework.stream.Message;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+\n+import java.io.OutputStream;\n+import java.security.Security;\n+\n+/**\n+ * <p>Performs various PGP (Pretty Good Privacy) actions such as Encrypt, Sign, Decrypt, Verify.</p>\n+ * <p>To use this pipe action parameter has to be set to one of the actions above.</p>\n+ * <p>\n+ * <br/><strong>Encrypt:</strong>\n+ * <p>\n+ * Requires the publicKey to be set to recipients public key,\n+ * and recipients to be set to recipients email addresses.\n+ * </p>\n+ * <p>\n+ * <br/><strong>Sign:</strong>\n+ * <p>\n+ * On top of the requirements for <i>Encrypt</i> action,\n+ * signing requires senders to bet set for user's email;\n+ * and secretKey & secretPassword to be set to private key's path and it's password\n+ * (password is optional, if private key does not have protection).\n+ * </p>\n+ * <p>\n+ * <br/><strong>Decrypt:</strong>\n+ * <p>\n+ * Requires secretKey and secretPassword to bet set to private key's path and it's password.\n+ * Just like signing, password is not required, if private key does not have protection.\n+ * </p>\n+ * <p>\n+ * <br/><strong>Verify:</strong>\n+ * <p>\n+ * On top of the requirements for <i>Decrypt</i> action,\n+ * verification expects list of senders' email's and corresponding public keys.\n+ * However, sender emails does not have to be set, and in that case,\n+ * this pipe will only validate that someone signed the input.\n+ * </p>\n+ * <p>\n+ * <br/>\n+ * <p>\n+ * <strong>Note:</strong> When secret key is required in any of the actions,\n+ * the related public key should also be included in public keys.\n+ * </p>\n+ *\n+ * <p>\n+ * <strong>Note:</strong> For fields that require multiple input\n+ * (such as recipients, senders and publicKey -in certain actions-)\n+ * you can seperate multiple values with \";\" (semicolon).\n+ * </p>\n+ */\n+public class PGPPipe extends FixedForwardPipe {\n+\t/**\n+\t * Action to be taken by pipe.\n+\t * Available Actions:\n+\t * <ul>\n+\t *     <li>Encrypt: Encrypts the given input</li>\n+\t *     <li>Sign: Encrypts and then signs the given input</li>\n+\t *     <li>Decrypt: Decrypts the given input</li>\n+\t *     <li>Verify: Decrypts and verifies the given input</li>\n+\t * </ul>\n+\t */\n+\tprivate String action;\n+\t/**\n+\t * Emails of the recipients\n+\t */\n+\tprivate String[] recipients;\n+\t/**\n+\t * Emails of the senders. This will be used to verify that all the senders have signed the given message.\n+\t * If not set, and the action is verify; this pipe will validate that at least one person has signed.\n+\t *\n+\t * For signing action, it needs to be set to the email that was used to generate the private key\n+\t * that is being used for this process.\n+\t */\n+\tprivate String[] senders;\n+\t/**\n+\t * Path to the private key. It will be used when signing or decrypting.\n+\t */\n+\tprivate String secretKey;\n+\t/**\n+\t * Password for the private key.\n+\t */\n+\tprivate String secretPassword;\n+\t/**\n+\t * Path to the recipient's public key. It will be used for encryption.\n+\t */\n+\tprivate String[] publicKey;\n+\n+\t/**\n+\t * This is the {@link PGPAction} object that executes the desired action.\n+\t */\n+\tprivate PGPAction pgpAction;\n+\n+\t@Override\n+\tpublic void configure() throws ConfigurationException {\n+\t\tsuper.configure();\n+\t\tif (action == null)\n+\t\t\tthrow new ConfigurationException(\"Action can not be null!\");\n+\n+\t\tif(Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) != null)\n+\t\t\tSecurity.removeProvider(BouncyCastleProvider.PROVIDER_NAME);\n+\n+\t\tSecurity.addProvider(new BouncyCastleProvider());\n+\n+\t\tswitch (action.toLowerCase()) {\n+\t\t\tcase \"encrypt\":\n+\t\t\t\tpgpAction = new Encrypt(publicKey, recipients);\n+\t\t\t\tbreak;\n+\t\t\tcase \"decrypt\":\n+\t\t\t\tpgpAction = new Decrypt(secretKey, secretPassword);\n+\t\t\t\tbreak;\n+\t\t\tcase \"sign\":\n+\t\t\t\tif(senders == null || senders.length == 0)\n+\t\t\t\t\tthrow new ConfigurationException(\"During signing action, senders has to be set.\");\n+\t\t\t\tpgpAction = new Sign(publicKey, secretKey, secretPassword, recipients, senders[0]);\n+\t\t\t\tbreak;\n+\t\t\tcase \"verify\":\n+\t\t\t\tpgpAction = new Verify(publicKey, secretKey, secretPassword, senders);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tthrow new ConfigurationException(\"Unknown action. Action has to be set to one of [Encrypt, Decrypt, Sign, Verify]\");\n+\t\t}\n+\t\tpgpAction.configure();\n+\t}\n+\n+\t@Override\n+\tpublic PipeRunResult doPipe(Object input, IPipeLineSession session) throws PipeRunException {\n+\t\tMessage message = new Message(input);\n+\t\ttry {\n+\t\t\tOutputStream outputStream = pgpAction.run(message.asInputStream());\n+\t\t\treturn new PipeRunResult(findForward(\"success\"), outputStream);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new PipeRunException(this, \"Exception was thrown during PGPPipe execution.\", e);\n+\t\t}\n+\t}\n+\n+\tpublic void setAction(String action) {", "originalCommit": "6515a1220b0329aead1aa7bf54453696d895aa98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "15189ead3481e2cdad067e17d335145f1bb4f7da", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java b/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java\nindex 2795c592d..da1dc9f96 100644\n--- a/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java\n+++ b/core/src/main/java/nl/nn/adapterframework/pipes/PGPPipe.java\n\n@@ -4,6 +4,7 @@ import nl.nn.adapterframework.configuration.ConfigurationException;\n import nl.nn.adapterframework.core.IPipeLineSession;\n import nl.nn.adapterframework.core.PipeRunException;\n import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.pgp.*;\n import nl.nn.adapterframework.stream.Message;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4OTExMA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r367989110", "bodyText": "You can also use a tokenizer, which trims the results, and gives you a iterator to directly iterate over :)", "author": "nielsm5", "createdAt": "2020-01-17T15:20:10Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeForward;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.OutputStream;\n+import java.util.Collection;\n+\n+@RunWith(Parameterized.class)\n+public class PgpPipeTest {\n+\n+\tprivate IPipeLineSession session;\n+\n+\tprotected PGPPipe encryptPipe;\n+\tprotected PGPPipe decryptPipe;\n+\n+\tprivate String expectation;\n+\tprivate String[] encryptParams, decryptParams;\n+\n+\tprivate final String MESSAGE = \"My Secret!!\";\n+\tprivate final String PGP_FOLDER = \"src/test/resources/PGP/\";\n+\n+\tprivate static final String[] sender = {\"test@ibissource.org\", \"ibistest\", \"first/private.asc\", \"first/public.asc\", \"first/public.asc;second/public.asc\"};\n+\tprivate static final String[] recipient = {\"second@ibissource.org\", \"secondtest\", \"second/private.asc\", \"second/public.asc\", \"first/public.asc;second/public.asc\"};\n+\n+\t@Parameterized.Parameters(name = \"{index} - {0} - {1}\")\n+\tpublic static Collection<Object[]> data() {\n+\t\t// List of the parameters for pipes is as follows:\n+\t\t// action, secretkey, password, publickey, senders, recipients\n+\t\treturn Arrays.asList(new Object[][]{\n+\t\t\t\t{\"Sign then Verify\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"sign\", sender[2], sender[1], sender[4], sender[0], recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"verify\", recipient[2], recipient[1], recipient[4], sender[0], recipient[0]}},\n+\t\t\t\t{\"Encrypt then Decrypt\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"encrypt\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"dEcryPt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Sign then Decrypt\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"sign\", sender[2], sender[1], sender[4], sender[0], recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Verify Someone Signed\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"sign\", sender[2], sender[1], sender[4], sender[0], recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"verify\", recipient[2], recipient[1], recipient[4], null, recipient[0]}},\n+\t\t\t\t{\"Encrypt then Verify\", \"org.bouncycastle.openpgp.PGPException\",\n+\t\t\t\t\t\tnew String[]{\"encrypt\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"verify\", recipient[2], recipient[1], recipient[4], sender[0], recipient[0]}},\n+\t\t\t\t{\"Sign wrong params\", \"nl.nn.adapterframework.configuration.ConfigurationException\",\n+\t\t\t\t\t\tnew String[]{\"sign\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Null action\", \"nl.nn.adapterframework.configuration.ConfigurationException\",\n+\t\t\t\t\t\tnew String[]{null, null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Non-existing action\", \"nl.nn.adapterframework.configuration.ConfigurationException\",\n+\t\t\t\t\t\tnew String[]{\"non-existing action\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Wrong password\", \"org.bouncycastle.openpgp.PGPException\",\n+\t\t\t\t\t\tnew String[]{\"encrypt\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], \"wrong password :/\", null, null, null}},\n+\t\t\t\t{\"Decrypt Plaintext\", \"org.bouncycastle.openpgp.PGPException\",\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t});\n+\t}\n+\n+\tpublic PgpPipeTest(String name, String expectation, String[] encryptParams, String[] decryptParams) {\n+\t\tsetup();\n+\t\tthis.expectation = expectation;\n+\t\tthis.encryptParams = encryptParams;\n+\t\tthis.decryptParams = decryptParams;\n+\t}\n+\n+\t@Test\n+\tpublic void dotest() throws Throwable {\n+\t\ttry {\n+\t\t\t// Configure pipes\n+\t\t\tconfigurePipe(encryptPipe, encryptParams);\n+\t\t\tconfigurePipe(decryptPipe, decryptParams);\n+\n+\t\t\t// Encryption phase\n+\t\t\tPipeRunResult encryptionResult = encryptPipe.doPipe(MESSAGE, session);\n+\n+\t\t\t// Make sure it's PGP message\n+\t\t\tOutputStream mid = (OutputStream) encryptionResult.getResult();\n+\t\t\tassertMessage(mid.toString(), MESSAGE);\n+\n+\t\t\t// Decryption phase\n+\t\t\tPipeRunResult decryptionResult = decryptPipe.doPipe(encryptionResult.getResult(), session);\n+\t\t\tOutputStream result = (OutputStream) decryptionResult.getResult();\n+\n+\t\t\t// Assert decrypted message equals to the original message\n+\t\t\tAssert.assertEquals(MESSAGE, result.toString());\n+\t\t\tAssert.assertEquals(\"success\", expectation);\n+\t\t} catch (Exception e) {\n+\t\t\tif (checkExceptionClass(e, expectation)) {\n+\t\t\t\tAssert.assertTrue(true);\n+\t\t\t} else {\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates pipes and pipeline session base for testing.\n+\t */\n+\tpublic void setup() {\n+\t\tsession = new PipeLineSessionBase();\n+\n+\t\tencryptPipe = new PGPPipe();\n+\t\tdecryptPipe = new PGPPipe();\n+\n+\t\tencryptPipe.registerForward(new PipeForward(\"success\", null));\n+\t\tencryptPipe.setName(encryptPipe.getClass().getSimpleName() + \" under test\");\n+\n+\t\tdecryptPipe.registerForward(new PipeForward(\"success\", null));\n+\t\tdecryptPipe.setName(decryptPipe.getClass().getSimpleName() + \" under test\");\n+\t}\n+\n+\t/**\n+\t * Sets the parameters of the pipes\n+\t * @param pipe Pipe to be configured.\n+\t * @param params Parameters to be set.\n+\t * @throws ConfigurationException When there's an exception during configuration.\n+\t */\n+\tprivate void configurePipe(PGPPipe pipe, String[] params) throws ConfigurationException {\n+\t\t// Just so we dont have to change numbers every time we change order.\n+\t\tint i = 0;\n+\t\tpipe.setAction(params[i++]);\n+\t\tpipe.setSecretKey(addFolderPath(params[i++]));\n+\t\tpipe.setSecretPassword(params[i++]);\n+\t\tpipe.setPublicKey(addFolderPath(params[i++]));\n+\t\tpipe.setSenders(params[i++]);\n+\t\tpipe.setRecipients(params[i]);\n+\t\tpipe.configure();\n+\t}\n+\n+\t/**\n+\t * Adds folder's path to every file in the given parameters.\n+\t * @param param A list of files separated by semicolon.\n+\t * @return A list of files separated by semicolon including the parent folder's path.\n+\t */\n+\tprivate String addFolderPath(String param) {\n+\t\tif (param == null)\n+\t\t\treturn null;\n+\t\tString[] keys = param.split(\";\");", "originalCommit": "6515a1220b0329aead1aa7bf54453696d895aa98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDE0Mg==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r369994142", "bodyText": "Yep, and it also doesn't require me to hold all the keys in memory, but when I use it I can't set stringbuilder's capacity, which decreases performance since it needs to scale. So memory vs time :P . But with tokenizer it looks cleaner so I changed it.", "author": "mkmeral", "createdAt": "2020-01-23T08:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk4OTExMA=="}], "type": "inlineReview", "revised_code": {"commit": "8c4080702fc509661e8752c81c6a2d4ff77c4d82", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java b/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java\nindex a7e9af947..8fc699592 100644\n--- a/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java\n\n@@ -7,12 +7,14 @@ import nl.nn.adapterframework.core.PipeForward;\n import nl.nn.adapterframework.core.PipeLineSessionBase;\n import nl.nn.adapterframework.core.PipeRunResult;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n import java.io.OutputStream;\n import java.util.Collection;\n+import java.util.StringTokenizer;\n \n @RunWith(Parameterized.class)\n public class PgpPipeTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk5OTI3Nw==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r367999277", "bodyText": "Wont it be easier to use the Before annotation?", "author": "nielsm5", "createdAt": "2020-01-17T15:40:09Z", "path": "core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeForward;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.OutputStream;\n+import java.util.Collection;\n+\n+@RunWith(Parameterized.class)\n+public class PgpPipeTest {\n+\n+\tprivate IPipeLineSession session;\n+\n+\tprotected PGPPipe encryptPipe;\n+\tprotected PGPPipe decryptPipe;\n+\n+\tprivate String expectation;\n+\tprivate String[] encryptParams, decryptParams;\n+\n+\tprivate final String MESSAGE = \"My Secret!!\";\n+\tprivate final String PGP_FOLDER = \"src/test/resources/PGP/\";\n+\n+\tprivate static final String[] sender = {\"test@ibissource.org\", \"ibistest\", \"first/private.asc\", \"first/public.asc\", \"first/public.asc;second/public.asc\"};\n+\tprivate static final String[] recipient = {\"second@ibissource.org\", \"secondtest\", \"second/private.asc\", \"second/public.asc\", \"first/public.asc;second/public.asc\"};\n+\n+\t@Parameterized.Parameters(name = \"{index} - {0} - {1}\")\n+\tpublic static Collection<Object[]> data() {\n+\t\t// List of the parameters for pipes is as follows:\n+\t\t// action, secretkey, password, publickey, senders, recipients\n+\t\treturn Arrays.asList(new Object[][]{\n+\t\t\t\t{\"Sign then Verify\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"sign\", sender[2], sender[1], sender[4], sender[0], recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"verify\", recipient[2], recipient[1], recipient[4], sender[0], recipient[0]}},\n+\t\t\t\t{\"Encrypt then Decrypt\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"encrypt\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"dEcryPt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Sign then Decrypt\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"sign\", sender[2], sender[1], sender[4], sender[0], recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Verify Someone Signed\", \"success\",\n+\t\t\t\t\t\tnew String[]{\"sign\", sender[2], sender[1], sender[4], sender[0], recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"verify\", recipient[2], recipient[1], recipient[4], null, recipient[0]}},\n+\t\t\t\t{\"Encrypt then Verify\", \"org.bouncycastle.openpgp.PGPException\",\n+\t\t\t\t\t\tnew String[]{\"encrypt\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"verify\", recipient[2], recipient[1], recipient[4], sender[0], recipient[0]}},\n+\t\t\t\t{\"Sign wrong params\", \"nl.nn.adapterframework.configuration.ConfigurationException\",\n+\t\t\t\t\t\tnew String[]{\"sign\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Null action\", \"nl.nn.adapterframework.configuration.ConfigurationException\",\n+\t\t\t\t\t\tnew String[]{null, null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Non-existing action\", \"nl.nn.adapterframework.configuration.ConfigurationException\",\n+\t\t\t\t\t\tnew String[]{\"non-existing action\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t\t\t{\"Wrong password\", \"org.bouncycastle.openpgp.PGPException\",\n+\t\t\t\t\t\tnew String[]{\"encrypt\", null, null, recipient[3], null, recipient[0]},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], \"wrong password :/\", null, null, null}},\n+\t\t\t\t{\"Decrypt Plaintext\", \"org.bouncycastle.openpgp.PGPException\",\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null},\n+\t\t\t\t\t\tnew String[]{\"decrypt\", recipient[2], recipient[1], null, null, null}},\n+\t\t});\n+\t}\n+\n+\tpublic PgpPipeTest(String name, String expectation, String[] encryptParams, String[] decryptParams) {\n+\t\tsetup();\n+\t\tthis.expectation = expectation;\n+\t\tthis.encryptParams = encryptParams;\n+\t\tthis.decryptParams = decryptParams;\n+\t}\n+\n+\t@Test\n+\tpublic void dotest() throws Throwable {\n+\t\ttry {\n+\t\t\t// Configure pipes\n+\t\t\tconfigurePipe(encryptPipe, encryptParams);\n+\t\t\tconfigurePipe(decryptPipe, decryptParams);\n+\n+\t\t\t// Encryption phase\n+\t\t\tPipeRunResult encryptionResult = encryptPipe.doPipe(MESSAGE, session);\n+\n+\t\t\t// Make sure it's PGP message\n+\t\t\tOutputStream mid = (OutputStream) encryptionResult.getResult();\n+\t\t\tassertMessage(mid.toString(), MESSAGE);\n+\n+\t\t\t// Decryption phase\n+\t\t\tPipeRunResult decryptionResult = decryptPipe.doPipe(encryptionResult.getResult(), session);\n+\t\t\tOutputStream result = (OutputStream) decryptionResult.getResult();\n+\n+\t\t\t// Assert decrypted message equals to the original message\n+\t\t\tAssert.assertEquals(MESSAGE, result.toString());\n+\t\t\tAssert.assertEquals(\"success\", expectation);\n+\t\t} catch (Exception e) {\n+\t\t\tif (checkExceptionClass(e, expectation)) {\n+\t\t\t\tAssert.assertTrue(true);\n+\t\t\t} else {\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Creates pipes and pipeline session base for testing.\n+\t */\n+\tpublic void setup() {", "originalCommit": "6515a1220b0329aead1aa7bf54453696d895aa98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDk0OA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r369994948", "bodyText": "It does not matter from execution perspective. But yeah I guess @before is cleaner.", "author": "mkmeral", "createdAt": "2020-01-23T08:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk5OTI3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8c4080702fc509661e8752c81c6a2d4ff77c4d82", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java b/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java\nindex a7e9af947..8fc699592 100644\n--- a/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/pipes/PgpPipeTest.java\n\n@@ -7,12 +7,14 @@ import nl.nn.adapterframework.core.PipeForward;\n import nl.nn.adapterframework.core.PipeLineSessionBase;\n import nl.nn.adapterframework.core.PipeRunResult;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n \n import java.io.OutputStream;\n import java.util.Collection;\n+import java.util.StringTokenizer;\n \n @RunWith(Parameterized.class)\n public class PgpPipeTest {\n"}}, {"oid": "8c4080702fc509661e8752c81c6a2d4ff77c4d82", "url": "https://github.com/ibissource/iaf/commit/8c4080702fc509661e8752c81c6a2d4ff77c4d82", "message": "Add before annotation and use string tokenizer.", "committedDate": "2020-01-23T08:58:00Z", "type": "commit"}, {"oid": "99d6fe06d8cc8ff1ec0462677cbfefdc028af9cb", "url": "https://github.com/ibissource/iaf/commit/99d6fe06d8cc8ff1ec0462677cbfefdc028af9cb", "message": "Beautify the code, and change names.", "committedDate": "2020-01-23T09:00:28Z", "type": "commit"}, {"oid": "15189ead3481e2cdad067e17d335145f1bb4f7da", "url": "https://github.com/ibissource/iaf/commit/15189ead3481e2cdad067e17d335145f1bb4f7da", "message": "Add ibisdoc to setters.", "committedDate": "2020-01-23T09:01:17Z", "type": "commit"}, {"oid": "7f63eb6f1448cc209bd45a88a3229171d0deb2f6", "url": "https://github.com/ibissource/iaf/commit/7f63eb6f1448cc209bd45a88a3229171d0deb2f6", "message": "Change naming to verification adresses.", "committedDate": "2020-01-23T09:02:54Z", "type": "commit"}, {"oid": "dd035503b3ee02045bc592f0717d591b4af2b168", "url": "https://github.com/ibissource/iaf/commit/dd035503b3ee02045bc592f0717d591b4af2b168", "message": "Add copyright notice to pgp pipe.", "committedDate": "2020-01-23T14:04:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3OTYwMw==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r370679603", "bodyText": "Can you use ClassUtils.getResourceURL ? it is very unlikely that the resource will be on the local filesystem. this generic method will use the appropiate classloader to retrieve the url", "author": "nielsm5", "createdAt": "2020-01-24T15:03:45Z", "path": "core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+   Copyright 2020 Integration Partners\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.pgp;\n+\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import org.apache.commons.io.IOUtils;\n+import org.bouncycastle.openpgp.PGPException;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * This is an abstraction of general pgp actions\n+ * such as encryption, verification, etc.\n+ * to be used for {@link nl.nn.adapterframework.pipes.PGPPipe}\n+ *\n+ * @author Murat Kaan Meral\n+ */\n+public abstract class PGPAction {\n+\n+\tprotected InMemoryKeyring keyringConfig;\n+\tprivate String[] publicKeys;\n+\tprivate String secretKey, secretPassword;\n+\n+\t/**\n+\t * A general constructor. It checks if any of the vars are null.\n+\t *\n+\t * @param publicKey      Array of path strings that point to public keys.\n+\t * @param secretKey      String that contains the path to the secret key.\n+\t * @param secretPassword String that contains the password for the secret key.\n+\t * @param vars           Objects that should not be null for the action to be performed.\n+\t * @throws ConfigurationException When any of the given vars is null.\n+\t */\n+\tPGPAction(String[] publicKey, String secretKey, String secretPassword, Object... vars) throws ConfigurationException {\n+\t\tverifyNotNull(vars);\n+\t\tthis.publicKeys = publicKey;\n+\t\tthis.secretPassword = secretPassword;\n+\t\tthis.secretKey = secretKey;\n+\t}\n+\n+\t/**\n+\t * Generates a keyring configuration with public keys and the private key.\n+\t *\n+\t * @throws ConfigurationException When the files do not exist, or unexpected PGP exception has occurred.\n+\t */\n+\tpublic void configure() throws ConfigurationException {\n+\t\ttry {\n+\t\t\t// Create configuration\n+\t\t\tKeyringConfigCallback callback = KeyringConfigCallbacks.withUnprotectedKeys();\n+\t\t\tif (secretPassword != null)\n+\t\t\t\tcallback = KeyringConfigCallbacks.withPassword(secretPassword);\n+\n+\t\t\tkeyringConfig = KeyringConfigs.forGpgExportedKeys(callback);\n+\n+\t\t\t// Add public keys\n+\t\t\tif (publicKeys != null) {\n+\t\t\t\tfor (String s : publicKeys) {\n+\t\t\t\t\tkeyringConfig.addPublicKey(IOUtils.toByteArray(new FileInputStream(s)));", "originalCommit": "dd035503b3ee02045bc592f0717d591b4af2b168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzNDM3NA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r371234374", "bodyText": "Is it also possible to retrieve these certificates from the JVM keystore? With a property to specify the name of the keystore to retrieve the certificate from", "author": "nielsm5", "createdAt": "2020-01-27T13:19:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3OTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2ODY5Mg==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r375168692", "bodyText": "For getResourceURL should I use this.getClass().getClassLoader() as classloader or something else?\nBouncy Castle and Java Keystore API are not compatible. If we need it, I could create an adapter to make them compatible. However, that would require rebuilding the keys each time. See this url.", "author": "mkmeral", "createdAt": "2020-02-05T10:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3OTYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczNDQxNA==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r375734414", "bodyText": "For getResourceURL should I use this.getClass().getClassLoader() as classloader or something else?\n\nHave a look at ClassUtils.getResourceURL\n\nBouncy Castle and Java Keystore API are not compatible. If we need it, I could create an adapter to make them compatible. However, that would require rebuilding the keys each time. See this url.\n\nFair enough, was a nice to have in my eyes!", "author": "nielsm5", "createdAt": "2020-02-06T09:50:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3OTYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "097a21a26556ac3ea91a57244483656ab473ab5c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\nindex 5732ad43d..480ce6b7b 100644\n--- a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n+++ b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n\n@@ -20,6 +20,7 @@ import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.Keyrin\n import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;\n import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;\n import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.util.ClassUtils;\n import org.apache.commons.io.IOUtils;\n import org.bouncycastle.openpgp.PGPException;\n \n"}}, {"oid": "8946c059ac6d0c8cf323431ce7a847894f504158", "url": "https://github.com/ibissource/iaf/commit/8946c059ac6d0c8cf323431ce7a847894f504158", "message": "Add new version of Bouncy GPG.", "committedDate": "2020-02-05T09:52:12Z", "type": "commit"}, {"oid": "1cc022b95a0fa3f6f49f2be120ef68f2546272a4", "url": "https://github.com/ibissource/iaf/commit/1cc022b95a0fa3f6f49f2be120ef68f2546272a4", "message": "Merge branch 'master' into pgp-pipes", "committedDate": "2020-02-07T13:24:36Z", "type": "commit"}, {"oid": "097a21a26556ac3ea91a57244483656ab473ab5c", "url": "https://github.com/ibissource/iaf/commit/097a21a26556ac3ea91a57244483656ab473ab5c", "message": "Use ClassUtils for file reading.", "committedDate": "2020-02-07T13:35:13Z", "type": "commit"}, {"oid": "0cf2dda3ffc7980b10f1a9b1f4d04954ca3f15e3", "url": "https://github.com/ibissource/iaf/commit/0cf2dda3ffc7980b10f1a9b1f4d04954ca3f15e3", "message": "Fix filenotfound from the url.", "committedDate": "2020-02-13T15:58:29Z", "type": "commit"}, {"oid": "1da221020ee2b462edf5f3ed79780d356536e221", "url": "https://github.com/ibissource/iaf/commit/1da221020ee2b462edf5f3ed79780d356536e221", "message": "Change java7 to 8 for travis.", "committedDate": "2020-02-13T15:59:22Z", "type": "commit"}, {"oid": "7f6fed1f3872f319a429c19824180459a8736cd4", "url": "https://github.com/ibissource/iaf/commit/7f6fed1f3872f319a429c19824180459a8736cd4", "message": "Fix method not found on bouncy castle.", "committedDate": "2020-02-13T16:33:07Z", "type": "commit"}, {"oid": "dc3b0a86270c74099a181b82448517fe3fe451b4", "url": "https://github.com/ibissource/iaf/commit/dc3b0a86270c74099a181b82448517fe3fe451b4", "message": "Remove unused imports.", "committedDate": "2020-02-20T14:58:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMDE5Mw==", "url": "https://github.com/ibissource/iaf/pull/367#discussion_r382630193", "bodyText": "The result of this action should be an InputStream, not an OutputStream.\nA caller can use an OutputStream result to write to, whereas it should read from this.\nIn all your implementations the OutputStream is in fact a ByteArrayOutputStream, that is just a wrapper around the result which is the byte array.", "author": "gvanbrakel", "createdAt": "2020-02-21T15:04:04Z", "path": "core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+   Copyright 2020 Integration Partners\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.pgp;\n+\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;\n+import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.util.ClassUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.bouncycastle.openpgp.PGPException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+\n+/**\n+ * This is an abstraction of general pgp actions\n+ * such as encryption, verification, etc.\n+ * to be used for {@link nl.nn.adapterframework.pipes.PGPPipe}\n+ *\n+ * @author Murat Kaan Meral\n+ */\n+public abstract class PGPAction {\n+\n+\tprotected InMemoryKeyring keyringConfig;\n+\tprivate String[] publicKeys;\n+\tprivate String secretKey, secretPassword;\n+\n+\t/**\n+\t * A general constructor. It checks if any of the vars are null.\n+\t *\n+\t * @param publicKey      Array of path strings that point to public keys.\n+\t * @param secretKey      String that contains the path to the secret key.\n+\t * @param secretPassword String that contains the password for the secret key.\n+\t * @param vars           Objects that should not be null for the action to be performed.\n+\t * @throws ConfigurationException When any of the given vars is null.\n+\t */\n+\tPGPAction(String[] publicKey, String secretKey, String secretPassword, Object... vars) throws ConfigurationException {\n+\t\tverifyNotNull(vars);\n+\t\tthis.publicKeys = publicKey;\n+\t\tthis.secretPassword = secretPassword;\n+\t\tthis.secretKey = secretKey;\n+\t}\n+\n+\t/**\n+\t * Generates a keyring configuration with public keys and the private key.\n+\t *\n+\t * @throws ConfigurationException When the files do not exist, or unexpected PGP exception has occurred.\n+\t */\n+\tpublic void configure() throws ConfigurationException {\n+\t\ttry {\n+\t\t\t// Create configuration\n+\t\t\tKeyringConfigCallback callback = KeyringConfigCallbacks.withUnprotectedKeys();\n+\t\t\tif (secretPassword != null)\n+\t\t\t\tcallback = KeyringConfigCallbacks.withPassword(secretPassword);\n+\n+\t\t\tkeyringConfig = KeyringConfigs.forGpgExportedKeys(callback);\n+\n+\t\t\t// Add public keys\n+\t\t\tif (publicKeys != null) {\n+\t\t\t\tfor (String s : publicKeys) {\n+\t\t\t\t\tURL url = ClassUtils.getResourceURL(Thread.currentThread().getContextClassLoader(), s);\n+\t\t\t\t\tkeyringConfig.addPublicKey(IOUtils.toByteArray(url.openStream()));\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// Add private key\n+\t\t\tif (secretKey != null) {\n+\t\t\t\tURL url = ClassUtils.getResourceURL(Thread.currentThread().getContextClassLoader(), secretKey);\n+\t\t\t\tkeyringConfig.addSecretKey(IOUtils.toByteArray(url.openStream()));\n+\t\t\t}\n+\t\t} catch (IOException | PGPException e) {\n+\t\t\tthrow new ConfigurationException(\"Unknown exception has occurred.\", e);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Runs the given action (which may be any extensions of this abstract class).\n+\t *\n+\t * @param inputStream Input for the action.\n+\t * @return OutputStream that contains the encrypted/plaintext based on the action.\n+\t * @throws Exception Any exception that can be thrown during the action.\n+\t */\n+\tpublic abstract OutputStream run(InputStream inputStream) throws Exception;", "originalCommit": "dc3b0a86270c74099a181b82448517fe3fe451b4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1892df63ac6258282acd5d0d876f2c20d0c660b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\nindex 593c76fef..cd6c8602d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n+++ b/core/src/main/java/nl/nn/adapterframework/pgp/PGPAction.java\n\n@@ -15,19 +15,20 @@\n */\n package nl.nn.adapterframework.pgp;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URL;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.bouncycastle.openpgp.PGPException;\n+\n import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback;\n import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;\n import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;\n import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;\n import nl.nn.adapterframework.configuration.ConfigurationException;\n import nl.nn.adapterframework.util.ClassUtils;\n-import org.apache.commons.io.IOUtils;\n-import org.bouncycastle.openpgp.PGPException;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.net.URL;\n \n /**\n  * This is an abstraction of general pgp actions\n"}}, {"oid": "553b18c38d08bbc219b47a03fad099ae84ecbd42", "url": "https://github.com/ibissource/iaf/commit/553b18c38d08bbc219b47a03fad099ae84ecbd42", "message": "Merge branch 'master' into pgp-pipes", "committedDate": "2020-02-21T15:19:23Z", "type": "commit"}, {"oid": "a1892df63ac6258282acd5d0d876f2c20d0c660b", "url": "https://github.com/ibissource/iaf/commit/a1892df63ac6258282acd5d0d876f2c20d0c660b", "message": "adjusted interface of PGPAction", "committedDate": "2020-02-21T16:01:06Z", "type": "commit"}, {"oid": "1f43eae6041856155322508fb5fe36ca85cf9567", "url": "https://github.com/ibissource/iaf/commit/1f43eae6041856155322508fb5fe36ca85cf9567", "message": "adjusted tests", "committedDate": "2020-02-21T16:06:45Z", "type": "commit"}]}