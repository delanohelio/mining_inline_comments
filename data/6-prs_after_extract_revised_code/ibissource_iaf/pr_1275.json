{"pr_number": 1275, "pr_title": "Fix #848 handle BLOBs as bytes instead of characters", "pr_createdAt": "2020-11-18T16:18:11Z", "pr_url": "https://github.com/ibissource/iaf/pull/1275", "timeline": [{"oid": "96678b052f4f8b37a9ec1d1a42c91fd147388ac8", "url": "https://github.com/ibissource/iaf/commit/96678b052f4f8b37a9ec1d1a42c91fd147388ac8", "message": "Fix #848 handle BLOBs as bytes instead of characters", "committedDate": "2020-11-18T15:57:26Z", "type": "commit"}, {"oid": "56ba0fd590a702d10721e777a58e7c7807cfc768", "url": "https://github.com/ibissource/iaf/commit/56ba0fd590a702d10721e777a58e7c7807cfc768", "message": "Merge branch 'master' into\nfix_#848_Handle_Blobs_as_bytes_instead_of_characters", "committedDate": "2020-11-18T16:12:57Z", "type": "commit"}, {"oid": "457d3c37088111d83252cdaa773d9236d8b5208f", "url": "https://github.com/ibissource/iaf/commit/457d3c37088111d83252cdaa773d9236d8b5208f", "message": "Remove unused imports", "committedDate": "2020-11-18T16:48:09Z", "type": "commit"}, {"oid": "6467d64f3e9e54d4c18bfe7e20a1db2bb0a86e58", "url": "https://github.com/ibissource/iaf/commit/6467d64f3e9e54d4c18bfe7e20a1db2bb0a86e58", "message": "Add warning about base64 encoding when blobCharset is set empty", "committedDate": "2020-11-19T07:27:50Z", "type": "commit"}, {"oid": "3c916f1485f425cebaca6570b2b435df7b287824", "url": "https://github.com/ibissource/iaf/commit/3c916f1485f425cebaca6570b2b435df7b287824", "message": "Add test for returning blob directly from sender", "committedDate": "2020-11-19T07:41:21Z", "type": "commit"}, {"oid": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "url": "https://github.com/ibissource/iaf/commit/5a2c2182b0cf8da3e7e7e36feec38235483062f3", "message": "remove unused imports", "committedDate": "2020-11-19T08:20:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NTYxOA==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526745618", "bodyText": "Graag even een stukje commentaar. Dit moet je niet op de maandag ochtend tegenkomen...", "author": "nielsm5", "createdAt": "2020-11-19T10:17:49Z", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -345,7 +346,7 @@ public static String getBlobAsString(final IDbmsSupport dbmsSupport, final Resul\n \t\t\tthrow e;\n \t\t}\n \t}\n-\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, String column, String charset, boolean xmlEncode, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException, JMSException {\n+\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, String column, String charset, boolean xmlEncode, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, blobIsCompressed)) {\n \t\t\treturn getBlobAsString(blobStream, column, charset, xmlEncode, blobSmartGet, encodeBlobBase64);", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java b/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\nindex 09b43cc4b..c23aa10ec 100644\n--- a/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\n+++ b/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\n\n@@ -334,31 +334,31 @@ public class JdbcUtil {\n \t\tthrow new IOException(\"cannot stream Clob to [\"+target.getClass().getName()+\"]\");\n \t}\n \t\n-\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, int column, String charset, boolean xmlEncode, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n+\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, int column, String charset, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, blobIsCompressed)) {\n-\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n-\t\t} catch (ZipException | EOFException e) {\n-\t\t\tif (blobSmartGet && blobIsCompressed) {\n+\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, blobSmartGet, encodeBlobBase64);\n+\t\t} catch (ZipException | EOFException e) { \t// if any decompression exception occurs in getBlobInputStream\n+\t\t\tif (blobSmartGet && blobIsCompressed) { // then 'blobSmartGet' will try again to retrieve the stream, but then without decompressing\n \t\t\t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, false)) {\n-\t\t\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n+\t\t\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, blobSmartGet, encodeBlobBase64);\n \t\t\t\t}\n \t\t\t}\n \t\t\tthrow e;\n \t\t}\n \t}\n-\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, String column, String charset, boolean xmlEncode, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n+\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, String column, String charset, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, blobIsCompressed)) {\n-\t\t\treturn getBlobAsString(blobStream, column, charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n-\t\t} catch (ZipException | EOFException e) {\n-\t\t\tif (blobSmartGet && blobIsCompressed) {\n+\t\t\treturn getBlobAsString(blobStream, column, charset, blobSmartGet, encodeBlobBase64);\n+\t\t} catch (ZipException | EOFException e) { \t// if any decompression exception occurs in getBlobInputStream\n+\t\t\tif (blobSmartGet && blobIsCompressed) { // then 'blobSmartGet' will try again to retrieve the stream, but then without decompressing\n \t\t\t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, false)) {\n-\t\t\t\t\treturn getBlobAsString(blobStream, column, charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n+\t\t\t\t\treturn getBlobAsString(blobStream, column, charset, blobSmartGet, encodeBlobBase64);\n \t\t\t\t}\n \t\t\t}\n \t\t\tthrow e;\n \t\t}\n \t}\n-\tpublic static String getBlobAsString(final InputStream blobIntputStream, String column, String charset, boolean xmlEncode, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n+\tpublic static String getBlobAsString(final InputStream blobIntputStream, String column, String charset, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\tif (blobIntputStream==null) {\n \t\t\tlog.debug(\"no blob found in column [\"+column+\"]\");\n \t\t\treturn null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NTcyMA==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526745720", "bodyText": "Ik denk dat de xmlEncode weg kan!", "author": "nielsm5", "createdAt": "2020-11-19T10:18:00Z", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -357,7 +358,7 @@ public static String getBlobAsString(final IDbmsSupport dbmsSupport, final Resul\n \t\t\tthrow e;\n \t\t}\n \t}\n-\tpublic static String getBlobAsString(final InputStream blobIntputStream, String column, String charset, boolean xmlEncode, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException, JMSException {\n+\tpublic static String getBlobAsString(final InputStream blobIntputStream, String column, String charset, boolean xmlEncode, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java b/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\nindex 09b43cc4b..c23aa10ec 100644\n--- a/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\n+++ b/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\n\n@@ -334,31 +334,31 @@ public class JdbcUtil {\n \t\tthrow new IOException(\"cannot stream Clob to [\"+target.getClass().getName()+\"]\");\n \t}\n \t\n-\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, int column, String charset, boolean xmlEncode, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n+\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, int column, String charset, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, blobIsCompressed)) {\n-\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n-\t\t} catch (ZipException | EOFException e) {\n-\t\t\tif (blobSmartGet && blobIsCompressed) {\n+\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, blobSmartGet, encodeBlobBase64);\n+\t\t} catch (ZipException | EOFException e) { \t// if any decompression exception occurs in getBlobInputStream\n+\t\t\tif (blobSmartGet && blobIsCompressed) { // then 'blobSmartGet' will try again to retrieve the stream, but then without decompressing\n \t\t\t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, false)) {\n-\t\t\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n+\t\t\t\t\treturn getBlobAsString(blobStream, Integer.toString(column), charset, blobSmartGet, encodeBlobBase64);\n \t\t\t\t}\n \t\t\t}\n \t\t\tthrow e;\n \t\t}\n \t}\n-\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, String column, String charset, boolean xmlEncode, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n+\tpublic static String getBlobAsString(final IDbmsSupport dbmsSupport, final ResultSet rs, String column, String charset, boolean blobIsCompressed, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, blobIsCompressed)) {\n-\t\t\treturn getBlobAsString(blobStream, column, charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n-\t\t} catch (ZipException | EOFException e) {\n-\t\t\tif (blobSmartGet && blobIsCompressed) {\n+\t\t\treturn getBlobAsString(blobStream, column, charset, blobSmartGet, encodeBlobBase64);\n+\t\t} catch (ZipException | EOFException e) { \t// if any decompression exception occurs in getBlobInputStream\n+\t\t\tif (blobSmartGet && blobIsCompressed) { // then 'blobSmartGet' will try again to retrieve the stream, but then without decompressing\n \t\t\t\ttry (InputStream blobStream = getBlobInputStream(dbmsSupport, rs, column, false)) {\n-\t\t\t\t\treturn getBlobAsString(blobStream, column, charset, xmlEncode, blobSmartGet, encodeBlobBase64);\n+\t\t\t\t\treturn getBlobAsString(blobStream, column, charset, blobSmartGet, encodeBlobBase64);\n \t\t\t\t}\n \t\t\t}\n \t\t\tthrow e;\n \t\t}\n \t}\n-\tpublic static String getBlobAsString(final InputStream blobIntputStream, String column, String charset, boolean xmlEncode, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n+\tpublic static String getBlobAsString(final InputStream blobIntputStream, String column, String charset, boolean blobSmartGet, boolean encodeBlobBase64) throws IOException, JdbcException, SQLException {\n \t\tif (blobIntputStream==null) {\n \t\t\tlog.debug(\"no blob found in column [\"+column+\"]\");\n \t\t\treturn null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NzQ5Mw==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526747493", "bodyText": "Volgens Gerrit moet deze final weg", "author": "nielsm5", "createdAt": "2020-11-19T10:20:43Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/FixedQuerySender.java", "diffHunk": "@@ -118,11 +120,22 @@ protected void closeStatementSet(QueryExecutionContext statementSet, IPipeLineSe\n \n \t@Override\n \tpublic Message sendMessage(QueryExecutionContext blockHandle, Message message, IPipeLineSession session) throws SenderException, TimeOutException {\n-\t\treturn executeStatementSet(blockHandle, message, session);\n+\t\treturn executeStatementSet(blockHandle, message, session, null).getResult();\n \t}\n \n \t@Override\n-\tprotected final Message sendMessageOnConnection(Connection connection, Message message, IPipeLineSession session) throws SenderException, TimeOutException {\n+\t// implements IStreamingSender.sendMessage(), currently without support for streaming the results to the next outputstream provider.\n+\tpublic final PipeRunResult sendMessage(Message message, IPipeLineSession session, IForwardTarget next) throws SenderException, TimeOutException {", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/FixedQuerySender.java b/core/src/main/java/nl/nn/adapterframework/jdbc/FixedQuerySender.java\nindex 836a12197..e1f475576 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/FixedQuerySender.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/FixedQuerySender.java\n\n@@ -119,13 +119,14 @@ public class FixedQuerySender extends JdbcQuerySenderBase<QueryExecutionContext>\n \t}\n \n \t@Override\n+\t// implements IBlockEnabledSender.sendMessage()\n \tpublic Message sendMessage(QueryExecutionContext blockHandle, Message message, IPipeLineSession session) throws SenderException, TimeOutException {\n \t\treturn executeStatementSet(blockHandle, message, session, null).getResult();\n \t}\n \n \t@Override\n-\t// implements IStreamingSender.sendMessage(), currently without support for streaming the results to the next outputstream provider.\n-\tpublic final PipeRunResult sendMessage(Message message, IPipeLineSession session, IForwardTarget next) throws SenderException, TimeOutException {\n+\t// implements IStreamingSender.sendMessage()\n+\tpublic PipeRunResult sendMessage(Message message, IPipeLineSession session, IForwardTarget next) throws SenderException, TimeOutException {\n \t\tQueryExecutionContext blockHandle = openBlock(session);\n \t\ttry {\n \t\t\treturn executeStatementSet(blockHandle, message, session, next);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0OTEzOQ==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526749139", "bodyText": "Deze deprecated maken?", "author": "nielsm5", "createdAt": "2020-11-19T10:23:18Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java", "diffHunk": "@@ -402,31 +409,31 @@ public String getMessageField() {\n \t\treturn messageField;\n \t}\n \n-\t@IbisDoc({\"Type of the field containing the message data: either String, clob or blob\", \"<i>String</i>\"})\n+\t@IbisDoc({\"3\", \"Type of the field containing the message data: either String, clob or blob\", \"<i>String</i>\"})\n \tpublic void setMessageFieldType(String string) {\n \t\tmessageFieldType = string;\n \t}\n \tpublic String getMessageFieldType() {\n \t\treturn messageFieldType;\n \t}\n \n-\t@IbisDoc({\"Charset used to read blobs\", \"UTF-8\"})\n-\tpublic void setBlobCharset(String string) {\n-\t\tblobCharset = string;\n-\t}\n-\tpublic String getBlobCharset() {\n-\t\treturn blobCharset;\n-\t}\n-\n-\t@IbisDoc({\"Controls whether blobdata is considered stored compressed in the database\", \"true\"})\n+\t@IbisDoc({\"4\", \"Controls whether BLOB is considered stored compressed in the database\", \"true\"})\n \tpublic void setBlobsCompressed(boolean b) {\n \t\tblobsCompressed = b;\n \t}\n \tpublic boolean isBlobsCompressed() {\n \t\treturn blobsCompressed;\n \t}\n \n-\t@IbisDoc({\"Controls automatically whether blobdata is stored compressed and/or serialized in the database\", \"false\"})\n+\t@IbisDoc({\"5\", \"Charset used to read BLOB. When specified, then the BLOB will be converted into a string\", \"\"})", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\nindex f999b29da..506355d67 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\n\n@@ -426,6 +426,7 @@ public class JdbcListener extends JdbcFacade implements IPeekableListener<Object\n \t}\n \n \t@IbisDoc({\"5\", \"Charset used to read BLOB. When specified, then the BLOB will be converted into a string\", \"\"})\n+\t@Deprecated\n \tpublic void setBlobCharset(String string) {\n \t\tblobCharset = string;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1MTg1Ng==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526751856", "bodyText": "!empty van maken, zodat de code iets duidelijker wordt.", "author": "nielsm5", "createdAt": "2020-11-19T10:27:31Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java", "diffHunk": "@@ -328,25 +325,25 @@ protected Message executeStatementSet(QueryExecutionContext queryExecutionContex\n \t\t\t\t\tHttpServletResponse response = (HttpServletResponse) session.get(IPipeLineSession.HTTP_RESPONSE_KEY);\n \t\t\t\t\tString contentType = (String) session.get(\"contentType\");\n \t\t\t\t\tString contentDisposition = (String) session.get(\"contentDisposition\");\n-\t\t\t\t\treturn executeSelectQuery(statement,blobSessionVar,clobSessionVar, response, contentType, contentDisposition);\n+\t\t\t\t\treturn executeSelectQuery(statement,blobSessionVar,clobSessionVar, response, contentType, contentDisposition, session, next);\n \t\t\t\t} else {\n-\t\t\t\t\treturn executeSelectQuery(statement,blobSessionVar,clobSessionVar);\n+\t\t\t\t\treturn executeSelectQuery(statement,blobSessionVar,clobSessionVar, session, next);\n \t\t\t\t}\n \t\t\t} \n \t\t\tif (\"updateBlob\".equalsIgnoreCase(queryExecutionContext.getQueryType())) {\n \t\t\t\tif (StringUtils.isEmpty(getBlobSessionKey())) {\n-\t\t\t\t\treturn executeUpdateBlobQuery(statement,message.asInputStream());\n+\t\t\t\t\treturn new PipeRunResult(null, executeUpdateBlobQuery(statement, message));\n \t\t\t\t} \n-\t\t\t\treturn executeUpdateBlobQuery(statement,session==null?null:session.get(getBlobSessionKey()));\n+\t\t\t\treturn new PipeRunResult(null, executeUpdateBlobQuery(statement,session==null?null:Message.asMessage(session.get(getBlobSessionKey()))));", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\nindex 5885bad23..17b100c1a 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\n\n@@ -331,16 +331,16 @@ public abstract class JdbcQuerySenderBase<H> extends JdbcSenderBase<H> {\n \t\t\t\t}\n \t\t\t} \n \t\t\tif (\"updateBlob\".equalsIgnoreCase(queryExecutionContext.getQueryType())) {\n-\t\t\t\tif (StringUtils.isEmpty(getBlobSessionKey())) {\n-\t\t\t\t\treturn new PipeRunResult(null, executeUpdateBlobQuery(statement, message));\n+\t\t\t\tif (StringUtils.isNotEmpty(getBlobSessionKey())) {\n+\t\t\t\t\treturn new PipeRunResult(null, executeUpdateBlobQuery(statement,session==null?null:Message.asMessage(session.get(getBlobSessionKey()))));\n \t\t\t\t} \n-\t\t\t\treturn new PipeRunResult(null, executeUpdateBlobQuery(statement,session==null?null:Message.asMessage(session.get(getBlobSessionKey()))));\n+\t\t\t\treturn new PipeRunResult(null, executeUpdateBlobQuery(statement, message));\n \t\t\t} \n \t\t\tif (\"updateClob\".equalsIgnoreCase(queryExecutionContext.getQueryType())) {\n-\t\t\t\tif (StringUtils.isEmpty(getClobSessionKey())) {\n-\t\t\t\t\treturn new PipeRunResult(null, executeUpdateClobQuery(statement, message));\n+\t\t\t\tif (StringUtils.isNotEmpty(getClobSessionKey())) {\n+\t\t\t\t\treturn new PipeRunResult(null, executeUpdateClobQuery(statement,session==null?null:Message.asMessage(session.get(getClobSessionKey()))));\n \t\t\t\t} \n-\t\t\t\treturn new PipeRunResult(null, executeUpdateClobQuery(statement,session==null?null:Message.asMessage(session.get(getClobSessionKey()))));\n+\t\t\t\treturn new PipeRunResult(null, executeUpdateClobQuery(statement, message));\n \t\t\t} \n \t\t\tif (\"package\".equalsIgnoreCase(queryExecutionContext.getQueryType())) {\n \t\t\t\treturn new PipeRunResult(null, executePackageQuery(queryExecutionContext));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1MjYzMA==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526752630", "bodyText": "overal bij een leeg message Message.nullMessage()", "author": "nielsm5", "createdAt": "2020-11-19T10:28:47Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java", "diffHunk": "@@ -458,54 +455,56 @@ protected Message getResult(ResultSet resultset) throws JdbcException, SQLExcept\n \t}\n \n \tprotected Message getResult(ResultSet resultset, Object blobSessionVar, Object clobSessionVar) throws JdbcException, SQLException, IOException, JMSException {\n-\t\treturn getResult(resultset, blobSessionVar, clobSessionVar, null, null, null);\n+\t\treturn getResult(resultset, blobSessionVar, clobSessionVar, null, null, null, null, null).getResult();\n \t}\n \n-\tprotected Message getResult(ResultSet resultset, Object blobSessionVar, Object clobSessionVar, HttpServletResponse response, String contentType, String contentDisposition) throws JdbcException, SQLException, IOException, JMSException {\n-\t\tString result=null;\n+\tprotected PipeRunResult getResult(ResultSet resultset, Object blobSessionVar, Object clobSessionVar, HttpServletResponse response, String contentType, String contentDisposition, IPipeLineSession session, IForwardTarget next) throws JdbcException, SQLException, IOException {\n \t\tif (isScalar()) {\n+\t\t\tString result=null;\n \t\t\tif (resultset.next()) {\n \t\t\t\t//result = resultset.getString(1);\n \t\t\t\tResultSetMetaData rsmeta = resultset.getMetaData();\n \t\t\t\tint numberOfColumns = rsmeta.getColumnCount();\n \t\t\t\tif(numberOfColumns > 1) {\n-\t\t\t\t\tlog.warn(getLogPrefix() + \"has the [scalar]=true. However, the resultset contains [\"+numberOfColumns+\"] columns. Consider optimizing the query.\");\n+\t\t\t\t\tlog.warn(getLogPrefix() + \"has set scalar=true. However, the resultset contains [\"+numberOfColumns+\"] columns. Consider optimizing the query.\");\n \t\t\t\t}\n \t\t\t\tif (JdbcUtil.isBlobType(resultset, 1, rsmeta)) {\n-\t\t\t\t\tif (response==null) {\n-\t\t\t\t\t\tif (blobSessionVar!=null) {\n-\t\t\t\t\t\t\tJdbcUtil.streamBlob(getDbmsSupport(), resultset, 1, getBlobCharset(), isBlobsCompressed(), getBlobBase64Direction(), blobSessionVar, isCloseOutputstreamOnExit());\n-\t\t\t\t\t\t\treturn new Message(\"\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tInputStream inputStream = JdbcUtil.getBlobInputStream(getDbmsSupport(), resultset, 1, isBlobsCompressed());\n+\t\t\t\t\tif (response!=null) {\n \t\t\t\t\t\tif (StringUtils.isNotEmpty(contentType)) {\n \t\t\t\t\t\t\tresponse.setHeader(\"Content-Type\", contentType); \n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (StringUtils.isNotEmpty(contentDisposition)) {\n \t\t\t\t\t\t\tresponse.setHeader(\"Content-Disposition\", contentDisposition); \n \t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tif(getBlobBase64Direction() != null) {\n-\t\t\t\t\t\t\tif (\"decode\".equalsIgnoreCase(getBlobBase64Direction())) {\n-\t\t\t\t\t\t\t\tinputStream = new Base64InputStream (inputStream);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if (\"encode\".equalsIgnoreCase(getBlobBase64Direction())) {\n-\t\t\t\t\t\t\t\tinputStream = new Base64InputStream (inputStream, true);\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\tJdbcUtil.streamBlob(getDbmsSupport(), resultset, 1, getBlobCharset(), isBlobsCompressed(), getBlobBase64Direction(), response.getOutputStream(), isCloseOutputstreamOnExit());\n+\t\t\t\t\t\treturn new PipeRunResult(null, new Message(\"\"));", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\nindex 5885bad23..17b100c1a 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\n\n@@ -466,7 +466,7 @@ public abstract class JdbcQuerySenderBase<H> extends JdbcSenderBase<H> {\n \t\t\t\tResultSetMetaData rsmeta = resultset.getMetaData();\n \t\t\t\tint numberOfColumns = rsmeta.getColumnCount();\n \t\t\t\tif(numberOfColumns > 1) {\n-\t\t\t\t\tlog.warn(getLogPrefix() + \"has set scalar=true. However, the resultset contains [\"+numberOfColumns+\"] columns. Consider optimizing the query.\");\n+\t\t\t\t\tlog.warn(getLogPrefix() + \"has set scalar=true but the resultset contains [\"+numberOfColumns+\"] columns. Consider optimizing the query.\");\n \t\t\t\t}\n \t\t\t\tif (JdbcUtil.isBlobType(resultset, 1, rsmeta)) {\n \t\t\t\t\tif (response!=null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1Njk2MQ==", "url": "https://github.com/ibissource/iaf/pull/1275#discussion_r526756961", "bodyText": "has set scalar=true and the query returned more than 1 row.", "author": "nielsm5", "createdAt": "2020-11-19T10:35:32Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java", "diffHunk": "@@ -520,24 +519,29 @@ else if (\"encode\".equalsIgnoreCase(getBlobBase64Direction())) {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (resultset.next()) {\n-\t\t\t\t\tlog.warn(getLogPrefix() + \"has the [scalar]=true. However, the query returns more than 1 row. Consider optimizing the query.\");\n+\t\t\t\t\tlog.warn(getLogPrefix() + \"has set scalar=true. However, the query returns more than 1 row. Consider optimizing the query.\");", "originalCommit": "5a2c2182b0cf8da3e7e7e36feec38235483062f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c60f8ea0473439710228cdb9374b60010d71bba", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\nindex 5885bad23..17b100c1a 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcQuerySenderBase.java\n\n@@ -519,7 +519,7 @@ public abstract class JdbcQuerySenderBase<H> extends JdbcSenderBase<H> {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (resultset.next()) {\n-\t\t\t\t\tlog.warn(getLogPrefix() + \"has set scalar=true. However, the query returns more than 1 row. Consider optimizing the query.\");\n+\t\t\t\t\tlog.warn(getLogPrefix() + \"has set scalar=true but the query returned more than 1 row. Consider optimizing the query.\");\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tif (isScalarExtended()) {\n"}}, {"oid": "2c60f8ea0473439710228cdb9374b60010d71bba", "url": "https://github.com/ibissource/iaf/commit/2c60f8ea0473439710228cdb9374b60010d71bba", "message": "Fix issues", "committedDate": "2020-11-19T11:20:31Z", "type": "commit"}, {"oid": "9628ad2a8567fede570151f78e87a11f29818fd5", "url": "https://github.com/ibissource/iaf/commit/9628ad2a8567fede570151f78e87a11f29818fd5", "message": "Fix streaming output handling of BLOBs", "committedDate": "2020-11-19T13:34:54Z", "type": "commit"}]}