{"pr_number": 1208, "pr_title": "Add size method to Message class", "pr_createdAt": "2020-10-26T15:41:05Z", "pr_url": "https://github.com/ibissource/iaf/pull/1208", "timeline": [{"oid": "10a3c0a5599ce8de0673faac1457daf53498fa25", "url": "https://github.com/ibissource/iaf/commit/10a3c0a5599ce8de0673faac1457daf53498fa25", "message": "Add size method to Message class", "committedDate": "2020-10-26T15:40:22Z", "type": "commit"}, {"oid": "86c88facaa39fe1fb9ea665c70fb800d9fbc52ce", "url": "https://github.com/ibissource/iaf/commit/86c88facaa39fe1fb9ea665c70fb800d9fbc52ce", "message": "Fix codacy issues", "committedDate": "2020-10-26T16:28:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2Njg1Ng==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r512466856", "bodyText": "Volgens mij moet je length() op de onderliggende byteArray doen.", "author": "gvanbrakel", "createdAt": "2020-10-27T07:32:13Z", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +415,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tif (request instanceof FileInputStream) {\n+\t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n+\t\t\t\treturn fileStream.getChannel().size();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlog.debug(\"unable to determine size of stream [\"+ClassUtils.nameOf(request)+\"]\", e);\n+\t\t}\n+\n+\t\tif (request instanceof ByteArrayInputStream) {\n+\t\t\treturn ((ByteArrayInputStream) request).available();", "originalCommit": "86c88facaa39fe1fb9ea665c70fb800d9fbc52ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "10225e817fcdd713e5e69e70772e4063a1ae1088", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/stream/Message.java b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\nindex 924dc4cd8..30c9e5f32 100644\n--- a/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n+++ b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n\n@@ -418,7 +418,7 @@ public class Message implements Serializable {\n \t/**\n \t * @return Message size or -1 if it can't determine the size.\n \t */\n-\tpublic long size() {\n+\tpublic long size() { //TODO implement local file urls\n \t\tif(request == null) {\n \t\t\treturn -1;\n \t\t}\n"}}, {"oid": "10225e817fcdd713e5e69e70772e4063a1ae1088", "url": "https://github.com/ibissource/iaf/commit/10225e817fcdd713e5e69e70772e4063a1ae1088", "message": "Refactor some bits...", "committedDate": "2020-10-27T14:04:24Z", "type": "commit"}, {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768", "url": "https://github.com/ibissource/iaf/commit/91f630c849f891da44f2e4e21c135fd7cffaf768", "message": "Fix a few issues", "committedDate": "2020-10-27T16:18:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1Mjk3Ng==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513352976", "bodyText": "Voor deze aanpassing hoef je de serialVersionUID niet aan te passen.", "author": "gvanbrakel", "createdAt": "2020-10-28T10:59:30Z", "path": "core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java", "diffHunk": "@@ -33,7 +33,7 @@\n  */\n public class InputStreamAttachmentPart extends AttachmentPart {\n \n-\tprivate static final long serialVersionUID = 1L;\n+\tprivate static final long serialVersionUID = 2L;", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "789c073b82f10a275ccb18003c215a7cccfe6423", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java b/core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java\nindex a8956393c..09b568e17 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java\n\n@@ -33,7 +33,7 @@ import org.apache.axis.attachments.AttachmentPart;\n  */\n public class InputStreamAttachmentPart extends AttachmentPart {\n \n-\tprivate static final long serialVersionUID = 2L;\n+\tprivate static final long serialVersionUID = 1L;\n \n \tpublic InputStreamAttachmentPart(javax.xml.soap.AttachmentPart attachment) throws SOAPException {\n \t\t//Init a super class with current attachment dataHandler to keep the content\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NTA5MA==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513355090", "bodyText": "Maar nu zit er opeens een message in die session variable, in plaats van een byte array!", "author": "gvanbrakel", "createdAt": "2020-10-28T11:03:12Z", "path": "core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java", "diffHunk": "@@ -221,8 +221,8 @@ public void simpleByteArrayInSessionKeyMockedHttpPost() throws Exception {\n \t\tString result = sender.sendMessage(new Message(\"tralala\"), pls).asString();\n \t\tassertEquals(null, result);\n \n-\t\tbyte[] byteArray = (byte[])pls.get(SESSIONKEY_KEY);\n-\t\tassertEquals(\"<dummy result/>\", new String(byteArray, \"UTF-8\"));\n+\t\tMessage message = (Message)pls.get(SESSIONKEY_KEY);\n+\t\tassertEquals(\"<dummy result/>\", message.asString());", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "789c073b82f10a275ccb18003c215a7cccfe6423", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java b/core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java\nindex 026838668..ca4bd7bbb 100644\n--- a/core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java\n\n@@ -221,8 +221,8 @@ public class HttpSenderResultTest extends Mockito {\n \t\tString result = sender.sendMessage(new Message(\"tralala\"), pls).asString();\n \t\tassertEquals(null, result);\n \n-\t\tMessage message = (Message)pls.get(SESSIONKEY_KEY);\n-\t\tassertEquals(\"<dummy result/>\", message.asString());\n+\t\tbyte[] byteArray = (byte[])pls.get(SESSIONKEY_KEY);\n+\t\tassertEquals(\"<dummy result/>\", new String(byteArray, \"UTF-8\"));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NjgyMg==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513356822", "bodyText": "Waarom?", "author": "gvanbrakel", "createdAt": "2020-10-28T11:06:03Z", "path": "core/src/test/java/nl/nn/adapterframework/stream/MessageTest.java", "diffHunk": "@@ -388,7 +388,7 @@ public void testSerializeWithURL() throws Exception {\n \t\tfolder.create();\n \t\tFile file = folder.newFile();\n \t\twriteContentsToFile(file, testString);\n-\t\tURL source = file.toURL();\n+\t\tURL source = file.toURI().toURL();", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMTA3NQ==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513401075", "bodyText": "Javadoc zegt deprecated", "author": "nielsm5", "createdAt": "2020-10-28T12:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NjgyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NzYxNg==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513357616", "bodyText": "Deze moet dan toch voor regel 424", "author": "gvanbrakel", "createdAt": "2020-10-28T11:07:30Z", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +414,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tif(request instanceof InputStream || request instanceof Reader) {\n+\t\t\treturn -1; //Unable to determine the size of a Stream\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tif (request instanceof FileInputStream) {\n+\t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n+\t\t\t\treturn fileStream.getChannel().size();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlog.debug(\"unable to determine size of stream [\"+ClassUtils.nameOf(request)+\"]\", e);\n+\t\t}", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjI3MA==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513402270", "bodyText": "En gelijk een test voor maken!", "author": "nielsm5", "createdAt": "2020-10-28T12:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NzYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "789c073b82f10a275ccb18003c215a7cccfe6423", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/stream/Message.java b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\nindex 704df8540..e0d8990a8 100644\n--- a/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n+++ b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n\n@@ -421,10 +421,6 @@ public class Message implements Serializable {\n \t\tif(request == null) {\n \t\t\treturn -1;\n \t\t}\n-\t\tif(request instanceof InputStream || request instanceof Reader) {\n-\t\t\treturn -1; //Unable to determine the size of a Stream\n-\t\t}\n-\n \t\ttry {\n \t\t\tif (request instanceof FileInputStream) {\n \t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1ODM1NQ==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513358355", "bodyText": "Hoeft niet te veranderen, toch?", "author": "gvanbrakel", "createdAt": "2020-10-28T11:08:53Z", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -30,18 +30,19 @@\n import javax.xml.transform.Source;\n \n import org.apache.commons.io.input.ReaderInputStream;\n-import org.apache.logging.log4j.Logger;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n import org.xml.sax.InputSource;\n import org.xml.sax.SAXException;\n \n+import nl.nn.adapterframework.util.ClassUtils;\n import nl.nn.adapterframework.util.LogUtil;\n import nl.nn.adapterframework.util.StreamUtil;\n import nl.nn.adapterframework.util.XmlUtils;\n \n public class Message implements Serializable {\n \n-\tprivate static final long serialVersionUID = 437863352486501445L;\n+\tprivate static final long serialVersionUID = 437863352486501446L;", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjc3Ng==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513402776", "bodyText": "Had oorspronkelijk iets met de charset gedaan, maar toen ik zag dat jij het anders had opgelost teruggedraaid. Zal deze ook reverten!", "author": "nielsm5", "createdAt": "2020-10-28T12:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1ODM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "789c073b82f10a275ccb18003c215a7cccfe6423", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/stream/Message.java b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\nindex 704df8540..e0d8990a8 100644\n--- a/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n+++ b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n\n@@ -42,7 +42,7 @@ import nl.nn.adapterframework.util.XmlUtils;\n \n public class Message implements Serializable {\n \n-\tprivate static final long serialVersionUID = 437863352486501446L;\n+\tprivate static final long serialVersionUID = 437863352486501445L;\n \n \tprotected transient Logger log = LogUtil.getLogger(this);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4OTYxOQ==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513389619", "bodyText": "Je stopt nu een Message in de sessie, in plaats van een Stream of byte array. Het is maar de vraag of de ontvangende partijen daarmee om kunnen gaan.", "author": "gvanbrakel", "createdAt": "2020-10-28T12:05:18Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -546,36 +551,30 @@ protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSe\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new SenderException(\"cannot find filename to stream result to\", e);\n \t\t\t\t}\n-\t\t\t} else if (isBase64()) {\n+\t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n-\t\t\t\treturn Message.nullMessage();\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n+\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n+\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n+\t\t\t\tsession.put(storeResultInSessionKey, message);", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNzE3Mw==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513407173", "bodyText": "Gelukkig is dat wel het geval. Deze wordt namelijk als parameter meegegeven, en die kan met Message objecten overweg. Zal hier nog een extra test voor maken.", "author": "nielsm5", "createdAt": "2020-10-28T12:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4OTYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "789c073b82f10a275ccb18003c215a7cccfe6423", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\nindex 357fb3d1c..62ea624f3 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n\n@@ -553,9 +548,11 @@ public class HttpSender extends HttpSenderBase {\n \t\t\t\t}\n \t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n-\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n-\t\t\t\tsession.put(storeResultInSessionKey, message);\n+\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n+\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n+\t\t\t\treturn Message.nullMessage();\n+\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n+\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n \t\t\t\treturn Message.nullMessage();\n \t\t\t} else if (BooleanUtils.isTrue(isMultipartResponse()) || responseHandler.isMultipart()) {\n \t\t\t\tif(BooleanUtils.isFalse(isMultipartResponse())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5MTEwNA==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513391104", "bodyText": "Je hebt nu het optionele niet throwen van excepties verplaatst naar try { } catches van de aanroepers. Waarom?", "author": "gvanbrakel", "createdAt": "2020-10-28T12:07:55Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -546,36 +551,30 @@ protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSe\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new SenderException(\"cannot find filename to stream result to\", e);\n \t\t\t\t}\n-\t\t\t} else if (isBase64()) {\n+\t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n-\t\t\t\treturn Message.nullMessage();\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n+\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n+\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n+\t\t\t\tsession.put(storeResultInSessionKey, message);\n \t\t\t\treturn Message.nullMessage();\n \t\t\t} else if (BooleanUtils.isTrue(isMultipartResponse()) || responseHandler.isMultipart()) {\n \t\t\t\tif(BooleanUtils.isFalse(isMultipartResponse())) {\n \t\t\t\t\tlog.warn(\"multipart response was set to false, but the response is multipart!\");\n \t\t\t\t}\n \t\t\t\treturn handleMultipartResponse(responseHandler, session);\n \t\t\t} else {\n-\t\t\t\t//TODO remove getResponseBodyAsString method and return a Message object\n-\t\t\t\treturn Message.asMessage(getResponseBodyAsString(responseHandler, true));\n+\t\t\t\treturn getResponseBody(responseHandler);\n \t\t\t}\n \t\t} else {\n \t\t\tstreamResponseBody(responseHandler, response);\n \t\t\treturn Message.nullMessage();\n \t\t}\n \t}\n \n-\t/**\n-\t * When an exception occurs and the response cannot be parsed, we do not want to throw a 'missing response' exception. \n-\t * Since this method is used when handling other exceptions thrown by {@link WebServiceSender} and {@link HttpSender} , silently return null, to avoid npe's, ioexceptions etc.\n-\t */\n-\tpublic String getResponseBodyAsString(HttpResponseHandler responseHandler, boolean throwIOExceptionWhenParsingResponse) throws IOException {\n+\tpublic Message getResponseBody(HttpResponseHandler responseHandler) {", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "789c073b82f10a275ccb18003c215a7cccfe6423", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\nindex 357fb3d1c..62ea624f3 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n\n@@ -553,9 +548,11 @@ public class HttpSender extends HttpSenderBase {\n \t\t\t\t}\n \t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n-\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n-\t\t\t\tsession.put(storeResultInSessionKey, message);\n+\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n+\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n+\t\t\t\treturn Message.nullMessage();\n+\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n+\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n \t\t\t\treturn Message.nullMessage();\n \t\t\t} else if (BooleanUtils.isTrue(isMultipartResponse()) || responseHandler.isMultipart()) {\n \t\t\t\tif(BooleanUtils.isFalse(isMultipartResponse())) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5MjA1NA==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513392054", "bodyText": "Je stopt hier een Message in de sessie, in plaats van een byte array. Het is maar de vraag of de ontvangende partij daarmee om kan gaan.", "author": "gvanbrakel", "createdAt": "2020-10-28T12:09:31Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java", "diffHunk": "@@ -99,28 +98,28 @@ public Message extractMessage(Item rawMessage, Map<String,Object> threadContext)\n \t\tif (!EMAIL_MESSAGE_TYPE.equals(getMessageType())) {\n \t\t\treturn super.extractMessage(rawMessage, threadContext);\n \t\t}\n-\t\tItem item = (Item) rawMessage;\n+\n \t\ttry {\n \t\t\tXmlBuilder emailXml = new XmlBuilder(\"email\");\n \t\t\tEmailMessage emailMessage;\n \t\t\tPropertySet ps;\n \t\t\tif (isSimple()) {\n \t\t\t\tps = new PropertySet(EmailMessageSchema.Subject);\n-\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), item.getId(), ps);\n+\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), rawMessage.getId(), ps);\n \t\t\t\temailMessage.load();\n \t\t\t\taddEmailInfoSimple(emailMessage, emailXml);\n \t\t\t} else {\n \t\t\t\tps = new PropertySet(EmailMessageSchema.DateTimeReceived, EmailMessageSchema.From, EmailMessageSchema.Subject, EmailMessageSchema.Body, EmailMessageSchema.DateTimeSent);\n-\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), item.getId(), ps);\n+\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), rawMessage.getId(), ps);\n \t\t\t\temailMessage.load();\n \t\t\t\taddEmailInfo(emailMessage, emailXml);\n \t\t\t}\n \n-\t\t\tif (StringUtils.isNotEmpty(getStoreEmailAsStreamInSessionKey())) {\n+\t\t\tif (StringUtils.isNotEmpty(getStoreEmailInSessionKey())) {\n \t\t\t\temailMessage.load(new PropertySet(ItemSchema.MimeContent));\n \t\t\t\tMimeContent mc = emailMessage.getMimeContent();\n-\t\t\t\tByteArrayInputStream bis = new ByteArrayInputStream(mc.getContent());\n-\t\t\t\tthreadContext.put(getStoreEmailAsStreamInSessionKey(), bis);\n+\t\t\t\tMessage message = new Message(mc.getContent(), mc.getCharacterSet());\n+\t\t\t\tthreadContext.put(getStoreEmailInSessionKey(), message);", "originalCommit": "91f630c849f891da44f2e4e21c135fd7cffaf768", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c41983eb2fed389ae1af9befc9df0371a9e51c15", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java b/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java\nindex ea69bd370..5c37c7d78 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java\n\n@@ -79,19 +80,28 @@ public class ExchangeMailListener extends FileSystemListener<Item,ExchangeFileSy\n \n \tpublic final String EMAIL_MESSAGE_TYPE=\"email\";\n \tpublic final String EXCHANGE_FILE_SYSTEM =\"nl.nn.adapterframework.filesystem.ExchangeFileSystem\";\n-\t\n+\n+\tprivate String storeEmailAsStreamInSessionKey;\n \tprivate String storeEmailInSessionKey;\n \tprivate boolean simple = false;\n-\t\n+\n \t{\n \t\tsetMessageType(EMAIL_MESSAGE_TYPE);\n \t}\n-\t\n+\n \t@Override\n \tprotected ExchangeFileSystem createFileSystem() {\n \t\treturn new ExchangeFileSystem();\n \t}\n \n+\t@Override\n+\tpublic void configure() throws ConfigurationException {\n+\t\tsuper.configure();\n+\n+\t\tif (StringUtils.isNotEmpty(getStoreEmailAsStreamInSessionKey()) && StringUtils.isNotEmpty(getStoreEmailInSessionKey())) {\n+\t\t\tthrow new ConfigurationException(\"not allowed to set both storeEmailAsStreamInSessionKey and storeEmailInSessionKey simultaneously\");\n+\t\t}\n+\t}\n \n \t@Override\n \tpublic Message extractMessage(Item rawMessage, Map<String,Object> threadContext) throws ListenerException {\n"}}, {"oid": "789c073b82f10a275ccb18003c215a7cccfe6423", "url": "https://github.com/ibissource/iaf/commit/789c073b82f10a275ccb18003c215a7cccfe6423", "message": "Revert some opportunistic changes", "committedDate": "2020-10-28T15:00:57Z", "type": "commit"}, {"oid": "c41983eb2fed389ae1af9befc9df0371a9e51c15", "url": "https://github.com/ibissource/iaf/commit/c41983eb2fed389ae1af9befc9df0371a9e51c15", "message": "Make ExchangeMailListener backwards compatible", "committedDate": "2020-10-28T15:22:31Z", "type": "commit"}, {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "url": "https://github.com/ibissource/iaf/commit/db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "message": "Fix Junit test", "committedDate": "2020-10-28T15:24:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5ODgwMQ==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513598801", "bodyText": "warning moet gaan over dat het niet meer nodig is om result in session te bewaren, want resultaat van sender mag nu ook stream zijn", "author": "gvanbrakel", "createdAt": "2020-10-28T16:43:38Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -734,33 +730,39 @@ public boolean isIgnoreRedirects() {\n \t\treturn ignoreRedirects;\n \t}\n \n-\tpublic String getStreamResultToFileNameSessionKey() {\n-\t\treturn streamResultToFileNameSessionKey;\n-\t}\n-\n \t@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"remove this attribute and use a LocalFileSystemPipe as next pipe to save the contents as a file\")\n \tpublic void setStreamResultToFileNameSessionKey(String string) {\n \t\tstreamResultToFileNameSessionKey = string;\n \t}\n-\n-\tpublic String getStoreResultAsStreamInSessionKey() {\n-\t\treturn storeResultAsStreamInSessionKey;\n+\tpublic String getStreamResultToFileNameSessionKey() {\n+\t\treturn streamResultToFileNameSessionKey;\n \t}\n \n \t@IbisDoc({\"if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey on the MessageSendingPipe instead\")", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\nindex 62ea624f3..9b59322dd 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n\n@@ -732,7 +732,7 @@ public class HttpSender extends HttpSenderBase {\n \n \t@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"})\n \t@Deprecated\n-\t@ConfigurationWarning(\"remove this attribute and use a LocalFileSystemPipe as next pipe to save the contents as a file\")\n+\t@ConfigurationWarning(\"no longer required to store the result as a file in the PipeLineSession, the sender can return binary data\")\n \tpublic void setStreamResultToFileNameSessionKey(String string) {\n \t\tstreamResultToFileNameSessionKey = string;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5OTU1MQ==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513599551", "bodyText": "Ook hier zeggen dat bewaren in sessionKey niet meer nodig is.", "author": "gvanbrakel", "createdAt": "2020-10-28T16:44:36Z", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -734,33 +730,39 @@ public boolean isIgnoreRedirects() {\n \t\treturn ignoreRedirects;\n \t}\n \n-\tpublic String getStreamResultToFileNameSessionKey() {\n-\t\treturn streamResultToFileNameSessionKey;\n-\t}\n-\n \t@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"remove this attribute and use a LocalFileSystemPipe as next pipe to save the contents as a file\")\n \tpublic void setStreamResultToFileNameSessionKey(String string) {\n \t\tstreamResultToFileNameSessionKey = string;\n \t}\n-\n-\tpublic String getStoreResultAsStreamInSessionKey() {\n-\t\treturn storeResultAsStreamInSessionKey;\n+\tpublic String getStreamResultToFileNameSessionKey() {\n+\t\treturn streamResultToFileNameSessionKey;\n \t}\n \n \t@IbisDoc({\"if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey on the MessageSendingPipe instead\")\n \tpublic void setStoreResultAsStreamInSessionKey(String storeResultAsStreamInSessionKey) {\n \t\tthis.storeResultAsStreamInSessionKey = storeResultAsStreamInSessionKey;\n \t}\n-\n-\tpublic String getStoreResultAsByteArrayInSessionKey() {\n-\t\treturn storeResultAsByteArrayInSessionKey;\n+\tpublic String getStoreResultAsStreamInSessionKey() {\n+\t\treturn storeResultAsStreamInSessionKey;\n \t}\n+\n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey on the MessageSendingPipe instead\")", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\nindex 62ea624f3..9b59322dd 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/HttpSender.java\n\n@@ -732,7 +732,7 @@ public class HttpSender extends HttpSenderBase {\n \n \t@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"})\n \t@Deprecated\n-\t@ConfigurationWarning(\"remove this attribute and use a LocalFileSystemPipe as next pipe to save the contents as a file\")\n+\t@ConfigurationWarning(\"no longer required to store the result as a file in the PipeLineSession, the sender can return binary data\")\n \tpublic void setStreamResultToFileNameSessionKey(String string) {\n \t\tstreamResultToFileNameSessionKey = string;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNTIyNw==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513605227", "bodyText": "Maar toch is dit niet helemaal jofel, want op regel 427/429 en 438/440 kunnen nog transformaties gedaan worden, die je zou willen doen met message.getSource(),", "author": "gvanbrakel", "createdAt": "2020-10-28T16:52:22Z", "path": "core/src/main/java/nl/nn/adapterframework/parameters/Parameter.java", "diffHunk": "@@ -377,7 +377,7 @@ public Object getValue(ParameterValueList alreadyResolvedParameters, Message mes\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif (result !=null && result instanceof Message && ((Message)result).asObject() instanceof String) {\n+\t\tif (result !=null && result instanceof Message) {", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNzAyOQ==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513607029", "bodyText": "Is het niet een beetje overdreven om op elke Pipe telkens zowel request als response te checken?", "author": "gvanbrakel", "createdAt": "2020-10-28T16:54:43Z", "path": "core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java", "diffHunk": "@@ -30,19 +30,32 @@\n  * @author Jaco de Groot\n  */\n public class CheckMessageSizePipeProcessor extends PipeProcessorBase {\n-\t\n+\n \t@Override\n \tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession ) throws PipeRunException {\n-\t\tcheckMessageSize(message, pipeLine, pipe, true);\n+\t\tcheckMessageSize(getMessageLength(message), pipeLine, pipe, true);\n \t\tPipeRunResult pipeRunResult = pipeProcessor.processPipe(pipeLine, pipe, message, pipeLineSession);\n+\n \t\tMessage result = pipeRunResult.getResult();\n-\t\tcheckMessageSize(result.asObject(), pipeLine, pipe, false);\n+\t\tcheckMessageSize(result.size(), pipeLine, pipe, false);", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java b/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java\nindex ee5f189ed..1a62f35fa 100644\n--- a/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java\n\n@@ -32,8 +32,8 @@ import nl.nn.adapterframework.util.Misc;\n public class CheckMessageSizePipeProcessor extends PipeProcessorBase {\n \n \t@Override\n-\tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession ) throws PipeRunException {\n-\t\tcheckMessageSize(getMessageLength(message), pipeLine, pipe, true);\n+\tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession) throws PipeRunException {\n+\t\tcheckMessageSize(message.size(), pipeLine, pipe, true);\n \t\tPipeRunResult pipeRunResult = pipeProcessor.processPipe(pipeLine, pipe, message, pipeLineSession);\n \n \t\tMessage result = pipeRunResult.getResult();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwODE5OA==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513608198", "bodyText": "Als je de check op het request wilt handhaven, dan kan je daar ook message.size() gebruiken", "author": "gvanbrakel", "createdAt": "2020-10-28T16:56:09Z", "path": "core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java", "diffHunk": "@@ -30,19 +30,32 @@\n  * @author Jaco de Groot\n  */\n public class CheckMessageSizePipeProcessor extends PipeProcessorBase {\n-\t\n+\n \t@Override\n \tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession ) throws PipeRunException {\n-\t\tcheckMessageSize(message, pipeLine, pipe, true);\n+\t\tcheckMessageSize(getMessageLength(message), pipeLine, pipe, true);\n \t\tPipeRunResult pipeRunResult = pipeProcessor.processPipe(pipeLine, pipe, message, pipeLineSession);\n+\n \t\tMessage result = pipeRunResult.getResult();\n-\t\tcheckMessageSize(result.asObject(), pipeLine, pipe, false);\n+\t\tcheckMessageSize(result.size(), pipeLine, pipe, false);\n \t\treturn pipeRunResult;\n \t}\n \n-\tprivate void checkMessageSize(Object message, PipeLine pipeLine, IPipe pipe, boolean input) {\n-\t\tif (message!=null && message instanceof String) {\n-\t\t\tint messageLength = message.toString().length();\n+\tprivate long getMessageLength(Object message) {", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java b/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java\nindex ee5f189ed..1a62f35fa 100644\n--- a/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java\n+++ b/core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java\n\n@@ -32,8 +32,8 @@ import nl.nn.adapterframework.util.Misc;\n public class CheckMessageSizePipeProcessor extends PipeProcessorBase {\n \n \t@Override\n-\tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession ) throws PipeRunException {\n-\t\tcheckMessageSize(getMessageLength(message), pipeLine, pipe, true);\n+\tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession) throws PipeRunException {\n+\t\tcheckMessageSize(message.size(), pipeLine, pipe, true);\n \t\tPipeRunResult pipeRunResult = pipeProcessor.processPipe(pipeLine, pipe, message, pipeLineSession);\n \n \t\tMessage result = pipeRunResult.getResult();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTE4Mg==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513611182", "bodyText": "Deze functionaliteit is helemaal niet nodig. Als je meteen al over de email wil beschikken, dan kan je gewoon messageType op 'contents' zetten. Dat moet dan ook in de deprecated-warnings staan, en deze nieuwe optie moet weg.", "author": "gvanbrakel", "createdAt": "2020-10-28T17:00:07Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java", "diffHunk": "@@ -329,12 +344,21 @@ public boolean isSimple() {\n \t\treturn simple;\n \t}\n \n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey instead\")\n \tpublic void setStoreEmailAsStreamInSessionKey(String string) {\n \t\tstoreEmailAsStreamInSessionKey = string;\n \t}\n \tpublic String getStoreEmailAsStreamInSessionKey() {\n \t\treturn storeEmailAsStreamInSessionKey;\n \t}\n \n+\tpublic void setStoreEmailInSessionKey(String string) {\n+\t\tstoreEmailInSessionKey = string;\n+\t}\n+\tpublic String getStoreEmailInSessionKey() {\n+\t\treturn storeEmailInSessionKey;\n+\t}", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java b/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java\nindex 5c37c7d78..12ee66236 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java\n\n@@ -344,8 +329,6 @@ public class ExchangeMailListener extends FileSystemListener<Item,ExchangeFileSy\n \t\treturn simple;\n \t}\n \n-\t@Deprecated\n-\t@ConfigurationWarning(\"use storeResultInSessionKey instead\")\n \tpublic void setStoreEmailAsStreamInSessionKey(String string) {\n \t\tstoreEmailAsStreamInSessionKey = string;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTY1Mw==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513611653", "bodyText": "Is dit dan niet 0? -1 betekent \"ik weet het niet\"", "author": "gvanbrakel", "createdAt": "2020-10-28T17:00:47Z", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +414,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;", "originalCommit": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4OTk0NA==", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r514089944", "bodyText": "Ja potverdorie je hebt helemaal gelijk", "author": "nielsm5", "createdAt": "2020-10-29T08:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTY1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/stream/Message.java b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\nindex e0d8990a8..c5950bd7f 100644\n--- a/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n+++ b/core/src/main/java/nl/nn/adapterframework/stream/Message.java\n\n@@ -419,8 +419,9 @@ public class Message implements Serializable {\n \t */\n \tpublic long size() {\n \t\tif(request == null) {\n-\t\t\treturn -1;\n+\t\t\treturn 0;\n \t\t}\n+\n \t\ttry {\n \t\t\tif (request instanceof FileInputStream) {\n \t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n"}}, {"oid": "c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "url": "https://github.com/ibissource/iaf/commit/c478f4e7697bc74363a2dfdd89356f2ff20ea81c", "message": "Fix feedback and revert ExchangeMailListener", "committedDate": "2020-10-29T09:32:15Z", "type": "commit"}]}