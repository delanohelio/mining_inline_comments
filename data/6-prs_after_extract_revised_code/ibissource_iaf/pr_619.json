{"pr_number": 619, "pr_title": "the sql injection not secure was replaced by 'getMetaData'", "pr_createdAt": "2020-04-20T07:29:41Z", "pr_url": "https://github.com/ibissource/iaf/pull/619", "timeline": [{"oid": "3b4042cf3cdfb30b111acc18932be85022d78839", "url": "https://github.com/ibissource/iaf/commit/3b4042cf3cdfb30b111acc18932be85022d78839", "message": "the sql injection not secure was replaced by 'getMetaData'", "committedDate": "2020-04-20T07:26:16Z", "type": "commit"}, {"oid": "3b65c789575f47e15ce2cfe268d52662b1ab94af", "url": "https://github.com/ibissource/iaf/commit/3b65c789575f47e15ce2cfe268d52662b1ab94af", "message": "Merge branch 'master' into remove-sql-injection", "committedDate": "2020-04-24T12:39:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2Njc0Mw==", "url": "https://github.com/ibissource/iaf/pull/619#discussion_r416466743", "bodyText": "doIsTablePresent() should not be public. It is there to enable subclasses to provide an alternative implementation for isTablePresent, if the generic implementation does not work for them.\nPlease convert the original implementation using a literal query to a query using parameters.\nPlease also remove the implementation of of isTablePresent(), (that call doIsTablePresent()) from H2DbmsSupport, MsSqlServerDbmsSupport and OracleDbmsSupport, so that they will use the default using getMetaData()", "author": "gvanbrakel", "createdAt": "2020-04-28T09:27:12Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "diffHunk": "@@ -269,102 +266,91 @@ public String getSchema(Connection conn) throws JdbcException {\n \t\treturn null;\n \t}\n \n-\tprotected boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n-\t\tString query=\"select count(*) from \"+tablesTable+\" where upper(\"+tableNameColumn+\")=?\";\n+\tpublic boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {", "originalCommit": "3b65c789575f47e15ce2cfe268d52662b1ab94af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbd0f1c818ae63e23af3bc984f2ed9db16433cd1", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\nindex bd1ee21c9..cd6051671 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\n\n@@ -266,7 +266,7 @@ public class GenericDbmsSupport implements IDbmsSupport {\n \t\treturn null;\n \t}\n \n-\tpublic boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n+\tprotected boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n \t\tboolean isPresent = Boolean.FALSE;\n \t\tif (StringUtils.isNotEmpty(schemaName)) {\n \t\t\tif (StringUtils.isNotEmpty(schemaColumn)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3NTUxMQ==", "url": "https://github.com/ibissource/iaf/pull/619#discussion_r416475511", "bodyText": "Please have a look at the original code. You should use isAfterLast() instead of next()", "author": "gvanbrakel", "createdAt": "2020-04-28T09:41:04Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "diffHunk": "@@ -269,102 +266,91 @@ public String getSchema(Connection conn) throws JdbcException {\n \t\treturn null;\n \t}\n \n-\tprotected boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n-\t\tString query=\"select count(*) from \"+tablesTable+\" where upper(\"+tableNameColumn+\")=?\";\n+\tpublic boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n+\t\tboolean isPresent = Boolean.FALSE;\n \t\tif (StringUtils.isNotEmpty(schemaName)) {\n \t\t\tif (StringUtils.isNotEmpty(schemaColumn)) {\n-\t\t\t\tquery+=\" and upper(\"+schemaColumn+\")='\"+schemaName.toUpperCase()+\"'\";\n+\t\t\t\tisPresent = this.isTablePresent(conn, tablesTable, schemaColumn);\n \t\t\t} else {\n \t\t\t\tthrow new JdbcException(\"no schemaColumn present in table [\"+tablesTable+\"] to test for presence of table [\"+tableName+\"] in schema [\"+schemaName+\"]\");\n \t\t\t}\n \t\t}\n \t\ttry {\n-\t\t\treturn JdbcUtil.executeIntQuery(conn, query, tableName.toUpperCase())>=1;\n+\t\t\tisPresent = this.isTablePresent(conn, tablesTable);\n \t\t} catch (Exception e) {\n \t\t\tlog.warn(\"could not determine presence of table [\"+tableName+\"]\",e);\n-\t\t\treturn false;\n \t\t}\n+\t\treturn isPresent;\n \t}\n \n-\tprivate final boolean useMetaDataForTableExists=false;\n+\t\n \t@Override\n \tpublic boolean isTablePresent(Connection conn, String tableName) throws JdbcException {\n-\t\ttry {\n-\t\t\tPreparedStatement stmt = null;\n-\t\t\tif (useMetaDataForTableExists) {\n-\t\t\t\tDatabaseMetaData dbmeta = conn.getMetaData();\n-\t\t\t\tResultSet tableset = dbmeta.getTables(null, null, tableName, null);\n-\t\t\t\treturn !tableset.isAfterLast();\n-\t\t\t} \n-\t\t\tString query=null;\n+\t    return isTablePresent(conn, tableName, null);\n+\t}\n+\t\n+\tprivate boolean isTablePresent(Connection conn, String tableName, String schemaName) throws JdbcException {\n+\t\tboolean tExists = Boolean.FALSE;\n+\t\tResultSet rs = null;\n+\t    try {\n+\t    \trs = conn.getMetaData().getTables(null, schemaName, tableName, null);\n+\t    \ttExists = rs.next();", "originalCommit": "3b65c789575f47e15ce2cfe268d52662b1ab94af", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbd0f1c818ae63e23af3bc984f2ed9db16433cd1", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\nindex bd1ee21c9..cd6051671 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\n\n@@ -266,7 +266,7 @@ public class GenericDbmsSupport implements IDbmsSupport {\n \t\treturn null;\n \t}\n \n-\tpublic boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n+\tprotected boolean doIsTablePresent(Connection conn, String tablesTable, String schemaColumn, String tableNameColumn, String schemaName, String tableName) throws JdbcException {\n \t\tboolean isPresent = Boolean.FALSE;\n \t\tif (StringUtils.isNotEmpty(schemaName)) {\n \t\t\tif (StringUtils.isNotEmpty(schemaColumn)) {\n"}}, {"oid": "bbd0f1c818ae63e23af3bc984f2ed9db16433cd1", "url": "https://github.com/ibissource/iaf/commit/bbd0f1c818ae63e23af3bc984f2ed9db16433cd1", "message": "'pull request' corrections", "committedDate": "2020-05-03T12:45:06Z", "type": "commit"}, {"oid": "58a7e116659966c9efec3954b3f72076011dc32e", "url": "https://github.com/ibissource/iaf/commit/58a7e116659966c9efec3954b3f72076011dc32e", "message": "rs.next by was replaced by rs.isAfterLast", "committedDate": "2020-05-03T12:51:54Z", "type": "commit"}, {"oid": "03f2be886805d2191260875c8ca9ec5949071a2d", "url": "https://github.com/ibissource/iaf/commit/03f2be886805d2191260875c8ca9ec5949071a2d", "message": "minor fixes", "committedDate": "2020-05-04T07:18:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4NTkwNw==", "url": "https://github.com/ibissource/iaf/pull/619#discussion_r419385907", "bodyText": "doIsTableColumnPresent() should not call isColumnPresent(), because it is meant to provide a way to override isColumnPresent() in descender classes, like OracleDbmsSupport, H2DbmsSupport, MsSqlServerDbmsSupport.\nIn those classes it is currently used to override isColumntPresent().\nPlease:\n\nremove the implementations of doIsTableColumnPresent in OracleDbmsSupport, H2DbmsSupport and MsSqlServerDbmsSupport, to enable that they use the standard Jdbc solution.\nimplement doIsTableColumnPresent with the same queries, but then with placeholders ('?') and parameters instead of\nliterals.\n\nPlease run also iaf-test to see that your code runs correctly in a Frank application", "author": "gvanbrakel", "createdAt": "2020-05-04T12:03:27Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "diffHunk": "@@ -286,85 +284,69 @@ protected boolean doIsTablePresent(Connection conn, String tablesTable, String s\n \t\t}\n \t}\n \n-\tprivate final boolean useMetaDataForTableExists=false;\n \t@Override\n \tpublic boolean isTablePresent(Connection conn, String tableName) throws JdbcException {\n-\t\ttry {\n-\t\t\tPreparedStatement stmt = null;\n-\t\t\tif (useMetaDataForTableExists) {\n-\t\t\t\tDatabaseMetaData dbmeta = conn.getMetaData();\n-\t\t\t\tResultSet tableset = dbmeta.getTables(null, null, tableName, null);\n-\t\t\t\treturn !tableset.isAfterLast();\n-\t\t\t} \n-\t\t\tString query=null;\n+\t\tboolean tExists = Boolean.FALSE;\n+\t\tResultSet rs = null;\n+\t    try {\n+\t    \trs = conn.getMetaData().getTables(null, null, tableName, null);\n+\t    \ttExists = !rs.isAfterLast();\n+\t    }catch(SQLException e) {\n+\t    \tlog.error(\"exception checking for existence of table [\"+tableName+\"]\", e);\n+\t    \tthrow new JdbcException(e);\n+\t    }finally {\n \t\t\ttry {\n-\t\t\t\tquery=\"select count(*) from \"+tableName;\n-\t\t\t\tlog.debug(\"create statement to check for existence of [\"+tableName+\"] using query [\"+query+\"]\");\n-\t\t\t\tstmt = conn.prepareStatement(query);\n-\t\t\t\tlog.debug(\"execute statement\");\n-\t\t\t\tResultSet rs = stmt.executeQuery();\n-\t\t\t\tlog.debug(\"statement executed\");\n \t\t\t\trs.close();\n-\t\t\t\treturn true;\n-\t\t\t} catch (SQLException e) {\n-\t\t\t\tif (log.isDebugEnabled()) log.debug(\"exception checking for existence of [\"+tableName+\"] using query [\"+query+\"]\", e);\n-\t\t\t\treturn false;\n-\t\t\t} finally {\n-\t\t\t\tif (stmt!=null) {\n-\t\t\t\t\tstmt.close();\n-\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif (log.isDebugEnabled()) log.debug(\"there was an error closing the resulset\", e);\n \t\t\t}\n \t\t}\n-\t\tcatch(SQLException e) {\n-\t\t\tthrow new JdbcException(e);\n-\t\t}\n+\t    return tExists;\n \t}\n \n-\t@Override\n-\tpublic boolean isColumnPresent(Connection conn, String tableName, String columnName) throws SQLException {\n-\t\tPreparedStatement stmt = null;\n-\t\tString query=null;\n+\t\n+\tprivate boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws SQLException {\n+\t\tResultSet rs = null;\n+\t\tboolean cExists = Boolean.FALSE;\n \t\ttry {\n-\t\t\tquery = \"SELECT count(\" + columnName + \") FROM \" + tableName;\n-\t\t\tstmt = conn.prepareStatement(query);\n-\n-\t\t\tResultSet rs = null;\n+\t\t\trs = conn.getMetaData().getColumns(null, schemaName, tableName, columnName);\n+\t\t\tcExists = !rs.isAfterLast();\n+\t\t}catch(SQLException e) {\n+\t\t\tlog.warn(\"exception checking for existence of column [\"+columnName+\"] in table [\"+tableName+\"]\", e);\n+\t\t}finally {\n \t\t\ttry {\n-\t\t\t\trs = stmt.executeQuery();\n-\t\t\t\treturn true;\n-\t\t\t} catch (SQLException e) {\n-\t\t\t\tif (log.isDebugEnabled()) log.debug(\"exception checking for existence of column [\"+columnName+\"] in table [\"+tableName+\"] executing query [\"+query+\"]\", e);\n-\t\t\t\treturn false;\n-\t\t\t} finally {\n-\t\t\t\tif (rs != null) {\n-\t\t\t\t\trs.close();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (SQLException e) {\n-\t\t\tlog.warn(\"exception checking for existence of column [\"+columnName+\"] in table [\"+tableName+\"] preparing query [\"+query+\"]\", e);\n-\t\t\treturn false;\n-\t\t} finally {\n-\t\t\tif (stmt != null) {\n-\t\t\t\tstmt.close();\n+\t\t\t\trs.close();\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif (log.isDebugEnabled()) log.debug(\"there was an error closing the resulset\", e);\n \t\t\t}\n \t\t}\n+\t\treturn cExists;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isColumnPresent(Connection conn, String tableName, String columnName) throws SQLException {\n+\t\treturn this.isColumnPresent(conn, null, tableName, columnName);\n \t}\n \n \tprotected boolean doIsTableColumnPresent(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName) throws JdbcException {\n-\t\tString query=\"select count(*) from \"+columnsTable+\" where upper(\"+tableNameColumn+\")=? and upper(\"+columnNameColumn+\")=?\";\n+\t\tboolean isPresent = Boolean.FALSE;\n \t\tif (StringUtils.isNotEmpty(schemaName)) {\n \t\t\tif (StringUtils.isNotEmpty(schemaColumn)) {\n-\t\t\t\tquery+=\" and upper(\"+schemaColumn+\")='\"+schemaName.toUpperCase()+\"'\";\n+\t\t\t\ttry {\n+\t\t\t\t\tisPresent = this.isColumnPresent(conn, schemaColumn, tableName, columnName);", "originalCommit": "03f2be886805d2191260875c8ca9ec5949071a2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9549f3a4fc0f2743a3fbb6bcb5f5c8386cdbd001", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\nindex b00f3f008..97d63f098 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java\n\n@@ -284,75 +315,24 @@ public class GenericDbmsSupport implements IDbmsSupport {\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic boolean isTablePresent(Connection conn, String tableName) throws JdbcException {\n-\t\tboolean tExists = Boolean.FALSE;\n-\t\tResultSet rs = null;\n-\t    try {\n-\t    \trs = conn.getMetaData().getTables(null, null, tableName, null);\n-\t    \ttExists = !rs.isAfterLast();\n-\t    }catch(SQLException e) {\n-\t    \tlog.error(\"exception checking for existence of table [\"+tableName+\"]\", e);\n-\t    \tthrow new JdbcException(e);\n-\t    }finally {\n-\t\t\ttry {\n-\t\t\t\trs.close();\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tif (log.isDebugEnabled()) log.debug(\"there was an error closing the resulset\", e);\n-\t\t\t}\n-\t\t}\n-\t    return tExists;\n-\t}\n-\n-\t\n-\tprivate boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws SQLException {\n-\t\tResultSet rs = null;\n-\t\tboolean cExists = Boolean.FALSE;\n-\t\ttry {\n-\t\t\trs = conn.getMetaData().getColumns(null, schemaName, tableName, columnName);\n-\t\t\tcExists = !rs.isAfterLast();\n-\t\t}catch(SQLException e) {\n-\t\t\tlog.warn(\"exception checking for existence of column [\"+columnName+\"] in table [\"+tableName+\"]\", e);\n-\t\t}finally {\n-\t\t\ttry {\n-\t\t\t\trs.close();\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tif (log.isDebugEnabled()) log.debug(\"there was an error closing the resulset\", e);\n-\t\t\t}\n-\t\t}\n-\t\treturn cExists;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isColumnPresent(Connection conn, String tableName, String columnName) throws SQLException {\n-\t\treturn this.isColumnPresent(conn, null, tableName, columnName);\n-\t}\n-\n-\tprotected boolean doIsTableColumnPresent(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName) throws JdbcException {\n-\t\tboolean isPresent = Boolean.FALSE;\n+\t/**\n+\t * Alternative implementation of isColumnPresent(), that can be used by descender classes if the implementation via metadata does not work for that driver.\n+\t */\n+\tprotected boolean doIsColumnPresent(Connection conn, String columnsTable, String schemaColumn, String tableNameColumn, String columnNameColumn, String schemaName, String tableName, String columnName) throws JdbcException {\n+\t\tString query=\"select count(*) from \"+columnsTable+\" where upper(\"+tableNameColumn+\")=? and upper(\"+columnNameColumn+\")=?\";\n \t\tif (StringUtils.isNotEmpty(schemaName)) {\n \t\t\tif (StringUtils.isNotEmpty(schemaColumn)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tisPresent = this.isColumnPresent(conn, schemaColumn, tableName, columnName);\n-\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\tlog.warn(\"could not determine correct presence of column [\"+columnName+\"] of table [\"+tableName+\"] with schema [\"+schemaColumn+\"]\",e);\n-\t\t\t\t}\n+\t\t\t\tquery+=\" and upper(\"+schemaColumn+\")='\"+schemaName.toUpperCase()+\"'\";\n \t\t\t} else {\n \t\t\t\tthrow new JdbcException(\"no schemaColumn present in table [\"+columnsTable+\"] to test for presence of column [\"+columnName+\"] of table [\"+tableName+\"] in schema [\"+schemaName+\"]\");\n \t\t\t}\n \t\t}\n \t\ttry {\n-\t\t\tisPresent = this.isColumnPresent(conn, tableName, columnName);\n+\t\t\treturn JdbcUtil.executeIntQuery(conn, query, tableName.toUpperCase(), columnName.toUpperCase())>=1;\n \t\t} catch (Exception e) {\n \t\t\tlog.warn(\"could not determine correct presence of column [\"+columnName+\"] of table [\"+tableName+\"]\",e);\n+\t\t\treturn false;\n \t\t}\n-\t\treturn isPresent;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTableColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-\t\tlog.warn(\"could not determine correct presence of column [\"+columnName+\"] of table [\"+tableName+\"], assuming it exists\");\n-\t\treturn true;\n \t}\n \n \t@Override\n"}}, {"oid": "07b5aba6e62b6c145fdecf3c67c19f90e28acd9a", "url": "https://github.com/ibissource/iaf/commit/07b5aba6e62b6c145fdecf3c67c19f90e28acd9a", "message": "isTablePresent method was commented", "committedDate": "2020-05-07T13:29:07Z", "type": "commit"}, {"oid": "9549f3a4fc0f2743a3fbb6bcb5f5c8386cdbd001", "url": "https://github.com/ibissource/iaf/commit/9549f3a4fc0f2743a3fbb6bcb5f5c8386cdbd001", "message": "Restructure interface", "committedDate": "2020-05-11T08:56:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNTc4Mw==", "url": "https://github.com/ibissource/iaf/pull/619#discussion_r423105783", "bodyText": "Mag dit weg?", "author": "nielsm5", "createdAt": "2020-05-11T15:02:44Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/H2DbmsSupport.java", "diffHunk": "@@ -49,14 +49,15 @@ public String getSchema(Connection conn) throws JdbcException {\n \t\treturn JdbcUtil.executeStringQuery(conn, \"SELECT SCHEMA()\");\n \t}\n \n-\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n-\t\treturn doIsTablePresent(conn, \"INFORMATION_SCHEMA.TABLES\", \"TABLE_SCHEMA\", \"TABLE_NAME\", schemaName, tableName.toUpperCase());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTableColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-\t\treturn doIsTableColumnPresent(conn, \"INFORMATION_SCHEMA.COLUMNS\", \"TABLE_SCHEMA\", \"TABLE_NAME\", \"COLUMN_NAME\", schemaName, tableName, columnName);\n-\t}\n+//\t@Override\n+//\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n+//\t\treturn doIsTablePresent(conn, \"INFORMATION_SCHEMA.TABLES\", \"TABLE_SCHEMA\", \"TABLE_NAME\", schemaName, tableName.toUpperCase());\n+//\t}\n+//\t\n+//\t@Override\n+//\tpublic boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n+//\t\treturn doIsColumnPresent(conn, \"INFORMATION_SCHEMA.COLUMNS\", \"TABLE_SCHEMA\", \"TABLE_NAME\", \"COLUMN_NAME\", schemaName, tableName, columnName);\n+//\t}\n ", "originalCommit": "9549f3a4fc0f2743a3fbb6bcb5f5c8386cdbd001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4835593aa32d62661a4221a094c17ddf9b4c2cf", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/H2DbmsSupport.java b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/H2DbmsSupport.java\nindex feadb2444..3fb1ce575 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/H2DbmsSupport.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/H2DbmsSupport.java\n\n@@ -49,16 +49,6 @@ public class H2DbmsSupport extends GenericDbmsSupport {\n \t\treturn JdbcUtil.executeStringQuery(conn, \"SELECT SCHEMA()\");\n \t}\n \n-//\t@Override\n-//\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n-//\t\treturn doIsTablePresent(conn, \"INFORMATION_SCHEMA.TABLES\", \"TABLE_SCHEMA\", \"TABLE_NAME\", schemaName, tableName.toUpperCase());\n-//\t}\n-//\t\n-//\t@Override\n-//\tpublic boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-//\t\treturn doIsColumnPresent(conn, \"INFORMATION_SCHEMA.COLUMNS\", \"TABLE_SCHEMA\", \"TABLE_NAME\", \"COLUMN_NAME\", schemaName, tableName, columnName);\n-//\t}\n-\n \t@Override\n \tpublic String getIbisStoreSummaryQuery() {\n \t\treturn \"select type, slotid, formatdatetime(MESSAGEDATE,'yyyy-MM-dd') msgdate, count(*) msgcount from ibisstore group by slotid, type, formatdatetime(MESSAGEDATE,'yyyy-MM-dd') order by type, slotid, formatdatetime(MESSAGEDATE,'yyyy-MM-dd')\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNTk5MQ==", "url": "https://github.com/ibissource/iaf/pull/619#discussion_r423105991", "bodyText": "Mag dit weg?", "author": "nielsm5", "createdAt": "2020-05-11T15:03:03Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/MsSqlServerDbmsSupport.java", "diffHunk": "@@ -122,27 +134,33 @@ public String prepareQueryTextForWorkQueueReading(int batchSize, String selectQu\n \t\treturn result;\n \t}\n \n+\t@Override\n \tpublic String getFirstRecordQuery(String tableName) throws JdbcException {\n \t\tString query=\"select top(1) * from \"+tableName;\n \t\treturn query;\n \t} \n \n+\t@Override\n \tpublic String provideTrailingFirstRowsHint(int rowCount) {\n \t\treturn \" OPTION (FAST \"+rowCount+\")\";\n \t}\n \n+\t@Override\n \tpublic String getSchema(Connection conn) throws JdbcException {\n \t\treturn JdbcUtil.executeStringQuery(conn, \"SELECT DB_NAME()\");\n \t}\n \n-\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n-\t\treturn doIsTablePresent(conn, \"INFORMATION_SCHEMA.TABLES\", \"TABLE_CATALOG\", \"TABLE_NAME\", schemaName, tableName.toUpperCase());\n-\t}\n-\t\n-\tpublic boolean isTableColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-\t\treturn doIsTableColumnPresent(conn, \"INFORMATION_SCHEMA.COLUMNS\", \"TABLE_CATALOG\", \"TABLE_NAME\", \"COLUMN_NAME\", schemaName, tableName, columnName);\n-\t}\n+//\t@Override\n+//\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n+//\t\treturn doIsTablePresent(conn, \"INFORMATION_SCHEMA.TABLES\", \"TABLE_CATALOG\", \"TABLE_NAME\", schemaName, tableName.toUpperCase());\n+//\t}\n+//\t\n+//\t@Override\n+//\tpublic boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n+//\t\treturn doIsColumnPresent(conn, \"INFORMATION_SCHEMA.COLUMNS\", \"TABLE_CATALOG\", \"TABLE_NAME\", \"COLUMN_NAME\", schemaName, tableName, columnName);\n+//\t}", "originalCommit": "9549f3a4fc0f2743a3fbb6bcb5f5c8386cdbd001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4835593aa32d62661a4221a094c17ddf9b4c2cf", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/MsSqlServerDbmsSupport.java b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/MsSqlServerDbmsSupport.java\nindex cc6db4fd8..49e775c32 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/MsSqlServerDbmsSupport.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/MsSqlServerDbmsSupport.java\n\n@@ -150,16 +150,6 @@ public class MsSqlServerDbmsSupport extends GenericDbmsSupport {\n \t\treturn JdbcUtil.executeStringQuery(conn, \"SELECT DB_NAME()\");\n \t}\n \n-//\t@Override\n-//\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n-//\t\treturn doIsTablePresent(conn, \"INFORMATION_SCHEMA.TABLES\", \"TABLE_CATALOG\", \"TABLE_NAME\", schemaName, tableName.toUpperCase());\n-//\t}\n-//\t\n-//\t@Override\n-//\tpublic boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-//\t\treturn doIsColumnPresent(conn, \"INFORMATION_SCHEMA.COLUMNS\", \"TABLE_CATALOG\", \"TABLE_NAME\", \"COLUMN_NAME\", schemaName, tableName, columnName);\n-//\t}\n-\n \t@Override\n \tpublic boolean isUniqueConstraintViolation(SQLException e) {\n \t\tif (e.getErrorCode()==2627) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNjEzOA==", "url": "https://github.com/ibissource/iaf/pull/619#discussion_r423106138", "bodyText": "Mag dit weg?", "author": "nielsm5", "createdAt": "2020-05-11T15:03:15Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleDbmsSupport.java", "diffHunk": "@@ -113,50 +130,60 @@ public String prepareQueryTextForWorkQueueReading(int batchSize, String selectQu\n \t\t\t}\n \t}\n \n+\t@Override\n \tpublic String getFirstRecordQuery(String tableName) throws JdbcException {\n \t\tString query=\"select * from \"+tableName+\" where ROWNUM=1\";\n \t\treturn query;\n \t} \n \n+\t@Override\n \tpublic String provideIndexHintAfterFirstKeyword(String tableName, String indexName) {\n \t\treturn \" /*+ INDEX ( \"+tableName+ \" \"+indexName+\" ) */ \"; \n \t}\n \n+\t@Override\n \tpublic String provideFirstRowsHintAfterFirstKeyword(int rowCount) {\n \t\treturn \" /*+ FIRST_ROWS( \"+rowCount+\" ) */ \"; \n \t}\n \n+\t@Override\n \tpublic void updateClob(ResultSet rs, int column, Object clobUpdateHandle) throws SQLException {\n \t\t// updateClob is not required for Oracle\n \t\t// rs.updateClob(column, (Clob)clobUpdateHandle);\n \t}\n+\t@Override\n \tpublic void updateClob(ResultSet rs, String column, Object clobUpdateHandle) throws SQLException {\n \t\t// updateClob is not required for Oracle\n \t\t// rs.updateClob(column, (Clob)clobUpdateHandle);\n \t}\n \n+\t@Override\n \tpublic void updateBlob(ResultSet rs, int column, Object blobUpdateHandle) throws SQLException {\n \t\t// updateBlob is not required for Oracle\n \t\t// rs.updateBlob(column, (Blob)blobUpdateHandle);\n \t}\n+\t@Override\n \tpublic void updateBlob(ResultSet rs, String column, Object blobUpdateHandle) throws SQLException {\n \t\t// updateBlob is not required for Oracle\n \t\t// rs.updateBlob(column, (Blob)blobUpdateHandle);\n \t}\n \n+\t@Override\n \tpublic String getSchema(Connection conn) throws JdbcException {\n \t\treturn JdbcUtil.executeStringQuery(conn, \"SELECT SYS_CONTEXT('USERENV','CURRENT_SCHEMA') FROM DUAL\");\n \t}\n \n-\t\n-\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n-\t\treturn doIsTablePresent(conn, \"all_tables\", \"owner\", \"table_name\", schemaName, tableName);\n-\t}\n-\n-\tpublic boolean isTableColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-\t\treturn doIsTableColumnPresent(conn, \"all_tab_columns\", \"owner\", \"table_name\", \"column_name\", schemaName, tableName, columnName);\n-\t}\n+//\t@Override\n+//\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n+//\t\treturn doIsTablePresent(conn, \"all_tables\", \"owner\", \"table_name\", schemaName, tableName);\n+//\t}\n+//\t\n+//\t@Override\n+//\tpublic boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n+//\t\treturn doIsColumnPresent(conn, \"all_tab_columns\", \"owner\", \"table_name\", \"column_name\", schemaName, tableName, columnName);\n+//\t}", "originalCommit": "9549f3a4fc0f2743a3fbb6bcb5f5c8386cdbd001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e4835593aa32d62661a4221a094c17ddf9b4c2cf", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleDbmsSupport.java b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleDbmsSupport.java\nindex 5d5844f29..76ac31998 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleDbmsSupport.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/dbms/OracleDbmsSupport.java\n\n@@ -173,16 +173,6 @@ public class OracleDbmsSupport extends GenericDbmsSupport {\n \t\treturn JdbcUtil.executeStringQuery(conn, \"SELECT SYS_CONTEXT('USERENV','CURRENT_SCHEMA') FROM DUAL\");\n \t}\n \n-//\t@Override\n-//\tpublic boolean isTablePresent(Connection conn, String schemaName, String tableName) throws JdbcException {\n-//\t\treturn doIsTablePresent(conn, \"all_tables\", \"owner\", \"table_name\", schemaName, tableName);\n-//\t}\n-//\t\n-//\t@Override\n-//\tpublic boolean isColumnPresent(Connection conn, String schemaName, String tableName, String columnName) throws JdbcException {\n-//\t\treturn doIsColumnPresent(conn, \"all_tab_columns\", \"owner\", \"table_name\", \"column_name\", schemaName, tableName, columnName);\n-//\t}\n-\n \t@Override\n \tpublic boolean isUniqueConstraintViolation(SQLException e) {\n \t\tif (e.getErrorCode()==1) {\n"}}, {"oid": "e4835593aa32d62661a4221a094c17ddf9b4c2cf", "url": "https://github.com/ibissource/iaf/commit/e4835593aa32d62661a4221a094c17ddf9b4c2cf", "message": "Remove commented code", "committedDate": "2020-05-11T15:15:46Z", "type": "commit"}]}