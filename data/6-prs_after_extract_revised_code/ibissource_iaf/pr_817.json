{"pr_number": 817, "pr_title": "Automatic messageLog and errorStore browsers for FileSystemListeners", "pr_createdAt": "2020-06-15T11:54:39Z", "pr_url": "https://github.com/ibissource/iaf/pull/817", "timeline": [{"oid": "df0f0562b7efe49d93eeae8865619e071bbcb50b", "url": "https://github.com/ibissource/iaf/commit/df0f0562b7efe49d93eeae8865619e071bbcb50b", "message": "Automatic messageLog and errorStore browsers for FileSystemListeners", "committedDate": "2020-06-15T11:54:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NDQ5MQ==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440144491", "bodyText": "Moet je hier niet ook de folder meegeven?", "author": "nielsm5", "createdAt": "2020-06-15T12:37:15Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.filesystem;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.core.IMessageBrowser;\n+import nl.nn.adapterframework.core.IMessageBrowsingIterator;\n+import nl.nn.adapterframework.core.IMessageBrowsingIteratorItem;\n+import nl.nn.adapterframework.core.ListenerException;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class FileSystemMessageBrowser<F, FS extends IBasicFileSystem<F>> implements IMessageBrowser<F> {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate FS fileSystem;\n+\tprivate String folder;\n+\n+\tprivate String hideRegex = null;\n+\tprivate String hideMethod = \"all\";\n+\n+\n+\tpublic FileSystemMessageBrowser(FS fileSystem, String folder) {\n+\t\tthis.fileSystem = fileSystem;\n+\t\tthis.folder = folder;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isTransacted() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator() throws ListenerException {\n+\t\ttry {\n+\t\t\treturn new FileSystemMessageBrowsingIterator<F, FS>(fileSystem, folder);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator(Date startTime, Date endTime, SortOrder order) throws ListenerException {\n+\t\treturn getIterator(); // TODO: implement filter and sort order\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIteratorItem getContext(String messageId) throws ListenerException {\n+\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, getMessage(messageId));\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsMessageId(String originalMessageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.exists(fileSystem.toFile(originalMessageId));", "originalCommit": "df0f0562b7efe49d93eeae8865619e071bbcb50b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java\nindex 16708c8a4..b22b5fa68 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java\n\n@@ -62,13 +62,13 @@ public class FileSystemMessageBrowser<F, FS extends IBasicFileSystem<F>> impleme\n \n \t@Override\n \tpublic IMessageBrowsingIteratorItem getContext(String messageId) throws ListenerException {\n-\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, getMessage(messageId));\n+\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, browseMessage(messageId));\n \t}\n \n \t@Override\n \tpublic boolean containsMessageId(String originalMessageId) throws ListenerException {\n \t\ttry {\n-\t\t\treturn fileSystem.exists(fileSystem.toFile(originalMessageId));\n+\t\t\treturn fileSystem.exists(fileSystem.toFile(folder, originalMessageId));\n \t\t} catch (FileSystemException e) {\n \t\t\tthrow new ListenerException(e);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NTQ2Ng==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440145466", "bodyText": "Deze moet ook de message verwijderen toch? Dit is namelijk wat aangeroepen wordt bij het herverzenden...\nZie JdbcTransactionalStorage\n\t@Override\n\tpublic S getMessage(String messageId) throws ListenerException {\n\t\tS result = browseMessage(messageId);\n\t\tdeleteMessage(messageId);\n\t\treturn result;\n\t}", "author": "nielsm5", "createdAt": "2020-06-15T12:39:05Z", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.filesystem;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.core.IMessageBrowser;\n+import nl.nn.adapterframework.core.IMessageBrowsingIterator;\n+import nl.nn.adapterframework.core.IMessageBrowsingIteratorItem;\n+import nl.nn.adapterframework.core.ListenerException;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class FileSystemMessageBrowser<F, FS extends IBasicFileSystem<F>> implements IMessageBrowser<F> {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate FS fileSystem;\n+\tprivate String folder;\n+\n+\tprivate String hideRegex = null;\n+\tprivate String hideMethod = \"all\";\n+\n+\n+\tpublic FileSystemMessageBrowser(FS fileSystem, String folder) {\n+\t\tthis.fileSystem = fileSystem;\n+\t\tthis.folder = folder;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isTransacted() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator() throws ListenerException {\n+\t\ttry {\n+\t\t\treturn new FileSystemMessageBrowsingIterator<F, FS>(fileSystem, folder);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator(Date startTime, Date endTime, SortOrder order) throws ListenerException {\n+\t\treturn getIterator(); // TODO: implement filter and sort order\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIteratorItem getContext(String messageId) throws ListenerException {\n+\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, getMessage(messageId));\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsMessageId(String originalMessageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.exists(fileSystem.toFile(originalMessageId));\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsCorrelationId(String correlationId) throws ListenerException {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic F browseMessage(String messageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.toFile(folder, messageId);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic F getMessage(String messageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.toFile(folder, messageId);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}", "originalCommit": "df0f0562b7efe49d93eeae8865619e071bbcb50b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java\nindex 16708c8a4..b22b5fa68 100644\n--- a/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java\n+++ b/core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java\n\n@@ -62,13 +62,13 @@ public class FileSystemMessageBrowser<F, FS extends IBasicFileSystem<F>> impleme\n \n \t@Override\n \tpublic IMessageBrowsingIteratorItem getContext(String messageId) throws ListenerException {\n-\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, getMessage(messageId));\n+\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, browseMessage(messageId));\n \t}\n \n \t@Override\n \tpublic boolean containsMessageId(String originalMessageId) throws ListenerException {\n \t\ttry {\n-\t\t\treturn fileSystem.exists(fileSystem.toFile(originalMessageId));\n+\t\t\treturn fileSystem.exists(fileSystem.toFile(folder, originalMessageId));\n \t\t} catch (FileSystemException e) {\n \t\t\tthrow new ListenerException(e);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0OTExNQ==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440149115", "bodyText": "Misschien leuk om te melding te geven wanneer men zelf een errorstorage implementeerd terwijl dit anders al 'native' gebeurd.", "author": "nielsm5", "createdAt": "2020-06-15T12:45:43Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -615,6 +617,10 @@ public void configure() throws ConfigurationException {\n \t\t\t\t\tinfo(\"has errorStorage to \"+((HasPhysicalDestination)errorStorage).getPhysicalDestinationName());\n \t\t\t\t}\n \t\t\t\tregisterEvent(RCV_MESSAGE_TO_ERRORSTORE_EVENT);\n+\t\t\t} else {\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers) {\n+\t\t\t\t\tthis.errorStorage = ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser();\n+\t\t\t\t}", "originalCommit": "df0f0562b7efe49d93eeae8865619e071bbcb50b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\nindex e512ca6e9..8e4bc83e8 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n\n@@ -617,6 +617,9 @@ public class ReceiverBase<M> implements IReceiver<M>, IReceiverStatistics, IMess\n \t\t\t\t\tinfo(\"has errorStorage to \"+((HasPhysicalDestination)errorStorage).getPhysicalDestinationName());\n \t\t\t\t}\n \t\t\t\tregisterEvent(RCV_MESSAGE_TO_ERRORSTORE_EVENT);\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser()!=null) {\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default errorStorageBrowser provided by listener\");\n+\t\t\t\t}\t\t\t\t\n \t\t\t} else {\n \t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers) {\n \t\t\t\t\tthis.errorStorage = ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0OTg5MA==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440149890", "bodyText": "Ik zou het op prijs stellen als bij deze twee methodes javadoc aanwezig zou zijn.", "author": "nielsm5", "createdAt": "2020-06-15T12:47:01Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1719,9 +1731,12 @@ public ISender getErrorSender() {\n \t\treturn errorSender;\n \t}\n \n-\tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n+\tpublic IMessageBrowser<Serializable> getErrorStorageBrowser() {\n \t\treturn errorStorage;\n \t}\n+\tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n+\t\treturn errorStorage!=null && errorStorage instanceof ITransactionalStorage ? (ITransactionalStorage)errorStorage: null;\n+\t}", "originalCommit": "df0f0562b7efe49d93eeae8865619e071bbcb50b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\nindex e512ca6e9..8e4bc83e8 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n\n@@ -1731,9 +1743,15 @@ public class ReceiverBase<M> implements IReceiver<M>, IReceiverStatistics, IMess\n \t\treturn errorSender;\n \t}\n \n+\t/**\n+\t * returns a browser for the errorStorage, either provided as a {@link IMessageBrowser} by the listener itself, or as a {@link ITransactionalStorage} in the configuration. \n+\t */\n \tpublic IMessageBrowser<Serializable> getErrorStorageBrowser() {\n \t\treturn errorStorage;\n \t}\n+\t/**\n+\t * returns the {@link ITransactionalStorage} if it is provided in the configuration. It is used to store failed message. If present, this storage will be managed by the Receiver.\n+\t */\n \tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n \t\treturn errorStorage!=null && errorStorage instanceof ITransactionalStorage ? (ITransactionalStorage)errorStorage: null;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1MTYwOA==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440151608", "bodyText": "Ik zou het op prijs stellen als bij deze twee methodes javadoc aanwezig zou zijn.", "author": "nielsm5", "createdAt": "2020-06-15T12:49:54Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1756,9 +1771,12 @@ protected void setMessageLog(ITransactionalStorage<Serializable> messageLog) {\n \t\t\tmessageLog.setType(ITransactionalStorage.TYPE_MESSAGELOG_RECEIVER);\n \t\t}\n \t}\n-\tpublic ITransactionalStorage<Serializable> getMessageLog() {\n+\tpublic IMessageBrowser<Serializable> getMessageLogBrowser() {\n \t\treturn messageLog;\n \t}\n+\tpublic ITransactionalStorage<Serializable> getMessageLog() {\n+\t\treturn messageLog!=null && messageLog instanceof ITransactionalStorage ? (ITransactionalStorage)messageLog: null;\n+\t}\n ", "originalCommit": "df0f0562b7efe49d93eeae8865619e071bbcb50b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\nindex e512ca6e9..8e4bc83e8 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n\n@@ -1771,9 +1789,16 @@ public class ReceiverBase<M> implements IReceiver<M>, IReceiverStatistics, IMess\n \t\t\tmessageLog.setType(ITransactionalStorage.TYPE_MESSAGELOG_RECEIVER);\n \t\t}\n \t}\n+\n+\t/**\n+\t * returns a browser for the messageLog, either provided as a {@link IMessageBrowser} by the listener itself, or as a {@link ITransactionalStorage messageLog} in the configuration. \n+\t */\n \tpublic IMessageBrowser<Serializable> getMessageLogBrowser() {\n \t\treturn messageLog;\n \t}\n+\t/**\n+\t * returns the {@link ITransactionalStorage} if it is provided in the configuration. It is used to store messages that have been processed succesfully. If present, this storage will be managed by the Receiver.\n+\t */\n \tpublic ITransactionalStorage<Serializable> getMessageLog() {\n \t\treturn messageLog!=null && messageLog instanceof ITransactionalStorage ? (ITransactionalStorage)messageLog: null;\n \t}\n"}}, {"oid": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "url": "https://github.com/ibissource/iaf/commit/44257a554f1901b8d053a57e810f4a943c3dfaa9", "message": "Fix issues", "committedDate": "2020-06-15T16:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzI1Mw==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440313253", "bodyText": "overrided moet zijn: overridden maar dan leest de zin niet zo lekker.", "author": "nielsm5", "createdAt": "2020-06-15T16:52:10Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -615,6 +617,13 @@ public void configure() throws ConfigurationException {\n \t\t\t\t\tinfo(\"has errorStorage to \"+((HasPhysicalDestination)errorStorage).getPhysicalDestinationName());\n \t\t\t\t}\n \t\t\t\tregisterEvent(RCV_MESSAGE_TO_ERRORSTORE_EVENT);\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser()!=null) {\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default errorStorageBrowser provided by listener\");", "originalCommit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "041b48d250b9f08d1a04bd4e4a13da96636b68d3", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\nindex 8e4bc83e8..0e80927cb 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n\n@@ -618,7 +618,7 @@ public class ReceiverBase<M> implements IReceiver<M>, IReceiverStatistics, IMess\n \t\t\t\t}\n \t\t\t\tregisterEvent(RCV_MESSAGE_TO_ERRORSTORE_EVENT);\n \t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser()!=null) {\n-\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default errorStorageBrowser provided by listener\");\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"Default errorStorageBrowser provided by listener is overridden by configured errorStorage\");\n \t\t\t\t}\t\t\t\t\n \t\t\t} else {\n \t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzgyMA==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440313820", "bodyText": "idem", "author": "nielsm5", "createdAt": "2020-06-15T16:53:09Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -625,6 +634,13 @@ public void configure() throws ConfigurationException {\n \t\t\t\tif (StringUtils.isNotEmpty(getLabelXPath()) || StringUtils.isNotEmpty(getLabelStyleSheet())) {\n \t\t\t\t\tlabelTp=TransformerPool.configureTransformer0(getLogPrefix(), classLoader, getLabelNamespaceDefs(), getLabelXPath(), getLabelStyleSheet(),\"text\",false,null,0);\n \t\t\t\t}\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getMessageLogBrowser()!=null) {\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default messageLogBrowser provided by listener\");", "originalCommit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "041b48d250b9f08d1a04bd4e4a13da96636b68d3", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\nindex 8e4bc83e8..0e80927cb 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n\n@@ -635,8 +635,8 @@ public class ReceiverBase<M> implements IReceiver<M>, IReceiverStatistics, IMess\n \t\t\t\t\tlabelTp=TransformerPool.configureTransformer0(getLogPrefix(), classLoader, getLabelNamespaceDefs(), getLabelXPath(), getLabelStyleSheet(),\"text\",false,null,0);\n \t\t\t\t}\n \t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getMessageLogBrowser()!=null) {\n-\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default messageLogBrowser provided by listener\");\n-\t\t\t\t}\t\t\t\t\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"Default messageLogBrowser provided by listener is overridden by configured messageLog\");\n+\t\t\t\t}\n \t\t\t} else {\n \t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers) {\n \t\t\t\t\tthis.messageLog = ((IProvidesMessageBrowsers)getListener()).getMessageLogBrowser();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDc5Ng==", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440314796", "bodyText": "It is used to store failed messages", "author": "nielsm5", "createdAt": "2020-06-15T16:55:00Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1719,9 +1743,18 @@ public ISender getErrorSender() {\n \t\treturn errorSender;\n \t}\n \n-\tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n+\t/**\n+\t * returns a browser for the errorStorage, either provided as a {@link IMessageBrowser} by the listener itself, or as a {@link ITransactionalStorage} in the configuration. \n+\t */\n+\tpublic IMessageBrowser<Serializable> getErrorStorageBrowser() {\n \t\treturn errorStorage;\n \t}\n+\t/**\n+\t * returns the {@link ITransactionalStorage} if it is provided in the configuration. It is used to store failed message. If present, this storage will be managed by the Receiver.", "originalCommit": "44257a554f1901b8d053a57e810f4a943c3dfaa9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "041b48d250b9f08d1a04bd4e4a13da96636b68d3", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\nindex 8e4bc83e8..0e80927cb 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java\n\n@@ -1750,7 +1750,7 @@ public class ReceiverBase<M> implements IReceiver<M>, IReceiverStatistics, IMess\n \t\treturn errorStorage;\n \t}\n \t/**\n-\t * returns the {@link ITransactionalStorage} if it is provided in the configuration. It is used to store failed message. If present, this storage will be managed by the Receiver.\n+\t * returns the {@link ITransactionalStorage} if it is provided in the configuration. It is used to store failed messages. If present, this storage will be managed by the Receiver.\n \t */\n \tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n \t\treturn errorStorage!=null && errorStorage instanceof ITransactionalStorage ? (ITransactionalStorage)errorStorage: null;\n"}}, {"oid": "041b48d250b9f08d1a04bd4e4a13da96636b68d3", "url": "https://github.com/ibissource/iaf/commit/041b48d250b9f08d1a04bd4e4a13da96636b68d3", "message": "Clarify/improve documentation", "committedDate": "2020-06-15T19:56:09Z", "type": "commit"}]}