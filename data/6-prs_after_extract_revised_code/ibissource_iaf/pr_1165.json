{"pr_number": 1165, "pr_title": "response mapping for all non empty exits in open api", "pr_createdAt": "2020-10-20T09:58:08Z", "pr_url": "https://github.com/ibissource/iaf/pull/1165", "timeline": [{"oid": "5a9ba35388d2a931bcd63b55ace4ddbd59facf81", "url": "https://github.com/ibissource/iaf/commit/5a9ba35388d2a931bcd63b55ace4ddbd59facf81", "message": "response mapping for all non empty exits in open api", "committedDate": "2020-10-20T09:42:13Z", "type": "commit"}, {"oid": "1d3e026a04a29afb5dbfe8ddde972c890a213a8b", "url": "https://github.com/ibissource/iaf/commit/1d3e026a04a29afb5dbfe8ddde972c890a213a8b", "message": "comment on the change", "committedDate": "2020-10-20T11:22:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0NTY5Mw==", "url": "https://github.com/ibissource/iaf/pull/1165#discussion_r509045693", "bodyText": "What is ref is null?", "author": "nielsm5", "createdAt": "2020-10-21T07:22:46Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -242,6 +242,8 @@ private JsonObjectBuilder mapResponses(IAdapter adapter, MediaTypes contentType,\n \t\t\t\tif(schema == null) {\n \t\t\t\t\tcontent.addNull(contentType.getContentType());\n \t\t\t\t} else {\n+\t\t\t\t\t// JsonObjectBuilder add method consumes the schema\n+\t\t\t\t\tschema.add(\"schema\", Json.createObjectBuilder().add(\"$ref\", \"#/components/schemas/\"+ref));", "originalCommit": "1d3e026a04a29afb5dbfe8ddde972c890a213a8b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74d76f45907c084cd53d7f2b3faa5d46f4fb2283", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 089432d24..933ae8aae 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -241,7 +253,7 @@ public class ApiServiceDispatcher {\n \t\t\t\tJsonObjectBuilder content = Json.createObjectBuilder();\n \t\t\t\tif(schema == null) {\n \t\t\t\t\tcontent.addNull(contentType.getContentType());\n-\t\t\t\t} else {\n+\t\t\t\t} else if(StringUtils.isNotEmpty(ref)){\n \t\t\t\t\t// JsonObjectBuilder add method consumes the schema\n \t\t\t\t\tschema.add(\"schema\", Json.createObjectBuilder().add(\"$ref\", \"#/components/schemas/\"+ref));\n \t\t\t\t\tcontent.add(contentType.getContentType(), schema);\n"}}, {"oid": "74d76f45907c084cd53d7f2b3faa5d46f4fb2283", "url": "https://github.com/ibissource/iaf/commit/74d76f45907c084cd53d7f2b3faa5d46f4fb2283", "message": "add requestBody to open api schema", "committedDate": "2020-10-21T08:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0NDExMA==", "url": "https://github.com/ibissource/iaf/pull/1165#discussion_r509144110", "bodyText": "In the spirit of 'we want enums', could you refactor the ApiListener a bit?\nReplace the getProduces() and getConsumes with getProducesEnum() and getConsumesEnum. So you don't have to convert the strings back to enums on line 186 and 190?", "author": "nielsm5", "createdAt": "2020-10-21T09:50:53Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -180,7 +180,12 @@ protected JsonObject generateOpenApiJsonSchema(Collection<ApiDispatchConfig> cli\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n \t\t\t\t\tmethodBuilder.add(\"operationId\", adapter.getName());\n-\n+\t\t\t\t\tPipeLine pipeline = adapter.getPipeLine();\n+\t\t\t\t\tJson2XmlValidator validator = getJsonValidator(pipeline);\n+\t\t\t\t\tif(validator != null && StringUtils.isNotEmpty(validator.getRoot())) {\n+\t\t\t\t\t\tMediaTypes consumes = MediaTypes.valueOf(listener.getConsumes());\n+\t\t\t\t\t\tmethodBuilder.add(\"requestBody\", mapRequest(consumes, validator.getRoot()));\n+\t\t\t\t\t}\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n \t\t\t\t\tMediaTypes produces = MediaTypes.valueOf(listener.getProduces());", "originalCommit": "74d76f45907c084cd53d7f2b3faa5d46f4fb2283", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "52431eb23abc4795b055733920529e7bcd41d100", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 933ae8aae..e5077838b 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -180,14 +180,12 @@ public class ApiServiceDispatcher {\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n \t\t\t\t\tmethodBuilder.add(\"operationId\", adapter.getName());\n-\t\t\t\t\tPipeLine pipeline = adapter.getPipeLine();\n-\t\t\t\t\tJson2XmlValidator validator = getJsonValidator(pipeline);\n-\t\t\t\t\tif(validator != null && StringUtils.isNotEmpty(validator.getRoot())) {\n-\t\t\t\t\t\tMediaTypes consumes = MediaTypes.valueOf(listener.getConsumes());\n-\t\t\t\t\t\tmethodBuilder.add(\"requestBody\", mapRequest(consumes, validator.getRoot()));\n+\t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n+\t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n+\t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n \t\t\t\t\t}\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n-\t\t\t\t\tMediaTypes produces = MediaTypes.valueOf(listener.getProduces());\n+\t\t\t\t\tMediaTypes produces = listener.getProducesEnum();\n \t\t\t\t\tmethodBuilder.add(\"responses\", mapResponses(adapter, produces, schemas));\n \t\t\t\t}\n \n"}}, {"oid": "52431eb23abc4795b055733920529e7bcd41d100", "url": "https://github.com/ibissource/iaf/commit/52431eb23abc4795b055733920529e7bcd41d100", "message": "refactor requestBody schema, add larva scenario", "committedDate": "2020-10-21T10:44:18Z", "type": "commit"}]}