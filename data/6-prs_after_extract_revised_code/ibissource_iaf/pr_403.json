{"pr_number": 403, "pr_title": "Message store listener pre select", "pr_createdAt": "2020-02-07T12:13:09Z", "pr_url": "https://github.com/ibissource/iaf/pull/403", "timeline": [{"oid": "c91c74a5e30d5e3b05c7e02fcd3a3efffae3eb3f", "url": "https://github.com/ibissource/iaf/commit/c91c74a5e30d5e3b05c7e02fcd3a3efffae3eb3f", "message": "Improve MessageStoreListener by adding preSelect attribute\n\nwithout rowlock and XA", "committedDate": "2020-02-06T14:23:47Z", "type": "commit"}, {"oid": "301b20e633237fd414c5c3a23d0a1e53fe53fbb5", "url": "https://github.com/ibissource/iaf/commit/301b20e633237fd414c5c3a23d0a1e53fe53fbb5", "message": "do not copy", "committedDate": "2020-02-07T12:07:59Z", "type": "commit"}, {"oid": "726e3a143f77e457ec691ee7169c428026dfbaa3", "url": "https://github.com/ibissource/iaf/commit/726e3a143f77e457ec691ee7169c428026dfbaa3", "message": "Merge branch 'master' into MessageStoreListenerPreSelect", "committedDate": "2020-02-28T15:36:30Z", "type": "commit"}, {"oid": "2b4c314f3c5ce2bcc8232849a8954df758cf3e95", "url": "https://github.com/ibissource/iaf/commit/2b4c314f3c5ce2bcc8232849a8954df758cf3e95", "message": "[ci skip] Merge release notes", "committedDate": "2020-02-28T15:38:27Z", "type": "commit"}, {"oid": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "url": "https://github.com/ibissource/iaf/commit/8fdcf012d5b3afee92e795b9ff6081c06229459c", "message": "JdbcListener: add comment to attribute preSelectQuery", "committedDate": "2020-02-28T16:14:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1OTg0OA==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425159848", "bodyText": "IPullingTriggerListener.java graag hernoemen naar: IPeekableListener", "author": "gvanbrakel", "createdAt": "2020-05-14T14:00:26Z", "path": "core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+   Copyright 2020 Nationale-Nederlanden\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.core;\n+\n+public interface IPullingTriggerListener extends IPullingListener {", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nsimilarity index 66%\nrename from core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\nrename to core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nindex cf5ed90d4..8581d01ff 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\n\n@@ -15,10 +15,16 @@\n */\n package nl.nn.adapterframework.core;\n \n-public interface IPullingTriggerListener extends IPullingListener {\n+import nl.nn.adapterframework.doc.IbisDoc;\n+\n+public interface IPeekableListener extends IPullingListener {\n \t/**\n \t * Extra check if there are messages to retrieve before starting XA\n \t * transaction and really retrieve the message.\n \t */\n-\tboolean getRawMessageTrigger() throws ListenerException;\n+\tboolean hasRawMessageAvailable() throws ListenerException;\n+\n+\t@IbisDoc({\"when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true\", \"false\"})\n+\tpublic void setPeekUntransacted(boolean b);\n+\tboolean isPeekUntransacted();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MDI5Mw==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425160293", "bodyText": "getRawMessageTrigger() graag hernoemen naar: hasRawMessageAvailable()", "author": "gvanbrakel", "createdAt": "2020-05-14T14:01:00Z", "path": "core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+   Copyright 2020 Nationale-Nederlanden\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.core;\n+\n+public interface IPullingTriggerListener extends IPullingListener {\n+\t/**\n+\t * Extra check if there are messages to retrieve before starting XA\n+\t * transaction and really retrieve the message.\n+\t */\n+\tboolean getRawMessageTrigger() throws ListenerException;", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nsimilarity index 66%\nrename from core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\nrename to core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nindex cf5ed90d4..8581d01ff 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\n\n@@ -15,10 +15,16 @@\n */\n package nl.nn.adapterframework.core;\n \n-public interface IPullingTriggerListener extends IPullingListener {\n+import nl.nn.adapterframework.doc.IbisDoc;\n+\n+public interface IPeekableListener extends IPullingListener {\n \t/**\n \t * Extra check if there are messages to retrieve before starting XA\n \t * transaction and really retrieve the message.\n \t */\n-\tboolean getRawMessageTrigger() throws ListenerException;\n+\tboolean hasRawMessageAvailable() throws ListenerException;\n+\n+\t@IbisDoc({\"when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true\", \"false\"})\n+\tpublic void setPeekUntransacted(boolean b);\n+\tboolean isPeekUntransacted();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MDU5Ng==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425160596", "bodyText": "toevoegen: boolean peekUntransacted(); // if true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true", "author": "gvanbrakel", "createdAt": "2020-05-14T14:01:25Z", "path": "core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+   Copyright 2020 Nationale-Nederlanden\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.core;\n+\n+public interface IPullingTriggerListener extends IPullingListener {\n+\t/**\n+\t * Extra check if there are messages to retrieve before starting XA\n+\t * transaction and really retrieve the message.\n+\t */\n+\tboolean getRawMessageTrigger() throws ListenerException;\n+}", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nsimilarity index 66%\nrename from core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\nrename to core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nindex cf5ed90d4..8581d01ff 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\n\n@@ -15,10 +15,16 @@\n */\n package nl.nn.adapterframework.core;\n \n-public interface IPullingTriggerListener extends IPullingListener {\n+import nl.nn.adapterframework.doc.IbisDoc;\n+\n+public interface IPeekableListener extends IPullingListener {\n \t/**\n \t * Extra check if there are messages to retrieve before starting XA\n \t * transaction and really retrieve the message.\n \t */\n-\tboolean getRawMessageTrigger() throws ListenerException;\n+\tboolean hasRawMessageAvailable() throws ListenerException;\n+\n+\t@IbisDoc({\"when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true\", \"false\"})\n+\tpublic void setPeekUntransacted(boolean b);\n+\tboolean isPeekUntransacted();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MDk0OQ==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425160949", "bodyText": "preSelectQuery hernoemen naar peekQuery, en default hetzelfde laten zijn als selectQuery.\nAls je de query uitvoert hoef je geen resultSet.next() te doen; in plaats daarvan kan je ook !resultSet.isAfterLast() doen. Daarmee bepaal je of er een record is, maar neem je geen lock.", "author": "gvanbrakel", "createdAt": "2020-05-14T14:01:59Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java", "diffHunk": "@@ -43,11 +43,12 @@\n  * @author  Gerrit van Brakel\n  * @since   4.7\n  */\n-public class JdbcListener extends JdbcFacade implements IPullingListener {\n+public class JdbcListener extends JdbcFacade implements IPullingTriggerListener {\n \n \tprivate String startLocalTransactionQuery;\n \tprivate String commitLocalTransactionQuery;\n \tprivate String selectQuery;\n+\tprivate String preSelectQuery;", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\nindex f2b9e4d5f..d1b9ff2d2 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\n\n@@ -43,12 +43,12 @@ import org.apache.commons.lang.StringUtils;\n  * @author  Gerrit van Brakel\n  * @since   4.7\n  */\n-public class JdbcListener extends JdbcFacade implements IPullingTriggerListener {\n+public class JdbcListener extends JdbcFacade implements IPeekableListener {\n \n \tprivate String startLocalTransactionQuery;\n \tprivate String commitLocalTransactionQuery;\n \tprivate String selectQuery;\n-\tprivate String preSelectQuery;\n+\tprivate String peekQuery;\n \tprivate String updateStatusToProcessedQuery;\n \tprivate String updateStatusToErrorQuery;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MTE4NA==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425161184", "bodyText": "toevoegen: getter en setter voor peekUntransacted", "author": "gvanbrakel", "createdAt": "2020-05-14T14:02:21Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java", "diffHunk": "@@ -43,11 +43,12 @@\n  * @author  Gerrit van Brakel\n  * @since   4.7\n  */\n-public class JdbcListener extends JdbcFacade implements IPullingListener {\n+public class JdbcListener extends JdbcFacade implements IPullingTriggerListener {\n \n \tprivate String startLocalTransactionQuery;\n \tprivate String commitLocalTransactionQuery;\n \tprivate String selectQuery;\n+\tprivate String preSelectQuery;\n \tprivate String updateStatusToProcessedQuery;\n \tprivate String updateStatusToErrorQuery;\n ", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\nindex f2b9e4d5f..d1b9ff2d2 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/JdbcListener.java\n\n@@ -43,12 +43,12 @@ import org.apache.commons.lang.StringUtils;\n  * @author  Gerrit van Brakel\n  * @since   4.7\n  */\n-public class JdbcListener extends JdbcFacade implements IPullingTriggerListener {\n+public class JdbcListener extends JdbcFacade implements IPeekableListener {\n \n \tprivate String startLocalTransactionQuery;\n \tprivate String commitLocalTransactionQuery;\n \tprivate String selectQuery;\n-\tprivate String preSelectQuery;\n+\tprivate String peekQuery;\n \tprivate String updateStatusToProcessedQuery;\n \tprivate String updateStatusToErrorQuery;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MjUzNQ==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425162535", "bodyText": "MessageStoreListener kan ongewijzigd (origineel) blijven, peekQuery default is dezelfde als selectQuery", "author": "gvanbrakel", "createdAt": "2020-05-14T14:04:12Z", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/MessageStoreListener.java", "diffHunk": "@@ -72,6 +72,8 @@ public void configure() throws ConfigurationException {\n \t\t\t\tsessionKeysList.add((String)stringTokenizer.nextElement());\n \t\t\t}\n \t\t}\n+\t\tsetPreSelectQuery(\"SELECT TOP 1 MESSAGEKEY FROM IBISSTORE \"\n+\t\t\t\t+ \"WHERE TYPE = '\" + JdbcTransactionalStorage.TYPE_MESSAGESTORAGE + \"' AND SLOTID = '\" + slotId + \"' \");", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc538e39247bbc5d880f138a3991394736a0a34b", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/jdbc/MessageStoreListener.java b/core/src/main/java/nl/nn/adapterframework/jdbc/MessageStoreListener.java\nindex d8055083f..7e484b246 100644\n--- a/core/src/main/java/nl/nn/adapterframework/jdbc/MessageStoreListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/jdbc/MessageStoreListener.java\n\n@@ -75,13 +76,13 @@ public class MessageStoreListener extends JdbcQueryListener {\n \t\tsetPreSelectQuery(\"SELECT TOP 1 MESSAGEKEY FROM IBISSTORE \"\n \t\t\t\t+ \"WHERE TYPE = '\" + JdbcTransactionalStorage.TYPE_MESSAGESTORAGE + \"' AND SLOTID = '\" + slotId + \"' \");\n \t\tsetSelectQuery(\"SELECT MESSAGEKEY, MESSAGE FROM IBISSTORE \"\n-\t\t\t\t+ \"WHERE TYPE = '\" + JdbcTransactionalStorage.TYPE_MESSAGESTORAGE + \"' AND SLOTID = '\" + slotId + \"' \");\n+\t\t\t\t+ \"WHERE TYPE = '\" + ITransactionalStorage.TYPE_MESSAGESTORAGE + \"' AND SLOTID = '\" + slotId + \"' \");\n \t\t\t\t// This class was initially developed as DelayStoreListener with\n \t\t\t\t// the following condition added. We could still add an\n \t\t\t\t// optional delay attribute but this functionality wasn't used\n \t\t\t\t// anymore and the condition is Oracle specific.\n \t\t\t\t// + \"AND SYSTIMESTAMP >= MESSAGEDATE + INTERVAL '\" + delay + \"' SECOND\");\n-\t\tString query = \"UPDATE IBISSTORE SET TYPE = '\" + JdbcTransactionalStorage.TYPE_MESSAGELOG_RECEIVER + \"', COMMENTS = '\" + ReceiverBase.RCV_MESSAGE_LOG_COMMENTS + \"', EXPIRYDATE = ({fn now()} + 30) WHERE MESSAGEKEY = ?\";\n+\t\tString query = \"UPDATE IBISSTORE SET TYPE = '\" + ITransactionalStorage.TYPE_MESSAGELOG_RECEIVER + \"', COMMENTS = '\" + ReceiverBase.RCV_MESSAGE_LOG_COMMENTS + \"', EXPIRYDATE = ({fn now()} + 30) WHERE MESSAGEKEY = ?\";\n \t\tif (!isMoveToMessageLog()) {\n \t\t\tquery = \"DELETE FROM IBISSTORE WHERE MESSAGEKEY = ?\";\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2NTE0MA==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r425165140", "bodyText": "Kan je hier in de javadoc het verhaal / de conclusies van de discussie met Eric opnemen?", "author": "gvanbrakel", "createdAt": "2020-05-14T14:07:46Z", "path": "core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+   Copyright 2020 Nationale-Nederlanden\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.core;\n+", "originalCommit": "8fdcf012d5b3afee92e795b9ff6081c06229459c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nsimilarity index 66%\nrename from core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\nrename to core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\nindex cf5ed90d4..8581d01ff 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/IPullingTriggerListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/IPeekableListener.java\n\n@@ -15,10 +15,16 @@\n */\n package nl.nn.adapterframework.core;\n \n-public interface IPullingTriggerListener extends IPullingListener {\n+import nl.nn.adapterframework.doc.IbisDoc;\n+\n+public interface IPeekableListener extends IPullingListener {\n \t/**\n \t * Extra check if there are messages to retrieve before starting XA\n \t * transaction and really retrieve the message.\n \t */\n-\tboolean getRawMessageTrigger() throws ListenerException;\n+\tboolean hasRawMessageAvailable() throws ListenerException;\n+\n+\t@IbisDoc({\"when true, then PollingListener container will execute getRawMessage() only when hasRawMessageAvailable() has returned true\", \"false\"})\n+\tpublic void setPeekUntransacted(boolean b);\n+\tboolean isPeekUntransacted();\n }\n"}}, {"oid": "bc538e39247bbc5d880f138a3991394736a0a34b", "url": "https://github.com/ibissource/iaf/commit/bc538e39247bbc5d880f138a3991394736a0a34b", "message": "Merge branch 'master' into MessageStoreListenerPreSelect", "committedDate": "2020-05-15T09:37:36Z", "type": "commit"}, {"oid": "298546ce116cb91b7c9bdc05f5be835bfb760f98", "url": "https://github.com/ibissource/iaf/commit/298546ce116cb91b7c9bdc05f5be835bfb760f98", "message": "Rename IPullingTriggerListener to IPeekableListener\n\nIncluding:\n- Rename attribute preSelectQuery to peekQuery\n- Add attribute peekUntransacted", "committedDate": "2020-05-16T19:36:06Z", "type": "commit"}, {"oid": "d33fa85e60fedc212e5f26b3523edc20aea5de6e", "url": "https://github.com/ibissource/iaf/commit/d33fa85e60fedc212e5f26b3523edc20aea5de6e", "message": "Update javadoc", "committedDate": "2020-05-17T19:05:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4Mzg0Mw==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r426383843", "bodyText": "Deze test hoef je eigenlijk alleen maar te doen als isIdle()==true. Dan heb je geen overhead als het druk is.", "author": "gvanbrakel", "createdAt": "2020-05-18T05:55:07Z", "path": "core/src/main/java/nl/nn/adapterframework/receivers/PullingListenerContainer.java", "diffHunk": "@@ -173,10 +174,21 @@ public void run() {\n \t\t\t\t\tTransactionStatus txStatus = null;\n \t\t\t\t\ttry {\n \t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tif (receiver.isTransacted()) {\n-\t\t\t\t\t\t\t\ttxStatus = txManager.getTransaction(txNew);\n+\t\t\t\t\t\t\tboolean retrieveMessage = true;\n+\t\t\t\t\t\t\tif (listener instanceof IPeekableListener) {\n+\t\t\t\t\t\t\t\tIPeekableListener peekableListener = (IPeekableListener) listener;\n+\t\t\t\t\t\t\t\tif (peekableListener.isPeekUntransacted()) {\n+\t\t\t\t\t\t\t\t\tretrieveMessage = peekableListener.hasRawMessageAvailable();\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}", "originalCommit": "d33fa85e60fedc212e5f26b3523edc20aea5de6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79dfc342aeda75de7010af57e14a0ebeb9aa3eac", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/receivers/PullingListenerContainer.java b/core/src/main/java/nl/nn/adapterframework/receivers/PullingListenerContainer.java\nindex 6ad3581ac..47b7dc67d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/receivers/PullingListenerContainer.java\n+++ b/core/src/main/java/nl/nn/adapterframework/receivers/PullingListenerContainer.java\n\n@@ -175,7 +175,7 @@ public class PullingListenerContainer implements IThreadCountControllable {\n \t\t\t\t\ttry {\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tboolean retrieveMessage = true;\n-\t\t\t\t\t\t\tif (listener instanceof IPeekableListener) {\n+\t\t\t\t\t\t\tif (isIdle() && listener instanceof IPeekableListener) {\n \t\t\t\t\t\t\t\tIPeekableListener peekableListener = (IPeekableListener) listener;\n \t\t\t\t\t\t\t\tif (peekableListener.isPeekUntransacted()) {\n \t\t\t\t\t\t\t\t\tretrieveMessage = peekableListener.hasRawMessageAvailable();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NTkyNg==", "url": "https://github.com/ibissource/iaf/pull/403#discussion_r426385926", "bodyText": "In plaats van try { } finally, kan je hier een dubbele 'try with resource' doen op statement en op result set:\n\t\ttry (PreparedStatement stmt = connection.prepareStatement(query)) { try (ResultSet rs = stmt.executeQuery()) { return rs.isAfterLast(); } catch (Exception e) { throw new JdbcException(\"could not obtain value using query [\"+query+\"]\",e); } }  \nDe finally clauses gaan dan vanzelf.", "author": "gvanbrakel", "createdAt": "2020-05-18T06:02:33Z", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -872,6 +872,29 @@ public static int executeIntQuery(Connection connection, String query, int param\n \t\t}\n \t}\n \n+\tpublic static boolean isQueryResultEmpty(Connection connection, String query) throws JdbcException {\n+\t\tPreparedStatement stmt = null;\n+\n+\t\ttry {\n+\t\t\tstmt = connection.prepareStatement(query);\n+\t\t\tResultSet rs = stmt.executeQuery();\n+\t\t\ttry {\n+\t\t\t\treturn rs.isAfterLast();\n+\t\t\t} finally {\n+\t\t\t\trs.close();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new JdbcException(\"could not obtain value using query [\"+query+\"]\",e);\n+\t\t} finally {\n+\t\t\tif (stmt!=null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tstmt.close();\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new JdbcException(\"could not close statement of query [\"+query+\"]\",e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}", "originalCommit": "d33fa85e60fedc212e5f26b3523edc20aea5de6e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79dfc342aeda75de7010af57e14a0ebeb9aa3eac", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java b/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\nindex 8d8a42231..16a97460a 100644\n--- a/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\n+++ b/core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java\n\n@@ -873,26 +873,14 @@ public class JdbcUtil {\n \t}\n \n \tpublic static boolean isQueryResultEmpty(Connection connection, String query) throws JdbcException {\n-\t\tPreparedStatement stmt = null;\n-\n-\t\ttry {\n-\t\t\tstmt = connection.prepareStatement(query);\n-\t\t\tResultSet rs = stmt.executeQuery();\n-\t\t\ttry {\n+\t\ttry (PreparedStatement stmt = connection.prepareStatement(query)) {\n+\t\t\ttry (ResultSet rs = stmt.executeQuery()) {\n \t\t\t\treturn rs.isAfterLast();\n-\t\t\t} finally {\n-\t\t\t\trs.close();\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new JdbcException(\"could not obtain value using query [\"+query+\"]\",e);\n-\t\t} finally {\n-\t\t\tif (stmt!=null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tstmt.close();\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tthrow new JdbcException(\"could not close statement of query [\"+query+\"]\",e);\n-\t\t\t\t}\n+\t\t\t} catch (SQLException e) {\n+\t\t\t\tthrow new JdbcException(\"could not obtain value using query [\" + query + \"]\", e);\n \t\t\t}\n+\t\t} catch (SQLException e) {\n+\t\t\tthrow new JdbcException(\"could not obtain value using query [\" + query + \"]\", e);\n \t\t}\n \t}\n \n"}}, {"oid": "65129fecc7a967bbf12c19d2758096aa06279f30", "url": "https://github.com/ibissource/iaf/commit/65129fecc7a967bbf12c19d2758096aa06279f30", "message": "Merge remote-tracking branch 'origin/master' into MessageStoreListenerPreSelect", "committedDate": "2020-05-18T12:43:55Z", "type": "commit"}, {"oid": "79dfc342aeda75de7010af57e14a0ebeb9aa3eac", "url": "https://github.com/ibissource/iaf/commit/79dfc342aeda75de7010af57e14a0ebeb9aa3eac", "message": "Refactor code", "committedDate": "2020-05-18T13:39:13Z", "type": "commit"}]}