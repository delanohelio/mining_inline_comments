{"pr_number": 1190, "pr_title": "Introduce responseRoot attribute in exits for openapi schema generation", "pr_createdAt": "2020-10-22T10:59:41Z", "pr_url": "https://github.com/ibissource/iaf/pull/1190", "timeline": [{"oid": "b9bf095155e71cd46e583bfdcc698a71a53f2c41", "url": "https://github.com/ibissource/iaf/commit/b9bf095155e71cd46e583bfdcc698a71a53f2c41", "message": "Introduce elementName attribute for openapi schema generation", "committedDate": "2020-10-22T10:51:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5Nzc5Ng==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r510697796", "bodyText": "I think you should rephrase this a little. Instead of\nIn case the responseRoot attribute is set in the validator you can write\nIn case elementName is not set, but the responseRoot attribute is set in the validator", "author": "gvanbrakel", "createdAt": "2020-10-23T07:47:37Z", "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java", "diffHunk": "@@ -72,30 +73,35 @@ public String getName() {\n \t\treturn getPath();\n \t}\n \n-\n-\tpublic String getState() {\n-\t\treturn state;\n-\t}\n-\n \t@IbisDoc({\"the exit state defines possible exists to the pipeline. the state can be one of the following: <code>success, error</code>\", \"\"})\n \tpublic void setState(String newState) {\n \t\tstate = newState;\n \t}\n-\n-\tpublic int getExitCode() {\n-\t\treturn exitCode;\n+\tpublic String getState() {\n+\t\treturn state;\n \t}\n \n \t@IbisDoc({\"http statuscode e.g. <code>500</code>\", \"200\"})\n \tpublic void setCode(String code) {\n \t\tthis.exitCode = Integer.parseInt(code);\n \t}\n-\tpublic boolean getEmptyResult() {\n-\t\treturn emptyResult;\n+\tpublic int getExitCode() {\n+\t\treturn exitCode;\n \t}\n \n \t@IbisDoc({\"when using restlistener and set to <code>true</code>, this removes the output and shows a blank page, the output is still logged in the ladybug testtool\", \"false\"})\n \tpublic void setEmpty(String b) {\n \t\temptyResult = Boolean.parseBoolean(b);\n \t}\n+\tpublic boolean getEmptyResult() {\n+\t\treturn emptyResult;\n+\t}\n+\n+\t@IbisDoc({\"Name of the element that the exit expects. In case the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used. (Remark: Only for OpenApi schema generation. The output will not be validated by looking at this attribute.)\", \"\"})", "originalCommit": "b9bf095155e71cd46e583bfdcc698a71a53f2c41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42a0f72e1ee255b9c3e8e44e6347cc3867c432de", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\nindex 2eed52fe6..24c08c096 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n\n@@ -97,7 +97,7 @@ public class PipeLineExit implements IForwardTarget {\n \t\treturn emptyResult;\n \t}\n \n-\t@IbisDoc({\"Name of the element that the exit expects. In case the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used. (Remark: Only for OpenApi schema generation. The output will not be validated by looking at this attribute.)\", \"\"})\n+\t@IbisDoc({\"Name of the element that the exit expects. In case elementName is not set, but the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used. (Remark: Only for OpenApi schema generation. The output will not be validated by looking at this attribute.)\", \"\"})\n \tpublic void setElementName(String elementName) {\n \t\tthis.elementName = elementName;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwMDA4NQ==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r510700085", "bodyText": "I do agree that the operationId should be based on receiver or listener, and not on adapter, but the name attribute as it is right now is not a nice solution, because it tends to get a name like listener of [Json2XmlValidator-API-POST].\nWill this be solved when you extend this exit.elementName solution to the input? Maybe introduce a 'operationId' attribute in ApiListener then.", "author": "gvanbrakel", "createdAt": "2020-10-23T07:51:45Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -179,7 +179,7 @@ protected JsonObject generateOpenApiJsonSchema(Collection<ApiDispatchConfig> cli\n \t\t\t\t\tif (StringUtils.isNotEmpty(adapter.getDescription())) {\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n-\t\t\t\t\tmethodBuilder.add(\"operationId\", adapter.getName());\n+\t\t\t\t\tmethodBuilder.add(\"operationId\", listener.getName());", "originalCommit": "b9bf095155e71cd46e583bfdcc698a71a53f2c41", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 8c28dfc91..740fd7b88 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -171,27 +175,33 @@ public class ApiServiceDispatcher {\n \n \t\tfor (ApiDispatchConfig config : clients) {\n \t\t\tJsonObjectBuilder methods = Json.createObjectBuilder();\n+\t\t\tApiListener listener = null;\n \t\t\tfor (String method : config.getMethods()) {\n \t\t\t\tJsonObjectBuilder methodBuilder = Json.createObjectBuilder();\n-\t\t\t\tApiListener listener = config.getApiListener(method);\n+\t\t\t\tlistener = config.getApiListener(method);\n \t\t\t\tif(listener != null && listener.getReceiver() != null) {\n \t\t\t\t\tIAdapter adapter = listener.getReceiver().getAdapter();\n \t\t\t\t\tif (StringUtils.isNotEmpty(adapter.getDescription())) {\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n-\t\t\t\t\tmethodBuilder.add(\"operationId\", listener.getName());\n+\t\t\t\t\tif(StringUtils.isNotEmpty(listener.getOperationId())) {\n+\t\t\t\t\t\tmethodBuilder.add(\"operationId\", listener.getOperationId());\n+\t\t\t\t\t}\n \t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n \t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n \t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n+\t\t\t\t\t} else if(method.equals(\"GET\")) {\n+\t\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n \t\t\t\t\t}\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n \t\t\t\t\tMediaTypes produces = listener.getProducesEnum();\n \t\t\t\t\tmethodBuilder.add(\"responses\", mapResponses(adapter, produces, schemas));\n \t\t\t\t}\n-\n \t\t\t\tmethods.add(method.toLowerCase(), methodBuilder);\n \t\t\t}\n-\t\t\tpaths.add(\"/\"+config.getUriPattern(), methods);\n+\t\t\tif(listener != null) {\n+\t\t\t\tpaths.add(\"/\"+listener.getCleanPattern(false), methods);\n+\t\t\t}\n \t\t}\n \t\troot.add(\"paths\", paths.build());\n \t\troot.add(\"components\", Json.createObjectBuilder().add(\"schemas\", schemas));\n"}}, {"oid": "42a0f72e1ee255b9c3e8e44e6347cc3867c432de", "url": "https://github.com/ibissource/iaf/commit/42a0f72e1ee255b9c3e8e44e6347cc3867c432de", "message": "rephrase documentation", "committedDate": "2020-10-23T08:51:24Z", "type": "commit"}, {"oid": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "url": "https://github.com/ibissource/iaf/commit/b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "message": "add parameters to open api schema for get method", "committedDate": "2020-10-26T14:31:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMDYwNw==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512110607", "bodyText": "This is a lot of text and to me, it's very confusing. The exit does not expect an element?\nIt specifies the (response root) element to use when you've defined an OutputValidator.", "author": "nielsm5", "createdAt": "2020-10-26T16:48:03Z", "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java", "diffHunk": "@@ -72,30 +73,35 @@ public String getName() {\n \t\treturn getPath();\n \t}\n \n-\n-\tpublic String getState() {\n-\t\treturn state;\n-\t}\n-\n \t@IbisDoc({\"the exit state defines possible exists to the pipeline. the state can be one of the following: <code>success, error</code>\", \"\"})\n \tpublic void setState(String newState) {\n \t\tstate = newState;\n \t}\n-\n-\tpublic int getExitCode() {\n-\t\treturn exitCode;\n+\tpublic String getState() {\n+\t\treturn state;\n \t}\n \n \t@IbisDoc({\"http statuscode e.g. <code>500</code>\", \"200\"})\n \tpublic void setCode(String code) {\n \t\tthis.exitCode = Integer.parseInt(code);\n \t}\n-\tpublic boolean getEmptyResult() {\n-\t\treturn emptyResult;\n+\tpublic int getExitCode() {\n+\t\treturn exitCode;\n \t}\n \n \t@IbisDoc({\"when using restlistener and set to <code>true</code>, this removes the output and shows a blank page, the output is still logged in the ladybug testtool\", \"false\"})\n \tpublic void setEmpty(String b) {\n \t\temptyResult = Boolean.parseBoolean(b);\n \t}\n+\tpublic boolean getEmptyResult() {\n+\t\treturn emptyResult;\n+\t}\n+\n+\t@IbisDoc({\"Name of the element that the exit expects. In case elementName is not set, but the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used. (Remark: Only for OpenApi schema generation. The output will not be validated by looking at this attribute.)\", \"\"})\n+\tpublic void setElementName(String elementName) {\n+\t\tthis.elementName = elementName;", "originalCommit": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "721c3791196702c1d700e34822285906a7be4001", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\nindex 24c08c096..bddef521d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n\n@@ -96,8 +96,8 @@ public class PipeLineExit implements IForwardTarget {\n \tpublic boolean getEmptyResult() {\n \t\treturn emptyResult;\n \t}\n-\n-\t@IbisDoc({\"Name of the element that the exit expects. In case elementName is not set, but the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used. (Remark: Only for OpenApi schema generation. The output will not be validated by looking at this attribute.)\", \"\"})\n+\t// TODO: validate the output by looking at the elementName\n+\t@IbisDoc({\"configures exit specific element reference in open api schema. If it is not set, but the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used.\", \"\"})\n \tpublic void setElementName(String elementName) {\n \t\tthis.elementName = elementName;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMTY0Nw==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512111647", "bodyText": "What happens if getUriPattern() returns /my/*/pattern?", "author": "nielsm5", "createdAt": "2020-10-26T16:48:57Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java", "diffHunk": "@@ -135,7 +141,10 @@ public String getCleanPattern() {\n \t\tif(pattern.endsWith(\"/\"))\n \t\t\tpattern = pattern.substring(0, pattern.length()-1);\n \n-\t\treturn pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n+\t\tif(replacePathParams)\n+\t\t\tpattern = pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n+", "originalCommit": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxMTgzMA==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512511830", "bodyText": "It will stay as it is regex corresponds to {*}", "author": "alisihab", "createdAt": "2020-10-27T08:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMTY0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java\nindex 501b1bc98..657d8395c 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java\n\n@@ -141,10 +136,7 @@ public class ApiListener extends PushingListenerAdapter<String> implements HasPh\n \t\tif(pattern.endsWith(\"/\"))\n \t\t\tpattern = pattern.substring(0, pattern.length()-1);\n \n-\t\tif(replacePathParams)\n-\t\t\tpattern = pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n-\n-\t\treturn pattern;\n+\t\treturn pattern = pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExODgzOA==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512118838", "bodyText": "Maybe the / check should be moved to getUriPattern() so you don't have to add a param to the getCleanPattern method?\nIn getCleanPattern you can then default {*} to a fixed value such as {id}?", "author": "nielsm5", "createdAt": "2020-10-26T16:55:15Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -171,27 +175,33 @@ protected JsonObject generateOpenApiJsonSchema(Collection<ApiDispatchConfig> cli\n \n \t\tfor (ApiDispatchConfig config : clients) {\n \t\t\tJsonObjectBuilder methods = Json.createObjectBuilder();\n+\t\t\tApiListener listener = null;\n \t\t\tfor (String method : config.getMethods()) {\n \t\t\t\tJsonObjectBuilder methodBuilder = Json.createObjectBuilder();\n-\t\t\t\tApiListener listener = config.getApiListener(method);\n+\t\t\t\tlistener = config.getApiListener(method);\n \t\t\t\tif(listener != null && listener.getReceiver() != null) {\n \t\t\t\t\tIAdapter adapter = listener.getReceiver().getAdapter();\n \t\t\t\t\tif (StringUtils.isNotEmpty(adapter.getDescription())) {\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n-\t\t\t\t\tmethodBuilder.add(\"operationId\", adapter.getName());\n+\t\t\t\t\tif(StringUtils.isNotEmpty(listener.getOperationId())) {\n+\t\t\t\t\t\tmethodBuilder.add(\"operationId\", listener.getOperationId());\n+\t\t\t\t\t}\n \t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n \t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n \t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n+\t\t\t\t\t} else if(method.equals(\"GET\")) {\n+\t\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n \t\t\t\t\t}\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n \t\t\t\t\tMediaTypes produces = listener.getProducesEnum();\n \t\t\t\t\tmethodBuilder.add(\"responses\", mapResponses(adapter, produces, schemas));\n \t\t\t\t}\n-\n \t\t\t\tmethods.add(method.toLowerCase(), methodBuilder);\n \t\t\t}\n-\t\t\tpaths.add(\"/\"+config.getUriPattern(), methods);\n+\t\t\tif(listener != null) {\n+\t\t\t\tpaths.add(\"/\"+listener.getCleanPattern(false), methods);", "originalCommit": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxNDA2Nw==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512514067", "bodyText": "The idea was \"not to mask\" specified path parameter. For the configured uripatterns with *, i think it is a good idea to leave them as they are", "author": "alisihab", "createdAt": "2020-10-27T08:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExODgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5NDU4MQ==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r513294581", "bodyText": "Please use getUriPattern() where you want to use getCleanPattern(false). Then it is not necessaray to add a parameter to getCleanPattern().", "author": "gvanbrakel", "createdAt": "2020-10-28T09:28:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExODgzOA=="}], "type": "inlineReview", "revised_code": {"commit": "721c3791196702c1d700e34822285906a7be4001", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 740fd7b88..539758ede 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -190,9 +190,9 @@ public class ApiServiceDispatcher {\n \t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n \t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n \t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n-\t\t\t\t\t} else if(method.equals(\"GET\")) {\n-\t\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n \t\t\t\t\t}\n+\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n+\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n \t\t\t\t\tMediaTypes produces = listener.getProducesEnum();\n \t\t\t\t\tmethodBuilder.add(\"responses\", mapResponses(adapter, produces, schemas));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyMDAzNQ==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512120035", "bodyText": "Only when the GET method is used? Other http methods can also have parameters?", "author": "nielsm5", "createdAt": "2020-10-26T16:56:57Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -171,27 +175,33 @@ protected JsonObject generateOpenApiJsonSchema(Collection<ApiDispatchConfig> cli\n \n \t\tfor (ApiDispatchConfig config : clients) {\n \t\t\tJsonObjectBuilder methods = Json.createObjectBuilder();\n+\t\t\tApiListener listener = null;\n \t\t\tfor (String method : config.getMethods()) {\n \t\t\t\tJsonObjectBuilder methodBuilder = Json.createObjectBuilder();\n-\t\t\t\tApiListener listener = config.getApiListener(method);\n+\t\t\t\tlistener = config.getApiListener(method);\n \t\t\t\tif(listener != null && listener.getReceiver() != null) {\n \t\t\t\t\tIAdapter adapter = listener.getReceiver().getAdapter();\n \t\t\t\t\tif (StringUtils.isNotEmpty(adapter.getDescription())) {\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n-\t\t\t\t\tmethodBuilder.add(\"operationId\", adapter.getName());\n+\t\t\t\t\tif(StringUtils.isNotEmpty(listener.getOperationId())) {\n+\t\t\t\t\t\tmethodBuilder.add(\"operationId\", listener.getOperationId());\n+\t\t\t\t\t}\n \t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n \t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n \t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n+\t\t\t\t\t} else if(method.equals(\"GET\")) {\n+\t\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);", "originalCommit": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "721c3791196702c1d700e34822285906a7be4001", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 740fd7b88..539758ede 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -190,9 +190,9 @@ public class ApiServiceDispatcher {\n \t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n \t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n \t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n-\t\t\t\t\t} else if(method.equals(\"GET\")) {\n-\t\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n \t\t\t\t\t}\n+\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n+\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n \t\t\t\t\tMediaTypes produces = listener.getProducesEnum();\n \t\t\t\t\tmethodBuilder.add(\"responses\", mapResponses(adapter, produces, schemas));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyMjg1Mw==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r512122853", "bodyText": "Please create a new test for every new thing you add.. Right now this single method is testing over 10 different things..", "author": "nielsm5", "createdAt": "2020-10-26T17:00:57Z", "path": "core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java", "diffHunk": "@@ -21,8 +22,10 @@\n \tpublic void simpleEndpointTest() throws Exception {\n \t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n \t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n-\n-\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\").setValidator(\"simple.xsd\", null, \"user\").build(true);\n+\t\tParameter param = new Parameter();\n+\t\tparam.setName(\"parameter\");\n+\t\tparam.setValue(\"parameter\");\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\", \"operationId4simple-get\").setValidator(\"simple.xsd\", null, \"user\", param).build(true);\n ", "originalCommit": "b88ffff1bea7aaa1fb530427bfa0878e44e7707e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "721c3791196702c1d700e34822285906a7be4001", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java b/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java\nindex 2a339d930..3630bf7d9 100644\n--- a/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java\n\n@@ -19,18 +19,118 @@ public class OpenApiTest extends OpenApiTestBase {\n \n \t@Test\n \t@IsolatedThread\n-\tpublic void simpleEndpointTest() throws Exception {\n+\tpublic void simpleEndpointGetTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\", null).setValidator(\"simple.xsd\", null, \"user\", null).addExit(\"200\").addExit(\"500\").build(true);\n+\n+\t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n+\t\tString result = callOpenApi();\n+\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/simple.json\");\n+\t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t}\n+\t\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void simpleEndpointPostTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"post\", null).setValidator(\"simple.xsd\", null, \"user\", null).addExit(\"200\").build(true);\n+\n+\t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n+\t\tString result = callOpenApi();\n+\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/simplePost.json\");\n+\t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t}\n+\t\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void simpleEndpointPostWithEmptyExitTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"post\", null).setValidator(\"simple.xsd\", null, \"user\", null).addExit(\"200\").addExit(\"500\", null, \"true\").build(true);\n+\n+\t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n+\t\tString result = callOpenApi();\n+\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/simplePostWithEmptyExit.json\");\n+\t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t}\n+\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void simpleEndpointWithOperationIdTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"get envelope adapter description\").setListener(\"envelope\", \"get\", \"operationId\").setValidator(\"envelope.xsd\", \"EnvelopeRequest\", \"EnvelopeResponse\", null).addExit(\"200\").build(true);\n+\n+\t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n+\t\tString result = callOpenApi();\n+\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/envelope.json\");\n+\t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t}\n+\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void simpleEndpointQueryParamTest() throws Exception {\n \t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n \t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n \t\tParameter param = new Parameter();\n \t\tparam.setName(\"parameter\");\n \t\tparam.setValue(\"parameter\");\n-\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\", \"operationId4simple-get\").setValidator(\"simple.xsd\", null, \"user\", param).build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"get envelope adapter description\").setListener(\"envelope\", \"get\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", \"EnvelopeResponse\", param).addExit(\"200\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"get envelope adapter description\").setListener(\"envelope\", \"post\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", \"EnvelopeResponse\", param).addExit(\"200\").build(true);\n \n-\t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n+\t\tassertEquals(\"more then 2 registered pattern found!\", 2, dispatcher.findConfigForUri(\"envelope\").getMethods().size());\n \t\tString result = callOpenApi();\n \n-\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/simple.json\");\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/envelopeQueryParam.json\");\n+\t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t}\n+\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void pathParamQueryParamTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\t\tParameter param = new Parameter();\n+\t\tparam.setName(\"parameter\");\n+\t\tparam.setValue(\"parameter\");\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"get envelope adapter description\").setListener(\"envelope/{pattern}\", \"get\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", \"EnvelopeResponse\", param).addExit(\"200\").addExit(\"500\").addExit(\"403\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"get envelope adapter description\").setListener(\"envelope/{pattern}/sub/{path}\", \"post\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", \"EnvelopeResponse\", param).addExit(\"200\").addExit(\"500\").addExit(\"403\").build(true);\n+\n+\t\tassertEquals(\"more then 2 registered pattern found!\", 2, dispatcher.findMatchingConfigsForUri(\"envelope\").size());\n+\t\tString result = callOpenApi();\n+\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/envelopePathParamQueryParam.json\");\n+\t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t}\n+\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void exitElementNamesTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\t\tParameter param = new Parameter();\n+\t\tparam.setName(\"parameter\");\n+\t\tparam.setValue(\"parameter\");\n+\t\tString responseRoot = \"EnvelopeResponse,EnvelopeError403,EnvelopeError500\";\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"each exit have specific element name\").setListener(\"envelope\", \"get\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", responseRoot, param).addExit(\"200\",\"EnvelopeResponse\",\"false\").addExit(\"500\",\"EnvelopeError500\", \"false\").addExit(\"403\",\"EnvelopeError403\",\"false\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"200 code will retrieve the ref from first of response root\").setListener(\"envelope/test\", \"get\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", responseRoot, param).addExit(\"200\",null,\"false\").addExit(\"500\",\"EnvelopeError500\", \"false\").addExit(\"403\",\"EnvelopeError403\",\"false\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"no element name responseRoot will be used as source for refs\").setListener(\"envelope/elementNames\", \"get\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", responseRoot, param).addExit(\"200\").addExit(\"500\").addExit(\"403\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"403 empty exit\").setListener(\"envelope/{pattern}/sub/{path}\", \"post\", null).setValidator(\"envelope.xsd\", \"EnvelopeRequest\", responseRoot, param).addExit(\"200\").addExit(\"500\").addExit(\"403\",null,\"true\").build(true);\n+\n+\t\tassertEquals(\"more then 4 registered pattern found!\", 4, dispatcher.findMatchingConfigsForUri(\"envelope\").size());\n+\t\tString result = callOpenApi();\n+\n+\t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/envelopeExits.json\");\n \t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n \t}\n \n"}}, {"oid": "721c3791196702c1d700e34822285906a7be4001", "url": "https://github.com/ibissource/iaf/commit/721c3791196702c1d700e34822285906a7be4001", "message": "additional test cases", "committedDate": "2020-10-27T08:44:50Z", "type": "commit"}, {"oid": "61418873747ddc31be2f4a688757ffeb0f03dd53", "url": "https://github.com/ibissource/iaf/commit/61418873747ddc31be2f4a688757ffeb0f03dd53", "message": "change endpoint for each test case", "committedDate": "2020-10-27T10:05:55Z", "type": "commit"}, {"oid": "1b677c21c7ce3f0dfbf662f5489ac68fd17747e4", "url": "https://github.com/ibissource/iaf/commit/1b677c21c7ce3f0dfbf662f5489ac68fd17747e4", "message": "clean up dispatcher after each test case", "committedDate": "2020-10-27T15:33:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4Nzg4OA==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r513287888", "bodyText": "We suggest to call this 'responseRoot'", "author": "gvanbrakel", "createdAt": "2020-10-28T09:17:54Z", "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java", "diffHunk": "@@ -50,13 +50,14 @@\n  * @author Niels Meijer\n  */\n public class PipeLineExit implements IForwardTarget {\n-\t\n+\n \tpublic static final String EXIT_STATE_SUCCESS = \"success\";\n-\t\n+\n \tprivate String path;\n \tprivate String state;\n \tprivate int exitCode = 0;\n \tprivate boolean emptyResult = false;\n+\tprivate String elementName;", "originalCommit": "1b677c21c7ce3f0dfbf662f5489ac68fd17747e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\nindex bddef521d..8032ba843 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n\n@@ -57,7 +57,7 @@ public class PipeLineExit implements IForwardTarget {\n \tprivate String state;\n \tprivate int exitCode = 0;\n \tprivate boolean emptyResult = false;\n-\tprivate String elementName;\n+\tprivate String responseRoot;\n \n \t@IbisDoc({\"name of the pipeline exit\", \"\"})\n \tpublic void setPath(String newPath) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTUzMA==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r513291530", "bodyText": "The choice of the 'first' or 'last' responseRoot value configured in the validator should be based on exit.state, instead of exit.code.\nPlease change the IbisDoc to:\nConfigures the responseRoot in the OpenAPI schema for this exit. If not set, the responseRoot value of the validator will be used. If that contains multiple (comma separated) values, the first will be used for the exits with state 'success', the last for the other exits.", "author": "gvanbrakel", "createdAt": "2020-10-28T09:23:41Z", "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java", "diffHunk": "@@ -72,30 +73,35 @@ public String getName() {\n \t\treturn getPath();\n \t}\n \n-\n-\tpublic String getState() {\n-\t\treturn state;\n-\t}\n-\n \t@IbisDoc({\"the exit state defines possible exists to the pipeline. the state can be one of the following: <code>success, error</code>\", \"\"})\n \tpublic void setState(String newState) {\n \t\tstate = newState;\n \t}\n-\n-\tpublic int getExitCode() {\n-\t\treturn exitCode;\n+\tpublic String getState() {\n+\t\treturn state;\n \t}\n \n \t@IbisDoc({\"http statuscode e.g. <code>500</code>\", \"200\"})\n \tpublic void setCode(String code) {\n \t\tthis.exitCode = Integer.parseInt(code);\n \t}\n-\tpublic boolean getEmptyResult() {\n-\t\treturn emptyResult;\n+\tpublic int getExitCode() {\n+\t\treturn exitCode;\n \t}\n \n \t@IbisDoc({\"when using restlistener and set to <code>true</code>, this removes the output and shows a blank page, the output is still logged in the ladybug testtool\", \"false\"})\n \tpublic void setEmpty(String b) {\n \t\temptyResult = Boolean.parseBoolean(b);\n \t}\n+\tpublic boolean getEmptyResult() {\n+\t\treturn emptyResult;\n+\t}\n+\t// TODO: validate the output by looking at the elementName\n+\t@IbisDoc({\"configures exit specific element reference in open api schema. If it is not set, but the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used.\", \"\"})", "originalCommit": "1b677c21c7ce3f0dfbf662f5489ac68fd17747e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\nindex bddef521d..8032ba843 100644\n--- a/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n+++ b/core/src/main/java/nl/nn/adapterframework/core/PipeLineExit.java\n\n@@ -96,12 +96,12 @@ public class PipeLineExit implements IForwardTarget {\n \tpublic boolean getEmptyResult() {\n \t\treturn emptyResult;\n \t}\n-\t// TODO: validate the output by looking at the elementName\n-\t@IbisDoc({\"configures exit specific element reference in open api schema. If it is not set, but the responseRoot attribute is set in the validator, for the exit code 200 it will use the first element in the responseRoot and for the other codes last element of the responseRoot will be used.\", \"\"})\n-\tpublic void setElementName(String elementName) {\n-\t\tthis.elementName = elementName;\n+\t// TODO: validate the output by looking at this responseRoot\n+\t@IbisDoc({\"Configures the responseRoot in the OpenAPI schema for this exit. If not set, the responseRoot value of the validator will be used. If that contains multiple (comma separated) values, the first will be used for the exits with state 'success', the last for the other exits.\", \"\"})\n+\tpublic void setResponseRoot(String responseRoot) {\n+\t\tthis.responseRoot = responseRoot;\n \t}\n-\tpublic String getElementName() {\n-\t\treturn elementName;\n+\tpublic String getResponseRoot() {\n+\t\treturn responseRoot;\n \t}\n }\n"}}, {"oid": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "url": "https://github.com/ibissource/iaf/commit/a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "message": "work on the feedback", "committedDate": "2020-10-28T11:58:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyNTc1Mw==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r514125753", "bodyText": "No need to assign pattern here", "author": "gvanbrakel", "createdAt": "2020-10-29T09:41:52Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java", "diffHunk": "@@ -135,7 +136,7 @@ public String getCleanPattern() {\n \t\tif(pattern.endsWith(\"/\"))\n \t\t\tpattern = pattern.substring(0, pattern.length()-1);\n \n-\t\treturn pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n+\t\treturn pattern = pattern.replaceAll(\"\\\\{.*?}\", \"*\");", "originalCommit": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bacd03d543cbdc95252aed5232e780358ac3b94", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java\nindex 657d8395c..cdf4ab28d 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiListener.java\n\n@@ -136,7 +136,7 @@ public class ApiListener extends PushingListenerAdapter<String> implements HasPh\n \t\tif(pattern.endsWith(\"/\"))\n \t\t\tpattern = pattern.substring(0, pattern.length()-1);\n \n-\t\treturn pattern = pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n+\t\treturn pattern.replaceAll(\"\\\\{.*?}\", \"*\");\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyNzU1MA==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r514127550", "bodyText": "You should not map parameters by name, but by sessionKey", "author": "gvanbrakel", "createdAt": "2020-10-29T09:44:38Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -210,6 +221,35 @@ public static Json2XmlValidator getJsonValidator(PipeLine pipeline) {\n \t\treturn null;\n \t}\n \n+\tprivate void mapParamsInRequest(IAdapter adapter, ApiListener listener, JsonObjectBuilder methodBuilder) {\n+\t\tString uriPattern = listener.getUriPattern();\n+\t\tJsonArrayBuilder paramBuilder = Json.createArrayBuilder();\n+\t\tif(uriPattern.contains(\"{\")) {\n+\t\t\tPattern p = Pattern.compile(\"[^{/}]+(?=})\");\n+\t\t\tMatcher m = p.matcher(uriPattern);\n+\t\t\twhile(m.find()) {\n+\t\t\t\tJsonObjectBuilder param = Json.createObjectBuilder();\n+\t\t\t\tparam.add(\"name\", m.group());\n+\t\t\t\tparam.add(\"in\", \"path\");\n+\t\t\t\tparam.add(\"required\", true);\n+\t\t\t\tparam.add(\"schema\", Json.createObjectBuilder().add(\"type\", \"string\"));\n+\t\t\t\tparamBuilder.add(param);\n+\t\t\t}\n+\t\t}\n+\t\tJson2XmlValidator validator = getJsonValidator(adapter.getPipeLine());\n+\t\tif(validator != null && !validator.getParameterList().isEmpty()) {\n+\t\t\tfor (Parameter parameter : validator.getParameterList()) {\n+\t\t\t\tJsonObjectBuilder param = Json.createObjectBuilder();\n+\t\t\t\tparam.add(\"name\", parameter.getName());\n+\t\t\t\tparam.add(\"in\", \"query\");", "originalCommit": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6e731a73865c4a8a2fd16893330a89b0b56ee9e", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 29b8c2960..860648971 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -239,12 +239,14 @@ public class ApiServiceDispatcher {\n \t\tJson2XmlValidator validator = getJsonValidator(adapter.getPipeLine());\n \t\tif(validator != null && !validator.getParameterList().isEmpty()) {\n \t\t\tfor (Parameter parameter : validator.getParameterList()) {\n-\t\t\t\tJsonObjectBuilder param = Json.createObjectBuilder();\n-\t\t\t\tparam.add(\"name\", parameter.getName());\n-\t\t\t\tparam.add(\"in\", \"query\");\n-\t\t\t\tString parameterType = parameter.getType() != null ? parameter.getType() : \"string\";\n-\t\t\t\tparam.add(\"schema\", Json.createObjectBuilder().add(\"type\", parameterType));\n-\t\t\t\tparamBuilder.add(param);\n+\t\t\t\tif(StringUtils.isNotEmpty(parameter.getSessionKey())) {\n+\t\t\t\t\tJsonObjectBuilder param = Json.createObjectBuilder();\n+\t\t\t\t\tparam.add(\"name\", parameter.getSessionKey());\n+\t\t\t\t\tparam.add(\"in\", \"query\");\n+\t\t\t\t\tString parameterType = parameter.getType() != null ? parameter.getType() : \"string\";\n+\t\t\t\t\tparam.add(\"schema\", Json.createObjectBuilder().add(\"type\", parameterType));\n+\t\t\t\t\tparamBuilder.add(param);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\tmethodBuilder.add(\"parameters\", paramBuilder);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEyOTUzMg==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r514129532", "bodyText": "In this case (i.e. when building a configuration) it is more clear to have a separate line for each method", "author": "gvanbrakel", "createdAt": "2020-10-29T09:47:46Z", "path": "core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java", "diffHunk": "@@ -18,17 +19,126 @@\n \n \t@Test\n \t@IsolatedThread\n-\tpublic void simpleEndpointTest() throws Exception {\n+\tpublic void simpleEndpointGetTest() throws Exception {\n \t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n \t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n \n-\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\").setValidator(\"simple.xsd\", null, \"user\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\", null).setValidator(\"simple.xsd\", null, \"user\", null).addExit(\"200\").addExit(\"500\").build(true);\n \n \t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n \t\tString result = callOpenApi();\n \n \t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/simple.json\");\n \t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n+\t\tdispatcher.getPatternClients().clear();\n+\t}\n+\n+\t@Test\n+\t@IsolatedThread\n+\tpublic void simpleEndpointPostTest() throws Exception {\n+\t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n+\t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n+\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"simpleEndpointPostTest\", \"post\", null).setValidator(\"simple.xsd\", null, \"user\", null).addExit(\"200\").build(true);", "originalCommit": "a79f31e27eadd7ea944ee9f15f40e064e0cf81aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0bacd03d543cbdc95252aed5232e780358ac3b94", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java b/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java\nindex 5b5f2ec29..6d56d83ef 100644\n--- a/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/http/rest/OpenApiTest.java\n\n@@ -23,14 +23,19 @@ public class OpenApiTest extends OpenApiTestBase {\n \t\tApiServiceDispatcher dispatcher = ApiServiceDispatcher.getInstance();\n \t\tassertEquals(\"there are still registered patterns! Threading issue?\", 0, dispatcher.getPatternClients().size());\n \n-\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\").setListener(\"users\", \"get\", null).setValidator(\"simple.xsd\", null, \"user\", null).addExit(\"200\").addExit(\"500\").build(true);\n+\t\tnew AdapterBuilder(\"myAdapterName\", \"description4simple-get\")\n+\t\t\t.setListener(\"users\", \"get\", null)\n+\t\t\t.setValidator(\"simple.xsd\", null, \"user\", null)\n+\t\t\t.addExit(\"200\")\n+\t\t\t.addExit(\"500\")\n+\t\t\t.build(true);\n \n \t\tassertEquals(\"more then 1 registered pattern found!\", 1, dispatcher.getPatternClients().size());\n \t\tString result = callOpenApi();\n \n \t\tString expected = TestFileUtils.getTestFile(\"/OpenApi/simple.json\");\n \t\tTestAssertions.assertEqualsIgnoreCRLF(expected, result);\n-\t\tdispatcher.getPatternClients().clear();\n+\t\tdispatcher = null;\n \t}\n \n \t@Test\n"}}, {"oid": "0bacd03d543cbdc95252aed5232e780358ac3b94", "url": "https://github.com/ibissource/iaf/commit/0bacd03d543cbdc95252aed5232e780358ac3b94", "message": "more feedback work", "committedDate": "2020-10-29T10:53:51Z", "type": "commit"}, {"oid": "e6e731a73865c4a8a2fd16893330a89b0b56ee9e", "url": "https://github.com/ibissource/iaf/commit/e6e731a73865c4a8a2fd16893330a89b0b56ee9e", "message": "get parameter name from sessionkey", "committedDate": "2020-10-29T11:26:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwOTY3Mg==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r514209672", "bodyText": "I think the getUriPattern() should always return a usable pattern with or without prepending slash.\nThat way this 'check' would not be necessarily, and we will have a uniform way to displaying the pattern.", "author": "nielsm5", "createdAt": "2020-10-29T12:10:06Z", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -171,27 +175,34 @@ protected JsonObject generateOpenApiJsonSchema(Collection<ApiDispatchConfig> cli\n \n \t\tfor (ApiDispatchConfig config : clients) {\n \t\t\tJsonObjectBuilder methods = Json.createObjectBuilder();\n+\t\t\tApiListener listener = null;\n \t\t\tfor (String method : config.getMethods()) {\n \t\t\t\tJsonObjectBuilder methodBuilder = Json.createObjectBuilder();\n-\t\t\t\tApiListener listener = config.getApiListener(method);\n+\t\t\t\tlistener = config.getApiListener(method);\n \t\t\t\tif(listener != null && listener.getReceiver() != null) {\n \t\t\t\t\tIAdapter adapter = listener.getReceiver().getAdapter();\n \t\t\t\t\tif (StringUtils.isNotEmpty(adapter.getDescription())) {\n \t\t\t\t\t\tmethodBuilder.add(\"summary\", adapter.getDescription());\n \t\t\t\t\t}\n-\t\t\t\t\tmethodBuilder.add(\"operationId\", adapter.getName());\n+\t\t\t\t\tif(StringUtils.isNotEmpty(listener.getOperationId())) {\n+\t\t\t\t\t\tmethodBuilder.add(\"operationId\", listener.getOperationId());\n+\t\t\t\t\t}\n \t\t\t\t\t// GET and DELETE methods cannot have a requestBody according to the specs.\n \t\t\t\t\tif(!method.equals(\"GET\") && !method.equals(\"DELETE\")) {\n \t\t\t\t\t\tmapRequest(adapter, listener.getConsumesEnum(), methodBuilder);\n \t\t\t\t\t}\n+\t\t\t\t\tmapParamsInRequest(adapter, listener, methodBuilder);\n+\n \t\t\t\t\t//ContentType may have more parameters such as charset and formdata-boundry\n \t\t\t\t\tMediaTypes produces = listener.getProducesEnum();\n \t\t\t\t\tmethodBuilder.add(\"responses\", mapResponses(adapter, produces, schemas));\n \t\t\t\t}\n-\n \t\t\t\tmethods.add(method.toLowerCase(), methodBuilder);\n \t\t\t}\n-\t\t\tpaths.add(\"/\"+config.getUriPattern(), methods);\n+\t\t\tif(listener != null) {\n+\t\t\t\tString uriPattern = listener.getUriPattern().startsWith(\"/\") ? listener.getUriPattern() : \"/\" + listener.getUriPattern();", "originalCommit": "e6e731a73865c4a8a2fd16893330a89b0b56ee9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ae456283c2cdcc9f8c457c312da94da05a5e628", "chunk": "diff --git a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\nindex 860648971..a8b9516a0 100644\n--- a/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n+++ b/core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java\n\n@@ -200,8 +201,7 @@ public class ApiServiceDispatcher {\n \t\t\t\tmethods.add(method.toLowerCase(), methodBuilder);\n \t\t\t}\n \t\t\tif(listener != null) {\n-\t\t\t\tString uriPattern = listener.getUriPattern().startsWith(\"/\") ? listener.getUriPattern() : \"/\" + listener.getUriPattern();\n-\t\t\t\tpaths.add(uriPattern, methods);\n+\t\t\t\tpaths.add(listener.getUriPattern(), methods);\n \t\t\t}\n \t\t}\n \t\troot.add(\"paths\", paths.build());\n"}}, {"oid": "8ae456283c2cdcc9f8c457c312da94da05a5e628", "url": "https://github.com/ibissource/iaf/commit/8ae456283c2cdcc9f8c457c312da94da05a5e628", "message": "work on the feedback", "committedDate": "2020-10-29T13:56:59Z", "type": "commit"}, {"oid": "ed25f77ec57e5ca6bfe8b3ee0f934c18e7028e18", "url": "https://github.com/ibissource/iaf/commit/ed25f77ec57e5ca6bfe8b3ee0f934c18e7028e18", "message": "fix failing scenarios", "committedDate": "2020-10-29T13:57:22Z", "type": "commit"}, {"oid": "9024a486cbd704fb9e12d6cae60ea796e8b74751", "url": "https://github.com/ibissource/iaf/commit/9024a486cbd704fb9e12d6cae60ea796e8b74751", "message": "standard uripattern with a leading slash", "committedDate": "2020-10-30T12:27:20Z", "type": "commit"}, {"oid": "5f7c7ca5dc5fa1d042018130ffa6b061b1d31b11", "url": "https://github.com/ibissource/iaf/commit/5f7c7ca5dc5fa1d042018130ffa6b061b1d31b11", "message": "unit test threading issue fix", "committedDate": "2020-10-30T13:15:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MjQ2MQ==", "url": "https://github.com/ibissource/iaf/pull/1190#discussion_r516552461", "bodyText": "Right now this is a 'hack' so you don't have to change the expected results. On line 39 to 56 you can see the input/output from the setUriPattern(...) and getUriPattern()\nIn this case, since the method returns a different value the test should reflect this, (and not manipulate the test results).\nI think, the getUriPattern() method as well as the getCleanPattern() should be tested, now that you moved some functionality over to other methods.", "author": "nielsm5", "createdAt": "2020-11-03T10:09:59Z", "path": "core/src/test/java/nl/nn/adapterframework/http/rest/ApiListenerPatternsTest.java", "diffHunk": "@@ -68,7 +68,9 @@ public ApiListenerPatternsTest(String pattern, String expected) {\n \n \t@Test\n \tpublic void testUriPattern() {\n-\t\tassertEquals(uriPattern, listener.getUriPattern());\n+\t\tString preFormattedUriPattern = uriPattern.startsWith(\"/\") ? uriPattern : \"/\" + uriPattern;\n+\t\tString expectedUriPattern = preFormattedUriPattern.endsWith(\"/\") ? preFormattedUriPattern.substring(0, preFormattedUriPattern.length()-1) : preFormattedUriPattern;\n+\t\tassertEquals(expectedUriPattern, listener.getUriPattern());\n \t}", "originalCommit": "5f7c7ca5dc5fa1d042018130ffa6b061b1d31b11", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32a713e710113331cfe817bcc5f1578a37c594a6", "chunk": "diff --git a/core/src/test/java/nl/nn/adapterframework/http/rest/ApiListenerPatternsTest.java b/core/src/test/java/nl/nn/adapterframework/http/rest/ApiListenerPatternsTest.java\nindex 67f09b022..9db283e67 100644\n--- a/core/src/test/java/nl/nn/adapterframework/http/rest/ApiListenerPatternsTest.java\n+++ b/core/src/test/java/nl/nn/adapterframework/http/rest/ApiListenerPatternsTest.java\n\n@@ -30,51 +30,49 @@ import org.junit.runners.Parameterized.Parameters;\n public class ApiListenerPatternsTest {\n \n \tprivate ApiListener listener;\n-\tprivate String expected;\n-\tprivate String uriPattern;\n+\tprivate String expectedUriPattern;\n+\tprivate String expectedCleanPattern;\n \n-\t@Parameters(name = \"uriPattern[{0}] -> expected[{1}]\")\n+\t@Parameters(name = \"inputUriPattern[{0}] -> expectedUriPattern[{1}] -> expectedCleanPattern[{2}]\")\n \tpublic static Collection<Object[]> data() {\n \t\treturn Arrays.asList(new Object[][] {\n-\t\t\t\t{ \"*\", \"/*\" },\n-\t\t\t\t{ \"test\", \"/test\" },\n-\t\t\t\t{ \"/test\", \"/test\" },\n-\t\t\t\t{ \"/test/\", \"/test\" },\n-\n-\t\t\t\t{ \"test/*\", \"/test/*\" },\n-\t\t\t\t{ \"*/*\", \"/*/*\" },\n-\t\t\t\t{ \"test/something\", \"/test/something\" },\n-\t\t\t\t{ \"test/*/something\", \"/test/*/something\" },\n-\t\t\t\t{ \"test/*/*\", \"/test/*/*\" },\n-\t\t\t\t{ \"test/*/something/else\", \"/test/*/something/else\" },\n-\t\t\t\t{ \"test/*/something/*\", \"/test/*/something/*\" },\n-\n-\t\t\t\t{ \"/*/*/*\", \"/*/*/*\" },\n-\n-\t\t\t\t{ \"/text/{name}\", \"/text/*\" },\n-\t\t\t\t{ \"/text/{name}/something\", \"/text/*/something\" },\n-\t\t\t\t{ \"/text/{name}/{name2}\", \"/text/*/*\" },\n+\t\t\t\t{ \"*\", \"/*\", \"/*\" },\n+\t\t\t\t{ \"test\", \"/test\", \"/test\" },\n+\t\t\t\t{ \"/test\", \"/test\", \"/test\" },\n+\t\t\t\t{ \"/test/\", \"/test\", \"/test\" },\n+\n+\t\t\t\t{ \"test/*\", \"/test/*\", \"/test/*\" },\n+\t\t\t\t{ \"*/*\", \"/*/*\", \"/*/*\" },\n+\t\t\t\t{ \"test/something\", \"/test/something\", \"/test/something\" },\n+\t\t\t\t{ \"test/*/something\", \"/test/*/something\", \"/test/*/something\" },\n+\t\t\t\t{ \"test/*/*\", \"/test/*/*\", \"/test/*/*\" },\n+\t\t\t\t{ \"test/*/something/else\", \"/test/*/something/else\", \"/test/*/something/else\" },\n+\t\t\t\t{ \"test/*/something/*\", \"/test/*/something/*\", \"/test/*/something/*\" },\n+\n+\t\t\t\t{ \"/*/*/*\", \"/*/*/*\", \"/*/*/*\" },\n+\n+\t\t\t\t{ \"/text/{name}\", \"/text/{name}\", \"/text/*\" },\n+\t\t\t\t{ \"/text/{name}/something\", \"/text/{name}/something\", \"/text/*/something\" },\n+\t\t\t\t{ \"/text/{name}/{name2}\", \"/text/{name}/{name2}\", \"/text/*/*\" },\n \t\t});\n \t}\n \n-\tpublic ApiListenerPatternsTest(String pattern, String expected) {\n+\tpublic ApiListenerPatternsTest(String pattern, String expectedUriPattern, String expectedCleanPattern) {\n \t\tlistener = new ApiListener();\n \t\tlistener.setName(\"my-api-listener\");\n \t\tlistener.setMethod(\"put\");\n \t\tlistener.setUriPattern(pattern);\n-\t\tthis.uriPattern = pattern;\n-\t\tthis.expected = expected;\n+\t\tthis.expectedUriPattern = expectedUriPattern;\n+\t\tthis.expectedCleanPattern = expectedCleanPattern;\n \t}\n \n \t@Test\n \tpublic void testUriPattern() {\n-\t\tString preFormattedUriPattern = uriPattern.startsWith(\"/\") ? uriPattern : \"/\" + uriPattern;\n-\t\tString expectedUriPattern = preFormattedUriPattern.endsWith(\"/\") ? preFormattedUriPattern.substring(0, preFormattedUriPattern.length()-1) : preFormattedUriPattern;\n \t\tassertEquals(expectedUriPattern, listener.getUriPattern());\n \t}\n \n \t@Test\n \tpublic void testCleanPattern() {\n-\t\tassertEquals(expected, listener.getCleanPattern());\n+\t\tassertEquals(expectedCleanPattern, listener.getCleanPattern());\n \t}\n }\n"}}, {"oid": "32a713e710113331cfe817bcc5f1578a37c594a6", "url": "https://github.com/ibissource/iaf/commit/32a713e710113331cfe817bcc5f1578a37c594a6", "message": "extend expected results", "committedDate": "2020-11-03T11:48:33Z", "type": "commit"}, {"oid": "83cfdaaa584df843a50cfbc3e2986e26da66be80", "url": "https://github.com/ibissource/iaf/commit/83cfdaaa584df843a50cfbc3e2986e26da66be80", "message": "do not clean up the dispatcher", "committedDate": "2020-11-03T16:24:57Z", "type": "commit"}, {"oid": "2900e0181c1e2491435591686c007c03044cf1fc", "url": "https://github.com/ibissource/iaf/commit/2900e0181c1e2491435591686c007c03044cf1fc", "message": "call schema generation for specific uripattern", "committedDate": "2020-11-04T08:20:22Z", "type": "commit"}]}