{"pr_number": 406, "pr_title": "[YouTube] Fix some decryption exceptions by retrying", "pr_createdAt": "2020-10-04T13:38:41Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406", "timeline": [{"oid": "0f80cb3c99ac66507ee13ffe666f0dab6b449076", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0f80cb3c99ac66507ee13ffe666f0dab6b449076", "message": "[YouTube] Fix some decryption exceptions by retrying", "committedDate": "2020-10-04T13:40:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MDQyMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r499250421", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (attempts <= 0) {\n          \n          \n            \n                            if (attempts == 0) {", "author": "TobiGr", "createdAt": "2020-10-04T14:06:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -647,12 +646,31 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n             final String infoPageResponse = downloader.get(videoInfoUrl, getExtractorLocalization()).responseBody();\n             videoInfoPage.putAll(Parser.compatParseMap(infoPageResponse));\n             playerUrl = info.url;\n+\n         } else {\n-            initialData = initialAjaxJson.getObject(3).getObject(\"response\");\n             ageLimit = NO_AGE_LIMIT;\n+            JsonObject playerConfig;\n+\n+            // sometimes at random YouTube does not provide the player config,\n+            // so just retry the same request three times\n+            int attempts = 2;\n+            while (true) {\n+                playerConfig = initialAjaxJson.getObject(2).getObject(\"player\", null);\n+                if (playerConfig != null) {\n+                    break;\n+                }\n+\n+                if (attempts <= 0) {", "originalCommit": "0f80cb3c99ac66507ee13ffe666f0dab6b449076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3ODI0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r499378246", "bodyText": "Why? Doesn't hurt to be careful and cover all cases.", "author": "opusforlife2", "createdAt": "2020-10-05T06:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MDQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4NjE3Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r499386176", "bodyText": "Ok", "author": "TobiGr", "createdAt": "2020-10-05T07:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MDQyMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzkxNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r502937917", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ParsingException(\"Could not extract js url from YouTube player config\");\n          \n          \n            \n                        throw new ParsingException(\"Could not extract js URL from YouTube player config\");", "author": "TobiGr", "createdAt": "2020-10-11T16:37:30Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -674,36 +692,27 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         }\n     }\n \n-    private JsonObject getPlayerArgs(JsonObject playerConfig) throws ParsingException {\n-        JsonObject playerArgs;\n-\n+    private JsonObject getPlayerArgs(final JsonObject playerConfig) throws ParsingException {\n         //attempt to load the youtube js player JSON arguments\n-        try {\n-            playerArgs = playerConfig.getObject(\"args\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not parse yt player config\", e);\n+        final JsonObject playerArgs = playerConfig.getObject(\"args\", null);\n+        if (playerArgs == null) {\n+            throw new ParsingException(\"Could not extract args from YouTube player config\");\n         }\n-\n         return playerArgs;\n     }\n \n-    private String getPlayerUrl(JsonObject playerConfig) throws ParsingException {\n-        try {\n-            // The Youtube service needs to be initialized by downloading the\n-            // js-Youtube-player. This is done in order to get the algorithm\n-            // for decrypting cryptic signatures inside certain stream urls.\n-            String playerUrl;\n-\n-            JsonObject ytAssets = playerConfig.getObject(\"assets\");\n-            playerUrl = ytAssets.getString(\"js\");\n+    private String getPlayerUrl(final JsonObject playerConfig) throws ParsingException {\n+        // The Youtube service needs to be initialized by downloading the\n+        // js-Youtube-player. This is done in order to get the algorithm\n+        // for decrypting cryptic signatures inside certain stream urls.\n+        final String playerUrl = playerConfig.getObject(\"assets\").getString(\"js\");\n \n-            if (playerUrl.startsWith(\"//\")) {\n-                playerUrl = HTTPS + playerUrl;\n-            }\n-            return playerUrl;\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not load decryption code for the Youtube service.\", e);\n+        if (playerUrl == null) {\n+            throw new ParsingException(\"Could not extract js url from YouTube player config\");", "originalCommit": "0f80cb3c99ac66507ee13ffe666f0dab6b449076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19e862657a821d133aae38a3011235a584c740cd", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 4e50a715..8364246c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -704,11 +704,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     private String getPlayerUrl(final JsonObject playerConfig) throws ParsingException {\n         // The Youtube service needs to be initialized by downloading the\n         // js-Youtube-player. This is done in order to get the algorithm\n-        // for decrypting cryptic signatures inside certain stream urls.\n+        // for decrypting cryptic signatures inside certain stream URLs.\n         final String playerUrl = playerConfig.getObject(\"assets\").getString(\"js\");\n \n         if (playerUrl == null) {\n-            throw new ParsingException(\"Could not extract js url from YouTube player config\");\n+            throw new ParsingException(\"Could not extract js URL from YouTube player config\");\n         } else if (playerUrl.startsWith(\"//\")) {\n             return HTTPS + playerUrl;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjkzNzk0Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/406#discussion_r502937942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // for decrypting cryptic signatures inside certain stream urls.\n          \n          \n            \n                    // for decrypting cryptic signatures inside certain stream URLs.", "author": "TobiGr", "createdAt": "2020-10-11T16:37:52Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -674,36 +692,27 @@ public void onFetchPage(@Nonnull Downloader downloader) throws IOException, Extr\n         }\n     }\n \n-    private JsonObject getPlayerArgs(JsonObject playerConfig) throws ParsingException {\n-        JsonObject playerArgs;\n-\n+    private JsonObject getPlayerArgs(final JsonObject playerConfig) throws ParsingException {\n         //attempt to load the youtube js player JSON arguments\n-        try {\n-            playerArgs = playerConfig.getObject(\"args\");\n-        } catch (Exception e) {\n-            throw new ParsingException(\"Could not parse yt player config\", e);\n+        final JsonObject playerArgs = playerConfig.getObject(\"args\", null);\n+        if (playerArgs == null) {\n+            throw new ParsingException(\"Could not extract args from YouTube player config\");\n         }\n-\n         return playerArgs;\n     }\n \n-    private String getPlayerUrl(JsonObject playerConfig) throws ParsingException {\n-        try {\n-            // The Youtube service needs to be initialized by downloading the\n-            // js-Youtube-player. This is done in order to get the algorithm\n-            // for decrypting cryptic signatures inside certain stream urls.\n-            String playerUrl;\n-\n-            JsonObject ytAssets = playerConfig.getObject(\"assets\");\n-            playerUrl = ytAssets.getString(\"js\");\n+    private String getPlayerUrl(final JsonObject playerConfig) throws ParsingException {\n+        // The Youtube service needs to be initialized by downloading the\n+        // js-Youtube-player. This is done in order to get the algorithm\n+        // for decrypting cryptic signatures inside certain stream urls.", "originalCommit": "0f80cb3c99ac66507ee13ffe666f0dab6b449076", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "19e862657a821d133aae38a3011235a584c740cd", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 4e50a715..8364246c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -704,11 +704,11 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     private String getPlayerUrl(final JsonObject playerConfig) throws ParsingException {\n         // The Youtube service needs to be initialized by downloading the\n         // js-Youtube-player. This is done in order to get the algorithm\n-        // for decrypting cryptic signatures inside certain stream urls.\n+        // for decrypting cryptic signatures inside certain stream URLs.\n         final String playerUrl = playerConfig.getObject(\"assets\").getString(\"js\");\n \n         if (playerUrl == null) {\n-            throw new ParsingException(\"Could not extract js url from YouTube player config\");\n+            throw new ParsingException(\"Could not extract js URL from YouTube player config\");\n         } else if (playerUrl.startsWith(\"//\")) {\n             return HTTPS + playerUrl;\n         }\n"}}, {"oid": "19e862657a821d133aae38a3011235a584c740cd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/19e862657a821d133aae38a3011235a584c740cd", "message": "[YouTube] Fix some decryption exceptions by retrying", "committedDate": "2020-10-15T18:16:44Z", "type": "commit"}, {"oid": "19e862657a821d133aae38a3011235a584c740cd", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/19e862657a821d133aae38a3011235a584c740cd", "message": "[YouTube] Fix some decryption exceptions by retrying", "committedDate": "2020-10-15T18:16:44Z", "type": "forcePushed"}]}