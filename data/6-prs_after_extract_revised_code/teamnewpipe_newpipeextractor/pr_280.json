{"pr_number": 280, "pr_title": "Extractor for youtube mix (auto-generated playlist)", "pr_createdAt": "2020-03-07T15:16:34Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjAxOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393516019", "bodyText": "Why is this piece of code exactly the same as above? Also, you could add a test for a mix where the videoId is not part of the mix id (i.e. the current video is not the first one, so videoId is different from the video id in the mix id, as in YoutubePlaylistLinkHandlerFactoryTest.fromUrlIsMixVideo)", "author": "Stypox", "createdAt": "2020-03-17T08:36:57Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,24 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";\n+        PlaylistExtractor extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n+\n+        extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1Njc5NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393656794", "bodyText": "Because i may have not paid attention and forgot to make the second one into RDMM for My Mix.\nI can add the test.", "author": "XiangRongLin", "createdAt": "2020-03-17T12:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\nindex de4fe53f..7b5d2ce7 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\n\n@@ -75,7 +75,13 @@ public class YoutubeServiceTest {\n         assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n \n         extractor = YouTube.getPlaylistExtractor(\n-            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RDMM\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n+\n+        final String mixVideoId = \"qHtzO49SDmk\";\n+\n+        extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + mixVideoId + \"&list=RD\" + videoId);\n         assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzI4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393527285", "bodyText": "Undo this whitespace change", "author": "Stypox", "createdAt": "2020-03-17T08:57:43Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                throws ExtractionException {", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNTkxNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396005916", "bodyText": "This hasn't been resolved?", "author": "wb9688", "createdAt": "2020-03-21T16:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java\nindex 39bc45c0..e9ae25e9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java\n\n@@ -115,7 +115,7 @@ public class YoutubeService extends StreamingService {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                throws ExtractionException {\n+                        throws ExtractionException {\n                     return new YoutubeTrendingExtractor(YoutubeService.this,\n                             new YoutubeTrendingLinkHandlerFactory().fromUrl(url), id);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTQ5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393529497", "bodyText": "Rename, just to keep it the same as the string it is referring to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n          \n          \n            \n                private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";", "author": "Stypox", "createdAt": "2020-03-17T09:01:52Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex abef9250..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMTg3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393531875", "bodyText": "this should be indented one tab more\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throws ExtractionException, IOException {\n          \n          \n            \n                        throws ExtractionException, IOException {", "author": "Stypox", "createdAt": "2020-03-17T09:06:07Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }\n+            return getThumbnailUrlFromId(videoId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return 25;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+        throws ExtractionException, IOException {", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex abef9250..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMjIyMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393532223", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nonnull StreamInfoItemsCollector collector,\n          \n          \n            \n                    @Nullable JsonArray streams) {\n          \n          \n            \n                        @Nonnull StreamInfoItemsCollector collector,\n          \n          \n            \n                        @Nullable JsonArray streams) {", "author": "Stypox", "createdAt": "2020-03-17T09:06:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }\n+            return getThumbnailUrlFromId(videoId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return 25;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+        throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =\n+            ajaxJson.getObject(3).getObject(RESPONSE).getObject(CONTENTS)\n+                .getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS).getObject(PLAYLIST)\n+                .getObject(PLAYLIST);\n+        final JsonArray streams = playlistData.getArray(CONTENTS);\n+        //Because continuation requests are created with the last video of previous request as start\n+        streams.remove(0);\n+        collectStreamsFrom(collector, streams);\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    private void collectStreamsFrom(\n+        @Nonnull StreamInfoItemsCollector collector,\n+        @Nullable JsonArray streams) {", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex abef9250..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNzcwMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393537700", "bodyText": "You should throw the same ParsingException if the name could not be extracted. I don't think \"\" would be handled correctly by the client, i.e. considering that the title could not be extracted", "author": "Stypox", "createdAt": "2020-03-17T09:16:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex abef9250..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393539374", "bodyText": "How can the thumbnail url be always the same if \"My Mix\" is different for everyone?", "author": "Stypox", "createdAt": "2020-03-17T09:19:29Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void getPageEmptyUrl() throws Exception {\n+            extractor.getPage(\"\");\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void invalidVideoId() throws Exception {\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + \"abcde\" + \"&list=RD\" + \"ancde\");\n+            extractor.fetchPage();\n+        }\n+    }\n+\n+    public static class MixWithIndex {\n+\n+        public static String index = \"&index=13\";\n+        public static String videoIdNumber13 = \"qHtzO49SDmk\";\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoIdNumber13 + \"&list=RD\" + videoId\n+                        + index);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+    }\n+\n+    public static class MyMix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RDMM\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertEquals(\"My Mix\", name);\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, startsWith(\"https://i.ytimg.com/vi/_AzeUSL9lZc\"));", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0NjY5NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393646695", "bodyText": "Because the extractor is set up with a starting video (watch?v=videoId). The rest of the mix is indeed different for everyone, but because there is a starting video, the first one will always be that one.", "author": "XiangRongLin", "createdAt": "2020-03-17T12:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1NjA5NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393656094", "bodyText": "Oh, that's right, sorry ;-)", "author": "Stypox", "createdAt": "2020-03-17T12:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nsimilarity index 59%\nrename from extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java\nrename to extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nindex 9ba76cc8..492cb5d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\n\n@@ -1,18 +1,19 @@\n-package org.schabi.newpipe.extractor.services.youtube.extractors;\n+package org.schabi.newpipe.extractor.services.youtube;\n \n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.startsWith;\n import static org.junit.Assert.*;\n import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n \n-import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n import org.schabi.newpipe.extractor.NewPipe;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMixPlaylistExtractor;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n \n public class YoutubeMixPlaylistExtractorTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1MzQzNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393553434", "bodyText": "Why throwing another exception from this one? I would let it throw a NullPointerException, it shouldn't be problematic and it would be shown correctly in the app error report page", "author": "Stypox", "createdAt": "2020-03-17T09:43:38Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex abef9250..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MzY1Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393563657", "bodyText": "I would move this piece of code into getThumbnailUrlFromId, and maybe throw a ParsingException with a description like \"videoId is empty\".", "author": "Stypox", "createdAt": "2020-03-17T10:00:35Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }", "originalCommit": "2754133a8c7e3df041c11153c0f8c9f50b0465cd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex abef9250..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODI0Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393668247", "bodyText": "Why are you using Long instead of long?", "author": "B0pol", "createdAt": "2020-03-17T13:13:31Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;", "originalCommit": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMzc1NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393723754", "bodyText": "Kotlin habit", "author": "XiangRongLin", "createdAt": "2020-03-17T14:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 47137d5c..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2OTQ5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393669496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                    }", "author": "B0pol", "createdAt": "2020-03-17T13:15:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+            }", "originalCommit": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 47137d5c..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393754840", "bodyText": "One more tab ;-)\nWraps should be indented with two more steps, otherwise they can be confused with the content below", "author": "Stypox", "createdAt": "2020-03-17T15:15:38Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                    throws ExtractionException {", "originalCommit": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMTAyOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393801028", "bodyText": "Done.\nI really hope we can have a code style file, so I can press autoformat again without worrying.", "author": "XiangRongLin", "createdAt": "2020-03-17T16:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MjcyMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393842723", "bodyText": "For some reason this in not yet done, even though GitHub told me the was a change on that line. But if on Android Studio you see everything as expected, it is ok. Is not so important ;-)", "author": "Stypox", "createdAt": "2020-03-17T17:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java\nindex 94e7a389..e9ae25e9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java\n\n@@ -115,7 +115,7 @@ public class YoutubeService extends StreamingService {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                    throws ExtractionException {\n+                        throws ExtractionException {\n                     return new YoutubeTrendingExtractor(YoutubeService.this,\n                             new YoutubeTrendingLinkHandlerFactory().fromUrl(url), id);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NjM3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393756373", "bodyText": "This would go in the base playlist extractor, so that it can be used by every service. Also, I just realized maybe a better name is MORE_THAN_100_ITEMS.", "author": "Stypox", "createdAt": "2020-03-17T15:17:46Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static long MORE_THAN_100 = -2L;", "originalCommit": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 6574aaa5..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwOTc2Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393909763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final static long MORE_THAN_100_ITEMS = -2L;\n          \n          \n            \n                public final static long INFINITE_ITEMS = -2L;\n          \n          \n            \n                public final static long MORE_THAN_100_ITEMS = -3L;", "author": "Stypox", "createdAt": "2020-03-17T19:11:03Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n public abstract class PlaylistExtractor extends ListExtractor<StreamInfoItem> {\n \n+    public final static long MORE_THAN_100_ITEMS = -2L;", "originalCommit": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java\nindex e0ea403d..2a901dbf 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java\n\n@@ -8,8 +8,6 @@ import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n \n public abstract class PlaylistExtractor extends ListExtractor<StreamInfoItem> {\n \n-    public final static long MORE_THAN_100_ITEMS = -2L;\n-\n     public PlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n         super(service, linkHandler);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwOTk4MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393909980", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return MORE_THAN_100_ITEMS;\n          \n          \n            \n                    return INFINITE_ITEMS;", "author": "Stypox", "createdAt": "2020-03-17T19:11:30Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return MORE_THAN_100_ITEMS;", "originalCommit": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 69d9bbef..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394656470", "bodyText": "When using YouTube's logo here, we can also use in other places. We should check legal stuff first. CC @TheAssassin", "author": "TobiGr", "createdAt": "2020-03-18T21:42:49Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "originalCommit": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1ODQ0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394658449", "bodyText": "I think this should be handled differently in the frontend by not displaying an avatar. @Stypox, @wb9688 What do you think?", "author": "TobiGr", "createdAt": "2020-03-18T21:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTAxOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394661019", "bodyText": "IANAL. However, using any brand icons is a bad idea, and might get us into trouble. I don't think it's worth the effort. I haven't had a look whether the linked file would be fine copyright wise either.", "author": "TheAssassin", "createdAt": "2020-03-18T21:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTg3MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395001871", "bodyText": "Ok, so either we put no avatar (which would probably look strange) or we choose an icon from https://material.io/icons that somewhat represents the nature of the playlist and the uploader. I thought of these icons:\n\nRadio: \nAuto renew: \nBrowser:", "author": "Stypox", "createdAt": "2020-03-19T12:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0MDEwOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395840108", "bodyText": "@XiangRongLin what do you think about this?", "author": "Stypox", "createdAt": "2020-03-20T19:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg0Nzg5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395847897", "bodyText": "I'm for either the Radio icon or no icon. Radio since the mix is basically a radio.\nBut that depends on which looks less out of place.", "author": "XiangRongLin", "createdAt": "2020-03-20T19:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwMzc0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395903740", "bodyText": "whatever icons we use, that should be set in the app. It might be okay to return the URL to YouTube's logo in the extractor. However, it should be replaced in the frontend. Our extractor is used by other applications, too. They might want to use the original logo.", "author": "TobiGr", "createdAt": "2020-03-20T21:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk2OTAwOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395969009", "bodyText": "Ok, that seems a good idea", "author": "Stypox", "createdAt": "2020-03-21T07:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNTEyNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396005124", "bodyText": "I don't think we should return a link to YouTube's logo.", "author": "wb9688", "createdAt": "2020-03-21T16:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNTY1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396015652", "bodyText": "My vote goes to the Radio icon as well.", "author": "opusforlife2", "createdAt": "2020-03-21T18:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODQ2NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396098465", "bodyText": "Then i would be for returning a constant and each frontend can decide themself what they want to display based on the constant and legal stuff.\nFor NewPipe it would then be the radio icon.", "author": "XiangRongLin", "createdAt": "2020-03-22T14:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMzk5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396733991", "bodyText": "We should not use the wikimedia image though. Here are the icons which are used on the website when the browser does not support SVG:\nhttps://s.ytimg.com/yts/img/favicon_144-vfliLAfaB.png\nhttps://s.ytimg.com/yts/img/favicon_96-vflW9Ec0w.png\nhttps://s.ytimg.com/yts/img/favicon_48-vflVjB_Qk.png\nhttps://s.ytimg.com/yts/img/favicon_32-vflOogEID.png\n\nThen i would be for returning a constant and each frontend can decide themself what they want to display based on the constant and legal stuff.\n\n@XiangRongLin What constant? Can you elaborate the idea? One can check whether the retrieved PlaylistInfo is a YTMix by using YouTubeParsingHelper.isYouTubeMixId(id)", "author": "TobiGr", "createdAt": "2020-03-23T20:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NTk3Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396745976", "bodyText": "@TobiGr I meant as an arbitary string like public static final String YOUTUBE_LOGO = \"youtube_logo\"\nNice finding the png, i somehow only found svg.", "author": "XiangRongLin", "createdAt": "2020-03-23T20:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1MzczMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396753730", "bodyText": "@gzsombor: We would like to know your opinion on this as well.\nI personally think it would be best to return \"\" here, but @TobiGr thinks we should return a link to YouTube's logo, as we always return a URL for all other kind of playlists, however @TheAssassin thinks we should avoid logos/brands.\nEither way, in the NewPipe front-end, we're gonna check if service ID equals YouTube's service ID and call YoutubeParsingHelper's function to check whether the playlist ID is a mix. When that's the case, NewPipe will replace it with a radio icon embedded in our app.", "author": "wb9688", "createdAt": "2020-03-23T21:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1NTcwNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396755706", "bodyText": "Why even return anything here?\nThis should return an empty string just like the uploader url and name, and this is actually already handled by the front end.", "author": "mauriciocolli", "createdAt": "2020-03-23T21:04:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NjEyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396766129", "bodyText": "@gzsombor As a user of the extractor, what solution do you prefer?\nThe YouTube logo, an empty string or a constant?\n@mauriciocolli @wb9688 I'd be okay with returning nothing, too", "author": "TobiGr", "createdAt": "2020-03-23T21:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NTMzNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396795336", "bodyText": "What about returning a AvatarIcon class, something like this:\nclass AvatarIcon {\n   String url;\n   IconType type;\n   enum IconType { YOUTUBE_LOGO, OTHER_LOGO, .... }\n}\n\n\nEither the url or the type would be filled - if the URL the frontend could use that, if not, it should revert to some custom magic.", "author": "gzsombor", "createdAt": "2020-03-23T22:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NzMxNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r397397314", "bodyText": "@gzsombor That's basically done in #268. So we should wait for this PR to be merged. Let's go with the empty string for now and change this later in or after #268\n@XiangRongLin Can you change this to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n          \n          \n            \n                    return \"\";", "author": "TobiGr", "createdAt": "2020-03-24T19:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNjU5Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r397416593", "bodyText": "Ok, I was about to ask ;-)", "author": "Stypox", "createdAt": "2020-03-24T19:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex c50a69dd..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,12 +1,15 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n import java.io.IOException;\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.downloader.Downloader;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395886064", "bodyText": "These should be @BeforeClass, otherwise the testing time skyrockets (it just took me 2 minutes just to run this class).", "author": "Stypox", "createdAt": "2020-03-20T20:56:38Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "originalCommit": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4ODgyNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395888827", "bodyText": "Yeah, that makes a lot of sense. That probably is also the reason why the recaptcha are appearing.", "author": "XiangRongLin", "createdAt": "2020-03-20T21:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4OTU5OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395889599", "bodyText": "May I change it or will you do it?", "author": "Stypox", "createdAt": "2020-03-20T21:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3MjEwMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395972101", "bodyText": "@Stypox Just changing it as is, produces NullPointerExceptions in some test. I'll have to look into it.", "author": "XiangRongLin", "createdAt": "2020-03-21T08:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3NDMzNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395974336", "bodyText": "@Stypox I changed it. Was because i had 2 tests for invalid urls, which set the data to null", "author": "XiangRongLin", "createdAt": "2020-03-21T08:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nsimilarity index 64%\nrename from extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java\nrename to extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nindex ec2e8dd8..492cb5d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\n\n@@ -1,19 +1,19 @@\n-package org.schabi.newpipe.extractor.services.youtube.extractors;\n+package org.schabi.newpipe.extractor.services.youtube;\n \n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.startsWith;\n import static org.junit.Assert.*;\n import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n \n-import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.schabi.newpipe.DownloaderTestImpl;\n import org.schabi.newpipe.extractor.ListExtractor;\n import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n import org.schabi.newpipe.extractor.NewPipe;\n import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMixPlaylistExtractor;\n import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n \n public class YoutubeMixPlaylistExtractorTest {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNjE3Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396006172", "bodyText": "&& !playlistId.startsWith(\"RDAMVM\"), so that it won't accept YouTube Music mixes. You'll also need to do that in the LinkHandler, so that NewPipe will open those as just a video until we implement YouTube Music mixes.", "author": "wb9688", "createdAt": "2020-03-21T16:24:56Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -163,6 +163,16 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a mix (auto-generated playlist)\n+     * Ids from a mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a mix\n+     */\n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\");", "originalCommit": "30b182516b4fff0d3b6986172ecfcd7ce34221c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java\nindex 1e4dfb4a..ed512006 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java\n\n@@ -164,13 +169,23 @@ public class YoutubeParsingHelper {\n     }\n \n     /**\n-     * Checks if the given playlist id is a mix (auto-generated playlist)\n-     * Ids from a mix start with \"RD\"\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a mix\n+     * @return Whether given id belongs to a youtube mix\n      */\n     public static boolean isYoutubeMixId(String playlistId) {\n-        return playlistId.startsWith(\"RD\");\n+        return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n+    }\n+\n+    /**\n+     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n+     * Ids from a youtube music mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube music mix\n+     */\n+    public static boolean isYoutubeMusicMixId(String playlistId) {\n+        return playlistId.startsWith(\"RDAMVM\");\n     }\n \n     public static JsonObject getInitialData(String html) throws ParsingException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007056", "bodyText": "Why are you storing those as constants here? We don't do that anywhere else either\u2026", "author": "wb9688", "createdAt": "2020-03-21T16:35:22Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";", "originalCommit": "30b182516b4fff0d3b6986172ecfcd7ce34221c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzQ0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007446", "bodyText": "Because i would sometime make a typo in those strings and wonder for 10 minutes where my error was. With the constants i can let my IDE autocomplete for me.", "author": "XiangRongLin", "createdAt": "2020-03-21T16:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjU3Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396012577", "bodyText": "Please just follow the style of the rest of the extractors.", "author": "wb9688", "createdAt": "2020-03-21T17:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 20bff064..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,6 +1,7 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzI1Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007256", "bodyText": "You don't need to call collector.reset() here as every time you call it, you already have a new empty collector.", "author": "wb9688", "createdAt": "2020-03-21T16:37:48Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =\n+            ajaxJson.getObject(3).getObject(RESPONSE).getObject(CONTENTS)\n+                .getObject(TWO_COLUMN_WATCH_NEXT_RESULTS).getObject(PLAYLIST)\n+                .getObject(PLAYLIST);\n+        final JsonArray streams = playlistData.getArray(CONTENTS);\n+        //Because continuation requests are created with the last video of previous request as start\n+        streams.remove(0);\n+        collectStreamsFrom(collector, streams);\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull StreamInfoItemsCollector collector,\n+            @Nullable JsonArray streams) {\n+        collector.reset();", "originalCommit": "30b182516b4fff0d3b6986172ecfcd7ce34221c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 20bff064..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,6 +1,7 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007581", "bodyText": "Why are you assigning playlistData again here? If you call getInitialPage() after that, it won't return the initial page.", "author": "wb9688", "createdAt": "2020-03-21T16:41:45Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =", "originalCommit": "30b182516b4fff0d3b6986172ecfcd7ce34221c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMTAzNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396011036", "bodyText": "Because i needed the updated playlistData for when getNextPageUrl() gets called multiple times.\nI'just add a initialPlaylistData variable to the class", "author": "XiangRongLin", "createdAt": "2020-03-21T17:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMjQzNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396012435", "bodyText": "getNextPageUrl() should always be relative to the initial page: https://github.com/TeamNewPipe/NewPipeExtractor/blob/dev/extractor/src/main/java/org/schabi/newpipe/extractor/ListExtractor.java#L30. Make a separate getNextPageUrlFrom() function like in the other extractors.", "author": "wb9688", "createdAt": "2020-03-21T17:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzQ4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396013481", "bodyText": "oh, I completly missed that. I'll fix it", "author": "XiangRongLin", "createdAt": "2020-03-21T17:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 20bff064..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,6 +1,7 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007915", "bodyText": "You should call getUrlFromNavigationEndpoint() and just append &pbj=1. You'll first need to modify getUrlFromNavigationEndpoint() so that it handles the index parameter.", "author": "wb9688", "createdAt": "2020-03-21T16:45:43Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";", "originalCommit": "30b182516b4fff0d3b6986172ecfcd7ce34221c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxNDE1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396014152", "bodyText": "I just saw that I already handled the index incorrectly, since i assumed the index in the url would count upwards. But it always stays at 25.", "author": "XiangRongLin", "createdAt": "2020-03-21T17:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNDgzMA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396024830", "bodyText": "Is there a reason for using &amq; instead of just & since this is throwing a malformed url exception for me when i create new extractor with the return value of getUrlFromNavigationEndpoint()\nhttps://github.com/TeamNewPipe/NewPipeExtractor/blob/dev/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java#L302", "author": "XiangRongLin", "createdAt": "2020-03-21T20:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNTE3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396025175", "bodyText": "Yes, there's a reason, but it's wrong. That function should return it with &, which should then be replaced with &amp; at https://github.com/TeamNewPipe/NewPipeExtractor/blob/dev/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java#L319.", "author": "wb9688", "createdAt": "2020-03-21T20:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 20bff064..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -1,6 +1,7 @@\n package org.schabi.newpipe.extractor.services.youtube.extractors;\n \n import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n \n import com.grack.nanojson.JsonArray;\n import com.grack.nanojson.JsonObject;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NzMyMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396087322", "bodyText": "Use assertTrue and assertFalse", "author": "wb9688", "createdAt": "2020-03-22T12:21:32Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.DefaultTests;\n+import org.schabi.newpipe.extractor.stream.Stream;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));", "originalCommit": "0ef3a27161170ca465012c61f782952e51b970be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1MDYwMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396650602", "bodyText": "IMO that's okay. We can keep it", "author": "TobiGr", "createdAt": "2020-03-23T18:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NzMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nsimilarity index 84%\nrename from extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java\nrename to extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nindex c841f548..492cb5d9 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\n\n@@ -1,7 +1,6 @@\n-package org.schabi.newpipe.extractor.services.youtube.extractors;\n+package org.schabi.newpipe.extractor.services.youtube;\n \n import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.CoreMatchers.startsWith;\n import static org.junit.Assert.*;\n import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396087875", "bodyText": "I still think getUrlFromNavigationEndpoint needs to put the index in the URL. You actually don't need to track it, you just need to do navigationEndpoint.getObject(\"watchEndpoint\").getInt(\"index\") + 1.", "author": "wb9688", "createdAt": "2020-03-22T12:28:07Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "originalCommit": "0ef3a27161170ca465012c61f782952e51b970be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4ODQ3Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396088476", "bodyText": "With tracking i mean the behaviour you get when you play a mix on youtube.com\nIf you always select the last video in the mix the index jumps from 1 to 25 to 49 to 50 and then stays at 50.\nBut the index value in watchEndpoint is always 24.", "author": "XiangRongLin", "createdAt": "2020-03-22T12:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTkyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396089929", "bodyText": "I don't think so:", "author": "wb9688", "createdAt": "2020-03-22T12:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5MDM4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396090381", "bodyText": "Is that in the browser?\nSince i couldn't get it to simulate that behaviour with the extractor", "author": "XiangRongLin", "createdAt": "2020-03-22T12:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5MzA3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396093073", "bodyText": "Yes, that's in Firefox. I'll try to reproduce.\nEdit: it seems to have something to do with the cookies.\nEdit 2: it's the VISITOR_INFO1_LIVE cookie.\nEdit 3: I think you should leave it like you have it currently.", "author": "wb9688", "createdAt": "2020-03-22T13:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 89c45aa0..0aedafd0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -90,7 +90,7 @@ public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n     @Override\n     public String getUploaderAvatarUrl() {\n         //Youtube mix are auto-generated by YouTube\n-        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+        return \"\";\n     }\n \n     @Override\n"}}, {"oid": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1", "committedDate": "2020-03-24T21:14:26Z", "type": "forcePushed"}, {"oid": "9d3abf7883650a70b422dedec9449250981460c6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9d3abf7883650a70b422dedec9449250981460c6", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1", "committedDate": "2020-05-21T11:57:41Z", "type": "forcePushed"}, {"oid": "5b8ebee94e653d3ee8e910dd9f7dc63a5f5c76c4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5b8ebee94e653d3ee8e910dd9f7dc63a5f5c76c4", "message": "[Youtube mix] apply wb9688 suggestion\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation", "committedDate": "2020-05-21T12:19:10Z", "type": "forcePushed"}, {"oid": "928e674c25748b501e9e8dcb1a4752adeae1473a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/928e674c25748b501e9e8dcb1a4752adeae1473a", "message": "[Youtube] apply wb9688 suggestion (mix)\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation", "committedDate": "2020-05-21T12:40:41Z", "type": "forcePushed"}, {"oid": "5c87409b254e6707563557b7ebe7716c810b5382", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5c87409b254e6707563557b7ebe7716c810b5382", "message": "[Youtube] Add subchannel functions to mix and fix imports", "committedDate": "2020-05-21T12:53:10Z", "type": "forcePushed"}, {"oid": "706825327be15190ba3915d65ff227f422aa091e", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/706825327be15190ba3915d65ff227f422aa091e", "message": "[Youtube] Add subchannel functions to mix and fix imports", "committedDate": "2020-07-08T12:44:27Z", "type": "forcePushed"}, {"oid": "e07dc1457875b2e82d13e0f4eefd702df8c30d2a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e07dc1457875b2e82d13e0f4eefd702df8c30d2a", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-01T07:22:53Z", "type": "forcePushed"}, {"oid": "9e941385b3ef149d2fa095eec7280c52bcd7b063", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9e941385b3ef149d2fa095eec7280c52bcd7b063", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-01T07:27:13Z", "type": "forcePushed"}, {"oid": "cab0ee86ae55bc07a4cdaec447995c315bb6e344", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cab0ee86ae55bc07a4cdaec447995c315bb6e344", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-01T07:37:45Z", "type": "forcePushed"}, {"oid": "63b2feb0001826307744fd2881e7c77d92b8a165", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63b2feb0001826307744fd2881e7c77d92b8a165", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-01T07:48:43Z", "type": "forcePushed"}, {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f465837ec12a9b46fa41ff47881bc8936ff96892", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-01T08:01:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTU1OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469241558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a youtube mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a youtube mix\n          \n          \n            \n                 * Checks if the given playlist id is a YouTube Mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a YouTube Mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a YouTube Mix", "author": "TobiGr", "createdAt": "2020-08-12T13:01:49Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -195,6 +202,26 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube mix", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 2beecf6b..a5656876 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n\n@@ -203,22 +204,22 @@ public class YoutubeParsingHelper {\n     }\n \n     /**\n-     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n-     * Ids from a youtube mix start with \"RD\"\n+     * Checks if the given playlist id is a YouTube Mix (auto-generated playlist)\n+     * Ids from a YouTube Mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a youtube mix\n+     * @return Whether given id belongs to a YouTube Mix\n      */\n-    public static boolean isYoutubeMixId(String playlistId) {\n+    public static boolean isYoutubeMixId(final String playlistId) {\n         return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n     }\n \n     /**\n-     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n-     * Ids from a youtube music mix start with \"RD\"\n+     * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n+     * Ids from a YouTube Music Mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a youtube music mix\n+     * @return Whether given id belongs to a YouTube Music Mix\n      */\n-    public static boolean isYoutubeMusicMixId(String playlistId) {\n+    public static boolean isYoutubeMusicMixId(final String playlistId) {\n         return playlistId.startsWith(\"RDAMVM\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDUzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469244539", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a youtube music mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a youtube music mix\n          \n          \n            \n                 * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a YouTube Music Mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a YouTube Music Mix", "author": "TobiGr", "createdAt": "2020-08-12T13:06:37Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -195,6 +202,26 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube mix\n+     */\n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n+    }\n+\n+    /**\n+     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n+     * Ids from a youtube music mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube music mix", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 2beecf6b..a5656876 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n\n@@ -203,22 +204,22 @@ public class YoutubeParsingHelper {\n     }\n \n     /**\n-     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n-     * Ids from a youtube mix start with \"RD\"\n+     * Checks if the given playlist id is a YouTube Mix (auto-generated playlist)\n+     * Ids from a YouTube Mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a youtube mix\n+     * @return Whether given id belongs to a YouTube Mix\n      */\n-    public static boolean isYoutubeMixId(String playlistId) {\n+    public static boolean isYoutubeMixId(final String playlistId) {\n         return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n     }\n \n     /**\n-     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n-     * Ids from a youtube music mix start with \"RD\"\n+     * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n+     * Ids from a YouTube Music Mix start with \"RD\"\n      * @param playlistId\n-     * @return Whether given id belongs to a youtube music mix\n+     * @return Whether given id belongs to a YouTube Music Mix\n      */\n-    public static boolean isYoutubeMusicMixId(String playlistId) {\n+    public static boolean isYoutubeMusicMixId(final String playlistId) {\n         return playlistId.startsWith(\"RDAMVM\");\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODc1Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469248753", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n          \n          \n            \n                 * youtube.com/watch?v=videoId&list=playlistId\n          \n          \n            \n                 * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is like\n          \n          \n            \n                 * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>", "author": "TobiGr", "createdAt": "2020-08-12T13:13:13Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\nindex bd119aa9..f0520a8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n\n@@ -76,21 +76,21 @@ public class YoutubePlaylistLinkHandlerFactory extends ListLinkHandlerFactory {\n     }\n \n     /**\n-     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n-     * youtube.com/watch?v=videoId&list=playlistId\n+     * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is like\n+     * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>\n      * <p>Otherwise use super</p>\n      */\n     @Override\n     public ListLinkHandler fromUrl(final String url) throws ParsingException {\n         try {\n-            URL urlObj = Utils.stringToURL(url);\n-            String listID = Utils.getQueryValue(urlObj, \"list\");\n+            final URL urlObj = Utils.stringToURL(url);\n+            final String listID = Utils.getQueryValue(urlObj, \"list\");\n             if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n                 String videoID = Utils.getQueryValue(urlObj, \"v\");\n                 if (videoID == null) {\n                     videoID = listID.substring(2);\n                 }\n-                String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n+                final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n                 return new ListLinkHandler(new LinkHandler(url, newUrl, listID),\n                         getContentFilter(url),\n                         getSortFilter(url));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDcxNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469250716", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n          \n          \n            \n                            final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;", "author": "TobiGr", "createdAt": "2020-08-12T13:16:15Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            URL urlObj = Utils.stringToURL(url);\n+            String listID = Utils.getQueryValue(urlObj, \"list\");\n+            if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n+                String videoID = Utils.getQueryValue(urlObj, \"v\");\n+                if (videoID == null) {\n+                    videoID = listID.substring(2);\n+                }\n+                String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\nindex bd119aa9..f0520a8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n\n@@ -76,21 +76,21 @@ public class YoutubePlaylistLinkHandlerFactory extends ListLinkHandlerFactory {\n     }\n \n     /**\n-     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n-     * youtube.com/watch?v=videoId&list=playlistId\n+     * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is like\n+     * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>\n      * <p>Otherwise use super</p>\n      */\n     @Override\n     public ListLinkHandler fromUrl(final String url) throws ParsingException {\n         try {\n-            URL urlObj = Utils.stringToURL(url);\n-            String listID = Utils.getQueryValue(urlObj, \"list\");\n+            final URL urlObj = Utils.stringToURL(url);\n+            final String listID = Utils.getQueryValue(urlObj, \"list\");\n             if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n                 String videoID = Utils.getQueryValue(urlObj, \"v\");\n                 if (videoID == null) {\n                     videoID = listID.substring(2);\n                 }\n-                String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n+                final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n                 return new ListLinkHandler(new LinkHandler(url, newUrl, listID),\n                         getContentFilter(url),\n                         getSortFilter(url));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDk5NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469250995", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String listID = Utils.getQueryValue(urlObj, \"list\");\n          \n          \n            \n                        final String listID = Utils.getQueryValue(urlObj, \"list\");", "author": "TobiGr", "createdAt": "2020-08-12T13:16:43Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            URL urlObj = Utils.stringToURL(url);\n+            String listID = Utils.getQueryValue(urlObj, \"list\");", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\nindex bd119aa9..f0520a8b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n\n@@ -76,21 +76,21 @@ public class YoutubePlaylistLinkHandlerFactory extends ListLinkHandlerFactory {\n     }\n \n     /**\n-     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n-     * youtube.com/watch?v=videoId&list=playlistId\n+     * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is like\n+     * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>\n      * <p>Otherwise use super</p>\n      */\n     @Override\n     public ListLinkHandler fromUrl(final String url) throws ParsingException {\n         try {\n-            URL urlObj = Utils.stringToURL(url);\n-            String listID = Utils.getQueryValue(urlObj, \"list\");\n+            final URL urlObj = Utils.stringToURL(url);\n+            final String listID = Utils.getQueryValue(urlObj, \"list\");\n             if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n                 String videoID = Utils.getQueryValue(urlObj, \"v\");\n                 if (videoID == null) {\n                     videoID = listID.substring(2);\n                 }\n-                String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n+                final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n                 return new ListLinkHandler(new LinkHandler(url, newUrl, listID),\n                         getContentFilter(url),\n                         getSortFilter(url));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjA5OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469252099", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n          \n          \n            \n             * \"youtube.com/watch?v=videoId&list=playlistId\"\n          \n          \n            \n             * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n          \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId</code>", "author": "TobiGr", "createdAt": "2020-08-12T13:18:26Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex 37a1d283..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n- * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTEwMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469255101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String videoId = \"_AzeUSL9lZc\";\n          \n          \n            \n                    final String videoId = \"_AzeUSL9lZc\";", "author": "TobiGr", "createdAt": "2020-08-12T13:22:46Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,30 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\nindex 7b5d2ce7..4354fa25 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\n\n@@ -62,14 +62,14 @@ public class YoutubeServiceTest {\n \n     @Test\n     public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n-        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+        final PlaylistExtractor extractor = service.getPlaylistExtractor(\n             \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n         assertTrue(extractor instanceof YoutubePlaylistExtractor);\n     }\n \n     @Test\n     public void getPlaylistExtractorIsMix() throws Exception {\n-        String videoId = \"_AzeUSL9lZc\";\n+        final String videoId = \"_AzeUSL9lZc\";\n         PlaylistExtractor extractor = YouTube.getPlaylistExtractor(\n             \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n         assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTI4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469255285", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PlaylistExtractor extractor = service.getPlaylistExtractor(\n          \n          \n            \n                    final PlaylistExtractor extractor = service.getPlaylistExtractor(", "author": "TobiGr", "createdAt": "2020-08-12T13:23:04Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,30 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(", "originalCommit": "f465837ec12a9b46fa41ff47881bc8936ff96892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\nindex 7b5d2ce7..4354fa25 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java\n\n@@ -62,14 +62,14 @@ public class YoutubeServiceTest {\n \n     @Test\n     public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n-        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+        final PlaylistExtractor extractor = service.getPlaylistExtractor(\n             \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n         assertTrue(extractor instanceof YoutubePlaylistExtractor);\n     }\n \n     @Test\n     public void getPlaylistExtractorIsMix() throws Exception {\n-        String videoId = \"_AzeUSL9lZc\";\n+        final String videoId = \"_AzeUSL9lZc\";\n         PlaylistExtractor extractor = YouTube.getPlaylistExtractor(\n             \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n         assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNDE3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469414173", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n          \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId</code>\n          \n      \n    \n    \n  \n\nLooks like I did not remove that in my suggestion.", "author": "TobiGr", "createdAt": "2020-08-12T17:13:10Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -30,8 +30,8 @@\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n- * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MTYzMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469471631", "bodyText": "Also use {@code something} instead of <code>something</code>", "author": "wb9688", "createdAt": "2020-08-12T18:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNDE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex f29bfd46..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n- * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODk2Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469458967", "bodyText": "Like above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getValidJsonResponseBody(response);\n          \n          \n            \n            \n          \n          \n            \n                    return toJsonArray(response.responseBody());\n          \n          \n            \n                    return toJsonArray(getValidJsonResponseBody(response));", "author": "Stypox", "createdAt": "2020-08-12T18:30:34Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -504,22 +535,65 @@ public static String getValidJsonResponseBody(final Response response)\n         final String responseContentType = response.getHeader(\"Content-Type\");\n         if (responseContentType != null\n                 && responseContentType.toLowerCase().contains(\"text/html\")) {\n-            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+            throw new ParsingException(\"Got HTML document, expected JSON response\"\n+                    + \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n         }\n \n         return responseBody;\n     }\n \n+    public static Response getResponse(final String url, final Localization localization)\n+            throws IOException, ExtractionException {\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n+\n+        final Response response = getDownloader().get(url, headers, localization);\n+        getValidJsonResponseBody(response);\n+\n+        return response;\n+    }\n+\n+    public static String extractCookieValue(final String cookieName, final Response response) {\n+        final List<String> cookies = response.responseHeaders().get(\"Set-Cookie\");\n+        int startIndex;\n+        String result = \"\";\n+        for (String cookie : cookies) {\n+            startIndex = cookie.indexOf(cookieName);\n+            if (startIndex != -1) {\n+                result = cookie.substring(startIndex + cookieName.length() + \"=\".length(),\n+                        cookie.indexOf(\";\", startIndex));\n+            }\n+        }\n+        return result;\n+    }\n+\n     public static JsonArray getJsonResponse(final String url, final Localization localization)\n             throws IOException, ExtractionException {\n         Map<String, List<String>> headers = new HashMap<>();\n         headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n         headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n         final Response response = getDownloader().get(url, headers, localization);\n \n-        final String responseBody = getValidJsonResponseBody(response);\n+        return toJsonArray(getValidJsonResponseBody(response));\n+    }\n+\n+    public static JsonArray getJsonResponse(final Page page, final Localization localization)\n+            throws IOException, ExtractionException {\n+        final Map<String, List<String>> headers = new HashMap<>();\n+        if (!isNullOrEmpty(page.getCookies())) {\n+            headers.put(\"Cookie\", Collections.singletonList(join(\";\", \"=\", page.getCookies())));\n+        }\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n+\n+        final Response response = getDownloader().get(page.getUrl(), headers, localization);\n+        getValidJsonResponseBody(response);\n+\n+        return toJsonArray(response.responseBody());", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 1eb824eb..a5656876 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n\n@@ -544,7 +545,7 @@ public class YoutubeParsingHelper {\n \n     public static Response getResponse(final String url, final Localization localization)\n             throws IOException, ExtractionException {\n-        Map<String, List<String>> headers = new HashMap<>();\n+        final Map<String, List<String>> headers = new HashMap<>();\n         headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n         headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTgzNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469461835", "bodyText": "Do this, so that the original error is reported if even the fallback fails\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        final String playlistId = playlistData.getString(\"playlistId\");\n          \n          \n            \n                        try {\n          \n          \n            \n                            return getThumbnailUrlFromPlaylistId(playlistId);\n          \n          \n            \n                        } catch (ParsingException e) {\n          \n          \n            \n                            //fallback to thumbnail of current video. Always the case for channel mix\n          \n          \n            \n                            return getThumbnailUrlFromVideoId(\n          \n          \n            \n                                initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n          \n          \n            \n                                    .getString(\"videoId\"));\n          \n          \n            \n                        }\n          \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        throw new ParsingException(\"Could not get playlist thumbnail\", e);\n          \n          \n            \n                    }\n          \n          \n            \n                    try {\n          \n          \n            \n                        return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n          \n          \n            \n                    } catch (final Exception e) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            //fallback to thumbnail of current video. Always the case for channel mix\n          \n          \n            \n                            return getThumbnailUrlFromVideoId(\n          \n          \n            \n                                initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n          \n          \n            \n                                    .getString(\"videoId\"));\n          \n          \n            \n                        } catch (final Exception ignored) {\n          \n          \n            \n                        }\n          \n          \n            \n                        throw new ParsingException(\"Could not get playlist thumbnail\", e);\n          \n          \n            \n                    }", "author": "Stypox", "createdAt": "2020-08-12T18:35:36Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex f29bfd46..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n- * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzI1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463259", "bodyText": "final", "author": "Stypox", "createdAt": "2020-08-12T18:38:07Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex f29bfd46..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n- * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzI5Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463292", "bodyText": "final", "author": "Stypox", "createdAt": "2020-08-12T18:38:11Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex f29bfd46..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n- * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzM5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463391", "bodyText": "final", "author": "Stypox", "createdAt": "2020-08-12T18:38:23Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, newStreams);\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrlFrom(playlistJson), page.getCookies()));\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull final StreamInfoItemsCollector collector,\n+            @Nullable final List<Object> streams) {\n+\n+        if (streams == null) {\n+            return;\n+        }\n+\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object stream : streams) {", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex f29bfd46..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n- * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzQ0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463440", "bodyText": "final", "author": "Stypox", "createdAt": "2020-08-12T18:38:29Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, newStreams);\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrlFrom(playlistJson), page.getCookies()));\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull final StreamInfoItemsCollector collector,\n+            @Nullable final List<Object> streams) {\n+\n+        if (streams == null) {\n+            return;\n+        }\n+\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object stream : streams) {\n+            if (stream instanceof JsonObject) {\n+                JsonObject streamInfo = ((JsonObject) stream)", "originalCommit": "5733f6af5ca3ca4d081b8e22769e9822ba712514", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex f29bfd46..d5e30745 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -30,8 +30,9 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n- * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n  */\n public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n \n"}}, {"oid": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/de84efe3a420ce7a367e4f5af0ac098f5ad07478", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-13T16:09:29Z", "type": "forcePushed"}, {"oid": "4ff19c854564ab8d8f91a6b5bf57f4cbc0e830ff", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4ff19c854564ab8d8f91a6b5bf57f4cbc0e830ff", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-13T16:15:57Z", "type": "forcePushed"}, {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e930ec1c5d615f47ee524377c1ba7222177f9bc1", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-08-16T12:06:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTcyNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r483005726", "bodyText": "Maybe you could add a test for this to UtilsTest.testJoin(). But you can leave this to another PR, since the code looks correct ;-)", "author": "Stypox", "createdAt": "2020-09-03T14:07:30Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java", "diffHunk": "@@ -235,4 +236,15 @@ public static String join(final CharSequence delimiter, final Iterable<? extends\n         }\n         return stringBuilder.toString();\n     }\n+\n+    public static String join(final String delimiter, final String mapJoin,", "originalCommit": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\nindex c0cac01f..95920270 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\n\n@@ -236,15 +260,4 @@ public class Utils {\n         }\n         return stringBuilder.toString();\n     }\n-\n-    public static String join(final String delimiter, final String mapJoin,\n-        final Map<? extends CharSequence, ? extends CharSequence> elements) {\n-        final List<String> list = new LinkedList<>();\n-        for (final Map.Entry<? extends CharSequence, ? extends CharSequence> entry : elements\n-            .entrySet()) {\n-            list.add(entry.getKey() + mapJoin + entry.getValue());\n-        }\n-        return join(delimiter, list);\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMTI4Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492001286", "bodyText": "Please don't do this, it will break NewPipe Legacy unfortunately", "author": "wb9688", "createdAt": "2020-09-21T12:24:13Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -330,7 +358,7 @@ public static boolean areHardcodedYoutubeMusicKeysValid() throws IOException, Re\n                 .end()\n                 .value(\"query\", \"test\")\n                 .value(\"params\", \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\")\n-            .end().done().getBytes(\"UTF-8\");\n+            .end().done().getBytes(StandardCharsets.UTF_8);", "originalCommit": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzOTQyMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r495439422", "bodyText": "wow, the cleanup feature on commit from Android Studio changed that to StandardCharsets when i changed it to the String.", "author": "XiangRongLin", "createdAt": "2020-09-26T09:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMTI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f9cf340ede6580ff20ba060096c3c1b826050d71", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\nindex 6a582cbf..672564c8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java\n\n@@ -358,7 +389,7 @@ public class YoutubeParsingHelper {\n                 .end()\n                 .value(\"query\", \"test\")\n                 .value(\"params\", \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\")\n-            .end().done().getBytes(StandardCharsets.UTF_8);\n+            .end().done().getBytes(\"UTF-8\");\n         // @formatter:on\n \n         Map<String, List<String>> headers = new HashMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMzUxNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492003516", "bodyText": "This function is unnecessary imho", "author": "wb9688", "createdAt": "2020-09-21T12:28:08Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n+        } catch (final Exception e) {\n+            try {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            } catch (final Exception ignored) {\n+            }\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {", "originalCommit": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cf340ede6580ff20ba060096c3c1b826050d71", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex d5e30745..d424129e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -28,6 +28,7 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n \n /**\n  * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNTYxOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492005618", "bodyText": "This doesn't work properly for the Mix types having a prefix longer than 2 letters.", "author": "wb9688", "createdAt": "2020-09-21T12:30:46Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,33 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is\n+     * like\n+     * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>.\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            final URL urlObj = Utils.stringToURL(url);\n+            final String listID = Utils.getQueryValue(urlObj, \"list\");\n+            if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n+                String videoID = Utils.getQueryValue(urlObj, \"v\");\n+                if (videoID == null) {\n+                    videoID = listID.substring(2);", "originalCommit": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cf340ede6580ff20ba060096c3c1b826050d71", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\nindex 09644787..aa2908e6 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java\n\n@@ -89,7 +94,7 @@ public class YoutubePlaylistLinkHandlerFactory extends ListLinkHandlerFactory {\n             if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n                 String videoID = Utils.getQueryValue(urlObj, \"v\");\n                 if (videoID == null) {\n-                    videoID = listID.substring(2);\n+                    videoID = YoutubeParsingHelper.extractVideoIdFromMixId(listID);\n                 }\n                 final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID\n                     + \"&list=\" + listID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNjk0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492006949", "bodyText": "It should require the cookie.", "author": "wb9688", "createdAt": "2020-09-21T12:33:02Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n+        } catch (final Exception e) {\n+            try {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            } catch (final Exception ignored) {\n+            }\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {", "originalCommit": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cf340ede6580ff20ba060096c3c1b826050d71", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\nindex d5e30745..d424129e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java\n\n@@ -28,6 +28,7 @@ import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+import static org.schabi.newpipe.extractor.utils.Utils.isNullOrEmpty;\n \n /**\n  * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNzE0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492007140", "bodyText": "When requiring the cookie, this won't work anymore.", "author": "wb9688", "createdAt": "2020-09-21T12:33:21Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,341 @@\n+package org.schabi.newpipe.extractor.services.youtube;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.ChannelMix;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.Invalid;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.Mix;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.MixWithIndex;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.MyMix;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMixPlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+@RunWith(Suite.class)\n+@SuiteClasses({Mix.class, MixWithIndex.class, MyMix.class, Invalid.class, ChannelMix.class})\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    public static final String PBJ = \"&pbj=1\";\n+    private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n+    private static final String VIDEO_TITLE =\n+            \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                    .getPlaylistExtractor(\n+                            \"https://www.youtube.com/watch?v=\" + VIDEO_ID + \"&list=RD\" + VIDEO_ID);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            final String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(VIDEO_TITLE));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            MatcherAssert.assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(VIDEO_ID));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            final InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertFalse(streams.getItems().isEmpty());\n+            assertTrue(streams.hasNextPage());\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            final InfoItemsPage<StreamInfoItem> streams = extractor.getPage(", "originalCommit": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f9cf340ede6580ff20ba060096c3c1b826050d71", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\nindex 8e41f12d..49fb3fe0 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java\n\n@@ -1,15 +1,8 @@\n package org.schabi.newpipe.extractor.services.youtube;\n \n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.startsWith;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n-import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n-\n+import java.util.Collections;\n import java.util.HashSet;\n+import java.util.Map;\n import java.util.Set;\n import org.hamcrest.MatcherAssert;\n import org.junit.BeforeClass;\n"}}, {"oid": "f9cf340ede6580ff20ba060096c3c1b826050d71", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f9cf340ede6580ff20ba060096c3c1b826050d71", "message": "[Youtube] Apply review suggestions and avoid channel mix edge case", "committedDate": "2020-09-26T09:45:31Z", "type": "forcePushed"}, {"oid": "0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "message": "[Youtube] Implement mix extractor for auto-generated playlists.\n\n-New YoutubeMixPlaylistExtractor, that extracts from a mix (auto-generated playlist).\n-The url has the format of \"youtube.com/watch?v=videoID&playlistID\",\nwhere playlistID always starts with \"RD\" and usually followed by the videoID.\n-Change YoutubePlaylistLinkHandlerFactory to create a linkhandler with the given url if it is a mix.\n-Change YoutubeService to return YoutubeMixPlaylistExtractor if the url is a mix.", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "d74265c846854263088ee69dfca551b2f70493d8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d74265c846854263088ee69dfca551b2f70493d8", "message": "[Youtube] Extract getThumbnailUrl into method and change getUploaderName", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "327a5730a883aa6725a629763a3df0cebda30d03", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/327a5730a883aa6725a629763a3df0cebda30d03", "message": "[Youtube] Add some comments to mix", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "a376792a5d557e4d0e9101147af6fe49e72d4c3f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a376792a5d557e4d0e9101147af6fe49e72d4c3f", "message": "[Youtube] Handle case where url is in \"youtube.com/playlist?list=listID\" format.\n\nThis occurs when sharing a mix from the official youtube app.", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "0ff054acb440ff310c543f600b32b594338873c2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0ff054acb440ff310c543f600b32b594338873c2", "message": "[Youtube] Extract initial playlist info", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "ec6b99c082267e2df609cac46144fc4f41109591", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ec6b99c082267e2df609cac46144fc4f41109591", "message": "[Youtube] Adjust mix extractor to new user agent\n\nAlso extract continuation now", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "68a3948af6dbd5795c061ff874df67ed1d19cb78", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/68a3948af6dbd5795c061ff874df67ed1d19cb78", "message": "[Youtube] Fix get banner url", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "df38b1926c8a5fb9fb510dd15ff75b5f13897877", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/df38b1926c8a5fb9fb510dd15ff75b5f13897877", "message": "[Youtube] Add tests and take thumbnail image always from first video of mix\n\nAlso fix getThumbnailUrl for \"My Mix\"", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "822cf307f723613baaaa2fde0bbb78aaa1d4082a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/822cf307f723613baaaa2fde0bbb78aaa1d4082a", "message": "[Youtube] Add _ITEMS constants and improve code style\n\nMove thumbnail id exctraction code to getThumbnailUrlFromId\nAdd test for \"My mix\" detection to service tests\nUse ITEM_COUNT_UNKNOWN everywhere instead of -1 and add some tests", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "3ff8619bcc703920705431e217d549726cefb830", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3ff8619bcc703920705431e217d549726cefb830", "message": "[Youtube] apply wb9688 suggestion (mix)\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "421935401f9c8fc45aed92742cb111f6b9e45193", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/421935401f9c8fc45aed92742cb111f6b9e45193", "message": "[Youtube] Add subchannel functions to mix and fix imports", "committedDate": "2020-12-12T19:30:57Z", "type": "commit"}, {"oid": "22d2f7e4006036aab8ac63478b791c4ab3de1624", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/22d2f7e4006036aab8ac63478b791c4ab3de1624", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)", "committedDate": "2020-12-12T19:32:40Z", "type": "commit"}, {"oid": "a338e4e08e385e741c18ce2d30ae1e5016599cf0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a338e4e08e385e741c18ce2d30ae1e5016599cf0", "message": "[Youtube] Apply review suggestions and avoid channel mix edge case", "committedDate": "2020-12-12T19:32:43Z", "type": "commit"}, {"oid": "f90f6fcf92b355f668656e9e277bdb2086d11ab5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f90f6fcf92b355f668656e9e277bdb2086d11ab5", "message": "[YouTube] Don't escape & in getUrlFromNavigationEndpoint for playlists", "committedDate": "2020-12-12T19:40:13Z", "type": "commit"}, {"oid": "f90f6fcf92b355f668656e9e277bdb2086d11ab5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f90f6fcf92b355f668656e9e277bdb2086d11ab5", "message": "[YouTube] Don't escape & in getUrlFromNavigationEndpoint for playlists", "committedDate": "2020-12-12T19:40:13Z", "type": "forcePushed"}]}