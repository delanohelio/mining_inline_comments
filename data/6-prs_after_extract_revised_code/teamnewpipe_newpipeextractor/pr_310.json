{"pr_number": 310, "pr_title": "Add support for soundcloud comments", "pr_createdAt": "2020-04-10T13:02:32Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310", "timeline": [{"oid": "636c430743c98888edd968ade4950b9971ae4001", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/636c430743c98888edd968ade4950b9971ae4001", "message": "refactor: create extractors and linkHandler packages for SoundCloud, move YoutubeParsingHelper to youtube package (not linkhandler anymore)", "committedDate": "2020-04-10T08:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3ODM1Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r406778356", "bodyText": "Remove the System.err.printlns", "author": "wb9688", "createdAt": "2020-04-10T14:19:36Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class SoundcloudCommentsExtractor extends CommentsExtractor {\n+\n+    private JsonObject json;\n+\n+    public SoundcloudCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+        super(service, uiHandler);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws IOException, ExtractionException {\n+        return json.getString(\"next_href\");\n+    }\n+\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        Downloader dl = NewPipe.getDownloader();\n+        Response rp = dl.get(pageUrl);\n+        try {\n+            json = JsonParser.object().from(rp.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        System.err.println(response.responseBody());", "originalCommit": "227f1612f66b1c0b3ebf18a34e81e08f86347f12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\nindex 80119047..8bf77347 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\n\n@@ -60,13 +60,11 @@ public class SoundcloudCommentsExtractor extends CommentsExtractor {\n     @Override\n     public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n         Response response = downloader.get(getUrl());\n-        System.err.println(response.responseBody());\n         try {\n             json = JsonParser.object().from(response.responseBody());\n         } catch (JsonParserException e) {\n             throw new ParsingException(\"Could not parse json\", e);\n         }\n-        System.err.println(json);\n     }\n \n     @Nonnull\n"}}, {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d4352f9b848ee7e02c9523597399b4b3ccec9dac", "message": "support comments for SoundCloud", "committedDate": "2020-04-10T18:41:41Z", "type": "commit"}, {"oid": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d4352f9b848ee7e02c9523597399b4b3ccec9dac", "message": "support comments for SoundCloud", "committedDate": "2020-04-10T18:41:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2OTA1MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r410769051", "bodyText": "singletonList import is unused", "author": "TobiGr", "createdAt": "2020-04-18T23:21:07Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudService.java", "diffHunk": "@@ -10,18 +10,22 @@\n import org.schabi.newpipe.extractor.localization.ContentCountry;\n import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n import org.schabi.newpipe.extractor.search.SearchExtractor;\n+import org.schabi.newpipe.extractor.services.soundcloud.extractors.*;\n+import org.schabi.newpipe.extractor.services.soundcloud.linkHandler.*;\n import org.schabi.newpipe.extractor.stream.StreamExtractor;\n import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n \n import java.util.List;\n \n+import static java.util.Arrays.asList;\n import static java.util.Collections.singletonList;\n import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.AUDIO;\n+import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.COMMENTS;", "originalCommit": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg5MTM0Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r410891347", "bodyText": "removed in the last commit", "author": "B0pol", "createdAt": "2020-04-19T12:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2OTA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0cbbc2a1f96838382b8200a208e8678f5eded77a", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudService.java\nindex e9cdb955..e114d030 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudService.java\n\n@@ -18,7 +18,6 @@ import org.schabi.newpipe.extractor.subscription.SubscriptionExtractor;\n import java.util.List;\n \n import static java.util.Arrays.asList;\n-import static java.util.Collections.singletonList;\n import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.AUDIO;\n import static org.schabi.newpipe.extractor.StreamingService.ServiceInfo.MediaCapability.COMMENTS;\n \n"}}, {"oid": "0cbbc2a1f96838382b8200a208e8678f5eded77a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0cbbc2a1f96838382b8200a208e8678f5eded77a", "message": "remove unused import", "committedDate": "2020-04-19T12:16:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI0OTg4OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412249888", "bodyText": "Use @see", "author": "wb9688", "createdAt": "2020-04-21T14:45:56Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java", "diffHunk": "@@ -3,17 +3,44 @@\n import org.schabi.newpipe.extractor.InfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n \n import javax.annotation.Nullable;\n \n public interface CommentsInfoItemExtractor extends InfoItemExtractor {\n-    String getCommentId() throws ParsingException;\n-    String getCommentText() throws ParsingException;\n-    String getAuthorName() throws ParsingException;\n-    String getAuthorThumbnail() throws ParsingException;\n+\n+    /**\n+     * AuthorEndpoint, in other words, link to authors' channel page\n+     */\n     String getAuthorEndpoint() throws ParsingException;\n+\n+    /**\n+     * Return the like count of the comment, or -1 if it's unavailable\n+     * see {@link StreamExtractor#getLikeCount()}\n+     */\n+    int getLikeCount() throws ParsingException;\n+\n+    /**\n+     * The text of the comment\n+     */\n+    String getCommentText() throws ParsingException;\n+\n+    /**\n+     * The upload date given by the service, unmodified\n+     * see {@link StreamExtractor#getTextualUploadDate()}", "originalCommit": "0cbbc2a1f96838382b8200a208e8678f5eded77a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java\nindex 2b9fc375..cf1501a2 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java\n\n@@ -9,14 +9,9 @@ import javax.annotation.Nullable;\n \n public interface CommentsInfoItemExtractor extends InfoItemExtractor {\n \n-    /**\n-     * AuthorEndpoint, in other words, link to authors' channel page\n-     */\n-    String getAuthorEndpoint() throws ParsingException;\n-\n     /**\n      * Return the like count of the comment, or -1 if it's unavailable\n-     * see {@link StreamExtractor#getLikeCount()}\n+     * @see StreamExtractor#getLikeCount()\n      */\n     int getLikeCount() throws ParsingException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1MTcwNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412251705", "bodyText": "Imho these should be renamed to getUploaderUrl(), getUploaderName(), and getUploaderAvatarUrl() to be consistent with the other Extractors.", "author": "wb9688", "createdAt": "2020-04-21T14:47:57Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java", "diffHunk": "@@ -3,17 +3,44 @@\n import org.schabi.newpipe.extractor.InfoItemExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.localization.DateWrapper;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n \n import javax.annotation.Nullable;\n \n public interface CommentsInfoItemExtractor extends InfoItemExtractor {\n-    String getCommentId() throws ParsingException;\n-    String getCommentText() throws ParsingException;\n-    String getAuthorName() throws ParsingException;\n-    String getAuthorThumbnail() throws ParsingException;\n+\n+    /**\n+     * AuthorEndpoint, in other words, link to authors' channel page\n+     */", "originalCommit": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java\nindex 2b9fc375..cf1501a2 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfoItemExtractor.java\n\n@@ -9,14 +9,9 @@ import javax.annotation.Nullable;\n \n public interface CommentsInfoItemExtractor extends InfoItemExtractor {\n \n-    /**\n-     * AuthorEndpoint, in other words, link to authors' channel page\n-     */\n-    String getAuthorEndpoint() throws ParsingException;\n-\n     /**\n      * Return the like count of the comment, or -1 if it's unavailable\n-     * see {@link StreamExtractor#getLikeCount()}\n+     * @see StreamExtractor#getLikeCount()\n      */\n     int getLikeCount() throws ParsingException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NDY4Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412254686", "bodyText": "Just return \"Comments\" like in PeerTube (and YouTube in my Page PR), as that function is just pointless. Maybe even do that in CommentsExtractor directly and remove the function from all the comments extractors.", "author": "wb9688", "createdAt": "2020-04-21T14:51:23Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class SoundcloudCommentsExtractor extends CommentsExtractor {\n+\n+    private JsonObject json;\n+\n+    public SoundcloudCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+        super(service, uiHandler);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws IOException, ExtractionException {\n+        return json.getString(\"next_href\");\n+    }\n+\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        Downloader dl = NewPipe.getDownloader();\n+        Response rp = dl.get(pageUrl);\n+        try {\n+            json = JsonParser.object().from(rp.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        try {\n+            json = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return \"SoundCloud comments of track \" + getId();", "originalCommit": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\nindex 8bf77347..71c6469d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\n\n@@ -67,14 +67,8 @@ public class SoundcloudCommentsExtractor extends CommentsExtractor {\n         }\n     }\n \n-    @Nonnull\n-    @Override\n-    public String getName() throws ParsingException {\n-        return \"SoundCloud comments of track \" + getId();\n-    }\n-\n     private void collectStreamsFrom(final CommentsInfoItemsCollector collector, final JsonArray entries) throws ParsingException {\n-        String url = getUrl();\n+        final String url = getUrl();\n         for (Object comment : entries) {\n             collector.commit(new SoundcloudCommentsInfoItemExtractor((JsonObject) comment, url));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTY0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412255649", "bodyText": "final", "author": "wb9688", "createdAt": "2020-04-21T14:52:35Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.comments.CommentsExtractor;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItem;\n+import org.schabi.newpipe.extractor.comments.CommentsInfoItemsCollector;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+\n+public class SoundcloudCommentsExtractor extends CommentsExtractor {\n+\n+    private JsonObject json;\n+\n+    public SoundcloudCommentsExtractor(StreamingService service, ListLinkHandler uiHandler) {\n+        super(service, uiHandler);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getInitialPage() throws IOException, ExtractionException {\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws IOException, ExtractionException {\n+        return json.getString(\"next_href\");\n+    }\n+\n+    @Override\n+    public InfoItemsPage<CommentsInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n+        Downloader dl = NewPipe.getDownloader();\n+        Response rp = dl.get(pageUrl);\n+        try {\n+            json = JsonParser.object().from(rp.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+\n+        final CommentsInfoItemsCollector collector = new CommentsInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, json.getArray(\"collection\"));\n+\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader) throws IOException, ExtractionException {\n+        Response response = downloader.get(getUrl());\n+        try {\n+            json = JsonParser.object().from(response.responseBody());\n+        } catch (JsonParserException e) {\n+            throw new ParsingException(\"Could not parse json\", e);\n+        }\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        return \"SoundCloud comments of track \" + getId();\n+    }\n+\n+    private void collectStreamsFrom(final CommentsInfoItemsCollector collector, final JsonArray entries) throws ParsingException {\n+        String url = getUrl();", "originalCommit": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\nindex 8bf77347..71c6469d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudCommentsExtractor.java\n\n@@ -67,14 +67,8 @@ public class SoundcloudCommentsExtractor extends CommentsExtractor {\n         }\n     }\n \n-    @Nonnull\n-    @Override\n-    public String getName() throws ParsingException {\n-        return \"SoundCloud comments of track \" + getId();\n-    }\n-\n     private void collectStreamsFrom(final CommentsInfoItemsCollector collector, final JsonArray entries) throws ParsingException {\n-        String url = getUrl();\n+        final String url = getUrl();\n         for (Object comment : entries) {\n             collector.commit(new SoundcloudCommentsInfoItemExtractor((JsonObject) comment, url));\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NzkyNQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412257925", "bodyText": "getUrl() should never return an API URL.", "author": "wb9688", "createdAt": "2020-04-21T14:55:05Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/linkHandler/SoundcloudCommentsLinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.schabi.newpipe.extractor.services.soundcloud.linkHandler;\n+\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandlerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.schabi.newpipe.extractor.services.soundcloud.SoundcloudParsingHelper.clientId;\n+\n+public class SoundcloudCommentsLinkHandlerFactory extends ListLinkHandlerFactory {\n+\n+    private static final SoundcloudCommentsLinkHandlerFactory instance = new SoundcloudCommentsLinkHandlerFactory();\n+\n+    public static SoundcloudCommentsLinkHandlerFactory getInstance() {\n+        return instance;\n+    }\n+\n+    @Override\n+    public String getUrl(String id, List<String> contentFilter, String sortFilter) throws ParsingException {\n+        try {\n+            return \"https://api-v2.soundcloud.com/tracks/\" + id + \"/comments\" + \"?client_id=\" + clientId() +\n+                    \"&threaded=0\" + \"&filter_replies=1\"; // anything but 1 = sort by new\n+            // + \"&limit=NUMBER_OF_ITEMS_PER_REQUEST\". We let the API control (default = 10)\n+            // + \"&offset=OFFSET\". We let the API control (default = 0, then we use nextPageUrl)\n+        } catch (ExtractionException | IOException e) {\n+            throw new ParsingException(\"Could not get comments\");\n+        }\n+    }", "originalCommit": "d4352f9b848ee7e02c9523597399b4b3ccec9dac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3Mjk2Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412372963", "bodyText": "Why this indentation? Plus as you said, you shouldn't catch Throwable, and this file isn't even related to your PR", "author": "wb9688", "createdAt": "2020-04-21T17:59:39Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java", "diffHunk": "@@ -103,7 +103,7 @@ private String readFromInputStream(InputStream inputStream) throws InvalidSource\n             }\n         } catch (InvalidSourceException e) {\n             throw e;\n-        } catch (Throwable e) {\n+        }   catch (Throwable e) {", "originalCommit": "1cca34ca272f0209a94b2298388994eff421a69d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3Mzg4Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/310#discussion_r412373886", "bodyText": "No, I was just browsing with vscode and sent it on irc for bad practise, maybe I pressed without seeing. I'll remove it.", "author": "B0pol", "createdAt": "2020-04-21T18:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3Mjk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java\nindex 66b02679..55a9c7c1 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeSubscriptionExtractor.java\n\n@@ -103,7 +103,7 @@ public class YoutubeSubscriptionExtractor extends SubscriptionExtractor {\n             }\n         } catch (InvalidSourceException e) {\n             throw e;\n-        }   catch (Throwable e) {\n+        } catch (Throwable e) {\n             throw new InvalidSourceException(e);\n         } finally {\n             try {\n"}}, {"oid": "2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2ff4bf14faf52c21f91df23ad44cfd2b5a1f9120", "message": "refactor comments\n\nrename methods in CommentsInfoItem interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead", "committedDate": "2020-04-21T18:04:38Z", "type": "forcePushed"}, {"oid": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2564bcf39997cbab8b6e331088c3ee41076e5e00", "message": "refactor comments\n\nrename methods in CommentsInfoItemExtractor interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead", "committedDate": "2020-04-21T18:05:54Z", "type": "commit"}, {"oid": "2564bcf39997cbab8b6e331088c3ee41076e5e00", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2564bcf39997cbab8b6e331088c3ee41076e5e00", "message": "refactor comments\n\nrename methods in CommentsInfoItemExtractor interface to match the other method names across NewPipeExtractor\nremove getName in (Youtube|SoundCloud|Peertube)CommentsExtractor and move it up in CommentsExtractor, return \"Comments\" instead", "committedDate": "2020-04-21T18:05:54Z", "type": "forcePushed"}, {"oid": "bc13e0c616c7a01c5f2588ed08e4915ef2ea9106", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/bc13e0c616c7a01c5f2588ed08e4915ef2ea9106", "message": "Merge remote-tracking branch 'upstream/dev' into soundcloudComments", "committedDate": "2020-05-05T12:49:21Z", "type": "commit"}]}