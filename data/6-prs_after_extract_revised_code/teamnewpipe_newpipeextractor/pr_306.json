{"pr_number": 306, "pr_title": "Extract metadata for youtube, soundcloud & mediaccc", "pr_createdAt": "2020-04-09T11:25:29Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406203511", "bodyText": "You can't simply do that, see https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes", "author": "wb9688", "createdAt": "2020-04-09T13:28:34Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");\n+        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work", "originalCommit": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNTE5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406325197", "bodyText": "Yes, I know.\nFrom Java Locale documentation\n\nThree-letter language/country(region) codes\n\n\nThe Locale constructors have always specified that the language and the country param be two characters in length, although in practice they have accepted any length. The specification has now been relaxed to allow language codes of two to eight characters and country (region) codes of two to three characters, and in particular, three-letter language codes and three-digit region codes as specified in the IANA Language Subtag Registry. For compatibility, the implementation still does not impose a length constraint.\n\nBut in practice, it doesn't work.\nThe Locale object is created but\u2026 it's weird and seems thing aren't working with it, and most important getDisplayLanguage or getDisplayName. Try this in\nLocale locale = new Locale(\"deu\");\nSystem.out.println(locale.getDisplayLanguage(Locale.ENGLISH)); //deu, it should be German\nLocale locale = new Locale(\"de\");\nSystem.out.println(locale.getDisplayLanguage(Locale.ENGLISH)); //German\nSo if you have a proper way to convert three letter codes to two, I'd like to know.\nyou can try with eng, deu, fra\u2026 it never works, and also, new Locale(\"deu\").equals(new Locale(\"de\")) is false.", "author": "B0pol", "createdAt": "2020-04-09T16:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzgxMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406337812", "bodyText": "@B0pol: You should use the bibliographic ones (ISO 639-2/B), not the terminology ones (ISO 639-2/T). I.e. ger instead of deu. Does YouTube return B or T?\nAlso, you can't simply remove the last character, as that doesn't work for all languages.", "author": "wb9688", "createdAt": "2020-04-09T16:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NTk3NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r407165974", "bodyText": "It's MediaCCC, not YouTube.\nIt MediaCCC gives deu then ISO 639-3 (or 639-2/T???) and Java natively handles ISO 639-2/B through new Locale(\"ISO 639-2/B code\").\nThough java has Locale#getISO3Language(), so you can do a 639-3 -> 639-1 map. And if it fails, remove last letter. That's the best thing we can do, ISO codes are not backward compatible lol, and Java doesn't handle all of them.\nSee Localization.getLocaleFromThreeLetterCode(String code) in my latest commit.", "author": "B0pol", "createdAt": "2020-04-12T08:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 2e4949e5..305541f0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n\n@@ -249,19 +249,19 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n     }\n \n     @Override\n-    public Locale getLanguageInfo() throws ParsingException {\n-        String code = JsonUtils.getString(data, \"original_language\");\n-        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work\n-        return new Locale(code);\n+    public Locale getLanguageInfo() {\n+        return Localization.getLocaleFromThreeLetterCode(data.getString(\"original_language\"));\n     }\n \n+    @Nonnull\n     @Override\n     public List<String> getTags() {\n-        try {\n-            return (List) JsonUtils.getArray(data, \"tags\");\n-        } catch (Exception e) {\n-            return Collections.emptyList();\n+        JsonArray tagsArray = data.getArray(\"tags\");\n+        List<String> tagsList = new ArrayList<>();\n+        for (Object tag : tagsArray) {\n+            tagsList.add(tag.toString());\n         }\n+        return tagsList;\n     }\n \n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzY5OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406203699", "bodyText": "Why did you do this?", "author": "wb9688", "createdAt": "2020-04-09T13:28:50Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -121,12 +99,14 @@ public String getName() throws ParsingException {\n \n         try {\n             title = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"title\"));\n-        } catch (Exception ignored) {}\n+        } catch (Exception ignored) {\n+        }", "originalCommit": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NDc1MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406274750", "bodyText": "Ctrl alt l", "author": "B0pol", "createdAt": "2020-04-09T15:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMzY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ad662789dc00eead7ba8c2705dc8102edba2de7", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 7c157e58..4bd4be94 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -95,20 +97,12 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getName() throws ParsingException {\n         assertPageFetched();\n-        String title = null;\n+        String title = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"title\"));\n \n-        try {\n-            title = getTextFromObject(getVideoPrimaryInfoRenderer().getObject(\"title\"));\n-        } catch (Exception ignored) {\n-        }\n+        if (isNullOrEmpty(title)) {\n+            title = playerResponse.getObject(\"videoDetails\").getString(\"title\");\n \n-        if (title == null) {\n-            try {\n-                title = playerResponse.getObject(\"videoDetails\").getString(\"title\");\n-            } catch (Exception ignored) {\n-            }\n-\n-            if (title == null) throw new ParsingException(\"Could not get name\");\n+            if (isNullOrEmpty(title)) throw new ParsingException(\"Could not get name\");\n         }\n \n         return title;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTM1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406205352", "bodyText": "Is there a reason why you don't just do data.getString(\"original_language\")?", "author": "wb9688", "createdAt": "2020-04-09T13:31:13Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java", "diffHunk": "@@ -249,13 +250,18 @@ public String getLicence() throws ParsingException {\n \n     @Override\n     public Locale getLanguageInfo() throws ParsingException {\n-        return null;\n+        String code = JsonUtils.getString(data, \"original_language\");", "originalCommit": "d2ddd76951a9914d959126cbd5f00d1aec4b5d0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMjk4Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406332982", "bodyText": "No, I don't know. Why people created JsonUtils.getString then?", "author": "B0pol", "createdAt": "2020-04-09T16:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0NDc1OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r406344759", "bodyText": "I think you could use it to do JsonUtils.getString(data, \"response.crappyRenderer.title.simpleText\") instead of data.getObject(\"response\").getObject(\"crappyRenderer\").getObject(\"title\").getString(\"simpleText\"), though I think the issue with it is that it doesn't support getting stuff from a JSON array.", "author": "wb9688", "createdAt": "2020-04-09T16:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNTM1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\nindex 2e4949e5..305541f0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/media_ccc/extractors/MediaCCCStreamExtractor.java\n\n@@ -249,19 +249,19 @@ public class MediaCCCStreamExtractor extends StreamExtractor {\n     }\n \n     @Override\n-    public Locale getLanguageInfo() throws ParsingException {\n-        String code = JsonUtils.getString(data, \"original_language\");\n-        code = code.substring(0, 2); //remove the last letter. new Locale (three_letter_code) don't work\n-        return new Locale(code);\n+    public Locale getLanguageInfo() {\n+        return Localization.getLocaleFromThreeLetterCode(data.getString(\"original_language\"));\n     }\n \n+    @Nonnull\n     @Override\n     public List<String> getTags() {\n-        try {\n-            return (List) JsonUtils.getArray(data, \"tags\");\n-        } catch (Exception e) {\n-            return Collections.emptyList();\n+        JsonArray tagsArray = data.getArray(\"tags\");\n+        List<String> tagsList = new ArrayList<>();\n+        for (Object tag : tagsArray) {\n+            tagsList.add(tag.toString());\n         }\n+        return tagsList;\n     }\n \n     @Nonnull\n"}}, {"oid": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "message": "create Localization.getLocaleFromThreeLetterCode -> improve getTags for mediaCCC (but also othe services)", "committedDate": "2020-04-12T08:48:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTcxMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r411599711", "bodyText": "I'm interested in why the JsonUtils is not sufficient here. Is it for performance reasons or the the unchecked cast?\nThis section to transform the JsonArray to a ArrayList is written once for youtube, peertube and mediaccc. This could be extracted into the JsonUtils", "author": "XiangRongLin", "createdAt": "2020-04-20T18:31:59Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -236,10 +236,16 @@ public StreamInfoItemsCollector getRelatedStreams() throws IOException, Extracti\n         return collector;\n     }\n \n+    @Nonnull\n     @Override\n     public List<String> getTags() {\n         try {\n-            return (List) JsonUtils.getArray(json, \"tags\");\n+            JsonArray tagsArray = json.getArray(\"tags\");\n+            List<String> tagsList = new ArrayList<>();", "originalCommit": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2MjkyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412262929", "bodyText": "@XiangRongLin is right that this code is stupid. return json.getArray(\"tags\"); would be sufficent, as it returns a JsonArray, which extends ArrayList.", "author": "wb9688", "createdAt": "2020-04-21T15:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyMDYyOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412820629", "bodyText": "no, because then you return a JsonArray, i.e. ArrayList<Object>, and we want a List<String>, that <String> is the problem, because Object != String and in a JsonArray you can have often JsonObjects for example. Intellij says Unchecked assignment: 'java.util.List' to 'java.util.List<java.lang.String>' .\nThere is still one problem with the algorithm i did: if it's not a String but any other object, it should not be included. I changed it in the \"refactoring\" commit and moved it to JsonUtils", "author": "B0pol", "createdAt": "2020-04-22T09:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5OTcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5bb7234c4cd957fc27e847f2642334250dad2c36", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java\nindex 310a18c3..50700e7c 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java\n\n@@ -239,16 +239,7 @@ public class PeertubeStreamExtractor extends StreamExtractor {\n     @Nonnull\n     @Override\n     public List<String> getTags() {\n-        try {\n-            JsonArray tagsArray = json.getArray(\"tags\");\n-            List<String> tagsList = new ArrayList<>();\n-            for (Object tag : tagsArray) {\n-                tagsList.add(tag.toString());\n-            }\n-            return tagsList;\n-        } catch (Exception e) {\n-            return Collections.emptyList();\n-        }\n+        return JsonUtils.getListStringFromJsonArray(json.getArray(\"tags\"));\n     }\n \n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTQzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412211439", "bodyText": "According to https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#getISO3Language--, it returns ISO 639-2/T, not ISO 639-3.", "author": "wb9688", "createdAt": "2020-04-21T14:01:43Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).", "originalCommit": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwOTU5Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412809596", "bodyText": "Wow they are terrible at naming functions then. Why are they naming getISO3Language and not getISO2TLanguage?????", "author": "B0pol", "createdAt": "2020-04-22T09:09:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5bb7234c4cd957fc27e847f2642334250dad2c36", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\nindex 82e510ea..a063c62f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n\n@@ -100,28 +103,23 @@ public class Localization implements Serializable {\n     }\n \n     /**\n-     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * Converts a three letter language code (ISO 639-2/T) to a Locale\n      * in the limit of Java Locale class.\n-     * It can also handle 639-2/T but may return a wrong locale.\n-     * from https://stackoverflow.com/a/674122/12680950\n-     * <p>\n-     * It should not be used with 639-2/B, since java already handle it.\n-     * (Just use new Locale(\"an ISO 639-2/B code\")).\n      *\n      * @param code a three letter language code\n      * @return the Locale corresponding\n      */\n-    public static Locale getLocaleFromThreeLetterCode(String code) {\n+    public static Locale getLocaleFromThreeLetterCode(@Nonnull String code) throws ParsingException {\n         String[] languages = Locale.getISOLanguages();\n         Map<String, Locale> localeMap = new HashMap<>(languages.length);\n         for (String language : languages) {\n-            Locale locale = new Locale(language);\n+            final Locale locale = new Locale(language);\n             localeMap.put(locale.getISO3Language(), locale);\n         }\n         if (localeMap.containsKey(code)) {\n             return localeMap.get(code);\n         } else {\n-            return new Locale(code.substring(0, 2));\n+            throw new ParsingException(\"Could not get Locale from this three letter language code\" + code);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTY3MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412211671", "bodyText": "final", "author": "wb9688", "createdAt": "2020-04-21T14:01:57Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).\n+     *\n+     * @param code a three letter language code\n+     * @return the Locale corresponding\n+     */\n+    public static Locale getLocaleFromThreeLetterCode(String code) {\n+        String[] languages = Locale.getISOLanguages();\n+        Map<String, Locale> localeMap = new HashMap<>(languages.length);\n+        for (String language : languages) {\n+            Locale locale = new Locale(language);", "originalCommit": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bb7234c4cd957fc27e847f2642334250dad2c36", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\nindex 82e510ea..a063c62f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n\n@@ -100,28 +103,23 @@ public class Localization implements Serializable {\n     }\n \n     /**\n-     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * Converts a three letter language code (ISO 639-2/T) to a Locale\n      * in the limit of Java Locale class.\n-     * It can also handle 639-2/T but may return a wrong locale.\n-     * from https://stackoverflow.com/a/674122/12680950\n-     * <p>\n-     * It should not be used with 639-2/B, since java already handle it.\n-     * (Just use new Locale(\"an ISO 639-2/B code\")).\n      *\n      * @param code a three letter language code\n      * @return the Locale corresponding\n      */\n-    public static Locale getLocaleFromThreeLetterCode(String code) {\n+    public static Locale getLocaleFromThreeLetterCode(@Nonnull String code) throws ParsingException {\n         String[] languages = Locale.getISOLanguages();\n         Map<String, Locale> localeMap = new HashMap<>(languages.length);\n         for (String language : languages) {\n-            Locale locale = new Locale(language);\n+            final Locale locale = new Locale(language);\n             localeMap.put(locale.getISO3Language(), locale);\n         }\n         if (localeMap.containsKey(code)) {\n             return localeMap.get(code);\n         } else {\n-            return new Locale(code.substring(0, 2));\n+            throw new ParsingException(\"Could not get Locale from this three letter language code\" + code);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMjE0OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r412212149", "bodyText": "Remove this part, as it's technically incorrect. Just throw an exception if it's not in the localeMap.", "author": "wb9688", "createdAt": "2020-04-21T14:02:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +98,30 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * in the limit of Java Locale class.\n+     * It can also handle 639-2/T but may return a wrong locale.\n+     * from https://stackoverflow.com/a/674122/12680950\n+     * <p>\n+     * It should not be used with 639-2/B, since java already handle it.\n+     * (Just use new Locale(\"an ISO 639-2/B code\")).\n+     *\n+     * @param code a three letter language code\n+     * @return the Locale corresponding\n+     */\n+    public static Locale getLocaleFromThreeLetterCode(String code) {\n+        String[] languages = Locale.getISOLanguages();\n+        Map<String, Locale> localeMap = new HashMap<>(languages.length);\n+        for (String language : languages) {\n+            Locale locale = new Locale(language);\n+            localeMap.put(locale.getISO3Language(), locale);\n+        }\n+        if (localeMap.containsKey(code)) {\n+            return localeMap.get(code);\n+        } else {\n+            return new Locale(code.substring(0, 2));\n+        }", "originalCommit": "9c853365b49c0a8bad913f7a01ccc28d3d5e49b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bb7234c4cd957fc27e847f2642334250dad2c36", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\nindex 82e510ea..a063c62f 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n\n@@ -100,28 +103,23 @@ public class Localization implements Serializable {\n     }\n \n     /**\n-     * Converts a three letter language code (ISO 639-3) to a Locale\n+     * Converts a three letter language code (ISO 639-2/T) to a Locale\n      * in the limit of Java Locale class.\n-     * It can also handle 639-2/T but may return a wrong locale.\n-     * from https://stackoverflow.com/a/674122/12680950\n-     * <p>\n-     * It should not be used with 639-2/B, since java already handle it.\n-     * (Just use new Locale(\"an ISO 639-2/B code\")).\n      *\n      * @param code a three letter language code\n      * @return the Locale corresponding\n      */\n-    public static Locale getLocaleFromThreeLetterCode(String code) {\n+    public static Locale getLocaleFromThreeLetterCode(@Nonnull String code) throws ParsingException {\n         String[] languages = Locale.getISOLanguages();\n         Map<String, Locale> localeMap = new HashMap<>(languages.length);\n         for (String language : languages) {\n-            Locale locale = new Locale(language);\n+            final Locale locale = new Locale(language);\n             localeMap.put(locale.getISO3Language(), locale);\n         }\n         if (localeMap.containsKey(code)) {\n             return localeMap.get(code);\n         } else {\n-            return new Locale(code.substring(0, 2));\n+            throw new ParsingException(\"Could not get Locale from this three letter language code\" + code);\n         }\n     }\n }\n"}}, {"oid": "5bb7234c4cd957fc27e847f2642334250dad2c36", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5bb7234c4cd957fc27e847f2642334250dad2c36", "message": "use javax.annotation.Nonnull instead of edu.umd.cs.findbugs.annotations.NonNull", "committedDate": "2020-04-22T09:44:59Z", "type": "forcePushed"}, {"oid": "de7515dddfcfa96e5df9922532a78f3ed845ea4c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/de7515dddfcfa96e5df9922532a78f3ed845ea4c", "message": "use javax.annotation.Nonnull instead of edu.umd.cs.findbugs.annotations.NonNull", "committedDate": "2020-04-22T09:47:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMTkwNw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421511907", "bodyText": "Could you change these to just track.getString()?", "author": "wb9688", "createdAt": "2020-05-07T13:40:27Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java", "diffHunk": "@@ -269,17 +260,17 @@ public String getHost() throws ParsingException {\n \n     @Override\n     public String getPrivacy() throws ParsingException {\n-        return \"\";\n+        return JsonUtils.getString(track, \"sharing\");\n     }\n \n     @Override\n     public String getCategory() throws ParsingException {\n-        return \"\";\n+        return JsonUtils.getString(track, \"genre\");\n     }\n \n     @Override\n     public String getLicence() throws ParsingException {\n-        return \"\";\n+        return JsonUtils.getString(track, \"license\");", "originalCommit": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0ddc91fbfb9f7942c6201df1056818b214ba3b9", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudStreamExtractor.java\nsimilarity index 86%\nrename from extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java\nrename to extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudStreamExtractor.java\nindex 1aad52a4..4f24efe9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudStreamExtractor.java\n\n@@ -253,24 +280,28 @@ public class SoundcloudStreamExtractor extends StreamExtractor {\n         return null;\n     }\n \n+    @Nonnull\n     @Override\n     public String getHost() throws ParsingException {\n         return \"\";\n     }\n \n+    @Nonnull\n     @Override\n     public String getPrivacy() throws ParsingException {\n-        return JsonUtils.getString(track, \"sharing\");\n+        return track.getString(\"sharing\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getCategory() throws ParsingException {\n-        return JsonUtils.getString(track, \"genre\");\n+        return track.getString(\"genre\");\n     }\n \n+    @Nonnull\n     @Override\n     public String getLicence() throws ParsingException {\n-        return JsonUtils.getString(track, \"license\");\n+        return track.getString(\"license\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMjkyMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421512923", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String tags_string = track.getString(\"tag_list\");\n          \n          \n            \n                    return new ArrayList<>(Arrays.asList(tags_string.split(\" \")));\n          \n          \n            \n                    final String tags = track.getString(\"tag_list\");\n          \n          \n            \n                    return Arrays.asList(tags.split(\" \"));", "author": "wb9688", "createdAt": "2020-05-07T13:42:00Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java", "diffHunk": "@@ -290,7 +281,8 @@ public Locale getLanguageInfo() throws ParsingException {\n     @Nonnull\n     @Override\n     public List<String> getTags() throws ParsingException {\n-        return new ArrayList<>();\n+        String tags_string = track.getString(\"tag_list\");\n+        return new ArrayList<>(Arrays.asList(tags_string.split(\" \")));", "originalCommit": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0ddc91fbfb9f7942c6201df1056818b214ba3b9", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudStreamExtractor.java\nsimilarity index 86%\nrename from extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java\nrename to extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudStreamExtractor.java\nindex 1aad52a4..4f24efe9 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/soundcloud/extractors/SoundcloudStreamExtractor.java\n\n@@ -281,8 +312,8 @@ public class SoundcloudStreamExtractor extends StreamExtractor {\n     @Nonnull\n     @Override\n     public List<String> getTags() throws ParsingException {\n-        String tags_string = track.getString(\"tag_list\");\n-        return new ArrayList<>(Arrays.asList(tags_string.split(\" \")));\n+        final String tags = track.getString(\"tag_list\");\n+        return Arrays.asList(tags.split(\" \"));\n     }\n \n     @Nonnull\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421514602", "bodyText": "Do we have the possible options documented somewhere? And shouldn't we maybe use e.g. an Enum instead of just returning a String? Also for the getLicence() and maybe even for the getCategory() as well.", "author": "wb9688", "createdAt": "2020-05-07T13:44:08Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -980,20 +966,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public String getPrivacy() throws ParsingException {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? \"Unlisted\" : \"Public\";", "originalCommit": "2e15bc41b8226fc1add76a6cf3a18c5f2ac8157a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2NjUyNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421966526", "bodyText": "Yes it is documented: https://support.google.com/youtube/answer/157177 \"Click the down arrow under \"Visibility\" and choose Public, Private, or Unlisted\".\nI'll test again with private videos, but in my tests long ago iirc it was ok (it show only content not available I think).\nI'll see later for Enums", "author": "B0pol", "createdAt": "2020-05-08T06:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk2ODA2NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r421968065", "bodyText": "I meant in NewPipe. And what if another service calls e.g. \"Public\" \"World Visible\" or whatever? And you have to consider translations in NewPipe as well.", "author": "wb9688", "createdAt": "2020-05-08T06:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNzE5Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r423217192", "bodyText": "Yes, I've already created some translators and have choosen Private / Public / Unlisted\nNote to self: todo: add internal privacy for PeerTube.", "author": "B0pol", "createdAt": "2020-05-11T17:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMzgyMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r423233822", "bodyText": "Yes, an enum would be better for privacy. For licence, it's not possible because it changes dynamically based on companies owning the copyrights.", "author": "B0pol", "createdAt": "2020-05-11T18:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MTg4OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425061889", "bodyText": "@B0pol: I rebased, removed Eclipse crap, and added a Privacy enum.", "author": "wb9688", "createdAt": "2020-05-14T11:21:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxNDYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 841b60fa..c6918ba8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -966,17 +1008,17 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() throws ParsingException {\n+    public Privacy getPrivacy() {\n         boolean isUnlisted = playerResponse\n                 .getObject(\"microformat\")\n                 .getObject(\"playerMicroformatRenderer\")\n                 .getBoolean(\"isUnlisted\");\n-        return isUnlisted ? \"Unlisted\" : \"Public\";\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n-    public String getCategory() throws ParsingException {\n+    public String getCategory() {\n         try {\n             return playerResponse.getObject(\"microformat\")\n                     .getObject(\"playerMicroformatRenderer\")\n"}}, {"oid": "4ad662789dc00eead7ba8c2705dc8102edba2de7", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4ad662789dc00eead7ba8c2705dc8102edba2de7", "message": "fix another test with timezone not set", "committedDate": "2020-05-11T18:11:01Z", "type": "forcePushed"}, {"oid": "b0ddc91fbfb9f7942c6201df1056818b214ba3b9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b0ddc91fbfb9f7942c6201df1056818b214ba3b9", "message": "small refactoring", "committedDate": "2020-05-14T09:51:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MzM0NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425063344", "bodyText": "This doesn't actually get the license, but the licensor. See e.g. https://www.youtube.com/watch?v=IuArYvVbUo0 for a video that has listed its license. Also: final.", "author": "wb9688", "createdAt": "2020-05-14T11:24:04Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1000,20 +1006,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            JsonArray rows = initialData.getObject(\"contents\")\n+                    .getObject(\"twoColumnWatchNextResults\").getObject(\"results\").getObject(\"results\")\n+                    .getArray(\"contents\").getObject(1).getObject(\"videoSecondaryInfoRenderer\")\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n+            JsonObject metadataRowRenderer = rows.getObject(rows.size() - 1) // it is usually last\n+                    .getObject(\"metadataRowRenderer\");\n+            String probablyLicence = getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n+            return getTextFromObject(metadataRowRenderer.getObject(\"title\")).toLowerCase().contains(\"licensed\")\n+                    ? probablyLicence\n+                    : \"\";\n+        } catch (Exception e) {\n+            return \"\";\n+        }\n     }", "originalCommit": "4b45ac706bea8307954d29144d39390e5ebf9f1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3MTQyMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425071421", "bodyText": "Ok, great. And for the licence, can we have something dynamic?\nI mean Peertube has only 7 licences: https://peertube.cpy.re/api/v1/videos/licences, then it'll make it easier to translate to have them dynamic, and the rest is untranslated.\nFor YouTube, it seems like it's either Youtube licence (default) or a CC-BY (attribution).\nhttps://www.youtube.com/static?template=terms (it states default licence is YouTube one).\nhttps://support.google.com/youtube/answer/2797468?hl=en (it states we can choose CC\u00a0by, i.e attribution, but can we have other CC licences?).\nThen for YouTube: if no licence is shown, it means YouTube licence. Otherwise for CC-BY, we can use the same field in enum as peertube.\nAnd for Soundcloud, I didn't really understand, there were several field, like C and P copyright (you should just download a track and look at the json).", "author": "B0pol", "createdAt": "2020-05-14T11:40:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MzM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5MDYzOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r425090639", "bodyText": "On SoundCloud, there's the license field containing e.g. cc-by, see e.g. https://soundcloud.com/wearecc/plays-well-with-others-ep-2-what-do-an-army-of-ants-and-an-online-encyclopedia-have-in-common:\n{\n  \"comment_count\": 7,\n  \"full_duration\": 1400920,\n  \"downloadable\": false,\n  \"created_at\": \"2019-03-28T13:36:18Z\",\n  \"description\": \"\u201cStigmergy is a mechanism of indirect coordination, through the environment, between agents or actions,\u201d according to Wikipedia. \u201cThe principle is that the trace left in the environment by an action stimulates the performance of a next action, by the same or a different agent.\u201d Wikipedia should know all about stigmergy, since it\u2019s almost a perfect description of how Wikipedia itself is made. While this model of collaboration is most commonly associated with ants, not global knowledge sharing, we\u2019ll explore both and how they\u2019ve shaped our world through asynchronous collaboration.\\n\\nJoin us as we talk to Katherine Maher, the executive director of the Wikimedia Foundation (the nonprofit organization that runs Wikipedia), and Clint Penick, an ant researcher and assistant research professor in the Biomimicry Center at Arizona State University.\\n\\n===\\n\\nAll original content in Plays Well with Others is available under a Creative Commons BY license.\\n\\nThis episode contains music by Blue Dot Sessions, available under a Creative Commons BY-NC license at the Free Music Archive.\\n\\nWe also use sound effects, available under CC licenses and in the public domain, from Freesound.\\n\\nFor links to these tracks and for more information about our show, please visit playswellwithothers.org.\",\n  \"media\": {\n    \"transcodings\": [\n      {\n        \"url\": \"https://api-v2.soundcloud.com/media/soundcloud:tracks:597253485/dac2dc88-1b30-49aa-8f11-4176901591ec/stream/hls\",\n        \"preset\": \"mp3_0_0\",\n        \"duration\": 1400920,\n        \"snipped\": false,\n        \"format\": {\n          \"protocol\": \"hls\",\n          \"mime_type\": \"audio/mpeg\"\n        },\n        \"quality\": \"sq\"\n      },\n      {\n        \"url\": \"https://api-v2.soundcloud.com/media/soundcloud:tracks:597253485/dac2dc88-1b30-49aa-8f11-4176901591ec/stream/progressive\",\n        \"preset\": \"mp3_0_0\",\n        \"duration\": 1400920,\n        \"snipped\": false,\n        \"format\": {\n          \"protocol\": \"progressive\",\n          \"mime_type\": \"audio/mpeg\"\n        },\n        \"quality\": \"sq\"\n      },\n      {\n        \"url\": \"https://api-v2.soundcloud.com/media/soundcloud:tracks:597253485/452f1e05-f425-451f-a257-858c039c55b9/stream/hls\",\n        \"preset\": \"opus_0_0\",\n        \"duration\": 1400743,\n        \"snipped\": false,\n        \"format\": {\n          \"protocol\": \"hls\",\n          \"mime_type\": \"audio/ogg; codecs=\\\"opus\\\"\"\n        },\n        \"quality\": \"sq\"\n      }\n    ]\n  },\n  \"title\": \"Plays Well with Others, Ep 2: What Do an Army of Ants and an Online Encyclopedia Have in Common?\",\n  \"publisher_metadata\": {\n    \"urn\": \"soundcloud:tracks:597253485\",\n    \"contains_music\": true,\n    \"id\": 597253485\n  },\n  \"duration\": 1400920,\n  \"has_downloads_left\": true,\n  \"artwork_url\": \"https://i1.sndcdn.com/artworks-000511451328-51jljl-large.jpg\",\n  \"public\": true,\n  \"streamable\": true,\n  \"tag_list\": \"storytelling collaboration wikipedia ants stigmergy \\\"creative commons\\\"\",\n  \"genre\": \"Podcast\",\n  \"id\": 597253485,\n  \"reposts_count\": 6,\n  \"state\": \"finished\",\n  \"label_name\": null,\n  \"last_modified\": \"2019-09-06T21:39:16Z\",\n  \"commentable\": true,\n  \"policy\": \"ALLOW\",\n  \"visuals\": null,\n  \"kind\": \"track\",\n  \"purchase_url\": null,\n  \"sharing\": \"public\",\n  \"uri\": \"https://api.soundcloud.com/tracks/597253485\",\n  \"secret_token\": null,\n  \"download_count\": 0,\n  \"likes_count\": 23,\n  \"urn\": \"soundcloud:tracks:597253485\",\n  \"license\": \"cc-by\",\n  \"purchase_title\": null,\n  \"display_date\": \"2019-03-28T13:36:18Z\",\n  \"embeddable_by\": \"all\",\n  \"release_date\": null,\n  \"user_id\": 1457130,\n  \"monetization_model\": \"NOT_APPLICABLE\",\n  \"waveform_url\": \"https://wave.sndcdn.com/bKOA7Pwbut93_m.json\",\n  \"permalink\": \"plays-well-with-others-ep-2-what-do-an-army-of-ants-and-an-online-encyclopedia-have-in-common\",\n  \"permalink_url\": \"https://soundcloud.com/wearecc/plays-well-with-others-ep-2-what-do-an-army-of-ants-and-an-online-encyclopedia-have-in-common\",\n  \"user\": {\n    \"avatar_url\": \"https://i1.sndcdn.com/avatars-000001558477-l96tko-large.jpg\",\n    \"first_name\": \"Creative Commons\",\n    \"full_name\": \"Creative Commons\",\n    \"id\": 1457130,\n    \"kind\": \"user\",\n    \"last_modified\": \"2019-03-09T22:03:03Z\",\n    \"last_name\": \"\",\n    \"permalink\": \"wearecc\",\n    \"permalink_url\": \"https://soundcloud.com/wearecc\",\n    \"uri\": \"https://api.soundcloud.com/users/1457130\",\n    \"urn\": \"soundcloud:users:1457130\",\n    \"username\": \"Creative Commons\",\n    \"verified\": false,\n    \"city\": \"Internet\",\n    \"country_code\": null\n  },\n  \"playback_count\": 19946\n}\nI'm not sure what the possible options are for YouTube or SoundCloud though.", "author": "wb9688", "createdAt": "2020-05-14T12:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MzM0NA=="}], "type": "inlineReview", "revised_code": {"commit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex e2105cd9..c6918ba8 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -1030,16 +1032,16 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     @Override\n     public String getLicence() {\n         try {\n-            JsonArray rows = initialData.getObject(\"contents\")\n-                    .getObject(\"twoColumnWatchNextResults\").getObject(\"results\").getObject(\"results\")\n-                    .getArray(\"contents\").getObject(1).getObject(\"videoSecondaryInfoRenderer\")\n-                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n-            JsonObject metadataRowRenderer = rows.getObject(rows.size() - 1) // it is usually last\n+            final JsonObject metadataRowRenderer = getVideoSecondaryInfoRenderer()\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\")\n+                    .getObject(0)\n                     .getObject(\"metadataRowRenderer\");\n-            String probablyLicence = getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n-            return getTextFromObject(metadataRowRenderer.getObject(\"title\")).toLowerCase().contains(\"licensed\")\n-                    ? probablyLicence\n-                    : \"\";\n+\n+            final String probablyLicence = getTextFromObject(metadataRowRenderer\n+                    .getArray(\"contents\").getObject(0));\n+\n+            return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n+                    ? \"YouTube licence\" : probablyLicence;\n         } catch (Exception e) {\n             return \"\";\n         }\n"}}, {"oid": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/78e418ce130568a9d8a4a689a6c48e5f6a318375", "message": "Create Privacy enum", "committedDate": "2020-07-15T18:34:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwMzk0Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455603943", "bodyText": "YouTube themselves call it \"YouTube license\" so I wouldn't change the name even though you prefer \"licence\"", "author": "wb9688", "createdAt": "2020-07-16T08:13:36Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1002,20 +1008,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse\n+                .getObject(\"microformat\")\n+                .getObject(\"playerMicroformatRenderer\")\n+                .getBoolean(\"isUnlisted\");\n+        return isUnlisted ? Privacy.UNLISTED : Privacy.PUBLIC;\n     }\n \n     @Nonnull\n     @Override\n     public String getCategory() {\n-        return \"\";\n+        try {\n+            return playerResponse.getObject(\"microformat\")\n+                    .getObject(\"playerMicroformatRenderer\")\n+                    .getString(\"category\");\n+        } catch (Exception ignored) {\n+            return \"\";\n+        }\n     }\n \n     @Nonnull\n     @Override\n     public String getLicence() {\n-        return \"\";\n+        try {\n+            final JsonObject metadataRowRenderer = getVideoSecondaryInfoRenderer()\n+                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\")\n+                    .getObject(0)\n+                    .getObject(\"metadataRowRenderer\");\n+\n+            final String probablyLicence = getTextFromObject(metadataRowRenderer\n+                    .getArray(\"contents\").getObject(0));\n+\n+            return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n+                    ? \"YouTube licence\" : probablyLicence;", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTQ2ODk5Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r575468997", "bodyText": "No they use licence in the Terms of Service\nhttps://web.archive.org/web/20190723193439/https://www.youtube.com/static?template=terms&hl=en\n\nRights you licence\n8.1 When you upload or post Content to YouTube, you grant:\n\nto YouTube, a worldwide, non-exclusive, royalty-free, transferable licence (with right to sub-licence) to use, reproduce, distribute, prepare derivative works of, display, and perform that Content in connection with the provision of the Service and otherwise in connection with the provision of the Service and YouTube's business, including without limitation for promoting and redistributing part or all of the Service (and derivative works thereof) in any media formats and through any media channels;\nto each user of the Service, a worldwide, non-exclusive, royalty-free licence to access your Content through the Service, and to use, reproduce, distribute, prepare derivative works of, display and perform such Content to the extent permitted by the functionality of the Service and under these Terms.\n\n\nThey also call CC `Creative Commons Attribution licence (reuse allowed)", "author": "B0pol", "createdAt": "2021-02-12T19:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwMzk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex c6918ba8..63770783 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -1030,21 +1037,15 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n \n     @Nonnull\n     @Override\n-    public String getLicence() {\n-        try {\n-            final JsonObject metadataRowRenderer = getVideoSecondaryInfoRenderer()\n-                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\")\n-                    .getObject(0)\n-                    .getObject(\"metadataRowRenderer\");\n+    public String getLicense() throws ParsingException {\n+        final JsonArray rows = getVideoSecondaryInfoRenderer()\n+                .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n \n-            final String probablyLicence = getTextFromObject(metadataRowRenderer\n-                    .getArray(\"contents\").getObject(0));\n+        final String probablyLicence = null;\n+//                    getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n \n-            return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n-                    ? \"YouTube licence\" : probablyLicence;\n-        } catch (Exception e) {\n-            return \"\";\n-        }\n+        return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n+                ? \"YouTube licence\" : probablyLicence;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNDc3Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455604773", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:14:21Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java", "diffHunk": "@@ -99,4 +100,25 @@ public int hashCode() {\n         result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n         return result;\n     }\n+\n+    /**\n+     * Converts a three letter language code (ISO 639-2/T) to a Locale\n+     * in the limit of Java Locale class.\n+     *\n+     * @param code a three letter language code\n+     * @return the Locale corresponding\n+     */\n+    public static Locale getLocaleFromThreeLetterCode(@Nonnull String code) throws ParsingException {\n+        String[] languages = Locale.getISOLanguages();\n+        Map<String, Locale> localeMap = new HashMap<>(languages.length);\n+        for (String language : languages) {", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79abc0551f43f11bf823260132e1fa06a68bdb11", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\nindex 991e9ece..83fc8445 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/localization/Localization.java\n\n@@ -90,14 +90,14 @@ public class Localization implements Serializable {\n \n         Localization that = (Localization) o;\n \n-        if (!languageCode.equals(that.languageCode)) return false;\n-        return Objects.equals(countryCode, that.countryCode);\n+        return languageCode.equals(that.languageCode) &&\n+                Objects.equals(countryCode, that.countryCode);\n     }\n \n     @Override\n     public int hashCode() {\n         int result = languageCode.hashCode();\n-        result = 31 * result + (countryCode != null ? countryCode.hashCode() : 0);\n+        result = 31 * result + Objects.hashCode(countryCode);\n         return result;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTM5NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455605394", "bodyText": "final (and uploaderId as well)", "author": "wb9688", "createdAt": "2020-07-16T08:14:56Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -311,9 +316,9 @@ public long getDislikeCount() throws ParsingException {\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n \n-            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n-                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n-            if (uploaderUrl != null && !uploaderUrl.isEmpty()) return uploaderUrl;\n+        String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79abc0551f43f11bf823260132e1fa06a68bdb11", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex c6918ba8..edde978b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -316,14 +366,20 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n     public String getUploaderUrl() throws ParsingException {\n         assertPageFetched();\n \n-        String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n-                .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n-        if (!isNullOrEmpty(uploaderUrl)) return uploaderUrl;\n-\n+        try {\n+            String uploaderUrl = getUrlFromNavigationEndpoint(getVideoSecondaryInfoRenderer()\n+                    .getObject(\"owner\").getObject(\"videoOwnerRenderer\").getObject(\"navigationEndpoint\"));\n+            if (!isNullOrEmpty(uploaderUrl)) {\n+                return uploaderUrl;\n+            }\n+        } catch (ParsingException ignored) {\n+            // age-restricted videos cause a ParsingException here\n+        }\n \n         String uploaderId = playerResponse.getObject(\"videoDetails\").getString(\"channelId\");\n-        if (uploaderId != null && !uploaderId.isEmpty())\n+        if (!isNullOrEmpty(uploaderId)) {\n             return YoutubeChannelLinkHandlerFactory.getInstance().getUrl(\"channel/\" + uploaderId);\n+        }\n \n         throw new ParsingException(\"Could not get uploader url\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTQ4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455605485", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:15:03Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1002,20 +1008,43 @@ public String getHost() {\n \n     @Nonnull\n     @Override\n-    public String getPrivacy() {\n-        return \"\";\n+    public Privacy getPrivacy() {\n+        boolean isUnlisted = playerResponse", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex c6918ba8..63770783 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -1030,21 +1037,15 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n \n     @Nonnull\n     @Override\n-    public String getLicence() {\n-        try {\n-            final JsonObject metadataRowRenderer = getVideoSecondaryInfoRenderer()\n-                    .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\")\n-                    .getObject(0)\n-                    .getObject(\"metadataRowRenderer\");\n+    public String getLicense() throws ParsingException {\n+        final JsonArray rows = getVideoSecondaryInfoRenderer()\n+                .getObject(\"metadataRowContainer\").getObject(\"metadataRowContainerRenderer\").getArray(\"rows\");\n \n-            final String probablyLicence = getTextFromObject(metadataRowRenderer\n-                    .getArray(\"contents\").getObject(0));\n+        final String probablyLicence = null;\n+//                    getTextFromObject(metadataRowRenderer.getArray(\"contents\").getObject(0));\n \n-            return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n-                    ? \"YouTube licence\" : probablyLicence;\n-        } catch (Exception e) {\n-            return \"\";\n-        }\n+        return probablyLicence == null || !probablyLicence.contains(\"Creative Commons\")\n+                ? \"YouTube licence\" : probablyLicence;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTg5Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455605893", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:15:28Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "diffHunk": "@@ -100,4 +100,14 @@ private static JsonObject getObject(@Nonnull JsonObject object, @Nonnull List<St\n         return result;\n     }\n \n+    public static List<String> getListStringFromJsonArray(@Nonnull JsonArray array) {\n+        List<String> tagsList = new ArrayList<>(array.size());\n+        for (Object tag : array) {", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ce0bf6a7394323be052456b309162ef2fcac4517", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java\nindex 1e26df30..250c45f5 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java\n\n@@ -101,7 +101,7 @@ public class JsonUtils {\n     }\n \n     public static List<String> getListStringFromJsonArray(@Nonnull JsonArray array) {\n-        List<String> tagsList = new ArrayList<>(array.size());\n+        final List<String> tagsList = new ArrayList<>(array.size());\n         for (Object tag : array) {\n             if (tag instanceof String) {\n                 tagsList.add((String) tag);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjA0MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606040", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:15:35Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "diffHunk": "@@ -159,5 +189,116 @@ public void bothHlsAndOpusAudioStreams() throws Exception {\n             extractor.getAudioStreams();\n         }\n     }\n+\n+    public static class YnwMellySuicidal {\n+        private static SoundcloudStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (SoundcloudStreamExtractor) SoundCloud.getStreamExtractor(\"https://soundcloud.com/ynwmelly/suicidal\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testGetName() {\n+            assertEquals(\"Suicidal\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testGetUploaderName() {\n+            assertEquals(\"Ynw Melly\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testGetLength() {\n+            assertEquals(223, extractor.getLength());\n+        }\n+\n+        @Test\n+        public void testGetViewCount() {\n+            assertTrue(Long.toString(extractor.getViewCount()),\n+                    extractor.getViewCount() > 39000000);\n+        }\n+\n+        @Test\n+        public void testGetTextualUploadDate() throws ParsingException {\n+            Assert.assertEquals(\"2019-11-21 22:25:30\", extractor.getTextualUploadDate());\n+        }\n+\n+        @Test\n+        public void testGetUploadDate() throws ParsingException, ParseException {\n+            final Calendar instance = Calendar.getInstance();\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss +0000\");", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\nindex 6b6bd51a..ca09af87 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\n\n@@ -285,7 +285,7 @@ public class SoundcloudStreamExtractorDefaultTest {\n \n         @Test\n         public void testGetLicence() {\n-            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+            assertEquals(\"all-rights-reserved\", extractor.getLicense());\n         }\n \n         @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjI3MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606271", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:15:49Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "diffHunk": "@@ -159,5 +189,116 @@ public void bothHlsAndOpusAudioStreams() throws Exception {\n             extractor.getAudioStreams();\n         }\n     }\n+\n+    public static class YnwMellySuicidal {\n+        private static SoundcloudStreamExtractor extractor;\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (SoundcloudStreamExtractor) SoundCloud.getStreamExtractor(\"https://soundcloud.com/ynwmelly/suicidal\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void testGetName() {\n+            assertEquals(\"Suicidal\", extractor.getName());\n+        }\n+\n+        @Test\n+        public void testGetUploaderName() {\n+            assertEquals(\"Ynw Melly\", extractor.getUploaderName());\n+        }\n+\n+        @Test\n+        public void testGetLength() {\n+            assertEquals(223, extractor.getLength());\n+        }\n+\n+        @Test\n+        public void testGetViewCount() {\n+            assertTrue(Long.toString(extractor.getViewCount()),\n+                    extractor.getViewCount() > 39000000);\n+        }\n+\n+        @Test\n+        public void testGetTextualUploadDate() throws ParsingException {\n+            Assert.assertEquals(\"2019-11-21 22:25:30\", extractor.getTextualUploadDate());\n+        }\n+\n+        @Test\n+        public void testGetUploadDate() throws ParsingException, ParseException {\n+            final Calendar instance = Calendar.getInstance();\n+            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss +0000\");\n+            sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+            instance.setTime(sdf.parse(\"2019/11/21 22:25:30 +0000\"));\n+            assertEquals(instance, requireNonNull(extractor.getUploadDate()).date());\n+        }\n+\n+        @Test\n+        public void testGetUploaderUrl() {\n+            assertIsSecureUrl(extractor.getUploaderUrl());\n+            assertEquals(\"https://soundcloud.com/ynwmelly\", extractor.getUploaderUrl());\n+        }\n+\n+        @Test\n+        public void testGetThumbnailUrl() {\n+            assertIsSecureUrl(extractor.getThumbnailUrl());\n+        }\n+\n+        @Test\n+        public void testGetUploaderAvatarUrl() {\n+            assertIsSecureUrl(extractor.getUploaderAvatarUrl());\n+        }\n+\n+        @Test\n+        public void testGetAudioStreams() throws IOException, ExtractionException {\n+            assertFalse(extractor.getAudioStreams().isEmpty());\n+        }\n+\n+        @Test\n+        public void testStreamType() {\n+            assertTrue(extractor.getStreamType() == StreamType.AUDIO_STREAM);\n+        }\n+\n+        @Test\n+        public void testGetRelatedVideos() throws ExtractionException, IOException {\n+            StreamInfoItemsCollector relatedVideos = extractor.getRelatedStreams();\n+            assertFalse(relatedVideos.getItems().isEmpty());\n+            assertTrue(relatedVideos.getErrors().isEmpty());\n+        }\n+\n+        @Test\n+        public void testGetSubtitlesListDefault() throws IOException, ExtractionException {\n+            assertTrue(extractor.getSubtitlesDefault().isEmpty());\n+        }\n+\n+        @Test\n+        public void testGetSubtitlesList() throws IOException, ExtractionException {\n+            assertTrue(extractor.getSubtitlesDefault().isEmpty());\n+        }\n+\n+        @Test\n+        public void testGetPrivacy() {\n+            assertEquals(StreamExtractor.Privacy.PUBLIC, extractor.getPrivacy());\n+        }\n+\n+        @Test\n+        public void testGetLicence() {\n+            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+        }\n+\n+        @Test\n+        public void testGetCategory() {\n+            assertEquals(\"Hip-hop & Rap\", extractor.getCategory());\n+        }\n+\n+        @Test\n+        public void testGetTags() throws ParsingException {\n+            List<String> tags = new ArrayList<>();", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\nindex 6b6bd51a..ca09af87 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\n\n@@ -285,7 +285,7 @@ public class SoundcloudStreamExtractorDefaultTest {\n \n         @Test\n         public void testGetLicence() {\n-            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+            assertEquals(\"all-rights-reserved\", extractor.getLicense());\n         }\n \n         @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjQ5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606491", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:16:02Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java", "diffHunk": "@@ -135,6 +139,32 @@ public void testGetSubtitlesList() throws IOException, ExtractionException {\n             // Video (/view?v=YQHsXMglC9A) set in the setUp() method has no captions => null\n             assertTrue(extractor.getSubtitlesDefault().isEmpty());\n         }\n+\n+        @Test\n+        public void testGetPrivacy() {\n+            assertEquals(StreamExtractor.Privacy.PUBLIC, extractor.getPrivacy());\n+        }\n+\n+        @Test\n+        public void testGetLicence() {\n+            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+        }\n+\n+        @Test\n+        public void testGetCategory() {\n+            assertEquals(\"\", extractor.getCategory());\n+        }\n+\n+        @Test\n+        public void testGetTags() {\n+            List<String> tags = new ArrayList<>();", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\nindex 6b6bd51a..ca09af87 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/soundcloud/SoundcloudStreamExtractorDefaultTest.java\n\n@@ -147,7 +147,7 @@ public class SoundcloudStreamExtractorDefaultTest {\n \n         @Test\n         public void testGetLicence() {\n-            assertEquals(\"all-rights-reserved\", extractor.getLicence());\n+            assertEquals(\"all-rights-reserved\", extractor.getLicense());\n         }\n \n         @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjU0Ng==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r455606546", "bodyText": "final", "author": "wb9688", "createdAt": "2020-07-16T08:16:07Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -114,6 +113,19 @@ public void testGetUploadDate() throws ParsingException, ParseException {\n             instance.setTime(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2018-05-11\"));\n             assertEquals(instance, requireNonNull(extractor.getUploadDate()).date());\n         }\n+\n+        @Test\n+        public void testGetTags() throws ParsingException {\n+            List<String> tags = new ArrayList<>();", "originalCommit": "78e418ce130568a9d8a4a689a6c48e5f6a318375", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "79abc0551f43f11bf823260132e1fa06a68bdb11", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java\nindex 1ff7f4f0..348ac305 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java\n\n@@ -1,117 +1,176 @@\n package org.schabi.newpipe.extractor.services.media_ccc;\n \n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n-import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.downloader.DownloaderTestImpl;\n import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.StreamingService;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.DefaultStreamExtractorTest;\n import org.schabi.newpipe.extractor.services.media_ccc.extractors.MediaCCCStreamExtractor;\n-import org.schabi.newpipe.extractor.stream.AudioStream;\n-import org.schabi.newpipe.extractor.stream.VideoStream;\n+import org.schabi.newpipe.extractor.stream.StreamExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamType;\n \n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.*;\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n \n-import static java.util.Objects.requireNonNull;\n import static junit.framework.TestCase.assertEquals;\n-import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n import static org.schabi.newpipe.extractor.ServiceList.MediaCCC;\n \n /**\n  * Test {@link MediaCCCStreamExtractor}\n  */\n public class MediaCCCStreamExtractorTest {\n-    public static class Gpn18Tmux {\n-        private static MediaCCCStreamExtractor extractor;\n+    private static final String BASE_URL = \"https://media.ccc.de/v/\";\n+\n+    public static class Gpn18Tmux extends DefaultStreamExtractorTest {\n+        private static final String ID = \"gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\";\n+        private static final String URL = BASE_URL + ID;\n+        private static StreamExtractor extractor;\n \n         @BeforeClass\n-        public static void setUpClass() throws Exception {\n+        public static void setUp() throws Exception {\n             NewPipe.init(DownloaderTestImpl.getInstance());\n-\n-            extractor = (MediaCCCStreamExtractor) MediaCCC.getStreamExtractor(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\");\n+            extractor = MediaCCC.getStreamExtractor(URL);\n             extractor.fetchPage();\n         }\n \n-        @Test\n-        public void testServiceId() throws Exception {\n-            assertEquals(2, extractor.getServiceId());\n+        @Override\n+        public StreamExtractor extractor() {\n+            return extractor;\n         }\n \n-        @Test\n-        public void testName() throws Exception {\n-            assertEquals(\"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\", extractor.getName());\n+        @Override\n+        public StreamingService expectedService() {\n+            return MediaCCC;\n         }\n \n-        @Test\n-        public void testId() throws Exception {\n-            assertEquals(\"gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getId());\n+        @Override\n+        public String expectedName() {\n+            return \"tmux - Warum ein schwarzes Fenster am Bildschirm reicht\";\n         }\n \n-        @Test\n-        public void testUrl() throws Exception {\n-            assertIsSecureUrl(extractor.getUrl());\n-            assertEquals(\"https://media.ccc.de/public/events/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getUrl());\n+        @Override\n+        public String expectedId() {\n+            return ID;\n         }\n \n-        @Test\n-        public void testOriginalUrl() throws Exception {\n-            assertIsSecureUrl(extractor.getOriginalUrl());\n-            assertEquals(\"https://media.ccc.de/v/gpn18-105-tmux-warum-ein-schwarzes-fenster-am-bildschirm-reicht\", extractor.getOriginalUrl());\n+        @Override\n+        public String expectedUrlContains() {\n+            return URL;\n         }\n \n-        @Test\n-        public void testThumbnail() throws Exception {\n-            assertIsSecureUrl(extractor.getThumbnailUrl());\n-            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n+        @Override\n+        public String expectedOriginalUrlContains() {\n+            return URL;\n         }\n \n-        @Test\n-        public void testUploaderName() throws Exception {\n-            assertEquals(\"gpn18\", extractor.getUploaderName());\n+        @Override\n+        public StreamType expectedStreamType() {\n+            return StreamType.VIDEO_STREAM;\n         }\n \n-        @Test\n-        public void testUploaderUrl() throws Exception {\n-            assertIsSecureUrl(extractor.getUploaderUrl());\n-            assertEquals(\"https://media.ccc.de/public/conferences/gpn18\", extractor.getUploaderUrl());\n+        @Override\n+        public String expectedUploaderName() {\n+            return \"gpn18\";\n         }\n \n-        @Test\n-        public void testUploaderAvatarUrl() throws Exception {\n-            assertIsSecureUrl(extractor.getUploaderAvatarUrl());\n-            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n+        @Override\n+        public String expectedUploaderUrl() {\n+            return \"https://media.ccc.de/c/gpn18\";\n+        }\n+\n+        @Override\n+        public List<String> expectedDescriptionContains() {\n+            return Arrays.asList(\"SSH-Sessions\", \"\\\"Terminal Multiplexer\\\"\");\n+        }\n+\n+        @Override\n+        public long expectedLength() {\n+            return 3097;\n+        }\n+\n+        @Override\n+        public long expectedViewCountAtLeast() {\n+            return 2380;\n+        }\n+\n+        @Nullable\n+        @Override\n+        public String expectedUploadDate() {\n+            return \"2018-05-11 00:00:00.000\";\n         }\n \n+        @Nullable\n+        @Override\n+        public String expectedTextualUploadDate() {\n+            return \"2018-05-11T02:00:00.000+02:00\";\n+        }\n+\n+        @Override\n+        public long expectedLikeCountAtLeast() {\n+            return -1;\n+        }\n+\n+        @Override\n+        public long expectedDislikeCountAtLeast() {\n+            return -1;\n+        }\n+\n+        @Override\n+        public boolean expectedHasRelatedStreams() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean expectedHasSubtitles() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean expectedHasFrames() {\n+            return false;\n+        }\n+\n+        @Override\n+        public List<String> expectedTags() {\n+            return Arrays.asList(\"gpn18\", \"105\");\n+        }\n+\n+        @Override\n+        public int expectedStreamSegmentsCount() {\n+            return 0;\n+        }\n+\n+        @Override\n         @Test\n-        public void testVideoStreams() throws Exception {\n-            List<VideoStream> videoStreamList = extractor.getVideoStreams();\n-            assertEquals(4, videoStreamList.size());\n-            for (VideoStream stream : videoStreamList) {\n-                assertIsSecureUrl(stream.getUrl());\n-            }\n+        public void testThumbnailUrl() throws Exception {\n+            super.testThumbnailUrl();\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/105-hd.jpg\", extractor.getThumbnailUrl());\n         }\n \n+        @Override\n         @Test\n-        public void testAudioStreams() throws Exception {\n-            List<AudioStream> audioStreamList = extractor.getAudioStreams();\n-            assertEquals(2, audioStreamList.size());\n-            for (AudioStream stream : audioStreamList) {\n-                assertIsSecureUrl(stream.getUrl());\n-            }\n+        public void testUploaderAvatarUrl() throws Exception {\n+            super.testUploaderAvatarUrl();\n+            assertEquals(\"https://static.media.ccc.de/media/events/gpn/gpn18/logo.png\", extractor.getUploaderAvatarUrl());\n         }\n \n+        @Override\n         @Test\n-        public void testGetTextualUploadDate() throws ParsingException {\n-            Assert.assertEquals(\"2018-05-11T02:00:00.000+02:00\", extractor.getTextualUploadDate());\n+        public void testVideoStreams() throws Exception {\n+            super.testVideoStreams();\n+            assertEquals(4, extractor.getVideoStreams().size());\n         }\n \n+        @Override\n         @Test\n-        public void testGetUploadDate() throws ParsingException, ParseException {\n-            final Calendar instance = Calendar.getInstance();\n-            instance.setTime(new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2018-05-11\"));\n-            assertEquals(instance, requireNonNull(extractor.getUploadDate()).date());\n+        public void testAudioStreams() throws Exception {\n+            super.testAudioStreams();\n+            assertEquals(2, extractor.getAudioStreams().size());\n         }\n \n         @Test\n"}}, {"oid": "79abc0551f43f11bf823260132e1fa06a68bdb11", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/79abc0551f43f11bf823260132e1fa06a68bdb11", "message": "Create Privacy enum", "committedDate": "2021-01-24T14:37:57Z", "type": "forcePushed"}, {"oid": "d940e0ac69096eef81170b16d0c6c5d1033ce503", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d940e0ac69096eef81170b16d0c6c5d1033ce503", "message": "extract metadata for youtube, soundcloud & mediaccc", "committedDate": "2021-01-24T14:39:27Z", "type": "forcePushed"}, {"oid": "292b6c19ec1591f2da1afcea35785c63891ef8bb", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/292b6c19ec1591f2da1afcea35785c63891ef8bb", "message": "fix some tests", "committedDate": "2021-02-12T15:53:24Z", "type": "forcePushed"}, {"oid": "89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/89c1e70c149b905b6f6ee29dfb5ea87938ec495f", "message": "extract metadata for youtube, soundcloud & mediaccc", "committedDate": "2021-02-12T16:23:03Z", "type": "forcePushed"}, {"oid": "8e04979fc48943d7c890830f5e34697784444618", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8e04979fc48943d7c890830f5e34697784444618", "message": "extract metadata for youtube, soundcloud & mediaccc", "committedDate": "2021-02-12T18:06:48Z", "type": "forcePushed"}, {"oid": "a0dd761d49082063c9852e463f306220258ba54f", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a0dd761d49082063c9852e463f306220258ba54f", "message": "extract metadata for youtube, soundcloud & mediaccc", "committedDate": "2021-02-12T19:03:43Z", "type": "forcePushed"}, {"oid": "01a60f62e777ccda020a1da8d705293ceba2e614", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/01a60f62e777ccda020a1da8d705293ceba2e614", "message": "extract metadata for youtube, soundcloud & mediaccc", "committedDate": "2021-02-12T19:06:56Z", "type": "forcePushed"}, {"oid": "ce0bf6a7394323be052456b309162ef2fcac4517", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ce0bf6a7394323be052456b309162ef2fcac4517", "message": "address reviews", "committedDate": "2021-02-12T19:37:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUwMjc1MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r575502750", "bodyText": "I am not sure about these lines and the other test files. these changes make the tests longer and thus harder to read, because finding the important info takes longer.\nIMO, that can be kept in one line as long as that lines does not get way too long.\nCC @Stypox @XiangRongLin", "author": "TobiGr", "createdAt": "2021-02-12T20:30:11Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java", "diffHunk": "@@ -42,26 +44,43 @@ public static void setUp() throws Exception {\n         @Override public String expectedId() { return ID; }\n         @Override public String expectedUrlContains() { return URL; }\n         @Override public String expectedOriginalUrlContains() { return URL; }\n-\n         @Override public StreamType expectedStreamType() { return StreamType.VIDEO_STREAM; }\n         @Override public String expectedUploaderName() { return \"gpn18\"; }\n         @Override public String expectedUploaderUrl() { return \"https://media.ccc.de/c/gpn18\"; }\n         @Override public List<String> expectedDescriptionContains() { return Arrays.asList(\"SSH-Sessions\", \"\\\"Terminal Multiplexer\\\"\"); }\n         @Override public long expectedLength() { return 3097; }\n         @Override public long expectedViewCountAtLeast() { return 2380; }\n         @Nullable @Override public String expectedUploadDate() { return \"2018-05-11 00:00:00.000\"; }\n-        @Nullable @Override public String expectedTextualUploadDate() { return \"2018-05-11T02:00:00.000+02:00\"; }\n-        @Override public long expectedLikeCountAtLeast() { return -1; }\n-        @Override public long expectedDislikeCountAtLeast() { return -1; }\n-        @Override public boolean expectedHasRelatedStreams() { return false; }\n-        @Override public boolean expectedHasSubtitles() { return false; }\n-        @Override public boolean expectedHasFrames() { return false; }\n-        @Override public List<String> expectedTags() { return Arrays.asList(\"gpn18\", \"105\"); }\n-        @Override public int expectedStreamSegmentsCount() { return 0; }\n+        @Nullable @Override public String expectedTextualUploadDate() {\n+            return \"2018-05-11T02:00:00.000+02:00\";\n+        }\n+        @Override public long expectedLikeCountAtLeast() {\n+            return -1;\n+        }\n+        @Override public long expectedDislikeCountAtLeast() {\n+            return -1;\n+        }\n+        @Override public boolean expectedHasRelatedStreams() {\n+            return false;\n+        }\n+        @Override public boolean expectedHasSubtitles() {\n+            return false;\n+        }\n+        @Override public boolean expectedHasFrames() {\n+            return false;\n+        }\n+        @Override public List<String> expectedTags() {\n+            return Arrays.asList(\"gpn18\", \"105\");\n+        }\n+        @Override public int expectedStreamSegmentsCount() {\n+            return 0;\n+        }\n+        @Override public Locale expectedLanguageInfo() {\n+            return new Locale(\"de\");\n+        }", "originalCommit": "ce0bf6a7394323be052456b309162ef2fcac4517", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU4NDM5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/306#discussion_r575584391", "bodyText": "I'm really confused, they are in one line in intellij, but not on GitHub / other editors\nfixed in the last push\ni agree it's more readable", "author": "B0pol", "createdAt": "2021-02-13T00:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTUwMjc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "a82cf1e580d82daf7b14cd0df28ccc23ab8275a3", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java\nindex f137f05e..06789473 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/media_ccc/MediaCCCStreamExtractorTest.java\n\n@@ -51,33 +51,15 @@ public class MediaCCCStreamExtractorTest {\n         @Override public long expectedLength() { return 3097; }\n         @Override public long expectedViewCountAtLeast() { return 2380; }\n         @Nullable @Override public String expectedUploadDate() { return \"2018-05-11 00:00:00.000\"; }\n-        @Nullable @Override public String expectedTextualUploadDate() {\n-            return \"2018-05-11T02:00:00.000+02:00\";\n-        }\n-        @Override public long expectedLikeCountAtLeast() {\n-            return -1;\n-        }\n-        @Override public long expectedDislikeCountAtLeast() {\n-            return -1;\n-        }\n-        @Override public boolean expectedHasRelatedStreams() {\n-            return false;\n-        }\n-        @Override public boolean expectedHasSubtitles() {\n-            return false;\n-        }\n-        @Override public boolean expectedHasFrames() {\n-            return false;\n-        }\n-        @Override public List<String> expectedTags() {\n-            return Arrays.asList(\"gpn18\", \"105\");\n-        }\n-        @Override public int expectedStreamSegmentsCount() {\n-            return 0;\n-        }\n-        @Override public Locale expectedLanguageInfo() {\n-            return new Locale(\"de\");\n-        }\n+        @Nullable @Override public String expectedTextualUploadDate() { return \"2018-05-11T02:00:00.000+02:00\"; }\n+        @Override public long expectedLikeCountAtLeast() { return -1; }\n+        @Override public long expectedDislikeCountAtLeast() { -1; }\n+        @Override public boolean expectedHasRelatedStreams() { return false; }\n+        @Override public boolean expectedHasSubtitles() { return false; }\n+        @Override public boolean expectedHasFrames() { return false; }\n+        @Override public List<String> expectedTags() { return Arrays.asList(\"gpn18\", \"105\"); }\n+        @Override public int expectedStreamSegmentsCount() { return 0; }\n+        @Override public Locale expectedLanguageInfo() { return new Locale(\"de\"); }\n \n         @Override\n         @Test public void testThumbnailUrl() throws Exception {\n"}}, {"oid": "350093c57b198847d1867bdad8d34f1c03f99686", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/350093c57b198847d1867bdad8d34f1c03f99686", "message": "address reviews", "committedDate": "2021-02-13T00:08:02Z", "type": "forcePushed"}, {"oid": "a82cf1e580d82daf7b14cd0df28ccc23ab8275a3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a82cf1e580d82daf7b14cd0df28ccc23ab8275a3", "message": "address reviews", "committedDate": "2021-02-13T00:14:17Z", "type": "forcePushed"}, {"oid": "08ef081eacb840e1d60d84fcd04bff918aec3bec", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/08ef081eacb840e1d60d84fcd04bff918aec3bec", "message": "address reviews", "committedDate": "2021-02-13T21:31:44Z", "type": "forcePushed"}, {"oid": "8582682edbc5febd8ca854c69c2303ed2f58e9ac", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8582682edbc5febd8ca854c69c2303ed2f58e9ac", "message": "address reviews", "committedDate": "2021-02-13T21:35:56Z", "type": "forcePushed"}, {"oid": "d04c35e33fc510bc86307e63ac7e97d6ab52cad8", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d04c35e33fc510bc86307e63ac7e97d6ab52cad8", "message": "address reviews", "committedDate": "2021-02-13T21:44:30Z", "type": "forcePushed"}, {"oid": "61195df088d7a48658291d85eb4948e1c312209b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/61195df088d7a48658291d85eb4948e1c312209b", "message": "address reviews", "committedDate": "2021-02-13T21:50:16Z", "type": "forcePushed"}, {"oid": "31c8e891f38e1402110a7c584a76c86724eefa8a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/31c8e891f38e1402110a7c584a76c86724eefa8a", "message": "address reviews", "committedDate": "2021-02-13T21:57:21Z", "type": "forcePushed"}, {"oid": "8ee169532c4e50b12334a11f847ad53f28b3eeca", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8ee169532c4e50b12334a11f847ad53f28b3eeca", "message": "address reviews", "committedDate": "2021-02-15T18:06:45Z", "type": "forcePushed"}, {"oid": "e0252d5b57b443010afaf081b4d97f71576b033c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e0252d5b57b443010afaf081b4d97f71576b033c", "message": "address reviews", "committedDate": "2021-02-15T18:16:47Z", "type": "forcePushed"}, {"oid": "b0434ecde1712395f5f258a73a6ad6732a252ada", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b0434ecde1712395f5f258a73a6ad6732a252ada", "message": "ignore a test with encoding problems", "committedDate": "2021-02-15T18:21:59Z", "type": "forcePushed"}, {"oid": "eb8411f81e2813a25761bf2fe27704bfad6163a9", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/eb8411f81e2813a25761bf2fe27704bfad6163a9", "message": "ignore a test with encoding problems", "committedDate": "2021-02-20T11:26:42Z", "type": "forcePushed"}, {"oid": "4805e6848e65fa99b4aa0de53579d1c8b4036f1b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4805e6848e65fa99b4aa0de53579d1c8b4036f1b", "message": "ignore a test with encoding problems", "committedDate": "2021-03-19T08:54:25Z", "type": "forcePushed"}, {"oid": "c47cc54908d14d3faa6326e62cb8c8add9463df2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c47cc54908d14d3faa6326e62cb8c8add9463df2", "message": "Extract metadata for YouTube, SoundCloud & MediaCCC", "committedDate": "2021-03-19T09:14:43Z", "type": "commit"}, {"oid": "8806fb4e6bac52d657b74d8fd35a454456636b34", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8806fb4e6bac52d657b74d8fd35a454456636b34", "message": "address reviews", "committedDate": "2021-03-19T09:14:43Z", "type": "commit"}, {"oid": "152221c7fb30dfe27cb5e2b94f99c48e1256db32", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/152221c7fb30dfe27cb5e2b94f99c48e1256db32", "message": "ignore a test with encoding problems", "committedDate": "2021-03-19T09:14:43Z", "type": "commit"}, {"oid": "152221c7fb30dfe27cb5e2b94f99c48e1256db32", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/152221c7fb30dfe27cb5e2b94f99c48e1256db32", "message": "ignore a test with encoding problems", "committedDate": "2021-03-19T09:14:43Z", "type": "forcePushed"}]}