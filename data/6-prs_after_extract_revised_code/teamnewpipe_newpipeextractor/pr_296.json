{"pr_number": 296, "pr_title": "Fix search errors detection and refactor search tests", "pr_createdAt": "2020-03-21T19:06:19Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296", "timeline": [{"oid": "0c27198ba17bc8721fb712fd187dab8153743fdb", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0c27198ba17bc8721fb712fd187dab8153743fdb", "message": "Include errors from child collectors in the search collector", "committedDate": "2020-03-21T18:55:29Z", "type": "commit"}, {"oid": "d72130edae12ff4a85ad18b9957adb8bdef68930", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d72130edae12ff4a85ad18b9957adb8bdef68930", "message": "Always return a new item collector in the search extractor", "committedDate": "2020-03-21T18:55:34Z", "type": "commit"}, {"oid": "9704fc99521959c7abea90d6600dfa1d40de3bca", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9704fc99521959c7abea90d6600dfa1d40de3bca", "message": "Improve search extractor tests for services", "committedDate": "2020-03-21T18:55:36Z", "type": "commit"}, {"oid": "9b7999fe54c30d77e710c38ca64cea80ba1cbf5c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9b7999fe54c30d77e710c38ca64cea80ba1cbf5c", "message": "[YouTube] Check if channel item has subscription count in search", "committedDate": "2020-03-21T18:55:37Z", "type": "commit"}, {"oid": "b7f8001a49fd963d008a02e64f7bd8ff1239548b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b7f8001a49fd963d008a02e64f7bd8ff1239548b", "message": "[YouTube] Add check for channel items without description in search", "committedDate": "2020-03-21T18:55:38Z", "type": "commit"}, {"oid": "921bf30bb7eedbd0c92843d3471cb2c092ef4754", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/921bf30bb7eedbd0c92843d3471cb2c092ef4754", "message": "[YouTube] Add check for channel items with no video count in search", "committedDate": "2020-03-21T18:55:39Z", "type": "commit"}, {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/04bfa0ec6a01228a6cb0f91177855e94a88f4981", "message": "[PeerTube] Update video used in age limit test (was 404 not found)", "committedDate": "2020-03-21T18:55:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTU1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396089552", "bodyText": "Do we really need a getInfoItemSearchCollector() function? We don't have one in the other kind of extractors either. Otherwise this PR looks good, however you'll need to do YouTube Music tests as well when that PR gets merged.", "author": "wb9688", "createdAt": "2020-03-22T12:45:41Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java", "diffHunk": "@@ -31,7 +28,7 @@ public String getSearchString() {\n     public abstract String getSearchSuggestion() throws ParsingException;\n \n     protected InfoItemsSearchCollector getInfoItemSearchCollector() {\n-        return collector;\n+        return new InfoItemsSearchCollector(getService().getServiceId());", "originalCommit": "04bfa0ec6a01228a6cb0f91177855e94a88f4981", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c921e5d6a5651186af57ac3bd645c1ee53a3d9f5", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java\nindex 8b900ab7..a7efea96 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java\n\n@@ -27,10 +27,6 @@ public abstract class SearchExtractor extends ListExtractor<InfoItem> {\n \n     public abstract String getSearchSuggestion() throws ParsingException;\n \n-    protected InfoItemsSearchCollector getInfoItemSearchCollector() {\n-        return new InfoItemsSearchCollector(getService().getServiceId());\n-    }\n-\n     @Override\n     public SearchQueryHandler getLinkHandler() {\n         return (SearchQueryHandler) super.getLinkHandler();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwMzc5MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396103791", "bodyText": "Here you will need to return ListExtractor.ITEM_COUNT_UNKNOWN after #280 is merged", "author": "Stypox", "createdAt": "2020-03-22T15:05:39Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelInfoItemExtractor.java", "diffHunk": "@@ -80,7 +86,14 @@ public long getSubscriberCount() throws ParsingException {\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            return Long.parseLong(Utils.removeNonDigitCharacters(getTextFromObject(channelInfoItem.getObject(\"videoCountText\"))));\n+            final JsonObject videoCountObject = channelInfoItem.getObject(\"videoCountText\");\n+\n+            if (videoCountObject == null) {\n+                // Video count is not available, channel probably has no public uploads.\n+                return -1;", "originalCommit": "04bfa0ec6a01228a6cb0f91177855e94a88f4981", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDM4MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396104381", "bodyText": "Use assertThat; maybe omit CoreMatchers. and import statically\nDo this everywhere you test if a string contains another.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String url = extractor().getUrl();\n          \n          \n            \n                    final String expectedContains = expectedUrlContains();\n          \n          \n            \n            \n          \n          \n            \n                    assertIsSecureUrl(url);\n          \n          \n            \n                    assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n          \n          \n            \n                            url.contains(expectedContains));\n          \n          \n            \n                    assertThat(extractor().getUrl(), CoreMatchers.containsString(expectedUrlContains());\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String url = extractor().getUrl();\n          \n          \n            \n                    final String expectedContains = expectedUrlContains();\n          \n          \n            \n            \n          \n          \n            \n                    assertIsSecureUrl(url);\n          \n          \n            \n                    assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n          \n          \n            \n                            url.contains(expectedContains));\n          \n          \n            \n                    assertThat(extractor().getUrl(), containsString(expectedUrlContains());", "author": "Stypox", "createdAt": "2020-03-22T15:11:14Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+\n+public abstract class DefaultExtractorTest<T extends Extractor> implements BaseExtractorTest {\n+    public abstract T extractor() throws Exception;\n+\n+    public abstract StreamingService expectedService() throws Exception;\n+    public abstract String expectedName() throws Exception;\n+    public abstract String expectedId() throws Exception;\n+    public abstract String expectedUrlContains() throws Exception;\n+    public abstract String expectedOriginalUrlContains() throws Exception;\n+\n+    @Test\n+    @Override\n+    public void testServiceId() throws Exception {\n+        assertEquals(expectedService().getServiceId(), extractor().getServiceId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testName() throws Exception {\n+        assertEquals(expectedName(), extractor().getName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testId() throws Exception {\n+        assertEquals(expectedId(), extractor().getId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUrl() throws Exception {\n+        final String url = extractor().getUrl();\n+        final String expectedContains = expectedUrlContains();\n+\n+        assertIsSecureUrl(url);\n+        assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n+                url.contains(expectedContains));", "originalCommit": "04bfa0ec6a01228a6cb0f91177855e94a88f4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1ODk1NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396758955", "bodyText": "Forgot about those, thanks for the reminder, much cleaner!", "author": "mauriciocolli", "createdAt": "2020-03-23T21:10:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a20c53f1a5bad1c35686d19fabce855e4cd747b", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java\nindex 40891d49..f25b9cf0 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java\n\n@@ -4,8 +4,8 @@ import org.junit.Test;\n import org.schabi.newpipe.extractor.Extractor;\n import org.schabi.newpipe.extractor.StreamingService;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.*;\n import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n \n public abstract class DefaultExtractorTest<T extends Extractor> implements BaseExtractorTest {\n"}}, {"oid": "c921e5d6a5651186af57ac3bd645c1ee53a3d9f5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c921e5d6a5651186af57ac3bd645c1ee53a3d9f5", "message": "Remove unnecessary collector creation function from search extractor", "committedDate": "2020-03-23T21:08:51Z", "type": "commit"}, {"oid": "0a20c53f1a5bad1c35686d19fabce855e4cd747b", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a20c53f1a5bad1c35686d19fabce855e4cd747b", "message": "Use easier-to-read asserts statements in tests", "committedDate": "2020-03-23T21:08:59Z", "type": "commit"}]}