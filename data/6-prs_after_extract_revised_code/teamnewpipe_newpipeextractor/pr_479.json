{"pr_number": 479, "pr_title": "Extract stream segments for YouTube", "pr_createdAt": "2020-12-11T12:03:07Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MTkwMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r540971903", "bodyText": "Throwing Exceptions is expensive, because generating the tree of calls can take some time. Please invert the if statement as you are ignoring the thrown Exception anyway.", "author": "TobiGr", "createdAt": "2020-12-11T14:08:26Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1061,4 +1062,54 @@ public Locale getLanguageInfo() {\n     public String getSupportInfo() {\n         return \"\";\n     }\n+\n+    @Nonnull\n+    @Override\n+    public List<StreamSegment> getStreamSegments() {\n+        final ArrayList<StreamSegment> segments = new ArrayList<>();\n+        try {\n+            final JsonArray panels = initialData.getArray(\"engagementPanels\");\n+            JsonArray segmentArray = null;\n+\n+            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            for (int i = 0; i < panels.size(); i++) {\n+                if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                        .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n+                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                            .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n+                    break;\n+                }\n+            }\n+\n+            if (segmentArray == null) {\n+                throw new Exception(\"Couldn't find valid segments\");", "originalCommit": "c10100f290252296d5a1883f310e81362cbdadfd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMTQ0NA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541011444", "bodyText": "Alright, done.", "author": "vkay94", "createdAt": "2020-12-11T15:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MTkwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d3eea4f4be1acd721047ffbe1e3eff16244fc857", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex 227aee23..6179742d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -1065,50 +1065,54 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n \n     @Nonnull\n     @Override\n-    public List<StreamSegment> getStreamSegments() {\n+    public List<StreamSegment> getStreamSegments() throws ParsingException {\n         final ArrayList<StreamSegment> segments = new ArrayList<>();\n-        try {\n+        if (initialData.has(\"engagementPanels\")) {\n             final JsonArray panels = initialData.getArray(\"engagementPanels\");\n-            JsonArray segmentArray = null;\n+            JsonArray segmentsArray = null;\n \n-            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            // Search for correct panel containing the data\n             for (int i = 0; i < panels.size(); i++) {\n                 if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n                         .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n-                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                    segmentsArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n                             .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n                     break;\n                 }\n             }\n \n-            if (segmentArray == null) {\n-                throw new Exception(\"Couldn't find valid segments\");\n-            }\n+            if (segmentsArray != null) {\n+                final long duration = getLength();\n+                for (final Object object : segmentsArray) {\n+                    final JsonObject segmentJson = ((JsonObject) object).getObject(\"macroMarkersListItemRenderer\");\n \n-            final long duration = getLength();\n+                    final int startTimeSeconds = segmentJson.getObject(\"onTap\").getObject(\"watchEndpoint\")\n+                            .getInt(\"startTimeSeconds\", -1);\n \n-            for (final Object object : segmentArray) {\n-                final JsonObject segmentJson = ((JsonObject) object).getObject(\"macroMarkersListItemRenderer\");\n+                    if (startTimeSeconds == -1) {\n+                        throw new ParsingException(\"Could not get stream segment start time.\");\n+                    }\n+                    if (startTimeSeconds > duration) {\n+                        break;\n+                    }\n \n-                final int startTimeSeconds = segmentJson.getObject(\"onTap\").getObject(\"watchEndpoint\")\n-                        .getInt(\"startTimeSeconds\", -1);\n+                    final String title = getTextFromObject(segmentJson.getObject(\"title\"));\n+                    if (isNullOrEmpty(title)) {\n+                        throw new ParsingException(\"Could not get stream segment title.\");\n+                    }\n \n-                if (startTimeSeconds > duration) {\n-                    // Rarely there are streams which show a greater length in the search results\n-                    // than it's parsed on the details page, so ignore invalid segments set by uploader.\n-                    break;\n+                    final StreamSegment segment = new StreamSegment(title, startTimeSeconds);\n+                    segment.setUrl(getUrl() + \"?t=\" + startTimeSeconds);\n+                    if (segmentJson.has(\"thumbnail\")) {\n+                        final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n+                        if (!previewsArray.isEmpty()) {\n+                            // Assume that the thumbnail with the highest resolution is at the last position\n+                            segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n+                        }\n+                    }\n+                    segments.add(segment);\n                 }\n-\n-                final String title = getTextFromObject(segmentJson.getObject(\"title\"));\n-                final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n-\n-                final StreamSegment segment = new StreamSegment(title, startTimeSeconds);\n-                // Assume that the thumbnail with the highest resolution is at the last position\n-                segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n-                segment.setUrl(getUrl() + \"?t=\" + startTimeSeconds);\n-                segments.add(segment);\n             }\n-        } catch (Exception ignored) {\n         }\n         return segments;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MTcwMQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541351701", "bodyText": "why do you ignore all exceptions?", "author": "TobiGr", "createdAt": "2020-12-11T22:14:05Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java", "diffHunk": "@@ -1061,4 +1062,54 @@ public Locale getLanguageInfo() {\n     public String getSupportInfo() {\n         return \"\";\n     }\n+\n+    @Nonnull\n+    @Override\n+    public List<StreamSegment> getStreamSegments() {\n+        final ArrayList<StreamSegment> segments = new ArrayList<>();\n+        try {\n+            final JsonArray panels = initialData.getArray(\"engagementPanels\");\n+            JsonArray segmentArray = null;\n+\n+            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            for (int i = 0; i < panels.size(); i++) {\n+                if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                        .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n+                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                            .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n+                    break;\n+                }\n+            }\n+\n+            if (segmentArray != null) {\n+                final long duration = getLength();\n+\n+                for (final Object object : segmentArray) {\n+                    final JsonObject segmentJson = ((JsonObject) object).getObject(\"macroMarkersListItemRenderer\");\n+\n+                    final int startTimeSeconds = segmentJson.getObject(\"onTap\").getObject(\"watchEndpoint\")\n+                            .getInt(\"startTimeSeconds\", -1);\n+\n+                    if (startTimeSeconds > duration) {\n+                        // Rarely there are streams which show a greater length in the search results\n+                        // than it's parsed on the details page, so ignore invalid segments set by uploader.\n+                        break;\n+                    }\n+\n+                    final String title = getTextFromObject(segmentJson.getObject(\"title\"));\n+                    final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n+\n+                    final StreamSegment segment = new StreamSegment(title, startTimeSeconds);\n+                    if (!previewsArray.isEmpty()) {\n+                        // Assume that the thumbnail with the highest resolution is at the last position\n+                        segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n+                    }\n+                    segment.setUrl(getUrl() + \"?t=\" + startTimeSeconds);\n+                    segments.add(segment);\n+                }\n+            }\n+        } catch (Exception ignored) {", "originalCommit": "34642c228ee84e771726d0cd4502f2d873a17b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQzNjc1MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541436750", "bodyText": "The reason I decided to ignore them is that there's the getLength method which could throw a ParsingException and because the segments are optional data, not like the title or description.\nBut thinking about it I should've worked with .has()  and return the empty list when it's \"obviouly\" not present by non-existing JSON-key, otherwise doing the actual parsing with its exceptions throwing if there are errors retrieving the objects etc.\nI'd reset the three commits and do it more clearer tomorrow, okay? ;)", "author": "vkay94", "createdAt": "2020-12-12T00:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM1MTcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d3eea4f4be1acd721047ffbe1e3eff16244fc857", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\nindex fd80db0d..6179742d 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeStreamExtractor.java\n\n@@ -1065,50 +1065,54 @@ public class YoutubeStreamExtractor extends StreamExtractor {\n \n     @Nonnull\n     @Override\n-    public List<StreamSegment> getStreamSegments() {\n+    public List<StreamSegment> getStreamSegments() throws ParsingException {\n         final ArrayList<StreamSegment> segments = new ArrayList<>();\n-        try {\n+        if (initialData.has(\"engagementPanels\")) {\n             final JsonArray panels = initialData.getArray(\"engagementPanels\");\n-            JsonArray segmentArray = null;\n+            JsonArray segmentsArray = null;\n \n-            // Search for correct JsonObject containing the data => panelIdentifier == engagement-panel-macro-markers\n+            // Search for correct panel containing the data\n             for (int i = 0; i < panels.size(); i++) {\n                 if (panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n                         .getString(\"panelIdentifier\").equals(\"engagement-panel-macro-markers\")) {\n-                    segmentArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n+                    segmentsArray = panels.getObject(i).getObject(\"engagementPanelSectionListRenderer\")\n                             .getObject(\"content\").getObject(\"macroMarkersListRenderer\").getArray(\"contents\");\n                     break;\n                 }\n             }\n \n-            if (segmentArray != null) {\n+            if (segmentsArray != null) {\n                 final long duration = getLength();\n-\n-                for (final Object object : segmentArray) {\n+                for (final Object object : segmentsArray) {\n                     final JsonObject segmentJson = ((JsonObject) object).getObject(\"macroMarkersListItemRenderer\");\n \n                     final int startTimeSeconds = segmentJson.getObject(\"onTap\").getObject(\"watchEndpoint\")\n                             .getInt(\"startTimeSeconds\", -1);\n \n+                    if (startTimeSeconds == -1) {\n+                        throw new ParsingException(\"Could not get stream segment start time.\");\n+                    }\n                     if (startTimeSeconds > duration) {\n-                        // Rarely there are streams which show a greater length in the search results\n-                        // than it's parsed on the details page, so ignore invalid segments set by uploader.\n                         break;\n                     }\n \n                     final String title = getTextFromObject(segmentJson.getObject(\"title\"));\n-                    final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n+                    if (isNullOrEmpty(title)) {\n+                        throw new ParsingException(\"Could not get stream segment title.\");\n+                    }\n \n                     final StreamSegment segment = new StreamSegment(title, startTimeSeconds);\n-                    if (!previewsArray.isEmpty()) {\n-                        // Assume that the thumbnail with the highest resolution is at the last position\n-                        segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n-                    }\n                     segment.setUrl(getUrl() + \"?t=\" + startTimeSeconds);\n+                    if (segmentJson.has(\"thumbnail\")) {\n+                        final JsonArray previewsArray = segmentJson.getObject(\"thumbnail\").getArray(\"thumbnails\");\n+                        if (!previewsArray.isEmpty()) {\n+                            // Assume that the thumbnail with the highest resolution is at the last position\n+                            segment.setPreviewUrl(previewsArray.getObject(previewsArray.size() - 1).getString(\"url\"));\n+                        }\n+                    }\n                     segments.add(segment);\n                 }\n             }\n-        } catch (Exception ignored) {\n         }\n         return segments;\n     }\n"}}, {"oid": "d3eea4f4be1acd721047ffbe1e3eff16244fc857", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d3eea4f4be1acd721047ffbe1e3eff16244fc857", "message": "Add stream segments to StreamInfo", "committedDate": "2020-12-12T09:24:29Z", "type": "commit"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "message": "Add tests for stream segments", "committedDate": "2020-12-12T09:24:55Z", "type": "commit"}, {"oid": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "message": "Add tests for stream segments", "committedDate": "2020-12-12T09:24:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2ODIyMw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541568223", "bodyText": "this looks YouTube specific and should therefore be moved from within the function to the function call.", "author": "TobiGr", "createdAt": "2020-12-12T12:36:33Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.schabi.newpipe.extractor.stream;\n+\n+\n+import javax.annotation.Nullable;\n+import java.io.Serializable;\n+\n+public class StreamSegment implements Serializable {\n+    /**\n+     * Title of this segment\n+     */\n+    private String title;\n+\n+    /**\n+     * Timestamp of the starting point in seconds\n+     */\n+    private int startTimeSeconds;\n+\n+    /**\n+     * Direct url to this segment. This can be null if the service doesn't provide such function.\n+     */\n+    @Nullable\n+    public String url;\n+\n+    /**\n+     * Preview url for this segment. This can be null if the service doesn't provide such function\n+     * or there is no resource found.\n+     */\n+    @Nullable\n+    private String previewUrl = null;\n+\n+    public StreamSegment(String title, int startTimeSeconds) {\n+        this.title = title;\n+        this.startTimeSeconds = startTimeSeconds;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public void setTitle(final String title) {\n+        this.title = title;\n+    }\n+\n+    public int getStartTimeSeconds() {\n+        return startTimeSeconds;\n+    }\n+\n+    public void setStartTimeSeconds(final int startTimeSeconds) {\n+        this.startTimeSeconds = startTimeSeconds;\n+    }\n+\n+    @Nullable\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(@Nullable final String url) {\n+        this.url = url;\n+    }\n+\n+    @Nullable\n+    public String getPreviewUrl() {\n+        return previewUrl;\n+    }\n+\n+    public void setPreviewUrl(@Nullable final String previewUrl) {\n+        this.previewUrl = previewUrl.replaceAll(\"\\\\u0026\", \"&\");", "originalCommit": "9a7a224a545e0dd5036b14e7e7a83e923be03d6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njg2Mw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/479#discussion_r541576863", "bodyText": "Actually, it can be removed completely. The encoding when it's printed in the console is different to the one when saving the html itself from source tab in Chrome/Firefox (I checked it via System.out.println()) :')\nSo I'll wrap it with fixThumbnailUrl(url) then like the other getThumbnailUrl calls.", "author": "vkay94", "createdAt": "2020-12-12T13:32:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU2ODIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "2ba27b39af2a5e19cc9ecd0f813fe1f7de072c86", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java\nindex 2bb329ac..5b681073 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamSegment.java\n\n@@ -64,6 +64,6 @@ public class StreamSegment implements Serializable {\n     }\n \n     public void setPreviewUrl(@Nullable final String previewUrl) {\n-        this.previewUrl = previewUrl.replaceAll(\"\\\\u0026\", \"&\");\n+        this.previewUrl = previewUrl;\n     }\n }\n"}}, {"oid": "2ba27b39af2a5e19cc9ecd0f813fe1f7de072c86", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2ba27b39af2a5e19cc9ecd0f813fe1f7de072c86", "message": "Stream segments: Remove replaceAll from setPreviewUrl", "committedDate": "2020-12-12T14:00:45Z", "type": "commit"}]}