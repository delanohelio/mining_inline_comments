{"pr_number": 308, "pr_title": "[PeerTube] channels support", "pr_createdAt": "2020-04-09T18:08:33Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308", "timeline": [{"oid": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "message": "add support for PeerTube channels extraction", "committedDate": "2020-04-09T17:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MTA2OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406681069", "bodyText": "Please change it to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return linkHandler.getUrl().matches(\"^.*\\\\/accounts\\\\/[^\\\\/]*$\") ?\n          \n          \n            \n                            new PeertubeUserExtractor(this, linkHandler) :\n          \n          \n            \n                            new PeertubeChannelExtractor(this, linkHandler);\n          \n          \n            \n                    if (linkHandler.getUrl().contains(\"/video-channels/\")) {\n          \n          \n            \n                        return new PeertubeChannelExtractor(this, linkHandler);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return new PeertubeUserExtractor(this, linkHandler);\n          \n          \n            \n                    }", "author": "wb9688", "createdAt": "2020-04-10T09:27:44Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java", "diffHunk": "@@ -77,7 +77,10 @@ public SubscriptionExtractor getSubscriptionExtractor() {\n     @Override\n     public ChannelExtractor getChannelExtractor(ListLinkHandler linkHandler)\n             throws ExtractionException {\n-        return new PeertubeChannelExtractor(this, linkHandler);\n+\n+        return linkHandler.getUrl().matches(\"^.*\\\\/accounts\\\\/[^\\\\/]*$\") ?\n+                new PeertubeUserExtractor(this, linkHandler) :\n+                new PeertubeChannelExtractor(this, linkHandler);", "originalCommit": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c9f1260eb969fd98d147d5f9684370b855e0764", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java\nindex 53e0f546..e025c2be 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeService.java\n\n@@ -78,9 +78,11 @@ public class PeertubeService extends StreamingService {\n     public ChannelExtractor getChannelExtractor(ListLinkHandler linkHandler)\n             throws ExtractionException {\n \n-        return linkHandler.getUrl().matches(\"^.*\\\\/accounts\\\\/[^\\\\/]*$\") ?\n-                new PeertubeUserExtractor(this, linkHandler) :\n-                new PeertubeChannelExtractor(this, linkHandler);\n+        if (linkHandler.getUrl().contains(\"/video-channels/\")) {\n+            return new PeertubeChannelExtractor(this, linkHandler);\n+        } else {\n+            return new PeertubeAccountExtractor(this, linkHandler);\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NTAyNg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406685026", "bodyText": "Please change it to something like the following to remain backwards compatible:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return baseUrl + API_ENDPOINT + id;\n          \n          \n            \n                    if (id.matches(ID_PATTERN)) {\n          \n          \n            \n                        return baseUrl + API_ENDPOINT + id;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // This is needed for compatibility with older versions were we didn't support video channels yet\n          \n          \n            \n                        return baseUrl + API_ENDPOINT + \"accounts/\" + id;\n          \n          \n            \n                    }", "author": "wb9688", "createdAt": "2020-04-10T09:39:04Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,11 +31,11 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNTS_ENDPOINT + id;\n+        return baseUrl + API_ENDPOINT + id;", "originalCommit": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c9f1260eb969fd98d147d5f9684370b855e0764", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\nindex 27e0fa59..ef81ca4b 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java\n\n@@ -31,7 +31,13 @@ public class PeertubeChannelLinkHandlerFactory extends ListLinkHandlerFactory {\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + API_ENDPOINT + id;\n+\n+        if (id.matches(ID_PATTERN)) {\n+            return baseUrl + API_ENDPOINT + id;\n+        } else {\n+            // This is needed for compatibility with older versions were we didn't support video channels yet\n+            return baseUrl + API_ENDPOINT + \"accounts/\" + id;\n+        }\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NTg5OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406685899", "bodyText": "Please also add a test for getting an URL from an ID. It should test all of: whatever, video-channels/whatever, and accounts/whatever. Obviously don't use whatever, but actually existing things.", "author": "wb9688", "createdAt": "2020-04-10T09:41:56Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -30,7 +30,7 @@ public void acceptUrlTest() throws ParsingException {\n \n     @Test\n     public void getIdFromUrl() throws ParsingException {\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n     }", "originalCommit": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c9f1260eb969fd98d147d5f9684370b855e0764", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java\nindex c44c7548..28fe1981 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java\n\n@@ -32,5 +32,6 @@ public class PeertubeChannelLinkHandlerFactoryTest {\n     public void getIdFromUrl() throws ParsingException {\n         assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n         assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n+        assertEquals(\"video-channels/7682d9f2-07be-4622-862e-93ec812e2ffa\", linkHandler.fromUrl(\"https://peertube.mastodon.host/video-channels/7682d9f2-07be-4622-862e-93ec812e2ffa/videos\").getId());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjAzNA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406686034", "bodyText": "Add tests for video channels as well.", "author": "wb9688", "createdAt": "2020-04-10T09:42:23Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -30,7 +30,7 @@ public void acceptUrlTest() throws ParsingException {\n \n     @Test\n     public void getIdFromUrl() throws ParsingException {\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n-        assertEquals(\"kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n+        assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());", "originalCommit": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c9f1260eb969fd98d147d5f9684370b855e0764", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java\nindex c44c7548..28fe1981 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeChannelLinkHandlerFactoryTest.java\n\n@@ -32,5 +32,6 @@ public class PeertubeChannelLinkHandlerFactoryTest {\n     public void getIdFromUrl() throws ParsingException {\n         assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net\").getId());\n         assertEquals(\"accounts/kranti@videos.squat.net\", linkHandler.fromUrl(\"https://peertube.mastodon.host/accounts/kranti@videos.squat.net/videos\").getId());\n+        assertEquals(\"video-channels/7682d9f2-07be-4622-862e-93ec812e2ffa\", linkHandler.fromUrl(\"https://peertube.mastodon.host/video-channels/7682d9f2-07be-4622-862e-93ec812e2ffa/videos\").getId());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjI0NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406686245", "bodyText": "Rename this to PeertubeAccountExtractorTest", "author": "wb9688", "createdAt": "2020-04-10T09:42:58Z", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeUserExtractorTest.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.schabi.newpipe.extractor.services.peertube;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.services.BaseChannelExtractorTest;\n+import org.schabi.newpipe.extractor.services.peertube.extractors.PeertubeUserExtractor;\n+\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n+import static org.schabi.newpipe.extractor.services.DefaultTests.*;\n+\n+/**\n+ * Test for {@link PeertubeUserExtractor}\n+ */\n+public class PeertubeUserExtractorTest {", "originalCommit": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c9f1260eb969fd98d147d5f9684370b855e0764", "chunk": "diff --git a/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeUserExtractorTest.java b/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeAccountExtractorTest.java\nsimilarity index 95%\nrename from extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeUserExtractorTest.java\nrename to extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeAccountExtractorTest.java\nindex a1084454..fd944f49 100644\n--- a/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeUserExtractorTest.java\n+++ b/extractor/src/test/java/org/schabi/newpipe/extractor/services/peertube/PeertubeAccountExtractorTest.java\n\n@@ -8,7 +8,7 @@ import org.schabi.newpipe.extractor.NewPipe;\n import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n import org.schabi.newpipe.extractor.exceptions.ParsingException;\n import org.schabi.newpipe.extractor.services.BaseChannelExtractorTest;\n-import org.schabi.newpipe.extractor.services.peertube.extractors.PeertubeUserExtractor;\n+import org.schabi.newpipe.extractor.services.peertube.extractors.PeertubeAccountExtractor;\n \n import static org.junit.Assert.*;\n import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NjQ3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r406686470", "bodyText": "Rename this to PeertubeAccountExtractor.", "author": "wb9688", "createdAt": "2020-04-10T09:43:35Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeUserExtractor.java", "diffHunk": "@@ -0,0 +1,187 @@\n+package org.schabi.newpipe.extractor.services.peertube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import com.grack.nanojson.JsonParser;\n+import com.grack.nanojson.JsonParserException;\n+import org.jsoup.helper.StringUtil;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.channel.ChannelExtractor;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.services.peertube.PeertubeParsingHelper;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+import org.schabi.newpipe.extractor.utils.JsonUtils;\n+import org.schabi.newpipe.extractor.utils.Parser;\n+import org.schabi.newpipe.extractor.utils.Parser.RegexException;\n+\n+import java.io.IOException;\n+\n+public class PeertubeUserExtractor extends ChannelExtractor {", "originalCommit": "b6e6f403a80fe4ae691f81bfe53cfc1723de7345", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c9f1260eb969fd98d147d5f9684370b855e0764", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeUserExtractor.java b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeAccountExtractor.java\nsimilarity index 97%\nrename from extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeUserExtractor.java\nrename to extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeAccountExtractor.java\nindex 2ada5855..ecde0d43 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeUserExtractor.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeAccountExtractor.java\n\n@@ -21,7 +21,7 @@ import org.schabi.newpipe.extractor.utils.Parser.RegexException;\n \n import java.io.IOException;\n \n-public class PeertubeUserExtractor extends ChannelExtractor {\n+public class PeertubeAccountExtractor extends ChannelExtractor {\n \n     private static final String START_KEY = \"start\";\n     private static final String COUNT_KEY = \"count\";\n"}}, {"oid": "2c9f1260eb969fd98d147d5f9684370b855e0764", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/2c9f1260eb969fd98d147d5f9684370b855e0764", "message": "Fix wb9688 review comments\n\n* Rename PeertubeUserExtractor to PeertubeAccountExtractor\n* Add test for video-channels in PeertubeChannelLinkHandlerFactoryTest\n* Compatibility support for older versions (use \"accounts/\" as default)", "committedDate": "2020-04-10T13:40:53Z", "type": "commit"}, {"oid": "4afe657f6ff97860460dec391adabc0bc62afbb6", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4afe657f6ff97860460dec391adabc0bc62afbb6", "message": "Add tests for getUrlFromId and test for video-channels in acceptUrlTest", "committedDate": "2020-04-10T16:05:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTAwOQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r407065009", "bodyText": "I don't understand why this would be needed. Could you provide a url where this piece of code would run?", "author": "Stypox", "createdAt": "2020-04-11T13:37:16Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/linkHandler/PeertubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -31,11 +31,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n     @Override\n     public String getUrl(String id, List<String> contentFilter, String sortFilter, String baseUrl)\n             throws ParsingException {\n-        return baseUrl + ACCOUNTS_ENDPOINT + id;\n+\n+        if (id.matches(ID_PATTERN)) {\n+            return baseUrl + API_ENDPOINT + id;\n+        } else {\n+            // This is needed for compatibility with older versions were we didn't support video channels yet\n+            return baseUrl + API_ENDPOINT + \"accounts/\" + id;", "originalCommit": "4afe657f6ff97860460dec391adabc0bc62afbb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTM2MQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r407065361", "bodyText": "@Royosef", "author": "Stypox", "createdAt": "2020-04-11T13:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTY3MA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/308#discussion_r407065670", "bodyText": "@Stypox: It's for compatibility with older versions of NewPipeExtractor, where you had just e.g. framasoft as ID. Now that ID would be accounts/framasoft. If you had stored an old ID such as framasoft and try to create an extractor from the old ID, it would fail. This code prefixes those old IDs with accounts/ in the URL, so old IDs still work. NewPipe doesn't store IDs but URLs though. I asked @Royosef to add it in #308 (comment).", "author": "wb9688", "createdAt": "2020-04-11T13:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NTAwOQ=="}], "type": "inlineReview", "revised_code": null}]}