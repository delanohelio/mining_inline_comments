{"pr_number": 362, "pr_title": "Add support for Google search redirect url", "pr_createdAt": "2020-06-27T13:56:59Z", "pr_url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362", "timeline": [{"oid": "8ce3e9bda66e54641f05d05bde8702bbcf2bdeb2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/8ce3e9bda66e54641f05d05bde8702bbcf2bdeb2", "message": "Add support for Google search redirect url", "committedDate": "2020-06-27T21:00:10Z", "type": "forcePushed"}, {"oid": "d66a361eae2902e2bb875a31e5a9e88a747fb1aa", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d66a361eae2902e2bb875a31e5a9e88a747fb1aa", "message": "Add support for Google search redirect url", "committedDate": "2020-06-27T21:06:22Z", "type": "forcePushed"}, {"oid": "d9a8786f8d87fc4270d92014ace683e732f6774c", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d9a8786f8d87fc4270d92014ace683e732f6774c", "message": "Add support for Google search redirect url", "committedDate": "2020-06-27T21:11:45Z", "type": "forcePushed"}, {"oid": "7ed38b703d06b1d4285f9c17d62c917aa40190e0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7ed38b703d06b1d4285f9c17d62c917aa40190e0", "message": "Add support for Google search redirect url", "committedDate": "2020-06-27T21:30:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2Njc1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r446666752", "bodyText": "You forgot to remove this", "author": "XiangRongLin", "createdAt": "2020-06-28T15:51:43Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java", "diffHunk": "@@ -181,13 +181,38 @@ public static String removeUTF8BOM(String s) {\n     }\n \n     public static String getBaseUrl(String url) throws ParsingException {\n-        URL uri;\n         try {\n-            uri = stringToURL(url);\n+            final URL uri = stringToURL(url);\n+            return uri.getProtocol() + \"://\" + uri.getAuthority();\n         } catch (MalformedURLException e) {\n+            final String message = e.getMessage();\n+            if (message.startsWith(\"unknown protocol: \")) {\n+                System.out.println(message.substring(18));", "originalCommit": "7ed38b703d06b1d4285f9c17d62c917aa40190e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NjA3OA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r446696078", "bodyText": "Ooops ;-)", "author": "Stypox", "createdAt": "2020-06-28T20:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2Njc1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\nindex 419ddd52..c6bd508a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\n\n@@ -195,26 +196,6 @@ public class Utils {\n         }\n     }\n \n-    /**\n-     * If the provided url is a Google search redirect, then the actual url is extracted from the\n-     * {@code url=} query value and returned, otherwise the original url is returned.\n-     * @param url the url which can possibly be a Google search redirect\n-     * @return an url with no Google search redirects\n-     */\n-    public static String followGoogleRedirectIfNeeded(final String url) {\n-        // if the url is a redirect from a Google search, extract the actual url\n-        try {\n-            final URL decoded = Utils.stringToURL(url);\n-            if (decoded.getHost().contains(\"google\") && decoded.getPath().equals(\"/url\")) {\n-                return URLDecoder.decode(Parser.matchGroup1(\"&url=([^&]+)(?:&|$)\", url), \"UTF-8\");\n-            }\n-        } catch (final Exception ignored) {\n-        }\n-\n-        // url is not a google search redirect\n-        return url;\n-    }\n-\n     public static boolean isNullOrEmpty(final String str) {\n         return str == null || str.isEmpty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2NzQ4NQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r446667485", "bodyText": "I would replace the 18 with \"unknown protocol: \".length(). Since on first view i could not see why it was 18", "author": "XiangRongLin", "createdAt": "2020-06-28T15:58:20Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java", "diffHunk": "@@ -181,13 +181,38 @@ public static String removeUTF8BOM(String s) {\n     }\n \n     public static String getBaseUrl(String url) throws ParsingException {\n-        URL uri;\n         try {\n-            uri = stringToURL(url);\n+            final URL uri = stringToURL(url);\n+            return uri.getProtocol() + \"://\" + uri.getAuthority();\n         } catch (MalformedURLException e) {\n+            final String message = e.getMessage();\n+            if (message.startsWith(\"unknown protocol: \")) {\n+                System.out.println(message.substring(18));\n+                return message.substring(18); // return just the protocol (e.g. vnd.youtube)", "originalCommit": "7ed38b703d06b1d4285f9c17d62c917aa40190e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0MzM2Nw==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r447643367", "bodyText": "I disagree on how to explain what 18 is.\nIf you do this way, you'll create a String object, call a method; all of that is useless. Just let 18 and add // \"unknown protocol\".lenght(), you'll understand too and no object is created for nothing", "author": "B0pol", "createdAt": "2020-06-30T12:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2NzQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MzMyMg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r447843322", "bodyText": "Wouldn't those things be optimized away by the compiler?", "author": "Stypox", "createdAt": "2020-06-30T17:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2NzQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\nindex 419ddd52..c6bd508a 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java\n\n@@ -195,26 +196,6 @@ public class Utils {\n         }\n     }\n \n-    /**\n-     * If the provided url is a Google search redirect, then the actual url is extracted from the\n-     * {@code url=} query value and returned, otherwise the original url is returned.\n-     * @param url the url which can possibly be a Google search redirect\n-     * @return an url with no Google search redirects\n-     */\n-    public static String followGoogleRedirectIfNeeded(final String url) {\n-        // if the url is a redirect from a Google search, extract the actual url\n-        try {\n-            final URL decoded = Utils.stringToURL(url);\n-            if (decoded.getHost().contains(\"google\") && decoded.getPath().equals(\"/url\")) {\n-                return URLDecoder.decode(Parser.matchGroup1(\"&url=([^&]+)(?:&|$)\", url), \"UTF-8\");\n-            }\n-        } catch (final Exception ignored) {\n-        }\n-\n-        // url is not a google search redirect\n-        return url;\n-    }\n-\n     public static boolean isNullOrEmpty(final String str) {\n         return str == null || str.isEmpty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2ODE3OQ==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r446668179", "bodyText": "The input parameter shouldn't be reassigned. Especially since with the new checkstyle rules in the NewPipe repo forcing every input parameter to be final.", "author": "XiangRongLin", "createdAt": "2020-06-28T16:04:29Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/LinkHandlerFactory.java", "diffHunk": "@@ -42,12 +42,30 @@ public String getUrl(String id, String baseUrl) throws ParsingException {\n     // Logic\n     ///////////////////////////////////\n \n+    /**\n+     * Builds a {@link LinkHandler} from a url.<br>\n+     * Be sure to call {@link Utils#followGoogleRedirectIfNeeded(String)} on the url if overriding\n+     * this function.\n+     * @param url the url to extract path and id from\n+     * @return a {@link LinkHandler} complete with information\n+     */\n     public LinkHandler fromUrl(String url) throws ParsingException {\n         if (url == null) throw new IllegalArgumentException(\"url can not be null\");\n+        url = Utils.followGoogleRedirectIfNeeded(url);", "originalCommit": "7ed38b703d06b1d4285f9c17d62c917aa40190e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/LinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/LinkHandlerFactory.java\nindex 7dcfe5f4..6bba7b4e 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/LinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/LinkHandlerFactory.java\n\n@@ -42,30 +42,12 @@ public abstract class LinkHandlerFactory {\n     // Logic\n     ///////////////////////////////////\n \n-    /**\n-     * Builds a {@link LinkHandler} from a url.<br>\n-     * Be sure to call {@link Utils#followGoogleRedirectIfNeeded(String)} on the url if overriding\n-     * this function.\n-     * @param url the url to extract path and id from\n-     * @return a {@link LinkHandler} complete with information\n-     */\n     public LinkHandler fromUrl(String url) throws ParsingException {\n         if (url == null) throw new IllegalArgumentException(\"url can not be null\");\n-        url = Utils.followGoogleRedirectIfNeeded(url);\n         final String baseUrl = Utils.getBaseUrl(url);\n         return fromUrl(url, baseUrl);\n     }\n \n-    /**\n-     * Builds a {@link LinkHandler} from a url and a base url. The url is expected to be already\n-     * polished from google search redirects (otherwise how could {@code baseUrl} have been\n-     * extracted?).<br>\n-     * So do not call {@link Utils#followGoogleRedirectIfNeeded(String)} on the url if overriding\n-     * this function, since that should be done in {@link #fromUrl(String)}.\n-     * @param url the url without google search redirects to extract id from\n-     * @param baseUrl the base url\n-     * @return a {@link LinkHandler} complete with information\n-     */\n     public LinkHandler fromUrl(String url, String baseUrl) throws ParsingException {\n         if (url == null) throw new IllegalArgumentException(\"url can not be null\");\n         if (!acceptUrl(url)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2ODMzOA==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r446668338", "bodyText": "Same here, no reassignement", "author": "XiangRongLin", "createdAt": "2020-06-28T16:06:06Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java", "diffHunk": "@@ -32,7 +32,8 @@ public String getUrl(String id, List<String> contentFilter, String sortFilter, S\n \n     @Override\n     public ListLinkHandler fromUrl(String url) throws ParsingException {\n-        String baseUrl = Utils.getBaseUrl(url);\n+        url = Utils.followGoogleRedirectIfNeeded(url);", "originalCommit": "7ed38b703d06b1d4285f9c17d62c917aa40190e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\nindex cdbbab4f..9ea478b0 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java\n\n@@ -32,8 +32,7 @@ public abstract class ListLinkHandlerFactory extends LinkHandlerFactory {\n \n     @Override\n     public ListLinkHandler fromUrl(String url) throws ParsingException {\n-        url = Utils.followGoogleRedirectIfNeeded(url);\n-        final String baseUrl = Utils.getBaseUrl(url);\n+        String baseUrl = Utils.getBaseUrl(url);\n         return fromUrl(url, baseUrl);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2ODQ1Mg==", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/362#discussion_r446668452", "bodyText": "Same here, no reassignement", "author": "XiangRongLin", "createdAt": "2020-06-28T16:07:09Z", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java", "diffHunk": "@@ -277,12 +278,13 @@ public CommentsExtractor getCommentsExtractor(String url) throws ExtractionExcep\n      * Figures out where the link is pointing to (a channel, a video, a playlist, etc.)\n      * @param url the url on which it should be decided of which link type it is\n      * @return the link type of url\n-     * @throws ParsingException\n      */\n     public final LinkType getLinkTypeByUrl(String url) throws ParsingException {\n-        LinkHandlerFactory sH = getStreamLHFactory();\n-        LinkHandlerFactory cH = getChannelLHFactory();\n-        LinkHandlerFactory pH = getPlaylistLHFactory();\n+        url = Utils.followGoogleRedirectIfNeeded(url);", "originalCommit": "7ed38b703d06b1d4285f9c17d62c917aa40190e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "chunk": "diff --git a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\nindex 3d09d509..e21b17f3 100644\n--- a/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n+++ b/extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java\n\n@@ -278,13 +277,12 @@ public abstract class StreamingService {\n      * Figures out where the link is pointing to (a channel, a video, a playlist, etc.)\n      * @param url the url on which it should be decided of which link type it is\n      * @return the link type of url\n+     * @throws ParsingException\n      */\n     public final LinkType getLinkTypeByUrl(String url) throws ParsingException {\n-        url = Utils.followGoogleRedirectIfNeeded(url);\n-\n-        final LinkHandlerFactory sH = getStreamLHFactory();\n-        final LinkHandlerFactory cH = getChannelLHFactory();\n-        final LinkHandlerFactory pH = getPlaylistLHFactory();\n+        LinkHandlerFactory sH = getStreamLHFactory();\n+        LinkHandlerFactory cH = getChannelLHFactory();\n+        LinkHandlerFactory pH = getPlaylistLHFactory();\n \n         if (sH != null && sH.acceptUrl(url)) {\n             return LinkType.STREAM;\n"}}, {"oid": "c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c190a3029bf0a3ae36e584f1e74e83e4ba8137c4", "message": "Consider protocol as base url when it is a custom one (e.g. vnd.youtube)", "committedDate": "2020-10-31T19:58:28Z", "type": "commit"}, {"oid": "3fe55b30ba43ff44241e394d8b021b8c78c16e18", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3fe55b30ba43ff44241e394d8b021b8c78c16e18", "message": "Add support for Google search redirect url", "committedDate": "2020-10-31T19:58:28Z", "type": "commit"}, {"oid": "9e53cf0b56652c37e68d3c5a03624f0b6d8fff05", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9e53cf0b56652c37e68d3c5a03624f0b6d8fff05", "message": "Fix parameter reassignment and other style issues\n\nAlso remove left-behind debug statement", "committedDate": "2020-10-31T19:58:28Z", "type": "commit"}, {"oid": "9e53cf0b56652c37e68d3c5a03624f0b6d8fff05", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9e53cf0b56652c37e68d3c5a03624f0b6d8fff05", "message": "Fix parameter reassignment and other style issues\n\nAlso remove left-behind debug statement", "committedDate": "2020-10-31T19:58:28Z", "type": "forcePushed"}]}