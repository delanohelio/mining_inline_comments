{"pr_number": 133, "pr_title": "#131 - Added Header class", "pr_createdAt": "2020-04-21T13:27:23Z", "pr_url": "https://github.com/artipie/http/pull/133", "timeline": [{"oid": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0", "url": "https://github.com/artipie/http/commit/48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0", "message": "#131 - Added Header class", "committedDate": "2020-04-21T13:27:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5OTkyOA==", "url": "https://github.com/artipie/http/pull/133#discussion_r412699928", "bodyText": "@olegmoz can we use single SP for header value. It's not required by specification, but recommended https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n\nThe field value MAY be preceded by any amount of LWS, though a single SP is preferred.", "author": "g4s8", "createdAt": "2020-04-22T06:18:17Z", "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * HTTP header.\n+ * Name of header is considered to be case-insensitive when compared to one another.\n+ *\n+ * @since 0.8\n+ */\n+public final class Header implements Map.Entry<String, String> {\n+\n+    /**\n+     * Name.\n+     */\n+    private final String name;\n+\n+    /**\n+     * Value.\n+     */\n+    private final String value;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param entry Entry representing a header.\n+     */\n+    public Header(final Map.Entry<String, String> entry) {\n+        this(entry.getKey(), entry.getValue());\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param name Name.\n+     * @param value Value.\n+     */\n+    public Header(final String name, final String value) {\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return this.name;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return this.value;\n+    }\n+\n+    @Override\n+    public String setValue(final String ignored) {\n+        throw new UnsupportedOperationException(\"Value cannot be modified\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public boolean equals(final Object that) {\n+        if (this == that) {\n+            return true;\n+        }\n+        if (that == null || getClass() != that.getClass()) {\n+            return false;\n+        }\n+        final Header header = (Header) that;\n+        return this.lowercaseName().equals(header.lowercaseName())\n+            && this.value.equals(header.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(this.lowercaseName(), this.value);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s:%s\", this.name, this.value);", "originalCommit": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3NTAyMw==", "url": "https://github.com/artipie/http/pull/133#discussion_r412775023", "bodyText": "@g4s8 it would be better, thanks", "author": "olegmoz", "createdAt": "2020-04-22T08:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5OTkyOA=="}], "type": "inlineReview", "revised_code": {"commit": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "chunk": "diff --git a/src/main/java/com/artipie/http/rs/Header.java b/src/main/java/com/artipie/http/rs/Header.java\nindex 5335e2a..b1369f9 100644\n--- a/src/main/java/com/artipie/http/rs/Header.java\n+++ b/src/main/java/com/artipie/http/rs/Header.java\n\n@@ -72,7 +72,7 @@ public final class Header implements Map.Entry<String, String> {\n \n     @Override\n     public String getValue() {\n-        return this.value;\n+        return this.value.replaceAll(\"^\\\\s+\", \"\");\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTIxNQ==", "url": "https://github.com/artipie/http/pull/133#discussion_r412701215", "bodyText": "@olegmoz header value starts with first non-whitespace char, so I'd trim all leading whitespaces (LWS) here", "author": "g4s8", "createdAt": "2020-04-22T06:21:07Z", "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * HTTP header.\n+ * Name of header is considered to be case-insensitive when compared to one another.\n+ *\n+ * @since 0.8\n+ */\n+public final class Header implements Map.Entry<String, String> {\n+\n+    /**\n+     * Name.\n+     */\n+    private final String name;\n+\n+    /**\n+     * Value.\n+     */\n+    private final String value;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param entry Entry representing a header.\n+     */\n+    public Header(final Map.Entry<String, String> entry) {\n+        this(entry.getKey(), entry.getValue());\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param name Name.\n+     * @param value Value.\n+     */\n+    public Header(final String name, final String value) {\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return this.name;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return this.value;", "originalCommit": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3NTI3Nw==", "url": "https://github.com/artipie/http/pull/133#discussion_r412775277", "bodyText": "@g4s8 agreed, done", "author": "olegmoz", "createdAt": "2020-04-22T08:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "chunk": "diff --git a/src/main/java/com/artipie/http/rs/Header.java b/src/main/java/com/artipie/http/rs/Header.java\nindex 5335e2a..b1369f9 100644\n--- a/src/main/java/com/artipie/http/rs/Header.java\n+++ b/src/main/java/com/artipie/http/rs/Header.java\n\n@@ -72,7 +72,7 @@ public final class Header implements Map.Entry<String, String> {\n \n     @Override\n     public String getValue() {\n-        return this.value;\n+        return this.value.replaceAll(\"^\\\\s+\", \"\");\n     }\n \n     @Override\n"}}, {"oid": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "url": "https://github.com/artipie/http/commit/060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "message": "#131 - Changes by review", "committedDate": "2020-04-22T08:25:07Z", "type": "forcePushed"}, {"oid": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "url": "https://github.com/artipie/http/commit/060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "message": "#131 - Changes by review", "committedDate": "2020-04-22T08:25:07Z", "type": "commit"}]}