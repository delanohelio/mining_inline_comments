{"pr_number": 164, "pr_title": "Redesigned trim path slice", "pr_createdAt": "2020-05-29T12:17:32Z", "pr_url": "https://github.com/artipie/http/pull/164", "timeline": [{"oid": "81e0f770d54807bddfc69164bd8ccad29c8011c3", "url": "https://github.com/artipie/http/commit/81e0f770d54807bddfc69164bd8ccad29c8011c3", "message": "#163 - redesigned trim path slice", "committedDate": "2020-05-29T12:15:51Z", "type": "commit"}, {"oid": "a1d610b525826f74fdbfa4451cd78c70d927a348", "url": "https://github.com/artipie/http/commit/a1d610b525826f74fdbfa4451cd78c70d927a348", "message": "Merge branch 'master' into 163", "committedDate": "2020-05-29T12:18:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MzQ3Ng==", "url": "https://github.com/artipie/http/pull/164#discussion_r432573476", "bodyText": "@g4s8 Wouldn't this class belong to test scope? I think it should be moved to test folders", "author": "paulodamaso", "createdAt": "2020-05-29T15:44:58Z", "path": "src/main/java/com/artipie/http/hm/AssertSlice.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.StandardRs;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice implementation which assert request data against specified matchers.\n+ * @since 0.10\n+ */\n+public final class AssertSlice implements Slice {", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMDA1MQ==", "url": "https://github.com/artipie/http/pull/164#discussion_r433110051", "bodyText": "@paulodamaso I decided to put this class into hm package with all public Hamcrest classes for testing with http module, it may be useful in other modules to verify Slice implementations.", "author": "g4s8", "createdAt": "2020-06-01T08:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MzQ3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3NDkwOA==", "url": "https://github.com/artipie/http/pull/164#discussion_r432574908", "bodyText": "@g4s8 This one should be at test folder tree also", "author": "paulodamaso", "createdAt": "2020-05-29T15:47:32Z", "path": "src/main/java/com/artipie/http/hm/RqLineHasUri.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.rq.RequestLineFrom;\n+import java.net.URI;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.hamcrest.core.IsEqual;\n+\n+/**\n+ * Request line URI matcher.\n+ * @since 0.10\n+ */\n+public final class RqLineHasUri extends TypeSafeMatcher<RequestLineFrom> {", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMDEzNA==", "url": "https://github.com/artipie/http/pull/164#discussion_r433110134", "bodyText": "@paulodamaso same here", "author": "g4s8", "createdAt": "2020-06-01T08:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3NDkwOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NDM0Mg==", "url": "https://github.com/artipie/http/pull/164#discussion_r432584342", "bodyText": "@g4s8 Wouldn't be better if we extract this to a class? Maybe we could use it in other artipie projects", "author": "paulodamaso", "createdAt": "2020-05-29T16:01:35Z", "path": "src/main/java/com/artipie/http/slice/TrimPathSlice.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rs.Header;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.google.common.collect.Iterables;\n+import java.net.URI;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice that removes the first part from the request URI.\n+ * <p>\n+ * For example {@code GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1}\n+ * would be {@code GET http://www.w3.org/WWW/TheProject.html HTTP/1.1}.<br/>\n+ * The full path will be available as the value of {@code X-FullPath} header.\n+ * </p>\n+ *\n+ * @since 0.8\n+ */\n+public final class TrimPathSlice implements Slice {\n+\n+    /**\n+     * Delegate slice.\n+     */\n+    private final Slice slice;\n+\n+    /**\n+     * Pattern to trim.\n+     */\n+    private final Pattern ptn;\n+\n+    /**\n+     * Trim URI path by first hit of path param.\n+     * @param slice Origin slice\n+     * @param path Path to trim\n+     */\n+    public TrimPathSlice(final Slice slice, final String path) {\n+        this(\n+            slice,\n+            Pattern.compile(String.format(\"^/(?:%s)(\\\\/.*)?\", TrimPathSlice.normalized(path)))\n+        );\n+    }\n+\n+    /**\n+     * Trim URI path by pattern.\n+     *\n+     * @param slice Origin slice\n+     * @param ptn Path to trim\n+     */\n+    public TrimPathSlice(final Slice slice, final Pattern ptn) {\n+        this.slice = slice;\n+        this.ptn = ptn;\n+    }\n+\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        final RequestLineFrom rline = new RequestLineFrom(line);\n+        final URI uri = rline.uri();\n+        final String full = uri.getPath();\n+        final Matcher matcher = this.ptn.matcher(full);\n+        final Response response;\n+        if (matcher.matches()) {\n+            response = this.slice.response(\n+                new RequestLine(\n+                    rline.method().toString(),\n+                    new URIBuilder(uri)\n+                        .setPath(asPath(matcher.group(1)))\n+                        .toString(),\n+                    rline.version()\n+                ).toString(),\n+                Iterables.concat(\n+                    headers, Collections.singletonList(new Header(\"X-FullPath\", full))\n+                ),\n+                body\n+            );\n+        } else {\n+            response = new RsWithStatus(\n+                new RsWithBody(\n+                    String.format(\n+                        \"Request path %s was not matched to %s\", full, this.ptn\n+                    ),\n+                    StandardCharsets.UTF_8\n+                ),\n+                RsStatus.INTERNAL_ERROR\n+            );\n+        }\n+        return response;\n+    }\n+\n+    /**\n+     * Normalize path: remove whitespaces and slash chars.\n+     * @param path Path\n+     * @return Normalized path\n+     * @checkstyle ReturnCountCheck (10 lines)\n+     */\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    private static String normalized(final String path) {", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMDc0Ng==", "url": "https://github.com/artipie/http/pull/164#discussion_r433110746", "bodyText": "@paulodamaso it's the internal implementation of this slice, I don't see where we can use it outside this class, but if we need it, we can extract it later", "author": "g4s8", "createdAt": "2020-06-01T08:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NDM0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNDk4Ng==", "url": "https://github.com/artipie/http/pull/164#discussion_r432624986", "bodyText": "@g4s8 I found these tests very difficult to understand:, some of them uses the verify private method, some don't, but copy a very similar code, and in most of them the assertion is masked.", "author": "paulodamaso", "createdAt": "2020-05-29T17:13:10Z", "path": "src/test/java/com/artipie/http/slice/TrimPathSliceTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqLineHasUri;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.StandardRs;\n+import io.reactivex.Flowable;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link TrimPathSlice}.\n+ * @since 0.8\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class TrimPathSliceTest {", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a8d5efe712b4da427928b1d1c891e66dd5b7bfd", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\nindex f25230f..aa9b244 100644\n--- a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n+++ b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n\n@@ -25,9 +25,9 @@ package com.artipie.http.slice;\n \n import com.artipie.http.Slice;\n import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqHasHeader;\n import com.artipie.http.hm.RqLineHasUri;\n import com.artipie.http.rq.RequestLine;\n-import com.artipie.http.rq.RqHeaders;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.StandardRs;\n import io.reactivex.Flowable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNzEzNg==", "url": "https://github.com/artipie/http/pull/164#discussion_r432627136", "bodyText": "@g4s8 Seems that the name of this test does not relates to what is being tested", "author": "paulodamaso", "createdAt": "2020-05-29T17:17:30Z", "path": "src/test/java/com/artipie/http/slice/TrimPathSliceTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqLineHasUri;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.StandardRs;\n+import io.reactivex.Flowable;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link TrimPathSlice}.\n+ * @since 0.8\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class TrimPathSliceTest {\n+\n+    @Test\n+    void removesInitialPartOfUri() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(\n+                    new RqLineHasUri(\n+                        new IsEqual<>(URI.create(\"http://www.w3.org/WWW/TheProject.html\"))\n+                    )\n+                ),\n+                \"pub/\"\n+            ),\n+            requestLine(\"http://www.w3.org/pub/WWW/TheProject.html\")\n+        );\n+    }\n+\n+    @Test\n+    void shortRequestLine() {", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a8d5efe712b4da427928b1d1c891e66dd5b7bfd", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\nindex f25230f..aa9b244 100644\n--- a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n+++ b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n\n@@ -25,9 +25,9 @@ package com.artipie.http.slice;\n \n import com.artipie.http.Slice;\n import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqHasHeader;\n import com.artipie.http.hm.RqLineHasUri;\n import com.artipie.http.rq.RequestLine;\n-import com.artipie.http.rq.RqHeaders;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.StandardRs;\n import io.reactivex.Flowable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNzg0OQ==", "url": "https://github.com/artipie/http/pull/164#discussion_r432627849", "bodyText": "@g4s8 Here, the implementation is very similar to  verify , couldn't you use the method instead?", "author": "paulodamaso", "createdAt": "2020-05-29T17:18:52Z", "path": "src/test/java/com/artipie/http/slice/TrimPathSliceTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqLineHasUri;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.StandardRs;\n+import io.reactivex.Flowable;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link TrimPathSlice}.\n+ * @since 0.8\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class TrimPathSliceTest {\n+\n+    @Test\n+    void removesInitialPartOfUri() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(\n+                    new RqLineHasUri(\n+                        new IsEqual<>(URI.create(\"http://www.w3.org/WWW/TheProject.html\"))\n+                    )\n+                ),\n+                \"pub/\"\n+            ),\n+            requestLine(\"http://www.w3.org/pub/WWW/TheProject.html\")\n+        );\n+    }\n+\n+    @Test\n+    void shortRequestLine() {\n+        new TrimPathSlice((line, headers, body) -> StandardRs.EMPTY, \"none\").response(\n+            requestLine(\"http://www.w3.org\").toString(),\n+            Collections.emptyList(),\n+            Flowable.empty()\n+        ).send(\n+            (status, headers, body) -> {\n+                MatcherAssert.assertThat(\n+                    \"Not failed\",\n+                    status,\n+                    IsEqual.equalTo(RsStatus.INTERNAL_ERROR)\n+                );\n+                return CompletableFuture.allOf();\n+            }\n+        );\n+    }\n+\n+    @Test\n+    void absoluteLine() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(new RqLineHasUri(new RqLineHasUri.HasPath(\"/three\"))),\n+                \"/one/two/\"\n+            ),\n+            requestLine(\"/one/two/three\")\n+        );\n+    }\n+\n+    @Test\n+    void trimFully() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(new RqLineHasUri(new RqLineHasUri.HasPath(\"/\"))),\n+                \"/foo/bar\"\n+            ),\n+            requestLine(\"/foo/bar\")\n+        );\n+    }\n+\n+    @Test\n+    void hasFullPathHeader() throws Exception {\n+        new TrimPathSlice(", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a8d5efe712b4da427928b1d1c891e66dd5b7bfd", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\nindex f25230f..aa9b244 100644\n--- a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n+++ b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n\n@@ -25,9 +25,9 @@ package com.artipie.http.slice;\n \n import com.artipie.http.Slice;\n import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqHasHeader;\n import com.artipie.http.hm.RqLineHasUri;\n import com.artipie.http.rq.RequestLine;\n-import com.artipie.http.rq.RqHeaders;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.StandardRs;\n import io.reactivex.Flowable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyODU4OA==", "url": "https://github.com/artipie/http/pull/164#discussion_r432628588", "bodyText": "@g4s8 I don't feel the need of this method, you are already ignoring repeated strings check, so in my opinion it just shadows what we are trying to compare", "author": "paulodamaso", "createdAt": "2020-05-29T17:20:19Z", "path": "src/test/java/com/artipie/http/slice/TrimPathSliceTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqLineHasUri;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.StandardRs;\n+import io.reactivex.Flowable;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link TrimPathSlice}.\n+ * @since 0.8\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+final class TrimPathSliceTest {\n+\n+    @Test\n+    void removesInitialPartOfUri() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(\n+                    new RqLineHasUri(\n+                        new IsEqual<>(URI.create(\"http://www.w3.org/WWW/TheProject.html\"))\n+                    )\n+                ),\n+                \"pub/\"\n+            ),\n+            requestLine(\"http://www.w3.org/pub/WWW/TheProject.html\")\n+        );\n+    }\n+\n+    @Test\n+    void shortRequestLine() {\n+        new TrimPathSlice((line, headers, body) -> StandardRs.EMPTY, \"none\").response(\n+            requestLine(\"http://www.w3.org\").toString(),\n+            Collections.emptyList(),\n+            Flowable.empty()\n+        ).send(\n+            (status, headers, body) -> {\n+                MatcherAssert.assertThat(\n+                    \"Not failed\",\n+                    status,\n+                    IsEqual.equalTo(RsStatus.INTERNAL_ERROR)\n+                );\n+                return CompletableFuture.allOf();\n+            }\n+        );\n+    }\n+\n+    @Test\n+    void absoluteLine() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(new RqLineHasUri(new RqLineHasUri.HasPath(\"/three\"))),\n+                \"/one/two/\"\n+            ),\n+            requestLine(\"/one/two/three\")\n+        );\n+    }\n+\n+    @Test\n+    void trimFully() throws Exception {\n+        verify(\n+            new TrimPathSlice(\n+                new AssertSlice(new RqLineHasUri(new RqLineHasUri.HasPath(\"/\"))),\n+                \"/foo/bar\"\n+            ),\n+            requestLine(\"/foo/bar\")\n+        );\n+    }\n+\n+    @Test\n+    void hasFullPathHeader() throws Exception {\n+        new TrimPathSlice(\n+            (line, headers, body) -> {\n+                MatcherAssert.assertThat(\n+                    new RqHeaders.Single(headers, \"x-fullpath\").asString(),\n+                    Matchers.equalTo(\"/foo/bar/baz\")\n+                );\n+                return StandardRs.EMPTY;\n+            },\n+            \"/foo/bar\"\n+        ).response(\n+            requestLine(\"/foo/bar/baz\").toString(),\n+            Collections.emptyList(),\n+            Flowable.empty()\n+        ).send((status, headers, body) -> CompletableFuture.completedFuture(null))\n+            .toCompletableFuture().get();\n+    }\n+\n+    private static RequestLine requestLine(final String path) {", "originalCommit": "a1d610b525826f74fdbfa4451cd78c70d927a348", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MjE5Nw==", "url": "https://github.com/artipie/http/pull/164#discussion_r433242197", "bodyText": "@paulodamaso I've removed duplicate PMD suppression", "author": "g4s8", "createdAt": "2020-06-01T13:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyODU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "0a8d5efe712b4da427928b1d1c891e66dd5b7bfd", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\nindex f25230f..aa9b244 100644\n--- a/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n+++ b/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n\n@@ -25,9 +25,9 @@ package com.artipie.http.slice;\n \n import com.artipie.http.Slice;\n import com.artipie.http.hm.AssertSlice;\n+import com.artipie.http.hm.RqHasHeader;\n import com.artipie.http.hm.RqLineHasUri;\n import com.artipie.http.rq.RequestLine;\n-import com.artipie.http.rq.RqHeaders;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.StandardRs;\n import io.reactivex.Flowable;\n"}}, {"oid": "0a8d5efe712b4da427928b1d1c891e66dd5b7bfd", "url": "https://github.com/artipie/http/commit/0a8d5efe712b4da427928b1d1c891e66dd5b7bfd", "message": "#163 - review fixes", "committedDate": "2020-06-01T09:29:14Z", "type": "commit"}, {"oid": "fe3dc8187fb6878aa75bd39d7c5869d87d1b4681", "url": "https://github.com/artipie/http/commit/fe3dc8187fb6878aa75bd39d7c5869d87d1b4681", "message": "Merge branch 'master' into 163", "committedDate": "2020-06-01T09:29:26Z", "type": "commit"}, {"oid": "41bf76af7543e0fc79c0219b09d8d5957074245f", "url": "https://github.com/artipie/http/commit/41bf76af7543e0fc79c0219b09d8d5957074245f", "message": "#163 - test with regex pattern", "committedDate": "2020-06-01T13:45:30Z", "type": "commit"}]}