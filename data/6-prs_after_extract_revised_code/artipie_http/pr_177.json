{"pr_number": 177, "pr_title": "Response content-length headers", "pr_createdAt": "2020-06-15T12:55:32Z", "pr_url": "https://github.com/artipie/http/pull/177", "timeline": [{"oid": "69db8e576dddff417b8beb38e7bddef37a684d2c", "url": "https://github.com/artipie/http/commit/69db8e576dddff417b8beb38e7bddef37a684d2c", "message": "#176 - response content-size headers", "committedDate": "2020-06-15T12:53:59Z", "type": "commit"}, {"oid": "d3134ea75fcf4ab89114cca952e3c7d3a9edb485", "url": "https://github.com/artipie/http/commit/d3134ea75fcf4ab89114cca952e3c7d3a9edb485", "message": "Merge branch 'master' into 176", "committedDate": "2020-06-23T09:32:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNTAwNg==", "url": "https://github.com/artipie/http/pull/177#discussion_r444115006", "bodyText": "@g4s8 I'd suggest to keep RsWithHeaders.ConWithHeaders private and implement this method by wrapping this.origin into RsWithHeaders", "author": "olegmoz", "createdAt": "2020-06-23T10:12:44Z", "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "diffHunk": "@@ -94,18 +96,47 @@ public RsWithBody(final Publisher<ByteBuffer> body) {\n     }\n \n     /**\n-     * Decorates origin response body with publisher.\n-     * @param origin Response\n+     * Response with body from publisher.\n+     * @param origin Origin response\n      * @param body Publisher\n      */\n     public RsWithBody(final Response origin, final Publisher<ByteBuffer> body) {\n+        this(origin, new Content.From(body));\n+    }\n+\n+    /**\n+     * Decorates origin response body with content.\n+     * @param origin Response\n+     * @param body Content\n+     */\n+    public RsWithBody(final Response origin, final Content body) {\n         this.origin = origin;\n         this.body = body;\n     }\n \n     @Override\n     public CompletionStage<Void> send(final Connection con) {\n-        return this.origin.send(new RsWithBody.ConWithBody(con, this.body));\n+        return this.origin.send(\n+            new RsWithBody.ConWithBody(\n+                this.body.size()\n+                    .map(size -> RsWithBody.withSize(con, size))\n+                    .orElse(con),\n+                this.body\n+            )\n+        );", "originalCommit": "d3134ea75fcf4ab89114cca952e3c7d3a9edb485", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8ec2b784f5881bcd2fed641a62d801ab9c4e6d8", "chunk": "diff --git a/src/main/java/com/artipie/http/rs/RsWithBody.java b/src/main/java/com/artipie/http/rs/RsWithBody.java\nindex 8f7390d..2ca7fd0 100644\n--- a/src/main/java/com/artipie/http/rs/RsWithBody.java\n+++ b/src/main/java/com/artipie/http/rs/RsWithBody.java\n\n@@ -116,27 +116,19 @@ public final class RsWithBody implements Response {\n \n     @Override\n     public CompletionStage<Void> send(final Connection con) {\n-        return this.origin.send(\n-            new RsWithBody.ConWithBody(\n-                this.body.size()\n-                    .map(size -> RsWithBody.withSize(con, size))\n-                    .orElse(con),\n-                this.body\n-            )\n-        );\n+        return withHeaders(this.origin, this.body.size()).send(new ConWithBody(con, this.body));\n     }\n \n     /**\n-     * Connection with {@code Content-Length} size header.\n-     * @param con Origin connection\n-     * @param size Content size\n-     * @return Wrapped connection\n+     * Wrap response with headers if size provided.\n+     * @param origin Origin response\n+     * @param size Maybe size\n+     * @return Wrapped response\n      */\n-    private static Connection withSize(final Connection con, final long size) {\n-        return new RsWithHeaders.ConWithHeaders(\n-            con,\n-            new Headers.From(new ContentLength(String.valueOf(size)))\n-        );\n+    private static Response withHeaders(final Response origin, final Optional<Long> size) {\n+        return size.<Response>map(\n+            val -> new RsWithHeaders(origin, new ContentLength(String.valueOf(val)))\n+        ).orElse(origin);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNjQ2Mg==", "url": "https://github.com/artipie/http/pull/177#discussion_r444116462", "bodyText": "@g4s8 this new feature of is not tested, it would be great to add tests for RsWithBody class to check that header is sent to connection if Content has size specified", "author": "olegmoz", "createdAt": "2020-06-23T10:15:25Z", "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "diffHunk": "@@ -94,18 +96,47 @@ public RsWithBody(final Publisher<ByteBuffer> body) {\n     }\n \n     /**\n-     * Decorates origin response body with publisher.\n-     * @param origin Response\n+     * Response with body from publisher.\n+     * @param origin Origin response\n      * @param body Publisher\n      */\n     public RsWithBody(final Response origin, final Publisher<ByteBuffer> body) {\n+        this(origin, new Content.From(body));\n+    }\n+\n+    /**\n+     * Decorates origin response body with content.\n+     * @param origin Response\n+     * @param body Content\n+     */\n+    public RsWithBody(final Response origin, final Content body) {\n         this.origin = origin;\n         this.body = body;\n     }\n \n     @Override\n     public CompletionStage<Void> send(final Connection con) {\n-        return this.origin.send(new RsWithBody.ConWithBody(con, this.body));\n+        return this.origin.send(\n+            new RsWithBody.ConWithBody(\n+                this.body.size()\n+                    .map(size -> RsWithBody.withSize(con, size))", "originalCommit": "d3134ea75fcf4ab89114cca952e3c7d3a9edb485", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8ec2b784f5881bcd2fed641a62d801ab9c4e6d8", "chunk": "diff --git a/src/main/java/com/artipie/http/rs/RsWithBody.java b/src/main/java/com/artipie/http/rs/RsWithBody.java\nindex 8f7390d..2ca7fd0 100644\n--- a/src/main/java/com/artipie/http/rs/RsWithBody.java\n+++ b/src/main/java/com/artipie/http/rs/RsWithBody.java\n\n@@ -116,27 +116,19 @@ public final class RsWithBody implements Response {\n \n     @Override\n     public CompletionStage<Void> send(final Connection con) {\n-        return this.origin.send(\n-            new RsWithBody.ConWithBody(\n-                this.body.size()\n-                    .map(size -> RsWithBody.withSize(con, size))\n-                    .orElse(con),\n-                this.body\n-            )\n-        );\n+        return withHeaders(this.origin, this.body.size()).send(new ConWithBody(con, this.body));\n     }\n \n     /**\n-     * Connection with {@code Content-Length} size header.\n-     * @param con Origin connection\n-     * @param size Content size\n-     * @return Wrapped connection\n+     * Wrap response with headers if size provided.\n+     * @param origin Origin response\n+     * @param size Maybe size\n+     * @return Wrapped response\n      */\n-    private static Connection withSize(final Connection con, final long size) {\n-        return new RsWithHeaders.ConWithHeaders(\n-            con,\n-            new Headers.From(new ContentLength(String.valueOf(size)))\n-        );\n+    private static Response withHeaders(final Response origin, final Optional<Long> size) {\n+        return size.<Response>map(\n+            val -> new RsWithHeaders(origin, new ContentLength(String.valueOf(val)))\n+        ).orElse(origin);\n     }\n \n     /**\n"}}, {"oid": "d8ec2b784f5881bcd2fed641a62d801ab9c4e6d8", "url": "https://github.com/artipie/http/commit/d8ec2b784f5881bcd2fed641a62d801ab9c4e6d8", "message": "#176 - review fixes", "committedDate": "2020-06-23T13:43:41Z", "type": "commit"}, {"oid": "6689835737e8cd18aa516b9e3af4876067d3d42d", "url": "https://github.com/artipie/http/commit/6689835737e8cd18aa516b9e3af4876067d3d42d", "message": "#176 - coverage ratios", "committedDate": "2020-06-25T07:50:06Z", "type": "commit"}]}