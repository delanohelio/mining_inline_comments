{"pr_number": 119, "pr_title": "#24: idx check", "pr_createdAt": "2020-04-16T07:14:50Z", "pr_url": "https://github.com/artipie/http/pull/119", "timeline": [{"oid": "6ceb748f9bc0e9a7d82d07277f9123189c73762b", "url": "https://github.com/artipie/http/commit/6ceb748f9bc0e9a7d82d07277f9123189c73762b", "message": "#24: idx check", "committedDate": "2020-04-16T07:12:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjQxMw==", "url": "https://github.com/artipie/http/pull/119#discussion_r410026413", "bodyText": "@olenagerasimova this doesn't have to be a static variable, we can hardcode 3 in the part method", "author": "Vatavuk", "createdAt": "2020-04-17T06:55:01Z", "path": "src/main/java/com/artipie/http/rq/RequestLineFrom.java", "diffHunk": "@@ -43,6 +43,12 @@\n  */\n public final class RequestLineFrom {\n \n+    /**\n+     * Valid HTTP request line must contains 3 parts which can be splitted by\n+     * whitespace char.\n+     */\n+    private static final int PARTS_AMOUNT = 3;", "originalCommit": "6ceb748f9bc0e9a7d82d07277f9123189c73762b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f524c06c7523f2ba9f9284b1535493db52217903", "chunk": "diff --git a/src/main/java/com/artipie/http/rq/RequestLineFrom.java b/src/main/java/com/artipie/http/rq/RequestLineFrom.java\nindex 0f6c485..3fa40b8 100644\n--- a/src/main/java/com/artipie/http/rq/RequestLineFrom.java\n+++ b/src/main/java/com/artipie/http/rq/RequestLineFrom.java\n\n@@ -43,12 +43,6 @@ import java.net.URI;\n  */\n public final class RequestLineFrom {\n \n-    /**\n-     * Valid HTTP request line must contains 3 parts which can be splitted by\n-     * whitespace char.\n-     */\n-    private static final int PARTS_AMOUNT = 3;\n-\n     /**\n      * HTTP request line.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjg1Mw==", "url": "https://github.com/artipie/http/pull/119#discussion_r410026853", "bodyText": "@olenagerasimova let's create one test with 4 parts in http line", "author": "Vatavuk", "createdAt": "2020-04-17T06:56:04Z", "path": "src/test/java/com/artipie/http/rq/RequestLineFromTest.java", "diffHunk": "@@ -39,42 +41,68 @@\n  */\n public final class RequestLineFromTest {\n     @Test\n-    void parsesMethodName() throws Exception {\n+    void parsesMethodName() {\n         MatcherAssert.assertThat(\n             new RequestLineFrom(\"TRACE /foo HTTP/1.1\\r\\n\").method(),\n             Matchers.equalTo(RqMethod.TRACE)\n         );\n     }\n \n     @Test\n-    void parsesAsteriskUri() throws Exception {\n+    void parsesAsteriskUri() {\n         MatcherAssert.assertThat(\n             new RequestLineFrom(\"GET * HTTP/1.1\\r\\n\").uri(),\n             Matchers.equalTo(URI.create(\"*\"))\n         );\n     }\n \n     @Test\n-    void parsesAbsoluteUri() throws Exception {\n+    void parsesAbsoluteUri() {\n         MatcherAssert.assertThat(\n             new RequestLineFrom(\"GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1\\r\\n\").uri(),\n             Matchers.equalTo(URI.create(\"http://www.w3.org/pub/WWW/TheProject.html\"))\n         );\n     }\n \n     @Test\n-    void parsesAbsolutePath() throws Exception {\n+    void parsesAbsolutePath() {\n         MatcherAssert.assertThat(\n             new RequestLineFrom(\"GET /pub/WWW/TheProject.html HTTP/1.1\\r\\n\").uri(),\n             Matchers.equalTo(URI.create(\"/pub/WWW/TheProject.html\"))\n         );\n     }\n \n     @Test\n-    void parsesHttpVersion() throws Exception {\n+    void parsesHttpVersion() {\n         MatcherAssert.assertThat(\n             new RequestLineFrom(\"PUT * HTTP/1.1\\r\\n\").version(),\n             Matchers.equalTo(\"HTTP/1.1\")\n         );\n     }\n+\n+    @Test\n+    void throwsExceptionIfMethodIsUnknown() {\n+        final String method = \"SURRENDER\";\n+        MatcherAssert.assertThat(\n+            Assertions.assertThrows(\n+                IllegalStateException.class,\n+                () -> new RequestLineFrom(\n+                    String.format(\"%s /wallet/or/life HTTP/1.1\\n\", method)\n+                ).method()\n+            ).getMessage(),\n+            new IsEqual<>(String.format(\"Unknown method: '%s'\", method))\n+        );\n+    }\n+\n+    @Test\n+    void throwsExceptionIfLineIsInvalid() {", "originalCommit": "6ceb748f9bc0e9a7d82d07277f9123189c73762b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f524c06c7523f2ba9f9284b1535493db52217903", "chunk": "diff --git a/src/test/java/com/artipie/http/rq/RequestLineFromTest.java b/src/test/java/com/artipie/http/rq/RequestLineFromTest.java\nindex b46dcd6..f7a8b35 100644\n--- a/src/test/java/com/artipie/http/rq/RequestLineFromTest.java\n+++ b/src/test/java/com/artipie/http/rq/RequestLineFromTest.java\n\n@@ -40,6 +40,12 @@ import org.junit.jupiter.api.Test;\n  * @since 0.1\n  */\n public final class RequestLineFromTest {\n+\n+    /**\n+     * Exception message.\n+     */\n+    private static final String EX_MSG = \"Invalid HTTP request line \\n%s\";\n+\n     @Test\n     void parsesMethodName() {\n         MatcherAssert.assertThat(\n"}}, {"oid": "f524c06c7523f2ba9f9284b1535493db52217903", "url": "https://github.com/artipie/http/commit/f524c06c7523f2ba9f9284b1535493db52217903", "message": "#24: CR", "committedDate": "2020-04-17T07:27:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0NDY3Nw==", "url": "https://github.com/artipie/http/pull/119#discussion_r410044677", "bodyText": "@olenagerasimova I believe its a bit more easier to digest parts.length == 3 than having a separate variable.", "author": "Vatavuk", "createdAt": "2020-04-17T07:35:33Z", "path": "src/main/java/com/artipie/http/rq/RequestLineFrom.java", "diffHunk": "@@ -99,8 +93,9 @@ public String version() {\n      * @return Part string\n      */\n     private String part(final int idx) {\n+        final int pcount = 3;\n         final String[] parts = this.line.trim().split(\"\\\\s\");\n-        if (parts.length == RequestLineFrom.PARTS_AMOUNT) {\n+        if (parts.length == pcount) {", "originalCommit": "f524c06c7523f2ba9f9284b1535493db52217903", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MjgxNA==", "url": "https://github.com/artipie/http/pull/119#discussion_r410052814", "bodyText": "@Vatavuk it's a magic number, that's why I initially extracted in into constant: unlike variables constants are properly documented with the answer to the questions \"where the hell did this number come from\"...", "author": "olenagerasimova", "createdAt": "2020-04-17T07:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0NDY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA2OTU4NA==", "url": "https://github.com/artipie/http/pull/119#discussion_r410069584", "bodyText": "@olenagerasimova ok let's then expand the description for part method explaining that http line must contain 3 parts.", "author": "Vatavuk", "createdAt": "2020-04-17T08:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0NDY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fda0453c730b8aba945ca68b3ee46d7825aee8bd", "chunk": "diff --git a/src/main/java/com/artipie/http/rq/RequestLineFrom.java b/src/main/java/com/artipie/http/rq/RequestLineFrom.java\nindex 3fa40b8..c53dbd9 100644\n--- a/src/main/java/com/artipie/http/rq/RequestLineFrom.java\n+++ b/src/main/java/com/artipie/http/rq/RequestLineFrom.java\n\n@@ -88,14 +88,15 @@ public final class RequestLineFrom {\n     }\n \n     /**\n-     * Part of request line.\n+     * Part of request line. Valid HTTP request line must contains 3 parts which can be\n+     * splitted by whitespace char.\n      * @param idx Part index\n      * @return Part string\n      */\n     private String part(final int idx) {\n-        final int pcount = 3;\n         final String[] parts = this.line.trim().split(\"\\\\s\");\n-        if (parts.length == pcount) {\n+        // @checkstyle MagicNumberCheck (1 line)\n+        if (parts.length == 3) {\n             return parts[idx];\n         } else {\n             throw new IllegalArgumentException(\n"}}, {"oid": "fda0453c730b8aba945ca68b3ee46d7825aee8bd", "url": "https://github.com/artipie/http/commit/fda0453c730b8aba945ca68b3ee46d7825aee8bd", "message": "#24: CR", "committedDate": "2020-04-17T08:33:50Z", "type": "commit"}]}