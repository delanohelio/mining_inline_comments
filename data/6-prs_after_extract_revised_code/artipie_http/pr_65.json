{"pr_number": 65, "pr_title": "Upload and download slices", "pr_createdAt": "2020-03-10T18:31:12Z", "pr_url": "https://github.com/artipie/http/pull/65", "timeline": [{"oid": "b30512672856715501abc3d2268772173c83c68f", "url": "https://github.com/artipie/http/commit/b30512672856715501abc3d2268772173c83c68f", "message": "#64 - upload and download slices", "committedDate": "2020-03-10T18:26:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNDE2OA==", "url": "https://github.com/artipie/http/pull/65#discussion_r391024168", "bodyText": "@g4s8 I think that you need to test if SliceDownload is creating the response with the correct status and size too", "author": "paulodamaso", "createdAt": "2020-03-11T14:45:47Z", "path": "src/test/java/com/artipie/http/slice/SliceDownloadTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.rq.RequestLine;\n+import io.reactivex.Flowable;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link SliceDownload}.\n+ * @since 1.0\n+ */\n+public final class SliceDownloadTest {\n+\n+    @Test\n+    void downloadsByKeyFromPath() throws Exception {\n+        final Storage storage = new InMemoryStorage();\n+        final String path = \"one/two/target.txt\";\n+        final byte[] data = \"hello\".getBytes(StandardCharsets.UTF_8);\n+        storage.save(new Key.From(path), new Content.From(data)).get();\n+        MatcherAssert.assertThat(\n+            new SliceDownload(storage).response(", "originalCommit": "b30512672856715501abc3d2268772173c83c68f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2853770116da34b6cf5b938ddcb6fe35f915bb51", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/SliceDownloadTest.java b/src/test/java/com/artipie/http/slice/SliceDownloadTest.java\nindex 25bcabc..6bde163 100644\n--- a/src/test/java/com/artipie/http/slice/SliceDownloadTest.java\n+++ b/src/test/java/com/artipie/http/slice/SliceDownloadTest.java\n\n@@ -28,11 +28,14 @@ import com.artipie.asto.Key;\n import com.artipie.asto.Storage;\n import com.artipie.asto.memory.InMemoryStorage;\n import com.artipie.http.hm.RsHasBody;\n+import com.artipie.http.hm.RsHasStatus;\n import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n import io.reactivex.Flowable;\n import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n import org.junit.jupiter.api.Test;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNTM5Nw==", "url": "https://github.com/artipie/http/pull/65#discussion_r391025397", "bodyText": "@g4s8 Please put each assertion in a different test method.", "author": "paulodamaso", "createdAt": "2020-03-11T14:47:26Z", "path": "src/test/java/com/artipie/http/slice/SliceUploadTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Remaining;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link SliceUpload}.\n+ * @since 0.6\n+ */\n+public final class SliceUploadTest {\n+\n+    @Test\n+    void uploadsKeyByPath() throws Exception {\n+        final Storage storage = new InMemoryStorage();\n+        final String hello = \"Hello\";\n+        final byte[] data = hello.getBytes(StandardCharsets.UTF_8);\n+        final String path = \"uploads/file.txt\";\n+        MatcherAssert.assertThat(", "originalCommit": "b30512672856715501abc3d2268772173c83c68f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2853770116da34b6cf5b938ddcb6fe35f915bb51", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/SliceUploadTest.java b/src/test/java/com/artipie/http/slice/SliceUploadTest.java\nindex eca26c8..9891dd8 100644\n--- a/src/test/java/com/artipie/http/slice/SliceUploadTest.java\n+++ b/src/test/java/com/artipie/http/slice/SliceUploadTest.java\n\n@@ -36,12 +36,13 @@ import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import org.cactoos.map.MapEntry;\n import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n import org.junit.jupiter.api.Test;\n \n /**\n  * Test case for {@link SliceUpload}.\n  * @since 0.6\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n public final class SliceUploadTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNjkwNg==", "url": "https://github.com/artipie/http/pull/65#discussion_r391026906", "bodyText": "@g4s8 Use new IsEqual here, please. Also, you can add a message to this assertion failure, even if it's the only assertion of the method: most of times is easier and clearer to read the assertion message failure than to decipher what went wrong based on test method name", "author": "paulodamaso", "createdAt": "2020-03-11T14:49:30Z", "path": "src/test/java/com/artipie/http/slice/SliceUploadTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Remaining;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link SliceUpload}.\n+ * @since 0.6\n+ */\n+public final class SliceUploadTest {\n+\n+    @Test\n+    void uploadsKeyByPath() throws Exception {\n+        final Storage storage = new InMemoryStorage();\n+        final String hello = \"Hello\";\n+        final byte[] data = hello.getBytes(StandardCharsets.UTF_8);\n+        final String path = \"uploads/file.txt\";\n+        MatcherAssert.assertThat(\n+            \"Wrong HTTP status returned\",\n+            new SliceUpload(storage).response(\n+                new RequestLine(\"PUT\", path, \"HTTP/1.1\").toString(),\n+                Collections.singleton(\n+                    new MapEntry<>(\"Content-Size\", Long.toString(data.length))\n+                ),\n+                Flowable.just(ByteBuffer.wrap(data))\n+            ),\n+            new RsHasStatus(RsStatus.CREATED)\n+        );\n+        MatcherAssert.assertThat(\n+            new String(\n+                new Remaining(\n+                    Flowable.fromPublisher(storage.value(new Key.From(path)).get()).toList()\n+                        .blockingGet().get(0)\n+                ).bytes(),\n+                StandardCharsets.UTF_8\n+            ),\n+            Matchers.equalTo(hello)", "originalCommit": "b30512672856715501abc3d2268772173c83c68f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2853770116da34b6cf5b938ddcb6fe35f915bb51", "chunk": "diff --git a/src/test/java/com/artipie/http/slice/SliceUploadTest.java b/src/test/java/com/artipie/http/slice/SliceUploadTest.java\nindex eca26c8..9891dd8 100644\n--- a/src/test/java/com/artipie/http/slice/SliceUploadTest.java\n+++ b/src/test/java/com/artipie/http/slice/SliceUploadTest.java\n\n@@ -36,12 +36,13 @@ import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n import org.cactoos.map.MapEntry;\n import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsEqual;\n import org.junit.jupiter.api.Test;\n \n /**\n  * Test case for {@link SliceUpload}.\n  * @since 0.6\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n public final class SliceUploadTest {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyODY4Mg==", "url": "https://github.com/artipie/http/pull/65#discussion_r391028682", "bodyText": "@g4s8 We don't need this class as static; also we could move it into its own file and detach it from SliceUpload so we can use it wherever we need to measure content size", "author": "paulodamaso", "createdAt": "2020-03-11T14:51:53Z", "path": "src/main/java/com/artipie/http/slice/SliceUpload.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncResponse;\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * Slice to upload the resource to storage by key from path.\n+ * @see SliceDownload\n+ * @since 0.6\n+ */\n+public final class SliceUpload implements Slice {\n+\n+    /**\n+     * Storage.\n+     */\n+    private final Storage storage;\n+\n+    /**\n+     * Path to key transformation.\n+     */\n+    private final Function<String, Key> transform;\n+\n+    /**\n+     * Slice by key from storage.\n+     * @param storage Storage\n+     */\n+    public SliceUpload(final Storage storage) {\n+        this(storage, Key.From::new);\n+    }\n+\n+    /**\n+     * Slice by key from storage using custom URI path transformation.\n+     * @param storage Storage\n+     * @param transform Transformation\n+     */\n+    public SliceUpload(final Storage storage,\n+        final Function<String, Key> transform) {\n+        this.storage = storage;\n+        this.transform = transform;\n+    }\n+\n+    @Override\n+    public Response response(final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return new AsyncResponse(\n+            CompletableFuture.supplyAsync(() -> new RequestLineFrom(line).uri().getPath())\n+                .thenApply(this.transform)\n+                .thenCompose(key -> this.storage.save(key, new ContentWithSize(body, headers)))\n+                .thenApply(rsp -> new RsWithStatus(RsStatus.CREATED))\n+        );\n+    }\n+\n+    /**\n+     * Content with size from headers.\n+     * @since 0.6\n+     */\n+    private static final class ContentWithSize implements Content {", "originalCommit": "b30512672856715501abc3d2268772173c83c68f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2853770116da34b6cf5b938ddcb6fe35f915bb51", "chunk": "diff --git a/src/main/java/com/artipie/http/slice/SliceUpload.java b/src/main/java/com/artipie/http/slice/SliceUpload.java\nindex ff3f21e..a8ad724 100644\n--- a/src/main/java/com/artipie/http/slice/SliceUpload.java\n+++ b/src/main/java/com/artipie/http/slice/SliceUpload.java\n\n@@ -23,23 +23,19 @@\n  */\n package com.artipie.http.slice;\n \n-import com.artipie.asto.Content;\n import com.artipie.asto.Key;\n import com.artipie.asto.Storage;\n import com.artipie.http.Response;\n import com.artipie.http.Slice;\n import com.artipie.http.async.AsyncResponse;\n import com.artipie.http.rq.RequestLineFrom;\n-import com.artipie.http.rq.RqHeaders;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.RsWithStatus;\n import java.nio.ByteBuffer;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.function.Function;\n import org.reactivestreams.Publisher;\n-import org.reactivestreams.Subscriber;\n \n /**\n  * Slice to upload the resource to storage by key from path.\n"}}, {"oid": "2853770116da34b6cf5b938ddcb6fe35f915bb51", "url": "https://github.com/artipie/http/commit/2853770116da34b6cf5b938ddcb6fe35f915bb51", "message": "#64 - review fixes", "committedDate": "2020-03-12T07:46:01Z", "type": "commit"}]}