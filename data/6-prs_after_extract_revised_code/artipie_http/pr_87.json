{"pr_number": 87, "pr_title": "#86 - Mark & reset buffers in RsHasBody", "pr_createdAt": "2020-03-18T13:16:07Z", "pr_url": "https://github.com/artipie/http/pull/87", "timeline": [{"oid": "f6ca013f6da25bc6c58228e118063180633e5f94", "url": "https://github.com/artipie/http/commit/f6ca013f6da25bc6c58228e118063180633e5f94", "message": "#86 - Mark & reset buffers in RsHasBody", "committedDate": "2020-03-18T13:20:26Z", "type": "commit"}, {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94", "url": "https://github.com/artipie/http/commit/f6ca013f6da25bc6c58228e118063180633e5f94", "message": "#86 - Mark & reset buffers in RsHasBody", "committedDate": "2020-03-18T13:20:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDgyNg==", "url": "https://github.com/artipie/http/pull/87#discussion_r394610826", "bodyText": "@olegmoz we can instantiate RsHasBody only once", "author": "Vatavuk", "createdAt": "2020-03-18T20:10:54Z", "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})\n+    void shouldMatchResponseTwice(final String chunks) {\n+        final String[] elements = chunks.split(\",\");\n+        final byte[] data = String.join(\"\", elements).getBytes();\n+        final Response response = new RsWithBody(\n+            Flowable.fromIterable(\n+                Stream.of(elements)\n+                    .map(String::getBytes)\n+                    .map(ByteBuffer::wrap)\n+                    .collect(Collectors.toList())\n+            )\n+        );\n+        new RsHasBody(data).matches(response);\n+        MatcherAssert.assertThat(\n+            new RsHasBody(data).matches(response),", "originalCommit": "f6ca013f6da25bc6c58228e118063180633e5f94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NzgyOA==", "url": "https://github.com/artipie/http/pull/87#discussion_r394847828", "bodyText": "@Vatavuk did this on purpose, to not allow just caching body or match result in matcher instance to be a solution", "author": "olegmoz", "createdAt": "2020-03-19T08:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MjAxNg==", "url": "https://github.com/artipie/http/pull/87#discussion_r394952016", "bodyText": "@olegmoz ok", "author": "Vatavuk", "createdAt": "2020-03-19T11:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDgyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTg4Ng==", "url": "https://github.com/artipie/http/pull/87#discussion_r394611886", "bodyText": "@olegmoz why do we need this magic? Can we instantiate elements variable in the test method without annotations?", "author": "Vatavuk", "createdAt": "2020-03-18T20:12:56Z", "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})", "originalCommit": "f6ca013f6da25bc6c58228e118063180633e5f94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NzM5Ng==", "url": "https://github.com/artipie/http/pull/87#discussion_r394847396", "bodyText": "@Vatavuk we need to test same think with 2 inputs: single buffer in stream, multiple buffers in stream. I think that parameterized test is good solution for that. I'm not fan of annotations at all, but this the way JUnit framework works.", "author": "olegmoz", "createdAt": "2020-03-19T08:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MjE1Mw==", "url": "https://github.com/artipie/http/pull/87#discussion_r394952153", "bodyText": "@olegmoz ok", "author": "Vatavuk", "createdAt": "2020-03-19T11:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTg4Ng=="}], "type": "inlineReview", "revised_code": null}]}