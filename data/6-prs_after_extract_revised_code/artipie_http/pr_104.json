{"pr_number": 104, "pr_title": "#59 - Improved types in AsyncResponse & AsyncSlice. Added tests", "pr_createdAt": "2020-04-01T11:34:03Z", "pr_url": "https://github.com/artipie/http/pull/104", "timeline": [{"oid": "8a2d37aec2fe2ca29f145869d3e347765ec6186d", "url": "https://github.com/artipie/http/commit/8a2d37aec2fe2ca29f145869d3e347765ec6186d", "message": "#59 - Improved types in AsyncResponse & AsyncSlice. Added tests", "committedDate": "2020-04-01T11:33:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0OTM4MA==", "url": "https://github.com/artipie/http/pull/104#discussion_r402949380", "bodyText": "@olegmoz You could inline future declaration into the assertion", "author": "paulodamaso", "createdAt": "2020-04-03T11:49:00Z", "path": "src/test/java/com/artipie/http/async/AsyncResponseTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.async;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link AsyncResponse}.\n+ *\n+ * @since 0.8\n+ */\n+class AsyncResponseTest {\n+\n+    @Test\n+    void shouldSend() {\n+        final CompletableFuture<RsWithStatus> future = CompletableFuture.completedFuture(", "originalCommit": "8a2d37aec2fe2ca29f145869d3e347765ec6186d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "144b2b4a0adf2b6306f3a09b7a1ee68c3dedc47c", "chunk": "diff --git a/src/test/java/com/artipie/http/async/AsyncResponseTest.java b/src/test/java/com/artipie/http/async/AsyncResponseTest.java\nindex 7ab9a23..0af81a0 100644\n--- a/src/test/java/com/artipie/http/async/AsyncResponseTest.java\n+++ b/src/test/java/com/artipie/http/async/AsyncResponseTest.java\n\n@@ -28,7 +28,6 @@ import com.artipie.http.hm.RsHasStatus;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.RsWithStatus;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0OTU5OA==", "url": "https://github.com/artipie/http/pull/104#discussion_r402949598", "bodyText": "@olegmoz Here also, please inline all inside the assertion", "author": "paulodamaso", "createdAt": "2020-04-03T11:49:29Z", "path": "src/test/java/com/artipie/http/async/AsyncResponseTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.async;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link AsyncResponse}.\n+ *\n+ * @since 0.8\n+ */\n+class AsyncResponseTest {\n+\n+    @Test\n+    void shouldSend() {\n+        final CompletableFuture<RsWithStatus> future = CompletableFuture.completedFuture(\n+            new RsWithStatus(RsStatus.OK)\n+        );\n+        MatcherAssert.assertThat(\n+            new AsyncResponse(future),\n+            new RsHasStatus(RsStatus.OK)\n+        );\n+    }\n+\n+    @Test\n+    void shouldPropagateFailure() {\n+        final CompletableFuture<Response> future = new CompletableFuture<>();\n+        future.completeExceptionally(new IllegalStateException());\n+        final CompletionStage<Void> result = new AsyncResponse(future)\n+            .send((status, headers, body) -> CompletableFuture.allOf());\n+        MatcherAssert.assertThat(\n+            result.toCompletableFuture().isCompletedExceptionally(),", "originalCommit": "8a2d37aec2fe2ca29f145869d3e347765ec6186d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "144b2b4a0adf2b6306f3a09b7a1ee68c3dedc47c", "chunk": "diff --git a/src/test/java/com/artipie/http/async/AsyncResponseTest.java b/src/test/java/com/artipie/http/async/AsyncResponseTest.java\nindex 7ab9a23..0af81a0 100644\n--- a/src/test/java/com/artipie/http/async/AsyncResponseTest.java\n+++ b/src/test/java/com/artipie/http/async/AsyncResponseTest.java\n\n@@ -28,7 +28,6 @@ import com.artipie.http.hm.RsHasStatus;\n import com.artipie.http.rs.RsStatus;\n import com.artipie.http.rs.RsWithStatus;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0OTcwNQ==", "url": "https://github.com/artipie/http/pull/104#discussion_r402949705", "bodyText": "@olegmoz Ditto", "author": "paulodamaso", "createdAt": "2020-04-03T11:49:45Z", "path": "src/test/java/com/artipie/http/async/AsyncSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.async;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.slice.SliceSimple;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link AsyncSlice}.\n+ *\n+ * @since 0.8\n+ */\n+class AsyncSliceTest {\n+\n+    @Test\n+    void shouldRespond() {\n+        final CompletableFuture<SliceSimple> future = CompletableFuture.completedFuture(\n+            new SliceSimple(new RsWithStatus(RsStatus.OK))\n+        );\n+        MatcherAssert.assertThat(", "originalCommit": "8a2d37aec2fe2ca29f145869d3e347765ec6186d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "144b2b4a0adf2b6306f3a09b7a1ee68c3dedc47c", "chunk": "diff --git a/src/test/java/com/artipie/http/async/AsyncSliceTest.java b/src/test/java/com/artipie/http/async/AsyncSliceTest.java\nindex f6a9acb..96636e9 100644\n--- a/src/test/java/com/artipie/http/async/AsyncSliceTest.java\n+++ b/src/test/java/com/artipie/http/async/AsyncSliceTest.java\n\n@@ -31,7 +31,6 @@ import com.artipie.http.slice.SliceSimple;\n import io.reactivex.Flowable;\n import java.util.Collections;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n import org.junit.jupiter.api.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk0OTg1Mw==", "url": "https://github.com/artipie/http/pull/104#discussion_r402949853", "bodyText": "@olegmoz here too", "author": "paulodamaso", "createdAt": "2020-04-03T11:50:05Z", "path": "src/test/java/com/artipie/http/async/AsyncSliceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.async;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.slice.SliceSimple;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link AsyncSlice}.\n+ *\n+ * @since 0.8\n+ */\n+class AsyncSliceTest {\n+\n+    @Test\n+    void shouldRespond() {\n+        final CompletableFuture<SliceSimple> future = CompletableFuture.completedFuture(\n+            new SliceSimple(new RsWithStatus(RsStatus.OK))\n+        );\n+        MatcherAssert.assertThat(\n+            new AsyncSlice(future).response(\"\", Collections.emptySet(), Flowable.empty()),\n+            new RsHasStatus(RsStatus.OK)\n+        );\n+    }\n+\n+    @Test\n+    void shouldPropagateFailure() {\n+        final CompletableFuture<Slice> future = new CompletableFuture<>();\n+        future.completeExceptionally(new IllegalStateException());\n+        final CompletionStage<Void> result = new AsyncSlice(future)\n+            .response(\"GET /index.html HTTP_1_1\", Collections.emptySet(), Flowable.empty())", "originalCommit": "8a2d37aec2fe2ca29f145869d3e347765ec6186d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "144b2b4a0adf2b6306f3a09b7a1ee68c3dedc47c", "chunk": "diff --git a/src/test/java/com/artipie/http/async/AsyncSliceTest.java b/src/test/java/com/artipie/http/async/AsyncSliceTest.java\nindex f6a9acb..96636e9 100644\n--- a/src/test/java/com/artipie/http/async/AsyncSliceTest.java\n+++ b/src/test/java/com/artipie/http/async/AsyncSliceTest.java\n\n@@ -31,7 +31,6 @@ import com.artipie.http.slice.SliceSimple;\n import io.reactivex.Flowable;\n import java.util.Collections;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n import org.junit.jupiter.api.Test;\n"}}, {"oid": "144b2b4a0adf2b6306f3a09b7a1ee68c3dedc47c", "url": "https://github.com/artipie/http/commit/144b2b4a0adf2b6306f3a09b7a1ee68c3dedc47c", "message": "#59 - Changes by review", "committedDate": "2020-04-03T14:27:03Z", "type": "commit"}]}