{"pr_number": 204, "pr_title": "Unit test for group slice", "pr_createdAt": "2020-07-21T09:12:39Z", "pr_url": "https://github.com/artipie/http/pull/204", "timeline": [{"oid": "e949bf28bd9404fe1e06bf3d30eee8163896783c", "url": "https://github.com/artipie/http/commit/e949bf28bd9404fe1e06bf3d30eee8163896783c", "message": "#203 - unit test for group slice", "committedDate": "2020-07-21T09:11:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMzI5Mw==", "url": "https://github.com/artipie/http/pull/204#discussion_r458023293", "bodyText": "@g4s8 do not really understand why you want to use OneTimePublisher outside of tests", "author": "olegmoz", "createdAt": "2020-07-21T11:22:35Z", "path": "src/main/java/com/artipie/http/group/GroupConnection.java", "diffHunk": "@@ -70,7 +71,7 @@\n         synchronized (this.results) {\n             return this.results.complete(\n                 this.pos,\n-                new GroupResult(status, headers, body),\n+                new GroupResult(status, headers, new OneTimePublisher<>(body)),", "originalCommit": "e949bf28bd9404fe1e06bf3d30eee8163896783c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98a0f90bfb566c679642568384dcb0c60fc1708d", "chunk": "diff --git a/src/main/java/com/artipie/http/group/GroupConnection.java b/src/main/java/com/artipie/http/group/GroupConnection.java\nindex 026868b..1d785d3 100644\n--- a/src/main/java/com/artipie/http/group/GroupConnection.java\n+++ b/src/main/java/com/artipie/http/group/GroupConnection.java\n\n@@ -70,9 +69,7 @@ final class GroupConnection implements Connection {\n         final Publisher<ByteBuffer> body) {\n         synchronized (this.results) {\n             return this.results.complete(\n-                this.pos,\n-                new GroupResult(status, headers, new OneTimePublisher<>(body)),\n-                this.origin\n+                this.pos, new GroupResult(status, headers, body), this.origin\n             );\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyNDExNQ==", "url": "https://github.com/artipie/http/pull/204#discussion_r458024115", "bodyText": "@g4s8 I'd suggest to add failing slice and slice that never responds to the mix, to see if GroupSlice replies as soon as there is an OK response", "author": "olegmoz", "createdAt": "2020-07-21T11:24:22Z", "path": "src/test/java/com/artipie/http/group/GroupSliceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.async.AsyncSlice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rq.RqMethod;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.slice.SliceSimple;\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link GroupSlice}.\n+ *\n+ * @since 1.0\n+ */\n+final class GroupSliceTest {\n+\n+    @Test\n+    void groupFromMultipleSources() {\n+        // @checkstyle MagicNumberCheck (10 lines)\n+        MatcherAssert.assertThat(\n+            new GroupSlice(\n+                new SliceWithDelay(new SliceSimple(StandardRs.NOT_FOUND), Duration.ofMillis(250)),\n+                new SliceWithDelay(new SliceSimple(StandardRs.NOT_FOUND), Duration.ofMillis(50)),\n+                new SliceWithDelay(new SliceSimple(StandardRs.OK), Duration.ofMillis(150)),\n+                new SliceWithDelay(new SliceSimple(StandardRs.NOT_FOUND), Duration.ofMillis(200))\n+            ),", "originalCommit": "e949bf28bd9404fe1e06bf3d30eee8163896783c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98a0f90bfb566c679642568384dcb0c60fc1708d", "chunk": "diff --git a/src/test/java/com/artipie/http/group/GroupSliceTest.java b/src/test/java/com/artipie/http/group/GroupSliceTest.java\nindex 42fab14..8925cea 100644\n--- a/src/test/java/com/artipie/http/group/GroupSliceTest.java\n+++ b/src/test/java/com/artipie/http/group/GroupSliceTest.java\n\n@@ -23,47 +23,95 @@\n  */\n package com.artipie.http.group;\n \n+import com.artipie.asto.OneTimePublisher;\n import com.artipie.http.Slice;\n import com.artipie.http.async.AsyncSlice;\n+import com.artipie.http.hm.RsHasBody;\n import com.artipie.http.hm.RsHasStatus;\n import com.artipie.http.hm.SliceHasResponse;\n import com.artipie.http.rq.RequestLine;\n import com.artipie.http.rq.RqMethod;\n import com.artipie.http.rs.RsStatus;\n-import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n import com.artipie.http.slice.SliceSimple;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n import java.time.Duration;\n import java.util.concurrent.CompletableFuture;\n import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n \n /**\n  * Test case for {@link GroupSlice}.\n  *\n- * @since 1.0\n+ * @since 0.16\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n  */\n final class GroupSliceTest {\n \n     @Test\n-    void groupFromMultipleSources() {\n+    @Timeout(1)\n+    void returnsFirstOrderedSuccessResponse() {\n         // @checkstyle MagicNumberCheck (10 lines)\n+        final String expects = \"ok-150\";\n         MatcherAssert.assertThat(\n             new GroupSlice(\n-                new SliceWithDelay(new SliceSimple(StandardRs.NOT_FOUND), Duration.ofMillis(250)),\n-                new SliceWithDelay(new SliceSimple(StandardRs.NOT_FOUND), Duration.ofMillis(50)),\n-                new SliceWithDelay(new SliceSimple(StandardRs.OK), Duration.ofMillis(150)),\n-                new SliceWithDelay(new SliceSimple(StandardRs.NOT_FOUND), Duration.ofMillis(200))\n+                slice(RsStatus.NOT_FOUND, \"not-found-250\", Duration.ofMillis(250)),\n+                slice(RsStatus.NOT_FOUND, \"not-found-50\", Duration.ofMillis(50)),\n+                slice(RsStatus.OK, expects, Duration.ofMillis(150)),\n+                slice(RsStatus.NOT_FOUND, \"not-found-200\", Duration.ofMillis(200)),\n+                slice(RsStatus.OK, \"ok-50\", Duration.ofMillis(50)),\n+                slice(RsStatus.OK, \"ok-never\", Duration.ofDays(1))\n             ),\n             new SliceHasResponse(\n-                new RsHasStatus(RsStatus.OK),\n+                Matchers.allOf(\n+                    new RsHasStatus(RsStatus.OK),\n+                    new RsHasBody(expects, StandardCharsets.UTF_8)\n+                ),\n                 new RequestLine(RqMethod.GET, \"/\")\n             )\n         );\n     }\n \n+    @Test\n+    void returnsNotFoundIfAllFails() {\n+        // @checkstyle MagicNumberCheck (10 lines)\n+        MatcherAssert.assertThat(\n+            new GroupSlice(\n+                slice(RsStatus.NOT_FOUND, \"not-found-140\", Duration.ofMillis(250)),\n+                slice(RsStatus.NOT_FOUND, \"not-found-10\", Duration.ofMillis(50)),\n+                slice(RsStatus.NOT_FOUND, \"not-found-110\", Duration.ofMillis(200))\n+            ),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.NOT_FOUND),\n+                new RequestLine(RqMethod.GET, \"/foo\")\n+            )\n+        );\n+    }\n+\n+    private static Slice slice(final RsStatus status, final String body, final Duration delay) {\n+        return new SliceWithDelay(\n+            new SliceSimple(\n+                new RsWithBody(\n+                    new RsWithStatus(status),\n+                    new OneTimePublisher<>(\n+                        Flowable.just(\n+                            ByteBuffer.wrap(body.getBytes(StandardCharsets.UTF_8))\n+                        )\n+                    )\n+                )\n+            ),\n+            delay\n+        );\n+    }\n+\n     /**\n      * Slice testing decorator to add delay before sending request to origin slice.\n-     * @since 0.10\n+     * @since 0.16\n      */\n     private static final class SliceWithDelay extends Slice.Wrap {\n \n"}}, {"oid": "98a0f90bfb566c679642568384dcb0c60fc1708d", "url": "https://github.com/artipie/http/commit/98a0f90bfb566c679642568384dcb0c60fc1708d", "message": "#203 - review fixes, test improvements and bug fixes", "committedDate": "2020-07-21T17:59:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzQ3Mw==", "url": "https://github.com/artipie/http/pull/204#discussion_r458583473", "bodyText": "@g4s8 this code looks dangerous to me. Trying to log such object in production code may require it to block or crash. I think that common contract for toString() is to be non-blocking and be safe as possible", "author": "olegmoz", "createdAt": "2020-07-22T07:15:43Z", "path": "src/main/java/com/artipie/http/async/AsyncResponse.java", "diffHunk": "@@ -60,4 +61,22 @@ public AsyncResponse(final CompletionStage<? extends Response> future) {\n     public CompletionStage<Void> send(final Connection connection) {\n         return this.future.thenCompose(rsp -> rsp.send(connection));\n     }\n+\n+    // @checkstyle ReturnCountCheck (15 lines)\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public String toString() {\n+        try {\n+            return String.format(\n+                \"%s: %s\",\n+                this.getClass().getSimpleName(),\n+                this.future.toCompletableFuture().get()\n+            );\n+        } catch (final InterruptedException ignore) {\n+            Thread.currentThread().interrupt();\n+            return \"\";\n+        } catch (final ExecutionException err) {\n+            throw new IllegalStateException(err);\n+        }", "originalCommit": "98a0f90bfb566c679642568384dcb0c60fc1708d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwNDI2NA==", "url": "https://github.com/artipie/http/pull/204#discussion_r458604264", "bodyText": "@olegmoz yes, I thought about it, but it's hard to choose how we should use this toString method. There are two points about it:\n\nit's dangerous for production code and may lead to unpredictable behavior\nunit test doesn't show what's wrong with response without this method (it's just showing something like \"Expected response with status OK, but was AsyncResponse@0x1234\"\n\nMaybe we can find a compromise by checking if we're running in JUnit environment and use dangerous version of toString in that case, WDYT?", "author": "g4s8", "createdAt": "2020-07-22T07:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYwOTA4NA==", "url": "https://github.com/artipie/http/pull/204#discussion_r458609084", "bodyText": "@g4s8 checking inside toString will make it aware of JUnit. Can't this reporting problem in tests be solved with custom output in Matchers? Not sure about it.\nAnother solution for this issue would be to check if future isDone inside the method and print the value. Print uncomplete or failed: <reason> otherwise. The future should always be complete when matching has happened.", "author": "olegmoz", "createdAt": "2020-07-22T08:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzQ3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwMDE5MA==", "url": "https://github.com/artipie/http/pull/204#discussion_r458700190", "bodyText": "@olegmoz I replaced it with this.future.toString()", "author": "g4s8", "createdAt": "2020-07-22T10:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MzQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d6a7fcbadfbd82370d8c87aa9db3a584fe97c568", "chunk": "diff --git a/src/main/java/com/artipie/http/async/AsyncResponse.java b/src/main/java/com/artipie/http/async/AsyncResponse.java\nindex a34b638..6beb619 100644\n--- a/src/main/java/com/artipie/http/async/AsyncResponse.java\n+++ b/src/main/java/com/artipie/http/async/AsyncResponse.java\n\n@@ -62,21 +61,12 @@ public final class AsyncResponse implements Response {\n         return this.future.thenCompose(rsp -> rsp.send(connection));\n     }\n \n-    // @checkstyle ReturnCountCheck (15 lines)\n     @Override\n-    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n     public String toString() {\n-        try {\n-            return String.format(\n-                \"%s: %s\",\n-                this.getClass().getSimpleName(),\n-                this.future.toCompletableFuture().get()\n-            );\n-        } catch (final InterruptedException ignore) {\n-            Thread.currentThread().interrupt();\n-            return \"\";\n-        } catch (final ExecutionException err) {\n-            throw new IllegalStateException(err);\n-        }\n+        return String.format(\n+            \"(%s: %s)\",\n+            this.getClass().getSimpleName(),\n+            this.future.toString()\n+        );\n     }\n }\n"}}, {"oid": "d6a7fcbadfbd82370d8c87aa9db3a584fe97c568", "url": "https://github.com/artipie/http/commit/d6a7fcbadfbd82370d8c87aa9db3a584fe97c568", "message": "#203 - review fixes", "committedDate": "2020-07-22T10:39:48Z", "type": "commit"}]}