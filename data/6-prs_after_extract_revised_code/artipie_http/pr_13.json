{"pr_number": 13, "pr_title": "Request line helper object", "pr_createdAt": "2020-02-04T14:23:12Z", "pr_url": "https://github.com/artipie/http/pull/13", "timeline": [{"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa", "url": "https://github.com/artipie/http/commit/340f3cc4f7514662d81a886d770d6505a81d79aa", "message": "#12 - request line helper object", "committedDate": "2020-02-04T14:17:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODcwMQ==", "url": "https://github.com/artipie/http/pull/13#discussion_r375118701", "bodyText": "@g4s8 maybe it's better to rewrite it using ItemAt?\nreturn new IoChecked<>(\n    () -> new ItemAt<>(\n        idx,\n        new Split(\n            this.line,\n            \"\\\\s\"\n        )\n    ).value().asString()\n).value();\n\nOr even simpler if we're able to change exception in signature to just Exception:\nnew ItemAt<>(\n    idx,\n    new Split(\n        this.line,\n        \"\\\\s\"\n    )\n).value().asString();\n\nAnother option is to change method signature to private Text part(final int idx) throws IOException. That'll give us opportunity to write even more concise:\nnew IoChecked<>(\n    new ItemAt<>(\n        idx,\n        new Split(\n            this.line,\n            \"\\\\s\"\n        )\n    )\n).value();", "author": "iakunin", "createdAt": "2020-02-05T08:36:43Z", "path": "src/main/java/com/artipie/http/rq/RequestLine.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.net.URI;\n+import org.cactoos.Text;\n+import org.cactoos.scalar.IoChecked;\n+import org.cactoos.text.TextOf;\n+\n+/**\n+ * Request line helper object.\n+ * <p>\n+ * See 5.1 section of RFC2616:<br/>\n+ * The Request-Line begins with a method token,\n+ * followed by the Request-URI and the protocol version,\n+ * and ending with {@code CRLF}.\n+ * The elements are separated by SP characters.\n+ * No {@code CR} or {@code LF} is allowed except in the final {@code CRLF} sequence.\n+ * <br/>\n+ * {@code Request-Line = Method SP Request-URI SP HTTP-Version CRLF}.\n+ * </p>\n+ * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">RFC2616</a>\n+ * @since 0.1\n+ */\n+public final class RequestLine {\n+\n+    /**\n+     * HTTP request line.\n+     */\n+    private final Text line;\n+\n+    /**\n+     * Request line of HTTP request.\n+     * @param req HTTP request\n+     */\n+    public RequestLine(final Request req) {\n+        this(req::line);\n+    }\n+\n+    /**\n+     * New reqiest line from string.\n+     * @param line Request line string\n+     */\n+    public RequestLine(final String line) {\n+        this(new TextOf(line));\n+    }\n+\n+    /**\n+     * Primary ctor.\n+     * @param line HTTP request line\n+     */\n+    public RequestLine(final Text line) {\n+        this.line = line;\n+    }\n+\n+    /**\n+     * Request method.\n+     * @return Method name\n+     * @throws IOException In case of IO error\n+     */\n+    public String method() throws IOException {\n+        return this.part(0);\n+    }\n+\n+    /**\n+     * Request URI.\n+     * @return URI of the request\n+     * @throws IOException In case of IO error\n+     */\n+    public URI uri() throws IOException {\n+        return URI.create(this.part(1));\n+    }\n+\n+    /**\n+     * HTTP version.\n+     * @return HTTP version string\n+     * @throws IOException In case of IO error\n+     */\n+    public String version() throws IOException {\n+        return this.part(2);\n+    }\n+\n+    /**\n+     * Part of request line.\n+     * @param idx Part index\n+     * @return Part string\n+     * @throws IOException In case of IO error\n+     */\n+    private String part(final int idx) throws IOException {\n+        return new IoChecked<>(this.line::asString).value().split(\"\\\\s\")[idx];", "originalCommit": "340f3cc4f7514662d81a886d770d6505a81d79aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE4ODYxMg==", "url": "https://github.com/artipie/http/pull/13#discussion_r375188612", "bodyText": "@iakunin it looks to verbose for me, see:\nreturn new IoChecked<>(\n    () -> new ItemAt<>(idx, new Split(this.line, \"\\\\s\")).value().asString()\n).value();\nvs:\nreturn new IoChecked<>(this.line::asString).value().split(\"\\\\s\")[idx];\nThe problem of Cactoos version here is verbose exception handling for code which can't throw checked exceptions.", "author": "g4s8", "createdAt": "2020-02-05T10:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjIzNQ==", "url": "https://github.com/artipie/http/pull/13#discussion_r375202235", "bodyText": "@g4s8 got it", "author": "iakunin", "createdAt": "2020-02-05T11:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a610577ff4476dab0df9cbcc80d2d7935b5e633", "chunk": "diff --git a/src/main/java/com/artipie/http/rq/RequestLine.java b/src/main/java/com/artipie/http/rq/RequestLine.java\nindex df15242..82500b5 100644\n--- a/src/main/java/com/artipie/http/rq/RequestLine.java\n+++ b/src/main/java/com/artipie/http/rq/RequestLine.java\n\n@@ -24,7 +24,6 @@\n \n package com.artipie.http.rq;\n \n-import com.artipie.http.Request;\n import java.io.IOException;\n import java.net.URI;\n import org.cactoos.Text;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNTU5OQ==", "url": "https://github.com/artipie/http/pull/13#discussion_r375215599", "bodyText": "@g4s8 here can be ArrayIndexOutOfBoundsException: should we handle this case?", "author": "iakunin", "createdAt": "2020-02-05T12:01:35Z", "path": "src/main/java/com/artipie/http/rq/RequestLine.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.net.URI;\n+import org.cactoos.Text;\n+import org.cactoos.scalar.IoChecked;\n+import org.cactoos.text.TextOf;\n+\n+/**\n+ * Request line helper object.\n+ * <p>\n+ * See 5.1 section of RFC2616:<br/>\n+ * The Request-Line begins with a method token,\n+ * followed by the Request-URI and the protocol version,\n+ * and ending with {@code CRLF}.\n+ * The elements are separated by SP characters.\n+ * No {@code CR} or {@code LF} is allowed except in the final {@code CRLF} sequence.\n+ * <br/>\n+ * {@code Request-Line = Method SP Request-URI SP HTTP-Version CRLF}.\n+ * </p>\n+ * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">RFC2616</a>\n+ * @since 0.1\n+ */\n+public final class RequestLine {\n+\n+    /**\n+     * HTTP request line.\n+     */\n+    private final Text line;\n+\n+    /**\n+     * Request line of HTTP request.\n+     * @param req HTTP request\n+     */\n+    public RequestLine(final Request req) {\n+        this(req::line);\n+    }\n+\n+    /**\n+     * New reqiest line from string.\n+     * @param line Request line string\n+     */\n+    public RequestLine(final String line) {\n+        this(new TextOf(line));\n+    }\n+\n+    /**\n+     * Primary ctor.\n+     * @param line HTTP request line\n+     */\n+    public RequestLine(final Text line) {\n+        this.line = line;\n+    }\n+\n+    /**\n+     * Request method.\n+     * @return Method name\n+     * @throws IOException In case of IO error\n+     */\n+    public String method() throws IOException {\n+        return this.part(0);\n+    }\n+\n+    /**\n+     * Request URI.\n+     * @return URI of the request\n+     * @throws IOException In case of IO error\n+     */\n+    public URI uri() throws IOException {\n+        return URI.create(this.part(1));\n+    }\n+\n+    /**\n+     * HTTP version.\n+     * @return HTTP version string\n+     * @throws IOException In case of IO error\n+     */\n+    public String version() throws IOException {\n+        return this.part(2);\n+    }\n+\n+    /**\n+     * Part of request line.\n+     * @param idx Part index\n+     * @return Part string\n+     * @throws IOException In case of IO error\n+     */\n+    private String part(final int idx) throws IOException {\n+        return new IoChecked<>(this.line::asString).value().split(\"\\\\s\")[idx];", "originalCommit": "340f3cc4f7514662d81a886d770d6505a81d79aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1ODU2Ng==", "url": "https://github.com/artipie/http/pull/13#discussion_r375758566", "bodyText": "@iakunin I'd postpone this case for later, it's a corner case if status line is broken and can't be split into 3 parts. It's possible only if HTTP server accepts invalid HTTP request message.", "author": "g4s8", "createdAt": "2020-02-06T10:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNTU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc2NzQ2Nw==", "url": "https://github.com/artipie/http/pull/13#discussion_r375767467", "bodyText": "@g4s8 maybe it's better to leave a puzzle for that?", "author": "iakunin", "createdAt": "2020-02-06T10:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNTU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgxMTEyOQ==", "url": "https://github.com/artipie/http/pull/13#discussion_r375811129", "bodyText": "@iakunin done: 4a5c809", "author": "g4s8", "createdAt": "2020-02-06T12:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNTU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg1MDIzNQ==", "url": "https://github.com/artipie/http/pull/13#discussion_r375850235", "bodyText": "@g4s8 thanks", "author": "iakunin", "createdAt": "2020-02-06T14:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNTU5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a610577ff4476dab0df9cbcc80d2d7935b5e633", "chunk": "diff --git a/src/main/java/com/artipie/http/rq/RequestLine.java b/src/main/java/com/artipie/http/rq/RequestLine.java\nindex df15242..82500b5 100644\n--- a/src/main/java/com/artipie/http/rq/RequestLine.java\n+++ b/src/main/java/com/artipie/http/rq/RequestLine.java\n\n@@ -24,7 +24,6 @@\n \n package com.artipie.http.rq;\n \n-import com.artipie.http.Request;\n import java.io.IOException;\n import java.net.URI;\n import org.cactoos.Text;\n"}}, {"oid": "0a610577ff4476dab0df9cbcc80d2d7935b5e633", "url": "https://github.com/artipie/http/commit/0a610577ff4476dab0df9cbcc80d2d7935b5e633", "message": "#12 - merged master", "committedDate": "2020-02-06T10:32:45Z", "type": "commit"}, {"oid": "4a5c8097b1523dac325dc4fb8600bf4c51b8d2a3", "url": "https://github.com/artipie/http/commit/4a5c8097b1523dac325dc4fb8600bf4c51b8d2a3", "message": "#12 - (cr) added todo", "committedDate": "2020-02-06T12:37:06Z", "type": "commit"}, {"oid": "6e1d00a2638378a143df47aeae7854acf65688ec", "url": "https://github.com/artipie/http/commit/6e1d00a2638378a143df47aeae7854acf65688ec", "message": "#12 - updated request line", "committedDate": "2020-02-06T13:23:16Z", "type": "commit"}]}