{"pr_number": 63, "pr_title": "Implement byte stream splitting by delimiter", "pr_createdAt": "2020-03-05T11:19:46Z", "pr_url": "https://github.com/artipie/http/pull/63", "timeline": [{"oid": "a6355f60e3bc4c4a0947b38c7e906db7eee6bea4", "url": "https://github.com/artipie/http/commit/a6355f60e3bc4c4a0947b38c7e906db7eee6bea4", "message": "introduce byte stream splitters", "committedDate": "2020-02-26T13:16:21Z", "type": "commit"}, {"oid": "276f0a912b64830b191e6cf42e0c075878fbe2f1", "url": "https://github.com/artipie/http/commit/276f0a912b64830b191e6cf42e0c075878fbe2f1", "message": "use RingBuffers from guava", "committedDate": "2020-02-27T13:56:00Z", "type": "commit"}, {"oid": "c3432a31a88b6f9eabc2e29616386ccf121e2144", "url": "https://github.com/artipie/http/commit/c3432a31a88b6f9eabc2e29616386ccf121e2144", "message": "add more implementation details", "committedDate": "2020-02-28T09:16:38Z", "type": "commit"}, {"oid": "9bd7e170865856345f36d01f0c5b76fdbbb7fb53", "url": "https://github.com/artipie/http/commit/9bd7e170865856345f36d01f0c5b76fdbbb7fb53", "message": "update multipart splitter", "committedDate": "2020-03-02T15:09:34Z", "type": "commit"}, {"oid": "2ac1a5ac6f6d6a3e2fd2b219a070e3190604c4fe", "url": "https://github.com/artipie/http/commit/2ac1a5ac6f6d6a3e2fd2b219a070e3190604c4fe", "message": "continue to work on splitter", "committedDate": "2020-03-03T09:11:48Z", "type": "commit"}, {"oid": "64b5b9d56932bdb8fbd6560daeddbb776b6a70d1", "url": "https://github.com/artipie/http/commit/64b5b9d56932bdb8fbd6560daeddbb776b6a70d1", "message": "continue to work on splitter", "committedDate": "2020-03-03T12:38:33Z", "type": "commit"}, {"oid": "6d071b1cb4dfed5f81d586b9563e283f544848a5", "url": "https://github.com/artipie/http/commit/6d071b1cb4dfed5f81d586b9563e283f544848a5", "message": "continue to work on splitter", "committedDate": "2020-03-03T14:30:33Z", "type": "commit"}, {"oid": "f6ff4ba7cf950f762180944e23134ad358a9b351", "url": "https://github.com/artipie/http/commit/f6ff4ba7cf950f762180944e23134ad358a9b351", "message": "continue to work on splitter", "committedDate": "2020-03-03T16:07:20Z", "type": "commit"}, {"oid": "c19cbe1ef7bd379cc5a0c575b6129999b622b1ee", "url": "https://github.com/artipie/http/commit/c19cbe1ef7bd379cc5a0c575b6129999b622b1ee", "message": "fixing qulice warnings", "committedDate": "2020-03-03T18:07:45Z", "type": "commit"}, {"oid": "2236c8cd8c0b2558d587553bd39ebc2328bb0547", "url": "https://github.com/artipie/http/commit/2236c8cd8c0b2558d587553bd39ebc2328bb0547", "message": "implement byte stream splitting", "committedDate": "2020-03-05T11:18:28Z", "type": "commit"}, {"oid": "d5d4caa9e9db06a03e4f299b98093f4afcc77278", "url": "https://github.com/artipie/http/commit/d5d4caa9e9db06a03e4f299b98093f4afcc77278", "message": "remove useless dependencies", "committedDate": "2020-03-05T11:34:25Z", "type": "commit"}, {"oid": "3e6088dbdf379d7fc1806186a5784ab50c4e370a", "url": "https://github.com/artipie/http/commit/3e6088dbdf379d7fc1806186a5784ab50c4e370a", "message": "add todos for subsequent changes", "committedDate": "2020-03-05T12:05:01Z", "type": "commit"}, {"oid": "abd8e7adea81e4b6076dfad3cca3c61d725b4056", "url": "https://github.com/artipie/http/commit/abd8e7adea81e4b6076dfad3cca3c61d725b4056", "message": "Merge branch 'master' of github.com:artipie/http into stream_splitters", "committedDate": "2020-03-05T12:09:05Z", "type": "commit"}, {"oid": "eb86f7901cd20b0d5c894f7b9d6a2d39d62f04b2", "url": "https://github.com/artipie/http/commit/eb86f7901cd20b0d5c894f7b9d6a2d39d62f04b2", "message": "add apache commons", "committedDate": "2020-03-05T12:13:09Z", "type": "commit"}, {"oid": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "url": "https://github.com/artipie/http/commit/356854b1bdc3ceeb24b5228136c627caa2a6eb51", "message": "make apache commons non test dependency", "committedDate": "2020-03-05T12:18:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTQzNg==", "url": "https://github.com/artipie/http/pull/63#discussion_r389235436", "bodyText": "@Sammers21 Let's stick to conventions and call this class ByteByByteSplitTest", "author": "HDouss", "createdAt": "2020-03-07T07:33:38Z", "path": "src/test/java/com/artipie/http/stream/SplitTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+/**\n+ * Tests for {@link ByteByByteSplit}.\n+ *\n+ * @since 0.4\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class SplitTest {", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3df6bb9f8e75acdb44b62d5aabcc9c8efacdbd3", "chunk": "diff --git a/src/test/java/com/artipie/http/stream/SplitTest.java b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\nsimilarity index 98%\nrename from src/test/java/com/artipie/http/stream/SplitTest.java\nrename to src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\nindex 2fe0cc5..273a2c0 100644\n--- a/src/test/java/com/artipie/http/stream/SplitTest.java\n+++ b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\n\n@@ -37,7 +37,7 @@ import org.junit.jupiter.api.RepeatedTest;\n  * @since 0.4\n  * @checkstyle MagicNumberCheck (500 lines)\n  */\n-public final class SplitTest {\n+public final class ByteByByteSplitTest {\n \n     @RepeatedTest(10_000)\n     public void basicSplitWorks() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTUxMQ==", "url": "https://github.com/artipie/http/pull/63#discussion_r389235511", "bodyText": "@Sammers21 The varibales actual and flow are used only once. Let's inline them.", "author": "HDouss", "createdAt": "2020-03-07T07:35:28Z", "path": "src/test/java/com/artipie/http/stream/SplitTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+/**\n+ * Tests for {@link ByteByByteSplit}.\n+ *\n+ * @since 0.4\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class SplitTest {\n+\n+    @RepeatedTest(10_000)\n+    public void basicSplitWorks() {\n+        final Flowable<ByteBuffer> flow = Flowable.fromArray(\n+            Arrays.stream(\n+                ArrayUtils.toObject(\"how are you\".getBytes())\n+            ).map(\n+                (Byte aByte) -> {\n+                    final byte[] bytes = new byte[1];\n+                    bytes[0] = aByte;\n+                    return ByteBuffer.wrap(bytes);\n+                }\n+            ).toArray(ByteBuffer[]::new)\n+        );\n+        final ByteByByteSplit split = new ByteByByteSplit(\" \".getBytes());\n+        flow.subscribe(split);\n+        final String actual = new String(\n+            Flowable.fromPublisher(split)\n+                .flatMap(pub -> pub)\n+                .toList()\n+                .blockingGet()\n+                .stream()\n+                .map(\n+                    byteBuffer -> {\n+                        final byte[] res = new byte[byteBuffer.remaining()];\n+                        byteBuffer.get(res);\n+                        return res;\n+                    }\n+                )\n+                .reduce(\n+                    (one, another) -> {\n+                        final byte[] res = new byte[one.length + another.length];\n+                        System.arraycopy(one, 0, res, 0, one.length);\n+                        System.arraycopy(another, 0, res, one.length, another.length);\n+                        return res;\n+                    }\n+                )\n+                .get()\n+        );", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f3df6bb9f8e75acdb44b62d5aabcc9c8efacdbd3", "chunk": "diff --git a/src/test/java/com/artipie/http/stream/SplitTest.java b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\nsimilarity index 98%\nrename from src/test/java/com/artipie/http/stream/SplitTest.java\nrename to src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\nindex 2fe0cc5..273a2c0 100644\n--- a/src/test/java/com/artipie/http/stream/SplitTest.java\n+++ b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\n\n@@ -37,7 +37,7 @@ import org.junit.jupiter.api.RepeatedTest;\n  * @since 0.4\n  * @checkstyle MagicNumberCheck (500 lines)\n  */\n-public final class SplitTest {\n+public final class ByteByByteSplitTest {\n \n     @RepeatedTest(10_000)\n     public void basicSplitWorks() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTY3Mg==", "url": "https://github.com/artipie/http/pull/63#discussion_r389235672", "bodyText": "@Sammers21 Unless a misuse of the API, I don't think downstream could be empty here, we can remove this test.", "author": "HDouss", "createdAt": "2020-03-07T07:38:48Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,\n+ * but we definitely nee to have it.\n+ * @todo #32:30min Downstream emission subscription.\n+ * We need to be aware of the fact that downstream switch doesn't happen instantly.\n+ * For now, implementation does not rely on that.\n+ * @todo #32:30min Full reactive streams tck compatibility.\n+ * The processor implementation should be verified by reactive streams tck in order to ensure\n+ * specification compatibility.\n+ * @since 0.4\n+ * @checkstyle MemberNameCheck (500 lines)\n+ * @checkstyle LongVariable (500 lines)\n+ * @checkstyle TooManyMethods (500 lines)\n+ * @checkstyle EmptyLineSeparatorCheck (500 lines)\n+ */\n+@SuppressWarnings({\n+    \"PMD.AvoidSynchronizedAtMethodLevel\",\n+    \"PMD.LongVariable\",\n+    \"PMD.TooManyMethods\",\n+    \"PMD.AvoidDuplicateLiterals\"\n+})\n+public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<ByteBuffer>> {\n+\n+    /**\n+     * A ring buffer with bytes. Used for delimiter findings.\n+     */\n+    private final CircularFifoQueue<Byte> ring;\n+\n+    /**\n+     * The stream delimiter.\n+     */\n+    private final byte[] delim;\n+\n+    /**\n+     * The splitted buffers. Empty means delimiter.\n+     */\n+    private final LinkedBlockingQueue<Optional<ByteBuffer>> storage;\n+\n+    /**\n+     * The upstream to request elements from.\n+     */\n+    private final AtomicReference<Subscription> upstream;\n+\n+    /**\n+     * Downstream to emit elements to.\n+     */\n+    private final AtomicReference<Subscriber<? super Publisher<ByteBuffer>>> downstream;\n+\n+    /**\n+     * Downstream of a downstream element.\n+     */\n+    private final AtomicReference<Subscriber<? super ByteBuffer>> downDownstream;\n+\n+    /**\n+     * Is this processor already started?\n+     */\n+    private final AtomicBoolean started;\n+\n+    /**\n+     * Has upstream been terminated.\n+     */\n+    private final AtomicBoolean upstreamTerminated;\n+\n+    /**\n+     * The downstream demand.\n+     */\n+    private final AtomicLong downDemand;\n+\n+    /**\n+     * The down downstream demand.\n+     */\n+    private final AtomicLong downDownDemand;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param delim The delimiter.\n+     */\n+    public ByteByByteSplit(final byte[] delim) {\n+        this.ring = new CircularFifoQueue<>(delim.length);\n+        this.delim = Arrays.copyOf(delim, delim.length);\n+        this.upstream = new AtomicReference<>();\n+        this.downstream = new AtomicReference<>();\n+        this.started = new AtomicBoolean(false);\n+        this.downDownstream = new AtomicReference<>();\n+        this.storage = new LinkedBlockingQueue<>();\n+        this.upstreamTerminated = new AtomicBoolean(false);\n+        this.downDemand = new AtomicLong(0);\n+        this.downDownDemand = new AtomicLong(0);\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.downstream.set(sub);\n+        sub.onSubscribe(\n+            new Subscription() {\n+                @Override\n+                public void request(final long ask) {\n+                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                    ByteByByteSplit.this.upstream.get().request(ask);\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                }\n+            }\n+        );\n+        this.tryToStart();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.upstream.set(sub);\n+    }\n+\n+    @Override\n+    public synchronized void onNext(final ByteBuffer next) {\n+        final byte[] bytes = new byte[next.remaining()];\n+        next.get(bytes);\n+        ByteBuffer current = ByteByByteSplit.bufWithInitMark(bytes.length);\n+        for (final byte each : bytes) {\n+            final boolean eviction = this.ring.isAtFullCapacity();\n+            if (eviction) {\n+                final Byte last = this.ring.get(this.delim.length - 1);\n+                current.put(last);\n+            }\n+            this.ring.add(each);\n+            final byte[] primitive = this.ringBytes();\n+            if (Arrays.equals(this.delim, primitive)) {\n+                this.ring.clear();\n+                current.limit(current.position());\n+                current.reset();\n+                this.emit(Optional.of(current));\n+                this.emit(Optional.empty());\n+                current = ByteByByteSplit.bufWithInitMark(bytes.length);\n+            }\n+        }\n+        current.limit(current.position());\n+        current.reset();\n+        this.emit(Optional.of(current));\n+    }\n+\n+    @Override\n+    public void onError(final Throwable throwable) {\n+        this.upstreamTerminated.set(true);\n+        final Subscriber<? super Publisher<ByteBuffer>> subscriber = this.downstream.get();\n+        if (subscriber != null) {\n+            subscriber.onError(throwable);\n+        }\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        this.upstreamTerminated.set(true);\n+        this.emit(Optional.of(ByteBuffer.wrap(this.ringBytes())));\n+    }\n+\n+    /**\n+     * Create buffer with initial.\n+     *\n+     * @param size The buf size.\n+     * @return Buffer with the initial mark.\n+     */\n+    private static ByteBuffer bufWithInitMark(final int size) {\n+        final ByteBuffer current = ByteBuffer.allocate(size);\n+        current.mark();\n+        return current;\n+    }\n+\n+    /**\n+     * Return currently held buffer bytes.\n+     * @return Currently held buffer bytes.\n+     */\n+    private byte[] ringBytes() {\n+        return ArrayUtils.toPrimitive(this.ring.stream().toArray(Byte[]::new));\n+    }\n+\n+    /**\n+     * Try to start the processor.\n+     */\n+    private void tryToStart() {\n+        if (this.downstream.get() != null", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNjI5Ng==", "url": "https://github.com/artipie/http/pull/63#discussion_r390316296", "bodyText": "No, in order to start the processor, we need to ensure that down and up streams are defined.", "author": "Sammers21", "createdAt": "2020-03-10T13:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTY3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NzUwNA==", "url": "https://github.com/artipie/http/pull/63#discussion_r390347504", "bodyText": "@Sammers21 I agree with that in general. My comment says that downstream could never be empty at this point of execution, unless someone call subscribe method with null.", "author": "HDouss", "createdAt": "2020-03-10T14:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTY3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8716216d24537419a8df16a56a979ac10d281", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex bc96fb2..71f83b8 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -177,8 +177,7 @@ public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<By\n                 current.put(last);\n             }\n             this.ring.add(each);\n-            final byte[] primitive = this.ringBytes();\n-            if (Arrays.equals(this.delim, primitive)) {\n+            if (Arrays.equals(this.delim, this.ringBytes())) {\n                 this.ring.clear();\n                 current.limit(current.position());\n                 current.reset();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc1Ng==", "url": "https://github.com/artipie/http/pull/63#discussion_r389235756", "bodyText": "@Sammers21 Let's inline eviction here", "author": "HDouss", "createdAt": "2020-03-07T07:40:52Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,\n+ * but we definitely nee to have it.\n+ * @todo #32:30min Downstream emission subscription.\n+ * We need to be aware of the fact that downstream switch doesn't happen instantly.\n+ * For now, implementation does not rely on that.\n+ * @todo #32:30min Full reactive streams tck compatibility.\n+ * The processor implementation should be verified by reactive streams tck in order to ensure\n+ * specification compatibility.\n+ * @since 0.4\n+ * @checkstyle MemberNameCheck (500 lines)\n+ * @checkstyle LongVariable (500 lines)\n+ * @checkstyle TooManyMethods (500 lines)\n+ * @checkstyle EmptyLineSeparatorCheck (500 lines)\n+ */\n+@SuppressWarnings({\n+    \"PMD.AvoidSynchronizedAtMethodLevel\",\n+    \"PMD.LongVariable\",\n+    \"PMD.TooManyMethods\",\n+    \"PMD.AvoidDuplicateLiterals\"\n+})\n+public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<ByteBuffer>> {\n+\n+    /**\n+     * A ring buffer with bytes. Used for delimiter findings.\n+     */\n+    private final CircularFifoQueue<Byte> ring;\n+\n+    /**\n+     * The stream delimiter.\n+     */\n+    private final byte[] delim;\n+\n+    /**\n+     * The splitted buffers. Empty means delimiter.\n+     */\n+    private final LinkedBlockingQueue<Optional<ByteBuffer>> storage;\n+\n+    /**\n+     * The upstream to request elements from.\n+     */\n+    private final AtomicReference<Subscription> upstream;\n+\n+    /**\n+     * Downstream to emit elements to.\n+     */\n+    private final AtomicReference<Subscriber<? super Publisher<ByteBuffer>>> downstream;\n+\n+    /**\n+     * Downstream of a downstream element.\n+     */\n+    private final AtomicReference<Subscriber<? super ByteBuffer>> downDownstream;\n+\n+    /**\n+     * Is this processor already started?\n+     */\n+    private final AtomicBoolean started;\n+\n+    /**\n+     * Has upstream been terminated.\n+     */\n+    private final AtomicBoolean upstreamTerminated;\n+\n+    /**\n+     * The downstream demand.\n+     */\n+    private final AtomicLong downDemand;\n+\n+    /**\n+     * The down downstream demand.\n+     */\n+    private final AtomicLong downDownDemand;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param delim The delimiter.\n+     */\n+    public ByteByByteSplit(final byte[] delim) {\n+        this.ring = new CircularFifoQueue<>(delim.length);\n+        this.delim = Arrays.copyOf(delim, delim.length);\n+        this.upstream = new AtomicReference<>();\n+        this.downstream = new AtomicReference<>();\n+        this.started = new AtomicBoolean(false);\n+        this.downDownstream = new AtomicReference<>();\n+        this.storage = new LinkedBlockingQueue<>();\n+        this.upstreamTerminated = new AtomicBoolean(false);\n+        this.downDemand = new AtomicLong(0);\n+        this.downDownDemand = new AtomicLong(0);\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.downstream.set(sub);\n+        sub.onSubscribe(\n+            new Subscription() {\n+                @Override\n+                public void request(final long ask) {\n+                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                    ByteByByteSplit.this.upstream.get().request(ask);\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                }\n+            }\n+        );\n+        this.tryToStart();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.upstream.set(sub);\n+    }\n+\n+    @Override\n+    public synchronized void onNext(final ByteBuffer next) {\n+        final byte[] bytes = new byte[next.remaining()];\n+        next.get(bytes);\n+        ByteBuffer current = ByteByByteSplit.bufWithInitMark(bytes.length);\n+        for (final byte each : bytes) {\n+            final boolean eviction = this.ring.isAtFullCapacity();", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTA4OQ==", "url": "https://github.com/artipie/http/pull/63#discussion_r390319089", "bodyText": "@HDouss, I would not do it because of a reason similar to #63 (comment)", "author": "Sammers21", "createdAt": "2020-03-10T13:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NDM3Mw==", "url": "https://github.com/artipie/http/pull/63#discussion_r390344373", "bodyText": "@Sammers21 Generally we inline one-time used variables. Will approve this if @g4s8 accepts this exception.", "author": "HDouss", "createdAt": "2020-03-10T14:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4Mzk3OA==", "url": "https://github.com/artipie/http/pull/63#discussion_r390783978", "bodyText": "@Sammers21 @HDouss  I'd keep eviction and last here, since this class and methods are too complex for reading. Maybe we'll need to refactor it later", "author": "g4s8", "createdAt": "2020-03-11T07:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8716216d24537419a8df16a56a979ac10d281", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex bc96fb2..71f83b8 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -177,8 +177,7 @@ public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<By\n                 current.put(last);\n             }\n             this.ring.add(each);\n-            final byte[] primitive = this.ringBytes();\n-            if (Arrays.equals(this.delim, primitive)) {\n+            if (Arrays.equals(this.delim, this.ringBytes())) {\n                 this.ring.clear();\n                 current.limit(current.position());\n                 current.reset();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc5MA==", "url": "https://github.com/artipie/http/pull/63#discussion_r389235790", "bodyText": "@Sammers21 and inline last variable", "author": "HDouss", "createdAt": "2020-03-07T07:41:17Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,\n+ * but we definitely nee to have it.\n+ * @todo #32:30min Downstream emission subscription.\n+ * We need to be aware of the fact that downstream switch doesn't happen instantly.\n+ * For now, implementation does not rely on that.\n+ * @todo #32:30min Full reactive streams tck compatibility.\n+ * The processor implementation should be verified by reactive streams tck in order to ensure\n+ * specification compatibility.\n+ * @since 0.4\n+ * @checkstyle MemberNameCheck (500 lines)\n+ * @checkstyle LongVariable (500 lines)\n+ * @checkstyle TooManyMethods (500 lines)\n+ * @checkstyle EmptyLineSeparatorCheck (500 lines)\n+ */\n+@SuppressWarnings({\n+    \"PMD.AvoidSynchronizedAtMethodLevel\",\n+    \"PMD.LongVariable\",\n+    \"PMD.TooManyMethods\",\n+    \"PMD.AvoidDuplicateLiterals\"\n+})\n+public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<ByteBuffer>> {\n+\n+    /**\n+     * A ring buffer with bytes. Used for delimiter findings.\n+     */\n+    private final CircularFifoQueue<Byte> ring;\n+\n+    /**\n+     * The stream delimiter.\n+     */\n+    private final byte[] delim;\n+\n+    /**\n+     * The splitted buffers. Empty means delimiter.\n+     */\n+    private final LinkedBlockingQueue<Optional<ByteBuffer>> storage;\n+\n+    /**\n+     * The upstream to request elements from.\n+     */\n+    private final AtomicReference<Subscription> upstream;\n+\n+    /**\n+     * Downstream to emit elements to.\n+     */\n+    private final AtomicReference<Subscriber<? super Publisher<ByteBuffer>>> downstream;\n+\n+    /**\n+     * Downstream of a downstream element.\n+     */\n+    private final AtomicReference<Subscriber<? super ByteBuffer>> downDownstream;\n+\n+    /**\n+     * Is this processor already started?\n+     */\n+    private final AtomicBoolean started;\n+\n+    /**\n+     * Has upstream been terminated.\n+     */\n+    private final AtomicBoolean upstreamTerminated;\n+\n+    /**\n+     * The downstream demand.\n+     */\n+    private final AtomicLong downDemand;\n+\n+    /**\n+     * The down downstream demand.\n+     */\n+    private final AtomicLong downDownDemand;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param delim The delimiter.\n+     */\n+    public ByteByByteSplit(final byte[] delim) {\n+        this.ring = new CircularFifoQueue<>(delim.length);\n+        this.delim = Arrays.copyOf(delim, delim.length);\n+        this.upstream = new AtomicReference<>();\n+        this.downstream = new AtomicReference<>();\n+        this.started = new AtomicBoolean(false);\n+        this.downDownstream = new AtomicReference<>();\n+        this.storage = new LinkedBlockingQueue<>();\n+        this.upstreamTerminated = new AtomicBoolean(false);\n+        this.downDemand = new AtomicLong(0);\n+        this.downDownDemand = new AtomicLong(0);\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.downstream.set(sub);\n+        sub.onSubscribe(\n+            new Subscription() {\n+                @Override\n+                public void request(final long ask) {\n+                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                    ByteByByteSplit.this.upstream.get().request(ask);\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                }\n+            }\n+        );\n+        this.tryToStart();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.upstream.set(sub);\n+    }\n+\n+    @Override\n+    public synchronized void onNext(final ByteBuffer next) {\n+        final byte[] bytes = new byte[next.remaining()];\n+        next.get(bytes);\n+        ByteBuffer current = ByteByByteSplit.bufWithInitMark(bytes.length);\n+        for (final byte each : bytes) {\n+            final boolean eviction = this.ring.isAtFullCapacity();\n+            if (eviction) {\n+                final Byte last = this.ring.get(this.delim.length - 1);\n+                current.put(last);", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxODIxNA==", "url": "https://github.com/artipie/http/pull/63#discussion_r390318214", "bodyText": "@HDouss, would prefer to keep it as is, last is more representative than this.ring.get(this.delim.length - 1). In this case, inlining would be even harmful.", "author": "Sammers21", "createdAt": "2020-03-10T13:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NTAyMw==", "url": "https://github.com/artipie/http/pull/63#discussion_r390345023", "bodyText": "@Sammers21 Same as above. I don't see any harm in inlining this.", "author": "HDouss", "createdAt": "2020-03-10T14:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8716216d24537419a8df16a56a979ac10d281", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex bc96fb2..71f83b8 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -177,8 +177,7 @@ public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<By\n                 current.put(last);\n             }\n             this.ring.add(each);\n-            final byte[] primitive = this.ringBytes();\n-            if (Arrays.equals(this.delim, primitive)) {\n+            if (Arrays.equals(this.delim, this.ringBytes())) {\n                 this.ring.clear();\n                 current.limit(current.position());\n                 current.reset();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTgyNg==", "url": "https://github.com/artipie/http/pull/63#discussion_r389235826", "bodyText": "@Sammers21 We can also inline primitive", "author": "HDouss", "createdAt": "2020-03-07T07:42:08Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,\n+ * but we definitely nee to have it.\n+ * @todo #32:30min Downstream emission subscription.\n+ * We need to be aware of the fact that downstream switch doesn't happen instantly.\n+ * For now, implementation does not rely on that.\n+ * @todo #32:30min Full reactive streams tck compatibility.\n+ * The processor implementation should be verified by reactive streams tck in order to ensure\n+ * specification compatibility.\n+ * @since 0.4\n+ * @checkstyle MemberNameCheck (500 lines)\n+ * @checkstyle LongVariable (500 lines)\n+ * @checkstyle TooManyMethods (500 lines)\n+ * @checkstyle EmptyLineSeparatorCheck (500 lines)\n+ */\n+@SuppressWarnings({\n+    \"PMD.AvoidSynchronizedAtMethodLevel\",\n+    \"PMD.LongVariable\",\n+    \"PMD.TooManyMethods\",\n+    \"PMD.AvoidDuplicateLiterals\"\n+})\n+public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<ByteBuffer>> {\n+\n+    /**\n+     * A ring buffer with bytes. Used for delimiter findings.\n+     */\n+    private final CircularFifoQueue<Byte> ring;\n+\n+    /**\n+     * The stream delimiter.\n+     */\n+    private final byte[] delim;\n+\n+    /**\n+     * The splitted buffers. Empty means delimiter.\n+     */\n+    private final LinkedBlockingQueue<Optional<ByteBuffer>> storage;\n+\n+    /**\n+     * The upstream to request elements from.\n+     */\n+    private final AtomicReference<Subscription> upstream;\n+\n+    /**\n+     * Downstream to emit elements to.\n+     */\n+    private final AtomicReference<Subscriber<? super Publisher<ByteBuffer>>> downstream;\n+\n+    /**\n+     * Downstream of a downstream element.\n+     */\n+    private final AtomicReference<Subscriber<? super ByteBuffer>> downDownstream;\n+\n+    /**\n+     * Is this processor already started?\n+     */\n+    private final AtomicBoolean started;\n+\n+    /**\n+     * Has upstream been terminated.\n+     */\n+    private final AtomicBoolean upstreamTerminated;\n+\n+    /**\n+     * The downstream demand.\n+     */\n+    private final AtomicLong downDemand;\n+\n+    /**\n+     * The down downstream demand.\n+     */\n+    private final AtomicLong downDownDemand;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param delim The delimiter.\n+     */\n+    public ByteByByteSplit(final byte[] delim) {\n+        this.ring = new CircularFifoQueue<>(delim.length);\n+        this.delim = Arrays.copyOf(delim, delim.length);\n+        this.upstream = new AtomicReference<>();\n+        this.downstream = new AtomicReference<>();\n+        this.started = new AtomicBoolean(false);\n+        this.downDownstream = new AtomicReference<>();\n+        this.storage = new LinkedBlockingQueue<>();\n+        this.upstreamTerminated = new AtomicBoolean(false);\n+        this.downDemand = new AtomicLong(0);\n+        this.downDownDemand = new AtomicLong(0);\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.downstream.set(sub);\n+        sub.onSubscribe(\n+            new Subscription() {\n+                @Override\n+                public void request(final long ask) {\n+                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                    ByteByByteSplit.this.upstream.get().request(ask);\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                }\n+            }\n+        );\n+        this.tryToStart();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription sub) {\n+        if (this.downstream.get() != null) {\n+            throw new IllegalStateException(\"Only one subscription is allowed\");\n+        }\n+        this.upstream.set(sub);\n+    }\n+\n+    @Override\n+    public synchronized void onNext(final ByteBuffer next) {\n+        final byte[] bytes = new byte[next.remaining()];\n+        next.get(bytes);\n+        ByteBuffer current = ByteByByteSplit.bufWithInitMark(bytes.length);\n+        for (final byte each : bytes) {\n+            final boolean eviction = this.ring.isAtFullCapacity();\n+            if (eviction) {\n+                final Byte last = this.ring.get(this.delim.length - 1);\n+                current.put(last);\n+            }\n+            this.ring.add(each);\n+            final byte[] primitive = this.ringBytes();\n+            if (Arrays.equals(this.delim, primitive)) {", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8e8716216d24537419a8df16a56a979ac10d281", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex bc96fb2..71f83b8 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -177,8 +177,7 @@ public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<By\n                 current.put(last);\n             }\n             this.ring.add(each);\n-            final byte[] primitive = this.ringBytes();\n-            if (Arrays.equals(this.delim, primitive)) {\n+            if (Arrays.equals(this.delim, this.ringBytes())) {\n                 this.ring.clear();\n                 current.limit(current.position());\n                 current.reset();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjE2NQ==", "url": "https://github.com/artipie/http/pull/63#discussion_r389236165", "bodyText": "@Sammers21 typo: should be \"need\"", "author": "HDouss", "createdAt": "2020-03-07T07:48:20Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,\n+ * but we definitely nee to have it.", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e8e8716216d24537419a8df16a56a979ac10d281", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex bc96fb2..71f83b8 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -177,8 +177,7 @@ public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<By\n                 current.put(last);\n             }\n             this.ring.add(each);\n-            final byte[] primitive = this.ringBytes();\n-            if (Arrays.equals(this.delim, primitive)) {\n+            if (Arrays.equals(this.delim, this.ringBytes())) {\n                 this.ring.clear();\n                 current.limit(current.position());\n                 current.reset();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ4MQ==", "url": "https://github.com/artipie/http/pull/63#discussion_r389236481", "bodyText": "@Sammers21 We have too many checks on null in this class. Maybe we could have atomic references to Optional<> that got set with Optional.empty at initialization.", "author": "HDouss", "createdAt": "2020-03-07T07:54:50Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,\n+ * but we definitely nee to have it.\n+ * @todo #32:30min Downstream emission subscription.\n+ * We need to be aware of the fact that downstream switch doesn't happen instantly.\n+ * For now, implementation does not rely on that.\n+ * @todo #32:30min Full reactive streams tck compatibility.\n+ * The processor implementation should be verified by reactive streams tck in order to ensure\n+ * specification compatibility.\n+ * @since 0.4\n+ * @checkstyle MemberNameCheck (500 lines)\n+ * @checkstyle LongVariable (500 lines)\n+ * @checkstyle TooManyMethods (500 lines)\n+ * @checkstyle EmptyLineSeparatorCheck (500 lines)\n+ */\n+@SuppressWarnings({\n+    \"PMD.AvoidSynchronizedAtMethodLevel\",\n+    \"PMD.LongVariable\",\n+    \"PMD.TooManyMethods\",\n+    \"PMD.AvoidDuplicateLiterals\"\n+})\n+public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<ByteBuffer>> {", "originalCommit": "356854b1bdc3ceeb24b5228136c627caa2a6eb51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTY3OA==", "url": "https://github.com/artipie/http/pull/63#discussion_r390375678", "bodyText": "make sense.", "author": "Sammers21", "createdAt": "2020-03-10T14:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3OTc5MQ==", "url": "https://github.com/artipie/http/pull/63#discussion_r390379791", "bodyText": "@HDouss, done", "author": "Sammers21", "createdAt": "2020-03-10T15:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e8e8716216d24537419a8df16a56a979ac10d281", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex bc96fb2..71f83b8 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -177,8 +177,7 @@ public final class ByteByByteSplit implements Processor<ByteBuffer, Publisher<By\n                 current.put(last);\n             }\n             this.ring.add(each);\n-            final byte[] primitive = this.ringBytes();\n-            if (Arrays.equals(this.delim, primitive)) {\n+            if (Arrays.equals(this.delim, this.ringBytes())) {\n                 this.ring.clear();\n                 current.limit(current.position());\n                 current.reset();\n"}}, {"oid": "f3df6bb9f8e75acdb44b62d5aabcc9c8efacdbd3", "url": "https://github.com/artipie/http/commit/f3df6bb9f8e75acdb44b62d5aabcc9c8efacdbd3", "message": "rename SplitTest to ByteByByteSplitTest", "committedDate": "2020-03-10T13:31:12Z", "type": "commit"}, {"oid": "6021d11401ad8a20b4ab21ed8ea56f4d0c4de5c9", "url": "https://github.com/artipie/http/commit/6021d11401ad8a20b4ab21ed8ea56f4d0c4de5c9", "message": "inline flow and actual", "committedDate": "2020-03-10T13:32:27Z", "type": "commit"}, {"oid": "defcac95a2a0a54433b5742b9a20c3f1ea366330", "url": "https://github.com/artipie/http/commit/defcac95a2a0a54433b5742b9a20c3f1ea366330", "message": "fix qulice warning", "committedDate": "2020-03-10T13:34:47Z", "type": "commit"}, {"oid": "daf61e94e0e7ba73598cb87e485ee9ca2c9c5cc0", "url": "https://github.com/artipie/http/commit/daf61e94e0e7ba73598cb87e485ee9ca2c9c5cc0", "message": "repeat test 100 times instead of 10000", "committedDate": "2020-03-10T13:35:11Z", "type": "commit"}, {"oid": "e8e8716216d24537419a8df16a56a979ac10d281", "url": "https://github.com/artipie/http/commit/e8e8716216d24537419a8df16a56a979ac10d281", "message": "inline primitive", "committedDate": "2020-03-10T14:54:36Z", "type": "commit"}, {"oid": "75c3842b01fd0ca1381927a26b9d18f4b7acd627", "url": "https://github.com/artipie/http/commit/75c3842b01fd0ca1381927a26b9d18f4b7acd627", "message": "fix typo", "committedDate": "2020-03-10T14:54:53Z", "type": "commit"}, {"oid": "3ba243fe44de7d7c3abaa8839f863d26ad660cc2", "url": "https://github.com/artipie/http/commit/3ba243fe44de7d7c3abaa8839f863d26ad660cc2", "message": "using optional instead of null", "committedDate": "2020-03-10T15:00:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MjcwNg==", "url": "https://github.com/artipie/http/pull/63#discussion_r390782706", "bodyText": "@Sammers21 is it possible to use IdentityProcessorVerification base test class from tck here?", "author": "g4s8", "createdAt": "2020-03-11T07:22:29Z", "path": "src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+/**\n+ * Tests for {@link ByteByByteSplit}.\n+ *\n+ * @since 0.4\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class ByteByByteSplitTest {", "originalCommit": "3ba243fe44de7d7c3abaa8839f863d26ad660cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MDUyNg==", "url": "https://github.com/artipie/http/pull/63#discussion_r390790526", "bodyText": "No, this class is not tck compliant for now. There is a todo for that", "author": "Sammers21", "createdAt": "2020-03-11T07:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MjcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc5MDUzNA==", "url": "https://github.com/artipie/http/pull/63#discussion_r390790534", "bodyText": "No, this class is not tck compliant for now. There is a todo for that", "author": "Sammers21", "createdAt": "2020-03-11T07:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MjcwNg=="}], "type": "inlineReview", "revised_code": {"commit": "0c4836e16f17e33217692e5b8f8805fece854a82", "chunk": "diff --git a/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\nindex 82f2a95..40317d7 100644\n--- a/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\n+++ b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\n\n@@ -29,7 +29,7 @@ import java.util.Arrays;\n import org.apache.commons.lang3.ArrayUtils;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n-import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Tests for {@link ByteByByteSplit}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MjkxNA==", "url": "https://github.com/artipie/http/pull/63#discussion_r390782914", "bodyText": "@Sammers21 I don't think we need RepeatedTest here", "author": "g4s8", "createdAt": "2020-03-11T07:23:07Z", "path": "src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.RepeatedTest;\n+\n+/**\n+ * Tests for {@link ByteByByteSplit}.\n+ *\n+ * @since 0.4\n+ * @checkstyle MagicNumberCheck (500 lines)\n+ */\n+public final class ByteByByteSplitTest {\n+\n+    @RepeatedTest(100)", "originalCommit": "3ba243fe44de7d7c3abaa8839f863d26ad660cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c4836e16f17e33217692e5b8f8805fece854a82", "chunk": "diff --git a/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\nindex 82f2a95..40317d7 100644\n--- a/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\n+++ b/src/test/java/com/artipie/http/stream/ByteByByteSplitTest.java\n\n@@ -29,7 +29,7 @@ import java.util.Arrays;\n import org.apache.commons.lang3.ArrayUtils;\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.core.IsEqual;\n-import org.junit.jupiter.api.RepeatedTest;\n+import org.junit.jupiter.api.Test;\n \n /**\n  * Tests for {@link ByteByByteSplit}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc4MzM4Mw==", "url": "https://github.com/artipie/http/pull/63#discussion_r390783383", "bodyText": "@Sammers21 you need to add one space indentation for todo puzzle, see https://github.com/yegor256/pdd#how-to-format", "author": "g4s8", "createdAt": "2020-03-11T07:24:36Z", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Byte stream split implementation based on Circular buffer of bytes.\n+ *\n+ * @todo #32:30min Thread safety improvements.\n+ * We need to ensure that there is no threading issues in case upstream emit items in a\n+ * multi threaded way.\n+ * @todo #32:30min Cancellation support.\n+ * For now downstream and down downstream cancellation is not supported,", "originalCommit": "3ba243fe44de7d7c3abaa8839f863d26ad660cc2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f12885c356aaca2f9e0823edf092125c926a0c47", "chunk": "diff --git a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\nindex b8c95fd..be6677a 100644\n--- a/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n+++ b/src/main/java/com/artipie/http/stream/ByteByByteSplit.java\n\n@@ -41,17 +41,17 @@ import org.reactivestreams.Subscription;\n  * Byte stream split implementation based on Circular buffer of bytes.\n  *\n  * @todo #32:30min Thread safety improvements.\n- * We need to ensure that there is no threading issues in case upstream emit items in a\n- * multi threaded way.\n+ *  We need to ensure that there is no threading issues in case upstream emit items in a\n+ *  multi threaded way.\n  * @todo #32:30min Cancellation support.\n- * For now downstream and down downstream cancellation is not supported,\n- * but we definitely need to have it.\n+ *  For now downstream and down downstream cancellation is not supported,\n+ *  but we definitely need to have it.\n  * @todo #32:30min Downstream emission subscription.\n- * We need to be aware of the fact that downstream switch doesn't happen instantly.\n- * For now, implementation does not rely on that.\n+ *  We need to be aware of the fact that downstream switch doesn't happen instantly.\n+ *  For now, implementation does not rely on that.\n  * @todo #32:30min Full reactive streams tck compatibility.\n- * The processor implementation should be verified by reactive streams tck in order to ensure\n- * specification compatibility.\n+ *  The processor implementation should be verified by reactive streams tck in order to ensure\n+ *  specification compatibility.\n  * @since 0.4\n  * @checkstyle MemberNameCheck (500 lines)\n  * @checkstyle LongVariable (500 lines)\n"}}, {"oid": "0c4836e16f17e33217692e5b8f8805fece854a82", "url": "https://github.com/artipie/http/commit/0c4836e16f17e33217692e5b8f8805fece854a82", "message": "Update ByteByByteSplitTest.java", "committedDate": "2020-03-11T07:51:04Z", "type": "commit"}, {"oid": "4a423e78a3c157b0bcaf79ac2f21a43b7fc33d0f", "url": "https://github.com/artipie/http/commit/4a423e78a3c157b0bcaf79ac2f21a43b7fc33d0f", "message": "remove trailing space", "committedDate": "2020-03-11T07:57:50Z", "type": "commit"}, {"oid": "f12885c356aaca2f9e0823edf092125c926a0c47", "url": "https://github.com/artipie/http/commit/f12885c356aaca2f9e0823edf092125c926a0c47", "message": "add one space identation", "committedDate": "2020-03-11T07:59:22Z", "type": "commit"}]}