{"pr_number": 823, "pr_title": "Fix rocksdb oom with g.V().hasLabel().count()", "pr_createdAt": "2020-01-09T11:48:26Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/823", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1OTc2Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r385259762", "bodyText": "same as cassandra and hbase", "author": "javeme", "createdAt": "2020-02-27T17:28:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BinaryEntryIterator.java", "diffHunk": "@@ -76,6 +76,9 @@ protected final boolean fetch() {\n             } else if (merged == this.current) {\n                 // The next entry belongs to the current entry\n                 assert this.current != null;\n+                if (this.sizeOf(this.current) >= INLINE_BATCH_SIZE) {", "originalCommit": "8773ea00b8d1f2d54fd659affdfca77c90e284e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27f4a3a35a8a9fde55a5624c3fbf9741fa9ef25d", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BinaryEntryIterator.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BinaryEntryIterator.java\nindex 39f16586..6bf8a584 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BinaryEntryIterator.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BinaryEntryIterator.java\n\n@@ -76,9 +76,6 @@ public class BinaryEntryIterator<Elem> extends BackendEntryIterator {\n             } else if (merged == this.current) {\n                 // The next entry belongs to the current entry\n                 assert this.current != null;\n-                if (this.sizeOf(this.current) >= INLINE_BATCH_SIZE) {\n-                    break;\n-                }\n             } else {\n                 // New entry\n                 assert this.next == null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUxMjQ5Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r385512493", "bodyText": "'original query' align", "author": "Linary", "createdAt": "2020-02-28T05:22:46Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java", "diffHunk": "@@ -19,89 +19,220 @@\n \n package com.baidu.hugegraph.backend.page;\n \n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n import java.util.function.Function;\n \n+import org.apache.commons.lang.NotImplementedException;\n+import org.apache.tinkerpop.gremlin.structure.util.CloseableIterator;\n+\n import com.baidu.hugegraph.backend.id.Id;\n import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.Query;\n+import com.baidu.hugegraph.backend.store.BackendEntry;\n+import com.baidu.hugegraph.iterator.CIter;\n+import com.baidu.hugegraph.iterator.Metadatable;\n import com.baidu.hugegraph.util.E;\n-import com.baidu.hugegraph.util.InsertionOrderUtil;\n-import com.google.common.collect.ImmutableSet;\n-\n-public class IdHolder {\n \n-    private final ConditionQuery query;\n-    private final Function<ConditionQuery, PageIds> idsFetcher;\n-    private boolean exhausted;\n+public abstract class IdHolder {\n \n-    private Set<Id> ids;\n+    protected final Query query;\n+    protected boolean exhausted;\n \n-    /**\n-     * For non-paging situation\n-     * @param ids   all ids\n-     */\n-    public IdHolder(Set<Id> ids) {\n-        this.query = null;\n-        this.idsFetcher = null;\n+    public IdHolder(Query query) {\n+        E.checkNotNull(query, \"query\");;\n+        this.query = query;\n         this.exhausted = false;\n-        if (ids instanceof ImmutableSet) {\n-            this.ids = InsertionOrderUtil.newSet(ids);\n-        } else {\n-            this.ids = ids;\n-        }\n     }\n \n-    /**\n-     * For paging situation\n-     * @param query         original query\n-     * @param idsFetcher    function to fetch one page ids\n-     */\n-    public IdHolder(ConditionQuery query,\n-                    Function<ConditionQuery, PageIds> idsFetcher) {\n-        E.checkArgument(query.paging(),\n-                        \"Query '%s' must include page info\", query);\n-        this.query = query.copy();\n-        this.idsFetcher = idsFetcher;\n-        this.exhausted = false;\n-        this.ids = null;\n+    public Query query() {\n+        return this.query;\n     }\n \n-    public void merge(Set<Id> ids) {\n-        E.checkNotNull(this.ids, \"ids\");\n-        this.ids.addAll(ids);\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s{origin:%s,final:%s}\",\n+                             this.getClass().getSimpleName(),\n+                             this.query.originQuery(), this.query);\n     }\n \n-    public Set<Id> ids() {\n-        E.checkNotNull(this.ids, \"ids\");\n-        return this.ids;\n-    }\n+    public abstract boolean paging();\n+\n+    public abstract Set<Id> all();\n+\n+    public abstract PageIds fetchNext(String page, long pageSize);\n+\n+    public static class FixedIdHolder extends IdHolder {\n+\n+        private final Set<Id> ids;\n \n-    public int size() {\n-        if (this.ids == null) {\n-            return 0;\n+        public FixedIdHolder(Query query, Set<Id> ids) {\n+            super(query);\n+            this.ids = ids;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Set<Id> all() {\n+            return this.ids;\n+        }\n+\n+        @Override\n+        public PageIds fetchNext(String page, long pageSize) {\n+            throw new NotImplementedException(\"FixedIdHolder.fetchNext\");\n         }\n-        return this.ids.size();\n     }\n \n-    public boolean paging() {\n-        return this.idsFetcher != null;\n+    public static class PagingIdHolder extends IdHolder {\n+\n+        private final Function<ConditionQuery, PageIds> fetcher;\n+\n+        /**\n+         * For paging situation\n+         * @param query         original query", "originalCommit": "8773ea00b8d1f2d54fd659affdfca77c90e284e9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27f4a3a35a8a9fde55a5624c3fbf9741fa9ef25d", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\nindex 80633cc7..60e966cb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\n\n@@ -19,220 +19,89 @@\n \n package com.baidu.hugegraph.backend.page;\n \n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n import java.util.Set;\n import java.util.function.Function;\n \n-import org.apache.commons.lang.NotImplementedException;\n-import org.apache.tinkerpop.gremlin.structure.util.CloseableIterator;\n-\n import com.baidu.hugegraph.backend.id.Id;\n import com.baidu.hugegraph.backend.query.ConditionQuery;\n-import com.baidu.hugegraph.backend.query.Query;\n-import com.baidu.hugegraph.backend.store.BackendEntry;\n-import com.baidu.hugegraph.iterator.CIter;\n-import com.baidu.hugegraph.iterator.Metadatable;\n import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.InsertionOrderUtil;\n+import com.google.common.collect.ImmutableSet;\n+\n+public class IdHolder {\n \n-public abstract class IdHolder {\n+    private final ConditionQuery query;\n+    private final Function<ConditionQuery, PageIds> idsFetcher;\n+    private boolean exhausted;\n \n-    protected final Query query;\n-    protected boolean exhausted;\n+    private Set<Id> ids;\n \n-    public IdHolder(Query query) {\n-        E.checkNotNull(query, \"query\");;\n-        this.query = query;\n+    /**\n+     * For non-paging situation\n+     * @param ids   all ids\n+     */\n+    public IdHolder(Set<Id> ids) {\n+        this.query = null;\n+        this.idsFetcher = null;\n         this.exhausted = false;\n+        if (ids instanceof ImmutableSet) {\n+            this.ids = InsertionOrderUtil.newSet(ids);\n+        } else {\n+            this.ids = ids;\n+        }\n     }\n \n-    public Query query() {\n-        return this.query;\n+    /**\n+     * For paging situation\n+     * @param query         original query\n+     * @param idsFetcher    function to fetch one page ids\n+     */\n+    public IdHolder(ConditionQuery query,\n+                    Function<ConditionQuery, PageIds> idsFetcher) {\n+        E.checkArgument(query.paging(),\n+                        \"Query '%s' must include page info\", query);\n+        this.query = query.copy();\n+        this.idsFetcher = idsFetcher;\n+        this.exhausted = false;\n+        this.ids = null;\n     }\n \n-    @Override\n-    public String toString() {\n-        return String.format(\"%s{origin:%s,final:%s}\",\n-                             this.getClass().getSimpleName(),\n-                             this.query.originQuery(), this.query);\n+    public void merge(Set<Id> ids) {\n+        E.checkNotNull(this.ids, \"ids\");\n+        this.ids.addAll(ids);\n     }\n \n-    public abstract boolean paging();\n-\n-    public abstract Set<Id> all();\n-\n-    public abstract PageIds fetchNext(String page, long pageSize);\n-\n-    public static class FixedIdHolder extends IdHolder {\n-\n-        private final Set<Id> ids;\n-\n-        public FixedIdHolder(Query query, Set<Id> ids) {\n-            super(query);\n-            this.ids = ids;\n-        }\n-\n-        @Override\n-        public boolean paging() {\n-            return false;\n-        }\n-\n-        @Override\n-        public Set<Id> all() {\n-            return this.ids;\n-        }\n-\n-        @Override\n-        public PageIds fetchNext(String page, long pageSize) {\n-            throw new NotImplementedException(\"FixedIdHolder.fetchNext\");\n-        }\n+    public Set<Id> ids() {\n+        E.checkNotNull(this.ids, \"ids\");\n+        return this.ids;\n     }\n \n-    public static class PagingIdHolder extends IdHolder {\n-\n-        private final Function<ConditionQuery, PageIds> fetcher;\n-\n-        /**\n-         * For paging situation\n-         * @param query         original query\n-         * @param fetcher    function to fetch one page ids\n-         */\n-        public PagingIdHolder(ConditionQuery query,\n-                              Function<ConditionQuery, PageIds> fetcher) {\n-            super(query.copy());\n-            E.checkArgument(query.paging(),\n-                            \"Query '%s' must include page info\", query);\n-            this.fetcher = fetcher;\n-        }\n-\n-        @Override\n-        public boolean paging() {\n-            return true;\n-        }\n-\n-        @Override\n-        public PageIds fetchNext(String page, long pageSize) {\n-            if (this.exhausted) {\n-                return PageIds.EMPTY;\n-            }\n-\n-            this.query.page(page);\n-            this.query.limit(pageSize);\n-\n-            PageIds result = this.fetcher.apply((ConditionQuery) this.query);\n-            assert result != null;\n-            if (result.ids().size() < pageSize || result.page() == null) {\n-                this.exhausted = true;\n-            }\n-            return result;\n-        }\n-\n-        @Override\n-        public Set<Id> all() {\n-            throw new NotImplementedException(\"PagingIdHolder.all\");\n+    public int size() {\n+        if (this.ids == null) {\n+            return 0;\n         }\n+        return this.ids.size();\n     }\n \n-    public static class BatchIdHolder extends IdHolder\n-                                      implements CIter<IdHolder> {\n-\n-        private final Iterator<BackendEntry> entries;\n-        private final Function<Long, Set<Id>> fetcher;\n-        private long count;\n-\n-        public BatchIdHolder(ConditionQuery query,\n-                             Iterator<BackendEntry> entries,\n-                             Function<Long, Set<Id>> fetcher) {\n-            super(query);\n-            this.entries = entries;\n-            this.fetcher = fetcher;\n-            this.count = 0L;\n-        }\n-\n-        @Override\n-        public boolean paging() {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean hasNext() {\n-            if (this.exhausted) {\n-                return false;\n-            }\n-            boolean hasNext= this.entries.hasNext();\n-            if (!hasNext) {\n-                this.close();\n-            }\n-            return hasNext;\n-        }\n+    public boolean paging() {\n+        return this.idsFetcher != null;\n+    }\n \n-        @Override\n-        public IdHolder next() {\n-            if (!hasNext()) {\n-                throw new NoSuchElementException();\n-            }\n-            return this;\n+    public PageIds fetchNext(String page, long pageSize) {\n+        if (this.exhausted) {\n+            return PageIds.EMPTY;\n         }\n \n-        @Override\n-        public PageIds fetchNext(String page, long batchSize) {\n-            E.checkArgument(page == null,\n-                            \"Not support page parameter by BatchIdHolder\");\n-\n-            if (this.query.limit() != Query.NO_LIMIT) {\n-                long remaining = this.remaining();\n-                if (remaining < batchSize) {\n-                    batchSize = remaining;\n-                }\n-            }\n-            assert batchSize >= 0L : batchSize;\n-            Set<Id> ids = this.fetcher.apply(batchSize);\n-            int size = ids.size();\n-            this.count += size;\n-            if (size < batchSize || size == 0) {\n-                this.close();\n-            }\n-\n-            // If there is no data, the entries is not a Metadatable object\n-            if (size == 0) {\n-                return PageIds.EMPTY;\n-            } else {\n-                return new PageIds(ids, PageState.EMPTY);\n-            }\n-        }\n+        this.query.page(page);\n+        this.query.limit(pageSize);\n \n-        @Override\n-        public Set<Id> all() {\n-            Set<Id> ids = this.fetcher.apply(this.remaining());\n-            this.count += ids.size();\n-            this.close();\n-            return ids;\n-        }\n+        PageIds result = this.idsFetcher.apply(this.query);\n \n-        private long remaining() {\n-            if (this.query.limit() == Query.NO_LIMIT) {\n-                return Query.NO_LIMIT;\n-            } else {\n-                return this.query.limit() - this.count;\n-            }\n-        }\n-\n-        @Override\n-        public void close() {\n-            if (this.exhausted) {\n-                return;\n-            }\n+        assert result != null;\n+        this.ids = result.ids();\n+        if (this.ids.size() != this.query.limit() || result.page() == null) {\n             this.exhausted = true;\n-\n-            CloseableIterator.closeIterator(this.entries);\n-        }\n-\n-        @Override\n-        public Object metadata(String meta, Object... args) {\n-            E.checkState(this.entries instanceof Metadatable,\n-                         \"Invalid iterator for Metadatable: %s\",\n-                         this.entries.getClass());\n-            return ((Metadatable) this.entries).metadata(meta, args);\n         }\n+        return result;\n     }\n }\n"}}, {"oid": "27f4a3a35a8a9fde55a5624c3fbf9741fa9ef25d", "url": "https://github.com/hugegraph/hugegraph/commit/27f4a3a35a8a9fde55a5624c3fbf9741fa9ef25d", "message": "debug\n\nChange-Id: I99c9471d75d320f3980d38f291d75c0b7237adfd", "committedDate": "2020-03-04T15:54:15Z", "type": "commit"}, {"oid": "8a052b0335a8ea68a7be57fdfa7ffca65469cc1b", "url": "https://github.com/hugegraph/hugegraph/commit/8a052b0335a8ea68a7be57fdfa7ffca65469cc1b", "message": "fix iter gloabal\n\nChange-Id: Iae0716e4624e8389b9c3bb74c8f784c54d29d0ba", "committedDate": "2020-03-05T14:58:09Z", "type": "commit"}, {"oid": "84d13bac83ee308a3c9ffe390deb1c0b447d1bb4", "url": "https://github.com/hugegraph/hugegraph/commit/84d13bac83ee308a3c9ffe390deb1c0b447d1bb4", "message": "Manually close the iterators\n\nChange-Id: I3f8da8b39d64dfc8a3aa9e888c6c07feace0878f", "committedDate": "2020-03-05T15:15:10Z", "type": "commit"}, {"oid": "947b131ff87bc5b31d875d9b86e3af48cfdd467a", "url": "https://github.com/hugegraph/hugegraph/commit/947b131ff87bc5b31d875d9b86e3af48cfdd467a", "message": "tiny improve\n\nChange-Id: I4a14339548b3906f6be024293a8c3bb0e76d65e7", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "e3d1b163fac2b7b3132093fd3b398ea5296bce20", "url": "https://github.com/hugegraph/hugegraph/commit/e3d1b163fac2b7b3132093fd3b398ea5296bce20", "message": "catch locks in every batch\n\nChange-Id: I98047052ceb791eba5e3d915cc2bfeacc2186a01", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "e337c9ae4afdf11dbaad6e04f605d124cfb6c246", "url": "https://github.com/hugegraph/hugegraph/commit/e337c9ae4afdf11dbaad6e04f605d124cfb6c246", "message": "limit iterator to list\n\nChange-Id: I75cd3d4bb66bfbbc584033b8f279c6781bf125cc", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "f7f0c018047eb10ef05e0c077ce7db15e6261ef3", "url": "https://github.com/hugegraph/hugegraph/commit/f7f0c018047eb10ef05e0c077ce7db15e6261ef3", "message": "improve cache iter\n\nChange-Id: I625ff7d826f3f3f85ebeff72a94d70e416aee242", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "6faf4f675f720efdd0665bb509b268efb854e653", "url": "https://github.com/hugegraph/hugegraph/commit/6faf4f675f720efdd0665bb509b268efb854e653", "message": "fix system index-label graph() return null\n\nChange-Id: I7f4c03d17ad584b97142a07fa10d04868f5be53a", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "4eef1dc55d7222e05885e0f4cd999b00722ad888", "url": "https://github.com/hugegraph/hugegraph/commit/4eef1dc55d7222e05885e0f4cd999b00722ad888", "message": "add QueryResults.one() method\n\nChange-Id: Ib030a2758e73b4c9a9fccf1e310875d58610e4de", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "66afee3bdd706d8d3e24ecfb9b4d4b2cc69259f1", "url": "https://github.com/hugegraph/hugegraph/commit/66afee3bdd706d8d3e24ecfb9b4d4b2cc69259f1", "message": "fix BatchIdHolder dead loop with batchSize=0\n\nChange-Id: I0d178d44ab3b28f1add736eac00fecca06fb8e47", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "8b927f3c25193a13f4282064c056446b08ce8162", "url": "https://github.com/hugegraph/hugegraph/commit/8b927f3c25193a13f4282064c056446b08ce8162", "message": "fix test iterators don't be closed\n\nChange-Id: I6851863901143b6b607a7ad8ebc611c1807a17ae", "committedDate": "2020-03-05T15:15:13Z", "type": "commit"}, {"oid": "4a003c349889d1362f6a2e61bbd75f33bc85260b", "url": "https://github.com/hugegraph/hugegraph/commit/4a003c349889d1362f6a2e61bbd75f33bc85260b", "message": "add option query.batch_size\n\nChange-Id: I3a96ade9563a56b8cdd840aaccb7664922ac6950", "committedDate": "2020-03-05T15:17:50Z", "type": "commit"}, {"oid": "47da22c603507025949693479665d75e6c201902", "url": "https://github.com/hugegraph/hugegraph/commit/47da22c603507025949693479665d75e6c201902", "message": "remove debug info\n\nChange-Id: If8561419d87642986a2f942c1998d78070617163", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "a1f1bed8159f64d679f3eb65b8ab1c020b07a524", "url": "https://github.com/hugegraph/hugegraph/commit/a1f1bed8159f64d679f3eb65b8ab1c020b07a524", "message": "force limit BatchIdHolder.all()\n\nChange-Id: Id1dd6973d0209598c710069128690e1f58e21011", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "a151db75e7a2b9885398ec6b882f2857c3130950", "url": "https://github.com/hugegraph/hugegraph/commit/a151db75e7a2b9885398ec6b882f2857c3130950", "message": "adapt ListIterator.list() return Collection<T>\n\nChange-Id: I0e5a590aafe34f53489901b9c595964c26cde977", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "afd61471769b4e7a537e3fa9d933fb9d3f270eb4", "url": "https://github.com/hugegraph/hugegraph/commit/afd61471769b4e7a537e3fa9d933fb9d3f270eb4", "message": "improve log\n\nChange-Id: If196b2450addbe62cf92fa433b661e1bc28c16cc", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "0d0f07d29c31d2e25827dbe9859ca59837f81ba3", "url": "https://github.com/hugegraph/hugegraph/commit/0d0f07d29c31d2e25827dbe9859ca59837f81ba3", "message": "tiny fix\n\nChange-Id: I5e5d1e05800ce9763831a49962d84b9a4944d7bb", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "e0a36a915b6f85628fb72cd56e26a2c50d8886b1", "url": "https://github.com/hugegraph/hugegraph/commit/e0a36a915b6f85628fb72cd56e26a2c50d8886b1", "message": "set default value of check_customized_id_exist option to false\n\nChange-Id: Ia578154ef5c58dd3fb3a11d779180a68df9f28fe", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "0120d851ff1b03843a702d4d776471689698ac60", "url": "https://github.com/hugegraph/hugegraph/commit/0120d851ff1b03843a702d4d776471689698ac60", "message": "fix cassandra oom\n\nChange-Id: Id309f7101e81a643017de3e94c01eceddf52fa8d", "committedDate": "2020-03-05T15:17:53Z", "type": "commit"}, {"oid": "632553c5190b02ad0754598d7549260889f44db3", "url": "https://github.com/hugegraph/hugegraph/commit/632553c5190b02ad0754598d7549260889f44db3", "message": "improve comment\n\nChange-Id: I118d49b45467eaefea4b0017b84bbc158692f17b", "committedDate": "2020-03-05T15:29:12Z", "type": "commit"}, {"oid": "dc5f3651e468927b4681ea157a1ac0829dac8c71", "url": "https://github.com/hugegraph/hugegraph/commit/dc5f3651e468927b4681ea157a1ac0829dac8c71", "message": "fix offset bug\n\nChange-Id: I4c772747c06890257743283ff5559ac84efbe8d9", "committedDate": "2020-03-05T16:40:46Z", "type": "forcePushed"}, {"oid": "a48603eb525ea91775062531e239870b77926abc", "url": "https://github.com/hugegraph/hugegraph/commit/a48603eb525ea91775062531e239870b77926abc", "message": "fix offset bug\n\nChange-Id: I4c772747c06890257743283ff5559ac84efbe8d9", "committedDate": "2020-03-05T17:24:33Z", "type": "commit"}, {"oid": "a48603eb525ea91775062531e239870b77926abc", "url": "https://github.com/hugegraph/hugegraph/commit/a48603eb525ea91775062531e239870b77926abc", "message": "fix offset bug\n\nChange-Id: I4c772747c06890257743283ff5559ac84efbe8d9", "committedDate": "2020-03-05T17:24:33Z", "type": "forcePushed"}, {"oid": "3fbe60b51aa6719bc6ca9abd9bf580379dee501b", "url": "https://github.com/hugegraph/hugegraph/commit/3fbe60b51aa6719bc6ca9abd9bf580379dee501b", "message": "Increase limit for intersection\n\nChange-Id: I632b9f847c55249c96d6aabfa6e037d317124fcb", "committedDate": "2020-03-05T18:43:53Z", "type": "commit"}, {"oid": "05622ae975f4ba5fa87566482153b0666f14f5df", "url": "https://github.com/hugegraph/hugegraph/commit/05622ae975f4ba5fa87566482153b0666f14f5df", "message": "fix check subRows().size() <= INLINE_BATCH_SIZE\n\nChange-Id: I773df0769bb25e139e3242b5c8436fc5fd1eec8d", "committedDate": "2020-03-05T19:02:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyOTE2Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r389729167", "bodyText": "align", "author": "Linary", "createdAt": "2020-03-09T14:34:15Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/unit/core/QueryTest.java", "diffHunk": "@@ -43,36 +49,105 @@ public void testOrderBy() {\n     @Test\n     public void testToString() {\n         Query query = new Query(HugeType.VERTEX);\n-        Assert.assertEquals(\"Query for VERTEX\", query.toString());\n+        Assert.assertEquals(\"`Query for VERTEX`\", query.toString());\n \n         query.page(\"p1\");\n-        Assert.assertEquals(\"Query for VERTEX page 'p1'\", query.toString());\n+        Assert.assertEquals(\"`Query for VERTEX page 'p1'`\", query.toString());\n \n         query = new Query(HugeType.VERTEX);\n         query.limit(10L);\n-        Assert.assertEquals(\"Query for VERTEX limit 10\", query.toString());\n+        Assert.assertEquals(\"`Query for VERTEX limit 10`\", query.toString());\n \n         query = new Query(HugeType.VERTEX);\n         query.page(\"p2\");\n         query.limit(10L);\n-        Assert.assertEquals(\"Query for VERTEX page 'p2', limit 10\",\n+        Assert.assertEquals(\"`Query for VERTEX page 'p2', limit 10`\",\n                             query.toString());\n \n         query = new Query(HugeType.VERTEX);\n         query.page(\"p3\");\n         query.offset(100L);\n         query.limit(10L);\n-        Assert.assertEquals(\"Query for VERTEX page 'p3', offset 100, limit 10\",\n-                            query.toString());\n+        Assert.assertEquals(\"`Query for VERTEX page 'p3', offset 100, \" +\n+                            \"limit 10`\", query.toString());\n \n         query = new Query(HugeType.VERTEX);\n         query.page(\"\");\n         query.offset(100L);\n         query.limit(10L);\n         query.order(HugeKeys.NAME, Order.ASC);\n         query.order(HugeKeys.FIELDS, Order.DESC);\n-        Assert.assertEquals(\"Query for VERTEX page '', offset 100, \" +\n-                            \"limit 10, order by {NAME=ASC, FIELDS=DESC}\",\n+        Assert.assertEquals(\"`Query for VERTEX page '', offset 100, \" +\n+                            \"limit 10, order by {NAME=ASC, FIELDS=DESC}`\",\n+                            query.toString());\n+\n+        IdQuery query2 = new IdQuery(HugeType.VERTEX, IdGenerator.of(1));\n+        query2.query(IdGenerator.of(3));\n+        query2.limit(10L);\n+        Assert.assertEquals(\"`Query for VERTEX limit 10 where id in [1, 3]`\",\n+                            query2.toString());\n+\n+        ConditionQuery query3 = new ConditionQuery(HugeType.EDGE);\n+        query3.eq(HugeKeys.LABEL, 3);\n+        query3.gt(HugeKeys.PROPERTIES, 10);\n+        query3.lt(HugeKeys.PROPERTIES, 18);\n+        query3.limit(10L);\n+        Assert.assertEquals(\"`Query for EDGE limit 10 where [LABEL == 3, \" +\n+                            \"PROPERTIES > 10, PROPERTIES < 18]`\",\n+                            query3.toString());\n+\n+        ConditionQuery query4 = new ConditionQuery(HugeType.EDGE);\n+        query4.query(ImmutableSet.of(IdGenerator.of(1), IdGenerator.of(3)));\n+        query4.eq(HugeKeys.LABEL, 3);\n+        query4.lt(HugeKeys.PROPERTIES, 18);\n+        query4.limit(10L);\n+        Assert.assertEquals(\"`Query for EDGE limit 10 where id in [1, 3] \" +\n+                            \"and [LABEL == 3, PROPERTIES < 18]`\",\n+                            query4.toString());\n+    }\n+\n+    @Test\n+    public void testToStringOfIdRangeQuery() {\n+        IdRangeQuery query = new IdRangeQuery(HugeType.EDGE,\n+                                               IdGenerator.of(1),", "originalCommit": "05622ae975f4ba5fa87566482153b0666f14f5df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/unit/core/QueryTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/unit/core/QueryTest.java\nindex 58103758..7f533499 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/unit/core/QueryTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/unit/core/QueryTest.java\n\n@@ -109,8 +109,8 @@ public class QueryTest {\n     @Test\n     public void testToStringOfIdRangeQuery() {\n         IdRangeQuery query = new IdRangeQuery(HugeType.EDGE,\n-                                               IdGenerator.of(1),\n-                                               IdGenerator.of(3));\n+                                              IdGenerator.of(1),\n+                                              IdGenerator.of(3));\n         query.limit(5L);\n         Assert.assertEquals(\"`Query for EDGE limit 5 where id in range [1, 3)`\",\n                             query.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MDE1NA==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r389770154", "bodyText": "What's the basis?", "author": "Linary", "createdAt": "2020-03-09T15:33:01Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1211,6 +1275,10 @@ private static boolean hasNullableProp(HugeElement element, Id key) {\n         return indexLabels;\n     }\n \n+    private static void increaseLimit(Query query) {\n+        query.limit(query.limit() * 2L + 8L);", "originalCommit": "05622ae975f4ba5fa87566482153b0666f14f5df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\nindex f0923e6e..8890d967 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n\n@@ -1276,6 +1276,11 @@ public class GraphIndexTransaction extends AbstractTransaction {\n     }\n \n     private static void increaseLimit(Query query) {\n+        assert !query.nolimit();\n+        /*\n+         * NOTE: in order to retain enough records after the intersection.\n+         * The parameters don't make much sense and need to be improved\n+         */\n         query.limit(query.limit() * 2L + 8L);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MTQyMA==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r389771420", "bodyText": "asJointQuery maybe clearer", "author": "Linary", "createdAt": "2020-03-09T15:34:56Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1285,11 +1353,57 @@ public static IndexQueries of(IndexLabel il, ConditionQuery query) {\n             return indexQueries;\n         }\n \n+        public boolean bigCapacity() {\n+            for (Query subQuery : this.values()) {\n+                if (subQuery.bigCapacity()) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n         public Map.Entry<IndexLabel, ConditionQuery> one() {\n             E.checkState(this.size() == 1,\n                          \"Please ensure index queries only contains one entry\");\n             return this.entrySet().iterator().next();\n         }\n+\n+        public Query rootQuery() {\n+            if (this.size() > 0) {\n+                return this.values().iterator().next().rootOriginQuery();\n+            }\n+            return null;\n+        }\n+\n+        public Query asQuery() {", "originalCommit": "05622ae975f4ba5fa87566482153b0666f14f5df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\nindex f0923e6e..8890d967 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n\n@@ -1375,7 +1380,7 @@ public class GraphIndexTransaction extends AbstractTransaction {\n             return null;\n         }\n \n-        public Query asQuery() {\n+        public Query asJointQuery() {\n             @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n             Collection<Query> queries = (Collection) this.values();;\n             return new JointQuery(this.rootQuery().resultType(), queries);\n"}}, {"oid": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "url": "https://github.com/hugegraph/hugegraph/commit/4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "message": "tiny improve\n\nChange-Id: Ib41ae85b65f95707386e3c5df5ed4286580009c1", "committedDate": "2020-03-09T19:01:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3MTQwMA==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r390771400", "bodyText": "add empty after \":\"", "author": "zhoney", "createdAt": "2020-03-11T06:44:08Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedGraphTransaction.java", "diffHunk": "@@ -162,42 +165,59 @@ private void unlistenChanges() {\n                 newQuery.query(vertexId);\n             }\n         }\n-        if (vertices.isEmpty()) {\n+\n+        // Join results from cache and backend\n+        ExtendableIterator<HugeVertex> results = new ExtendableIterator<>();\n+        if (!vertices.isEmpty()) {\n+            results.extend(vertices.iterator());\n+        } else {\n             // Just use the origin query if find none from the cache\n             newQuery = query;\n         }\n+\n         if (!newQuery.empty()) {\n             Iterator<HugeVertex> rs = super.queryVerticesFromBackend(newQuery);\n-            while (rs.hasNext()) {\n-                HugeVertex vertex = rs.next();\n-                vertices.add(vertex);\n+            // Generally there are not too much data with id query\n+            ListIterator<HugeVertex> listIterator = QueryResults.toList(rs);\n+            for (HugeVertex vertex :listIterator.list()) {", "originalCommit": "05622ae975f4ba5fa87566482153b0666f14f5df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4e88536e944007732d770cf1e2dc3808bc979cb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedGraphTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedGraphTransaction.java\nindex 928fc83d..b16629f1 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedGraphTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedGraphTransaction.java\n\n@@ -179,7 +179,7 @@ public final class CachedGraphTransaction extends GraphTransaction {\n             Iterator<HugeVertex> rs = super.queryVerticesFromBackend(newQuery);\n             // Generally there are not too much data with id query\n             ListIterator<HugeVertex> listIterator = QueryResults.toList(rs);\n-            for (HugeVertex vertex :listIterator.list()) {\n+            for (HugeVertex vertex : listIterator.list()) {\n                 this.verticesCache.update(vertex.id(), vertex);\n             }\n             results.extend(listIterator);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3NTQ5Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r390875492", "bodyText": "delete empty", "author": "zhoney", "createdAt": "2020-03-11T10:29:13Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/TraversalUtil.java", "diffHunk": "@@ -552,15 +552,13 @@ private static Object convSysValueIfNeeded(HugeGraph graph,HugeType type,\n     public static Iterator<Edge> filterResult(Vertex vertex,\n                                               Directions dir,\n                                               Iterator<Edge> edges) {\n-        final List<Edge> list = new ArrayList<>();\n-        while (edges.hasNext()) {\n-            Edge edge = edges.next();\n+        return new FilterIterator<>(edges, edge -> {\n             if (dir == Directions.OUT && vertex.equals(edge.outVertex()) ||\n-                dir == Directions.IN && vertex.equals(edge.inVertex())) {\n-                list.add(edge);\n+                dir == Directions.IN  && vertex.equals(edge.inVertex())) {", "originalCommit": "05622ae975f4ba5fa87566482153b0666f14f5df", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4e88536e944007732d770cf1e2dc3808bc979cb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/TraversalUtil.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/TraversalUtil.java\nindex c6810cb6..443e6c4f 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/TraversalUtil.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/TraversalUtil.java\n\n@@ -554,7 +554,7 @@ public final class TraversalUtil {\n                                               Iterator<Edge> edges) {\n         return new FilterIterator<>(edges, edge -> {\n             if (dir == Directions.OUT && vertex.equals(edge.outVertex()) ||\n-                dir == Directions.IN  && vertex.equals(edge.inVertex())) {\n+                dir == Directions.IN && vertex.equals(edge.inVertex())) {\n                 return true;\n             }\n             return false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5OTk5OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r390899999", "bodyText": "capacityContext", "author": "zhoney", "createdAt": "2020-03-11T11:14:24Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/Query.java", "diffHunk": "@@ -48,6 +51,7 @@\n     private HugeType resultType;", "originalCommit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "080802288c06c74c68c5c478da8a46d6ba3c6cea", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/Query.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/Query.java\nindex 042d1e00..2165a626 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/Query.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/Query.java\n\n@@ -44,9 +44,9 @@ public class Query implements Cloneable {\n     public static final long NO_CAPACITY = -1L;\n     public static final long DEFAULT_CAPACITY = 800000L; // HugeGraph-777\n \n-    private static final ThreadLocal<Long> capacityContex = new ThreadLocal<>();\n+    private static final ThreadLocal<Long> capacityContext = new ThreadLocal<>();\n \n-    public static final Query NONE = new Query(HugeType.UNKNOWN);\n+    protected static final Query NONE = new Query(HugeType.UNKNOWN);\n \n     private HugeType resultType;\n     private Map<HugeKeys, Order> orders;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwODQ2NA==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r390908464", "bodyText": "add empty", "author": "zhoney", "createdAt": "2020-03-11T11:31:57Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java", "diffHunk": "@@ -19,89 +19,218 @@\n \n package com.baidu.hugegraph.backend.page;\n \n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n import java.util.function.Function;\n \n+import org.apache.commons.lang.NotImplementedException;\n+import org.apache.tinkerpop.gremlin.structure.util.CloseableIterator;\n+\n import com.baidu.hugegraph.backend.id.Id;\n import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.Query;\n+import com.baidu.hugegraph.backend.store.BackendEntry;\n+import com.baidu.hugegraph.iterator.CIter;\n+import com.baidu.hugegraph.iterator.Metadatable;\n import com.baidu.hugegraph.util.E;\n-import com.baidu.hugegraph.util.InsertionOrderUtil;\n-import com.google.common.collect.ImmutableSet;\n-\n-public class IdHolder {\n \n-    private final ConditionQuery query;\n-    private final Function<ConditionQuery, PageIds> idsFetcher;\n-    private boolean exhausted;\n+public abstract class IdHolder {\n \n-    private Set<Id> ids;\n+    protected final Query query;\n+    protected boolean exhausted;\n \n-    /**\n-     * For non-paging situation\n-     * @param ids   all ids\n-     */\n-    public IdHolder(Set<Id> ids) {\n-        this.query = null;\n-        this.idsFetcher = null;\n+    public IdHolder(Query query) {\n+        E.checkNotNull(query, \"query\");;\n+        this.query = query;\n         this.exhausted = false;\n-        if (ids instanceof ImmutableSet) {\n-            this.ids = InsertionOrderUtil.newSet(ids);\n-        } else {\n-            this.ids = ids;\n-        }\n     }\n \n-    /**\n-     * For paging situation\n-     * @param query         original query\n-     * @param idsFetcher    function to fetch one page ids\n-     */\n-    public IdHolder(ConditionQuery query,\n-                    Function<ConditionQuery, PageIds> idsFetcher) {\n-        E.checkArgument(query.paging(),\n-                        \"Query '%s' must include page info\", query);\n-        this.query = query.copy();\n-        this.idsFetcher = idsFetcher;\n-        this.exhausted = false;\n-        this.ids = null;\n+    public Query query() {\n+        return this.query;\n     }\n \n-    public void merge(Set<Id> ids) {\n-        E.checkNotNull(this.ids, \"ids\");\n-        this.ids.addAll(ids);\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s{origin:%s,final:%s}\",\n+                             this.getClass().getSimpleName(),\n+                             this.query.originQuery(), this.query);\n     }\n \n-    public Set<Id> ids() {\n-        E.checkNotNull(this.ids, \"ids\");\n-        return this.ids;\n-    }\n+    public abstract boolean paging();\n \n-    public int size() {\n-        if (this.ids == null) {\n-            return 0;\n+    public abstract Set<Id> all();\n+\n+    public abstract PageIds fetchNext(String page, long pageSize);\n+\n+    public static class FixedIdHolder extends IdHolder {\n+\n+        // Used by Joint Index\n+        private final Set<Id> ids;\n+\n+        public FixedIdHolder(Query query, Set<Id> ids) {\n+            super(query);\n+            this.ids = ids;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Set<Id> all() {\n+            return this.ids;\n+        }\n+\n+        @Override\n+        public PageIds fetchNext(String page, long pageSize) {\n+            throw new NotImplementedException(\"FixedIdHolder.fetchNext\");\n         }\n-        return this.ids.size();\n     }\n \n-    public boolean paging() {\n-        return this.idsFetcher != null;\n+    public static class PagingIdHolder extends IdHolder {\n+\n+        private final Function<ConditionQuery, PageIds> fetcher;\n+\n+        public PagingIdHolder(ConditionQuery query,\n+                              Function<ConditionQuery, PageIds> fetcher) {\n+            super(query.copy());\n+            E.checkArgument(query.paging(),\n+                            \"Query '%s' must include page info\", query);\n+            this.fetcher = fetcher;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return true;\n+        }\n+\n+        @Override\n+        public PageIds fetchNext(String page, long pageSize) {\n+            if (this.exhausted) {\n+                return PageIds.EMPTY;\n+            }\n+\n+            this.query.page(page);\n+            this.query.limit(pageSize);\n+\n+            PageIds result = this.fetcher.apply((ConditionQuery) this.query);\n+            assert result != null;\n+            if (result.ids().size() < pageSize || result.page() == null) {\n+                this.exhausted = true;\n+            }\n+            return result;\n+        }\n+\n+        @Override\n+        public Set<Id> all() {\n+            throw new NotImplementedException(\"PagingIdHolder.all\");\n+        }\n     }\n \n-    public PageIds fetchNext(String page, long pageSize) {\n-        if (this.exhausted) {\n-            return PageIds.EMPTY;\n+    public static class BatchIdHolder extends IdHolder\n+                                      implements CIter<IdHolder> {\n+\n+        private final Iterator<BackendEntry> entries;\n+        private final Function<Long, Set<Id>> fetcher;\n+        private long count;\n+\n+        public BatchIdHolder(ConditionQuery query,\n+                             Iterator<BackendEntry> entries,\n+                             Function<Long, Set<Id>> fetcher) {\n+            super(query);\n+            this.entries = entries;\n+            this.fetcher = fetcher;\n+            this.count = 0L;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (this.exhausted) {\n+                return false;\n+            }\n+            boolean hasNext= this.entries.hasNext();", "originalCommit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4e88536e944007732d770cf1e2dc3808bc979cb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\nindex 65a005be..8b2816c3 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\n\n@@ -155,7 +155,7 @@ public abstract class IdHolder {\n             if (this.exhausted) {\n                 return false;\n             }\n-            boolean hasNext= this.entries.hasNext();\n+            boolean hasNext = this.entries.hasNext();\n             if (!hasNext) {\n                 this.close();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwOTI2Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r390909262", "bodyText": "batchSize might be 0?", "author": "zhoney", "createdAt": "2020-03-11T11:33:22Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java", "diffHunk": "@@ -19,89 +19,218 @@\n \n package com.baidu.hugegraph.backend.page;\n \n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n import java.util.function.Function;\n \n+import org.apache.commons.lang.NotImplementedException;\n+import org.apache.tinkerpop.gremlin.structure.util.CloseableIterator;\n+\n import com.baidu.hugegraph.backend.id.Id;\n import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.Query;\n+import com.baidu.hugegraph.backend.store.BackendEntry;\n+import com.baidu.hugegraph.iterator.CIter;\n+import com.baidu.hugegraph.iterator.Metadatable;\n import com.baidu.hugegraph.util.E;\n-import com.baidu.hugegraph.util.InsertionOrderUtil;\n-import com.google.common.collect.ImmutableSet;\n-\n-public class IdHolder {\n \n-    private final ConditionQuery query;\n-    private final Function<ConditionQuery, PageIds> idsFetcher;\n-    private boolean exhausted;\n+public abstract class IdHolder {\n \n-    private Set<Id> ids;\n+    protected final Query query;\n+    protected boolean exhausted;\n \n-    /**\n-     * For non-paging situation\n-     * @param ids   all ids\n-     */\n-    public IdHolder(Set<Id> ids) {\n-        this.query = null;\n-        this.idsFetcher = null;\n+    public IdHolder(Query query) {\n+        E.checkNotNull(query, \"query\");;\n+        this.query = query;\n         this.exhausted = false;\n-        if (ids instanceof ImmutableSet) {\n-            this.ids = InsertionOrderUtil.newSet(ids);\n-        } else {\n-            this.ids = ids;\n-        }\n     }\n \n-    /**\n-     * For paging situation\n-     * @param query         original query\n-     * @param idsFetcher    function to fetch one page ids\n-     */\n-    public IdHolder(ConditionQuery query,\n-                    Function<ConditionQuery, PageIds> idsFetcher) {\n-        E.checkArgument(query.paging(),\n-                        \"Query '%s' must include page info\", query);\n-        this.query = query.copy();\n-        this.idsFetcher = idsFetcher;\n-        this.exhausted = false;\n-        this.ids = null;\n+    public Query query() {\n+        return this.query;\n     }\n \n-    public void merge(Set<Id> ids) {\n-        E.checkNotNull(this.ids, \"ids\");\n-        this.ids.addAll(ids);\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s{origin:%s,final:%s}\",\n+                             this.getClass().getSimpleName(),\n+                             this.query.originQuery(), this.query);\n     }\n \n-    public Set<Id> ids() {\n-        E.checkNotNull(this.ids, \"ids\");\n-        return this.ids;\n-    }\n+    public abstract boolean paging();\n \n-    public int size() {\n-        if (this.ids == null) {\n-            return 0;\n+    public abstract Set<Id> all();\n+\n+    public abstract PageIds fetchNext(String page, long pageSize);\n+\n+    public static class FixedIdHolder extends IdHolder {\n+\n+        // Used by Joint Index\n+        private final Set<Id> ids;\n+\n+        public FixedIdHolder(Query query, Set<Id> ids) {\n+            super(query);\n+            this.ids = ids;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Set<Id> all() {\n+            return this.ids;\n+        }\n+\n+        @Override\n+        public PageIds fetchNext(String page, long pageSize) {\n+            throw new NotImplementedException(\"FixedIdHolder.fetchNext\");\n         }\n-        return this.ids.size();\n     }\n \n-    public boolean paging() {\n-        return this.idsFetcher != null;\n+    public static class PagingIdHolder extends IdHolder {\n+\n+        private final Function<ConditionQuery, PageIds> fetcher;\n+\n+        public PagingIdHolder(ConditionQuery query,\n+                              Function<ConditionQuery, PageIds> fetcher) {\n+            super(query.copy());\n+            E.checkArgument(query.paging(),\n+                            \"Query '%s' must include page info\", query);\n+            this.fetcher = fetcher;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return true;\n+        }\n+\n+        @Override\n+        public PageIds fetchNext(String page, long pageSize) {\n+            if (this.exhausted) {\n+                return PageIds.EMPTY;\n+            }\n+\n+            this.query.page(page);\n+            this.query.limit(pageSize);\n+\n+            PageIds result = this.fetcher.apply((ConditionQuery) this.query);\n+            assert result != null;\n+            if (result.ids().size() < pageSize || result.page() == null) {\n+                this.exhausted = true;\n+            }\n+            return result;\n+        }\n+\n+        @Override\n+        public Set<Id> all() {\n+            throw new NotImplementedException(\"PagingIdHolder.all\");\n+        }\n     }\n \n-    public PageIds fetchNext(String page, long pageSize) {\n-        if (this.exhausted) {\n-            return PageIds.EMPTY;\n+    public static class BatchIdHolder extends IdHolder\n+                                      implements CIter<IdHolder> {\n+\n+        private final Iterator<BackendEntry> entries;\n+        private final Function<Long, Set<Id>> fetcher;\n+        private long count;\n+\n+        public BatchIdHolder(ConditionQuery query,\n+                             Iterator<BackendEntry> entries,\n+                             Function<Long, Set<Id>> fetcher) {\n+            super(query);\n+            this.entries = entries;\n+            this.fetcher = fetcher;\n+            this.count = 0L;\n+        }\n+\n+        @Override\n+        public boolean paging() {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (this.exhausted) {\n+                return false;\n+            }\n+            boolean hasNext= this.entries.hasNext();\n+            if (!hasNext) {\n+                this.close();\n+            }\n+            return hasNext;\n+        }\n+\n+        @Override\n+        public IdHolder next() {\n+            if (!hasNext()) {\n+                throw new NoSuchElementException();\n+            }\n+            return this;\n+        }\n+\n+        @Override\n+        public PageIds fetchNext(String page, long batchSize) {\n+            E.checkArgument(page == null,\n+                            \"Not support page parameter by BatchIdHolder\");\n+            E.checkArgument(batchSize >= 0L,", "originalCommit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM3MTI3Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r391371273", "bodyText": "yes, it's 0 when hit the last page, and then set exhausted true", "author": "javeme", "createdAt": "2020-03-12T02:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkwOTI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "f4e88536e944007732d770cf1e2dc3808bc979cb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\nindex 65a005be..8b2816c3 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/page/IdHolder.java\n\n@@ -155,7 +155,7 @@ public abstract class IdHolder {\n             if (this.exhausted) {\n                 return false;\n             }\n-            boolean hasNext= this.entries.hasNext();\n+            boolean hasNext = this.entries.hasNext();\n             if (!hasNext) {\n                 this.close();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMTE3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/823#discussion_r390921172", "bodyText": "Expect just one result but got at least two: [%s, %s, ...]", "author": "zhoney", "createdAt": "2020-03-11T11:57:33Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/QueryResults.java", "diffHunk": "@@ -169,6 +208,23 @@ private boolean paging() {\n         return qr[0];\n     }\n \n+    public static <T> T one(Iterator<T> iterator) {\n+        try {\n+            if (iterator.hasNext()) {\n+                T result = iterator.next();\n+                if (iterator.hasNext()) {\n+                    throw new HugeException(\n+                              \"Expect just one result but got two: [%s, %s]\",", "originalCommit": "4a82d5fbe1ce34b6c68842bd4f604add8d8a6dda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4e88536e944007732d770cf1e2dc3808bc979cb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/QueryResults.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/QueryResults.java\nindex 1ff5a014..ba04c949 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/QueryResults.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/query/QueryResults.java\n\n@@ -213,9 +213,9 @@ public class QueryResults {\n             if (iterator.hasNext()) {\n                 T result = iterator.next();\n                 if (iterator.hasNext()) {\n-                    throw new HugeException(\n-                              \"Expect just one result but got two: [%s, %s]\",\n-                              result, iterator.next());\n+                    throw new HugeException(\"Expect just one result, \" +\n+                                            \"but got at least two: [%s, %s]\",\n+                                            result, iterator.next());\n                 }\n                 return result;\n             }\n"}}, {"oid": "f4e88536e944007732d770cf1e2dc3808bc979cb", "url": "https://github.com/hugegraph/hugegraph/commit/f4e88536e944007732d770cf1e2dc3808bc979cb", "message": "tiny fix\n\nChange-Id: I63c2adec8365e481682bd511dea6c6849a3d5114", "committedDate": "2020-03-12T02:46:28Z", "type": "commit"}, {"oid": "080802288c06c74c68c5c478da8a46d6ba3c6cea", "url": "https://github.com/hugegraph/hugegraph/commit/080802288c06c74c68c5c478da8a46d6ba3c6cea", "message": "fix typo capacityContex -> capacityContext\n\nChange-Id: I13daaa513b2f5ddc69bcae4d548f263ad1f5b08d", "committedDate": "2020-03-12T14:20:41Z", "type": "commit"}, {"oid": "080802288c06c74c68c5c478da8a46d6ba3c6cea", "url": "https://github.com/hugegraph/hugegraph/commit/080802288c06c74c68c5c478da8a46d6ba3c6cea", "message": "fix typo capacityContex -> capacityContext\n\nChange-Id: I13daaa513b2f5ddc69bcae4d548f263ad1f5b08d", "committedDate": "2020-03-12T14:20:41Z", "type": "forcePushed"}]}