{"pr_number": 1057, "pr_title": "fix query adjacent by filtering conditions with limit", "pr_createdAt": "2020-06-24T20:44:31Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1057", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODM1Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608357", "bodyText": "first batch only loop 1 time", "author": "houzhizhen", "createdAt": "2020-06-28T06:37:22Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                           \"name\", \"James Gosling\", \"age\", 62,\n+                                           \"lived\", \"Canadian\");\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+            if (i % TX_BATCH == 0) {", "originalCommit": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMDUzNw==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446610537", "bodyText": "not affect logic", "author": "javeme", "createdAt": "2020-06-28T07:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODM1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "956730cf418fb013cae6fb161362628dbbabaf81", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\nindex 5d597e22..363c4e40 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\n\n@@ -2214,19 +2278,111 @@ public class EdgeCoreTest extends BaseCoreTest {\n                         .limit(2).toList();\n         Assert.assertEquals(2, vertices.size());\n \n-        vertices = graph.traversal().V()\n-                        .out(\"write\", \"look\")\n-                        .limit(12)\n-                        .has(\"name\", Text.contains(\"java-1\"))\n-                        .limit(11).toList();\n-        Assert.assertEquals(11, vertices.size());\n+        boolean firstIsLook = graph.traversal().V()\n+                                   .outE(\"write\", \"look\")\n+                                   .limit(1).label().is(\"look\").hasNext();\n+        if (firstIsLook) {\n+            // query edges of louise if before james\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(1).toList();\n+            Assert.assertEquals(1, vertices.size());\n+            Assert.assertEquals(\"java-1\", vertices.get(0).value(\"name\"));\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(13)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(10, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(13)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(13).toList();\n+            Assert.assertEquals(10, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(14)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(3)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(3, vertices.size());\n+        } else {\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V(louise, james)\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            // two look edges not matched\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(3)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(1, vertices.size());\n \n-        vertices = graph.traversal().V(louise, james)\n-                        .out(\"look\", \"write\")\n-                        .limit(12)\n-                        .has(\"name\", Text.contains(\"java-1\"))\n-                        .limit(11).toList();\n-        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(20)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(1, vertices.size()); // skip java1~java19\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(21)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(2, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(22)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(3, vertices.size());\n+        }\n \n         // in\n         vertices = graph.traversal().V(java0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ0OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608449", "bodyText": "add duplicate vertex in every loop?", "author": "houzhizhen", "createdAt": "2020-06-28T06:38:28Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesWithLimitOnSuperVertexAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        int txCap = this.superNodeSize();\n+        for (int i = 0; i < txCap; i++) {\n+            Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,", "originalCommit": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwOTIxNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446609216", "bodyText": "yes, to improve performance to avoid reading every time", "author": "javeme", "createdAt": "2020-06-28T06:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "956730cf418fb013cae6fb161362628dbbabaf81", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\nindex 5d597e22..363c4e40 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\n\n@@ -2214,19 +2278,111 @@ public class EdgeCoreTest extends BaseCoreTest {\n                         .limit(2).toList();\n         Assert.assertEquals(2, vertices.size());\n \n-        vertices = graph.traversal().V()\n-                        .out(\"write\", \"look\")\n-                        .limit(12)\n-                        .has(\"name\", Text.contains(\"java-1\"))\n-                        .limit(11).toList();\n-        Assert.assertEquals(11, vertices.size());\n+        boolean firstIsLook = graph.traversal().V()\n+                                   .outE(\"write\", \"look\")\n+                                   .limit(1).label().is(\"look\").hasNext();\n+        if (firstIsLook) {\n+            // query edges of louise if before james\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(1).toList();\n+            Assert.assertEquals(1, vertices.size());\n+            Assert.assertEquals(\"java-1\", vertices.get(0).value(\"name\"));\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(13)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(10, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(13)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(13).toList();\n+            Assert.assertEquals(10, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(14)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(3)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(3, vertices.size());\n+        } else {\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V(louise, james)\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            // two look edges not matched\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(3)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(1, vertices.size());\n \n-        vertices = graph.traversal().V(louise, james)\n-                        .out(\"look\", \"write\")\n-                        .limit(12)\n-                        .has(\"name\", Text.contains(\"java-1\"))\n-                        .limit(11).toList();\n-        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(20)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(1, vertices.size()); // skip java1~java19\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(21)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(2, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(22)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(3, vertices.size());\n+        }\n \n         // in\n         vertices = graph.traversal().V(java0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608633", "bodyText": "what about limit 0?", "author": "houzhizhen", "createdAt": "2020-06-28T06:40:30Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java", "diffHunk": "@@ -1932,6 +1932,430 @@ public void testQueryEdgesWithLimitOnMultiLevel() {\n         Assert.assertEquals(1, edges.size());\n     }\n \n+    @Test\n+    public void testQueryEdgesWithLimitOnMultiLevelAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        graph.tx().commit();\n+\n+        // outE\n+        List<Edge> edges = graph.traversal().V()\n+                                .outE().has(\"score\", 0)\n+                                .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .outE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // inE\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 0)\n+                     .limit(6).toList();\n+        Assert.assertEquals(6, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(13).toList();\n+        Assert.assertEquals(12, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"score\", 1)\n+                     .limit(7).toList();\n+        Assert.assertEquals(7, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(11).toList();\n+        Assert.assertEquals(10, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE(\"authored\").has(\"score\", 1)\n+                     .limit(5).toList();\n+        Assert.assertEquals(5, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-18\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V()\n+                     .inE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        // bothE\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"score\", 1)\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(3).toList();\n+        Assert.assertEquals(2, edges.size());\n+\n+        edges = graph.traversal().V(java0)\n+                     .bothE().has(\"time\", \"2020-6-0\")\n+                     .limit(1).toList();\n+        Assert.assertEquals(1, edges.size());\n+    }\n+\n+    @Test\n+    public void testQueryEdgesAdjacentVerticesWithLimitAndFilterProp() {\n+        HugeGraph graph = graph();\n+\n+        Vertex james = graph.addVertex(T.label, \"author\", \"id\", 1,\n+                                       \"name\", \"James Gosling\", \"age\", 62,\n+                                       \"lived\", \"Canadian\");\n+        Vertex guido = graph.addVertex(T.label, \"author\", \"id\", 2,\n+                                       \"name\", \"Guido van Rossum\", \"age\", 62,\n+                                       \"lived\", \"California\");\n+        Vertex marko = graph.addVertex(T.label, \"author\", \"id\", 3,\n+                                       \"name\", \"Marko\", \"age\", 61,\n+                                       \"lived\", \"California\");\n+        guido.addEdge(\"know\", james);\n+        guido.addEdge(\"know\", marko);\n+        marko.addEdge(\"know\", james);\n+\n+        for (int i = 0; i < 20; i++) {\n+            Vertex java = graph.addVertex(T.label, \"book\", \"name\", \"java-\" + i);\n+            james.addEdge(\"authored\", java, \"score\", i % 2);\n+            james.addEdge(\"write\", java, \"time\", \"2020-6-\" + i);\n+\n+            marko.addEdge(\"authored\", java, \"score\", i % 2);\n+        }\n+\n+        Vertex louise = graph.addVertex(T.label, \"person\", \"name\", \"Louise\",\n+                                        \"city\", \"Beijing\", \"age\", 62);\n+        Vertex java0 = graph.addVertex(T.label, \"book\", \"name\", \"java-0\");\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-18\", \"score\", 1);\n+        louise.addEdge(\"look\", java0, \"time\", \"2020-6-0\", \"score\", 1);\n+\n+        Vertex jeff = graph.addVertex(T.label, \"person\", \"name\", \"Jeff\",\n+                                      \"city\", \"Beijing\", \"age\", 62);\n+        Vertex sean = graph.addVertex(T.label, \"person\", \"name\", \"Sean\",\n+                                      \"city\", \"Beijing\", \"age\", 61);\n+\n+        louise.addEdge(\"friend\", jeff);\n+        louise.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"friend\", sean);\n+        jeff.addEdge(\"follow\", marko);\n+        sean.addEdge(\"follow\", marko);\n+\n+        graph.tx().commit();\n+\n+        // out\n+        List<Vertex> vertices = graph.traversal().V()\n+                                     .out().has(\"age\", 62)\n+                                     .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(6).toList();\n+        Assert.assertEquals(5, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out().has(\"name\", \"java-0\")\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(12).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(2).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V()\n+                        .out(\"write\", \"look\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(11, vertices.size());\n+\n+        vertices = graph.traversal().V(louise, james)\n+                        .out(\"look\", \"write\")\n+                        .limit(12)\n+                        .has(\"name\", Text.contains(\"java-1\"))\n+                        .limit(11).toList();\n+        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+\n+        // in\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(4, vertices.size());\n+        Assert.assertEquals(2, new HashSet<>(vertices).size());\n+        Assert.assertTrue(vertices.contains(james));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(5).toList();\n+        Assert.assertEquals(4, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(java0)\n+                        .in().has(\"age\", 62)\n+                        .dedup().limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(louise));\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(james, jeff)\n+                        .in().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        // both\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(louise));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(sean)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .toList();\n+        Assert.assertEquals(3, vertices.size());\n+        Assert.assertTrue(vertices.contains(guido));\n+        Assert.assertTrue(vertices.contains(jeff));\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(4).toList();\n+        Assert.assertEquals(3, vertices.size());\n+\n+        vertices = graph.traversal().V(marko)\n+                        .both().has(\"age\", 62)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .toList();\n+        Assert.assertEquals(2, vertices.size());\n+        Assert.assertTrue(vertices.contains(sean));\n+        Assert.assertTrue(vertices.contains(marko));\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(3).toList();\n+        Assert.assertEquals(2, vertices.size());\n+\n+        vertices = graph.traversal().V(jeff)\n+                        .both().has(\"age\", 61)\n+                        .limit(1).toList();\n+        Assert.assertEquals(1, vertices.size());", "originalCommit": "7df4b74d4533c4edaa1e182e095edcbe1b3d1245", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODk0NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r446608945", "bodyText": "0 means none, and -1 means no limit", "author": "javeme", "createdAt": "2020-06-28T06:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0OTYyOA==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447349628", "bodyText": "It's better to add a limit(0) boundary test.", "author": "houzhizhen", "createdAt": "2020-06-30T01:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYwODYzMw=="}], "type": "inlineReview", "revised_code": {"commit": "956730cf418fb013cae6fb161362628dbbabaf81", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\nindex 5d597e22..363c4e40 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/EdgeCoreTest.java\n\n@@ -2214,19 +2278,111 @@ public class EdgeCoreTest extends BaseCoreTest {\n                         .limit(2).toList();\n         Assert.assertEquals(2, vertices.size());\n \n-        vertices = graph.traversal().V()\n-                        .out(\"write\", \"look\")\n-                        .limit(12)\n-                        .has(\"name\", Text.contains(\"java-1\"))\n-                        .limit(11).toList();\n-        Assert.assertEquals(11, vertices.size());\n+        boolean firstIsLook = graph.traversal().V()\n+                                   .outE(\"write\", \"look\")\n+                                   .limit(1).label().is(\"look\").hasNext();\n+        if (firstIsLook) {\n+            // query edges of louise if before james\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(1).toList();\n+            Assert.assertEquals(1, vertices.size());\n+            Assert.assertEquals(\"java-1\", vertices.get(0).value(\"name\"));\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(13)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(10, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(13)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(13).toList();\n+            Assert.assertEquals(10, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(14)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(3)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(3, vertices.size());\n+        } else {\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(12).toList();\n+            Assert.assertEquals(11, vertices.size());\n+\n+            vertices = graph.traversal().V(louise, james)\n+                            .out(\"write\", \"look\")\n+                            .limit(12)\n+                            .has(\"name\", Text.contains(\"java-1\"))\n+                            .limit(11).toList();\n+            // two look edges not matched\n+            Assert.assertEquals(9, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(3)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(1, vertices.size());\n \n-        vertices = graph.traversal().V(louise, james)\n-                        .out(\"look\", \"write\")\n-                        .limit(12)\n-                        .has(\"name\", Text.contains(\"java-1\"))\n-                        .limit(11).toList();\n-        Assert.assertEquals(9, vertices.size()); // two look edges not matched\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(20)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(1, vertices.size()); // skip java1~java19\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(21)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(2, vertices.size());\n+\n+            vertices = graph.traversal().V()\n+                            .out(\"write\", \"look\")\n+                            .limit(22)\n+                            .has(\"name\", Text.contains(\"java-0\"))\n+                            .limit(3).toList();\n+            Assert.assertEquals(3, vertices.size());\n+        }\n \n         // in\n         vertices = graph.traversal().V(java0)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTQ4Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379486", "bodyText": "if not use 0xff at all, prefer delete it and no need to assert", "author": "zhoney", "createdAt": "2020-06-30T03:01:30Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java", "diffHunk": "@@ -332,14 +333,27 @@ public String readString() {\n         return StringEncoding.decode(this.readBytes());\n     }\n \n-    public BytesBuffer writeStringWithEnding(String val) {\n-        if (!val.isEmpty()) {\n-            byte[] bytes = StringEncoding.encode(val);\n-            // assert '0xff' not exist in string-id-with-ending (utf8 bytes)\n-            assert !Bytes.contains(bytes, STRING_ENDING_BYTE);\n+    public BytesBuffer writeStringWithEnding(String value) {\n+        if (!value.isEmpty()) {\n+            byte[] bytes = StringEncoding.encode(value);\n+            /*\n+             * assert '0x00'/'0xFF' not exist in string index id\n+             * NOTE:\n+             *   0x00 is NULL in UTF8(or ASCII) bytes\n+             *   0xFF is not a valid byte in UTF8 bytes\n+             */\n+            assert !Bytes.contains(bytes, STRING_ENDING_BYTE_FF) :", "originalCommit": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MTExMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447451113", "bodyText": "to preserve the byte for future usages", "author": "javeme", "createdAt": "2020-06-30T06:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTQ4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e49b96cdc6b7e293ef8fd58ca88544544d1cfa8c", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java\nindex ddca8e52..81535448 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/serializer/BytesBuffer.java\n\n@@ -333,27 +332,14 @@ public final class BytesBuffer {\n         return StringEncoding.decode(this.readBytes());\n     }\n \n-    public BytesBuffer writeStringWithEnding(String value) {\n-        if (!value.isEmpty()) {\n-            byte[] bytes = StringEncoding.encode(value);\n-            /*\n-             * assert '0x00'/'0xFF' not exist in string index id\n-             * NOTE:\n-             *   0x00 is NULL in UTF8(or ASCII) bytes\n-             *   0xFF is not a valid byte in UTF8 bytes\n-             */\n-            assert !Bytes.contains(bytes, STRING_ENDING_BYTE_FF) :\n-                   \"Invalid UTF8 bytes: \" + value;\n-            if (Bytes.contains(bytes, STRING_ENDING_BYTE)) {\n-                E.checkArgument(false,\n-                                \"Can't contains byte '0x00' in string: '%s'\",\n-                                value);\n-            }\n+    public BytesBuffer writeStringWithEnding(String val) {\n+        if (!val.isEmpty()) {\n+            byte[] bytes = StringEncoding.encode(val);\n+            // assert '0xff' not exist in string-id-with-ending (utf8 bytes)\n+            assert !Bytes.contains(bytes, STRING_ENDING_BYTE);\n             this.write(bytes);\n         }\n         /*\n-         * Choose 0x00 as ending symbol (see #1057)\n-         * The following is out of date:\n          * A reasonable ending symbol should be 0x00(to ensure order), but\n          * considering that some backends like PG do not support 0x00 string,\n          * so choose 0xFF currently.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTg1OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379859", "bodyText": "INDEX_EMPTY_SYM -> INDEX_SYM_EMPTY", "author": "zhoney", "createdAt": "2020-06-30T03:02:46Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1066,6 +1045,9 @@ private static ConditionQuery constructQuery(ConditionQuery query,\n                              indexType, indexFields);\n                 Object fieldValue = query.userpropValue(indexFields.get(0));\n                 assert fieldValue instanceof String;\n+                // Escape empty String to INDEX_EMPTY_SYM", "originalCommit": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9a371bb180a2f701e48f8804ead116c06461d44", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\nindex 650bb284..0b953a4a 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n\n@@ -1045,7 +1045,6 @@ public class GraphIndexTransaction extends AbstractTransaction {\n                              indexType, indexFields);\n                 Object fieldValue = query.userpropValue(indexFields.get(0));\n                 assert fieldValue instanceof String;\n-                // Escape empty String to INDEX_EMPTY_SYM\n                 fieldValue = escapeIndexValueIfNeeded((String) fieldValue);\n \n                 // Query search index from SECONDARY_INDEX table\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3OTkwOA==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r447379908", "bodyText": "ditto", "author": "zhoney", "createdAt": "2020-06-30T03:02:54Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java", "diffHunk": "@@ -1074,11 +1056,9 @@ private static ConditionQuery constructQuery(ConditionQuery query,\n             case SECONDARY:\n                 List<Id> joinedKeys = indexFields.subList(0, queryKeys.size());\n                 String joinedValues = query.userpropValuesString(joinedKeys);\n+                // Escape empty String to INDEX_EMPTY_SYM", "originalCommit": "7ce59e20548c903db9c9e893f15ad7b7cc0d093c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9a371bb180a2f701e48f8804ead116c06461d44", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\nindex 650bb284..0b953a4a 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphIndexTransaction.java\n\n@@ -1056,7 +1055,6 @@ public class GraphIndexTransaction extends AbstractTransaction {\n             case SECONDARY:\n                 List<Id> joinedKeys = indexFields.subList(0, queryKeys.size());\n                 String joinedValues = query.userpropValuesString(joinedKeys);\n-                // Escape empty String to INDEX_EMPTY_SYM\n                 joinedValues = escapeIndexValueIfNeeded(joinedValues);\n \n                 indexQuery = new ConditionQuery(indexType.type(), query);\n"}}, {"oid": "956730cf418fb013cae6fb161362628dbbabaf81", "url": "https://github.com/hugegraph/hugegraph/commit/956730cf418fb013cae6fb161362628dbbabaf81", "message": "fix invalid byte of postgre utf8 encoding\n\nChange-Id: I63f8c56463314fa3a14b565f2619154951948b45", "committedDate": "2020-06-30T08:04:24Z", "type": "forcePushed"}, {"oid": "a9a371bb180a2f701e48f8804ead116c06461d44", "url": "https://github.com/hugegraph/hugegraph/commit/a9a371bb180a2f701e48f8804ead116c06461d44", "message": "improve comments\n\nChange-Id: Iba78468738f25f1c0bc40817f56c9597e66d165a", "committedDate": "2020-06-30T11:40:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0Njg3OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448146878", "bodyText": "add a comment later", "author": "Linary", "createdAt": "2020-07-01T06:39:59Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java", "diffHunk": "@@ -1189,7 +1195,9 @@ public static boolean matchEdgeSortKeys(ConditionQuery query,\n         for (int i = sortKeys.size(); i > 0; i--) {\n             List<Id> subFields = sortKeys.subList(0, i);\n             if (queryKeys.containsAll(subFields)) {\n-                return true;\n+                if (queryKeys.size() == subFields.size() || !matchAll) {", "originalCommit": "a9a371bb180a2f701e48f8804ead116c06461d44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxNjQ1MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448316451", "bodyText": "done", "author": "javeme", "createdAt": "2020-07-01T12:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0Njg3OA=="}], "type": "inlineReview", "revised_code": {"commit": "41816bab80398d128312edaa07b799d06637745e", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java\nindex d7bc6d5d..7f350ea3 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/tx/GraphTransaction.java\n\n@@ -1196,6 +1203,12 @@ public class GraphTransaction extends IndexableTransaction {\n             List<Id> subFields = sortKeys.subList(0, i);\n             if (queryKeys.containsAll(subFields)) {\n                 if (queryKeys.size() == subFields.size() || !matchAll) {\n+                    /*\n+                     * Return true if:\n+                     * matchAll=true and all queryKeys are in sortKeys\n+                     *  or\n+                     * partial queryKeys are in sortKeys\n+                     */\n                     return true;\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE1MDQxNQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1057#discussion_r448150415", "bodyText": "suggest rename to partialMatchEdgeSortKeys", "author": "Linary", "createdAt": "2020-07-01T06:48:11Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java", "diffHunk": "@@ -124,9 +124,15 @@ public HugeVertexStep(final VertexStep<E> originVertexStep) {\n         // Query by sort-keys\n         if (withEdgeCond && edgeLabels.length > 0) {\n             TraversalUtil.fillConditionQuery(conditions, query, graph);\n-            if (!GraphTransaction.matchEdgeSortKeys(query, graph)) {\n+            if (!GraphTransaction.matchEdgeSortKeys(query, false, graph)) {", "originalCommit": "a9a371bb180a2f701e48f8804ead116c06461d44", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "41816bab80398d128312edaa07b799d06637745e", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java\nindex 5ddfbdc9..e4172958 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/traversal/optimize/HugeVertexStep.java\n\n@@ -124,10 +124,10 @@ public final class HugeVertexStep<E extends Element>\n         // Query by sort-keys\n         if (withEdgeCond && edgeLabels.length > 0) {\n             TraversalUtil.fillConditionQuery(conditions, query, graph);\n-            if (!GraphTransaction.matchEdgeSortKeys(query, false, graph)) {\n+            if (!GraphTransaction.matchPartialEdgeSortKeys(query, graph)) {\n                 // Can't query by sysprop and by index (HugeGraph-749)\n                 query.resetUserpropConditions();\n-            } else if (GraphTransaction.matchEdgeSortKeys(query, graph)) {\n+            } else if (GraphTransaction.matchFullEdgeSortKeys(query, graph)) {\n                 // All sysprop conditions are in sort-keys\n                 withEdgeCond = false;\n             } else {\n"}}, {"oid": "e49b96cdc6b7e293ef8fd58ca88544544d1cfa8c", "url": "https://github.com/hugegraph/hugegraph/commit/e49b96cdc6b7e293ef8fd58ca88544544d1cfa8c", "message": "fix query adjacent by filtering conditions with limit\n\nfix #1052\n\nChange-Id: I11075c56e89a57cbf8e599a2e5fa6c0122663f6d", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "96d684a8eaf1161591bec70d32a482c8a374131a", "url": "https://github.com/hugegraph/hugegraph/commit/96d684a8eaf1161591bec70d32a482c8a374131a", "message": "improve test for: out().limit(m).has(k,v).limit(n)\n\nChange-Id: I34de752d7ba8a0eede3d98d29a8a841803f1fc80", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "8448e38383f92dff1be4fa13aade91f3142338a9", "url": "https://github.com/hugegraph/hugegraph/commit/8448e38383f92dff1be4fa13aade91f3142338a9", "message": "uniform edges order with sortkey\n\nChange-Id: Iba776e18809f77f592283e664e93689f53ab8719", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "f9e787ef8a3d6c054e2b0a34bbcf4a58e341cb3c", "url": "https://github.com/hugegraph/hugegraph/commit/f9e787ef8a3d6c054e2b0a34bbcf4a58e341cb3c", "message": "fix IdUtil.writeBinString test\n\nChange-Id: I36096d6723e8ddf121abb1684b6f5b93e2698c78", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "ca4f343239d14d6864870c04f5d217d904de0cee", "url": "https://github.com/hugegraph/hugegraph/commit/ca4f343239d14d6864870c04f5d217d904de0cee", "message": "fix invalid byte of postgre utf8 encoding\n\nChange-Id: I63f8c56463314fa3a14b565f2619154951948b45", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "fefe769247bc8c3487536f7dfa3bdeb8b8cbce01", "url": "https://github.com/hugegraph/hugegraph/commit/fefe769247bc8c3487536f7dfa3bdeb8b8cbce01", "message": "throw BackendException instead HugeException in backend store\n\nChange-Id: If28ca2dca496821eb36a1fc678b1827b4aa08588", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "667fb02de9c3602c303693df915937d16074029c", "url": "https://github.com/hugegraph/hugegraph/commit/667fb02de9c3602c303693df915937d16074029c", "message": "improve comments\n\nChange-Id: Iba78468738f25f1c0bc40817f56c9597e66d165a", "committedDate": "2020-07-01T08:11:49Z", "type": "commit"}, {"oid": "41816bab80398d128312edaa07b799d06637745e", "url": "https://github.com/hugegraph/hugegraph/commit/41816bab80398d128312edaa07b799d06637745e", "message": "improve matchEdgeSortKeys\n\nChange-Id: I81bcb8efb41597860416f92f53eb8ca2b769cd5d", "committedDate": "2020-07-01T08:12:21Z", "type": "commit"}, {"oid": "7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "url": "https://github.com/hugegraph/hugegraph/commit/7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "message": "fix fillFilterBySortKeys\n\nChange-Id: I57af518e3dc79b2afe4f82174c130e5a3a9ffc7a", "committedDate": "2020-07-01T12:03:37Z", "type": "commit"}, {"oid": "7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "url": "https://github.com/hugegraph/hugegraph/commit/7b68f90e048a4319fb4ade1d1c30d3de3bc53e48", "message": "fix fillFilterBySortKeys\n\nChange-Id: I57af518e3dc79b2afe4f82174c130e5a3a9ffc7a", "committedDate": "2020-07-01T12:03:37Z", "type": "forcePushed"}]}