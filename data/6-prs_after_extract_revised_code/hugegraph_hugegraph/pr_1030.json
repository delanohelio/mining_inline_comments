{"pr_number": 1030, "pr_title": "Async job schedule", "pr_createdAt": "2020-06-11T09:33:29Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1030", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Njk0MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439986940", "bodyText": "move task.cancelling() before scheduler.cancel(task)", "author": "javeme", "createdAt": "2020-06-15T07:44:01Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "diffHunk": "@@ -161,11 +161,11 @@ public void delete(@Context GraphManager manager,\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() && scheduler.cancel(task)) {\n+        if (!task.completed() &&\n+            (scheduler.cancel(task) || task.cancelling())) {", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NDE0MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440784141", "bodyText": "scheduler.cancel(task) will change task status to CANCELLING", "author": "zhoney", "createdAt": "2020-06-16T11:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4Njk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java b/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java\nindex 19e749c5..ddbd601f 100644\n--- a/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java\n+++ b/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java\n\n@@ -161,11 +161,13 @@ public class TaskAPI extends API {\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() &&\n-            (scheduler.cancel(task) || task.cancelling())) {\n+        if (!task.completed() && !task.cancelling()) {\n+            scheduler.cancel(task);\n+            assert task.cancelling();\n             return task.asMap();\n         }\n \n+        assert task.completed() || task.cancelling();\n         throw new BadRequestException(String.format(\n                   \"Can't cancel task '%s' which is completed\", id));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NzE3Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439987176", "bodyText": "assert task.completed() || task.cancelling()", "author": "javeme", "createdAt": "2020-06-15T07:44:29Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java", "diffHunk": "@@ -161,11 +161,11 @@ public void delete(@Context GraphManager manager,\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() && scheduler.cancel(task)) {\n+        if (!task.completed() &&\n+            (scheduler.cancel(task) || task.cancelling())) {\n             return task.asMap();\n         }\n \n-        assert task.completed();", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java b/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java\nindex 19e749c5..ddbd601f 100644\n--- a/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java\n+++ b/hugegraph-api/src/main/java/com/baidu/hugegraph/api/job/TaskAPI.java\n\n@@ -161,11 +161,13 @@ public class TaskAPI extends API {\n \n         TaskScheduler scheduler = graph(manager, graph).taskScheduler();\n         HugeTask<?> task = scheduler.task(IdGenerator.of(id));\n-        if (!task.completed() &&\n-            (scheduler.cancel(task) || task.cancelling())) {\n+        if (!task.completed() && !task.cancelling()) {\n+            scheduler.cancel(task);\n+            assert task.cancelling();\n             return task.asMap();\n         }\n \n+        assert task.completed() || task.cancelling();\n         throw new BadRequestException(String.format(\n                   \"Can't cancel task '%s' which is completed\", id));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NzY2Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439987663", "bodyText": "add empty line", "author": "javeme", "createdAt": "2020-06-15T07:45:29Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -196,6 +199,14 @@ public BackendFeatures backendStoreFeatures() {\n         return this.graphTransaction().storeFeatures();\n     }\n \n+    @Override\n+    public void serverStarted(String serverId, String serverRole) {\n+        LOG.info(\"Init server info for graph '{}'...\", this.name);\n+        this.serverManager.initServerInfo(serverId, serverRole);\n+        LOG.info(\"Restoring incomplete tasks for graph '{}'...\", this.name);", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java\nindex 6562165c..20a131b7 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java\n\n@@ -203,6 +203,7 @@ public class StandardHugeGraph implements HugeGraph {\n     public void serverStarted(String serverId, String serverRole) {\n         LOG.info(\"Init server info for graph '{}'...\", this.name);\n         this.serverManager.initServerInfo(serverId, serverRole);\n+\n         LOG.info(\"Restoring incomplete tasks for graph '{}'...\", this.name);\n         this.taskScheduler().restoreTasks();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4OTc4NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439989784", "bodyText": "ensure don't throw any exception out of done(), add a method ServerInfoManager.decreaseLoad(int) and just log in that method if error", "author": "javeme", "createdAt": "2020-06-15T07:49:32Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -303,7 +329,14 @@ protected void done() {\n         } catch (Throwable e) {\n             LOG.error(\"An exception occurred when calling done()\", e);\n         } finally {\n-            ((StandardTaskScheduler) this.scheduler()).remove(this.id);\n+            StandardTaskScheduler scheduler = (StandardTaskScheduler)\n+                                              this.scheduler();\n+            scheduler.remove(this.id);\n+            ServerInfoManager manager = scheduler.serverManager();\n+            HugeServerInfo serverInfo = manager.serverInfo();\n+            serverInfo.load(serverInfo.load() - this.load);\n+            manager.save(serverInfo);", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\nindex 68b8b8db..f6f0d370 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n\n@@ -333,10 +334,9 @@ public class HugeTask<V> extends FutureTask<V> {\n                                               this.scheduler();\n             scheduler.remove(this.id);\n             ServerInfoManager manager = scheduler.serverManager();\n-            HugeServerInfo serverInfo = manager.serverInfo();\n-            serverInfo.load(serverInfo.load() - this.load);\n-            manager.save(serverInfo);\n-            LOG.info(\"Task {} done on server {}\", this.id, serverInfo.id());\n+            manager.decreaseLoad(this.load);\n+\n+            LOG.info(\"Task {} done on server {}\", this.id, manager.serverId());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MjU5Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439992593", "bodyText": "rename to scheduler to not wrap line", "author": "javeme", "createdAt": "2020-06-15T07:54:49Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -59,13 +68,21 @@ private TaskManager(int pool) {\n         this.taskExecutor = ExecutorUtil.newFixedThreadPool(pool, TASK_WORKER);\n         // For save/query task state, just one thread is ok\n         this.dbExecutor = ExecutorUtil.newFixedThreadPool(1, TASK_DB_WORKER);\n+        // For schedule task to run, just one thread is ok\n+        this.taskScheduler = ExecutorUtil.newScheduledThreadPool(\n+                             1, TASK_SCHEDULER);\n+        // Start after 10s waiting for HugeGraphServer startup\n+        this.taskScheduler.scheduleWithFixedDelay(this::periodicJob,\n+                                                  10L, 3, TimeUnit.SECONDS);\n     }\n \n     public void addScheduler(HugeGraphParams graph) {\n         E.checkArgumentNotNull(graph, \"The graph can't be null\");\n         ExecutorService task = this.taskExecutor;\n         ExecutorService db = this.dbExecutor;\n-        this.schedulers.put(graph, new StandardTaskScheduler(graph, task, db));\n+        TaskScheduler taskScheduler = new StandardTaskScheduler(graph, task,", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex 24fc435d..54bb228b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -69,20 +70,20 @@ public final class TaskManager {\n         // For save/query task state, just one thread is ok\n         this.dbExecutor = ExecutorUtil.newFixedThreadPool(1, TASK_DB_WORKER);\n         // For schedule task to run, just one thread is ok\n-        this.taskScheduler = ExecutorUtil.newScheduledThreadPool(\n-                             1, TASK_SCHEDULER);\n+        this.schedulerExecutor = ExecutorUtil.newScheduledThreadPool(\n+                                 1, TASK_SCHEDULER);\n         // Start after 10s waiting for HugeGraphServer startup\n-        this.taskScheduler.scheduleWithFixedDelay(this::periodicJob,\n-                                                  10L, 3, TimeUnit.SECONDS);\n+        this.schedulerExecutor.scheduleWithFixedDelay(this::scheduleOrExecuteJob,\n+                                                      10L, SCHEDULE_PERIOD,\n+                                                      TimeUnit.SECONDS);\n     }\n \n     public void addScheduler(HugeGraphParams graph) {\n         E.checkArgumentNotNull(graph, \"The graph can't be null\");\n         ExecutorService task = this.taskExecutor;\n         ExecutorService db = this.dbExecutor;\n-        TaskScheduler taskScheduler = new StandardTaskScheduler(graph, task,\n-                                                                db);\n-        this.schedulers.put(graph, taskScheduler);\n+        TaskScheduler scheduler = new StandardTaskScheduler(graph, task, db);\n+        this.schedulers.put(graph, scheduler);\n     }\n \n     public void closeScheduler(HugeGraphParams graph) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5MzA0OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439993048", "bodyText": "align with Map", "author": "javeme", "createdAt": "2020-06-15T07:55:38Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -163,6 +189,33 @@ public int pendingTasks() {\n         return size;\n     }\n \n+    private void periodicJob() {\n+        try {\n+            for (Map.Entry<HugeGraphParams, TaskScheduler> entry :\n+                     this.schedulers.entrySet()) {", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex 24fc435d..54bb228b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -189,10 +207,14 @@ public final class TaskManager {\n         return size;\n     }\n \n-    private void periodicJob() {\n+    protected void notifyNewTask(HugeTask<?> task) {\n+        this.schedulerExecutor.submit(this::scheduleOrExecuteJob);\n+    }\n+\n+    private void scheduleOrExecuteJob() {\n         try {\n             for (Map.Entry<HugeGraphParams, TaskScheduler> entry :\n-                     this.schedulers.entrySet()) {\n+                 this.schedulers.entrySet()) {\n                 ServerInfoManager server = entry.getKey().serverManager();\n                 StandardTaskScheduler scheduler = (StandardTaskScheduler)\n                                                   entry.getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NDE1Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439994157", "bodyText": "rename to NodeRole", "author": "javeme", "createdAt": "2020-06-15T07:57:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/GraphRole.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.type.define;\n+\n+public enum GraphRole implements SerialEnum {", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/GraphRole.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/NodeRole.java\nsimilarity index 90%\nrename from hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/GraphRole.java\nrename to hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/NodeRole.java\nindex 1b2963c4..3a7a027c 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/GraphRole.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/type/define/NodeRole.java\n\n@@ -19,7 +19,7 @@\n \n package com.baidu.hugegraph.type.define;\n \n-public enum GraphRole implements SerialEnum {\n+public enum NodeRole implements SerialEnum {\n \n     MASTER(1, \"master\"),\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5NjQ2NA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439996464", "bodyText": "two empty lines", "author": "javeme", "createdAt": "2020-06-15T08:01:37Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.query.Condition;\n+import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.QueryResults;\n+import com.baidu.hugegraph.backend.tx.GraphTransaction;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.iterator.MapperIterator;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.HugeKeys;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Events;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n+import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n+\n+public class ServerInfoManager {\n+\n+    private final HugeGraphParams graph;\n+    private final EventListener eventListener;\n+    private Id serverId;\n+    private GraphRole serverRole;\n+\n+    public ServerInfoManager(HugeGraphParams graph) {\n+        E.checkNotNull(graph, \"graph\");\n+        this.graph = graph;\n+        this.eventListener = this.listenChanges();\n+    }\n+\n+    private EventListener listenChanges() {\n+        // Listen store event: \"store.inited\"\n+        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n+        EventListener eventListener = event -> {\n+            // Ensure user schema create after system info initialized\n+            if (storeEvents.contains(event.name())) {\n+                try {\n+                    this.initSchemaIfNeeded();\n+                } finally {\n+                    this.graph.closeTx();\n+                }\n+                return true;\n+            }\n+            return false;\n+        };\n+        this.graph.loadSystemStore().provider().listen(eventListener);\n+        return eventListener;\n+    }\n+\n+    private void unlistenChanges() {\n+        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n+    }\n+\n+    public boolean close() {\n+        this.unlistenChanges();\n+        return true;\n+    }\n+\n+    public void initServerInfo(String server, String role) {\n+        E.checkArgument(server != null && !server.isEmpty(),\n+                        \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n+        E.checkArgument(role != null && !role.isEmpty(),\n+                        \"The server role can't be null or empty\");\n+        GraphRole graphRole = GraphRole.valueOf(role.toUpperCase());\n+        if (graphRole.master()) {\n+            Iterator<HugeServerInfo> servers = this.serverInfos(ImmutableMap.of(\n+                                               HugeServerInfo.P.ROLE,\n+                                               GraphRole.MASTER.code()),\n+                                               1, PAGE_NONE);\n+            if (servers.hasNext()) {\n+                existed = servers.next();\n+                E.checkArgument(!existed.alive(),\n+                                \"Already existed master '%s' in current \" +\n+                                \"cluster\", existed.id());\n+            }\n+        }\n+        HugeServerInfo serverInfo = new HugeServerInfo(server, graphRole);\n+        this.serverId = serverInfo.id();\n+        this.serverRole = graphRole;\n+        this.save(serverInfo);\n+    }\n+\n+    public Id serverId() {\n+        return this.serverId;\n+    }\n+\n+    public GraphRole serverRole() {\n+        return this.serverRole;\n+    }\n+\n+    public boolean master() {\n+        return this.serverRole() != null && this.serverRole().master();\n+    }\n+\n+    public void heartbeat() {\n+        HugeServerInfo server = this.serverInfo();\n+        server.updateTime(DateUtil.now());\n+        this.save(server);\n+    }\n+\n+    private void initSchemaIfNeeded() {\n+        HugeServerInfo.schema(this.graph).initSchemaIfNeeded();\n+    }\n+\n+    private GraphTransaction tx() {\n+        return this.graph.systemTransaction();\n+    }\n+\n+    public Id save(HugeServerInfo server) {\n+        // Construct vertex from task\n+        HugeVertex vertex = this.constructVertex(server);\n+        // Add or update user in backend store, stale index might exist\n+        vertex = this.tx().addVertex(vertex);\n+        this.commitOrRollback();\n+        return vertex.id();\n+    }\n+\n+    private HugeVertex constructVertex(HugeServerInfo server) {\n+        HugeServerInfo.Schema schema = HugeServerInfo.schema(this.graph);\n+        if (!schema.existVertexLabel(HugeServerInfo.P.SERVER)) {\n+            throw new HugeException(\"Schema is missing for %s '%s'\",\n+                                    HugeServerInfo.P.SERVER, server);\n+        }\n+        return this.tx().constructVertex(false, server.asArray());\n+    }\n+\n+    private void commitOrRollback() {\n+        this.tx().commitOrRollback();\n+    }\n+\n+    public HugeServerInfo serverInfo() {\n+        Iterator<Vertex> vertices = this.tx().queryVertices(this.serverId);\n+        Vertex vertex = QueryResults.one(vertices);\n+        if (vertex == null) {\n+            return null;\n+        }\n+        return HugeServerInfo.fromVertex(vertex);\n+    }\n+\n+    public HugeServerInfo serverInfo(String name) {\n+        E.checkArgument(name != null && !name.isEmpty(),\n+                        \"The server name can't be null or emtpy\");\n+        Id server = IdGenerator.of(name);\n+        Iterator<Vertex> vertices = this.tx().queryVertices(server);\n+        Vertex vertex = QueryResults.one(vertices);\n+        if (vertex == null) {\n+            return null;\n+        }\n+        return HugeServerInfo.fromVertex(vertex);\n+    }\n+\n+    public Iterator<HugeServerInfo> serverInfos(long limit, String page) {\n+        return this.serverInfos(ImmutableMap.of(), limit, page);\n+    }\n+\n+    private Iterator<HugeServerInfo> serverInfos(Map<String, Object> conditions,\n+                                                 long limit, String page) {\n+        ConditionQuery query = new ConditionQuery(HugeType.VERTEX);\n+        if (page != null) {\n+            query.page(page);\n+        }\n+        VertexLabel vl = this.graph.graph().vertexLabel(HugeServerInfo.P.SERVER);\n+\n+", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\nindex 6d044e8b..aab03e66 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\n\n@@ -24,11 +24,14 @@ import java.util.Map;\n import java.util.Set;\n \n import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.slf4j.Logger;\n \n import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n import com.baidu.hugegraph.HugeGraphParams;\n import com.baidu.hugegraph.backend.id.Id;\n import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.page.PageInfo;\n import com.baidu.hugegraph.backend.query.Condition;\n import com.baidu.hugegraph.backend.query.ConditionQuery;\n import com.baidu.hugegraph.backend.query.QueryResults;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTU1OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r439999559", "bodyText": "seems no need to query by role", "author": "javeme", "createdAt": "2020-06-15T08:07:21Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;\n+\n+    private Id id;\n+    private GraphRole role;\n+    private int load;\n+    private Date updateTime;\n+\n+    public HugeServerInfo(String name, GraphRole role) {\n+        this(IdGenerator.of(name), role);\n+    }\n+\n+    public HugeServerInfo(Id id) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = GraphRole.WORKER;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public HugeServerInfo(Id id, GraphRole role) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = role;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public Id id() {\n+        return this.id;\n+    }\n+\n+    public String name() {\n+        return this.id.asString();\n+    }\n+\n+    public GraphRole role() {\n+        return this.role;\n+    }\n+\n+    public void role(GraphRole role) {\n+        this.role = role;\n+    }\n+\n+    public int load() {\n+        return this.load;\n+    }\n+\n+    public void load(int load) {\n+        this.load = load;\n+    }\n+\n+    public Date updateTime() {\n+        return this.updateTime;\n+    }\n+\n+    public void updateTime(Date updateTime) {\n+        this.updateTime = updateTime;\n+    }\n+\n+    public boolean alive() {\n+        long now = DateUtil.now().getTime();\n+        return this.updateTime != null &&\n+               this.updateTime.getTime() + EXPIRED_INTERVAL > now;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"HugeServerInfo(%s)%s\", this.id, this.asMap());\n+    }\n+\n+    protected boolean property(String key, Object value) {\n+        switch (key) {\n+            case P.ROLE:\n+                this.role = SerialEnum.fromCode(GraphRole.class, (byte) value);\n+                break;\n+            case P.LOAD:\n+                this.load = (int) value;\n+                break;\n+            case P.UPDATE_TIME:\n+                this.updateTime = (Date) value;\n+                break;\n+            default:\n+                throw new AssertionError(\"Unsupported key: \" + key);\n+        }\n+        return true;\n+    }\n+\n+    protected Object[] asArray() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        List<Object> list = new ArrayList<>(8);\n+\n+        list.add(T.label);\n+        list.add(P.SERVER);\n+\n+        list.add(T.id);\n+        list.add(this.id);\n+\n+        list.add(P.ROLE);\n+        list.add(this.role.code());\n+\n+        list.add(P.LOAD);\n+        list.add(this.load);\n+\n+        list.add(P.UPDATE_TIME);\n+        list.add(this.updateTime);\n+\n+        return list.toArray();\n+    }\n+\n+    public Map<String, Object> asMap() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        Map<String, Object> map = new HashMap<>();\n+\n+        map.put(Graph.Hidden.unHide(P.ID), this.id);\n+        map.put(Graph.Hidden.unHide(P.LABEL), P.SERVER);\n+        map.put(Graph.Hidden.unHide(P.ROLE), this.role);\n+        map.put(Graph.Hidden.unHide(P.LOAD), this.load);\n+        map.put(Graph.Hidden.unHide(P.UPDATE_TIME), this.updateTime);\n+\n+        return map;\n+    }\n+\n+    public static HugeServerInfo fromVertex(Vertex vertex) {\n+        HugeServerInfo server = new HugeServerInfo((Id) vertex.id());\n+        for (Iterator<VertexProperty<Object>> iter = vertex.properties();\n+             iter.hasNext();) {\n+            VertexProperty<Object> prop = iter.next();\n+            server.property(prop.key(), prop.value());\n+        }\n+        return server;\n+    }\n+\n+    public <V> boolean suitableFor(HugeTask<V> task, long now) {\n+        if (this.updateTime.getTime() + EXPIRED_INTERVAL < now ||\n+            this.load() + task.load() > MAX_LOAD) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public static Schema schema(HugeGraphParams graph) {\n+        return new Schema(graph);\n+    }\n+\n+    public static final class P {\n+\n+        public static final String SERVER = Graph.Hidden.hide(\"server\");\n+\n+        public static final String ID = T.id.getAccessor();\n+        public static final String LABEL = T.label.getAccessor();\n+\n+        public static final String NAME = \"~server_name\";\n+        public static final String ROLE = \"~server_role\";\n+        public static final String LOAD = \"~server_load\";\n+        public static final String UPDATE_TIME = \"~server_update_time\";\n+\n+        public static String unhide(String key) {\n+            final String prefix = Graph.Hidden.hide(\"server_\");\n+            if (key.startsWith(prefix)) {\n+                return key.substring(prefix.length());\n+            }\n+            return key;\n+        }\n+    }\n+\n+    public static final class Schema {\n+\n+        public static final String SERVER = P.SERVER;\n+\n+        protected final HugeGraphParams graph;\n+\n+        public Schema(HugeGraphParams graph) {\n+            this.graph = graph;\n+        }\n+\n+        public void initSchemaIfNeeded() {\n+            if (this.existVertexLabel(SERVER)) {\n+                return;\n+            }\n+\n+            HugeGraph graph = this.graph.graph();\n+            String[] properties = this.initProperties();\n+\n+            // Create vertex label '~server'\n+            VertexLabel label = graph.schema().vertexLabel(SERVER)\n+                                     .properties(properties)\n+                                     .useCustomizeStringId()\n+                                     .nullableKeys(P.ROLE, P.LOAD,\n+                                                   P.UPDATE_TIME)\n+                                     .enableLabelIndex(true)\n+                                     .build();\n+            this.graph.schemaTransaction().addVertexLabel(label);\n+\n+            // Create index\n+            this.createIndexLabel(label, P.ROLE);", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMDM0Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440800346", "bodyText": "query by role in initServerInfo of com/baidu/hugegraph/cluster/ServerInfoManager.java", "author": "zhoney", "createdAt": "2020-06-16T12:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTU1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\nindex 00aace5a..89451264 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n\n@@ -40,36 +40,39 @@ import com.baidu.hugegraph.schema.PropertyKey;\n import com.baidu.hugegraph.schema.SchemaManager;\n import com.baidu.hugegraph.schema.VertexLabel;\n import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskManager;\n import com.baidu.hugegraph.type.HugeType;\n import com.baidu.hugegraph.type.define.Cardinality;\n import com.baidu.hugegraph.type.define.DataType;\n-import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.NodeRole;\n import com.baidu.hugegraph.type.define.SerialEnum;\n import com.baidu.hugegraph.util.DateUtil;\n import com.baidu.hugegraph.util.E;\n \n public class HugeServerInfo {\n \n-    public static final int MAX_LOAD = 1000;\n-    public static final long EXPIRED_INTERVAL = 5000L;\n+    public static final long EXPIRED_INTERVAL =\n+                             TaskManager.SCHEDULE_PERIOD * 1000L * 3;\n \n     private Id id;\n-    private GraphRole role;\n+    private NodeRole role;\n+    private int maxLoad;\n     private int load;\n     private Date updateTime;\n \n-    public HugeServerInfo(String name, GraphRole role) {\n+    public HugeServerInfo(String name, NodeRole role) {\n         this(IdGenerator.of(name), role);\n     }\n \n     public HugeServerInfo(Id id) {\n         this.id = id;\n+        this.role = NodeRole.WORKER;\n+        this.maxLoad = 0;\n         this.load = 0;\n-        this.role = GraphRole.WORKER;\n         this.updateTime = DateUtil.now();\n     }\n \n-    public HugeServerInfo(Id id, GraphRole role) {\n+    public HugeServerInfo(Id id, NodeRole role) {\n         this.id = id;\n         this.load = 0;\n         this.role = role;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTM0Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440001342", "bodyText": "report MAX_LOAD by itself and add maxLoad field", "author": "javeme", "createdAt": "2020-06-15T08:10:38Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\nindex 00aace5a..89451264 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n\n@@ -40,36 +40,39 @@ import com.baidu.hugegraph.schema.PropertyKey;\n import com.baidu.hugegraph.schema.SchemaManager;\n import com.baidu.hugegraph.schema.VertexLabel;\n import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskManager;\n import com.baidu.hugegraph.type.HugeType;\n import com.baidu.hugegraph.type.define.Cardinality;\n import com.baidu.hugegraph.type.define.DataType;\n-import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.NodeRole;\n import com.baidu.hugegraph.type.define.SerialEnum;\n import com.baidu.hugegraph.util.DateUtil;\n import com.baidu.hugegraph.util.E;\n \n public class HugeServerInfo {\n \n-    public static final int MAX_LOAD = 1000;\n-    public static final long EXPIRED_INTERVAL = 5000L;\n+    public static final long EXPIRED_INTERVAL =\n+                             TaskManager.SCHEDULE_PERIOD * 1000L * 3;\n \n     private Id id;\n-    private GraphRole role;\n+    private NodeRole role;\n+    private int maxLoad;\n     private int load;\n     private Date updateTime;\n \n-    public HugeServerInfo(String name, GraphRole role) {\n+    public HugeServerInfo(String name, NodeRole role) {\n         this(IdGenerator.of(name), role);\n     }\n \n     public HugeServerInfo(Id id) {\n         this.id = id;\n+        this.role = NodeRole.WORKER;\n+        this.maxLoad = 0;\n         this.load = 0;\n-        this.role = GraphRole.WORKER;\n         this.updateTime = DateUtil.now();\n     }\n \n-    public HugeServerInfo(Id id, GraphRole role) {\n+    public HugeServerInfo(Id id, NodeRole role) {\n         this.id = id;\n         this.load = 0;\n         this.role = role;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMjc3OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440002779", "bodyText": "define 3 as const var SCHEDULE_PERIOD", "author": "javeme", "createdAt": "2020-06-15T08:13:17Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -59,13 +68,21 @@ private TaskManager(int pool) {\n         this.taskExecutor = ExecutorUtil.newFixedThreadPool(pool, TASK_WORKER);\n         // For save/query task state, just one thread is ok\n         this.dbExecutor = ExecutorUtil.newFixedThreadPool(1, TASK_DB_WORKER);\n+        // For schedule task to run, just one thread is ok\n+        this.taskScheduler = ExecutorUtil.newScheduledThreadPool(\n+                             1, TASK_SCHEDULER);\n+        // Start after 10s waiting for HugeGraphServer startup\n+        this.taskScheduler.scheduleWithFixedDelay(this::periodicJob,\n+                                                  10L, 3, TimeUnit.SECONDS);", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex 24fc435d..54bb228b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -69,20 +70,20 @@ public final class TaskManager {\n         // For save/query task state, just one thread is ok\n         this.dbExecutor = ExecutorUtil.newFixedThreadPool(1, TASK_DB_WORKER);\n         // For schedule task to run, just one thread is ok\n-        this.taskScheduler = ExecutorUtil.newScheduledThreadPool(\n-                             1, TASK_SCHEDULER);\n+        this.schedulerExecutor = ExecutorUtil.newScheduledThreadPool(\n+                                 1, TASK_SCHEDULER);\n         // Start after 10s waiting for HugeGraphServer startup\n-        this.taskScheduler.scheduleWithFixedDelay(this::periodicJob,\n-                                                  10L, 3, TimeUnit.SECONDS);\n+        this.schedulerExecutor.scheduleWithFixedDelay(this::scheduleOrExecuteJob,\n+                                                      10L, SCHEDULE_PERIOD,\n+                                                      TimeUnit.SECONDS);\n     }\n \n     public void addScheduler(HugeGraphParams graph) {\n         E.checkArgumentNotNull(graph, \"The graph can't be null\");\n         ExecutorService task = this.taskExecutor;\n         ExecutorService db = this.dbExecutor;\n-        TaskScheduler taskScheduler = new StandardTaskScheduler(graph, task,\n-                                                                db);\n-        this.schedulers.put(graph, taskScheduler);\n+        TaskScheduler scheduler = new StandardTaskScheduler(graph, task, db);\n+        this.schedulers.put(graph, scheduler);\n     }\n \n     public void closeScheduler(HugeGraphParams graph) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMzQzOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r440003439", "bodyText": "SCHEDULE_PERIOD * 3", "author": "javeme", "createdAt": "2020-06-15T08:14:32Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\nindex 00aace5a..89451264 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n\n@@ -40,36 +40,39 @@ import com.baidu.hugegraph.schema.PropertyKey;\n import com.baidu.hugegraph.schema.SchemaManager;\n import com.baidu.hugegraph.schema.VertexLabel;\n import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskManager;\n import com.baidu.hugegraph.type.HugeType;\n import com.baidu.hugegraph.type.define.Cardinality;\n import com.baidu.hugegraph.type.define.DataType;\n-import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.NodeRole;\n import com.baidu.hugegraph.type.define.SerialEnum;\n import com.baidu.hugegraph.util.DateUtil;\n import com.baidu.hugegraph.util.E;\n \n public class HugeServerInfo {\n \n-    public static final int MAX_LOAD = 1000;\n-    public static final long EXPIRED_INTERVAL = 5000L;\n+    public static final long EXPIRED_INTERVAL =\n+                             TaskManager.SCHEDULE_PERIOD * 1000L * 3;\n \n     private Id id;\n-    private GraphRole role;\n+    private NodeRole role;\n+    private int maxLoad;\n     private int load;\n     private Date updateTime;\n \n-    public HugeServerInfo(String name, GraphRole role) {\n+    public HugeServerInfo(String name, NodeRole role) {\n         this(IdGenerator.of(name), role);\n     }\n \n     public HugeServerInfo(Id id) {\n         this.id = id;\n+        this.role = NodeRole.WORKER;\n+        this.maxLoad = 0;\n         this.load = 0;\n-        this.role = GraphRole.WORKER;\n         this.updateTime = DateUtil.now();\n     }\n \n-    public HugeServerInfo(Id id, GraphRole role) {\n+    public HugeServerInfo(Id id, NodeRole role) {\n         this.id = id;\n         this.load = 0;\n         this.role = role;\n"}}, {"oid": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "url": "https://github.com/hugegraph/hugegraph/commit/e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "message": "fix CachedSchemaTransaciton cachedTypes error\n\nChange-Id: Ia3b1c163f5f90c07a748b89c4be652ccc2ae6fd9", "committedDate": "2020-06-22T10:21:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTY1NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443721655", "bodyText": "use allowValues", "author": "javeme", "createdAt": "2020-06-22T17:37:48Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -57,6 +57,15 @@ public static synchronized ServerOptions instance() {\n                     \"server-1\"\n             );\n \n+    public static final ConfigOption<String> SERVER_ROLE =\n+            new ConfigOption<>(\n+                    \"server.role\",\n+                    \"The role of nodes in the cluster, available type are \" +\n+                    \"[master, worker]\",\n+                    disallowEmpty(),", "originalCommit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "chunk": "diff --git a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\nindex 90189cb2..e735852c 100644\n--- a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n+++ b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n\n@@ -62,7 +62,7 @@ public class ServerOptions extends OptionHolder {\n                     \"server.role\",\n                     \"The role of nodes in the cluster, available type are \" +\n                     \"[master, worker]\",\n-                    disallowEmpty(),\n+                    allowValues(\"master\", \"worker\"),\n                     \"master\"\n             );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMTkyMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443721921", "bodyText": "Map<String, CachedTypes>", "author": "javeme", "createdAt": "2020-06-22T17:38:18Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "diffHunk": "@@ -47,16 +47,15 @@\n     private EventListener storeEventListener;\n     private EventListener cacheEventListener;\n \n-    private final Map<HugeType, Boolean> cachedTypes;\n+    private static final Map<HugeGraphParams, CachedTypes> CACHED_TYPES =", "originalCommit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\nindex 7b664977..75f157b7 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\n\n@@ -47,7 +47,7 @@ public final class CachedSchemaTransaction extends SchemaTransaction {\n     private EventListener storeEventListener;\n     private EventListener cacheEventListener;\n \n-    private static final Map<HugeGraphParams, CachedTypes> CACHED_TYPES =\n+    private static final Map<String, CachedTypes> CACHED_TYPES =\n             new ConcurrentHashMap<>();\n \n     public CachedSchemaTransaction(HugeGraphParams graph, BackendStore store) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyMzQzMA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443723430", "bodyText": "add some comments", "author": "javeme", "createdAt": "2020-06-22T17:41:04Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -163,6 +207,37 @@ public int pendingTasks() {\n         return size;\n     }\n \n+    protected void notifyNewTask(HugeTask<?> task) {\n+        this.schedulerExecutor.submit(this::scheduleOrExecuteJob);", "originalCommit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex 54bb228b..0043055b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -208,6 +208,7 @@ public final class TaskManager {\n     }\n \n     protected void notifyNewTask(HugeTask<?> task) {\n+        // Notify to schedule tasks initiatively when have new task\n         this.schedulerExecutor.submit(this::scheduleOrExecuteJob);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyNDIyMw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443724223", "bodyText": "improve \"not found suitable server when created\"", "author": "javeme", "createdAt": "2020-06-22T17:42:37Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -163,6 +207,37 @@ public int pendingTasks() {\n         return size;\n     }\n \n+    protected void notifyNewTask(HugeTask<?> task) {\n+        this.schedulerExecutor.submit(this::scheduleOrExecuteJob);\n+    }\n+\n+    private void scheduleOrExecuteJob() {\n+        try {\n+            for (Map.Entry<HugeGraphParams, TaskScheduler> entry :\n+                 this.schedulers.entrySet()) {\n+                ServerInfoManager server = entry.getKey().serverManager();\n+                StandardTaskScheduler scheduler = (StandardTaskScheduler)\n+                                                  entry.getValue();\n+\n+                // Update server heartbeat\n+                server.heartbeat();\n+\n+                // Master schedule tasks not found suitable server when created", "originalCommit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex 54bb228b..0043055b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -208,6 +208,7 @@ public final class TaskManager {\n     }\n \n     protected void notifyNewTask(HugeTask<?> task) {\n+        // Notify to schedule tasks initiatively when have new task\n         this.schedulerExecutor.submit(this::scheduleOrExecuteJob);\n     }\n \n"}}, {"oid": "45e827fedc56827826d1f8f32ae85c97ef5b2fa4", "url": "https://github.com/hugegraph/hugegraph/commit/45e827fedc56827826d1f8f32ae85c97ef5b2fa4", "message": "fix CachedSchemaTransaciton cachedTypes error\n\nChange-Id: Ia3b1c163f5f90c07a748b89c4be652ccc2ae6fd9", "committedDate": "2020-06-23T02:45:26Z", "type": "forcePushed"}, {"oid": "29f22584db799ecfaca0f596134dd4a82e5ea4f8", "url": "https://github.com/hugegraph/hugegraph/commit/29f22584db799ecfaca0f596134dd4a82e5ea4f8", "message": "fix CachedSchemaTransaciton cachedTypes error\n\nChange-Id: Ia3b1c163f5f90c07a748b89c4be652ccc2ae6fd9", "committedDate": "2020-06-23T03:37:24Z", "type": "forcePushed"}, {"oid": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "url": "https://github.com/hugegraph/hugegraph/commit/e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "message": "fix CachedSchemaTransaciton cachedTypes error\n\nChange-Id: Ia3b1c163f5f90c07a748b89c4be652ccc2ae6fd9", "committedDate": "2020-06-23T03:55:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDYyMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444004621", "bodyText": "why not change the parameter type", "author": "javeme", "createdAt": "2020-06-23T07:03:24Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java", "diffHunk": "@@ -267,6 +267,8 @@ public void truncateBackend() {\n \n         this.storeProvider.truncate();\n         this.storeProvider.initSystemInfo(this);\n+        this.serverStarted(this.serverManager.serverId().asString(),", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java\nindex b1911d49..a7963b52 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/StandardHugeGraph.java\n\n@@ -267,8 +256,6 @@ public class StandardHugeGraph implements HugeGraph {\n \n         this.storeProvider.truncate();\n         this.storeProvider.initSystemInfo(this);\n-        this.serverStarted(this.serverManager.serverId().asString(),\n-                           this.serverManager.serverRole().string());\n \n         LOG.info(\"Graph '{}' has been truncated\", this.name);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDc3OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444004779", "bodyText": "prefer align with CACHED_TYPES", "author": "javeme", "createdAt": "2020-06-23T07:03:47Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "diffHunk": "@@ -47,16 +47,15 @@\n     private EventListener storeEventListener;\n     private EventListener cacheEventListener;\n \n-    private final Map<HugeType, Boolean> cachedTypes;\n+    private static final Map<String, CachedTypes> CACHED_TYPES =\n+            new ConcurrentHashMap<>();", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\nindex 75f157b7..05729caa 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\n\n@@ -47,8 +47,7 @@ public final class CachedSchemaTransaction extends SchemaTransaction {\n     private EventListener storeEventListener;\n     private EventListener cacheEventListener;\n \n-    private static final Map<String, CachedTypes> CACHED_TYPES =\n-            new ConcurrentHashMap<>();\n+    private final Map<HugeType, Boolean> cachedTypes;\n \n     public CachedSchemaTransaction(HugeGraphParams graph, BackendStore store) {\n         super(graph, store);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNDk3Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444004973", "bodyText": "align with class", "author": "javeme", "createdAt": "2020-06-23T07:04:12Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java", "diffHunk": "@@ -252,9 +259,12 @@ protected void removeSchema(SchemaElement schema) {\n                     Id prefixedName = generateId(schema.type(), schema.name());\n                     this.nameCache.update(prefixedName, schema);\n                 }\n-                this.cachedTypes.putIfAbsent(type, true);\n+                this.cachedTypes().putIfAbsent(type, true);\n             }\n             return results;\n         }\n     }\n+\n+    private static class CachedTypes\n+            extends ConcurrentHashMap<HugeType, Boolean> {}", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\nindex 75f157b7..05729caa 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/cache/CachedSchemaTransaction.java\n\n@@ -259,12 +252,9 @@ public final class CachedSchemaTransaction extends SchemaTransaction {\n                     Id prefixedName = generateId(schema.type(), schema.name());\n                     this.nameCache.update(prefixedName, schema);\n                 }\n-                this.cachedTypes().putIfAbsent(type, true);\n+                this.cachedTypes.putIfAbsent(type, true);\n             }\n             return results;\n         }\n     }\n-\n-    private static class CachedTypes\n-            extends ConcurrentHashMap<HugeType, Boolean> {}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNjI3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444006272", "bodyText": "don't ignore exception here", "author": "javeme", "createdAt": "2020-06-23T07:07:02Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -642,28 +636,14 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n-        HugeTask task = null;\n+        HugeTask task;\n         try {\n-            Id id = this.id();\n             do {\n-                task = this.scheduler().task(id);\n-                if (task.status.code() > TaskStatus.QUEUED.code()) {\n-                    task.get();\n-                }\n+                task = this.scheduler().task(this.id());\n             } while (!task.completed());\n             assert task.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n         } catch (Exception e) {\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    e, e.getMessage());\n-        } finally {\n-            ((StandardTaskScheduler) task.scheduler()).remove(id);\n+            // ignore", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\nindex f6f0d370..3b663fa1 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n\n@@ -636,14 +614,19 @@ public class HugeTask<V> extends FutureTask<V> {\n     }\n \n     public void syncWait() {\n-        HugeTask task;\n         try {\n-            do {\n-                task = this.scheduler().task(this.id());\n-            } while (!task.completed());\n-            assert task.completed();\n+            this.get();\n+            assert this.completed();\n+        } catch (ExecutionException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof RuntimeException) {\n+                throw (RuntimeException) cause;\n+            }\n+            throw new HugeException(\"Async task failed with error: %s\",\n+                                    cause, cause.getMessage());\n         } catch (Exception e) {\n-            // ignore\n+            throw new HugeException(\"Async task failed with error: %s\",\n+                                    e, e.getMessage());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNzMxNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444007314", "bodyText": "should sleep between tow times of task-read", "author": "javeme", "createdAt": "2020-06-23T07:09:13Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -642,28 +636,14 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n-        HugeTask task = null;\n+        HugeTask task;\n         try {\n-            Id id = this.id();\n             do {\n-                task = this.scheduler().task(id);\n-                if (task.status.code() > TaskStatus.QUEUED.code()) {\n-                    task.get();\n-                }\n+                task = this.scheduler().task(this.id());", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\nindex f6f0d370..3b663fa1 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n\n@@ -636,14 +614,19 @@ public class HugeTask<V> extends FutureTask<V> {\n     }\n \n     public void syncWait() {\n-        HugeTask task;\n         try {\n-            do {\n-                task = this.scheduler().task(this.id());\n-            } while (!task.completed());\n-            assert task.completed();\n+            this.get();\n+            assert this.completed();\n+        } catch (ExecutionException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof RuntimeException) {\n+                throw (RuntimeException) cause;\n+            }\n+            throw new HugeException(\"Async task failed with error: %s\",\n+                                    cause, cause.getMessage());\n         } catch (Exception e) {\n-            // ignore\n+            throw new HugeException(\"Async task failed with error: %s\",\n+                                    e, e.getMessage());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNzUwNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444007504", "bodyText": "add const var", "author": "javeme", "createdAt": "2020-06-23T07:09:37Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -322,12 +325,13 @@ private void unlistenChanges() {\n         HugeServerInfo server;\n         do {\n             Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(100L, page);\n+                                                   .serverInfos(10L, page);", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -246,161 +248,31 @@ public class StandardTaskScheduler implements TaskScheduler {\n     }\n \n     @Override\n-    public synchronized <V> void cancel(HugeTask<V> task) {\n+    public <V> boolean cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n-            return;\n-        }\n+        boolean cancelled = false;\n         if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task = this.task(task.id());\n-            task.status(TaskStatus.CANCELLING);\n-            this.save(task);\n+            /*\n+             * Task may be loaded from backend store and not initialized. like:\n+             * A task is completed but failed to save in the last step,\n+             * resulting in the status of the task not being updated to storage,\n+             * the task is not in memory, so it's not initialized when canceled.\n+             */\n+            this.initTaskCallable(task);\n+            cancelled = task.cancel(true);\n             this.remove(task.id());\n-            // Notify master server to schedule and execute immediately\n-            TaskManager.instance().notifyNewTask(task);\n-        }\n-    }\n-\n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            HugeTask<V> task;\n-            while (tasks.hasNext()) {\n-                task = tasks.next();\n-                if (task.server() != null) {\n-                    // Skip if already scheduled\n-                    continue;\n-                }\n-                HugeServerInfo server = this.pickWorker(task);\n-                if (server == null) {\n-                    LOG.debug(\"The master can not find suitable server to \" +\n-                              \"execute task: {}, wait for next schedule\",\n-                              task.id());\n-                    return;\n-                }\n-\n-                // Found suitable server, update task server and server load\n-                assert server.id() != null;\n-                task.server(server.id());\n-                this.save(task);\n-                server.load(server.load() + task.load());\n-                this.serverManager().save(server);\n-                LOG.info(\"Schedule task {} to server {}\",\n-                         task.id(), server.id());\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                this.initTaskCallable(task);\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    this.submitTask(task);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n-        HugeServerInfo master = null;\n-        HugeServerInfo minServer = null;\n-        int minLoad = Integer.MAX_VALUE;\n-        boolean hasWorker = false;\n-        long now = DateUtil.now().getTime();\n-\n-        // Iterate servers to find suitable one\n-        String page = PageInfo.PAGE_NONE;\n-        HugeServerInfo server;\n-        do {\n-            Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(10L, page);\n-            while (servers.hasNext()) {\n-                server = servers.next();\n-                if (!server.alive()) {\n-                    continue;\n-                }\n-\n-                if (server.role().master()) {\n-                    master = server;\n-                    continue;\n-                }\n-\n-                hasWorker = true;\n-                if (!server.suitableFor(task, now)) {\n-                    continue;\n-                }\n-                if (server.load() < minLoad) {\n-                    minLoad = server.load();\n-                    minServer = server;\n-                }\n-            }\n-            page = PageInfo.pageInfo(servers);\n-        } while (page != null);\n-\n-        // Only schedule to master if there is no workers and master is suitable\n-        if (!hasWorker && master.suitableFor(task, now)) {\n-            return master;\n         }\n-\n-        return minServer;\n-    }\n-\n-    protected <V> void cancelTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.CANCELLING,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                /*\n-                 * Task may be loaded from backend store and not initialized.\n-                 * like: A task is completed but failed to save in the last\n-                 * step, resulting in the status of the task not being\n-                 * updated to storage, the task is not in memory, so it's not\n-                 * initialized when canceled.\n-                 */\n-                this.initTaskCallable(task);\n-                @SuppressWarnings(\"unchecked\")\n-                HugeTask<V> memTask = (HugeTask<V>) this.tasks.get(task.id());\n-                if (memTask != null) {\n-                    task = memTask;\n-                }\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    boolean cancelled = task.cancel(true);\n-                    LOG.info(\"Server {} cancel task {} with result {}\",\n-                             server, task.id(), cancelled);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n+        assert task.completed();\n+        return cancelled;\n     }\n \n-    protected ServerInfoManager serverManager() {\n-        return this.graph.serverManager();\n-    }\n-\n-    public void remove(Id id) {\n+    protected void remove(Id id) {\n         HugeTask<?> task = this.tasks.remove(id);\n-        assert task == null || task.completed() ||\n-               task.cancelling() || task.isCancelled();\n+        assert task == null || task.completed() || task.isCancelled();\n     }\n \n     @Override\n     public <V> void save(HugeTask<V> task) {\n-        task.scheduler(this);\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         this.call(() -> {\n             // Construct vertex from task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNzg3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444007872", "bodyText": "keep protected", "author": "javeme", "createdAt": "2020-06-23T07:10:23Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -388,9 +392,10 @@ protected ServerInfoManager serverManager() {\n         return this.graph.serverManager();\n     }\n \n-    protected void remove(Id id) {\n+    public void remove(Id id) {", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -246,161 +248,31 @@ public class StandardTaskScheduler implements TaskScheduler {\n     }\n \n     @Override\n-    public synchronized <V> void cancel(HugeTask<V> task) {\n+    public <V> boolean cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n-            return;\n-        }\n+        boolean cancelled = false;\n         if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task = this.task(task.id());\n-            task.status(TaskStatus.CANCELLING);\n-            this.save(task);\n+            /*\n+             * Task may be loaded from backend store and not initialized. like:\n+             * A task is completed but failed to save in the last step,\n+             * resulting in the status of the task not being updated to storage,\n+             * the task is not in memory, so it's not initialized when canceled.\n+             */\n+            this.initTaskCallable(task);\n+            cancelled = task.cancel(true);\n             this.remove(task.id());\n-            // Notify master server to schedule and execute immediately\n-            TaskManager.instance().notifyNewTask(task);\n-        }\n-    }\n-\n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            HugeTask<V> task;\n-            while (tasks.hasNext()) {\n-                task = tasks.next();\n-                if (task.server() != null) {\n-                    // Skip if already scheduled\n-                    continue;\n-                }\n-                HugeServerInfo server = this.pickWorker(task);\n-                if (server == null) {\n-                    LOG.debug(\"The master can not find suitable server to \" +\n-                              \"execute task: {}, wait for next schedule\",\n-                              task.id());\n-                    return;\n-                }\n-\n-                // Found suitable server, update task server and server load\n-                assert server.id() != null;\n-                task.server(server.id());\n-                this.save(task);\n-                server.load(server.load() + task.load());\n-                this.serverManager().save(server);\n-                LOG.info(\"Schedule task {} to server {}\",\n-                         task.id(), server.id());\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                this.initTaskCallable(task);\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    this.submitTask(task);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n-        HugeServerInfo master = null;\n-        HugeServerInfo minServer = null;\n-        int minLoad = Integer.MAX_VALUE;\n-        boolean hasWorker = false;\n-        long now = DateUtil.now().getTime();\n-\n-        // Iterate servers to find suitable one\n-        String page = PageInfo.PAGE_NONE;\n-        HugeServerInfo server;\n-        do {\n-            Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(10L, page);\n-            while (servers.hasNext()) {\n-                server = servers.next();\n-                if (!server.alive()) {\n-                    continue;\n-                }\n-\n-                if (server.role().master()) {\n-                    master = server;\n-                    continue;\n-                }\n-\n-                hasWorker = true;\n-                if (!server.suitableFor(task, now)) {\n-                    continue;\n-                }\n-                if (server.load() < minLoad) {\n-                    minLoad = server.load();\n-                    minServer = server;\n-                }\n-            }\n-            page = PageInfo.pageInfo(servers);\n-        } while (page != null);\n-\n-        // Only schedule to master if there is no workers and master is suitable\n-        if (!hasWorker && master.suitableFor(task, now)) {\n-            return master;\n         }\n-\n-        return minServer;\n-    }\n-\n-    protected <V> void cancelTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.CANCELLING,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                /*\n-                 * Task may be loaded from backend store and not initialized.\n-                 * like: A task is completed but failed to save in the last\n-                 * step, resulting in the status of the task not being\n-                 * updated to storage, the task is not in memory, so it's not\n-                 * initialized when canceled.\n-                 */\n-                this.initTaskCallable(task);\n-                @SuppressWarnings(\"unchecked\")\n-                HugeTask<V> memTask = (HugeTask<V>) this.tasks.get(task.id());\n-                if (memTask != null) {\n-                    task = memTask;\n-                }\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    boolean cancelled = task.cancel(true);\n-                    LOG.info(\"Server {} cancel task {} with result {}\",\n-                             server, task.id(), cancelled);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n+        assert task.completed();\n+        return cancelled;\n     }\n \n-    protected ServerInfoManager serverManager() {\n-        return this.graph.serverManager();\n-    }\n-\n-    public void remove(Id id) {\n+    protected void remove(Id id) {\n         HugeTask<?> task = this.tasks.remove(id);\n-        assert task == null || task.completed() ||\n-               task.cancelling() || task.isCancelled();\n+        assert task == null || task.completed() || task.isCancelled();\n     }\n \n     @Override\n     public <V> void save(HugeTask<V> task) {\n-        task.scheduler(this);\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         this.call(() -> {\n             // Construct vertex from task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwOTUzOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444009539", "bodyText": "wrap line after \"link \"", "author": "javeme", "createdAt": "2020-06-23T07:13:33Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java", "diffHunk": "@@ -900,13 +904,22 @@ public void testRemoveVertexLabelUsedByEdgeLabel() {\n \n         marko.addEdge(\"write\", java, \"time\", \"2016-12-12\", \"weight\", 0.3);\n \n-        Assert.assertThrows(HugeException.class, () -> {\n-            schema.vertexLabel(\"person\").remove();\n-        });\n-\n-        Assert.assertThrows(HugeException.class, () -> {\n-            schema.vertexLabel(\"book\").remove();\n-        });\n+        TaskScheduler scheduler = graph().taskScheduler();\n+        Id id = schema.vertexLabel(\"person\").remove();\n+        sleepAWhile(1000L);\n+        HugeTask task = scheduler.task(id);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Not allowed to remove vertex label \" +\n+                              \"'person' because the edge label 'write' \" +\n+                              \"still link with it\", task.result());\n+\n+        id = schema.vertexLabel(\"book\").remove();\n+        sleepAWhile(1000L);\n+        task = scheduler.task(id);\n+        Assert.assertEquals(TaskStatus.FAILED, task.status());\n+        Assert.assertContains(\"Not allowed to remove vertex label 'book' \" +\n+                              \"because the edge label 'write' still link with\" +", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java\nindex 91d1534c..24e8701d 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/VertexLabelCoreTest.java\n\n@@ -904,22 +900,13 @@ public class VertexLabelCoreTest extends SchemaCoreTest {\n \n         marko.addEdge(\"write\", java, \"time\", \"2016-12-12\", \"weight\", 0.3);\n \n-        TaskScheduler scheduler = graph().taskScheduler();\n-        Id id = schema.vertexLabel(\"person\").remove();\n-        sleepAWhile(1000L);\n-        HugeTask task = scheduler.task(id);\n-        Assert.assertEquals(TaskStatus.FAILED, task.status());\n-        Assert.assertContains(\"Not allowed to remove vertex label \" +\n-                              \"'person' because the edge label 'write' \" +\n-                              \"still link with it\", task.result());\n-\n-        id = schema.vertexLabel(\"book\").remove();\n-        sleepAWhile(1000L);\n-        task = scheduler.task(id);\n-        Assert.assertEquals(TaskStatus.FAILED, task.status());\n-        Assert.assertContains(\"Not allowed to remove vertex label 'book' \" +\n-                              \"because the edge label 'write' still link with\" +\n-                              \" it\", task.result());\n+        Assert.assertThrows(HugeException.class, () -> {\n+            schema.vertexLabel(\"person\").remove();\n+        });\n+\n+        Assert.assertThrows(HugeException.class, () -> {\n+            schema.vertexLabel(\"book\").remove();\n+        });\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMDI0MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444010241", "bodyText": "why not call this.task().scheduler()", "author": "javeme", "createdAt": "2020-06-23T07:14:58Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -565,7 +575,38 @@ public void testGremlinJobAndRestore() throws Exception {\n                .input(request.toJson())\n                .job(new GremlinJob());\n \n-        HugeTask<Object> task = builder.schedule();\n-        return task;\n+        return builder.schedule();\n+    }\n+\n+    private static void sleepAWhile() {\n+        sleepAWhile(SLEEP_TIME);\n+    }\n+\n+    private static void sleepAWhile(long ms) {\n+        try {\n+            Thread.sleep(ms);\n+        } catch (InterruptedException e) {\n+            // ignore\n+        }\n+    }\n+\n+    public static class TestTaskCallable<V> extends TaskCallable<V> {\n+\n+        public TestTaskCallable() {\n+            // pass\n+        }\n+\n+        @Override\n+        public V call() throws Exception {\n+            Thread.sleep(SLEEP_TIME);\n+            return null;\n+        }\n+\n+        @Override\n+        public void done() {\n+            StandardTaskScheduler scheduler = Whitebox.getInternalState(\n+                                              this.task(), \"scheduler\");", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NTc3NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444095775", "bodyText": "HugeTask doesn't have scheduler()\nAlready change to this.graph().taskScheduler()", "author": "zhoney", "createdAt": "2020-06-23T09:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMDI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java\nindex f0a5b03e..99f3ca06 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java\n\n@@ -575,38 +565,7 @@ public class TaskCoreTest extends BaseCoreTest {\n                .input(request.toJson())\n                .job(new GremlinJob());\n \n-        return builder.schedule();\n-    }\n-\n-    private static void sleepAWhile() {\n-        sleepAWhile(SLEEP_TIME);\n-    }\n-\n-    private static void sleepAWhile(long ms) {\n-        try {\n-            Thread.sleep(ms);\n-        } catch (InterruptedException e) {\n-            // ignore\n-        }\n-    }\n-\n-    public static class TestTaskCallable<V> extends TaskCallable<V> {\n-\n-        public TestTaskCallable() {\n-            // pass\n-        }\n-\n-        @Override\n-        public V call() throws Exception {\n-            Thread.sleep(SLEEP_TIME);\n-            return null;\n-        }\n-\n-        @Override\n-        public void done() {\n-            StandardTaskScheduler scheduler = Whitebox.getInternalState(\n-                                              this.task(), \"scheduler\");\n-            scheduler.save(this.task());\n-        }\n+        HugeTask<Object> task = builder.schedule();\n+        return task;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMDk3Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444010976", "bodyText": "why read again", "author": "javeme", "createdAt": "2020-06-23T07:16:22Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -246,16 +246,19 @@ private void unlistenChanges() {\n     }\n \n     @Override\n-    public <V> void cancel(HugeTask<V> task) {\n+    public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         if (!this.serverManager().master()) {\n             return;\n         }\n         if (!task.completed()) {\n             // The task scheduled to workers, waiting for worker cancel\n+            task = this.task(task.id());", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -246,161 +248,31 @@ public class StandardTaskScheduler implements TaskScheduler {\n     }\n \n     @Override\n-    public synchronized <V> void cancel(HugeTask<V> task) {\n+    public <V> boolean cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n-            return;\n-        }\n+        boolean cancelled = false;\n         if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task = this.task(task.id());\n-            task.status(TaskStatus.CANCELLING);\n-            this.save(task);\n+            /*\n+             * Task may be loaded from backend store and not initialized. like:\n+             * A task is completed but failed to save in the last step,\n+             * resulting in the status of the task not being updated to storage,\n+             * the task is not in memory, so it's not initialized when canceled.\n+             */\n+            this.initTaskCallable(task);\n+            cancelled = task.cancel(true);\n             this.remove(task.id());\n-            // Notify master server to schedule and execute immediately\n-            TaskManager.instance().notifyNewTask(task);\n-        }\n-    }\n-\n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            HugeTask<V> task;\n-            while (tasks.hasNext()) {\n-                task = tasks.next();\n-                if (task.server() != null) {\n-                    // Skip if already scheduled\n-                    continue;\n-                }\n-                HugeServerInfo server = this.pickWorker(task);\n-                if (server == null) {\n-                    LOG.debug(\"The master can not find suitable server to \" +\n-                              \"execute task: {}, wait for next schedule\",\n-                              task.id());\n-                    return;\n-                }\n-\n-                // Found suitable server, update task server and server load\n-                assert server.id() != null;\n-                task.server(server.id());\n-                this.save(task);\n-                server.load(server.load() + task.load());\n-                this.serverManager().save(server);\n-                LOG.info(\"Schedule task {} to server {}\",\n-                         task.id(), server.id());\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                this.initTaskCallable(task);\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    this.submitTask(task);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n-        HugeServerInfo master = null;\n-        HugeServerInfo minServer = null;\n-        int minLoad = Integer.MAX_VALUE;\n-        boolean hasWorker = false;\n-        long now = DateUtil.now().getTime();\n-\n-        // Iterate servers to find suitable one\n-        String page = PageInfo.PAGE_NONE;\n-        HugeServerInfo server;\n-        do {\n-            Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(10L, page);\n-            while (servers.hasNext()) {\n-                server = servers.next();\n-                if (!server.alive()) {\n-                    continue;\n-                }\n-\n-                if (server.role().master()) {\n-                    master = server;\n-                    continue;\n-                }\n-\n-                hasWorker = true;\n-                if (!server.suitableFor(task, now)) {\n-                    continue;\n-                }\n-                if (server.load() < minLoad) {\n-                    minLoad = server.load();\n-                    minServer = server;\n-                }\n-            }\n-            page = PageInfo.pageInfo(servers);\n-        } while (page != null);\n-\n-        // Only schedule to master if there is no workers and master is suitable\n-        if (!hasWorker && master.suitableFor(task, now)) {\n-            return master;\n         }\n-\n-        return minServer;\n-    }\n-\n-    protected <V> void cancelTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.CANCELLING,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                /*\n-                 * Task may be loaded from backend store and not initialized.\n-                 * like: A task is completed but failed to save in the last\n-                 * step, resulting in the status of the task not being\n-                 * updated to storage, the task is not in memory, so it's not\n-                 * initialized when canceled.\n-                 */\n-                this.initTaskCallable(task);\n-                @SuppressWarnings(\"unchecked\")\n-                HugeTask<V> memTask = (HugeTask<V>) this.tasks.get(task.id());\n-                if (memTask != null) {\n-                    task = memTask;\n-                }\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    boolean cancelled = task.cancel(true);\n-                    LOG.info(\"Server {} cancel task {} with result {}\",\n-                             server, task.id(), cancelled);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n+        assert task.completed();\n+        return cancelled;\n     }\n \n-    protected ServerInfoManager serverManager() {\n-        return this.graph.serverManager();\n-    }\n-\n-    public void remove(Id id) {\n+    protected void remove(Id id) {\n         HugeTask<?> task = this.tasks.remove(id);\n-        assert task == null || task.completed() ||\n-               task.cancelling() || task.isCancelled();\n+        assert task == null || task.completed() || task.isCancelled();\n     }\n \n     @Override\n     public <V> void save(HugeTask<V> task) {\n-        task.scheduler(this);\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         this.call(() -> {\n             // Construct vertex from task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMzYyNQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444013625", "bodyText": "keep private", "author": "javeme", "createdAt": "2020-06-23T07:21:28Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -193,12 +204,26 @@ private void unlistenChanges() {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n+        if (!this.serverManager().master()) {\n+            throw new HugeException(\"The worker can't schedule task\");\n+        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n+\n         task.status(TaskStatus.QUEUED);\n-        return this.submitTask(task);\n+        if (task.callable() instanceof EphemeralJob) {\n+            return this.submitTask(task);\n+        }\n+\n+        // Just save task to be scheduled by periodic scheduler\n+        this.save(task);\n+\n+        // Notify master server to schedule and execute immediately\n+        TaskManager.instance().notifyNewTask(task);\n+\n+        return task;\n     }\n \n-    private <V> Future<?> submitTask(HugeTask<V> task) {\n+    public  <V> Future<?> submitTask(HugeTask<V> task) {", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -204,23 +197,27 @@ public class StandardTaskScheduler implements TaskScheduler {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n-        if (!this.serverManager().master()) {\n-            throw new HugeException(\"The worker can't schedule task\");\n-        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-\n         task.status(TaskStatus.QUEUED);\n-        if (task.callable() instanceof EphemeralJob) {\n-            return this.submitTask(task);\n-        }\n+        initTaskCallable(task);\n+        this.scheduleTask(task);\n \n-        // Just save task to be scheduled by periodic scheduler\n-        this.save(task);\n+        return null;\n+//        return this.submitTask(task);\n+    }\n \n-        // Notify master server to schedule and execute immediately\n-        TaskManager.instance().notifyNewTask(task);\n+    private <V> void scheduleTask(HugeTask<V> task) {\n+        if (this.graph.role().master()) {\n+            String node = this.pickWorker();\n+            task.node(node);\n+            this.save(task);\n+        }\n+    }\n \n-        return task;\n+    private synchronized String pickWorker() {\n+        // TODO: master calculate load of workers and assign task to a suitable\n+        // worker\n+        return \"worker1\";\n     }\n \n     public  <V> Future<?> submitTask(HugeTask<V> task) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NDE4NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443394185", "bodyText": "types", "author": "Linary", "createdAt": "2020-06-22T08:24:44Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -56,6 +56,15 @@ public static synchronized ServerOptions instance() {\n                     \"server-1\"\n             );\n \n+    public static final ConfigOption<String> SERVER_ROLE =\n+            new ConfigOption<>(\n+                    \"server.role\",\n+                    \"The role of nodes in the cluster, available type are \" +", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "chunk": "diff --git a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\nindex 942ffb54..e735852c 100644\n--- a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n+++ b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n\n@@ -61,7 +62,7 @@ public class ServerOptions extends OptionHolder {\n                     \"server.role\",\n                     \"The role of nodes in the cluster, available type are \" +\n                     \"[master, worker]\",\n-                    disallowEmpty(),\n+                    allowValues(\"master\", \"worker\"),\n                     \"master\"\n             );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5NjkxOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r443396919", "bodyText": "initialCapacity should be 10, actually DEFAULT_CAPACITY is 10", "author": "Linary", "createdAt": "2020-06-22T08:29:04Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tinkerpop.gremlin.structure.Graph;\n+import org.apache.tinkerpop.gremlin.structure.T;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n+\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.schema.IndexLabel;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.SchemaManager;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.Cardinality;\n+import com.baidu.hugegraph.type.define.DataType;\n+import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.SerialEnum;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+\n+public class HugeServerInfo {\n+\n+    public static final int MAX_LOAD = 1000;\n+    public static final long EXPIRED_INTERVAL = 5000L;\n+\n+    private Id id;\n+    private GraphRole role;\n+    private int load;\n+    private Date updateTime;\n+\n+    public HugeServerInfo(String name, GraphRole role) {\n+        this(IdGenerator.of(name), role);\n+    }\n+\n+    public HugeServerInfo(Id id) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = GraphRole.WORKER;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public HugeServerInfo(Id id, GraphRole role) {\n+        this.id = id;\n+        this.load = 0;\n+        this.role = role;\n+        this.updateTime = DateUtil.now();\n+    }\n+\n+    public Id id() {\n+        return this.id;\n+    }\n+\n+    public String name() {\n+        return this.id.asString();\n+    }\n+\n+    public GraphRole role() {\n+        return this.role;\n+    }\n+\n+    public void role(GraphRole role) {\n+        this.role = role;\n+    }\n+\n+    public int load() {\n+        return this.load;\n+    }\n+\n+    public void load(int load) {\n+        this.load = load;\n+    }\n+\n+    public Date updateTime() {\n+        return this.updateTime;\n+    }\n+\n+    public void updateTime(Date updateTime) {\n+        this.updateTime = updateTime;\n+    }\n+\n+    public boolean alive() {\n+        long now = DateUtil.now().getTime();\n+        return this.updateTime != null &&\n+               this.updateTime.getTime() + EXPIRED_INTERVAL > now;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"HugeServerInfo(%s)%s\", this.id, this.asMap());\n+    }\n+\n+    protected boolean property(String key, Object value) {\n+        switch (key) {\n+            case P.ROLE:\n+                this.role = SerialEnum.fromCode(GraphRole.class, (byte) value);\n+                break;\n+            case P.LOAD:\n+                this.load = (int) value;\n+                break;\n+            case P.UPDATE_TIME:\n+                this.updateTime = (Date) value;\n+                break;\n+            default:\n+                throw new AssertionError(\"Unsupported key: \" + key);\n+        }\n+        return true;\n+    }\n+\n+    protected Object[] asArray() {\n+        E.checkState(this.id != null, \"Server id can't be null\");\n+\n+        List<Object> list = new ArrayList<>(8);", "originalCommit": "f277c9fa17ac76d2c18342c5fe6d70dfe8741365", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e96baf2a6bc8e2dfa86f609f56f971a82618a5e2", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\nindex 00aace5a..89451264 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n\n@@ -40,36 +40,39 @@ import com.baidu.hugegraph.schema.PropertyKey;\n import com.baidu.hugegraph.schema.SchemaManager;\n import com.baidu.hugegraph.schema.VertexLabel;\n import com.baidu.hugegraph.task.HugeTask;\n+import com.baidu.hugegraph.task.TaskManager;\n import com.baidu.hugegraph.type.HugeType;\n import com.baidu.hugegraph.type.define.Cardinality;\n import com.baidu.hugegraph.type.define.DataType;\n-import com.baidu.hugegraph.type.define.GraphRole;\n+import com.baidu.hugegraph.type.define.NodeRole;\n import com.baidu.hugegraph.type.define.SerialEnum;\n import com.baidu.hugegraph.util.DateUtil;\n import com.baidu.hugegraph.util.E;\n \n public class HugeServerInfo {\n \n-    public static final int MAX_LOAD = 1000;\n-    public static final long EXPIRED_INTERVAL = 5000L;\n+    public static final long EXPIRED_INTERVAL =\n+                             TaskManager.SCHEDULE_PERIOD * 1000L * 3;\n \n     private Id id;\n-    private GraphRole role;\n+    private NodeRole role;\n+    private int maxLoad;\n     private int load;\n     private Date updateTime;\n \n-    public HugeServerInfo(String name, GraphRole role) {\n+    public HugeServerInfo(String name, NodeRole role) {\n         this(IdGenerator.of(name), role);\n     }\n \n     public HugeServerInfo(Id id) {\n         this.id = id;\n+        this.role = NodeRole.WORKER;\n+        this.maxLoad = 0;\n         this.load = 0;\n-        this.role = GraphRole.WORKER;\n         this.updateTime = DateUtil.now();\n     }\n \n-    public HugeServerInfo(Id id, GraphRole role) {\n+    public HugeServerInfo(Id id, NodeRole role) {\n         this.id = id;\n         this.load = 0;\n         this.role = role;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNTE5OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444015198", "bodyText": "add comment: Unit second", "author": "javeme", "createdAt": "2020-06-23T07:24:34Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -26,27 +26,37 @@\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n+import org.slf4j.Logger;\n+\n import com.baidu.hugegraph.HugeException;\n import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.cluster.ServerInfoManager;\n import com.baidu.hugegraph.util.E;\n import com.baidu.hugegraph.util.ExecutorUtil;\n+import com.baidu.hugegraph.util.Log;\n \n public final class TaskManager {\n \n+    private static final Logger LOG = Log.logger(TaskManager.class);\n+\n     public static final String TASK_WORKER = \"task-worker-%d\";\n     public static final String TASK_DB_WORKER = \"task-db-worker-%d\";\n+    public static final String TASK_SCHEDULER = \"task-scheduler-%d\";\n \n+    public static final int SCHEDULE_PERIOD = 3;", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex 0043055b..128685ef 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -21,6 +21,7 @@ package com.baidu.hugegraph.task;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.Callable;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxODY0MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444018641", "bodyText": "prefer set DATA_PATH before openGraphs() in each test", "author": "javeme", "createdAt": "2020-06-23T07:31:09Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java", "diffHunk": "@@ -325,8 +329,17 @@ public void testCreateGraphsWithMultiDisksForRocksDB() {\n             config.setProperty(key, conf.getProperty(key));\n         }\n         ((BaseConfiguration) config).setDelimiterParsingDisabled(true);\n+        String backend = config.getString(CoreOptions.BACKEND.name());\n+        String data = config.getString(RocksDBOptions.DATA_PATH.name());\n+        String wal = config.getString(RocksDBOptions.DATA_PATH.name());\n         for (String graphName : graphNames) {\n             config.setProperty(CoreOptions.STORE.name(), graphName);\n+            if (backend.equals(\"rocksdb\")) {\n+                String dataPath = data + \"/\" + graphName;\n+                config.setProperty(RocksDBOptions.DATA_PATH.name(), dataPath);", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE3NjU3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444176572", "bodyText": "address it", "author": "javeme", "createdAt": "2020-06-23T12:15:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxODY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java\nindex f93f09e2..b3f8e34e 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/MultiGraphsTest.java\n\n@@ -329,17 +325,8 @@ public class MultiGraphsTest {\n             config.setProperty(key, conf.getProperty(key));\n         }\n         ((BaseConfiguration) config).setDelimiterParsingDisabled(true);\n-        String backend = config.getString(CoreOptions.BACKEND.name());\n-        String data = config.getString(RocksDBOptions.DATA_PATH.name());\n-        String wal = config.getString(RocksDBOptions.DATA_PATH.name());\n         for (String graphName : graphNames) {\n             config.setProperty(CoreOptions.STORE.name(), graphName);\n-            if (backend.equals(\"rocksdb\")) {\n-                String dataPath = data + \"/\" + graphName;\n-                config.setProperty(RocksDBOptions.DATA_PATH.name(), dataPath);\n-                String walPath = wal + \"/\" + graphName;\n-                config.setProperty(RocksDBOptions.WAL_PATH.name(), walPath);\n-            }\n             graphs.add((HugeGraph) GraphFactory.open(config));\n         }\n         return graphs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDI4Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444020287", "bodyText": "unneeded index", "author": "javeme", "createdAt": "2020-06-23T07:34:19Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -550,13 +700,14 @@ public void initSchema() {\n                                      .useCustomizeNumberId()\n                                      .nullableKeys(P.DESCRIPTION, P.CONTEXT,\n                                                    P.UPDATE, P.INPUT, P.RESULT,\n-                                                   P.DEPENDENCIES)\n+                                                   P.DEPENDENCIES, P.SERVER)\n                                      .enableLabelIndex(true)\n                                      .build();\n             this.params().schemaTransaction().addVertexLabel(label);\n \n             // Create index\n             this.createIndexLabel(label, P.STATUS);\n+            this.createIndexLabel(label, P.SERVER);", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -700,14 +577,14 @@ public class StandardTaskScheduler implements TaskScheduler {\n                                      .useCustomizeNumberId()\n                                      .nullableKeys(P.DESCRIPTION, P.CONTEXT,\n                                                    P.UPDATE, P.INPUT, P.RESULT,\n-                                                   P.DEPENDENCIES, P.SERVER)\n+                                                   P.DEPENDENCIES, P.NODE)\n                                      .enableLabelIndex(true)\n                                      .build();\n             this.params().schemaTransaction().addVertexLabel(label);\n \n             // Create index\n             this.createIndexLabel(label, P.STATUS);\n-            this.createIndexLabel(label, P.SERVER);\n+            this.createIndexLabel(label, P.NODE);\n         }\n \n         private boolean existVertexLabel(String label) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMjIzMg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444022232", "bodyText": "minServer -- the meaning is incomprehensible", "author": "javeme", "createdAt": "2020-06-23T07:37:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -226,31 +246,161 @@ private void unlistenChanges() {\n     }\n \n     @Override\n-    public <V> boolean cancel(HugeTask<V> task) {\n+    public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        boolean cancelled = false;\n+        if (!this.serverManager().master()) {\n+            return;\n+        }\n         if (!task.completed()) {\n-            /*\n-             * Task may be loaded from backend store and not initialized. like:\n-             * A task is completed but failed to save in the last step,\n-             * resulting in the status of the task not being updated to storage,\n-             * the task is not in memory, so it's not initialized when canceled.\n-             */\n-            this.initTaskCallable(task);\n-            cancelled = task.cancel(true);\n+            // The task scheduled to workers, waiting for worker cancel\n+            task = this.task(task.id());\n+            task.status(TaskStatus.CANCELLING);\n+            this.save(task);\n             this.remove(task.id());\n+            // Notify master server to schedule and execute immediately\n+            TaskManager.instance().notifyNewTask(task);\n         }\n-        assert task.completed();\n-        return cancelled;\n     }\n \n-    protected void remove(Id id) {\n+    protected synchronized <V> void scheduleTasks() {\n+        // Master schedule all queued tasks to suitable servers\n+        String page = PageInfo.PAGE_NONE;\n+        do {\n+            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n+                                                     PAGE_SIZE, page);\n+            HugeTask<V> task;\n+            while (tasks.hasNext()) {\n+                task = tasks.next();\n+                if (task.server() != null) {\n+                    // Skip if already scheduled\n+                    continue;\n+                }\n+                HugeServerInfo server = this.pickWorker(task);\n+                if (server == null) {\n+                    LOG.debug(\"The master can not find suitable server to \" +\n+                              \"execute task: {}, wait for next schedule\",\n+                              task.id());\n+                    return;\n+                }\n+\n+                // Found suitable server, update task server and server load\n+                assert server.id() != null;\n+                task.server(server.id());\n+                this.save(task);\n+                server.load(server.load() + task.load());\n+                this.serverManager().save(server);\n+                LOG.info(\"Schedule task {} to server {}\",\n+                         task.id(), server.id());\n+            }\n+            page = PageInfo.pageInfo(tasks);\n+        } while (page != null);\n+    }\n+\n+    protected <V> void executeTasksForWorker(Id server) {\n+        String page = PageInfo.PAGE_NONE;\n+        do {\n+            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n+                                                     PAGE_SIZE, page);\n+            while (tasks.hasNext()) {\n+                HugeTask<V> task = tasks.next();\n+                this.initTaskCallable(task);\n+                Id taskServer = task.server();\n+                if (taskServer != null && taskServer.equals(server)) {\n+                    this.submitTask(task);\n+                }\n+            }\n+            page = PageInfo.pageInfo(tasks);\n+        } while (page != null);\n+    }\n+\n+    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n+        HugeServerInfo master = null;\n+        HugeServerInfo minServer = null;", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -246,161 +248,31 @@ public class StandardTaskScheduler implements TaskScheduler {\n     }\n \n     @Override\n-    public synchronized <V> void cancel(HugeTask<V> task) {\n+    public <V> boolean cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n-            return;\n-        }\n+        boolean cancelled = false;\n         if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task = this.task(task.id());\n-            task.status(TaskStatus.CANCELLING);\n-            this.save(task);\n+            /*\n+             * Task may be loaded from backend store and not initialized. like:\n+             * A task is completed but failed to save in the last step,\n+             * resulting in the status of the task not being updated to storage,\n+             * the task is not in memory, so it's not initialized when canceled.\n+             */\n+            this.initTaskCallable(task);\n+            cancelled = task.cancel(true);\n             this.remove(task.id());\n-            // Notify master server to schedule and execute immediately\n-            TaskManager.instance().notifyNewTask(task);\n-        }\n-    }\n-\n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            HugeTask<V> task;\n-            while (tasks.hasNext()) {\n-                task = tasks.next();\n-                if (task.server() != null) {\n-                    // Skip if already scheduled\n-                    continue;\n-                }\n-                HugeServerInfo server = this.pickWorker(task);\n-                if (server == null) {\n-                    LOG.debug(\"The master can not find suitable server to \" +\n-                              \"execute task: {}, wait for next schedule\",\n-                              task.id());\n-                    return;\n-                }\n-\n-                // Found suitable server, update task server and server load\n-                assert server.id() != null;\n-                task.server(server.id());\n-                this.save(task);\n-                server.load(server.load() + task.load());\n-                this.serverManager().save(server);\n-                LOG.info(\"Schedule task {} to server {}\",\n-                         task.id(), server.id());\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                this.initTaskCallable(task);\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    this.submitTask(task);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n-        HugeServerInfo master = null;\n-        HugeServerInfo minServer = null;\n-        int minLoad = Integer.MAX_VALUE;\n-        boolean hasWorker = false;\n-        long now = DateUtil.now().getTime();\n-\n-        // Iterate servers to find suitable one\n-        String page = PageInfo.PAGE_NONE;\n-        HugeServerInfo server;\n-        do {\n-            Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(10L, page);\n-            while (servers.hasNext()) {\n-                server = servers.next();\n-                if (!server.alive()) {\n-                    continue;\n-                }\n-\n-                if (server.role().master()) {\n-                    master = server;\n-                    continue;\n-                }\n-\n-                hasWorker = true;\n-                if (!server.suitableFor(task, now)) {\n-                    continue;\n-                }\n-                if (server.load() < minLoad) {\n-                    minLoad = server.load();\n-                    minServer = server;\n-                }\n-            }\n-            page = PageInfo.pageInfo(servers);\n-        } while (page != null);\n-\n-        // Only schedule to master if there is no workers and master is suitable\n-        if (!hasWorker && master.suitableFor(task, now)) {\n-            return master;\n         }\n-\n-        return minServer;\n-    }\n-\n-    protected <V> void cancelTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.CANCELLING,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                /*\n-                 * Task may be loaded from backend store and not initialized.\n-                 * like: A task is completed but failed to save in the last\n-                 * step, resulting in the status of the task not being\n-                 * updated to storage, the task is not in memory, so it's not\n-                 * initialized when canceled.\n-                 */\n-                this.initTaskCallable(task);\n-                @SuppressWarnings(\"unchecked\")\n-                HugeTask<V> memTask = (HugeTask<V>) this.tasks.get(task.id());\n-                if (memTask != null) {\n-                    task = memTask;\n-                }\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    boolean cancelled = task.cancel(true);\n-                    LOG.info(\"Server {} cancel task {} with result {}\",\n-                             server, task.id(), cancelled);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n+        assert task.completed();\n+        return cancelled;\n     }\n \n-    protected ServerInfoManager serverManager() {\n-        return this.graph.serverManager();\n-    }\n-\n-    public void remove(Id id) {\n+    protected void remove(Id id) {\n         HugeTask<?> task = this.tasks.remove(id);\n-        assert task == null || task.completed() ||\n-               task.cancelling() || task.isCancelled();\n+        assert task == null || task.completed() || task.isCancelled();\n     }\n \n     @Override\n     public <V> void save(HugeTask<V> task) {\n-        task.scheduler(this);\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         this.call(() -> {\n             // Construct vertex from task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMzc5Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444023797", "bodyText": "add some comments", "author": "javeme", "createdAt": "2020-06-23T07:40:05Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -193,12 +204,26 @@ private void unlistenChanges() {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n+        if (!this.serverManager().master()) {\n+            throw new HugeException(\"The worker can't schedule task\");\n+        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n+\n         task.status(TaskStatus.QUEUED);\n-        return this.submitTask(task);\n+        if (task.callable() instanceof EphemeralJob) {", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -204,23 +197,27 @@ public class StandardTaskScheduler implements TaskScheduler {\n \n     @Override\n     public <V> Future<?> schedule(HugeTask<V> task) {\n-        if (!this.serverManager().master()) {\n-            throw new HugeException(\"The worker can't schedule task\");\n-        }\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-\n         task.status(TaskStatus.QUEUED);\n-        if (task.callable() instanceof EphemeralJob) {\n-            return this.submitTask(task);\n-        }\n+        initTaskCallable(task);\n+        this.scheduleTask(task);\n \n-        // Just save task to be scheduled by periodic scheduler\n-        this.save(task);\n+        return null;\n+//        return this.submitTask(task);\n+    }\n \n-        // Notify master server to schedule and execute immediately\n-        TaskManager.instance().notifyNewTask(task);\n+    private <V> void scheduleTask(HugeTask<V> task) {\n+        if (this.graph.role().master()) {\n+            String node = this.pickWorker();\n+            task.node(node);\n+            this.save(task);\n+        }\n+    }\n \n-        return task;\n+    private synchronized String pickWorker() {\n+        // TODO: master calculate load of workers and assign task to a suitable\n+        // worker\n+        return \"worker1\";\n     }\n \n     public  <V> Future<?> submitTask(HugeTask<V> task) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNDQ4NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444024485", "bodyText": "rename to selfServer", "author": "javeme", "createdAt": "2020-06-23T07:41:19Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -162,6 +170,7 @@ private void unlistenChanges() {\n     public <V> void restoreTasks() {\n         boolean supportsPaging = this.graph().backendStoreFeatures()\n                                              .supportsQueryByPage();\n+        Id server = this.serverManager().serverId();", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex 087fd28c..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -170,7 +166,6 @@ public class StandardTaskScheduler implements TaskScheduler {\n     public <V> void restoreTasks() {\n         boolean supportsPaging = this.graph().backendStoreFeatures()\n                                              .supportsQueryByPage();\n-        Id server = this.serverManager().serverId();\n         // Restore 'RESTORING', 'RUNNING' and 'QUEUED' tasks in order.\n         for (TaskStatus status : TaskStatus.PENDING_STATUSES) {\n             String page = supportsPaging ? PageInfo.PAGE_NONE : null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNTIzNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444025236", "bodyText": "too much time that client may time out, 20s is ok", "author": "javeme", "createdAt": "2020-06-23T07:42:36Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java", "diffHunk": "@@ -114,7 +114,7 @@ public static synchronized CoreOptions instance() {\n                     \"Timeout in seconds for waiting for the task to complete,\" +\n                     \"such as when truncating or clearing the backend.\",\n                     rangeInt(0L, Long.MAX_VALUE),\n-                    10L\n+                    30L", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java\nindex d19ddd05..582e35db 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/config/CoreOptions.java\n\n@@ -114,7 +114,7 @@ public class CoreOptions extends OptionHolder {\n                     \"Timeout in seconds for waiting for the task to complete,\" +\n                     \"such as when truncating or clearing the backend.\",\n                     rangeInt(0L, Long.MAX_VALUE),\n-                    30L\n+                    10L\n             );\n \n     public static final ConfigOption<Long> TASK_INPUT_SIZE_LIMIT =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNzI2Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444027262", "bodyText": "move serverId and serverRole assignment to the begin of this method after refactor initServerInfo params", "author": "javeme", "createdAt": "2020-06-23T07:46:08Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.page.PageInfo;\n+import com.baidu.hugegraph.backend.query.Condition;\n+import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.QueryResults;\n+import com.baidu.hugegraph.backend.tx.GraphTransaction;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.iterator.MapperIterator;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.NodeRole;\n+import com.baidu.hugegraph.type.define.HugeKeys;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Events;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n+import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n+\n+public class ServerInfoManager {\n+\n+    private static final Logger LOG = Log.logger(ServerInfoManager.class);\n+\n+    private final HugeGraphParams graph;\n+    private final EventListener eventListener;\n+    private Id serverId;\n+    private NodeRole serverRole;\n+\n+    public ServerInfoManager(HugeGraphParams graph) {\n+        E.checkNotNull(graph, \"graph\");\n+        this.graph = graph;\n+        this.eventListener = this.listenChanges();\n+    }\n+\n+    private EventListener listenChanges() {\n+        // Listen store event: \"store.inited\"\n+        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n+        EventListener eventListener = event -> {\n+            // Ensure user schema create after system info initialized\n+            if (storeEvents.contains(event.name())) {\n+                try {\n+                    this.initSchemaIfNeeded();\n+                } finally {\n+                    this.graph.closeTx();\n+                }\n+                return true;\n+            }\n+            return false;\n+        };\n+        this.graph.loadSystemStore().provider().listen(eventListener);\n+        return eventListener;\n+    }\n+\n+    private void unlistenChanges() {\n+        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n+    }\n+\n+    public boolean close() {\n+        this.unlistenChanges();\n+        return true;\n+    }\n+\n+    public void initServerInfo(String server, String role) {\n+        E.checkArgument(server != null && !server.isEmpty(),\n+                        \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n+        E.checkArgument(role != null && !role.isEmpty(),\n+                        \"The server role can't be null or empty\");\n+        NodeRole nodeRole = NodeRole.valueOf(role.toUpperCase());\n+        if (nodeRole.master()) {\n+            String page = PAGE_NONE;\n+            do {\n+                Iterator<HugeServerInfo> servers = this.serverInfos(10L, page);\n+                while (servers.hasNext()) {\n+                    existed = servers.next();\n+                    E.checkArgument(existed.role().worker() ||\n+                                    !existed.alive(),\n+                                    \"Already existed master '%s' in current \" +\n+                                    \"cluster\", existed.id());\n+                }\n+                page = PageInfo.pageInfo(servers);\n+            } while (page != null);\n+        }\n+\n+        HugeServerInfo serverInfo = new HugeServerInfo(server, nodeRole);\n+        serverInfo.maxLoad(this.calcMaxLoad());\n+        this.serverId = serverInfo.id();\n+        this.serverRole = nodeRole;", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\ndeleted file mode 100644\nindex aab03e66..00000000\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\n+++ /dev/null\n\n@@ -1,247 +0,0 @@\n-/*\n- * Copyright 2017 HugeGraph Authors\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.baidu.hugegraph.cluster;\n-\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.tinkerpop.gremlin.structure.Vertex;\n-import org.slf4j.Logger;\n-\n-import com.baidu.hugegraph.HugeException;\n-import com.baidu.hugegraph.HugeGraph;\n-import com.baidu.hugegraph.HugeGraphParams;\n-import com.baidu.hugegraph.backend.id.Id;\n-import com.baidu.hugegraph.backend.id.IdGenerator;\n-import com.baidu.hugegraph.backend.page.PageInfo;\n-import com.baidu.hugegraph.backend.query.Condition;\n-import com.baidu.hugegraph.backend.query.ConditionQuery;\n-import com.baidu.hugegraph.backend.query.QueryResults;\n-import com.baidu.hugegraph.backend.tx.GraphTransaction;\n-import com.baidu.hugegraph.event.EventListener;\n-import com.baidu.hugegraph.iterator.MapperIterator;\n-import com.baidu.hugegraph.schema.PropertyKey;\n-import com.baidu.hugegraph.schema.VertexLabel;\n-import com.baidu.hugegraph.structure.HugeVertex;\n-import com.baidu.hugegraph.type.HugeType;\n-import com.baidu.hugegraph.type.define.NodeRole;\n-import com.baidu.hugegraph.type.define.HugeKeys;\n-import com.baidu.hugegraph.util.DateUtil;\n-import com.baidu.hugegraph.util.E;\n-import com.baidu.hugegraph.util.Events;\n-import com.baidu.hugegraph.util.Log;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-\n-import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n-import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n-\n-public class ServerInfoManager {\n-\n-    private static final Logger LOG = Log.logger(ServerInfoManager.class);\n-\n-    private final HugeGraphParams graph;\n-    private final EventListener eventListener;\n-    private Id serverId;\n-    private NodeRole serverRole;\n-\n-    public ServerInfoManager(HugeGraphParams graph) {\n-        E.checkNotNull(graph, \"graph\");\n-        this.graph = graph;\n-        this.eventListener = this.listenChanges();\n-    }\n-\n-    private EventListener listenChanges() {\n-        // Listen store event: \"store.inited\"\n-        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n-        EventListener eventListener = event -> {\n-            // Ensure user schema create after system info initialized\n-            if (storeEvents.contains(event.name())) {\n-                try {\n-                    this.initSchemaIfNeeded();\n-                } finally {\n-                    this.graph.closeTx();\n-                }\n-                return true;\n-            }\n-            return false;\n-        };\n-        this.graph.loadSystemStore().provider().listen(eventListener);\n-        return eventListener;\n-    }\n-\n-    private void unlistenChanges() {\n-        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n-    }\n-\n-    public boolean close() {\n-        this.unlistenChanges();\n-        return true;\n-    }\n-\n-    public void initServerInfo(String server, String role) {\n-        E.checkArgument(server != null && !server.isEmpty(),\n-                        \"The server name can't be null or empty\");\n-        HugeServerInfo existed = this.serverInfo(server);\n-        E.checkArgument(existed == null || !existed.alive(),\n-                        \"The server with name '%s' already in cluster\",\n-                        server);\n-        E.checkArgument(role != null && !role.isEmpty(),\n-                        \"The server role can't be null or empty\");\n-        NodeRole nodeRole = NodeRole.valueOf(role.toUpperCase());\n-        if (nodeRole.master()) {\n-            String page = PAGE_NONE;\n-            do {\n-                Iterator<HugeServerInfo> servers = this.serverInfos(10L, page);\n-                while (servers.hasNext()) {\n-                    existed = servers.next();\n-                    E.checkArgument(existed.role().worker() ||\n-                                    !existed.alive(),\n-                                    \"Already existed master '%s' in current \" +\n-                                    \"cluster\", existed.id());\n-                }\n-                page = PageInfo.pageInfo(servers);\n-            } while (page != null);\n-        }\n-\n-        HugeServerInfo serverInfo = new HugeServerInfo(server, nodeRole);\n-        serverInfo.maxLoad(this.calcMaxLoad());\n-        this.serverId = serverInfo.id();\n-        this.serverRole = nodeRole;\n-        this.save(serverInfo);\n-    }\n-\n-    public Id serverId() {\n-        return this.serverId;\n-    }\n-\n-    public NodeRole serverRole() {\n-        return this.serverRole;\n-    }\n-\n-    public boolean master() {\n-        return this.serverRole() != null && this.serverRole().master();\n-    }\n-\n-    public void heartbeat() {\n-        HugeServerInfo server = this.serverInfo();\n-        if (server == null) {\n-            return;\n-        }\n-        server.updateTime(DateUtil.now());\n-        this.save(server);\n-    }\n-\n-    public void decreaseLoad(int load) {\n-        try {\n-            HugeServerInfo serverInfo = this.serverInfo();\n-            serverInfo.load(serverInfo.load() - load);\n-            this.save(serverInfo);\n-        } catch (Throwable t) {\n-            LOG.error(\"Exception occurred when decrease load\", t);\n-        }\n-    }\n-\n-    public int calcMaxLoad() {\n-        // TODO: calc max load based on CPU and Memory resources\n-        return 10000;\n-    }\n-\n-    private void initSchemaIfNeeded() {\n-        HugeServerInfo.schema(this.graph).initSchemaIfNeeded();\n-    }\n-\n-    private GraphTransaction tx() {\n-        return this.graph.systemTransaction();\n-    }\n-\n-    public Id save(HugeServerInfo server) {\n-        // Construct vertex from task\n-        HugeVertex vertex = this.constructVertex(server);\n-        // Add or update user in backend store, stale index might exist\n-        vertex = this.tx().addVertex(vertex);\n-        this.commitOrRollback();\n-        return vertex.id();\n-    }\n-\n-    private HugeVertex constructVertex(HugeServerInfo server) {\n-        HugeServerInfo.Schema schema = HugeServerInfo.schema(this.graph);\n-        if (!schema.existVertexLabel(HugeServerInfo.P.SERVER)) {\n-            throw new HugeException(\"Schema is missing for %s '%s'\",\n-                                    HugeServerInfo.P.SERVER, server);\n-        }\n-        return this.tx().constructVertex(false, server.asArray());\n-    }\n-\n-    private void commitOrRollback() {\n-        this.tx().commitOrRollback();\n-    }\n-\n-    public HugeServerInfo serverInfo() {\n-        Iterator<Vertex> vertices = this.tx().queryVertices(this.serverId);\n-        Vertex vertex = QueryResults.one(vertices);\n-        if (vertex == null) {\n-            return null;\n-        }\n-        return HugeServerInfo.fromVertex(vertex);\n-    }\n-\n-    public HugeServerInfo serverInfo(String name) {\n-        E.checkArgument(name != null && !name.isEmpty(),\n-                        \"The server name can't be null or emtpy\");\n-        Id server = IdGenerator.of(name);\n-        Iterator<Vertex> vertices = this.tx().queryVertices(server);\n-        Vertex vertex = QueryResults.one(vertices);\n-        if (vertex == null) {\n-            return null;\n-        }\n-        return HugeServerInfo.fromVertex(vertex);\n-    }\n-\n-    public Iterator<HugeServerInfo> serverInfos(long limit, String page) {\n-        return this.serverInfos(ImmutableMap.of(), limit, page);\n-    }\n-\n-    private Iterator<HugeServerInfo> serverInfos(Map<String, Object> conditions,\n-                                                 long limit, String page) {\n-        ConditionQuery query = new ConditionQuery(HugeType.VERTEX);\n-        if (page != null) {\n-            query.page(page);\n-        }\n-\n-        HugeGraph graph = this.graph.graph();\n-        VertexLabel vl = graph.vertexLabel(HugeServerInfo.P.SERVER);\n-        query.eq(HugeKeys.LABEL, vl.id());\n-        for (Map.Entry<String, Object> entry : conditions.entrySet()) {\n-            PropertyKey pk = graph.propertyKey(entry.getKey());\n-            query.query(Condition.eq(pk.id(), entry.getValue()));\n-        }\n-        query.showHidden(true);\n-        if (limit != NO_LIMIT) {\n-            query.limit(limit);\n-        }\n-        Iterator<Vertex> vertices = this.tx().queryVertices(query);\n-        Iterator<HugeServerInfo> servers =\n-                new MapperIterator<>(vertices, HugeServerInfo::fromVertex);\n-        // Convert iterator to list to avoid across thread tx accessed\n-        return QueryResults.toList(servers);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNzU2Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444027563", "bodyText": "add const var", "author": "javeme", "createdAt": "2020-06-23T07:46:38Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2017 HugeGraph Authors\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.baidu.hugegraph.cluster;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.slf4j.Logger;\n+\n+import com.baidu.hugegraph.HugeException;\n+import com.baidu.hugegraph.HugeGraph;\n+import com.baidu.hugegraph.HugeGraphParams;\n+import com.baidu.hugegraph.backend.id.Id;\n+import com.baidu.hugegraph.backend.id.IdGenerator;\n+import com.baidu.hugegraph.backend.page.PageInfo;\n+import com.baidu.hugegraph.backend.query.Condition;\n+import com.baidu.hugegraph.backend.query.ConditionQuery;\n+import com.baidu.hugegraph.backend.query.QueryResults;\n+import com.baidu.hugegraph.backend.tx.GraphTransaction;\n+import com.baidu.hugegraph.event.EventListener;\n+import com.baidu.hugegraph.iterator.MapperIterator;\n+import com.baidu.hugegraph.schema.PropertyKey;\n+import com.baidu.hugegraph.schema.VertexLabel;\n+import com.baidu.hugegraph.structure.HugeVertex;\n+import com.baidu.hugegraph.type.HugeType;\n+import com.baidu.hugegraph.type.define.NodeRole;\n+import com.baidu.hugegraph.type.define.HugeKeys;\n+import com.baidu.hugegraph.util.DateUtil;\n+import com.baidu.hugegraph.util.E;\n+import com.baidu.hugegraph.util.Events;\n+import com.baidu.hugegraph.util.Log;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n+import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n+\n+public class ServerInfoManager {\n+\n+    private static final Logger LOG = Log.logger(ServerInfoManager.class);\n+\n+    private final HugeGraphParams graph;\n+    private final EventListener eventListener;\n+    private Id serverId;\n+    private NodeRole serverRole;\n+\n+    public ServerInfoManager(HugeGraphParams graph) {\n+        E.checkNotNull(graph, \"graph\");\n+        this.graph = graph;\n+        this.eventListener = this.listenChanges();\n+    }\n+\n+    private EventListener listenChanges() {\n+        // Listen store event: \"store.inited\"\n+        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n+        EventListener eventListener = event -> {\n+            // Ensure user schema create after system info initialized\n+            if (storeEvents.contains(event.name())) {\n+                try {\n+                    this.initSchemaIfNeeded();\n+                } finally {\n+                    this.graph.closeTx();\n+                }\n+                return true;\n+            }\n+            return false;\n+        };\n+        this.graph.loadSystemStore().provider().listen(eventListener);\n+        return eventListener;\n+    }\n+\n+    private void unlistenChanges() {\n+        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n+    }\n+\n+    public boolean close() {\n+        this.unlistenChanges();\n+        return true;\n+    }\n+\n+    public void initServerInfo(String server, String role) {\n+        E.checkArgument(server != null && !server.isEmpty(),\n+                        \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n+        E.checkArgument(role != null && !role.isEmpty(),\n+                        \"The server role can't be null or empty\");\n+        NodeRole nodeRole = NodeRole.valueOf(role.toUpperCase());\n+        if (nodeRole.master()) {\n+            String page = PAGE_NONE;\n+            do {\n+                Iterator<HugeServerInfo> servers = this.serverInfos(10L, page);", "originalCommit": "e68cc2aa2f5ee617db8b170ce436f2396d5166e8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\ndeleted file mode 100644\nindex aab03e66..00000000\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\n+++ /dev/null\n\n@@ -1,247 +0,0 @@\n-/*\n- * Copyright 2017 HugeGraph Authors\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.baidu.hugegraph.cluster;\n-\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.tinkerpop.gremlin.structure.Vertex;\n-import org.slf4j.Logger;\n-\n-import com.baidu.hugegraph.HugeException;\n-import com.baidu.hugegraph.HugeGraph;\n-import com.baidu.hugegraph.HugeGraphParams;\n-import com.baidu.hugegraph.backend.id.Id;\n-import com.baidu.hugegraph.backend.id.IdGenerator;\n-import com.baidu.hugegraph.backend.page.PageInfo;\n-import com.baidu.hugegraph.backend.query.Condition;\n-import com.baidu.hugegraph.backend.query.ConditionQuery;\n-import com.baidu.hugegraph.backend.query.QueryResults;\n-import com.baidu.hugegraph.backend.tx.GraphTransaction;\n-import com.baidu.hugegraph.event.EventListener;\n-import com.baidu.hugegraph.iterator.MapperIterator;\n-import com.baidu.hugegraph.schema.PropertyKey;\n-import com.baidu.hugegraph.schema.VertexLabel;\n-import com.baidu.hugegraph.structure.HugeVertex;\n-import com.baidu.hugegraph.type.HugeType;\n-import com.baidu.hugegraph.type.define.NodeRole;\n-import com.baidu.hugegraph.type.define.HugeKeys;\n-import com.baidu.hugegraph.util.DateUtil;\n-import com.baidu.hugegraph.util.E;\n-import com.baidu.hugegraph.util.Events;\n-import com.baidu.hugegraph.util.Log;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-\n-import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n-import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n-\n-public class ServerInfoManager {\n-\n-    private static final Logger LOG = Log.logger(ServerInfoManager.class);\n-\n-    private final HugeGraphParams graph;\n-    private final EventListener eventListener;\n-    private Id serverId;\n-    private NodeRole serverRole;\n-\n-    public ServerInfoManager(HugeGraphParams graph) {\n-        E.checkNotNull(graph, \"graph\");\n-        this.graph = graph;\n-        this.eventListener = this.listenChanges();\n-    }\n-\n-    private EventListener listenChanges() {\n-        // Listen store event: \"store.inited\"\n-        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n-        EventListener eventListener = event -> {\n-            // Ensure user schema create after system info initialized\n-            if (storeEvents.contains(event.name())) {\n-                try {\n-                    this.initSchemaIfNeeded();\n-                } finally {\n-                    this.graph.closeTx();\n-                }\n-                return true;\n-            }\n-            return false;\n-        };\n-        this.graph.loadSystemStore().provider().listen(eventListener);\n-        return eventListener;\n-    }\n-\n-    private void unlistenChanges() {\n-        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n-    }\n-\n-    public boolean close() {\n-        this.unlistenChanges();\n-        return true;\n-    }\n-\n-    public void initServerInfo(String server, String role) {\n-        E.checkArgument(server != null && !server.isEmpty(),\n-                        \"The server name can't be null or empty\");\n-        HugeServerInfo existed = this.serverInfo(server);\n-        E.checkArgument(existed == null || !existed.alive(),\n-                        \"The server with name '%s' already in cluster\",\n-                        server);\n-        E.checkArgument(role != null && !role.isEmpty(),\n-                        \"The server role can't be null or empty\");\n-        NodeRole nodeRole = NodeRole.valueOf(role.toUpperCase());\n-        if (nodeRole.master()) {\n-            String page = PAGE_NONE;\n-            do {\n-                Iterator<HugeServerInfo> servers = this.serverInfos(10L, page);\n-                while (servers.hasNext()) {\n-                    existed = servers.next();\n-                    E.checkArgument(existed.role().worker() ||\n-                                    !existed.alive(),\n-                                    \"Already existed master '%s' in current \" +\n-                                    \"cluster\", existed.id());\n-                }\n-                page = PageInfo.pageInfo(servers);\n-            } while (page != null);\n-        }\n-\n-        HugeServerInfo serverInfo = new HugeServerInfo(server, nodeRole);\n-        serverInfo.maxLoad(this.calcMaxLoad());\n-        this.serverId = serverInfo.id();\n-        this.serverRole = nodeRole;\n-        this.save(serverInfo);\n-    }\n-\n-    public Id serverId() {\n-        return this.serverId;\n-    }\n-\n-    public NodeRole serverRole() {\n-        return this.serverRole;\n-    }\n-\n-    public boolean master() {\n-        return this.serverRole() != null && this.serverRole().master();\n-    }\n-\n-    public void heartbeat() {\n-        HugeServerInfo server = this.serverInfo();\n-        if (server == null) {\n-            return;\n-        }\n-        server.updateTime(DateUtil.now());\n-        this.save(server);\n-    }\n-\n-    public void decreaseLoad(int load) {\n-        try {\n-            HugeServerInfo serverInfo = this.serverInfo();\n-            serverInfo.load(serverInfo.load() - load);\n-            this.save(serverInfo);\n-        } catch (Throwable t) {\n-            LOG.error(\"Exception occurred when decrease load\", t);\n-        }\n-    }\n-\n-    public int calcMaxLoad() {\n-        // TODO: calc max load based on CPU and Memory resources\n-        return 10000;\n-    }\n-\n-    private void initSchemaIfNeeded() {\n-        HugeServerInfo.schema(this.graph).initSchemaIfNeeded();\n-    }\n-\n-    private GraphTransaction tx() {\n-        return this.graph.systemTransaction();\n-    }\n-\n-    public Id save(HugeServerInfo server) {\n-        // Construct vertex from task\n-        HugeVertex vertex = this.constructVertex(server);\n-        // Add or update user in backend store, stale index might exist\n-        vertex = this.tx().addVertex(vertex);\n-        this.commitOrRollback();\n-        return vertex.id();\n-    }\n-\n-    private HugeVertex constructVertex(HugeServerInfo server) {\n-        HugeServerInfo.Schema schema = HugeServerInfo.schema(this.graph);\n-        if (!schema.existVertexLabel(HugeServerInfo.P.SERVER)) {\n-            throw new HugeException(\"Schema is missing for %s '%s'\",\n-                                    HugeServerInfo.P.SERVER, server);\n-        }\n-        return this.tx().constructVertex(false, server.asArray());\n-    }\n-\n-    private void commitOrRollback() {\n-        this.tx().commitOrRollback();\n-    }\n-\n-    public HugeServerInfo serverInfo() {\n-        Iterator<Vertex> vertices = this.tx().queryVertices(this.serverId);\n-        Vertex vertex = QueryResults.one(vertices);\n-        if (vertex == null) {\n-            return null;\n-        }\n-        return HugeServerInfo.fromVertex(vertex);\n-    }\n-\n-    public HugeServerInfo serverInfo(String name) {\n-        E.checkArgument(name != null && !name.isEmpty(),\n-                        \"The server name can't be null or emtpy\");\n-        Id server = IdGenerator.of(name);\n-        Iterator<Vertex> vertices = this.tx().queryVertices(server);\n-        Vertex vertex = QueryResults.one(vertices);\n-        if (vertex == null) {\n-            return null;\n-        }\n-        return HugeServerInfo.fromVertex(vertex);\n-    }\n-\n-    public Iterator<HugeServerInfo> serverInfos(long limit, String page) {\n-        return this.serverInfos(ImmutableMap.of(), limit, page);\n-    }\n-\n-    private Iterator<HugeServerInfo> serverInfos(Map<String, Object> conditions,\n-                                                 long limit, String page) {\n-        ConditionQuery query = new ConditionQuery(HugeType.VERTEX);\n-        if (page != null) {\n-            query.page(page);\n-        }\n-\n-        HugeGraph graph = this.graph.graph();\n-        VertexLabel vl = graph.vertexLabel(HugeServerInfo.P.SERVER);\n-        query.eq(HugeKeys.LABEL, vl.id());\n-        for (Map.Entry<String, Object> entry : conditions.entrySet()) {\n-            PropertyKey pk = graph.propertyKey(entry.getKey());\n-            query.query(Condition.eq(pk.id(), entry.getValue()));\n-        }\n-        query.showHidden(true);\n-        if (limit != NO_LIMIT) {\n-            query.limit(limit);\n-        }\n-        Iterator<Vertex> vertices = this.tx().queryVertices(query);\n-        Iterator<HugeServerInfo> servers =\n-                new MapperIterator<>(vertices, HugeServerInfo::fromVertex);\n-        // Convert iterator to list to avoid across thread tx accessed\n-        return QueryResults.toList(servers);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MTc4OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444181788", "bodyText": "10L", "author": "javeme", "createdAt": "2020-06-23T12:24:17Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -592,18 +637,10 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n \n     public void syncWait() {\n         try {\n-            this.get();\n-            assert this.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n+            this.scheduler().waitUntilTaskCompleted(this.id(), 20L, 10);", "originalCommit": "1ec3d46152e5df44c3eea790c524154c151d336a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4Mjk0MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444182940", "bodyText": "seems can delete syncWait() method", "author": "javeme", "createdAt": "2020-06-23T12:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\nindex f11315dc..3b663fa1 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n\n@@ -637,10 +615,18 @@ public class HugeTask<V> extends FutureTask<V> {\n \n     public void syncWait() {\n         try {\n-            this.scheduler().waitUntilTaskCompleted(this.id(), 20L, 10);\n+            this.get();\n+            assert this.completed();\n+        } catch (ExecutionException e) {\n+            Throwable cause = e.getCause();\n+            if (cause instanceof RuntimeException) {\n+                throw (RuntimeException) cause;\n+            }\n+            throw new HugeException(\"Async task failed with error: %s\",\n+                                    cause, cause.getMessage());\n         } catch (Exception e) {\n-            throw new HugeException(\"Failed to wait task '%s' completed in \" +\n-                                    \"20 seconds\", e, this.id);\n+            throw new HugeException(\"Async task failed with error: %s\",\n+                                    e, e.getMessage());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4MzY4Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444183687", "bodyText": "\"can't\"", "author": "javeme", "createdAt": "2020-06-23T12:27:36Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -226,31 +250,160 @@ private void unlistenChanges() {\n     }\n \n     @Override\n-    public <V> boolean cancel(HugeTask<V> task) {\n+    public synchronized <V> void cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        boolean cancelled = false;\n+        if (!this.serverManager().master()) {\n+            return;\n+        }\n         if (!task.completed()) {\n-            /*\n-             * Task may be loaded from backend store and not initialized. like:\n-             * A task is completed but failed to save in the last step,\n-             * resulting in the status of the task not being updated to storage,\n-             * the task is not in memory, so it's not initialized when canceled.\n-             */\n-            this.initTaskCallable(task);\n-            cancelled = task.cancel(true);\n+            // The task scheduled to workers, waiting for worker cancel\n+            task.status(TaskStatus.CANCELLING);\n+            this.save(task);\n             this.remove(task.id());\n+            // Notify master server to schedule and execute immediately\n+            TaskManager.instance().notifyNewTask(task);\n+        }\n+    }\n+\n+    protected synchronized <V> void scheduleTasks() {\n+        // Master schedule all queued tasks to suitable servers\n+        String page = PageInfo.PAGE_NONE;\n+        do {\n+            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n+                                                     PAGE_SIZE, page);\n+            HugeTask<V> task;\n+            while (tasks.hasNext()) {\n+                task = tasks.next();\n+                if (task.server() != null) {\n+                    // Skip if already scheduled\n+                    continue;\n+                }\n+                HugeServerInfo server = this.pickWorker(task);\n+                if (server == null) {\n+                    LOG.debug(\"The master can not find suitable server to \" +", "originalCommit": "1ec3d46152e5df44c3eea790c524154c151d336a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex ac8de957..8e13c45e 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -250,160 +248,31 @@ public class StandardTaskScheduler implements TaskScheduler {\n     }\n \n     @Override\n-    public synchronized <V> void cancel(HugeTask<V> task) {\n+    public <V> boolean cancel(HugeTask<V> task) {\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n-        if (!this.serverManager().master()) {\n-            return;\n-        }\n+        boolean cancelled = false;\n         if (!task.completed()) {\n-            // The task scheduled to workers, waiting for worker cancel\n-            task.status(TaskStatus.CANCELLING);\n-            this.save(task);\n+            /*\n+             * Task may be loaded from backend store and not initialized. like:\n+             * A task is completed but failed to save in the last step,\n+             * resulting in the status of the task not being updated to storage,\n+             * the task is not in memory, so it's not initialized when canceled.\n+             */\n+            this.initTaskCallable(task);\n+            cancelled = task.cancel(true);\n             this.remove(task.id());\n-            // Notify master server to schedule and execute immediately\n-            TaskManager.instance().notifyNewTask(task);\n         }\n-    }\n-\n-    protected synchronized <V> void scheduleTasks() {\n-        // Master schedule all queued tasks to suitable servers\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            HugeTask<V> task;\n-            while (tasks.hasNext()) {\n-                task = tasks.next();\n-                if (task.server() != null) {\n-                    // Skip if already scheduled\n-                    continue;\n-                }\n-                HugeServerInfo server = this.pickWorker(task);\n-                if (server == null) {\n-                    LOG.debug(\"The master can not find suitable server to \" +\n-                              \"execute task: {}, wait for next schedule\",\n-                              task.id());\n-                    return;\n-                }\n-\n-                // Found suitable server, update task server and server load\n-                assert server.id() != null;\n-                task.server(server.id());\n-                this.save(task);\n-                server.load(server.load() + task.load());\n-                this.serverManager().save(server);\n-                LOG.info(\"Schedule task {} to server {}\",\n-                         task.id(), server.id());\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                this.initTaskCallable(task);\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    this.submitTask(task);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    private synchronized <V> HugeServerInfo pickWorker(HugeTask<V> task) {\n-        HugeServerInfo master = null;\n-        HugeServerInfo serverWithMinLoad = null;\n-        int minLoad = Integer.MAX_VALUE;\n-        boolean hasWorker = false;\n-        long now = DateUtil.now().getTime();\n-\n-        // Iterate servers to find suitable one\n-        String page = PageInfo.PAGE_NONE;\n-        HugeServerInfo server;\n-        do {\n-            Iterator<HugeServerInfo> servers = this.serverManager()\n-                                                   .serverInfos(page);\n-            while (servers.hasNext()) {\n-                server = servers.next();\n-                if (!server.alive()) {\n-                    continue;\n-                }\n-\n-                if (server.role().master()) {\n-                    master = server;\n-                    continue;\n-                }\n-\n-                hasWorker = true;\n-                if (!server.suitableFor(task, now)) {\n-                    continue;\n-                }\n-                if (server.load() < minLoad) {\n-                    minLoad = server.load();\n-                    serverWithMinLoad = server;\n-                }\n-            }\n-            page = PageInfo.pageInfo(servers);\n-        } while (page != null);\n-\n-        // Only schedule to master if there is no workers and master is suitable\n-        if (!hasWorker && master.suitableFor(task, now)) {\n-            return master;\n-        }\n-\n-        return serverWithMinLoad;\n-    }\n-\n-    protected <V> void cancelTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n-        do {\n-            Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.CANCELLING,\n-                                                     PAGE_SIZE, page);\n-            while (tasks.hasNext()) {\n-                HugeTask<V> task = tasks.next();\n-                /*\n-                 * Task may be loaded from backend store and not initialized.\n-                 * like: A task is completed but failed to save in the last\n-                 * step, resulting in the status of the task not being\n-                 * updated to storage, the task is not in memory, so it's not\n-                 * initialized when canceled.\n-                 */\n-                this.initTaskCallable(task);\n-                @SuppressWarnings(\"unchecked\")\n-                HugeTask<V> memTask = (HugeTask<V>) this.tasks.get(task.id());\n-                if (memTask != null) {\n-                    task = memTask;\n-                }\n-                Id taskServer = task.server();\n-                if (taskServer != null && taskServer.equals(server)) {\n-                    boolean cancelled = task.cancel(true);\n-                    LOG.info(\"Server {} cancel task {} with result {}\",\n-                             server, task.id(), cancelled);\n-                }\n-            }\n-            page = PageInfo.pageInfo(tasks);\n-        } while (page != null);\n-    }\n-\n-    protected ServerInfoManager serverManager() {\n-        return this.graph.serverManager();\n+        assert task.completed();\n+        return cancelled;\n     }\n \n     protected void remove(Id id) {\n         HugeTask<?> task = this.tasks.remove(id);\n-        assert task == null || task.completed() ||\n-               task.cancelling() || task.isCancelled();\n+        assert task == null || task.completed() || task.isCancelled();\n     }\n \n     @Override\n     public <V> void save(HugeTask<V> task) {\n-        task.scheduler(this);\n         E.checkArgumentNotNull(task, \"Task can't be null\");\n         this.call(() -> {\n             // Construct vertex from task\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwMTQ2Ng==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444201466", "bodyText": "task = scheduler.waitUntilTaskCompleted()", "author": "javeme", "createdAt": "2020-06-23T12:56:41Z", "path": "hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java", "diffHunk": "@@ -325,6 +316,7 @@ public void testGremlinJobWithFailure() throws TimeoutException {\n                .job(new GremlinJob());\n         HugeTask<Object> task = builder.schedule();\n         scheduler.waitUntilTaskCompleted(task.id(), 10);\n+        task = scheduler.task(task.id());", "originalCommit": "1ec3d46152e5df44c3eea790c524154c151d336a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java\nindex 76e14ff6..99f3ca06 100644\n--- a/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java\n+++ b/hugegraph-test/src/main/java/com/baidu/hugegraph/core/TaskCoreTest.java\n\n@@ -316,7 +325,6 @@ public class TaskCoreTest extends BaseCoreTest {\n                .job(new GremlinJob());\n         HugeTask<Object> task = builder.schedule();\n         scheduler.waitUntilTaskCompleted(task.id(), 10);\n-        task = scheduler.task(task.id());\n         Assert.assertEquals(TaskStatus.FAILED, task.status());\n         Assert.assertContains(\"Can't read json\", task.result());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NDMwMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444594301", "bodyText": "seem contrary to common sense, it should accept new task if it is alive", "author": "houzhizhen", "createdAt": "2020-06-24T01:29:47Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java", "diffHunk": "@@ -176,9 +183,8 @@ public static HugeServer fromVertex(Vertex vertex) {\n         return server;\n     }\n \n-    public <V> boolean suitableFor(HugeTask<V> task, long now) {\n-        if (this.updateTime.getTime() + 5000L < now ||\n-            this.load() + task.load() > MAX_LOAD) {\n+    public <V> boolean suitableFor(HugeTask<V> task) {\n+        if (this.alive() || this.load() + task.load() > MAX_LOAD) {", "originalCommit": "33b32fabc2c1396f8fedc9dcd4afc6fe87677048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\ndeleted file mode 100644\nindex 92ca9324..00000000\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/HugeServerInfo.java\n+++ /dev/null\n\n@@ -1,300 +0,0 @@\n-/*\n- * Copyright 2017 HugeGraph Authors\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.baidu.hugegraph.cluster;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-\n-import org.apache.tinkerpop.gremlin.structure.Graph;\n-import org.apache.tinkerpop.gremlin.structure.T;\n-import org.apache.tinkerpop.gremlin.structure.Vertex;\n-import org.apache.tinkerpop.gremlin.structure.VertexProperty;\n-\n-import com.baidu.hugegraph.HugeGraph;\n-import com.baidu.hugegraph.HugeGraphParams;\n-import com.baidu.hugegraph.backend.id.Id;\n-import com.baidu.hugegraph.backend.id.IdGenerator;\n-import com.baidu.hugegraph.schema.IndexLabel;\n-import com.baidu.hugegraph.schema.PropertyKey;\n-import com.baidu.hugegraph.schema.SchemaManager;\n-import com.baidu.hugegraph.schema.VertexLabel;\n-import com.baidu.hugegraph.task.HugeTask;\n-import com.baidu.hugegraph.type.HugeType;\n-import com.baidu.hugegraph.type.define.Cardinality;\n-import com.baidu.hugegraph.type.define.DataType;\n-import com.baidu.hugegraph.type.define.GraphRole;\n-import com.baidu.hugegraph.type.define.SerialEnum;\n-import com.baidu.hugegraph.util.DateUtil;\n-import com.baidu.hugegraph.util.E;\n-\n-public class HugeServerInfo {\n-\n-    public static final int MAX_LOAD = 1000;\n-    public static final long EXPIRED_INTERVAL = 5000L;\n-\n-    private Id id;\n-    private GraphRole role;\n-    private int load;\n-    private Date updateTime;\n-\n-    public HugeServerInfo(String name, GraphRole role) {\n-        this(IdGenerator.of(name), role);\n-    }\n-\n-    public HugeServerInfo(Id id) {\n-        this.id = id;\n-        this.load = 0;\n-        this.role = GraphRole.WORKER;\n-        this.updateTime = DateUtil.now();\n-    }\n-\n-    public HugeServerInfo(Id id, GraphRole role) {\n-        this.id = id;\n-        this.load = 0;\n-        this.role = role;\n-        this.updateTime = DateUtil.now();\n-    }\n-\n-    public Id id() {\n-        return this.id;\n-    }\n-\n-    public String name() {\n-        return this.id.asString();\n-    }\n-\n-    public GraphRole role() {\n-        return this.role;\n-    }\n-\n-    public void role(GraphRole role) {\n-        this.role = role;\n-    }\n-\n-    public int load() {\n-        return this.load;\n-    }\n-\n-    public void load(int load) {\n-        this.load = load;\n-    }\n-\n-    public Date updateTime() {\n-        return this.updateTime;\n-    }\n-\n-    public void updateTime(Date updateTime) {\n-        this.updateTime = updateTime;\n-    }\n-\n-    public boolean alive() {\n-        long now = DateUtil.now().getTime();\n-        return this.updateTime != null &&\n-               this.updateTime.getTime() + EXPIRED_INTERVAL > now;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return String.format(\"HugeServerInfo(%s)%s\", this.id, this.asMap());\n-    }\n-\n-    protected boolean property(String key, Object value) {\n-        switch (key) {\n-            case P.ROLE:\n-                this.role = SerialEnum.fromCode(GraphRole.class, (byte) value);\n-                break;\n-            case P.LOAD:\n-                this.load = (int) value;\n-                break;\n-            case P.UPDATE_TIME:\n-                this.updateTime = (Date) value;\n-                break;\n-            default:\n-                throw new AssertionError(\"Unsupported key: \" + key);\n-        }\n-        return true;\n-    }\n-\n-    protected Object[] asArray() {\n-        E.checkState(this.id != null, \"Server id can't be null\");\n-\n-        List<Object> list = new ArrayList<>(8);\n-\n-        list.add(T.label);\n-        list.add(P.SERVER);\n-\n-        list.add(T.id);\n-        list.add(this.id);\n-\n-        list.add(P.ROLE);\n-        list.add(this.role.code());\n-\n-        list.add(P.LOAD);\n-        list.add(this.load);\n-\n-        list.add(P.UPDATE_TIME);\n-        list.add(this.updateTime);\n-\n-        return list.toArray();\n-    }\n-\n-    public Map<String, Object> asMap() {\n-        E.checkState(this.id != null, \"Server id can't be null\");\n-\n-        Map<String, Object> map = new HashMap<>();\n-\n-        map.put(Graph.Hidden.unHide(P.ID), this.id);\n-        map.put(Graph.Hidden.unHide(P.LABEL), P.SERVER);\n-        map.put(Graph.Hidden.unHide(P.ROLE), this.role);\n-        map.put(Graph.Hidden.unHide(P.LOAD), this.load);\n-        map.put(Graph.Hidden.unHide(P.UPDATE_TIME), this.updateTime);\n-\n-        return map;\n-    }\n-\n-    public static HugeServerInfo fromVertex(Vertex vertex) {\n-        HugeServerInfo server = new HugeServerInfo((Id) vertex.id());\n-        for (Iterator<VertexProperty<Object>> iter = vertex.properties();\n-             iter.hasNext();) {\n-            VertexProperty<Object> prop = iter.next();\n-            server.property(prop.key(), prop.value());\n-        }\n-        return server;\n-    }\n-\n-    public <V> boolean suitableFor(HugeTask<V> task) {\n-        if (this.alive() || this.load() + task.load() > MAX_LOAD) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    public static Schema schema(HugeGraphParams graph) {\n-        return new Schema(graph);\n-    }\n-\n-    public static final class P {\n-\n-        public static final String SERVER = Graph.Hidden.hide(\"server\");\n-\n-        public static final String ID = T.id.getAccessor();\n-        public static final String LABEL = T.label.getAccessor();\n-\n-        public static final String NAME = \"~server_name\";\n-        public static final String ROLE = \"~server_role\";\n-        public static final String LOAD = \"~server_load\";\n-        public static final String UPDATE_TIME = \"~server_update_time\";\n-\n-        public static String unhide(String key) {\n-            final String prefix = Graph.Hidden.hide(\"server_\");\n-            if (key.startsWith(prefix)) {\n-                return key.substring(prefix.length());\n-            }\n-            return key;\n-        }\n-    }\n-\n-    public static final class Schema {\n-\n-        public static final String SERVER = P.SERVER;\n-\n-        protected final HugeGraphParams graph;\n-\n-        public Schema(HugeGraphParams graph) {\n-            this.graph = graph;\n-        }\n-\n-        public void initSchemaIfNeeded() {\n-            if (this.existVertexLabel(SERVER)) {\n-                return;\n-            }\n-\n-            HugeGraph graph = this.graph.graph();\n-            String[] properties = this.initProperties();\n-\n-            // Create vertex label '~server'\n-            VertexLabel label = graph.schema().vertexLabel(SERVER)\n-                                     .properties(properties)\n-                                     .useCustomizeStringId()\n-                                     .nullableKeys(P.ROLE, P.LOAD,\n-                                                   P.UPDATE_TIME)\n-                                     .enableLabelIndex(true)\n-                                     .build();\n-            this.graph.schemaTransaction().addVertexLabel(label);\n-\n-            // Create index\n-            this.createIndexLabel(label, P.ROLE);\n-        }\n-\n-        private String[] initProperties() {\n-            List<String> props = new ArrayList<>();\n-\n-            props.add(createPropertyKey(P.ROLE, DataType.BYTE));\n-            props.add(createPropertyKey(P.LOAD, DataType.INT));\n-            props.add(createPropertyKey(P.UPDATE_TIME, DataType.DATE));\n-\n-            return props.toArray(new String[0]);\n-        }\n-\n-        public boolean existVertexLabel(String label) {\n-            return this.graph.schemaTransaction()\n-                       .getVertexLabel(label) != null;\n-        }\n-\n-        private String createPropertyKey(String name) {\n-            return this.createPropertyKey(name, DataType.TEXT);\n-        }\n-\n-        private String createPropertyKey(String name, DataType dataType) {\n-            return this.createPropertyKey(name, dataType, Cardinality.SINGLE);\n-        }\n-\n-        private String createPropertyKey(String name, DataType dataType,\n-                                         Cardinality cardinality) {\n-            SchemaManager schema = this.graph.graph().schema();\n-            PropertyKey propertyKey = schema.propertyKey(name)\n-                                            .dataType(dataType)\n-                                            .cardinality(cardinality)\n-                                            .build();\n-            this.graph.schemaTransaction().addPropertyKey(propertyKey);\n-            return name;\n-        }\n-\n-        private IndexLabel createIndexLabel(VertexLabel label, String field) {\n-            SchemaManager schema = this.graph.graph().schema();\n-            String name = Graph.Hidden.hide(\"server-index-by-\" + field);\n-            IndexLabel indexLabel = schema.indexLabel(name)\n-                                          .on(HugeType.VERTEX_LABEL, SERVER)\n-                                          .by(field)\n-                                          .build();\n-            this.graph.schemaTransaction().addIndexLabel(label, indexLabel);\n-            return indexLabel;\n-        }\n-\n-        private IndexLabel indexLabel(String field) {\n-            String name = Graph.Hidden.hide(\"server-index-by-\" + field);\n-            return this.graph.graph().indexLabel(name);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5Njg3OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r444596879", "bodyText": "Exception information may not correct.", "author": "houzhizhen", "createdAt": "2020-06-24T01:40:21Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java", "diffHunk": "@@ -93,13 +94,29 @@ public boolean close() {\n     public void initServerInfo(String server, String role) {\n         E.checkArgument(server != null && !server.isEmpty(),\n                         \"The server name can't be null or empty\");\n+        HugeServerInfo existed = this.serverInfo(server);\n+        E.checkArgument(existed == null || !existed.alive(),\n+                        \"The server with name '%s' already in cluster\",\n+                        server);\n         E.checkArgument(role != null && !role.isEmpty(),\n                         \"The server role can't be null or empty\");\n         GraphRole graphRole = GraphRole.valueOf(role.toUpperCase());\n-        HugeServer hugeServer = new HugeServer(server, graphRole);\n-        this.serverId = hugeServer.id();\n+        if (graphRole.master()) {\n+            Iterator<HugeServerInfo> servers = this.serverInfos(ImmutableMap.of(\n+                                               HugeServerInfo.P.ROLE,\n+                                               GraphRole.MASTER.code()),\n+                                               1, PAGE_NONE);\n+            if (servers.hasNext()) {\n+                existed = servers.next();\n+                E.checkArgument(!existed.alive(),\n+                                \"Already existed master '%s' in current \" +", "originalCommit": "33b32fabc2c1396f8fedc9dcd4afc6fe87677048", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\ndeleted file mode 100644\nindex 6d044e8b..00000000\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/cluster/ServerInfoManager.java\n+++ /dev/null\n\n@@ -1,219 +0,0 @@\n-/*\n- * Copyright 2017 HugeGraph Authors\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to You under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package com.baidu.hugegraph.cluster;\n-\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import org.apache.tinkerpop.gremlin.structure.Vertex;\n-\n-import com.baidu.hugegraph.HugeException;\n-import com.baidu.hugegraph.HugeGraphParams;\n-import com.baidu.hugegraph.backend.id.Id;\n-import com.baidu.hugegraph.backend.id.IdGenerator;\n-import com.baidu.hugegraph.backend.query.Condition;\n-import com.baidu.hugegraph.backend.query.ConditionQuery;\n-import com.baidu.hugegraph.backend.query.QueryResults;\n-import com.baidu.hugegraph.backend.tx.GraphTransaction;\n-import com.baidu.hugegraph.event.EventListener;\n-import com.baidu.hugegraph.iterator.MapperIterator;\n-import com.baidu.hugegraph.schema.PropertyKey;\n-import com.baidu.hugegraph.schema.VertexLabel;\n-import com.baidu.hugegraph.structure.HugeVertex;\n-import com.baidu.hugegraph.type.HugeType;\n-import com.baidu.hugegraph.type.define.GraphRole;\n-import com.baidu.hugegraph.type.define.HugeKeys;\n-import com.baidu.hugegraph.util.DateUtil;\n-import com.baidu.hugegraph.util.E;\n-import com.baidu.hugegraph.util.Events;\n-import com.google.common.collect.ImmutableMap;\n-import com.google.common.collect.ImmutableSet;\n-\n-import static com.baidu.hugegraph.backend.page.PageInfo.PAGE_NONE;\n-import static com.baidu.hugegraph.backend.query.Query.NO_LIMIT;\n-\n-public class ServerInfoManager {\n-\n-    private final HugeGraphParams graph;\n-    private final EventListener eventListener;\n-    private Id serverId;\n-    private GraphRole serverRole;\n-\n-    public ServerInfoManager(HugeGraphParams graph) {\n-        E.checkNotNull(graph, \"graph\");\n-        this.graph = graph;\n-        this.eventListener = this.listenChanges();\n-    }\n-\n-    private EventListener listenChanges() {\n-        // Listen store event: \"store.inited\"\n-        Set<String> storeEvents = ImmutableSet.of(Events.STORE_INITED);\n-        EventListener eventListener = event -> {\n-            // Ensure user schema create after system info initialized\n-            if (storeEvents.contains(event.name())) {\n-                try {\n-                    this.initSchemaIfNeeded();\n-                } finally {\n-                    this.graph.closeTx();\n-                }\n-                return true;\n-            }\n-            return false;\n-        };\n-        this.graph.loadSystemStore().provider().listen(eventListener);\n-        return eventListener;\n-    }\n-\n-    private void unlistenChanges() {\n-        this.graph.loadSystemStore().provider().unlisten(this.eventListener);\n-    }\n-\n-    public boolean close() {\n-        this.unlistenChanges();\n-        return true;\n-    }\n-\n-    public void initServerInfo(String server, String role) {\n-        E.checkArgument(server != null && !server.isEmpty(),\n-                        \"The server name can't be null or empty\");\n-        HugeServerInfo existed = this.serverInfo(server);\n-        E.checkArgument(existed == null || !existed.alive(),\n-                        \"The server with name '%s' already in cluster\",\n-                        server);\n-        E.checkArgument(role != null && !role.isEmpty(),\n-                        \"The server role can't be null or empty\");\n-        GraphRole graphRole = GraphRole.valueOf(role.toUpperCase());\n-        if (graphRole.master()) {\n-            Iterator<HugeServerInfo> servers = this.serverInfos(ImmutableMap.of(\n-                                               HugeServerInfo.P.ROLE,\n-                                               GraphRole.MASTER.code()),\n-                                               1, PAGE_NONE);\n-            if (servers.hasNext()) {\n-                existed = servers.next();\n-                E.checkArgument(!existed.alive(),\n-                                \"Already existed master '%s' in current \" +\n-                                \"cluster\", existed.id());\n-            }\n-        }\n-        HugeServerInfo serverInfo = new HugeServerInfo(server, graphRole);\n-        this.serverId = serverInfo.id();\n-        this.serverRole = graphRole;\n-        this.save(serverInfo);\n-    }\n-\n-    public Id serverId() {\n-        return this.serverId;\n-    }\n-\n-    public GraphRole serverRole() {\n-        return this.serverRole;\n-    }\n-\n-    public boolean master() {\n-        return this.serverRole() != null && this.serverRole().master();\n-    }\n-\n-    public void heartbeat() {\n-        HugeServerInfo server = this.serverInfo();\n-        server.updateTime(DateUtil.now());\n-        this.save(server);\n-    }\n-\n-    private void initSchemaIfNeeded() {\n-        HugeServerInfo.schema(this.graph).initSchemaIfNeeded();\n-    }\n-\n-    private GraphTransaction tx() {\n-        return this.graph.systemTransaction();\n-    }\n-\n-    public Id save(HugeServerInfo server) {\n-        // Construct vertex from task\n-        HugeVertex vertex = this.constructVertex(server);\n-        // Add or update user in backend store, stale index might exist\n-        vertex = this.tx().addVertex(vertex);\n-        this.commitOrRollback();\n-        return vertex.id();\n-    }\n-\n-    private HugeVertex constructVertex(HugeServerInfo server) {\n-        HugeServerInfo.Schema schema = HugeServerInfo.schema(this.graph);\n-        if (!schema.existVertexLabel(HugeServerInfo.P.SERVER)) {\n-            throw new HugeException(\"Schema is missing for %s '%s'\",\n-                                    HugeServerInfo.P.SERVER, server);\n-        }\n-        return this.tx().constructVertex(false, server.asArray());\n-    }\n-\n-    private void commitOrRollback() {\n-        this.tx().commitOrRollback();\n-    }\n-\n-    public HugeServerInfo serverInfo() {\n-        Iterator<Vertex> vertices = this.tx().queryVertices(this.serverId);\n-        Vertex vertex = QueryResults.one(vertices);\n-        if (vertex == null) {\n-            return null;\n-        }\n-        return HugeServerInfo.fromVertex(vertex);\n-    }\n-\n-    public HugeServerInfo serverInfo(String name) {\n-        E.checkArgument(name != null && !name.isEmpty(),\n-                        \"The server name can't be null or emtpy\");\n-        Id server = IdGenerator.of(name);\n-        Iterator<Vertex> vertices = this.tx().queryVertices(server);\n-        Vertex vertex = QueryResults.one(vertices);\n-        if (vertex == null) {\n-            return null;\n-        }\n-        return HugeServerInfo.fromVertex(vertex);\n-    }\n-\n-    public Iterator<HugeServerInfo> serverInfos(long limit, String page) {\n-        return this.serverInfos(ImmutableMap.of(), limit, page);\n-    }\n-\n-    private Iterator<HugeServerInfo> serverInfos(Map<String, Object> conditions,\n-                                                 long limit, String page) {\n-        ConditionQuery query = new ConditionQuery(HugeType.VERTEX);\n-        if (page != null) {\n-            query.page(page);\n-        }\n-        VertexLabel vl = this.graph.graph().vertexLabel(HugeServerInfo.P.SERVER);\n-\n-\n-        query.eq(HugeKeys.LABEL, vl.id());\n-        for (Map.Entry<String, Object> entry : conditions.entrySet()) {\n-            PropertyKey pk = this.graph.graph().propertyKey(entry.getKey());\n-            query.query(Condition.eq(pk.id(), entry.getValue()));\n-        }\n-        query.showHidden(true);\n-        if (limit != NO_LIMIT) {\n-            query.limit(limit);\n-        }\n-        Iterator<Vertex> vertices = this.tx().queryVertices(query);\n-        Iterator<HugeServerInfo> servers =\n-                new MapperIterator<>(vertices, HugeServerInfo::fromVertex);\n-        // Convert iterator to list to avoid across thread tx accessed\n-        return QueryResults.toList(servers);\n-    }\n-}\n"}}, {"oid": "8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "url": "https://github.com/hugegraph/hugegraph/commit/8ddd1e05671fa4a4dcc56064bed3ca6ef37f6dfb", "message": "first version schedule async job on worker\n\nChange-Id: I06478c6dcf64699aba336aa5c032337bd297783b", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "bd4377e04707eba7d4a6c71e3fe4f0e6a98cff6f", "url": "https://github.com/hugegraph/hugegraph/commit/bd4377e04707eba7d4a6c71e3fe4f0e6a98cff6f", "message": "close taskScheduler when shutdown\n\nChange-Id: I39306140f3d4682b7de88bfa2b4277c622ca8560", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "9e7fbd6635cd6d5205a8c66c83ba9366e742b411", "url": "https://github.com/hugegraph/hugegraph/commit/9e7fbd6635cd6d5205a8c66c83ba9366e742b411", "message": "implement Server info schema and r/w\n\nChange-Id: I804eab3fe05807b8ca3482207268340bb1b09a71", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "0937abb82418d8408efc9043e8ee4e58c0602621", "url": "https://github.com/hugegraph/hugegraph/commit/0937abb82418d8408efc9043e8ee4e58c0602621", "message": "support cancel and restore tasks in cluster\n\nChange-Id: I55ab99d497c13eb7803e76da3dcc7d9f8850c57b", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "e63045d99c977b9aa9a5769872fa86a05bdb8426", "url": "https://github.com/hugegraph/hugegraph/commit/e63045d99c977b9aa9a5769872fa86a05bdb8426", "message": "master submit or cancel tasks immediately\n\nChange-Id: Ie5dd63e0e977eda9dd0a795b34f0898252b45d2b", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "e5fc6f1b2f9f140e9c7a9dd837033d4b4d5fd10d", "url": "https://github.com/hugegraph/hugegraph/commit/e5fc6f1b2f9f140e9c7a9dd837033d4b4d5fd10d", "message": "master schedule task periodic and decrease server load when task done\n\nChange-Id: If48dac267863c6757de16eb4d6ea12f26cdc6087", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "a0267b421af753ee19be526ea51264ff4d041bea", "url": "https://github.com/hugegraph/hugegraph/commit/a0267b421af753ee19be526ea51264ff4d041bea", "message": "only schedule and cancel tasks in periodic job for master\n\nChange-Id: Iccad390f86a6b5d5605f127fc49e50713cc264df", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "8a0bab39b35d789c9d29da893d2ab3d41e14da65", "url": "https://github.com/hugegraph/hugegraph/commit/8a0bab39b35d789c9d29da893d2ab3d41e14da65", "message": "check server existed\n\nChange-Id: I016eebc92314e23b7cfd622dbca78df2f4ab63c2", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "50e3e3e620af4a79087d701e1658bfe44bc37b02", "url": "https://github.com/hugegraph/hugegraph/commit/50e3e3e620af4a79087d701e1658bfe44bc37b02", "message": "add default server config in rest-server.properties\n\nChange-Id: Idf77f479c766aaa0a29b74fbd5ab92828ffebfba", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "68cb1166b071ed9b10611ad548d2e13a0cfd4c06", "url": "https://github.com/hugegraph/hugegraph/commit/68cb1166b071ed9b10611ad548d2e13a0cfd4c06", "message": "improve\n\nChange-Id: Ibd141875868babf993e04cc64a6285e903fd6ed5", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "a6577f47bd3ba056a3cf14905477489a16cedfec", "url": "https://github.com/hugegraph/hugegraph/commit/a6577f47bd3ba056a3cf14905477489a16cedfec", "message": "improve\n\nChange-Id: Iac77c23432ecfccacae0f237094c2391f2db311c", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "c88dd4712755ee175f2c8a2c7e9063315b596f39", "url": "https://github.com/hugegraph/hugegraph/commit/c88dd4712755ee175f2c8a2c7e9063315b596f39", "message": "fix CachedSchemaTransaciton cachedTypes error\n\nChange-Id: Ia3b1c163f5f90c07a748b89c4be652ccc2ae6fd9", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "7e104d61c01fbafca4cc6aba2d8106c66eb35e6b", "url": "https://github.com/hugegraph/hugegraph/commit/7e104d61c01fbafca4cc6aba2d8106c66eb35e6b", "message": "improve\n\nChange-Id: I2c2dcd5abe710f5684ddda13363b17414c050fb2", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "3c718d590ce3b5fc62be47f7f89f3f67d93faba0", "url": "https://github.com/hugegraph/hugegraph/commit/3c718d590ce3b5fc62be47f7f89f3f67d93faba0", "message": "improve\n\nChange-Id: Id6960cfed0e4cce401b3e94546b86222a8c6583f", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "f794a055da9863b806b2fee99e9186dc8afecbf2", "url": "https://github.com/hugegraph/hugegraph/commit/f794a055da9863b806b2fee99e9186dc8afecbf2", "message": "improve\n\nChange-Id: I273b4a3edf6607a1319e0d6b185c31a1c7f3c83b", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "fe576b970a6ac5e6e7294e17aecf8287c6b6c0b7", "url": "https://github.com/hugegraph/hugegraph/commit/fe576b970a6ac5e6e7294e17aecf8287c6b6c0b7", "message": "improve\n\nChange-Id: Ib244ba6782d76edbc1547358f1b3c1cbc44168c0", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "3597b639cbbb6b55416fae319d0704e4144d4287", "url": "https://github.com/hugegraph/hugegraph/commit/3597b639cbbb6b55416fae319d0704e4144d4287", "message": "api test set \"check_exist\" to false in schema create\n\nChange-Id: I0e4cae424a788fcb0b61e7ee8708e4b6e05b27bb", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "d08d9d3973323fc176335ce3e26dc600b088c9d3", "url": "https://github.com/hugegraph/hugegraph/commit/d08d9d3973323fc176335ce3e26dc600b088c9d3", "message": "wait task completed in api test teardown\n\nChange-Id: I7e94e3111a735f5d25de8711321a92fb3ef45e20", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "e82087948fba7e8e66390c6e8fb0b7a081bd4e61", "url": "https://github.com/hugegraph/hugegraph/commit/e82087948fba7e8e66390c6e8fb0b7a081bd4e61", "message": "1. add dbexeutor for ServerInfoManager\n2. wait task completed in delete tests of api test\n\nChange-Id: I5fc7f828c704b49b6caada37f0648ed9e54258ae", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "85b5dc379f67e10e2cca9496837815f3fb1aad40", "url": "https://github.com/hugegraph/hugegraph/commit/85b5dc379f67e10e2cca9496837815f3fb1aad40", "message": "improve\n\nChange-Id: I663d8d22be72dba90d2a8413ef60463de1ad8363", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "2e12b3c87e40c304c9e1cde2921afa64ed6886f7", "url": "https://github.com/hugegraph/hugegraph/commit/2e12b3c87e40c304c9e1cde2921afa64ed6886f7", "message": "shutdown serverinfodbexecutor when shutdown\n\nChange-Id: I812a482100509d224bc3b26265121e2f007a837c", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "5dd9c9ac145c85f89e33923cdfd064901fafcd69", "url": "https://github.com/hugegraph/hugegraph/commit/5dd9c9ac145c85f89e33923cdfd064901fafcd69", "message": "improve\n\nChange-Id: I13323f44edb5553e5cd1fc35280e1283c9aa16ba", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "0a81f869e303067c9f0d71abe3594efcfe50add8", "url": "https://github.com/hugegraph/hugegraph/commit/0a81f869e303067c9f0d71abe3594efcfe50add8", "message": "1. make server info query compatible with memory(no paging)\n2. change cassandra ttl type from int to long\n\nChange-Id: I6780c7829cfeae5dedb60bfc50a9dbed5657f29d", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "44ba74ba5fa7085c7f475490d81ea188dc15f9c8", "url": "https://github.com/hugegraph/hugegraph/commit/44ba74ba5fa7085c7f475490d81ea188dc15f9c8", "message": "improve\n\nChange-Id: I5a3b595ea399f38d29d544dbc76c87629490bfe5", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "e7f2e028c7d2732a0eb54e7e6b155c2625720b8a", "url": "https://github.com/hugegraph/hugegraph/commit/e7f2e028c7d2732a0eb54e7e6b155c2625720b8a", "message": "improve\n\nChange-Id: Ica887e3c11d74389a7582d5a003d4436a7eb5ed9", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "2d6cdcbd7e1a7db1247db970d1a1ef54bebc20a4", "url": "https://github.com/hugegraph/hugegraph/commit/2d6cdcbd7e1a7db1247db970d1a1ef54bebc20a4", "message": "improve\n\nChange-Id: I1e40fd6a10d6d2f069912ffa529ef5096c3f6bd3", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"oid": "d456f9120dfce123d23726fc4cf3e9ca5400cfd4", "url": "https://github.com/hugegraph/hugegraph/commit/d456f9120dfce123d23726fc4cf3e9ca5400cfd4", "message": "improve\n\nChange-Id: Ib11947591ef312a8f38c0831013d06e404823b58", "committedDate": "2020-06-29T07:22:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzOTI5Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447539297", "bodyText": "define a field or method supportsPaging", "author": "javeme", "createdAt": "2020-06-30T09:19:55Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java", "diffHunk": "@@ -293,12 +295,16 @@ private void unlistenChanges() {\n                 LOG.info(\"Schedule task {} to server {}\",\n                          task.id(), server.id());\n             }\n-            page = PageInfo.pageInfo(tasks);\n+            if (page != null) {\n+                page = PageInfo.pageInfo(tasks);\n+            }\n         } while (page != null);\n     }\n \n     protected <V> void executeTasksForWorker(Id server) {\n-        String page = PageInfo.PAGE_NONE;\n+        boolean supportsPaging = this.graph().backendStoreFeatures()\n+                                     .supportsQueryByPage();", "originalCommit": "abf01c75ae252c64890acfb239b679a710dd3714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2dab852315b57cb21c5d674d114b732b43cc378", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\nindex cbef2323..fd02dfe0 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/StandardTaskScheduler.java\n\n@@ -302,9 +298,7 @@ public class StandardTaskScheduler implements TaskScheduler {\n     }\n \n     protected <V> void executeTasksForWorker(Id server) {\n-        boolean supportsPaging = this.graph().backendStoreFeatures()\n-                                     .supportsQueryByPage();\n-        String page = supportsPaging ? PageInfo.PAGE_NONE : null;\n+        String page = this.supportsPaging() ? PageInfo.PAGE_NONE : null;\n         do {\n             Iterator<HugeTask<V>> tasks = this.tasks(TaskStatus.QUEUED,\n                                                      PAGE_SIZE, page);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTgxNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447541814", "bodyText": "add \"computer\"", "author": "javeme", "createdAt": "2020-06-30T09:23:57Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -57,6 +57,15 @@ public static synchronized ServerOptions instance() {\n                     \"server-1\"\n             );\n \n+    public static final ConfigOption<String> SERVER_ROLE =\n+            new ConfigOption<>(\n+                    \"server.role\",\n+                    \"The role of nodes in the cluster, available types are \" +\n+                    \"[master, worker]\",\n+                    allowValues(\"master\", \"worker\"),", "originalCommit": "abf01c75ae252c64890acfb239b679a710dd3714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2dab852315b57cb21c5d674d114b732b43cc378", "chunk": "diff --git a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\nindex ae3bf0b2..517614d5 100644\n--- a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n+++ b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n\n@@ -62,7 +62,7 @@ public class ServerOptions extends OptionHolder {\n                     \"server.role\",\n                     \"The role of nodes in the cluster, available types are \" +\n                     \"[master, worker]\",\n-                    allowValues(\"master\", \"worker\"),\n+                    allowValues(\"master\", \"worker\", \"computer\"),\n                     \"master\"\n             );\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0OTM5MA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447549390", "bodyText": "not supported by auth graph", "author": "javeme", "createdAt": "2020-06-30T09:36:00Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -591,19 +636,22 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n+        long timeout = ((HugeConfig) this.scheduler.graph().configuration())", "originalCommit": "abf01c75ae252c64890acfb239b679a710dd3714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2dab852315b57cb21c5d674d114b732b43cc378", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\nindex 33bd2ffe..19e6b9fe 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n\n@@ -636,10 +634,8 @@ public class HugeTask<V> extends FutureTask<V> {\n     }\n \n     public void syncWait() {\n-        long timeout = ((HugeConfig) this.scheduler.graph().configuration())\n-                       .get(CoreOptions.TASK_WAIT_TIMEOUT);\n         try {\n-            this.scheduler().waitUntilTaskCompleted(this.id(), timeout, 10L);\n+            this.scheduler().waitUntilTaskCompleted(this.id());\n         } catch (Exception e) {\n             if (this.callable() instanceof EphemeralJob &&\n                 e.getClass() == NotFoundException.class &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1MDIxMA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447550210", "bodyText": "can read timeout in scheduler.waitUntilTaskCompleted()", "author": "javeme", "createdAt": "2020-06-30T09:37:20Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java", "diffHunk": "@@ -591,19 +636,22 @@ private void checkPropertySize(int propertyLength, String propertyName) {\n     }\n \n     public void syncWait() {\n+        long timeout = ((HugeConfig) this.scheduler.graph().configuration())\n+                       .get(CoreOptions.TASK_WAIT_TIMEOUT);\n         try {\n-            this.get();\n-            assert this.completed();\n-        } catch (ExecutionException e) {\n-            Throwable cause = e.getCause();\n-            if (cause instanceof RuntimeException) {\n-                throw (RuntimeException) cause;\n-            }\n-            throw new HugeException(\"Async task failed with error: %s\",\n-                                    cause, cause.getMessage());\n+            this.scheduler().waitUntilTaskCompleted(this.id(), timeout, 10L);", "originalCommit": "abf01c75ae252c64890acfb239b679a710dd3714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2dab852315b57cb21c5d674d114b732b43cc378", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\nindex 33bd2ffe..19e6b9fe 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/HugeTask.java\n\n@@ -636,10 +634,8 @@ public class HugeTask<V> extends FutureTask<V> {\n     }\n \n     public void syncWait() {\n-        long timeout = ((HugeConfig) this.scheduler.graph().configuration())\n-                       .get(CoreOptions.TASK_WAIT_TIMEOUT);\n         try {\n-            this.scheduler().waitUntilTaskCompleted(this.id(), timeout, 10L);\n+            this.scheduler().waitUntilTaskCompleted(this.id());\n         } catch (Exception e) {\n             if (this.callable() instanceof EphemeralJob &&\n                 e.getClass() == NotFoundException.class &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU1NzA1Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447557057", "bodyText": "ensure completed, call this.schedulerExecutor.submit(closeTx).get()", "author": "javeme", "createdAt": "2020-06-30T09:48:27Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java", "diffHunk": "@@ -114,18 +151,49 @@ private void closeTaskTx(HugeGraphParams graph) {\n         }\n     }\n \n+    private void closeSchedulerTx(HugeGraphParams graph) {\n+        final Callable<Void> closeTx = () -> {\n+            // Do close-tx for current thread\n+            graph.closeTx();\n+            // Let other threads run\n+            Thread.yield();\n+            return null;\n+        };\n+\n+        try {\n+            this.schedulerExecutor.submit(closeTx);", "originalCommit": "abf01c75ae252c64890acfb239b679a710dd3714", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2dab852315b57cb21c5d674d114b732b43cc378", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\nindex fa2ba2fa..82c4e5ce 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/task/TaskManager.java\n\n@@ -161,7 +161,7 @@ public final class TaskManager {\n         };\n \n         try {\n-            this.schedulerExecutor.submit(closeTx);\n+            this.schedulerExecutor.submit(closeTx).get();\n         } catch (Exception e) {\n             throw new HugeException(\"Exception when closing scheduler tx\", e);\n         }\n"}}, {"oid": "c2dab852315b57cb21c5d674d114b732b43cc378", "url": "https://github.com/hugegraph/hugegraph/commit/c2dab852315b57cb21c5d674d114b732b43cc378", "message": "wait close scheduler tx done\n\nChange-Id: Iff72fc89737c8b05ff22ffcc86cc9c00bc555144", "committedDate": "2020-06-30T10:15:59Z", "type": "forcePushed"}, {"oid": "4d073d36e4a3dc6f88afbebcbfde889557ad2b25", "url": "https://github.com/hugegraph/hugegraph/commit/4d073d36e4a3dc6f88afbebcbfde889557ad2b25", "message": "wait close scheduler tx done\n\nChange-Id: Iff72fc89737c8b05ff22ffcc86cc9c00bc555144", "committedDate": "2020-06-30T11:31:22Z", "type": "commit"}, {"oid": "4d073d36e4a3dc6f88afbebcbfde889557ad2b25", "url": "https://github.com/hugegraph/hugegraph/commit/4d073d36e4a3dc6f88afbebcbfde889557ad2b25", "message": "wait close scheduler tx done\n\nChange-Id: Iff72fc89737c8b05ff22ffcc86cc9c00bc555144", "committedDate": "2020-06-30T11:31:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMTEyNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1030#discussion_r447631124", "bodyText": "also update line 64", "author": "javeme", "createdAt": "2020-06-30T12:06:47Z", "path": "hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java", "diffHunk": "@@ -62,7 +62,7 @@ public static synchronized ServerOptions instance() {\n                     \"server.role\",\n                     \"The role of nodes in the cluster, available types are \" +\n                     \"[master, worker]\",\n-                    allowValues(\"master\", \"worker\"),\n+                    allowValues(\"master\", \"worker\", \"computer\"),", "originalCommit": "4d073d36e4a3dc6f88afbebcbfde889557ad2b25", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c21e70459f809757d4ab3d8c9e410eed951d82f5", "chunk": "diff --git a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\nindex 517614d5..c1949399 100644\n--- a/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n+++ b/hugegraph-api/src/main/java/com/baidu/hugegraph/config/ServerOptions.java\n\n@@ -61,7 +61,7 @@ public class ServerOptions extends OptionHolder {\n             new ConfigOption<>(\n                     \"server.role\",\n                     \"The role of nodes in the cluster, available types are \" +\n-                    \"[master, worker]\",\n+                    \"[master, worker, computer]\",\n                     allowValues(\"master\", \"worker\", \"computer\"),\n                     \"master\"\n             );\n"}}, {"oid": "c21e70459f809757d4ab3d8c9e410eed951d82f5", "url": "https://github.com/hugegraph/hugegraph/commit/c21e70459f809757d4ab3d8c9e410eed951d82f5", "message": "improve\n\nChange-Id: Iaad40388421a650761f01699eedcc4f5ad002f28", "committedDate": "2020-06-30T12:12:16Z", "type": "commit"}]}