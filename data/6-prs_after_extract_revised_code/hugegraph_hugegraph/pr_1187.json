{"pr_number": 1187, "pr_title": "Use one raft node to manage three stores", "pr_createdAt": "2020-09-22T06:28:49Z", "pr_url": "https://github.com/hugegraph/hugegraph/pull/1187", "timeline": [{"oid": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "url": "https://github.com/hugegraph/hugegraph/commit/8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "message": "Use one raft node to manage three stores\n\nChange-Id: I64a363a46b806355cd844e655d51062b4cac2706", "committedDate": "2020-09-23T07:05:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI0OTU3Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493249577", "bodyText": "should keep comment \"// TODO: When support sharding, groupId needs to be bound to shard Id\"?", "author": "javeme", "createdAt": "2020-09-23T07:15:40Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -59,61 +58,71 @@\n \n     private static final Logger LOG = Log.logger(RaftNode.class);\n \n-    private final String group;\n-    private final StoreStateMachine stateMachine;\n+    private final RaftSharedContext context;\n     private final Node node;\n+    private final StoreStateMachine stateMachine;\n+    private final AtomicLong leaderTerm;\n \n     private final Object electedLock;\n     private volatile boolean elected;\n     private volatile boolean started;\n     private final AtomicInteger busyCounter;\n \n-    public RaftNode(String group, BackendStore store,\n-                    RaftSharedContext context) {\n-        this.group = group;\n-        this.stateMachine = new StoreStateMachine(store, this, context);\n+    public RaftNode(RaftSharedContext context) {\n+        this.context = context;\n+        this.stateMachine = new StoreStateMachine(context);\n         try {\n-            this.node = this.initRaftNode(store, context);\n+            this.node = this.initRaftNode();\n         } catch (IOException e) {\n             throw new BackendException(\"Failed to init raft node\", e);\n         }\n         this.node.addReplicatorStateListener(new RaftNodeStateListener());\n+        this.leaderTerm = new AtomicLong(-1);\n         this.electedLock = new Object();\n         this.elected = false;\n         this.started = false;\n         this.busyCounter = new AtomicInteger();\n     }\n \n-    public String group() {\n-        return this.group;\n+    public RaftSharedContext context() {\n+        return this.context;\n     }\n \n     public Node node() {\n         return this.node;\n     }\n \n-    public NodeId nodeId() {\n-        return this.node.getNodeId();\n+    public PeerId nodeId() {\n+        return this.node.getNodeId().getPeerId();\n+    }\n+\n+    public PeerId leaderId() {\n+        return this.node.getLeaderId();\n+    }\n+\n+    public boolean isRaftLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    public void leaderTerm(long term) {\n+        this.leaderTerm.set(term);\n     }\n \n     public void shutdown() {\n         this.node.shutdown();\n     }\n \n-    private Node initRaftNode(BackendStore store, RaftSharedContext context)\n-                              throws IOException {\n-        String storePath = store.database() + \"-\" + store.store();\n-        NodeOptions nodeOptions = context.nodeOptions(storePath);\n+    private Node initRaftNode() throws IOException {\n+        NodeOptions nodeOptions = this.context.nodeOptions();\n         nodeOptions.setFsm(this.stateMachine);\n \n-        // TODO: When support sharding, groupId needs to be bound to shard Id\n-        String groupId = storePath;\n-        PeerId endpoint = context.endpoint();\n-\n+        String groupId = this.context.group();", "originalCommit": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex c5b783e5..f5c6254a 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n\n@@ -115,7 +115,7 @@ public class RaftNode {\n     private Node initRaftNode() throws IOException {\n         NodeOptions nodeOptions = this.context.nodeOptions();\n         nodeOptions.setFsm(this.stateMachine);\n-\n+        // TODO: When support sharding, groupId needs to be bound to shard Id\n         String groupId = this.context.group();\n         PeerId endpoint = this.context.endpoint();\n         RpcServer rpcServer = this.context.rpcServer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTE5OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493251198", "bodyText": "remove \"election\"", "author": "javeme", "createdAt": "2020-09-23T07:18:45Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -176,7 +186,7 @@ protected void waitLeaderElected(int timeout) {\n                 } catch (InterruptedException e) {\n                     throw new BackendException(\n                               \"Wait raft group '%s' election error\",\n-                              e, this.group(), \"election\");\n+                              e, group, \"election\");", "originalCommit": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTQxNA==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493251414", "bodyText": "improve message: \"Interrupted while waiting raft group '%s' election\"", "author": "javeme", "createdAt": "2020-09-23T07:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MTE5OA=="}], "type": "inlineReview", "revised_code": {"commit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex c5b783e5..f5c6254a 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n\n@@ -185,8 +185,8 @@ public class RaftNode {\n                     this.electedLock.wait(RaftSharedContext.POLL_INTERVAL);\n                 } catch (InterruptedException e) {\n                     throw new BackendException(\n-                              \"Wait raft group '%s' election error\",\n-                              e, group, \"election\");\n+                              \"Interrupted while waiting raft group '%s' \" +\n+                              \"election\", e, group);\n                 }\n                 if (this.elected) {\n                     break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1MjU3OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493252579", "bodyText": "assert storeType == StoreType.SYSTEM", "author": "javeme", "createdAt": "2020-09-23T07:21:19Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -92,31 +108,69 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n     }\n \n-    public void addNode(String group, BackendStore store) {\n-        if (!this.nodes.containsKey(group)) {\n-            synchronized (this.nodes) {\n-                if (!this.nodes.containsKey(group)) {\n-                    LOG.info(\"Initing raft node for '{}'\", group);\n-                    RaftNode node = new RaftNode(group, store, this);\n-                    this.nodes.put(group, node);\n-                }\n-            }\n+    public void addStore(String name, RaftBackendStore store) {\n+        this.stores.put(name, store);\n+    }\n+\n+    public StoreType storeType(String store) {\n+        if (this.schemaStoreName.equals(store)) {\n+            return StoreType.SCHEMA;\n+        } else if (this.graphStoreName.equals(store)) {\n+            return StoreType.GRAPH;\n+        } else {\n+            assert this.systemStoreName.equals(store);\n+            return StoreType.SYSTEM;\n+        }\n+    }\n+\n+    public BackendStore originStore(StoreType storeType) {\n+        if (storeType == StoreType.SCHEMA) {\n+            return this.stores.get(this.schemaStoreName).originStore();\n+        } else if (storeType == StoreType.GRAPH) {\n+            return this.stores.get(this.graphStoreName).originStore();\n+        } else {\n+            return this.stores.get(this.systemStoreName).originStore();", "originalCommit": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\nindex e65b1a85..9b5edf0b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n\n@@ -140,8 +140,8 @@ public final class RaftSharedContext {\n         return DEFAULT_GROUP;\n     }\n \n-    public void addStore(String name, RaftBackendStore store) {\n-        this.stores.put(name, store);\n+    public void addStore(StoreType type, RaftBackendStore store) {\n+        this.stores[type.ordinal()] = store;\n     }\n \n     public StoreType storeType(String store) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1Mzg2NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493253865", "bodyText": "don't copy, just wrap by bytebuffer with offset", "author": "javeme", "createdAt": "2020-09-23T07:23:39Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -44,16 +53,18 @@ public StoreAction action() {\n     }\n \n     public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + this.data.length];\n-        bytes[0] = this.action.code();\n-        System.arraycopy(this.data, 0, bytes, 1, this.data.length);\n+        byte[] bytes = new byte[1 + 1 + this.data.length];\n+        bytes[0] = (byte) this.type.getNumber();\n+        bytes[1] = (byte) this.action.getNumber();\n+        System.arraycopy(this.data, 0, bytes, 2, this.data.length);\n         return bytes;\n     }\n \n     public static StoreCommand fromBytes(byte[] bytes) {\n-        StoreAction action = StoreAction.fromCode(bytes[0]);\n-        byte[] data = new byte[bytes.length - 1];\n-        System.arraycopy(bytes, 1, data, 0, bytes.length - 1);\n-        return new StoreCommand(action, data);\n+        StoreType type = StoreType.valueOf(bytes[0]);\n+        StoreAction action = StoreAction.valueOf(bytes[1]);\n+        byte[] data = new byte[bytes.length - 2];\n+        System.arraycopy(bytes, 2, data, 0, bytes.length - 2);", "originalCommit": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\nindex c1cc727e..de0979d5 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n\n@@ -52,19 +53,15 @@ public class StoreCommand {\n         return this.data;\n     }\n \n-    public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + 1 + this.data.length];\n-        bytes[0] = (byte) this.type.getNumber();\n-        bytes[1] = (byte) this.action.getNumber();\n-        System.arraycopy(this.data, 0, bytes, 2, this.data.length);\n+    public static byte[] wrap(byte value) {\n+        byte[] bytes = new byte[3];\n+        bytes[2] = value;\n         return bytes;\n     }\n \n     public static StoreCommand fromBytes(byte[] bytes) {\n         StoreType type = StoreType.valueOf(bytes[0]);\n         StoreAction action = StoreAction.valueOf(bytes[1]);\n-        byte[] data = new byte[bytes.length - 2];\n-        System.arraycopy(bytes, 2, data, 0, bytes.length - 2);\n-        return new StoreCommand(type, action, data);\n+        return new StoreCommand(type, action, bytes);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1NTk4Mw==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493255983", "bodyText": "reserve two bytes when allocate this.data", "author": "javeme", "createdAt": "2020-09-23T07:26:54Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -44,16 +53,18 @@ public StoreAction action() {\n     }\n \n     public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + this.data.length];\n-        bytes[0] = this.action.code();\n-        System.arraycopy(this.data, 0, bytes, 1, this.data.length);\n+        byte[] bytes = new byte[1 + 1 + this.data.length];\n+        bytes[0] = (byte) this.type.getNumber();\n+        bytes[1] = (byte) this.action.getNumber();\n+        System.arraycopy(this.data, 0, bytes, 2, this.data.length);", "originalCommit": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\nindex c1cc727e..de0979d5 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n\n@@ -52,19 +53,15 @@ public class StoreCommand {\n         return this.data;\n     }\n \n-    public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + 1 + this.data.length];\n-        bytes[0] = (byte) this.type.getNumber();\n-        bytes[1] = (byte) this.action.getNumber();\n-        System.arraycopy(this.data, 0, bytes, 2, this.data.length);\n+    public static byte[] wrap(byte value) {\n+        byte[] bytes = new byte[3];\n+        bytes[2] = value;\n         return bytes;\n     }\n \n     public static StoreCommand fromBytes(byte[] bytes) {\n         StoreType type = StoreType.valueOf(bytes[0]);\n         StoreAction action = StoreAction.valueOf(bytes[1]);\n-        byte[] data = new byte[bytes.length - 2];\n-        System.arraycopy(bytes, 2, data, 0, bytes.length - 2);\n-        return new StoreCommand(type, action, data);\n+        return new StoreCommand(type, action, bytes);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI1OTgzMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r493259831", "bodyText": "use array instead stores[StoreType.SCHEMA]", "author": "javeme", "createdAt": "2020-09-23T07:33:20Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -92,31 +108,69 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n     }\n \n-    public void addNode(String group, BackendStore store) {\n-        if (!this.nodes.containsKey(group)) {\n-            synchronized (this.nodes) {\n-                if (!this.nodes.containsKey(group)) {\n-                    LOG.info(\"Initing raft node for '{}'\", group);\n-                    RaftNode node = new RaftNode(group, store, this);\n-                    this.nodes.put(group, node);\n-                }\n-            }\n+    public void addStore(String name, RaftBackendStore store) {\n+        this.stores.put(name, store);\n+    }\n+\n+    public StoreType storeType(String store) {\n+        if (this.schemaStoreName.equals(store)) {\n+            return StoreType.SCHEMA;\n+        } else if (this.graphStoreName.equals(store)) {\n+            return StoreType.GRAPH;\n+        } else {\n+            assert this.systemStoreName.equals(store);\n+            return StoreType.SYSTEM;\n+        }\n+    }\n+\n+    public BackendStore originStore(StoreType storeType) {\n+        if (storeType == StoreType.SCHEMA) {\n+            return this.stores.get(this.schemaStoreName).originStore();", "originalCommit": "8023c6e3ca31465bce50f77b2f6a5e044d39e9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\nindex e65b1a85..9b5edf0b 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n\n@@ -140,8 +140,8 @@ public final class RaftSharedContext {\n         return DEFAULT_GROUP;\n     }\n \n-    public void addStore(String name, RaftBackendStore store) {\n-        this.stores.put(name, store);\n+    public void addStore(StoreType type, RaftBackendStore store) {\n+        this.stores[type.ordinal()] = store;\n     }\n \n     public StoreType storeType(String store) {\n"}}, {"oid": "d1cb42a1094457f7aad5d3b11d8a569dae060ffd", "url": "https://github.com/hugegraph/hugegraph/commit/d1cb42a1094457f7aad5d3b11d8a569dae060ffd", "message": "Use one raft node to manage three stores\n\nChange-Id: I64a363a46b806355cd844e655d51062b4cac2706", "committedDate": "2020-09-24T03:09:06Z", "type": "commit"}, {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "url": "https://github.com/hugegraph/hugegraph/commit/455fa68cdc5e85d02ce7055a70b9fee89304aeac", "message": "improve serialize StoreCommand\n\nChange-Id: Ia1f46164567726c382d3034b537c9d7907a4da51", "committedDate": "2020-09-24T03:09:08Z", "type": "commit"}, {"oid": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "url": "https://github.com/hugegraph/hugegraph/commit/455fa68cdc5e85d02ce7055a70b9fee89304aeac", "message": "improve serialize StoreCommand\n\nChange-Id: Ia1f46164567726c382d3034b537c9d7907a4da51", "committedDate": "2020-09-24T03:09:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0NjM4MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494946381", "bodyText": "remove it", "author": "javeme", "createdAt": "2020-09-25T12:15:07Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java", "diffHunk": "@@ -287,6 +287,7 @@ public void setResponse(StoreCommandResponse resp) {\n                     LOG.debug(\"StoreCommandResponse status error\");\n                     Status status = new Status(RaftError.UNKNOWN,\n                                                \"fowared request failed\");\n+                    System.out.println(\"\u5931\u8d25\u7684\u8bf7\u6c42\uff1a\" + request);", "originalCommit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\nindex f5c6254a..6a0fac6d 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftNode.java\n\n@@ -287,7 +287,6 @@ public class RaftNode {\n                     LOG.debug(\"StoreCommandResponse status error\");\n                     Status status = new Status(RaftError.UNKNOWN,\n                                                \"fowared request failed\");\n-                    System.out.println(\"\u5931\u8d25\u7684\u8bf7\u6c42\uff1a\" + request);\n                     closure.failure(status, new BackendException(\n                                     \"Current node isn't leader, leader is \" +\n                                     \"[%s], failed to forward request to \" +\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODE2OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494948169", "bodyText": "define StoreCommand.HEADER_SIZE", "author": "javeme", "createdAt": "2020-09-25T12:18:42Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -43,7 +43,11 @@\n \n     public static byte[] writeMutations(List<BackendMutation> mutations) {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + estimateSize);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);", "originalCommit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjExMQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495772111", "bodyText": "use HEADER_SIZE + 4 + estimateSize", "author": "javeme", "createdAt": "2020-09-28T08:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\nindex 95c02d4a..d29d1fc7 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n\n@@ -45,8 +45,7 @@ public class StoreSerializer {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n         // The first two bytes are reserved for StoreType and StoreAction\n         BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);\n-        buffer.write((byte) 0);\n-        buffer.write((byte) 0);\n+        StoreCommand.writeHeader(buffer);\n \n         buffer.writeVInt(mutations.size());\n         for (BackendMutation mutation : mutations) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODE5NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494948195", "bodyText": "add static method StoreCommand.writeHeader(buffer)", "author": "javeme", "createdAt": "2020-09-25T12:18:45Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -43,7 +43,11 @@\n \n     public static byte[] writeMutations(List<BackendMutation> mutations) {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + estimateSize);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);\n+        buffer.write((byte) 0);\n+        buffer.write((byte) 0);", "originalCommit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\nindex 95c02d4a..d29d1fc7 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n\n@@ -45,8 +45,7 @@ public class StoreSerializer {\n         int estimateSize = mutations.size() * MUTATION_SIZE;\n         // The first two bytes are reserved for StoreType and StoreAction\n         BytesBuffer buffer = BytesBuffer.allocate(2 + 4 + estimateSize);\n-        buffer.write((byte) 0);\n-        buffer.write((byte) 0);\n+        StoreCommand.writeHeader(buffer);\n \n         buffer.writeVInt(mutations.size());\n         for (BackendMutation mutation : mutations) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODI4OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494948288", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-09-25T12:18:57Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -128,7 +132,11 @@ public static BackendMutation readMutation(BytesBuffer buffer) {\n     }\n \n     public static byte[] writeIncrCounter(IncrCounter incrCounter) {\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + BytesBuffer.LONG_LEN);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 1 + BytesBuffer.LONG_LEN);\n+        buffer.write((byte) 0);\n+        buffer.write((byte) 0);", "originalCommit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\nindex 95c02d4a..d29d1fc7 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n\n@@ -134,8 +133,7 @@ public class StoreSerializer {\n     public static byte[] writeIncrCounter(IncrCounter incrCounter) {\n         // The first two bytes are reserved for StoreType and StoreAction\n         BytesBuffer buffer = BytesBuffer.allocate(2 + 1 + BytesBuffer.LONG_LEN);\n-        buffer.write((byte) 0);\n-        buffer.write((byte) 0);\n+        StoreCommand.writeHeader(buffer);\n \n         buffer.write(incrCounter.type().code());\n         buffer.writeVLong(incrCounter.increment());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0OTMxOQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r494949319", "bodyText": "also use getNumber()", "author": "javeme", "createdAt": "2020-09-25T12:20:54Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -93,31 +108,66 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n+    }\n+\n+    public void addStore(StoreType type, RaftBackendStore store) {\n+        this.stores[type.ordinal()] = store;", "originalCommit": "455fa68cdc5e85d02ce7055a70b9fee89304aeac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\nindex 9b5edf0b..90e48ffb 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n\n@@ -141,7 +141,7 @@ public final class RaftSharedContext {\n     }\n \n     public void addStore(StoreType type, RaftBackendStore store) {\n-        this.stores[type.ordinal()] = store;\n+        this.stores[type.getNumber()] = store;\n     }\n \n     public StoreType storeType(String store) {\n"}}, {"oid": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "url": "https://github.com/hugegraph/hugegraph/commit/3c19c4e1445198f1c42c8201262070c6aa1325f1", "message": "tiny improve\n\nChange-Id: I23ae284003d3079b55bebc57c21b613d34999374", "committedDate": "2020-09-27T11:52:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MDA3MQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495770071", "bodyText": "check store is not null", "author": "javeme", "createdAt": "2020-09-28T08:26:26Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -93,31 +108,66 @@ public RaftSharedContext(HugeGraphParams params) {\n         }\n         int backendThreads = config.get(CoreOptions.RAFT_BACKEND_THREADS);\n         this.backendExecutor = this.createBackendExecutor(backendThreads);\n+\n+        this.raftNode = null;\n+    }\n+\n+    public void initRaftNode() {\n+        this.raftNode = new RaftNode(this);\n+        CliOptions cliOptions = new CliOptions();\n+        cliOptions.setTimeoutMs(WAIT_LEADER_TIMEOUT);\n+        cliOptions.setMaxRetry(1);\n+    }\n+\n+    public void waitRaftNodeStarted() {\n+        RaftNode node = this.node();\n+        node.waitLeaderElected(RaftSharedContext.WAIT_LEADER_TIMEOUT);\n+        if (node.isRaftLeader()) {\n+            node.waitStarted(RaftSharedContext.NO_TIMEOUT);\n+        }\n     }\n \n     public void close() {\n         LOG.info(\"Stopping raft nodes\");\n-        this.nodes.values().forEach(RaftNode::shutdown);\n         this.rpcServer.shutdown();\n     }\n \n-    public RaftNode node(String group) {\n-        return this.nodes.get(group);\n+    public RaftNode node() {\n+        return this.raftNode;\n+    }\n+\n+    public String group() {\n+        return DEFAULT_GROUP;\n+    }\n+\n+    public void addStore(StoreType type, RaftBackendStore store) {\n+        this.stores[type.getNumber()] = store;\n+    }\n+\n+    public StoreType storeType(String store) {\n+        if (this.schemaStoreName.equals(store)) {\n+            return StoreType.SCHEMA;\n+        } else if (this.graphStoreName.equals(store)) {\n+            return StoreType.GRAPH;\n+        } else {\n+            assert this.systemStoreName.equals(store);\n+            return StoreType.SYSTEM;\n+        }\n     }\n \n-    public void addNode(String group, BackendStore store) {\n-        if (!this.nodes.containsKey(group)) {\n-            synchronized (this.nodes) {\n-                if (!this.nodes.containsKey(group)) {\n-                    LOG.info(\"Initing raft node for '{}'\", group);\n-                    RaftNode node = new RaftNode(group, store, this);\n-                    this.nodes.put(group, node);\n-                }\n-            }\n+    public BackendStore originStore(StoreType storeType) {\n+        return this.stores[storeType.getNumber()].originStore();", "originalCommit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1819bf2016bd6f249240aa5786ad36f039444d96", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\nindex 90e48ffb..c774fea6 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n\n@@ -156,7 +157,10 @@ public final class RaftSharedContext {\n     }\n \n     public BackendStore originStore(StoreType storeType) {\n-        return this.stores[storeType.getNumber()].originStore();\n+        RaftBackendStore raftStore = this.stores[storeType.getNumber()];\n+        E.checkState(raftStore != null,\n+                     \"The raft store type %s shouldn't be null\");\n+        return raftStore.originStore();\n     }\n \n     public Collection<BackendStore> originStores() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MDY0NQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495770645", "bodyText": "use HEADER_SIZE here", "author": "javeme", "createdAt": "2020-09-28T08:27:21Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -19,20 +19,33 @@\n \n package com.baidu.hugegraph.backend.store.raft;\n \n+import com.baidu.hugegraph.backend.serializer.BytesBuffer;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreAction;\n+import com.baidu.hugegraph.backend.store.raft.RaftRequests.StoreType;\n+\n public class StoreCommand {\n \n-    private static byte[] EMPTY = new byte[0];\n+    public static final int HEADER_SIZE = 2;\n \n+    private final StoreType type;\n     private final StoreAction action;\n     private final byte[] data;\n \n-    public StoreCommand(StoreAction action) {\n-        this(action, EMPTY);\n+    public StoreCommand(StoreType type, StoreAction action, byte[] data) {\n+        this.type = type;\n+        this.action = action;\n+        if (data == null) {\n+            this.data = new byte[2];", "originalCommit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1819bf2016bd6f249240aa5786ad36f039444d96", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\nindex 2c644f1e..95accfe2 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n\n@@ -35,9 +35,9 @@ public class StoreCommand {\n         this.type = type;\n         this.action = action;\n         if (data == null) {\n-            this.data = new byte[2];\n+            this.data = new byte[HEADER_SIZE];\n         } else {\n-            assert data.length >= 2;\n+            assert data.length >= HEADER_SIZE;\n             this.data = data;\n         }\n         this.data[0] = (byte) this.type.getNumber();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MTA1OA==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495771058", "bodyText": "use HEADER_SIZE here", "author": "javeme", "createdAt": "2020-09-28T08:28:02Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java", "diffHunk": "@@ -43,17 +56,20 @@ public StoreAction action() {\n         return this.data;\n     }\n \n-    public byte[] toBytes() {\n-        byte[] bytes = new byte[1 + this.data.length];\n-        bytes[0] = this.action.code();\n-        System.arraycopy(this.data, 0, bytes, 1, this.data.length);\n+    public static void writeHeader(BytesBuffer buffer) {\n+        buffer.write((byte) 0);\n+        buffer.write((byte) 0);\n+    }\n+\n+    public static byte[] wrap(byte value) {\n+        byte[] bytes = new byte[3];", "originalCommit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1819bf2016bd6f249240aa5786ad36f039444d96", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\nindex 2c644f1e..95accfe2 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommand.java\n\n@@ -62,7 +62,7 @@ public class StoreCommand {\n     }\n \n     public static byte[] wrap(byte value) {\n-        byte[] bytes = new byte[3];\n+        byte[] bytes = new byte[HEADER_SIZE + 1];\n         bytes[2] = value;\n         return bytes;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjE4OQ==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495772189", "bodyText": "ditto", "author": "javeme", "createdAt": "2020-09-28T08:30:00Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java", "diffHunk": "@@ -128,7 +131,10 @@ public static BackendMutation readMutation(BytesBuffer buffer) {\n     }\n \n     public static byte[] writeIncrCounter(IncrCounter incrCounter) {\n-        BytesBuffer buffer = BytesBuffer.allocate(1 + BytesBuffer.LONG_LEN);\n+        // The first two bytes are reserved for StoreType and StoreAction\n+        BytesBuffer buffer = BytesBuffer.allocate(2 + 1 + BytesBuffer.LONG_LEN);", "originalCommit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1819bf2016bd6f249240aa5786ad36f039444d96", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\nindex d29d1fc7..03ac5157 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreSerializer.java\n\n@@ -132,7 +133,8 @@ public class StoreSerializer {\n \n     public static byte[] writeIncrCounter(IncrCounter incrCounter) {\n         // The first two bytes are reserved for StoreType and StoreAction\n-        BytesBuffer buffer = BytesBuffer.allocate(2 + 1 + BytesBuffer.LONG_LEN);\n+        BytesBuffer buffer = BytesBuffer.allocate(StoreCommand.HEADER_SIZE +\n+                                                  1 + BytesBuffer.LONG_LEN);\n         StoreCommand.writeHeader(buffer);\n \n         buffer.write(incrCounter.type().code());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NDI3Mg==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495774272", "bodyText": "if request.getData() returns ByteBuffer, just wrap it with BytesBuffer then pass into  StoreCommand", "author": "javeme", "createdAt": "2020-09-28T08:33:51Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/StoreCommandRequestProcessor.java", "diffHunk": "@@ -75,9 +68,9 @@ public String interest() {\n     }\n \n     private StoreCommand parseStoreCommand(StoreCommandRequest request) {\n-        byte actionByte = (byte) request.getAction().getNumber();\n-        StoreAction action = StoreAction.fromCode(actionByte);\n+        StoreType type = request.getType();\n+        StoreAction action = request.getAction();\n         byte[] data = request.getData().toByteArray();\n-        return new StoreCommand(action, data);\n+        return new StoreCommand(type, action, data);", "originalCommit": "3c19c4e1445198f1c42c8201262070c6aa1325f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNjM4Nw==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r495936387", "bodyText": "no, it return com.google.protobuf.ByteString", "author": "Linary", "createdAt": "2020-09-28T13:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3NDI3Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1819bf2016bd6f249240aa5786ad36f039444d96", "url": "https://github.com/hugegraph/hugegraph/commit/1819bf2016bd6f249240aa5786ad36f039444d96", "message": "replace 2 with HEADER_SIZE\n\nChange-Id: I1097e9fd6cea23ef6b22738d3ba240aa298933e6", "committedDate": "2020-09-28T13:22:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQzODQyNg==", "url": "https://github.com/hugegraph/hugegraph/pull/1187#discussion_r496438426", "bodyText": "missing parameter, and improve \"The raft store of type %s shouldn't be null\"", "author": "javeme", "createdAt": "2020-09-29T06:07:52Z", "path": "hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java", "diffHunk": "@@ -156,7 +157,10 @@ public StoreType storeType(String store) {\n     }\n \n     public BackendStore originStore(StoreType storeType) {\n-        return this.stores[storeType.getNumber()].originStore();\n+        RaftBackendStore raftStore = this.stores[storeType.getNumber()];\n+        E.checkState(raftStore != null,\n+                     \"The raft store type %s shouldn't be null\");", "originalCommit": "1819bf2016bd6f249240aa5786ad36f039444d96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0caf2cb661a9ebf6743c421374e2d107f457189c", "chunk": "diff --git a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\nindex c774fea6..f6a49786 100644\n--- a/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n+++ b/hugegraph-core/src/main/java/com/baidu/hugegraph/backend/store/raft/RaftSharedContext.java\n\n@@ -159,7 +159,7 @@ public final class RaftSharedContext {\n     public BackendStore originStore(StoreType storeType) {\n         RaftBackendStore raftStore = this.stores[storeType.getNumber()];\n         E.checkState(raftStore != null,\n-                     \"The raft store type %s shouldn't be null\");\n+                     \"The raft store of type %s shouldn't be null\", storeType);\n         return raftStore.originStore();\n     }\n \n"}}, {"oid": "0caf2cb661a9ebf6743c421374e2d107f457189c", "url": "https://github.com/hugegraph/hugegraph/commit/0caf2cb661a9ebf6743c421374e2d107f457189c", "message": "tiny improve\n\nChange-Id: I544e377044db1acae34c7276bba6084f7c0f7117", "committedDate": "2020-09-29T06:13:00Z", "type": "commit"}, {"oid": "0caf2cb661a9ebf6743c421374e2d107f457189c", "url": "https://github.com/hugegraph/hugegraph/commit/0caf2cb661a9ebf6743c421374e2d107f457189c", "message": "tiny improve\n\nChange-Id: I544e377044db1acae34c7276bba6084f7c0f7117", "committedDate": "2020-09-29T06:13:00Z", "type": "forcePushed"}]}