{"pr_number": 275, "pr_title": "[#267 ] governance add Retry / CircuitBreaker / Bulkhead", "pr_createdAt": "2020-10-27T08:37:16Z", "pr_url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275", "timeline": [{"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/1d419ac3c1700b5d8068330f7124b2e247998dd0", "message": "governance add retry", "committedDate": "2020-10-27T08:43:16Z", "type": "commit"}, {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/1d419ac3c1700b5d8068330f7124b2e247998dd0", "message": "governance add retry", "committedDate": "2020-10-27T08:43:16Z", "type": "forcePushed"}, {"oid": "b4432a8e1bbe58b2df586ad2064b138d1dce1180", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/b4432a8e1bbe58b2df586ad2064b138d1dce1180", "message": "support CircuitBreaker", "committedDate": "2020-10-28T08:28:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA==", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513271080", "bodyText": "\u90a3\u4e48\u5982\u4f55\u533a\u5206\u5355\u4f4d\u5462", "author": "tianxiaoliang", "createdAt": "2020-10-28T08:50:53Z", "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())\n+          //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n+          .waitDurationInOpenState(Duration.ofMillis(policy.getWaitDurationInOpenState()))\n+          //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n+          .slowCallDurationThreshold(Duration.ofMillis(policy.getSlowCallDurationThreshold()))\n+          //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n+          .permittedNumberOfCallsInHalfOpenState(policy.getPermittedNumberOfCallsInHalfOpenState())\n+          //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n+          .minimumNumberOfCalls(policy.getMinimumNumberOfCalls())\n+          //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n+          .slidingWindowType(policy.getSlidingWindowType())\n+          //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n+          .slidingWindowSize(policy.getSlidingWindowSize())", "originalCommit": "b4432a8e1bbe58b2df586ad2064b138d1dce1180", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4MzcyOQ==", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513283729", "bodyText": "resilience4j\u5b9a\u6b7b\u7684\uff0c\u53ea\u80fd\u662f\u79d2", "author": "GuoYL123", "createdAt": "2020-10-28T09:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NjYyMg==", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513286622", "bodyText": "\u901a\u8fc7slidingWindowType \u6765\u786e\u5b9a", "author": "GuoYL123", "createdAt": "2020-10-28T09:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NTc4Nw==", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513345787", "bodyText": "\u53ea\u9700\u8981\u66b4\u9732\u79d2\u7684\u80fd\u529b\uff0c\u4e0d\u8981\u66b4\u9732\u6b21\u6570", "author": "tianxiaoliang", "createdAt": "2020-10-28T10:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA=="}], "type": "inlineReview", "revised_code": {"commit": "0d77a5bb63a26cfbe2cfe8747fcd7c74b239bcc0", "chunk": "diff --git a/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java b/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java\nindex 9743022..6929d65 100644\n--- a/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java\n+++ b/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java\n\n@@ -25,20 +25,22 @@ import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n \n import java.time.Duration;\n-import java.util.HashMap;\n-import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n-public class CircuitBreakerHandler implements GovHandler {\n-\n-  private Map<String, CircuitBreaker> map = new HashMap<>();\n+public class CircuitBreakerHandler extends AbstractGovHandler<CircuitBreaker> {\n \n   @Override\n   public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n-    return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n+    CircuitBreaker circuitBreaker = getActuator(policy.name(), (CircuitBreakerPolicy) policy, this::getCircuitBreaker);\n+    return supplier.withCircuitBreaker(circuitBreaker);\n+  }\n+\n+  @Override\n+  public HandlerType type() {\n+    return HandlerType.SERVER;\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3NTYzMg==", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513275632", "bodyText": "I noticed that some notes are in Chinese and some are in English. Is it necessary to unify the language of description?", "author": "develpoerX", "createdAt": "2020-10-28T08:58:04Z", "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())", "originalCommit": "b4432a8e1bbe58b2df586ad2064b138d1dce1180", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d77a5bb63a26cfbe2cfe8747fcd7c74b239bcc0", "chunk": "diff --git a/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java b/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java\nindex 9743022..6929d65 100644\n--- a/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java\n+++ b/spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java\n\n@@ -25,20 +25,22 @@ import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n \n import java.time.Duration;\n-import java.util.HashMap;\n-import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n-public class CircuitBreakerHandler implements GovHandler {\n-\n-  private Map<String, CircuitBreaker> map = new HashMap<>();\n+public class CircuitBreakerHandler extends AbstractGovHandler<CircuitBreaker> {\n \n   @Override\n   public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n-    return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n+    CircuitBreaker circuitBreaker = getActuator(policy.name(), (CircuitBreakerPolicy) policy, this::getCircuitBreaker);\n+    return supplier.withCircuitBreaker(circuitBreaker);\n+  }\n+\n+  @Override\n+  public HandlerType type() {\n+    return HandlerType.SERVER;\n   }\n \n   /**\n"}}, {"oid": "0005737769b0035191a0dfd4ceeb93a9201e2895", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/0005737769b0035191a0dfd4ceeb93a9201e2895", "message": "support CircuitBreaker", "committedDate": "2020-10-28T09:40:25Z", "type": "commit"}, {"oid": "0005737769b0035191a0dfd4ceeb93a9201e2895", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/0005737769b0035191a0dfd4ceeb93a9201e2895", "message": "support CircuitBreaker", "committedDate": "2020-10-28T09:40:25Z", "type": "forcePushed"}, {"oid": "0d77a5bb63a26cfbe2cfe8747fcd7c74b239bcc0", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/0d77a5bb63a26cfbe2cfe8747fcd7c74b239bcc0", "message": "support bulkhead", "committedDate": "2020-10-29T02:56:04Z", "type": "commit"}, {"oid": "efbb0f2d0ebdf8d2efef7126538a54af699e9f88", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/efbb0f2d0ebdf8d2efef7126538a54af699e9f88", "message": "log optimization", "committedDate": "2020-10-29T03:41:01Z", "type": "commit"}, {"oid": "efbb0f2d0ebdf8d2efef7126538a54af699e9f88", "url": "https://github.com/huaweicloud/spring-cloud-huawei/commit/efbb0f2d0ebdf8d2efef7126538a54af699e9f88", "message": "log optimization", "committedDate": "2020-10-29T03:41:01Z", "type": "forcePushed"}]}