{"pr_number": 3290, "pr_title": "DROOLS-5253: [DMN Designer] Copied node should be distinguished from original one", "pr_createdAt": "2020-04-29T15:02:56Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3290", "timeline": [{"oid": "57ef7edc65f02656b5b5855b8bf3147b94ff280f", "url": "https://github.com/kiegroup/kie-wb-common/commit/57ef7edc65f02656b5b5855b8bf3147b94ff280f", "message": "Supporting simple suffix mechanism for cloned nodes", "committedDate": "2020-04-27T15:50:46Z", "type": "commit"}, {"oid": "046ab4b2c2dde2f2297992495c286e75beb0769d", "url": "https://github.com/kiegroup/kie-wb-common/commit/046ab4b2c2dde2f2297992495c286e75beb0769d", "message": "Implementing uniqueness naming mechanism", "committedDate": "2020-04-28T07:08:00Z", "type": "commit"}, {"oid": "d406ecb260384b570c74d944921f33d0698ca64f", "url": "https://github.com/kiegroup/kie-wb-common/commit/d406ecb260384b570c74d944921f33d0698ca64f", "message": "Refactoring: renaming methods/variables for better understanding", "committedDate": "2020-04-28T09:05:16Z", "type": "commit"}, {"oid": "86584600eab8c9ea1f6f3e6f4ccf4559a11aad03", "url": "https://github.com/kiegroup/kie-wb-common/commit/86584600eab8c9ea1f6f3e6f4ccf4559a11aad03", "message": "Testing clone of text annotation", "committedDate": "2020-04-28T09:06:41Z", "type": "commit"}, {"oid": "aed945d33ff469c75cada281180929ba59333e88", "url": "https://github.com/kiegroup/kie-wb-common/commit/aed945d33ff469c75cada281180929ba59333e88", "message": "Empty prefix in the name when name is empty", "committedDate": "2020-04-29T13:26:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MTY0NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r417391644", "bodyText": "Just a thought, but please see DefaultValueUtilities.updateNewNodeName(..) that is currently used to ensure new elements have unique names. It might be re-usable here.", "author": "manstis", "createdAt": "2020-04-29T15:09:34Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +118,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());", "originalCommit": "aed945d33ff469c75cada281180929ba59333e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDQ1MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r417404450", "bodyText": "I will check.\nRegards", "author": "vpellegrino", "createdAt": "2020-04-29T15:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MTY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyMTc5MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r417421790", "bodyText": "@manstis I briefly looked at DefaultValueUtilities implementation.\nThe method updateNewNodeName seems to be not suitable for the copy case, since it is working only with default names (i.e. names assigned when node gets created).\nIn the copy case you can change a node name to whatever value, and then suffix sequence must work as well.\nThere are other two methods getExistingNodeNames and getMaxUnusedIndex that maybe can work well with this specific use-case.\nI need to perform some trial and check if the result is the same.", "author": "vpellegrino", "createdAt": "2020-04-29T15:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MTY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1OTUyMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r417859522", "bodyText": "OK, fair point. It was a suggestion, re-use if and as appropriate.", "author": "manstis", "createdAt": "2020-04-30T08:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MTY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\nindex e5af7109d6..b864081e8b 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n\n@@ -135,30 +134,47 @@ public class DMNDeepCloneProcess extends DeepCloneProcess implements IDeepCloneP\n         target.setText(new Text(uniqueNodeName));\n     }\n \n-    String composeUniqueNodeName(final String name) {\n+    protected String composeUniqueNodeName(final String name) {\n         final String originalName = Optional.ofNullable(name).orElse(\"\");\n-        String uniqueName = originalName + CLONED_DEFAULT_SUFFIX;\n \n         try {\n             final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n             if (nameSuffixMatcher != null) {\n-                uniqueName = buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n             }\n         } catch (Exception e) {\n             LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n         }\n \n-        return ensureNodeNameUniqueness(uniqueName);\n+        return joinPrefixWithIndexedSuffix(originalName);\n     }\n \n-    private String ensureNodeNameUniqueness(final String uniqueName) {\n-        return StreamSupport.stream(getGraphNodes().spliterator(), true)\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n                 .map(this::nodeNamesMapper)\n                 .filter(Objects::nonNull)\n-                .filter(Predicate.isEqual(uniqueName))\n-                .findAny()\n-                .map(this::composeUniqueNodeName)\n-                .orElse(uniqueName);\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n     }\n \n     private String nodeNamesMapper(final Node<View, Edge> node) {\n"}}, {"oid": "3c71af657c39e755e13d03e2642a6f31577d67d8", "url": "https://github.com/kiegroup/kie-wb-common/commit/3c71af657c39e755e13d03e2642a6f31577d67d8", "message": "Improving coverage", "committedDate": "2020-04-30T09:18:23Z", "type": "commit"}, {"oid": "f869848201a7d48bd05f3e32ac5e7a24cca87388", "url": "https://github.com/kiegroup/kie-wb-common/commit/f869848201a7d48bd05f3e32ac5e7a24cca87388", "message": "Fixing expected result when copying node", "committedDate": "2020-04-30T11:48:10Z", "type": "commit"}, {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "url": "https://github.com/kiegroup/kie-wb-common/commit/f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "message": "Calling DefaultValueUtilities for getting max unused index, to be used in the suffix", "committedDate": "2020-04-30T13:09:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMTg5MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420611891", "bodyText": "Could be final as well", "author": "dupliaka", "createdAt": "2020-05-06T08:04:52Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();", "originalCommit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67be7177df4167072a118e1287ede29cec567d1e", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\nindex b864081e8b..10624ec8e2 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n\n@@ -179,12 +179,12 @@ public class DMNDeepCloneProcess extends DeepCloneProcess implements IDeepCloneP\n \n     private String nodeNamesMapper(final Node<View, Edge> node) {\n         if (node.getContent().getDefinition() instanceof NamedElement) {\n-            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            final NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n             return namedElement.getName().getValue();\n         }\n         if (node.getContent().getDefinition() instanceof HasText) {\n-            HasText hasText = (HasText) node.getContent().getDefinition();\n-            return hasText.getText().getValue();\n+            final HasText textWrapper = (HasText) node.getContent().getDefinition();\n+            return textWrapper.getText().getValue();\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjA5NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420612095", "bodyText": "This could be final", "author": "dupliaka", "createdAt": "2020-05-06T08:05:18Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            return namedElement.getName().getValue();\n+        }\n+        if (node.getContent().getDefinition() instanceof HasText) {\n+            HasText hasText = (HasText) node.getContent().getDefinition();", "originalCommit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67be7177df4167072a118e1287ede29cec567d1e", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\nindex b864081e8b..10624ec8e2 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n\n@@ -179,12 +179,12 @@ public class DMNDeepCloneProcess extends DeepCloneProcess implements IDeepCloneP\n \n     private String nodeNamesMapper(final Node<View, Edge> node) {\n         if (node.getContent().getDefinition() instanceof NamedElement) {\n-            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            final NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n             return namedElement.getName().getValue();\n         }\n         if (node.getContent().getDefinition() instanceof HasText) {\n-            HasText hasText = (HasText) node.getContent().getDefinition();\n-            return hasText.getText().getValue();\n+            final HasText textWrapper = (HasText) node.getContent().getDefinition();\n+            return textWrapper.getText().getValue();\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzg3OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420613879", "bodyText": "Just a suggestion :\nYou can keep one return to have only one exit point.", "author": "dupliaka", "createdAt": "2020-05-06T08:08:56Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            return namedElement.getName().getValue();\n+        }\n+        if (node.getContent().getDefinition() instanceof HasText) {\n+            HasText hasText = (HasText) node.getContent().getDefinition();\n+            return hasText.getText().getValue();\n+        }\n+        return null;", "originalCommit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNzYwNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420617606", "bodyText": "In this case, for readability I prefer to have multiple returns, instead of a non-final variable to keep the result to return", "author": "vpellegrino", "createdAt": "2020-05-06T08:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0OTkwMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420649903", "bodyText": "Ok", "author": "dupliaka", "createdAt": "2020-05-06T09:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwODg5OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420808898", "bodyText": "Ok", "author": "dupliaka", "createdAt": "2020-05-06T13:53:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "67be7177df4167072a118e1287ede29cec567d1e", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\nindex b864081e8b..10624ec8e2 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n\n@@ -179,12 +179,12 @@ public class DMNDeepCloneProcess extends DeepCloneProcess implements IDeepCloneP\n \n     private String nodeNamesMapper(final Node<View, Edge> node) {\n         if (node.getContent().getDefinition() instanceof NamedElement) {\n-            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            final NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n             return namedElement.getName().getValue();\n         }\n         if (node.getContent().getDefinition() instanceof HasText) {\n-            HasText hasText = (HasText) node.getContent().getDefinition();\n-            return hasText.getText().getValue();\n+            final HasText textWrapper = (HasText) node.getContent().getDefinition();\n+            return textWrapper.getText().getValue();\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTQzMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420615431", "bodyText": "hasText named like boolean variable that checks for text. Probably we could provide more context - wise declaration?", "author": "dupliaka", "createdAt": "2020-05-06T08:12:05Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            return namedElement.getName().getValue();\n+        }\n+        if (node.getContent().getDefinition() instanceof HasText) {\n+            HasText hasText = (HasText) node.getContent().getDefinition();", "originalCommit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "67be7177df4167072a118e1287ede29cec567d1e", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\nindex b864081e8b..10624ec8e2 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n\n@@ -179,12 +179,12 @@ public class DMNDeepCloneProcess extends DeepCloneProcess implements IDeepCloneP\n \n     private String nodeNamesMapper(final Node<View, Edge> node) {\n         if (node.getContent().getDefinition() instanceof NamedElement) {\n-            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            final NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n             return namedElement.getName().getValue();\n         }\n         if (node.getContent().getDefinition() instanceof HasText) {\n-            HasText hasText = (HasText) node.getContent().getDefinition();\n-            return hasText.getText().getValue();\n+            final HasText textWrapper = (HasText) node.getContent().getDefinition();\n+            return textWrapper.getText().getValue();\n         }\n         return null;\n     }\n"}}, {"oid": "67be7177df4167072a118e1287ede29cec567d1e", "url": "https://github.com/kiegroup/kie-wb-common/commit/67be7177df4167072a118e1287ede29cec567d1e", "message": "Intermediate variables should be final + better name for HasText instance", "committedDate": "2020-05-06T08:17:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNjM2OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420626369", "bodyText": "Small suggestion to investigate how could we avoid a generic exception since that would be hard to inspect if something would happen if exec will throw any exception like IndexOutOfBounds or buildNameWithIncrementedSuffixIndex throw some exception(bcs it would probably just skipped)", "author": "dupliaka", "createdAt": "2020-05-06T08:31:58Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {", "originalCommit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMjY4Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420632682", "bodyText": "@dupliaka thank you for your question.\nLet me explain a bit why I put this generic catch block.\nI put this try-catch block because of the regex matcher.\nThis exception in reality should never happen.\nIt is only a way to way to unblock cloning mechanism in case any issue with the matcher occurs.\nThe strategy here, only in the remote case an exception gets thrown  is:\n\nSoftly print exception details\nReturn a fallback name for the copied node", "author": "vpellegrino", "createdAt": "2020-05-06T08:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNjM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0OTQ2MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420649461", "bodyText": "Ok", "author": "dupliaka", "createdAt": "2020-05-06T09:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNjM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f29435d5e848f56deffa887ec193efdf7d1048f5", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\nindex b864081e8b..10624ec8e2 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java\n\n@@ -179,12 +179,12 @@ public class DMNDeepCloneProcess extends DeepCloneProcess implements IDeepCloneP\n \n     private String nodeNamesMapper(final Node<View, Edge> node) {\n         if (node.getContent().getDefinition() instanceof NamedElement) {\n-            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            final NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n             return namedElement.getName().getValue();\n         }\n         if (node.getContent().getDefinition() instanceof HasText) {\n-            HasText hasText = (HasText) node.getContent().getDefinition();\n-            return hasText.getText().getValue();\n+            final HasText textWrapper = (HasText) node.getContent().getDefinition();\n+            return textWrapper.getText().getValue();\n         }\n         return null;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODMzNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420628334", "bodyText": "Could you please update javadoc on it as well?", "author": "dupliaka", "createdAt": "2020-05-06T08:35:28Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -69,10 +92,17 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n     @Override", "originalCommit": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMzU2OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420633569", "bodyText": "Which information would you update?\nNothing seems to be changed from doc perspective", "author": "vpellegrino", "createdAt": "2020-05-06T08:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODE2Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420648167", "bodyText": "I mean that for new node name. It is not clear that this should comply with the validation mechanisms", "author": "dupliaka", "createdAt": "2020-05-06T09:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODMzNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f29435d5e848f56deffa887ec193efdf7d1048f5", "url": "https://github.com/kiegroup/kie-wb-common/commit/f29435d5e848f56deffa887ec193efdf7d1048f5", "message": "Giving meaningful name to constants used for indexes", "committedDate": "2020-05-06T09:04:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NDE1Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420654153", "bodyText": "This test is a reproducer for https://issues.redhat.com/browse/DROOLS-4424\nIf your change affect this then we can remove the comment and close the bug.\nLet me only check it manually first.", "author": "dupliaka", "createdAt": "2020-05-06T09:21:51Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -250,6 +250,7 @@ public void testCopyAndPaste() throws Exception {\n         expandDecisionNavigatorDock();", "originalCommit": "67be7177df4167072a118e1287ede29cec567d1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5ODgzMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420798830", "bodyText": "I retested it manually I think you can remove the comment so now it is not a reproducer. Just a test.", "author": "dupliaka", "createdAt": "2020-05-06T13:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NDE1Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0b74d1418d0de7842d01e64930c2e53055ee6eaf", "url": "https://github.com/kiegroup/kie-wb-common/commit/0b74d1418d0de7842d01e64930c2e53055ee6eaf", "message": "Updating javadoc for clone method", "committedDate": "2020-05-06T09:22:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NzkzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420657937", "bodyText": "Suggestion\nWould you mind to add a test for case if the matcher throws an exception in composeUniqueNodeName()?", "author": "dupliaka", "createdAt": "2020-05-06T09:28:31Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcessTest.java", "diffHunk": "@@ -261,4 +348,70 @@ private void setLinks(final DRGElement drgElement, final String... links) {\n                                          .add(new DMNExternalLink(link, \"description\"))\n                 );\n     }\n+", "originalCommit": "0b74d1418d0de7842d01e64930c2e53055ee6eaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDgxNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420660817", "bodyText": "Looked at code of com.google.gwt.regexp.shared.RegExp#exec method.\nThere is no explicit exception thrown, so I am going to remove the try-catch block.", "author": "vpellegrino", "createdAt": "2020-05-06T09:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NzkzNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e93f6b1eb7c5e5a30622aabde81667384a9dfeb4", "url": "https://github.com/kiegroup/kie-wb-common/commit/e93f6b1eb7c5e5a30622aabde81667384a9dfeb4", "message": "Removing useless try-catch block", "committedDate": "2020-05-06T09:34:55Z", "type": "commit"}, {"oid": "2fa1de59308b44be488aa2428cf0fd01229d793e", "url": "https://github.com/kiegroup/kie-wb-common/commit/2fa1de59308b44be488aa2428cf0fd01229d793e", "message": "Removing comment from test", "committedDate": "2020-05-06T13:45:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDIwMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r422980200", "bodyText": "Thank you for updating the test @vpellegrino @dupliaka !", "author": "jomarko", "createdAt": "2020-05-11T11:42:26Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -269,7 +267,12 @@ public void testCopyAndPaste() throws Exception {\n         XmlAssert.assertThat(actual)\n                 .withNamespaceContext(NAMESPACES)\n                 .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + nodeName + \"'])\")\n-                .isEqualTo(2);\n+                .isEqualTo(1);\n+\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(NAMESPACES)\n+                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + copiedNodeName + \"'])\")\n+                .isEqualTo(1);", "originalCommit": "2fa1de59308b44be488aa2428cf0fd01229d793e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}