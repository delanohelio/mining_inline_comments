{"pr_number": 3325, "pr_title": "RHPAM-2910 - Rule Flow Group should show from which project ruleflow group is loaded", "pr_createdAt": "2020-06-09T15:28:30Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3325", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0OTk2Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438449966", "bodyText": "Although this may work, IMO using a List<Map<String, String>> is not a good practice, it's not much clear what's the data behind this instance and how to manage it...\nI think would be better for example creating a class for RuleFlowGroupNames, which has 3 fields ( name, filename, pathuri ). It'll benefit as:\n\nNo need for the use of a whole Map for storing just 3 objects, also by using a class you can specify different types for each one\nYou'll be able to replace by List\nUsing a class results easier to read & understand in general", "author": "romartin", "createdAt": "2020-06-10T22:51:27Z", "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindRuleFlowNamesQuery.java", "diffHunk": "@@ -134,35 +134,36 @@ public void setIOService(IOService ioService) {\n             final List<RefactoringPageRow> result = new ArrayList(kObjects.size());\n \n             for (final KObject kObject : kObjects) {\n-                final Map<String, Map<String, String>> ruleFlowGroupNames = getRuleFlowGroupNamesNamesFromKObject(kObject);\n-                for (String rkey : ruleFlowGroupNames.keySet()) {\n+                final List<Map<String, String>> ruleFlowGroups = getRuleFlowGroupsFromKObject(kObject);\n+                for (Map<String, String> group : ruleFlowGroups) {\n                     RefactoringMapPageRow row = new RefactoringMapPageRow();\n-                    row.setValue(ruleFlowGroupNames.get(rkey));\n+                    row.setValue(group);\n                     result.add(row);\n                 }\n             }\n \n             return result;\n         }\n \n-        private Map<String, Map<String, String>> getRuleFlowGroupNamesNamesFromKObject(final KObject kObject) {\n-            final Map<String, Map<String, String>> ruleFlowGroupNames = new HashMap<>();\n+        private List<Map<String, String>> getRuleFlowGroupsFromKObject(final KObject kObject) {", "originalCommit": "bc1a5ccf279a3e17f318ddf7b579b65fffc32bfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4NDcwMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438584700", "bodyText": "Yes, I also thought about it, but it will change Client/Server communication, since right now Map<String, String> it is what client expect from the backend. If Process Designer is not the only who consumes this service we need to refactor it as well. I tried to make as gentle change as possible. If you think we still need to go deeper, I can do it, no problem, just explaining my decision :)", "author": "hasys", "createdAt": "2020-06-11T07:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0OTk2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2NTYwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r442565601", "bodyText": "sorry @hasys , did a look in an IDE and noticed it's not really a big issue, we're talking jsut about a change of a return type in the private method, so the public API is not even changed, no worries, just forget this comment.", "author": "romartin", "createdAt": "2020-06-19T00:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ0OTk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "aed8ec128ff5a42d82052cb1d7f740954fc5045f", "chunk": "diff --git a/kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindRuleFlowNamesQuery.java b/kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindRuleFlowNamesQuery.java\nindex f78899f05d..b3086695d1 100644\n--- a/kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindRuleFlowNamesQuery.java\n+++ b/kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindRuleFlowNamesQuery.java\n\n@@ -134,10 +134,10 @@ public class FindRuleFlowNamesQuery extends AbstractFindQuery implements NamedQu\n             final List<RefactoringPageRow> result = new ArrayList(kObjects.size());\n \n             for (final KObject kObject : kObjects) {\n-                final List<Map<String, String>> ruleFlowGroups = getRuleFlowGroupsFromKObject(kObject);\n-                for (Map<String, String> group : ruleFlowGroups) {\n+                final Map<String, Map<String, String>> ruleFlowGroupNames = getRuleFlowGroupNamesNamesFromKObject(kObject);\n+                for (String rkey : ruleFlowGroupNames.keySet()) {\n                     RefactoringMapPageRow row = new RefactoringMapPageRow();\n-                    row.setValue(group);\n+                    row.setValue(ruleFlowGroupNames.get(rkey));\n                     result.add(row);\n                 }\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDkxMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438450911", "bodyText": "maybe same logic can be addressed in less lines by using Streams, it would also help to read this method faster...\nEg: Streams.stream(groups).filter(...).map(...).collect(...)", "author": "romartin", "createdAt": "2020-06-10T22:54:39Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java", "diffHunk": "@@ -47,10 +47,54 @@ public String getProviderName() {\n     @SuppressWarnings(\"unchecked\")\n     public SelectorData getSelectorData(final FormRenderingContext context) {\n         requestRuleFlowGroupDataEvent.fire(new RequestRuleFlowGroupDataEvent());\n-        return new SelectorData(toMap(dataProvider.getRuleFlowGroupNames()), null);\n+        return new SelectorData<>(toMap(dataProvider.getRuleFlowGroupNames()), null);\n     }\n \n-    private static Map<String, String> toMap(final Iterable<String> items) {\n-        return StreamSupport.stream(items.spliterator(), false).collect(Collectors.toMap(s -> s, s -> s));\n+    // Map<T, String> is not supported by ListBoxValue which is used for ComboBox widget\n+    private static Map<String, String> toMap(final Iterable<RuleFlowGroup> groups) {\n+        Map<String, String> result = new HashMap<>();", "originalCommit": "bc1a5ccf279a3e17f318ddf7b579b65fffc32bfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5ODMxMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438598310", "bodyText": "I am refactored it to something like this:\n        for (RuleFlowGroup group : groups) {\n            if (result.containsKey(group.getName())) {\n                updateExistingGroup(result, group);\n            } else {\n                addNewGroup(result, group);\n            }\n        }\nBut not sure how to make it using Streams. We can't just filter out some values, we need to apply them anyway but differently.", "author": "hasys", "createdAt": "2020-06-11T07:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2OTY1OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r442569658", "bodyText": "Yeah well maybe this case is not trivial, but I think it can still be improved, maybe just by using Collectors.groupingBy? I does most of the key/value handling for you... look at these examples. WDYT?", "author": "romartin", "createdAt": "2020-06-19T00:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1Nzc4OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r445557788", "bodyText": "Hi @romartin, I did a refactoring to streams, looks cleaner now, thank you!", "author": "hasys", "createdAt": "2020-06-25T13:28:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "47b246d35c2a17d6259b9e6ac79f1fe2e9873d06", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java\nindex ae34a845ea..ee0ee3cea4 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java\n\n@@ -55,17 +55,29 @@ public class RuleFlowGroupFormProvider implements SelectorDataProvider {\n         Map<String, String> result = new HashMap<>();\n         for (RuleFlowGroup group : groups) {\n             if (result.containsKey(group.getName())) {\n-                String project = getProjectFromPath(group.getPathUri());\n-                if (!result.get(group.getName()).contains(project)) {\n-                    result.put(group.getName(), addProjectToDescription(result.get(group.getName()), project));\n-                }\n+                updateExistingGroup(result, group);\n             } else {\n-                result.put(group.getName(), getGroupDescription(group));\n+                addNewGroup(result, group);\n             }\n         }\n         return result;\n     }\n \n+    private static void updateExistingGroup(Map<String, String> result, RuleFlowGroup group) {\n+        String project = getProjectFromPath(group.getPathUri());\n+        addProjectToGroupIfNotPresent(result, group, project);\n+    }\n+\n+    private static void addProjectToGroupIfNotPresent(Map<String, String> result, RuleFlowGroup group, String project) {\n+        if (!result.get(group.getName()).contains(project)) {\n+            result.put(group.getName(), addProjectToDescription(result.get(group.getName()), project));\n+        }\n+    }\n+\n+    private static void addNewGroup(Map<String, String> result, RuleFlowGroup group) {\n+        result.put(group.getName(), getGroupDescription(group));\n+    }\n+\n     private static String addProjectToDescription(String description, String project) {\n         return description.replace(\"]\", \", \" + project + \"]\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTIxMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438451213", "bodyText": "can be inlined into a single return line", "author": "romartin", "createdAt": "2020-06-10T22:55:37Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java", "diffHunk": "@@ -47,10 +47,54 @@ public String getProviderName() {\n     @SuppressWarnings(\"unchecked\")\n     public SelectorData getSelectorData(final FormRenderingContext context) {\n         requestRuleFlowGroupDataEvent.fire(new RequestRuleFlowGroupDataEvent());\n-        return new SelectorData(toMap(dataProvider.getRuleFlowGroupNames()), null);\n+        return new SelectorData<>(toMap(dataProvider.getRuleFlowGroupNames()), null);\n     }\n \n-    private static Map<String, String> toMap(final Iterable<String> items) {\n-        return StreamSupport.stream(items.spliterator(), false).collect(Collectors.toMap(s -> s, s -> s));\n+    // Map<T, String> is not supported by ListBoxValue which is used for ComboBox widget\n+    private static Map<String, String> toMap(final Iterable<RuleFlowGroup> groups) {\n+        Map<String, String> result = new HashMap<>();\n+        for (RuleFlowGroup group : groups) {\n+            if (result.containsKey(group.getName())) {\n+                String project = getProjectFromPath(group.getPathUri());\n+                if (!result.get(group.getName()).contains(project)) {\n+                    result.put(group.getName(), addProjectToDescription(result.get(group.getName()), project));\n+                }\n+            } else {\n+                result.put(group.getName(), getGroupDescription(group));\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private static String addProjectToDescription(String description, String project) {\n+        return description.replace(\"]\", \", \" + project + \"]\");\n+    }\n+\n+    private static String getGroupDescription(RuleFlowGroup rfg) {\n+        return rfg.getName() + \" [\" + projectFromPath(rfg.getPathUri()) + \"]\";\n+    }\n+\n+    private static String projectFromPath(String path) {\n+        return getProjectFromPath(path);\n+    }\n+\n+    private static String dropFileSystemAndGitBranchFromPath(String path) {\n+        return path.substring(path.indexOf('@') + 1);\n+    }\n+\n+    private static String getProjectFromPath(String path) {\n+        String clearedPath = dropFileSystemAndGitBranchFromPath(path);\n+        //Drop space\n+        String pathAfterSpace = clearedPath.substring(getIndexOfFileSeparator(clearedPath) + 1);\n+        return pathAfterSpace.substring(0, getIndexOfFileSeparator(pathAfterSpace));\n+    }\n+\n+    // GWT compatible way to get file separation for Windows/Unix\n+    private static int getIndexOfFileSeparator(String string) {\n+        int index = string.indexOf('/');\n+        if (index == -1) {", "originalCommit": "bc1a5ccf279a3e17f318ddf7b579b65fffc32bfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47b246d35c2a17d6259b9e6ac79f1fe2e9873d06", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java\nindex ae34a845ea..ee0ee3cea4 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/dataproviders/RuleFlowGroupFormProvider.java\n\n@@ -55,17 +55,29 @@ public class RuleFlowGroupFormProvider implements SelectorDataProvider {\n         Map<String, String> result = new HashMap<>();\n         for (RuleFlowGroup group : groups) {\n             if (result.containsKey(group.getName())) {\n-                String project = getProjectFromPath(group.getPathUri());\n-                if (!result.get(group.getName()).contains(project)) {\n-                    result.put(group.getName(), addProjectToDescription(result.get(group.getName()), project));\n-                }\n+                updateExistingGroup(result, group);\n             } else {\n-                result.put(group.getName(), getGroupDescription(group));\n+                addNewGroup(result, group);\n             }\n         }\n         return result;\n     }\n \n+    private static void updateExistingGroup(Map<String, String> result, RuleFlowGroup group) {\n+        String project = getProjectFromPath(group.getPathUri());\n+        addProjectToGroupIfNotPresent(result, group, project);\n+    }\n+\n+    private static void addProjectToGroupIfNotPresent(Map<String, String> result, RuleFlowGroup group, String project) {\n+        if (!result.get(group.getName()).contains(project)) {\n+            result.put(group.getName(), addProjectToDescription(result.get(group.getName()), project));\n+        }\n+    }\n+\n+    private static void addNewGroup(Map<String, String> result, RuleFlowGroup group) {\n+        result.put(group.getName(), getGroupDescription(group));\n+    }\n+\n     private static String addProjectToDescription(String description, String project) {\n         return description.replace(\"]\", \", \" + project + \"]\");\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTMzNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438451334", "bodyText": "I18n", "author": "romartin", "createdAt": "2020-06-10T22:55:57Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/comboBoxEditor/AbstractComboBoxFieldRenderer.java", "diffHunk": "@@ -47,19 +46,28 @@ public AbstractComboBoxFieldRenderer(final ComboBoxWidgetView comboBoxEditor) {\n     @Override\n     protected void refreshInput(Map<String, String> optionsValues,\n                                 String defaultValue) {\n-        List<String> values = new ArrayList<String>(optionsValues.keySet());\n-        java.util.Collections.sort(values);\n-        setComboBoxValues(values);\n+        setComboBoxValues(optionsValues);\n     }\n \n     protected void setComboBoxValues(final List<String> values) {\n-        valueListBoxValues = new ListBoxValues(ComboBoxWidgetView.CUSTOM_PROMPT,\n-                                               \"Edit\" + \" \",\n-                                               null);\n+        valueListBoxValues = createDefaultListBoxValues();\n         valueListBoxValues.addValues(values);\n         view.setComboBoxValues(valueListBoxValues);\n     }\n \n+    protected void setComboBoxValues(final Map<String, String> values) {\n+        valueListBoxValues = createDefaultListBoxValues();\n+\n+        valueListBoxValues.addValues(values);\n+        view.setComboBoxValues(valueListBoxValues);\n+    }\n+\n+    private ListBoxValues createDefaultListBoxValues() {\n+        return new ListBoxValues(ComboBoxWidgetView.CUSTOM_PROMPT,\n+                                 \"Edit\" + \" \",", "originalCommit": "bc1a5ccf279a3e17f318ddf7b579b65fffc32bfc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "47b246d35c2a17d6259b9e6ac79f1fe2e9873d06", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/comboBoxEditor/AbstractComboBoxFieldRenderer.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/comboBoxEditor/AbstractComboBoxFieldRenderer.java\nindex 493eead06e..49ebd17427 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/comboBoxEditor/AbstractComboBoxFieldRenderer.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/comboBoxEditor/AbstractComboBoxFieldRenderer.java\n\n@@ -36,11 +38,14 @@ public abstract class AbstractComboBoxFieldRenderer<T extends ComboBoxFieldDefin\n \n     private ComboBoxWidgetView view;\n \n+    private ClientTranslationService translationService;\n+\n     private ListBoxValues valueListBoxValues;\n \n     @Inject\n-    public AbstractComboBoxFieldRenderer(final ComboBoxWidgetView comboBoxEditor) {\n+    public AbstractComboBoxFieldRenderer(final ComboBoxWidgetView comboBoxEditor, final ClientTranslationService translationService) {\n         this.view = comboBoxEditor;\n+        this.translationService = translationService;\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjE5NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438452195", "bodyText": "I think it's not correct calling this method as addValues and performing a call to clear() just in the first line... shouldn't be this method just adding \"more\" values to the actual ones, if any, instead of clearing the actual values and then just adding the new ones? Does it makes sense to you?", "author": "romartin", "createdAt": "2020-06-10T22:58:40Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java", "diffHunk": "@@ -100,6 +100,24 @@ public void addValues(final List<String> acceptableValues) {\n         }\n     }\n \n+    public void addValues(final Map<String, String> acceptableValues) {\n+        clear();", "originalCommit": "bc1a5ccf279a3e17f318ddf7b579b65fffc32bfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4ODEwMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438588103", "bodyText": "Yes, it does. I did an overload of:\n    public void addValues(final List<String> acceptableValues) {\n        clear();\n        [...]\n    }\nSo this logic is how this widget behaved before for same Value/Keys. I just overloaded it to support Maps. If refactor this method it will change initial widget's logic, and I tried to change as less as possible. Let me know if you think we should go and refactor it in this PR. Thank you!", "author": "hasys", "createdAt": "2020-06-11T07:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MDIwNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r442570204", "bodyText": "ok, that's fine, the implementation has not changed I see, thanks for clarifying!", "author": "romartin", "createdAt": "2020-06-19T00:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "aed8ec128ff5a42d82052cb1d7f740954fc5045f", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java\nindex 326088cddc..d3e5ede4ab 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java\n\n@@ -100,24 +100,6 @@ public class ListBoxValues {\n         }\n     }\n \n-    public void addValues(final Map<String, String> acceptableValues) {\n-        clear();\n-        if (acceptableValues == null) {\n-            return;\n-        }\n-        List<String> keys = new ArrayList<>(acceptableValues.keySet());\n-        java.util.Collections.sort(keys);\n-\n-        acceptableValuesWithCustomValues.add(\"\");\n-        acceptableValuesWithCustomValues.add(customPrompt);\n-        for (String groupName : keys) {\n-            String displayName = acceptableValues.get(groupName);\n-            mapDisplayValuesToValues.put(displayName, groupName);\n-            acceptableValuesWithoutCustomValues.add(displayName);\n-            acceptableValuesWithCustomValues.add(displayName);\n-        }\n-    }\n-\n     public String addCustomValue(final String newValue,\n                                  final String oldValue) {\n         if (oldValue != null && !oldValue.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjM4Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438452386", "bodyText": "can be inlined into a single line by using Streams", "author": "romartin", "createdAt": "2020-06-10T22:59:13Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java", "diffHunk": "@@ -270,6 +288,16 @@ public String getValueForDisplayValue(final String key) {\n         return key;\n     }\n \n+    public String getDisplayNameForValue(final String value) {\n+        for (Map.Entry<String, String> entry : mapDisplayValuesToValues.entrySet()) {", "originalCommit": "bc1a5ccf279a3e17f318ddf7b579b65fffc32bfc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwMzg4OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3325#discussion_r438603888", "bodyText": "Not sure it is easier to read now, but maybe it is matter of taste :)", "author": "hasys", "createdAt": "2020-06-11T07:47:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MjM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "47b246d35c2a17d6259b9e6ac79f1fe2e9873d06", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java\nindex 326088cddc..7cc39c14ec 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/util/ListBoxValues.java\n\n@@ -289,13 +289,11 @@ public class ListBoxValues {\n     }\n \n     public String getDisplayNameForValue(final String value) {\n-        for (Map.Entry<String, String> entry : mapDisplayValuesToValues.entrySet()) {\n-            if (entry.getValue().equals(value)) {\n-                return entry.getKey();\n-            }\n-        }\n-\n-        return value;\n+        return mapDisplayValuesToValues.entrySet().stream()\n+                .filter(v -> v.getValue().equals(value))\n+                .map(Map.Entry::getKey)\n+                .findFirst()\n+                .orElse(value);\n     }\n \n     public String getNonCustomValueForUserString(final String userValue) {\n"}}, {"oid": "47b246d35c2a17d6259b9e6ac79f1fe2e9873d06", "url": "https://github.com/kiegroup/kie-wb-common/commit/47b246d35c2a17d6259b9e6ac79f1fe2e9873d06", "message": "Pull Request review", "committedDate": "2020-06-11T09:21:50Z", "type": "forcePushed"}, {"oid": "aed8ec128ff5a42d82052cb1d7f740954fc5045f", "url": "https://github.com/kiegroup/kie-wb-common/commit/aed8ec128ff5a42d82052cb1d7f740954fc5045f", "message": "RHPAM-2910 - Rule Flow Group should show from which project ruleflow group is loaded", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "1ff088e37e034e823ad6a848a47384b79532ec8a", "url": "https://github.com/kiegroup/kie-wb-common/commit/1ff088e37e034e823ad6a848a47384b79532ec8a", "message": "move RuleFlowGroupDataEvent to RuleFlowGroup usage", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "8d624163c9e07b49e7bdaace515d58b86f429909", "url": "https://github.com/kiegroup/kie-wb-common/commit/8d624163c9e07b49e7bdaace515d58b86f429909", "message": "Transition of RuleFlowGroup data from server to the UI", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "aa661bcaf08215a292957a3a36cd1ca9012a41ef", "url": "https://github.com/kiegroup/kie-wb-common/commit/aa661bcaf08215a292957a3a36cd1ca9012a41ef", "message": "Final UI changes", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "b6d7838729828389327aa374eb5c876ea0c05b16", "url": "https://github.com/kiegroup/kie-wb-common/commit/b6d7838729828389327aa374eb5c876ea0c05b16", "message": "Combobox supports different Keys and Values Strings now", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "d6da74e669cad67c7185f5deb3e653ee1762db85", "url": "https://github.com/kiegroup/kie-wb-common/commit/d6da74e669cad67c7185f5deb3e653ee1762db85", "message": "QueryService returns info about different projects with for ruleflow groups with same name.", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "583ce380812e81d7205b6f298bbcd05ca7249582", "url": "https://github.com/kiegroup/kie-wb-common/commit/583ce380812e81d7205b6f298bbcd05ca7249582", "message": "add all groups with same group name", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "12223c80ad7bd334021a4633a49999cc03cd62cd", "url": "https://github.com/kiegroup/kie-wb-common/commit/12223c80ad7bd334021a4633a49999cc03cd62cd", "message": "Do not duplicate project name for same group", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "6cd8430c9821166c87de3d12588ba880317ded3f", "url": "https://github.com/kiegroup/kie-wb-common/commit/6cd8430c9821166c87de3d12588ba880317ded3f", "message": "Final clean up", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "622ebc5a8ea37d2f9ffe3a501a662939a6c10ffd", "url": "https://github.com/kiegroup/kie-wb-common/commit/622ebc5a8ea37d2f9ffe3a501a662939a6c10ffd", "message": "Fix", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "a2ac6b4f0c28ea7be442f00baf7888ca3c2e062f", "url": "https://github.com/kiegroup/kie-wb-common/commit/a2ac6b4f0c28ea7be442f00baf7888ca3c2e062f", "message": "Missing tests", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "0ffe69781cc9c15a4f3e70f51acbdc21e00e4b06", "url": "https://github.com/kiegroup/kie-wb-common/commit/0ffe69781cc9c15a4f3e70f51acbdc21e00e4b06", "message": "Pull Request review", "committedDate": "2020-06-25T08:46:23Z", "type": "commit"}, {"oid": "a3759d5296cb945d2cc0af7e024da48af174b5b0", "url": "https://github.com/kiegroup/kie-wb-common/commit/a3759d5296cb945d2cc0af7e024da48af174b5b0", "message": "Migrate to streams", "committedDate": "2020-06-25T13:16:59Z", "type": "commit"}, {"oid": "a3759d5296cb945d2cc0af7e024da48af174b5b0", "url": "https://github.com/kiegroup/kie-wb-common/commit/a3759d5296cb945d2cc0af7e024da48af174b5b0", "message": "Migrate to streams", "committedDate": "2020-06-25T13:16:59Z", "type": "forcePushed"}]}