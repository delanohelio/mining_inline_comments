{"pr_number": 3347, "pr_title": "KOGITO-2528 : Reuse Data Types across the process", "pr_createdAt": "2020-06-30T20:05:23Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3347", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNjgzNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r449626836", "bodyText": "Hey @inodeman, I notice that here we are creating a new instance of arraylist to match the method signature. Maybe it would be better to pass null and check internally or perhaps overload the method. Just thinking.\nWDYT?", "author": "handreyrc", "createdAt": "2020-07-03T15:07:28Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/project/backend/service/service/FindDataTypesProjectServiceTest.java", "diffHunk": "@@ -91,7 +92,7 @@ public void testGetJavaTypeNames() throws Exception {\n \n         when(oracle.getModuleModelFields()).thenReturn(fields);\n \n-        final List<String> dataTypeNames = service.getDataTypeNames(path);\n+        final List<String> dataTypeNames = service.getDataTypeNames(path, new ArrayList<>());", "originalCommit": "475ba49fb2e2f0c56a0750d8cc44362abad03c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzNTIzMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r449635233", "bodyText": "Hi @handreyrc sure, I am adding additional tests, will make the change", "author": "inodeman", "createdAt": "2020-07-03T15:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNjgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "b8084619bf682bfa0454f1f1efe54f658fe023f8", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/project/backend/service/service/FindDataTypesProjectServiceTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/project/backend/service/service/FindDataTypesProjectServiceTest.java\nindex 994f7857f6..7a410e94e1 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/project/backend/service/service/FindDataTypesProjectServiceTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/project/backend/service/service/FindDataTypesProjectServiceTest.java\n\n@@ -92,7 +91,7 @@ public class FindDataTypesProjectServiceTest {\n \n         when(oracle.getModuleModelFields()).thenReturn(fields);\n \n-        final List<String> dataTypeNames = service.getDataTypeNames(path, new ArrayList<>());\n+        final List<String> dataTypeNames = service.getDataTypeNames(path, null);\n \n         assertNotNull(dataTypeNames);\n         assertEquals(2, dataTypeNames.size());\n"}}, {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8", "url": "https://github.com/kiegroup/kie-wb-common/commit/b8084619bf682bfa0454f1f1efe54f658fe023f8", "message": "KOGITO-2528 : Reuse Data Types across the process Added support for Data Objects", "committedDate": "2020-07-23T20:08:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r464453975", "bodyText": "why do we need this doneLoading flag, and also the timer? Looks tricky...", "author": "romartin", "createdAt": "2020-08-03T14:34:49Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java", "diffHunk": "@@ -161,6 +163,22 @@ public void setValue(DataObjectTypeValue value) {\n \n     @Override\n     public void setValue(DataObjectTypeValue value, boolean fireEvents) {\n+\n+        if (doneLoading) {", "originalCommit": "b8084619bf682bfa0454f1f1efe54f658fe023f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwMzE3Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r465103176", "bodyText": "Hi @romartin it is because of the service, since we are also calling a server service to get all the Data Types when in BC it might take a bit to complete, so I just set a timer to wait until it finishes.", "author": "inodeman", "createdAt": "2020-08-04T14:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2NzIwOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r470367208", "bodyText": "I still don't see the need for a timer + flag to achieve this, looks not robust. Actually browsers and js engines provide different solutions for doing/managing sync/async remote calls, in a safe way, rather than assuming by ourselves the state for the call...\nAgain, I don't have all the context here, so maybe I'm wrong, but what about considering \"encapsulating\" the call in a javascript Promise?  This way, browser will manage the lifecycle for you and you can also check the promise status, and react when necessary, even when errors, in a proper and safe way. Also, depending on how you use the promise instance, notice by defintiion a Promise is only being called once. So if it applies, you can also improve the performance of the calls to this because it'll be done once, and browser ensures that, also ensures you'll get the then/catch also being called properly. No need for any timer, no need for a flag, just need for the use of Promises properly, and let browser do this job.\nWDYT?\nSorry for being a bit rude on this, but I think it's not completely safe to rely on this kind of solutions, although I'm open for dicussions, I know world is not ideal :)\nThanks anyway @inodeman , good job overall!! \ud83d\udc4d", "author": "romartin", "createdAt": "2020-08-14T01:50:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NzA0NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584677044", "bodyText": "hey @inodeman , I still see the use of the gwt timer here. Could you please consider my comment above? Lemme know what you think", "author": "romartin", "createdAt": "2021-03-01T12:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDk1OTA2Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r600959066", "bodyText": "ok I see it's replaced by an scheduler, good enought! \ud83d\udc4d thx", "author": "romartin", "createdAt": "2021-03-25T00:21:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java\nindex 1374452876..29f20bf085 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java\n\n@@ -163,18 +156,7 @@ public class DataObjectTypeWidget extends Composite implements HasValue<DataObje\n \n     @Override\n     public void setValue(DataObjectTypeValue value, boolean fireEvents) {\n-\n-        if (doneLoading) {\n-            performSetValue(value, fireEvents);\n-        } else {\n-            final com.google.gwt.user.client.Timer t = new Timer() {\n-                @Override\n-                public void run() {\n-                    performSetValue(value, fireEvents);\n-                }\n-            };\n-            t.schedule(100);\n-        }\n+        performSetValue(value, fireEvents);\n     }\n \n     private void performSetValue(DataObjectTypeValue value, boolean fireEvents) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1NDczOQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r464454739", "bodyText": "maybe this can be simplified using Streams in a single or couple of lines", "author": "romartin", "createdAt": "2020-08-03T14:35:56Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java", "diffHunk": "@@ -227,6 +249,19 @@ public void notifyModelChanged() {\n         oldValue = currentValue;\n     }\n \n+    static String getRealType(String value) {\n+        if (isNullOrEmpty(value)) {", "originalCommit": "b8084619bf682bfa0454f1f1efe54f658fe023f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwNDUxMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r465104512", "bodyText": "Hi @romartin I got this code from another file. See here, let me know if I should convert to Streams", "author": "inodeman", "createdAt": "2020-08-04T14:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1NDczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM2NDg3MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r470364871", "bodyText": "well it's just a minor thing, it's more about the language declaration and styling than the results, once I see an iteration with some condition/s inside the loop, I just feel that it can could maybe be repsented using \"functional\" style rather than the \"old\" way, as it usually results on some more clear and easier code to read and understand.\nAnyway, it's just a really minor thing, nothing that could prevent this from being merged IMO.", "author": "romartin", "createdAt": "2020-08-14T01:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1NDczOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c", "url": "https://github.com/kiegroup/kie-wb-common/commit/55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c", "message": "KOGITO-2528 : Reuse Data Types across the process Added support for Data Objects", "committedDate": "2020-08-04T14:28:46Z", "type": "forcePushed"}, {"oid": "32b0d3b206e7258b62dd3fe72f0d09848098653d", "url": "https://github.com/kiegroup/kie-wb-common/commit/32b0d3b206e7258b62dd3fe72f0d09848098653d", "message": "KOGITO-2528 : Reuse Data Types across the process", "committedDate": "2020-08-07T22:47:36Z", "type": "forcePushed"}, {"oid": "65b9ff77f4e4f9c9ed7e4e81749ede7b1f2e9171", "url": "https://github.com/kiegroup/kie-wb-common/commit/65b9ff77f4e4f9c9ed7e4e81749ede7b1f2e9171", "message": "KOGITO-2528 : Reuse Data Types across the process / Removed Logging", "committedDate": "2020-09-08T18:20:03Z", "type": "forcePushed"}, {"oid": "d51868737b8e6ea5c08c8dcce07566f2c330a74c", "url": "https://github.com/kiegroup/kie-wb-common/commit/d51868737b8e6ea5c08c8dcce07566f2c330a74c", "message": "KOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests", "committedDate": "2020-10-07T00:46:33Z", "type": "forcePushed"}, {"oid": "167c5f32a7897a0303e786c1536e66f116be48f8", "url": "https://github.com/kiegroup/kie-wb-common/commit/167c5f32a7897a0303e786c1536e66f116be48f8", "message": "KOGITO-2528 : Reuse Data Types across the process (1/3)", "committedDate": "2020-10-23T19:56:21Z", "type": "forcePushed"}, {"oid": "9e12ef961bb191a15ee7d11325980e150304ab5d", "url": "https://github.com/kiegroup/kie-wb-common/commit/9e12ef961bb191a15ee7d11325980e150304ab5d", "message": "KOGITO-2528 : Reuse Data Types across the process (2/3)", "committedDate": "2020-10-26T19:43:16Z", "type": "forcePushed"}, {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "url": "https://github.com/kiegroup/kie-wb-common/commit/6c7b5a029da081f98cc08cf662dc26ef72a5680d", "message": "KOGITO-2528 : Reuse Data Types across the process (2.5/3)", "committedDate": "2020-10-28T19:15:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDM5OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521190398", "bodyText": "let's throw some exception when we encounter this and let's  log the type that wasn't processed by these if-else branches.", "author": "domhanak", "createdAt": "2020-11-11T08:23:13Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else {\n+            // ToDo: Add extra types to be supported", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MTEzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561241137", "bodyText": "Hi @domhanak will throw Illegal Argument Exception", "author": "inodeman", "createdAt": "2021-01-20T20:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODg3NDA4OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r568874088", "bodyText": "Hi @domhanak this caused the issue that it could not open the diagram you mentioned, if execution reaches this else, it simply means that it does not contain a data type, so removing the throwing exception.", "author": "inodeman", "createdAt": "2021-02-02T19:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 66fa8ba0e5..48678916eb 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -54,6 +54,8 @@ import org.kie.workbench.common.stunner.core.graph.Edge;\n import org.kie.workbench.common.stunner.core.graph.Node;\n import org.kie.workbench.common.stunner.core.graph.content.view.View;\n \n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n public abstract class AbstractDataTypeCache {\n \n     public AbstractDataTypeCache() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDQ3Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521190473", "bodyText": "Javadoc", "author": "domhanak", "createdAt": "2020-11-11T08:23:21Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+public abstract class AbstractDataTypeCache {", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI0MjA4NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561242085", "bodyText": "Hi @domhanak JavaDoc added", "author": "inodeman", "createdAt": "2021-01-20T20:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDQ3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 66fa8ba0e5..48678916eb 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -54,6 +54,8 @@ import org.kie.workbench.common.stunner.core.graph.Edge;\n import org.kie.workbench.common.stunner.core.graph.Node;\n import org.kie.workbench.common.stunner.core.graph.content.view.View;\n \n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n public abstract class AbstractDataTypeCache {\n \n     public AbstractDataTypeCache() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDk3OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521190979", "bodyText": "I suggest to split this into smaler test cases. For each datatype we should have one test case.", "author": "domhanak", "createdAt": "2020-11-11T08:24:24Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        dataTypeCache = new AbstractDataTypeCache() {\n+            @Override\n+            protected void cacheDataTypes(Object processRoot) {\n+            }\n+\n+            @Override\n+            protected List<String> processAssignments(AssignmentsInfo info) {\n+                return defaultDataTypes;\n+            }\n+\n+            @Override\n+            protected List<String> getDataTypes(String variables) {\n+                return defaultDataTypes;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testExtractFromItem() {", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI2MTcwNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561261704", "bodyText": "Hi @domhanak refactored and split now", "author": "inodeman", "createdAt": "2021-01-20T20:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\nindex b3494818d8..26fe7c41f6 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\n\n@@ -53,17 +53,25 @@ import org.kie.workbench.common.stunner.core.graph.content.view.View;\n \n import static org.jgroups.util.Util.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mock;\n \n public class AbstractDataTypeCacheTest {\n \n     private AbstractDataTypeCache dataTypeCache;\n \n-    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\", \"com.myspace.Person\"));\n+\n+    private View firstView;\n+\n+    private View lastView;\n \n     @Before\n     public void setUp() throws Exception {\n+\n+        firstView = spy(View.class);\n+        lastView = spy(View.class);\n+\n         dataTypeCache = new AbstractDataTypeCache() {\n             @Override\n             protected void cacheDataTypes(Object processRoot) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MTYwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521191602", "bodyText": "Could we please also test type that look like this com.myspace.Person or org.native.common.logging.ParserWagon Just to be sure.", "author": "domhanak", "createdAt": "2020-11-11T08:25:35Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTI3NzMwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561277301", "bodyText": "Hi @domhanak added object \"com.myspace.Person\"", "author": "inodeman", "createdAt": "2021-01-20T20:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MTYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\nindex b3494818d8..26fe7c41f6 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\n\n@@ -53,17 +53,25 @@ import org.kie.workbench.common.stunner.core.graph.content.view.View;\n \n import static org.jgroups.util.Util.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mock;\n \n public class AbstractDataTypeCacheTest {\n \n     private AbstractDataTypeCache dataTypeCache;\n \n-    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\", \"com.myspace.Person\"));\n+\n+    private View firstView;\n+\n+    private View lastView;\n \n     @Before\n     public void setUp() throws Exception {\n+\n+        firstView = spy(View.class);\n+        lastView = spy(View.class);\n+\n         dataTypeCache = new AbstractDataTypeCache() {\n             @Override\n             protected void cacheDataTypes(Object processRoot) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5Mjg3MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521192871", "bodyText": "I notice we only check last item, would it be possible to check cases where we find more dataTypes in one definition?", "author": "domhanak", "createdAt": "2020-11-11T08:28:06Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        dataTypeCache = new AbstractDataTypeCache() {\n+            @Override\n+            protected void cacheDataTypes(Object processRoot) {\n+            }\n+\n+            @Override\n+            protected List<String> processAssignments(AssignmentsInfo info) {\n+                return defaultDataTypes;\n+            }\n+\n+            @Override\n+            protected List<String> getDataTypes(String variables) {\n+                return defaultDataTypes;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testExtractFromItem() {\n+        View view = mock(View.class);\n+\n+        // Test Data Object\n+        DataObject object = new DataObject();\n+        when(view.getDefinition()).thenReturn(object);\n+        dataTypeCache.extractFromItem(view);\n+        assertTrue(getLastItem().equals(object.getType().getValue().getType()));\n+\n+        // Test AdhocSubprocess\n+        AdHocSubprocess adHocSubprocess = new AdHocSubprocess();\n+        when(view.getDefinition()).thenReturn(adHocSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test BPMNDiagramImpl\n+        BPMNDiagramImpl diaram = new BPMNDiagramImpl();\n+        when(view.getDefinition()).thenReturn(diaram);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test EmbeddedSubprocess\n+        EmbeddedSubprocess embeddedSubprocess = new EmbeddedSubprocess();\n+        when(view.getDefinition()).thenReturn(embeddedSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test EventSubprocess\n+        EventSubprocess eventSubprocess = new EventSubprocess();\n+        when(view.getDefinition()).thenReturn(eventSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5NDkwMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521194900", "bodyText": "Also, what if we extract same datatype form one definition? Can that happen? is the expected output one datatype or two datatypes?", "author": "domhanak", "createdAt": "2020-11-11T08:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5Mjg3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTk3MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561301971", "bodyText": "Hi @domhanak added additional tests, now testing 2 each time", "author": "inodeman", "createdAt": "2021-01-20T21:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5Mjg3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\nindex b3494818d8..26fe7c41f6 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java\n\n@@ -53,17 +53,25 @@ import org.kie.workbench.common.stunner.core.graph.content.view.View;\n \n import static org.jgroups.util.Util.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n-import static org.powermock.api.mockito.PowerMockito.mock;\n \n public class AbstractDataTypeCacheTest {\n \n     private AbstractDataTypeCache dataTypeCache;\n \n-    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\", \"com.myspace.Person\"));\n+\n+    private View firstView;\n+\n+    private View lastView;\n \n     @Before\n     public void setUp() throws Exception {\n+\n+        firstView = spy(View.class);\n+        lastView = spy(View.class);\n+\n         dataTypeCache = new AbstractDataTypeCache() {\n             @Override\n             protected void cacheDataTypes(Object processRoot) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MzEyNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521193126", "bodyText": "Why is this removed?", "author": "domhanak", "createdAt": "2020-11-11T08:28:39Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java", "diffHunk": "@@ -161,8 +165,6 @@ public Graph unmarshall(Metadata metadata, InputStream input) {\n         final Metadata metadata = request.getMetadata();\n         final InputStream inputStream = request.getInput();\n \n-        LOG.debug(\"Starting diagram unmarshalling...\");", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMzMxNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561303316", "bodyText": "@domhanak my mistake, readded", "author": "inodeman", "createdAt": "2021-01-20T21:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MzEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java\nindex b737c277aa..09e8ec45da 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java\n\n@@ -165,6 +165,8 @@ public abstract class BaseDirectDiagramMarshaller implements DiagramMarshaller<G\n         final Metadata metadata = request.getMetadata();\n         final InputStream inputStream = request.getInput();\n \n+        LOG.debug(\"Starting diagram unmarshalling...\");\n+        \n         DefinitionResolver definitionResolver;\n         try {\n             // definition resolver provides utlities to access elements of the BPMN datamodel\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5NzY4Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521197687", "bodyText": "please split this into multiple test cases,\n\nEmpty  diagram\nTest with two nodes\n\nI would also add check that verify that parent class AbstractDataTypeCache contains expected datatypes when the diagram is empty or has nodes with dataIOSets.", "author": "domhanak", "createdAt": "2020-11-11T08:37:16Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/processes/DataTypeCacheServerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.backend.converters.tostunner.processes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.bpmn.backend.converters.tostunner.BpmnNode;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DataTypeCacheServerTest {\n+\n+    @Mock\n+    private DataTypeCacheServer dataTypeCacheServer;\n+\n+    @Mock\n+    BpmnNode rootNode;\n+\n+    @Mock\n+    BpmnNode node1;\n+\n+    @Mock\n+    BpmnNode node2;\n+\n+    @Test\n+    public void testCacheServer() {", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTY2NzQwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r565667401", "bodyText": "Hi @domhanak split into two now", "author": "inodeman", "createdAt": "2021-01-27T22:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5NzY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/processes/DataTypeCacheServerTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/processes/DataTypeCacheServerTest.java\nindex 895449c0d5..e3a045c773 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/processes/DataTypeCacheServerTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/processes/DataTypeCacheServerTest.java\n\n@@ -48,14 +48,22 @@ public class DataTypeCacheServerTest {\n     BpmnNode node2;\n \n     @Test\n-    public void testCacheServer() {\n+    public void testCacheServerEmptyDiagrams() {\n         Mockito.doCallRealMethod().when(dataTypeCacheServer).cacheDataTypes(anyObject());\n         // Empty List\n         List<BpmnNode> nodes = new ArrayList<>();\n         when(rootNode.getChildren()).thenReturn(nodes);\n         dataTypeCacheServer.cacheDataTypes(rootNode);\n         assertEquals(nodes, rootNode.getChildren());\n+        assertEquals(0, nodes.size());\n+    }\n \n+    @Test\n+    public void testCacheServerWithNodes() {\n+        Mockito.doCallRealMethod().when(dataTypeCacheServer).cacheDataTypes(anyObject());\n+        List<BpmnNode> nodes = new ArrayList<>();\n+        when(rootNode.getChildren()).thenReturn(nodes);\n+        dataTypeCacheServer.cacheDataTypes(rootNode);\n         // Test with Nodes\n         nodes.add(node1);\n         nodes.add(node2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODA1MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521198050", "bodyText": "todo", "author": "domhanak", "createdAt": "2020-11-11T08:37:54Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else {\n+            // ToDo: Add extra types to be supported\n+        }\n+    }\n+\n+    protected abstract void cacheDataTypes(Object processRoot);\n+\n+    protected abstract List<String> processAssignments(AssignmentsInfo info);\n+\n+    protected abstract List<String> getDataTypes(String variables);\n+\n+    private void cacheImports(List<DefaultImport> defaultImports) {\n+        for (DefaultImport imported : defaultImports) {\n+            allDataTypes.add(imported.getClassName());\n+        }\n+    }\n+\n+    public void initCache(Object diagramRoot, Node<View<? extends BPMNDiagram<? extends BaseDiagramSet, ? extends BaseProcessData, ? extends BaseAdvancedData>>, Edge> value) {\n+        final BPMNDiagram<? extends BaseDiagramSet, ? extends BaseProcessData, ? extends BaseAdvancedData> definition = value.getContent().getDefinition();\n+        cacheImports(definition.getDiagramSet().getImports().getValue().getDefaultImports());\n+        cacheProcessVariables(definition.getProcessData().getProcessVariables().getValue());\n+        cacheGlobalVariables(definition.getAdvancedData().getGlobalVariables().getValue());\n+        cacheDataTypes(diagramRoot);\n+    }\n+\n+    private void cacheProcessVariables(String processVariables) {\n+        allDataTypes.addAll(getDataTypes(processVariables));\n+    }\n+\n+    private void cacheGlobalVariables(String globalVariables) {\n+        allDataTypes.addAll(getDataTypes(globalVariables));\n+    }\n+\n+    public void doFlush() {\n+        // ToDo: Can implement Flushing", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwNDE3NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561304174", "bodyText": "Hi @domhanak not needed for now, removed", "author": "inodeman", "createdAt": "2021-01-20T21:07:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 66fa8ba0e5..48678916eb 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -54,6 +54,8 @@ import org.kie.workbench.common.stunner.core.graph.Edge;\n import org.kie.workbench.common.stunner.core.graph.Node;\n import org.kie.workbench.common.stunner.core.graph.content.view.View;\n \n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n public abstract class AbstractDataTypeCache {\n \n     public AbstractDataTypeCache() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODU2Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521198562", "bodyText": "commented code", "author": "domhanak", "createdAt": "2020-11-11T08:39:03Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/service/BPMNClientMarshalling.java", "diffHunk": "@@ -67,20 +68,24 @@\n     private final GraphCommandFactory commandFactory;\n     private final GraphCommandManager commandManager;\n     private final ManagedInstance<WorkItemDefinitionRegistry> widRegistries;\n+    private final DataTypeCache dataTypeCache;\n \n     @Inject\n     public BPMNClientMarshalling(final DefinitionManager definitionManager,\n                                  final RuleManager ruleManager,\n                                  final FactoryManager factoryManager,\n                                  final GraphCommandFactory commandFactory,\n                                  final GraphCommandManager commandManager,\n-                                 final ManagedInstance<WorkItemDefinitionRegistry> widRegistries) {\n+                                 final ManagedInstance<WorkItemDefinitionRegistry> widRegistries,\n+                                 final DataTypeCache dataTypeCache) {\n         this.definitionManager = definitionManager;\n         this.ruleManager = ruleManager;\n         this.typedFactoryManager = new TypedFactoryManager(factoryManager);\n         this.commandFactory = commandFactory;\n         this.commandManager = commandManager;\n         this.widRegistries = widRegistries;\n+        this.dataTypeCache = dataTypeCache;\n+        //  this.dataTypeNamesService = dataTypeNamesService;", "originalCommit": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwNTIxNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r561305214", "bodyText": "Hi @domhanak removed", "author": "inodeman", "createdAt": "2021-01-20T21:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c3215a74a89fe49179ee368d0f2b32669264382d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/service/BPMNClientMarshalling.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/service/BPMNClientMarshalling.java\nindex 9799bbf98e..5a12cf9fea 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/service/BPMNClientMarshalling.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/service/BPMNClientMarshalling.java\n\n@@ -85,7 +85,6 @@ public class BPMNClientMarshalling {\n         this.commandManager = commandManager;\n         this.widRegistries = widRegistries;\n         this.dataTypeCache = dataTypeCache;\n-        //  this.dataTypeNamesService = dataTypeNamesService;\n     }\n \n     @PostConstruct\n"}}, {"oid": "70d1a283e00c735f4e3869e11e77d2a8c5afe845", "url": "https://github.com/kiegroup/kie-wb-common/commit/70d1a283e00c735f4e3869e11e77d2a8c5afe845", "message": "KOGITO-2528 : Reuse Data Types across the process (2.5/3)", "committedDate": "2021-01-19T18:54:55Z", "type": "forcePushed"}, {"oid": "c3215a74a89fe49179ee368d0f2b32669264382d", "url": "https://github.com/kiegroup/kie-wb-common/commit/c3215a74a89fe49179ee368d0f2b32669264382d", "message": "KOGITO-2528 : Reuse Data Types across the process Fixed Comments", "committedDate": "2021-01-20T21:11:52Z", "type": "forcePushed"}, {"oid": "e83c5035341ed115051b4b16c9857bbb03b10508", "url": "https://github.com/kiegroup/kie-wb-common/commit/e83c5035341ed115051b4b16c9857bbb03b10508", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-01-25T19:00:57Z", "type": "forcePushed"}, {"oid": "1e63b599732944d2515e12cae139fe398a399646", "url": "https://github.com/kiegroup/kie-wb-common/commit/1e63b599732944d2515e12cae139fe398a399646", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-01-27T20:26:29Z", "type": "forcePushed"}, {"oid": "cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "url": "https://github.com/kiegroup/kie-wb-common/commit/cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-02-02T19:29:25Z", "type": "forcePushed"}, {"oid": "ae2a5a1f33ed410b66f160e2abf3e6ca6fa0ff63", "url": "https://github.com/kiegroup/kie-wb-common/commit/ae2a5a1f33ed410b66f160e2abf3e6ca6fa0ff63", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-02-08T20:27:23Z", "type": "forcePushed"}, {"oid": "8dab347b416673b40c8c5dde3be2897a6c9e31e1", "url": "https://github.com/kiegroup/kie-wb-common/commit/8dab347b416673b40c8c5dde3be2897a6c9e31e1", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-02-17T20:47:53Z", "type": "forcePushed"}, {"oid": "861b8c017d2f4358b8340cfd562974084c577f48", "url": "https://github.com/kiegroup/kie-wb-common/commit/861b8c017d2f4358b8340cfd562974084c577f48", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue when defining default data types in import", "committedDate": "2021-02-25T21:19:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3MzYxMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584673612", "bodyText": "it can be static", "author": "romartin", "createdAt": "2021-03-01T12:31:02Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {", "originalCommit": "861b8c017d2f4358b8340cfd562974084c577f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkwNzA2NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r585907065", "bodyText": "Hi @romartin changed now", "author": "inodeman", "createdAt": "2021-03-02T21:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3MzYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 3dfe6068cf..2cf59ce648 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -16,8 +16,9 @@\n \n package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n \n-import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3MzkzNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584673935", "bodyText": "no need for this empty else block, isn't it?", "author": "romartin", "createdAt": "2021-03-01T12:31:36Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else {", "originalCommit": "861b8c017d2f4358b8340cfd562974084c577f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkwNzM0Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r585907342", "bodyText": "Hi @romartin removed", "author": "inodeman", "createdAt": "2021-03-02T21:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3MzkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 3dfe6068cf..2cf59ce648 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -16,8 +16,9 @@\n \n package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n \n-import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Set;\n \n import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NjEyMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584676122", "bodyText": "why the cache relies on the BpmnNode instance? This is an eclipse model object, not our internal model object. I would prefer, if possible, to always rely on our models, so we can populate the cache any time, whitout the need for having the eclipse models being parsed as well.\nWDYT?", "author": "romartin", "createdAt": "2021-03-01T12:35:03Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java", "diffHunk": "@@ -179,8 +183,8 @@ public Graph unmarshall(Metadata metadata, InputStream input) {\n \n             // perform actual conversion. Process is the root of the diagram\n             Result<BpmnNode> result = converterFactory.rootProcessConverter().convertProcess();\n-\n             BpmnNode diagramRoot = result.value();\n+            dataTypeCache.initCache(diagramRoot);", "originalCommit": "861b8c017d2f4358b8340cfd562974084c577f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkwOTI1Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r585909256", "bodyText": "Hi @romarting, if you could explain more, as far as I can see it is from our models. See\n let me know", "author": "inodeman", "createdAt": "2021-03-02T21:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NjEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDk1ODgzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r600958837", "bodyText": "oh sorry, you're right!! I just got confused on the package for the class.... yeah everyting ok! sorry!", "author": "romartin", "createdAt": "2021-03-25T00:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NjEyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NzY0Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584677643", "bodyText": "another gwt timer here?", "author": "romartin", "createdAt": "2021-03-01T12:37:27Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java", "diffHunk": "@@ -324,6 +348,24 @@ public void setTagsNotEnabled() {\n         checkTagsNotEnabled();\n     }\n \n+    @Override\n+    public void addDataType(String dataType, String oldType) {\n+        if (dataType != null && !dataType.isEmpty()) {\n+            doAddDataType(dataType, oldType);\n+        }\n+    }\n+\n+    protected void doAddDataType(String dataType, String oldType) {\n+        clientDataTypesService.add(dataType, oldType);\n+        new Timer() {", "originalCommit": "861b8c017d2f4358b8340cfd562974084c577f48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTkxMTM4MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r585911381", "bodyText": "Hi @romartin on the first timer, I use it to give enough time for the DataNameService to return the DataTypes, let me know what else can I use. On second instance if I do not set the timer, when it looses focus it does not get set right, let me know", "author": "inodeman", "createdAt": "2021-03-02T21:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NzY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java\nindex bcdb82df87..ca4d175a91 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java\n\n@@ -357,13 +357,10 @@ public class VariablesEditorWidgetViewImpl extends Composite implements Variable\n \n     protected void doAddDataType(String dataType, String oldType) {\n         clientDataTypesService.add(dataType, oldType);\n-        new Timer() {\n-            @Override\n-            public void run() {\n-                refreshFormPropertiesEvent = new RefreshFormPropertiesEvent(sessionManager.getCurrentSession());\n-                refreshFormsEvent.fire(refreshFormPropertiesEvent);\n-            }\n-        }.schedule(100);\n+        Scheduler.get().scheduleDeferred(() -> {\n+            refreshFormPropertiesEvent = new RefreshFormPropertiesEvent(sessionManager.getCurrentSession());\n+            refreshFormsEvent.fire(refreshFormPropertiesEvent);\n+        });\n     }\n \n     protected void checkTagsNotEnabled() {\n"}}, {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "url": "https://github.com/kiegroup/kie-wb-common/commit/42858bb2fa0220dd5340ce3b5c78f5662015984e", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with reviews", "committedDate": "2021-03-02T21:19:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzI1MzIwOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587253208", "bodyText": "Can we also add test for adding data types from Process Variable dropdown, Global Variables dropdown, Task Data I/O dropdown? Or did I miss it?\nAlso the values you use here, I suggest changing them to something actually used - com.myspace.DataTypeOfTypes - since Test 1 and Test 2 can never be inputted into BPMN Editor - text box does not allow whitespaces.", "author": "domhanak", "createdAt": "2021-03-04T08:25:38Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/importsEditor/popup/editor/defaultImport/DefaultImportsEditorWidgetTest.java", "diffHunk": "@@ -193,4 +205,45 @@ public void addDataTypes() {\n         assertTrue(tested.dataTypes.containsValue(\"test1\"));\n         assertTrue(tested.dataTypes.containsValue(\"test2 [org.test]\"));\n     }\n+\n+    @Test\n+    public void testLoadServerTypes() {\n+\n+        final List<String> list = new ArrayList<>();\n+        list.add(\"Test 1\");\n+        list.add(\"Test 2\");\n+\n+        doReturn(PromiseMock.success(list))\n+                .when(dataTypeNamesService)\n+                .call(any());\n+\n+        tested.loadServerDataTypes();\n+\n+        assertEquals(\"Test 1\", tested.dataTypes.get(\"Test 1\"));\n+        assertEquals(\"Test 2\", tested.dataTypes.get(\"Test 2\"));\n+    }\n+\n+    @Test\n+    public void testAddDataTypesFromImports() {", "originalCommit": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzc2MzUxOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587763518", "bodyText": "Hi @domhanak I added imports since it is basically the same mechanism for all, there is also tests for calling the service. I changed Test 1 and Test 2 now. Let me know", "author": "inodeman", "createdAt": "2021-03-04T19:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzI1MzIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/importsEditor/popup/editor/defaultImport/DefaultImportsEditorWidgetTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/importsEditor/popup/editor/defaultImport/DefaultImportsEditorWidgetTest.java\nindex 2e3d0bcfa2..a219b7f11b 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/importsEditor/popup/editor/defaultImport/DefaultImportsEditorWidgetTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/importsEditor/popup/editor/defaultImport/DefaultImportsEditorWidgetTest.java\n\n@@ -210,8 +210,8 @@ public class DefaultImportsEditorWidgetTest {\n     public void testLoadServerTypes() {\n \n         final List<String> list = new ArrayList<>();\n-        list.add(\"Test 1\");\n-        list.add(\"Test 2\");\n+        list.add(\"com.myspace.DataTypeOfTypes1\");\n+        list.add(\"com.myspace.DataTypeOfTypes2\");\n \n         doReturn(PromiseMock.success(list))\n                 .when(dataTypeNamesService)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMyODYwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587328602", "bodyText": "One suggestion here, let me know if it is valid. I understand that if we add some new instance and we forget to add it here we won't be able to extract the data types from it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // log error that we tried to extract data type for a definition we did not know about?\n          \n          \n            \n                    }", "author": "domhanak", "createdAt": "2021-03-04T10:03:13Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/**\n+ * An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected static Set<String> allDataTypes = new HashSet<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        }", "originalCommit": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzcwOTM2MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587709361", "bodyText": "Hi @domhanak basically what it does it goes through all the nodes and checks instances, if it is not from the list it does not do anything, so if it reaches else, it is not really an error, it is just a node that does not contain data types", "author": "inodeman", "createdAt": "2021-03-04T18:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMyODYwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODEzNTU2OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r588135568", "bodyText": "@inodeman okay, maybe we could log it as info? Could be useful when we add support for more nodes, might help us identifying what is missing.\nAnyway I agree it is a detail, I leave it up to you.", "author": "domhanak", "createdAt": "2021-03-05T09:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMyODYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 2cf59ce648..b9c04af7f8 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -35,6 +35,8 @@ import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateLinkEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateLinkEventThrowing;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMzMzM5NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587333395", "bodyText": "@inodeman I think we have missed some nodes here. For example IntermediateLinkEvent\nWhen you open a process with node that is missing in this if-else tree the data type won't be extracted.\nApologies for missing this in earlier review.\nImho the AbstractDataTypeCacheTest needs to be extended for every possible node we have in our BPMN editor that can set Data Types in some way.", "author": "domhanak", "createdAt": "2021-03-04T10:10:00Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/**\n+ * An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected static Set<String> allDataTypes = new HashSet<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {", "originalCommit": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzc1MjA4Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587752082", "bodyText": "Hi @domhanak added IntermediateLinkEvent, also added tests for it", "author": "inodeman", "createdAt": "2021-03-04T19:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMzMzM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\nindex 2cf59ce648..b9c04af7f8 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java\n\n@@ -35,6 +35,8 @@ import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateLinkEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateLinkEventThrowing;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n"}}, {"oid": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "url": "https://github.com/kiegroup/kie-wb-common/commit/32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Removed Timers", "committedDate": "2021-03-04T22:07:04Z", "type": "forcePushed"}, {"oid": "74415af35e58b6e0099c45411129264e42465256", "url": "https://github.com/kiegroup/kie-wb-common/commit/74415af35e58b6e0099c45411129264e42465256", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue", "committedDate": "2021-03-10T18:41:27Z", "type": "forcePushed"}, {"oid": "d069d2f56f41caada27dc729f3562db8e1dec508", "url": "https://github.com/kiegroup/kie-wb-common/commit/d069d2f56f41caada27dc729f3562db8e1dec508", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again", "committedDate": "2021-03-18T22:40:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODUzMTc0Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r598531743", "bodyText": "this method does not seem to be covered in tests, same for other methods. See - https://sonarcloud.io/component_measures?id=org.kie.workbench%3Akie-wb-common&pullRequest=3347&metric=new_coverage&view=list", "author": "domhanak", "createdAt": "2021-03-22T09:04:32Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/ActivityDataIOEditor.java", "diffHunk": "@@ -171,4 +173,9 @@ public void show() {\n     public ListBoxValues.ValueTester processVarTester() {\n         return userValue -> null;\n     }\n+\n+    @Override\n+    public void addDataType(String dataType, String oldType) {", "originalCommit": "d069d2f56f41caada27dc729f3562db8e1dec508", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "5e962f0a7c545240fd035072627fdb894eb8d881", "url": "https://github.com/kiegroup/kie-wb-common/commit/5e962f0a7c545240fd035072627fdb894eb8d881", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-03-30T17:51:40Z", "type": "commit"}, {"oid": "6259459a2e7abc25c868de707704dd8418e48946", "url": "https://github.com/kiegroup/kie-wb-common/commit/6259459a2e7abc25c868de707704dd8418e48946", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "47996bc65c93f9ff85db66ac0d4668cbda6c13b3", "url": "https://github.com/kiegroup/kie-wb-common/commit/47996bc65c93f9ff85db66ac0d4668cbda6c13b3", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "dbe48ac78e238b63d15b3a5829e8e5665d1f6deb", "url": "https://github.com/kiegroup/kie-wb-common/commit/dbe48ac78e238b63d15b3a5829e8e5665d1f6deb", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with FQN", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "a2bab9bb6af7e71ece7677ca1d087c3a819df0ee", "url": "https://github.com/kiegroup/kie-wb-common/commit/a2bab9bb6af7e71ece7677ca1d087c3a819df0ee", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with values not set after defining customValue", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "54be509aa16d313111bc6e077934719d98244b7d", "url": "https://github.com/kiegroup/kie-wb-common/commit/54be509aa16d313111bc6e077934719d98244b7d", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue when defining default data types in import", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "0a0688497115787dba614f821aebebc3ad5bc597", "url": "https://github.com/kiegroup/kie-wb-common/commit/0a0688497115787dba614f821aebebc3ad5bc597", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Default Object Import", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "1fa5b0499d756e386184b4630e1ad512e77ee39a", "url": "https://github.com/kiegroup/kie-wb-common/commit/1fa5b0499d756e386184b4630e1ad512e77ee39a", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Disappearing Data Type (Custom Type)", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "fb0f8a7c8ba8552e83edb87591f0e95a6c0a0814", "url": "https://github.com/kiegroup/kie-wb-common/commit/fb0f8a7c8ba8552e83edb87591f0e95a6c0a0814", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with FQN on Imports", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "5203ad0b0c8625c6a1a34f99d944d49292463562", "url": "https://github.com/kiegroup/kie-wb-common/commit/5203ad0b0c8625c6a1a34f99d944d49292463562", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with reviews", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "be898c01f48a2a07c90b8445cbd45d7c20d5041a", "url": "https://github.com/kiegroup/kie-wb-common/commit/be898c01f48a2a07c90b8445cbd45d7c20d5041a", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bugs", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "a22f49b3e8b44d1ab52cc2d0a4dcd9b7a88c6415", "url": "https://github.com/kiegroup/kie-wb-common/commit/a22f49b3e8b44d1ab52cc2d0a4dcd9b7a88c6415", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Removed Timers", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "83ff683d241f822b9cbcb297e4814b97334ee713", "url": "https://github.com/kiegroup/kie-wb-common/commit/83ff683d241f822b9cbcb297e4814b97334ee713", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Removed Timers", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "685471327c59561dd8776208545df44860968974", "url": "https://github.com/kiegroup/kie-wb-common/commit/685471327c59561dd8776208545df44860968974", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bug", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "797dd570c10a20c9125565aaf4ff8af9366b8666", "url": "https://github.com/kiegroup/kie-wb-common/commit/797dd570c10a20c9125565aaf4ff8af9366b8666", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bugs", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "db44516a537a0b95644cbaf9ab97e5d65ac8c616", "url": "https://github.com/kiegroup/kie-wb-common/commit/db44516a537a0b95644cbaf9ab97e5d65ac8c616", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "d069ddce5739f6a9fa1963b64a8519e40a9cca9d", "url": "https://github.com/kiegroup/kie-wb-common/commit/d069ddce5739f6a9fa1963b64a8519e40a9cca9d", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with unable to rename in VariablesEditor", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "a5a456c84a0d2d4b39fe34e899cfe5fa2f827e7b", "url": "https://github.com/kiegroup/kie-wb-common/commit/a5a456c84a0d2d4b39fe34e899cfe5fa2f827e7b", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with DO", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "13c2f74acc35015973993adfb9c9e549a2fa50c9", "url": "https://github.com/kiegroup/kie-wb-common/commit/13c2f74acc35015973993adfb9c9e549a2fa50c9", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "2971404ea4f5ea290fb8e1227f5c83e7f0043d0e", "url": "https://github.com/kiegroup/kie-wb-common/commit/2971404ea4f5ea290fb8e1227f5c83e7f0043d0e", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "6ce19538bd2b5e16d731badcca23d6d757a9bc04", "url": "https://github.com/kiegroup/kie-wb-common/commit/6ce19538bd2b5e16d731badcca23d6d757a9bc04", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "a1060a4a6f5af15a0ab0099522dc433477609c9e", "url": "https://github.com/kiegroup/kie-wb-common/commit/a1060a4a6f5af15a0ab0099522dc433477609c9e", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope, Edit issues", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "56071d4189c0ce58b514464695370c5934cde081", "url": "https://github.com/kiegroup/kie-wb-common/commit/56071d4189c0ce58b514464695370c5934cde081", "message": "KOGITO-2528 : Reuse Data Types across the process. Added Tests", "committedDate": "2021-03-30T17:51:41Z", "type": "commit"}, {"oid": "321e18558a003eb2764c9e3713e9423683063f80", "url": "https://github.com/kiegroup/kie-wb-common/commit/321e18558a003eb2764c9e3713e9423683063f80", "message": "KOGITO-2528 : Reuse Data Types across the process.", "committedDate": "2021-03-30T17:51:42Z", "type": "commit"}, {"oid": "8bbc2aa1115bfc0ac1435c803a5ec25f33aa9551", "url": "https://github.com/kiegroup/kie-wb-common/commit/8bbc2aa1115bfc0ac1435c803a5ec25f33aa9551", "message": "KOGITO-2528 : Reuse Data Types across the process. Fixed Issues", "committedDate": "2021-03-31T19:33:55Z", "type": "commit"}, {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "url": "https://github.com/kiegroup/kie-wb-common/commit/5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "message": "KOGITO-2528 : Reuse Data Types across the process. Fixed Issues", "committedDate": "2021-03-31T19:50:34Z", "type": "commit"}, {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "url": "https://github.com/kiegroup/kie-wb-common/commit/5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "message": "KOGITO-2528 : Reuse Data Types across the process. Fixed Issues", "committedDate": "2021-03-31T19:50:34Z", "type": "forcePushed"}]}