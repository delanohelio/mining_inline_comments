{"pr_number": 3199, "pr_title": "KOGITO-1157: [DMN Designer] New models must be named with the file name on VSCode", "pr_createdAt": "2020-02-28T14:35:23Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3199", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDM4NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3199#discussion_r385744384", "bodyText": "Do we really have to mock the behaviour of this method!?!", "author": "manstis", "createdAt": "2020-02-28T15:03:52Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNClientDiagramServiceImplTest {\n+\n+    private DMNClientDiagramServiceImpl service;\n+\n+    @Before\n+    public void setup() {\n+        service = spy(new DMNClientDiagramServiceImpl());\n+    }\n+\n+    @Test\n+    public void testTransformWhenFileIsNew() {\n+        final String fileName = \"file.dmn\";\n+        final String xml = \"\";\n+        final ServiceCallback<Diagram> callback = mock(ServiceCallback.class);\n+        final String title = \"title\";\n+\n+        doReturn(title).when(service).getDiagramTitle(fileName);", "originalCommit": "bce71ffb6b447e06066f62d83ba60c34ea896679", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19692da01d31a16ac27fcdcee5fdaddca0d2f12", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java\nindex 5fe5b7fe63..5f73f106bb 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java\n\n@@ -46,9 +46,8 @@ public class DMNClientDiagramServiceImplTest {\n         final String fileName = \"file.dmn\";\n         final String xml = \"\";\n         final ServiceCallback<Diagram> callback = mock(ServiceCallback.class);\n-        final String title = \"title\";\n+        final String title = \"file\";\n \n-        doReturn(title).when(service).getDiagramTitle(fileName);\n         doNothing().when(service).doNewDiagram(title, callback);\n \n         service.transform(fileName, xml, callback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NDQ0NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3199#discussion_r385744445", "bodyText": "Do we really have to mock the behaviour of this method!?!", "author": "manstis", "createdAt": "2020-02-28T15:03:59Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNClientDiagramServiceImplTest {\n+\n+    private DMNClientDiagramServiceImpl service;\n+\n+    @Before\n+    public void setup() {\n+        service = spy(new DMNClientDiagramServiceImpl());\n+    }\n+\n+    @Test\n+    public void testTransformWhenFileIsNew() {\n+        final String fileName = \"file.dmn\";\n+        final String xml = \"\";\n+        final ServiceCallback<Diagram> callback = mock(ServiceCallback.class);\n+        final String title = \"title\";\n+\n+        doReturn(title).when(service).getDiagramTitle(fileName);\n+        doNothing().when(service).doNewDiagram(title, callback);\n+\n+        service.transform(fileName, xml, callback);\n+\n+        verify(service).doNewDiagram(title, callback);\n+    }\n+\n+    @Test\n+    public void testTransformWhenFileIsNotNew() {\n+        final String fileName = \"file.dmn\";\n+        final String xml = \"xml\";\n+        final ServiceCallback<Diagram> callback = mock(ServiceCallback.class);\n+        final String title = \"title\";\n+\n+        doReturn(title).when(service).getDiagramTitle(fileName);", "originalCommit": "bce71ffb6b447e06066f62d83ba60c34ea896679", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19692da01d31a16ac27fcdcee5fdaddca0d2f12", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java\nindex 5fe5b7fe63..5f73f106bb 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImplTest.java\n\n@@ -46,9 +46,8 @@ public class DMNClientDiagramServiceImplTest {\n         final String fileName = \"file.dmn\";\n         final String xml = \"\";\n         final ServiceCallback<Diagram> callback = mock(ServiceCallback.class);\n-        final String title = \"title\";\n+        final String title = \"file\";\n \n-        doReturn(title).when(service).getDiagramTitle(fileName);\n         doNothing().when(service).doNewDiagram(title, callback);\n \n         service.transform(fileName, xml, callback);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTY2Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3199#discussion_r385745663", "bodyText": "I'm a stickler for parameters on new lines.. but it's just my opinion, so I state it but don't expect it to be fixed.", "author": "manstis", "createdAt": "2020-02-28T15:06:13Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java", "diffHunk": "@@ -95,17 +95,39 @@ public DMNClientDiagramServiceImpl(final DMNMarshallerKogitoUnmarshaller dmnMars\n     //Kogito requirements\n \n     @Override\n-    public void transform(final String xml,\n-                          final ServiceCallback<Diagram> callback) {\n+    public void transform(final String fileName, final String xml, final ServiceCallback<Diagram> callback) {\n         if (Objects.isNull(xml) || xml.isEmpty()) {\n-            doNewDiagram(callback);\n+            doNewDiagram(getDiagramTitle(fileName), callback);\n         } else {\n             doTransformation(xml, callback);\n         }\n     }\n \n-    private void doNewDiagram(final ServiceCallback<Diagram> callback) {\n-        final String title = UUID.uuid();\n+    String getDiagramTitle(final String fileName) {\n+        final String diagramTitle;\n+        if (StringUtils.isEmpty(fileName)) {\n+            diagramTitle = generateDiagramTitle();\n+        } else {\n+            if (fileName.contains(\".\")) {\n+                diagramTitle = fileName.substring(0, fileName.lastIndexOf('.'));\n+            } else {\n+                diagramTitle = fileName;\n+            }\n+        }\n+        return diagramTitle;\n+    }\n+\n+    String generateDiagramTitle() {\n+        return UUID.uuid();\n+    }\n+\n+    @Override\n+    public void transform(final String xml,\n+                          final ServiceCallback<Diagram> callback) {\n+        transform(UUID.uuid(), xml, callback);\n+    }\n+\n+    void doNewDiagram(final String title, final ServiceCallback<Diagram> callback) {", "originalCommit": "bce71ffb6b447e06066f62d83ba60c34ea896679", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg2MzAyMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3199#discussion_r385863023", "bodyText": "Like you I also prefer parameters on new lines, but sometimes the reviewers don't, so it's hard to know what to do. I'm changing anyway.", "author": "danielzhe", "createdAt": "2020-02-28T18:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d19692da01d31a16ac27fcdcee5fdaddca0d2f12", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java\nindex 664fc2923e..fddd3e02fc 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java\n\n@@ -95,7 +95,9 @@ public class DMNClientDiagramServiceImpl implements KogitoClientDiagramService {\n     //Kogito requirements\n \n     @Override\n-    public void transform(final String fileName, final String xml, final ServiceCallback<Diagram> callback) {\n+    public void transform(final String fileName,\n+                          final String xml,\n+                          final ServiceCallback<Diagram> callback) {\n         if (Objects.isNull(xml) || xml.isEmpty()) {\n             doNewDiagram(getDiagramTitle(fileName), callback);\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NTcyNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3199#discussion_r385745725", "bodyText": "I'm a stickler for parameters on new lines.. but it's just my opinion, so I state it but don't expect it to be fixed.", "author": "manstis", "createdAt": "2020-02-28T15:06:19Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java", "diffHunk": "@@ -95,17 +95,39 @@ public DMNClientDiagramServiceImpl(final DMNMarshallerKogitoUnmarshaller dmnMars\n     //Kogito requirements\n \n     @Override\n-    public void transform(final String xml,\n-                          final ServiceCallback<Diagram> callback) {\n+    public void transform(final String fileName, final String xml, final ServiceCallback<Diagram> callback) {", "originalCommit": "bce71ffb6b447e06066f62d83ba60c34ea896679", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d19692da01d31a16ac27fcdcee5fdaddca0d2f12", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java\nindex 664fc2923e..fddd3e02fc 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientDiagramServiceImpl.java\n\n@@ -95,7 +95,9 @@ public class DMNClientDiagramServiceImpl implements KogitoClientDiagramService {\n     //Kogito requirements\n \n     @Override\n-    public void transform(final String fileName, final String xml, final ServiceCallback<Diagram> callback) {\n+    public void transform(final String fileName,\n+                          final String xml,\n+                          final ServiceCallback<Diagram> callback) {\n         if (Objects.isNull(xml) || xml.isEmpty()) {\n             doNewDiagram(getDiagramTitle(fileName), callback);\n         } else {\n"}}, {"oid": "96943a7aa8185c0fae4ed3fd0f329632872c3e1e", "url": "https://github.com/kiegroup/kie-wb-common/commit/96943a7aa8185c0fae4ed3fd0f329632872c3e1e", "message": "KOGITO-1157: [DMN Designer] New models must be named with the file name on VSCode", "committedDate": "2020-03-02T13:08:41Z", "type": "commit"}, {"oid": "d19692da01d31a16ac27fcdcee5fdaddca0d2f12", "url": "https://github.com/kiegroup/kie-wb-common/commit/d19692da01d31a16ac27fcdcee5fdaddca0d2f12", "message": "Code review #1", "committedDate": "2020-03-02T13:08:42Z", "type": "commit"}, {"oid": "adf48bf7cd01a1a8de1b3167d0913a04f82c6e21", "url": "https://github.com/kiegroup/kie-wb-common/commit/adf48bf7cd01a1a8de1b3167d0913a04f82c6e21", "message": "Fix issue with full path.", "committedDate": "2020-03-02T18:59:14Z", "type": "commit"}, {"oid": "adf48bf7cd01a1a8de1b3167d0913a04f82c6e21", "url": "https://github.com/kiegroup/kie-wb-common/commit/adf48bf7cd01a1a8de1b3167d0913a04f82c6e21", "message": "Fix issue with full path.", "committedDate": "2020-03-02T18:59:14Z", "type": "forcePushed"}, {"oid": "7ff7c8571578eb2756172cfa7a1736bef211348e", "url": "https://github.com/kiegroup/kie-wb-common/commit/7ff7c8571578eb2756172cfa7a1736bef211348e", "message": "KOGITO-1157: Cover more complex file names", "committedDate": "2020-03-03T08:25:58Z", "type": "commit"}, {"oid": "cc9b268907b00025f41fe7d5830a144e2ab3b25e", "url": "https://github.com/kiegroup/kie-wb-common/commit/cc9b268907b00025f41fe7d5830a144e2ab3b25e", "message": "Merge pull request #5 from jomarko/PR-KOGITO-1157\n\nKOGITO-1157: Cover more complex file names", "committedDate": "2020-03-03T14:39:14Z", "type": "commit"}]}