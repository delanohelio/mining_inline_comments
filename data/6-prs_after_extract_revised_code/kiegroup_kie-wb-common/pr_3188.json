{"pr_number": 3188, "pr_title": "KOGITO-1219: Forms - Ability to flush the form state into the model on demand", "pr_createdAt": "2020-02-26T20:29:21Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3188", "timeline": [{"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "url": "https://github.com/kiegroup/kie-wb-common/commit/8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "message": "KOGITO-1219: Forms - Ability to flush the form state into the model on demand", "committedDate": "2020-02-26T20:27:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MTUxNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384951517", "bodyText": "minor: official kiegroup formatting would be: if (isInitialized()) {", "author": "jomarko", "createdAt": "2020-02-27T07:27:39Z", "path": "kie-wb-common-forms/kie-wb-common-dynamic-forms/kie-wb-common-dynamic-forms-client/src/main/java/org/kie/workbench/common/forms/dynamic/client/DynamicFormRenderer.java", "diffHunk": "@@ -247,6 +247,12 @@ public Form getCurrentForm() {\n         return null;\n     }\n \n+    public void flush() {\n+        if(isInitialized()) {", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "chunk": "diff --git a/kie-wb-common-forms/kie-wb-common-dynamic-forms/kie-wb-common-dynamic-forms-client/src/main/java/org/kie/workbench/common/forms/dynamic/client/DynamicFormRenderer.java b/kie-wb-common-forms/kie-wb-common-dynamic-forms/kie-wb-common-dynamic-forms-client/src/main/java/org/kie/workbench/common/forms/dynamic/client/DynamicFormRenderer.java\nindex eccd1d8087..19f5a30333 100644\n--- a/kie-wb-common-forms/kie-wb-common-dynamic-forms/kie-wb-common-dynamic-forms-client/src/main/java/org/kie/workbench/common/forms/dynamic/client/DynamicFormRenderer.java\n+++ b/kie-wb-common-forms/kie-wb-common-dynamic-forms/kie-wb-common-dynamic-forms-client/src/main/java/org/kie/workbench/common/forms/dynamic/client/DynamicFormRenderer.java\n\n@@ -248,7 +248,7 @@ public class DynamicFormRenderer implements IsWidget,\n     }\n \n     public void flush() {\n-        if(isInitialized()) {\n+        if (isInitialized()) {\n             formHandler.maybeFlush();\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MjY2OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384952669", "bodyText": "Could we add javadoc as it is an interface?", "author": "jomarko", "createdAt": "2020-02-27T07:30:58Z", "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/FormHandler.java", "diffHunk": "@@ -138,4 +138,7 @@\n     void setReadOnly(boolean readOnly);\n \n     Form getForm();\n+\n+    void maybeFlush();", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "chunk": "diff --git a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/FormHandler.java b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/FormHandler.java\nindex dcbbe58b8f..7dfaf7ecd6 100644\n--- a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/FormHandler.java\n+++ b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/FormHandler.java\n\n@@ -137,8 +106,16 @@ public interface FormHandler<T> {\n      */\n     void setReadOnly(boolean readOnly);\n \n+    /**\n+     * Retrieves the rendered {@link Form}\n+     *\n+     * @return the rendered {@link Form}\n+     */\n     Form getForm();\n \n+    /**\n+     * Tries to flush the changes on the form UI into the bound model. If there's a validation error it will rollback\n+     * the changes and leave the form on the previous state.\n+     */\n     void maybeFlush();\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDc2MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384954761", "bodyText": "Wr could add short java doc, maybe not what is flush but what classes are intended to implement it ?", "author": "jomarko", "createdAt": "2020-02-27T07:37:24Z", "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/NeedsFlush.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.forms.processing.engine.handling;\n+\n+public interface NeedsFlush {\n+\n+    void flush();", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjY0MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384976640", "bodyText": "Basically it should be implemented by nested forms. Nested forms have their own renderer and need to propagate the flush call. I decided to have a separate interface instead of reusing IsNestedModel just in case we need that functionallity for other custom form controls (stunner have some dedicated to the propreties panels)", "author": "pefernan", "createdAt": "2020-02-27T08:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "chunk": "diff --git a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/NeedsFlush.java b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/NeedsFlush.java\nindex 57113e2093..ea930d87c3 100644\n--- a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/NeedsFlush.java\n+++ b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/NeedsFlush.java\n\n@@ -16,7 +16,13 @@\n \n package org.kie.workbench.common.forms.processing.engine.handling;\n \n+/**\n+ * Represent a form control that requires flushing the changes on UI.\n+ */\n public interface NeedsFlush {\n \n+    /**\n+     * Flushes the changes on the UI into the bound model.\n+     */\n     void flush();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NzIxNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384957214", "bodyText": "Not sure where to comment, but we should simplify the setUp variants to have just two (because of the passed values):\n@Override\n    public void setUp(DataBinder<T> binder) {\n        Assert.notNull(\"DataBinder cannot be null\",\n                       binder);\n\n        clear();\n\n        this.form = new Form();\n\n        this.binder = binder;\n    }\n\n    @Override\n    public void setUp(T model) {\n        Assert.notNull(\"Model cannot be null\",\n                       model);\n\n        setUp(getBinderForModel(model));\n    }", "author": "jomarko", "createdAt": "2020-02-27T07:44:05Z", "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -37,6 +37,7 @@\n import org.kie.workbench.common.forms.processing.engine.handling.FormHandler;\n import org.kie.workbench.common.forms.processing.engine.handling.FormValidator;\n import org.kie.workbench.common.forms.processing.engine.handling.IsNestedModel;\n+import org.kie.workbench.common.forms.processing.engine.handling.NeedsFlush;\n \n public class FormHandlerImpl<T> implements FormHandler<T> {", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5MTExMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384991113", "bodyText": "Let me take a look, honestly I'm not sure here. The renderer is being used in two different ways (static models like stunner properties panels & dynamic models on jbpm task list) that's the reason for both setup methods, but I cannot remember the details now.", "author": "pefernan", "createdAt": "2020-02-27T09:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwMDIwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r385000202", "bodyText": "Ok, I think the setUp receiving a binder is legacy code from the old LiveSpark days... removing it. Thanks for the pointer.", "author": "pefernan", "createdAt": "2020-02-27T09:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NzIxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NzY3OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384957678", "bodyText": "minor: official kiegroup formatting is: if (enabledOnChangeValidations) {", "author": "jomarko", "createdAt": "2020-02-27T07:45:32Z", "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -140,17 +144,26 @@ public void registerInput(FormField formField,\n \n         if (widget instanceof IsNestedModel) {\n             IsNestedModel nestedModelWidget = (IsNestedModel) widget;\n-            nestedModelWidget.addFieldChangeHandler((childFieldName, newValue) -> fieldChangeManager.notifyFieldChange(fieldName + \".\" + childFieldName,\n-                                                                                                                       newValue));\n+            nestedModelWidget.addFieldChangeHandler((nestedFieldName, newValue) -> notifyFieldChange(formField.getFieldName() + \".\" + nestedFieldName, newValue));\n         } else {\n             PropertyChangeUnsubscribeHandle unsubscribeHandle = binder.addPropertyChangeHandler(formField.getFieldBinding(),\n-                                                                                                event -> fieldChangeManager.processFieldChange(fieldName,\n-                                                                                                                                               event.getNewValue(),\n-                                                                                                                                               binder.getModel()));\n+                                                                                                event -> processFieldChange(formField, event.getNewValue()));\n             unsubscribeHandlers.add(unsubscribeHandle);\n         }\n     }\n \n+    protected void notifyFieldChange(String fieldName, Object newValue) {\n+        fieldChangeManager.notifyFieldChange(fieldName, newValue);\n+    }\n+\n+    protected void processFieldChange(FormField formField, Object newValue) {\n+        if(enabledOnChangeValidations) {", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "chunk": "diff --git a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\nindex 0a5a4b4efa..0b2bcdd1a5 100644\n--- a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\n+++ b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\n\n@@ -157,7 +138,7 @@ public class FormHandlerImpl<T> implements FormHandler<T> {\n     }\n \n     protected void processFieldChange(FormField formField, Object newValue) {\n-        if(enabledOnChangeValidations) {\n+        if (enabledOnChangeValidations) {\n             fieldChangeManager.processFieldChange(formField.getFieldName(), newValue, getModel());\n         } else {\n             notifyFieldChange(formField.getFieldName(), newValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1ODI3NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384958275", "bodyText": "minor: kiegrooup formatting", "author": "jomarko", "createdAt": "2020-02-27T07:47:04Z", "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -239,7 +252,51 @@ public void clear() {\n         form = null;\n     }\n \n+    private void flushNestedForms() {\n+        form.getFields().stream()\n+                .filter(formField -> formField.getWidget() instanceof NeedsFlush)\n+                .map(formField -> (NeedsFlush) formField.getWidget())\n+                .forEach(NeedsFlush::flush);\n+    }\n+\n+    @Override\n+    public void maybeFlush() {\n+\n+        if(binder == null) {", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "chunk": "diff --git a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\nindex 0a5a4b4efa..0b2bcdd1a5 100644\n--- a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\n+++ b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\n\n@@ -262,30 +243,28 @@ public class FormHandlerImpl<T> implements FormHandler<T> {\n     @Override\n     public void maybeFlush() {\n \n-        if(binder == null) {\n+        if (binder == null) {\n             return;\n         }\n \n         setEnabledOnChangeValidations(false);\n \n-        try {\n-            flushNestedForms();\n+        flushNestedForms();\n \n-            BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n+        BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n \n-            T model = proxy.deepUnwrap();\n+        T model = proxy.deepUnwrap();\n \n-            T backupModel = proxy.deepUnwrap();\n+        T backupModel = proxy.deepUnwrap();\n \n-            binder.setModel(model, StateSync.FROM_UI, true);\n+        binder.setModel(model, StateSync.FROM_UI, true);\n \n-            if (!validate()) {\n-                binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n-                validate();\n-            }\n-        } finally {\n-            setEnabledOnChangeValidations(true);\n+        if (!validate()) {\n+            binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n+            validate();\n         }\n+\n+        setEnabledOnChangeValidations(true);\n     }\n \n     protected void setEnabledOnChangeValidations(boolean enabledOnChangeValidations) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTMzNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384959336", "bodyText": "no methods seems be throwing exception, can't be as below?:\n            flushNestedForms();\n\n            BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n\n            T model = proxy.deepUnwrap();\n\n            T backupModel = proxy.deepUnwrap();\n\n            binder.setModel(model, StateSync.FROM_UI, true);\n\n            if (!validate()) {\n                binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n                validate();\n            }\n        \n            setEnabledOnChangeValidations(true);", "author": "jomarko", "createdAt": "2020-02-27T07:49:49Z", "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -239,7 +252,51 @@ public void clear() {\n         form = null;\n     }\n \n+    private void flushNestedForms() {\n+        form.getFields().stream()\n+                .filter(formField -> formField.getWidget() instanceof NeedsFlush)\n+                .map(formField -> (NeedsFlush) formField.getWidget())\n+                .forEach(NeedsFlush::flush);\n+    }\n+\n+    @Override\n+    public void maybeFlush() {\n+\n+        if(binder == null) {\n+            return;\n+        }\n+\n+        setEnabledOnChangeValidations(false);\n+\n+        try {\n+            flushNestedForms();\n+\n+            BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n+\n+            T model = proxy.deepUnwrap();\n+\n+            T backupModel = proxy.deepUnwrap();\n+\n+            binder.setModel(model, StateSync.FROM_UI, true);\n+\n+            if (!validate()) {\n+                binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n+                validate();\n+            }\n+        } finally {\n+            setEnabledOnChangeValidations(true);\n+        }", "originalCommit": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk4ODk3NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384988975", "bodyText": "Well, there might be cases that Exceptions could be thrown during the form validation, kind of unlikely but possile. That's why I added the try-finally to make sure the FormHandler goes back to the normal state", "author": "pefernan", "createdAt": "2020-02-27T08:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTMzNg=="}], "type": "inlineReview", "revised_code": {"commit": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "chunk": "diff --git a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\nindex 0a5a4b4efa..0b2bcdd1a5 100644\n--- a/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\n+++ b/kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java\n\n@@ -262,30 +243,28 @@ public class FormHandlerImpl<T> implements FormHandler<T> {\n     @Override\n     public void maybeFlush() {\n \n-        if(binder == null) {\n+        if (binder == null) {\n             return;\n         }\n \n         setEnabledOnChangeValidations(false);\n \n-        try {\n-            flushNestedForms();\n+        flushNestedForms();\n \n-            BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n+        BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n \n-            T model = proxy.deepUnwrap();\n+        T model = proxy.deepUnwrap();\n \n-            T backupModel = proxy.deepUnwrap();\n+        T backupModel = proxy.deepUnwrap();\n \n-            binder.setModel(model, StateSync.FROM_UI, true);\n+        binder.setModel(model, StateSync.FROM_UI, true);\n \n-            if (!validate()) {\n-                binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n-                validate();\n-            }\n-        } finally {\n-            setEnabledOnChangeValidations(true);\n+        if (!validate()) {\n+            binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n+            validate();\n         }\n+\n+        setEnabledOnChangeValidations(true);\n     }\n \n     protected void setEnabledOnChangeValidations(boolean enabledOnChangeValidations) {\n"}}, {"oid": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "url": "https://github.com/kiegroup/kie-wb-common/commit/58c19c808a6ff9444d5199d6de96f2bdf894629f", "message": "- Code improvements", "committedDate": "2020-02-27T10:09:38Z", "type": "commit"}, {"oid": "d496fd6ccb41e5e089935ab03a026976a409c49d", "url": "https://github.com/kiegroup/kie-wb-common/commit/d496fd6ccb41e5e089935ab03a026976a409c49d", "message": "- Fixed Test", "committedDate": "2020-02-27T16:20:16Z", "type": "commit"}]}