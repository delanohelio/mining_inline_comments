{"pr_number": 3221, "pr_title": "KOGITO-766: Kogito Keyboard Shortcuts API", "pr_createdAt": "2020-03-16T16:30:09Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3221", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODAwNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158005", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "author": "manstis", "createdAt": "2020-03-16T16:38:09Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +66,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public String getKogitoCombination() {", "originalCommit": "5bcb39711599403dead440a04c3e8d5465075f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e79cd90bf461537f11b65768662d131fcd833f56", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java\nindex 5d4089c1d8..553cb2a969 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java\n\n@@ -66,14 +68,4 @@ public class AppendDecisionShortcut extends AbstractAppendNodeShortcut {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n-\n-    @Override\n-    public String getKogitoCombination() {\n-        return \"d\";\n-    }\n-\n-    @Override\n-    public String getKogitoLabel() {\n-        return \"Append Decision\";\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODA0OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158048", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "author": "manstis", "createdAt": "2020-03-16T16:38:13Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +66,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public String getKogitoCombination() {\n+        return \"d\";\n+    }\n+\n+    @Override\n+    public String getKogitoLabel() {", "originalCommit": "5bcb39711599403dead440a04c3e8d5465075f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e79cd90bf461537f11b65768662d131fcd833f56", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java\nindex 5d4089c1d8..553cb2a969 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java\n\n@@ -66,14 +68,4 @@ public class AppendDecisionShortcut extends AbstractAppendNodeShortcut {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n-\n-    @Override\n-    public String getKogitoCombination() {\n-        return \"d\";\n-    }\n-\n-    @Override\n-    public String getKogitoLabel() {\n-        return \"Append Decision\";\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODE0MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158140", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "author": "manstis", "createdAt": "2020-03-16T16:38:21Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "diffHunk": "@@ -117,6 +120,29 @@ public LocationControlImpl(final CanvasCommandFactory<AbstractCanvasHandler> can\n     public void bind(final EditorSession session) {\n         // Keyboard event handling.\n         session.getKeyboardControl().addKeyShortcutCallback(this::onKeyDownEvent);\n+\n+        //KOGITO", "originalCommit": "5bcb39711599403dead440a04c3e8d5465075f1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMTU3Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401231572", "bodyText": "agree - on the core modules there should be no reference to kogito (eg: KogitoKeyPress)", "author": "romartin", "createdAt": "2020-03-31T21:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "e79cd90bf461537f11b65768662d131fcd833f56", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java\nindex 2d6d8606cb..166d86a4fb 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java\n\n@@ -120,29 +117,6 @@ public class LocationControlImpl\n     public void bind(final EditorSession session) {\n         // Keyboard event handling.\n         session.getKeyboardControl().addKeyShortcutCallback(this::onKeyDownEvent);\n-\n-        //KOGITO\n-\n-        //Kogito: Esc\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"esc\", \"Move | Reset / unselect\", () -> getWiresManager().resetContext()));\n-\n-        //Kogito: Normal moves\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"up\", \"Move | Move selection down\", () -> moveNode(0, -NORMAL_DISTANCE), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"down\", \"Move | Move selection down\", () -> moveNode(0, NORMAL_DISTANCE), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"left\", \"Move | Move selection left\", () -> moveNode(-NORMAL_DISTANCE, 0), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"right\", \"Move | Move selection right\", () -> moveNode(NORMAL_DISTANCE, 0), new KeyboardShortcutsApi.Opts(REPEAT)));\n-\n-        //Kogito: Short moves\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"shift+up\", \"Move | Slowly move selection up\", () -> moveNode(0, -SHORT_DISTANCE), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"shift+down\", \"Move | Slowly move selection down\", () -> moveNode(0, SHORT_DISTANCE), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"shift+left\", \"Move | Slowly move selection left\", () -> moveNode(-SHORT_DISTANCE, 0), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"shift+right\", \"Move | Slowly move selection right\", () -> moveNode(SHORT_DISTANCE, 0), new KeyboardShortcutsApi.Opts(REPEAT)));\n-\n-        //Kogito: Large moves\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"ctrl+up\", \"Move | Rapidly move selection up\", () -> moveNode(0, -LARGE_DISTANCE), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"ctrl+down\", \"Move | Rapidly move selection down\", () -> moveNode(0, LARGE_DISTANCE), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"ctrl+left\", \"Move | Rapidly move selection left\", () -> moveNode(-LARGE_DISTANCE, 0), new KeyboardShortcutsApi.Opts(REPEAT)));\n-        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(\"ctrl+right\", \"Move | Rapidly move selection right\", () -> moveNode(LARGE_DISTANCE, 0), new KeyboardShortcutsApi.Opts(REPEAT)));\n     }\n \n     private void onKeyDownEvent(final KeyboardEvent.Key... keys) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTIxNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393159214", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "author": "manstis", "createdAt": "2020-03-16T16:40:00Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito", "originalCommit": "5bcb39711599403dead440a04c3e8d5465075f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e79cd90bf461537f11b65768662d131fcd833f56", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\nindex 6303ea091d..f5cca870ba 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n\n@@ -29,127 +28,17 @@ public interface KeyboardControl<C extends Canvas, S extends ClientSession> exte\n \n     interface KeyShortcutCallback {\n \n-        void onKeyShortcut(final KeyboardEvent.Key... keys);\n-\n-        default void onKeyUp(final KeyboardEvent.Key key) {\n-        }\n-    }\n-\n-    //\n-    //\n-    //Kogito\n-\n-    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n-\n-        KeyboardShortcutsApi.Opts getOpts();\n-\n-        String getKeyCombination();\n-\n-        String getLabel();\n-    }\n-\n-    class KogitoKeyPress implements KogitoKeyShortcutCallback {\n-\n-        private String combination;\n-        private String label;\n-        private Runnable onKeyDown;\n-        private KeyboardShortcutsApi.Opts opts;\n-\n-        public KogitoKeyPress() {\n-        }\n-\n-        public KogitoKeyPress(final String combination, final String label, final Runnable onKeyDown) {\n-            this(combination, label, onKeyDown, KeyboardShortcutsApi.Opts.DEFAULT);\n-        }\n-\n-        public KogitoKeyPress(final String combination, final String label, final Runnable onKeyDown, final KeyboardShortcutsApi.Opts opts) {\n-            this.combination = combination;\n-            this.label = label;\n-            this.onKeyDown = onKeyDown;\n-            this.opts = opts;\n-        }\n-\n-        @Override\n-        public final void onKeyShortcut(final KeyboardEvent.Key... keys) {\n-            onKeyDown();\n-        }\n-\n-        @Override\n-        public final void onKeyUp(final KeyboardEvent.Key key) {\n-            throw new RuntimeException(\"Keyup shouldn't be called on KeyPress events\");\n-        }\n-\n-        @Override\n-        public String getKeyCombination() {\n-            return combination;\n+        default String getKeyCombination() {\n+            return \"\";\n         }\n \n-        @Override\n-        public String getLabel() {\n-            return label;\n+        default String getLabel() {\n+            return \"\";\n         }\n \n-        public void onKeyDown() {\n-            onKeyDown.run();\n-        }\n-\n-        @Override\n-        public KeyboardShortcutsApi.Opts getOpts() {\n-            return opts;\n-        }\n-    }\n-\n-    class KogitoKeyShortcutKeyDownThenUp implements KogitoKeyShortcutCallback {\n-\n-        private final String combination;\n-        private final String label;\n-        private final Runnable onKeyDown;\n-        private final Runnable onKeyUp;\n-        private final KeyboardShortcutsApi.Opts opts;\n-\n-        public KogitoKeyShortcutKeyDownThenUp(final String combination, final String label, final Runnable onKeyDown, final Runnable onKeyUp) {\n-            this(combination, label, onKeyDown, onKeyUp, KeyboardShortcutsApi.Opts.DEFAULT);\n-        }\n-\n-        public KogitoKeyShortcutKeyDownThenUp(final String combination, final String label, final Runnable onKeyDown, final Runnable onKeyUp, final KeyboardShortcutsApi.Opts opts) {\n-            this.combination = combination;\n-            this.label = label;\n-            this.onKeyDown = onKeyDown;\n-            this.onKeyUp = onKeyUp;\n-            this.opts = opts;\n-        }\n-\n-        @Override\n-        public final void onKeyShortcut(final KeyboardEvent.Key... keys) {\n-            onKeyDown();\n-        }\n-\n-        @Override\n-        public final void onKeyUp(final KeyboardEvent.Key key) {\n-            onKeyUp();\n-        }\n-\n-        @Override\n-        public String getKeyCombination() {\n-            return combination;\n-        }\n-\n-        @Override\n-        public String getLabel() {\n-            return label;\n-        }\n-\n-        public void onKeyDown() {\n-            onKeyDown.run();\n-        }\n-\n-        public void onKeyUp() {\n-            onKeyUp.run();\n-        }\n+        void onKeyShortcut(final KeyboardEvent.Key... keys);\n \n-        @Override\n-        public KeyboardShortcutsApi.Opts getOpts() {\n-            return opts;\n+        default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTMyMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393159321", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "author": "manstis", "createdAt": "2020-03-16T16:40:08Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java", "diffHunk": "@@ -40,4 +41,12 @@\n \n     void executeAction(final H canvasHandler,\n                        final String selectedNodeId);\n+\n+    String getKogitoCombination();", "originalCommit": "5bcb39711599403dead440a04c3e8d5465075f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e79cd90bf461537f11b65768662d131fcd833f56", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java\nindex 07afc40615..c86f5c6d1d 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java\n\n@@ -41,12 +40,4 @@ public interface KeyboardShortcut<H extends CanvasHandler> {\n \n     void executeAction(final H canvasHandler,\n                        final String selectedNodeId);\n-\n-    String getKogitoCombination();\n-\n-    String getKogitoLabel();\n-\n-    default KeyboardShortcutsApi.Opts getKogitoOpts() {\n-        return KeyboardShortcutsApi.Opts.DEFAULT;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTYwNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393159606", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "author": "manstis", "createdAt": "2020-03-16T16:40:35Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java", "diffHunk": "@@ -52,9 +65,82 @@\n \n     public KeyEventHandler addKeyShortcutCallback(final KeyboardControl.KeyShortcutCallback shortcutCallback) {\n         this.shortcutCallbacks.add(shortcutCallback);\n+", "originalCommit": "5bcb39711599403dead440a04c3e8d5465075f1a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e79cd90bf461537f11b65768662d131fcd833f56", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java\nindex 0749ce8746..2d773160d9 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java\n\n@@ -66,80 +56,29 @@ public class KeyEventHandler {\n     public KeyEventHandler addKeyShortcutCallback(final KeyboardControl.KeyShortcutCallback shortcutCallback) {\n         this.shortcutCallbacks.add(shortcutCallback);\n \n-        // This means that we're NOT in the Kogito environment\n-        if (BusToolsCli.isRemoteCommunicationEnabled()) {\n-            return this;\n-        }\n-\n-        final Optional<KogitoKeyShortcutCallback> possibleKogitoShortcutCallback = getAssociatedKogitoKeyShortcutCallback(shortcutCallback);\n-        if (!possibleKogitoShortcutCallback.isPresent() || possibleKogitoShortcutCallback.get().getKeyCombination().isEmpty()) {\n-            return this;\n-        }\n-\n-        final KogitoKeyShortcutCallback kogitoShortcutCallback = possibleKogitoShortcutCallback.get();\n-        DomGlobal.console.debug(\"Registering: \" + shortcutCallback.getClass().getCanonicalName() + \" - \" + kogitoShortcutCallback.getLabel());\n-\n-        //Normal\n-        if (shortcutCallback instanceof KogitoKeyShortcutKeyDownThenUp) {\n-            registeredShortcutsIds.add(keyboardShortcutsApi.registerKeyDownThenUp(\n-                    kogitoShortcutCallback.getKeyCombination(),\n-                    kogitoShortcutCallback.getLabel(),\n-                    () -> runIfEnabled(shortcutCallback::onKeyShortcut),\n-                    () -> runIfEnabled(() -> shortcutCallback.onKeyUp(null)),\n-                    kogitoShortcutCallback.getOpts()));\n-        } else if (shortcutCallback instanceof KogitoKeyPress) {\n-            registeredShortcutsIds.add(keyboardShortcutsApi.registerKeyPress(\n-                    kogitoShortcutCallback.getKeyCombination(),\n-                    kogitoShortcutCallback.getLabel(),\n-                    () -> runIfEnabled(shortcutCallback::onKeyShortcut),\n-                    kogitoShortcutCallback.getOpts()));\n-        }\n-\n-        //Session\n-        else if (shortcutCallback instanceof SessionKeyShortcutCallback && ((SessionKeyShortcutCallback) shortcutCallback).getDelegate() instanceof KogitoKeyShortcutKeyDownThenUp) {\n-            registeredShortcutsIds.add(keyboardShortcutsApi.registerKeyDownThenUp(\n-                    kogitoShortcutCallback.getKeyCombination(),\n-                    kogitoShortcutCallback.getLabel(),\n-                    () -> runIfEnabled(shortcutCallback::onKeyShortcut),\n-                    () -> runIfEnabled(() -> shortcutCallback.onKeyUp(null)),\n-                    kogitoShortcutCallback.getOpts()));\n-        } else if (shortcutCallback instanceof SessionKeyShortcutCallback && ((SessionKeyShortcutCallback) shortcutCallback).getDelegate() instanceof KogitoKeyPress) {\n-            registeredShortcutsIds.add(keyboardShortcutsApi.registerKeyPress(\n-                    kogitoShortcutCallback.getKeyCombination(),\n-                    kogitoShortcutCallback.getLabel(),\n-                    () -> runIfEnabled(shortcutCallback::onKeyShortcut),\n-                    kogitoShortcutCallback.getOpts()));\n-        }\n-\n-        //Default\n-        else {\n-            registeredShortcutsIds.add(keyboardShortcutsApi.registerKeyPress(\n-                    kogitoShortcutCallback.getKeyCombination(),\n-                    kogitoShortcutCallback.getLabel(),\n-                    () -> runIfEnabled(shortcutCallback::onKeyShortcut),\n-                    KeyboardShortcutsApi.Opts.DEFAULT));\n+        // This means that we're in the Kogito environment\n+        if (!BusToolsCli.isRemoteCommunicationEnabled()) {\n+            DomGlobal.console.info(\"Registering: \" + shortcutCallback.getClass().getCanonicalName());\n+            if (!shortcutCallback.getKeyCombination().isEmpty()) {\n+                int id = registerShortcut(shortcutCallback.getKeyCombination(), shortcutCallback.getLabel(), shortcutCallback::onKeyShortcut, this);\n+                registeredShortcutsIds.add(id);\n+            }\n         }\n \n         return this;\n     }\n \n-    private void runIfEnabled(final Runnable runnable) {\n-        if (this.enabled) {\n-            runnable.run();\n-        }\n-    }\n-\n-    private Optional<KogitoKeyShortcutCallback> getAssociatedKogitoKeyShortcutCallback(final KeyboardControl.KeyShortcutCallback shortcutCallback) {\n-        if (shortcutCallback instanceof KogitoKeyShortcutCallback) {\n-            return Optional.of((KogitoKeyShortcutCallback) shortcutCallback);\n-        }\n-\n-        if (shortcutCallback instanceof SessionKeyShortcutCallback && ((SessionKeyShortcutCallback) shortcutCallback).getDelegate() instanceof KogitoKeyShortcutCallback) {\n-            return Optional.of((KogitoKeyShortcutCallback) ((SessionKeyShortcutCallback) shortcutCallback).getDelegate());\n-        }\n+    public native int registerShortcut(final String keyCombination, String label, final Runnable action, final Object thisRef) /*-{\n+        return $wnd.envelope.keyBindingService.register(keyCombination, label, function () {\n+            if (thisRef.@org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyEventHandler::enabled) {\n+                action.@java.lang.Runnable::run()();\n+            }\n+        });\n+    }-*/;\n \n-        return Optional.empty();\n-    }\n+    public native int deregisterShortcut(final Integer id) /*-{\n+        return $wnd.envelope.keyBindingService.deregister(id);\n+    }-*/;\n \n     public KeyEventHandler setTimerDelay(final int millis) {\n         this.delay = millis;\n"}}, {"oid": "e79cd90bf461537f11b65768662d131fcd833f56", "url": "https://github.com/kiegroup/kie-wb-common/commit/e79cd90bf461537f11b65768662d131fcd833f56", "message": "Keyboard Shortcuts API 1st version", "committedDate": "2020-03-23T17:33:24Z", "type": "commit"}, {"oid": "bfd87a7a38e5904f4315a71a50e35a6f49fc18d3", "url": "https://github.com/kiegroup/kie-wb-common/commit/bfd87a7a38e5904f4315a71a50e35a6f49fc18d3", "message": "Improve API and add some other shortcuts", "committedDate": "2020-03-23T17:33:24Z", "type": "commit"}, {"oid": "74d89b1a9383ecc1b6bad05f83a5d44a9bffc9ac", "url": "https://github.com/kiegroup/kie-wb-common/commit/74d89b1a9383ecc1b6bad05f83a5d44a9bffc9ac", "message": "Fix letter shortcuts", "committedDate": "2020-03-23T17:33:24Z", "type": "commit"}, {"oid": "ed034f343b654cda0c70e3155a8a5205fb7906f5", "url": "https://github.com/kiegroup/kie-wb-common/commit/ed034f343b654cda0c70e3155a8a5205fb7906f5", "message": "Fix arrow keys and general improvements", "committedDate": "2020-03-23T17:33:24Z", "type": "commit"}, {"oid": "bc78b382988f7ad33f2fa0cf9a994d97d111d983", "url": "https://github.com/kiegroup/kie-wb-common/commit/bc78b382988f7ad33f2fa0cf9a994d97d111d983", "message": "Improved API", "committedDate": "2020-03-23T17:33:24Z", "type": "commit"}, {"oid": "6a36acb3bf6ef7f32464ce3b19bde75314131f20", "url": "https://github.com/kiegroup/kie-wb-common/commit/6a36acb3bf6ef7f32464ce3b19bde75314131f20", "message": "Improved API", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "44daa4c0138b3a63559e7b926c1d1277c120a469", "url": "https://github.com/kiegroup/kie-wb-common/commit/44daa4c0138b3a63559e7b926c1d1277c120a469", "message": "Improved API", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "a5d1d7af1a09d860f40280a7ec2b4be66b0461d5", "url": "https://github.com/kiegroup/kie-wb-common/commit/a5d1d7af1a09d860f40280a7ec2b4be66b0461d5", "message": "Improved API", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "ca08ea9fe1258bc3820fd76c4ecbc5a769e8962a", "url": "https://github.com/kiegroup/kie-wb-common/commit/ca08ea9fe1258bc3820fd76c4ecbc5a769e8962a", "message": "Fix comment", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "b9050773dfbdca2774fa2b872b3c34ce26e5557d", "url": "https://github.com/kiegroup/kie-wb-common/commit/b9050773dfbdca2774fa2b872b3c34ce26e5557d", "message": "Improved API a lot", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "ce92add9bfa7bf05c33d80a9b65ce5339721e391", "url": "https://github.com/kiegroup/kie-wb-common/commit/ce92add9bfa7bf05c33d80a9b65ce5339721e391", "message": "Use new API from kogito-bridge", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "6c0c271adfa7fee9e755d5eda2661db440d8dcf2", "url": "https://github.com/kiegroup/kie-wb-common/commit/6c0c271adfa7fee9e755d5eda2661db440d8dcf2", "message": "Fix lienzo zoom key on mac", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "4e2501e343dfe3b51082693aedb2946e78eb6818", "url": "https://github.com/kiegroup/kie-wb-common/commit/4e2501e343dfe3b51082693aedb2946e78eb6818", "message": "JsInterop layer working", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "8670e994a520766c6b6b8da65cf0378379f3236a", "url": "https://github.com/kiegroup/kie-wb-common/commit/8670e994a520766c6b6b8da65cf0378379f3236a", "message": "Change log level", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "15afd96a70f179e2d625cd0d12c26cdee8185919", "url": "https://github.com/kiegroup/kie-wb-common/commit/15afd96a70f179e2d625cd0d12c26cdee8185919", "message": "Change log level", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "c7a59f7d49afbda201c0a4f1e025726aa098bac4", "url": "https://github.com/kiegroup/kie-wb-common/commit/c7a59f7d49afbda201c0a4f1e025726aa098bac4", "message": "Add categories to shortcuts", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "ccf089827a81f1f9830fe4488f9fe9fdc4bfaf8e", "url": "https://github.com/kiegroup/kie-wb-common/commit/ccf089827a81f1f9830fe4488f9fe9fdc4bfaf8e", "message": "Change shortcut labels", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "c6cc5c34a1ac857cfef21ac768c4e5cb374e1630", "url": "https://github.com/kiegroup/kie-wb-common/commit/c6cc5c34a1ac857cfef21ac768c4e5cb374e1630", "message": "Add JsInterop parameter to DMN kogito app as well", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "073ab6fd6746bc63cfd659360101604d8d284a1f", "url": "https://github.com/kiegroup/kie-wb-common/commit/073ab6fd6746bc63cfd659360101604d8d284a1f", "message": "Fix BC keyboard handling", "committedDate": "2020-03-23T17:33:25Z", "type": "commit"}, {"oid": "a5880c8f2941738b91650f24c165496bcd552836", "url": "https://github.com/kiegroup/kie-wb-common/commit/a5880c8f2941738b91650f24c165496bcd552836", "message": "Create KogitoAbstractCanvasShortcutsControlImpl", "committedDate": "2020-03-23T19:37:51Z", "type": "commit"}, {"oid": "c6296969c91d14487c31505dee3735e51c234d25", "url": "https://github.com/kiegroup/kie-wb-common/commit/c6296969c91d14487c31505dee3735e51c234d25", "message": "Create KogitoKeyEventHandlerImpl", "committedDate": "2020-03-23T22:48:28Z", "type": "commit"}, {"oid": "4b6e7cf3e38f2c63880d2e694ea42832baba76f3", "url": "https://github.com/kiegroup/kie-wb-common/commit/4b6e7cf3e38f2c63880d2e694ea42832baba76f3", "message": "Removing Kogito hard dependency on non-Kogito modules", "committedDate": "2020-03-23T23:43:26Z", "type": "commit"}, {"oid": "4b6e7cf3e38f2c63880d2e694ea42832baba76f3", "url": "https://github.com/kiegroup/kie-wb-common/commit/4b6e7cf3e38f2c63880d2e694ea42832baba76f3", "message": "Removing Kogito hard dependency on non-Kogito modules", "committedDate": "2020-03-23T23:43:26Z", "type": "forcePushed"}, {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d", "url": "https://github.com/kiegroup/kie-wb-common/commit/50736eafd47932ffaa3f7752c28715c0047c5d9d", "message": "Change key combinations to use KeyboardEvent.Key", "committedDate": "2020-03-24T01:59:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzYyNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398163627", "bodyText": "If this can be moved to -stunner-kogito-api I'd be happy.", "author": "manstis", "createdAt": "2020-03-25T20:55:59Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {", "originalCommit": "50736eafd47932ffaa3f7752c28715c0047c5d9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjk2NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398216965", "bodyText": "See comment below.", "author": "tiagobento", "createdAt": "2020-03-25T22:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MTk3Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429041977", "bodyText": "https://issues.redhat.com/browse/KOGITO-2271", "author": "jomarko", "createdAt": "2020-05-22T04:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\nindex 5079081301..5ffda8a606 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n\n@@ -45,6 +45,9 @@ public interface KeyboardControl<C extends Canvas, S extends ClientSession> exte\n \n         KeyboardEvent.Key[] getKeyCombination();\n \n+        /**\n+         * @return The label of this shortcut. Use a `|` character to separate its section from its description. (e.g. \"Moving | Up\")\n+         */\n         String getLabel();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzcyMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398163721", "bodyText": "If this can be moved to -stunner-kogito-client I'd be happy.", "author": "manstis", "createdAt": "2020-03-25T20:56:09Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();\n+    }\n+\n+    class KogitoKeyPress implements KogitoKeyShortcutCallback {", "originalCommit": "50736eafd47932ffaa3f7752c28715c0047c5d9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjk1NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398216954", "bodyText": "See comment below.", "author": "tiagobento", "createdAt": "2020-03-25T22:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzcyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\nindex 5079081301..5ffda8a606 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n\n@@ -45,6 +45,9 @@ public interface KeyboardControl<C extends Canvas, S extends ClientSession> exte\n \n         KeyboardEvent.Key[] getKeyCombination();\n \n+        /**\n+         * @return The label of this shortcut. Use a `|` character to separate its section from its description. (e.g. \"Moving | Up\")\n+         */\n         String getLabel();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mzg1MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398163851", "bodyText": "If this can be moved to -stunner-kogito-client I'd be happy.", "author": "manstis", "createdAt": "2020-03-25T20:56:24Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();\n+    }\n+\n+    class KogitoKeyPress implements KogitoKeyShortcutCallback {\n+\n+        private KeyboardEvent.Key[] combination;\n+        private String label;\n+        private Runnable onKeyDown;\n+        private KeyboardShortcutsApiOpts opts;\n+\n+        public KogitoKeyPress() {\n+        }\n+\n+        public KogitoKeyPress(final KeyboardEvent.Key[] combination, final String label, final Runnable onKeyDown) {\n+            this(combination, label, onKeyDown, KeyboardShortcutsApiOpts.DEFAULT);\n+        }\n+\n+        public KogitoKeyPress(final KeyboardEvent.Key[] combination, final String label, final Runnable onKeyDown, final KeyboardShortcutsApiOpts opts) {\n+            this.combination = combination;\n+            this.label = label;\n+            this.onKeyDown = onKeyDown;\n+            this.opts = opts;\n+        }\n+\n+        @Override\n+        public final void onKeyShortcut(final KeyboardEvent.Key... keys) {\n+            onKeyDown();\n+        }\n+\n+        @Override\n+        public final void onKeyUp(final KeyboardEvent.Key key) {\n+            throw new RuntimeException(\"Keyup shouldn't be called on KeyPress events\");\n+        }\n+\n+        @Override\n+        public KeyboardEvent.Key[] getKeyCombination() {\n+            return combination;\n+        }\n+\n+        @Override\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        public void onKeyDown() {\n+            onKeyDown.run();\n+        }\n+\n+        @Override\n+        public KeyboardShortcutsApiOpts getOpts() {\n+            return opts;\n+        }\n+    }\n+\n+    class KogitoKeyShortcutKeyDownThenUp implements KogitoKeyShortcutCallback {", "originalCommit": "50736eafd47932ffaa3f7752c28715c0047c5d9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNzAwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398217002", "bodyText": "See comment below.", "author": "tiagobento", "createdAt": "2020-03-25T22:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mzg1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\nindex 5079081301..5ffda8a606 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n\n@@ -45,6 +45,9 @@ public interface KeyboardControl<C extends Canvas, S extends ClientSession> exte\n \n         KeyboardEvent.Key[] getKeyCombination();\n \n+        /**\n+         * @return The label of this shortcut. Use a `|` character to separate its section from its description. (e.g. \"Moving | Up\")\n+         */\n         String getLabel();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398164627", "bodyText": "Is this really an alternative or is it the default implementation?\nI suspect annotating it @Alternative could give a runtime CDI/binding issue?", "author": "manstis", "createdAt": "2020-03-25T20:57:50Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "originalCommit": "50736eafd47932ffaa3f7752c28715c0047c5d9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjkwNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398216905", "bodyText": "Yes, exactly. That was my question on #3221 (comment). This one is more a default implementation than an Alternative, but I couldn't figure out a way to do that. Can you point me to somewhere where something like that is done? It'd be really helpful.", "author": "tiagobento", "createdAt": "2020-03-25T22:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNjc2Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398626766", "bodyText": "@manstis ^", "author": "tiagobento", "createdAt": "2020-03-26T14:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyMzIyMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398723222", "bodyText": "@tiagobento OK, then you can simply remove the @Alternative annotation and Java's CDI will discover this class and use it as the default implementation.", "author": "manstis", "createdAt": "2020-03-26T16:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NDg3OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398754878", "bodyText": "@manstis Uau, really? That's nice (and easy \ud83e\udd29). So just to be clear, we have 2 implementations --. Kogito and non-Kogito. If only the Kogito implementation has the @Alternative annotation, then on non-Kogito webapps, there will only be one implementation, which is fine and will work. But on Kogito webapps I have to enable the alternative. This will will make CDI ignore the non-Kogito implementation and inject the enabled-via-alternatives Kogito implementation!?", "author": "tiagobento", "createdAt": "2020-03-26T17:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTI3NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398879275", "bodyText": "Correct.", "author": "manstis", "createdAt": "2020-03-26T20:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5Mzk0OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401093948", "bodyText": "@manstis Hi! So I did a test like you suggested and removed the @Alternative from the non-Kogito implementations. It compiles okay, but on Kogito editors, there's a runtime error saying that there are ambiguous dependency resolutions. Am I missing something?", "author": "tiagobento", "createdAt": "2020-03-31T17:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NTI5Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401575296", "bodyText": "Hi @tiagobento following your comment above; I cloned these PRs again and deleted @Alternative from org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyEventHandlerImpl (as this is the default implementation in Stunner). I see you've enabled the alternative here and here so did not need to make any other local changes.\nI then compiled it all again and launched kie-wb-common-stunner-bpmn-kogito-runtime with mvn clean gwt:run. It worked fine. No errors relating to ambiguous dependencies. I also tested kie-wb-common-dmn-webapp-kogito-runtime and that was OK too.\nPerhaps you was lucky enough to have local/environmental/cache issues?", "author": "manstis", "createdAt": "2020-04-01T12:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "7390044c9ca5c184aeb98fdc4ca5ff03961f60e4", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java\nindex fed50e8ae7..320a1f7a96 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java\n\n@@ -24,7 +24,6 @@ import java.util.Set;\n import javax.annotation.PreDestroy;\n import javax.enterprise.context.Dependent;\n import javax.enterprise.event.Observes;\n-import javax.enterprise.inject.Alternative;\n \n import com.google.gwt.user.client.Timer;\n import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n"}}, {"oid": "8cf6bd1731a806535ea9651de3563726209b08da", "url": "https://github.com/kiegroup/kie-wb-common/commit/8cf6bd1731a806535ea9651de3563726209b08da", "message": "Merge remote-tracking branch 'origin/master' into keyboard-shortcuts-api", "committedDate": "2020-03-31T12:53:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401230469", "bodyText": "missing i18n", "author": "romartin", "createdAt": "2020-03-31T21:37:36Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +67,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public KeyboardEvent.Key[] getKeyCombination() {\n+        return new KeyboardEvent.Key[]{D};\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return \"Append Decision\";", "originalCommit": "50736eafd47932ffaa3f7752c28715c0047c5d9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDY3MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r421654671", "bodyText": "@romartin Can you point me to a class that resolves i18n keys that could be used here?", "author": "tiagobento", "createdAt": "2020-05-07T16:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1Njg2NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r421656864", "bodyText": "Btw this string will only appear on the Kogito editors.", "author": "tiagobento", "createdAt": "2020-05-07T17:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NjIyNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428486224", "bodyText": "One of the ways I recall is a TranslationService, see its usage here:\nhttps://github.com/kiegroup/kie-wb-common/blob/master/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/included/imports/messages/IncludedModelErrorMessageFactory.java", "author": "jomarko", "createdAt": "2020-05-21T07:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7390044c9ca5c184aeb98fdc4ca5ff03961f60e4", "url": "https://github.com/kiegroup/kie-wb-common/commit/7390044c9ca5c184aeb98fdc4ca5ff03961f60e4", "message": "Handle selection of the correct AbstractCanvasShortcutsControlImpl for DMN per environment", "committedDate": "2020-04-02T09:56:20Z", "type": "forcePushed"}, {"oid": "4dd15b7d90ec1db0dcd35eca357efaa4f9d7d09f", "url": "https://github.com/kiegroup/kie-wb-common/commit/4dd15b7d90ec1db0dcd35eca357efaa4f9d7d09f", "message": "Merge remote-tracking branch 'origin/master' into keyboard-shortcuts-api", "committedDate": "2020-04-29T18:12:59Z", "type": "commit"}, {"oid": "4dd15b7d90ec1db0dcd35eca357efaa4f9d7d09f", "url": "https://github.com/kiegroup/kie-wb-common/commit/4dd15b7d90ec1db0dcd35eca357efaa4f9d7d09f", "message": "Merge remote-tracking branch 'origin/master' into keyboard-shortcuts-api", "committedDate": "2020-04-29T18:12:59Z", "type": "forcePushed"}, {"oid": "e147359e224891e6bf9c3c3eb086a7c6b39a3dec", "url": "https://github.com/kiegroup/kie-wb-common/commit/e147359e224891e6bf9c3c3eb086a7c6b39a3dec", "message": "Ignore kogito shortcuts on non-Kogito environemnts", "committedDate": "2020-04-29T21:19:50Z", "type": "commit"}, {"oid": "f61f6a38c9783e00aa5138b0cfa0f2edcf476612", "url": "https://github.com/kiegroup/kie-wb-common/commit/f61f6a38c9783e00aa5138b0cfa0f2edcf476612", "message": "Merge remote-tracking branch 'origin/master' into keyboard-shortcuts-api", "committedDate": "2020-05-05T17:07:24Z", "type": "commit"}, {"oid": "02a95287680037c4b07902821f9cb089f43fb586", "url": "https://github.com/kiegroup/kie-wb-common/commit/02a95287680037c4b07902821f9cb089f43fb586", "message": "Use 'target' from events", "committedDate": "2020-05-05T20:55:19Z", "type": "commit"}, {"oid": "1e389a0960df4c9e995ee51ce68aac5034d4601d", "url": "https://github.com/kiegroup/kie-wb-common/commit/1e389a0960df4c9e995ee51ce68aac5034d4601d", "message": "Merge branch 'master' of https://github.com/kiegroup/kie-wb-common into keyboard-shortcuts-api", "committedDate": "2020-05-12T17:03:04Z", "type": "commit"}, {"oid": "ad37d4c090c90dbb8e6093008bac9c1214447b38", "url": "https://github.com/kiegroup/kie-wb-common/commit/ad37d4c090c90dbb8e6093008bac9c1214447b38", "message": "Add default implemention for non-Kogito", "committedDate": "2020-05-12T21:10:30Z", "type": "commit"}, {"oid": "f51160120c0bab5880d69a7b6118f320c7124750", "url": "https://github.com/kiegroup/kie-wb-common/commit/f51160120c0bab5880d69a7b6118f320c7124750", "message": "Add default implemention for non-Kogito", "committedDate": "2020-05-12T21:10:54Z", "type": "commit"}, {"oid": "36e94d925901fd19c90e8b3c17c55419f5da52f8", "url": "https://github.com/kiegroup/kie-wb-common/commit/36e94d925901fd19c90e8b3c17c55419f5da52f8", "message": "Fix kie-wb-common-dmn-client tests", "committedDate": "2020-05-13T18:03:39Z", "type": "commit"}, {"oid": "0fe8caf985cb9182fe5ee52c6c580ea542aa67a8", "url": "https://github.com/kiegroup/kie-wb-common/commit/0fe8caf985cb9182fe5ee52c6c580ea542aa67a8", "message": "Fix other tests", "committedDate": "2020-05-13T19:31:09Z", "type": "commit"}, {"oid": "2630bf6ec4158d76169017975a3b701b2a01d93c", "url": "https://github.com/kiegroup/kie-wb-common/commit/2630bf6ec4158d76169017975a3b701b2a01d93c", "message": "Removing copy/paste test. Copy/paste is now handled by Kogito Tooling", "committedDate": "2020-05-14T16:20:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4ODA3MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428488070", "bodyText": "Could we please add javadoc as we did for DMNCanvasShortcutsControlProxy?", "author": "jomarko", "createdAt": "2020-05-21T07:21:08Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.client.session;\n+\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.CanvasControl;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyboardControl;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+\n+public interface DMNCanvasShortcutsControl extends CanvasControl<AbstractCanvasHandler>,", "originalCommit": "2630bf6ec4158d76169017975a3b701b2a01d93c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTkwNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428829907", "bodyText": "Sure.", "author": "tiagobento", "createdAt": "2020-05-21T18:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4ODA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "5e4744790258f2273fd0244582ac81a90c393ec8", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java\nindex 8e3e57e5d4..c4b8783067 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java\n\n@@ -17,9 +17,14 @@ package org.kie.workbench.common.dmn.client.session;\n \n import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n import org.kie.workbench.common.stunner.core.client.canvas.controls.CanvasControl;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.AbstractCanvasShortcutsControlImpl;\n import org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyboardControl;\n import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n \n+/**\n+ * Acts as a an indirection for resolving alternatives for {@link AbstractCanvasShortcutsControlImpl}.\n+ * See {@link DMNCanvasShortcutsControlProxy}.\n+ */\n public interface DMNCanvasShortcutsControl extends CanvasControl<AbstractCanvasHandler>,\n                                                    CanvasControl.SessionAware<EditorSession>,\n                                                    KeyboardControl.KeyShortcutCallback {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Mjg3NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428492874", "bodyText": "Could you please explain why this test needs to be removed and how the coverage is ensured?", "author": "jomarko", "createdAt": "2020-05-21T07:33:10Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -238,43 +237,7 @@ public void testBusinessKnowledgeModel() throws Exception {\n                 .ignoreWhitespace()\n                 .areIdentical();\n     }\n-\n-    @Test\n-    public void testCopyAndPaste() throws Exception {\n-        final String source = loadResource(\"business-knowledge-model.xml\");\n-        setContent(source);\n-\n-        expandDecisionNavigatorDock();\n-\n-        final String nodeName = \"BusinessKnowledgeModel-1\";\n-        final String copiedNodeName = \"BusinessKnowledgeModel-2\";\n-        waitOperation()\n-                .withMessage(format(NOT_PRESENT_IN_NAVIGATOR, nodeName))\n-                .until(element(NODE, nodeName))\n-                .click();\n-\n-        final WebElement canvas = waitOperation()\n-                .withMessage(format(NOT_PRESENT_IN_NAVIGATOR, \"canvas\"))\n-                .until(presenceOfElementLocated(xpath(CANVAS)));\n-\n-        final Actions actions = new Actions(driver);\n-        actions.keyDown(Keys.CONTROL).sendKeys(\"c\").keyUp(Keys.CONTROL).perform();\n-        actions.keyDown(canvas, Keys.CONTROL).sendKeys(\"v\").keyUp(Keys.CONTROL).perform();\n-\n-        collapseDecisionNavigatorDock();\n-\n-        final String actual = getContent();\n-        XmlAssert.assertThat(actual)\n-                .withNamespaceContext(NAMESPACES)\n-                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + nodeName + \"'])\")\n-                .isEqualTo(1);\n-\n-        XmlAssert.assertThat(actual)\n-                .withNamespaceContext(NAMESPACES)\n-                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + copiedNodeName + \"'])\")\n-                .isEqualTo(1);\n-    }", "originalCommit": "2630bf6ec4158d76169017975a3b701b2a01d93c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3MzM3Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428673376", "bodyText": "Copy/paste has moved from from the editors, to kogito-tooling. That means that it's not possible to use these shortcuts on this editors in isolation, since they're built targeting Kogito. To ensure coverage, we'll have a manual test case in our release sanity checks for now.", "author": "tiagobento", "createdAt": "2020-05-21T14:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Mjg3NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "12398a0669e2cea6de8beb789494c304191e374b", "url": "https://github.com/kiegroup/kie-wb-common/commit/12398a0669e2cea6de8beb789494c304191e374b", "message": "Merge remote-tracking branch 'origin/master' into keyboard-shortcuts-api", "committedDate": "2020-05-21T19:31:27Z", "type": "commit"}, {"oid": "5e4744790258f2273fd0244582ac81a90c393ec8", "url": "https://github.com/kiegroup/kie-wb-common/commit/5e4744790258f2273fd0244582ac81a90c393ec8", "message": "Adding JavaDocs", "committedDate": "2020-05-21T19:45:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDg3Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429040877", "bodyText": "We shouldn't register kogito specific shortcuts ( those with label & description) via non kogito codebase https://issues.redhat.com/browse/KOGITO-2271", "author": "jomarko", "createdAt": "2020-05-22T04:50:41Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "diffHunk": "@@ -117,18 +127,40 @@ public LocationControlImpl(final CanvasCommandFactory<AbstractCanvasHandler> can\n     public void bind(final EditorSession session) {\n         // Keyboard event handling.\n         session.getKeyboardControl().addKeyShortcutCallback(this::onKeyDownEvent);\n+\n+        //KOGITO\n+\n+        //Kogito: Esc\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ESC}, \"Move | Reset / unselect\", () -> getWiresManager().resetContext()));\n+\n+        //Kogito: Normal moves\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_UP}, \"Move | Move selection down\", () -> moveNode(0, -NORMAL_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_DOWN}, \"Move | Move selection down\", () -> moveNode(0, NORMAL_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_LEFT}, \"Move | Move selection left\", () -> moveNode(-NORMAL_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_RIGHT}, \"Move | Move selection right\", () -> moveNode(NORMAL_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+\n+        //Kogito: Short moves\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_UP}, \"Move | Slowly move selection up\", () -> moveNode(0, -SHORT_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_DOWN}, \"Move | Slowly move selection down\", () -> moveNode(0, SHORT_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_LEFT}, \"Move | Slowly move selection left\", () -> moveNode(-SHORT_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_RIGHT}, \"Move | Slowly move selection right\", () -> moveNode(SHORT_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+\n+        //Kogito: Large moves\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_UP}, \"Move | Rapidly move selection up\", () -> moveNode(0, -LARGE_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_DOWN}, \"Move | Rapidly move selection down\", () -> moveNode(0, LARGE_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_LEFT}, \"Move | Rapidly move selection left\", () -> moveNode(-LARGE_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_RIGHT}, \"Move | Rapidly move selection right\", () -> moveNode(LARGE_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));", "originalCommit": "5e4744790258f2273fd0244582ac81a90c393ec8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MTg4NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429041885", "bodyText": "Same here https://issues.redhat.com/browse/KOGITO-2271", "author": "jomarko", "createdAt": "2020-05-22T04:55:25Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/components/mediators/LienzoCanvasMediators.java", "diffHunk": "@@ -74,6 +87,10 @@ public LienzoCanvasMediators(final KeyEventHandler keyEventHandler,\n     }\n \n     public void init(final Supplier<LienzoCanvas> canvas) {\n+        keyEventHandler.addKeyShortcutCallback(new KogitoKeyShortcutKeyDownThenUp(new Key[]{Key.ALT}, \"Navigate | Hold and drag to Pan\", this::enablePan, this::clear));\n+        keyEventHandler.addKeyShortcutCallback(new KogitoKeyShortcutKeyDownThenUp(new Key[]{Key.CONTROL}, \"Navigate | Hold and scroll to Zoom\", this::enableZoom, this::clear));\n+        keyEventHandler.addKeyShortcutCallback(new KogitoKeyShortcutKeyDownThenUp(new Key[]{Key.CONTROL, Key.ALT}, \"Navigate | Hold to Preview\", this::enablePreview, this::clear));", "originalCommit": "5e4744790258f2273fd0244582ac81a90c393ec8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MzkxNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429043917", "bodyText": "I think mentioned also in kogito-tooling part. I see crucial to document somewhere the needed format of label , which is \"Category of shortcut | Action description\". Even more clear would be split label into two parameters.", "author": "jomarko", "createdAt": "2020-05-22T05:04:46Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();", "originalCommit": "5e4744790258f2273fd0244582ac81a90c393ec8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxNjc0Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r430016747", "bodyText": "Added Javadoc to this method and to the methods on the KeyboardShortcutsApi as well.", "author": "tiagobento", "createdAt": "2020-05-25T16:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MzkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\nindex 5079081301..5ffda8a606 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java\n\n@@ -45,6 +45,9 @@ public interface KeyboardControl<C extends Canvas, S extends ClientSession> exte\n \n         KeyboardEvent.Key[] getKeyCombination();\n \n+        /**\n+         * @return The label of this shortcut. Use a `|` character to separate its section from its description. (e.g. \"Moving | Up\")\n+         */\n         String getLabel();\n     }\n \n"}}, {"oid": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "url": "https://github.com/kiegroup/kie-wb-common/commit/4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "message": "Add Javadoc to getLabel() method on KeyboardControl", "committedDate": "2020-05-25T16:48:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NDA0Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r430274043", "bodyText": "2020", "author": "jomarko", "createdAt": "2020-05-26T09:21:04Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "originalCommit": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2306b0e5112461f03f33cbb725e5bcfe094f8f6", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java\nindex f6d9f4d398..36740b0e54 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "b2306b0e5112461f03f33cbb725e5bcfe094f8f6", "url": "https://github.com/kiegroup/kie-wb-common/commit/b2306b0e5112461f03f33cbb725e5bcfe094f8f6", "message": "Update KeyEventHandlerImpl.java", "committedDate": "2020-05-26T11:48:45Z", "type": "commit"}, {"oid": "d96601cf85f3e48c059c47d6a2bf24ee91360e19", "url": "https://github.com/kiegroup/kie-wb-common/commit/d96601cf85f3e48c059c47d6a2bf24ee91360e19", "message": "Change EditorContextProvider to return an Optional operating system", "committedDate": "2020-05-26T18:08:10Z", "type": "commit"}, {"oid": "5308e439b5d499dbaf1110b55e97ace1cd2df81e", "url": "https://github.com/kiegroup/kie-wb-common/commit/5308e439b5d499dbaf1110b55e97ace1cd2df81e", "message": "Merge remote-tracking branch 'origin/master' into keyboard-shortcuts-api", "committedDate": "2020-05-27T14:40:12Z", "type": "commit"}]}