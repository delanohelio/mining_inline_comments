{"pr_number": 3303, "pr_title": "DROOLS-4993: [DMN Designer] Code Completion - add keywords", "pr_createdAt": "2020-05-14T13:12:42Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3303", "timeline": [{"oid": "efca3f8f9f08be9fe8c0a92efa64e7971e0db90a", "url": "https://github.com/kiegroup/kie-wb-common/commit/efca3f8f9f08be9fe8c0a92efa64e7971e0db90a", "message": "Moving FEEL reserved keyword list to dmn-client", "committedDate": "2020-05-13T14:57:50Z", "type": "commit"}, {"oid": "7e423881ec182a7746cb9dd5e5467d3b4d5efb8b", "url": "https://github.com/kiegroup/kie-wb-common/commit/7e423881ec182a7746cb9dd5e5467d3b4d5efb8b", "message": "Adding reserved keywords as suggestions", "committedDate": "2020-05-13T14:59:03Z", "type": "commit"}, {"oid": "85bcc1d99a3fecad9a077ccef02d7a100c79c7e4", "url": "https://github.com/kiegroup/kie-wb-common/commit/85bcc1d99a3fecad9a077ccef02d7a100c79c7e4", "message": "Highlight FEEL reserved keywords during typing", "committedDate": "2020-05-14T06:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzAyNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425573024", "bodyText": "Does this mean we previously offered in autocompletion bigger snippet, e.g. if then else but now we will offer just single words if, then and else separately?\nOr the row notation is just tricky and no change, but amount of words.", "author": "jomarko", "createdAt": "2020-05-15T05:25:32Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactory.java", "diffHunk": "@@ -180,21 +184,25 @@ public JSONArray getRoot() {\n         push(root, row(\"[0-9]+\", \"feel-numeric\"));\n         push(root, row(\"(?:\\\\\\\"(?:.*?)\\\\\\\")\", \"feel-string\"));\n         push(root, row(\"(?:(?:[a-z ]+\\\\()|(?:\\\\()|(?:\\\\)))\", \"feel-function\"));\n-        push(root, row(\"(?:(\\\\bif\\\\b)|(\\\\bthen\\\\b)|(\\\\belse\\\\b))\", \"feel-keyword\"));\n-        push(root, row(\"(?:(\\\\bfor\\\\b)|(\\\\bin\\\\b)|(\\\\breturn\\\\b))\", \"feel-keyword\"));\n+        push(root, row(\"(?:(\\\\b\" + String.join(\"\\\\b)|(\\\\b\", FEEL_RESERVED_KEYWORDS) + \"\\\\b))\", \"feel-keyword\"));", "originalCommit": "85bcc1d99a3fecad9a077ccef02d7a100c79c7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwODI3Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425608276", "bodyText": "@jomarko the function getRoot is used only to highlight words in the editor.\nFor the first line I removed, the regex is saying a whole word if, OR, a whole word then, OR a whole word else\nI removed these two lines to put the list of reserved keys, in order to highlight them all", "author": "vpellegrino", "createdAt": "2020-05-15T07:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNjcwOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425636708", "bodyText": "ok, thank you", "author": "jomarko", "createdAt": "2020-05-15T08:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3MzAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "01adbfcea72e885e9d32994da74f169852fd0b1f", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactory.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactory.java\nindex 972a79a3fc..0594c2c643 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactory.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactory.java\n\n@@ -200,7 +198,7 @@ public class MonacoPropertiesFactory {\n     }\n \n     private void populateKeywordSuggestions(JSONArray suggestionArray) {\n-        Stream.of(FEEL_RESERVED_KEYWORDS).forEach(reservedKeyword -> push(suggestionArray, getKeywordSuggestion(reservedKeyword)));\n+        FEEL_RESERVED_KEYWORDS.forEach(reservedKeyword -> push(suggestionArray, getKeywordSuggestion(reservedKeyword)));\n     }\n \n     private void populateVariableSuggestions(final MonacoFEELVariableSuggestions variableSuggestions,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NDEzMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425574132", "bodyText": "here it shouldn't be keyword rather than function?", "author": "jomarko", "createdAt": "2020-05-15T05:29:29Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java", "diffHunk": "@@ -221,8 +221,55 @@ public void testGetRules() {\n     public void testGetSuggestions() {\n \n         final JSONArray expectedSuggestions = mock(JSONArray.class);\n-        final List<JSONValue> functions = new ArrayList<>();\n-        final List<List<String>> functionSuggestions = asList(\n+        final List<JSONValue> suggestions = new ArrayList<>();\n+        final List<String> variableSuggestions = buildVariableSuggestions();\n+\n+        when(this.variableSuggestions.getSuggestions()).thenReturn(variableSuggestions);\n+\n+        buildKeywordSuggestions().forEach(suggestion -> {\n+            final JSONValue function = mock(JSONValue.class);\n+            suggestions.add(function);", "originalCommit": "85bcc1d99a3fecad9a077ccef02d7a100c79c7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwODQ1Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425608452", "bodyText": "good catch!", "author": "vpellegrino", "createdAt": "2020-05-15T07:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NDEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "39a677776b2509dbf8b4df03e96e2547d6d1c085", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\nindex 8cc2cb9588..87ddc2532c 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\n\n@@ -227,9 +227,9 @@ public class MonacoPropertiesFactoryTest {\n         when(this.variableSuggestions.getSuggestions()).thenReturn(variableSuggestions);\n \n         buildKeywordSuggestions().forEach(suggestion -> {\n-            final JSONValue function = mock(JSONValue.class);\n-            suggestions.add(function);\n-            doReturn(function).when(factory).getKeywordSuggestion(suggestion);\n+            final JSONValue keyword = mock(JSONValue.class);\n+            suggestions.add(keyword);\n+            doReturn(keyword).when(factory).getKeywordSuggestion(suggestion);\n         });\n \n         buildFunctionSuggestions().forEach(suggestion -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NDQyMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425574422", "bodyText": "also here maybe variable instead of function?", "author": "jomarko", "createdAt": "2020-05-15T05:30:22Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java", "diffHunk": "@@ -221,8 +221,55 @@ public void testGetRules() {\n     public void testGetSuggestions() {\n \n         final JSONArray expectedSuggestions = mock(JSONArray.class);\n-        final List<JSONValue> functions = new ArrayList<>();\n-        final List<List<String>> functionSuggestions = asList(\n+        final List<JSONValue> suggestions = new ArrayList<>();\n+        final List<String> variableSuggestions = buildVariableSuggestions();\n+\n+        when(this.variableSuggestions.getSuggestions()).thenReturn(variableSuggestions);\n+\n+        buildKeywordSuggestions().forEach(suggestion -> {\n+            final JSONValue function = mock(JSONValue.class);\n+            suggestions.add(function);\n+            doReturn(function).when(factory).getKeywordSuggestion(suggestion);\n+        });\n+\n+        buildFunctionSuggestions().forEach(suggestion -> {\n+            final JSONValue function = mock(JSONValue.class);\n+            suggestions.add(function);\n+            doReturn(function).when(factory).getFunctionSuggestion(suggestion.get(0), suggestion.get(1));\n+        });\n+\n+        variableSuggestions.forEach(suggestion -> {\n+            final JSONValue function = mock(JSONValue.class);\n+            suggestions.add(function);", "originalCommit": "85bcc1d99a3fecad9a077ccef02d7a100c79c7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39a677776b2509dbf8b4df03e96e2547d6d1c085", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\nindex 8cc2cb9588..87ddc2532c 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\n\n@@ -227,9 +227,9 @@ public class MonacoPropertiesFactoryTest {\n         when(this.variableSuggestions.getSuggestions()).thenReturn(variableSuggestions);\n \n         buildKeywordSuggestions().forEach(suggestion -> {\n-            final JSONValue function = mock(JSONValue.class);\n-            suggestions.add(function);\n-            doReturn(function).when(factory).getKeywordSuggestion(suggestion);\n+            final JSONValue keyword = mock(JSONValue.class);\n+            suggestions.add(keyword);\n+            doReturn(keyword).when(factory).getKeywordSuggestion(suggestion);\n         });\n \n         buildFunctionSuggestions().forEach(suggestion -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NDY2Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425574663", "bodyText": "is it fine we do not use whole FEEL_RESERVED_KEYWORDS", "author": "jomarko", "createdAt": "2020-05-15T05:31:01Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java", "diffHunk": "@@ -364,40 +411,43 @@ public void testGetSuggestions() {\n                 asList(\"upper case(string)\", \"upper case($1)\"),\n                 asList(\"week of year(date)\", \"week of year($1)\"),\n                 asList(\"years and months duration(from, to)\", \"years and months duration($1, $2)\"));\n-        final List<String> variableSuggestions = asList(\n-                \"Decision-1\",\n-                \"Decision-2\",\n-                \"Decision-3\",\n-                \"Input-Data-1\",\n-                \"Input-Data-2\",\n-                \"Input-Data-3\",\n-                \"Data-Type-1\",\n-                \"Data-Type-2\",\n-                \"Data-Type-3\"\n-        );\n+    }\n \n-        when(this.variableSuggestions.getSuggestions()).thenReturn(variableSuggestions);\n+    private List<String> buildKeywordSuggestions() {\n+        return asList(\n+                \"in\",\n+                \"or\",\n+                \"and\",\n+                \"between\",\n+                \"if\",\n+                \"then\",\n+                \"else\",\n+                \"for\",\n+                \"return\"", "originalCommit": "85bcc1d99a3fecad9a077ccef02d7a100c79c7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMTE3Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425611176", "bodyText": "yes it is only a sample of data. Do you think we need to put all reserved keywords there?", "author": "vpellegrino", "createdAt": "2020-05-15T07:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NDY2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNzY3MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425617670", "bodyText": "ok", "author": "jomarko", "createdAt": "2020-05-15T07:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU3NDY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "5d28afcc710bb3601c245f7ca46ccfadd695d4d0", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\nindex 8cc2cb9588..73c66af8c4 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoPropertiesFactoryTest.java\n\n@@ -415,15 +415,8 @@ public class MonacoPropertiesFactoryTest {\n \n     private List<String> buildKeywordSuggestions() {\n         return asList(\n-                \"in\",\n-                \"or\",\n-                \"and\",\n-                \"between\",\n-                \"if\",\n-                \"then\",\n-                \"else\",\n-                \"for\",\n-                \"return\"\n+                \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n+                \"in\", \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"\n         );\n     }\n \n"}}, {"oid": "01adbfcea72e885e9d32994da74f169852fd0b1f", "url": "https://github.com/kiegroup/kie-wb-common/commit/01adbfcea72e885e9d32994da74f169852fd0b1f", "message": "Making FEEL_RESERVED_KEYWORDS to solve sonar vulnerability", "committedDate": "2020-05-15T08:16:19Z", "type": "commit"}, {"oid": "5d28afcc710bb3601c245f7ca46ccfadd695d4d0", "url": "https://github.com/kiegroup/kie-wb-common/commit/5d28afcc710bb3601c245f7ca46ccfadd695d4d0", "message": "Using whole FEEL_RESERVED_KEYWORDS in test", "committedDate": "2020-05-15T08:21:43Z", "type": "commit"}, {"oid": "39a677776b2509dbf8b4df03e96e2547d6d1c085", "url": "https://github.com/kiegroup/kie-wb-common/commit/39a677776b2509dbf8b4df03e96e2547d6d1c085", "message": "Using proper variable names in test", "committedDate": "2020-05-15T08:23:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDc3Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425734772", "bodyText": "Thank you for solving that issue reported by sonarcloud @vpellegrino . I am just wondering if it is not \"too heavy hammer\" to solve. I am wondering if we can not use just build in java constructs and avoid adding dependency/import form another library.\nDo not know, just asking. Maybe your solution is better. What is your opinon?\n[1]\npublic static final List<String> FEEL_RESERVED_KEYWORDS = Collections.unmodifiableList(Arrays.asList(\n            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n            \"in\", \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"\n    ));", "author": "jomarko", "createdAt": "2020-05-15T11:19:17Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/codecompletion/MonacoFEELInitializer.java", "diffHunk": "@@ -33,9 +34,12 @@\n @ApplicationScoped\n public class MonacoFEELInitializer {\n \n-    private MonacoFEELInitializationStatus initializationStatus = NOT_INITIALIZED;\n-\n+    public static final ImmutableList<String> FEEL_RESERVED_KEYWORDS = ImmutableList.of(\n+            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n+            \"in\", \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"\n+    );", "originalCommit": "39a677776b2509dbf8b4df03e96e2547d6d1c085", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczOTY5Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425739697", "bodyText": "@jomarko thanks for your review and your question.\nImmutableList should be better because it's really immutable. Collections.unmodifiableList is not immutable: rather, it's a view that receivers can't change, but the original source can change.\nMy opinion: Since we don't need to add new dependencies (because Guava is already available) I think we can exploit Guava's benefits", "author": "vpellegrino", "createdAt": "2020-05-15T11:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NDU2MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3303#discussion_r425744560", "bodyText": "ok, understand, thank you, approving.", "author": "jomarko", "createdAt": "2020-05-15T11:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDc3Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6542037e77409aad04da59e3d44b297d4871a6aa", "url": "https://github.com/kiegroup/kie-wb-common/commit/6542037e77409aad04da59e3d44b297d4871a6aa", "message": "Creating constants for repeating keys", "committedDate": "2020-05-17T13:33:03Z", "type": "commit"}]}