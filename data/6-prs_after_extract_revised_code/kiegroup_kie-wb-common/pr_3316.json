{"pr_number": 3316, "pr_title": "DROOLS-3685: [DMN Designer] Boxed expressions - Decision Table - Output clause - Creating Decision Table, sub-columns are auto-created for structured type", "pr_createdAt": "2020-05-29T11:29:44Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3316", "timeline": [{"oid": "2c9fbaafc0b4b1794f521e5f2422a511a6f550a6", "url": "https://github.com/kiegroup/kie-wb-common/commit/2c9fbaafc0b4b1794f521e5f2422a511a6f550a6", "message": "Using clauseRequirement for both input and output", "committedDate": "2020-05-29T10:50:15Z", "type": "commit"}, {"oid": "1bf05a5b4ef7ee129ccb0f2cb440f04c1fa83391", "url": "https://github.com/kiegroup/kie-wb-common/commit/1bf05a5b4ef7ee129ccb0f2cb440f04c1fa83391", "message": "Reordering constructors + static class", "committedDate": "2020-05-29T10:50:16Z", "type": "commit"}, {"oid": "e253ad2846d216bd317c48ae43b396fe6e2cb9b3", "url": "https://github.com/kiegroup/kie-wb-common/commit/e253ad2846d216bd317c48ae43b396fe6e2cb9b3", "message": "Implemented core logic", "committedDate": "2020-05-29T10:50:16Z", "type": "commit"}, {"oid": "e58bf8c04a4a0275ba3a9c5585f798b756995933", "url": "https://github.com/kiegroup/kie-wb-common/commit/e58bf8c04a4a0275ba3a9c5585f798b756995933", "message": "Constants in test", "committedDate": "2020-05-29T10:50:16Z", "type": "commit"}, {"oid": "ea5c9c8c91369c38aa984bbba2570ca4fe3c50b1", "url": "https://github.com/kiegroup/kie-wb-common/commit/ea5c9c8c91369c38aa984bbba2570ca4fe3c50b1", "message": "Refactoring output clauses building", "committedDate": "2020-05-29T10:50:16Z", "type": "commit"}, {"oid": "f5f1b2de9f855271427c21aeaea85907919bcc38", "url": "https://github.com/kiegroup/kie-wb-common/commit/f5f1b2de9f855271427c21aeaea85907919bcc38", "message": "When one subfield is an \"inner\" structure, ANY should be shown for it", "committedDate": "2020-05-31T10:14:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NjY4Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433156682", "bodyText": "I have issue with this method; since it returns an OutputClause that modifies the column collection outside this method; however it adds a LiteralExpression to the DecisionRule inside this method. i.e. IMO the mutations should either both happen inside this method or both outside this method. This is my opinion. If others feel less so; then we can disregard it.", "author": "manstis", "createdAt": "2020-06-01T10:26:31Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java", "diffHunk": "@@ -152,6 +145,77 @@ public void enrich(final Optional<String> nodeUUID,\n         });\n     }\n \n+    void buildOutputClausesByDataType(final HasExpression hasExpression, final DecisionTable dTable, final DecisionRule decisionRule) {\n+        final HasTypeRef hasTypeRef = TypeRefUtils.getTypeRefOfExpression(dTable, hasExpression);\n+        final QName typeRef = !Objects.isNull(hasTypeRef) ? hasTypeRef.getTypeRef() : BuiltInType.UNDEFINED.asQName();\n+        final String name = DecisionTableDefaultValueUtilities.getNewOutputClauseName(dTable);\n+\n+        final List<ClauseRequirement> outputClausesRequirement = generateOutputClauseRequirements(dmnGraphUtils.getDefinitions(), typeRef, name);\n+\n+        if (outputClausesRequirement.isEmpty()) {\n+            dTable.getOutput().add(\n+                    buildOutputClause(dTable, decisionRule, typeRef, name)\n+            );\n+        } else {\n+            outputClausesRequirement\n+                    .stream()\n+                    .sorted(Comparator.comparing(outputClauseRequirement -> outputClauseRequirement.text))\n+                    .map(outputClauseRequirement -> buildOutputClause(dTable, decisionRule, outputClauseRequirement.typeRef, outputClauseRequirement.text))\n+                    .forEach(dTable.getOutput()::add);\n+        }\n+    }\n+\n+    private List<ClauseRequirement> generateOutputClauseRequirements(final Definitions definitions, final QName typeRef, final String name) {\n+        if (typeRefMatchesBuiltInType(typeRef)) {\n+            return Collections.singletonList(new ClauseRequirement(name, typeRef));\n+        }\n+\n+        return definitions.getItemDefinition()\n+                .stream()\n+                .filter(typeRefIsCustom(typeRef))\n+                .findFirst()\n+                .map(this::generateOutputClauseRequirementsForFirstLevel)\n+                .orElse(Collections.emptyList());\n+    }\n+\n+    private List<ClauseRequirement> generateOutputClauseRequirementsForFirstLevel(final ItemDefinition itemDefinition) {\n+        return itemDefinition.getItemComponent()\n+                .stream()\n+                .map(this::definitionToClauseRequirementMapper)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private ClauseRequirement definitionToClauseRequirementMapper(final ItemDefinition itemDefinition) {\n+        final QName typeRef = itemDefinition.getTypeRef();\n+        final String name = itemDefinition.getName().getValue();\n+\n+        if (Objects.isNull(typeRef) || typeRefDoesNotMatchAnyDefinition(typeRef)) {\n+            return new ClauseRequirement(name, ANY.asQName());\n+        }\n+        return new ClauseRequirement(name, typeRef);\n+    }\n+\n+    private boolean typeRefDoesNotMatchAnyDefinition(final QName typeRef) {\n+        return !typeRefMatchesBuiltInType(typeRef) &&\n+                dmnGraphUtils.getDefinitions().getItemDefinition()\n+                        .stream()\n+                        .noneMatch(typeRefIsCustom(typeRef));\n+    }\n+\n+    private OutputClause buildOutputClause(final DecisionTable dtable, final DecisionRule decisionRule, final QName typeRef, final String text) {", "originalCommit": "f5f1b2de9f855271427c21aeaea85907919bcc38", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2NTMzNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433165336", "bodyText": "You are right. Good catch.", "author": "vpellegrino", "createdAt": "2020-06-01T10:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NjY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9ca94527d61c0c4dcafa16fe673d2296c5629b66", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\nindex 63c9fc921f..fa5dd94397 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\n\n@@ -154,14 +154,18 @@ public class DecisionTableEditorDefinitionEnricher implements ExpressionEditorMo\n \n         if (outputClausesRequirement.isEmpty()) {\n             dTable.getOutput().add(\n-                    buildOutputClause(dTable, decisionRule, typeRef, name)\n+                    buildOutputClause(dTable, typeRef, name)\n             );\n+            populateOutputEntries(decisionRule);\n         } else {\n             outputClausesRequirement\n                     .stream()\n                     .sorted(Comparator.comparing(outputClauseRequirement -> outputClauseRequirement.text))\n-                    .map(outputClauseRequirement -> buildOutputClause(dTable, decisionRule, outputClauseRequirement.typeRef, outputClauseRequirement.text))\n-                    .forEach(dTable.getOutput()::add);\n+                    .map(outputClauseRequirement -> buildOutputClause(dTable, outputClauseRequirement.typeRef, outputClauseRequirement.text))\n+                    .forEach(outputClause -> {\n+                        dTable.getOutput().add(outputClause);\n+                        populateOutputEntries(decisionRule);\n+                    });\n         }\n     }\n \n"}}, {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66", "url": "https://github.com/kiegroup/kie-wb-common/commit/9ca94527d61c0c4dcafa16fe673d2296c5629b66", "message": "Manipulating output entries in a separate method", "committedDate": "2020-06-01T10:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5MzA1MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433793051", "bodyText": "This can be simplified:\nprivate boolean typeRefMatchesBuiltInType(final QName typeRef) {\n        return BuiltInTypeUtils.isBuiltInType(typeRef.getLocalPart());\n    }", "author": "jomarko", "createdAt": "2020-06-02T11:02:23Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java", "diffHunk": "@@ -260,6 +325,21 @@ void addInputClauseRequirement(final ItemDefinition itemDefinition,\n         }\n     }\n \n+    private boolean typeRefMatchesBuiltInType(final QName typeRef) {\n+        for (BuiltInType bi : BuiltInType.values()) {\n+            for (String biName : bi.getNames()) {\n+                if (Objects.equals(biName, typeRef.getLocalPart())) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }", "originalCommit": "9ca94527d61c0c4dcafa16fe673d2296c5629b66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fab80ff4e4a7a4398cd190f59020ce12fea08fa2", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\nindex fa5dd94397..d3949a69eb 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\n\n@@ -325,17 +326,6 @@ public class DecisionTableEditorDefinitionEnricher implements ExpressionEditorMo\n         }\n     }\n \n-    private boolean typeRefMatchesBuiltInType(final QName typeRef) {\n-        for (BuiltInType bi : BuiltInType.values()) {\n-            for (String biName : bi.getNames()) {\n-                if (Objects.equals(biName, typeRef.getLocalPart())) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n     private Predicate<ItemDefinition> typeRefIsCustom(final QName typeRef) {\n         return itemDef -> itemDef.getName().getValue().equals(typeRef.getLocalPart());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5Mzk1NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433793954", "bodyText": "Could we please reimplement it using Objects.equals? That will not throw an NPE in case itemDef.GetName().getValue() or typeRef.getLocalPart() are null.\nprivate Predicate<ItemDefinition> typeRefIsCustom(final QName typeRef) {\n        return itemDef -> Objects.equals(itemDef.getName().getValue(), typeRef.getLocalPart());\n    }", "author": "jomarko", "createdAt": "2020-06-02T11:04:20Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java", "diffHunk": "@@ -260,6 +325,21 @@ void addInputClauseRequirement(final ItemDefinition itemDefinition,\n         }\n     }\n \n+    private boolean typeRefMatchesBuiltInType(final QName typeRef) {\n+        for (BuiltInType bi : BuiltInType.values()) {\n+            for (String biName : bi.getNames()) {\n+                if (Objects.equals(biName, typeRef.getLocalPart())) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private Predicate<ItemDefinition> typeRefIsCustom(final QName typeRef) {\n+        return itemDef -> itemDef.getName().getValue().equals(typeRef.getLocalPart());\n+    }", "originalCommit": "9ca94527d61c0c4dcafa16fe673d2296c5629b66", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fab80ff4e4a7a4398cd190f59020ce12fea08fa2", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\nindex fa5dd94397..d3949a69eb 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java\n\n@@ -325,17 +326,6 @@ public class DecisionTableEditorDefinitionEnricher implements ExpressionEditorMo\n         }\n     }\n \n-    private boolean typeRefMatchesBuiltInType(final QName typeRef) {\n-        for (BuiltInType bi : BuiltInType.values()) {\n-            for (String biName : bi.getNames()) {\n-                if (Objects.equals(biName, typeRef.getLocalPart())) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n     private Predicate<ItemDefinition> typeRefIsCustom(final QName typeRef) {\n         return itemDef -> itemDef.getName().getValue().equals(typeRef.getLocalPart());\n     }\n"}}, {"oid": "fab80ff4e4a7a4398cd190f59020ce12fea08fa2", "url": "https://github.com/kiegroup/kie-wb-common/commit/fab80ff4e4a7a4398cd190f59020ce12fea08fa2", "message": "Simplify code, by using existing method", "committedDate": "2020-06-02T16:04:13Z", "type": "commit"}, {"oid": "b9b37152d8f8c195d0384bbfed635bf59fb20cb3", "url": "https://github.com/kiegroup/kie-wb-common/commit/b9b37152d8f8c195d0384bbfed635bf59fb20cb3", "message": "Using Objects.equals to avoid NPE", "committedDate": "2020-06-02T16:06:19Z", "type": "commit"}, {"oid": "3be4cfe45dd86622f0ddfd42b8818bd612138c90", "url": "https://github.com/kiegroup/kie-wb-common/commit/3be4cfe45dd86622f0ddfd42b8818bd612138c90", "message": "Correcting name in case of data type related to an imported model", "committedDate": "2020-06-03T15:26:18Z", "type": "commit"}, {"oid": "a352e4551e6b26bec473eff42a4da04cfa3da817", "url": "https://github.com/kiegroup/kie-wb-common/commit/a352e4551e6b26bec473eff42a4da04cfa3da817", "message": "Fixing test due to code changes", "committedDate": "2020-06-04T07:40:23Z", "type": "commit"}, {"oid": "c7f9f57115c683ca96353d1ef5beb6dd109873c0", "url": "https://github.com/kiegroup/kie-wb-common/commit/c7f9f57115c683ca96353d1ef5beb6dd109873c0", "message": "Fixing case when decision table is included in context", "committedDate": "2020-06-04T11:03:57Z", "type": "commit"}, {"oid": "3e33195e41bb89183ee8ac0e089fca20158082b7", "url": "https://github.com/kiegroup/kie-wb-common/commit/3e33195e41bb89183ee8ac0e089fca20158082b7", "message": "Fixing tests for case when decision table is included in context", "committedDate": "2020-06-04T13:34:48Z", "type": "commit"}, {"oid": "337b8fb7c6fc00580e8d9910e2e855de14249db1", "url": "https://github.com/kiegroup/kie-wb-common/commit/337b8fb7c6fc00580e8d9910e2e855de14249db1", "message": "BKM should be set as parent of its encapsulated logic", "committedDate": "2020-06-04T13:35:48Z", "type": "commit"}, {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8", "url": "https://github.com/kiegroup/kie-wb-common/commit/2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8", "message": "Fixing case when decision table is included in BKM function", "committedDate": "2020-06-04T13:46:26Z", "type": "commit"}]}