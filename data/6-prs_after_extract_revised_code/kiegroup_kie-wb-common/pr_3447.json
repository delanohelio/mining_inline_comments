{"pr_number": 3447, "pr_title": "KOGITO-3364: [DMN Designer] Multiple DRDs support - When a node is deleted in the DRG, undo/redo operations do not work properly", "pr_createdAt": "2020-10-01T21:25:45Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3447", "timeline": [{"oid": "6eb98cda5335d6a94bb10b5670555a527e35623c", "url": "https://github.com/kiegroup/kie-wb-common/commit/6eb98cda5335d6a94bb10b5670555a527e35623c", "message": "SonarCloude issues", "committedDate": "2020-10-05T18:23:16Z", "type": "forcePushed"}, {"oid": "33ad4135185ed667903fe26693dcbad5a83d9ab8", "url": "https://github.com/kiegroup/kie-wb-common/commit/33ad4135185ed667903fe26693dcbad5a83d9ab8", "message": "SonarCloude issues", "committedDate": "2020-10-06T12:54:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4ODA5Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r500288096", "bodyText": "Can we remove these extra lines? :-)", "author": "karreiro", "createdAt": "2020-10-06T13:42:11Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasHandler.java", "diffHunk": "@@ -121,5 +121,7 @@ void superAddChild(final Element parent,\n                        final Element child) {\n         super.addChild(parent, child);\n     }\n+\n+", "originalCommit": "33ad4135185ed667903fe26693dcbad5a83d9ab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NDU5NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r500564595", "bodyText": "Removed! Thank you, @karreiro !", "author": "danielzhe", "createdAt": "2020-10-06T20:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4ODA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4fb49ae9896ecace4d86a3306ba5c2a3cdbfcb48", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasHandler.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasHandler.java\nindex bde3ab0a4d..032e52c138 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasHandler.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasHandler.java\n\n@@ -121,7 +121,4 @@ public class DMNCanvasHandler<D extends Diagram, C extends AbstractCanvas> exten\n                        final Element child) {\n         super.addChild(parent, child);\n     }\n-\n-\n }\n-\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEzOTEwMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503139100", "bodyText": "shouldn't we check that the setConnectionSourceCommand has correct parameters?", "author": "jstastny-cz", "createdAt": "2020-10-12T08:51:58Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNDeleteConnectorCommandTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionSourceNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionTargetNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.content.view.ViewConnector;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNDeleteConnectorCommandTest {\n+\n+    @Mock\n+    private Edge<? extends View, Node> edge;\n+\n+    @Mock\n+    private GraphsProvider graphsProvider;\n+\n+    private Edge<? extends ViewConnector, Node> edgeParameter = mock(Edge.class);\n+\n+    private DMNDeleteConnectorCommand command;\n+\n+    @Before\n+    public void setup() {\n+\n+        when(edgeParameter.getUUID()).thenReturn(\"uuid\");\n+        when(edge.getUUID()).thenReturn(\"uuid\");\n+        command = new DMNDeleteConnectorCommand(edge, graphsProvider);\n+    }\n+\n+    @Test\n+    public void testGetSetConnectionSourceCommand() {\n+\n+        final SetConnectionSourceNodeCommand setConnectionSourceCommand = command.getSetConnectionSourceCommand(edgeParameter);\n+\n+        assertTrue(setConnectionSourceCommand instanceof DMNSetConnectionSourceNodeCommand);", "originalCommit": "55d009d46226aca52a38699e117007f9ba6d12aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2336d43a164ca76440381a01d4da190013fdef4", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNDeleteConnectorCommandTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNDeleteConnectorCommandTest.java\nindex 04b9163edb..8383eb2224 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNDeleteConnectorCommandTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNDeleteConnectorCommandTest.java\n\n@@ -29,6 +29,8 @@ import org.kie.workbench.common.stunner.core.graph.content.view.View;\n import org.kie.workbench.common.stunner.core.graph.content.view.ViewConnector;\n import org.mockito.Mock;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NzEyMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503157122", "bodyText": "sonar reporting critical code smells when having generic wildcards in return types: https://sonarcloud.io/organizations/kiegroup/rules?open=java%3AS1452&rule_key=java%3AS1452", "author": "jstastny-cz", "createdAt": "2020-10-12T09:20:22Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import java.util.Optional;\n+\n+import org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils;\n+import org.kie.workbench.common.stunner.core.command.CommandResult;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.GraphCommandExecutionContext;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionSourceNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.Connection;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.rule.RuleViolation;\n+\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.getDiagramId;\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.isTheCurrentDiagram;\n+\n+public class DMNSetConnectionSourceNodeCommand extends SetConnectionSourceNodeCommand {\n+\n+    private final GraphsProvider graphsProvider;\n+    private final Optional<String> diagramId;\n+\n+    public DMNSetConnectionSourceNodeCommand(final Node<? extends View<?>, Edge> sourceNode,\n+                                             final Edge<? extends View, Node> edge,\n+                                             final Connection connection,\n+                                             final GraphsProvider graphsProvider) {\n+        super(sourceNode, edge, connection);\n+        this.graphsProvider = graphsProvider;\n+        this.diagramId = ContentDefinitionIdUtils.getDiagramId(edge);\n+    }\n+\n+    @Override\n+    public Node<? extends View<?>, Edge> getSourceNode(final GraphCommandExecutionContext context) {", "originalCommit": "55d009d46226aca52a38699e117007f9ba6d12aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU5MzMyNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r505593327", "bodyText": "The problem here is that I'm just returning something from the super class. I think that to fix that we would need to do a big refactor in other classes not involved in this PR.", "author": "danielzhe", "createdAt": "2020-10-15T14:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NzEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwNDg3NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r505604874", "bodyText": "I thought so, just wanted to clarify. IMO this should not block this PR.", "author": "jstastny-cz", "createdAt": "2020-10-15T14:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NzEyMg=="}], "type": "inlineReview", "revised_code": {"commit": "fb3a00de64465c1c70dd6595e95d1f048796899b", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java\nindex 8339873af6..1f9ec7ab81 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java\n\n@@ -97,9 +97,6 @@ public class DMNSetConnectionSourceNodeCommand extends SetConnectionSourceNodeCo\n     }\n \n     Graph getEdgesGraph() {\n-        if (getDiagramId().isPresent()) {\n-            return graphsProvider.getDiagram(getDiagramId().get()).getGraph();\n-        }\n-        throw new IllegalStateException(\"Unable to get the edges graph. The diagramId is not set.\");\n+        return graphsProvider.getDiagram(getDiagramId().get()).getGraph();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1OTEzMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503159131", "bodyText": "here sonar reports bug on not calling isPresent() before get() on optional ... and the reason IMO is, that it's not called on a variable (method returns new optional each time). Please introduce a variable.", "author": "jstastny-cz", "createdAt": "2020-10-12T09:23:37Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import java.util.Optional;\n+\n+import org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils;\n+import org.kie.workbench.common.stunner.core.command.CommandResult;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.GraphCommandExecutionContext;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionSourceNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.Connection;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.rule.RuleViolation;\n+\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.getDiagramId;\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.isTheCurrentDiagram;\n+\n+public class DMNSetConnectionSourceNodeCommand extends SetConnectionSourceNodeCommand {\n+\n+    private final GraphsProvider graphsProvider;\n+    private final Optional<String> diagramId;\n+\n+    public DMNSetConnectionSourceNodeCommand(final Node<? extends View<?>, Edge> sourceNode,\n+                                             final Edge<? extends View, Node> edge,\n+                                             final Connection connection,\n+                                             final GraphsProvider graphsProvider) {\n+        super(sourceNode, edge, connection);\n+        this.graphsProvider = graphsProvider;\n+        this.diagramId = ContentDefinitionIdUtils.getDiagramId(edge);\n+    }\n+\n+    @Override\n+    public Node<? extends View<?>, Edge> getSourceNode(final GraphCommandExecutionContext context) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(getSourceNodeUUID());\n+        } else {\n+            return superGetSourceNode(context);\n+        }\n+    }\n+\n+    Node<? extends View<?>, Edge> superGetSourceNode(final GraphCommandExecutionContext context) {\n+        return super.getSourceNode(context);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public CommandResult<RuleViolation> undo(final GraphCommandExecutionContext context) {\n+        final DMNSetConnectionSourceNodeCommand undoCommand = new DMNSetConnectionSourceNodeCommand((Node<? extends View<?>, Edge>) getNode(context,\n+                                                                                                                                            getLastSourceNodeUUID()),\n+                                                                                                    getEdge(context),\n+                                                                                                    getLastConnection(),\n+                                                                                                    graphsProvider);\n+        return undoCommand.execute(context);\n+    }\n+\n+    public Optional<String> getDiagramId() {\n+        return diagramId;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Node<?, Edge> getNode(final GraphCommandExecutionContext context,\n+                                    final String uuid) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(uuid);\n+        } else {\n+            return superGetNode(context, uuid);\n+        }\n+    }\n+\n+    Node<?, Edge> superGetNode(final GraphCommandExecutionContext context,\n+                               final String uuid) {\n+        return super.getNode(context, uuid);\n+    }\n+\n+    boolean commandBelongsToAnotherGraph() {\n+        return getDiagramId().isPresent()\n+                && !isTheCurrentDiagram(getDiagramId(), graphsProvider);\n+    }\n+\n+    Graph getEdgesGraph() {\n+        if (getDiagramId().isPresent()) {", "originalCommit": "55d009d46226aca52a38699e117007f9ba6d12aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb3a00de64465c1c70dd6595e95d1f048796899b", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java\nindex 8339873af6..1f9ec7ab81 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java\n\n@@ -97,9 +97,6 @@ public class DMNSetConnectionSourceNodeCommand extends SetConnectionSourceNodeCo\n     }\n \n     Graph getEdgesGraph() {\n-        if (getDiagramId().isPresent()) {\n-            return graphsProvider.getDiagram(getDiagramId().get()).getGraph();\n-        }\n-        throw new IllegalStateException(\"Unable to get the edges graph. The diagramId is not set.\");\n+        return graphsProvider.getDiagram(getDiagramId().get()).getGraph();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1OTM5MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503159391", "bodyText": "again, please introduce variable.", "author": "jstastny-cz", "createdAt": "2020-10-12T09:24:00Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionTargetNodeCommand.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import java.util.Optional;\n+\n+import org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils;\n+import org.kie.workbench.common.stunner.core.command.CommandResult;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.GraphCommandExecutionContext;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionTargetNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.Connection;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.rule.RuleViolation;\n+\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.isTheCurrentDiagram;\n+\n+public class DMNSetConnectionTargetNodeCommand extends SetConnectionTargetNodeCommand {\n+\n+    private final GraphsProvider graphsProvider;\n+    private final Optional<String> diagramId;\n+\n+    public DMNSetConnectionTargetNodeCommand(final Node<? extends View<?>, Edge> targetNode,\n+                                             final Edge<? extends View, Node> edge,\n+                                             final Connection connection,\n+                                             final GraphsProvider graphsProvider) {\n+        super(targetNode, edge, connection);\n+        this.graphsProvider = graphsProvider;\n+        this.diagramId = ContentDefinitionIdUtils.getDiagramId(edge);\n+    }\n+\n+    @Override\n+    protected Node<? extends View<?>, Edge> getTargetNode(final GraphCommandExecutionContext context) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(getTargetNodeUUID());\n+        } else {\n+            return superGetTargetNode(context);\n+        }\n+    }\n+\n+    Node<? extends View<?>, Edge> superGetTargetNode(GraphCommandExecutionContext context) {\n+        return super.getTargetNode(context);\n+    }\n+\n+    public Optional<String> getDiagramId() {\n+        return diagramId;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public CommandResult<RuleViolation> undo(final GraphCommandExecutionContext context) {\n+        final DMNSetConnectionTargetNodeCommand undoCommand = new DMNSetConnectionTargetNodeCommand((Node<? extends View<?>, Edge>) getNode(context,\n+                                                                                                                                            getLastTargetNodeUUID()),\n+                                                                                                    getEdge(context),\n+                                                                                                    getLastConnection(),\n+                                                                                                    graphsProvider);\n+        return undoCommand.execute(context);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Node<?, Edge> getNode(final GraphCommandExecutionContext context,\n+                                    final String uuid) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(uuid);\n+        } else {\n+            return superGetNode(context, uuid);\n+        }\n+    }\n+\n+    Node<?, Edge> superGetNode(final GraphCommandExecutionContext context,\n+                               final String uuid) {\n+        return super.getNode(context, uuid);\n+    }\n+\n+    boolean commandBelongsToAnotherGraph() {\n+        return getDiagramId().isPresent()\n+                && !isTheCurrentDiagram(getDiagramId(), graphsProvider);\n+    }\n+\n+    Graph getEdgesGraph() {\n+        if (getDiagramId().isPresent()) {", "originalCommit": "55d009d46226aca52a38699e117007f9ba6d12aa", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb3a00de64465c1c70dd6595e95d1f048796899b", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionTargetNodeCommand.java b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionTargetNodeCommand.java\nindex 820e80eb5e..b6955460f5 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionTargetNodeCommand.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionTargetNodeCommand.java\n\n@@ -96,9 +96,6 @@ public class DMNSetConnectionTargetNodeCommand extends SetConnectionTargetNodeCo\n     }\n \n     Graph getEdgesGraph() {\n-        if (getDiagramId().isPresent()) {\n-            return graphsProvider.getDiagram(getDiagramId().get()).getGraph();\n-        }\n-        throw new IllegalStateException(\"Unable to get the edges graph. The diagramId is not set.\");\n+        return graphsProvider.getDiagram(getDiagramId().get()).getGraph();\n     }\n }\n"}}, {"oid": "fb3a00de64465c1c70dd6595e95d1f048796899b", "url": "https://github.com/kiegroup/kie-wb-common/commit/fb3a00de64465c1c70dd6595e95d1f048796899b", "message": "KOGITO-3364: [DMN Designer] Multiple DRDs support - When a node is deleted in the DRG, undo/redo operations do not work properly", "committedDate": "2020-10-14T19:32:36Z", "type": "commit"}, {"oid": "a899d2b2d64beabf39f9a9aaf1f74817635a31e0", "url": "https://github.com/kiegroup/kie-wb-common/commit/a899d2b2d64beabf39f9a9aaf1f74817635a31e0", "message": "SonarCloude issues", "committedDate": "2020-10-14T19:32:36Z", "type": "commit"}, {"oid": "4fb49ae9896ecace4d86a3306ba5c2a3cdbfcb48", "url": "https://github.com/kiegroup/kie-wb-common/commit/4fb49ae9896ecace4d86a3306ba5c2a3cdbfcb48", "message": "CodeReview", "committedDate": "2020-10-14T19:32:36Z", "type": "commit"}, {"oid": "e2336d43a164ca76440381a01d4da190013fdef4", "url": "https://github.com/kiegroup/kie-wb-common/commit/e2336d43a164ca76440381a01d4da190013fdef4", "message": "Code Review", "committedDate": "2020-10-15T14:08:47Z", "type": "commit"}, {"oid": "e2336d43a164ca76440381a01d4da190013fdef4", "url": "https://github.com/kiegroup/kie-wb-common/commit/e2336d43a164ca76440381a01d4da190013fdef4", "message": "Code Review", "committedDate": "2020-10-15T14:08:47Z", "type": "forcePushed"}]}