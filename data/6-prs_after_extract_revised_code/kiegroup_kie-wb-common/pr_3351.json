{"pr_number": 3351, "pr_title": "KOGITO-2237: Stunner - Domain Model Improvements", "pr_createdAt": "2020-07-07T03:49:29Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3351", "timeline": [{"oid": "d7967024037278ee3c8264d841c20208d205e77d", "url": "https://github.com/kiegroup/kie-wb-common/commit/d7967024037278ee3c8264d841c20208d205e77d", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-07-14T00:07:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwMTQ2MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3351#discussion_r456501461", "bodyText": "You can use org.kie.workbench.common.stunner.core.util.StringUtils#nonEmpty", "author": "hasys", "createdAt": "2020-07-17T15:06:13Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java", "diffHunk": "@@ -85,30 +110,7 @@\n         return null;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    public static <T, R> R merge(final T source,\n-                                 final R target) {\n-        if (null != source) {\n-            final HasProperties hasProperties = (HasProperties) DataBinder.forModel(source).getModel();\n-            if (null != hasProperties) {\n-                final Map<String, PropertyType> propertyTypeMap = hasProperties.getBeanProperties();\n-                if (null != propertyTypeMap && !propertyTypeMap.isEmpty()) {\n-                    final HasProperties targetProperties = (HasProperties) DataBinder.forModel(target).getModel();\n-                    for (final Map.Entry<String, PropertyType> entry : propertyTypeMap.entrySet()) {\n-                        final String pId = entry.getKey();\n-                        try {\n-                            targetProperties.set(pId,\n-                                                 hasProperties.get(pId));\n-                        } catch (NonExistingPropertyException exception) {\n-                            // Just skip it, Go to next property.\n-                            LOGGER.log(Level.INFO,\n-                                       \"BindableAdapterUtils#merge - Skipping merge property [\" + pId + \"]\");\n-                        }\n-                    }\n-                    return (R) target;\n-                }\n-            }\n-        }\n-        return null;\n+    private static boolean isNotEmpty(final String s) {", "originalCommit": "d7967024037278ee3c8264d841c20208d205e77d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d90ebeb4bdce6358cc9205e20b720949472fa0e6", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java\nindex 45b545a36f..ce77f0faa6 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java\n\n@@ -109,8 +111,4 @@ public class ClientBindingUtils {\n         }\n         return null;\n     }\n-\n-    private static boolean isNotEmpty(final String s) {\n-        return null != s && s.trim().length() > 0;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUwODkyNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3351#discussion_r456508927", "bodyText": "cloneValue private method is not used any more and can be deleted.", "author": "hasys", "createdAt": "2020-07-17T15:18:36Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-core-common/src/main/java/org/kie/workbench/common/stunner/core/definition/clone/DeepCloneProcess.java", "diffHunk": "@@ -50,29 +52,24 @@ public DeepCloneProcess(final FactoryManager factoryManager,\n     }\n \n     @Override\n-    public <S, T> T clone(S source,\n-                          T target) {\n-        adapterManager.forDefinition().getProperties(source)\n-                .stream()\n-                .filter(p -> !adapterManager.forProperty().isReadOnly(p))\n-                .map(p -> {\n-                    String id = adapterManager.forProperty().getId(p);\n-                    Optional<?> propertyTarget = adapterManager.forDefinition().getProperties(target)\n-                            .stream()\n-                            .filter(prop -> Objects.equals(adapterManager.forProperty().getId(prop),\n-                                                           id))\n-                            .findFirst();\n-                    return propertyTarget.isPresent() ? new AbstractMap.SimpleEntry(p,\n-                                                                                    propertyTarget.get()) : null;\n-                })\n-                .filter(Objects::nonNull)\n-                .filter(entry -> isAllowedToClone(adapterManager.forProperty().getValue(entry.getKey())))\n-                .forEach(entry -> {\n-                    Object value = adapterManager.forProperty().getValue(entry.getKey());\n-                    adapterManager.forProperty().setValue(entry.getValue(),\n-                                                          cloneValue(value));", "originalCommit": "d7967024037278ee3c8264d841c20208d205e77d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUxMjI1NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3351#discussion_r456512255", "bodyText": "Typo in method name", "author": "hasys", "createdAt": "2020-07-17T15:24:11Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/definition/adapter/binding/DefinitionAdapterBindings.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.definition.adapter.binding;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class DefinitionAdapterBindings {\n+\n+    private Class<?> baseType;\n+    private Class<?> graphFactory;\n+    private String idField;\n+    private String labelsField;\n+    private String titleField;\n+    private String categoryField;\n+    private String descriptionField;\n+    private List<String> propertiesFieldNames;\n+    private List<Boolean> typedPropertyFields;\n+    private PropertyMetaTypes metaTypes;\n+\n+    public DefinitionAdapterBindings() {\n+        this.baseType = Object.class;\n+    }\n+\n+    public PropertyMetaTypes getMetaTypes() {\n+        return metaTypes;\n+    }\n+\n+    public DefinitionAdapterBindings setMetaTypes(PropertyMetaTypes metaTypes) {\n+        this.metaTypes = metaTypes;\n+        return this;\n+    }\n+\n+    public Class<?> getBaseType() {\n+        return baseType;\n+    }\n+\n+    public DefinitionAdapterBindings setBaseType(Class<?> baseType) {\n+        this.baseType = baseType;\n+        return this;\n+    }\n+\n+    public Class<?> getGraphFactory() {\n+        return graphFactory;\n+    }\n+\n+    public DefinitionAdapterBindings setGraphFactory(Class<?> graphFactory) {\n+        this.graphFactory = graphFactory;\n+        return this;\n+    }\n+\n+    public String getIdField() {\n+        return idField;\n+    }\n+\n+    public DefinitionAdapterBindings setIdField(String idField) {\n+        this.idField = idField;\n+        return this;\n+    }\n+\n+    public String getLabelsField() {\n+        return labelsField;\n+    }\n+\n+    public DefinitionAdapterBindings setLabelsField(String labelsField) {\n+        this.labelsField = labelsField;\n+        return this;\n+    }\n+\n+    public String getTitleField() {\n+        return titleField;\n+    }\n+\n+    public DefinitionAdapterBindings setTitleField(String titleField) {\n+        this.titleField = titleField;\n+        return this;\n+    }\n+\n+    public String getCategoryField() {\n+        return categoryField;\n+    }\n+\n+    public DefinitionAdapterBindings setCategoryField(String categoryField) {\n+        this.categoryField = categoryField;\n+        return this;\n+    }\n+\n+    public String getDescriptionField() {\n+        return descriptionField;\n+    }\n+\n+    public DefinitionAdapterBindings setDescriptionField(String descriptionField) {\n+        this.descriptionField = descriptionField;\n+        return this;\n+    }\n+\n+    public List<String> getPropertiesFieldNames() {\n+        return propertiesFieldNames;\n+    }\n+\n+    public DefinitionAdapterBindings setPropertiesFieldNames(List<String> propertiesFieldNames) {\n+        this.propertiesFieldNames = propertiesFieldNames;\n+        return this;\n+    }\n+\n+    public List<Boolean> getTypedPropertyFields() {\n+        return typedPropertyFields;\n+    }\n+\n+    public DefinitionAdapterBindings setTypedPropertyFields(List<Boolean> typedPropertyFields) {\n+        this.typedPropertyFields = typedPropertyFields;\n+        return this;\n+    }\n+\n+    public static class PropertyMetaTypes {\n+\n+        private static final int NAME = 0;\n+        private static final int WIDTH = 1;\n+        private static final int HEIGHT = 2;\n+        private static final int RADIUS = 3;\n+        private static final int ID = 4;\n+\n+        private final int[] metaTypeFieldIndexes = new int[]{-1, -1, -1, -1, -1};\n+\n+        public static PropertyMetaTypes parse(String s) {\n+            String[] values = s.trim().split(\",\");\n+            return new PropertyMetaTypes().parse(values);\n+        }\n+\n+        public static String format(PropertyMetaTypes dpmt) {\n+            return Arrays.stream(dpmt.metaTypeFieldIndexes).mapToObj(Integer::toString).collect(Collectors.joining(\",\"));\n+        }\n+\n+        public String format() {\n+            return format(this);\n+        }\n+\n+        PropertyMetaTypes parse(String[] values) {\n+            metaTypeFieldIndexes[NAME] = Integer.parseInt(values[NAME]);\n+            metaTypeFieldIndexes[WIDTH] = Integer.parseInt(values[WIDTH]);\n+            metaTypeFieldIndexes[HEIGHT] = Integer.parseInt(values[HEIGHT]);\n+            metaTypeFieldIndexes[RADIUS] = Integer.parseInt(values[RADIUS]);\n+            metaTypeFieldIndexes[ID] = Integer.parseInt(values[ID]);\n+            return this;\n+        }\n+\n+        public void setIndex(org.kie.workbench.common.stunner.core.definition.property.PropertyMetaTypes type, int index) {\n+            switch (type) {\n+                case NAME:\n+                    setNameIndex(index);\n+                    break;\n+                case WIDTH:\n+                    setWidthIndex(index);\n+                    break;\n+                case HEIGHT:\n+                    setHeightIndex(index);\n+                    break;\n+                case RADIUS:\n+                    setRadiustIndex(index);\n+                    break;\n+                case ID:\n+                    setIdIndex(index);\n+                    break;\n+            }\n+        }\n+\n+        public int getIndex(org.kie.workbench.common.stunner.core.definition.property.PropertyMetaTypes type) {\n+            switch (type) {\n+                case NAME:\n+                    return getNameIndex();\n+                case WIDTH:\n+                    return getWidthIndex();\n+                case HEIGHT:\n+                    return getHeightIndex();\n+                case RADIUS:\n+                    return getRadiusIndex();\n+                case ID:\n+                    return getIdIndex();\n+            }\n+            return -1;\n+        }\n+\n+        public void setNameIndex(int index) {\n+            metaTypeFieldIndexes[NAME] = index;\n+        }\n+\n+        public void setWidthIndex(int index) {\n+            metaTypeFieldIndexes[WIDTH] = index;\n+        }\n+\n+        public void setHeightIndex(int index) {\n+            metaTypeFieldIndexes[HEIGHT] = index;\n+        }\n+\n+        public void setRadiustIndex(int index) {", "originalCommit": "d7967024037278ee3c8264d841c20208d205e77d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d90ebeb4bdce6358cc9205e20b720949472fa0e6", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/definition/adapter/binding/DefinitionAdapterBindings.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/definition/adapter/binding/DefinitionAdapterBindings.java\nindex 51c8781f94..634243bd91 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/definition/adapter/binding/DefinitionAdapterBindings.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/definition/adapter/binding/DefinitionAdapterBindings.java\n\n@@ -171,7 +171,7 @@ public class DefinitionAdapterBindings {\n                     setHeightIndex(index);\n                     break;\n                 case RADIUS:\n-                    setRadiustIndex(index);\n+                    setRadiusIndex(index);\n                     break;\n                 case ID:\n                     setIdIndex(index);\n"}}, {"oid": "d90ebeb4bdce6358cc9205e20b720949472fa0e6", "url": "https://github.com/kiegroup/kie-wb-common/commit/d90ebeb4bdce6358cc9205e20b720949472fa0e6", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-07-30T00:00:51Z", "type": "forcePushed"}, {"oid": "7dca32c147760e6d5177fdea4d5d24d37515455b", "url": "https://github.com/kiegroup/kie-wb-common/commit/7dca32c147760e6d5177fdea4d5d24d37515455b", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-08-06T22:02:32Z", "type": "forcePushed"}, {"oid": "b3d540887f4452cd939f05acd989e45035df5e95", "url": "https://github.com/kiegroup/kie-wb-common/commit/b3d540887f4452cd939f05acd989e45035df5e95", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-08-08T21:21:47Z", "type": "forcePushed"}, {"oid": "90e904ce904e46e97066cab5c917839ecb0d2015", "url": "https://github.com/kiegroup/kie-wb-common/commit/90e904ce904e46e97066cab5c917839ecb0d2015", "message": "Bug fixing.", "committedDate": "2020-08-11T01:42:36Z", "type": "forcePushed"}, {"oid": "8ed0f3b7cd37e102534aa1d1ccad93aea143d9cd", "url": "https://github.com/kiegroup/kie-wb-common/commit/8ed0f3b7cd37e102534aa1d1ccad93aea143d9cd", "message": "Bug fixing.", "committedDate": "2020-08-14T04:13:53Z", "type": "forcePushed"}, {"oid": "07b831631e451ac5fb3cf61d53dbb36422875a0a", "url": "https://github.com/kiegroup/kie-wb-common/commit/07b831631e451ac5fb3cf61d53dbb36422875a0a", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-08-26T00:51:28Z", "type": "forcePushed"}, {"oid": "8cc07d517248a335f5531859e838bc3d05be121e", "url": "https://github.com/kiegroup/kie-wb-common/commit/8cc07d517248a335f5531859e838bc3d05be121e", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-08-27T22:07:38Z", "type": "commit"}, {"oid": "8cc07d517248a335f5531859e838bc3d05be121e", "url": "https://github.com/kiegroup/kie-wb-common/commit/8cc07d517248a335f5531859e838bc3d05be121e", "message": "KOGITO-2237: Stunner - Domain Model Improvements", "committedDate": "2020-08-27T22:07:38Z", "type": "forcePushed"}]}