{"pr_number": 3317, "pr_title": "JBPM-9176 remove Powermock dependency from designer and stunner framework", "pr_createdAt": "2020-06-01T11:40:55Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3317", "timeline": [{"oid": "a350c4823f1fe0a026154abc714064e98a9f6904", "url": "https://github.com/kiegroup/kie-wb-common/commit/a350c4823f1fe0a026154abc714064e98a9f6904", "message": "DMN build fixed", "committedDate": "2020-06-15T07:59:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM4NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440911385", "bodyText": "Why did you remove the test?", "author": "LuboTerifaj", "createdAt": "2020-06-16T14:49:46Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/test/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramServiceTest.java", "diffHunk": "@@ -310,44 +303,6 @@ public void testContains() {\n                times(1)).getDiagramByPath(path);\n     }\n \n-    @PrepareForTest({Files.class, Paths.class})\n-    @Test\n-    public void testGetAll() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0MDI4OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441640288", "bodyText": "Well, it looks like it tests more about Files and Paths, than about our classes, and it is not so easy to rewrite. Will try it tomorrow. Thank you!", "author": "hasys", "createdAt": "2020-06-17T15:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDY4Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441660683", "bodyText": "Just finished and this Tests removal is reverted. Thank you!", "author": "hasys", "createdAt": "2020-06-17T16:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0ODExNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510848115", "bodyText": "The test hasn't been added back yet.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMTgzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510901837", "bodyText": "Returned with refactoring", "author": "hasys", "createdAt": "2020-10-23T13:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/test/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramServiceTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/test/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramServiceTest.java\nindex f7d68770bc..dc2b818a69 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/test/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramServiceTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/test/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramServiceTest.java\n\n@@ -303,6 +307,39 @@ public abstract class AbstractVFSDiagramServiceTest<M extends Metadata, D extend\n                times(1)).getDiagramByPath(path);\n     }\n \n+    @Test\n+    public void testGetAll() {\n+        ArgumentCaptor<SimpleFileVisitor> visitorArgumentCaptor = ArgumentCaptor.forClass(SimpleFileVisitor.class);\n+\n+        org.uberfire.java.nio.file.Path root = mock(org.uberfire.java.nio.file.Path.class);\n+\n+        D diagram = mockDiagram();\n+        List<Pair<Path, org.uberfire.java.nio.file.Path>> visitedPaths = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            Path diagramPath = mock(Path.class);\n+            org.uberfire.java.nio.file.Path nioDiagramPath = mock(org.uberfire.java.nio.file.Path.class);\n+            doReturn(nioDiagramPath).when(diagramService).convertToNioPath(diagramPath);\n+            doReturn(diagramPath).when(diagramService).convertToBackendPath(nioDiagramPath);\n+            visitedPaths.add(new Pair<>(diagramPath,\n+                                        nioDiagramPath));\n+            when(resourceType.accept(diagramPath)).thenReturn(true);\n+            doReturn(diagram).when(diagramService).getDiagramByPath(diagramPath);\n+        }\n+        BasicFileAttributes attrs = mock(BasicFileAttributes.class);\n+\n+        when(ioService.exists(root)).thenReturn(true);\n+\n+        doNothing().when(diagramService).walkFileTree(eq(root), visitorArgumentCaptor.capture());\n+        diagramService.getDiagramsByPath(root);\n+\n+        visitedPaths.forEach(pair -> {\n+            visitorArgumentCaptor.getValue().visitFile(pair.getK2(),\n+                                                       attrs);\n+            verify(diagramService,\n+                   times(1)).getDiagramByPath(pair.getK1());\n+        });\n+    }\n+\n     protected void testBaseSaveOrUpdateSvg() {\n         final Path path = mockGetDiagramByPathObjects();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzM3MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440917371", "bodyText": "Why did you remove the test? Would it be possible to rewrite the test without using Power Mockito?", "author": "LuboTerifaj", "createdAt": "2020-06-16T14:57:07Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/AssociationPropertyReaderTest.java", "diffHunk": "@@ -103,30 +94,6 @@ public void testGetTargetId() {\n         assertEquals(TARGET_ID, propertyReader.getTargetId());\n     }\n \n-    @Test\n-    public void testGetSourceConnection() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NjQ3OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441566479", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T13:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTE2MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510849160", "bodyText": "It doesn't test just a basic getter within one class. Therefore I wouldn't remove this test.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:29:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzM3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NDcyNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510884726", "bodyText": "It doesn't have name setter, but it is, just go one level inside and you will see it:\n    @Override\n    public Connection getSourceConnection() {\n        Point2D sourcePosition = PropertyReaderUtils.getSourcePosition(definitionResolver,\n                                                                       element.getId(),\n                                                                       getSourceId());\n        return MagnetConnection.Builder\n                .at(sourcePosition.getX(),\n                    sourcePosition.getY())\n                .setAuto(PropertyReaderUtils.isAutoConnectionSource(element));\n    }\nAll logic concentrates in two methods:\nPropertyReaderUtils.getSourcePosition(definitionResolver, element.getId(), getSourceId());\n... and ...\n\nPropertyReaderUtils.isAutoConnectionSource(element);\nBut as you can see both of them are mocked:\nPowerMockito.when(PropertyReaderUtils.getSourcePosition(definitionResolver, ASSOCIATION_ID, SOURCE_ID)).thenReturn(position);\nPowerMockito.when(PropertyReaderUtils.isAutoConnectionSource(association)).thenReturn(arbitraryBoolean);\nSo all logic in the called method is mocked and not executed.\nIf you check remaining code in the called method you will see that tested code is a \"setter\" but with different name - at which calls constructor and set values in it also without performing of any logic. Than value verified by result.getLocation() which is classic Get method without any logic. So we have classic get and set test, but in this case set is renamed to at. And all logic mocked by PowerMock and not executed anyway.\nI don't see much value in such tests especially if it creates significant maintenance cost.\nNext point that my next task (in one or two weeks from now) is start work on marshallers replacement, which makes unit tests even less valuable (but not functional tests which aren't affected by my pr).", "author": "hasys", "createdAt": "2020-10-23T13:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzM3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzUxNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440917514", "bodyText": "Why did you remove the test? Would it be possible to rewrite the test without using Power Mockito?", "author": "LuboTerifaj", "createdAt": "2020-06-16T14:57:17Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/AssociationPropertyReaderTest.java", "diffHunk": "@@ -103,30 +94,6 @@ public void testGetTargetId() {\n         assertEquals(TARGET_ID, propertyReader.getTargetId());\n     }\n \n-    @Test\n-    public void testGetSourceConnection() {\n-        mockStatic(PropertyReaderUtils.class);\n-        PowerMockito.when(PropertyReaderUtils.getSourcePosition(definitionResolver, ASSOCIATION_ID, SOURCE_ID)).thenReturn(position);\n-        boolean arbitraryBoolean = true;\n-        PowerMockito.when(PropertyReaderUtils.isAutoConnectionSource(association)).thenReturn(arbitraryBoolean);\n-\n-        Connection result = propertyReader.getSourceConnection();\n-        assertEquals(X, result.getLocation().getX(), 0);\n-        assertEquals(Y, result.getLocation().getY(), 0);\n-    }\n-\n-    @Test\n-    public void testGetTargetConnection() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NjcyOQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441566729", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T13:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTIyNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510849224", "bodyText": "It doesn't test just a basic getter within one class. Therefore I wouldn't remove this test.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NTA4Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510885086", "bodyText": "Same as https://github.com/kiegroup/kie-wb-common/pull/3317/files#r510884726", "author": "hasys", "createdAt": "2020-10-23T13:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzUxNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzc2NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440917765", "bodyText": "Why did you remove the test? Would it be possible to rewrite the test without using Power Mockito?", "author": "LuboTerifaj", "createdAt": "2020-06-16T14:57:35Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/AssociationPropertyReaderTest.java", "diffHunk": "@@ -144,13 +111,4 @@ public void testGetAssociationByDirection() {\n         association.setAssociationDirection(AssociationDirection.ONE);\n         assertEquals(DirectionalAssociation.class, propertyReader.getAssociationByDirection());\n     }\n-\n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n-    public void testGetControlPoints() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2ODU3MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441568570", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T14:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTU3NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510849574", "bodyText": "It doesn't test just a basic getter within one class. Therefore I wouldn't remove this test.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NzIyNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510887226", "bodyText": "Even more obvious than https://github.com/kiegroup/kie-wb-common/pull/3317/files#r510884726 it just called mocked getter:\n    // Test (pay attention to PowerMockito.when):\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetControlPoints() {\n        List<Point2D> controlPoints = mock(List.class);\n        mockStatic(PropertyReaderUtils.class);\n        PowerMockito.when(PropertyReaderUtils.getControlPoints(definitionResolver, ASSOCIATION_ID)).thenReturn(controlPoints);\n        assertEquals(controlPoints, propertyReader.getControlPoints());\n    }\n\n   // Checked method:\n    @Override\n    public List<Point2D> getControlPoints() {\n        return PropertyReaderUtils.getControlPoints(definitionResolver,\n                                                    element.getId());\n    }", "author": "hasys", "createdAt": "2020-10-23T13:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxNzc2NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDEyOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440940128", "bodyText": "Why did you remove the test? Would it be possible to rewrite the test without using Power Mockito?", "author": "LuboTerifaj", "createdAt": "2020-06-16T15:25:24Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/test/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/AssociationPropertyReaderTest.java", "diffHunk": "@@ -103,30 +90,6 @@ public void testGetTargetId() {\n         assertEquals(TARGET_ID, propertyReader.getTargetId());\n     }\n \n-    @Test\n-    public void testGetSourceConnection() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTM1Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441569356", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T14:02:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTc3MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510849770", "bodyText": "It doesn't test just a basic getter within one class. Therefore I wouldn't remove this test.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:30:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5MjY2NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510892665", "bodyText": "See https://github.com/kiegroup/kie-wb-common/pull/3317/files#r510887226", "author": "hasys", "createdAt": "2020-10-23T13:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDEyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDIzNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440940234", "bodyText": "Why did you remove the test? Would it be possible to rewrite the test without using Power Mockito?", "author": "LuboTerifaj", "createdAt": "2020-06-16T15:25:32Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/test/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/AssociationPropertyReaderTest.java", "diffHunk": "@@ -103,30 +90,6 @@ public void testGetTargetId() {\n         assertEquals(TARGET_ID, propertyReader.getTargetId());\n     }\n \n-    @Test\n-    public void testGetSourceConnection() {\n-        mockStatic(PropertyReaderUtils.class);\n-        PowerMockito.when(PropertyReaderUtils.getSourcePosition(definitionResolver, ASSOCIATION_ID, SOURCE_ID)).thenReturn(position);\n-        boolean arbitraryBoolean = true;\n-        PowerMockito.when(PropertyReaderUtils.isAutoConnectionSource(association)).thenReturn(arbitraryBoolean);\n-\n-        Connection result = propertyReader.getSourceConnection();\n-        assertEquals(X, result.getLocation().getX(), 0);\n-        assertEquals(Y, result.getLocation().getY(), 0);\n-    }\n-\n-    @Test\n-    public void testGetTargetConnection() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTc1OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441569758", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T14:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTgzNA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510849834", "bodyText": "It doesn't test just a basic getter within one class. Therefore I wouldn't remove this test.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:30:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5Mjc2Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510892767", "bodyText": "Same as https://github.com/kiegroup/kie-wb-common/pull/3317/files#r510884726", "author": "hasys", "createdAt": "2020-10-23T13:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDIzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDQwNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440940405", "bodyText": "Why did you remove the test? Would it be possible to rewrite the test without using Power Mockito?", "author": "LuboTerifaj", "createdAt": "2020-06-16T15:25:44Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/test/java/org/kie/workbench/common/stunner/bpmn/client/marshall/converters/tostunner/properties/AssociationPropertyReaderTest.java", "diffHunk": "@@ -144,13 +107,4 @@ public void testGetAssociationByDirection() {\n         association.setAssociationDirection(AssociationDirection.ONE);\n         assertEquals(DirectionalAssociation.class, propertyReader.getAssociationByDirection());\n     }\n-\n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n-    public void testGetControlPoints() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTUyNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441569527", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T14:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTkyMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510849922", "bodyText": "It doesn't test just a basic getter within one class. Therefore I wouldn't remove this test.", "author": "LuboTerifaj", "createdAt": "2020-10-23T12:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5MjkxNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r510892916", "bodyText": "Same as https://github.com/kiegroup/kie-wb-common/pull/3317/files#r510884726", "author": "hasys", "createdAt": "2020-10-23T13:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDQwNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTMzMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440945333", "bodyText": "Why did you remove the test?", "author": "LuboTerifaj", "createdAt": "2020-06-16T15:32:26Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java", "diffHunk": "@@ -68,18 +66,4 @@ public void test() {\n         assertEquals(DEFINITION_TITLE,\n                      title);\n     }\n-\n-    @Test\n-    public void testGetProperty() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MDkwMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441580900", "bodyText": "I reverted this test removal, great catch, thank you!", "author": "hasys", "createdAt": "2020-06-17T14:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java\nindex 530b469a45..010276a1a5 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java\n\n@@ -66,4 +71,11 @@ public class ClientBindableDefinitionAdapterTest extends AbstractClientBindableA\n         assertEquals(DEFINITION_TITLE,\n                      title);\n     }\n+\n+    @Test\n+    public void testGetNameField() {\n+        Optional<?> name = clientBindableDefinitionAdapter.getNameField(model);\n+\n+        assertEquals(name.get(), PROPERTY_NAME);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTQyNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440945427", "bodyText": "Why did you remove the test?", "author": "LuboTerifaj", "createdAt": "2020-06-16T15:32:34Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java", "diffHunk": "@@ -68,18 +66,4 @@ public void test() {\n         assertEquals(DEFINITION_TITLE,\n                      title);\n     }\n-\n-    @Test\n-    public void testGetProperty() {\n-        Optional<?> name = clientBindableDefinitionAdapter.getProperty(model, PROPERTY_NAME);\n-\n-        assertEquals(name.get(), value);\n-    }\n-\n-    @Test\n-    public void testGetNameField() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MTI5Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441571292", "bodyText": "It was testing getter without any logic, I don't think we need to write tests like this in general. But to rewrite this one we need to do some addition code manipulation which will increase risks of regression so I don't think rewriting this test worth it.", "author": "hasys", "createdAt": "2020-06-17T14:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java\nindex 530b469a45..010276a1a5 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapterTest.java\n\n@@ -66,4 +71,11 @@ public class ClientBindableDefinitionAdapterTest extends AbstractClientBindableA\n         assertEquals(DEFINITION_TITLE,\n                      title);\n     }\n+\n+    @Test\n+    public void testGetNameField() {\n+        Optional<?> name = clientBindableDefinitionAdapter.getNameField(model);\n+\n+        assertEquals(name.get(), PROPERTY_NAME);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTcwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r440945701", "bodyText": "Why did you remove the test?", "author": "LuboTerifaj", "createdAt": "2020-06-16T15:32:57Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindablePropertySetAdapterTest.java", "diffHunk": "@@ -49,11 +47,4 @@ public void testFunctionality() {\n         assertEquals(PROPERTY_SET_NAME,\n                      description);\n     }\n-\n-    @Test\n-    public void testGetProperty() {", "originalCommit": "a350c4823f1fe0a026154abc714064e98a9f6904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MDc3Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r441580776", "bodyText": "I reverted this test removal, great catch, thank you!", "author": "hasys", "createdAt": "2020-06-17T14:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindablePropertySetAdapterTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindablePropertySetAdapterTest.java\nindex 79f79e6a4c..2e9aeed4ca 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindablePropertySetAdapterTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/test/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindablePropertySetAdapterTest.java\n\n@@ -47,4 +52,11 @@ public class ClientBindablePropertySetAdapterTest extends AbstractClientBindable\n         assertEquals(PROPERTY_SET_NAME,\n                      description);\n     }\n+\n+    @Test\n+    public void testGetProperty() {\n+        Optional<?> name = clientBindablePropertySetAdapter.getProperty(model, PROPERTY_NAME);\n+\n+        assertEquals(name.get(), value);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1OTk1Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442559957", "bodyText": "it can be package protected, so no need for the protected access modifier, this way it results more restrictive (less visible), and we usually have tests on the same package, so the method is already visible for tests.", "author": "romartin", "createdAt": "2020-06-18T23:50:26Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java", "diffHunk": "@@ -310,12 +306,24 @@ public FileVisitResult visitFile(final org.uberfire.java.nio.file.Path _file,\n         }\n     }\n \n+    protected void walkFileTree(final org.uberfire.java.nio.file.Path root, SimpleFileVisitor<org.uberfire.java.nio.file.Path> fileVisitor) {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxOTc0MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444019741", "bodyText": "With package private, test fails with:\n[ERROR] testGetAll(org.kie.workbench.common.stunner.project.backend.service.ProjectDiagramServiceControllerTest)  Time elapsed: 0.021 s  <<< ERROR!\norg.mockito.exceptions.misusing.InvalidUseOfMatchersException: \n\nMisplaced argument matcher detected here:\n\n-> at org.kie.workbench.common.stunner.core.backend.service.AbstractVFSDiagramServiceTest.testGetAll(AbstractVFSDiagramServiceTest.java:332)\n-> at org.kie.workbench.common.stunner.core.backend.service.AbstractVFSDiagramServiceTest.testGetAll(AbstractVFSDiagramServiceTest.java:332)\n\nYou cannot use argument matchers outside of verification or stubbing.\nExamples of correct usage of argument matchers:\n    when(mock.get(anyInt())).thenReturn(null);\n    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());\n    verify(mock).someMethod(contains(\"foo\"))\n\nAlso, this error might show up because you use argument matchers with methods that cannot be mocked.\nFollowing methods *cannot* be stubbed/verified: final/private/equals()/hashCode().\nMocking methods declared on non-public parent classes is not supported.", "author": "hasys", "createdAt": "2020-06-23T07:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1OTk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMjUzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r448932537", "bodyText": "oops ok", "author": "romartin", "createdAt": "2020-07-02T11:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1OTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\nindex 5eb1393bde..765b59728a 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\n\n@@ -306,24 +320,12 @@ public abstract class AbstractVFSDiagramService<M extends Metadata, D extends Di\n         }\n     }\n \n-    protected void walkFileTree(final org.uberfire.java.nio.file.Path root, SimpleFileVisitor<org.uberfire.java.nio.file.Path> fileVisitor) {\n-        org.uberfire.java.nio.file.Files.walkFileTree(checkNotNull(\"root\", root), fileVisitor);\n-    }\n-\n-    protected org.uberfire.backend.vfs.Path convertToBackendPath(final org.uberfire.java.nio.file.Path path) {\n-        return org.uberfire.backend.server.util.Paths.convert(path);\n-    }\n-\n-    protected org.uberfire.java.nio.file.Path convertToNioPath(final org.uberfire.backend.vfs.Path path) {\n-        return org.uberfire.backend.server.util.Paths.convert(path);\n-    }\n-\n     protected abstract Metadata buildMetadataInstance(final org.uberfire.backend.vfs.Path path,\n                                                       final String defSetId,\n                                                       final String title);\n \n     protected InputStream loadPath(final org.uberfire.backend.vfs.Path _path) {\n-        org.uberfire.java.nio.file.Path path = convertToNioPath(_path);\n+        org.uberfire.java.nio.file.Path path = Paths.convert(_path);\n         final byte[] bytes = getIoService().readAllBytes(path);\n         return new ByteArrayInputStream(bytes);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1OTk5NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442559995", "bodyText": "can be package protected", "author": "romartin", "createdAt": "2020-06-18T23:50:36Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java", "diffHunk": "@@ -310,12 +306,24 @@ public FileVisitResult visitFile(final org.uberfire.java.nio.file.Path _file,\n         }\n     }\n \n+    protected void walkFileTree(final org.uberfire.java.nio.file.Path root, SimpleFileVisitor<org.uberfire.java.nio.file.Path> fileVisitor) {\n+        org.uberfire.java.nio.file.Files.walkFileTree(checkNotNull(\"root\", root), fileVisitor);\n+    }\n+\n+    protected org.uberfire.backend.vfs.Path convertToBackendPath(final org.uberfire.java.nio.file.Path path) {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMjU4OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444022588", "bodyText": "With package private there is a failing test:\n[ERROR] testGetAll(org.kie.workbench.common.stunner.project.backend.service.ProjectDiagramServiceControllerTest)  Time elapsed: 0.025 s  <<< ERROR!\norg.mockito.exceptions.misusing.UnfinishedStubbingException: \n\nUnfinished stubbing detected here:\n-> at org.kie.workbench.common.stunner.core.backend.service.AbstractVFSDiagramServiceTest.testGetAll(AbstractVFSDiagramServiceTest.java:322)\n\nE.g. thenReturn() may be missing.\nExamples of correct stubbing:\n    when(mock.isOk()).thenReturn(true);\n    when(mock.isOk()).thenThrow(exception);\n    doThrow(exception).when(mock).someVoidMethod();\nHints:\n 1. missing thenReturn()\n 2. you are trying to stub a final method, you naughty developer!\n 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed", "author": "hasys", "createdAt": "2020-06-23T07:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1OTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\nindex 5eb1393bde..765b59728a 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\n\n@@ -306,24 +320,12 @@ public abstract class AbstractVFSDiagramService<M extends Metadata, D extends Di\n         }\n     }\n \n-    protected void walkFileTree(final org.uberfire.java.nio.file.Path root, SimpleFileVisitor<org.uberfire.java.nio.file.Path> fileVisitor) {\n-        org.uberfire.java.nio.file.Files.walkFileTree(checkNotNull(\"root\", root), fileVisitor);\n-    }\n-\n-    protected org.uberfire.backend.vfs.Path convertToBackendPath(final org.uberfire.java.nio.file.Path path) {\n-        return org.uberfire.backend.server.util.Paths.convert(path);\n-    }\n-\n-    protected org.uberfire.java.nio.file.Path convertToNioPath(final org.uberfire.backend.vfs.Path path) {\n-        return org.uberfire.backend.server.util.Paths.convert(path);\n-    }\n-\n     protected abstract Metadata buildMetadataInstance(final org.uberfire.backend.vfs.Path path,\n                                                       final String defSetId,\n                                                       final String title);\n \n     protected InputStream loadPath(final org.uberfire.backend.vfs.Path _path) {\n-        org.uberfire.java.nio.file.Path path = convertToNioPath(_path);\n+        org.uberfire.java.nio.file.Path path = Paths.convert(_path);\n         final byte[] bytes = getIoService().readAllBytes(path);\n         return new ByteArrayInputStream(bytes);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MDAxOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442560018", "bodyText": "can be package protected", "author": "romartin", "createdAt": "2020-06-18T23:50:42Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java", "diffHunk": "@@ -310,12 +306,24 @@ public FileVisitResult visitFile(final org.uberfire.java.nio.file.Path _file,\n         }\n     }\n \n+    protected void walkFileTree(final org.uberfire.java.nio.file.Path root, SimpleFileVisitor<org.uberfire.java.nio.file.Path> fileVisitor) {\n+        org.uberfire.java.nio.file.Files.walkFileTree(checkNotNull(\"root\", root), fileVisitor);\n+    }\n+\n+    protected org.uberfire.backend.vfs.Path convertToBackendPath(final org.uberfire.java.nio.file.Path path) {\n+        return org.uberfire.backend.server.util.Paths.convert(path);\n+    }\n+\n+    protected org.uberfire.java.nio.file.Path convertToNioPath(final org.uberfire.backend.vfs.Path path) {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMzQ1Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444023457", "bodyText": "With package private there is a failing test:\n[ERROR] testGetAll(org.kie.workbench.common.stunner.project.backend.service.ProjectDiagramServiceControllerTest)  Time elapsed: 0.013 s  <<< ERROR!\norg.mockito.exceptions.misusing.UnfinishedStubbingException: \n\nUnfinished stubbing detected here:\n-> at org.kie.workbench.common.stunner.core.backend.service.AbstractVFSDiagramServiceTest.testGetAll(AbstractVFSDiagramServiceTest.java:321)\n\nE.g. thenReturn() may be missing.\nExamples of correct stubbing:\n    when(mock.isOk()).thenReturn(true);\n    when(mock.isOk()).thenThrow(exception);\n    doThrow(exception).when(mock).someVoidMethod();\nHints:\n 1. missing thenReturn()\n 2. you are trying to stub a final method, you naughty developer!\n 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed", "author": "hasys", "createdAt": "2020-06-23T07:39:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MDAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\nindex 5eb1393bde..765b59728a 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-backend-common/src/main/java/org/kie/workbench/common/stunner/core/backend/service/AbstractVFSDiagramService.java\n\n@@ -306,24 +320,12 @@ public abstract class AbstractVFSDiagramService<M extends Metadata, D extends Di\n         }\n     }\n \n-    protected void walkFileTree(final org.uberfire.java.nio.file.Path root, SimpleFileVisitor<org.uberfire.java.nio.file.Path> fileVisitor) {\n-        org.uberfire.java.nio.file.Files.walkFileTree(checkNotNull(\"root\", root), fileVisitor);\n-    }\n-\n-    protected org.uberfire.backend.vfs.Path convertToBackendPath(final org.uberfire.java.nio.file.Path path) {\n-        return org.uberfire.backend.server.util.Paths.convert(path);\n-    }\n-\n-    protected org.uberfire.java.nio.file.Path convertToNioPath(final org.uberfire.backend.vfs.Path path) {\n-        return org.uberfire.backend.server.util.Paths.convert(path);\n-    }\n-\n     protected abstract Metadata buildMetadataInstance(final org.uberfire.backend.vfs.Path path,\n                                                       final String defSetId,\n                                                       final String title);\n \n     protected InputStream loadPath(final org.uberfire.backend.vfs.Path _path) {\n-        org.uberfire.java.nio.file.Path path = convertToNioPath(_path);\n+        org.uberfire.java.nio.file.Path path = Paths.convert(_path);\n         final byte[] bytes = getIoService().readAllBytes(path);\n         return new ByteArrayInputStream(bytes);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MDExMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442560111", "bodyText": "can be package protected", "author": "romartin", "createdAt": "2020-06-18T23:51:03Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapter.java", "diffHunk": "@@ -109,8 +109,8 @@ protected String getStringFieldValue(final Object pojo,\n                                fieldName);\n     }\n \n-    private <T, R> R getProxiedValue(final T pojo,\n-                                     final String fieldName) {\n+    protected <T, R> R getProxiedValue(final T pojo,", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNTM4OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444025389", "bodyText": "Fixed, thank you!", "author": "hasys", "createdAt": "2020-06-23T07:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MDExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapter.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapter.java\nindex 4df349d604..8e5515bac5 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapter.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableDefinitionAdapter.java\n\n@@ -109,7 +109,7 @@ class ClientBindableDefinitionAdapter\n                                fieldName);\n     }\n \n-    protected <T, R> R getProxiedValue(final T pojo,\n+    <T, R> R getProxiedValue(final T pojo,\n                                        final String fieldName) {\n         return ClientBindingUtils.getProxiedValue(pojo,\n                                                   fieldName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MjM2Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442562363", "bodyText": "IMO taking the approach of having an internal \"utils\" class here makes everythink complex.\nI would keep the class as it is, it just provides a few static methods which rely on Errai data binding, so it's clear this class will never work properly on the testing scope.\nThis way, I would refactor instead the tests that are using this class, as for example you did it on the AbstractVFSDiagramServiceTest class, so by declaring package protected methods which can be mocked, if necessary, to some other result rather than calling the \"real\" ClientBindingUtils insteance.\nWDYT?", "author": "romartin", "createdAt": "2020-06-18T23:59:47Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java", "diffHunk": "@@ -31,19 +31,18 @@\n \n public class ClientBindingUtils {\n \n-    private static Logger LOGGER = Logger.getLogger(ClientBindingUtils.class.getName());\n+    private static final Logger LOGGER = Logger.getLogger(ClientBindingUtils.class.getName());\n+    private static ClientBindingUtilsImpl utils = new ClientBindingUtilsImpl();", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MzA1OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444053059", "bodyText": "The difference between AbstractVFSDiagramService and ClientBindingUtils is ClientBindingUtils is static class without instances, so we can't mock one of it's methods without PowerMock, but AbstractVFSDiagramService isn't a static class and we have instance of it, so we can mock one of it's methods.\nBut I think we can create DataBinder wrapper which by default will transfer calls to Errai or can be mocked if needed. Will it be better? WDYT?", "author": "hasys", "createdAt": "2020-06-23T08:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MjM2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bc3491630fcc4a3abf4a2bc0751aba90574bd3c4", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java\nindex 4f6eca370d..0de1519372 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtils.java\n\n@@ -34,7 +34,8 @@ public class ClientBindingUtils {\n     private static final Logger LOGGER = Logger.getLogger(ClientBindingUtils.class.getName());\n     private static ClientBindingUtilsImpl utils = new ClientBindingUtilsImpl();\n \n-    private ClientBindingUtils() { }\n+    private ClientBindingUtils() {\n+    }\n \n     @SuppressWarnings(\"unchecked\")\n     public static <T, R> R getProxiedValue(final T pojo,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MjY4OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442562689", "bodyText": "No need for this if not changing ClientBindingUtils", "author": "romartin", "createdAt": "2020-06-19T00:00:59Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtilsImpl.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.definition.adapter.binding;\n+\n+import org.jboss.errai.databinding.client.HasProperties;\n+import org.jboss.errai.databinding.client.api.DataBinder;\n+\n+// Utilize class for making possible test without static mocking\n+public class ClientBindingUtilsImpl {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MzQ2OA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444053468", "bodyText": "Will it be better if it will be replaced by DataBinder wrapper?", "author": "hasys", "createdAt": "2020-06-23T08:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MjY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtilsImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableAdapterFunctions.java\nsimilarity index 54%\nrename from kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtilsImpl.java\nrename to kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableAdapterFunctions.java\nindex 9c0fe53a98..ea981288f7 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindingUtilsImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/definition/adapter/binding/ClientBindableAdapterFunctions.java\n\n@@ -16,19 +16,20 @@\n \n package org.kie.workbench.common.stunner.core.client.definition.adapter.binding;\n \n-import org.jboss.errai.databinding.client.HasProperties;\n-import org.jboss.errai.databinding.client.api.DataBinder;\n+import javax.enterprise.context.ApplicationScoped;\n \n-// Utilize class for making possible test without static mocking\n-public class ClientBindingUtilsImpl {\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterFunctions;\n \n-    public <T, R> R getProxiedValue(final T pojo,\n-                                    final String fieldName) {\n-        R result = null;\n-        if (null != pojo && null != fieldName) {\n-            HasProperties hasProperties = (HasProperties) DataBinder.forModel(pojo).getModel();\n-            result = (R) hasProperties.get(fieldName);\n-        }\n-        return result;\n+@ApplicationScoped\n+public class ClientBindableAdapterFunctions implements BindableAdapterFunctions {\n+\n+    @Override\n+    public Object getValue(Object pojo, String fieldName) {\n+        return ClientBindingUtils.getProxiedValue(pojo, fieldName);\n+    }\n+\n+    @Override\n+    public void setValue(Object pojo, String field, Object value) {\n+        ClientBindingUtils.setProxiedValue(pojo, field, value);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2Mjk2OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442562969", "bodyText": "really need for changing it to protected?", "author": "romartin", "createdAt": "2020-06-19T00:02:02Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java", "diffHunk": "@@ -557,7 +557,7 @@ protected String getRepeatCount(String repeatable) {\n         return matcher.getGroup(1);\n     }\n \n-    void ok() {\n+    protected void ok() {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNjg0MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444026841", "bodyText": "It leads to the following test issues:\n[ERROR] Errors: \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testCreateAndClose(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.setUp:157 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testCreateAndClose \u00bb UnfinishedStubbing \nUnfinish...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testCreateAndSave(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.setUp:157 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testCreateAndSave \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testCreateAndSaveEmpty(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.setUp:157 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testCreateAndSaveEmpty \u00bb UnfinishedStubbing \nUnfi...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testGetNameHeader(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.setUp:157 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testGetNameHeader \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testReadOnly(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.setUp:157 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testReadOnly \u00bb UnfinishedStubbing \nUnfinished stu...", "author": "hasys", "createdAt": "2020-06-23T07:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2Mjk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java\nindex 56b8ea56e0..f435d3700b 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java\n\n@@ -533,59 +662,50 @@ public class NotificationEditorWidgetViewImpl extends Composite implements Notif\n     protected void setPeriod(String period, PeriodBox box) {\n         MatchResult match = RegExp.compile(PERIOD).exec(period);\n         String duration = match.getGroup(2);\n-        StringBuffer result = new StringBuffer();\n-        result.append(duration);\n-        result.append(minuteOrMonth(match));\n-        box.setValue(result.toString());\n+        String result = duration + presenter.minuteOrMonth(match);\n+        box.setValue(result);\n     }\n \n-    protected String minuteOrMonth(MatchResult match) {\n-        String _T = match.getGroup(1);\n-        return ((match.getGroup(3).equals(\"M\") && !_T.isEmpty()) ? \"m\" : match.getGroup(3));\n-    }\n-\n-    protected boolean isRepeatable(String repeatable) {\n-        MatchResult matcher = RegExp.compile(REPEATABLE).exec(repeatable);\n-        if (matcher == null) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    protected String getRepeatCount(String repeatable) {\n-        MatchResult matcher = RegExp.compile(REPEATABLE).exec(repeatable);\n-        return matcher.getGroup(1);\n-    }\n-\n-    protected void ok() {\n+    @Override\n+    public void ok() {\n         // TODO looks like errai data binder doesn't support liststore widgets.\n         current.setUsers(multipleLiveSearchSelectionHandlerUsers.getSelectedValues());\n         current.setGroups(multipleLiveSearchSelectionHandlerGroups.getSelectedValues());\n+        current.setEmails(presenter.clearEmails(emails.getValue()));\n         current.setBody(body.getValue());\n         current.setSubject(subject.getValue());\n         current.setFrom(searchSelectionFromHandler.getSelectedValue() != null ? searchSelectionFromHandler.getSelectedValue() : \"\");\n         current.setReplyTo(searchSelectionReplyToHandler.getSelectedValue() != null ? searchSelectionReplyToHandler.getSelectedValue() : \"\");\n         current.setExpiresAt(combineISO8601String());\n         current.setExpiration(Expiration.get(taskExpiration.getValue()));\n-        current.setType(notStartedInput.checked ? NotificationType.NotStartedNotify : NotificationType.NotCompletedNotify);\n+        current.setType(presenter.getNotificationType(notStartedInput.checked));\n         notificationEvent.fire(new NotificationEvent(current));\n+        markEmailsAsCorrect();\n         hide();\n     }\n \n+    public void markEmailsAsCorrect() {\n+        incorrectEmail.getStyle().setDisplay(Style.Display.NONE);\n+        emails.getElement().getStyle().setBorderColor(\"#bbb\");\n+    }\n+\n+    @Override\n+    public void setValidationFailed(String incorrectValue) {\n+        incorrectEmail.setInnerText(CONSTANTS.incorrectEmail() + \" \" + incorrectValue);\n+        incorrectEmail.getStyle().setDisplay(Style.Display.BLOCK);\n+        emails.getElement().getStyle().setBorderColor(\"red\");\n+    }\n+\n     void close() {\n         notificationEvent.fire(new NotificationEvent(null));\n         hide();\n     }\n \n-    protected void onViolationError(Set<ConstraintViolation<NotificationRow>> violations) {\n-        expressionTextArea.getElement().getStyle().setBorderColor(\"red\");\n-        errorDivPanel.innerHTML = violations.stream().map(v -> \"* \" + v.getMessage()).collect(Collectors.joining(\"\\n\"));\n-    }\n-\n-    protected void hide() {\n+    void hide() {\n         //clear widgets and set default values\n-        multipleSelectorInputUsers.setValue(Collections.EMPTY_LIST);\n-        multipleSelectorInputGroups.setValue(Collections.EMPTY_LIST);\n+        multipleSelectorInputUsers.setValue(emptyList());\n+        multipleSelectorInputGroups.setValue(emptyList());\n+        emails.clear();\n         periodBox.clear();\n         subject.clear();\n         body.clear();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2Mjk4MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442562981", "bodyText": "really need for changing it to protected?", "author": "romartin", "createdAt": "2020-06-19T00:02:06Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java", "diffHunk": "@@ -582,7 +582,7 @@ protected void onViolationError(Set<ConstraintViolation<NotificationRow>> violat\n         errorDivPanel.innerHTML = violations.stream().map(v -> \"* \" + v.getMessage()).collect(Collectors.joining(\"\\n\"));\n     }\n \n-    void hide() {\n+    protected void hide() {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyODUzMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444028530", "bodyText": "Otherwise there are following tests failing:\n[ERROR] Errors: \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testCreateAndClose(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.testCreateAndClose:279 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testCreateAndClose \u00bb UnfinishedStubbing \nUnfinish...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testCreateAndSave(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.testCreateAndSave:246 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testCreateAndSave \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest.testCreateAndSaveEmpty(org.kie.workbench.common.stunner.bpmn.client.forms.fields.notificationsEditor.widget.NotificationEditorWidgetTest)\n[ERROR]   Run 1: NotificationEditorWidgetTest.testCreateAndSaveEmpty:220 \u00bb NullPointer\n[ERROR]   Run 2: NotificationEditorWidgetTest.testCreateAndSaveEmpty \u00bb UnfinishedStubbing \nUnfi...", "author": "hasys", "createdAt": "2020-06-23T07:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2Mjk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java\nindex 56b8ea56e0..f435d3700b 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/notificationsEditor/widget/NotificationEditorWidgetViewImpl.java\n\n@@ -533,59 +662,50 @@ public class NotificationEditorWidgetViewImpl extends Composite implements Notif\n     protected void setPeriod(String period, PeriodBox box) {\n         MatchResult match = RegExp.compile(PERIOD).exec(period);\n         String duration = match.getGroup(2);\n-        StringBuffer result = new StringBuffer();\n-        result.append(duration);\n-        result.append(minuteOrMonth(match));\n-        box.setValue(result.toString());\n+        String result = duration + presenter.minuteOrMonth(match);\n+        box.setValue(result);\n     }\n \n-    protected String minuteOrMonth(MatchResult match) {\n-        String _T = match.getGroup(1);\n-        return ((match.getGroup(3).equals(\"M\") && !_T.isEmpty()) ? \"m\" : match.getGroup(3));\n-    }\n-\n-    protected boolean isRepeatable(String repeatable) {\n-        MatchResult matcher = RegExp.compile(REPEATABLE).exec(repeatable);\n-        if (matcher == null) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    protected String getRepeatCount(String repeatable) {\n-        MatchResult matcher = RegExp.compile(REPEATABLE).exec(repeatable);\n-        return matcher.getGroup(1);\n-    }\n-\n-    protected void ok() {\n+    @Override\n+    public void ok() {\n         // TODO looks like errai data binder doesn't support liststore widgets.\n         current.setUsers(multipleLiveSearchSelectionHandlerUsers.getSelectedValues());\n         current.setGroups(multipleLiveSearchSelectionHandlerGroups.getSelectedValues());\n+        current.setEmails(presenter.clearEmails(emails.getValue()));\n         current.setBody(body.getValue());\n         current.setSubject(subject.getValue());\n         current.setFrom(searchSelectionFromHandler.getSelectedValue() != null ? searchSelectionFromHandler.getSelectedValue() : \"\");\n         current.setReplyTo(searchSelectionReplyToHandler.getSelectedValue() != null ? searchSelectionReplyToHandler.getSelectedValue() : \"\");\n         current.setExpiresAt(combineISO8601String());\n         current.setExpiration(Expiration.get(taskExpiration.getValue()));\n-        current.setType(notStartedInput.checked ? NotificationType.NotStartedNotify : NotificationType.NotCompletedNotify);\n+        current.setType(presenter.getNotificationType(notStartedInput.checked));\n         notificationEvent.fire(new NotificationEvent(current));\n+        markEmailsAsCorrect();\n         hide();\n     }\n \n+    public void markEmailsAsCorrect() {\n+        incorrectEmail.getStyle().setDisplay(Style.Display.NONE);\n+        emails.getElement().getStyle().setBorderColor(\"#bbb\");\n+    }\n+\n+    @Override\n+    public void setValidationFailed(String incorrectValue) {\n+        incorrectEmail.setInnerText(CONSTANTS.incorrectEmail() + \" \" + incorrectValue);\n+        incorrectEmail.getStyle().setDisplay(Style.Display.BLOCK);\n+        emails.getElement().getStyle().setBorderColor(\"red\");\n+    }\n+\n     void close() {\n         notificationEvent.fire(new NotificationEvent(null));\n         hide();\n     }\n \n-    protected void onViolationError(Set<ConstraintViolation<NotificationRow>> violations) {\n-        expressionTextArea.getElement().getStyle().setBorderColor(\"red\");\n-        errorDivPanel.innerHTML = violations.stream().map(v -> \"* \" + v.getMessage()).collect(Collectors.joining(\"\\n\"));\n-    }\n-\n-    protected void hide() {\n+    void hide() {\n         //clear widgets and set default values\n-        multipleSelectorInputUsers.setValue(Collections.EMPTY_LIST);\n-        multipleSelectorInputGroups.setValue(Collections.EMPTY_LIST);\n+        multipleSelectorInputUsers.setValue(emptyList());\n+        multipleSelectorInputGroups.setValue(emptyList());\n+        emails.clear();\n         periodBox.clear();\n         subject.clear();\n         body.clear();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzAwMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442563001", "bodyText": "really need for changing it to protected?", "author": "romartin", "createdAt": "2020-06-19T00:02:10Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/reassignmentsEditor/widget/ReassignmentEditorWidgetViewImpl.java", "diffHunk": "@@ -132,7 +132,7 @@ private void initUsersAndGroupsDropdowns(MultipleSelectorInput multipleUsers,\n         this.multipleSelectorInputGroups.init(groupsLiveSearchService, multipleLiveSearchSelectionHandlerGroups);\n     }\n \n-    void initTypeSelector() {\n+    protected void initTypeSelector() {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyOTU5OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444029599", "bodyText": "Otherwise following tests starts to fail:\n[ERROR] Errors: \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndClose(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:123 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndClose \u00bb UnfinishedStubbing \nUnfinish...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndSave(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:123 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndSave \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndSaveEmpty(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:123 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndSaveEmpty \u00bb UnfinishedStubbing \nUnfi...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testGetNameHeader(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:123 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testGetNameHeader \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testReadOnly(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:123 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testReadOnly \u00bb UnfinishedStubbing \nUnfinished stu...", "author": "hasys", "createdAt": "2020-06-23T07:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzAwMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzAxMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442563011", "bodyText": "really need for changing it to protected?", "author": "romartin", "createdAt": "2020-06-19T00:02:14Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/reassignmentsEditor/widget/ReassignmentEditorWidgetViewImpl.java", "diffHunk": "@@ -201,7 +201,7 @@ public void setReadOnly(boolean readOnly) {\n         okButton.disabled = readOnly;\n     }\n \n-    void ok() {\n+    protected void ok() {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzMDUwOQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444030509", "bodyText": "Otherwise following issues will be during test execution:\n[ERROR] Errors: \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndClose(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:125 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndClose \u00bb UnfinishedStubbing \nUnfinish...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndSave(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:125 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndSave \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndSaveEmpty(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:125 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndSaveEmpty \u00bb UnfinishedStubbing \nUnfi...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testGetNameHeader(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:125 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testGetNameHeader \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testReadOnly(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.setUp:125 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testReadOnly \u00bb UnfinishedStubbing \nUnfinished stu...", "author": "hasys", "createdAt": "2020-06-23T07:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzAxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzAzMA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r442563030", "bodyText": "really need for changing it to protected?", "author": "romartin", "createdAt": "2020-06-19T00:02:16Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/reassignmentsEditor/widget/ReassignmentEditorWidgetViewImpl.java", "diffHunk": "@@ -226,7 +226,7 @@ void close() {\n         hide();\n     }\n \n-    void hide() {\n+    protected void hide() {", "originalCommit": "182a4c477f3ebc23fc627ce40ccf77e087a8df12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzMTg5MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3317#discussion_r444031890", "bodyText": "Otherwise following tests will fail:\n[ERROR] Errors: \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndClose(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.testCreateAndClose:219 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndClose \u00bb UnfinishedStubbing \nUnfinish...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndSave(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.testCreateAndSave:195 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndSave \u00bb UnfinishedStubbing \nUnfinishe...\n[INFO] \n[ERROR] org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest.testCreateAndSaveEmpty(org.kie.workbench.common.stunner.bpmn.client.forms.fields.reassignmentsEditor.widget.ReassignmentEditorWidgetTest)\n[ERROR]   Run 1: ReassignmentEditorWidgetTest.testCreateAndSaveEmpty:175 \u00bb NullPointer\n[ERROR]   Run 2: ReassignmentEditorWidgetTest.testCreateAndSaveEmpty \u00bb UnfinishedStubbing \nUnfi...", "author": "hasys", "createdAt": "2020-06-23T07:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2MzAzMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "url": "https://github.com/kiegroup/kie-wb-common/commit/39f7a2ddea0f840bd3a23ede8d2f727925fd7622", "message": "PR review Part III", "committedDate": "2020-06-23T12:55:42Z", "type": "forcePushed"}, {"oid": "bc3491630fcc4a3abf4a2bc0751aba90574bd3c4", "url": "https://github.com/kiegroup/kie-wb-common/commit/bc3491630fcc4a3abf4a2bc0751aba90574bd3c4", "message": "PR review Part III", "committedDate": "2020-07-01T13:54:04Z", "type": "forcePushed"}, {"oid": "5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "url": "https://github.com/kiegroup/kie-wb-common/commit/5969e3d84dcc74d13f72f5c4aefef6cdc7cdf6bf", "message": "Power Mock reducing in Stunner & BPMN Editor", "committedDate": "2020-10-15T13:49:40Z", "type": "forcePushed"}, {"oid": "64c00b2105b6a5e1f9af6a0fbd4d0cdd50df0e72", "url": "https://github.com/kiegroup/kie-wb-common/commit/64c00b2105b6a5e1f9af6a0fbd4d0cdd50df0e72", "message": "PR review Part II", "committedDate": "2020-10-23T13:52:26Z", "type": "forcePushed"}, {"oid": "5dbb6473d9412d90b5b984d7d71109fac1d0777d", "url": "https://github.com/kiegroup/kie-wb-common/commit/5dbb6473d9412d90b5b984d7d71109fac1d0777d", "message": "PR review Part II", "committedDate": "2020-10-26T09:50:55Z", "type": "forcePushed"}, {"oid": "cc1e4e49afc593a58ebefc8f08ba5b3396c243d2", "url": "https://github.com/kiegroup/kie-wb-common/commit/cc1e4e49afc593a58ebefc8f08ba5b3396c243d2", "message": "Power Mock reducing in Stunner & BPMN Editor", "committedDate": "2020-11-09T14:13:04Z", "type": "commit"}, {"oid": "4a74edc08ec2b9e77e69a65f177eb521baf86406", "url": "https://github.com/kiegroup/kie-wb-common/commit/4a74edc08ec2b9e77e69a65f177eb521baf86406", "message": "PR review Part II", "committedDate": "2020-11-09T14:13:57Z", "type": "commit"}, {"oid": "999ba1982093c45f911f38a0cfc0dde7f4fc4a40", "url": "https://github.com/kiegroup/kie-wb-common/commit/999ba1982093c45f911f38a0cfc0dde7f4fc4a40", "message": "revert couple of tests", "committedDate": "2020-11-09T15:10:34Z", "type": "commit"}, {"oid": "999ba1982093c45f911f38a0cfc0dde7f4fc4a40", "url": "https://github.com/kiegroup/kie-wb-common/commit/999ba1982093c45f911f38a0cfc0dde7f4fc4a40", "message": "revert couple of tests", "committedDate": "2020-11-09T15:10:34Z", "type": "forcePushed"}]}