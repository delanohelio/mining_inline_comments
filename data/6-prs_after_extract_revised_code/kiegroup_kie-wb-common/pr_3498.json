{"pr_number": 3498, "pr_title": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly", "pr_createdAt": "2020-11-23T00:55:45Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3498", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzM5MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529473390", "bodyText": "TODO, putting a comment here so we do not forget about these tests", "author": "domhanak", "createdAt": "2020-11-24T11:26:57Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -16,614 +16,10 @@\n \n package org.kie.workbench.common.dmn.project.client.editor;\n \n-import java.lang.annotation.Annotation;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n+// TODO @RunWith(GwtMockitoTestRunner.class)\n+// TODO @WithClassesToStub(PathPlaceRequest.class)\n+public class DMNDiagramEditorTest {", "originalCommit": "1635263895eddfecc1a5ea04640f084fc208fd77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NDA2Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591964066", "bodyText": "done!", "author": "romartin", "createdAt": "2021-03-10T23:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzM5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b3a7fc60353e31282be510ee86f2acb440c8e838", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java\nindex 7cd95b131b..372dac86a0 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java\n\n@@ -16,10 +16,551 @@\n \n package org.kie.workbench.common.dmn.project.client.editor;\n \n-// TODO @RunWith(GwtMockitoTestRunner.class)\n-// TODO @WithClassesToStub(PathPlaceRequest.class)\n-public class DMNDiagramEditorTest {\n+import java.lang.annotation.Annotation;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n \n-    // TODO\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import com.google.gwtmockito.WithClassesToStub;\n+import elemental2.dom.HTMLElement;\n+import org.guvnor.messageconsole.client.console.widget.button.AlertsButtonMenuItemBuilder;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.qualifiers.DMNEditor;\n+import org.kie.workbench.common.dmn.client.docks.navigator.DecisionNavigatorDock;\n+import org.kie.workbench.common.dmn.client.docks.navigator.common.LazyCanvasFocusUtils;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramsSession;\n+import org.kie.workbench.common.dmn.client.editors.drd.DRDNameChanger;\n+import org.kie.workbench.common.dmn.client.editors.expressions.ExpressionEditorView;\n+import org.kie.workbench.common.dmn.client.editors.included.IncludedModelsPage;\n+import org.kie.workbench.common.dmn.client.editors.search.DMNEditorSearchIndex;\n+import org.kie.workbench.common.dmn.client.editors.search.DMNSearchableElement;\n+import org.kie.workbench.common.dmn.client.editors.types.DataTypePageTabActiveEvent;\n+import org.kie.workbench.common.dmn.client.editors.types.DataTypesPage;\n+import org.kie.workbench.common.dmn.client.editors.types.listview.common.DataTypeEditModeToggleEvent;\n+import org.kie.workbench.common.dmn.client.events.EditExpressionEvent;\n+import org.kie.workbench.common.dmn.client.session.DMNEditorSession;\n+import org.kie.workbench.common.dmn.client.widgets.codecompletion.MonacoFEELInitializer;\n+import org.kie.workbench.common.dmn.project.client.type.DMNDiagramResourceType;\n+import org.kie.workbench.common.services.shared.resources.PerspectiveIds;\n+import org.kie.workbench.common.stunner.core.client.ReadOnlyProvider;\n+import org.kie.workbench.common.stunner.core.client.api.SessionManager;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.command.SessionCommandManager;\n+import org.kie.workbench.common.stunner.core.client.components.layout.LayoutHelper;\n+import org.kie.workbench.common.stunner.core.client.components.layout.OpenDiagramLayoutExecutor;\n+import org.kie.workbench.common.stunner.forms.client.event.RefreshFormPropertiesEvent;\n+import org.kie.workbench.common.stunner.project.client.editor.AbstractProjectDiagramEditorTest;\n+import org.kie.workbench.common.widgets.client.docks.DefaultEditorDock;\n+import org.kie.workbench.common.widgets.client.search.component.SearchBarComponent;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.workbench.widgets.multipage.MultiPageEditor;\n+import org.uberfire.ext.editor.commons.client.menu.MenuItems;\n+import org.uberfire.mocks.EventSourceMock;\n+import org.uberfire.mvp.Command;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.PathPlaceRequest;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.kie.workbench.common.dmn.project.client.editor.DMNDiagramEditor.DATA_TYPES_PAGE_INDEX;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.atLeast;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+@WithClassesToStub(PathPlaceRequest.class)\n+public class DMNDiagramEditorTest extends AbstractProjectDiagramEditorTest {\n+\n+    @Mock\n+    private PlaceRequest currentPlace;\n+\n+    @Mock\n+    private SessionManager sessionManager;\n+\n+    @Mock\n+    private DMNEditorSession dmnEditorSession;\n+\n+    @Mock\n+    private DMNEditorSession defaultEditorSession;\n+\n+    @Mock\n+    private SessionCommandManager<AbstractCanvasHandler> sessionCommandManager;\n+\n+    @Mock\n+    private EventSourceMock<RefreshFormPropertiesEvent> refreshFormPropertiesEvent;\n+\n+    @Mock\n+    private ExpressionEditorView.Presenter expressionEditor;\n+\n+    @Mock\n+    private DecisionNavigatorDock decisionNavigatorDock;\n+\n+    @Mock\n+    private EditExpressionEvent editExpressionEvent;\n+\n+    @Mock\n+    private DMNEditorMenuSessionItems dmnProjectMenuSessionItems;\n+\n+    @Mock\n+    private LayoutHelper layoutHelper;\n+\n+    @Mock\n+    private OpenDiagramLayoutExecutor layoutExecutor;\n+\n+    @Mock\n+    private DataTypesPage dataTypesPage;\n+\n+    @Mock\n+    private IncludedModelsPage includedModelsPage;\n+\n+    @Mock\n+    private MultiPageEditor multiPage;\n+\n+    @Mock\n+    private DefaultEditorDock docks;\n+\n+    @Mock\n+    private DMNEditorSearchIndex editorSearchIndex;\n+\n+    @Mock\n+    private SearchBarComponent<DMNSearchableElement> searchBarComponent;\n+\n+    @Mock\n+    private SearchBarComponent.View searchBarComponentView;\n+\n+    @Mock\n+    private HTMLElement searchBarComponentViewElement;\n+\n+    @Mock\n+    private MonacoFEELInitializer feelInitializer;\n+\n+    @Mock\n+    private ElementWrapperWidget searchBarComponentWidget;\n+\n+    @Mock\n+    private ReadOnlyProvider readOnlyProvider;\n+\n+    @Mock\n+    private HTMLElement drdNameChangerElement;\n+\n+    @Mock\n+    private DRDNameChanger drdNameChanger;\n+\n+    @Mock\n+    private LazyCanvasFocusUtils lazyCanvasFocusUtils;\n+\n+    @Mock\n+    private ElementWrapperWidget drdNameWidget;\n+\n+    @Mock\n+    private DMNDiagramsSession dmnDiagramsSession;\n+\n+    @Captor\n+    private ArgumentCaptor<Consumer<String>> errorConsumerCaptor;\n+\n+    @Mock\n+    private PlaceManager placeManager;\n+\n+    @Mock\n+    private AlertsButtonMenuItemBuilder alertsButtonMenuItemBuilder;\n+\n+    private DMNDiagramEditor diagramEditor;\n+\n+    @Before\n+    public void before() {\n+        when(kieView.getMultiPage()).thenReturn(multiPage);\n+    }\n+\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+\n+        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n+        when(stunnerEditor.getSession()).thenReturn(dmnEditorSession);\n+        when(dmnEditorSession.getExpressionEditor()).thenReturn(expressionEditor);\n+        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n+        when(canvasHandler.getDiagram()).thenReturn(diagram);\n+        when(searchBarComponent.getView()).thenReturn(searchBarComponentView);\n+        when(searchBarComponentView.getElement()).thenReturn(searchBarComponentViewElement);\n+        when(drdNameChanger.getElement()).thenReturn(drdNameChangerElement);\n+        when(dmnProjectMenuSessionItems.setErrorConsumer(any(Consumer.class))).thenReturn(dmnProjectMenuSessionItems);\n+        when(dmnProjectMenuSessionItems.setLoadingCompleted(any(org.uberfire.mvp.Command.class))).thenReturn(dmnProjectMenuSessionItems);\n+        when(dmnProjectMenuSessionItems.setLoadingStarts(any(Command.class))).thenReturn(dmnProjectMenuSessionItems);\n+\n+        final DMNDiagramResourceType resourceType = mock(DMNDiagramResourceType.class);\n+        when(resourceType.getSuffix()).thenReturn(\"dmn\");\n+        when(resourceType.getShortName()).thenReturn(\"DMN\");\n+\n+        diagramEditor = spy(new DMNDiagramEditor(view,\n+                                                 onDiagramFocusEvent,\n+                                                 onDiagramLostFocusEvent,\n+                                                 documentationView,\n+                                                 resourceType,\n+                                                 dmnProjectMenuSessionItems,\n+                                                 projectMessagesListener,\n+                                                 translationService,\n+                                                 projectDiagramServices,\n+                                                 projectDiagramResourceServiceCaller,\n+                                                 stunnerEditor,\n+                                                 sessionManager,\n+                                                 sessionCommandManager,\n+                                                 refreshFormPropertiesEvent,\n+                                                 decisionNavigatorDock,\n+                                                 layoutHelper,\n+                                                 layoutExecutor,\n+                                                 dataTypesPage,\n+                                                 includedModelsPage,\n+                                                 editorSearchIndex,\n+                                                 searchBarComponent,\n+                                                 feelInitializer,\n+                                                 readOnlyProvider,\n+                                                 drdNameChanger,\n+                                                 lazyCanvasFocusUtils,\n+                                                 dmnDiagramsSession) {\n+            {\n+                docks = DMNDiagramEditorTest.this.docks;\n+                fileMenuBuilder = DMNDiagramEditorTest.this.fileMenuBuilder;\n+                workbenchContext = DMNDiagramEditorTest.this.workbenchContext;\n+                projectController = DMNDiagramEditorTest.this.projectController;\n+                versionRecordManager = DMNDiagramEditorTest.this.versionRecordManager;\n+                alertsButtonMenuItemBuilder = DMNDiagramEditorTest.this.alertsButtonMenuItemBuilder;\n+                kieView = DMNDiagramEditorTest.this.kieView;\n+                overviewWidget = DMNDiagramEditorTest.this.overviewWidget;\n+                notification = DMNDiagramEditorTest.this.notification;\n+                placeManager = DMNDiagramEditorTest.this.placeManager;\n+                changeTitleNotification = DMNDiagramEditorTest.this.changeTitleNotification;\n+                savePopUpPresenter = DMNDiagramEditorTest.this.savePopUpPresenter;\n+                saveAndRenameCommandBuilder = DMNDiagramEditorTest.this.saveAndRenameCommandBuilder;\n+            }\n+        });\n+        doReturn(searchBarComponentWidget).when(diagramEditor).getWidget(any());\n+        doReturn(drdNameWidget).when(diagramEditor).getWidget(eq(drdNameChangerElement));\n+        doNothing().when(stunnerEditor).focus();\n+        doNothing().when(stunnerEditor).lostFocus();\n+    }\n+\n+    @Test\n+    public void testInit() {\n+\n+        final Supplier<Boolean> isDataTypesTabActiveSupplier = () -> true;\n+        final Supplier<Integer> currentContentHashSupplier = () -> 123;\n+\n+        doReturn(isDataTypesTabActiveSupplier).when(diagramEditor).getIsDataTypesTabActiveSupplier();\n+        doReturn(currentContentHashSupplier).when(diagramEditor).getGetCurrentContentHashSupplier();\n+\n+        diagramEditor.init();\n+\n+        //DMNProjectEditorMenuSessionItems.setErrorConsumer(..) is called several times so just check the last invocation\n+        verify(dmnProjectMenuSessionItems, atLeast(1)).setErrorConsumer(errorConsumerCaptor.capture());\n+\n+        errorConsumerCaptor.getValue().accept(\"ERROR\");\n+\n+        verify(view).hideBusyIndicator();\n+        verify(stunnerEditor, never()).showMessage(anyString());\n+        verify(stunnerEditor, never()).showError(anyString());\n+        verify(editorSearchIndex).setIsDataTypesTabActiveSupplier(isDataTypesTabActiveSupplier);\n+        verify(editorSearchIndex).setCurrentAssetHashcodeSupplier(currentContentHashSupplier);\n+    }\n+\n+    @Test\n+    public void testGetIsDataTypesTabActiveSupplierWhenDataTypesTabIsActive() {\n+        when(multiPage.selectedPage()).thenReturn(DATA_TYPES_PAGE_INDEX);\n+        assertTrue(diagramEditor.getIsDataTypesTabActiveSupplier().get());\n+    }\n+\n+    @Test\n+    public void testGetIsDataTypesTabActiveSupplierWhenDataTypesTabIsNotActive() {\n+        when(multiPage.selectedPage()).thenReturn(DATA_TYPES_PAGE_INDEX + 1);\n+        assertFalse(diagramEditor.getIsDataTypesTabActiveSupplier().get());\n+    }\n+\n+    @Test\n+    public void testOnStartup() {\n+        diagramEditor.onStartup(filePath, currentPlace);\n+        verify(decisionNavigatorDock).init(eq(PerspectiveIds.LIBRARY));\n+    }\n+\n+    @Test\n+    public void testOnClose() {\n+        diagramEditor.onClose();\n+        verify(dataTypesPage).disableShortcuts();\n+        verify(kieView).clear();\n+    }\n+\n+    @Test\n+    public void testInitialiseKieEditorForSession() {\n+\n+        diagramEditor.initialiseKieEditorForSession(diagram);\n+\n+        verify(multiPage).addPage(dataTypesPage);\n+        verify(multiPage).addPage(includedModelsPage);\n+        verify(diagramEditor).setupSearchComponent();\n+    }\n+\n+    @Test\n+    public void testInitialiseKieEditorForSessionWhenInitializingKieEditorForSessionThenDiagramAlreadyLoaded() {\n+        final InOrder inOrder = inOrder(diagramEditor);\n+        diagramEditor.initialiseKieEditorForSession(diagram);\n+        inOrder.verify(diagramEditor).onDiagramLoad();\n+        inOrder.verify(diagramEditor).superInitialiseKieEditorForSession(any());\n+    }\n+\n+    @Test\n+    public void testSetupSearchComponent() {\n+        diagramEditor.setupSearchComponent();\n+        verify(searchBarComponent).init(editorSearchIndex);\n+        verify(multiPage).addTabBarWidget(searchBarComponentWidget);\n+    }\n+\n+    @Test\n+    public void testOnFocus() {\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n+        diagramEditor.onFocus();\n+        verify(stunnerEditor).focus();\n+        verify(stunnerEditor, never()).lostFocus();\n+        verify(diagramEditor).onDiagramLoad();\n+        verify(dataTypesPage).onFocus();\n+        verify(dataTypesPage, never()).onLostFocus();\n+        verify(dataTypesPage).enableShortcuts();\n+        verify(dataTypesPage, never()).disableShortcuts();\n+    }\n+\n+    @Test\n+    public void testOnLostFocus() {\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n+        diagramEditor.onLostFocus();\n+        verify(stunnerEditor).lostFocus();\n+        verify(stunnerEditor, never()).focus();\n+        verify(dataTypesPage).onLostFocus();\n+        verify(dataTypesPage, never()).onFocus();\n+    }\n+\n+    @Test\n+    public void testOnDataTypePageNavTabActiveEvent() {\n+        diagramEditor.onDataTypePageNavTabActiveEvent(mock(DataTypePageTabActiveEvent.class));\n+        verify(multiPage).selectPage(DATA_TYPES_PAGE_INDEX);\n+    }\n+\n+    @Test\n+    public void testOnDataTypeEditModeToggleWhenEditModeIsEnabled() {\n+        final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n+        doNothing().when(diagramEditor).disableMenuItem(any());\n+        when(editModeToggleEvent.isEditModeEnabled()).thenReturn(true);\n+        diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n+        verify(diagramEditor).disableMenuItem(MenuItems.SAVE);\n+    }\n+\n+    @Test\n+    public void testOnDataTypeEditModeToggleWhenEditModeIsNotEnabled() {\n+        final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n+        doNothing().when(diagramEditor).enableMenuItem(any());\n+        when(editModeToggleEvent.isEditModeEnabled()).thenReturn(false);\n+        diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n+        verify(diagramEditor).enableMenuItem(MenuItems.SAVE);\n+    }\n+\n+    @Test\n+    public void testShowDocks() {\n+        diagramEditor.showDocks();\n+        verify(decisionNavigatorDock).open();\n+        verify(docks).show();\n+    }\n+\n+    @Test\n+    public void testHideDocks() {\n+        diagramEditor.hideDocks();\n+        verify(decisionNavigatorDock).close();\n+        verify(decisionNavigatorDock).resetContent();\n+        verify(docks).hide();\n+    }\n+\n+    @Override\n+    public void testDocksQualifiers() {\n+        final Annotation[] qualifiers = diagramEditor.getDockQualifiers();\n+        assertEquals(1, qualifiers.length);\n+        assertEquals(DMNEditor.class, qualifiers[0].annotationType());\n+    }\n+\n+    /*\n+\n+   // TODO: Complete all below\n+\n+     @Test\n+    public void testOnEditExpressionEvent() {\n+        when(editExpressionEvent.getSession()).thenReturn(dmnEditorSession);\n+        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n+        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n+\n+        open();\n+\n+        diagramEditor.onEditExpressionEvent(editExpressionEvent);\n+\n+        verify(searchBarComponent).disableSearch();\n+        verify(sessionCommandManager).execute(eq(canvasHandler),\n+                                              any(NavigateToExpressionEditorCommand.class));\n+    }\n+\n+    @Test\n+    public void testOnDiagramLoadWhenCanvasHandlerIsNotNull() {\n+        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n+        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n+        when(canvasHandler.getDiagram()).thenReturn(diagram);\n+\n+        open();\n+\n+        verify(decisionNavigatorDock, atLeast(1)).reload();\n+        verify(expressionEditor, atLeast(1)).setToolbarStateHandler(any(DMNProjectToolbarStateHandler.class));\n+        verify(dataTypesPage, atLeast(1)).reload();\n+        verify(layoutHelper).applyLayout(diagram, layoutExecutor);\n+        verify(includedModelsPage, atLeast(1)).reload();\n+        verify(lazyCanvasFocusUtils, atLeast(1)).releaseFocus();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testOnDiagramLoadWhenCanvasHandlerIsNull() {\n+        diagramEditor.onDiagramLoad();\n+\n+        verify(expressionEditor, never()).setToolbarStateHandler(any(DMNProjectToolbarStateHandler.class));\n+        verify(decisionNavigatorDock, never()).reload();\n+        verify(decisionNavigatorDock, never()).open();\n+        verify(dataTypesPage, never()).reload();\n+        verify(includedModelsPage, never()).reload();\n+        verify(lazyCanvasFocusUtils, never()).releaseFocus();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testParsingErrorMessage() {\n+        doAnswer(i -> i.getArguments()[0]).when(translationService).getValue(anyString());\n+\n+        final String xml = \"xml\";\n+\n+        openInvalidFile(xml);\n+\n+        final ArgumentCaptor<NotificationEvent> notificationEventCaptor = ArgumentCaptor.forClass(NotificationEvent.class);\n+        verify(notificationEvent).fire(notificationEventCaptor.capture());\n+\n+        final NotificationEvent notificationEvent = notificationEventCaptor.getValue();\n+        assertEquals(DMNProjectClientConstants.DMNDiagramParsingErrorMessage,\n+                     notificationEvent.getNotification());\n+    }\n+\n+    @Test\n+    public void testStunnerSave_ValidationUnsuccessful() {\n+        final Overview overview = assertBasicStunnerSaveOperation(false);\n+        assertSaveOperation(overview);\n+    }\n+\n+    @Test\n+    public void testOnMultiPageEditorSelectedPageEvent() {\n+\n+        final SessionPresenter sessionPresenter = mock(SessionPresenter.class);\n+\n+        doReturn(sessionPresenter).when(diagramEditor).getSessionPresenter();\n+        when(sessionPresenter.getInstance()).thenReturn(dmnEditorSession);\n+        when(sessionPresenter.getView()).thenReturn(sessionPresenterView);\n+        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n+\n+        open();\n+\n+        diagramEditor.onMultiPageEditorSelectedPageEvent(mock(MultiPageEditorSelectedPageEvent.class));\n+\n+        verify(searchBarComponent).disableSearch();\n+    }\n+\n+    @Test\n+    public void testOnMultiPageEditorSelectedPageEventWhenEditorIsNotInTheSameSession() {\n+\n+        final SessionPresenter sessionPresenter = mock(SessionPresenter.class);\n+\n+        doReturn(sessionPresenter).when(diagramEditor).getSessionPresenter();\n+        when(sessionPresenter.getInstance()).thenReturn(dmnEditorSession);\n+        when(sessionPresenter.getView()).thenReturn(sessionPresenterView);\n+        when(sessionManager.getCurrentSession()).thenReturn(defaultEditorSession);\n+        when(defaultEditorSession.getExpressionEditor()).thenReturn(expressionEditor);\n+\n+        open();\n+\n+        diagramEditor.onMultiPageEditorSelectedPageEvent(mock(MultiPageEditorSelectedPageEvent.class));\n+\n+        verify(searchBarComponent, never()).disableSearch();\n+    }\n+\n+    @Test\n+    public void testOnRefreshFormPropertiesEvent() {\n+        diagramEditor.onRefreshFormPropertiesEvent(mock(RefreshFormPropertiesEvent.class));\n+        verify(searchBarComponent).disableSearch();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testTabContentOrdering() {\n+        when(documentationView.isEnabled()).thenReturn(Boolean.TRUE);\n+        when(documentationView.initialize(diagram)).thenReturn(documentationView);\n+        when(kieView.getMultiPage()).thenReturn(multiPage);\n+\n+        open();\n+\n+        final InOrder inOrder = inOrder(kieView, multiPage);\n+        inOrder.verify(kieView).addMainEditorPage(view);\n+        inOrder.verify(kieView).addPage(any(DocumentationPage.class));\n+        inOrder.verify(multiPage).addPage(dataTypesPage);\n+        inOrder.verify(multiPage).addPage(includedModelsPage);\n+        inOrder.verify(kieView).addOverviewPage(eq(overviewWidget), any(Command.class));\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLoadContentWithValidFile() {\n+        super.testLoadContentWithValidFile();\n+\n+        verify(layoutHelper).applyLayout(eq(diagram), eq(layoutExecutor));\n+        verify(feelInitializer).initializeFEELEditor();\n+    }\n+\n+    @Test\n+    @Override\n+    public void testLoadContentWithInvalidFile() {\n+        super.testLoadContentWithInvalidFile();\n+\n+        verify(feelInitializer, never()).initializeFEELEditor();\n+    }\n+\n+    @Test\n+    public void testUpdateOriginalHash() {\n+\n+        final Integer currentHash = 27;\n+        final Integer previousSetHash = 5;\n+        doReturn(currentHash).when(diagramEditor).getCurrentDiagramHash();\n+\n+        diagramEditor.setOriginalHash(0);\n+        diagramEditor.updateOriginalHash();\n+\n+        assertEquals(currentHash, diagramEditor.getOriginalHash());\n+\n+        diagramEditor.setOriginalHash(previousSetHash);\n+        diagramEditor.updateOriginalHash();\n+\n+        assertEquals(previousSetHash, diagramEditor.getOriginalHash());\n+    }\n+\n+    */\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDAyOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529474028", "bodyText": "same as above", "author": "domhanak", "createdAt": "2020-11-24T11:28:07Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java", "diffHunk": "@@ -16,36 +16,9 @@\n \n package org.kie.workbench.common.dmn.project.client.session;\n \n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kie.workbench.common.dmn.client.widgets.toolbar.DMNPerformAutomaticLayoutCommand;\n-import org.kie.workbench.common.dmn.project.client.session.command.SaveDiagramSessionCommand;\n-import org.kie.workbench.common.dmn.project.client.validation.DMNValidateSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ClearSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.CopySelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.CutSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.DeleteSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToJpgSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPdfSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPngSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToRawFormatSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToSvgSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.PasteSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.RedoSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.SwitchGridSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.UndoSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.VisitGraphSessionCommand;\n-import org.kie.workbench.common.stunner.kogito.client.session.EditorSessionCommands;\n-import org.kie.workbench.common.stunner.kogito.client.session.EditorSessionCommandsTest;\n-import org.mockito.InOrder;\n-import org.mockito.runners.MockitoJUnitRunner;\n-\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.inOrder;\n-import static org.mockito.Mockito.verify;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class DMNEditorSessionCommandsTest extends EditorSessionCommandsTest {\n+// TODO\n+// @RunWith(MockitoJUnitRunner.class)\n+public class DMNEditorSessionCommandsTest /*extends EditorSessionCommandsTest {", "originalCommit": "1635263895eddfecc1a5ea04640f084fc208fd77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NDIyMw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591964223", "bodyText": "done!", "author": "romartin", "createdAt": "2021-03-10T23:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c342d163a406e567a3c745a0256d5fb4e3ea4e29", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java\nindex 1c0dc7f32f..9e076469a4 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java\n\n@@ -16,13 +16,55 @@\n \n package org.kie.workbench.common.dmn.project.client.session;\n \n-// TODO\n-// @RunWith(MockitoJUnitRunner.class)\n-public class DMNEditorSessionCommandsTest /*extends EditorSessionCommandsTest {\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.client.widgets.toolbar.DMNPerformAutomaticLayoutCommand;\n+import org.kie.workbench.common.dmn.project.client.session.command.SaveDiagramSessionCommand;\n+import org.kie.workbench.common.dmn.project.client.validation.DMNValidateSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.command.ManagedClientSessionCommands;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.ClearSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.CopySelectionSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.CutSelectionSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.DeleteSelectionSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToJpgSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPdfSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPngSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToRawFormatSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToSvgSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.PasteSelectionSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.RedoSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.SwitchGridSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.UndoSessionCommand;\n+import org.kie.workbench.common.stunner.core.client.session.command.impl.VisitGraphSessionCommand;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n-    @Override\n-    protected EditorSessionCommands makeEditorSessionCommands() {\n-        return new DMNEditorSessionCommands(commands);\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DMNEditorSessionCommandsTest {\n+\n+    @Mock\n+    private ManagedClientSessionCommands commands;\n+\n+    @Mock\n+    private ClientSession session;\n+\n+    private DMNEditorSessionCommands editorSessionCommands;\n+\n+    @Before\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.editorSessionCommands = new DMNEditorSessionCommands(commands);\n+        when(commands.register(any(Class.class))).thenReturn(commands);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3OTM3OQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529479379", "bodyText": "Could we have a javadoc for this class?", "author": "domhanak", "createdAt": "2020-11-24T11:37:19Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.definition.exception.DefinitionNotFoundException;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.i18n.CoreTranslationMessages;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+@ApplicationScoped\n+public class StunnerEditor {", "originalCommit": "1635263895eddfecc1a5ea04640f084fc208fd77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NTgyNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591965825", "bodyText": "IMO Javadocs are not much useful... they get out of date constantly and most of the javadocs text is not usually helpping too much, long discussions I've seen around this.\nAnyway, maybe on other situations it's ok, but in the case for this StunnerEditor type, I think the API is really clear (open(), close(), destroy(), etc), easy to read and to use, so don't really think it's necessary to add javadocs anyway", "author": "romartin", "createdAt": "2021-03-10T23:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3OTM3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "55b03618111596d49f8bfd8d7973f02851d5d238", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java\nindex 77a3753d52..2cecfceff6 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java\n\n@@ -61,6 +61,11 @@ public class StunnerEditor {\n     private Consumer<Throwable> exceptionProcessor;\n     private static int contentHash;\n \n+    // CDI proxy.\n+    public StunnerEditor() {\n+        this(null, null, null, null, null, null);\n+    }\n+\n     @Inject\n     public StunnerEditor(ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances,\n                          ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NTE5MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529485191", "bodyText": "Does it make sense to add some cases where opening ends in failure? For exampletestOpenFailure() ?", "author": "domhanak", "createdAt": "2020-11-24T11:47:43Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.ManagedInstanceStub;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramImpl;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.diagram.MetadataImpl;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.mockito.Mock;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class StunnerEditorTest {", "originalCommit": "1635263895eddfecc1a5ea04640f084fc208fd77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NjY0NQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591966645", "bodyText": "done, there exist the tests for invalid stuff, see testHandleParsingError or testHandleError", "author": "romartin", "createdAt": "2021-03-10T23:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NTE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "55b03618111596d49f8bfd8d7973f02851d5d238", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java\nindex a51ba97a78..a65147987b 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java\n\n@@ -149,7 +149,7 @@ public class StunnerEditorTest {\n         assertEquals(viewerSession, tested.getSession());\n         verify(sessionViewerPresenters).get();\n         verify(sessionEditorPresenters, never()).get();\n-        verify(sessionViewerPresenter).withPalette(eq(true));\n+        verify(sessionViewerPresenter).withPalette(eq(false));\n         verify(sessionViewerPresenter).withToolbar(eq(false));\n         assertTrue(tested.isReadOnly());\n     }\n"}}, {"oid": "55b03618111596d49f8bfd8d7973f02851d5d238", "url": "https://github.com/kiegroup/kie-wb-common/commit/55b03618111596d49f8bfd8d7973f02851d5d238", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2020-11-27T21:27:13Z", "type": "forcePushed"}, {"oid": "b3a7fc60353e31282be510ee86f2acb440c8e838", "url": "https://github.com/kiegroup/kie-wb-common/commit/b3a7fc60353e31282be510ee86f2acb440c8e838", "message": "Tests", "committedDate": "2020-12-01T00:58:00Z", "type": "forcePushed"}, {"oid": "64ea710dd24391c0c48afc841d010697308aa137", "url": "https://github.com/kiegroup/kie-wb-common/commit/64ea710dd24391c0c48afc841d010697308aa137", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-01-14T22:59:11Z", "type": "forcePushed"}, {"oid": "031f11eb7e135eb3cdc5287935694670538b5d8d", "url": "https://github.com/kiegroup/kie-wb-common/commit/031f11eb7e135eb3cdc5287935694670538b5d8d", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-01-22T23:49:31Z", "type": "forcePushed"}, {"oid": "1c95e36d4a51ebc79e932408b180083c2a1a44d6", "url": "https://github.com/kiegroup/kie-wb-common/commit/1c95e36d4a51ebc79e932408b180083c2a1a44d6", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-01-26T22:11:58Z", "type": "forcePushed"}, {"oid": "dd0938d41708776173fa326bd4c8a727ba6323e1", "url": "https://github.com/kiegroup/kie-wb-common/commit/dd0938d41708776173fa326bd4c8a727ba6323e1", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-01-27T00:53:50Z", "type": "forcePushed"}, {"oid": "fc1cda09336931f827f21a52ca1db97ec347d958", "url": "https://github.com/kiegroup/kie-wb-common/commit/fc1cda09336931f827f21a52ca1db97ec347d958", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-01-27T01:35:38Z", "type": "forcePushed"}, {"oid": "c342d163a406e567a3c745a0256d5fb4e3ea4e29", "url": "https://github.com/kiegroup/kie-wb-common/commit/c342d163a406e567a3c745a0256d5fb4e3ea4e29", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-02-03T00:25:14Z", "type": "forcePushed"}, {"oid": "37fffcd3b274a1c1d8d837603c8a00a8b3cd9b21", "url": "https://github.com/kiegroup/kie-wb-common/commit/37fffcd3b274a1c1d8d837603c8a00a8b3cd9b21", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-02-09T22:52:26Z", "type": "forcePushed"}, {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "url": "https://github.com/kiegroup/kie-wb-common/commit/b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-02-23T21:25:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNzY0MQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585017641", "bodyText": "What is a status of this TODO please?", "author": "jomarko", "createdAt": "2021-03-01T20:12:47Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -398,142 +311,136 @@ public void testInitialiseKieEditorForSession() {\n \n     @Test\n     public void testInitialiseKieEditorForSessionWhenInitializingKieEditorForSessionThenDiagramAlreadyLoaded() {\n-        doNothing().when(diagramEditor).superInitialiseKieEditorForSession(any());\n         final InOrder inOrder = inOrder(diagramEditor);\n-\n         diagramEditor.initialiseKieEditorForSession(diagram);\n-\n         inOrder.verify(diagramEditor).onDiagramLoad();\n         inOrder.verify(diagramEditor).superInitialiseKieEditorForSession(any());\n     }\n \n     @Test\n     public void testSetupSearchComponent() {\n-\n         diagramEditor.setupSearchComponent();\n-\n         verify(searchBarComponent).init(editorSearchIndex);\n         verify(multiPage).addTabBarWidget(searchBarComponentWidget);\n     }\n \n-    @Test\n-    public void testOnDiagramLoadWhenCanvasHandlerIsNotNull() {\n-        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n-        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n-        when(canvasHandler.getDiagram()).thenReturn(diagram);\n-\n-        open();\n-\n-        verify(decisionNavigatorDock, atLeast(1)).reload();\n-        verify(expressionEditor, atLeast(1)).setToolbarStateHandler(Mockito.<DMNProjectToolbarStateHandler>any());\n-        verify(dataTypesPage, atLeast(1)).reload();\n-        verify(layoutHelper).applyLayout(diagram, layoutExecutor);\n-        verify(includedModelsPage, atLeast(1)).reload();\n-        verify(lazyCanvasFocusUtils, atLeast(1)).releaseFocus();\n-    }\n-\n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n-    public void testOnDiagramLoadWhenCanvasHandlerIsNull() {\n-        diagramEditor.onDiagramLoad();\n-\n-        verify(expressionEditor, never()).setToolbarStateHandler(Mockito.<DMNProjectToolbarStateHandler>any());\n-        verify(decisionNavigatorDock, never()).reload();\n-        verify(decisionNavigatorDock, never()).open();\n-        verify(dataTypesPage, never()).reload();\n-        verify(includedModelsPage, never()).reload();\n-        verify(lazyCanvasFocusUtils, never()).releaseFocus();\n-    }\n-\n     @Test\n     public void testOnFocus() {\n-        doNothing().when(diagramEditor).superDoFocus();\n-\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n         diagramEditor.onFocus();\n-\n-        verify(diagramEditor).superDoFocus();\n+        verify(stunnerEditor).focus();\n+        verify(stunnerEditor, never()).lostFocus();\n         verify(diagramEditor).onDiagramLoad();\n         verify(dataTypesPage).onFocus();\n+        verify(dataTypesPage, never()).onLostFocus();\n         verify(dataTypesPage).enableShortcuts();\n+        verify(dataTypesPage, never()).disableShortcuts();\n     }\n \n     @Test\n     public void testOnLostFocus() {\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n         diagramEditor.onLostFocus();\n-\n+        verify(stunnerEditor).lostFocus();\n+        verify(stunnerEditor, never()).focus();\n         verify(dataTypesPage).onLostFocus();\n-    }\n-\n-    @Test\n-    public void testOnEditExpressionEvent() {\n-        when(editExpressionEvent.getSession()).thenReturn(dmnEditorSession);\n-        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n-        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n-\n-        open();\n-\n-        diagramEditor.onEditExpressionEvent(editExpressionEvent);\n-\n-        verify(searchBarComponent).disableSearch();\n-        verify(sessionCommandManager).execute(eq(canvasHandler),\n-                                              Mockito.<NavigateToExpressionEditorCommand>any());\n+        verify(dataTypesPage, never()).onFocus();\n     }\n \n     @Test\n     public void testOnDataTypePageNavTabActiveEvent() {\n         diagramEditor.onDataTypePageNavTabActiveEvent(mock(DataTypePageTabActiveEvent.class));\n-\n         verify(multiPage).selectPage(DATA_TYPES_PAGE_INDEX);\n     }\n \n     @Test\n     public void testOnDataTypeEditModeToggleWhenEditModeIsEnabled() {\n         final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n-\n         doNothing().when(diagramEditor).disableMenuItem(any());\n         when(editModeToggleEvent.isEditModeEnabled()).thenReturn(true);\n-\n         diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n-\n         verify(diagramEditor).disableMenuItem(MenuItems.SAVE);\n     }\n \n     @Test\n     public void testOnDataTypeEditModeToggleWhenEditModeIsNotEnabled() {\n         final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n-\n         doNothing().when(diagramEditor).enableMenuItem(any());\n         when(editModeToggleEvent.isEditModeEnabled()).thenReturn(false);\n-\n         diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n-\n         verify(diagramEditor).enableMenuItem(MenuItems.SAVE);\n     }\n \n     @Test\n     public void testShowDocks() {\n         diagramEditor.showDocks();\n-\n         verify(decisionNavigatorDock).open();\n         verify(docks).show();\n     }\n \n     @Test\n     public void testHideDocks() {\n         diagramEditor.hideDocks();\n-\n         verify(decisionNavigatorDock).close();\n         verify(decisionNavigatorDock).resetContent();\n         verify(docks).hide();\n     }\n \n     @Override\n     public void testDocksQualifiers() {\n-        final Annotation[] qualifiers = presenter.getDockQualifiers();\n+        final Annotation[] qualifiers = diagramEditor.getDockQualifiers();\n         assertEquals(1, qualifiers.length);\n         assertEquals(DMNEditor.class, qualifiers[0].annotationType());\n     }\n \n+    /*\n+\n+   // TODO: Complete all below", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNDkzMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591934931", "bodyText": "done", "author": "romartin", "createdAt": "2021-03-10T23:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNzY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java\nindex 1fd4a0d1f0..3ec68a8beb 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java\n\n@@ -393,17 +405,13 @@ public class DMNDiagramEditorTest extends AbstractProjectDiagramEditorTest {\n         assertEquals(DMNEditor.class, qualifiers[0].annotationType());\n     }\n \n-    /*\n-\n-   // TODO: Complete all below\n-\n-     @Test\n+    @Test\n     public void testOnEditExpressionEvent() {\n         when(editExpressionEvent.getSession()).thenReturn(dmnEditorSession);\n         when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n         when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n \n-        open();\n+        diagramEditor.open(diagram);\n \n         diagramEditor.onEditExpressionEvent(editExpressionEvent);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyMTAxNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585021017", "bodyText": "not sure if this is needed, however if yes, then 2021", "author": "jomarko", "createdAt": "2021-03-01T20:18:20Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTAwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935002", "bodyText": "done", "author": "romartin", "createdAt": "2021-03-10T23:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyMTAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java\nindex 3c831b7737..03ca15fc59 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNDY0Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585024642", "bodyText": "is this a proper year please?", "author": "jomarko", "createdAt": "2021-03-01T20:24:39Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTI3MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935270", "bodyText": "done", "author": "romartin", "createdAt": "2021-03-10T23:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNDY0Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNDkzNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585024936", "bodyText": "What is status of this TODO please?", "author": "jomarko", "createdAt": "2021-03-01T20:25:09Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -15,98 +15,8 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-import java.util.Collections;\n+// TODO @RunWith(GwtMockitoTestRunner.class)", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\nindex 0a6991a91f..edeaa1cb4c 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\n\n@@ -15,8 +15,57 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-// TODO @RunWith(GwtMockitoTestRunner.class)\n-public class DMNDiagramEditorTest {\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.client.editors.types.listview.common.DataTypeEditModeToggleEvent;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditor;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditorTest;\n+import org.uberfire.promise.SyncPromises;\n \n-    // TODO\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNDiagramEditorTest extends AbstractDMNDiagramEditorTest {\n+\n+    @Override\n+    protected AbstractDMNDiagramEditor getEditor() {\n+        return new DMNDiagramEditor(view,\n+                                    placeManager,\n+                                    multiPageEditorContainerView,\n+                                    stunnerEditor,\n+                                    editorSearchIndex,\n+                                    searchBarComponent,\n+                                    sessionManager,\n+                                    sessionCommandManager,\n+                                    documentationView,\n+                                    clientTranslationService,\n+                                    refreshFormPropertiesEventSourceMock,\n+                                    decisionNavigatorDock,\n+                                    diagramPropertiesDock,\n+                                    diagramPreviewDock,\n+                                    layoutHelper,\n+                                    layoutExecutor,\n+                                    dataTypesPage,\n+                                    clientDiagramService,\n+                                    feelInitializer,\n+                                    canvasFileExport,\n+                                    new SyncPromises(), includedModelsPage,\n+                                    includedModelContext,\n+                                    guidedTourBridgeInitializer,\n+                                    drdNameChanger,\n+                                    readonlyProvider,\n+                                    lazyCanvasFocusUtils,\n+                                    sessionCommands) {\n+            @Override\n+            protected ElementWrapperWidget<?> getWidget(final HTMLElement element) {\n+                return searchBarComponentWidget;\n+            }\n+\n+            @Override\n+            protected void scheduleOnDataTypeEditModeToggleCallback(final DataTypeEditModeToggleEvent event) {\n+                //Override deferral to DomGlobal's timer for Unit Tests\n+                getOnDataTypeEditModeToggleCallback(event).onInvoke(event);\n+            }\n+        };\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTI1Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585025257", "bodyText": "what is status of this todo please?", "author": "jomarko", "createdAt": "2021-03-01T20:25:40Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java", "diffHunk": "@@ -240,9 +190,10 @@ private Path makeMetadataPath(final Metadata metadata) {\n         return PathFactory.newPath(fileName, uri + \"/\" + URIUtil.encode(fileName));\n     }\n \n+    // TODO: This was called by menus... who calls this now?", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTMzNw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935337", "bodyText": "resolved", "author": "romartin", "createdAt": "2021-03-10T23:00:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java\nindex 929d1ddd01..9a5a9a6141 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java\n\n@@ -190,9 +190,8 @@ public class DMNDiagramEditor extends AbstractDMNDiagramEditor {\n         return PathFactory.newPath(fileName, uri + \"/\" + URIUtil.encode(fileName));\n     }\n \n-    // TODO: This was called by menus... who calls this now?\n     @SuppressWarnings(\"unchecked\")\n-    private void doSave() {\n+    void doSave() {\n         final Path path = stunnerEditor.getDiagram().getMetadata().getPath();\n \n         getContent().then(xml -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTY2Mw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585025663", "bodyText": "will not comment this kind of change furthermore, however I am not sure if we should change the year for existing files.", "author": "jomarko", "createdAt": "2021-03-01T20:26:18Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTU2NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935564", "bodyText": "done", "author": "romartin", "createdAt": "2021-03-10T23:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTY2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\nindex 537be7a35a..c5c86b8aa0 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2021 Red Hat, Inc. and/or its affiliates.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTgzMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585025832", "bodyText": "what is a status of this todo please?", "author": "jomarko", "createdAt": "2021-03-01T20:26:34Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -15,251 +15,7 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-import com.google.gwtmockito.GwtMockitoTestRunner;\n-import elemental2.dom.HTMLElement;\n-import org.appformer.client.context.EditorContextProvider;\n-import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kie.workbench.common.dmn.client.editors.types.listview.common.DataTypeEditModeToggleEvent;\n-import org.kie.workbench.common.dmn.showcase.client.navigator.DMNVFSService;\n-import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditor;\n-import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditorTest;\n-import org.kie.workbench.common.stunner.core.client.canvas.util.CanvasFileExport;\n-import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n-import org.kie.workbench.common.stunner.kogito.client.PromiseMock;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mock;\n-import org.uberfire.backend.vfs.Path;\n-import org.uberfire.client.promise.Promises;\n-import org.uberfire.ext.editor.commons.client.file.popups.CopyPopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.file.popups.DeletePopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.file.popups.RenamePopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.menu.BasicFileMenuBuilderImpl;\n-import org.uberfire.ext.editor.commons.client.menu.RestoreVersionCommandProvider;\n-import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n-import org.uberfire.mvp.Command;\n-import org.uberfire.mvp.PlaceRequest;\n-import org.uberfire.promise.SyncPromises;\n-import org.uberfire.util.URIUtil;\n-import org.uberfire.workbench.events.NotificationEvent;\n-import org.uberfire.workbench.model.menu.MenuItem;\n+// TODO @RunWith(GwtMockitoTestRunner.class)", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTcxNQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935715", "bodyText": "rolled-back and fixed, done!", "author": "romartin", "createdAt": "2021-03-10T23:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "chunk": "diff --git a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\nindex 537be7a35a..c5c86b8aa0 100644\n--- a/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\n+++ b/kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java\n\n@@ -15,7 +15,169 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-// TODO @RunWith(GwtMockitoTestRunner.class)\n-public class DMNDiagramEditorTest {\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.client.editors.types.listview.common.DataTypeEditModeToggleEvent;\n+import org.kie.workbench.common.dmn.showcase.client.navigator.DMNVFSService;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditor;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditorTest;\n+import org.kie.workbench.common.stunner.core.client.PromiseMock;\n+import org.kie.workbench.common.stunner.core.client.canvas.util.CanvasFileExport;\n+import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.mocks.EventSourceMock;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.promise.SyncPromises;\n+import org.uberfire.util.URIUtil;\n+import org.uberfire.workbench.events.NotificationEvent;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNDiagramEditorTest extends AbstractDMNDiagramEditorTest {\n+\n+    private final String FILE_NAME = \"file name.dmn\";\n+\n+    private final String CONTENT = \"xml-content-of-dmn-file\";\n+\n+    @Mock\n+    private DMNVFSService vfsService;\n+\n+    @Mock\n+    private EventSourceMock<NotificationEvent> notificationEventSourceMock;\n+\n+    @Mock\n+    private CanvasFileExport canvasFileExport;\n+\n+    @Captor\n+    private ArgumentCaptor<ServiceCallback<String>> serviceCallbackArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<Path> pathArgumentCaptor;\n+\n+    @Override\n+    protected AbstractDMNDiagramEditor getEditor() {\n+        return new DMNDiagramEditor(view,\n+                                    placeManager,\n+                                    multiPageEditorContainerView,\n+                                    stunnerEditor,\n+                                    editorSearchIndex,\n+                                    searchBarComponent,\n+                                    sessionManager,\n+                                    sessionCommandManager,\n+                                    documentationView,\n+                                    clientTranslationService,\n+                                    refreshFormPropertiesEventSourceMock,\n+                                    decisionNavigatorDock,\n+                                    diagramPropertiesDock,\n+                                    diagramPreviewDock,\n+                                    layoutHelper,\n+                                    layoutExecutor,\n+                                    dataTypesPage,\n+                                    clientDiagramService,\n+                                    feelInitializer,\n+                                    canvasFileExport,\n+                                    new SyncPromises(),\n+                                    includedModelsPage,\n+                                    includedModelContext,\n+                                    guidedTourBridgeInitializer,\n+                                    drdNameChanger,\n+                                    notificationEventSourceMock,\n+                                    vfsService,\n+                                    readonlyProvider,\n+                                    lazyCanvasFocusUtils) {\n+\n+            @Override\n+            protected PlaceRequest getPlaceRequest() {\n+                return place;\n+            }\n+\n+            @Override\n+            protected ElementWrapperWidget<?> getWidget(final HTMLElement element) {\n+                return searchBarComponentWidget;\n+            }\n+\n+            @Override\n+            protected void scheduleOnDataTypeEditModeToggleCallback(final DataTypeEditModeToggleEvent event) {\n+                //Override deferral to DomGlobal's timer for Unit Tests\n+                getOnDataTypeEditModeToggleCallback(event).onInvoke(event);\n+            }\n+        };\n+    }\n+\n+    @Test\n+    @Override\n+    public void testOnStartup() {\n+        super.testOnStartup();\n+\n+        verify(editor).setContent(eq(\"\"), eq(\"\"));\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDoSave() {\n+        final PromiseMock promise = new PromiseMock();\n+        doReturn(promise.asPromise()).when(editor).getContent();\n+        promise.then(() -> CONTENT);\n+\n+        openDiagram();\n+\n+        reset(view);\n+\n+        ((DMNDiagramEditor) editor).doSave();\n+\n+        verify(vfsService).saveFile(pathArgumentCaptor.capture(),\n+                                    eq(CONTENT),\n+                                    serviceCallbackArgumentCaptor.capture());\n+\n+        final Path path = pathArgumentCaptor.getValue();\n+        assertThat(path).isNotNull();\n+        assertThat(path).isEqualTo(metadata.getPath());\n+\n+        final ServiceCallback<String> serviceCallback = serviceCallbackArgumentCaptor.getValue();\n+        assertThat(serviceCallback).isNotNull();\n+\n+        serviceCallback.onSuccess(CONTENT);\n+\n+        verify(editor, atLeastOnce()).resetContentHash();\n+        verify(notificationEventSourceMock).fire(any(NotificationEvent.class));\n+        verify(view).hideBusyIndicator();\n+    }\n+\n+    @Override\n+    public void testSetContentSuccess() {\n+        place.addParameter(DMNDiagramEditor.FILE_NAME_PARAMETER_NAME, FILE_NAME);\n+\n+        super.testSetContentSuccess();\n+\n+        assertMetadataPath();\n+    }\n+\n+    @Override\n+    protected void openDiagram() {\n+        place.addParameter(DMNDiagramEditor.FILE_NAME_PARAMETER_NAME, FILE_NAME);\n+\n+        super.openDiagram();\n+\n+        assertMetadataPath();\n+    }\n+\n+    private void assertMetadataPath() {\n+        final Path path = metadata.getPath();\n+        assertThat(path).isNotNull();\n+        assertThat(path.getFileName()).isEqualTo(FILE_NAME);\n+        assertThat(path.toURI()).isEqualTo(ROOT + \"/\" + URIUtil.encode(FILE_NAME));\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyOTQ5NA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585029494", "bodyText": "is getCanvasHandler() always non null? asking because it is a public method (without a javadoc or a assertion) and we always call some other method in a fluent API way.", "author": "jomarko", "createdAt": "2021-03-01T20:32:39Z", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.definition.exception.DefinitionNotFoundException;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.i18n.CoreTranslationMessages;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+@Dependent\n+public class StunnerEditor {\n+\n+    private final ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances;\n+    private final ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances;\n+    private final ClientTranslationService translationService;\n+    private final ManagedInstance<TextEditorView> xmlEditorViews;\n+    private final ErrorPopupPresenter errorPopupPresenter;\n+    private final StunnerEditorView view;\n+\n+    private SessionDiagramPresenter diagramPresenter;\n+    private TextEditorView xmlEditorView;\n+    private boolean isReadOnly;\n+    private Consumer<DiagramParsingException> parsingExceptionProcessor;\n+    private Consumer<Throwable> exceptionProcessor;\n+    private Consumer<Integer> onResetContentHashProcessor;\n+    private int contentHash;\n+\n+    // CDI proxy.\n+    public StunnerEditor() {\n+        this(null, null, null, null, null, null);\n+    }\n+\n+    @Inject\n+    public StunnerEditor(ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances,\n+                         ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances,\n+                         ClientTranslationService translationService,\n+                         ManagedInstance<TextEditorView> xmlEditorViews,\n+                         ErrorPopupPresenter errorPopupPresenter,\n+                         StunnerEditorView view) {\n+        this.editorSessionPresenterInstances = editorSessionPresenterInstances;\n+        this.viewerSessionPresenterInstances = viewerSessionPresenterInstances;\n+        this.translationService = translationService;\n+        this.xmlEditorViews = xmlEditorViews;\n+        this.errorPopupPresenter = errorPopupPresenter;\n+        this.isReadOnly = false;\n+        this.view = view;\n+        this.parsingExceptionProcessor = e -> {\n+        };\n+        this.exceptionProcessor = e -> {\n+        };\n+        this.onResetContentHashProcessor = e -> {\n+        };\n+    }\n+\n+    public void setReadOnly(boolean readOnly) {\n+        isReadOnly = readOnly;\n+    }\n+\n+    public void setOnResetContentHashProcessor(Consumer<Integer> onResetContentHashProcessor) {\n+        this.onResetContentHashProcessor = onResetContentHashProcessor;\n+    }\n+\n+    public void setParsingExceptionProcessor(Consumer<DiagramParsingException> parsingExceptionProcessor) {\n+        this.parsingExceptionProcessor = parsingExceptionProcessor;\n+    }\n+\n+    public void setExceptionProcessor(Consumer<Throwable> exceptionProcessor) {\n+        this.exceptionProcessor = exceptionProcessor;\n+    }\n+\n+    public void open(final Diagram diagram,\n+                     final Viewer.Callback callback) {\n+        // Close in case any diagram already being opened.\n+        close();\n+        // Instantiate.\n+        if (!isReadOnly) {\n+            diagramPresenter = editorSessionPresenterInstances.get();\n+        } else {\n+            diagramPresenter = viewerSessionPresenterInstances.get();\n+        }\n+        diagramPresenter.displayNotifications(type -> true);\n+        diagramPresenter.withPalette(!isReadOnly);\n+        diagramPresenter.withToolbar(false);\n+        view.setWidget(diagramPresenter.getView());\n+        // Open.\n+        diagramPresenter.open(diagram, new SessionPresenter.SessionPresenterCallback() {\n+            @Override\n+            public void onSuccess() {\n+                callback.onSuccess();\n+                resetContentHash();\n+            }\n+\n+            @Override\n+            public void onError(ClientRuntimeError error) {\n+                handleError(error);\n+                callback.onError(error);\n+            }\n+        });\n+    }\n+\n+    public int getCurrentContentHash() {\n+        if (isXmlEditorEnabled()) {\n+            return xmlEditorView.getContent().hashCode();\n+        }\n+        if (null == getSession()) {\n+            return 0;\n+        }\n+        if (null == getCanvasHandler().getDiagram()) {", "originalCommit": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzODQ3Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591938476", "bodyText": "well if the session is present, this class assumes the canvasHandler will be akways not null, as this class manages the session and the presenters and keeps both up to date. From the API perspective, if you call getCanvasHandler() it could be null or even throw a NPE, but because there is no session also", "author": "romartin", "createdAt": "2021-03-10T23:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyOTQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "2cb704c56069f287ba5c275604e57ee8fd77122e", "chunk": "diff --git a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java\nindex fa87f2a706..b44a5e3fba 100644\n--- a/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java\n+++ b/kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java\n\n@@ -25,7 +25,6 @@ import javax.inject.Inject;\n import com.google.gwt.core.client.Scheduler;\n import com.google.gwt.user.client.ui.IsWidget;\n import org.jboss.errai.ioc.client.api.ManagedInstance;\n-import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n"}}, {"oid": "2cb704c56069f287ba5c275604e57ee8fd77122e", "url": "https://github.com/kiegroup/kie-wb-common/commit/2cb704c56069f287ba5c275604e57ee8fd77122e", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-03-09T23:12:26Z", "type": "forcePushed"}, {"oid": "a5c00e0a47dd8dec86028b86b61fb7db279274ae", "url": "https://github.com/kiegroup/kie-wb-common/commit/a5c00e0a47dd8dec86028b86b61fb7db279274ae", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-03-10T23:48:34Z", "type": "forcePushed"}, {"oid": "e89831a11670a84cd13610ed76a133c308ef3916", "url": "https://github.com/kiegroup/kie-wb-common/commit/e89831a11670a84cd13610ed76a133c308ef3916", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-03-21T21:07:26Z", "type": "forcePushed"}, {"oid": "30ed5073bf7cd9bdcef450561af7208499c341a8", "url": "https://github.com/kiegroup/kie-wb-common/commit/30ed5073bf7cd9bdcef450561af7208499c341a8", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-03-25T23:39:05Z", "type": "commit"}, {"oid": "30ed5073bf7cd9bdcef450561af7208499c341a8", "url": "https://github.com/kiegroup/kie-wb-common/commit/30ed5073bf7cd9bdcef450561af7208499c341a8", "message": "KOGITO-3891 & KOGITO-540: Editors refactoring & BPMN editor readonly support", "committedDate": "2021-03-25T23:39:05Z", "type": "forcePushed"}]}