{"pr_number": 392, "pr_title": "feat!: async connection API", "pr_createdAt": "2020-08-19T16:40:34Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/392", "timeline": [{"oid": "ec4cc303a4e71dd9ae507124131a8172252a1648", "url": "https://github.com/googleapis/java-spanner/commit/ec4cc303a4e71dd9ae507124131a8172252a1648", "message": "feat: support setting timeout per RPC\n\nThe Spanner client allows a user to set custom timeouts while creating a\nSpannerOptions instance, but these timeouts are static and are applied to\nall invocations of the RPCs. This change introduces the possibility to set\ncustom timeouts and other call options on a per-RPC basis.\n\nFixes #378", "committedDate": "2020-08-10T10:26:13Z", "type": "commit"}, {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074", "url": "https://github.com/googleapis/java-spanner/commit/dd2715702423eedc8c9e907e6ccf1e33876f6074", "message": "fix: change grpc deps from test to compile scope", "committedDate": "2020-08-10T13:14:39Z", "type": "commit"}, {"oid": "2ae9a115ef4cf31d52bef1e057749099f5cad13d", "url": "https://github.com/googleapis/java-spanner/commit/2ae9a115ef4cf31d52bef1e057749099f5cad13d", "message": "feat: add async api for connection", "committedDate": "2020-08-19T16:39:22Z", "type": "commit"}, {"oid": "5d28817d92eb57791d646542d8e319831aea9669", "url": "https://github.com/googleapis/java-spanner/commit/5d28817d92eb57791d646542d8e319831aea9669", "message": "fix: fix test failures", "committedDate": "2020-08-23T17:28:32Z", "type": "commit"}, {"oid": "b5655607f8cd98a4dfdddd2ba78f681ab71b9f01", "url": "https://github.com/googleapis/java-spanner/commit/b5655607f8cd98a4dfdddd2ba78f681ab71b9f01", "message": "fix: move state handling from callback to callable", "committedDate": "2020-08-24T06:35:46Z", "type": "commit"}, {"oid": "24461111fa29798bbfaf3fb7e4c5f4b11e3efd4d", "url": "https://github.com/googleapis/java-spanner/commit/24461111fa29798bbfaf3fb7e4c5f4b11e3efd4d", "message": "fix: fix integration tests with emulator", "committedDate": "2020-08-24T17:09:22Z", "type": "commit"}, {"oid": "321d23cf0e659bcc431a23272508850221850bc0", "url": "https://github.com/googleapis/java-spanner/commit/321d23cf0e659bcc431a23272508850221850bc0", "message": "fix: fix timeout integration test on emulator", "committedDate": "2020-08-24T18:31:05Z", "type": "commit"}, {"oid": "c753e7c86a1822da404bd396543a164b89e03444", "url": "https://github.com/googleapis/java-spanner/commit/c753e7c86a1822da404bd396543a164b89e03444", "message": "fix: prevent flakiness in DDL tests", "committedDate": "2020-08-24T18:52:04Z", "type": "commit"}, {"oid": "0a80a858e8867d657e815b40f48405c7c2b08561", "url": "https://github.com/googleapis/java-spanner/commit/0a80a858e8867d657e815b40f48405c7c2b08561", "message": "fix: fix clirr build failures", "committedDate": "2020-08-25T12:05:46Z", "type": "commit"}, {"oid": "79308b6d5e16823b57e26ae2059a9da303f33e84", "url": "https://github.com/googleapis/java-spanner/commit/79308b6d5e16823b57e26ae2059a9da303f33e84", "message": "fix: do not set transaction state for Aborted err", "committedDate": "2020-08-25T12:06:01Z", "type": "commit"}, {"oid": "8d5a61874ceb44ef06b844ba28cfff417a65167a", "url": "https://github.com/googleapis/java-spanner/commit/8d5a61874ceb44ef06b844ba28cfff417a65167a", "message": "Merge branch 'master' into async-connection", "committedDate": "2020-08-25T12:29:20Z", "type": "commit"}, {"oid": "2d531c5b7d901038257f0df6e8cfea711bb9480d", "url": "https://github.com/googleapis/java-spanner/commit/2d531c5b7d901038257f0df6e8cfea711bb9480d", "message": "fix: set transaction state after retry", "committedDate": "2020-08-25T13:13:54Z", "type": "commit"}, {"oid": "1ce6795ed1b1a5f79f1df9c1b1918ee180a86e67", "url": "https://github.com/googleapis/java-spanner/commit/1ce6795ed1b1a5f79f1df9c1b1918ee180a86e67", "message": "cleanup: remove sync methods and use async instead", "committedDate": "2020-08-25T15:31:26Z", "type": "commit"}, {"oid": "a33a31f3b45fa59932d15a5b6cc99388751ee7cc", "url": "https://github.com/googleapis/java-spanner/commit/a33a31f3b45fa59932d15a5b6cc99388751ee7cc", "message": "cleanup: remove unused code", "committedDate": "2020-08-25T15:38:05Z", "type": "commit"}, {"oid": "911179866436e4221df3a61f3fe4e2cfabd3d139", "url": "https://github.com/googleapis/java-spanner/commit/911179866436e4221df3a61f3fe4e2cfabd3d139", "message": "feat: make ddl async", "committedDate": "2020-08-25T15:59:52Z", "type": "commit"}, {"oid": "2711d470ec060d84982060e3b4b17c9d51c84959", "url": "https://github.com/googleapis/java-spanner/commit/2711d470ec060d84982060e3b4b17c9d51c84959", "message": "fix: reduce timeout and remove debug info", "committedDate": "2020-08-25T16:04:03Z", "type": "commit"}, {"oid": "895b0243045d38274f63343e95c57a9d439d2cb8", "url": "https://github.com/googleapis/java-spanner/commit/895b0243045d38274f63343e95c57a9d439d2cb8", "message": "feat: make runBatch async", "committedDate": "2020-08-25T17:28:33Z", "type": "commit"}, {"oid": "3b8d29ecc440d6d8869b02dfa19a73371a686366", "url": "https://github.com/googleapis/java-spanner/commit/3b8d29ecc440d6d8869b02dfa19a73371a686366", "message": "test: set forkCount to 1 to investigate test failure", "committedDate": "2020-08-25T17:29:03Z", "type": "commit"}, {"oid": "fdc64a3178c316a041331ae7631dcb3d606a7ae4", "url": "https://github.com/googleapis/java-spanner/commit/fdc64a3178c316a041331ae7631dcb3d606a7ae4", "message": "fix: linting + clirr", "committedDate": "2020-08-25T17:53:07Z", "type": "commit"}, {"oid": "c6ff32d23775ee59c387f26e653a6ecc16b64b90", "url": "https://github.com/googleapis/java-spanner/commit/c6ff32d23775ee59c387f26e653a6ecc16b64b90", "message": "fix: prevent deadlock in DmlBatch", "committedDate": "2020-08-25T18:46:23Z", "type": "commit"}, {"oid": "3096ef691262d4d761ce50a77a5ca72aa927e84c", "url": "https://github.com/googleapis/java-spanner/commit/3096ef691262d4d761ce50a77a5ca72aa927e84c", "message": "fix: fix DMLBatch state handling", "committedDate": "2020-08-26T11:54:45Z", "type": "commit"}, {"oid": "039541334d6ea85c75cc9398f0c6bf1739c29c26", "url": "https://github.com/googleapis/java-spanner/commit/039541334d6ea85c75cc9398f0c6bf1739c29c26", "message": "tests: add tests for aborted async transactions", "committedDate": "2020-08-26T15:40:44Z", "type": "commit"}, {"oid": "bb130b1084f5337fc6df1edec6d04a12edbde243", "url": "https://github.com/googleapis/java-spanner/commit/bb130b1084f5337fc6df1edec6d04a12edbde243", "message": "test: add aborted tests", "committedDate": "2020-08-26T20:25:32Z", "type": "commit"}, {"oid": "35210df1c148b1fa69d5823cd0a6646bd716be6c", "url": "https://github.com/googleapis/java-spanner/commit/35210df1c148b1fa69d5823cd0a6646bd716be6c", "message": "fix: add change to clirr + more tests", "committedDate": "2020-08-29T17:01:30Z", "type": "commit"}, {"oid": "2e84dc16f6d24a8807d267dbc7a136ad6cc57f09", "url": "https://github.com/googleapis/java-spanner/commit/2e84dc16f6d24a8807d267dbc7a136ad6cc57f09", "message": "fix: require a rollback after a tx has aborted", "committedDate": "2020-08-30T05:39:01Z", "type": "commit"}, {"oid": "2500e426e608c5471ed188d8cc0302564e555506", "url": "https://github.com/googleapis/java-spanner/commit/2500e426e608c5471ed188d8cc0302564e555506", "message": "docs: add javadoc for new methods", "committedDate": "2020-08-30T08:01:50Z", "type": "commit"}, {"oid": "24bc392e43fa93b6196b8157cb00682738514a62", "url": "https://github.com/googleapis/java-spanner/commit/24bc392e43fa93b6196b8157cb00682738514a62", "message": "tests: add integration tests", "committedDate": "2020-08-30T20:45:09Z", "type": "commit"}, {"oid": "d671278793351f40447e22cb9cfec8eee5a47129", "url": "https://github.com/googleapis/java-spanner/commit/d671278793351f40447e22cb9cfec8eee5a47129", "message": "fix: wait for commit before select", "committedDate": "2020-08-31T18:56:42Z", "type": "commit"}, {"oid": "a25857945880640f74e1e4084f17010dc6de82e8", "url": "https://github.com/googleapis/java-spanner/commit/a25857945880640f74e1e4084f17010dc6de82e8", "message": "fix: fix handling aborted commit", "committedDate": "2020-09-05T11:27:53Z", "type": "commit"}, {"oid": "2878257bbe8ca5a92beae9885849887d08b36bf7", "url": "https://github.com/googleapis/java-spanner/commit/2878257bbe8ca5a92beae9885849887d08b36bf7", "message": "docs: document behavior -Async methods", "committedDate": "2020-09-05T12:09:20Z", "type": "commit"}, {"oid": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "url": "https://github.com/googleapis/java-spanner/commit/81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "message": "fix: iterating without callback could cause exception", "committedDate": "2020-09-08T05:21:02Z", "type": "commit"}, {"oid": "5c75bee6c7692ded2e0d33be8b9cd7941ad47d65", "url": "https://github.com/googleapis/java-spanner/commit/5c75bee6c7692ded2e0d33be8b9cd7941ad47d65", "message": "fix: remove todos and commented code", "committedDate": "2020-09-08T14:37:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NzQ0Nw==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484857447", "bodyText": "Changed to public to be accessible from the com.google.cloud.spanner.connection package.", "author": "olavloite", "createdAt": "2020-09-08T11:53:09Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/ErrorCode.java", "diffHunk": "@@ -89,7 +89,7 @@ static ErrorCode valueOf(String name, ErrorCode defaultValue) {\n   /**\n    * Returns the error code corresponding to a gRPC status, or {@code UNKNOWN} if not recognized.\n    */\n-  static ErrorCode fromGrpcStatus(Status status) {\n+  public static ErrorCode fromGrpcStatus(Status status) {", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1ODQ5Ng==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484858496", "bodyText": "Allow specifying a buffer size instead of always using a default size.", "author": "olavloite", "createdAt": "2020-09-08T11:55:09Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/ResultSets.java", "diffHunk": "@@ -65,8 +68,41 @@ public static AsyncResultSet toAsyncResultSet(ResultSet delegate) {\n    * ExecutorProvider}.\n    */\n   public static AsyncResultSet toAsyncResultSet(\n-      ResultSet delegate, ExecutorProvider executorProvider) {\n-    return new AsyncResultSetImpl(executorProvider, delegate, 100);\n+      ResultSet delegate, ExecutorProvider executorProvider, QueryOption... options) {\n+    Options readOptions = Options.fromQueryOptions(options);", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MjI4MA==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484872280", "bodyText": "Keeps track of whether this transaction has already aborted, and stops allowing any further statements on the transaction until it has been rolled back. Otherwise, a list of 'blind' async statements could lead to multiple unnecessary round-trips to the backend:\nconnection.executeUpdateAsync(statement1);\nconnection.executeUpdateAsync(statement2);\nconnection.commitAsync();\nIf the first statement in the example above aborts, the following statements will not be sent to the backend, but will return the aborted error of the first statement.", "author": "olavloite", "createdAt": "2020-09-08T12:20:27Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -65,12 +74,15 @@\n   private int transactionRetryAttempts;\n   private int successfulRetries;\n   private final List<TransactionRetryListener> transactionRetryListeners;\n-  private volatile TransactionContext txContext;\n+  private volatile ApiFuture<TransactionContext> txContextFuture;\n+  private volatile SettableApiFuture<Timestamp> commitTimestampFuture;\n   private volatile UnitOfWorkState state = UnitOfWorkState.STARTED;\n+  private volatile AbortedException abortedException;", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzI0OQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484873249", "bodyText": "We allow submitting a statement on an aborted transaction, as the aborted error will be returned through the ApiFuture that is returned. This guarantees that multiple blind async statements in a row will not cause unexpected exceptions.", "author": "olavloite", "createdAt": "2020-09-08T12:22:11Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -154,36 +166,71 @@ public boolean isReadOnly() {\n     return false;\n   }\n \n+  private static final ParsedStatement BEGIN_STATEMENT =\n+      StatementParser.INSTANCE.parse(Statement.of(\"BEGIN\"));\n+\n   @Override\n   void checkValidTransaction() {\n+    checkValidState();\n+    if (txContextFuture == null) {\n+      transactionStarted = Timestamp.now();\n+      txContextFuture =\n+          executeStatementAsync(\n+              BEGIN_STATEMENT,\n+              new Callable<TransactionContext>() {\n+                @Override\n+                public TransactionContext call() throws Exception {\n+                  return txManager.begin();\n+                }\n+              },\n+              SpannerGrpc.getBeginTransactionMethod());\n+    }\n+  }\n+\n+  private void checkValidState() {\n     ConnectionPreconditions.checkState(\n-        state == UnitOfWorkState.STARTED,\n+        this.state == UnitOfWorkState.STARTED || this.state == UnitOfWorkState.ABORTED,", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "51ef086926ff083af43c1f1dcc5182dab0d7992c", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java\nindex 2adf08b8..1e5c0574 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java\n\n@@ -210,6 +210,15 @@ class ReadWriteTransaction extends AbstractMultiUseTransaction {\n     // transaction is aborted by the backend. That means that we should not automatically create a\n     // new transaction for the following statement after a transaction has aborted, and instead we\n     // should wait until the application has rolled back the current transaction.\n+    //\n+    // Othwerwise the following list of statements could show unexpected behavior:\n+\n+    // connection.executeUpdateAsync(\"UPDATE FOO SET BAR=1 ...\");\n+    // connection.executeUpdateAsync(\"UPDATE BAR SET FOO=2 ...\");\n+    // connection.commitAsync();\n+    //\n+    // If the first update statement fails with an aborted exception, the second update statement\n+    // should not be executed in a new transaction, but should also abort.\n     return getState().isActive() || state == UnitOfWorkState.ABORTED;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzY4Nw==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484873687", "bodyText": "try-catch block removed, as the exception is returned by the ApiFuture.", "author": "olavloite", "createdAt": "2020-09-08T12:23:01Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -229,108 +275,138 @@ private void handlePossibleInvalidatingException(SpannerException e) {\n   }\n \n   @Override\n-  public ResultSet executeQuery(\n+  public ApiFuture<ResultSet> executeQueryAsync(\n       final ParsedStatement statement,\n       final AnalyzeMode analyzeMode,\n       final QueryOption... options) {\n     Preconditions.checkArgument(statement.isQuery(), \"Statement is not a query\");\n     checkValidTransaction();\n-    try {\n-      if (retryAbortsInternally) {\n-        return asyncExecuteStatement(\n-            statement,\n-            new Callable<ResultSet>() {\n-              @Override\n-              public ResultSet call() throws Exception {\n-                return runWithRetry(\n-                    new Callable<ResultSet>() {\n-                      @Override\n-                      public ResultSet call() throws Exception {\n-                        try {\n-                          getStatementExecutor()\n-                              .invokeInterceptors(\n-                                  statement,\n-                                  StatementExecutionStep.EXECUTE_STATEMENT,\n-                                  ReadWriteTransaction.this);\n-                          ResultSet delegate =\n-                              DirectExecuteResultSet.ofResultSet(\n-                                  internalExecuteQuery(statement, analyzeMode, options));\n-                          return createAndAddRetryResultSet(\n-                              delegate, statement, analyzeMode, options);\n-                        } catch (AbortedException e) {\n-                          throw e;\n-                        } catch (SpannerException e) {\n-                          createAndAddFailedQuery(e, statement, analyzeMode, options);\n-                          throw e;\n+\n+    ApiFuture<ResultSet> res;\n+    if (retryAbortsInternally) {", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NDA2MA==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484874060", "bodyText": "try-catch block removed as exceptions are returned by the ApiFuture.", "author": "olavloite", "createdAt": "2020-09-08T12:23:36Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -229,108 +275,138 @@ private void handlePossibleInvalidatingException(SpannerException e) {\n   }\n \n   @Override\n-  public ResultSet executeQuery(\n+  public ApiFuture<ResultSet> executeQueryAsync(\n       final ParsedStatement statement,\n       final AnalyzeMode analyzeMode,\n       final QueryOption... options) {\n     Preconditions.checkArgument(statement.isQuery(), \"Statement is not a query\");\n     checkValidTransaction();\n-    try {\n-      if (retryAbortsInternally) {\n-        return asyncExecuteStatement(\n-            statement,\n-            new Callable<ResultSet>() {\n-              @Override\n-              public ResultSet call() throws Exception {\n-                return runWithRetry(\n-                    new Callable<ResultSet>() {\n-                      @Override\n-                      public ResultSet call() throws Exception {\n-                        try {\n-                          getStatementExecutor()\n-                              .invokeInterceptors(\n-                                  statement,\n-                                  StatementExecutionStep.EXECUTE_STATEMENT,\n-                                  ReadWriteTransaction.this);\n-                          ResultSet delegate =\n-                              DirectExecuteResultSet.ofResultSet(\n-                                  internalExecuteQuery(statement, analyzeMode, options));\n-                          return createAndAddRetryResultSet(\n-                              delegate, statement, analyzeMode, options);\n-                        } catch (AbortedException e) {\n-                          throw e;\n-                        } catch (SpannerException e) {\n-                          createAndAddFailedQuery(e, statement, analyzeMode, options);\n-                          throw e;\n+\n+    ApiFuture<ResultSet> res;\n+    if (retryAbortsInternally) {\n+      res =\n+          executeStatementAsync(\n+              statement,\n+              new Callable<ResultSet>() {\n+                @Override\n+                public ResultSet call() throws Exception {\n+                  return runWithRetry(\n+                      new Callable<ResultSet>() {\n+                        @Override\n+                        public ResultSet call() throws Exception {\n+                          try {\n+                            getStatementExecutor()\n+                                .invokeInterceptors(\n+                                    statement,\n+                                    StatementExecutionStep.EXECUTE_STATEMENT,\n+                                    ReadWriteTransaction.this);\n+                            ResultSet delegate =\n+                                DirectExecuteResultSet.ofResultSet(\n+                                    internalExecuteQuery(statement, analyzeMode, options));\n+                            return createAndAddRetryResultSet(\n+                                delegate, statement, analyzeMode, options);\n+                          } catch (AbortedException e) {\n+                            throw e;\n+                          } catch (SpannerException e) {\n+                            createAndAddFailedQuery(e, statement, analyzeMode, options);\n+                            throw e;\n+                          }\n                         }\n-                      }\n-                    });\n-              }\n-            },\n-            InterceptorsUsage\n-                .IGNORE_INTERCEPTORS); // ignore interceptors here as they are invoked in the\n-        // Callable.\n-      } else {\n-        return super.executeQuery(statement, analyzeMode, options);\n-      }\n-    } catch (SpannerException e) {\n-      handlePossibleInvalidatingException(e);\n-      throw e;\n+                      });\n+                }\n+              },\n+              // ignore interceptors here as they are invoked in the Callable.\n+              InterceptorsUsage.IGNORE_INTERCEPTORS,\n+              ImmutableList.<MethodDescriptor<?, ?>>of(SpannerGrpc.getExecuteStreamingSqlMethod()));\n+    } else {\n+      res = super.executeQueryAsync(statement, analyzeMode, options);\n     }\n+\n+    ApiFutures.addCallback(\n+        res,\n+        new ApiFutureCallback<ResultSet>() {\n+          @Override\n+          public void onFailure(Throwable t) {\n+            if (t instanceof SpannerException) {\n+              handlePossibleInvalidatingException((SpannerException) t);\n+            }\n+          }\n+\n+          @Override\n+          public void onSuccess(ResultSet result) {}\n+        },\n+        MoreExecutors.directExecutor());\n+    return res;\n   }\n \n   @Override\n-  public long executeUpdate(final ParsedStatement update) {\n+  public ApiFuture<Long> executeUpdateAsync(final ParsedStatement update) {\n     Preconditions.checkNotNull(update);\n     Preconditions.checkArgument(update.isUpdate(), \"The statement is not an update statement\");\n     checkValidTransaction();\n-    try {\n-      if (retryAbortsInternally) {\n-        return asyncExecuteStatement(\n-            update,\n-            new Callable<Long>() {\n-              @Override\n-              public Long call() throws Exception {\n-                return runWithRetry(\n-                    new Callable<Long>() {\n-                      @Override\n-                      public Long call() throws Exception {\n-                        try {\n-                          getStatementExecutor()\n-                              .invokeInterceptors(\n-                                  update,\n-                                  StatementExecutionStep.EXECUTE_STATEMENT,\n-                                  ReadWriteTransaction.this);\n-                          long updateCount = txContext.executeUpdate(update.getStatement());\n-                          createAndAddRetriableUpdate(update, updateCount);\n-                          return updateCount;\n-                        } catch (AbortedException e) {\n-                          throw e;\n-                        } catch (SpannerException e) {\n-                          createAndAddFailedUpdate(e, update);\n-                          throw e;\n+    ApiFuture<Long> res;\n+    if (retryAbortsInternally) {", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzMTgzOQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484931839", "bodyText": "Ensure that only one retry is executed at any time. Previously, a retry would normally be executed by the connection executor. Now, a retry could also be initiated by a worker thread of an AsyncResultSet. The worker thread of an AsyncResultSet will iterate over the underlying ResultSet and buffer the results. Each call to ResultSet#next() on the underlying result set could cause an AbortedException, and will trigger a retry of the transaction.", "author": "olavloite", "createdAt": "2020-09-08T13:44:41Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -508,18 +624,21 @@ public Void call() throws Exception {\n    */\n   <T> T runWithRetry(Callable<T> callable) throws SpannerException {\n     while (true) {\n-      try {\n-        return callable.call();\n-      } catch (final AbortedException aborted) {\n-        if (retryAbortsInternally) {\n-          handleAborted(aborted);\n-        } else {\n-          throw aborted;\n+      synchronized (abortedLock) {", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c50f1edef519dcb1fbe79b6ca0ffc6a98e272b73", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java\nindex 2adf08b8..0a8e322e 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java\n\n@@ -629,11 +638,7 @@ class ReadWriteTransaction extends AbstractMultiUseTransaction {\n         try {\n           return callable.call();\n         } catch (final AbortedException aborted) {\n-          if (retryAbortsInternally) {\n-            handleAborted(aborted);\n-          } else {\n-            throw aborted;\n-          }\n+          handleAborted(aborted);\n         } catch (SpannerException e) {\n           throw e;\n         } catch (Exception e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1NzcxMQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484957711", "bodyText": "This is no longer needed thanks to the new feature in the client library for setting a timeout per RPC.", "author": "olavloite", "createdAt": "2020-09-08T14:19:36Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/StatementExecutor.java", "diffHunk": "@@ -151,18 +180,6 @@ private static ExecutorService createExecutorService() {\n     this.interceptors = Collections.unmodifiableList(interceptors);\n   }\n \n-  /**\n-   * Recreates this {@link StatementExecutor} and its {@link ExecutorService}. This can be necessary\n-   * if a statement times out or is cancelled, and it cannot be guaranteed that the statement\n-   * execution can be terminated. In order to prevent the single threaded {@link ExecutorService} to\n-   * continue to block on the timed out/cancelled statement, a new {@link ExecutorService} is\n-   * created.\n-   */\n-  void recreate() {", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk1ODc3MQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484958771", "bodyText": "State added as a commitAsync will initiate a commit, but return before the outcome of the commit is known. Setting this state is needed in order to know that the following statement should be executed in a new transaction.", "author": "olavloite", "createdAt": "2020-09-08T14:20:56Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -39,9 +41,11 @@\n \n   enum UnitOfWorkState {\n     STARTED,\n+    COMMITTING,", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2Mzk0OQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484963949", "bodyText": "This property is used to trigger an error halfway a stream of PartialResultSets.", "author": "olavloite", "createdAt": "2020-09-08T14:27:36Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/MockSpannerServiceImpl.java", "diffHunk": "@@ -408,6 +409,7 @@ private StatusRuntimeException getException() {\n     private final int randomExecutionTime;\n     private final Queue<Exception> exceptions;\n     private final boolean stickyException;\n+    private final Queue<Long> streamIndices;", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2Njg0Ng==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484966846", "bodyText": "Disable logging of certain warnings that may be ignored during these tests. These are generated because we force errors halfway streams etc.", "author": "olavloite", "createdAt": "2020-09-08T14:31:14Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/AbstractMockServerTest.java", "diffHunk": "@@ -124,11 +160,32 @@ public static void stopServer() throws Exception {\n   @Before\n   public void setupResults() {\n     mockSpanner.reset();\n+    mockDatabaseAdmin.reset();\n+    mockInstanceAdmin.reset();\n+\n+    futureParentHandlers = Logger.getLogger(AbstractFuture.class.getName()).getUseParentHandlers();", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk2ODY3OQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r484968679", "bodyText": "These tests have been replaced by tests using a mock server.", "author": "olavloite", "createdAt": "2020-09-08T14:33:33Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/SingleUseTransactionTest.java", "diffHunk": "@@ -707,81 +673,42 @@ public void testMultiUse() {\n     ParsedStatement ddl = createParsedDdl(sql);\n     DdlClient ddlClient = createDefaultMockDdlClient();\n     SingleUseTransaction subject = createDdlSubject(ddlClient);\n-    subject.executeDdl(ddl);\n+    get(subject.executeDdlAsync(ddl));\n     verify(ddlClient).executeDdl(sql);\n     try {\n-      subject.executeDdl(ddl);\n+      get(subject.executeDdlAsync(ddl));\n       fail(\"missing expected exception\");\n     } catch (IllegalStateException e) {\n     }\n \n     ParsedStatement update = createParsedUpdate(VALID_UPDATE);\n     subject = createSubject();\n-    long updateCount = subject.executeUpdate(update);\n+    long updateCount = get(subject.executeUpdateAsync(update));\n     assertThat(updateCount).isEqualTo(VALID_UPDATE_COUNT);\n     assertThat(subject.getCommitTimestamp()).isNotNull();\n     try {\n-      subject.executeUpdate(update);\n+      get(subject.executeUpdateAsync(update));\n       fail(\"missing expected exception\");\n     } catch (IllegalStateException e) {\n     }\n \n     subject = createSubject();\n-    subject.write(Mutation.newInsertBuilder(\"FOO\").build());\n+    get(subject.writeAsync(Collections.singleton(Mutation.newInsertBuilder(\"FOO\").build())));\n     assertThat(subject.getCommitTimestamp()).isNotNull();\n     try {\n-      subject.write(Mutation.newInsertBuilder(\"FOO\").build());\n+      get(subject.writeAsync(Collections.singleton(Mutation.newInsertBuilder(\"FOO\").build())));\n       fail(\"missing expected exception\");\n     } catch (IllegalStateException e) {\n     }\n \n     subject = createSubject();\n     Mutation mutation = Mutation.newInsertBuilder(\"FOO\").build();\n-    subject.write(Arrays.asList(mutation, mutation));\n+    get(subject.writeAsync(Arrays.asList(mutation, mutation)));\n     assertThat(subject.getCommitTimestamp()).isNotNull();\n     try {\n-      subject.write(Arrays.asList(mutation, mutation));\n+      get(subject.writeAsync(Arrays.asList(mutation, mutation)));\n       fail(\"missing expected exception\");\n     } catch (IllegalStateException e) {\n     }\n   }\n-", "originalCommit": "81b70c39ee2c6af5986aeb749a6bb8093dbcd7ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f1a40eea6544dde92eb57b2a37ef0d305fb4bdeb", "url": "https://github.com/googleapis/java-spanner/commit/f1a40eea6544dde92eb57b2a37ef0d305fb4bdeb", "message": "feat: keep track of caller to include in stacktrace", "committedDate": "2020-09-11T12:21:50Z", "type": "commit"}, {"oid": "a541398e7dbb2ab0d5b1773f0ac2d0afc3fe0c6a", "url": "https://github.com/googleapis/java-spanner/commit/a541398e7dbb2ab0d5b1773f0ac2d0afc3fe0c6a", "message": "Merge branch 'master' into async-connection", "committedDate": "2020-09-11T12:23:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAxMDk3MA==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r487010970", "bodyText": "The delegate ResultSet should not be closed by the callback executor, but only by the executor that fetches and buffers the rows (in the ProduceRowsCallable at line 380)", "author": "olavloite", "createdAt": "2020-09-11T12:27:57Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java", "diffHunk": "@@ -275,7 +282,7 @@ public void run() {\n               switch (response) {\n                 case DONE:\n                   state = State.DONE;\n-                  closeDelegateResultSet();", "originalCommit": "a541398e7dbb2ab0d5b1773f0ac2d0afc3fe0c6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "51ef086926ff083af43c1f1dcc5182dab0d7992c", "url": "https://github.com/googleapis/java-spanner/commit/51ef086926ff083af43c1f1dcc5182dab0d7992c", "message": "docs: explain why Aborted is active", "committedDate": "2020-09-11T13:33:53Z", "type": "commit"}, {"oid": "ded2101e0bf64fbd1be6ebef73e6d8f7f3e74b07", "url": "https://github.com/googleapis/java-spanner/commit/ded2101e0bf64fbd1be6ebef73e6d8f7f3e74b07", "message": "fix: use ticker for better testability", "committedDate": "2020-09-11T13:34:15Z", "type": "commit"}, {"oid": "5989efbce07a10eb5080e9bf906942627ed9fbff", "url": "https://github.com/googleapis/java-spanner/commit/5989efbce07a10eb5080e9bf906942627ed9fbff", "message": "test: increase coverage and remove unused code", "committedDate": "2020-09-11T14:59:40Z", "type": "commit"}, {"oid": "c50f1edef519dcb1fbe79b6ca0ffc6a98e272b73", "url": "https://github.com/googleapis/java-spanner/commit/c50f1edef519dcb1fbe79b6ca0ffc6a98e272b73", "message": "test: add additional tests", "committedDate": "2020-09-12T10:39:07Z", "type": "commit"}, {"oid": "c5fba074cdebac48753e9f90e06960b15b8055b6", "url": "https://github.com/googleapis/java-spanner/commit/c5fba074cdebac48753e9f90e06960b15b8055b6", "message": "Merge branch 'master' into async-connection", "committedDate": "2020-10-05T08:03:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMDA5NQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500420095", "bodyText": "The executeQueryAsync method will produce a Future<ResultSet> that should be used as the underlying delegate of an AsyncResultSet.", "author": "olavloite", "createdAt": "2020-10-06T16:05:38Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java", "diffHunk": "@@ -89,7 +91,7 @@ private State(boolean shouldStop) {\n   private final BlockingDeque<Struct> buffer;\n   private Struct currentRow;\n   /** The underlying synchronous {@link ResultSet} that is producing the rows. */\n-  private final ResultSet delegateResultSet;\n+  private final Supplier<ResultSet> delegateResultSet;", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b6e175abe14742317ed1462e6df3821a5de89117", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java\nindex c125aa0b..fd172e96 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java\n\n@@ -90,7 +90,7 @@ class AsyncResultSetImpl extends ForwardingStructReader implements ListenableAsy\n \n   private final BlockingDeque<Struct> buffer;\n   private Struct currentRow;\n-  /** The underlying synchronous {@link ResultSet} that is producing the rows. */\n+  /** Supplies the underlying synchronous {@link ResultSet} that will be producing the rows. */\n   private final Supplier<ResultSet> delegateResultSet;\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMDU1Nw==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500420557", "bodyText": "Returns the same exception instance if e is already a SpannerException, instead of wrapping a SpannerException in another SpannerException.", "author": "olavloite", "createdAt": "2020-10-06T16:06:15Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java", "diffHunk": "@@ -261,7 +268,7 @@ public void run() {\n                 // we'll keep the cancelled state.\n                 return;\n               }\n-              executionException = SpannerExceptionFactory.newSpannerException(e);\n+              executionException = SpannerExceptionFactory.asSpannerException(e);", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyMTE5Mg==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500421192", "bodyText": "Convenience method that will catch and wrap common exceptions.", "author": "olavloite", "createdAt": "2020-10-06T16:07:07Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerApiFutures.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.common.base.Preconditions;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+\n+public class SpannerApiFutures {\n+  public static <T> T get(ApiFuture<T> future) throws SpannerException {\n+    return getOrNull(Preconditions.checkNotNull(future));\n+  }\n+\n+  public static <T> T getOrNull(ApiFuture<T> future) throws SpannerException {", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyODQ5MA==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500428490", "bodyText": "All methods in the UnitOfWork interface have been changed from sync to async. The sync methods in the Connection interface now use the async versions in UnitOfWork under the hood.", "author": "olavloite", "createdAt": "2020-10-06T16:18:25Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -67,30 +71,35 @@ public boolean isActive() {\n    * Commits the changes in this unit of work to the database. For read-only transactions, this only\n    * closes the {@link ReadContext}. This method will throw a {@link SpannerException} if called for\n    * a {@link Type#BATCH}.\n+   *\n+   * @return An {@link ApiFuture} that is done when the commit has finished.\n    */\n-  void commit();\n+  ApiFuture<Void> commitAsync();", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMTIwOA==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500431208", "bodyText": "This has been moved to the NextCallable to make it retriable.", "author": "olavloite", "createdAt": "2020-10-06T16:22:26Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ChecksumResultSet.java", "diffHunk": "@@ -107,13 +113,7 @@ public Boolean call() throws Exception {\n   @Override\n   public boolean next() {\n     // Call next() with retry.\n-    boolean res = transaction.runWithRetry(nextCallable);", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzA3MQ==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500433071", "bodyText": "This block of code is moved to the Callable below, that can be used as input for the generic executeStatementAsync method.", "author": "olavloite", "createdAt": "2020-10-06T16:25:14Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -214,62 +210,50 @@ public void write(Iterable<Mutation> mutations) {\n       StatementParser.INSTANCE.parse(Statement.of(\"RUN BATCH\"));\n \n   @Override\n-  public long[] runBatch() {\n+  public ApiFuture<long[]> runBatchAsync() {\n     ConnectionPreconditions.checkState(\n         state == UnitOfWorkState.STARTED, \"The batch is no longer active and cannot be ran\");\n-    try {", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTEzOA==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500465138", "bodyText": "Use a Ticker to measure time to make it easier to test.", "author": "olavloite", "createdAt": "2020-10-06T17:15:57Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/SpannerPool.java", "diffHunk": "@@ -236,14 +237,17 @@ public int hashCode() {\n   @GuardedBy(\"this\")\n   private final Map<SpannerPoolKey, Long> lastConnectionClosedAt = new HashMap<>();\n \n+  private final Ticker ticker;", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTkxMg==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500465912", "bodyText": "Create a ListeningExecutorService. The ListenableFutures that are returned by this can be converted to ApiFutures.", "author": "olavloite", "createdAt": "2020-10-06T17:17:13Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/StatementExecutor.java", "diffHunk": "@@ -129,12 +141,13 @@ public boolean hasDuration() {\n           .build();\n \n   /** Creates an {@link ExecutorService} for a {@link StatementExecutor}. */\n-  private static ExecutorService createExecutorService() {\n-    return new ThreadPoolExecutor(\n-        1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), THREAD_FACTORY);\n+  private static ListeningExecutorService createExecutorService() {", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjcwNw==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500466707", "bodyText": "This state is added to indicate that a batch is running, but not yet finished, and that all subsequent statements should not be included in the batch.", "author": "olavloite", "createdAt": "2020-10-06T17:18:32Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -39,9 +41,11 @@\n \n   enum UnitOfWorkState {\n     STARTED,\n+    COMMITTING,\n     COMMITTED,\n     COMMIT_FAILED,\n     ROLLED_BACK,\n+    RUNNING,", "originalCommit": "c5fba074cdebac48753e9f90e06960b15b8055b6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "3e775b10b21b7d04108807ac8c8b120712fc5904", "url": "https://github.com/googleapis/java-spanner/commit/3e775b10b21b7d04108807ac8c8b120712fc5904", "message": "docs: add missing @override", "committedDate": "2020-10-06T17:24:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0ODk4Nw==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r500648987", "bodyText": "Is this comment accurate now? (since executeQueryAsync will produce a Future<ResultSet> to be used here)", "author": "thiagotnunes", "createdAt": "2020-10-06T23:19:33Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java", "diffHunk": "@@ -89,7 +91,7 @@ private State(boolean shouldStop) {\n   private final BlockingDeque<Struct> buffer;\n   private Struct currentRow;\n   /** The underlying synchronous {@link ResultSet} that is producing the rows. */", "originalCommit": "3e775b10b21b7d04108807ac8c8b120712fc5904", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0NTkxMg==", "url": "https://github.com/googleapis/java-spanner/pull/392#discussion_r501445912", "bodyText": "No, good point. I've changed it to reflect the new situation.", "author": "olavloite", "createdAt": "2020-10-08T04:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0ODk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b6e175abe14742317ed1462e6df3821a5de89117", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java\nindex c125aa0b..fd172e96 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncResultSetImpl.java\n\n@@ -90,7 +90,7 @@ class AsyncResultSetImpl extends ForwardingStructReader implements ListenableAsy\n \n   private final BlockingDeque<Struct> buffer;\n   private Struct currentRow;\n-  /** The underlying synchronous {@link ResultSet} that is producing the rows. */\n+  /** Supplies the underlying synchronous {@link ResultSet} that will be producing the rows. */\n   private final Supplier<ResultSet> delegateResultSet;\n \n   /**\n"}}, {"oid": "b6e175abe14742317ed1462e6df3821a5de89117", "url": "https://github.com/googleapis/java-spanner/commit/b6e175abe14742317ed1462e6df3821a5de89117", "message": "docs: fix comment", "committedDate": "2020-10-07T17:34:39Z", "type": "commit"}]}