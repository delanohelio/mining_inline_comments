{"pr_number": 287, "pr_title": "perf: use streaming RPC for PDML", "pr_createdAt": "2020-06-19T12:13:43Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/287", "timeline": [{"oid": "8f67dd747c551ed81e9d039875ab150e10adf066", "url": "https://github.com/googleapis/java-spanner/commit/8f67dd747c551ed81e9d039875ab150e10adf066", "message": "perf: use streaming RPC for PDML", "committedDate": "2020-06-19T12:13:05Z", "type": "commit"}, {"oid": "7981059ae935ce3da61f35df1cdba09390dfd037", "url": "https://github.com/googleapis/java-spanner/commit/7981059ae935ce3da61f35df1cdba09390dfd037", "message": "fix: reset resume token for each tx", "committedDate": "2020-06-19T12:26:53Z", "type": "commit"}, {"oid": "5235a38bd38a668d1671800650ffa2def26c9b9a", "url": "https://github.com/googleapis/java-spanner/commit/5235a38bd38a668d1671800650ffa2def26c9b9a", "message": "cleanup: remove test code", "committedDate": "2020-06-19T14:58:49Z", "type": "commit"}, {"oid": "51930fa426c1d6377fda9d68283461164ee838d5", "url": "https://github.com/googleapis/java-spanner/commit/51930fa426c1d6377fda9d68283461164ee838d5", "message": "fix: retry depening on resume token", "committedDate": "2020-06-20T16:23:19Z", "type": "commit"}, {"oid": "3ff3ce4ba0e3ad6f0359c179eaabff87939b3613", "url": "https://github.com/googleapis/java-spanner/commit/3ff3ce4ba0e3ad6f0359c179eaabff87939b3613", "message": "fix: remove unused attempt param", "committedDate": "2020-06-20T19:10:37Z", "type": "commit"}, {"oid": "82ca881314819f07026c912d888510d392f3ca77", "url": "https://github.com/googleapis/java-spanner/commit/82ca881314819f07026c912d888510d392f3ca77", "message": "fix: fix check for resume token", "committedDate": "2020-06-22T08:53:14Z", "type": "commit"}, {"oid": "0808d9fb7363f6f7a3889c7fa7de27f513a6a7f8", "url": "https://github.com/googleapis/java-spanner/commit/0808d9fb7363f6f7a3889c7fa7de27f513a6a7f8", "message": "fix: keep track of total timeout", "committedDate": "2020-06-24T12:34:09Z", "type": "commit"}, {"oid": "223bd1ae59bcdb05a18fe4bcb76e73a0f076dce7", "url": "https://github.com/googleapis/java-spanner/commit/223bd1ae59bcdb05a18fe4bcb76e73a0f076dce7", "message": "fix: clirr build failure", "committedDate": "2020-06-24T13:02:08Z", "type": "commit"}, {"oid": "5689e53cd9e3bb5863382c0a46145cbf329f8098", "url": "https://github.com/googleapis/java-spanner/commit/5689e53cd9e3bb5863382c0a46145cbf329f8098", "message": "cleanup: add comments + remove unused code", "committedDate": "2020-06-24T16:56:20Z", "type": "commit"}, {"oid": "77c9cdf3c5787203e35cdfa4cd740029b25ae080", "url": "https://github.com/googleapis/java-spanner/commit/77c9cdf3c5787203e35cdfa4cd740029b25ae080", "message": "tests: add missing exec time", "committedDate": "2020-06-24T17:16:14Z", "type": "commit"}, {"oid": "52f91e3af1c20030b0f416ce0789447866065cfb", "url": "https://github.com/googleapis/java-spanner/commit/52f91e3af1c20030b0f416ce0789447866065cfb", "message": "chore: run formatter", "committedDate": "2020-06-24T17:19:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMTU3OQ==", "url": "https://github.com/googleapis/java-spanner/pull/287#discussion_r447411579", "bodyText": "nit: I don't know if you need to check for the resumeToken != null condition since you always init it to EMPTY and only update it if it's not null.", "author": "skuruppu", "createdAt": "2020-06-30T05:05:06Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "diffHunk": "@@ -60,41 +72,88 @@ private ByteString initTransaction() {\n \n   /**\n    * Executes the {@link Statement} using a partitioned dml transaction with automatic retry if the\n-   * transaction was aborted.\n+   * transaction was aborted. The update method uses the ExecuteStreamingSql RPC to execute the\n+   * statement, and will retry the stream if an {@link UnavailableException} is thrown, using the\n+   * last seen resume token if the server returns any.\n    */\n-  long executePartitionedUpdate(final Statement statement) {\n+  long executeStreamingPartitionedUpdate(final Statement statement, Duration timeout) {\n     checkState(isValid, \"Partitioned DML has been invalidated by a new operation on the session\");\n-    Callable<com.google.spanner.v1.ResultSet> callable =\n-        new Callable<com.google.spanner.v1.ResultSet>() {\n-          @Override\n-          public com.google.spanner.v1.ResultSet call() throws Exception {\n-            ByteString transactionId = initTransaction();\n-            final ExecuteSqlRequest.Builder builder =\n-                ExecuteSqlRequest.newBuilder()\n-                    .setSql(statement.getSql())\n-                    .setQueryMode(QueryMode.NORMAL)\n-                    .setSession(session.getName())\n-                    .setTransaction(TransactionSelector.newBuilder().setId(transactionId).build());\n-            Map<String, Value> stmtParameters = statement.getParameters();\n-            if (!stmtParameters.isEmpty()) {\n-              com.google.protobuf.Struct.Builder paramsBuilder = builder.getParamsBuilder();\n-              for (Map.Entry<String, Value> param : stmtParameters.entrySet()) {\n-                paramsBuilder.putFields(param.getKey(), param.getValue().toProto());\n-                builder.putParamTypes(param.getKey(), param.getValue().getType().toProto());\n+    log.log(Level.FINER, \"Starting PartitionedUpdate statement\");\n+    boolean foundStats = false;\n+    long updateCount = 0L;\n+    Duration remainingTimeout = timeout;\n+    Stopwatch stopWatch = Stopwatch.createStarted();\n+    try {\n+      // Loop to catch AbortedExceptions.\n+      while (true) {\n+        ByteString resumeToken = ByteString.EMPTY;\n+        try {\n+          ByteString transactionId = initTransaction();\n+          final ExecuteSqlRequest.Builder builder =\n+              ExecuteSqlRequest.newBuilder()\n+                  .setSql(statement.getSql())\n+                  .setQueryMode(QueryMode.NORMAL)\n+                  .setSession(session.getName())\n+                  .setTransaction(TransactionSelector.newBuilder().setId(transactionId).build());\n+          Map<String, Value> stmtParameters = statement.getParameters();\n+          if (!stmtParameters.isEmpty()) {\n+            com.google.protobuf.Struct.Builder paramsBuilder = builder.getParamsBuilder();\n+            for (Map.Entry<String, Value> param : stmtParameters.entrySet()) {\n+              paramsBuilder.putFields(param.getKey(), param.getValue().toProto());\n+              builder.putParamTypes(param.getKey(), param.getValue().getType().toProto());\n+            }\n+          }\n+          while (true) {\n+            remainingTimeout =\n+                remainingTimeout.minus(stopWatch.elapsed(TimeUnit.MILLISECONDS), ChronoUnit.MILLIS);\n+            try {\n+              builder.setResumeToken(resumeToken);\n+              ServerStream<PartialResultSet> stream =\n+                  rpc.executeStreamingPartitionedDml(\n+                      builder.build(), session.getOptions(), remainingTimeout);\n+              for (PartialResultSet rs : stream) {\n+                if (rs.getResumeToken() != null && !ByteString.EMPTY.equals(rs.getResumeToken())) {\n+                  resumeToken = rs.getResumeToken();\n+                }\n+                if (rs.hasStats()) {\n+                  foundStats = true;\n+                  updateCount += rs.getStats().getRowCountLowerBound();\n+                }\n+              }\n+              break;\n+            } catch (UnavailableException e) {\n+              // Retry the stream in the same transaction if the stream breaks with\n+              // UnavailableException and we have a resume token. Otherwise, we just retry the\n+              // entire transaction.\n+              if (resumeToken != null && !ByteString.EMPTY.equals(resumeToken)) {", "originalCommit": "52f91e3af1c20030b0f416ce0789447866065cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyNTg1Ng==", "url": "https://github.com/googleapis/java-spanner/pull/287#discussion_r447725856", "bodyText": "Good point, done.", "author": "olavloite", "createdAt": "2020-06-30T14:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMTU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "32acacb7e83f2ca798fad2e630634a4bfcb49452", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java\nindex 2afdb2ca..638c567a 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java\n\n@@ -125,7 +125,7 @@ class PartitionedDMLTransaction implements SessionTransaction {\n               // Retry the stream in the same transaction if the stream breaks with\n               // UnavailableException and we have a resume token. Otherwise, we just retry the\n               // entire transaction.\n-              if (resumeToken != null && !ByteString.EMPTY.equals(resumeToken)) {\n+              if (!ByteString.EMPTY.equals(resumeToken)) {\n                 log.log(\n                     Level.FINER,\n                     \"Retrying PartitionedDml stream using resume token '\"\n"}}, {"oid": "32acacb7e83f2ca798fad2e630634a4bfcb49452", "url": "https://github.com/googleapis/java-spanner/commit/32acacb7e83f2ca798fad2e630634a4bfcb49452", "message": "chore: remove unnecessary null check", "committedDate": "2020-06-30T14:21:24Z", "type": "commit"}, {"oid": "9e803a5906c0ab09b3d14d90a6a4c515e6cbb8f6", "url": "https://github.com/googleapis/java-spanner/commit/9e803a5906c0ab09b3d14d90a6a4c515e6cbb8f6", "message": "Merge branch 'master' into streaming-pdml", "committedDate": "2020-06-30T14:25:29Z", "type": "commit"}, {"oid": "850e4a1a3718e6e13920d7612a5b270eecae5e6d", "url": "https://github.com/googleapis/java-spanner/commit/850e4a1a3718e6e13920d7612a5b270eecae5e6d", "message": "tests: add missing exec time", "committedDate": "2020-06-30T14:50:13Z", "type": "commit"}]}