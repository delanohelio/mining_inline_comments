{"pr_number": 452, "pr_title": "feat!: Point In Time Recovery (PITR)", "pr_createdAt": "2020-09-23T04:03:02Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/452", "timeline": [{"oid": "c146253bbb286e0a049e59220f3ac253f6377aac", "url": "https://github.com/googleapis/java-spanner/commit/c146253bbb286e0a049e59220f3ac253f6377aac", "message": "fix: disables pitr-lite tests in emulator\n\nThe feature is not supported in the emulator currently.", "committedDate": "2020-09-29T23:20:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDYyMg==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498030622", "bodyText": "This query will list the OPTION_VALUE of all databases on the test instance. If this test is executed against an existing instance with multiple databases having a version_retention_period, it could fail.", "author": "olavloite", "createdAt": "2020-10-01T07:15:35Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =", "originalCommit": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NDI0Nw==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498554247", "bodyText": "I am wondering how could this happen, since I am using the dbClient for which we need to specify a database to create. Or maybe I am missing something?\nThat query is also mentioned in the pitr-lite specification on how to get the version_retention_period of a database, but I wonder if we missed something. In the current tests, specifying the schema_name as '' works in our internal tests.", "author": "thiagotnunes", "createdAt": "2020-10-01T23:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0ODg1Nw==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498748857", "bodyText": "Sorry, you're completely right. I forgot that the INFORMATION_SCHEMA is always database-specific.", "author": "olavloite", "createdAt": "2020-10-02T10:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "335528757cefeb5bfb6ea44ae87c1fbed34c7851", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java\nindex e4130fe6..4fd34aea 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java\n\n@@ -120,21 +120,22 @@ public class ITPitrUpdateDatabaseTest {\n \n   @Test\n   public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n-    final ResultSet rs =\n+    try (final ResultSet rs =\n         dbClient\n             .singleUse()\n             .executeQuery(\n                 Statement.of(\n                     \"SELECT OPTION_VALUE AS version_retention_period \"\n                         + \"FROM INFORMATION_SCHEMA.DATABASE_OPTIONS \"\n-                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"));\n+                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"))) {\n \n-    String versionRetentionPeriod = null;\n-    while (rs.next()) {\n-      versionRetentionPeriod = rs.getString(\"version_retention_period\");\n-    }\n+      String versionRetentionPeriod = null;\n+      while (rs.next()) {\n+        versionRetentionPeriod = rs.getString(\"version_retention_period\");\n+      }\n \n-    assertThat(versionRetentionPeriod).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(versionRetentionPeriod).isEqualTo(VERSION_RETENTION_PERIOD);\n+    }\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMTM1NA==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498031354", "bodyText": "nit: The ResultSet is created using a single-use read context and it is fully consumed, so it will be closed, but I would say that it is good practice to always close the ResultSet when you are done with it.", "author": "olavloite", "createdAt": "2020-10-01T07:16:55Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =\n+        dbClient\n+            .singleUse()\n+            .executeQuery(\n+                Statement.of(\n+                    \"SELECT OPTION_VALUE AS version_retention_period \"\n+                        + \"FROM INFORMATION_SCHEMA.DATABASE_OPTIONS \"\n+                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"));\n+\n+    String versionRetentionPeriod = null;\n+    while (rs.next()) {", "originalCommit": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NDkwMw==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498554903", "bodyText": "Good point, added the close call.", "author": "thiagotnunes", "createdAt": "2020-10-01T23:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "335528757cefeb5bfb6ea44ae87c1fbed34c7851", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java\nindex e4130fe6..4fd34aea 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java\n\n@@ -120,21 +120,22 @@ public class ITPitrUpdateDatabaseTest {\n \n   @Test\n   public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n-    final ResultSet rs =\n+    try (final ResultSet rs =\n         dbClient\n             .singleUse()\n             .executeQuery(\n                 Statement.of(\n                     \"SELECT OPTION_VALUE AS version_retention_period \"\n                         + \"FROM INFORMATION_SCHEMA.DATABASE_OPTIONS \"\n-                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"));\n+                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"))) {\n \n-    String versionRetentionPeriod = null;\n-    while (rs.next()) {\n-      versionRetentionPeriod = rs.getString(\"version_retention_period\");\n-    }\n+      String versionRetentionPeriod = null;\n+      while (rs.next()) {\n+        versionRetentionPeriod = rs.getString(\"version_retention_period\");\n+      }\n \n-    assertThat(versionRetentionPeriod).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(versionRetentionPeriod).isEqualTo(VERSION_RETENTION_PERIOD);\n+    }\n   }\n \n   @Test\n"}}, {"oid": "335528757cefeb5bfb6ea44ae87c1fbed34c7851", "url": "https://github.com/googleapis/java-spanner/commit/335528757cefeb5bfb6ea44ae87c1fbed34c7851", "message": "fix: closes result set in test\n\nAddresses PR comment.", "committedDate": "2020-10-13T02:59:08Z", "type": "forcePushed"}, {"oid": "7c098099085637469343e21bb7bb8eb477340a13", "url": "https://github.com/googleapis/java-spanner/commit/7c098099085637469343e21bb7bb8eb477340a13", "message": "tests: remove IT and add unit", "committedDate": "2020-11-12T02:06:59Z", "type": "forcePushed"}, {"oid": "a296742c5e11ff2f8142453f1a967ef584b761c1", "url": "https://github.com/googleapis/java-spanner/commit/a296742c5e11ff2f8142453f1a967ef584b761c1", "message": "fix: updates DatabaseInfo equals/hashcode\n\nTo compare version retention period and earliest version time.", "committedDate": "2020-11-12T02:05:28Z", "type": "forcePushed"}, {"oid": "2a1921397780e1a9cc3e824e14c17528edc69b7b", "url": "https://github.com/googleapis/java-spanner/commit/2a1921397780e1a9cc3e824e14c17528edc69b7b", "message": "fix: formatting\n\nFixes formatting of the DatabaseInfo", "committedDate": "2020-11-24T06:59:00Z", "type": "forcePushed"}, {"oid": "b39676f42716a90b8f3f18ceb97e3271d55314b3", "url": "https://github.com/googleapis/java-spanner/commit/b39676f42716a90b8f3f18ceb97e3271d55314b3", "message": "feature: adds test for throttled pitr field\n\nAdds test to check for the throttled field in the update database ddl\nmetadata.", "committedDate": "2020-11-24T07:12:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNjM1Mw==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r530236353", "bodyText": "nit: Could we have a more elaborate comment on this method? And also for getEarliestVersionTime. I don't think everyone will understand what these fields mean.", "author": "olavloite", "createdAt": "2020-11-25T09:45:09Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -129,6 +155,16 @@ public Timestamp getCreateTime() {\n     return createTime;\n   }\n \n+  /** Returns the version retention period of the database. */", "originalCommit": "b39676f42716a90b8f3f18ceb97e3271d55314b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjUxNQ==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r530726515", "bodyText": "Added more information to both params, let me know if there are satisfactory.", "author": "thiagotnunes", "createdAt": "2020-11-26T01:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNjM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7f8d6dc87174e2c2643e86d9ef13ee44b5e729e8", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java\nindex 0cbb438e..5ba9f0aa 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java\n\n@@ -155,12 +155,19 @@ public class DatabaseInfo {\n     return createTime;\n   }\n \n-  /** Returns the version retention period of the database. */\n+  /**\n+   * Returns the version retention period of the database. This is the period for which Cloud\n+   * Spanner retains all versions of data for the database. For instance, if set to 3 days, Cloud\n+   * Spanner will retain data versions that are up to 3 days old.\n+   */\n   public String getVersionRetentionPeriod() {\n     return versionRetentionPeriod;\n   }\n \n-  /** Returns the earliest version time of the database. */\n+  /**\n+   * Returns the earliest version time of the database. This is the oldest timestamp that can be\n+   * used to read old versions of the data.\n+   */\n   public Timestamp getEarliestVersionTime() {\n     return earliestVersionTime;\n   }\n"}}, {"oid": "7f8d6dc87174e2c2643e86d9ef13ee44b5e729e8", "url": "https://github.com/googleapis/java-spanner/commit/7f8d6dc87174e2c2643e86d9ef13ee44b5e729e8", "message": "fix: explain further the pitr-lite params in docs\n\nAdds more explanations to the purpose of the added params for pitr-lite:\nversion_retention_period and earliest_version_time.", "committedDate": "2021-01-11T02:02:23Z", "type": "forcePushed"}, {"oid": "6ff6c92698af7d832ba214729ea22c2d69b33329", "url": "https://github.com/googleapis/java-spanner/commit/6ff6c92698af7d832ba214729ea22c2d69b33329", "message": "fix: explain further the pitr-lite params in docs\n\nAdds more explanations to the purpose of the added params for pitr-lite:\nversion_retention_period and earliest_version_time.", "committedDate": "2021-01-12T06:10:44Z", "type": "forcePushed"}, {"oid": "68145900824e2157f326ec294fe7c4487263c554", "url": "https://github.com/googleapis/java-spanner/commit/68145900824e2157f326ec294fe7c4487263c554", "message": "fix: explain further the pitr-lite params in docs\n\nAdds more explanations to the purpose of the added params for pitr-lite:\nversion_retention_period and earliest_version_time.", "committedDate": "2021-01-12T23:37:20Z", "type": "forcePushed"}, {"oid": "366daae419d3210e93ab59ceb89e6960c1ecd1ef", "url": "https://github.com/googleapis/java-spanner/commit/366daae419d3210e93ab59ceb89e6960c1ecd1ef", "message": "feat: adds version time to backups\n\nAdds PITR-lite version time to backups. This should make it possible to\nspecify the consistent time for copying the database.", "committedDate": "2021-01-12T23:43:55Z", "type": "forcePushed"}, {"oid": "62c9e1f823586f9512b425b8c858df8077607724", "url": "https://github.com/googleapis/java-spanner/commit/62c9e1f823586f9512b425b8c858df8077607724", "message": "feat: adds version time to backups\n\nAdds PITR-lite version time to backups. This should make it possible to\nspecify the consistent time for copying the database.", "committedDate": "2021-01-12T23:48:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMDc4NQ==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557230785", "bodyText": "nit: Should we consider naming this variable databaseVersionTime to make it clearer that this relates to the version of the database that is being / has been backed up?", "author": "olavloite", "createdAt": "2021-01-14T08:56:37Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -55,6 +67,7 @@\n     protected final BackupId id;\n     private State state = State.UNSPECIFIED;\n     private Timestamp expireTime;\n+    private Timestamp versionTime;", "originalCommit": "6e7b616ced2de136773246e76f95a2687db27611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgwNzk2NQ==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557807965", "bodyText": "I am trying to keep the naming one to one with the proto fields. I did try to add some javadoc in the setVersionTime that explains more about the field.\nLet me know if this is not clear enough though, and I could make this change.", "author": "thiagotnunes", "createdAt": "2021-01-15T01:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMDc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzkzNzczMQ==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557937731", "bodyText": "I am trying to keep the naming one to one with the proto fields.\n\nThat is reasonable and also makes it easier for users to search for documentation online.", "author": "olavloite", "createdAt": "2021-01-15T07:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMDc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "26999121179ff7599d0ecccdd826a4d09bfeefbf", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java\nindex 0435d32e..5968bcdc 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java\n\n@@ -67,7 +55,6 @@ public class BackupInfo {\n     protected final BackupId id;\n     private State state = State.UNSPECIFIED;\n     private Timestamp expireTime;\n-    private Timestamp versionTime;\n     private DatabaseId database;\n     private long size;\n     private com.google.spanner.admin.database.v1.Backup proto;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMjIzMg==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557232232", "bodyText": "nit: Wouldn't it be better to make the builder accept null values instead of having to wrap these calls in if-statements every time it is set?", "author": "olavloite", "createdAt": "2021-01-14T08:57:57Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java", "diffHunk": "@@ -118,8 +118,17 @@ public boolean exists() {\n     Preconditions.checkArgument(\n         backup.getInstanceId().equals(getId().getInstanceId()),\n         \"The instance of the backup must be equal to the instance of this database.\");\n-    return dbClient.createBackup(\n-        instance(), backup.getId().getBackup(), database(), backup.getExpireTime());\n+\n+    final BackupInfo.Builder backupBuilder =\n+        dbClient\n+            .newBackupBuilder(backup.getId())\n+            .setDatabase(getId())\n+            .setExpireTime(backup.getExpireTime());\n+    if (backup.getVersionTime() != null) {\n+      backupBuilder.setVersionTime(backup.getVersionTime());", "originalCommit": "6e7b616ced2de136773246e76f95a2687db27611", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgwODAzMg==", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557808032", "bodyText": "Good point, made this change.", "author": "thiagotnunes", "createdAt": "2021-01-15T01:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMjIzMg=="}], "type": "inlineReview", "revised_code": {"commit": "d6a45d0b2eef72ff461c575215aa95b85191f945", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java\nindex 92b55100..a442ad23 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java\n\n@@ -119,16 +119,13 @@ public class Database extends DatabaseInfo {\n         backup.getInstanceId().equals(getId().getInstanceId()),\n         \"The instance of the backup must be equal to the instance of this database.\");\n \n-    final BackupInfo.Builder backupBuilder =\n+    return dbClient.createBackup(\n         dbClient\n             .newBackupBuilder(backup.getId())\n             .setDatabase(getId())\n-            .setExpireTime(backup.getExpireTime());\n-    if (backup.getVersionTime() != null) {\n-      backupBuilder.setVersionTime(backup.getVersionTime());\n-    }\n-\n-    return dbClient.createBackup(backupBuilder.build());\n+            .setExpireTime(backup.getExpireTime())\n+            .setVersionTime(backup.getVersionTime())\n+            .build());\n   }\n \n   /**\n"}}, {"oid": "d6a45d0b2eef72ff461c575215aa95b85191f945", "url": "https://github.com/googleapis/java-spanner/commit/d6a45d0b2eef72ff461c575215aa95b85191f945", "message": "chore: refactors / addresses pr comments", "committedDate": "2021-01-28T00:43:18Z", "type": "forcePushed"}, {"oid": "26999121179ff7599d0ecccdd826a4d09bfeefbf", "url": "https://github.com/googleapis/java-spanner/commit/26999121179ff7599d0ecccdd826a4d09bfeefbf", "message": "feat: exposes new pitr-lite database fields\n\nExposes earliest version time and version retention period fields in the\ndatabase class.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "ad219b7b8369629796df9ac3c6fa929fccfd1ae8", "url": "https://github.com/googleapis/java-spanner/commit/ad219b7b8369629796df9ac3c6fa929fccfd1ae8", "message": "feat: adds it tests for updating version retention\n\nAdds integration tests for updating the version retention period.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "e53653823bbf55176b8eb1ece0cf8537fabf386c", "url": "https://github.com/googleapis/java-spanner/commit/e53653823bbf55176b8eb1ece0cf8537fabf386c", "message": "feat: adds new create database tests for pitr\n\nAdds create database tests for PITR and refactors the integration test\nclass.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "2da2ac3de36b5e3e85bfb6bb224937dc2406afb8", "url": "https://github.com/googleapis/java-spanner/commit/2da2ac3de36b5e3e85bfb6bb224937dc2406afb8", "message": "chore: refactors tests\n\nSeparates PITR database tests into 2 files for clarity.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "7968a9f79bece961a647e493a30bdc20f308df58", "url": "https://github.com/googleapis/java-spanner/commit/7968a9f79bece961a647e493a30bdc20f308df58", "message": "fix: disables pitr-lite tests in emulator\n\nThe feature is not supported in the emulator currently.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "3764028832eca107a43807cffb2bcd0abe764b30", "url": "https://github.com/googleapis/java-spanner/commit/3764028832eca107a43807cffb2bcd0abe764b30", "message": "fix: closes result set in test\n\nAddresses PR comment.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "f3abb93bdee2f4a4af1eaeeea716a2cfaff54933", "url": "https://github.com/googleapis/java-spanner/commit/f3abb93bdee2f4a4af1eaeeea716a2cfaff54933", "message": "fix: updates DatabaseInfo equals/hashcode\n\nTo compare version retention period and earliest version time.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "594d9fd863c5aea3798e968ec9ad066e6d5bfb30", "url": "https://github.com/googleapis/java-spanner/commit/594d9fd863c5aea3798e968ec9ad066e6d5bfb30", "message": "fix: formatting\n\nFixes formatting of the DatabaseInfo", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "60a084e26b3b03f9d71da033d8ad8678c5259b8e", "url": "https://github.com/googleapis/java-spanner/commit/60a084e26b3b03f9d71da033d8ad8678c5259b8e", "message": "feature: adds test for throttled pitr field\n\nAdds test to check for the throttled field in the update database ddl\nmetadata.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "3208de98945381430a43873f14c1d8a4b1abdb99", "url": "https://github.com/googleapis/java-spanner/commit/3208de98945381430a43873f14c1d8a4b1abdb99", "message": "fix: explain further the pitr-lite params in docs\n\nAdds more explanations to the purpose of the added params for pitr-lite:\nversion_retention_period and earliest_version_time.", "committedDate": "2021-02-01T01:21:36Z", "type": "commit"}, {"oid": "72e01d7fa8001847c8ae5e335607721adcb0e100", "url": "https://github.com/googleapis/java-spanner/commit/72e01d7fa8001847c8ae5e335607721adcb0e100", "message": "feat: adds version time to backups\n\nAdds PITR-lite version time to backups. This should make it possible to\nspecify the consistent time for copying the database.", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "e139666621a9bfc92a7f04c54a9e048a9a29d4d2", "url": "https://github.com/googleapis/java-spanner/commit/e139666621a9bfc92a7f04c54a9e048a9a29d4d2", "message": "test: adds integration tests for pitr backups", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "b489b8c4d20359de67a03a026efed3b7d2f7c85c", "url": "https://github.com/googleapis/java-spanner/commit/b489b8c4d20359de67a03a026efed3b7d2f7c85c", "message": "test: adds tests for pitr restore", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "bc7fb5079cc14b0fed86a20e8f99cff619cd85ba", "url": "https://github.com/googleapis/java-spanner/commit/bc7fb5079cc14b0fed86a20e8f99cff619cd85ba", "message": "test: fixes integration test for pitr restore", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "8c34fc32fff9ddba94c1cb3ffce501b513065aaa", "url": "https://github.com/googleapis/java-spanner/commit/8c34fc32fff9ddba94c1cb3ffce501b513065aaa", "message": "test: fixes backup unit test", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "9faa574aca6819815b239cfc62a747d0c5115829", "url": "https://github.com/googleapis/java-spanner/commit/9faa574aca6819815b239cfc62a747d0c5115829", "message": "test: fixes npe on pitr backup test", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "5fbb0b2b31812540dfa1360abb68710b71dabb2c", "url": "https://github.com/googleapis/java-spanner/commit/5fbb0b2b31812540dfa1360abb68710b71dabb2c", "message": "chore: fixes clirr errors", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "aa2f11ec75c2dcbc7ec00c5dc2f274dfd8f54197", "url": "https://github.com/googleapis/java-spanner/commit/aa2f11ec75c2dcbc7ec00c5dc2f274dfd8f54197", "message": "chore: refactors / addresses pr comments", "committedDate": "2021-02-01T01:21:37Z", "type": "commit"}, {"oid": "aa2f11ec75c2dcbc7ec00c5dc2f274dfd8f54197", "url": "https://github.com/googleapis/java-spanner/commit/aa2f11ec75c2dcbc7ec00c5dc2f274dfd8f54197", "message": "chore: refactors / addresses pr comments", "committedDate": "2021-02-01T01:21:37Z", "type": "forcePushed"}, {"oid": "66f4b296ce7ff17f4de0b1fc64016b451323da51", "url": "https://github.com/googleapis/java-spanner/commit/66f4b296ce7ff17f4de0b1fc64016b451323da51", "message": "test: fixes the it pitr sad cases tests", "committedDate": "2021-02-04T04:34:05Z", "type": "commit"}, {"oid": "d4d795ec0fc17ef788cdfb77b66cf9476ecd567b", "url": "https://github.com/googleapis/java-spanner/commit/d4d795ec0fc17ef788cdfb77b66cf9476ecd567b", "message": "test: fixes pitr backup and restore tests", "committedDate": "2021-02-04T06:32:11Z", "type": "commit"}, {"oid": "da00ad6ecf27246bbf0bf225edcfa770c72dc4a1", "url": "https://github.com/googleapis/java-spanner/commit/da00ad6ecf27246bbf0bf225edcfa770c72dc4a1", "message": "test: skips pitr backup and restore tests\n\nThis is because the backend for these features is not ready yet.", "committedDate": "2021-02-17T00:51:13Z", "type": "commit"}, {"oid": "2e05f73aa1220c2813e6bb49e208d7f3591a0d9f", "url": "https://github.com/googleapis/java-spanner/commit/2e05f73aa1220c2813e6bb49e208d7f3591a0d9f", "message": "Merge branch 'master' of github.com:thiagotnunes/java-spanner into pitr-lite", "committedDate": "2021-02-17T03:48:40Z", "type": "commit"}, {"oid": "e752a3989560edba79348b927923a0501ee69670", "url": "https://github.com/googleapis/java-spanner/commit/e752a3989560edba79348b927923a0501ee69670", "message": "Merge branch 'master' of github.com:thiagotnunes/java-spanner into pitr-lite", "committedDate": "2021-02-17T03:49:51Z", "type": "commit"}]}