{"pr_number": 192, "pr_title": "feat: support setting compression option", "pr_createdAt": "2020-05-06T09:54:27Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/192", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5NjY2OQ==", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r424796669", "bodyText": "Would it be possible to test an end to end compression and verify that the compressor is actually used.", "author": "rven1", "createdAt": "2020-05-13T23:57:50Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java", "diffHunk": "@@ -168,6 +168,27 @@ public void testMultipleSpannersFromSameSpannerOptions() throws InterruptedExcep\n     assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME)).isAtMost(baseThreadCount);\n   }\n \n+  @Test\n+  public void testCompression() {\n+    for (String compressorName : new String[] {\"gzip\", \"identity\", null}) {\n+      SpannerOptions options =\n+          env.getTestHelper().getOptions().toBuilder().setCompressorName(compressorName).build();\n+      try (Spanner spanner = options.getService()) {\n+        DatabaseClient client = spanner.getDatabaseClient(db.getId());\n+        try (ResultSet rs =\n+            client\n+                .singleUse()\n+                .executeQuery(Statement.of(\"SELECT 1 AS COL1 UNION ALL SELECT 2 AS COL2\"))) {\n+          assertThat(rs.next()).isTrue();", "originalCommit": "8b8a82e7ba9904e6d169ff90a1f166b76f9d49ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwMTk4Mw==", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r424801983", "bodyText": "Yes absolutely. Once the support is in the staging environment, we can run this IT against it to test the change. @olavloite I'll give you a heads up when the feature is available in staging.", "author": "skuruppu", "createdAt": "2020-05-14T00:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5NjY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2435e8899e47abe3d1435f63f250927db6032861", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java\nindex ed260944..1aa8153b 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java\n\n@@ -57,117 +50,6 @@ public class ITSpannerOptionsTest {\n     db.drop();\n   }\n \n-  private static final int NUMBER_OF_TEST_RUNS = 2;\n-  private static final int DEFAULT_NUM_CHANNELS = 4;\n-  private static final int NUM_THREADS_PER_CHANNEL = 4;\n-  private static final String SPANNER_THREAD_NAME = \"Cloud-Spanner-TransportChannel\";\n-  private static final String THREAD_PATTERN = \"%s-[0-9]+\";\n-\n-  @Test\n-  public void testCloseAllThreadsWhenClosingSpanner() throws InterruptedException {\n-    int baseThreadCount = getNumberOfThreadsWithName(SPANNER_THREAD_NAME);\n-    for (int i = 0; i < NUMBER_OF_TEST_RUNS; i++) {\n-      waitForStartup();\n-      assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME)).isAtMost(baseThreadCount);\n-      // Create Spanner instance.\n-      // We make a copy of the options instance, as SpannerOptions caches any service object\n-      // that has been handed out.\n-      SpannerOptions options = env.getTestHelper().getOptions().toBuilder().build();\n-      Spanner spanner = options.getService();\n-      // Get a database client and do a query. This should initiate threads for the Spanner service.\n-      DatabaseClient client = spanner.getDatabaseClient(db.getId());\n-      List<ResultSet> resultSets = new ArrayList<>();\n-      // SpannerStub affiliates a channel with a session, so we need to use multiple sessions\n-      // to ensure we also hit multiple channels.\n-      for (int i2 = 0; i2 < options.getSessionPoolOptions().getMaxSessions(); i2++) {\n-        ResultSet rs =\n-            client\n-                .singleUse()\n-                .executeQuery(Statement.of(\"SELECT 1 AS COL1 UNION ALL SELECT 2 AS COL2\"));\n-        // Execute ResultSet#next() to send the query to Spanner.\n-        rs.next();\n-        // Delay closing the result set in order to force the use of multiple sessions.\n-        // As each session is linked to one transport channel, using multiple different\n-        // sessions should initialize multiple transport channels.\n-        resultSets.add(rs);\n-        // Check whether the number of expected threads has been reached.\n-        if (getNumberOfThreadsWithName(SPANNER_THREAD_NAME)\n-            == DEFAULT_NUM_CHANNELS * NUM_THREADS_PER_CHANNEL + baseThreadCount) {\n-          break;\n-        }\n-      }\n-      for (ResultSet rs : resultSets) {\n-        rs.close();\n-      }\n-      // Check the number of threads after the query. Doing a request should initialize a thread\n-      // pool for the underlying SpannerClient.\n-      assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME))\n-          .isEqualTo(DEFAULT_NUM_CHANNELS * NUM_THREADS_PER_CHANNEL + baseThreadCount);\n-\n-      // Then do a request to the InstanceAdmin service and check the number of threads.\n-      // Doing a request should initialize a thread pool for the underlying InstanceAdminClient.\n-      for (int i2 = 0; i2 < DEFAULT_NUM_CHANNELS * 2; i2++) {\n-        InstanceAdminClient instanceAdminClient = spanner.getInstanceAdminClient();\n-        instanceAdminClient.listInstances();\n-      }\n-      assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME))\n-          .isEqualTo(2 * DEFAULT_NUM_CHANNELS * NUM_THREADS_PER_CHANNEL + baseThreadCount);\n-\n-      // Then do a request to the DatabaseAdmin service and check the number of threads.\n-      // Doing a request should initialize a thread pool for the underlying DatabaseAdminClient.\n-      for (int i2 = 0; i2 < DEFAULT_NUM_CHANNELS * 2; i2++) {\n-        DatabaseAdminClient databaseAdminClient = spanner.getDatabaseAdminClient();\n-        databaseAdminClient.listDatabases(db.getId().getInstanceId().getInstance());\n-      }\n-      assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME))\n-          .isEqualTo(3 * DEFAULT_NUM_CHANNELS * NUM_THREADS_PER_CHANNEL + baseThreadCount);\n-\n-      // Now close the Spanner instance and check whether the threads are shutdown or not.\n-      spanner.close();\n-      // Wait a little to allow the threads to actually shutdown.\n-      Stopwatch watch = Stopwatch.createStarted();\n-      while (getNumberOfThreadsWithName(SPANNER_THREAD_NAME) > baseThreadCount\n-          && watch.elapsed(TimeUnit.SECONDS) < 2) {\n-        Thread.sleep(50L);\n-      }\n-      assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME)).isAtMost(baseThreadCount);\n-    }\n-  }\n-\n-  @Test\n-  public void testMultipleSpannersFromSameSpannerOptions() throws InterruptedException {\n-    waitForStartup();\n-    int baseThreadCount = getNumberOfThreadsWithName(SPANNER_THREAD_NAME);\n-    SpannerOptions options = env.getTestHelper().getOptions().toBuilder().build();\n-    try (Spanner spanner1 = options.getService()) {\n-      // Having both in the try-with-resources block is not possible, as it is the same instance.\n-      // One will be closed before the other, and the closing of the second instance would fail.\n-      Spanner spanner2 = options.getService();\n-      assertThat(spanner1).isSameInstanceAs(spanner2);\n-      DatabaseClient client1 = spanner1.getDatabaseClient(db.getId());\n-      DatabaseClient client2 = spanner2.getDatabaseClient(db.getId());\n-      assertThat(client1).isSameInstanceAs(client2);\n-      try (ResultSet rs1 =\n-              client1\n-                  .singleUse()\n-                  .executeQuery(Statement.of(\"SELECT 1 AS COL1 UNION ALL SELECT 2 AS COL2\"));\n-          ResultSet rs2 =\n-              client2\n-                  .singleUse()\n-                  .executeQuery(Statement.of(\"SELECT 1 AS COL1 UNION ALL SELECT 2 AS COL2\")); ) {\n-        while (rs1.next() && rs2.next()) {\n-          // Do nothing, just consume the result sets.\n-        }\n-      }\n-    }\n-    Stopwatch watch = Stopwatch.createStarted();\n-    while (getNumberOfThreadsWithName(SPANNER_THREAD_NAME) > baseThreadCount\n-        && watch.elapsed(TimeUnit.SECONDS) < 2) {\n-      Thread.sleep(50L);\n-    }\n-    assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME)).isAtMost(baseThreadCount);\n-  }\n-\n   @Test\n   public void testCompression() {\n     for (String compressorName : new String[] {\"gzip\", \"identity\", null}) {\n"}}, {"oid": "5b88926a376dfd81e5131d4dd2c4e3aa32252d8a", "url": "https://github.com/googleapis/java-spanner/commit/5b88926a376dfd81e5131d4dd2c4e3aa32252d8a", "message": "feat: support setting compression option", "committedDate": "2020-05-14T09:54:00Z", "type": "forcePushed"}, {"oid": "2a4c19e786aee9f584c741f62c9cba54b066a536", "url": "https://github.com/googleapis/java-spanner/commit/2a4c19e786aee9f584c741f62c9cba54b066a536", "message": "feat: support setting compression option", "committedDate": "2020-06-17T12:02:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxMDE1OA==", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r443910158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *   <li><code>null</code>: Use default comporession\n          \n          \n            \n                 *   <li><code>null</code>: Use default compression", "author": "skuruppu", "createdAt": "2020-06-23T01:26:43Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -558,6 +565,28 @@ public Builder setCallCredentialsProvider(CallCredentialsProvider callCredential\n       return this;\n     }\n \n+    /**\n+     * Sets the compression to use for all gRPC calls. The compressor must be a valid name known in\n+     * the {@link CompressorRegistry}.\n+     *\n+     * <p>Supported values are:\n+     *\n+     * <ul>\n+     *   <li>gzip: Enable gzip compression\n+     *   <li>identity: Disable compression\n+     *   <li><code>null</code>: Use default comporession", "originalCommit": "28e51823f54bb84ccc14736773e7023495ccc514", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5Nzk5MA==", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r443997990", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-06-23T06:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxMDE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "eb967c680b8967582e7fd1a8f6dfd509979a0bbe", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java\nindex b3c7f11b..edeadb7b 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java\n\n@@ -574,8 +574,8 @@ public class SpannerOptions extends ServiceOptions<Spanner, SpannerOptions> {\n      * <ul>\n      *   <li>gzip: Enable gzip compression\n      *   <li>identity: Disable compression\n-     *   <li><code>null</code>: Use default comporession\n-     *       <ul>\n+     *   <li><code>null</code>: Use default compression\n+     * </ul>\n      */\n     @ExperimentalApi(\"https://github.com/grpc/grpc-java/issues/1704\")\n     public Builder setCompressorName(@Nullable String compressorName) {\n"}}, {"oid": "72442918fe7dfb4c7466ee5fb903de8a1fa739de", "url": "https://github.com/googleapis/java-spanner/commit/72442918fe7dfb4c7466ee5fb903de8a1fa739de", "message": "feat: support setting compression option", "committedDate": "2020-06-30T13:25:57Z", "type": "commit"}, {"oid": "73dfbc80582fb578a3d85c4b361167fa160997d3", "url": "https://github.com/googleapis/java-spanner/commit/73dfbc80582fb578a3d85c4b361167fa160997d3", "message": "fix: use correct encoding header", "committedDate": "2020-06-30T13:25:57Z", "type": "commit"}, {"oid": "193dfee0a32dd24491c26e405752e1284f9e8290", "url": "https://github.com/googleapis/java-spanner/commit/193dfee0a32dd24491c26e405752e1284f9e8290", "message": "fix: add project id", "committedDate": "2020-06-30T13:25:57Z", "type": "commit"}, {"oid": "eb967c680b8967582e7fd1a8f6dfd509979a0bbe", "url": "https://github.com/googleapis/java-spanner/commit/eb967c680b8967582e7fd1a8f6dfd509979a0bbe", "message": "docs: fix typo + missing end tag", "committedDate": "2020-06-30T13:25:57Z", "type": "commit"}, {"oid": "2435e8899e47abe3d1435f63f250927db6032861", "url": "https://github.com/googleapis/java-spanner/commit/2435e8899e47abe3d1435f63f250927db6032861", "message": "chore: resolve merge conflicts", "committedDate": "2020-06-30T13:37:46Z", "type": "commit"}, {"oid": "2435e8899e47abe3d1435f63f250927db6032861", "url": "https://github.com/googleapis/java-spanner/commit/2435e8899e47abe3d1435f63f250927db6032861", "message": "chore: resolve merge conflicts", "committedDate": "2020-06-30T13:37:46Z", "type": "forcePushed"}, {"oid": "afbd9754e37db1de59160f11829ea131d685d15e", "url": "https://github.com/googleapis/java-spanner/commit/afbd9754e37db1de59160f11829ea131d685d15e", "message": "tests: fix test failure on emulator", "committedDate": "2020-06-30T13:59:57Z", "type": "commit"}]}