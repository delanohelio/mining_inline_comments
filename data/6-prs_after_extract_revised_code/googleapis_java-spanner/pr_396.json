{"pr_number": 396, "pr_title": "feat: Add experimental DirectPath support", "pr_createdAt": "2020-08-24T23:28:46Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/396", "timeline": [{"oid": "b6b1428f848d26323529df787a42d438b6e6d4fc", "url": "https://github.com/googleapis/java-spanner/commit/b6b1428f848d26323529df787a42d438b6e6d4fc", "message": "feat: Add experimental DirectPath support", "committedDate": "2020-08-20T17:43:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2NTUyMw==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r475965523", "bodyText": "Should this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean attemptDirectPath = Boolean.getBoolean(ATTEMPT_DIRECT_PATH);\n          \n          \n            \n                boolean attemptDirectPath = Boolean.getBoolean(System.getProperty(ATTEMPT_DIRECT_PATH));", "author": "chingor13", "createdAt": "2020-08-24T23:39:00Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/GceTestEnvConfig.java", "diffHunk": "@@ -51,6 +61,8 @@ public GceTestEnvConfig() {\n     double errorProbability =\n         Double.parseDouble(System.getProperty(GCE_STREAM_BROKEN_PROBABILITY, \"0.0\"));\n     checkState(errorProbability <= 1.0);\n+    boolean attemptDirectPath = Boolean.getBoolean(ATTEMPT_DIRECT_PATH);", "originalCommit": "b6b1428f848d26323529df787a42d438b6e6d4fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NDAwMg==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r478564002", "bodyText": "Good point, actually that's what I initially did, but after I checked the doc, it seems this method would call getProperty for us:\n\nReturns true if and only if the system property named by the argument exists and is equal to the string \"true\". (Beginning with version 1.0.2 of the JavaTM platform, the test of this string is case insensitive.) A system property is accessible through getProperty, a method defined by the System class.\nIf there is no property with the specified name, or if the specified name is empty or null, then false is returned.", "author": "WeiranFang", "createdAt": "2020-08-27T16:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2NTUyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2Nzg2NA==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r475967864", "bodyText": "Will this work outside of GCP? i.e. if you run the system tests with the direct path profile from your local machine?", "author": "chingor13", "createdAt": "2020-08-24T23:42:11Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/GceTestEnvConfig.java", "diffHunk": "@@ -41,6 +45,12 @@\n   public static final String GCE_CREDENTIALS_FILE = \"spanner.gce.config.credentials_file\";\n   public static final String GCE_STREAM_BROKEN_PROBABILITY =\n       \"spanner.gce.config.stream_broken_probability\";\n+  public static final String ATTEMPT_DIRECT_PATH = \"spanner.attempt_directpath\";\n+  public static final String DIRECT_PATH_TEST_SCENARIO = \"spanner.directpath_test_scenario\";\n+\n+  // IP address prefixes allocated for DirectPath backends.\n+  public static final String DP_IPV6_PREFIX = \"2001:4860:8040\";\n+  public static final String DP_IPV4_PREFIX = \"34.126\";", "originalCommit": "b6b1428f848d26323529df787a42d438b6e6d4fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2OTgzMQ==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r478569831", "bodyText": "Good question. The short answer is no. DirectPath is designed for clients calling from GCE VM directly, so we actually require that the client need to use the default service account provided by VM itself (see InstantiatingGrpcChannelProvider). If user uses other type of credentials (e.g. set GOOGLE_APPLICATIONS_CREDENTIALS with a key file and run client from outside of GCP), then the client would just use CFE path instead of DirectPath.\nFor testing purpose, I defined this directpath_test_scenario property to differentiate three cases that could happen when client opts in to use DirectPath: 1) client is using DP over IPv4, 2) client is using DP over IPv6 and 3) client uses CFE instead. And for cases like running client from my local machine, it should fall in to scenario 3)", "author": "WeiranFang", "createdAt": "2020-08-27T17:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk2Nzg2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzczNjQxMw==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r477736413", "bodyText": "I think that currently we are mostly enabling features / configurations through environment variables (which should be standardised through all of our clients) or through the SpannerOptions class.\nI imagine we could add an option like useDirectPath() in the SpannerOptions.Builder class. I guess that even if we do not use an environment variable as well (and go with the property), it would be nice to concentrated the configuration directly in the SpannerOptions class.\nWdyt?", "author": "thiagotnunes", "createdAt": "2020-08-27T00:09:42Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -300,31 +303,38 @@ public GapicSpannerRpc(final SpannerOptions options) {\n                 .build());\n     // First check if SpannerOptions provides a TransportChannerProvider. Create one\n     // with information gathered from SpannerOptions if none is provided\n+    InstantiatingGrpcChannelProvider.Builder defaultChannelProviderBuilder =\n+        InstantiatingGrpcChannelProvider.newBuilder()\n+            .setChannelConfigurator(options.getChannelConfigurator())\n+            .setEndpoint(options.getEndpoint())\n+            .setMaxInboundMessageSize(MAX_MESSAGE_SIZE)\n+            .setMaxInboundMetadataSize(MAX_METADATA_SIZE)\n+            .setPoolSize(options.getNumChannels())\n+            .setExecutor(executorProvider.getExecutor())\n+\n+            // Set a keepalive time of 120 seconds to help long running\n+            // commit GRPC calls succeed\n+            .setKeepAliveTime(Duration.ofSeconds(GRPC_KEEPALIVE_SECONDS))\n+\n+            // Then check if SpannerOptions provides an InterceptorProvider. Create a default\n+            // SpannerInterceptorProvider if none is provided\n+            .setInterceptorProvider(\n+                SpannerInterceptorProvider.create(\n+                    MoreObjects.firstNonNull(\n+                        options.getInterceptorProvider(),\n+                        SpannerInterceptorProvider.createDefault()))\n+                    .withEncoding(compressorName))\n+            .setHeaderProvider(mergedHeaderProvider);\n+\n+    // TODO(weiranf): Set to true by default once DirectPath goes to public beta.\n+    if (shouldAttemptDirectPath()) {", "originalCommit": "b6b1428f848d26323529df787a42d438b6e6d4fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU3NjYxNg==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r478576616", "bodyText": "Hi Thiago, thanks for the comment! So our original idea is, the DirectPath is a network side feature, it should be agnostic to the end users. Currently we add this shouldAttemptDirectPath temporarily so our test can start exercising DirectPath. Once DirectPath is going public, we will remove these temporary checker and set the client to use DirectPath by default. And correct me if I'm wrong, this SpannerOptions seems like a configurable option provided to end users, but in fact we don't actually want users to config DirectPath attempt, which should only be controlled by service owner/SREs via Access Control List. WDYT?", "author": "WeiranFang", "createdAt": "2020-08-27T17:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzczNjQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwNjUwOQ==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r478806509", "bodyText": "That makes sense, thanks for the response.\nA couple of questions on the approach:\n\nAren't we enabling this to a few customers at first (before being the default)? If so, is the expectation that they would have to execute with the property set?\nShould we override the endpoint even when the user provides a custom channel provider? I don't know what is best here, but I imagine that it might be confusing if the user executes their program with the property set and a custom channel provider, but do not get the benefits of the direct path.\n\nThanks!", "author": "thiagotnunes", "createdAt": "2020-08-28T03:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzczNjQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxODkzOQ==", "url": "https://github.com/googleapis/java-spanner/pull/396#discussion_r478818939", "bodyText": "Good questions! To answer them:\nActually we would need to remove these temporary checker and enable DirectPath with a client lib release before we engage real customers, because DirectPath should be fully controlled by the ACL config (i.e. initially only a few customers will get ALLOW from ACL check, all others will get DENY). So this property set should only be used by our tests.\nThis sandbox endpoint is only used for our testing purposes (as right now DirectPath-ipv4 is only available in certain cell in prod) Once we've done enough tests and DirectPath is fully ready, Spanner will make its default endpoint to be capable of handling DirectPath traffic. So by that time, we will use the same endpoint no matter the client is using DirectPath or Not.", "author": "WeiranFang", "createdAt": "2020-08-28T04:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzczNjQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "01327bf623aeea764ac9c44656a72fe0aaf9d64c", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\nindex e240e762..020146ec 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\n\n@@ -320,9 +320,9 @@ public class GapicSpannerRpc implements SpannerRpc {\n             // SpannerInterceptorProvider if none is provided\n             .setInterceptorProvider(\n                 SpannerInterceptorProvider.create(\n-                    MoreObjects.firstNonNull(\n-                        options.getInterceptorProvider(),\n-                        SpannerInterceptorProvider.createDefault()))\n+                        MoreObjects.firstNonNull(\n+                            options.getInterceptorProvider(),\n+                            SpannerInterceptorProvider.createDefault()))\n                     .withEncoding(compressorName))\n             .setHeaderProvider(mergedHeaderProvider);\n \n"}}, {"oid": "01327bf623aeea764ac9c44656a72fe0aaf9d64c", "url": "https://github.com/googleapis/java-spanner/commit/01327bf623aeea764ac9c44656a72fe0aaf9d64c", "message": "fix lint", "committedDate": "2020-08-28T04:10:47Z", "type": "commit"}]}