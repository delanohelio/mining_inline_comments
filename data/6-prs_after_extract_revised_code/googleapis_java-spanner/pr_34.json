{"pr_number": 34, "pr_title": "fix: stop sending RPCs to deleted database", "pr_createdAt": "2020-01-14T12:40:00Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/34", "timeline": [{"oid": "2a5f71ee1ce117e57c0843e9a34f36375a1ff8d1", "url": "https://github.com/googleapis/java-spanner/commit/2a5f71ee1ce117e57c0843e9a34f36375a1ff8d1", "message": "fix: remove double check on isValid", "committedDate": "2020-01-14T14:32:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTA4MQ==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367745081", "bodyText": "nits: use else if?", "author": "hengfengli", "createdAt": "2020-01-17T02:36:33Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -775,6 +776,15 @@ public void close() {\n       if (lastException != null && isSessionNotFound(lastException)) {\n         invalidateSession(this);\n       } else {\n+        if (lastException != null && isDatabaseNotFound(lastException)) {", "originalCommit": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDQwNg==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310406", "bodyText": "That wouldn't work, as the else block also contains a non-conditional block underneath this if-block.", "author": "olavloite", "createdAt": "2020-01-19T17:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "948ba363280b92ae06d9da86b35eddb6dbb641fe", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java\nindex cdbf383d..952da3d6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java\n\n@@ -776,15 +776,6 @@ final class SessionPool {\n       if (lastException != null && isSessionNotFound(lastException)) {\n         invalidateSession(this);\n       } else {\n-        if (lastException != null && isDatabaseNotFound(lastException)) {\n-          // Mark this session pool as no longer valid and then release the session into the pool as\n-          // there is nothing we can do with it anyways.\n-          synchronized (lock) {\n-            SessionPool.this.databaseNotFound =\n-                MoreObjects.firstNonNull(\n-                    SessionPool.this.databaseNotFound, (DatabaseNotFoundException) lastException);\n-          }\n-        }\n         lastException = null;\n         if (state != SessionState.CLOSING) {\n           state = SessionState.AVAILABLE;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NzA2OA==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367747068", "bodyText": "Why use a regex matching instead of message.contains()? I mean that it is very sensitive to any small text/format change in the message.", "author": "hengfengli", "createdAt": "2020-01-17T02:47:19Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "diffHunk": "@@ -176,6 +182,8 @@ private static SpannerException newSpannerExceptionPreformatted(\n       case NOT_FOUND:\n         if (message != null && message.contains(\"Session not found\")) {\n           return new SessionNotFoundException(token, message, cause);\n+        } else if (message != null && DATABASE_NOT_FOUND_MSG_PATTERN.matcher(message).matches()) {", "originalCommit": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDc4MA==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310780", "bodyText": "The reason I added the extensive regex matching for this exception is that it could be thrown by basically any RPC, and I worry about situations where the text 'Database not found' is used as part of the input, and then also returned by the server as part of an error message. I also added an integration test to ensure that the matching does stay in sync with the backend. But maybe I'm a little bit too paranoid here...", "author": "olavloite", "createdAt": "2020-01-19T17:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NzA2OA=="}], "type": "inlineReview", "revised_code": {"commit": "948ba363280b92ae06d9da86b35eddb6dbb641fe", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java\nindex 22b5f065..701f5bb4 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java\n\n@@ -182,7 +176,7 @@ public final class SpannerExceptionFactory {\n       case NOT_FOUND:\n         if (message != null && message.contains(\"Session not found\")) {\n           return new SessionNotFoundException(token, message, cause);\n-        } else if (message != null && DATABASE_NOT_FOUND_MSG_PATTERN.matcher(message).matches()) {\n+        } else if (message != null && message.contains(\"Database not found\")) {\n           return new DatabaseNotFoundException(token, message, cause);\n         }\n         // Fall through to the default.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDUyMw==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367750523", "bodyText": "nits: I feel that a hardcoded message is more clear here, because if the message in the code has been mistakenly changed, this test will let it pass instead of finding out the difference.", "author": "hengfengli", "createdAt": "2020-01-17T03:07:09Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -51,8 +51,21 @@\n \n @RunWith(JUnit4.class)\n public class DatabaseClientImplTest {\n-  private static final String DATABASE_DOES_NOT_EXIST_MSG =\n-      \"Database not found: projects/<project>/instances/<instance>/databases/<database> resource_type: \\\"type.googleapis.com/google.spanner.admin.database.v1.Database\\\" resource_name: \\\"projects/<project>/instances/<instance>/databases/<database>\\\" description: \\\"Database does not exist.\\\"\";\n+  private static final String DATABASE_NOT_FOUND_FORMAT =", "originalCommit": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkyNA==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310924", "bodyText": "Good point. I changed it back to a hard coded string.", "author": "olavloite", "createdAt": "2020-01-19T17:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "948ba363280b92ae06d9da86b35eddb6dbb641fe", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\nindex 92f09509..cd8025a6 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n\n@@ -51,21 +51,8 @@ import org.threeten.bp.Duration;\n \n @RunWith(JUnit4.class)\n public class DatabaseClientImplTest {\n-  private static final String DATABASE_NOT_FOUND_FORMAT =\n-      SpannerExceptionFactory.DATABASE_NOT_FOUND_MSG.replaceAll(\"\\\\.\\\\*\", \"%s\");\n-  private static final String TEST_PROJECT = \"my-project\";\n-  private static final String TEST_INSTANCE = \"my-instance\";\n-  private static final String TEST_DATABASE = \"my-database\";\n-  private static final String DATABASE_NOT_FOUND_MSG =\n-      String.format(\n-          \"com.google.cloud.spanner.SpannerException: NOT_FOUND: io.grpc.StatusRuntimeException: NOT_FOUND: \"\n-              + DATABASE_NOT_FOUND_FORMAT,\n-          TEST_PROJECT,\n-          TEST_INSTANCE,\n-          TEST_DATABASE,\n-          TEST_PROJECT,\n-          TEST_INSTANCE,\n-          TEST_DATABASE);\n+  private static final String DATABASE_DOES_NOT_EXIST_MSG =\n+      \"Database not found: projects/<project>/instances/<instance>/databases/<database> resource_type: \\\"type.googleapis.com/google.spanner.admin.database.v1.Database\\\" resource_name: \\\"projects/<project>/instances/<instance>/databases/<database>\\\" description: \\\"Database does not exist.\\\"\";\n   private static MockSpannerServiceImpl mockSpanner;\n   private static Server server;\n   private static LocalChannelProvider channelProvider;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1NTI0OA==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367755248", "bodyText": "I guess we should break the while here once we get the error.", "author": "hengfengli", "createdAt": "2020-01-17T03:32:35Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java", "diffHunk": "@@ -43,4 +54,68 @@ public void badDdl() {\n \n     env.getTestHelper().createTestDatabase(\"CREATE TABLE T ( Illegal Way To Define A Table )\");\n   }\n+\n+  @Test\n+  public void databaseDeletedTest() throws Exception {\n+    // Create a test db, do a query, then delete it and verify that it returns\n+    // DatabaseNotFoundExceptions.\n+    Database db = env.getTestHelper().createTestDatabase();\n+    DatabaseClient client = env.getTestHelper().getClient().getDatabaseClient(db.getId());\n+    try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n+      assertThat(rs.next()).isTrue();\n+      assertThat(rs.getLong(0)).isEqualTo(1L);\n+      assertThat(rs.next()).isFalse();\n+    }\n+\n+    // Delete the database.\n+    db.drop();\n+    // We need to wait a little before Spanner actually starts sending DatabaseNotFound errors.\n+    ExponentialBackOff backoff =\n+        new ExponentialBackOff.Builder()\n+            .setInitialIntervalMillis(1000)\n+            .setMaxElapsedTimeMillis(35000)\n+            .setMaxIntervalMillis(5000)\n+            .build();\n+    DatabaseNotFoundException notFoundException = null;\n+    long millis = 0L;\n+    while ((millis = backoff.nextBackOffMillis()) != ExponentialBackOff.STOP) {\n+      Thread.sleep(millis);\n+      // Queries to this database should eventually return DatabaseNotFoundExceptions.\n+      try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n+        rs.next();\n+      } catch (DatabaseNotFoundException e) {\n+        // This is what we expect.\n+        notFoundException = e;", "originalCommit": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk2NQ==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310965", "bodyText": "Yep, good catch.", "author": "olavloite", "createdAt": "2020-01-19T17:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1NTI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "948ba363280b92ae06d9da86b35eddb6dbb641fe", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java\nindex 667e2002..2fb5cda4 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java\n\n@@ -54,68 +43,4 @@ public class ITDatabaseTest {\n \n     env.getTestHelper().createTestDatabase(\"CREATE TABLE T ( Illegal Way To Define A Table )\");\n   }\n-\n-  @Test\n-  public void databaseDeletedTest() throws Exception {\n-    // Create a test db, do a query, then delete it and verify that it returns\n-    // DatabaseNotFoundExceptions.\n-    Database db = env.getTestHelper().createTestDatabase();\n-    DatabaseClient client = env.getTestHelper().getClient().getDatabaseClient(db.getId());\n-    try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n-      assertThat(rs.next()).isTrue();\n-      assertThat(rs.getLong(0)).isEqualTo(1L);\n-      assertThat(rs.next()).isFalse();\n-    }\n-\n-    // Delete the database.\n-    db.drop();\n-    // We need to wait a little before Spanner actually starts sending DatabaseNotFound errors.\n-    ExponentialBackOff backoff =\n-        new ExponentialBackOff.Builder()\n-            .setInitialIntervalMillis(1000)\n-            .setMaxElapsedTimeMillis(35000)\n-            .setMaxIntervalMillis(5000)\n-            .build();\n-    DatabaseNotFoundException notFoundException = null;\n-    long millis = 0L;\n-    while ((millis = backoff.nextBackOffMillis()) != ExponentialBackOff.STOP) {\n-      Thread.sleep(millis);\n-      // Queries to this database should eventually return DatabaseNotFoundExceptions.\n-      try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n-        rs.next();\n-      } catch (DatabaseNotFoundException e) {\n-        // This is what we expect.\n-        notFoundException = e;\n-      }\n-    }\n-    assertThat(notFoundException).isNotNull();\n-\n-    // Now re-create a database with the same name.\n-    OperationFuture<Database, CreateDatabaseMetadata> op =\n-        env.getTestHelper()\n-            .getClient()\n-            .getDatabaseAdminClient()\n-            .createDatabase(\n-                db.getId().getInstanceId().getInstance(),\n-                db.getId().getDatabase(),\n-                Collections.<String>emptyList());\n-    Database newDb = op.get();\n-\n-    // Queries using the same DatabaseClient should still return DatabaseNotFoundExceptions.\n-    try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n-      rs.next();\n-      fail(\"Missing expected DatabaseNotFoundException\");\n-    } catch (DatabaseNotFoundException e) {\n-      // This is what we expect.\n-    }\n-\n-    // Now get a new DatabaseClient for the database. This should now result in a valid\n-    // DatabaseClient.\n-    DatabaseClient newClient = env.getTestHelper().getClient().getDatabaseClient(newDb.getId());\n-    try (ResultSet rs = newClient.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n-      assertThat(rs.next()).isTrue();\n-      assertThat(rs.getLong(0)).isEqualTo(1L);\n-      assertThat(rs.next()).isFalse();\n-    }\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwODA3NQ==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367208075", "bodyText": "2020", "author": "skuruppu", "createdAt": "2020-01-16T02:49:44Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Google LLC", "originalCommit": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5MTAwNw==", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r369391007", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-01-22T06:40:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwODA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "948ba363280b92ae06d9da86b35eddb6dbb641fe", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java\nindex f8423a64..50fd18a7 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java\n\n@@ -20,8 +20,7 @@ import javax.annotation.Nullable;\n \n /**\n  * Exception thrown by Cloud Spanner when an operation detects that the database that is being used\n- * no longer exists. This type of error has its own subclass as it is a condition that should cause\n- * the client library to stop trying to send RPCs to the backend until the user has taken action.\n+ * no longer exists. This type of error has its own subclass as it is a condition that should cause the client library to stop trying to send RPCs to the backend until the user has taken action.\n  */\n public class DatabaseNotFoundException extends SpannerException {\n   private static final long serialVersionUID = -6395746612598975751L;\n"}}, {"oid": "948ba363280b92ae06d9da86b35eddb6dbb641fe", "url": "https://github.com/googleapis/java-spanner/commit/948ba363280b92ae06d9da86b35eddb6dbb641fe", "message": "fix: stop sending rpcs on deleted db", "committedDate": "2020-01-22T06:16:39Z", "type": "commit"}, {"oid": "6a35e03593c948a96724d6751ef80a9834a03ec1", "url": "https://github.com/googleapis/java-spanner/commit/6a35e03593c948a96724d6751ef80a9834a03ec1", "message": "fix: client should stop sending rpcs after database dropped\n\nDatabaseClients should not continue to try to send RPCs to a database that has\nbeen deleted. Instead, the session pool will keep track of whether a database\nnot found error has been returned for a database, and if so, will invalidate\nitself. All subsequent calls for this database will return a DatabaseNotFoundException\nwithout calling a RPC.\n\nIf a database is re-created, the user must create a new DatabaseClient with a new\nsession pool in order to resume usage of the database.\n\nFixes #16", "committedDate": "2020-01-22T06:16:39Z", "type": "commit"}, {"oid": "8a83158f16ce12e58326994e66e5a988219fcf86", "url": "https://github.com/googleapis/java-spanner/commit/8a83158f16ce12e58326994e66e5a988219fcf86", "message": "fix: remove double check on isValid", "committedDate": "2020-01-22T06:16:39Z", "type": "commit"}, {"oid": "3a8f22182b5113c068fb8be2ddbd81ed08f3a81c", "url": "https://github.com/googleapis/java-spanner/commit/3a8f22182b5113c068fb8be2ddbd81ed08f3a81c", "message": "fix: add wait to deleted db integration test", "committedDate": "2020-01-22T06:16:39Z", "type": "commit"}, {"oid": "ed29debf751680f22f0f0d7bef1ebcc5012901dc", "url": "https://github.com/googleapis/java-spanner/commit/ed29debf751680f22f0f0d7bef1ebcc5012901dc", "message": "fix: process review comments", "committedDate": "2020-01-22T06:16:39Z", "type": "commit"}, {"oid": "dd6c56bb4aa784bdfb29bdaeb09f6a9461eccc63", "url": "https://github.com/googleapis/java-spanner/commit/dd6c56bb4aa784bdfb29bdaeb09f6a9461eccc63", "message": "fix: update copyright year", "committedDate": "2020-01-22T06:16:39Z", "type": "commit"}, {"oid": "dd6c56bb4aa784bdfb29bdaeb09f6a9461eccc63", "url": "https://github.com/googleapis/java-spanner/commit/dd6c56bb4aa784bdfb29bdaeb09f6a9461eccc63", "message": "fix: update copyright year", "committedDate": "2020-01-22T06:16:39Z", "type": "forcePushed"}]}