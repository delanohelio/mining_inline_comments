{"pr_number": 544, "pr_title": "feat!: add support for CommitStats", "pr_createdAt": "2020-10-24T10:59:11Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/544", "timeline": [{"oid": "38721994a0dd1589723b4a572de9c492a75337b6", "url": "https://github.com/googleapis/java-spanner/commit/38721994a0dd1589723b4a572de9c492a75337b6", "message": "feat!: add support for CommitStats\n\nAdds support for returning CommitStats from read/write transactions.", "committedDate": "2020-10-24T10:57:36Z", "type": "commit"}, {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6", "url": "https://github.com/googleapis/java-spanner/commit/def876854f2dad9fe1568cd419f439f2b28fd1e6", "message": "fix: add clirr ignored differences", "committedDate": "2020-10-24T11:47:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzgxNQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r514117815", "bodyText": "Should this be \"getCommitResponse can only be invoked...\"?", "author": "skuruppu", "createdAt": "2020-10-29T09:29:17Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPoolAsyncTransactionManager.java", "diffHunk": "@@ -239,4 +244,22 @@ public TransactionState getState() {\n       return txnState;\n     }\n   }\n+\n+  public ApiFuture<CommitResponse> getCommitResponse() {\n+    synchronized (lock) {\n+      Preconditions.checkState(\n+          txnState == TransactionState.COMMITTED,\n+          \"commit can only be invoked if the transaction was successfully committed\");", "originalCommit": "def876854f2dad9fe1568cd419f439f2b28fd1e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2NzQ4NQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r515467485", "bodyText": "No, this is in the actual commit method. A client application could for example call commit() after calling rollback or before calling begin. This error will be thrown in those cases.", "author": "olavloite", "createdAt": "2020-10-31T07:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzgxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzk2NQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r514117965", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n          \n          \n            \n                    \"getCommitResponse can only be invoked if the transaction committed successfully\");", "author": "skuruppu", "createdAt": "2020-10-29T09:29:32Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java", "diffHunk": "@@ -115,7 +117,14 @@ public Timestamp getCommitTimestamp() {\n     Preconditions.checkState(\n         txnState == TransactionState.COMMITTED,\n         \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n-    return txn.commitTimestamp();\n+    return txn.getCommitResponse().getCommitTimestamp();\n+  }\n+\n+  public CommitResponse getCommitResponse() {\n+    Preconditions.checkState(\n+        txnState == TransactionState.COMMITTED,\n+        \"getCommitTimestamp can only be invoked if the transaction committed successfully\");", "originalCommit": "def876854f2dad9fe1568cd419f439f2b28fd1e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "34fbda64201c9690b6a5b5619050c86cdb32d897", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java\nindex f7cea28d..6ffb02c5 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java\n\n@@ -123,7 +123,7 @@ final class TransactionManagerImpl implements TransactionManager, SessionTransac\n   public CommitResponse getCommitResponse() {\n     Preconditions.checkState(\n         txnState == TransactionState.COMMITTED,\n-        \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n+        \"getCommitResponse can only be invoked if the transaction committed successfully\");\n     return txn.getCommitResponse();\n   }\n \n"}}, {"oid": "5372dae4e6470401cbfcd2db1e071ab9db7ca7c8", "url": "https://github.com/googleapis/java-spanner/commit/5372dae4e6470401cbfcd2db1e071ab9db7ca7c8", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2020-10-31T07:26:51Z", "type": "commit"}, {"oid": "34fbda64201c9690b6a5b5619050c86cdb32d897", "url": "https://github.com/googleapis/java-spanner/commit/34fbda64201c9690b6a5b5619050c86cdb32d897", "message": "fix: error message should start with getCommitResponse\n\nCo-authored-by: skuruppu <skuruppu@google.com>", "committedDate": "2020-10-31T07:30:04Z", "type": "commit"}, {"oid": "8f61c2ab991eec6c028e31f65e27dcc1295e17e9", "url": "https://github.com/googleapis/java-spanner/commit/8f61c2ab991eec6c028e31f65e27dcc1295e17e9", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2020-11-06T12:06:33Z", "type": "commit"}, {"oid": "041b34de0ba334d01dc70052712fec17fa049b7c", "url": "https://github.com/googleapis/java-spanner/commit/041b34de0ba334d01dc70052712fec17fa049b7c", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2020-12-05T09:27:25Z", "type": "commit"}, {"oid": "82990542eef1c43d58b50ace3e54c36406ef9d9a", "url": "https://github.com/googleapis/java-spanner/commit/82990542eef1c43d58b50ace3e54c36406ef9d9a", "message": "fix: remove overload delay", "committedDate": "2020-12-10T19:12:11Z", "type": "commit"}, {"oid": "9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff", "url": "https://github.com/googleapis/java-spanner/commit/9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2020-12-10T19:12:16Z", "type": "commit"}, {"oid": "8c15641f07c55dea211aa714f45d9f7da8201aaa", "url": "https://github.com/googleapis/java-spanner/commit/8c15641f07c55dea211aa714f45d9f7da8201aaa", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2021-01-23T13:51:09Z", "type": "commit"}, {"oid": "919cf028377a3dc224c5c870b8129aae52d1f911", "url": "https://github.com/googleapis/java-spanner/commit/919cf028377a3dc224c5c870b8129aae52d1f911", "message": "chore: cleanup after merge", "committedDate": "2021-01-23T13:51:34Z", "type": "commit"}, {"oid": "97ec9175bee38ba64aadb960d6efdf57a5ad2b20", "url": "https://github.com/googleapis/java-spanner/commit/97ec9175bee38ba64aadb960d6efdf57a5ad2b20", "message": "fix: update copyright years of new files", "committedDate": "2021-01-23T14:01:16Z", "type": "commit"}, {"oid": "afeb0fd86a8248a244a5b52cbf4e2065db65bf30", "url": "https://github.com/googleapis/java-spanner/commit/afeb0fd86a8248a244a5b52cbf4e2065db65bf30", "message": "test: fix flaky test", "committedDate": "2021-01-23T14:25:16Z", "type": "commit"}, {"oid": "8524526a0588ae7d942199a2f831473b70d4a0d1", "url": "https://github.com/googleapis/java-spanner/commit/8524526a0588ae7d942199a2f831473b70d4a0d1", "message": "test: skip commit stats tests on emulator", "committedDate": "2021-01-23T15:20:09Z", "type": "commit"}, {"oid": "06b3e22760a5d5a968717250f0f260cc2d7ecf11", "url": "https://github.com/googleapis/java-spanner/commit/06b3e22760a5d5a968717250f0f260cc2d7ecf11", "message": "test: missed one commit stats tests against emulator", "committedDate": "2021-01-23T15:32:35Z", "type": "commit"}, {"oid": "1c17d16efddb1839884376c6066faadce8181684", "url": "https://github.com/googleapis/java-spanner/commit/1c17d16efddb1839884376c6066faadce8181684", "message": "test: skip another emulator test", "committedDate": "2021-01-23T15:47:36Z", "type": "commit"}, {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2", "url": "https://github.com/googleapis/java-spanner/commit/664b87daf36668699cbc54dfc544ef64616f6da2", "message": "test: add missing test cases", "committedDate": "2021-01-23T19:45:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwNTMwNg==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566105306", "bodyText": "Boolean.valueOf(withCommitStats).hashCode() is a constant here.", "author": "elharo", "createdAt": "2021-01-28T13:47:31Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "diffHunk": "@@ -253,6 +277,9 @@ public boolean equals(Object o) {\n   @Override\n   public int hashCode() {\n     int result = 31;\n+    if (withCommitStats) {\n+      result = 31 * result + Boolean.valueOf(withCommitStats).hashCode();", "originalCommit": "664b87daf36668699cbc54dfc544ef64616f6da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTU5MQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265591", "bodyText": "Replaced with constant.", "author": "olavloite", "createdAt": "2021-01-30T16:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwNTMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java\nindex d0c8dde9..7c0eab2c 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java\n\n@@ -278,7 +278,7 @@ public final class Options implements Serializable {\n   public int hashCode() {\n     int result = 31;\n     if (withCommitStats) {\n-      result = 31 * result + Boolean.valueOf(withCommitStats).hashCode();\n+      result = 31 * result + 1231;\n     }\n     if (limit != null) {\n       result = 31 * result + limit.hashCode();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODA5MQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566108091", "bodyText": "This should be a separate test method so exactly one thing is tested in the method.", "author": "elharo", "createdAt": "2021-01-28T13:51:15Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -224,6 +224,9 @@ public void queryEquality() {\n   public void testFromTransactionOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n+\n+    opts = Options.fromTransactionOptions(Options.commitStats());", "originalCommit": "664b87daf36668699cbc54dfc544ef64616f6da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTY2MA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265660", "bodyText": "Separated into separate test methods.", "author": "olavloite", "createdAt": "2021-01-30T16:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex ecf1404f..725db5bf 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -221,33 +221,56 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n+  }\n \n-    opts = Options.fromTransactionOptions(Options.commitStats());\n+  @Test\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options opts = Options.fromTransactionOptions(Options.commitStats());\n     assertThat(opts.toString()).contains(\"withCommitStats: true\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options o1 = Options.fromTransactionOptions();\n+    Options o2 = Options.fromTransactionOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromTransactionOptions(Options.commitStats());\n     assertThat(o1.equals(o2)).isTrue();\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n     assertThat(o1.equals(o2)).isFalse();\n+  }\n \n-    o1 = Options.fromTransactionOptions(Options.commitStats());\n-    o2 = Options.fromTransactionOptions(Options.commitStats());\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsHashCode() {\n+    Options o1 = Options.fromTransactionOptions();\n+    Options o2 = Options.fromTransactionOptions();\n     assertThat(o1.hashCode()).isEqualTo(o2.hashCode());\n+  }\n \n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsHashCode() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(o1.hashCode()).isEqualTo(o2.hashCode());\n+  }\n+\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionHashCode() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n     assertThat(o1.hashCode()).isNotEqualTo(o2.hashCode());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODM4Nw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566108387", "bodyText": "again, separate test methods are advisable here.", "author": "elharo", "createdAt": "2021-01-28T13:51:37Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -237,6 +240,15 @@ public void testTransactionOptionsEquality() {\n \n     o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n     assertThat(o1.equals(o2)).isFalse();\n+\n+    o1 = Options.fromTransactionOptions(Options.commitStats());", "originalCommit": "664b87daf36668699cbc54dfc544ef64616f6da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTYwOA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265608", "bodyText": "Separated into separate test methods.", "author": "olavloite", "createdAt": "2021-01-30T16:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex ecf1404f..725db5bf 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -221,33 +221,56 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n+  }\n \n-    opts = Options.fromTransactionOptions(Options.commitStats());\n+  @Test\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options opts = Options.fromTransactionOptions(Options.commitStats());\n     assertThat(opts.toString()).contains(\"withCommitStats: true\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options o1 = Options.fromTransactionOptions();\n+    Options o2 = Options.fromTransactionOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromTransactionOptions(Options.commitStats());\n     assertThat(o1.equals(o2)).isTrue();\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n     assertThat(o1.equals(o2)).isFalse();\n+  }\n \n-    o1 = Options.fromTransactionOptions(Options.commitStats());\n-    o2 = Options.fromTransactionOptions(Options.commitStats());\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsHashCode() {\n+    Options o1 = Options.fromTransactionOptions();\n+    Options o2 = Options.fromTransactionOptions();\n     assertThat(o1.hashCode()).isEqualTo(o2.hashCode());\n+  }\n \n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsHashCode() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(o1.hashCode()).isEqualTo(o2.hashCode());\n+  }\n+\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionHashCode() {\n+    Options o1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options o2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n     assertThat(o1.hashCode()).isNotEqualTo(o2.hashCode());\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTAxMQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566121011", "bodyText": "txn --> transaction per Google style guide", "author": "elharo", "createdAt": "2021-01-28T14:08:46Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();\n+      while (true) {\n+        try {\n+          get(\n+              ctx.then(\n+                      new AsyncTransactionFunction<Void, Void>() {\n+                        @Override\n+                        public ApiFuture<Void> apply(TransactionContext txn, Void input)", "originalCommit": "664b87daf36668699cbc54dfc544ef64616f6da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTYzMg==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265632", "bodyText": "Done.", "author": "olavloite", "createdAt": "2021-01-30T16:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java\nindex ee8e771b..c9475c19 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java\n\n@@ -345,11 +345,12 @@ public class ITAsyncAPITest {\n   public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n     assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n     try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n-      TransactionContextFuture ctx = mgr.beginAsync();\n+      TransactionContextFuture context = mgr.beginAsync();\n       while (true) {\n         try {\n           get(\n-              ctx.then(\n+              context\n+                  .then(\n                       new AsyncTransactionFunction<Void, Void>() {\n                         @Override\n                         public ApiFuture<Void> apply(TransactionContext txn, Void input)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTE0Mw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566121143", "bodyText": "ctx --> context per Google style guide", "author": "elharo", "createdAt": "2021-01-28T14:08:57Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();", "originalCommit": "664b87daf36668699cbc54dfc544ef64616f6da2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTYyOA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265628", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-01-30T16:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTE0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java\nindex ee8e771b..c9475c19 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java\n\n@@ -345,11 +345,12 @@ public class ITAsyncAPITest {\n   public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n     assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n     try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n-      TransactionContextFuture ctx = mgr.beginAsync();\n+      TransactionContextFuture context = mgr.beginAsync();\n       while (true) {\n         try {\n           get(\n-              ctx.then(\n+              context\n+                  .then(\n                       new AsyncTransactionFunction<Void, Void>() {\n                         @Override\n                         public ApiFuture<Void> apply(TransactionContext txn, Void input)\n"}}, {"oid": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "url": "https://github.com/googleapis/java-spanner/commit/6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "message": "fix: address review comments", "committedDate": "2021-01-30T16:10:03Z", "type": "commit"}, {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe", "url": "https://github.com/googleapis/java-spanner/commit/0b448c3824eedc617647aa599be346a3b754b6fe", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2021-02-01T09:34:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MDM5Mw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569450393", "bodyText": "The assume here is surprising. Why would this be sometimes be true and sometimes not true in this one test method?", "author": "elharo", "createdAt": "2021-02-03T14:19:01Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());", "originalCommit": "0b448c3824eedc617647aa599be346a3b754b6fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTU4NjA3OQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569586079", "bodyText": "isUsingEmulator() checks whether the environment variable SPANNER_EMULATOR_HOST has been set to a non-empty value. If so, the integration tests are running against the emulator. The emulator does not support all features of Cloud Spanner, which means we need to skip some specific tests. The CI environments runs the tests both against the emulator and Cloud Spanner.", "author": "olavloite", "createdAt": "2021-02-03T17:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "57ea714b5d5bae5a91178351efd98c8c6272037a", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java\nindex 1c789f7c..8532fd77 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java\n\n@@ -646,7 +647,7 @@ public class ITTransactionTest {\n             return null;\n           }\n         });\n-    assertThat(runner.getCommitResponse().getCommitStats()).isNotNull();\n+    assertNotNull(runner.getCommitResponse().getCommitStats());\n     // MutationCount = 2 (2 columns).\n     assertThat(runner.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MTE0OQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569451149", "bodyText": "you can use assertNotNull here. Truth doesn't add anything for simple cases.", "author": "elharo", "createdAt": "2021-02-03T14:19:47Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    final String key = uniqueKey();\n+    TransactionRunner runner = client.readWriteTransaction(Options.commitStats());\n+    runner.run(\n+        new TransactionCallable<Void>() {\n+          @Override\n+          public Void run(TransactionContext transaction) throws Exception {\n+            transaction.buffer(\n+                Mutation.newInsertBuilder(\"T\").set(\"K\").to(key).set(\"V\").to(0).build());\n+            return null;\n+          }\n+        });\n+    assertThat(runner.getCommitResponse().getCommitStats()).isNotNull();", "originalCommit": "0b448c3824eedc617647aa599be346a3b754b6fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTU5NzY1MQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569597651", "bodyText": "done.", "author": "olavloite", "createdAt": "2021-02-03T17:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "57ea714b5d5bae5a91178351efd98c8c6272037a", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java\nindex 1c789f7c..8532fd77 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java\n\n@@ -646,7 +647,7 @@ public class ITTransactionTest {\n             return null;\n           }\n         });\n-    assertThat(runner.getCommitResponse().getCommitStats()).isNotNull();\n+    assertNotNull(runner.getCommitResponse().getCommitStats());\n     // MutationCount = 2 (2 columns).\n     assertThat(runner.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n   }\n"}}, {"oid": "83039fbbc31d93d35ba0343c651bee3a872d6fd0", "url": "https://github.com/googleapis/java-spanner/commit/83039fbbc31d93d35ba0343c651bee3a872d6fd0", "message": "Merge branch 'master' into commit-stats2", "committedDate": "2021-02-03T17:07:45Z", "type": "commit"}, {"oid": "57ea714b5d5bae5a91178351efd98c8c6272037a", "url": "https://github.com/googleapis/java-spanner/commit/57ea714b5d5bae5a91178351efd98c8c6272037a", "message": "chore: use junit assertion instead of truth", "committedDate": "2021-02-03T17:20:16Z", "type": "commit"}, {"oid": "66c5f88b55836abf4912e1031e504ef5d2abe9c3", "url": "https://github.com/googleapis/java-spanner/commit/66c5f88b55836abf4912e1031e504ef5d2abe9c3", "message": "chore: replace truth asserts with junit asserts", "committedDate": "2021-02-04T07:41:12Z", "type": "commit"}, {"oid": "1d17973b81e2903cbab466b7a3bb6e577f707c8b", "url": "https://github.com/googleapis/java-spanner/commit/1d17973b81e2903cbab466b7a3bb6e577f707c8b", "message": "chore: replace truth assertions with junit", "committedDate": "2021-02-05T14:49:22Z", "type": "commit"}, {"oid": "48ef21be5bcf41f8cacfa1eaceaab5726624240c", "url": "https://github.com/googleapis/java-spanner/commit/48ef21be5bcf41f8cacfa1eaceaab5726624240c", "message": "chore: cleanup test and variable names", "committedDate": "2021-02-08T17:51:11Z", "type": "commit"}, {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620", "url": "https://github.com/googleapis/java-spanner/commit/1f33c42743920b21a8b70cf008f55f8983d49620", "message": "fix: rename test method and variables", "committedDate": "2021-02-09T10:45:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5NjgyNA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576796824", "bodyText": "will throw --> throws\nper Google style", "author": "elharo", "createdAt": "2021-02-16T12:47:28Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java", "diffHunk": "@@ -56,4 +56,10 @@\n    * {@link ExecutionException} if the transaction did not commit.\n    */\n   ApiFuture<Timestamp> getCommitTimestamp();\n+\n+  /**\n+   * Returns the {@link CommitResponse} of this transaction. {@link ApiFuture#get()} will throw an", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzczNw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853737", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5NjgyNA=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java\nindex 8f88f38a..c9dec98d 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java\n\n@@ -58,7 +58,7 @@ public interface AsyncRunner {\n   ApiFuture<Timestamp> getCommitTimestamp();\n \n   /**\n-   * Returns the {@link CommitResponse} of this transaction. {@link ApiFuture#get()} will throw an\n+   * Returns the {@link CommitResponse} of this transaction. {@link ApiFuture#get()} throws an\n    * {@link ExecutionException} if the transaction did not commit.\n    */\n   ApiFuture<CommitResponse> getCommitResponse();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5ODEzNA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576798134", "bodyText": "letting it slide because it isn't changed in this PR, but catching Throwable is only rarely what you want. This is probably worth filing a bug on.", "author": "elharo", "createdAt": "2021-02-16T12:49:45Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunnerImpl.java", "diffHunk": "@@ -66,16 +74,30 @@ public R run(TransactionContext transaction) throws Exception {\n         });\n   }\n \n-  private void setCommitTimestamp() {\n+  private void setCommitResponse() {\n     try {\n-      commitTimestamp.set(delegate.getCommitTimestamp());\n+      commitResponse.set(delegate.getCommitResponse());\n     } catch (Throwable t) {", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg0MTY3Mw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576841673", "bodyText": "Added issue: #875", "author": "olavloite", "createdAt": "2021-02-16T13:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5ODEzNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5OTI1MQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576799251", "bodyText": "no abbreviated variable names per google style.\nConcretely I did not know what this was when I read it below and had to scroll up to find out.", "author": "elharo", "createdAt": "2021-02-16T12:51:42Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java", "diffHunk": "@@ -132,29 +133,37 @@ public void onError(Throwable t) {\n           SpannerExceptionFactory.newSpannerException(\n               ErrorCode.ABORTED, \"Transaction already aborted\"));\n     }\n-    ApiFuture<Timestamp> res = txn.commitAsync();\n+    ApiFuture<CommitResponse> res = txn.commitAsync();", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzgwMg==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853802", "bodyText": "Changed to commitResponseFuture", "author": "olavloite", "createdAt": "2021-02-16T14:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5OTI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java\nindex 823efc18..2ec914c2 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java\n\n@@ -133,11 +133,11 @@ final class AsyncTransactionManagerImpl\n           SpannerExceptionFactory.newSpannerException(\n               ErrorCode.ABORTED, \"Transaction already aborted\"));\n     }\n-    ApiFuture<CommitResponse> res = txn.commitAsync();\n+    ApiFuture<CommitResponse> commitResponseFuture = txn.commitAsync();\n     txnState = TransactionState.COMMITTED;\n \n     ApiFutures.addCallback(\n-        res,\n+        commitResponseFuture,\n         new ApiFutureCallback<CommitResponse>() {\n           @Override\n           public void onFailure(Throwable t) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDI1MQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576800251", "bodyText": "will be --> are", "author": "elharo", "createdAt": "2021-02-16T12:53:34Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzgzMA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853830", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDI1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java\nindex 95b2d7e4..eaf1a788 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java\n\n@@ -42,11 +42,11 @@ public class CommitStats {\n    * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n    * mutation regardless of the number of interleaved child rows present. The exception to this is\n    * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n-   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting\n-   * a range of rows in the table will count as 1 mutation for the table, plus 2 mutations for each\n-   * row that is deleted because the rows in the secondary index might be scattered over the\n-   * key-space, making it impossible for Cloud Spanner to call a single delete range operation on\n-   * the secondary indexes. Secondary indexes include the foreign keys backing indexes.\n+   * indexes are counted individually. For example, if a table has 2 secondary indexes, deleting a\n+   * range of rows in the table counts as 1 mutation for the table, plus 2 mutations for each row\n+   * that is deleted because the rows in the secondary index might be scattered over the key-space,\n+   * making it impossible for Cloud Spanner to call a single delete range operation on the secondary\n+   * indexes. Secondary indexes include the foreign keys backing indexes.\n    */\n   public long getMutationCount() {\n     return mutationCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDQyMA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576800420", "bodyText": "will count --> counts", "author": "elharo", "createdAt": "2021-02-16T12:53:50Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting\n+   * a range of rows in the table will count as 1 mutation for the table, plus 2 mutations for each", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1Mzg3Ng==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853876", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDQyMA=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java\nindex 95b2d7e4..eaf1a788 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java\n\n@@ -42,11 +42,11 @@ public class CommitStats {\n    * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n    * mutation regardless of the number of interleaved child rows present. The exception to this is\n    * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n-   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting\n-   * a range of rows in the table will count as 1 mutation for the table, plus 2 mutations for each\n-   * row that is deleted because the rows in the secondary index might be scattered over the\n-   * key-space, making it impossible for Cloud Spanner to call a single delete range operation on\n-   * the secondary indexes. Secondary indexes include the foreign keys backing indexes.\n+   * indexes are counted individually. For example, if a table has 2 secondary indexes, deleting a\n+   * range of rows in the table counts as 1 mutation for the table, plus 2 mutations for each row\n+   * that is deleted because the rows in the secondary index might be scattered over the key-space,\n+   * making it impossible for Cloud Spanner to call a single delete range operation on the secondary\n+   * indexes. Secondary indexes include the foreign keys backing indexes.\n    */\n   public long getMutationCount() {\n     return mutationCount;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMjkxMA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576802910", "bodyText": "@RunWith(MockitoJUnitRunner.class) would auto-initialize your mocks", "author": "elharo", "createdAt": "2021-02-16T12:57:50Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.google.api.core.ApiFutures;\n+import com.google.cloud.Timestamp;\n+import io.opencensus.trace.Span;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+\n+@RunWith(JUnit4.class)", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzkxMw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853913", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMjkxMA=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java\nindex 14620389..c60363e7 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java\n\n@@ -19,42 +19,35 @@ package com.google.cloud.spanner;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n-import static org.mockito.MockitoAnnotations.initMocks;\n \n import com.google.api.core.ApiFutures;\n import com.google.cloud.Timestamp;\n import io.opencensus.trace.Span;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.junit.runners.JUnit4;\n import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n \n-@RunWith(JUnit4.class)\n+@RunWith(MockitoJUnitRunner.class)\n public class AsyncTransactionManagerImplTest {\n \n   @Mock private SessionImpl session;\n-  @Mock TransactionRunnerImpl.TransactionContextImpl txn;\n-\n-  @Before\n-  public void setUp() {\n-    initMocks(this);\n-  }\n+  @Mock TransactionRunnerImpl.TransactionContextImpl transaction;\n \n   @Test\n   public void testCommitReturnsCommitStats() {\n     try (AsyncTransactionManagerImpl manager =\n         new AsyncTransactionManagerImpl(session, mock(Span.class), Options.commitStats())) {\n       when(session.newTransaction(Options.fromTransactionOptions(Options.commitStats())))\n-          .thenReturn(txn);\n-      when(txn.ensureTxnAsync()).thenReturn(ApiFutures.<Void>immediateFuture(null));\n+          .thenReturn(transaction);\n+      when(transaction.ensureTxnAsync()).thenReturn(ApiFutures.<Void>immediateFuture(null));\n       Timestamp commitTimestamp = Timestamp.ofTimeMicroseconds(1);\n       CommitResponse response = mock(CommitResponse.class);\n       when(response.getCommitTimestamp()).thenReturn(commitTimestamp);\n-      when(txn.commitAsync()).thenReturn(ApiFutures.immediateFuture(response));\n+      when(transaction.commitAsync()).thenReturn(ApiFutures.immediateFuture(response));\n       manager.beginAsync();\n       manager.commitAsync();\n-      verify(txn).commitAsync();\n+      verify(transaction).commitAsync();\n     }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzY0NQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803645", "bodyText": "assertNotEquals", "author": "elharo", "createdAt": "2021-02-16T12:58:48Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));\n+  }\n+\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n+    assertFalse(option1.equals(option2));", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1Mzk1MA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853950", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex d4830727..db642aed 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -240,21 +238,21 @@ public class OptionsTest {\n   public void testTransactionOptions_noOptionsAreEqual() {\n     Options option1 = Options.fromTransactionOptions();\n     Options option2 = Options.fromTransactionOptions();\n-    assertTrue(option1.equals(option2));\n+    assertEquals(option1, option2);\n   }\n \n   @Test\n   public void testTransactionOptions_withCommitStatsAreEqual() {\n     Options option1 = Options.fromTransactionOptions(Options.commitStats());\n     Options option2 = Options.fromTransactionOptions(Options.commitStats());\n-    assertTrue(option1.equals(option2));\n+    assertEquals(option1, option2);\n   }\n \n   @Test\n   public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n     Options option1 = Options.fromTransactionOptions(Options.commitStats());\n     Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n-    assertFalse(option1.equals(option2));\n+    assertNotEquals(option1, option2);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzc4Mw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803783", "bodyText": "assertEquals", "author": "elharo", "createdAt": "2021-02-16T12:58:58Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1Mzk3Mw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853973", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex d4830727..db642aed 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -240,21 +238,21 @@ public class OptionsTest {\n   public void testTransactionOptions_noOptionsAreEqual() {\n     Options option1 = Options.fromTransactionOptions();\n     Options option2 = Options.fromTransactionOptions();\n-    assertTrue(option1.equals(option2));\n+    assertEquals(option1, option2);\n   }\n \n   @Test\n   public void testTransactionOptions_withCommitStatsAreEqual() {\n     Options option1 = Options.fromTransactionOptions(Options.commitStats());\n     Options option2 = Options.fromTransactionOptions(Options.commitStats());\n-    assertTrue(option1.equals(option2));\n+    assertEquals(option1, option2);\n   }\n \n   @Test\n   public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n     Options option1 = Options.fromTransactionOptions(Options.commitStats());\n     Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n-    assertFalse(option1.equals(option2));\n+    assertNotEquals(option1, option2);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzgzMw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803833", "bodyText": "assertEquals", "author": "elharo", "createdAt": "2021-02-16T12:59:05Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1NDAwNQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576854005", "bodyText": "Done", "author": "olavloite", "createdAt": "2021-02-16T14:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzgzMw=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex d4830727..db642aed 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -240,21 +238,21 @@ public class OptionsTest {\n   public void testTransactionOptions_noOptionsAreEqual() {\n     Options option1 = Options.fromTransactionOptions();\n     Options option2 = Options.fromTransactionOptions();\n-    assertTrue(option1.equals(option2));\n+    assertEquals(option1, option2);\n   }\n \n   @Test\n   public void testTransactionOptions_withCommitStatsAreEqual() {\n     Options option1 = Options.fromTransactionOptions(Options.commitStats());\n     Options option2 = Options.fromTransactionOptions(Options.commitStats());\n-    assertTrue(option1.equals(option2));\n+    assertEquals(option1, option2);\n   }\n \n   @Test\n   public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n     Options option1 = Options.fromTransactionOptions(Options.commitStats());\n     Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n-    assertFalse(option1.equals(option2));\n+    assertNotEquals(option1, option2);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTQ0MA==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576805440", "bodyText": "This one scares me since it looks like an infinite loop Could you add a counter with a maximum number of retries before failure?", "author": "elharo", "createdAt": "2021-02-16T13:01:44Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzOTAyOQ==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576839029", "bodyText": "This is the recommended way to use TransactionManager according to the documentation. It is also the way it is already used in multiple other test cases. I would rather either:\n\nKeep this and all other instances as they are.\nChange this and other instances + the documentation in a separate PR.", "author": "olavloite", "createdAt": "2021-02-16T13:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java\nindex 2346277c..3ea4a067 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java\n\n@@ -235,7 +235,7 @@ public class ITTransactionManagerTest {\n           assertEquals(2L, manager.getCommitResponse().getCommitStats().getMutationCount());\n           break;\n         } catch (AbortedException e) {\n-          Thread.sleep(e.getRetryDelayInMillis() / 1000);\n+          Thread.sleep(e.getRetryDelayInMillis());\n           transaction = manager.resetForRetry();\n         }\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTk4Nw==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576805987", "bodyText": "BUG! Thread.sleep takes milliseconds. No need to divide by 1000.", "author": "elharo", "createdAt": "2021-02-16T13:02:51Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {\n+        transaction.buffer(\n+            Mutation.newInsertBuilder(\"T\")\n+                .set(\"K\")\n+                .to(\"KeyCommitStats\")\n+                .set(\"BoolValue\")\n+                .to(true)\n+                .build());\n+        try {\n+          manager.commit();\n+          assertNotNull(manager.getCommitResponse().getCommitStats());\n+          assertEquals(2L, manager.getCommitResponse().getCommitStats().getMutationCount());\n+          break;\n+        } catch (AbortedException e) {\n+          Thread.sleep(e.getRetryDelayInMillis() / 1000);", "originalCommit": "1f33c42743920b21a8b70cf008f55f8983d49620", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1NDA4Mg==", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576854082", "bodyText": "Good point. Changed and filed a bug for the documentation that also includes this.", "author": "olavloite", "createdAt": "2021-02-16T14:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTk4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java\nindex 2346277c..3ea4a067 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java\n\n@@ -235,7 +235,7 @@ public class ITTransactionManagerTest {\n           assertEquals(2L, manager.getCommitResponse().getCommitStats().getMutationCount());\n           break;\n         } catch (AbortedException e) {\n-          Thread.sleep(e.getRetryDelayInMillis() / 1000);\n+          Thread.sleep(e.getRetryDelayInMillis());\n           transaction = manager.resetForRetry();\n         }\n       }\n"}}, {"oid": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "url": "https://github.com/googleapis/java-spanner/commit/7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "message": "fix: address review comments", "committedDate": "2021-02-16T14:14:24Z", "type": "commit"}]}