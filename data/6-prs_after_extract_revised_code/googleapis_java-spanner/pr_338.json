{"pr_number": 338, "pr_title": "fix: respect PDML timeout when using streaming RPC", "pr_createdAt": "2020-07-10T16:44:31Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/338", "timeline": [{"oid": "e2135c82d582e3828eb9a3aed3f73965f199f023", "url": "https://github.com/googleapis/java-spanner/commit/e2135c82d582e3828eb9a3aed3f73965f199f023", "message": "fix: respect PDML timeout when using streaming RPC", "committedDate": "2020-07-10T16:42:36Z", "type": "commit"}, {"oid": "016417f3703e780eb3dfa230c8b07ebf8fe7876a", "url": "https://github.com/googleapis/java-spanner/commit/016417f3703e780eb3dfa230c8b07ebf8fe7876a", "message": "fix: check for negative or zero deadline", "committedDate": "2020-07-13T14:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNTExMw==", "url": "https://github.com/googleapis/java-spanner/pull/338#discussion_r454015113", "bodyText": "nit: would it be hard to inject the Stopwatch instead? Not a big deal, just wondering if we could use composition here. Disregard if it would be too hard to inject.", "author": "thiagotnunes", "createdAt": "2020-07-13T23:54:46Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "diffHunk": "@@ -157,6 +163,10 @@ long executeStreamingPartitionedUpdate(final Statement statement, Duration timeo\n     }\n   }\n \n+  Stopwatch createStopwatchStarted() {", "originalCommit": "016417f3703e780eb3dfa230c8b07ebf8fe7876a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAxNTM0MA==", "url": "https://github.com/googleapis/java-spanner/pull/338#discussion_r454015340", "bodyText": "Nice tests!", "author": "thiagotnunes", "createdAt": "2020-07-13T23:55:27Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/PartitionedDmlTransactionTest.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyMap;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.api.gax.grpc.GrpcStatusCode;\n+import com.google.api.gax.rpc.AbortedException;\n+import com.google.api.gax.rpc.ServerStream;\n+import com.google.api.gax.rpc.UnavailableException;\n+import com.google.cloud.spanner.spi.v1.SpannerRpc;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.base.Ticker;\n+import com.google.common.collect.ImmutableList;\n+import com.google.protobuf.ByteString;\n+import com.google.spanner.v1.BeginTransactionRequest;\n+import com.google.spanner.v1.ExecuteSqlRequest;\n+import com.google.spanner.v1.ExecuteSqlRequest.QueryMode;\n+import com.google.spanner.v1.PartialResultSet;\n+import com.google.spanner.v1.ResultSetStats;\n+import com.google.spanner.v1.Transaction;\n+import com.google.spanner.v1.TransactionSelector;\n+import io.grpc.Status.Code;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.threeten.bp.Duration;\n+\n+@SuppressWarnings(\"unchecked\")\n+@RunWith(JUnit4.class)\n+public class PartitionedDmlTransactionTest {", "originalCommit": "016417f3703e780eb3dfa230c8b07ebf8fe7876a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cefdc219bdb051057d093f10caef57b5b17dd83e", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/PartitionedDmlTransactionTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/PartitionedDmlTransactionTest.java\nindex 6d931bc2..8a158eb1 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/PartitionedDmlTransactionTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/PartitionedDmlTransactionTest.java\n\n@@ -52,6 +52,8 @@ import org.junit.runners.JUnit4;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n import org.threeten.bp.Duration;\n \n @SuppressWarnings(\"unchecked\")\n"}}, {"oid": "cefdc219bdb051057d093f10caef57b5b17dd83e", "url": "https://github.com/googleapis/java-spanner/commit/cefdc219bdb051057d093f10caef57b5b17dd83e", "message": "fix: subtract from original timeout to get remaining", "committedDate": "2020-07-14T20:24:36Z", "type": "commit"}]}