{"pr_number": 90, "pr_title": "feat: add backend query options", "pr_createdAt": "2020-03-03T17:39:40Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/90", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMzc3OA==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389423778", "bodyText": "Since most of this refactoring and extra checks for arguments is not related to the query options work, would it be ok to move this to a separate PR?", "author": "skuruppu", "createdAt": "2020-03-09T00:36:54Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -148,27 +247,24 @@ public void onTransactionMetadata(Transaction transaction) {\n     @GuardedBy(\"txnLock\")\n     private ByteString transactionId;\n \n-    MultiUseReadOnlyTransaction(\n-        SessionImpl session, TimestampBound bound, SpannerRpc rpc, int defaultPrefetchChunks) {\n-      super(session, rpc, defaultPrefetchChunks);\n+    MultiUseReadOnlyTransaction(Builder builder) {\n+      super(builder);\n       checkArgument(\n-          bound.getMode() != TimestampBound.Mode.MAX_STALENESS\n-              && bound.getMode() != TimestampBound.Mode.MIN_READ_TIMESTAMP,\n-          \"Bounded staleness mode %s is not supported for multi-use read-only transactions.\"\n-              + \" Create a single-use read or read-only transaction instead.\",\n-          bound.getMode());\n-      this.bound = bound;\n-    }\n-\n-    MultiUseReadOnlyTransaction(\n-        SessionImpl session,\n-        ByteString transactionId,\n-        Timestamp timestamp,\n-        SpannerRpc rpc,\n-        int defaultPrefetchChunks) {\n-      super(session, rpc, defaultPrefetchChunks);\n-      this.transactionId = transactionId;\n-      this.timestamp = timestamp;\n+          !(builder.bound != null && builder.transactionId != null)\n+              && !(builder.bound == null && builder.transactionId == null),\n+          \"Either TimestampBound or TransactionId must be specified\");\n+      if (builder.bound != null) {\n+        checkArgument(\n+            builder.bound.getMode() != TimestampBound.Mode.MAX_STALENESS\n+                && builder.bound.getMode() != TimestampBound.Mode.MIN_READ_TIMESTAMP,\n+            \"Bounded staleness mode %s is not supported for multi-use read-only transactions.\"\n+                + \" Create a single-use read or read-only transaction instead.\",\n+            builder.bound.getMode());\n+        this.bound = builder.bound;\n+      } else {\n+        this.timestamp = builder.timestamp;\n+        this.transactionId = builder.transactionId;\n+      }", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MzA2NQ==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r390193065", "bodyText": "I would prefer not to. The reason for introducing this builder pattern in this PR is that this PR requires an additional object to be passed in to the different transaction classes. This would add another parameter to the constructors of these classes, bringing the total number to 6 in this specific case. As a general rule of thumb, a method (or constructor) in Java should not take more than 4 arguments: https://rules.sonarsource.com/java/RSPEC-107", "author": "olavloite", "createdAt": "2020-03-10T09:41:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMzc3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNTk4Mg==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389425982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SpannerImpl implWithouQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {\n          \n          \n            \n                    SpannerImpl implWithoutQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {", "author": "skuruppu", "createdAt": "2020-03-09T00:57:44Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerImplTest.java", "diffHunk": "@@ -88,6 +89,47 @@ public void getDbclientAgainGivesSame() {\n     assertThat(databaseClient1).isSameInstanceAs(databaseClient);\n   }\n \n+  @Test\n+  public void queryOptions() {\n+    QueryOptions queryOptions = QueryOptions.newBuilder().setOptimizerVersion(\"2\").build();\n+    QueryOptions defaultOptions = QueryOptions.getDefaultInstance();\n+    DatabaseId db = DatabaseId.of(\"p\", \"i\", \"d\");\n+    DatabaseId otherDb = DatabaseId.of(\"p\", \"i\", \"other\");\n+\n+    // Create a SpannerOptions with and without default query options.\n+    SpannerOptions optionsWithQueryOptions =\n+        new SpannerOptions.Builder(SpannerOptions.getDefaultInstance()) {\n+          @Override\n+          QueryOptions getEnvironmentQueryOptions() {\n+            // Override and return default instance to prevent environment variables from\n+            // interfering with the test case.\n+            return QueryOptions.getDefaultInstance();\n+          }\n+        }.setDefaultQueryOptions(db, queryOptions).build();\n+    SpannerOptions optionsWithoutQueryOptions =\n+        new SpannerOptions.Builder(SpannerOptions.getDefaultInstance()) {\n+          @Override\n+          QueryOptions getEnvironmentQueryOptions() {\n+            // Override and return default instance to prevent environment variables from\n+            // interfering with the test case.\n+            return QueryOptions.getDefaultInstance();\n+          }\n+        }.build();\n+\n+    try (SpannerImpl implWithQueryOptions = new SpannerImpl(rpc, optionsWithQueryOptions);\n+        SpannerImpl implWithouQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MzUyOQ==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r390193529", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-03-10T09:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNTk4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerImplTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerImplTest.java\nindex 0d5b506c..f8b4d67c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerImplTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerImplTest.java\n\n@@ -117,7 +117,7 @@ public class SpannerImplTest {\n         }.build();\n \n     try (SpannerImpl implWithQueryOptions = new SpannerImpl(rpc, optionsWithQueryOptions);\n-        SpannerImpl implWithouQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {\n+        SpannerImpl implWithoutQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {\n \n       // Default query options are on a per-database basis, so we should only get the custom options\n       // for 'db' and not for 'otherDb'.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjEwNQ==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426105", "bodyText": "Please remove this.", "author": "skuruppu", "createdAt": "2020-03-09T00:58:40Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java", "diffHunk": "@@ -427,4 +428,56 @@ public void testSetEmulatorHostWithProtocol() {\n     assertThat(options.getHost()).isEqualTo(\"http://localhost:1234\");\n     assertThat(options.getEndpoint()).isEqualTo(\"localhost:1234\");\n   }\n+\n+  @Test\n+  public void testDefaultQueryOptions() {\n+    SpannerOptions.useEnvironment(\n+        new SpannerOptions.SpannerEnvironment() {\n+          @Override\n+          public String getOptimizerVersion() {\n+            return \"\";\n+          }\n+\n+          @Override\n+          public String getOptimizerStatisticsPackage() {\n+            return \"\";\n+          }", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDEzMA==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r390194130", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-03-10T09:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java\nindex 796b5588..8e7f946b 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java\n\n@@ -437,11 +437,6 @@ public class SpannerOptionsTest {\n           public String getOptimizerVersion() {\n             return \"\";\n           }\n-\n-          @Override\n-          public String getOptimizerStatisticsPackage() {\n-            return \"\";\n-          }\n         });\n     SpannerOptions options =\n         SpannerOptions.newBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjE2NQ==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426165", "bodyText": "Please remove this as well.", "author": "skuruppu", "createdAt": "2020-03-09T00:59:14Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java", "diffHunk": "@@ -427,4 +428,56 @@ public void testSetEmulatorHostWithProtocol() {\n     assertThat(options.getHost()).isEqualTo(\"http://localhost:1234\");\n     assertThat(options.getEndpoint()).isEqualTo(\"localhost:1234\");\n   }\n+\n+  @Test\n+  public void testDefaultQueryOptions() {\n+    SpannerOptions.useEnvironment(\n+        new SpannerOptions.SpannerEnvironment() {\n+          @Override\n+          public String getOptimizerVersion() {\n+            return \"\";\n+          }\n+\n+          @Override\n+          public String getOptimizerStatisticsPackage() {\n+            return \"\";\n+          }\n+        });\n+    SpannerOptions options =\n+        SpannerOptions.newBuilder()\n+            .setDefaultQueryOptions(\n+                DatabaseId.of(\"p\", \"i\", \"d\"),\n+                QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+            .build();\n+    assertThat(options.getDefaultQueryOptions(DatabaseId.of(\"p\", \"i\", \"d\")))\n+        .isEqualTo(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build());\n+    assertThat(options.getDefaultQueryOptions(DatabaseId.of(\"p\", \"i\", \"o\")))\n+        .isEqualTo(QueryOptions.getDefaultInstance());\n+\n+    // Now simulate that the user has set an environment variable for the query optimizer version.\n+    SpannerOptions.useEnvironment(\n+        new SpannerOptions.SpannerEnvironment() {\n+          @Override\n+          public String getOptimizerVersion() {\n+            return \"2\";\n+          }\n+\n+          @Override\n+          public String getOptimizerStatisticsPackage() {\n+            return \"\";\n+          }", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDE5OA==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r390194198", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-03-10T09:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java\nindex 796b5588..8e7f946b 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java\n\n@@ -437,11 +437,6 @@ public class SpannerOptionsTest {\n           public String getOptimizerVersion() {\n             return \"\";\n           }\n-\n-          @Override\n-          public String getOptimizerStatisticsPackage() {\n-            return \"\";\n-          }\n         });\n     SpannerOptions options =\n         SpannerOptions.newBuilder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjc4NA==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check that the last query was executed using a custom optimizer version and statistics\n          \n          \n            \n                  // package.\n          \n          \n            \n                  // Check that the last query was executed using a custom optimizer version.", "author": "skuruppu", "createdAt": "2020-03-09T01:04:52Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -701,4 +707,125 @@ public Long run(TransactionContext transaction) throws Exception {\n     assertThat(client1.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n     assertThat(client2.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n   }\n+\n+  @Test\n+  public void testBackendQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(\n+                  Statement.newBuilder(SELECT1.getSql())\n+                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                      .build())) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDkwOA==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r390194908", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-03-10T09:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjc4NA=="}], "type": "inlineReview", "revised_code": {"commit": "0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\nindex cf931c99..121eddec 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n\n@@ -730,9 +728,9 @@ public class DatabaseClientImplTest {\n           client\n               .singleUse()\n               .executeQuery(\n-                  Statement.newBuilder(SELECT1.getSql())\n-                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n-                      .build())) {\n+                  SELECT1,\n+                  Options.queryOptions(\n+                      QueryOptions.newBuilder().setOptimizerVersion(\"1\").build()))) {\n         // Just iterate over the results to execute the query.\n         while (rs.next()) {}\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjgzOA==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426838", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check that the last query was executed using a custom optimizer version and statistics\n          \n          \n            \n                  // package.\n          \n          \n            \n                  // Check that the last query was executed using a custom optimizer version.", "author": "skuruppu", "createdAt": "2020-03-09T01:05:27Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -701,4 +707,125 @@ public Long run(TransactionContext transaction) throws Exception {\n     assertThat(client1.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n     assertThat(client2.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n   }\n+\n+  @Test\n+  public void testBackendQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(\n+                  Statement.newBuilder(SELECT1.getSql())\n+                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                      .build())) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.\n+      List<AbstractMessage> requests = mockSpanner.getRequests();\n+      assertThat(requests).isNotEmpty();\n+      assertThat(requests.get(requests.size() - 1)).isInstanceOf(ExecuteSqlRequest.class);\n+      ExecuteSqlRequest request = (ExecuteSqlRequest) requests.get(requests.size() - 1);\n+      assertThat(request.getQueryOptions()).isNotNull();\n+      assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"1\");\n+    }\n+  }\n+\n+  @Test\n+  public void testBackendQueryOptionsWithAnalyzeQuery() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ReadOnlyTransaction tx = client.readOnlyTransaction()) {\n+        try (ResultSet rs =\n+            tx.analyzeQuery(\n+                Statement.newBuilder(SELECT1.getSql())\n+                    .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                    .build(),\n+                QueryAnalyzeMode.PROFILE)) {\n+          // Just iterate over the results to execute the query.\n+          while (rs.next()) {}\n+        }\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\nindex cf931c99..121eddec 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n\n@@ -730,9 +728,9 @@ public class DatabaseClientImplTest {\n           client\n               .singleUse()\n               .executeQuery(\n-                  Statement.newBuilder(SELECT1.getSql())\n-                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n-                      .build())) {\n+                  SELECT1,\n+                  Options.queryOptions(\n+                      QueryOptions.newBuilder().setOptimizerVersion(\"1\").build()))) {\n         // Just iterate over the results to execute the query.\n         while (rs.next()) {}\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjk0Nw==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check that the last query was executed using a custom optimizer version and statistics\n          \n          \n            \n                  // package.\n          \n          \n            \n                  // Check that the last query was executed using a custom optimizer version.", "author": "skuruppu", "createdAt": "2020-03-09T01:06:06Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -701,4 +707,125 @@ public Long run(TransactionContext transaction) throws Exception {\n     assertThat(client1.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n     assertThat(client2.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n   }\n+\n+  @Test\n+  public void testBackendQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(\n+                  Statement.newBuilder(SELECT1.getSql())\n+                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                      .build())) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.\n+      List<AbstractMessage> requests = mockSpanner.getRequests();\n+      assertThat(requests).isNotEmpty();\n+      assertThat(requests.get(requests.size() - 1)).isInstanceOf(ExecuteSqlRequest.class);\n+      ExecuteSqlRequest request = (ExecuteSqlRequest) requests.get(requests.size() - 1);\n+      assertThat(request.getQueryOptions()).isNotNull();\n+      assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"1\");\n+    }\n+  }\n+\n+  @Test\n+  public void testBackendQueryOptionsWithAnalyzeQuery() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ReadOnlyTransaction tx = client.readOnlyTransaction()) {\n+        try (ResultSet rs =\n+            tx.analyzeQuery(\n+                Statement.newBuilder(SELECT1.getSql())\n+                    .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                    .build(),\n+                QueryAnalyzeMode.PROFILE)) {\n+          // Just iterate over the results to execute the query.\n+          while (rs.next()) {}\n+        }\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.\n+      List<AbstractMessage> requests = mockSpanner.getRequests();\n+      assertThat(requests).isNotEmpty();\n+      assertThat(requests.get(requests.size() - 1)).isInstanceOf(ExecuteSqlRequest.class);\n+      ExecuteSqlRequest request = (ExecuteSqlRequest) requests.get(requests.size() - 1);\n+      assertThat(request.getQueryOptions()).isNotNull();\n+      assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"1\");\n+      assertThat(request.getQueryMode()).isEqualTo(QueryMode.PROFILE);\n+    }\n+  }\n+\n+  @Test\n+  public void testBackendPartitionQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      BatchClient client =\n+          spanner.getBatchClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      BatchReadOnlyTransaction transaction =\n+          client.batchReadOnlyTransaction(TimestampBound.strong());\n+      List<Partition> partitions =\n+          transaction.partitionQuery(\n+              PartitionOptions.newBuilder().setMaxPartitions(10L).build(),\n+              Statement.newBuilder(SELECT1.getSql())\n+                  .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                  .build());\n+      try (ResultSet rs = transaction.execute(partitions.get(0))) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.", "originalCommit": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDk2OQ==", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r390194969", "bodyText": "Done.", "author": "olavloite", "createdAt": "2020-03-10T09:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjk0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\nindex cf931c99..121eddec 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n\n@@ -730,9 +728,9 @@ public class DatabaseClientImplTest {\n           client\n               .singleUse()\n               .executeQuery(\n-                  Statement.newBuilder(SELECT1.getSql())\n-                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n-                      .build())) {\n+                  SELECT1,\n+                  Options.queryOptions(\n+                      QueryOptions.newBuilder().setOptimizerVersion(\"1\").build()))) {\n         // Just iterate over the results to execute the query.\n         while (rs.next()) {}\n       }\n"}}, {"oid": "0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "url": "https://github.com/googleapis/java-spanner/commit/0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "message": "feat: add backend query options\n\nAdds support for setting QueryOptions that will be used by the backend\nto execute queries.", "committedDate": "2020-03-12T12:39:56Z", "type": "commit"}, {"oid": "160970b2e241677e59c9dd8f60fe9b33d8a77dea", "url": "https://github.com/googleapis/java-spanner/commit/160970b2e241677e59c9dd8f60fe9b33d8a77dea", "message": "fix: set QueryOptions on Statement\n\nQueryOptions should be an option on a Statement instead of a parameter\nto the executeQuery method. By setting these options on a Statement, it\nis possible to use it with analyzeQuery as well.", "committedDate": "2020-03-12T12:39:56Z", "type": "commit"}, {"oid": "7e6b7992fb580e551b6d01298edddc66e477d3fc", "url": "https://github.com/googleapis/java-spanner/commit/7e6b7992fb580e551b6d01298edddc66e477d3fc", "message": "feat: add toBuilder() method to Statement", "committedDate": "2020-03-12T12:39:56Z", "type": "commit"}, {"oid": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "url": "https://github.com/googleapis/java-spanner/commit/d27b3a75c2c406f91bd7264c03a846b3941a54cc", "message": "fix: code review comments", "committedDate": "2020-03-12T12:39:56Z", "type": "commit"}, {"oid": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "url": "https://github.com/googleapis/java-spanner/commit/d27b3a75c2c406f91bd7264c03a846b3941a54cc", "message": "fix: code review comments", "committedDate": "2020-03-12T12:39:56Z", "type": "forcePushed"}, {"oid": "096e3fb38aeaf98d5225d95fbba6c4f3f544a18b", "url": "https://github.com/googleapis/java-spanner/commit/096e3fb38aeaf98d5225d95fbba6c4f3f544a18b", "message": "fix: remove unused interface and class", "committedDate": "2020-03-12T13:43:12Z", "type": "commit"}]}