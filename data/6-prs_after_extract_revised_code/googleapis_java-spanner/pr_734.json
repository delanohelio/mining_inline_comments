{"pr_number": 734, "pr_title": "fix: reduce the probability of RESOURCE_EXHAUSTED errors during tests", "pr_createdAt": "2020-12-13T19:06:57Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/734", "timeline": [{"oid": "da8b666f3a94b45c73ae958c9c492aefe0c134b6", "url": "https://github.com/googleapis/java-spanner/commit/da8b666f3a94b45c73ae958c9c492aefe0c134b6", "message": "fix: reduce the probability of RESOURCE_EXHAUSTED errors during tests\n\nReduces the probability of RESOURCE_EXHAUSTED errors during tests by making the\nGetOperation method retry errors with this code with an exponential backoff.\nThe GetOperation method is called repeatedly for long-running operations by a\npolling future. These calls also count towards the max 5 admin requests per second.\n\nFixes #733", "committedDate": "2020-12-13T19:02:33Z", "type": "commit"}, {"oid": "85ca6794d1223983744369b0419507a69ce31ff3", "url": "https://github.com/googleapis/java-spanner/commit/85ca6794d1223983744369b0419507a69ce31ff3", "message": "fix: use default retry settings", "committedDate": "2020-12-13T19:06:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NTE0Mw==", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r541985143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            callSettings =\n          \n          \n            \n                                callSettings\n          \n          \n            \n                                    .toBuilder()\n          \n          \n            \n                                    .setRetryableCodes(codes)\n          \n          \n            \n                                    .build();\n          \n          \n            \n                            callSettings = callSettings.toBuilder().setRetryableCodes(codes).build();", "author": "yoshi-code-bot", "createdAt": "2020-12-13T19:08:52Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -428,7 +435,37 @@ public GapicSpannerRpc(final SpannerOptions options) {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      this.databaseAdminStub = GrpcDatabaseAdminStub.create(this.databaseAdminStubSettings);\n+      GrpcStubCallableFactory factory =\n+          new GrpcDatabaseAdminCallableFactory() {\n+            @Override\n+            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                ClientContext clientContext) {\n+              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+              // failing with an Administrative requests limit exceeded error.\n+              if (grpcCallSettings\n+                  .getMethodDescriptor()\n+                  .getFullMethodName()\n+                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                Set<StatusCode.Code> codes =\n+                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                            callSettings.getRetryableCodes().size() + 1)\n+                        .addAll(callSettings.getRetryableCodes())\n+                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)\n+                        .build();\n+                callSettings =\n+                    callSettings\n+                        .toBuilder()\n+                        .setRetryableCodes(codes)\n+                        .build();", "originalCommit": "85ca6794d1223983744369b0419507a69ce31ff3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "167ae14cc0e0e60f48e87b69236acf75017d56d4", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\nindex 86ed207d..6e5addae 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\n\n@@ -454,11 +454,7 @@ public class GapicSpannerRpc implements SpannerRpc {\n                         .addAll(callSettings.getRetryableCodes())\n                         .add(StatusCode.Code.RESOURCE_EXHAUSTED)\n                         .build();\n-                callSettings =\n-                    callSettings\n-                        .toBuilder()\n-                        .setRetryableCodes(codes)\n-                        .build();\n+                callSettings = callSettings.toBuilder().setRetryableCodes(codes).build();\n               }\n               return super.createUnaryCallable(grpcCallSettings, callSettings, clientContext);\n             }\n"}}, {"oid": "167ae14cc0e0e60f48e87b69236acf75017d56d4", "url": "https://github.com/googleapis/java-spanner/commit/167ae14cc0e0e60f48e87b69236acf75017d56d4", "message": "chore: run formatter", "committedDate": "2020-12-13T19:21:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzU5Mw==", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r541987593", "bodyText": "It would be preferable if this could be changed in the generated code, but I don't know whether that is possible considering this comes from the generic com.google.longrunning.stub.OperationsStub.", "author": "olavloite", "createdAt": "2020-12-13T19:22:33Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -428,7 +435,33 @@ public GapicSpannerRpc(final SpannerOptions options) {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      this.databaseAdminStub = GrpcDatabaseAdminStub.create(this.databaseAdminStubSettings);\n+      GrpcStubCallableFactory factory =\n+          new GrpcDatabaseAdminCallableFactory() {\n+            @Override\n+            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                ClientContext clientContext) {\n+              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+              // failing with an Administrative requests limit exceeded error.\n+              if (grpcCallSettings\n+                  .getMethodDescriptor()\n+                  .getFullMethodName()\n+                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                Set<StatusCode.Code> codes =\n+                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                            callSettings.getRetryableCodes().size() + 1)\n+                        .addAll(callSettings.getRetryableCodes())\n+                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)", "originalCommit": "167ae14cc0e0e60f48e87b69236acf75017d56d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1MzA5OQ==", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r542953099", "bodyText": "It seems we would need this only for fixing the tests (correct me if I am wrong). If that is the case, changing production behaviour to fix those might not be the best path forward. Could we inject different behaviour in test only.\nOn another note, do we still need this change now that the tests seem to be working as expected?", "author": "thiagotnunes", "createdAt": "2020-12-15T00:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NzYzNQ==", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r544377635", "bodyText": "I've updated the PR to only change this behavior if SpannerOptions#setAutoThrottleAdministrativeRequests has been set. This means that it will only be enabled for (integration) tests.", "author": "olavloite", "createdAt": "2020-12-16T15:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "76bcbec7a7d928cb73055cbcb1c9ef0995b157ce", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\nindex 6e5addae..ddd45dd2 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java\n\n@@ -435,33 +451,45 @@ public class GapicSpannerRpc implements SpannerRpc {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      GrpcStubCallableFactory factory =\n-          new GrpcDatabaseAdminCallableFactory() {\n-            @Override\n-            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n-                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n-                UnaryCallSettings<RequestT, ResponseT> callSettings,\n-                ClientContext clientContext) {\n-              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n-              // failing with an Administrative requests limit exceeded error.\n-              if (grpcCallSettings\n-                  .getMethodDescriptor()\n-                  .getFullMethodName()\n-                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n-                Set<StatusCode.Code> codes =\n-                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n-                            callSettings.getRetryableCodes().size() + 1)\n-                        .addAll(callSettings.getRetryableCodes())\n-                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)\n-                        .build();\n-                callSettings = callSettings.toBuilder().setRetryableCodes(codes).build();\n+\n+      // Automatically retry RESOURCE_EXHAUSTED for GetOperation if auto-throttling of\n+      // administrative requests has been set. The GetOperation RPC is called repeatedly by gax\n+      // while polling long-running operations for their progress and can also cause these errors.\n+      // The default behavior is not to retry these errors, and this option should normally only be\n+      // enabled for (integration) testing.\n+      if (options.isAutoThrottleAdministrativeRequests()) {\n+        GrpcStubCallableFactory factory =\n+            new GrpcDatabaseAdminCallableFactory() {\n+              @Override\n+              public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                  GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                  UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                  ClientContext clientContext) {\n+                // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+                // failing with an Administrative requests limit exceeded error.\n+                if (grpcCallSettings\n+                    .getMethodDescriptor()\n+                    .getFullMethodName()\n+                    .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                  Set<StatusCode.Code> codes =\n+                      ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                              callSettings.getRetryableCodes().size() + 1)\n+                          .addAll(callSettings.getRetryableCodes())\n+                          .add(StatusCode.Code.RESOURCE_EXHAUSTED)\n+                          .build();\n+                  callSettings = callSettings.toBuilder().setRetryableCodes(codes).build();\n+                }\n+                return super.createUnaryCallable(grpcCallSettings, callSettings, clientContext);\n               }\n-              return super.createUnaryCallable(grpcCallSettings, callSettings, clientContext);\n-            }\n-          };\n-      this.databaseAdminStub =\n-          new GrpcDatabaseAdminStubWithCustomCallableFactory(\n-              databaseAdminStubSettings, ClientContext.create(databaseAdminStubSettings), factory);\n+            };\n+        this.databaseAdminStub =\n+            new GrpcDatabaseAdminStubWithCustomCallableFactory(\n+                databaseAdminStubSettings,\n+                ClientContext.create(databaseAdminStubSettings),\n+                factory);\n+      } else {\n+        this.databaseAdminStub = GrpcDatabaseAdminStub.create(databaseAdminStubSettings);\n+      }\n \n       // Check whether the SPANNER_EMULATOR_HOST env var has been set, and if so, if the emulator is\n       // actually running.\n"}}, {"oid": "c8fef88dff5e8a9cecba10be88703df8c0e8d241", "url": "https://github.com/googleapis/java-spanner/commit/c8fef88dff5e8a9cecba10be88703df8c0e8d241", "message": "Merge branch 'master' into reduce-resource-exhausted-errors", "committedDate": "2020-12-14T10:46:07Z", "type": "commit"}, {"oid": "918d4afbef484e81e8658ef67fa2df11762620cf", "url": "https://github.com/googleapis/java-spanner/commit/918d4afbef484e81e8658ef67fa2df11762620cf", "message": "Merge branch 'master' into reduce-resource-exhausted-errors", "committedDate": "2020-12-16T14:58:54Z", "type": "commit"}, {"oid": "76bcbec7a7d928cb73055cbcb1c9ef0995b157ce", "url": "https://github.com/googleapis/java-spanner/commit/76bcbec7a7d928cb73055cbcb1c9ef0995b157ce", "message": "fix: only retry RESOURCE_EXHAUSTED when throttling requests", "committedDate": "2020-12-16T15:10:24Z", "type": "commit"}]}