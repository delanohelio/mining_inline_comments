{"pr_number": 763, "pr_title": "test: add option to track the statement that starts a transaction", "pr_createdAt": "2020-12-23T08:27:37Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/763", "timeline": [{"oid": "f2b3a605d8edc29ccc2394bd258b3ccaa4329712", "url": "https://github.com/googleapis/java-spanner/commit/f2b3a605d8edc29ccc2394bd258b3ccaa4329712", "message": "test: add option to track the statement that starts a transaction", "committedDate": "2020-12-23T08:26:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgzMTM4NA==", "url": "https://github.com/googleapis/java-spanner/pull/763#discussion_r547831384", "bodyText": "This will create an Exception with the call stack of the statement that should return a transaction id. We keep track of this to be able to include it in any exception that could be thrown by later statements that timeout while waiting for this transaction id.", "author": "olavloite", "createdAt": "2020-12-23T09:03:21Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -432,6 +445,9 @@ TransactionSelector getTransactionSelector() {\n             // transactionIdFuture until an actual transactionId is available.\n             if (transactionIdFuture == null) {\n               transactionIdFuture = SettableApiFuture.create();\n+              if (trackTransactionStarter) {\n+                transactionStarter = new Exception(\"Requesting new transaction\");", "originalCommit": "f2b3a605d8edc29ccc2394bd258b3ccaa4329712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgzMTg3Mg==", "url": "https://github.com/googleapis/java-spanner/pull/763#discussion_r547831872", "bodyText": "Use a timeout if we are tracking the statement that should return a transaction id.", "author": "olavloite", "createdAt": "2020-12-23T09:03:54Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -447,7 +463,13 @@ TransactionSelector getTransactionSelector() {\n             // Aborted error if the call that included the BeginTransaction option fails. The\n             // Aborted error will cause the entire transaction to be retried, and the retry will use\n             // a separate BeginTransaction RPC.\n-            TransactionSelector.newBuilder().setId(tx.get()).build();\n+            if (trackTransactionStarter) {\n+              TransactionSelector.newBuilder()\n+                  .setId(tx.get(waitForTransactionTimeoutMillis, TimeUnit.MILLISECONDS))", "originalCommit": "f2b3a605d8edc29ccc2394bd258b3ccaa4329712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgzMjM2OQ==", "url": "https://github.com/googleapis/java-spanner/pull/763#discussion_r547832369", "bodyText": "Include the stacktrace of the statement that should have returned the transaction in the exception that we are throwing.", "author": "olavloite", "createdAt": "2020-12-23T09:04:23Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -456,6 +478,17 @@ TransactionSelector getTransactionSelector() {\n             }\n           }\n           throw SpannerExceptionFactory.newSpannerException(e.getCause());\n+        } catch (TimeoutException e) {\n+          SpannerException se =\n+              SpannerExceptionFactory.newSpannerException(\n+                  ErrorCode.DEADLINE_EXCEEDED,\n+                  \"Timeout while waiting for a transaction to be returned by another statement. \"\n+                      + \"See the suppressed exception for the stacktrace of the caller that should return a transaction\",\n+                  e);\n+          if (transactionStarter != null) {\n+            se.addSuppressed(transactionStarter);", "originalCommit": "f2b3a605d8edc29ccc2394bd258b3ccaa4329712", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}