{"pr_number": 501, "pr_title": "fix: close executor when closing pool", "pr_createdAt": "2020-10-07T15:07:50Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/501", "timeline": [{"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69", "url": "https://github.com/googleapis/java-spanner/commit/87884ac2abd055bee9da303380e2e96fcd1c9e69", "message": "fix: close executor when closing pool", "committedDate": "2020-10-07T15:06:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5MDc3NA==", "url": "https://github.com/googleapis/java-spanner/pull/501#discussion_r501090774", "bodyText": "The only real change here is the addition of the finally block, but GitHub thinks there is a lot more changed because of the changed indentation and formatting.", "author": "olavloite", "createdAt": "2020-10-07T15:08:55Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/SpannerPool.java", "diffHunk": "@@ -390,26 +390,34 @@ void checkAndCloseSpanners(CheckAndCloseSpannersMode mode) {\n           keysStillInUse.add(entry.getKey());\n         }\n       }\n-      if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n-        if (!keysStillInUse.isEmpty()) {\n+      try {\n+        if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n+          if (!keysStillInUse.isEmpty()) {\n+            logLeakedConnections(keysStillInUse);\n+            logger.log(\n+                Level.WARNING,\n+                \"There is/are \"\n+                    + keysStillInUse.size()\n+                    + \" connection(s) still open.\"\n+                    + \" Close all connections before stopping the application\");\n+          }\n+          // Force close all Spanner instances by passing in a value that will always be less than\n+          // the\n+          // difference between the current time and the close time of a connection.\n+          closeUnusedSpanners(Long.MIN_VALUE);\n+        } else {\n           logLeakedConnections(keysStillInUse);\n-          logger.log(\n-              Level.WARNING,\n+          throw SpannerExceptionFactory.newSpannerException(\n+              ErrorCode.FAILED_PRECONDITION,\n               \"There is/are \"\n                   + keysStillInUse.size()\n-                  + \" connection(s) still open.\"\n-                  + \" Close all connections before stopping the application\");\n+                  + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n         }\n-        // Force close all Spanner instances by passing in a value that will always be less than the\n-        // difference between the current time and the close time of a connection.\n-        closeUnusedSpanners(Long.MIN_VALUE);\n-      } else {\n-        logLeakedConnections(keysStillInUse);\n-        throw SpannerExceptionFactory.newSpannerException(\n-            ErrorCode.FAILED_PRECONDITION,\n-            \"There is/are \"\n-                + keysStillInUse.size()\n-                + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n+      } finally {", "originalCommit": "87884ac2abd055bee9da303380e2e96fcd1c9e69", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzIwNQ==", "url": "https://github.com/googleapis/java-spanner/pull/501#discussion_r501353205", "bodyText": "Can this throw an exception?", "author": "thiagotnunes", "createdAt": "2020-10-07T22:47:53Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/SpannerPool.java", "diffHunk": "@@ -390,26 +390,34 @@ void checkAndCloseSpanners(CheckAndCloseSpannersMode mode) {\n           keysStillInUse.add(entry.getKey());\n         }\n       }\n-      if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n-        if (!keysStillInUse.isEmpty()) {\n+      try {\n+        if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n+          if (!keysStillInUse.isEmpty()) {\n+            logLeakedConnections(keysStillInUse);\n+            logger.log(\n+                Level.WARNING,\n+                \"There is/are \"\n+                    + keysStillInUse.size()\n+                    + \" connection(s) still open.\"\n+                    + \" Close all connections before stopping the application\");\n+          }\n+          // Force close all Spanner instances by passing in a value that will always be less than\n+          // the\n+          // difference between the current time and the close time of a connection.\n+          closeUnusedSpanners(Long.MIN_VALUE);\n+        } else {\n           logLeakedConnections(keysStillInUse);\n-          logger.log(\n-              Level.WARNING,\n+          throw SpannerExceptionFactory.newSpannerException(\n+              ErrorCode.FAILED_PRECONDITION,\n               \"There is/are \"\n                   + keysStillInUse.size()\n-                  + \" connection(s) still open.\"\n-                  + \" Close all connections before stopping the application\");\n+                  + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n         }\n-        // Force close all Spanner instances by passing in a value that will always be less than the\n-        // difference between the current time and the close time of a connection.\n-        closeUnusedSpanners(Long.MIN_VALUE);\n-      } else {\n-        logLeakedConnections(keysStillInUse);\n-        throw SpannerExceptionFactory.newSpannerException(\n-            ErrorCode.FAILED_PRECONDITION,\n-            \"There is/are \"\n-                + keysStillInUse.size()\n-                + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n+      } finally {\n+        if (closerService != null) {\n+          closerService.shutdown();", "originalCommit": "87884ac2abd055bee9da303380e2e96fcd1c9e69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MzIzMg==", "url": "https://github.com/googleapis/java-spanner/pull/501#discussion_r501783232", "bodyText": "Normally, no. It does not declare any checked exceptions, and it also does not wait until it has actually been shutdown, so the chance that anything goes wrong is relatively low.\nThe method can be invoked in two ways:\n\nIf a client application calls SpannerPool#closeSpannerPool() to explicitly close the pool. Any exception from closerService.shutdown() would in that case be propagated to the client application. Considering the fact that it would not be a checked exception, I would say that that is a reasonable thing to do, as it might indicate a problem somewhere, for example linked to the state of the client application at that moment.\nIt is called from the shutdown hook that closes the pool automatically when the application terminates. The shutdown hook catches and ignores any errors, as any errors at that moment are (probably) not something that a client application could do anything with. The alternative would be to bubble it up, which would cause the JVM (by default) to print the error to System.err.", "author": "olavloite", "createdAt": "2020-10-08T14:49:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MzMwOA==", "url": "https://github.com/googleapis/java-spanner/pull/501#discussion_r502153308", "bodyText": "Cool, that is fine, I was just worried that we could bubble up exceptions that we previously did not.", "author": "thiagotnunes", "createdAt": "2020-10-09T02:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzIwNQ=="}], "type": "inlineReview", "revised_code": null}]}