{"pr_number": 576, "pr_title": "feat: add support for tagging", "pr_createdAt": "2020-11-03T05:37:07Z", "pr_url": "https://github.com/googleapis/java-spanner/pull/576", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTg1NQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516471855", "bodyText": "nit: could we create a small helper method do de-duplicate this code and use it with both getExecuteSqlRequest and getExecuteBatchDmlRequest?", "author": "olavloite", "createdAt": "2020-11-03T07:44:48Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -574,10 +581,17 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    if (txnTag != null || options.hasTag()) {", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODY0Mw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516908643", "bodyText": "Makes sense, done.", "author": "mayurkale22", "createdAt": "2020-11-03T19:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex c7ae2f50..d6ad61db 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -581,12 +588,7 @@ abstract class AbstractReadContext\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n-    if (txnTag != null || options.hasTag()) {\n-      RequestOptions.Builder requestOptionsBuilder = RequestOptions.newBuilder();\n-      if (txnTag != null) requestOptionsBuilder.setTransactionTag(txnTag);\n-      if (options.hasTag()) requestOptionsBuilder.setRequestTag(options.tag());\n-      builder.setRequestOptions(requestOptionsBuilder.build());\n-    }\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n     return builder;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MjI3Ng==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516472276", "bodyText": "A read operation can also be executed within a (read/write) transaction. Don't we want to set the transaction tag in those cases as well?", "author": "olavloite", "createdAt": "2020-11-03T07:45:54Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -730,6 +751,10 @@ ResultSet readInternalWithOptions(\n     if (partitionToken != null) {\n       builder.setPartitionToken(partitionToken);\n     }\n+    if (readOptions.hasTag()) {\n+      builder.setRequestOptions(", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTYzOA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516909638", "bodyText": "Added TODO for now, not sure how to get access to transaction tag here. I will investigate more and update this thread.", "author": "mayurkale22", "createdAt": "2020-11-03T19:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MjI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex c7ae2f50..d6ad61db 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -744,17 +740,12 @@ abstract class AbstractReadContext\n     if (index != null) {\n       builder.setIndex(index);\n     }\n-    TransactionSelector selector = getTransactionSelector();\n-    if (selector != null) {\n-      builder.setTransaction(selector);\n-    }\n     if (partitionToken != null) {\n       builder.setPartitionToken(partitionToken);\n     }\n-    if (readOptions.hasTag()) {\n-      builder.setRequestOptions(\n-          RequestOptions.newBuilder().setRequestTag(readOptions.tag()).build());\n-    }\n+    // TODO: set transaction tag when executed within a RW transaction\n+    builder.setRequestOptions(buildRequestOptions(readOptions, null));\n+\n     final int prefetchChunks =\n         readOptions.hasPrefetchChunks() ? readOptions.prefetchChunks() : defaultPrefetchChunks;\n     ResumableStreamIterator stream =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzQyNA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516473424", "bodyText": "nit: could we combine the boiler plate code of write and writeWithOptions in one method, and let write call the writeWithOptions version with no options?", "author": "olavloite", "createdAt": "2020-11-03T07:48:47Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java", "diffHunk": "@@ -72,10 +73,24 @@ public Timestamp apply(Session session) {\n   }\n \n   @Override\n-  public CommitResponse writeWithOptions(Iterable<Mutation> mutations, TransactionOption... options)\n+  public CommitResponse writeWithOptions(\n+      final Iterable<Mutation> mutations, final TransactionOption... options)\n       throws SpannerException {\n-    final Timestamp commitTimestamp = write(mutations);\n-    return new CommitResponse(commitTimestamp);\n+    Span span = tracer.spanBuilder(READ_WRITE_TRANSACTION).startSpan();", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyOTEyNQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516929125", "bodyText": "Done", "author": "mayurkale22", "createdAt": "2020-11-03T20:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java\nindex 95581449..55002d40 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java\n\n@@ -55,21 +55,7 @@ class DatabaseClientImpl implements DatabaseClient {\n \n   @Override\n   public Timestamp write(final Iterable<Mutation> mutations) throws SpannerException {\n-    Span span = tracer.spanBuilder(READ_WRITE_TRANSACTION).startSpan();\n-    try (Scope s = tracer.withSpan(span)) {\n-      return runWithSessionRetry(\n-          new Function<Session, Timestamp>() {\n-            @Override\n-            public Timestamp apply(Session session) {\n-              return session.write(mutations);\n-            }\n-          });\n-    } catch (RuntimeException e) {\n-      TraceUtil.setWithFailure(span, e);\n-      throw e;\n-    } finally {\n-      span.end(TraceUtil.END_SPAN_OPTIONS);\n-    }\n+    return writeWithOptions(mutations).getCommitTimestamp();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzY5NA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516473694", "bodyText": "nit: same as above, combine the writeAtLeastOnce and writeAtLeastOnceWithOptions?", "author": "olavloite", "createdAt": "2020-11-03T07:49:20Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java", "diffHunk": "@@ -99,9 +114,23 @@ public Timestamp apply(Session session) {\n \n   @Override\n   public CommitResponse writeAtLeastOnceWithOptions(\n-      Iterable<Mutation> mutations, TransactionOption... options) throws SpannerException {\n-    final Timestamp commitTimestamp = writeAtLeastOnce(mutations);\n-    return new CommitResponse(commitTimestamp);\n+      final Iterable<Mutation> mutations, final TransactionOption... options)", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyOTI0NA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516929244", "bodyText": "Done", "author": "mayurkale22", "createdAt": "2020-11-03T20:12:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java\nindex 95581449..55002d40 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java\n\n@@ -95,21 +81,7 @@ class DatabaseClientImpl implements DatabaseClient {\n \n   @Override\n   public Timestamp writeAtLeastOnce(final Iterable<Mutation> mutations) throws SpannerException {\n-    Span span = tracer.spanBuilder(READ_WRITE_TRANSACTION).startSpan();\n-    try (Scope s = tracer.withSpan(span)) {\n-      return runWithSessionRetry(\n-          new Function<Session, Timestamp>() {\n-            @Override\n-            public Timestamp apply(Session session) {\n-              return session.writeAtLeastOnce(mutations);\n-            }\n-          });\n-    } catch (RuntimeException e) {\n-      TraceUtil.setWithFailure(span, e);\n-      throw e;\n-    } finally {\n-      span.end(TraceUtil.END_SPAN_OPTIONS);\n-    }\n+    return writeAtLeastOnceWithOptions(mutations).getCommitTimestamp();\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NzY0OA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516477648", "bodyText": "nit: here and other similar places, I would prefer to try to reuse the logic/boilerplate code for the very similar methods, and only let the version with the most options contain the actual code. The other methods should just call the WithOptions method with no options. That makes it easier to make changes without forgetting one of them.", "author": "olavloite", "createdAt": "2020-11-03T07:58:11Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1285,15 +1302,20 @@ public Timestamp writeAtLeastOnce(Iterable<Mutation> mutations) throws SpannerEx\n     @Override\n     public CommitResponse writeAtLeastOnceWithOptions(\n         Iterable<Mutation> mutations, TransactionOption... options) throws SpannerException {\n-      final Timestamp commitTimestamp = writeAtLeastOnce(mutations);\n-      return new CommitResponse(commitTimestamp);\n+      try {", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkyOTQzOA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516929438", "bodyText": "sgtm, done", "author": "mayurkale22", "createdAt": "2020-11-03T20:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NzY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java\nindex 90b66573..21851921 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java\n\n@@ -1291,12 +1356,7 @@ final class SessionPool {\n \n     @Override\n     public Timestamp writeAtLeastOnce(Iterable<Mutation> mutations) throws SpannerException {\n-      try {\n-        markUsed();\n-        return delegate.writeAtLeastOnce(mutations);\n-      } catch (SpannerException e) {\n-        throw lastException = e;\n-      }\n+      return writeAtLeastOnceWithOptions(mutations).getCommitTimestamp();\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3Nzk3MQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516477971", "bodyText": "what is this?", "author": "olavloite", "createdAt": "2020-11-03T07:58:56Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -141,12 +143,15 @@ public void removeListener(Runnable listener) {\n     @GuardedBy(\"lock\")\n     private volatile int runningAsyncOperations;\n \n-    @GuardedBy(\"lock\")\n+    @GuardedBy(\"lock\")batchUpdate", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODI2Ng==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516908266", "bodyText": "It was bad push, got rid of it.", "author": "mayurkale22", "createdAt": "2020-11-03T19:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3Nzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 39d6eed4..2f11a9aa 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -143,14 +152,13 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n     @GuardedBy(\"lock\")\n     private volatile int runningAsyncOperations;\n \n-    @GuardedBy(\"lock\")batchUpdate\n+    @GuardedBy(\"lock\")\n     private List<Mutation> mutations = new ArrayList<>();\n \n     @GuardedBy(\"lock\")\n     private boolean aborted;\n \n-    @GuardedBy(\"lock\")\n-    private String txnTag;\n+    private final Options options;\n \n     /** Default to -1 to indicate not available. */\n     @GuardedBy(\"lock\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3ODk4Mw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516478983", "bodyText": "I think it would be good to have a check here that this method may only be called before TransactionRunner has been executed.", "author": "olavloite", "createdAt": "2020-11-03T08:00:59Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -698,6 +712,13 @@ public void run() {\n       return updateCounts;\n     }\n \n+    @Override\n+    public void withTransactionTag(String tag) {\n+      synchronized (lock) {", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 39d6eed4..2f11a9aa 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -712,13 +733,6 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n       return updateCounts;\n     }\n \n-    @Override\n-    public void withTransactionTag(String tag) {\n-      synchronized (lock) {\n-        this.txnTag = tag;\n-      }\n-    }\n-\n     private ListenableAsyncResultSet wrap(ListenableAsyncResultSet delegate) {\n       return new TransactionContextAsyncResultSetImpl(delegate);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NDM1Mw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516484353", "bodyText": "not related to this change, but I noticed it now and added a small issue: #577", "author": "olavloite", "createdAt": "2020-11-03T08:12:41Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -163,10 +164,13 @@ public void listEquality() {\n   @Test\n   public void readOptTest() {\n     int limit = 3;\n-    Options opts = Options.fromReadOptions(Options.limit(limit));\n+    String tag = \"read\";\n+    Options opts = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"limit: \" + Integer.toString(limit) + \" \");\n-    assertThat(opts.hashCode()).isEqualTo(964);\n+    assertThat(opts.toString())\n+        .isEqualTo(\"limit: \" + Integer.toString(limit) + \" \" + \"tag: \" + tag + \" \");\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(3526226);", "originalCommit": "f93240ff3b5e4817ba5083621168be2b543c97ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwODk3MA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516908970", "bodyText": "Ok cool", "author": "mayurkale22", "createdAt": "2020-11-03T19:34:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NDM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 466daacc..14bde7c3 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -164,13 +171,13 @@ public class OptionsTest {\n   @Test\n   public void readOptTest() {\n     int limit = 3;\n-    String tag = \"read\";\n+    String tag = \"app=spanner,env=test,action=read\";\n     Options opts = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));\n \n     assertThat(opts.toString())\n         .isEqualTo(\"limit: \" + Integer.toString(limit) + \" \" + \"tag: \" + tag + \" \");\n     assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(3526226);\n+    assertThat(opts.hashCode()).isEqualTo(-1111478426);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzU5OA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r533333598", "bodyText": "I've been working on adding support for RPC priority, which will use the same RequestOptions proto as this change, and has many similarities with tagging. I'm starting to doubt whether this is the best way to support transaction tags, as this approach would also mean that we would have to add a withPriority(..) method for RPC priority, and possibly additional methods for any future additional request options.\nIt is also a little bit counter-intuitive that the transaction tag is set using TransactionOptions for the writeWithOptions and writeAtLeastOnceWithOptions, while it cannot be used for normal read/write transactions.\nI therefore created the change for RPC priority by adding TransactionOption... options to the read/write transaction methods instead of adding a withPriority(...) method to TransactionContext.\nSee here for the definition: \n  \n    \n      java-spanner/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java\n    \n    \n         Line 325\n      in\n      046aac8\n    \n    \n    \n    \n\n        \n          \n           TransactionRunner readWriteTransaction(TransactionOption... options); \n        \n    \n  \n\n\nSee here for an example how it's used: \n  \n    \n      java-spanner/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n    \n    \n        Lines 1695 to 1706\n      in\n      046aac8\n    \n    \n    \n    \n\n        \n          \n           public void testCommitWithPriority() { \n        \n\n        \n          \n             DatabaseClient client = \n        \n\n        \n          \n                 spanner.getDatabaseClient(DatabaseId.of(TEST_PROJECT, TEST_INSTANCE, TEST_DATABASE)); \n        \n\n        \n          \n             TransactionRunner runner = client.readWriteTransaction(Options.priority(RpcPriority.HIGH)); \n        \n\n        \n          \n             runner.run( \n        \n\n        \n          \n                 new TransactionCallable<Void>() { \n        \n\n        \n          \n                   @Override \n        \n\n        \n          \n                   public Void run(TransactionContext transaction) throws Exception { \n        \n\n        \n          \n                     transaction.buffer(Mutation.delete(\"TEST\", KeySet.all())); \n        \n\n        \n          \n                     return null; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                 }); \n        \n    \n  \n\n\nI think we should use the same approach for both tagging and RPC priority.\n@mayurkale22 @thiagotnunes @syeduguri WDYT?", "author": "olavloite", "createdAt": "2020-12-01T11:21:25Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionContext.java", "diffHunk": "@@ -130,16 +131,19 @@\n    * 2nd statement, and an array of length 1 that contains the number of rows modified by the 1st\n    * statement. The 3rd statement will not run.\n    */\n-  long[] batchUpdate(Iterable<Statement> statements);\n+  long[] batchUpdate(Iterable<Statement> statements, UpdateOption... options);\n \n   /**\n-   * Same as {@link #batchUpdate(Iterable)}, but is guaranteed to be non-blocking. If multiple\n-   * asynchronous update statements are submitted to the same read/write transaction, the statements\n-   * are guaranteed to be submitted to Cloud Spanner in the order that they were submitted in the\n-   * client. This does however not guarantee that an asynchronous update statement will see the\n-   * results of all previously submitted statements, as the execution of the statements can be\n-   * parallel. If you rely on the results of a previous statement, you should block until the result\n-   * of that statement is known and has been returned to the client.\n+   * Same as {@link #batchUpdate(Iterable, UpdateOption...)}, but is guaranteed to be non-blocking.\n+   * If multiple asynchronous update statements are submitted to the same read/write transaction,\n+   * the statements are guaranteed to be submitted to Cloud Spanner in the order that they were\n+   * submitted in the client. This does however not guarantee that an asynchronous update statement\n+   * will see the results of all previously submitted statements, as the execution of the statements\n+   * can be parallel. If you rely on the results of a previous statement, you should block until the\n+   * result of that statement is known and has been returned to the client.\n    */\n-  ApiFuture<long[]> batchUpdateAsync(Iterable<Statement> statements);\n+  ApiFuture<long[]> batchUpdateAsync(Iterable<Statement> statements, UpdateOption... options);\n+\n+  /** Sets the tag for the currently active transaction. */\n+  void withTransactionTag(String tag);", "originalCommit": "c3be7ce852a8d88655fe295fda080143ff40123a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NDYzMQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r533794631", "bodyText": "I like the fact that if we do this we would normalise the API (for writeWithOptions and writeAtLeastOnceWithOptions along with the read write transactions). I think that the problem that arrives with this is that for all the current varargs APIs, the user could potentially set multiple Tags or multiple Priorities. We would need them to add client side validation or choose the first/last one.\nI don't have a strong opinion on this, I am good either way, but regardless of what we choose, we should follow the same approach for Tagging and RPC priorities.", "author": "thiagotnunes", "createdAt": "2020-12-01T23:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxMzI1OA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r535713258", "bodyText": "I think this is a great idea. I can update my PR based on this.\nLooking at #676, I see TransactionOption has been added on TransactionManager  transactionManager(), AsyncRunner runAsync() and AsyncTransactionManager transactionManagerAsync(), Could you please elaborate more on this? Also, do I need to make things changes in my PR?", "author": "mayurkale22", "createdAt": "2020-12-03T23:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4OTY1Ng==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r535989656", "bodyText": "Well, it depends on which PR (this or #676) will be merged first. The one that is merged first should add the TransactionOption argument to the transaction methods. The other PR should then be rebased after that change and use the same approach for setting the options. I'll try to find out which one is most likely to be ready for merge first.", "author": "olavloite", "createdAt": "2020-12-04T10:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzNTg0Mw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r541235843", "bodyText": "I will rebase this CL once #716 is merged.", "author": "mayurkale22", "createdAt": "2020-12-11T20:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionContext.java\nindex 1ccf80eb..e940c258 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionContext.java\n\n@@ -143,7 +143,4 @@ public interface TransactionContext extends ReadContext {\n    * result of that statement is known and has been returned to the client.\n    */\n   ApiFuture<long[]> batchUpdateAsync(Iterable<Statement> statements, UpdateOption... options);\n-\n-  /** Sets the tag for the currently active transaction. */\n-  void withTransactionTag(String tag);\n }\n"}}, {"oid": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "url": "https://github.com/googleapis/java-spanner/commit/540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "message": "fix: use buildRequestOptions in readInternalWithOptions", "committedDate": "2020-12-30T02:55:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODg3Ng==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550418876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (txnTag != null) builder.setTransactionTag(txnTag);\n          \n          \n            \n                if (getTransactionTag() != null) builder.setTransactionTag(getTransactionTag());", "author": "olavloite", "createdAt": "2020-12-31T07:37:17Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,8 +555,20 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());\n+    if (txnTag != null) builder.setTransactionTag(txnTag);", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -555,20 +558,19 @@ abstract class AbstractReadContext\n     return builder.build();\n   }\n \n-  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+  RequestOptions buildRequestOptions(Options options) {\n     RequestOptions.Builder builder = RequestOptions.newBuilder();\n-    if (options.hasTag()) builder.setRequestTag(options.tag());\n-    if (txnTag != null) builder.setTransactionTag(txnTag);\n+    if (options.hasTag()) {\n+      builder.setRequestTag(options.tag());\n+    }\n+    if (getTransactionTag() != null) {\n+      builder.setTransactionTag(getTransactionTag());\n+    }\n     return builder.build();\n   }\n \n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n-      Statement statement, QueryMode queryMode, Options options) {\n-    return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n-  }\n-\n-  ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n-      Statement statement, QueryMode queryMode, Options options, String txnTag) {\n+      Statement statement, QueryMode queryMode, Options options, boolean withTransactionSelector) {\n     ExecuteSqlRequest.Builder builder =\n         ExecuteSqlRequest.newBuilder()\n             .setSql(statement.getSql())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODk1MQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550418951", "bodyText": "The transaction tag is already present in the Options in the TransactionContext, so it would be easier to just keep it there and let the TransactionContext deliver it when needed through a getTransactionTag() method. See my suggestions below for how that would work out. It would automatically also fix the TODO for adding it to read requests.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              RequestOptions buildRequestOptions(Options options, String txnTag) {\n          \n          \n            \n              RequestOptions buildRequestOptions(Options options) {", "author": "olavloite", "createdAt": "2020-12-31T07:37:50Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,8 +555,20 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options, String txnTag) {", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -555,20 +558,19 @@ abstract class AbstractReadContext\n     return builder.build();\n   }\n \n-  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+  RequestOptions buildRequestOptions(Options options) {\n     RequestOptions.Builder builder = RequestOptions.newBuilder();\n-    if (options.hasTag()) builder.setRequestTag(options.tag());\n-    if (txnTag != null) builder.setTransactionTag(txnTag);\n+    if (options.hasTag()) {\n+      builder.setRequestTag(options.tag());\n+    }\n+    if (getTransactionTag() != null) {\n+      builder.setTransactionTag(getTransactionTag());\n+    }\n     return builder.build();\n   }\n \n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n-      Statement statement, QueryMode queryMode, Options options) {\n-    return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n-  }\n-\n-  ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n-      Statement statement, QueryMode queryMode, Options options, String txnTag) {\n+      Statement statement, QueryMode queryMode, Options options, boolean withTransactionSelector) {\n     ExecuteSqlRequest.Builder builder =\n         ExecuteSqlRequest.newBuilder()\n             .setSql(statement.getSql())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTM5NQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n          \n          \n            \n                  Statement statement, QueryMode queryMode, Options options, String txnTag) {", "author": "olavloite", "createdAt": "2020-12-31T07:40:24Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,8 +555,20 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());\n+    if (txnTag != null) builder.setTransactionTag(txnTag);\n+    return builder.build();\n+  }\n+\n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n       Statement statement, QueryMode queryMode, Options options) {\n+    return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n+  }\n+\n+  ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n+      Statement statement, QueryMode queryMode, Options options, String txnTag) {", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -555,20 +558,19 @@ abstract class AbstractReadContext\n     return builder.build();\n   }\n \n-  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+  RequestOptions buildRequestOptions(Options options) {\n     RequestOptions.Builder builder = RequestOptions.newBuilder();\n-    if (options.hasTag()) builder.setRequestTag(options.tag());\n-    if (txnTag != null) builder.setTransactionTag(txnTag);\n+    if (options.hasTag()) {\n+      builder.setRequestTag(options.tag());\n+    }\n+    if (getTransactionTag() != null) {\n+      builder.setTransactionTag(getTransactionTag());\n+    }\n     return builder.build();\n   }\n \n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n-      Statement statement, QueryMode queryMode, Options options) {\n-    return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n-  }\n-\n-  ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n-      Statement statement, QueryMode queryMode, Options options, String txnTag) {\n+      Statement statement, QueryMode queryMode, Options options, boolean withTransactionSelector) {\n     ExecuteSqlRequest.Builder builder =\n         ExecuteSqlRequest.newBuilder()\n             .setSql(statement.getSql())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTQyNw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options, txnTag));\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options));", "author": "olavloite", "createdAt": "2020-12-31T07:40:42Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -575,11 +588,12 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -582,18 +584,20 @@ abstract class AbstractReadContext\n         builder.putParamTypes(param.getKey(), param.getValue().getType().toProto());\n       }\n     }\n-    TransactionSelector selector = getTransactionSelector();\n-    if (selector != null) {\n-      builder.setTransaction(selector);\n+    if (withTransactionSelector) {\n+      TransactionSelector selector = getTransactionSelector();\n+      if (selector != null) {\n+        builder.setTransaction(selector);\n+      }\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n-    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n+    builder.setRequestOptions(buildRequestOptions(options));\n     return builder;\n   }\n \n   ExecuteBatchDmlRequest.Builder getExecuteBatchDmlRequestBuilder(\n-      Iterable<Statement> statements, Options options, String txnTag) {\n+      Iterable<Statement> statements, Options options) {\n     ExecuteBatchDmlRequest.Builder builder =\n         ExecuteBatchDmlRequest.newBuilder().setSession(session.getName());\n     int idx = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTYzMA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419630", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              \n          \n          \n            \n              /**\n          \n          \n            \n               * Returns the transaction tag for this {@link AbstractReadContext} or <code>null</code> if this\n          \n          \n            \n               * {@link AbstractReadContext} does not have a transaction tag.\n          \n          \n            \n               * */\n          \n          \n            \n              String getTransactionTag() {\n          \n          \n            \n                return null;\n          \n          \n            \n              }", "author": "olavloite", "createdAt": "2020-12-31T07:42:01Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -575,11 +588,12 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n     return builder;\n   }\n ", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -582,18 +584,20 @@ abstract class AbstractReadContext\n         builder.putParamTypes(param.getKey(), param.getValue().getType().toProto());\n       }\n     }\n-    TransactionSelector selector = getTransactionSelector();\n-    if (selector != null) {\n-      builder.setTransaction(selector);\n+    if (withTransactionSelector) {\n+      TransactionSelector selector = getTransactionSelector();\n+      if (selector != null) {\n+        builder.setTransaction(selector);\n+      }\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n-    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n+    builder.setRequestOptions(buildRequestOptions(options));\n     return builder;\n   }\n \n   ExecuteBatchDmlRequest.Builder getExecuteBatchDmlRequestBuilder(\n-      Iterable<Statement> statements, Options options, String txnTag) {\n+      Iterable<Statement> statements, Options options) {\n     ExecuteBatchDmlRequest.Builder builder =\n         ExecuteBatchDmlRequest.newBuilder().setSession(session.getName());\n     int idx = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTY4Mw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419683", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Iterable<Statement> statements, Options options, String txnTag) {\n          \n          \n            \n                  Iterable<Statement> statements, Options options) {", "author": "olavloite", "createdAt": "2020-12-31T07:42:17Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -575,11 +588,12 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n     return builder;\n   }\n \n   ExecuteBatchDmlRequest.Builder getExecuteBatchDmlRequestBuilder(\n-      Iterable<Statement> statements, Options options) {\n+      Iterable<Statement> statements, Options options, String txnTag) {", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -582,18 +584,20 @@ abstract class AbstractReadContext\n         builder.putParamTypes(param.getKey(), param.getValue().getType().toProto());\n       }\n     }\n-    TransactionSelector selector = getTransactionSelector();\n-    if (selector != null) {\n-      builder.setTransaction(selector);\n+    if (withTransactionSelector) {\n+      TransactionSelector selector = getTransactionSelector();\n+      if (selector != null) {\n+        builder.setTransaction(selector);\n+      }\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n-    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n+    builder.setRequestOptions(buildRequestOptions(options));\n     return builder;\n   }\n \n   ExecuteBatchDmlRequest.Builder getExecuteBatchDmlRequestBuilder(\n-      Iterable<Statement> statements, Options options, String txnTag) {\n+      Iterable<Statement> statements, Options options) {\n     ExecuteBatchDmlRequest.Builder builder =\n         ExecuteBatchDmlRequest.newBuilder().setSession(session.getName());\n     int idx = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTcxNw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419717", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options, txnTag));\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options));", "author": "olavloite", "createdAt": "2020-12-31T07:42:29Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -605,6 +619,7 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n       builder.setTransaction(selector);\n     }\n     builder.setSeqno(getSeqNo());\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -619,7 +623,7 @@ abstract class AbstractReadContext\n       builder.setTransaction(selector);\n     }\n     builder.setSeqno(getSeqNo());\n-    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n+    builder.setRequestOptions(buildRequestOptions(options));\n     return builder;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTc3OA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419778", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO: set transaction tag when executed within a RW transaction\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(readOptions, null));\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(readOptions));", "author": "olavloite", "createdAt": "2020-12-31T07:42:57Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -728,6 +743,9 @@ ResultSet readInternalWithOptions(\n     if (partitionToken != null) {\n       builder.setPartitionToken(partitionToken);\n     }\n+    // TODO: set transaction tag when executed within a RW transaction\n+    builder.setRequestOptions(buildRequestOptions(readOptions, null));", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 383b5c5c..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -743,8 +766,7 @@ abstract class AbstractReadContext\n     if (partitionToken != null) {\n       builder.setPartitionToken(partitionToken);\n     }\n-    // TODO: set transaction tag when executed within a RW transaction\n-    builder.setRequestOptions(buildRequestOptions(readOptions, null));\n+    builder.setRequestOptions(buildRequestOptions(readOptions));\n \n     final int prefetchChunks =\n         readOptions.hasPrefetchChunks() ? readOptions.prefetchChunks() : defaultPrefetchChunks;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDQyMw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420423", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteSqlRequestBuilderWithTxnTag(\n          \n          \n            \n                          statement,\n          \n          \n            \n                          QueryMode.NORMAL,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteSqlRequestBuilder(\n          \n          \n            \n                          statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));", "author": "olavloite", "createdAt": "2020-12-31T07:46:23Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -528,8 +533,11 @@ public void buffer(Iterable<Mutation> mutations) {\n     public long executeUpdate(Statement statement, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteSqlRequest.Builder builder =\n-          getExecuteSqlRequestBuilder(\n-              statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));\n+          getExecuteSqlRequestBuilderWithTxnTag(\n+              statement,\n+              QueryMode.NORMAL,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 2f11a9aa..b8a7dd14 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -533,16 +623,17 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n     public long executeUpdate(Statement statement, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteSqlRequest.Builder builder =\n-          getExecuteSqlRequestBuilderWithTxnTag(\n+          getExecuteSqlRequestBuilder(\n               statement,\n               QueryMode.NORMAL,\n               Options.fromUpdateOptions(options),\n-              this.options.hasTag() ? this.options.tag() : null);\n+              /* withTransactionSelector = */ true);\n       try {\n         com.google.spanner.v1.ResultSet resultSet =\n             rpc.executeQuery(builder.build(), session.getOptions());\n         if (resultSet.getMetadata().hasTransaction()) {\n-          onTransactionMetadata(resultSet.getMetadata().getTransaction());\n+          onTransactionMetadata(\n+              resultSet.getMetadata().getTransaction(), builder.getTransaction().hasBegin());\n         }\n         if (!resultSet.hasStats()) {\n           throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDQ4NQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420485", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteSqlRequestBuilderWithTxnTag(\n          \n          \n            \n                          statement,\n          \n          \n            \n                          QueryMode.NORMAL,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteSqlRequestBuilder(\n          \n          \n            \n                          statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));", "author": "olavloite", "createdAt": "2020-12-31T07:46:41Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -552,8 +560,11 @@ public long executeUpdate(Statement statement, UpdateOption... options) {\n     public ApiFuture<Long> executeUpdateAsync(Statement statement, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteSqlRequest.Builder builder =\n-          getExecuteSqlRequestBuilder(\n-              statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));\n+          getExecuteSqlRequestBuilderWithTxnTag(\n+              statement,\n+              QueryMode.NORMAL,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 2f11a9aa..b8a7dd14 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -550,9 +641,9 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n         }\n         // For standard DML, using the exact row count.\n         return resultSet.getStats().getRowCountExact();\n-      } catch (SpannerException e) {\n-        onError(e, builder.hasTransaction() && builder.getTransaction().hasBegin());\n-        throw e;\n+      } catch (Throwable t) {\n+        throw onError(\n+            SpannerExceptionFactory.asSpannerException(t), builder.getTransaction().hasBegin());\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDc1MQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteBatchDmlRequestBuilder(\n          \n          \n            \n                          statements,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));", "author": "olavloite", "createdAt": "2020-12-31T07:48:14Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -616,7 +627,10 @@ public void run() {\n     public long[] batchUpdate(Iterable<Statement> statements, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteBatchDmlRequest.Builder builder =\n-          getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));\n+          getExecuteBatchDmlRequestBuilder(\n+              statements,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 2f11a9aa..b8a7dd14 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -623,14 +721,24 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n       return updateCount;\n     }\n \n+    private SpannerException createAbortedExceptionForBatchDml(ExecuteBatchDmlResponse response) {\n+      // Manually construct an AbortedException with a 10ms retry delay for BatchDML responses that\n+      // return an Aborted status (and not an AbortedException).\n+      return newSpannerException(\n+          ErrorCode.fromRpcStatus(response.getStatus()),\n+          response.getStatus().getMessage(),\n+          SpannerExceptionFactory.createAbortedExceptionWithRetryDelay(\n+              response.getStatus().getMessage(),\n+              /* cause = */ null,\n+              /* retryDelaySeconds = */ 0,\n+              /* retryDelayNanos = */ (int) TimeUnit.MILLISECONDS.toNanos(10L)));\n+    }\n+\n     @Override\n     public long[] batchUpdate(Iterable<Statement> statements, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteBatchDmlRequest.Builder builder =\n-          getExecuteBatchDmlRequestBuilder(\n-              statements,\n-              Options.fromUpdateOptions(options),\n-              this.options.hasTag() ? this.options.tag() : null);\n+          getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));\n       try {\n         com.google.spanner.v1.ExecuteBatchDmlResponse response =\n             rpc.executeBatchDml(builder.build(), session.getOptions());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDg1OA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteBatchDmlRequestBuilder(\n          \n          \n            \n                          statements,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));", "author": "olavloite", "createdAt": "2020-12-31T07:48:44Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -651,7 +665,10 @@ public void run() {\n         Iterable<Statement> statements, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteBatchDmlRequest.Builder builder =\n-          getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));\n+          getExecuteBatchDmlRequestBuilder(\n+              statements,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 2f11a9aa..b8a7dd14 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -665,10 +774,7 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n         Iterable<Statement> statements, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteBatchDmlRequest.Builder builder =\n-          getExecuteBatchDmlRequestBuilder(\n-              statements,\n-              Options.fromUpdateOptions(options),\n-              this.options.hasTag() ? this.options.tag() : null);\n+          getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));\n       ApiFuture<com.google.spanner.v1.ExecuteBatchDmlResponse> response;\n       try {\n         // Register the update as an async operation that must finish before the transaction may\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTQxNg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550421416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * collection grouped by tag.\n          \n          \n            \n               * collection to be grouped by tag.", "author": "olavloite", "createdAt": "2020-12-31T07:52:13Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "diffHunk": "@@ -74,6 +74,14 @@ public static ReadAndQueryOption bufferRows(int bufferRows) {\n     return new BufferRowsOption(bufferRows);\n   }\n \n+  /**\n+   * Specifying this will cause the reads, queries, updates and writes operations statistics\n+   * collection grouped by tag.", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java\nindex 628cabbd..f4b55663 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java\n\n@@ -76,7 +81,7 @@ public final class Options implements Serializable {\n \n   /**\n    * Specifying this will cause the reads, queries, updates and writes operations statistics\n-   * collection grouped by tag.\n+   * collection to be grouped by tag.\n    */\n   public static ReadQueryUpdateTransactionOption tag(String name) {\n     return new TagOption(name);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTgwOQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550421809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public long executeUpdate(Statement statement, UpdateOption... options) {\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                String getTransactionTag() {\n          \n          \n            \n                  if (this.options.hasTag()) return this.options.tag();\n          \n          \n            \n                  return null;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public long executeUpdate(Statement statement, UpdateOption... options) {", "author": "olavloite", "createdAt": "2020-12-31T07:54:42Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -528,8 +533,11 @@ public void buffer(Iterable<Mutation> mutations) {\n     public long executeUpdate(Statement statement, UpdateOption... options) {", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\nindex 2f11a9aa..b8a7dd14 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java\n\n@@ -533,16 +623,17 @@ class TransactionRunnerImpl implements SessionTransaction, TransactionRunner {\n     public long executeUpdate(Statement statement, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteSqlRequest.Builder builder =\n-          getExecuteSqlRequestBuilderWithTxnTag(\n+          getExecuteSqlRequestBuilder(\n               statement,\n               QueryMode.NORMAL,\n               Options.fromUpdateOptions(options),\n-              this.options.hasTag() ? this.options.tag() : null);\n+              /* withTransactionSelector = */ true);\n       try {\n         com.google.spanner.v1.ResultSet resultSet =\n             rpc.executeQuery(builder.build(), session.getOptions());\n         if (resultSet.getMetadata().hasTransaction()) {\n-          onTransactionMetadata(resultSet.getMetadata().getTransaction());\n+          onTransactionMetadata(\n+              resultSet.getMetadata().getTransaction(), builder.getTransaction().hasBegin());\n         }\n         if (!resultSet.hasStats()) {\n           throw new IllegalArgumentException(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTk1Nw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550421957", "bodyText": "Add the getTransactionTag() method to the TestReadContext test class to simulate a transaction with/without a transaction tag.", "author": "olavloite", "createdAt": "2020-12-31T07:55:35Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java", "diffHunk": "@@ -110,4 +110,33 @@ public void executeSqlRequestBuilderWithQueryOptions() {\n     assertThat(request.getSql()).isEqualTo(\"SELECT FOO FROM BAR\");\n     assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"2.0\");\n   }\n+\n+  @Test\n+  public void executeSqlRequestBuilderWithRequestOptions() {", "originalCommit": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTE5OQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550719199", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-01-01T02:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTk1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java\nindex 61bf0258..4afa6464 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java\n\n@@ -105,7 +131,8 @@ public class AbstractReadContextTest {\n                     .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"2.0\").build())\n                     .build(),\n                 QueryMode.NORMAL,\n-                Options.fromQueryOptions())\n+                Options.fromQueryOptions(),\n+                true)\n             .build();\n     assertThat(request.getSql()).isEqualTo(\"SELECT FOO FROM BAR\");\n     assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"2.0\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5Njk2Ng==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r561896966", "bodyText": "multiline ifs only, per google style", "author": "elharo", "createdAt": "2021-01-21T13:53:43Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,6 +555,13 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());", "originalCommit": "ee28eadebc212635a19ab519dae8148203a82949", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjEyMzczNw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r562123737", "bodyText": "Done", "author": "mayurkale22", "createdAt": "2021-01-21T18:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5Njk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 7291f1b1..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -557,13 +560,17 @@ abstract class AbstractReadContext\n \n   RequestOptions buildRequestOptions(Options options) {\n     RequestOptions.Builder builder = RequestOptions.newBuilder();\n-    if (options.hasTag()) builder.setRequestTag(options.tag());\n-    if (getTransactionTag() != null) builder.setTransactionTag(getTransactionTag());\n+    if (options.hasTag()) {\n+      builder.setRequestTag(options.tag());\n+    }\n+    if (getTransactionTag() != null) {\n+      builder.setTransactionTag(getTransactionTag());\n+    }\n     return builder.build();\n   }\n \n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n-      Statement statement, QueryMode queryMode, Options options) {\n+      Statement statement, QueryMode queryMode, Options options, boolean withTransactionSelector) {\n     ExecuteSqlRequest.Builder builder =\n         ExecuteSqlRequest.newBuilder()\n             .setSql(statement.getSql())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NzEyMw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r561897123", "bodyText": "always use braces on blocks", "author": "elharo", "createdAt": "2021-01-21T13:53:58Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,6 +555,13 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());\n+    if (getTransactionTag() != null) builder.setTransactionTag(getTransactionTag());", "originalCommit": "ee28eadebc212635a19ab519dae8148203a82949", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjEyMzcyMA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r562123720", "bodyText": "Done", "author": "mayurkale22", "createdAt": "2021-01-21T18:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NzEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "chunk": "diff --git a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\nindex 7291f1b1..03dbffc6 100644\n--- a/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n+++ b/google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java\n\n@@ -557,13 +560,17 @@ abstract class AbstractReadContext\n \n   RequestOptions buildRequestOptions(Options options) {\n     RequestOptions.Builder builder = RequestOptions.newBuilder();\n-    if (options.hasTag()) builder.setRequestTag(options.tag());\n-    if (getTransactionTag() != null) builder.setTransactionTag(getTransactionTag());\n+    if (options.hasTag()) {\n+      builder.setRequestTag(options.tag());\n+    }\n+    if (getTransactionTag() != null) {\n+      builder.setTransactionTag(getTransactionTag());\n+    }\n     return builder.build();\n   }\n \n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n-      Statement statement, QueryMode queryMode, Options options) {\n+      Statement statement, QueryMode queryMode, Options options, boolean withTransactionSelector) {\n     ExecuteSqlRequest.Builder builder =\n         ExecuteSqlRequest.newBuilder()\n             .setSql(statement.getSql())\n"}}, {"oid": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "url": "https://github.com/googleapis/java-spanner/commit/11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "message": "fix code reviews", "committedDate": "2021-03-31T18:25:54Z", "type": "forcePushed"}, {"oid": "1bf2638c03bfe91edfd77e409b21077b3287ebc5", "url": "https://github.com/googleapis/java-spanner/commit/1bf2638c03bfe91edfd77e409b21077b3287ebc5", "message": "[Tagging Feature] add support for tagging feature", "committedDate": "2021-03-31T19:03:42Z", "type": "commit"}, {"oid": "552f26ff671de8557cac5c9ca9791fcef756749d", "url": "https://github.com/googleapis/java-spanner/commit/552f26ff671de8557cac5c9ca9791fcef756749d", "message": "fix: code reviews", "committedDate": "2021-03-31T19:05:33Z", "type": "commit"}, {"oid": "b65b54496a56889e82499741a400fdfe2f58154d", "url": "https://github.com/googleapis/java-spanner/commit/b65b54496a56889e82499741a400fdfe2f58154d", "message": "fix: combine boiler plate code", "committedDate": "2021-03-31T19:05:35Z", "type": "commit"}, {"oid": "f409761b92efbda880746bd7b44b784011d272f9", "url": "https://github.com/googleapis/java-spanner/commit/f409761b92efbda880746bd7b44b784011d272f9", "message": "fix: use buildRequestOptions in readInternalWithOptions", "committedDate": "2021-03-31T19:05:35Z", "type": "commit"}, {"oid": "65c7b4cf048684a97cb436645d6ce64327c37446", "url": "https://github.com/googleapis/java-spanner/commit/65c7b4cf048684a97cb436645d6ce64327c37446", "message": "refactor", "committedDate": "2021-03-31T19:05:35Z", "type": "commit"}, {"oid": "c70bd6f16ccc723b4f53aa5f49eb39790fe462d1", "url": "https://github.com/googleapis/java-spanner/commit/c70bd6f16ccc723b4f53aa5f49eb39790fe462d1", "message": "refactor2", "committedDate": "2021-03-31T19:05:35Z", "type": "commit"}, {"oid": "fa5891fff077a6bc965907bf9d2746b93a316441", "url": "https://github.com/googleapis/java-spanner/commit/fa5891fff077a6bc965907bf9d2746b93a316441", "message": "fix code reviews", "committedDate": "2021-03-31T19:08:29Z", "type": "commit"}, {"oid": "fa5891fff077a6bc965907bf9d2746b93a316441", "url": "https://github.com/googleapis/java-spanner/commit/fa5891fff077a6bc965907bf9d2746b93a316441", "message": "fix code reviews", "committedDate": "2021-03-31T19:08:29Z", "type": "forcePushed"}, {"oid": "2a49d4f1fb9ea7a1d38eacd2c823e31acc72ea38", "url": "https://github.com/googleapis/java-spanner/commit/2a49d4f1fb9ea7a1d38eacd2c823e31acc72ea38", "message": "chore: rebase requestoption proto", "committedDate": "2021-03-31T19:24:13Z", "type": "commit"}, {"oid": "2d7f161caf5bca586ff6882b5ed6404e53adcee5", "url": "https://github.com/googleapis/java-spanner/commit/2d7f161caf5bca586ff6882b5ed6404e53adcee5", "message": "chore: fix lint", "committedDate": "2021-03-31T19:37:25Z", "type": "commit"}, {"oid": "e618d6d50d1c665fa347939b4623e754a5af38af", "url": "https://github.com/googleapis/java-spanner/commit/e618d6d50d1c665fa347939b4623e754a5af38af", "message": "chore: add more tests", "committedDate": "2021-03-31T21:48:26Z", "type": "commit"}, {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "url": "https://github.com/googleapis/java-spanner/commit/1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "message": "chore: minor style fix", "committedDate": "2021-03-31T22:05:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI4OTc4Mg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605289782", "bodyText": "nit: could we also create a hasTransactionTag() that checks if getTransactionTag() != null?", "author": "thiagotnunes", "createdAt": "2021-03-31T23:47:01Z", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -707,6 +713,15 @@ public void close() {\n   @Nullable\n   abstract TransactionSelector getTransactionSelector();\n \n+  /**\n+   * Returns the transaction tag for this {@link AbstractReadContext} or <code>null</code> if this\n+   * {@link AbstractReadContext} does not have a transaction tag.\n+   */\n+  @Nullable\n+  String getTransactionTag() {", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTM3Mg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291372", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "author": "thiagotnunes", "createdAt": "2021-03-31T23:51:30Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -170,10 +171,13 @@ public void listEquality() {\n   @Test\n   public void readOptTest() {\n     int limit = 3;\n-    Options opts = Options.fromReadOptions(Options.limit(limit));\n+    String tag = \"app=spanner,env=test,action=read\";\n+    Options opts = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg3NDYwMQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605874601", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-04-01T18:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -169,15 +169,15 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void readOptTest() {\n+  public void readOptionsTest() {\n     int limit = 3;\n     String tag = \"app=spanner,env=test,action=read\";\n-    Options opts = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));\n+    Options options = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));\n \n-    assertThat(opts.toString())\n+    assertThat(options.toString())\n         .isEqualTo(\"limit: \" + Integer.toString(limit) + \" \" + \"tag: \" + tag + \" \");\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-1111478426);\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-1111478426);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTQyMQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291421", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "author": "thiagotnunes", "createdAt": "2021-03-31T23:51:38Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -200,10 +204,13 @@ public void readEquality() {\n   @Test\n   public void queryOptTest() {", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg3NTA0NA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605875044", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-04-01T18:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -202,15 +202,15 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void queryOptTest() {\n+  public void queryOptionsTest() {\n     int chunks = 3;\n     String tag = \"app=spanner,env=test,action=query\";\n-    Options opts = Options.fromQueryOptions(Options.prefetchChunks(chunks), Options.tag(tag));\n-    assertThat(opts.toString())\n+    Options options = Options.fromQueryOptions(Options.prefetchChunks(chunks), Options.tag(tag));\n+    assertThat(options.toString())\n         .isEqualTo(\"prefetchChunks: \" + Integer.toString(chunks) + \" \" + \"tag: \" + tag + \" \");\n-    assertThat(opts.prefetchChunks()).isEqualTo(chunks);\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-97431824);\n+    assertThat(options.prefetchChunks()).isEqualTo(chunks);\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-97431824);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTQ2MA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291460", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "author": "thiagotnunes", "createdAt": "2021-03-31T23:51:47Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg3NDY0Mg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605874642", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-04-01T18:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTU0NA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291544", "bodyText": "nit: please don't abbreviate Options to o.", "author": "thiagotnunes", "createdAt": "2021-03-31T23:52:03Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTYxMg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291612", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "author": "thiagotnunes", "createdAt": "2021-03-31T23:52:17Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;\n+    Options o2;\n+    Options o3;\n+\n+    o1 = Options.fromUpdateOptions();\n+    o2 = Options.fromUpdateOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+\n+    o2 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o1.equals(o2)).isFalse();\n+    assertThat(o2.equals(o1)).isFalse();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o2.equals(o3)).isTrue();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=stage\"));\n+    assertThat(o2.equals(o3)).isFalse();\n+  }\n+\n+  @Test\n+  public void transactionOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromTransactionOptions(Options.tag(tag));", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg3NDcyNg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605874726", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-04-01T18:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTYxMg=="}], "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTY4MQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291681", "bodyText": "nit: please don't abbreviate Options to o.", "author": "thiagotnunes", "createdAt": "2021-03-31T23:52:29Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;\n+    Options o2;\n+    Options o3;\n+\n+    o1 = Options.fromUpdateOptions();\n+    o2 = Options.fromUpdateOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+\n+    o2 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o1.equals(o2)).isFalse();\n+    assertThat(o2.equals(o1)).isFalse();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o2.equals(o3)).isTrue();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=stage\"));\n+    assertThat(o2.equals(o3)).isFalse();\n+  }\n+\n+  @Test\n+  public void transactionOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromTransactionOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void transactionEquality() {\n+    Options o1;", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1MjA0Nw==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605852047", "bodyText": "assertTrue", "author": "elharo", "createdAt": "2021-04-01T18:09:48Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg3NDgzMg==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605874832", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-04-01T18:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1MjA0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1MjQyNQ==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605852425", "bodyText": "Use of Truth here feels gratuitous. assertEquals and assertTrue are simple and well understood.", "author": "elharo", "createdAt": "2021-04-01T18:10:29Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg3NDkwMA==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605874900", "bodyText": "Done.", "author": "mayurkale22", "createdAt": "2021-04-01T18:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1MjQyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1Mjc2Ng==", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605852766", "bodyText": "Try to avoid reusing local variables. It's error prone.", "author": "elharo", "createdAt": "2021-04-01T18:11:01Z", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;\n+    Options o2;\n+    Options o3;\n+\n+    o1 = Options.fromUpdateOptions();\n+    o2 = Options.fromUpdateOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+\n+    o2 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o1.equals(o2)).isFalse();\n+    assertThat(o2.equals(o1)).isFalse();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));", "originalCommit": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "chunk": "diff --git a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\nindex 14bde7c3..d0f4794c 100644\n--- a/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n+++ b/google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java\n\n@@ -519,14 +519,14 @@ public class OptionsTest {\n   }\n \n   @Test\n-  public void updateOptTest() {\n+  public void updateOptionsTest() {\n     String tag = \"app=spanner,env=test\";\n-    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+    Options options = Options.fromUpdateOptions(Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n-    assertThat(opts.hasTag()).isTrue();\n-    assertThat(opts.tag()).isEqualTo(tag);\n-    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+    assertEquals(\"tag: \" + tag + \" \", options.toString());\n+    assertTrue(options.hasTag());\n+    assertThat(options.tag()).isEqualTo(tag);\n+    assertThat(options.hashCode()).isEqualTo(-2118248262);\n   }\n \n   @Test\n"}}, {"oid": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "url": "https://github.com/googleapis/java-spanner/commit/6bb97a46432e66c4238e482a92738c5a41cd41f6", "message": "chore: fix code reviews", "committedDate": "2021-04-01T18:48:32Z", "type": "commit"}]}