{"pr_number": 699, "pr_title": "G11n java client - Fix for expiration-related issues (issues 604, 664, and 662)", "pr_createdAt": "2020-08-03T21:52:51Z", "pr_url": "https://github.com/vmware/singleton/pull/699", "timeline": [{"oid": "06b60bbeead5438944a301ac10507610654f5d71", "url": "https://github.com/vmware/singleton/commit/06b60bbeead5438944a301ac10507610654f5d71", "message": "code clean up", "committedDate": "2020-05-12T23:55:53Z", "type": "commit"}, {"oid": "51b4dfa4d673a96f003757fe2b2692576bdfd92c", "url": "https://github.com/vmware/singleton/commit/51b4dfa4d673a96f003757fe2b2692576bdfd92c", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-05-13T00:09:46Z", "type": "commit"}, {"oid": "778a7a1ef4cdc9251c8e1db2501e1fe8f9440223", "url": "https://github.com/vmware/singleton/commit/778a7a1ef4cdc9251c8e1db2501e1fe8f9440223", "message": "Commenting out a test", "committedDate": "2020-05-13T02:35:06Z", "type": "commit"}, {"oid": "077f19b3a3ecf74662b7df27a2062d376b64d9a7", "url": "https://github.com/vmware/singleton/commit/077f19b3a3ecf74662b7df27a2062d376b64d9a7", "message": "code clean up", "committedDate": "2020-05-13T02:49:13Z", "type": "commit"}, {"oid": "9424346a07fa645376b7711cdd936573804b3192", "url": "https://github.com/vmware/singleton/commit/9424346a07fa645376b7711cdd936573804b3192", "message": "code clean up", "committedDate": "2020-05-13T18:23:03Z", "type": "commit"}, {"oid": "c25a676dd876b503b1b7738ab22edf262e836458", "url": "https://github.com/vmware/singleton/commit/c25a676dd876b503b1b7738ab22edf262e836458", "message": "Error logging when fetch failed", "committedDate": "2020-05-13T18:57:59Z", "type": "commit"}, {"oid": "db641b9ea0816671a56600c1651632a5f62b7cef", "url": "https://github.com/vmware/singleton/commit/db641b9ea0816671a56600c1651632a5f62b7cef", "message": "bug fix", "committedDate": "2020-05-13T23:31:12Z", "type": "commit"}, {"oid": "5cd06d60a04a85e57a1fe4f5aeb9d8537d2e2ed7", "url": "https://github.com/vmware/singleton/commit/5cd06d60a04a85e57a1fe4f5aeb9d8537d2e2ed7", "message": "code clean up", "committedDate": "2020-05-14T18:53:40Z", "type": "commit"}, {"oid": "6915f11ed80e515e7d24777a8c1f21cb4eb02e24", "url": "https://github.com/vmware/singleton/commit/6915f11ed80e515e7d24777a8c1f21cb4eb02e24", "message": "Updating sample application", "committedDate": "2020-05-15T02:53:42Z", "type": "commit"}, {"oid": "a64be3f7aae480fcf13d943b8e703c4deb58ffac", "url": "https://github.com/vmware/singleton/commit/a64be3f7aae480fcf13d943b8e703c4deb58ffac", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-05-17T18:54:06Z", "type": "commit"}, {"oid": "71281946f39629abfa181ab13536b4510c087184", "url": "https://github.com/vmware/singleton/commit/71281946f39629abfa181ab13536b4510c087184", "message": "fixing failing smoke test", "committedDate": "2020-05-19T03:05:45Z", "type": "commit"}, {"oid": "c4a388c17543e5197481497cdbc38c92da291ae6", "url": "https://github.com/vmware/singleton/commit/c4a388c17543e5197481497cdbc38c92da291ae6", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client", "committedDate": "2020-05-19T03:06:24Z", "type": "commit"}, {"oid": "5ecea939edab6ca083db4fafaddd9b721632dad8", "url": "https://github.com/vmware/singleton/commit/5ecea939edab6ca083db4fafaddd9b721632dad8", "message": "code clean up", "committedDate": "2020-05-19T04:20:20Z", "type": "commit"}, {"oid": "4c5b0a12142b092519391c128f31f69d1fdc5c7c", "url": "https://github.com/vmware/singleton/commit/4c5b0a12142b092519391c128f31f69d1fdc5c7c", "message": "fixing code scan", "committedDate": "2020-05-19T05:05:43Z", "type": "commit"}, {"oid": "067d19d4bbd130bd36fd43d9c686fe8e1f22ef33", "url": "https://github.com/vmware/singleton/commit/067d19d4bbd130bd36fd43d9c686fe8e1f22ef33", "message": "Fixing code scan", "committedDate": "2020-05-19T05:31:41Z", "type": "commit"}, {"oid": "711ce808a4225af2d0e0330711b46442841c9af4", "url": "https://github.com/vmware/singleton/commit/711ce808a4225af2d0e0330711b46442841c9af4", "message": "Adding prodMode configuration", "committedDate": "2020-05-19T22:32:44Z", "type": "commit"}, {"oid": "b7dabdba91d395294a9c4ee497cde547b1c1b5a4", "url": "https://github.com/vmware/singleton/commit/b7dabdba91d395294a9c4ee497cde547b1c1b5a4", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-05-19T22:36:01Z", "type": "commit"}, {"oid": "d8543ecc66657e97b222be404632503193a37b91", "url": "https://github.com/vmware/singleton/commit/d8543ecc66657e97b222be404632503193a37b91", "message": "code clean up", "committedDate": "2020-05-20T23:27:19Z", "type": "commit"}, {"oid": "e8094f40d6ea7c7e196d310238080f228a050e36", "url": "https://github.com/vmware/singleton/commit/e8094f40d6ea7c7e196d310238080f228a050e36", "message": "Setting default prodMode to true", "committedDate": "2020-05-21T04:26:40Z", "type": "commit"}, {"oid": "9a5ef77f77349a48b15851181fc41146b2128878", "url": "https://github.com/vmware/singleton/commit/9a5ef77f77349a48b15851181fc41146b2128878", "message": "Removing prodMode configuration and logic. Throwing exception if source key not found. Returning default locale message if locale not supported.", "committedDate": "2020-06-17T01:14:24Z", "type": "commit"}, {"oid": "5011c382379eef35d44c9c6c7f2b2ac9be18f10c", "url": "https://github.com/vmware/singleton/commit/5011c382379eef35d44c9c6c7f2b2ac9be18f10c", "message": "Updating javadoc", "committedDate": "2020-06-17T02:45:16Z", "type": "commit"}, {"oid": "33432b1673cbc2956cd91f2e5a9186e1d0c8bc58", "url": "https://github.com/vmware/singleton/commit/33432b1673cbc2956cd91f2e5a9186e1d0c8bc58", "message": "Fixing bug: Fallback shall apply to both TranslationMessage.getMessage and TranslationMessage.getMessages", "committedDate": "2020-06-17T06:38:14Z", "type": "commit"}, {"oid": "c9d3cae952a2a5d2957b6c9b008dc4dd0ea53ba4", "url": "https://github.com/vmware/singleton/commit/c9d3cae952a2a5d2957b6c9b008dc4dd0ea53ba4", "message": "Adding test for Translateion.getMessages, locale not supported", "committedDate": "2020-06-17T06:51:06Z", "type": "commit"}, {"oid": "adb40eca02003a216df29187d4688206dfed5268", "url": "https://github.com/vmware/singleton/commit/adb40eca02003a216df29187d4688206dfed5268", "message": "code comments", "committedDate": "2020-06-17T07:02:50Z", "type": "commit"}, {"oid": "7ab5c59fb1c97e8b2a826f669b4ca096f34632ca", "url": "https://github.com/vmware/singleton/commit/7ab5c59fb1c97e8b2a826f669b4ca096f34632ca", "message": "code clean up", "committedDate": "2020-06-19T08:28:28Z", "type": "commit"}, {"oid": "3c100893aa6e53535cf703ecfd6bef8f03f12009", "url": "https://github.com/vmware/singleton/commit/3c100893aa6e53535cf703ecfd6bef8f03f12009", "message": "Fix issue: https://github.com/vmware/singleton/issues/622", "committedDate": "2020-06-19T09:48:51Z", "type": "commit"}, {"oid": "76105b7fc941321e7522e429b330b02aab6fb4f9", "url": "https://github.com/vmware/singleton/commit/76105b7fc941321e7522e429b330b02aab6fb4f9", "message": "code clean up", "committedDate": "2020-06-29T20:05:15Z", "type": "commit"}, {"oid": "49c564894f62214104a7d62aa6fe65a33f6c450e", "url": "https://github.com/vmware/singleton/commit/49c564894f62214104a7d62aa6fe65a33f6c450e", "message": "code clean up", "committedDate": "2020-06-29T20:20:06Z", "type": "commit"}, {"oid": "d543e99fa6589c8dff25446f23b381e14bdc293e", "url": "https://github.com/vmware/singleton/commit/d543e99fa6589c8dff25446f23b381e14bdc293e", "message": "code clean up", "committedDate": "2020-06-29T20:26:41Z", "type": "commit"}, {"oid": "3ecf958b199a67032fcc42cec63f5cff8813732f", "url": "https://github.com/vmware/singleton/commit/3ecf958b199a67032fcc42cec63f5cff8813732f", "message": "code clean up", "committedDate": "2020-06-29T20:28:09Z", "type": "commit"}, {"oid": "e6a07a1ce6589b8768f30097bee0c90761cfffc2", "url": "https://github.com/vmware/singleton/commit/e6a07a1ce6589b8768f30097bee0c90761cfffc2", "message": "code clean up", "committedDate": "2020-06-29T20:30:38Z", "type": "commit"}, {"oid": "89ff0889154a93f9069124033acc18e5f1179e48", "url": "https://github.com/vmware/singleton/commit/89ff0889154a93f9069124033acc18e5f1179e48", "message": "code clean up", "committedDate": "2020-06-29T20:31:46Z", "type": "commit"}, {"oid": "f1356abf4b930f054da32a7722f9e4d0d3ff1cb1", "url": "https://github.com/vmware/singleton/commit/f1356abf4b930f054da32a7722f9e4d0d3ff1cb1", "message": "code clean up", "committedDate": "2020-06-29T20:32:47Z", "type": "commit"}, {"oid": "c63bc2d3318e40775f0d10e888226f73a8055180", "url": "https://github.com/vmware/singleton/commit/c63bc2d3318e40775f0d10e888226f73a8055180", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-07-15T23:19:28Z", "type": "commit"}, {"oid": "beab1483a10b248c243fe2c3c6dc63107d8204f2", "url": "https://github.com/vmware/singleton/commit/beab1483a10b248c243fe2c3c6dc63107d8204f2", "message": "Fix for https://github.com/vmware/singleton/issues/661", "committedDate": "2020-07-15T23:26:39Z", "type": "commit"}, {"oid": "2cd77135f8bf23ee5c002cb61b62c5233f7e8700", "url": "https://github.com/vmware/singleton/commit/2cd77135f8bf23ee5c002cb61b62c5233f7e8700", "message": "adding license header", "committedDate": "2020-07-16T16:53:06Z", "type": "commit"}, {"oid": "e13b694a1a12048760e0a8dd3980ddb585c71a9a", "url": "https://github.com/vmware/singleton/commit/e13b694a1a12048760e0a8dd3980ddb585c71a9a", "message": "changes after code review", "committedDate": "2020-07-16T22:43:40Z", "type": "commit"}, {"oid": "f1f70b37b1a34a89d9550dd1fc270d2c63d9ad79", "url": "https://github.com/vmware/singleton/commit/f1f70b37b1a34a89d9550dd1fc270d2c63d9ad79", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalComponentOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-07-20T16:49:34Z", "type": "commit"}, {"oid": "fe535dc2d54452de5ff4b9278eee82c517d296eb", "url": "https://github.com/vmware/singleton/commit/fe535dc2d54452de5ff4b9278eee82c517d296eb", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/service/ProductService.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-07-20T16:57:53Z", "type": "commit"}, {"oid": "0d22b9ff0cee55c40c0e264da3e8d57b959aedf3", "url": "https://github.com/vmware/singleton/commit/0d22b9ff0cee55c40c0e264da3e8d57b959aedf3", "message": "changes after code review", "committedDate": "2020-07-20T17:04:33Z", "type": "commit"}, {"oid": "48707824a91ca35fd409f77bc866da11257100dc", "url": "https://github.com/vmware/singleton/commit/48707824a91ca35fd409f77bc866da11257100dc", "message": "changes after code review", "committedDate": "2020-07-20T20:26:01Z", "type": "commit"}, {"oid": "f451436e3ba3b202fff3c53eab23f9bb82b57eeb", "url": "https://github.com/vmware/singleton/commit/f451436e3ba3b202fff3c53eab23f9bb82b57eeb", "message": "fix for issues: 664, 662, 686", "committedDate": "2020-07-22T22:39:34Z", "type": "commit"}, {"oid": "89d7b0d9e8e8f90037bf46d09ef705ad7cb9389c", "url": "https://github.com/vmware/singleton/commit/89d7b0d9e8e8f90037bf46d09ef705ad7cb9389c", "message": "code clean up", "committedDate": "2020-07-23T21:22:32Z", "type": "commit"}, {"oid": "ec6e6932a4b8770af6030f604dcc32f2b1a619c3", "url": "https://github.com/vmware/singleton/commit/ec6e6932a4b8770af6030f604dcc32f2b1a619c3", "message": "code clean up", "committedDate": "2020-07-24T01:12:24Z", "type": "commit"}, {"oid": "65f1d08c41daa07b08508b98274d86b49f3dc766", "url": "https://github.com/vmware/singleton/commit/65f1d08c41daa07b08508b98274d86b49f3dc766", "message": "Adding LocaleDTO", "committedDate": "2020-07-24T01:16:46Z", "type": "commit"}, {"oid": "60fb3b3e00b77c5f4147709e93fa798f7c0f8961", "url": "https://github.com/vmware/singleton/commit/60fb3b3e00b77c5f4147709e93fa798f7c0f8961", "message": "code clean up", "committedDate": "2020-07-24T19:51:46Z", "type": "commit"}, {"oid": "a698f202047d29cd793d87cd5718b4cb691ed2ec", "url": "https://github.com/vmware/singleton/commit/a698f202047d29cd793d87cd5718b4cb691ed2ec", "message": "code clean up", "committedDate": "2020-07-24T19:55:27Z", "type": "commit"}, {"oid": "eede3b59f72dcf1733a243545f9b3ed189f0911e", "url": "https://github.com/vmware/singleton/commit/eede3b59f72dcf1733a243545f9b3ed189f0911e", "message": "changes after code review", "committedDate": "2020-07-31T02:33:48Z", "type": "commit"}, {"oid": "2dbfc727cd22a8dc3285e92d5de013b9e6949e6f", "url": "https://github.com/vmware/singleton/commit/2dbfc727cd22a8dc3285e92d5de013b9e6949e6f", "message": "Bug fix https://github.com/vmware/singleton/issues/604, https://github.com/vmware/singleton/issues/664, https://github.com/vmware/singleton/issues/662", "committedDate": "2020-08-03T21:47:34Z", "type": "commit"}, {"oid": "e63ab9471832fc0fdc29f948658ebbc29d716fea", "url": "https://github.com/vmware/singleton/commit/e63ab9471832fc0fdc29f948658ebbc29d716fea", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-08-03T21:56:48Z", "type": "commit"}, {"oid": "ae1dccd0a50c6e6e04b88e721346c03c8c6854d2", "url": "https://github.com/vmware/singleton/commit/ae1dccd0a50c6e6e04b88e721346c03c8c6854d2", "message": "code clean up", "committedDate": "2020-08-03T22:02:39Z", "type": "commit"}, {"oid": "6fbaab46f23d88a6aa0aea77ff9c5584cfa22a84", "url": "https://github.com/vmware/singleton/commit/6fbaab46f23d88a6aa0aea77ff9c5584cfa22a84", "message": "Mapping to the fallback locale's cache", "committedDate": "2020-08-05T01:55:27Z", "type": "commit"}, {"oid": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "url": "https://github.com/vmware/singleton/commit/ff99a372495ad5f7c71e1daf39085f0b23389e0f", "message": "code clean up", "committedDate": "2020-08-05T02:23:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjA0MA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r465436040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic synchronized void setCacheItem(String locale, Map<String, String> cachedData, String etag, long timestamp, Long maxAgeMillis) {\n          \n          \n            \n            \tpublic synchronized void setCacheItem(String locale, Map<String, String> dataToCache, String etag, long timestamp, Long maxAgeMillis) {", "author": "Xiaochao8", "createdAt": "2020-08-05T02:32:09Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -14,75 +14,58 @@\n \tpublic MessageCacheItem() {\n \t\t\n \t}\n-\t\n-\tpublic MessageCacheItem (Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n-\t\tsuper();\n-\t\tthis.addCachedData(dataMap);\n-\t\tthis.etag = etag;\n-\t\tthis.timestamp = timestamp;\n-\t\tthis.maxAgeMillis = maxAgeMillis;\n-\t}\n-\t\n-\tpublic MessageCacheItem (Map<String, String> dataMap) {\n-\t\tsuper();\n+\n+\tpublic MessageCacheItem(Map<String, String> dataMap) {\n \t\tif (dataMap != null)\n-\t\t\tthis.addCachedData(dataMap);\n+\t\t\tthis.cachedData.putAll(dataMap);\n \t}\n \t\n-\t\n+\tpublic MessageCacheItem (String locale, Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tthis.setCacheItem(locale, dataMap, etag, timestamp, maxAgeMillis);\n+\t}\n+\n+\tprivate String locale;\n \tprivate String etag;\n \tprivate long timestamp;\n \tprivate Long maxAgeMillis = 86400000l;\n \t\n-\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n-\t\n-\tpublic void addCacheData(String key, String value) {\n-\t\tthis.cachedData.put(key, value);\n-\t}\n-\t\n-\tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n-\t\tif (cachedData != null) \n+\tprivate final Map<String, String> cachedData = new HashMap<>();\n+\n+\tpublic synchronized void setCacheItem(String locale, Map<String, String> cachedData, String etag, long timestamp, Long maxAgeMillis) {", "originalCommit": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "271ee08a424106a9cc38e874fe07c14535bd1d96", "chunk": "diff --git a/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java b/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java\nindex a889f836..85d1e13b 100644\n--- a/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java\n+++ b/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java\n\n@@ -31,9 +31,9 @@ public class MessageCacheItem implements CacheItem {\n \t\n \tprivate final Map<String, String> cachedData = new HashMap<>();\n \n-\tpublic synchronized void setCacheItem(String locale, Map<String, String> cachedData, String etag, long timestamp, Long maxAgeMillis) {\n-\t\tif (cachedData != null)\n-\t\t\tthis.cachedData.putAll(cachedData);\n+\tpublic synchronized void setCacheItem(String locale, Map<String, String> dataToCache, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tif (dataToCache != null)\n+\t\t\tthis.cachedData.putAll(dataToCache);\n \t\tthis.setCacheItem(locale, etag, timestamp, maxAgeMillis);\n \t}\n \tpublic synchronized void setCacheItem(String locale, String etag, long timestamp, Long maxAgeMillis) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTIyOQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r465445229", "bodyText": "Don't need to store time to cache because data from local will never expire.", "author": "Xiaochao8", "createdAt": "2020-08-05T03:08:38Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalMessagesOpt.java", "diffHunk": "@@ -67,9 +67,7 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n \t\t\t\tpath = Paths.get(uri);\n \t\t\t\tmessages = JSONBundleUtil.getMessages(path);\n \t\t\t}\n-\t\t\t\t\n-\t    \tcacheItem.addCachedData(messages);\n-\t    \tcacheItem.setTimestamp(System.currentTimeMillis());\n+\t\t\tcacheItem.setCacheItem(dto.getLocale(), messages, null, System.currentTimeMillis(), null);", "originalCommit": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0ODM3Mg==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r467148372", "bodyText": "Data from local must expire. Use case: If data from local was fetched as a fallback for when Singleton service is temporarily down. In this case, when the cached data from local expires, it should try to fetch from the service again.", "author": "jessiejuachon", "createdAt": "2020-08-07T16:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwNTM4OQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r468305389", "bodyText": "It should be set the time in other place because here is Local Opt, it doesn't need to consider the time.", "author": "Xiaochao8", "createdAt": "2020-08-11T03:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyMjczOA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r468722738", "bodyText": "So where do you recommend to set the time? By the way,  there is nothing about expire time here, only timestamp of when the data was fetched from local bundles. And it has been there before this PR, just combined them into 1 call, so I do not want to make any change about that in this PR.", "author": "jessiejuachon", "createdAt": "2020-08-11T16:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTIyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NjI2Mw==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r465446263", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic boolean isExpired() {\n          \n          \n            \n            \tpublic synchronized boolean isExpired() {", "author": "Xiaochao8", "createdAt": "2020-08-05T03:12:38Z", "path": "src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java", "diffHunk": "@@ -14,75 +14,58 @@\n \tpublic MessageCacheItem() {\n \t\t\n \t}\n-\t\n-\tpublic MessageCacheItem (Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n-\t\tsuper();\n-\t\tthis.addCachedData(dataMap);\n-\t\tthis.etag = etag;\n-\t\tthis.timestamp = timestamp;\n-\t\tthis.maxAgeMillis = maxAgeMillis;\n-\t}\n-\t\n-\tpublic MessageCacheItem (Map<String, String> dataMap) {\n-\t\tsuper();\n+\n+\tpublic MessageCacheItem(Map<String, String> dataMap) {\n \t\tif (dataMap != null)\n-\t\t\tthis.addCachedData(dataMap);\n+\t\t\tthis.cachedData.putAll(dataMap);\n \t}\n \t\n-\t\n+\tpublic MessageCacheItem (String locale, Map<String, String> dataMap, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tthis.setCacheItem(locale, dataMap, etag, timestamp, maxAgeMillis);\n+\t}\n+\n+\tprivate String locale;\n \tprivate String etag;\n \tprivate long timestamp;\n \tprivate Long maxAgeMillis = 86400000l;\n \t\n-\tprivate final Map<String, String> cachedData = new HashMap<String, String>();\n-\t\n-\tpublic void addCacheData(String key, String value) {\n-\t\tthis.cachedData.put(key, value);\n-\t}\n-\t\n-\tpublic synchronized void addCachedData(Map<String, String> cachedData) {\n-\t\tif (cachedData != null) \n+\tprivate final Map<String, String> cachedData = new HashMap<>();\n+\n+\tpublic synchronized void setCacheItem(String locale, Map<String, String> cachedData, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tif (cachedData != null)\n \t\t\tthis.cachedData.putAll(cachedData);\n+\t\tthis.setCacheItem(locale, etag, timestamp, maxAgeMillis);\n \t}\n-\t\n+\tpublic synchronized void setCacheItem(String locale, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tthis.locale = locale;\n+\t\tif (etag != null && !etag.isEmpty())\n+\t\t\tthis.etag = etag;\n+\t\tthis.timestamp = timestamp;\n+\t\tif (maxAgeMillis != null)\n+\t\t\tthis.maxAgeMillis = maxAgeMillis;\n+\t}\n+\n \tpublic synchronized void setCacheItem (MessageCacheItem cacheItem) {\n-\t\t// Do not update cacheItem if timestamp is earlier than current. \n-\t\t// An older timestamp comes from an old thread that was blocked.\n-\t\tif (cacheItem.getTimestamp() < this.timestamp) \n-\t\t\treturn;\n-\t\tthis.addCachedData(cacheItem.getCachedData());\n-\t\tthis.etag = cacheItem.etag;\n-\t\tthis.timestamp = cacheItem.timestamp;\n-\t\tthis.maxAgeMillis = cacheItem.maxAgeMillis;\n+\t\tthis.setCacheItem(cacheItem.getLocale(), cacheItem.getCachedData(), cacheItem.getEtag(), cacheItem.getTimestamp(), cacheItem.getMaxAgeMillis());\n \t}\n \t\t\n-\tpublic synchronized String getEtag() {\n+\tpublic String getEtag() {\n \t\treturn etag;\n \t}\n \n-\tpublic synchronized void setEtag(String etag) {\n-\t\tthis.etag = etag;\n-\t}\n-\n-\tpublic synchronized long getTimestamp() {\n+\tpublic long getTimestamp() {\n \t\treturn timestamp;\n \t}\n-\n-\tpublic synchronized void setTimestamp(long timestamp) {\n-\t\tthis.timestamp = timestamp;\n-\t}\n     \n     public Map<String, String> getCachedData() {\n \t\treturn cachedData;\n \t}\n \n-\tpublic synchronized Long getMaxAgeMillis() {\n+\tpublic Long getMaxAgeMillis() {\n \t\treturn maxAgeMillis;\n \t}\n \n-\tpublic synchronized void setMaxAgeMillis(Long maxAgeMillis) {\n-\t\tthis.maxAgeMillis = maxAgeMillis;\n-\t}\n+\tpublic String getLocale() { return locale; }\n \n \tpublic boolean isExpired() {", "originalCommit": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "271ee08a424106a9cc38e874fe07c14535bd1d96", "chunk": "diff --git a/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java b/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java\nindex a889f836..85d1e13b 100644\n--- a/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java\n+++ b/src/main/java/com/vmware/vipclient/i18n/base/cache/MessageCacheItem.java\n\n@@ -31,9 +31,9 @@ public class MessageCacheItem implements CacheItem {\n \t\n \tprivate final Map<String, String> cachedData = new HashMap<>();\n \n-\tpublic synchronized void setCacheItem(String locale, Map<String, String> cachedData, String etag, long timestamp, Long maxAgeMillis) {\n-\t\tif (cachedData != null)\n-\t\t\tthis.cachedData.putAll(cachedData);\n+\tpublic synchronized void setCacheItem(String locale, Map<String, String> dataToCache, String etag, long timestamp, Long maxAgeMillis) {\n+\t\tif (dataToCache != null)\n+\t\t\tthis.cachedData.putAll(dataToCache);\n \t\tthis.setCacheItem(locale, etag, timestamp, maxAgeMillis);\n \t}\n \tpublic synchronized void setCacheItem(String locale, String etag, long timestamp, Long maxAgeMillis) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0Njg4MA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r465446880", "bodyText": "If it fails, still store these into cache?", "author": "Xiaochao8", "createdAt": "2020-08-05T03:15:15Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/api/opt/server/ComponentBasedOpt.java", "diffHunk": "@@ -52,33 +50,32 @@ public void getComponentMessages(MessageCacheItem cacheItem) {\n         \n         if (responseCode != null && (responseCode.equals(HttpURLConnection.HTTP_OK) || \n         \t\tresponseCode.equals(HttpURLConnection.HTTP_NOT_MODIFIED))) {\n-        \t\n-        \t// If already in cache (timestamp > 0), always extend the timestamp.\n-        \tif (cacheItem.getTimestamp() != 0 && response.get(URLUtils.RESPONSE_TIMESTAMP) != null)\n-\t        \tcacheItem.setTimestamp((long) response.get(URLUtils.RESPONSE_TIMESTAMP) );\n+        \tlong timestamp = 0;\n+        \tString etag = null;\n+        \tLong maxAgeMillis = null;\n+\n+        \tif (response.get(URLUtils.RESPONSE_TIMESTAMP) != null)\n+        \t    timestamp = (long) response.get(URLUtils.RESPONSE_TIMESTAMP);\n         \tif (response.get(URLUtils.HEADERS) != null)\n-\t        \tcacheItem.setEtag(URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS)));\n+        \t    etag = URLUtils.createEtagString((Map<String, List<String>>) response.get(URLUtils.HEADERS));\n \t        if (response.get(URLUtils.MAX_AGE_MILLIS) != null)\n-\t        \tcacheItem.setMaxAgeMillis((Long) response.get(URLUtils.MAX_AGE_MILLIS));\n-\t\t\t      \n+                maxAgeMillis = (Long) response.get(URLUtils.MAX_AGE_MILLIS);\n+\n \t        if (responseCode.equals(HttpURLConnection.HTTP_OK)) {\n \t\t        JSONObject respObj = (JSONObject) JSONValue.parse((String) response.get(URLUtils.BODY));\n \t\t        try {\n-\t        \t\tif (getResponseCode(respObj) == 200){ \n-\t        \t\t\t// If not yet in cache (timestamp = 0), store the timestamp only when successful (business code 200).\n-\t        \t\t\tif (cacheItem.getTimestamp() == 0 && response.get(URLUtils.RESPONSE_TIMESTAMP) != null) {\n-\t        \t\t\t\tcacheItem.setTimestamp((long) response.get(URLUtils.RESPONSE_TIMESTAMP) );\n-\t        \t\t\t}\n+\t        \t\tif (getResponseCode(respObj) == 200) {\n \t\t\t\t        Map<String,String> messages = this.getMsgsJson(response);\n \t\t\t\t        if (messages != null) {\n-\t\t\t\t        \tcacheItem.addCachedData(messages);\n+\t\t\t\t        \tcacheItem.setCacheItem(this.dto.getLocale(), messages, etag, timestamp, maxAgeMillis);\n \t\t\t\t        }\n         \t\t\t}\n \t        \t} catch (Exception e) {\n \t        \t\tlogger.error(\"Failed to get messages\");\n \t        \t}\n-\t        }\n-\n+\t        } else {\n+                cacheItem.setCacheItem(this.dto.getLocale(), etag, timestamp, maxAgeMillis);", "originalCommit": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE0OTkzNQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r467149935", "bodyText": "The else is not for when it fails. It is for when status is 304 (HTTP_NOT_MODIFIED). See lines 51-52.", "author": "jessiejuachon", "createdAt": "2020-08-07T16:39:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0Njg4MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NzY4Mg==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r465447682", "bodyText": "Here the etag is for all the components instead of a single component. so it's a wrong etag.", "author": "Xiaochao8", "createdAt": "2020-08-05T03:18:43Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java", "diffHunk": "@@ -96,7 +96,7 @@ public ComponentsService(final VIPCfg config) {\n             final MessagesDTO dto = new MessagesDTO();\n             dto.setComponent(comp);\n             dto.setLocale(locale);\n-            new CacheService(dto).addCacheOfComponent(new MessageCacheItem(messages, cacheItem.getEtag(), \n+            new CacheService(dto).addCacheOfComponent(new MessageCacheItem(locale, messages, cacheItem.getEtag(),", "originalCommit": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MTI5MA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r467151290", "bodyText": "Right! Good catch. I'll set the etag to null for this one for now.\n#646", "author": "jessiejuachon", "createdAt": "2020-08-07T16:42:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NzY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "271ee08a424106a9cc38e874fe07c14535bd1d96", "chunk": "diff --git a/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java b/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java\nindex aba1497b..1716122b 100644\n--- a/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java\n+++ b/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentsService.java\n\n@@ -96,7 +96,7 @@ public class ComponentsService {\n             final MessagesDTO dto = new MessagesDTO();\n             dto.setComponent(comp);\n             dto.setLocale(locale);\n-            new CacheService(dto).addCacheOfComponent(new MessageCacheItem(locale, messages, cacheItem.getEtag(),\n+            new CacheService(dto).addCacheOfComponent(new MessageCacheItem(locale, messages, null,\n             \t\tcacheItem.getTimestamp(), cacheItem.getMaxAgeMillis()));\n \n             // update map to return.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r465548960", "bodyText": "For some reasons, the requested locale failed last time. We still need to try the requested locale first, then fallback to default locale if failure.", "author": "Xiaochao8", "createdAt": "2020-08-05T08:07:11Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -125,12 +125,19 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n \tprivate void populateCacheTask(MessageCacheItem cacheItem) {\n \t\tCallable<MessageCacheItem> callable = () -> {\n     \t\ttry {\n-    \t\t\t// Pass cacheItem to getMessages so that:\n-\t\t\t\t// 1. A previously stored etag, if any, can be used for the next HTTP request.\n-\t\t\t\t// 2. CacheItem properties such as etag, timestamp and maxAgeMillis can be refreshed \n-\t\t\t\t// \t with new properties from the next HTTP response.\n-\t\t\t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().listIterator());\n-    \t\t\treturn cacheItem;\n+    \t\t\t/* Pass cacheItem to fetchMessages so that:\n+\t\t\t\t\t1. A previously stored etag, if any, can be used for the next HTTP request.\n+\t\t\t\t\t2. CacheItem properties such as etag, timestamp and maxAgeMillis can be refreshed\n+\t\t\t\t\t\twith new values from the next HTTP response.\n+\t\t\t\t*/\n+\t\t\t\tString cacheItemLocale = cacheItem.getLocale();\n+    \t\t\tif (cacheItemLocale.equals(this.dto.getLocale())) {\n+\t\t\t\t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().listIterator());\n+\t\t\t\t} else {  //If cacheItem's locale is not the requested locale, it means it is for a fallback locale. Hence, refresh the appropriate fallback locale's cache\n+\t\t\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), cacheItemLocale, dto.getProductID(), dto.getVersion());\n+\t\t\t\t\tnew ComponentService(fallbackLocaleDTO).fetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().listIterator());", "originalCommit": "ff99a372495ad5f7c71e1daf39085f0b23389e0f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1NDM0NQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r467154345", "bodyText": "I will update line 103 with this: if (cacheItem.isExpired() || !cacheItem.getLocale().equals(this.dto.getLocale())). It should resolve the issue.", "author": "jessiejuachon", "createdAt": "2020-08-07T16:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwNTk5Nw==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r468305997", "bodyText": "I'm afraid it can't. If one locale gets the default locale's messages, it will always get the default locale's messages. It's wrong.", "author": "Xiaochao8", "createdAt": "2020-08-11T03:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzODcwNA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r468938704", "bodyText": "Right! My mistake. See the changes please", "author": "jessiejuachon", "createdAt": "2020-08-12T00:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMyOTE4NA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469329184", "bodyText": "I mean that the requested locale fails not because locale isn't supported but other reasons such as network error. So next time to update cache, still need to get the requested locale first.", "author": "Xiaochao8", "createdAt": "2020-08-12T15:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM5Mjg4OA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469392888", "bodyText": "Yes, that is what is happening as I explained to Huihui.\nIn line 110, if the cache contains the fallback locale and not the requested locale, it will always try to fetch the requested locale first (line 113) and try to assign that to the requested locales cache key (line 116). Only if it fails again will it point to the fallback locale\u2019s cacheItem again (line 122).\npopulateCacheTask only refreshes the content of the object that is already in the cache (e.g. either the target or fallback locale cacheItem), but it will not change the mapping of the object to the cache key/s. So this line you commented on will not affect the existing mapping/s of the object to cache key/s. It will just update the contents (the insides) of cacheItem object itself.\nIf you still do not get it, let's connect over Zoom", "author": "jessiejuachon", "createdAt": "2020-08-12T16:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0Nzg1OQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469547859", "bodyText": "I have also updated the code to make it easier to understand, but same logic.", "author": "jessiejuachon", "createdAt": "2020-08-12T21:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0ODk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "230e21c5857baa6e9c82d7e935108a9376673c0d", "chunk": "diff --git a/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java b/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java\nindex 276327cc..4ed7939f 100644\n--- a/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java\n+++ b/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java\n\n@@ -121,7 +125,7 @@ public class ComponentService {\n     \t}\n     \treturn cacheItem;\n     }\n-    \n+\n \tprivate void populateCacheTask(MessageCacheItem cacheItem) {\n \t\tCallable<MessageCacheItem> callable = () -> {\n     \t\ttry {\n"}}, {"oid": "271ee08a424106a9cc38e874fe07c14535bd1d96", "url": "https://github.com/vmware/singleton/commit/271ee08a424106a9cc38e874fe07c14535bd1d96", "message": "changes after code review", "committedDate": "2020-08-07T16:58:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NDQ0NA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r468474444", "bodyText": "With this condition !cacheItem.getLocale().equals(this.dto.getLocale()),\ncache default locale's content for requested locale may not take effect, because they never be equal.", "author": "huihuiw01", "createdAt": "2020-08-11T10:15:55Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -99,7 +99,8 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tMessageCacheItem cacheItem = null;\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n-    \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n+\t\t\t// If the cacheItem is either expired or for a fallback locale\n+    \t\tif (cacheItem.isExpired() || !cacheItem.getLocale().equals(this.dto.getLocale())) {", "originalCommit": "271ee08a424106a9cc38e874fe07c14535bd1d96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "230e21c5857baa6e9c82d7e935108a9376673c0d", "chunk": "diff --git a/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java b/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java\nindex 348707eb..4ed7939f 100644\n--- a/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java\n+++ b/src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java\n\n@@ -100,11 +100,14 @@ public class ComponentService {\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n \t\t\t// If the cacheItem is either expired or for a fallback locale\n-    \t\tif (cacheItem.isExpired() || !cacheItem.getLocale().equals(this.dto.getLocale())) {\n+    \t\tif (cacheItem.isExpired()) {\n     \t\t\t// Update the cache in a separate thread\n     \t\t\tpopulateCacheTask(cacheItem);\n     \t\t}\n-    \t} else { // Item is not in cache\n+    \t}\n+    \t// Item is not in cache OR item in cache is for a fallback locale\n+    \tif (!cacheService.isContainComponent() ||\n+\t\t\t\t(cacheService.isContainComponent() && !LocaleUtility.isSameLocale(cacheService.getCacheOfComponent().getLocale(), this.dto.getLocale()))) {\n     \t\t// Create a new cacheItem object to be stored in cache\n     \t\tcacheItem = new MessageCacheItem();\n     \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n"}}, {"oid": "230e21c5857baa6e9c82d7e935108a9376673c0d", "url": "https://github.com/vmware/singleton/commit/230e21c5857baa6e9c82d7e935108a9376673c0d", "message": "code clean up", "committedDate": "2020-08-12T00:31:47Z", "type": "commit"}, {"oid": "55764a7c6a54cc60d0290482df7cb38824754e71", "url": "https://github.com/vmware/singleton/commit/55764a7c6a54cc60d0290482df7cb38824754e71", "message": "code clean up", "committedDate": "2020-08-12T21:05:25Z", "type": "commit"}, {"oid": "e9214cb0589f8ff416af75882ed86dfb3b627c07", "url": "https://github.com/vmware/singleton/commit/e9214cb0589f8ff416af75882ed86dfb3b627c07", "message": "code clean up", "committedDate": "2020-08-12T21:47:49Z", "type": "commit"}, {"oid": "beaa5ef4ad2c3303215dd7640d10a28591778f91", "url": "https://github.com/vmware/singleton/commit/beaa5ef4ad2c3303215dd7640d10a28591778f91", "message": "code clean up", "committedDate": "2020-08-12T22:01:25Z", "type": "commit"}, {"oid": "673b8fd1b44f9bc38fa3f4b366d702230dc3e1c7", "url": "https://github.com/vmware/singleton/commit/673b8fd1b44f9bc38fa3f4b366d702230dc3e1c7", "message": "code clean up", "committedDate": "2020-08-12T22:10:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MzU1MA==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469663550", "bodyText": "How about moving this into above if block so it doesn't fetch every time.", "author": "Xiaochao8", "createdAt": "2020-08-13T02:41:39Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -100,44 +106,78 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n-    \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem);\n+    \t\t\t// Refresh the cacheItem in a separate thread\n+    \t\t\trefreshCacheItemTask(cacheItem);\n     \t\t}\n-    \t} else { // Item is not in cache\n-    \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();\n-    \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-\n-\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t} else if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter!=null && fallbackLocalesIter.hasNext()) {\n-    \t\t\t// If failed to fetch message, use MessageCacheItem of the next fallback locale.\n-\t\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\n-\t\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t\t}\n+\t\t\t// If the cacheItem is for a fallback locale, create and store cacheItem for the requested locale in a separate thread.\n+    \t\tif (!LocaleUtility.isSameLocale(cacheItem.getLocale(), this.dto.getLocale())) {\n+\t\t\t\tthis.createCacheItemTask(fallbackLocalesIter);\n \t\t\t}", "originalCommit": "673b8fd1b44f9bc38fa3f4b366d702230dc3e1c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwMzE3Ng==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469703176", "bodyText": "We actually want to always try to fetch for the requested locale every time in a separate thread, not just when the cacheItem has expired. This is because if the cacheItem is for a fallback locale, any other call for a non-supported locale can trigger a refresh of the fallback locale's cacheItem. If that happens, the requested locale may not satisfy the if(cacheItem.isExpired() because the fallback locale has been refreshed by some other request. In this case, we still want to try and fetch the data for the requested locale.", "author": "jessiejuachon", "createdAt": "2020-08-13T05:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY2MzU1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MjIwNw==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469672207", "bodyText": "Need to judge if current fallback locale is same as the locale in DTO. If same, should skip it.", "author": "Xiaochao8", "createdAt": "2020-08-13T03:16:48Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -100,44 +106,78 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n-    \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem);\n+    \t\t\t// Refresh the cacheItem in a separate thread\n+    \t\t\trefreshCacheItemTask(cacheItem);\n     \t\t}\n-    \t} else { // Item is not in cache\n-    \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();\n-    \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-\n-\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t} else if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter!=null && fallbackLocalesIter.hasNext()) {\n-    \t\t\t// If failed to fetch message, use MessageCacheItem of the next fallback locale.\n-\t\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\n-\t\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t\t}\n+\t\t\t// If the cacheItem is for a fallback locale, create and store cacheItem for the requested locale in a separate thread.\n+    \t\tif (!LocaleUtility.isSameLocale(cacheItem.getLocale(), this.dto.getLocale())) {\n+\t\t\t\tthis.createCacheItemTask(fallbackLocalesIter);\n \t\t\t}\n+    \t} else { // Item is not in cache. Create and store cacheItem for the requested locale\n+    \t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n-    \n-\tprivate void populateCacheTask(MessageCacheItem cacheItem) {\n+\n+\t/**\n+\t * Creates a new MessageCacheItem for the DTO and stores it in cache.\n+\t *\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure.\n+\t *\n+\t */\n+    private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n+\t\tCacheService cacheService = new CacheService(dto);\n+\t\t// Create a new cacheItem object to be stored in cache\n+\t\tMessageCacheItem cacheItem = new MessageCacheItem();\n+\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+\n+\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\tcacheService.addCacheOfComponent(cacheItem);\n+\t\t} else if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter!=null && fallbackLocalesIter.hasNext()) {\n+\t\t\t// If failed to fetch message for the requetsed DTO, use MessageCacheItem of the next fallback locale.", "originalCommit": "673b8fd1b44f9bc38fa3f4b366d702230dc3e1c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwNjkwNQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469706905", "bodyText": "If you follow the recursive logic, the locale in the dto will be the previous locale in the fallback locale queue.", "author": "jessiejuachon", "createdAt": "2020-08-13T05:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MjIwNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MzE4Ng==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469673186", "bodyText": "It seems here has a recursive call: getMessages(Iterator fallbackLocalesIter)  -> createCacheItem(Iterator fallbackLocalesIter)  -> new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter)\nIn my opinion, the hierarchical relation between methods are not clear.", "author": "Xiaochao8", "createdAt": "2020-08-13T03:20:52Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -100,44 +106,78 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n-    \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem);\n+    \t\t\t// Refresh the cacheItem in a separate thread\n+    \t\t\trefreshCacheItemTask(cacheItem);\n     \t\t}\n-    \t} else { // Item is not in cache\n-    \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();\n-    \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-\n-\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t} else if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter!=null && fallbackLocalesIter.hasNext()) {\n-    \t\t\t// If failed to fetch message, use MessageCacheItem of the next fallback locale.\n-\t\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\n-\t\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t\t}\n+\t\t\t// If the cacheItem is for a fallback locale, create and store cacheItem for the requested locale in a separate thread.\n+    \t\tif (!LocaleUtility.isSameLocale(cacheItem.getLocale(), this.dto.getLocale())) {\n+\t\t\t\tthis.createCacheItemTask(fallbackLocalesIter);\n \t\t\t}\n+    \t} else { // Item is not in cache. Create and store cacheItem for the requested locale\n+    \t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n-    \n-\tprivate void populateCacheTask(MessageCacheItem cacheItem) {\n+\n+\t/**\n+\t * Creates a new MessageCacheItem for the DTO and stores it in cache.\n+\t *\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure.\n+\t *\n+\t */\n+    private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {", "originalCommit": "673b8fd1b44f9bc38fa3f4b366d702230dc3e1c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMzEyOQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r469723129", "bodyText": "Here only use the first fallback locale in the fallback locale chain, doesn't go through the whole fallback locale chain.", "author": "huihuiw01", "createdAt": "2020-08-13T06:24:34Z", "path": "src/main/java/com/vmware/vipclient/i18n/messages/service/ComponentService.java", "diffHunk": "@@ -100,44 +106,78 @@ public MessageCacheItem getMessages(Iterator<Locale> fallbackLocalesIter) {\n     \tif (cacheService.isContainComponent()) { // Item is in cache\n     \t\tcacheItem = cacheService.getCacheOfComponent();\n     \t\tif (cacheItem.isExpired()) { // cacheItem has expired\n-    \t\t\t// Update the cache in a separate thread\n-    \t\t\tpopulateCacheTask(cacheItem);\n+    \t\t\t// Refresh the cacheItem in a separate thread\n+    \t\t\trefreshCacheItemTask(cacheItem);\n     \t\t}\n-    \t} else { // Item is not in cache\n-    \t\t// Create a new cacheItem object to be stored in cache\n-    \t\tcacheItem = new MessageCacheItem();\n-    \t\tfetchMessages(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n-\n-\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t} else if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter!=null && fallbackLocalesIter.hasNext()) {\n-    \t\t\t// If failed to fetch message, use MessageCacheItem of the next fallback locale.\n-\t\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\n-\t\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\n-\t\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n-\t\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n-\t\t\t\t}\n+\t\t\t// If the cacheItem is for a fallback locale, create and store cacheItem for the requested locale in a separate thread.\n+    \t\tif (!LocaleUtility.isSameLocale(cacheItem.getLocale(), this.dto.getLocale())) {\n+\t\t\t\tthis.createCacheItemTask(fallbackLocalesIter);\n \t\t\t}\n+    \t} else { // Item is not in cache. Create and store cacheItem for the requested locale\n+    \t\tcacheItem = createCacheItem(fallbackLocalesIter);\n     \t}\n     \treturn cacheItem;\n     }\n-    \n-\tprivate void populateCacheTask(MessageCacheItem cacheItem) {\n+\n+\t/**\n+\t * Creates a new MessageCacheItem for the DTO and stores it in cache.\n+\t *\n+\t * @param fallbackLocalesIter The fallback locale queue to use in case of failure.\n+\t *\n+\t */\n+    private MessageCacheItem createCacheItem(Iterator<Locale> fallbackLocalesIter) {\n+\t\tCacheService cacheService = new CacheService(dto);\n+\t\t// Create a new cacheItem object to be stored in cache\n+\t\tMessageCacheItem cacheItem = new MessageCacheItem();\n+\t\trefreshCacheItem(cacheItem, VIPCfg.getInstance().getMsgOriginsQueue().iterator());\n+\n+\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\tcacheService.addCacheOfComponent(cacheItem);\n+\t\t} else if (!dto.getLocale().equals(ConstantsKeys.SOURCE) && fallbackLocalesIter!=null && fallbackLocalesIter.hasNext()) {\n+\t\t\t// If failed to fetch message for the requetsed DTO, use MessageCacheItem of the next fallback locale.\n+\t\t\tMessagesDTO fallbackLocaleDTO = new MessagesDTO(dto.getComponent(), fallbackLocalesIter.next().toLanguageTag(), dto.getProductID(), dto.getVersion());\n+\t\t\tcacheItem = new ComponentService(fallbackLocaleDTO).getMessages(fallbackLocalesIter);\n+\t\t\tif (!cacheItem.getCachedData().isEmpty()) {\n+\t\t\t\tcacheService.addCacheOfComponent(cacheItem);\n+\t\t\t}", "originalCommit": "673b8fd1b44f9bc38fa3f4b366d702230dc3e1c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NzU2OQ==", "url": "https://github.com/vmware/singleton/pull/699#discussion_r470047569", "bodyText": "It actually does go through the whole cahin/queue. In line 138, you see fallbackLocalesIter.next(). By calling .next(), the current pointer of fallbackLocalesIter moves to the next item in the queue. When you pass fallbackLocalesIter to ComponentService.getMessages() in line139, the iterator holds the correct place (current pointer) in the queue.", "author": "jessiejuachon", "createdAt": "2020-08-13T15:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyMzEyOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f4c12147f958c5014b8e47959cf216a9db1d380d", "url": "https://github.com/vmware/singleton/commit/f4c12147f958c5014b8e47959cf216a9db1d380d", "message": "Loading configuration from the JSON configuration file", "committedDate": "2020-03-11T00:00:20Z", "type": "commit"}, {"oid": "1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "url": "https://github.com/vmware/singleton/commit/1a4d95ef79fc9f4d3a4d2fab03633ab88bcea1e1", "message": "Removing code that is not yet ready to be used from the sample application", "committedDate": "2020-03-11T00:54:17Z", "type": "commit"}, {"oid": "5e72b73b497563607e5031d5afa322caffd03fca", "url": "https://github.com/vmware/singleton/commit/5e72b73b497563607e5031d5afa322caffd03fca", "message": "fixing failing code scan\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68NFL24bPpi-pS5s&open=AXDG68NFL24bPpi-pS5s\nhttps://sonarcloud.io/project/issues?id=jessiejuachon-java-client-g11n-java-client&issues=AXDG68IGL24bPpi-pS2r&open=AXDG68IGL24bPpi-pS2r\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-03-11T22:01:24Z", "type": "commit"}, {"oid": "73d85ca7fca1290a93558fd937afd18dc27e92d6", "url": "https://github.com/vmware/singleton/commit/73d85ca7fca1290a93558fd937afd18dc27e92d6", "message": "Adding a cache properties map to hold cache details such as etag and cache control", "committedDate": "2020-03-12T07:58:55Z", "type": "commit"}, {"oid": "2a381070ef1e057fda0b08ca5d65323482273a86", "url": "https://github.com/vmware/singleton/commit/2a381070ef1e057fda0b08ca5d65323482273a86", "message": "Removing white space\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-03-12T08:09:09Z", "type": "commit"}, {"oid": "c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "url": "https://github.com/vmware/singleton/commit/c7f5d4f4f741152c0d908c1cd91df60ac1ccc63a", "message": "Fixing failing unit test", "committedDate": "2020-03-12T09:09:08Z", "type": "commit"}, {"oid": "056891a79856058bf9af28c44110f588e61eeefc", "url": "https://github.com/vmware/singleton/commit/056891a79856058bf9af28c44110f588e61eeefc", "message": "Parse headers, response code, response message from an HTTP response and return them upstream.", "committedDate": "2020-03-12T22:59:17Z", "type": "commit"}, {"oid": "a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "url": "https://github.com/vmware/singleton/commit/a2ba98bd3fbf4ac69a74b1237b5e4db2f92c71cf", "message": "Storing response headers in Map of cache properties", "committedDate": "2020-03-17T19:30:18Z", "type": "commit"}, {"oid": "17978bd621bc7ee7de27205534568fee986b1d0b", "url": "https://github.com/vmware/singleton/commit/17978bd621bc7ee7de27205534568fee986b1d0b", "message": "Fixing failing unit test due to NullPointerException when doing Map.putAll(null)", "committedDate": "2020-03-17T22:50:12Z", "type": "commit"}, {"oid": "6c691708a3b9b0a891622a7a96d3d979ff3cb807", "url": "https://github.com/vmware/singleton/commit/6c691708a3b9b0a891622a7a96d3d979ff3cb807", "message": "Changes after code review.", "committedDate": "2020-03-17T23:41:27Z", "type": "commit"}, {"oid": "41a8aa1c4afd56cc1042939892a22dbca64adc1d", "url": "https://github.com/vmware/singleton/commit/41a8aa1c4afd56cc1042939892a22dbca64adc1d", "message": "Removing exception handling for now", "committedDate": "2020-03-18T22:09:37Z", "type": "commit"}, {"oid": "dd2455d5e68187dd4061b9c71ccd2799480d3d85", "url": "https://github.com/vmware/singleton/commit/dd2455d5e68187dd4061b9c71ccd2799480d3d85", "message": "Deprecating VIPCfg.initialize; cleaning up code", "committedDate": "2020-03-19T16:43:36Z", "type": "commit"}, {"oid": "e26d372496ced19785a48b187e3bcdb1c1442ba1", "url": "https://github.com/vmware/singleton/commit/e26d372496ced19785a48b187e3bcdb1c1442ba1", "message": "Storing the http response code in the cache", "committedDate": "2020-03-20T15:45:46Z", "type": "commit"}, {"oid": "01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "url": "https://github.com/vmware/singleton/commit/01ab69ee53d5f6f534effc7632ec4324cbe7f4ca", "message": "Using cached etag as if-none-match request header value in the request in order to get a 304 NOT MODIFIED http response", "committedDate": "2020-03-25T20:11:07Z", "type": "commit"}, {"oid": "750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "url": "https://github.com/vmware/singleton/commit/750c9d2e6ce8f0ee81c505e8d2e61dfc23871258", "message": "Handling 404 response from Singleton service", "committedDate": "2020-03-26T04:04:49Z", "type": "commit"}, {"oid": "529e5cc756460c5314a09a015caad7f4d26482d9", "url": "https://github.com/vmware/singleton/commit/529e5cc756460c5314a09a015caad7f4d26482d9", "message": "Using HTTP repsonse's Cache-Control max-age and timestamp to dertermine if component locale's cache has expired", "committedDate": "2020-03-26T23:38:04Z", "type": "commit"}, {"oid": "b40fcf9dc23a01cc336b67e7eddea16d85be9817", "url": "https://github.com/vmware/singleton/commit/b40fcf9dc23a01cc336b67e7eddea16d85be9817", "message": "Moving constants to URLUtils", "committedDate": "2020-03-26T23:49:56Z", "type": "commit"}, {"oid": "fa123f9a1bee0d349ab6c36384288c99e865fb99", "url": "https://github.com/vmware/singleton/commit/fa123f9a1bee0d349ab6c36384288c99e865fb99", "message": "Fixing failing test", "committedDate": "2020-03-27T00:07:11Z", "type": "commit"}, {"oid": "30b2054bc21a61ecdcecbb74f5a97b7af714682f", "url": "https://github.com/vmware/singleton/commit/30b2054bc21a61ecdcecbb74f5a97b7af714682f", "message": "Fixing failing code scan", "committedDate": "2020-03-27T02:47:23Z", "type": "commit"}, {"oid": "0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "url": "https://github.com/vmware/singleton/commit/0c6978715a6e3856cb9a4e9610ca55ac6bcb1085", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-03-27T06:47:07Z", "type": "commit"}, {"oid": "ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "url": "https://github.com/vmware/singleton/commit/ffc0a7468bb258fcc9f498f9a5a51de8f273265d", "message": "Cleaning up import in ComponentService,java", "committedDate": "2020-03-30T00:29:34Z", "type": "commit"}, {"oid": "d8450e444632e849f020704d65106fed11417b0a", "url": "https://github.com/vmware/singleton/commit/d8450e444632e849f020704d65106fed11417b0a", "message": "Cleaning up code - caching/expiry", "committedDate": "2020-03-30T03:03:20Z", "type": "commit"}, {"oid": "d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "url": "https://github.com/vmware/singleton/commit/d7f76412d6a2aa6f263c2390cb7ec471d5d2d5e9", "message": "Merge branch 'g11n-java-client' of https://github.com/jessiejuachon/singleton into g11n-java-client", "committedDate": "2020-03-30T03:04:44Z", "type": "commit"}, {"oid": "0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "url": "https://github.com/vmware/singleton/commit/0dcd827a1d49e9639f0a8249f8225f9b9db5e3a9", "message": "Adding tests for new caching workflow; enabling old caching workflow using cacheExpiredTime config", "committedDate": "2020-03-31T02:51:56Z", "type": "commit"}, {"oid": "d06adb3ac3d456f897882ee1af237d29c7f03967", "url": "https://github.com/vmware/singleton/commit/d06adb3ac3d456f897882ee1af237d29c7f03967", "message": "Fixing a failing test", "committedDate": "2020-03-31T03:16:31Z", "type": "commit"}, {"oid": "48c855873e5585f19152290738e4dbf6f0180b06", "url": "https://github.com/vmware/singleton/commit/48c855873e5585f19152290738e4dbf6f0180b06", "message": "Adding mock server response", "committedDate": "2020-03-31T05:37:28Z", "type": "commit"}, {"oid": "4e45bedd128d76023c8089f9194069ea0bf30f6a", "url": "https://github.com/vmware/singleton/commit/4e45bedd128d76023c8089f9194069ea0bf30f6a", "message": "Removing unused file sampleconfig.json", "committedDate": "2020-03-31T18:55:50Z", "type": "commit"}, {"oid": "6a40dc87413ed76788fc60332b91741137d5e829", "url": "https://github.com/vmware/singleton/commit/6a40dc87413ed76788fc60332b91741137d5e829", "message": "Changes from code review", "committedDate": "2020-03-31T21:46:03Z", "type": "commit"}, {"oid": "4c3c12d4549eac93be3481db3309dea80c6a9e6c", "url": "https://github.com/vmware/singleton/commit/4c3c12d4549eac93be3481db3309dea80c6a9e6c", "message": "Value of VIPCfg.cacheExpiredTime is -1 when value is not set in config file. This means max age from server will be used. Setting VIPCfg.cacheExpiredTime to 0 disables caching.", "committedDate": "2020-03-31T23:34:51Z", "type": "commit"}, {"oid": "7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "url": "https://github.com/vmware/singleton/commit/7e0d9392a1b6988cc2e3347d07a1bab7696b82c2", "message": "Changing a LinkedHashMap to a HashMap because insertion order does not need to be maintained.", "committedDate": "2020-04-02T17:10:51Z", "type": "commit"}, {"oid": "baef0d06f0facd4fe2383185dc1b7979bba186a7", "url": "https://github.com/vmware/singleton/commit/baef0d06f0facd4fe2383185dc1b7979bba186a7", "message": "Adding CacheItem object to contain map of data and a another map for any other cache properties", "committedDate": "2020-04-03T05:54:04Z", "type": "commit"}, {"oid": "02a96e9a7dbec8e912f29439334792d7b51069d6", "url": "https://github.com/vmware/singleton/commit/02a96e9a7dbec8e912f29439334792d7b51069d6", "message": "Fixing failing unit test", "committedDate": "2020-04-03T05:59:48Z", "type": "commit"}, {"oid": "78d88f796cb3bd3f015bb1d589717fe6897abc05", "url": "https://github.com/vmware/singleton/commit/78d88f796cb3bd3f015bb1d589717fe6897abc05", "message": "Fixing code scan issues", "committedDate": "2020-04-03T06:14:21Z", "type": "commit"}, {"oid": "655c223992bf244c4136a52c636119c9edf605fe", "url": "https://github.com/vmware/singleton/commit/655c223992bf244c4136a52c636119c9edf605fe", "message": "Code cleanup", "committedDate": "2020-04-03T08:36:12Z", "type": "commit"}, {"oid": "8746915f5015f497b6956e8f8b743806330cc51c", "url": "https://github.com/vmware/singleton/commit/8746915f5015f497b6956e8f8b743806330cc51c", "message": "Lazily instantiating cacheProps; code clean up and comments", "committedDate": "2020-04-05T17:28:09Z", "type": "commit"}, {"oid": "897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "url": "https://github.com/vmware/singleton/commit/897a03cb27437a33e56cf9d6729bf4c205f1d7ec", "message": "Changes after code review", "committedDate": "2020-04-07T03:26:44Z", "type": "commit"}, {"oid": "3a4e18358f37c29502cfdeb60c44b94e63653601", "url": "https://github.com/vmware/singleton/commit/3a4e18358f37c29502cfdeb60c44b94e63653601", "message": "Adding header to CacheItem.java", "committedDate": "2020-04-07T03:36:56Z", "type": "commit"}, {"oid": "b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "url": "https://github.com/vmware/singleton/commit/b08feb44ef346d12b3b2bdf6492aae0c6a4aa561", "message": "Fixing code san issue. Synchronize on a final field", "committedDate": "2020-04-07T03:49:29Z", "type": "commit"}, {"oid": "8f57e243ed1f450349392e990b4502dd74543f91", "url": "https://github.com/vmware/singleton/commit/8f57e243ed1f450349392e990b4502dd74543f91", "message": "Fixing code scan bug", "committedDate": "2020-04-07T04:07:44Z", "type": "commit"}, {"oid": "72c8799ffbbb23dc61115375cbee52573e792ec9", "url": "https://github.com/vmware/singleton/commit/72c8799ffbbb23dc61115375cbee52573e792ec9", "message": "Changes after code review", "committedDate": "2020-04-07T17:15:34Z", "type": "commit"}, {"oid": "92edfc88a64c21470fc06c37b65503a6d9042f90", "url": "https://github.com/vmware/singleton/commit/92edfc88a64c21470fc06c37b65503a6d9042f90", "message": "Updating CasheService.isContainComponent to return false if cache key is stored but has a null value", "committedDate": "2020-04-07T19:15:13Z", "type": "commit"}, {"oid": "2042554b861d0b97b04a8d29c3a051106e24d8f0", "url": "https://github.com/vmware/singleton/commit/2042554b861d0b97b04a8d29c3a051106e24d8f0", "message": "HttpRequester if-none-match header and other customized headers are added to each specific request locally.", "committedDate": "2020-04-08T04:57:56Z", "type": "commit"}, {"oid": "ae707fface7ade445bc391f9f0e4125734eeddb1", "url": "https://github.com/vmware/singleton/commit/ae707fface7ade445bc391f9f0e4125734eeddb1", "message": "Code clean up; keep old caching expiration logic", "committedDate": "2020-04-08T17:09:39Z", "type": "commit"}, {"oid": "82818d5909f1b1e2117f7599993ea50777bd982a", "url": "https://github.com/vmware/singleton/commit/82818d5909f1b1e2117f7599993ea50777bd982a", "message": "Fixing code scan bug", "committedDate": "2020-04-08T21:12:57Z", "type": "commit"}, {"oid": "31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "url": "https://github.com/vmware/singleton/commit/31d4ff67cd82cc1c80ddcf31ab6f1f1de32bc8bf", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-04-08T21:50:07Z", "type": "commit"}, {"oid": "c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "url": "https://github.com/vmware/singleton/commit/c9f83d7ffe36718af5c54a43acfeabe2d1ab2dca", "message": "code clean up", "committedDate": "2020-04-09T00:13:02Z", "type": "commit"}, {"oid": "78dcc1cc7de1700d332c4901ec3f09e546befd26", "url": "https://github.com/vmware/singleton/commit/78dcc1cc7de1700d332c4901ec3f09e546befd26", "message": "Removing response code and response msg from cache; Passing cacheItem object to be updated down the line.", "committedDate": "2020-04-09T07:14:14Z", "type": "commit"}, {"oid": "9281c640b3b78d987e1fd865b01f16e4edbfd768", "url": "https://github.com/vmware/singleton/commit/9281c640b3b78d987e1fd865b01f16e4edbfd768", "message": "Changes after code review", "committedDate": "2020-04-10T04:03:05Z", "type": "commit"}, {"oid": "26577625b3eb13f1f9367f313dd94d47c9113749", "url": "https://github.com/vmware/singleton/commit/26577625b3eb13f1f9367f313dd94d47c9113749", "message": "Adding header to CacheItem.java file", "committedDate": "2020-04-10T04:08:23Z", "type": "commit"}, {"oid": "9e80f09d4838f9de33bf9dce100744f4832630a0", "url": "https://github.com/vmware/singleton/commit/9e80f09d4838f9de33bf9dce100744f4832630a0", "message": "Fixing failing unit test", "committedDate": "2020-04-10T04:35:16Z", "type": "commit"}, {"oid": "68467f34882da413ed852f2ed4b1394e88bf64b1", "url": "https://github.com/vmware/singleton/commit/68467f34882da413ed852f2ed4b1394e88bf64b1", "message": "Changes after code review", "committedDate": "2020-04-10T23:14:41Z", "type": "commit"}, {"oid": "d67c72ee939034deb58b99d4fdf0fcc38857c006", "url": "https://github.com/vmware/singleton/commit/d67c72ee939034deb58b99d4fdf0fcc38857c006", "message": "Fixing code scan bugs", "committedDate": "2020-04-10T23:28:38Z", "type": "commit"}, {"oid": "85919738596847c3cd42fd2397226fb498cf6e28", "url": "https://github.com/vmware/singleton/commit/85919738596847c3cd42fd2397226fb498cf6e28", "message": "Not storing anything in cache if response is neither 200 nor 304", "committedDate": "2020-04-13T21:22:27Z", "type": "commit"}, {"oid": "22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "url": "https://github.com/vmware/singleton/commit/22a5b29a9b5a9c676fac79ae412b1d7ffc5b35de", "message": "Loading messages from specified offline resource bundles", "committedDate": "2020-04-15T00:36:42Z", "type": "commit"}, {"oid": "ce2488b8af539a1456959b97e482435b11d5aeff", "url": "https://github.com/vmware/singleton/commit/ce2488b8af539a1456959b97e482435b11d5aeff", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-04-15T00:43:12Z", "type": "commit"}, {"oid": "109296301af054a8def120b98fd7e877acdb465f", "url": "https://github.com/vmware/singleton/commit/109296301af054a8def120b98fd7e877acdb465f", "message": "Adding header", "committedDate": "2020-04-15T00:48:03Z", "type": "commit"}, {"oid": "35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "url": "https://github.com/vmware/singleton/commit/35d1d971e6bdaf2097dca029ee3ff15c4f72ac4c", "message": "Fixing failing unie test", "committedDate": "2020-04-15T01:14:11Z", "type": "commit"}, {"oid": "ada17f19d4e56d283ae65886b08e0d6a71031ba7", "url": "https://github.com/vmware/singleton/commit/ada17f19d4e56d283ae65886b08e0d6a71031ba7", "message": "Code changes after review; code clean up", "committedDate": "2020-04-16T17:06:32Z", "type": "commit"}, {"oid": "fc60eeffd82dc8e8214207524bda4864edd05add", "url": "https://github.com/vmware/singleton/commit/fc60eeffd82dc8e8214207524bda4864edd05add", "message": "Using java.nio.file.Paths", "committedDate": "2020-04-17T16:14:41Z", "type": "commit"}, {"oid": "3e70449176a975fa30985714d2c9f03795c72d6b", "url": "https://github.com/vmware/singleton/commit/3e70449176a975fa30985714d2c9f03795c72d6b", "message": "Offline mode as fallback when service fetch fails", "committedDate": "2020-04-17T17:07:36Z", "type": "commit"}, {"oid": "609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "url": "https://github.com/vmware/singleton/commit/609d8e4a2515e6f3211898259d630f5b6b8a4ee9", "message": "Resetting VIPCfg and I18nFactory instances for each test", "committedDate": "2020-04-17T17:56:53Z", "type": "commit"}, {"oid": "dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "url": "https://github.com/vmware/singleton/commit/dd19b1cd5d9b0b42df97388980ea6aac1d0cafd5", "message": "Resetting VIPCfg and I18nFactory after test", "committedDate": "2020-04-17T17:59:27Z", "type": "commit"}, {"oid": "7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "url": "https://github.com/vmware/singleton/commit/7389f8b4d4c2e5c406de7147efcaf36b6ee453bd", "message": "Fixing tests", "committedDate": "2020-04-17T22:31:30Z", "type": "commit"}, {"oid": "5b92e4480ca25d122c7f98dc389d7e4884a59a25", "url": "https://github.com/vmware/singleton/commit/5b92e4480ca25d122c7f98dc389d7e4884a59a25", "message": "Limit to wiremock test logging", "committedDate": "2020-04-20T17:42:50Z", "type": "commit"}, {"oid": "dfb41b5042e733f21f5cda4428faab6e0a95e19a", "url": "https://github.com/vmware/singleton/commit/dfb41b5042e733f21f5cda4428faab6e0a95e19a", "message": "Decreasing unit test log", "committedDate": "2020-04-20T21:47:47Z", "type": "commit"}, {"oid": "21a7105c4fdc5d88d8db80340b3b00d947622cc7", "url": "https://github.com/vmware/singleton/commit/21a7105c4fdc5d88d8db80340b3b00d947622cc7", "message": "this test is timing out and trying to connect 70+ times", "committedDate": "2020-04-21T00:43:23Z", "type": "commit"}, {"oid": "84343d506461aea4976a86fa25e7bb1b06703150", "url": "https://github.com/vmware/singleton/commit/84343d506461aea4976a86fa25e7bb1b06703150", "message": "Adding comments to code", "committedDate": "2020-04-21T00:56:15Z", "type": "commit"}, {"oid": "be8e443e6de5070baf91c76e1f4001188e8be0d5", "url": "https://github.com/vmware/singleton/commit/be8e443e6de5070baf91c76e1f4001188e8be0d5", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-04-21T18:26:20Z", "type": "commit"}, {"oid": "b805d3672e0b286648b612dd48d3fabe73f92fd4", "url": "https://github.com/vmware/singleton/commit/b805d3672e0b286648b612dd48d3fabe73f92fd4", "message": "Adding timestamp to cache fromn local bundle", "committedDate": "2020-04-21T19:14:03Z", "type": "commit"}, {"oid": "17bc16cd019c4d40ad82df7590869f82a76b0a96", "url": "https://github.com/vmware/singleton/commit/17bc16cd019c4d40ad82df7590869f82a76b0a96", "message": "Deprecating methods in TranslationMessage; adding new method getMessage", "committedDate": "2020-04-23T04:26:42Z", "type": "commit"}, {"oid": "15da01004363a3441944149c106b79908ba4cde6", "url": "https://github.com/vmware/singleton/commit/15da01004363a3441944149c106b79908ba4cde6", "message": "Added tests for TranslationMessage.getMessage", "committedDate": "2020-04-24T08:58:03Z", "type": "commit"}, {"oid": "631de868cb3b40899ace35017268bdb65b236091", "url": "https://github.com/vmware/singleton/commit/631de868cb3b40899ace35017268bdb65b236091", "message": "Fixing test", "committedDate": "2020-04-24T09:15:35Z", "type": "commit"}, {"oid": "ffd9adb09499997921630426e9a8327bf615ee50", "url": "https://github.com/vmware/singleton/commit/ffd9adb09499997921630426e9a8327bf615ee50", "message": "Fixing test", "committedDate": "2020-04-24T09:28:59Z", "type": "commit"}, {"oid": "c00f7ae3cacc0e17ab59a776b02c3be04a106252", "url": "https://github.com/vmware/singleton/commit/c00f7ae3cacc0e17ab59a776b02c3be04a106252", "message": "Fixing test", "committedDate": "2020-04-24T20:29:27Z", "type": "commit"}, {"oid": "d0504c49a179166868cbae84874647925d88c2a3", "url": "https://github.com/vmware/singleton/commit/d0504c49a179166868cbae84874647925d88c2a3", "message": "Removing comment field because source collection is not supported anymore; cleaning up tests; adding comments for javadoc", "committedDate": "2020-04-24T22:28:00Z", "type": "commit"}, {"oid": "79b18d0035a35a23fb26fe76cae4868e848a11b8", "url": "https://github.com/vmware/singleton/commit/79b18d0035a35a23fb26fe76cae4868e848a11b8", "message": "Code clean up", "committedDate": "2020-04-24T22:44:30Z", "type": "commit"}, {"oid": "ec9f5db8cd6110c5b714bc098d54680308c63d9a", "url": "https://github.com/vmware/singleton/commit/ec9f5db8cd6110c5b714bc098d54680308c63d9a", "message": "Changes from code review", "committedDate": "2020-04-24T22:58:26Z", "type": "commit"}, {"oid": "2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "url": "https://github.com/vmware/singleton/commit/2e8bd3600fba20e5e17378b1e67e37216d8e6b06", "message": "Code clean up", "committedDate": "2020-04-24T23:25:19Z", "type": "commit"}, {"oid": "4e44a8c46fd2856ca97cf71158cb9804880e3e17", "url": "https://github.com/vmware/singleton/commit/4e44a8c46fd2856ca97cf71158cb9804880e3e17", "message": "Optional SourceOpt in initialization\n\nSigned-off-by: Jessie <jessiejuachon@gmail.com>", "committedDate": "2020-04-26T22:36:42Z", "type": "commit"}, {"oid": "de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "url": "https://github.com/vmware/singleton/commit/de5c4ee9c7db7d3f53a979e15fdcae60a28958d4", "message": "Fixing test", "committedDate": "2020-04-27T00:58:16Z", "type": "commit"}, {"oid": "406cb2a268cd5e18eee310577137c8f364bc8309", "url": "https://github.com/vmware/singleton/commit/406cb2a268cd5e18eee310577137c8f364bc8309", "message": "Adding comments to code", "committedDate": "2020-04-28T03:14:02Z", "type": "commit"}, {"oid": "c80696ab2f0bdfcc80ba268705ed147aed423b07", "url": "https://github.com/vmware/singleton/commit/c80696ab2f0bdfcc80ba268705ed147aed423b07", "message": "Adding comment for javadoc", "committedDate": "2020-04-28T04:33:36Z", "type": "commit"}, {"oid": "79d111e4404a4f171dcdfb001228afcbad996753", "url": "https://github.com/vmware/singleton/commit/79d111e4404a4f171dcdfb001228afcbad996753", "message": "Cleaning up code", "committedDate": "2020-04-28T21:54:07Z", "type": "commit"}, {"oid": "24d8d5d7ee9e667c88187761c5332d3c9485cf26", "url": "https://github.com/vmware/singleton/commit/24d8d5d7ee9e667c88187761c5332d3c9485cf26", "message": "Code clean up", "committedDate": "2020-04-28T22:02:21Z", "type": "commit"}, {"oid": "23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "url": "https://github.com/vmware/singleton/commit/23e62b6f0b3f0e3e4d5973c6f00b4746256fe8dd", "message": "Fixing test", "committedDate": "2020-04-28T23:28:49Z", "type": "commit"}, {"oid": "369643f588359e1ceb430768ab473566c503da3c", "url": "https://github.com/vmware/singleton/commit/369643f588359e1ceb430768ab473566c503da3c", "message": "Removing source message fallback from this PR", "committedDate": "2020-04-29T03:17:37Z", "type": "commit"}, {"oid": "4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "url": "https://github.com/vmware/singleton/commit/4e67e25c4dee919192f1fb0aedd9fcc9d34a6e06", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-04-29T04:09:00Z", "type": "commit"}, {"oid": "636b5b4cf56f121cf871e07911dcb4d763a16c64", "url": "https://github.com/vmware/singleton/commit/636b5b4cf56f121cf871e07911dcb4d763a16c64", "message": "Default locale in config file instead of hardcoded; get supported locales for offline mode; fixing some bugs in getting supported locales", "committedDate": "2020-05-05T01:10:59Z", "type": "commit"}, {"oid": "71a87e52447b0fede8230e7f8f7e5c65ce034546", "url": "https://github.com/vmware/singleton/commit/71a87e52447b0fede8230e7f8f7e5c65ce034546", "message": "Merge branch 'g11n-java-client' into g11n-java-client", "committedDate": "2020-05-05T01:20:57Z", "type": "commit"}, {"oid": "b9a90e3e2190e8dec158f1e62e4bc2f3ccc1b21e", "url": "https://github.com/vmware/singleton/commit/b9a90e3e2190e8dec158f1e62e4bc2f3ccc1b21e", "message": "Fixing test", "committedDate": "2020-05-05T01:25:06Z", "type": "commit"}, {"oid": "060666d54ddfa7156433209ad06c959b4af649da", "url": "https://github.com/vmware/singleton/commit/060666d54ddfa7156433209ad06c959b4af649da", "message": "Fixing tests", "committedDate": "2020-05-05T01:56:26Z", "type": "commit"}, {"oid": "52e3695951a48d21de82180c140beead3924cf75", "url": "https://github.com/vmware/singleton/commit/52e3695951a48d21de82180c140beead3924cf75", "message": "Default locale to Locale.ENGLISH if not set in config file", "committedDate": "2020-05-05T03:04:12Z", "type": "commit"}, {"oid": "2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9", "url": "https://github.com/vmware/singleton/commit/2858ebcb7441b8da09f70489b8f8e8e3a79c8cc9", "message": "Changed after code review: code clean up, bug fix", "committedDate": "2020-05-06T21:58:32Z", "type": "commit"}, {"oid": "bbe3047d43e1170f7cef6e69e51cc7d2ae7ff48e", "url": "https://github.com/vmware/singleton/commit/bbe3047d43e1170f7cef6e69e51cc7d2ae7ff48e", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-05-08T02:49:19Z", "type": "commit"}, {"oid": "fa56388fa66f56bce4c746ff4c662591246908f4", "url": "https://github.com/vmware/singleton/commit/fa56388fa66f56bce4c746ff4c662591246908f4", "message": "Update src/main/java/com/vmware/vipclient/i18n/messages/api/opt/local/LocalLocaleOpt.java\n\nCo-authored-by: Xiaochao Li <48587632+Xiaochao8@users.noreply.github.com>", "committedDate": "2020-05-08T02:50:00Z", "type": "commit"}, {"oid": "08cd96d71656e546810805466962d82b4ab623ab", "url": "https://github.com/vmware/singleton/commit/08cd96d71656e546810805466962d82b4ab623ab", "message": "code clean up, error logging, bug fix", "committedDate": "2020-05-08T07:42:06Z", "type": "commit"}, {"oid": "e89ff56539cbf52e2819b70b28138356a0a6dd11", "url": "https://github.com/vmware/singleton/commit/e89ff56539cbf52e2819b70b28138356a0a6dd11", "message": "Merge branch 'g11n-java-client' of https://github.com/vmware/singleton into g11n-java-client", "committedDate": "2020-05-08T07:48:46Z", "type": "commit"}, {"oid": "119aebde51e1777a164c914bbd7d132d41ece371", "url": "https://github.com/vmware/singleton/commit/119aebde51e1777a164c914bbd7d132d41ece371", "message": "code clean up", "committedDate": "2020-05-08T07:52:57Z", "type": "commit"}, {"oid": "e8a937d79fb0a7b48b85ca5ac8623aa459d9c8a2", "url": "https://github.com/vmware/singleton/commit/e8a937d79fb0a7b48b85ca5ac8623aa459d9c8a2", "message": "code clean up", "committedDate": "2020-05-11T21:00:45Z", "type": "commit"}, {"oid": "9d95cd1379ac1e8cd3d30f8c085cbfc0a68d8ab2", "url": "https://github.com/vmware/singleton/commit/9d95cd1379ac1e8cd3d30f8c085cbfc0a68d8ab2", "message": "Using messages_source.json for source locale messages.", "committedDate": "2020-05-12T23:35:30Z", "type": "commit"}]}