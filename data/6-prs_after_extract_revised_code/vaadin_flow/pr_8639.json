{"pr_number": 8639, "pr_title": "Abstract unit test for generic component-specific data views", "pr_createdAt": "2020-06-29T07:27:53Z", "pr_url": "https://github.com/vaadin/flow/pull/8639", "timeline": [{"oid": "6d659713afe4e697355f354fcc8ed724c4eae6ba", "url": "https://github.com/vaadin/flow/commit/6d659713afe4e697355f354fcc8ed724c4eae6ba", "message": "Create an abstract IT for generic component-specific data views", "committedDate": "2020-06-28T10:12:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyOTgxNw==", "url": "https://github.com/vaadin/flow/pull/8639#discussion_r447429817", "bodyText": "Maybe add some comments on what is this about and what it is meant for ?", "author": "pleku", "createdAt": "2020-06-30T06:03:36Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.shared.Registration;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public abstract class AbstractComponentDataViewTest {", "originalCommit": "6d659713afe4e697355f354fcc8ed724c4eae6ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c50af860182be834241a8ff426442fa96dc73770", "chunk": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java\nindex a45c2af5d3..3f72638421 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java\n\n@@ -33,6 +33,13 @@ import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n+/**\n+ * Abstract test class that contains the common tests for all generic\n+ * data view component's implementations, i.e. which extends\n+ * {@link AbstractDataView} and doesn't contain an in-memory or lazy\n+ * specific API. Concrete implementations of this class should provide a\n+ * particular component to be tested as a {@link HasDataView} implementation.\n+ */\n public abstract class AbstractComponentDataViewTest {\n \n     protected List<String> items;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMDEwOA==", "url": "https://github.com/vaadin/flow/pull/8639#discussion_r447430108", "bodyText": "NIT: addSizeListener", "author": "pleku", "createdAt": "2020-06-30T06:04:20Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.shared.Registration;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public abstract class AbstractComponentDataViewTest {\n+\n+    protected List<String> items;\n+    protected InMemoryDataProvider<String> dataProvider;\n+    protected DataView<String> dataView;\n+    protected HasDataView<String, ? extends DataView<String>> component;\n+\n+    @Before\n+    public void init() {\n+        items = new ArrayList<>(Arrays.asList(\"first\", \"middle\", \"last\"));\n+        dataProvider = new InMemoryProvider(items);\n+        component = getVerifiedComponent();\n+        dataView = component.setDataSource(dataProvider);\n+    }\n+\n+    @Test\n+    public void getItems_noFiltersSet_allItemsObtained() {\n+        Stream<String> allItems = dataView.getItems();\n+        Assert.assertArrayEquals(\"Unexpected data set\", items.toArray(),\n+                allItems.toArray());\n+    }\n+\n+    @Test\n+    public void getItems_filtersSet_filteredItemsObtained() {\n+        dataProvider.setFilter(item -> item.equals(\"first\"));\n+        Assert.assertArrayEquals(\"Unexpected data set after filtering\",\n+                new String[] {\"first\"},\n+                dataView.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void getItems_sortingSet_sortedItemsObtained() {\n+        dataProvider.setSortComparator(String::compareToIgnoreCase);\n+        Assert.assertArrayEquals(\"Unexpected items sorting\",\n+                new String[] {\"first\", \"last\", \"middle\"},\n+                dataView.getItems().toArray());\n+    }\n+\n+    @Test\n+    public void getSize_filtersSet_filteredItemsObtained() {\n+        dataProvider.setFilter(item -> item.equals(\"first\"));\n+        Assert.assertEquals(\"Unexpected size for data\",\n+                1, dataView.getSize());\n+    }\n+\n+    @Test\n+    public void getSize_noFiltersSet_dataSizeObtained() {\n+        Assert.assertEquals(\"Unexpected size for data\", items.size(),\n+                dataView.getSize());\n+    }\n+\n+    @Test\n+    public void addListener_fireEvent_listenerIsCalled() {", "originalCommit": "6d659713afe4e697355f354fcc8ed724c4eae6ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c50af860182be834241a8ff426442fa96dc73770", "chunk": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java\nindex a45c2af5d3..3f72638421 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractComponentDataViewTest.java\n\n@@ -33,6 +33,13 @@ import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n+/**\n+ * Abstract test class that contains the common tests for all generic\n+ * data view component's implementations, i.e. which extends\n+ * {@link AbstractDataView} and doesn't contain an in-memory or lazy\n+ * specific API. Concrete implementations of this class should provide a\n+ * particular component to be tested as a {@link HasDataView} implementation.\n+ */\n public abstract class AbstractComponentDataViewTest {\n \n     protected List<String> items;\n"}}, {"oid": "c50af860182be834241a8ff426442fa96dc73770", "url": "https://github.com/vaadin/flow/commit/c50af860182be834241a8ff426442fa96dc73770", "message": "Add explanations of this test purpose", "committedDate": "2020-06-30T07:50:57Z", "type": "commit"}]}