{"pr_number": 9583, "pr_title": "fix: encode attribute value during transfer from embedded web app", "pr_createdAt": "2020-12-07T10:29:36Z", "pr_url": "https://github.com/vaadin/flow/pull/9583", "timeline": [{"oid": "83de5fccf7bbaa016717b092d26b3fce05e5e0f3", "url": "https://github.com/vaadin/flow/commit/83de5fccf7bbaa016717b092d26b3fce05e5e0f3", "message": "fix: encode attribute value during transfer from embedded web app", "committedDate": "2020-12-07T10:29:07Z", "type": "commit"}, {"oid": "27c415d30a88b44534a9a8271d4b385bfc94d31f", "url": "https://github.com/vaadin/flow/commit/27c415d30a88b44534a9a8271d4b385bfc94d31f", "message": "fix: encode only path and query separately", "committedDate": "2020-12-07T13:59:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjM3Mg==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r537572372", "bodyText": "Hm. URLEncoder.encode is for encoding parameters for using in application/x-www-form-urlencoded data, it changes forward slash (perfectly valid in path part of URL) to %2f.", "author": "fluorumlabs", "createdAt": "2020-12-07T14:57:53Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "diffHunk": "@@ -378,16 +381,28 @@ private void transferAttribute(Writer writer, String elementRef,\n      * @param path\n      *            original resource path\n      * @return new resource path, relative to basePath\n+     * @throws UnsupportedEncodingException\n      */\n-    protected String modifyPath(String basePath, String path) {\n+    protected String modifyPath(String basePath, String path)\n+            throws UnsupportedEncodingException {\n         int vaadinIndex = path.indexOf(Constants.VAADIN_MAPPING);\n+        String suffix = path;\n         if (vaadinIndex > 0) {\n-            String subPath = path.substring(vaadinIndex);\n-            return URI.create(basePath + subPath).toString();\n-        } else {\n-            return URI.create(basePath + path).toString();\n+            suffix = suffix.substring(vaadinIndex);\n+        }\n+        int queryIndex = suffix.indexOf('?');\n+        if (queryIndex > 0) {\n+            suffix = encode(suffix.substring(0, queryIndex)) + '?'\n+                    + encode(suffix.substring(queryIndex + 1));\n+        }\n+        return URI.create(basePath + suffix).toString();\n+    }\n \n+    private String encode(String str) throws UnsupportedEncodingException {\n+        if (str == null) {\n+            return null;\n         }\n+        return URLEncoder.encode(str, StandardCharsets.UTF_8.name());", "originalCommit": "27c415d30a88b44534a9a8271d4b385bfc94d31f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5Mzk3MA==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r537593970", "bodyText": "The forward slash is not a problem : encoded slash is recognized correctly in the URI.\nEncoded ? is an issue.\nBut if not URLEncoder.encode  then which way do you suggest to escape/encode here ?", "author": "denis-anisimov", "createdAt": "2020-12-07T15:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5ODU0NA==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r537598544", "bodyText": "One particular problem is whitespace character: in path it should be encoded as %20 whereas URLEncoder.encode encodes it as +. The real solution is to either escape single quote to avoid injection, or, possibly, use double quotes in JS (double quote is not allowed in URL AFAIR)", "author": "fluorumlabs", "createdAt": "2020-12-07T15:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MjU5OA==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538072598", "bodyText": "Why it is a problem ?\nSingle quote is not always a single quote.\nThe problem is : you have to detect whether the symbol ' is a single quote or not.\nE.g. \\' is not a single quote.\nAnd %27 is also a single quote.\nPlease provide a code which escapes single quote.\n\nor, possibly, use double quotes in JS (double quote is not allowed in URL\n\ndouble quote is not allowed. But I don't understand the sentence.", "author": "denis-anisimov", "createdAt": "2020-12-08T06:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NzY2MQ==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538077661", "bodyText": "or, possibly, use double quotes in JS (double quote is not allowed in URL\n\nIt's really hard to decrypt what you mean sometimes.\nDo you suggest to use double quotes in the code which creates JS content inside transferAttribute?\nThen yes, looks like it's a good suggestion.", "author": "denis-anisimov", "createdAt": "2020-12-08T06:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjM3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "213e2f3c704af6b864b48bf1c08ef986de6288bd", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\nindex 40236d2ed3..b028d55eac 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java\n\n@@ -390,19 +388,18 @@ public class WebComponentBootstrapHandler extends BootstrapHandler {\n         if (vaadinIndex > 0) {\n             suffix = suffix.substring(vaadinIndex);\n         }\n-        int queryIndex = suffix.indexOf('?');\n-        if (queryIndex > 0) {\n-            suffix = encode(suffix.substring(0, queryIndex)) + '?'\n-                    + encode(suffix.substring(queryIndex + 1));\n-        }\n-        return URI.create(basePath + suffix).toString();\n+        return URI.create(checkURL(basePath + suffix)).toString();\n     }\n \n-    private String encode(String str) throws UnsupportedEncodingException {\n-        if (str == null) {\n+    private String checkURL(String url) {\n+        if (url == null) {\n             return null;\n         }\n-        return URLEncoder.encode(str, StandardCharsets.UTF_8.name());\n+        if (url.contains(\"\\\"\")) {\n+            throw new IllegalStateException(\n+                    \"URL '\" + url + \"' may not contain double quotes\");\n+        }\n+        return url;\n     }\n \n     private static String inlineHTML(String html) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MzEzMw==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r537573133", "bodyText": "Would be nice to see the test with a real URL (with protocol, path parameters etc.)", "author": "fluorumlabs", "createdAt": "2020-12-07T14:58:55Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java", "diffHunk": "@@ -102,6 +103,27 @@ public void writeBootstrapPage_skipMetaAndStyleHeaderElements()\n                 CoreMatchers.not(CoreMatchers.containsString(\"http-equiv\")));\n     }\n \n+    @Test\n+    public void writeBootstrapPage_escapeAttributeValue() throws IOException {\n+        WebComponentBootstrapHandler handler = new WebComponentBootstrapHandler();\n+\n+        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+\n+        Element head = new Document(\"\").normalise().head();\n+\n+        Element script = head.ownerDocument().createElement(\"script\");\n+        head.appendChild(script);\n+        script.attr(\"src\", \"foo'bar %27?baz%22\");", "originalCommit": "27c415d30a88b44534a9a8271d4b385bfc94d31f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA4NTQwMw==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538085403", "bodyText": "Double quotes are use so there is no encoding done anymore.", "author": "denis-anisimov", "createdAt": "2020-12-08T07:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MzEzMw=="}], "type": "inlineReview", "revised_code": {"commit": "213e2f3c704af6b864b48bf1c08ef986de6288bd", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\nindex d6fa692a28..c4efa3c26c 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\n\n@@ -104,7 +104,8 @@ public class WebComponentBootstrapHandlerTest {\n     }\n \n     @Test\n-    public void writeBootstrapPage_escapeAttributeValue() throws IOException {\n+    public void writeBootstrapPage_scriptSrcHasNoDoubleQuotes_attributeIsTransferred()\n+            throws IOException {\n         WebComponentBootstrapHandler handler = new WebComponentBootstrapHandler();\n \n         ByteArrayOutputStream stream = new ByteArrayOutputStream();\n"}}, {"oid": "213e2f3c704af6b864b48bf1c08ef986de6288bd", "url": "https://github.com/vaadin/flow/commit/213e2f3c704af6b864b48bf1c08ef986de6288bd", "message": "fix: use double quotes for the attribute value in the generated code", "committedDate": "2020-12-08T07:05:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExNTczMQ==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538115731", "bodyText": "Remove the declaration of thrown exception 'java.io.UnsupportedEncodingException', as it cannot be thrown from method's body.", "author": "vaadin-bot", "createdAt": "2020-12-08T08:00:29Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "diffHunk": "@@ -378,16 +379,27 @@ private void transferAttribute(Writer writer, String elementRef,\n      * @param path\n      *            original resource path\n      * @return new resource path, relative to basePath\n+     * @throws UnsupportedEncodingException\n      */\n-    protected String modifyPath(String basePath, String path) {\n+    protected String modifyPath(String basePath, String path)\n+            throws UnsupportedEncodingException {", "originalCommit": "213e2f3c704af6b864b48bf1c08ef986de6288bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExMzc4MA==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538113780", "bodyText": "Are you sure that's the correct assert condition? It's negated, so it won't catch regressions unless they will yield exact string.", "author": "fluorumlabs", "createdAt": "2020-12-08T07:56:56Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java", "diffHunk": "@@ -113,15 +114,31 @@ public void writeBootstrapPage_escapeAttributeValue() throws IOException {\n \n         Element script = head.ownerDocument().createElement(\"script\");\n         head.appendChild(script);\n-        script.attr(\"src\", \"foo'bar %27?baz%22\");\n+        script.attr(\"src\", \"foo'bar%20%27?baz%22\");\n \n         VaadinResponse response = getMockResponse(stream);\n         handler.writeBootstrapPage(\"\", response, head, \"\");\n \n         String resultingScript = stream.toString(StandardCharsets.UTF_8.name());\n+        MatcherAssert.assertThat(resultingScript, CoreMatchers\n+                .not(CoreMatchers.containsString(\"foo'bar %27?baz%22\")));", "originalCommit": "213e2f3c704af6b864b48bf1c08ef986de6288bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExODk2NQ==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538118965", "bodyText": "Don't understand this .\nPlease decrypt.", "author": "denis-anisimov", "createdAt": "2020-12-08T08:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExMzc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0NTMzNQ==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538145335", "bodyText": "IMO the assertion should be MatchAssert.assertThat(resultScript, CoreMatchers.containsString(...)). If you disagree, could you explain what exactly this test is testing?", "author": "fluorumlabs", "createdAt": "2020-12-08T08:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExMzc4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0Njg1Mg==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538146852", "bodyText": "Now I've got it: CoreMatchers.not was a mistake in copy paste.\nThe intention was to have only CoreMatchers.containsString.\nThanks,", "author": "denis-anisimov", "createdAt": "2020-12-08T08:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExMzc4MA=="}], "type": "inlineReview", "revised_code": {"commit": "d58ec008e5524e5b5dc693eedc4087b93472f35d", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\nindex c4efa3c26c..8b1e9fac9d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandlerTest.java\n\n@@ -120,8 +120,8 @@ public class WebComponentBootstrapHandlerTest {\n         handler.writeBootstrapPage(\"\", response, head, \"\");\n \n         String resultingScript = stream.toString(StandardCharsets.UTF_8.name());\n-        MatcherAssert.assertThat(resultingScript, CoreMatchers\n-                .not(CoreMatchers.containsString(\"foo'bar %27?baz%22\")));\n+        MatcherAssert.assertThat(resultingScript,\n+                CoreMatchers.containsString(\"foo'bar%20%27?baz%22\"));\n     }\n \n     @Test(expected = IllegalStateException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExNTc2NQ==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538115765", "bodyText": "Since this method doesn't returns argument as is, it should probably return boolean instead and called isUrlUnsafe to align with com.vaadin.flow.server.HandlerHelper#isPathUnsafe. The IllegalArgumentException should be thrown in modifyPath then.", "author": "fluorumlabs", "createdAt": "2020-12-08T08:00:31Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/WebComponentBootstrapHandler.java", "diffHunk": "@@ -390,19 +388,18 @@ protected String modifyPath(String basePath, String path)\n         if (vaadinIndex > 0) {\n             suffix = suffix.substring(vaadinIndex);\n         }\n-        int queryIndex = suffix.indexOf('?');\n-        if (queryIndex > 0) {\n-            suffix = encode(suffix.substring(0, queryIndex)) + '?'\n-                    + encode(suffix.substring(queryIndex + 1));\n-        }\n-        return URI.create(basePath + suffix).toString();\n+        return URI.create(checkURL(basePath + suffix)).toString();\n     }\n \n-    private String encode(String str) throws UnsupportedEncodingException {\n-        if (str == null) {\n+    private String checkURL(String url) {", "originalCommit": "213e2f3c704af6b864b48bf1c08ef986de6288bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyMzUxMg==", "url": "https://github.com/vaadin/flow/pull/9583#discussion_r538123512", "bodyText": "This is an internal private method and it's name and how it's called is a  matter of taste .\nThe method returns the provided argument as is without any change and it throws the exception if something wrong with the argument.\nIt works quite similar to the Objects::requireNonNull.", "author": "denis-anisimov", "createdAt": "2020-12-08T08:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODExNTc2NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d58ec008e5524e5b5dc693eedc4087b93472f35d", "url": "https://github.com/vaadin/flow/commit/d58ec008e5524e5b5dc693eedc4087b93472f35d", "message": "fix: correct assertion", "committedDate": "2020-12-08T08:49:27Z", "type": "commit"}]}