{"pr_number": 7904, "pr_title": "Make a workaround for skinnywar/Wildfly", "pr_createdAt": "2020-03-26T12:45:16Z", "pr_url": "https://github.com/vaadin/flow/pull/7904", "timeline": [{"oid": "5f48d442adde8dd14868a58379dde93b44d3d99b", "url": "https://github.com/vaadin/flow/commit/5f48d442adde8dd14868a58379dde93b44d3d99b", "message": "Make a workaround for skinnywar/Wildfly\n\nFixes #7805", "committedDate": "2020-03-26T10:49:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU0ODYyNw==", "url": "https://github.com/vaadin/flow/pull/7904#discussion_r398548627", "bodyText": "Use the built-in formatting to construct this argument.", "author": "vaadin-bot", "createdAt": "2020-03-26T12:54:29Z", "path": "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.testutil;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+public abstract class ClassFinder {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ClassFinder.class);\n+\n+    protected boolean isTestClassPath(String classPath) {\n+        File file = new File(classPath);\n+        return \"test-classes\".equals(file.getName());\n+    }\n+\n+    protected static boolean isFunctionalType(Type type) {\n+        return type.getTypeName().contains(\"java.util.function\");\n+    }\n+\n+    /**\n+     * Lists all class path entries by splitting the class path string.\n+     * <p>\n+     * Adapted from ClassPathExplorer.getRawClasspathEntries(), but without\n+     * filtering.\n+     *\n+     * @return List of class path segment strings\n+     */\n+    protected static List<String> getRawClasspathEntries() {\n+        // try to keep the order of the classpath\n+\n+        String pathSep = System.getProperty(\"path.separator\");\n+        String classpath = System.getProperty(\"java.class.path\");\n+\n+        if (classpath.startsWith(\"\\\"\")) {\n+            classpath = classpath.substring(1);\n+        }\n+        if (classpath.endsWith(\"\\\"\")) {\n+            classpath = classpath.substring(0, classpath.length() - 1);\n+        }\n+\n+        String[] split = classpath.split(pathSep);\n+        return Arrays.asList(split);\n+    }\n+\n+    /**\n+     * Lists class names (based on .class files) in a directory (a package path\n+     * root).\n+     *\n+     * @param parentPackage\n+     *            parent package name or null at root of hierarchy, used by\n+     *            recursion\n+     * @param parent\n+     *            File representing the directory to scan\n+     * @return collection of fully qualified class names in the directory\n+     */\n+    private static Collection<String> findClassesInDirectory(\n+            String parentPackage, File parent) {\n+        if (parent.isHidden()\n+                || parent.getPath().contains(File.separator + \".\")) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (parentPackage == null) {\n+            parentPackage = \"\";\n+        } else {\n+            parentPackage += \".\";\n+        }\n+\n+        Collection<String> classNames = new ArrayList<>();\n+\n+        // add all directories recursively\n+        File[] files = parent.listFiles();\n+        assertNotNull(files);\n+        for (File child : files) {\n+            if (child.isDirectory()) {\n+                classNames.addAll(findClassesInDirectory(\n+                        parentPackage + child.getName(), child));\n+            } else if (child.getName().endsWith(\".class\")) {\n+                classNames.add(parentPackage.replace(File.separatorChar, '.')\n+                        + child.getName().replaceAll(\"\\\\.class\", \"\"));\n+            }\n+        }\n+\n+        return classNames;\n+    }\n+\n+    /**\n+     * JARs that will be scanned for classes to test, in addition to classpath\n+     * directories.\n+     *\n+     * @return the compiled pattern\n+     */\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Pattern getJarPattern() {\n+        return Pattern.compile(\"(.*vaadin.*)|(.*flow.*)\\\\.jar\");\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Stream<String> getBasePackages() {\n+        return Stream.of(\"com.vaadin\");\n+    }\n+\n+    protected boolean isTestClass(Class<?> cls) {\n+        if (cls.getEnclosingClass() != null\n+                && isTestClass(cls.getEnclosingClass())) {\n+            return true;\n+        }\n+\n+        // Test classes with a @Test annotation on some method\n+        for (Method method : cls.getMethods()) {\n+            if (method.isAnnotationPresent(Test.class)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Finds the server side classes/interfaces under a class path entry -\n+     * either a directory or a JAR that matches {@link #getJarPattern()}.\n+     * <p>\n+     * Only classes under {@link #getBasePackages} are considered, and those\n+     * matching {@link #getExcludedPatterns()} are filtered out.\n+     */\n+    protected List<String> findServerClasses(String classpathEntry,\n+            Collection<Pattern> excludes) throws IOException {\n+        Collection<String> classes;\n+\n+        File file = new File(classpathEntry);\n+        if (file.isDirectory()) {\n+            classes = findClassesInDirectory(null, file);\n+        } else if (getJarPattern().matcher(file.getName()).matches()) {\n+            classes = findClassesInJar(file);\n+        } else {\n+            logger.debug(\"Ignoring \" + classpathEntry);", "originalCommit": "109e708d2bbab78949b00a2a5074040d0494d287", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ca179a35af9fa10e69e5b67a10bb1198b5decbd", "chunk": "diff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java\nindex aeb5379bbb..0c59330fec 100644\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java\n+++ b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java\n\n@@ -154,7 +154,7 @@ public abstract class ClassFinder {\n      * either a directory or a JAR that matches {@link #getJarPattern()}.\n      * <p>\n      * Only classes under {@link #getBasePackages} are considered, and those\n-     * matching {@link #getExcludedPatterns()} are filtered out.\n+     * matching {@code excludes} are filtered out.\n      */\n     protected List<String> findServerClasses(String classpathEntry,\n             Collection<Pattern> excludes) throws IOException {\n"}}, {"oid": "3ca179a35af9fa10e69e5b67a10bb1198b5decbd", "url": "https://github.com/vaadin/flow/commit/3ca179a35af9fa10e69e5b67a10bb1198b5decbd", "message": "Add unit test for checking that any initializer implements Fixed\ninitializer", "committedDate": "2020-03-26T13:16:54Z", "type": "forcePushed"}, {"oid": "21260de18210c7cfd9f8492888e15e6ffc1bd3d6", "url": "https://github.com/vaadin/flow/commit/21260de18210c7cfd9f8492888e15e6ffc1bd3d6", "message": "Add unit test for checking that any initializer implements Fixed\ninitializer", "committedDate": "2020-03-26T18:11:40Z", "type": "forcePushed"}, {"oid": "9a2fc075bd6b632d24d06d674c5d9077ae325517", "url": "https://github.com/vaadin/flow/commit/9a2fc075bd6b632d24d06d674c5d9077ae325517", "message": "Add unit test for checking that any initializer implements Fixed\ninitializer", "committedDate": "2020-03-26T18:14:24Z", "type": "commit"}, {"oid": "d6f06359dbdc808b7332a6d4a05ce5bdd7bb4876", "url": "https://github.com/vaadin/flow/commit/d6f06359dbdc808b7332a6d4a05ce5bdd7bb4876", "message": "Update unit tests to avoid direct call onStartUp.", "committedDate": "2020-03-27T05:50:38Z", "type": "commit"}, {"oid": "d6f06359dbdc808b7332a6d4a05ce5bdd7bb4876", "url": "https://github.com/vaadin/flow/commit/d6f06359dbdc808b7332a6d4a05ce5bdd7bb4876", "message": "Update unit tests to avoid direct call onStartUp.", "committedDate": "2020-03-27T05:50:38Z", "type": "forcePushed"}, {"oid": "624f0c354038ab17e25eb31a32d38a497e6060e0", "url": "https://github.com/vaadin/flow/commit/624f0c354038ab17e25eb31a32d38a497e6060e0", "message": "Add javadocs to test class.", "committedDate": "2020-03-27T06:04:15Z", "type": "commit"}, {"oid": "ab01d2b6805cff9d2a4dd20e507ec10cdc00f90d", "url": "https://github.com/vaadin/flow/commit/ab01d2b6805cff9d2a4dd20e507ec10cdc00f90d", "message": "Fix tests in 1000th time", "committedDate": "2020-03-27T06:19:18Z", "type": "commit"}, {"oid": "8693c8936f99ecee5688de65466539177c28e2c8", "url": "https://github.com/vaadin/flow/commit/8693c8936f99ecee5688de65466539177c28e2c8", "message": "Fix tests in 1001th time", "committedDate": "2020-03-27T06:37:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzNDQ3MQ==", "url": "https://github.com/vaadin/flow/pull/7904#discussion_r399834471", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "author": "vaadin-bot", "createdAt": "2020-03-29T18:24:21Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Allows to load the implementation class by one classloader but accepts\n+ * classes in {@link #onStartup(Set, ServletContext)} method loaded by another\n+ * classloader.\n+ * <p>\n+ * Workaround for https://github.com/vaadin/flow/issues/7805.\n+ *\n+ * @author Vaadin Ltd\n+ *\n+ */\n+public interface ClassLoaderAwareServletContainerInitializer\n+        extends ServletContainerInitializer {\n+\n+    /**\n+     * Overridden to use different classloaders if needed.\n+     * <p>\n+     * {@inheritdoc}\n+     */\n+    @Override\n+    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+            throws ServletException {\n+        ClassLoader webClassLoader = ctx.getClassLoader();\n+        ClassLoader classLoader = getClass().getClassLoader();\n+\n+        /*\n+         * Hack is needed to make a workaround for weird behavior of WildFly\n+         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+         */\n+        boolean noHack = false;\n+        while (classLoader != null) {\n+            if (classLoader.equals(webClassLoader)) {\n+                noHack = true;\n+                break;\n+            } else {\n+                /*\n+                 * The classloader which has loaded this class ({@code\n+                 * classLoader}) should be either the {@code webClassLoader} or\n+                 * its child: in this case it knows how to handle the classes\n+                 * loaded by the {@code webClassLoader} : it either is able to\n+                 * load them itself or delegate to its parent (which is the\n+                 * {@code webClassLoader}): in this case hack is not needed and\n+                 * the {@link #process(Set, ServletContext)} method can be\n+                 * called directly.\n+                 */\n+                classLoader = classLoader.getParent();\n+            }\n+        }\n+\n+        if (noHack) {\n+            process(set, ctx);\n+            return;\n+        }\n+\n+        try {\n+            Class<?> initializer = ctx.getClassLoader()\n+                    .loadClass(getClass().getName());\n+\n+            String processMethodName = Stream", "originalCommit": "df2ec09f60fd8c2adb6de5b63372484be3f1bc9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "038e0e31d94aac92929a91c654ae11de8116e887", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\nindex 37351a4d25..8a7345e4f3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n\n@@ -40,7 +40,7 @@ public interface ClassLoaderAwareServletContainerInitializer\n     /**\n      * Overridden to use different classloaders if needed.\n      * <p>\n-     * {@inheritdoc}\n+     * {@inheritDoc}\n      */\n     @Override\n     default void onStartup(Set<Class<?>> set, ServletContext ctx)\n"}}, {"oid": "038e0e31d94aac92929a91c654ae11de8116e887", "url": "https://github.com/vaadin/flow/commit/038e0e31d94aac92929a91c654ae11de8116e887", "message": "Corrections based on review", "committedDate": "2020-03-29T18:48:42Z", "type": "forcePushed"}, {"oid": "382ee73f2de82685b266c7bf0ff14eeec0d13897", "url": "https://github.com/vaadin/flow/commit/382ee73f2de82685b266c7bf0ff14eeec0d13897", "message": "Corrections based on review", "committedDate": "2020-03-30T05:14:34Z", "type": "commit"}, {"oid": "382ee73f2de82685b266c7bf0ff14eeec0d13897", "url": "https://github.com/vaadin/flow/commit/382ee73f2de82685b266c7bf0ff14eeec0d13897", "message": "Corrections based on review", "committedDate": "2020-03-30T05:14:34Z", "type": "forcePushed"}]}