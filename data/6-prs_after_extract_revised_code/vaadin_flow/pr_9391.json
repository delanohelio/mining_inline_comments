{"pr_number": 9391, "pr_title": "fix!: Store in-memory filtering and sorting in component", "pr_createdAt": "2020-11-12T14:57:05Z", "pr_url": "https://github.com/vaadin/flow/pull/9391", "timeline": [{"oid": "8b614142404ed1eb588940356551725875cf8d8c", "url": "https://github.com/vaadin/flow/commit/8b614142404ed1eb588940356551725875cf8d8c", "message": "fix!: Use data view filter and sorting only to that component (#9315)\n\nIn-memory filtering and sorting are now stored directly in component, which gives an opportunity to change it through the data view API for a certain component separately from other components bound to the same data provider.\n\nFixes #8655\n\n(cherry picked from commit 5b2d4d8259a2efb3de70ea9d38fda18c4979cac6)", "committedDate": "2020-11-12T14:49:48Z", "type": "commit"}, {"oid": "1450fe19d136dcb454696ccc113eb0aef18d87a6", "url": "https://github.com/vaadin/flow/commit/1450fe19d136dcb454696ccc113eb0aef18d87a6", "message": "fix: move filter and sorting handling methods to util class", "committedDate": "2020-11-12T14:54:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc1OQ==", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522269759", "bodyText": "apparently this could be null to remove it ?", "author": "pleku", "createdAt": "2020-11-12T17:08:06Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {\n+        ComponentUtil.setData(component, COMPONENT_IN_MEMORY_FILTER_KEY,\n+                filter);\n+    }\n+\n+    /**\n+     * Sets the in-memory sort comparator to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param sortComparator\n+     *            component's in-memory sort comparator", "originalCommit": "1450fe19d136dcb454696ccc113eb0aef18d87a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2OTMxOA==", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522369318", "bodyText": "Yeah, added the explanations about it", "author": "mshabarov", "createdAt": "2020-11-12T19:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d79914437c7cbb96de3f7d28fafd901d791c8cbf", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java\nindex 5ef10c941f..6cb03e926c 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java\n\n@@ -104,26 +104,54 @@ public final class DataViewUtils {\n     }\n \n     /**\n-     * Removes the in-memory filter from a given component instance.\n+     * Removes the in-memory filter and sort comparator from a given component\n+     * instance.\n      *\n      * @param component\n-     *            component instance the filter is removed from\n-     * @param <T>\n-     *            items type\n+     *            component instance the filter and sort comparator are removed\n+     *            from\n      */\n-    public static <T> void removeComponentFilter(Component component) {\n+    public static void removeComponentFilterAndSortComparator(\n+            Component component) {\n         setComponentFilter(component, null);\n+        setComponentSortComparator(component, null);\n     }\n \n     /**\n-     * Removes the in-memory sort comparator from a given component instance.\n+     * Generates a data query with component's in-memory filter and sort\n+     * comparator.\n      *\n      * @param component\n-     *            component instance the sort comparator is removed from\n-     * @param <T>\n-     *            items type\n+     *            component instance the filter and sort comparator are bound to\n+     * @return query instance\n      */\n-    public static <T> void removeComponentSortComparator(Component component) {\n-        setComponentSortComparator(component, null);\n+    @SuppressWarnings({ \"rawtypes\" })\n+    public static Query getQuery(Component component) {\n+        return getQuery(component, true);\n+    }\n+\n+    /**\n+     * Generates a data query with component's in-memory filter and sort\n+     * comparator, which is optionally included if {@code withSorting} is set to\n+     * {@code true}.\n+     * \n+     * @param component\n+     *            component instance the filter and sort comparator are bound to\n+     * @param withSorting\n+     *            if {@code true}, the component's sort comparator will be\n+     *            included in the query.\n+     * @return query instance\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static Query getQuery(Component component, boolean withSorting) {\n+        final Optional<SerializablePredicate<Object>> filter = DataViewUtils\n+                .getComponentFilter(component);\n+\n+        final Optional<SerializableComparator<Object>> sorting = withSorting\n+                ? DataViewUtils.getComponentSortComparator(component)\n+                : Optional.empty();\n+\n+        return new Query(0, Integer.MAX_VALUE, null, sorting.orElse(null),\n+                filter.orElse(null));\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTgzNQ==", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522269835", "bodyText": "apparently this could be null to remove it ?", "author": "pleku", "createdAt": "2020-11-12T17:08:12Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.ComponentUtil;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+/**\n+ * Internal utility class used by data view implementations and components to\n+ * simplify the filtering and sorting handling, but not limited to it.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ */\n+public final class DataViewUtils {\n+\n+    private static final String COMPONENT_IN_MEMORY_FILTER_KEY = \"component-in-memory-filter-key\";\n+    private static final String COMPONENT_IN_MEMORY_SORTING_KEY = \"component-in-memory-sorting-key\";\n+\n+    private DataViewUtils() {\n+        // avoid instantiating utility class\n+    }\n+\n+    /**\n+     * Gets the in-memory filter of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory filter.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializablePredicate<T>> getComponentFilter(\n+            Component component) {\n+        return Optional.ofNullable((SerializablePredicate<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_FILTER_KEY));\n+    }\n+\n+    /**\n+     * Gets the in-memory sort comparator of a given component instance.\n+     *\n+     * @param component\n+     *            component instance the sort comparator is bound to\n+     * @param <T>\n+     *            item type\n+     * @return optional component's in-memory sort comparator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<SerializableComparator<T>> getComponentSortComparator(\n+            Component component) {\n+        return Optional.ofNullable((SerializableComparator<T>) ComponentUtil\n+                .getData(component, COMPONENT_IN_MEMORY_SORTING_KEY));\n+    }\n+\n+    /**\n+     * Sets the in-memory filter to a given component instance.\n+     *\n+     * @param component\n+     *            component instance the filter is bound to\n+     * @param filter\n+     *            component's in-memory filter\n+     * @param <T>\n+     *            items type\n+     */\n+    public static <T> void setComponentFilter(Component component,\n+            SerializablePredicate<T> filter) {", "originalCommit": "1450fe19d136dcb454696ccc113eb0aef18d87a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2OTUwMA==", "url": "https://github.com/vaadin/flow/pull/9391#discussion_r522369500", "bodyText": "Yeah, added the explanations about it", "author": "mshabarov", "createdAt": "2020-11-12T19:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI2OTgzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d79914437c7cbb96de3f7d28fafd901d791c8cbf", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java\nindex 5ef10c941f..6cb03e926c 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataViewUtils.java\n\n@@ -104,26 +104,54 @@ public final class DataViewUtils {\n     }\n \n     /**\n-     * Removes the in-memory filter from a given component instance.\n+     * Removes the in-memory filter and sort comparator from a given component\n+     * instance.\n      *\n      * @param component\n-     *            component instance the filter is removed from\n-     * @param <T>\n-     *            items type\n+     *            component instance the filter and sort comparator are removed\n+     *            from\n      */\n-    public static <T> void removeComponentFilter(Component component) {\n+    public static void removeComponentFilterAndSortComparator(\n+            Component component) {\n         setComponentFilter(component, null);\n+        setComponentSortComparator(component, null);\n     }\n \n     /**\n-     * Removes the in-memory sort comparator from a given component instance.\n+     * Generates a data query with component's in-memory filter and sort\n+     * comparator.\n      *\n      * @param component\n-     *            component instance the sort comparator is removed from\n-     * @param <T>\n-     *            items type\n+     *            component instance the filter and sort comparator are bound to\n+     * @return query instance\n      */\n-    public static <T> void removeComponentSortComparator(Component component) {\n-        setComponentSortComparator(component, null);\n+    @SuppressWarnings({ \"rawtypes\" })\n+    public static Query getQuery(Component component) {\n+        return getQuery(component, true);\n+    }\n+\n+    /**\n+     * Generates a data query with component's in-memory filter and sort\n+     * comparator, which is optionally included if {@code withSorting} is set to\n+     * {@code true}.\n+     * \n+     * @param component\n+     *            component instance the filter and sort comparator are bound to\n+     * @param withSorting\n+     *            if {@code true}, the component's sort comparator will be\n+     *            included in the query.\n+     * @return query instance\n+     */\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public static Query getQuery(Component component, boolean withSorting) {\n+        final Optional<SerializablePredicate<Object>> filter = DataViewUtils\n+                .getComponentFilter(component);\n+\n+        final Optional<SerializableComparator<Object>> sorting = withSorting\n+                ? DataViewUtils.getComponentSortComparator(component)\n+                : Optional.empty();\n+\n+        return new Query(0, Integer.MAX_VALUE, null, sorting.orElse(null),\n+                filter.orElse(null));\n     }\n }\n"}}, {"oid": "d79914437c7cbb96de3f7d28fafd901d791c8cbf", "url": "https://github.com/vaadin/flow/commit/d79914437c7cbb96de3f7d28fafd901d791c8cbf", "message": "Exclude unnecessary generic type and add more util methods", "committedDate": "2020-11-12T19:22:39Z", "type": "commit"}, {"oid": "d3400f17b6cfbcff17df8398300e38b52cb42710", "url": "https://github.com/vaadin/flow/commit/d3400f17b6cfbcff17df8398300e38b52cb42710", "message": "Clarify javadoc regarding null values", "committedDate": "2020-11-12T19:31:28Z", "type": "commit"}, {"oid": "d317dcdb37ff83141b49da4f2a6f933544379f27", "url": "https://github.com/vaadin/flow/commit/d317dcdb37ff83141b49da4f2a6f933544379f27", "message": "Remove unnecessary generic type in util methods", "committedDate": "2020-11-13T07:36:11Z", "type": "commit"}, {"oid": "d03760c716d80a00553a3cdec8d7aeb334c9d948", "url": "https://github.com/vaadin/flow/commit/d03760c716d80a00553a3cdec8d7aeb334c9d948", "message": "Back to generic type in utils methods", "committedDate": "2020-11-13T07:50:32Z", "type": "commit"}, {"oid": "e21c73591a1ad47fdbaea2b90de9080d23c61b02", "url": "https://github.com/vaadin/flow/commit/e21c73591a1ad47fdbaea2b90de9080d23c61b02", "message": "Change callback name to reflect its meaning", "committedDate": "2020-11-14T18:54:58Z", "type": "commit"}, {"oid": "7dcc49c26d96cd54883dc1f2efa7053db258dab7", "url": "https://github.com/vaadin/flow/commit/7dcc49c26d96cd54883dc1f2efa7053db258dab7", "message": "Merge remote-tracking branch 'origin/master' into 8655-filter-and-sort-fix", "committedDate": "2020-11-14T18:55:11Z", "type": "commit"}, {"oid": "b24cad86d560a5b743baf864ff5fb6648ed99a32", "url": "https://github.com/vaadin/flow/commit/b24cad86d560a5b743baf864ff5fb6648ed99a32", "message": "Fix error message in test", "committedDate": "2020-11-16T06:13:25Z", "type": "commit"}]}