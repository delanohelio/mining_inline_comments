{"pr_number": 8613, "pr_title": "Merge feature/dataprovider to master", "pr_createdAt": "2020-06-24T10:04:05Z", "pr_url": "https://github.com/vaadin/flow/pull/8613", "timeline": [{"oid": "e2ce07cfa61065a78bd85fd1654e3a7f4bc2192d", "url": "https://github.com/vaadin/flow/commit/e2ce07cfa61065a78bd85fd1654e3a7f4bc2192d", "message": "Add grid submodule", "committedDate": "2020-04-03T07:36:52Z", "type": "commit"}, {"oid": "c8435025127a61e9a3740bbb8541620dbcb71065", "url": "https://github.com/vaadin/flow/commit/c8435025127a61e9a3740bbb8541620dbcb71065", "message": "Adjust Grid code to work with Flow 3.1", "committedDate": "2020-04-03T10:02:41Z", "type": "commit"}, {"oid": "48573e5e6fa7c42fc08d49b0a26402547c4337ec", "url": "https://github.com/vaadin/flow/commit/48573e5e6fa7c42fc08d49b0a26402547c4337ec", "message": "Add combo-box submodule\n\nAdds the combo-box dataprovider\nfeature branch as a submodule.", "committedDate": "2020-04-03T10:48:37Z", "type": "commit"}, {"oid": "18e61ff51be8a4a7c07ccd23c64c5a621bcbf25f", "url": "https://github.com/vaadin/flow/commit/18e61ff51be8a4a7c07ccd23c64c5a621bcbf25f", "message": "Update combobox for flow 3.1", "committedDate": "2020-04-06T04:39:38Z", "type": "commit"}, {"oid": "600ae4407fca2132cb322913a577b0111697c86e", "url": "https://github.com/vaadin/flow/commit/600ae4407fca2132cb322913a577b0111697c86e", "message": "Update grid dep", "committedDate": "2020-04-06T07:52:39Z", "type": "commit"}, {"oid": "b8adf0cbb85577c8a56e1725e0d63405b21a0946", "url": "https://github.com/vaadin/flow/commit/b8adf0cbb85577c8a56e1725e0d63405b21a0946", "message": "Merge branch 'feature/dataprovider' of github.com:vaadin/flow into feature/dataprovider", "committedDate": "2020-04-06T07:53:29Z", "type": "commit"}, {"oid": "4a216b1e23306eb19cf3e253aa6f0fc6da6be77c", "url": "https://github.com/vaadin/flow/commit/4a216b1e23306eb19cf3e253aa6f0fc6da6be77c", "message": "Add component (maven) submodules", "committedDate": "2020-04-06T09:53:37Z", "type": "commit"}, {"oid": "f2b5b82b4b963a828f4df6ea7f252ba5869e1b20", "url": "https://github.com/vaadin/flow/commit/f2b5b82b4b963a828f4df6ea7f252ba5869e1b20", "message": "Add grid submodule", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "3ebf2cd3766d040505e85981b1053d6129727f71", "url": "https://github.com/vaadin/flow/commit/3ebf2cd3766d040505e85981b1053d6129727f71", "message": "Adjust Grid code to work with Flow 3.1", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "64e73d89e41622640a825976de34da14d3b14aae", "url": "https://github.com/vaadin/flow/commit/64e73d89e41622640a825976de34da14d3b14aae", "message": "Update grid dep", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "b89d615d064bb6f2e459d0d1be42b9b3cb209d2e", "url": "https://github.com/vaadin/flow/commit/b89d615d064bb6f2e459d0d1be42b9b3cb209d2e", "message": "Add combo-box submodule\n\nAdds the combo-box dataprovider\nfeature branch as a submodule.", "committedDate": "2020-04-17T12:26:03Z", "type": "commit"}, {"oid": "03824b0c4afacb930a973b0739fa7be1a6d32766", "url": "https://github.com/vaadin/flow/commit/03824b0c4afacb930a973b0739fa7be1a6d32766", "message": "Update combobox for flow 3.1", "committedDate": "2020-04-17T12:26:04Z", "type": "commit"}, {"oid": "b3dca381896ff75e8fea8e6bfd60500a774fb956", "url": "https://github.com/vaadin/flow/commit/b3dca381896ff75e8fea8e6bfd60500a774fb956", "message": "Add component (maven) submodules", "committedDate": "2020-04-17T12:26:04Z", "type": "commit"}, {"oid": "e8d412a0ee93906b5fc91285ddb34dc55c3c6225", "url": "https://github.com/vaadin/flow/commit/e8d412a0ee93906b5fc91285ddb34dc55c3c6225", "message": "Merge branch 'feature/dataprovider' of https://github.com/vaadin/flow into feature/dataprovider", "committedDate": "2020-04-17T12:34:01Z", "type": "commit"}, {"oid": "429ac6b4c012178e09475640c790a40e9da2a305", "url": "https://github.com/vaadin/flow/commit/429ac6b4c012178e09475640c790a40e9da2a305", "message": "Merge branch 'master' into feature/dataprovider", "committedDate": "2020-05-07T08:18:54Z", "type": "commit"}, {"oid": "af015bec798adef528993406682e215d3c71d24c", "url": "https://github.com/vaadin/flow/commit/af015bec798adef528993406682e215d3c71d24c", "message": "Add new interfaces (#8276)\n\n* Add new interfaces\r\n\r\nAdd new DataView interfaces\r\nand their mixin interfaces.\r\n\r\nFix sub-modules for 3.2\r\n\r\nFixes #8267\r\n\r\n* Add missing new line", "committedDate": "2020-05-08T09:40:24Z", "type": "commit"}, {"oid": "97da10b21de9065c2ac6f7b2489c4f5063fe2606", "url": "https://github.com/vaadin/flow/commit/97da10b21de9065c2ac6f7b2489c4f5063fe2606", "message": "Take DataView concept into use #141 (#8303)\n\nCloses #8303", "committedDate": "2020-05-18T07:27:00Z", "type": "commit"}, {"oid": "1d7cdb40727e9a7b8685051c64f32022ef964c13", "url": "https://github.com/vaadin/flow/commit/1d7cdb40727e9a7b8685051c64f32022ef964c13", "message": "Adds unit test for AbstractListDataView\n\nRelated to vaadin/vaadin-checkbox-group#141", "committedDate": "2020-05-19T09:10:04Z", "type": "commit"}, {"oid": "461b97ec0dcb9cef71407d43ef98b034f1b4cbb6", "url": "https://github.com/vaadin/flow/commit/461b97ec0dcb9cef71407d43ef98b034f1b4cbb6", "message": "Grid support methods (#8369)\n\n* GridListDataView support additions\r\n\r\n* Update Grid module target\r\n\r\n* Move component under feature profile.\r\n\r\n* Change to Query", "committedDate": "2020-05-19T10:00:12Z", "type": "commit"}, {"oid": "340f23fb8757b076fc0a62a8e80eb1e033e24f24", "url": "https://github.com/vaadin/flow/commit/340f23fb8757b076fc0a62a8e80eb1e033e24f24", "message": "Update grid and checkbox submodules", "committedDate": "2020-05-20T04:42:44Z", "type": "commit"}, {"oid": "40199e5e8113129d2d755a37606c21d2fb41d766", "url": "https://github.com/vaadin/flow/commit/40199e5e8113129d2d755a37606c21d2fb41d766", "message": "implement AbstractNavigationStateRenderer to handle server->client forwarding (#8170)\n\n* Handle unknown forward route in client side UI\n* Remove TransactionOutcome and unused private methods\n* Clean urlPathShouldBeDisplayed.", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "e92899aca2e1bd27f61d61395e07ceab7c737bb9", "url": "https://github.com/vaadin/flow/commit/e92899aca2e1bd27f61d61395e07ceab7c737bb9", "message": "Live-reload: the ball in the slider takes on another shade of gray when disabled (#8284)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "bba441f1aa5353bf7ac9790c32a769589dbcd089", "url": "https://github.com/vaadin/flow/commit/bba441f1aa5353bf7ac9790c32a769589dbcd089", "message": "Remove JRebel plugin. (#8287)\n\nFixes #8224", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "8f73c796af18755cba818585a6e6c8009fbebd1d", "url": "https://github.com/vaadin/flow/commit/8f73c796af18755cba818585a6e6c8009fbebd1d", "message": "Live-reload: Accept push target parameter `liveReloadPath`. (#8280)\n\nThis handles non-default paths when establishing the push connection (e.g. Vaadin Spring expects `/vaadinServlet`).", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "84065fc9a687610da946b9127a84693b49ca6f96", "url": "https://github.com/vaadin/flow/commit/84065fc9a687610da946b9127a84693b49ca6f96", "message": "Force live-reload ITs to run in sequence using `@NotThreadSafe` rather than locks (#8279)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "c49b6458f9123046734154c9c80eed253bf5f7ae", "url": "https://github.com/vaadin/flow/commit/c49b6458f9123046734154c9c80eed253bf5f7ae", "message": "Store vaadin hash to node_modules (#8282)\n\nTo notice outside changes to package.json\r\nbetter we add the hash to node_modules\r\nso we can cross check the value.\r\n\r\nFixes #8182", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "84e0d4cc150d08637c69aec1a6e7db0e9aea7866", "url": "https://github.com/vaadin/flow/commit/84e0d4cc150d08637c69aec1a6e7db0e9aea7866", "message": "Url parameter template support. (#7608)\n\n* Initial model test with no parameters\n\n* Working on test with eligible parameters disabled.\n\n* Test eligible parameters.\n\n* Starting integration with ConfigureRoutes\n\n* Transform path for HasUrlParameter\n\n* While adding urlParameters to BeforeEvent.\n\n* setParameter invoked with ___url_parameter.\n\n* Fix reroute test\n\n* Create UrlParameters container\n\n* Fix NPE\n\n* Handle varargs.\n\n* Add RouteModel\n\n* Fix RouteModelTest\n\n* Look for target in optional children.\n\n* Handle wildcard transformation from list into UrlParameters\n\n* Remove regex test\n\n* Add @Route and @RoutePrefix test.\n\n* Working on regex tests\n\n* Store parameter patterns segments in insertion order.\n\n* Improving parameter tests.\n\n* Converting to UrlParameters.\n\n* Handle ambigous exceptions.\n\n* Remove lower level exception.\n\n* UrlParameters compatibility and fix more tests\n\n* Fix root bug\n\n* Add getTargetRoute API.\n\n* Working to clone the model.\n\n* Fixing tests\n\n* Remove UriTemplate.\n\n* Add getUrlTemplage. Fix tests.\n\n* Change format to match with path-to-regexp.\n\n* Remove RouteConfigurationException\n\n* Move test url params in RoutePrefix.\n\n* Fix tests.\n\n* Providing RouteTarget in NavigationStatus.\n\n* Use router layouts from RouteTarget when handle a UI request.\n\n* Fix sonar\n\n* Revert BootstrapUtils change.\n\n* Fix sonar\n\n* Fix header\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix compile error\n\n* Use only regex for parameter type.\n\n* Fix sonar\n\n* Simplify regex names\n\n* Rename pathTemplate to urlTemplate\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix compilation\n\n* Fix test\n\n* Remove FIXME and make RouteFormat internal.\n\n* Fix NavigationState bug.\n\n* Remove urlParameters null check.\n\n* Fix sonar\n\n* Remove primitive type logic.\n\n* Move RouteTarget back to server.startup\n\n* Make NavigationState methods public again.\n\n* Rename to urlTemplate. Change if (routeLayoutTypes == null).\n\n* Use Optional with UrlParameters.\n\n* Fix sonar\n\n* Change parameter type back. Add .\n\n* Add removed method back.\n\n* Add UI.navigate with url params test.\n\n* Add tests.\n\n* Deprecate more methods to make them internal.\n\n* Fix.\n\n* Fix.\n\n* Refactor recursion.\n\n* Fix bug\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Undeprecate RouteTarget and NavigationState.\n\n* Undeprecate NavigationState.\n\n* Fix some of the review comments.\n\n* Fix review comments.\n\n* Fix sonar.\n\n* Document RoutePrefix with parameter templates\n\n* Add tests.\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix getUrl implementation in RouteModel and add more tests.\n\n* Merge branch 'master' into bu/route-parameters\n\n* Add test for reroute. Working on RouterLink.\n\n* Add UrlParameters to RouterLink.\n\n* Add RouteModel tests\n\n* Add TODOs\n\n* Add RouteModel tests, getRoutes() and RouteParameterData\n\n* Fix sonar\n\n* Remove Serializable from RouteSegmentValue\n\n* Remove UnsupportedOperationException from getParameters in RouteBaseData\n\n* Ignore serializable in RouteSegmentValue\n\n* Fix comments.\n\n* Rename to reroute target and forward target\n\n* Fix comments\n\n* Fix comments\n\n* Fix sonar\n\n* Fix comments\n\n* Fix comments\n\n* Move RouteTarget to router.internal\n\n* Rename UrlParameters to RouteParameters.\n\n* Fix sonar\n\n* Add isPathAvailable\n\n* Rename to just template. Fix route remove with path and class.\n\n* Update javadoc\n\n* Fix comments\n\n* Fix comments\n\n* Fix sonar\n\n* Fix rename mistake of getUrlParameters. Rename getDefinedParameter into getRouteParameters.\n\n* Remove Boolean from RouteParameters\n\n* Make RouteSegmentValue static\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix comments\n\n* Fix comments.\n\n* Revert js renames.\n\n* Fix comments.\n\n* Fix comments.\n\n* Fix comments\n\n* Fix comment\n\n* Fix comments\n\n* Fix comments\n\n* Merge branch 'master' into bu/route-parameters", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "005c5acc8ba4773d9aa4e6abf5b0d739163960ef", "url": "https://github.com/vaadin/flow/commit/005c5acc8ba4773d9aa4e6abf5b0d739163960ef", "message": "Clarify message about blocking with the session locked (#8312)\n\n* Clarify message about blocking with the session locked", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "20a29e1714c0bf87cff8c9a08174c1faec5b8811", "url": "https://github.com/vaadin/flow/commit/20a29e1714c0bf87cff8c9a08174c1faec5b8811", "message": "Live reload show message on error (#8206) (#8304)\n\n* Show Live Reload message on error\r\n\r\n* Show Live Reload message on error\r\n\r\n* Unit Test for Error Messages\r\n\r\n* Change Live Reload Error tests\r\n\r\n* Change error message test messages to 1\r\n\r\n* Change error message to analyze\r\n\r\n* Change expected message id to 1\r\n\r\n* Change test to assert.deepEqual\r\n\r\n* Change error messages of Live Reload\r\n\r\nAdd error messages for JSON parsing\r\nPrint a better message when a WebSocket error occurs\r\n\r\n* Fix wrong arguments on Error handling\r\n\r\n* Change VaadinDevmodeGizmo\r\n\r\nChange onclose listener so it only displays Unavailable Live Reload if theres no error state\r\nReturn function if JSON parsing goes wrong", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "8e83cdb0920cb1e5b8dc9b43814e7463508d2b86", "url": "https://github.com/vaadin/flow/commit/8e83cdb0920cb1e5b8dc9b43814e7463508d2b86", "message": "fix: check for TypeVariable in the ExplicitNullableTypeChecker (#8316)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "b555992fb074a2e98ee25caa919a633ed23b00ca", "url": "https://github.com/vaadin/flow/commit/b555992fb074a2e98ee25caa919a633ed23b00ca", "message": "Extract live reload ITs into separate test module (#8324)\n\nLive reload tests must never execute in parallel with other tests since they will trigger a reload\r\nin all open UIs, interfere with concurrently running tests. Having them in a separate test module makes them more isolated. Also test with non-root context.", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "3f9d8683a5d49c00cd2d44ff35bd2ed12bfe5a26", "url": "https://github.com/vaadin/flow/commit/3f9d8683a5d49c00cd2d44ff35bd2ed12bfe5a26", "message": "Removed unnecessary private method (#8357)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "64988610fe0d5f7242b9181d3806f880b13c538c", "url": "https://github.com/vaadin/flow/commit/64988610fe0d5f7242b9181d3806f880b13c538c", "message": "Properly encoded URIs use %20 (#8271)\n\nfixes #5360", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "abfeaf711e39f4db1f6ab15238c0041686190a8f", "url": "https://github.com/vaadin/flow/commit/abfeaf711e39f4db1f6ab15238c0041686190a8f", "message": "Wait for intermediate page to load completely in @PreserveOnRefresh IT (#8338)", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "f19403bd3ff509645097a6e8fbb41a5f9f232a66", "url": "https://github.com/vaadin/flow/commit/f19403bd3ff509645097a6e8fbb41a5f9f232a66", "message": "fix: custom connect client breaks endpoints mapping\n\nPresence of absence of a custom Connect client in `frontend/connect-client.ts` should not affect the URL mapping of the endpoint calls handler on the backend (the way to configure that mapping is to use the `vaadin.endpoint.prefix` application property). There is no need to parse the `connect-client.ts` and try to determine the URL mapping from there.\n\nEarlier, when the support for a custom Connect client was added in https://github.com/vaadin/flow/pull/7944, the code that tried to determine the endpoint handler URL mapping from a custom `connect-client.ts` file had a bug that resulted in an incorrect URL mapping configuration.\n\nThis commit completely removes the link between a custom Connect client and the endpoint handler URL mapping config.\n\nFixes #8364", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "7f0d10595d1e5375a168bbd88dc7603b8f8ac3db", "url": "https://github.com/vaadin/flow/commit/7f0d10595d1e5375a168bbd88dc7603b8f8ac3db", "message": "remove unused import", "committedDate": "2020-05-20T07:18:34Z", "type": "commit"}, {"oid": "4ccd72893a49ee97231ed84682ebc0414f5660fd", "url": "https://github.com/vaadin/flow/commit/4ccd72893a49ee97231ed84682ebc0414f5660fd", "message": "Add list modification methods (#8394)\n\n* Add list modification methods\r\n\r\nAdded to ListDataView the possibility\r\nto addItem(T) and removeItem(T)\r\n\r\nFixes #8382\r\n\r\n* Variable rename and import cleaning", "committedDate": "2020-05-22T06:11:41Z", "type": "commit"}, {"oid": "9cf2110e2b8cd7cb910a548d89c90c586c4cfad5", "url": "https://github.com/vaadin/flow/commit/9cf2110e2b8cd7cb910a548d89c90c586c4cfad5", "message": "Remove DataController (#8418)\n\nDelete DataController and\r\nadd the functionality to abstracts.\r\nAdd size as componentEvent listener.\r\n\r\nFixes #8344", "committedDate": "2020-05-26T08:34:02Z", "type": "commit"}, {"oid": "71934f9d3d88927dcfc3d89e5a577abfc12bd1b9", "url": "https://github.com/vaadin/flow/commit/71934f9d3d88927dcfc3d89e5a577abfc12bd1b9", "message": "Update submodule references", "committedDate": "2020-05-26T09:27:50Z", "type": "commit"}, {"oid": "bad76f1f272788cb313f28ec206910678c882364", "url": "https://github.com/vaadin/flow/commit/bad76f1f272788cb313f28ec206910678c882364", "message": "Add select submodule (#8422)\n\nMove some reusable code to abstract class.", "committedDate": "2020-05-27T05:59:06Z", "type": "commit"}, {"oid": "ea668cb85d5d22f241173d4f7f59206250b01744", "url": "https://github.com/vaadin/flow/commit/ea668cb85d5d22f241173d4f7f59206250b01744", "message": "Some improvements in DataView classes (#8405)\n\n* Remove getAllItemsAsList from AbstractListDataView\r\n\r\n* Make AbstractDataView.dataController private\r\n\r\n* Fix calling getAllItems twice\r\n\r\n* submodule targets\r\n\r\n* Delete unused imports\r\n\r\n* ignore submodule\r\n\r\nCo-authored-by: Mikael Grankvist <mikael.grankvist@vaadin.com>\r\nCo-authored-by: Mikhail Shabarov <mikhail@vaadin.com>", "committedDate": "2020-05-27T10:03:52Z", "type": "commit"}, {"oid": "4b1e81ac2e48e114cfc803a549117e66ac92bc14", "url": "https://github.com/vaadin/flow/commit/4b1e81ac2e48e114cfc803a549117e66ac92bc14", "message": "Update select submodule", "committedDate": "2020-05-27T10:13:50Z", "type": "commit"}, {"oid": "a7da2876b671c279845f49af4d52d37a3b87c6dd", "url": "https://github.com/vaadin/flow/commit/a7da2876b671c279845f49af4d52d37a3b87c6dd", "message": "update checkbox submodule", "committedDate": "2020-05-27T10:26:00Z", "type": "commit"}, {"oid": "44050bc150e5f833ed9acb2e6fa9961f15f8278a", "url": "https://github.com/vaadin/flow/commit/44050bc150e5f833ed9acb2e6fa9961f15f8278a", "message": "New add item methods (#8429)\n\n* New add item methods\r\n\r\nAdded method to add\r\nitem before or after another item.\r\n\r\n* Minor fixes to exception and javadoc.\r\n\r\n* Update javadoc\r\n\r\nNote that item is added to the\r\nunsorted and unfiltered list.", "committedDate": "2020-05-27T12:58:13Z", "type": "commit"}, {"oid": "4d39d69b8832df8a12d1b09a7f04d1267bd9f121", "url": "https://github.com/vaadin/flow/commit/4d39d69b8832df8a12d1b09a7f04d1267bd9f121", "message": "grid submodule", "committedDate": "2020-05-28T04:29:30Z", "type": "commit"}, {"oid": "b5dfda842fe2b3e2412af3c74b5f73a090fa2495", "url": "https://github.com/vaadin/flow/commit/b5dfda842fe2b3e2412af3c74b5f73a090fa2495", "message": "Update grid submodule", "committedDate": "2020-05-28T11:05:04Z", "type": "commit"}, {"oid": "e231f6becd8f9377f0f15b1c7752142e50032b3a", "url": "https://github.com/vaadin/flow/commit/e231f6becd8f9377f0f15b1c7752142e50032b3a", "message": "Add size event firing (#8450)\n\nDataCommunicator now fires size\r\nchange event for the component when\r\ndata size or dataprovider changes.", "committedDate": "2020-05-29T11:04:47Z", "type": "commit"}, {"oid": "a7d00e64444960ba686e5580af9024cb0b96e382", "url": "https://github.com/vaadin/flow/commit/a7d00e64444960ba686e5580af9024cb0b96e382", "message": "AbstractDataView listener test #8345 (#8453)", "committedDate": "2020-05-29T17:30:59Z", "type": "commit"}, {"oid": "7b28d2e74f0aa4e6f56b73fb56279bbec65c3ab7", "url": "https://github.com/vaadin/flow/commit/7b28d2e74f0aa4e6f56b73fb56279bbec65c3ab7", "message": "Update submodules\n\nUpdate grid and select targets.", "committedDate": "2020-06-01T07:42:13Z", "type": "commit"}, {"oid": "0952581823a9bb34b7737e2ca140227ebc7278d5", "url": "https://github.com/vaadin/flow/commit/0952581823a9bb34b7737e2ca140227ebc7278d5", "message": "Add methods for filtering (#8479)\n\nAdded the addFilter and clearFilters\r\nmethods.\r\n\r\nFixes #8313", "committedDate": "2020-06-02T10:04:50Z", "type": "commit"}, {"oid": "cbcc24aeae36748bc59230058f5b57a2d143a0d2", "url": "https://github.com/vaadin/flow/commit/cbcc24aeae36748bc59230058f5b57a2d143a0d2", "message": "JavaDoc fix", "committedDate": "2020-06-04T06:10:00Z", "type": "commit"}, {"oid": "72e0d840cc8fdf5526653103a1534988be72eb6c", "url": "https://github.com/vaadin/flow/commit/72e0d840cc8fdf5526653103a1534988be72eb6c", "message": "Merge branch 'master' into merge/from_master_DP\n\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/component/internal/JavaScriptBootstrapUI.java\n#\tflow-server/src/main/java/com/vaadin/flow/component/internal/JavaScriptNavigationStateRenderer.java\n#\tflow-server/src/main/java/com/vaadin/flow/router/RouterLink.java\n#\tflow-server/src/main/java/com/vaadin/flow/router/internal/AbstractNavigationStateRenderer.java\n#\tflow-server/src/main/java/com/vaadin/flow/router/internal/PathUtil.java\n#\tflow-server/src/test/java/com/vaadin/flow/router/RouterLinkTest.java\n#\tflow-server/src/test/java/com/vaadin/flow/router/RouterTest.java", "committedDate": "2020-06-05T05:16:47Z", "type": "commit"}, {"oid": "04202f9b58f66a2fc6e343f5e4c8982a34da9dd0", "url": "https://github.com/vaadin/flow/commit/04202f9b58f66a2fc6e343f5e4c8982a34da9dd0", "message": "New methods for collections (#8509)\n\n* New methods for collections\r\n\r\nEnable add and remove for\r\ncollection.\r\n\r\npart of #8497\r\n\r\n* Update javaDocs\r\n\r\nadd @see links\r\n\r\n* Format abstract.\r\n\r\n* Fix javadoc references", "committedDate": "2020-06-08T08:40:24Z", "type": "commit"}, {"oid": "46d02d52910ac4a16fcfc419056272f0e1ecd9e5", "url": "https://github.com/vaadin/flow/commit/46d02d52910ac4a16fcfc419056272f0e1ecd9e5", "message": "Address DX feedback for data views #8497 (#8510)", "committedDate": "2020-06-08T10:14:11Z", "type": "commit"}, {"oid": "4c1ecab3d20122dc0e8f946fd30f1aee1eb01dd9", "url": "https://github.com/vaadin/flow/commit/4c1ecab3d20122dc0e8f946fd30f1aee1eb01dd9", "message": "Update component references", "committedDate": "2020-06-09T04:31:45Z", "type": "commit"}, {"oid": "0840dc58a1bd4c9c4c5411a3d5352dbb96e38017", "url": "https://github.com/vaadin/flow/commit/0840dc58a1bd4c9c4c5411a3d5352dbb96e38017", "message": "Update grid", "committedDate": "2020-06-09T06:33:48Z", "type": "commit"}, {"oid": "777325624dba235e27f230c3d6edef0df3bbed1d", "url": "https://github.com/vaadin/flow/commit/777325624dba235e27f230c3d6edef0df3bbed1d", "message": "Update checkbox", "committedDate": "2020-06-09T07:19:24Z", "type": "commit"}, {"oid": "0c740f5f420a34ff1de9dc85c73dc6c9deee7491", "url": "https://github.com/vaadin/flow/commit/0c740f5f420a34ff1de9dc85c73dc6c9deee7491", "message": "Update select", "committedDate": "2020-06-09T07:35:00Z", "type": "commit"}, {"oid": "714e318ca90b85642e2740a32a7282d17d80cffc", "url": "https://github.com/vaadin/flow/commit/714e318ca90b85642e2740a32a7282d17d80cffc", "message": "Add updateItem to DataView #8499 (#8528)", "committedDate": "2020-06-10T06:04:29Z", "type": "commit"}, {"oid": "605990dea90a3147a50dedf9122562728b72e24a", "url": "https://github.com/vaadin/flow/commit/605990dea90a3147a50dedf9122562728b72e24a", "message": "Use setDataSource for setting data. (#8546)\n\npart of vaadin/flow#8189", "committedDate": "2020-06-11T17:50:18Z", "type": "commit"}, {"oid": "290eca14a56302cfaa1e337cc270647ff7d56405", "url": "https://github.com/vaadin/flow/commit/290eca14a56302cfaa1e337cc270647ff7d56405", "message": "Add HasDataView interface (#8559)\n\nAdded the HasDataView interface so that for cases that are not handled by ListDataView or LazyDataView there can still be a return type of DataView.\r\n\r\nPart of #8189", "committedDate": "2020-06-12T13:15:28Z", "type": "commit"}, {"oid": "64cbb52a4c4722df1aacbda8dc786afda9ba1797", "url": "https://github.com/vaadin/flow/commit/64cbb52a4c4722df1aacbda8dc786afda9ba1797", "message": "Protect add- methods in ListDataView from adding the duplicated items #8538 (#8550)\n\n* Protect add- methods in ListDataView from adding the duplicated items #8538\r\n\r\n* Invoke data provider getter once, update the javadoc\r\n\r\n* Rearrange backend collection items in add- methods.\r\n\r\n* Update javadoc to emphasize the reordering on items\r\n\r\n* Delete extra overloaded methods\r\n\r\n* Delete unused import\r\n\r\n* Fix the code review comments\r\n\r\n* Delete extra removeIf method, naming improvements\r\n\r\n* Add a comments for specific item collection adding case\r\n\r\n* Simplify collection type verification", "committedDate": "2020-06-16T11:00:44Z", "type": "commit"}, {"oid": "3f66c8fabc80c0c129d173a037ecd04cbd0ab18e", "url": "https://github.com/vaadin/flow/commit/3f66c8fabc80c0c129d173a037ecd04cbd0ab18e", "message": "Require getDataView() (#8565)\n\nRequire components to implement\r\nthe getDataView() method that\r\nreturns at minimum the generic DataView\r\nbut if created a more specific DataView.\r\n\r\nCo-authored-by: Mikhail Shabarov <61410877+mshabarov@users.noreply.github.com>", "committedDate": "2020-06-16T14:58:28Z", "type": "commit"}, {"oid": "c3c95496b1283f70cf29eaec5138921921c06118", "url": "https://github.com/vaadin/flow/commit/c3c95496b1283f70cf29eaec5138921921c06118", "message": "Update JavaDoc to not make promises (#8568)", "committedDate": "2020-06-17T08:08:20Z", "type": "commit"}, {"oid": "bed7b4c503bd593da9321f7f6ff59a2c5816bf6f", "url": "https://github.com/vaadin/flow/commit/bed7b4c503bd593da9321f7f6ff59a2c5816bf6f", "message": "Fix adding existing item (#8585)\n\n* Fix adding existing item\r\n\r\nIf item is moved from before\r\nthe target item the item index\r\nwas wrong as the old item was removed.\r\n\r\n* Use contains.", "committedDate": "2020-06-18T11:14:06Z", "type": "commit"}, {"oid": "19fb8031663864a3798d460e8e45a3510ff02f67", "url": "https://github.com/vaadin/flow/commit/19fb8031663864a3798d460e8e45a3510ff02f67", "message": "Configure identity provider for a components through the Data View (#8581)", "committedDate": "2020-06-22T12:13:18Z", "type": "commit"}, {"oid": "4a9f60bd38ad2231d9bf92ecafd627a433f84eac", "url": "https://github.com/vaadin/flow/commit/4a9f60bd38ad2231d9bf92ecafd627a433f84eac", "message": "Merge remote-tracking branch 'origin/master' into merge-dp-to-master", "committedDate": "2020-06-24T09:36:11Z", "type": "commit"}, {"oid": "963879f8e045d44a36682f63196b6d1f38d7fcc7", "url": "https://github.com/vaadin/flow/commit/963879f8e045d44a36682f63196b6d1f38d7fcc7", "message": "Delete submodules for components", "committedDate": "2020-06-24T09:48:11Z", "type": "commit"}, {"oid": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "url": "https://github.com/vaadin/flow/commit/5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "message": "Delete submodule packages from tests", "committedDate": "2020-06-24T10:06:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTU0MA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r444811540", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "author": "vaadin-bot", "createdAt": "2020-06-24T10:55:46Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.function.SerializableBiFunction;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.function.SerializableSupplier;\n+import com.vaadin.flow.function.ValueProvider;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n+ *\n+ * @param <T>\n+ *         data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    private static final String COLLECTION_TYPE_ERROR_MESSAGE_PATTERN =\n+            \"DataProvider collection '%s' is not a list.\";\n+\n+    private static final String NULL_COLLECTION_ERROR_MESSAGE =\n+            \"Items collection cannot be null\";\n+\n+    private static final String NULL_ITEM_ERROR_MESSAGE =\n+            \"Item cannot be null\";\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * and verifies the passed data provider is compatible with this\n+     * data view implementation.\n+     *\n+     * @param dataProviderSupplier\n+     *         supplier from which the DataProvider can be gotten\n+     * @param component\n+     *         the component that the dataView is bound to\n+     */\n+    public AbstractListDataView(\n+            SerializableSupplier<DataProvider<T, ?>> dataProviderSupplier,\n+            Component component) {\n+        super(dataProviderSupplier, component);\n+    }\n+\n+    @Override\n+    public Optional<T> getNextItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index < 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index + 1).findFirst();\n+    }\n+\n+    @Override\n+    public Optional<T> getPreviousItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index <= 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index - 1).findFirst();", "originalCommit": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxMTU0OQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r444811549", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "author": "vaadin-bot", "createdAt": "2020-06-24T10:55:47Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.function.SerializableBiFunction;\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializableFunction;\n+import com.vaadin.flow.function.SerializablePredicate;\n+import com.vaadin.flow.function.SerializableSupplier;\n+import com.vaadin.flow.function.ValueProvider;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n+ *\n+ * @param <T>\n+ *         data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    private static final String COLLECTION_TYPE_ERROR_MESSAGE_PATTERN =\n+            \"DataProvider collection '%s' is not a list.\";\n+\n+    private static final String NULL_COLLECTION_ERROR_MESSAGE =\n+            \"Items collection cannot be null\";\n+\n+    private static final String NULL_ITEM_ERROR_MESSAGE =\n+            \"Item cannot be null\";\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * and verifies the passed data provider is compatible with this\n+     * data view implementation.\n+     *\n+     * @param dataProviderSupplier\n+     *         supplier from which the DataProvider can be gotten\n+     * @param component\n+     *         the component that the dataView is bound to\n+     */\n+    public AbstractListDataView(\n+            SerializableSupplier<DataProvider<T, ?>> dataProviderSupplier,\n+            Component component) {\n+        super(dataProviderSupplier, component);\n+    }\n+\n+    @Override\n+    public Optional<T> getNextItem(T item) {\n+        int index = getItemIndex(item);\n+        if (index < 0) {\n+            return Optional.empty();\n+        }\n+        return getItems().skip(index + 1).findFirst();", "originalCommit": "5227aef6dd29ef49e0d826b10ce69a50f4e4425c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "url": "https://github.com/vaadin/flow/commit/a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "message": "Fix tests names, few more tests added", "committedDate": "2020-06-24T14:26:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAxODI1NA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446018254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Data will use set filters and sorting.\n          \n          \n            \n                 * Data is filtered and sorted the same way as in the component.", "author": "pleku", "createdAt": "2020-06-26T07:36:24Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fdf79714001ebbfd1731287f766742114580de9", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..57a1e13cff 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n\n@@ -34,7 +34,7 @@ public interface DataView<T> extends Serializable {\n \n     /**\n      * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Data is filtered and sorted the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n"}}, {"oid": "4fdf79714001ebbfd1731287f766742114580de9", "url": "https://github.com/vaadin/flow/commit/4fdf79714001ebbfd1731287f766742114580de9", "message": "Improve getItems javadoc\n\nCo-authored-by: Pekka Hyv\u00f6nen <pekka@vaadin.com>", "committedDate": "2020-06-26T07:42:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzEzMw==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446023133", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the full data size with filters if any set.\n          \n          \n            \n                 * Gets the size of the data source with filters applied if any are set.", "author": "pleku", "createdAt": "2020-06-26T07:47:02Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n\n@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMzYwNw==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446023607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 */\n          \n          \n            \n                 * @see #addSizeChangeListener(ComponentEventListener<SizeChangeEvent<?>>)\n          \n          \n            \n                 */", "author": "pleku", "createdAt": "2020-06-26T07:47:59Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n\n@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTQxMg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446025412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Sets identity provider to be used for getting item identifier and\n          \n          \n            \n                 * Sets an identifier provider, which returns an identifier for the given item.\n          \n          \n            \n                 * The identified is used for comparing the equality of items. Usage example:\n          \n          \n            \n                 * {@code dataView.setIdentifiedProvider(Item::getId);}.\n          \n          \n            \n                 *", "author": "pleku", "createdAt": "2020-06-26T07:51:38Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */\n+    int getSize();\n+\n+    /**\n+     * Check if item is in the current data.\n+     * Item may be filtered out or for lazy data not in the currently loaded\n+     * making it un-available.\n+     * <p>\n+     * By default, {@code equals} method implementation of the item is used\n+     * for identity check. If a custom data provider is used,\n+     * then the {@link DataProvider#getId(Object)} method is used instead.\n+     * Item's custom identity can be set up with a\n+     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     *\n+     * @param item\n+     *         item to search for\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    boolean contains(T item);\n+\n+    /**\n+     * Add a size change listener that is fired when the data set size changes.\n+     * This can happen for instance when filtering the data set.\n+     * <p>\n+     * Size change listener is bound to the component and will be retained even\n+     * if the data changes by setting of a new items or {@link DataProvider} to\n+     * component.\n+     *\n+     * @param listener\n+     *         size change listener to register\n+     * @return registration for removing the listener\n+     */\n+    Registration addSizeChangeListener(\n+            ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets identity provider to be used for getting item identifier and", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n\n@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyNTgzMg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446025832", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * compare the items using that identifier.\n          \n      \n    \n    \n  \n\nThere is nothing \"compared\" as to me that refers to sorting.", "author": "pleku", "createdAt": "2020-06-26T07:52:25Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+import com.vaadin.flow.component.ComponentEventListener;\n+import com.vaadin.flow.shared.Registration;\n+\n+/**\n+ * Base view interface for getting information on current\n+ * data set of a Component.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface DataView<T> extends Serializable {\n+\n+    /**\n+     * Get the full data available to the component.\n+     * Data will use set filters and sorting.\n+     *\n+     * @return filtered and sorted data set\n+     */\n+    Stream<T> getItems();\n+\n+    /**\n+     * Get the full data size with filters if any set.\n+     *\n+     * @return filtered data size\n+     */\n+    int getSize();\n+\n+    /**\n+     * Check if item is in the current data.\n+     * Item may be filtered out or for lazy data not in the currently loaded\n+     * making it un-available.\n+     * <p>\n+     * By default, {@code equals} method implementation of the item is used\n+     * for identity check. If a custom data provider is used,\n+     * then the {@link DataProvider#getId(Object)} method is used instead.\n+     * Item's custom identity can be set up with a\n+     * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n+     *\n+     * @param item\n+     *         item to search for\n+     * @return true if item is found in the available data\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    boolean contains(T item);\n+\n+    /**\n+     * Add a size change listener that is fired when the data set size changes.\n+     * This can happen for instance when filtering the data set.\n+     * <p>\n+     * Size change listener is bound to the component and will be retained even\n+     * if the data changes by setting of a new items or {@link DataProvider} to\n+     * component.\n+     *\n+     * @param listener\n+     *         size change listener to register\n+     * @return registration for removing the listener\n+     */\n+    Registration addSizeChangeListener(\n+            ComponentEventListener<SizeChangeEvent<?>> listener);\n+\n+    /**\n+     * Sets identity provider to be used for getting item identifier and\n+     * compare the items using that identifier.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\nindex 9f13d77d04..4cba22a53f 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java\n\n@@ -23,43 +23,43 @@ import com.vaadin.flow.component.ComponentEventListener;\n import com.vaadin.flow.shared.Registration;\n \n /**\n- * Base view interface for getting information on current\n- * data set of a Component.\n+ * Base view interface for getting information on current data set of a\n+ * Component.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @since\n  */\n public interface DataView<T> extends Serializable {\n \n     /**\n-     * Get the full data available to the component.\n-     * Data will use set filters and sorting.\n+     * Get the full data available to the component. Data is filtered and sorted\n+     * the same way as in the component.\n      *\n      * @return filtered and sorted data set\n      */\n     Stream<T> getItems();\n \n     /**\n-     * Get the full data size with filters if any set.\n+     * Gets the size of the data source with filters applied if any are set.\n      *\n      * @return filtered data size\n+     * @see #addSizeChangeListener(ComponentEventListener)\n      */\n     int getSize();\n \n     /**\n-     * Check if item is in the current data.\n-     * Item may be filtered out or for lazy data not in the currently loaded\n-     * making it un-available.\n+     * Check if item is in the current data. Item may be filtered out or for\n+     * lazy data not in the currently loaded making it un-available.\n      * <p>\n-     * By default, {@code equals} method implementation of the item is used\n-     * for identity check. If a custom data provider is used,\n-     * then the {@link DataProvider#getId(Object)} method is used instead.\n-     * Item's custom identity can be set up with a\n+     * By default, {@code equals} method implementation of the item is used for\n+     * identity check. If a custom data provider is used, then the\n+     * {@link DataProvider#getId(Object)} method is used instead. Item's custom\n+     * identity can be set up with a\n      * {@link DataView#setIdentifierProvider(IdentifierProvider)}.\n      *\n      * @param item\n-     *         item to search for\n+     *            item to search for\n      * @return true if item is found in the available data\n      *\n      * @see #setIdentifierProvider(IdentifierProvider)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTUzOA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446029538", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Interface that defines methods for setting data.\n          \n          \n            \n             * A mixin interface for components that accept setting a data source\n          \n          \n            \n             * of the generic types {@link DataProvider} and {@link InMemoryDataProvider}.\n          \n          \n            \n             * The methods return a {@link DataView} which has the generic API\n          \n          \n            \n             * for getting information on the data.", "author": "pleku", "createdAt": "2020-06-26T08:00:15Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTY2Ng==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446029666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This will return a {@link DataView}.", "author": "pleku", "createdAt": "2020-06-26T08:00:29Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMDUxNw==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446030517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Set a generic data provider for the component to use.\n          \n          \n            \n                 * Set a generic data provider for the component to use and\n          \n          \n            \n                 * returns the base {@link DataView} that provides API to get\n          \n          \n            \n                 * information on the data.", "author": "pleku", "createdAt": "2020-06-26T08:02:20Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTM5NQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446031395", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It is suggested to use a more specific target from {@link\n          \n          \n            \n                 * This method should be used only when the data provider type\n          \n          \n            \n                 * is not either {@link ListDataProvider} or {@link LBackendDataProvider}.", "author": "pleku", "createdAt": "2020-06-26T08:04:18Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMTUzNg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446031536", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * HasListDataView} or {@link HasLazyDataView}", "author": "pleku", "createdAt": "2020-06-26T08:04:35Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjQzNg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446032436", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return DataView instance\n          \n          \n            \n                 * @return DataView providing information on the data", "author": "pleku", "createdAt": "2020-06-26T08:06:30Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}\n+     *\n+     * @param dataProvider\n+     *         DataProvider instance to use\n+     * @return DataView instance", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAzMjY3Ng==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446032676", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return DataView instance\n          \n          \n            \n                 * @return DataView providing information on the data", "author": "pleku", "createdAt": "2020-06-26T08:07:01Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting data.\n+ * This will return a {@link DataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n+\n+    /**\n+     * Set a generic data provider for the component to use.\n+     * <p>\n+     * It is suggested to use a more specific target from {@link\n+     * HasListDataView} or {@link HasLazyDataView}\n+     *\n+     * @param dataProvider\n+     *         DataProvider instance to use\n+     * @return DataView instance\n+     */\n+    V setDataSource(DataProvider<T, ?> dataProvider);\n+\n+    /**\n+     * Sets an InMemory data provider for the component to use.\n+     * <p>\n+     * Note! Using a {@link ListDataProvider} instead of a {@link\n+     * InMemoryDataProvider} is recommended to get access to {@link\n+     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     *\n+     * @param dataProvider\n+     *         InMemoryDataProvider to use\n+     * @return DataView instance", "originalCommit": "a08ee54aa3de5c24caf6ac0ad72713e90c549cf2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\nindex 2a48d6fca7..a32e4e8818 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/HasDataView.java\n\n@@ -19,39 +19,43 @@ package com.vaadin.flow.data.provider;\n import java.io.Serializable;\n \n /**\n- * Interface that defines methods for setting data.\n- * This will return a {@link DataView}.\n+ * An interface for components that accept setting a data source of the\n+ * generic types {@link DataProvider} and {@link InMemoryDataProvider}. The\n+ * methods return a {@link DataView} which has the generic API for getting\n+ * information on the data.\n  *\n  * @param <T>\n- *         data type\n+ *            data type\n  * @param <V>\n- *         DataView type\n+ *            DataView type\n  * @since\n  */\n public interface HasDataView<T, V extends DataView<T>> extends Serializable {\n \n     /**\n-     * Set a generic data provider for the component to use.\n+     * Set a generic data provider for the component to use and returns the base\n+     * {@link DataView} that provides API to get information on the data.\n      * <p>\n-     * It is suggested to use a more specific target from {@link\n-     * HasListDataView} or {@link HasLazyDataView}\n+     * This method should be used only when the data provider type\n+     * is not either {@link ListDataProvider} or {@link BackEndDataProvider}.\n      *\n      * @param dataProvider\n-     *         DataProvider instance to use\n-     * @return DataView instance\n+     *            DataProvider instance to use\n+     * @return DataView providing information on the data\n      */\n     V setDataSource(DataProvider<T, ?> dataProvider);\n \n     /**\n      * Sets an InMemory data provider for the component to use.\n      * <p>\n-     * Note! Using a {@link ListDataProvider} instead of a {@link\n-     * InMemoryDataProvider} is recommended to get access to {@link\n-     * ListDataView} API by using {@link HasListDataView#setDataSource(ListDataProvider)}.\n+     * Note! Using a {@link ListDataProvider} instead of a\n+     * {@link InMemoryDataProvider} is recommended to get access to\n+     * {@link ListDataView} API by using\n+     * {@link HasListDataView#setDataSource(ListDataProvider)}.\n      *\n      * @param dataProvider\n-     *         InMemoryDataProvider to use\n-     * @return DataView instance\n+     *            InMemoryDataProvider to use\n+     * @return DataView providing information on the data\n      */\n     default V setDataSource(InMemoryDataProvider<T> dataProvider) {\n         return setDataSource((DataProvider<T, ?>) dataProvider);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0MTE1OA==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446041158", "bodyText": "This will make no sense but including it now to not get merge conflicts from the next PR", "author": "pleku", "createdAt": "2020-06-26T08:24:19Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/HasLazyDataView.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Interface that defines methods for setting in memory data.\n+ * This will return a {@link LazyDataView}.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @param <V>\n+ *         DataView type\n+ * @since\n+ */\n+public interface HasLazyDataView<T, V extends LazyDataView<T>> extends", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0NjU0OQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446046549", "bodyText": "This makes no sense in this PR but keeping it as would get merge conflicts otherwise in the next PR", "author": "pleku", "createdAt": "2020-06-26T08:34:38Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/LazyDataView.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * DataView for lazy loaded data.\n+ *\n+ * @param <T>\n+ *         data type\n+ * @since\n+ */\n+public interface LazyDataView<T> extends DataView<T> {", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1OTkxMg==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446059912", "bodyText": "Not used", "author": "pleku", "createdAt": "2020-06-26T09:01:01Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -261,6 +266,51 @@ public void confirmUpdate(int updateId) {\n         };\n     }\n \n+    /**\n+     * This is the latest DataProvider size informed to the client or fetched\n+     * from the DataProvider if client data has not been sent.\n+     *\n+     * @return size of available data\n+     */\n+    public int getDataSize() {\n+        if (resendEntireRange || assumeEmptyClient) {\n+            return getDataProviderSize();\n+        }\n+        return assumedSize;\n+    }\n+\n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 3e45b4849b..67810c89d0 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n\n@@ -279,24 +279,6 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n-    /**\n-     * Get the active keys and order on active data on the client.\n-     *\n-     * @return list of active client data as ordered keys\n-     */\n-    public List<String> getActiveKeyOrdering() {\n-        return Collections.unmodifiableList(activeKeyOrder);\n-    }\n-\n-    /**\n-     * Get the current client item range.\n-     *\n-     * @return range of items on client\n-     */\n-    public Range getRequestedRange() {\n-        return requestedRange;\n-    }\n-\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1OTk2MQ==", "url": "https://github.com/vaadin/flow/pull/8613#discussion_r446059961", "bodyText": "Not used", "author": "pleku", "createdAt": "2020-06-26T09:01:06Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java", "diffHunk": "@@ -261,6 +266,51 @@ public void confirmUpdate(int updateId) {\n         };\n     }\n \n+    /**\n+     * This is the latest DataProvider size informed to the client or fetched\n+     * from the DataProvider if client data has not been sent.\n+     *\n+     * @return size of available data\n+     */\n+    public int getDataSize() {\n+        if (resendEntireRange || assumeEmptyClient) {\n+            return getDataProviderSize();\n+        }\n+        return assumedSize;\n+    }\n+\n+    /**\n+     * Get the active keys and order on active data on the client.\n+     *\n+     * @return list of active client data as ordered keys\n+     */\n+    public List<String> getActiveKeyOrdering() {\n+        return Collections.unmodifiableList(activeKeyOrder);\n+    }\n+\n+    /**\n+     * Get the current client item range.\n+     *\n+     * @return range of items on client\n+     */\n+    public Range getRequestedRange() {", "originalCommit": "4fdf79714001ebbfd1731287f766742114580de9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\nindex 3e45b4849b..67810c89d0 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/DataCommunicator.java\n\n@@ -279,24 +279,6 @@ public class DataCommunicator<T> implements Serializable {\n         return assumedSize;\n     }\n \n-    /**\n-     * Get the active keys and order on active data on the client.\n-     *\n-     * @return list of active client data as ordered keys\n-     */\n-    public List<String> getActiveKeyOrdering() {\n-        return Collections.unmodifiableList(activeKeyOrder);\n-    }\n-\n-    /**\n-     * Get the current client item range.\n-     *\n-     * @return range of items on client\n-     */\n-    public Range getRequestedRange() {\n-        return requestedRange;\n-    }\n-\n     /**\n      * Generate a data query with component sorting and filtering.\n      *\n"}}, {"oid": "a31c41d3e38b5f9ca677306c3d56e36efaadf546", "url": "https://github.com/vaadin/flow/commit/a31c41d3e38b5f9ca677306c3d56e36efaadf546", "message": "Improving javadocs, removing setDataSource(Stream)\n\nAlso formats a lot of javadocs that were not formatted.", "committedDate": "2020-06-26T09:23:41Z", "type": "commit"}, {"oid": "db59ea2000a8ef36461736dea036e0b90352dda2", "url": "https://github.com/vaadin/flow/commit/db59ea2000a8ef36461736dea036e0b90352dda2", "message": "Fix typo in javadoc", "committedDate": "2020-06-26T11:41:28Z", "type": "commit"}]}