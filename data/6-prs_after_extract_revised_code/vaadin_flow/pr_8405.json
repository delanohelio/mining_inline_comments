{"pr_number": 8405, "pr_title": "Some improvements in DataView classes", "pr_createdAt": "2020-05-24T20:25:58Z", "pr_url": "https://github.com/vaadin/flow/pull/8405", "timeline": [{"oid": "c3f5b73d04569202fdd5053a56da6a30f7ea9f7d", "url": "https://github.com/vaadin/flow/commit/c3f5b73d04569202fdd5053a56da6a30f7ea9f7d", "message": "Remove getAllItemsAsList from AbstractListDataView", "committedDate": "2020-05-24T12:54:19Z", "type": "commit"}, {"oid": "30f37e7276c3c4a9388f661295fae23727858155", "url": "https://github.com/vaadin/flow/commit/30f37e7276c3c4a9388f661295fae23727858155", "message": "Make AbstractDataView.dataController private", "committedDate": "2020-05-24T13:30:30Z", "type": "commit"}, {"oid": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "url": "https://github.com/vaadin/flow/commit/cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "message": "Merge branch 'feature/dataprovider' into changes-in-data-classes", "committedDate": "2020-05-24T20:26:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM2Nw==", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676367", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "author": "vaadin-bot", "createdAt": "2020-05-24T21:18:19Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();", "originalCommit": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da63654df6ad8e089e6dd292ab629ddd5384e06", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 1eb7da9780..bd3f4a5f65 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -47,32 +47,35 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if(index < 0)\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n+        if (index < 0)\n             return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+        return allItems.skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index < 0)\n             return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n+        return allItems.skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        int index = getItemIndex(getAllItems(), item);\n         return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index <= 0)\n             return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+        return allItems.skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM2OA==", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676368", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-05-24T21:18:20Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n-        return previousItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index <= 0)\n+            return null;\n+        return getAllItems().skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public AbstractListDataView<T> withFilter(SerializablePredicate<T> filter) {\n-        return withFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n+        return withFilterOrOrder(\n+                dataProvider -> dataProvider.setFilter(filter));\n     }\n \n     @Override\n-    public AbstractListDataView<T> withSortComparator(SerializableComparator<T> sortComparator) {\n-        return withFilterOrOrder(dataProvider -> dataProvider.setSortComparator(sortComparator));\n+    public AbstractListDataView<T> withSortComparator(\n+            SerializableComparator<T> sortComparator) {\n+        return withFilterOrOrder(\n+                dataProvider -> dataProvider.setSortComparator(sortComparator));\n     }\n \n     @Override\n     public Stream<T> getAllItems() {\n-        return dataController.getAllItems();\n+        return getDataController().getAllItems();\n     }\n \n     @Override\n     public int getDataSize() {\n-        return dataController.getDataSize();\n+        return getDataController().getDataSize();\n     }\n \n     @Override\n     public boolean isItemPresent(T item) {\n-        // TODO: delegate this to the data communicator/component, since the equality could be\n-        //  determined by the provided identity checker (the default is equals).\n+        // TODO: delegate this to the data communicator/component, since the", "originalCommit": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da63654df6ad8e089e6dd292ab629ddd5384e06", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 1eb7da9780..bd3f4a5f65 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -47,32 +47,35 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if(index < 0)\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n+        if (index < 0)\n             return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+        return allItems.skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index < 0)\n             return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n+        return allItems.skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        int index = getItemIndex(getAllItems(), item);\n         return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index <= 0)\n             return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+        return allItems.skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM3MA==", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676370", "bodyText": "Cast one of the operands of this subtraction operation to a \"long\".", "author": "vaadin-bot", "createdAt": "2020-05-24T21:18:21Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n-        return previousItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index <= 0)\n+            return null;\n+        return getAllItems().skip(index - 1).findFirst().orElse(null);", "originalCommit": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da63654df6ad8e089e6dd292ab629ddd5384e06", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 1eb7da9780..bd3f4a5f65 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -47,32 +47,35 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if(index < 0)\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n+        if (index < 0)\n             return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+        return allItems.skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index < 0)\n             return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n+        return allItems.skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        int index = getItemIndex(getAllItems(), item);\n         return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index <= 0)\n             return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+        return allItems.skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NjM3MQ==", "url": "https://github.com/vaadin/flow/pull/8405#discussion_r429676371", "bodyText": "Cast one of the operands of this addition operation to a \"long\".", "author": "vaadin-bot", "createdAt": "2020-05-24T21:18:21Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -15,85 +15,94 @@\n  */\n package com.vaadin.flow.data.provider;\n \n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Stream;\n+\n import com.vaadin.flow.function.SerializableComparator;\n import com.vaadin.flow.function.SerializableConsumer;\n import com.vaadin.flow.function.SerializablePredicate;\n \n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n /**\n- * Abstract list data view implementation which provides common methods\n- * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ * Abstract list data view implementation which provides common methods for\n+ * fetching, filtering and sorting in-memory data to all {@link ListDataView}\n+ * subclasses.\n  *\n  * @param <T>\n- *        data type\n+ *            data type\n  */\n public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         implements ListDataView<T, AbstractListDataView<T>> {\n \n     /**\n-     * Creates a new instance of {@link AbstractListDataView} subclass\n-     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     * Creates a new instance of {@link AbstractListDataView} subclass which\n+     * rely on in-memory data set, i.e. data set stored in a collection.\n      *\n      * @param dataController\n-     *          data controller reference\n+     *            data controller reference\n      */\n     public AbstractListDataView(DataController<T> dataController) {\n         super(dataController);\n     }\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+        int index = getItemIndex(item);\n+        if(index < 0)\n+            return false;\n+        return getAllItems().skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        List<T> items = getAllItemsAsList();\n-        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n-        return nextItemIndex.map(items::get).orElse(null);\n+        int index = getItemIndex(item);\n+        if (index < 0)\n+            return null;\n+        return getAllItems().skip(index + 1).findFirst().orElse(null);", "originalCommit": "cd1cfc6c3d3116dda3fb73b51e72a604a05467f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2da63654df6ad8e089e6dd292ab629ddd5384e06", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex 1eb7da9780..bd3f4a5f65 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -47,32 +47,35 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public boolean hasNextItem(T item) {\n-        int index = getItemIndex(item);\n-        if(index < 0)\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n+        if (index < 0)\n             return false;\n-        return getAllItems().skip(index + 1).findAny().isPresent();\n+        return allItems.skip(index + 1).findAny().isPresent();\n     }\n \n     @Override\n     public T getNextItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index < 0)\n             return null;\n-        return getAllItems().skip(index + 1).findFirst().orElse(null);\n+        return allItems.skip(index + 1).findFirst().orElse(null);\n     }\n \n     @Override\n     public boolean hasPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        int index = getItemIndex(getAllItems(), item);\n         return index > 0;\n     }\n \n     @Override\n     public T getPreviousItem(T item) {\n-        int index = getItemIndex(item);\n+        Stream<T> allItems = getAllItems();\n+        int index = getItemIndex(allItems, item);\n         if (index <= 0)\n             return null;\n-        return getAllItems().skip(index - 1).findFirst().orElse(null);\n+        return allItems.skip(index - 1).findFirst().orElse(null);\n     }\n \n     @Override\n"}}, {"oid": "2da63654df6ad8e089e6dd292ab629ddd5384e06", "url": "https://github.com/vaadin/flow/commit/2da63654df6ad8e089e6dd292ab629ddd5384e06", "message": "Fix calling getAllItems twice", "committedDate": "2020-05-25T22:28:17Z", "type": "commit"}, {"oid": "702f5c1ddfb24d2533fd53fa8690a6ca31f64e52", "url": "https://github.com/vaadin/flow/commit/702f5c1ddfb24d2533fd53fa8690a6ca31f64e52", "message": "Merge remote-tracking branch 'origin/changes-in-data-classes' into changes-in-data-classes", "committedDate": "2020-05-25T22:28:47Z", "type": "commit"}, {"oid": "9fe236380372d1cab3243fb31776ab51a45a6dc7", "url": "https://github.com/vaadin/flow/commit/9fe236380372d1cab3243fb31776ab51a45a6dc7", "message": "Merge branch 'feature/dataprovider' into changes-in-data-classes\n\n# Conflicts:\n#\tflow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java\n#\tflow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "committedDate": "2020-05-27T07:44:38Z", "type": "commit"}, {"oid": "25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "url": "https://github.com/vaadin/flow/commit/25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "message": "submodule targets", "committedDate": "2020-05-27T07:58:59Z", "type": "commit"}, {"oid": "25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "url": "https://github.com/vaadin/flow/commit/25e7c6c33a2ac5045a8664dfc46f140a2a67626a", "message": "submodule targets", "committedDate": "2020-05-27T07:58:59Z", "type": "forcePushed"}, {"oid": "6e0443cc5ec3916e8b032e312234b52dc4ccb6cb", "url": "https://github.com/vaadin/flow/commit/6e0443cc5ec3916e8b032e312234b52dc4ccb6cb", "message": "Delete unused imports", "committedDate": "2020-05-27T08:44:23Z", "type": "commit"}, {"oid": "881406cce122008cb9cf2181737856fa57be1197", "url": "https://github.com/vaadin/flow/commit/881406cce122008cb9cf2181737856fa57be1197", "message": "ignore submodule", "committedDate": "2020-05-27T09:10:30Z", "type": "commit"}]}