{"pr_number": 8381, "pr_title": "merge master to feature/forms", "pr_createdAt": "2020-05-19T10:09:02Z", "pr_url": "https://github.com/vaadin/flow/pull/8381", "timeline": [{"oid": "aeb486cb56d6b051facd91cf905cad48cb4d077d", "url": "https://github.com/vaadin/flow/commit/aeb486cb56d6b051facd91cf905cad48cb4d077d", "message": "Remove duplicate plugin execution (#8207)\n\nRemove mistakenly added goal target\r\n\r\nFixes #8033", "committedDate": "2020-04-30T12:20:16Z", "type": "commit"}, {"oid": "a074cce0b19c797c77b48bfd758851152376b5ae", "url": "https://github.com/vaadin/flow/commit/a074cce0b19c797c77b48bfd758851152376b5ae", "message": "pin vaadin router to a specific version (#8225)", "committedDate": "2020-05-04T08:52:44Z", "type": "commit"}, {"oid": "d0294aec6b7080456166bb0c0191b995cca662d3", "url": "https://github.com/vaadin/flow/commit/d0294aec6b7080456166bb0c0191b995cca662d3", "message": "Enable vaadin-prerelease for snapshot (#8165)", "committedDate": "2020-05-05T06:24:37Z", "type": "commit"}, {"oid": "a21f2a7aea0aaf3c9934e3b5779c8db3cf246c79", "url": "https://github.com/vaadin/flow/commit/a21f2a7aea0aaf3c9934e3b5779c8db3cf246c79", "message": "Added \"Vaadin Development Mode\" to development gizmo header to clarify it's not a production mode feature (#8215)", "committedDate": "2020-05-05T07:17:18Z", "type": "commit"}, {"oid": "60da8ea694245b9af057494741bfaf32fd1434c7", "url": "https://github.com/vaadin/flow/commit/60da8ea694245b9af057494741bfaf32fd1434c7", "message": "Lock dev dependencies via new module with generated versions file (#8197)\n\n* Lock all transitive dependency versions\r\n\r\n* Generate all dev dependencies versions into the file based on test\r\nproject\r\n* Put this file into a new artifact\r\n* Read the file from the classpath and produce versions.json based on it\r\n* pnpmfile.js will use the versions.json to choose the version\r\n\r\nFixes #7958", "committedDate": "2020-05-05T09:46:42Z", "type": "commit"}, {"oid": "cf144b01c86e37da087566611ac6086babbf3c60", "url": "https://github.com/vaadin/flow/commit/cf144b01c86e37da087566611ac6086babbf3c60", "message": "Do not print webpack progress output in a production build\n\nProduces around 2000 rows less output in the production build.\nThe progress output for a CI build is not relevant and is in the way\nwhen looking for build problems.", "committedDate": "2020-05-05T15:11:23Z", "type": "commit"}, {"oid": "9f52bd8448b82c545b78a1f7e08a36ccb4bd640e", "url": "https://github.com/vaadin/flow/commit/9f52bd8448b82c545b78a1f7e08a36ccb4bd640e", "message": "Add methods to control validation (#8094)\n\n- Enable / disable all validators on Binder level\r\n- Enable / disable validators on Binding level\r\n- add writeBeanAsDraft(bean,boolean) for writing draft bean with validators disabled\r\n\r\nFixes #5030", "committedDate": "2020-05-06T03:44:45Z", "type": "commit"}, {"oid": "00827e870dd1a5956d42c909655588b9df71523d", "url": "https://github.com/vaadin/flow/commit/00827e870dd1a5956d42c909655588b9df71523d", "message": "Don't throw an exception if servlet class can't be loaded (#8233)\n\n* Don't throw an exception if servlet class can't be loaded\r\n\r\nFixes #8149", "committedDate": "2020-05-06T06:44:05Z", "type": "commit"}, {"oid": "bd69402288e706b463a2136d73c0690074870798", "url": "https://github.com/vaadin/flow/commit/bd69402288e706b463a2136d73c0690074870798", "message": "clean up connect tokens in build info for production (#8253)", "committedDate": "2020-05-06T07:41:34Z", "type": "commit"}, {"oid": "5b8ad0dd64d546f48b6a6c5a3db5f9ba1603e014", "url": "https://github.com/vaadin/flow/commit/5b8ad0dd64d546f48b6a6c5a3db5f9ba1603e014", "message": "Update router version and related tests (#8257)", "committedDate": "2020-05-06T13:53:21Z", "type": "commit"}, {"oid": "072d4503532bfa5dc27b4dc844535d3c6161938a", "url": "https://github.com/vaadin/flow/commit/072d4503532bfa5dc27b4dc844535d3c6161938a", "message": "implement AbstractNavigationStateRenderer to handle server->client forwarding (#8170)\n\n* Handle unknown forward route in client side UI\n* Remove TransactionOutcome and unused private methods\n* Clean urlPathShouldBeDisplayed.", "committedDate": "2020-05-07T12:12:52Z", "type": "commit"}, {"oid": "ad1f2509cc0476e9ec1be738c3a052b5279d222b", "url": "https://github.com/vaadin/flow/commit/ad1f2509cc0476e9ec1be738c3a052b5279d222b", "message": "Live-reload: the ball in the slider takes on another shade of gray when disabled (#8284)", "committedDate": "2020-05-11T05:54:07Z", "type": "commit"}, {"oid": "1100182ebf12fab7675a9d7776b557647fbceeed", "url": "https://github.com/vaadin/flow/commit/1100182ebf12fab7675a9d7776b557647fbceeed", "message": "Remove JRebel plugin. (#8287)\n\nFixes #8224", "committedDate": "2020-05-11T06:09:42Z", "type": "commit"}, {"oid": "022829a1dcd6433072517d059f8114792fd3f919", "url": "https://github.com/vaadin/flow/commit/022829a1dcd6433072517d059f8114792fd3f919", "message": "Live-reload: Accept push target parameter `liveReloadPath`. (#8280)\n\nThis handles non-default paths when establishing the push connection (e.g. Vaadin Spring expects `/vaadinServlet`).", "committedDate": "2020-05-11T06:55:42Z", "type": "commit"}, {"oid": "9c7fe7d4056dc78843d3395cde94c54f5f9a2e34", "url": "https://github.com/vaadin/flow/commit/9c7fe7d4056dc78843d3395cde94c54f5f9a2e34", "message": "Force live-reload ITs to run in sequence using `@NotThreadSafe` rather than locks (#8279)", "committedDate": "2020-05-11T09:19:18Z", "type": "commit"}, {"oid": "2e3fcd4617f44528ce352fb257a007ec894a9326", "url": "https://github.com/vaadin/flow/commit/2e3fcd4617f44528ce352fb257a007ec894a9326", "message": "Store vaadin hash to node_modules (#8282)\n\nTo notice outside changes to package.json\r\nbetter we add the hash to node_modules\r\nso we can cross check the value.\r\n\r\nFixes #8182", "committedDate": "2020-05-11T11:42:42Z", "type": "commit"}, {"oid": "6e6e6e197d115f8ef2718c88b618ba87204d0d23", "url": "https://github.com/vaadin/flow/commit/6e6e6e197d115f8ef2718c88b618ba87204d0d23", "message": "Url parameter template support. (#7608)\n\n* Initial model test with no parameters\n\n* Working on test with eligible parameters disabled.\n\n* Test eligible parameters.\n\n* Starting integration with ConfigureRoutes\n\n* Transform path for HasUrlParameter\n\n* While adding urlParameters to BeforeEvent.\n\n* setParameter invoked with ___url_parameter.\n\n* Fix reroute test\n\n* Create UrlParameters container\n\n* Fix NPE\n\n* Handle varargs.\n\n* Add RouteModel\n\n* Fix RouteModelTest\n\n* Look for target in optional children.\n\n* Handle wildcard transformation from list into UrlParameters\n\n* Remove regex test\n\n* Add @Route and @RoutePrefix test.\n\n* Working on regex tests\n\n* Store parameter patterns segments in insertion order.\n\n* Improving parameter tests.\n\n* Converting to UrlParameters.\n\n* Handle ambigous exceptions.\n\n* Remove lower level exception.\n\n* UrlParameters compatibility and fix more tests\n\n* Fix root bug\n\n* Add getTargetRoute API.\n\n* Working to clone the model.\n\n* Fixing tests\n\n* Remove UriTemplate.\n\n* Add getUrlTemplage. Fix tests.\n\n* Change format to match with path-to-regexp.\n\n* Remove RouteConfigurationException\n\n* Move test url params in RoutePrefix.\n\n* Fix tests.\n\n* Providing RouteTarget in NavigationStatus.\n\n* Use router layouts from RouteTarget when handle a UI request.\n\n* Fix sonar\n\n* Revert BootstrapUtils change.\n\n* Fix sonar\n\n* Fix header\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix compile error\n\n* Use only regex for parameter type.\n\n* Fix sonar\n\n* Simplify regex names\n\n* Rename pathTemplate to urlTemplate\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix compilation\n\n* Fix test\n\n* Remove FIXME and make RouteFormat internal.\n\n* Fix NavigationState bug.\n\n* Remove urlParameters null check.\n\n* Fix sonar\n\n* Remove primitive type logic.\n\n* Move RouteTarget back to server.startup\n\n* Make NavigationState methods public again.\n\n* Rename to urlTemplate. Change if (routeLayoutTypes == null).\n\n* Use Optional with UrlParameters.\n\n* Fix sonar\n\n* Change parameter type back. Add .\n\n* Add removed method back.\n\n* Add UI.navigate with url params test.\n\n* Add tests.\n\n* Deprecate more methods to make them internal.\n\n* Fix.\n\n* Fix.\n\n* Refactor recursion.\n\n* Fix bug\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Fix sonar\n\n* Undeprecate RouteTarget and NavigationState.\n\n* Undeprecate NavigationState.\n\n* Fix some of the review comments.\n\n* Fix review comments.\n\n* Fix sonar.\n\n* Document RoutePrefix with parameter templates\n\n* Add tests.\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix getUrl implementation in RouteModel and add more tests.\n\n* Merge branch 'master' into bu/route-parameters\n\n* Add test for reroute. Working on RouterLink.\n\n* Add UrlParameters to RouterLink.\n\n* Add RouteModel tests\n\n* Add TODOs\n\n* Add RouteModel tests, getRoutes() and RouteParameterData\n\n* Fix sonar\n\n* Remove Serializable from RouteSegmentValue\n\n* Remove UnsupportedOperationException from getParameters in RouteBaseData\n\n* Ignore serializable in RouteSegmentValue\n\n* Fix comments.\n\n* Rename to reroute target and forward target\n\n* Fix comments\n\n* Fix comments\n\n* Fix sonar\n\n* Fix comments\n\n* Fix comments\n\n* Move RouteTarget to router.internal\n\n* Rename UrlParameters to RouteParameters.\n\n* Fix sonar\n\n* Add isPathAvailable\n\n* Rename to just template. Fix route remove with path and class.\n\n* Update javadoc\n\n* Fix comments\n\n* Fix comments\n\n* Fix sonar\n\n* Fix rename mistake of getUrlParameters. Rename getDefinedParameter into getRouteParameters.\n\n* Remove Boolean from RouteParameters\n\n* Make RouteSegmentValue static\n\n* Merge branch 'master' into bu/route-parameters\n\n* Fix comments\n\n* Fix comments.\n\n* Revert js renames.\n\n* Fix comments.\n\n* Fix comments.\n\n* Fix comments\n\n* Fix comment\n\n* Fix comments\n\n* Fix comments\n\n* Merge branch 'master' into bu/route-parameters", "committedDate": "2020-05-12T04:41:11Z", "type": "commit"}, {"oid": "1285a647a5827647c8885d560f527366fd1c5085", "url": "https://github.com/vaadin/flow/commit/1285a647a5827647c8885d560f527366fd1c5085", "message": "Clarify message about blocking with the session locked (#8312)\n\n* Clarify message about blocking with the session locked", "committedDate": "2020-05-12T14:26:19Z", "type": "commit"}, {"oid": "3c39e1d5d73560cfac3090fcd4f96bc9aac71380", "url": "https://github.com/vaadin/flow/commit/3c39e1d5d73560cfac3090fcd4f96bc9aac71380", "message": "Live reload show message on error (#8206) (#8304)\n\n* Show Live Reload message on error\r\n\r\n* Show Live Reload message on error\r\n\r\n* Unit Test for Error Messages\r\n\r\n* Change Live Reload Error tests\r\n\r\n* Change error message test messages to 1\r\n\r\n* Change error message to analyze\r\n\r\n* Change expected message id to 1\r\n\r\n* Change test to assert.deepEqual\r\n\r\n* Change error messages of Live Reload\r\n\r\nAdd error messages for JSON parsing\r\nPrint a better message when a WebSocket error occurs\r\n\r\n* Fix wrong arguments on Error handling\r\n\r\n* Change VaadinDevmodeGizmo\r\n\r\nChange onclose listener so it only displays Unavailable Live Reload if theres no error state\r\nReturn function if JSON parsing goes wrong", "committedDate": "2020-05-13T06:13:22Z", "type": "commit"}, {"oid": "b8afaa9ab8b4beee55801c1628adcb530afe96bc", "url": "https://github.com/vaadin/flow/commit/b8afaa9ab8b4beee55801c1628adcb530afe96bc", "message": "fix: check for TypeVariable in the ExplicitNullableTypeChecker (#8316)", "committedDate": "2020-05-14T09:32:10Z", "type": "commit"}, {"oid": "e441220763ead70b66261fc44c03a89e851632ac", "url": "https://github.com/vaadin/flow/commit/e441220763ead70b66261fc44c03a89e851632ac", "message": "Extract live reload ITs into separate test module (#8324)\n\nLive reload tests must never execute in parallel with other tests since they will trigger a reload\r\nin all open UIs, interfere with concurrently running tests. Having them in a separate test module makes them more isolated. Also test with non-root context.", "committedDate": "2020-05-14T12:39:26Z", "type": "commit"}, {"oid": "f709ac410bc77af801876d4a77ad523112711479", "url": "https://github.com/vaadin/flow/commit/f709ac410bc77af801876d4a77ad523112711479", "message": "Removed unnecessary private method (#8357)", "committedDate": "2020-05-15T12:50:56Z", "type": "commit"}, {"oid": "96926f1df436eba71086a394c3ceeae4797f898a", "url": "https://github.com/vaadin/flow/commit/96926f1df436eba71086a394c3ceeae4797f898a", "message": "Properly encoded URIs use %20 (#8271)\n\nfixes #5360", "committedDate": "2020-05-18T04:24:43Z", "type": "commit"}, {"oid": "f8dcab29068f80ad65480170619cf2817e0847ca", "url": "https://github.com/vaadin/flow/commit/f8dcab29068f80ad65480170619cf2817e0847ca", "message": "Wait for intermediate page to load completely in @PreserveOnRefresh IT (#8338)", "committedDate": "2020-05-18T07:08:08Z", "type": "commit"}, {"oid": "b1ade9fade93536827cb338420d379e5d63cbfba", "url": "https://github.com/vaadin/flow/commit/b1ade9fade93536827cb338420d379e5d63cbfba", "message": "fix: custom connect client breaks endpoints mapping\n\nPresence of absence of a custom Connect client in `frontend/connect-client.ts` should not affect the URL mapping of the endpoint calls handler on the backend (the way to configure that mapping is to use the `vaadin.endpoint.prefix` application property). There is no need to parse the `connect-client.ts` and try to determine the URL mapping from there.\n\nEarlier, when the support for a custom Connect client was added in https://github.com/vaadin/flow/pull/7944, the code that tried to determine the endpoint handler URL mapping from a custom `connect-client.ts` file had a bug that resulted in an incorrect URL mapping configuration.\n\nThis commit completely removes the link between a custom Connect client and the endpoint handler URL mapping config.\n\nFixes #8364", "committedDate": "2020-05-18T12:58:33Z", "type": "commit"}, {"oid": "eaf79379406312e166ec7a4f00cdb139f9e8b01e", "url": "https://github.com/vaadin/flow/commit/eaf79379406312e166ec7a4f00cdb139f9e8b01e", "message": "remove unused import", "committedDate": "2020-05-18T12:58:33Z", "type": "commit"}, {"oid": "6ea63654ca4eef1644af289ca6c962d9d0a549d8", "url": "https://github.com/vaadin/flow/commit/6ea63654ca4eef1644af289ca6c962d9d0a549d8", "message": "Close UI after refreshing the page in PreserveOnRefresh case and mark it (#8365)\n\nFixes #8286", "committedDate": "2020-05-19T07:33:07Z", "type": "commit"}, {"oid": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "url": "https://github.com/vaadin/flow/commit/e09ccac94a63cf8d0c21228206a885bb23bcb15c", "message": "Merge branch 'master' into merge-master", "committedDate": "2020-05-19T10:06:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODI2OQ==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198269", "bodyText": "Rename \"binding\" which hides the field declared at line 772.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:02Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java", "diffHunk": "@@ -849,6 +866,7 @@ protected BindingBuilderImpl(Binder<BEAN> binder,\n                 Binding binding = ((BindingBuilder) finalBinding).bind(getter,", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODI3NQ==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198275", "bodyText": "\"public\" is redundant in this context.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:03Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java", "diffHunk": "@@ -235,6 +235,21 @@\n          *         {@code true} otherwise (default)\n          */\n         public boolean isAsRequiredEnabled();\n+\n+        /**\n+         * Define whether validators are disabled or enabled for this\n+         * specific binding.\n+         *\n+         * @param validatorsDisabled A boolean value.\n+         */\n+        public void setValidatorsDisabled(boolean validatorsDisabled);", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODI5MA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198290", "bodyText": "\"public\" is redundant in this context.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:04Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/binder/Binder.java", "diffHunk": "@@ -235,6 +235,21 @@\n          *         {@code true} otherwise (default)\n          */\n         public boolean isAsRequiredEnabled();\n+\n+        /**\n+         * Define whether validators are disabled or enabled for this\n+         * specific binding.\n+         *\n+         * @param validatorsDisabled A boolean value.\n+         */\n+        public void setValidatorsDisabled(boolean validatorsDisabled);\n+\n+        /**\n+         * Returns if validators are currently disabled or not.\n+         *\n+         * @return A boolean value.\n+         */\n+        public boolean isValidatorsDisabled();", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODMwMA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198300", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:05Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -437,12 +596,41 @@ public void rerouteTo(String route) {\n      * Get the URL parameters of the reroute target.\n      *\n      * @return URL parameters of reroute target\n+     * @throws NullPointerException\n+     *             if no reroute target is set. Check\n+     *             {@link #hasRerouteTarget()} before accessing this method.\n+     * @deprecated use {@link #getRerouteTargetRouteParameters()} instead.\n      */\n+    @Deprecated\n     public List<String> getRerouteTargetParameters() {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODMwOA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198308", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:06Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/BeforeEvent.java", "diffHunk": "@@ -379,39 +495,79 @@ public void rerouteTo(String route) {\n         }\n     }\n \n-    private <T> NavigationState getNavigationState(String route,\n-                                                   List<T> routeParams) {\n+    private <T> NavigationState getNavigationState(String url,\n+            List<T> routeParams) {\n         List<String> segments = routeParams.stream().map(Object::toString)\n                 .collect(Collectors.toList());\n-        Class<? extends Component> target = getTargetOrThrow(route, segments);\n+        Class<? extends Component> target = getTargetOrThrow(url, segments);\n \n         if (!routeParams.isEmpty()) {\n             checkUrlParameterType(routeParams.get(0), target);\n         }\n \n+        return getNavigationState(target,\n+                HasUrlParameterFormat.getParameters(segments),\n+                HasUrlParameterFormat.getUrl(url, routeParams));\n+    }\n+\n+    private NavigationState getNavigationState(\n+            Class<? extends Component> target, RouteParameters parameters,\n+            String resolvedUrl) {\n         return new NavigationStateBuilder(ui.getRouter())\n-                .withTarget(target, segments).build();\n+                .withTarget(target, parameters).withPath(resolvedUrl).build();\n     }\n \n     /**\n      * Get the forward target type for forwarding.\n      *\n      * @return forward target type\n+     * @throws NullPointerException\n+     *             if no forward target is set. Check\n+     *             {@link #hasForwardTarget()} before accessing this method.\n      */\n     public Class<? extends Component> getForwardTargetType() {\n         return forwardTargetState.getNavigationTarget();\n     }\n \n     /**\n-     * Get the URL parameters of the forward target.\n+     * Gets the URL parameters of the forward target.\n      *\n      * @return URL parameters of forward target\n+     * @throws NullPointerException\n+     *             if no forward target is set. Check\n+     *             {@link #hasForwardTarget()} before accessing this method.\n+     * @deprecated use {@link #getForwardTargetRouteParameters()} instead.\n      */\n+    @Deprecated\n     public List<String> getForwardTargetParameters() {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODMyMg==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198322", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:07Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationStateBuilder.java", "diffHunk": "@@ -42,21 +43,58 @@ public NavigationStateBuilder(Router router) {\n         this.router = router;\n     }\n \n+    /**\n+     * Assigns the given navigation target with the given route parameters to the\n+     * navigation state being built.\n+     *\n+     * @param navigationTarget\n+     *            the navigation target\n+     * @param parameters\n+     *            the route parameters of the navigation target\n+     * @return this builder, for chaining\n+     * @deprecated use {@link #withTarget(Class, RouteParameters)} instead.\n+     */\n+    @Deprecated\n+    public NavigationStateBuilder withTarget(", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODMzMg==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198332", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:08Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "diffHunk": "@@ -85,17 +120,42 @@ public RouteBaseData(List<Class<? extends RouterLayout>> parentLayouts,\n      * Get the full route url of {@link Route}.\n      *\n      * @return route url\n+     * @deprecated use {@link #getTemplate()} instead.\n      */\n+    @Deprecated\n     public String getUrl() {\n-        return url;\n+        return template;\n+    }\n+\n+    /**\n+     * Get the full route template of {@link Route}.\n+     *\n+     * @return route template.\n+     */\n+    public String getTemplate() {\n+        return template;\n     }\n \n     /**\n-     * Get {@link Route} url parameters if any.\n+     * Get {@link Route} route parameters types if any.\n      *\n-     * @return url parameters (by type and in order)\n+     * @return route parameters types.\n+     * @deprecated use {@link #getRouteParameters()} instead.\n      */\n+    @Deprecated\n     public List<Class<?>> getParameters() {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM0NA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198344", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:09Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteBaseData.java", "diffHunk": "@@ -85,17 +120,42 @@ public RouteBaseData(List<Class<? extends RouterLayout>> parentLayouts,\n      * Get the full route url of {@link Route}.\n      *\n      * @return route url\n+     * @deprecated use {@link #getTemplate()} instead.\n      */\n+    @Deprecated\n     public String getUrl() {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM0OA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198348", "bodyText": "Either log or rethrow this exception.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:10Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -110,57 +134,116 @@ public ConfiguredRoutes(ConfigureRoutes original) {\n      * See if configuration contains a registered route for given path.\n      *\n      * @param path\n-     *         path to check\n+     *            path to check\n      * @return true if configuration contains route\n      */\n     public boolean hasRoute(String path) {\n-        return getRoutesMap().containsKey(path);\n+        return hasTemplate(path);\n+    }\n+\n+    /**\n+     * See if configuration contains a registered route for given template.\n+     *\n+     * @param template\n+     *            template to check\n+     * @return true if configuration contains route\n+     */\n+    public boolean hasTemplate(String template) {\n+        return getRoutesMap().containsKey(template);\n     }\n \n     /**\n      * Check if configuration holds a route for given path with possible path\n      * segments.\n      *\n-     * @param pathString\n-     *         path string to check\n+     * @param path\n+     *            path string to check\n      * @param segments\n-     *         path segments for route\n+     *            path segments for route\n      * @return true if a route is found, else false\n      */\n-    public boolean hasRoute(String pathString, List<String> segments) {\n-        if (hasRoute(pathString)) {\n-            return getRouteTarget(pathString).getTarget(segments) != null;\n-        }\n-        return false;\n+    public boolean hasRoute(String path, List<String> segments) {\n+        return getNavigationRouteTarget(PathUtil.getPath(path, segments))\n+                .hasTarget();\n     }\n \n     /**\n      * Check it the given route target has been registered to the configuration.\n      *\n-     * @param targetRoute\n-     *         target to check registration status for\n+     * @param target\n+     *            target to check registration status for\n      * @return true if target is found in configuration\n      */\n-    public boolean hasRouteTarget(Class<? extends Component> targetRoute) {\n-        return getTargetRoutes().containsKey(targetRoute);\n+    public boolean hasRouteTarget(Class<? extends Component> target) {\n+        return getTargetRoutes().containsKey(target);\n+    }\n+\n+    /**\n+     * Search for a route target using given navigation <code>url</code>\n+     * argument.\n+     *\n+     * @param url\n+     *            the navigation url used to search a route target.\n+     * @return a {@link NavigationRouteTarget} instance containing the\n+     *         {@link RouteTarget} and {@link RouteParameters} extracted from\n+     *         the <code>url</code> argument according with the route\n+     *         configuration.\n+     */\n+    public NavigationRouteTarget getNavigationRouteTarget(String url) {\n+        return getRouteModel().getNavigationRouteTarget(url);\n+    }\n+\n+    /**\n+     * Gets the {@link RouteTarget} instance matching the given target component\n+     * and route parameters.\n+     *\n+     * @param target\n+     *            a component class which is a navigation target.\n+     * @param parameters\n+     *            parameter values that may be used with given target.\n+     * @return the {@link RouteTarget} instance matching the given target\n+     *         component and route parameters.\n+     */\n+    public RouteTarget getRouteTarget(Class<? extends Component> target,\n+            RouteParameters parameters) {\n+        return iterateTemplates(target, template -> {\n+            try {\n+                return getRouteModel().getRouteTarget(template, parameters);\n+            } catch (IllegalArgumentException e) {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM1OA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198358", "bodyText": "Either log or rethrow this exception.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:11Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -173,30 +256,134 @@ public boolean hasRouteTarget(Class<? extends Component> targetRoute) {\n     }\n \n     /**\n-     * Get all registered target routes for this configuration.\n+     * Get all registered target routes for this configuration mapping the main\n+     * template.\n      *\n      * @return component-to-path map of all target routes\n      */\n     public Map<Class<? extends Component>, String> getTargetRoutes() {\n-        return targetRoutes;\n+        return targetRouteMap;\n+    }\n+\n+    /**\n+     * Get all registered target routes for this configuration.\n+     *\n+     * @return component-to-path map of all target routes\n+     */\n+    Map<Class<? extends Component>, RouteModel> getTargetRouteModelMap() {\n+        return targetRouteModelMap;\n+    }\n+\n+    /**\n+     * Make a copy of the target and route models mapping.\n+     * \n+     * @return a copy of the target and route models mapping.\n+     */\n+    protected final Map<Class<? extends Component>, RouteModel> copyTargetRouteModels(\n+            boolean mutable) {\n+        Map<Class<? extends Component>, RouteModel> copyMap = new HashMap<>();\n+        this.getTargetRouteModelMap().entrySet()\n+                .forEach(entry -> copyMap.put(entry.getKey(),\n+                        RouteModel.copy(entry.getValue(), mutable)));\n+        return copyMap;\n     }\n \n     /**\n-     * Get the route path String for the given navigation target class.\n+     * Get the route template String for the given navigation target class.\n      *\n      * @param navigationTarget\n-     *         navigationTarget to get registered route for\n+     *            navigationTarget to get registered route for\n      * @return base route string if target class found\n      */\n     public String getTargetRoute(Class<? extends Component> navigationTarget) {\n+        return getTemplate(navigationTarget);\n+    }\n+\n+    /**\n+     * Get the route template String for the given navigation target class.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @return base route string if target class found\n+     */\n+    public String getTemplate(Class<? extends Component> navigationTarget) {\n         return getTargetRoutes().get(navigationTarget);\n     }\n \n+    /**\n+     * Get the route template String for the given navigation target class and\n+     * using the specified parameters format.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @param format\n+     *            settings used to format the result parameters. If all of\n+     *            {@link RouteParameterFormatOption#NAME},\n+     *            {@link RouteParameterFormatOption#MODIFIER} and\n+     *            {@link RouteParameterFormatOption#REGEX} are provided, the\n+     *            unformatted template will be provided.\n+     * @return base route string if target class found\n+     */\n+    public String getTemplate(Class<? extends Component> navigationTarget,\n+            Set<RouteParameterFormatOption> format) {\n+        final String template = getTemplate(navigationTarget);\n+        if (template == null) {\n+            return null;\n+        }\n+\n+        return getRouteModel().formatTemplate(template, format);\n+    }\n+\n+    /**\n+     * Get the url path String for the given navigation target class.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @return route string if target class found\n+     */\n+    public String getTargetUrl(Class<? extends Component> navigationTarget) {\n+        return iterateTemplates(navigationTarget, template -> {\n+            if (RouteFormat.hasRequiredParameter(template)) {\n+                return null;\n+\n+            } else if (RouteFormat.hasParameters(template)) {\n+                // In case all parameters are optional or wildcard, this will\n+                // return successfully.\n+                return getRouteModel().getUrl(template,\n+                        RouteParameters.empty());\n+            }\n+\n+            return template;\n+        });\n+    }\n+\n+    /**\n+     * Get the url path String for the given navigation target class and\n+     * parameters.\n+     *\n+     * @param navigationTarget\n+     *            navigationTarget to get registered route for\n+     * @param parameters\n+     *            route parameters\n+     * @return url String populated with parameters for the given\n+     *         navigationTarget\n+     */\n+    public String getTargetUrl(Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        return iterateTemplates(navigationTarget, template -> {\n+            try {\n+                return getRouteModel().getUrl(template, parameters);\n+            } catch (IllegalArgumentException e) {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM2NQ==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198365", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:12Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/ConfiguredRoutes.java", "diffHunk": "@@ -210,33 +397,73 @@ public String getTargetRoute(Class<? extends Component> navigationTarget) {\n      * @return all registered exception handlers\n      */\n     public Map<Class<? extends Exception>, Class<? extends Component>> getExceptionHandlers() {\n-        return exceptionTargets;\n+        return exceptionTargetMap;\n     }\n \n     /**\n      * Return the parent layout chain for given navigation target on the target\n      * path.\n      *\n      * @param path\n-     *         path to get parent layout chain for\n+     *            path to get parent layout chain for.\n      * @param navigationTarget\n-     *         navigation target on path to get parent layout chain for\n-     * @return list of parent layout chain\n+     *            navigation target on path to get parent layout chain for.\n+     * @return list of parent layout chain.\n+     * @deprecated use {@link #getNavigationRouteTarget(String)} instead.\n      */\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getParentLayouts(String path,", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM3Mw==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198373", "bodyText": "Reduce the number of conditional operators (4) used in the expression (maximum allowed 3).", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:13Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java", "diffHunk": "@@ -132,9 +244,32 @@ private boolean shouldRunNpmInstall() {\n                     .listFiles(\n                             (dir, name) -> !ignoredNodeFolders.contains(name));\n             assert installedPackages != null;\n-            return installedPackages.length == 0\n-                    || (installedPackages.length == 1 && FLOW_NPM_PACKAGE_NAME\n-                            .startsWith(installedPackages[0].getName()));\n+            return installedPackages.length == 0 || (", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM4OA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198388", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:14Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/NavigationState.java", "diffHunk": "@@ -84,29 +116,54 @@ public void setResolvedPath(String resolvedPath) {\n      */\n     public String getResolvedPath() {\n         if (resolvedPath == null) {\n-            resolvedPath = RouteConfiguration.forRegistry(router.getRegistry())\n-                    .getUrlBase(navigationTarget).orElse(null);\n+            resolvedPath = router.getRegistry()\n+                    .getTargetUrl(getNavigationTarget(), getRouteParameters())\n+                    .orElse(null);\n         }\n         return resolvedPath;\n     }\n \n+    /**\n+     * Sets the route parameters.\n+     *\n+     * @param routeParameters\n+     *            route parameters, not null.\n+     */\n+    void setRouteParameters(RouteParameters routeParameters) {\n+        assert routeParameters != null;\n+\n+        this.routeParameters = routeParameters;\n+    }\n+\n+    /**\n+     * Gets the route parameters map.\n+     * \n+     * @return route parameters.\n+     */\n+    public RouteParameters getRouteParameters() {\n+        return routeParameters;\n+    }\n+\n     /**\n      * Gets the list of strings that correspond to the raw string url\n      * parameters.\n      *\n      * @return the url parameters of this navigation state\n      */\n     public Optional<List<String>> getUrlParameters() {\n-        return Optional.ofNullable(urlParameters);\n+        return Optional.of(HasUrlParameterFormat\n+                .getParameterValues(getRouteParameters()));\n     }\n \n     /**\n-     * Set the list of strings that correspond to the raw string url parameters.\n+     * Set the list of strings that correspond to the raw string route parameters.\n      *\n-     * @param urlParameters\n+     * @param parameters\n      *            the url parameters to set\n+     * @deprecated use {@link #setRouteParameters(RouteParameters)} instead.\n      */\n-    public void setUrlParameters(List<String> urlParameters) {\n-        this.urlParameters = urlParameters;\n+    @Deprecated\n+    public void setUrlParameters(List<String> parameters) {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODM5OA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198398", "bodyText": "Replace this if-then-else statement by a single return statement.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:15Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.router.internal;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.vaadin.flow.router.RouteParameterFormatOption;\n+import com.vaadin.flow.router.RouteParameterRegex;\n+\n+/**\n+ * Utility class which contains various methods for defining url parameter\n+ * template.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+class RouteFormat implements Serializable {\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasParameters(String template) {\n+        return template.contains(\":\");\n+    }\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasRequiredParameter(String template) {\n+        int index = -1;\n+        do {\n+            index = template.indexOf(':', index + 1);\n+\n+            if (index >= 0) {\n+                final int regexIndex = template.indexOf('(', index);\n+                final int slashIndex = template.indexOf('/', index);\n+\n+                int parameterNameEnding = Math.min(regexIndex, slashIndex);\n+\n+                // Missing regex.\n+                if (parameterNameEnding < 0) {\n+                    parameterNameEnding = slashIndex;\n+                }\n+                // End of the string.\n+                if (parameterNameEnding < 0) {\n+                    parameterNameEnding = template.length();\n+                }\n+\n+                int optional = template.indexOf('?', index);\n+                if (0 < optional && optional < parameterNameEnding) {\n+                    // This parameter is an optional, move on.\n+                    continue;\n+                }\n+\n+                int wildcard = template.indexOf('*', index);\n+                if (0 < wildcard && wildcard < parameterNameEnding) {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODQwOQ==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198409", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:16Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/RouteFormat.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.router.internal;\n+\n+import java.io.Serializable;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.vaadin.flow.router.RouteParameterFormatOption;\n+import com.vaadin.flow.router.RouteParameterRegex;\n+\n+/**\n+ * Utility class which contains various methods for defining url parameter\n+ * template.\n+ * <p>\n+ * For internal use only. May be renamed or removed in a future release.\n+ */\n+class RouteFormat implements Serializable {\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasParameters(String template) {\n+        return template.contains(\":\");\n+    }\n+\n+    /**\n+     * Returns whether the specified template contains route parameters.\n+     *\n+     * @param template\n+     *            a template.\n+     * @return true if the specified template contains route parameters,\n+     *         otherwise false.\n+     */\n+    static boolean hasRequiredParameter(String template) {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODQyMA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198420", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:17Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/SessionRouteRegistry.java", "diffHunk": "@@ -143,47 +146,101 @@ public Registration addRoutesChangeListener(\n     }\n \n     @Override\n-    public Optional<Class<? extends Component>> getNavigationTarget(\n-            String pathString) {\n-        Objects.requireNonNull(pathString, \"pathString must not be null.\");\n-        Optional<Class<? extends Component>> navigationTarget = getNavigationTarget(\n-                pathString, Collections.emptyList());\n+    public NavigationRouteTarget getNavigationRouteTarget(String url) {\n+        final NavigationRouteTarget navigationRouteTarget = getConfiguration()\n+                .getNavigationRouteTarget(url);\n+        if (navigationRouteTarget.hasTarget()) {\n+            return navigationRouteTarget;\n+        }\n+        return getParentRegistry().getNavigationRouteTarget(url);\n+    }\n \n-        if (navigationTarget.isPresent()) {\n-            return navigationTarget;\n+    @Override\n+    public RouteTarget getRouteTarget(Class<? extends Component> target,\n+            RouteParameters parameters) {\n+        final RouteTarget routeTarget = getConfiguration()\n+                .getRouteTarget(target, parameters);\n+        if (routeTarget != null) {\n+            return routeTarget;\n         }\n+        return getParentRegistry().getRouteTarget(target, parameters);\n+    }\n \n-        return getParentRegistry().getNavigationTarget(pathString);\n+    @Override\n+    public Optional<Class<? extends Component>> getNavigationTarget(\n+            String url) {\n+        Objects.requireNonNull(url, \"pathString must not be null.\");\n+        final Optional<Class<? extends Component>> target = getConfiguration()\n+                .getTarget(url);\n+        if (target.isPresent()) {\n+            return target;\n+        }\n+\n+        return getParentRegistry().getNavigationTarget(url);\n     }\n \n     @Override\n     public Optional<Class<? extends Component>> getNavigationTarget(\n-            String pathString, List<String> segments) {\n-        Objects.requireNonNull(pathString, \"pathString must not be null.\");\n-        if (getConfiguration().hasRoute(pathString, segments)) {\n-            return getConfiguration().getRoute(pathString, segments);\n+            String url, List<String> segments) {\n+        Objects.requireNonNull(url, \"url must not be null.\");\n+        final Optional<Class<? extends Component>> target = getConfiguration()\n+                .getTarget(PathUtil.getPath(url, segments));\n+        if (target.isPresent()) {\n+            return target;\n         }\n \n-        return getParentRegistry().getNavigationTarget(pathString, segments);\n+        return getParentRegistry().getNavigationTarget(url, segments);\n     }\n \n     @Override\n     public Optional<String> getTargetUrl(\n             Class<? extends Component> navigationTarget) {\n-\n         Optional<String> targetUrl = super.getTargetUrl(navigationTarget);\n         if (targetUrl.isPresent()) {\n             return targetUrl;\n         }\n-\n         return getParentRegistry().getTargetUrl(navigationTarget);\n     }\n \n     @Override\n+    public Optional<String> getTargetUrl(\n+            Class<? extends Component> navigationTarget,\n+            RouteParameters parameters) {\n+        Optional<String> targetUrl = super.getTargetUrl(navigationTarget,\n+                parameters);\n+        if (targetUrl.isPresent()) {\n+            return targetUrl;\n+        }\n+\n+        return getParentRegistry().getTargetUrl(navigationTarget, parameters);\n+    }\n+\n+    @Override\n+    public Optional<String> getTemplate(\n+            Class<? extends Component> navigationTarget) {\n+        final Optional<String> targetRoute = super.getTemplate(\n+                navigationTarget);\n+        if (targetRoute.isPresent()) {\n+            return targetRoute;\n+        }\n+        return getParentRegistry().getTemplate(navigationTarget);\n+    }\n+\n+    /**\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n+     */\n+    @Override\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODQzMg==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198432", "bodyText": "Remove useless curly braces around statement", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:18Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "diffHunk": "@@ -329,45 +333,26 @@ public void removeRoute(String path) {\n     @Override\n     public void removeRoute(String path,\n             Class<? extends Component> navigationTarget) {\n-        if (!getConfiguration().hasRoute(path)) {\n+        if (!getConfiguration().hasTemplate(path)) {\n             return;\n         }\n-        configure(configuration -> configuration.removeRoute(path,\n-                navigationTarget));\n+        configureWithFullTemplate(path, navigationTarget,\n+                (configuration, fullTemplate) -> configuration\n+                        .removeRoute(fullTemplate, navigationTarget));\n     }\n \n     @Override\n     public void clean() {\n         configure(ConfigureRoutes::clear);\n     }\n \n-    /**\n-     * This adds a new route path to the configuration.\n-     * <p>\n-     * Note! this should only be called from a configure() for thread safety.\n-     *\n-     * @param path\n-     *            path for the navigation target\n-     * @param navigationTarget\n-     *            navigation target for given path\n-     * @param configuration\n-     *            mutable configuration object\n-     * @return the route target to which the target was added\n-     */\n-    private RouteTarget addRouteToConfiguration(String path,\n+    private void configureWithFullTemplate(String path,\n             Class<? extends Component> navigationTarget,\n-            ConfigureRoutes configuration) {\n-        if (!hasLock()) {\n-            throw new IllegalStateException(\n-                    \"addRouteToConfiguration requires the registry lock and a mutable configuration.\");\n-        }\n-\n-        configuration.setRoute(path, navigationTarget);\n-\n-        if (!configuration.hasRouteTarget(navigationTarget)) {\n-            configuration.setTargetRoute(navigationTarget, path);\n-        }\n-        return configuration.getRouteTarget(path);\n+            SerializableBiConsumer<ConfigureRoutes, String> templateConfiguration) {\n+        configure(configuration -> {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODQzOA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198438", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:19Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/internal/AbstractRouteRegistry.java", "diffHunk": "@@ -238,89 +250,81 @@ public ConfiguredRoutes getConfiguration() {\n     }\n \n     private List<Class<? extends RouterLayout>> getParentLayouts(\n-            ConfiguredRoutes configuration, Class<? extends Component> target,\n-            String url) {\n-        RouteTarget routeTarget = configuration.getRouteTarget(url);\n+            ConfiguredRoutes configuration, String template) {\n+        RouteTarget routeTarget = configuration.getRouteTarget(template);\n         if (routeTarget != null) {\n-            return routeTarget.getParentLayouts(target);\n+            return routeTarget.getParentLayouts();\n         }\n         return Collections.emptyList();\n     }\n \n+    /**\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n+     */\n     @Override\n+    @Deprecated\n     public List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODQ0OA==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198448", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:20Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/RouteRegistry.java", "diffHunk": "@@ -168,7 +215,13 @@ void setRoute(String path, Class<? extends Component> navigationTarget,\n      * @param navigationTarget\n      *            navigation target to get layout chain for\n      * @return layout chain of target\n+     * @deprecated instead use {@link #getNavigationRouteTarget(String)} and\n+     *             retrieve the list of route layouts from the\n+     *             {@link RouteTarget} contained in the\n+     *             {@link NavigationRouteTarget}.\n+     * @see RouteTarget#getParentLayouts()\n      */\n+    @Deprecated\n     List<Class<? extends RouterLayout>> getRouteLayouts(String path,", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5ODQ1Mw==", "url": "https://github.com/vaadin/flow/pull/8381#discussion_r427198453", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-05-19T10:31:21Z", "path": "flow-server/src/main/java/com/vaadin/flow/router/RouteConfiguration.java", "diffHunk": "@@ -115,17 +111,30 @@ public static RouteConfiguration forRegistry(RouteRegistry registry) {\n      * @param path\n      *         path to check for route registration\n      * @return true if there exists a route for the given path\n+     * @deprecated Use {@link #isPathAvailable(String)}\n      */\n+    @Deprecated\n     public boolean isPathRegistered(String path) {", "originalCommit": "e09ccac94a63cf8d0c21228206a885bb23bcb15c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}