{"pr_number": 8979, "pr_title": "Implement lit template parser for limited template formats which extends LitTemplate element", "pr_createdAt": "2020-09-09T05:12:56Z", "pr_url": "https://github.com/vaadin/flow/pull/8979", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NTAwNQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r485375005", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 17 to the 15 allowed.", "author": "vaadin-bot", "createdAt": "2020-09-09T06:45:28Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\nindex c40bbcd8af..ef6d8e14a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n\n@@ -63,7 +63,7 @@ class LitTemplateParserImpl implements LitTemplateParser {\n     private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n \n     private final HashMap<String, String> cache = new HashMap<>();\n-    private final ReentrantLock lock = new ReentrantLock();\n+    private final ReentrantLock templateSourceslock = new ReentrantLock();\n     private JsonObject jsonStats;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NTAxMg==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r485375012", "bodyText": "Reduce the total number of break and continue statements in this loop to use at most one.", "author": "vaadin-bot", "createdAt": "2020-09-09T06:45:28Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,\n+            String tag, VaadinService service) {\n+\n+        List<Dependency> dependencies = AnnotationReader\n+                .getAnnotationsFor(clazz, JsModule.class).stream()\n+                .map(jsModule -> new Dependency(Dependency.Type.JS_MODULE,\n+                        jsModule.value(), LoadMode.EAGER)) // load mode doesn't\n+                                                           // matter here\n+                .collect(Collectors.toList());\n+\n+        for (DependencyFilter filter : service.getDependencyFilters()) {\n+            dependencies = filter.filter(new ArrayList<>(dependencies),\n+                    service);\n+        }\n+\n+        Pair<Dependency, String> chosenDep = null;\n+\n+        for (Dependency dependency : dependencies) {", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\nindex c40bbcd8af..ef6d8e14a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n\n@@ -63,7 +63,7 @@ class LitTemplateParserImpl implements LitTemplateParser {\n     private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n \n     private final HashMap<String, String> cache = new HashMap<>();\n-    private final ReentrantLock lock = new ReentrantLock();\n+    private final ReentrantLock templateSourceslock = new ReentrantLock();\n     private JsonObject jsonStats;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3NTAxNw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r485375017", "bodyText": "Make \"parser\" transient or serializable.", "author": "vaadin-bot", "createdAt": "2020-09-09T06:45:29Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -17,30 +17,51 @@\n \n import java.io.Serializable;\n import java.util.Collections;\n+import java.util.Optional;\n \n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.littemplate.LitTemplateParser.TemplateData;\n import com.vaadin.flow.component.polymertemplate.IdCollector;\n import com.vaadin.flow.component.polymertemplate.TemplateDataAnalyzer.ParserData;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.server.VaadinService;\n \n /**\n  * Template data analyzer which produces immutable data required for template\n  * initializer using provided template class and a parser.\n  *\n  * @author Vaadin Ltd\n+ * @since\n  *\n  */\n class LitTemplateDataAnalyzer implements Serializable {\n \n     private final Class<? extends LitTemplate> templateClass;\n+    private final LitTemplateParser parser;", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c262e244e07b3f4c68473f2cb371cfcf1fa7f1f9", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\nindex 7b5e44e0d1..a9d5565401 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n\n@@ -35,7 +35,6 @@ import com.vaadin.flow.server.VaadinService;\n  * initializer using provided template class and a parser.\n  *\n  * @author Vaadin Ltd\n- * @since\n  *\n  */\n class LitTemplateDataAnalyzer implements Serializable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NzE2OQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486197169", "bodyText": "This could be warn level message.", "author": "joheriks", "createdAt": "2020-09-10T09:28:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0OTQyMw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486249423", "bodyText": "warn is good when it happens rarely and unexpected.\nIn fact this is absolutely expected situation.\ntemplateData  is not null only for Designer template which extends LitTemplate directly and has to provide render method.\nGenerally render  method doesn't have to be in the template.\nSo this parser works only for very specific cases and generally it won't work. So info looks more suitable for me here.", "author": "denis-anisimov", "createdAt": "2020-09-10T11:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NzE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ2ODE4Mw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486468183", "bodyText": "Ok", "author": "joheriks", "createdAt": "2020-09-10T16:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE5NzE2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\nindex 7b5e44e0d1..dc6c739775 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n\n@@ -98,7 +98,7 @@ class LitTemplateDataAnalyzer implements Serializable {\n         return tagNameAnnotation.get();\n     }\n \n-    private Logger getLogger() {\n+    private static Logger getLogger() {\n         return LoggerFactory.getLogger(LitTemplateDataAnalyzer.class.getName());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxMTYxNg==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486211616", "bodyText": "Could IdCollector be updated to state that also the second parameter is allowed to be null? Maybe this case also needs to be handled there, though seems to only be used in logging.", "author": "joheriks", "createdAt": "2020-09-10T09:51:53Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);\n+        }\n+\n+        Element templateRoot = templateData == null ? null\n+                : templateData.getTemplateElement();\n+        String modulePath = templateData == null ? null\n+                : templateData.getModulePath();\n+        IdCollector idExtractor = new IdCollector(templateClass, modulePath,\n+                templateRoot);", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\nindex 7b5e44e0d1..dc6c739775 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n\n@@ -98,7 +98,7 @@ class LitTemplateDataAnalyzer implements Serializable {\n         return tagNameAnnotation.get();\n     }\n \n-    private Logger getLogger() {\n+    private static Logger getLogger() {\n         return LoggerFactory.getLogger(LitTemplateDataAnalyzer.class.getName());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxMjM3MQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486212371", "bodyText": "make static", "author": "joheriks", "createdAt": "2020-09-10T09:53:11Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java", "diffHunk": "@@ -49,11 +70,36 @@\n      * @return the template data\n      */\n     ParserData parseTemplate() {\n-        IdCollector idExtractor = new IdCollector(templateClass, null, null);\n+        TemplateData templateData = parser.getTemplateContent(templateClass,\n+                tag, service);\n+        if (templateData == null) {\n+            getLogger().info(\"Couldn't parse template for {} class. \"\n+                    + \"Only specific Lit template format is supported. Please check that your template definition\"\n+                    + \" directly contains 'render' method which returns html`_template_content_`.\",\n+                    templateClass);\n+        }\n+\n+        Element templateRoot = templateData == null ? null\n+                : templateData.getTemplateElement();\n+        String modulePath = templateData == null ? null\n+                : templateData.getModulePath();\n+        IdCollector idExtractor = new IdCollector(templateClass, modulePath,\n+                templateRoot);\n         idExtractor.collectInjectedIds(Collections.emptySet());\n         return new ParserData(idExtractor.getIdByField(),\n                 idExtractor.getTagById(), Collections.emptyMap(),\n                 Collections.emptySet(), Collections.emptyList());\n     }\n \n+    private String getTag(Class<? extends LitTemplate> clazz) {\n+        Optional<String> tagNameAnnotation = AnnotationReader\n+                .getAnnotationFor(clazz, Tag.class).map(Tag::value);\n+        assert tagNameAnnotation.isPresent();\n+        return tagNameAnnotation.get();\n+    }\n+\n+    private Logger getLogger() {", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\nindex 7b5e44e0d1..dc6c739775 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateDataAnalyzer.java\n\n@@ -98,7 +98,7 @@ class LitTemplateDataAnalyzer implements Serializable {\n         return tagNameAnnotation.get();\n     }\n \n-    private Logger getLogger() {\n+    private static Logger getLogger() {\n         return LoggerFactory.getLogger(LitTemplateDataAnalyzer.class.getName());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDA0MA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486244040", "bodyText": "Could looping through the dependencies somehow be factored out as this method is quite complex.", "author": "joheriks", "createdAt": "2020-09-10T10:50:39Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();\n+    private JsonObject jsonStats;\n+\n+    /**\n+     * The default constructor. Protected in order to prevent direct\n+     * instantiation, but not private in order to allow mocking/overrides for\n+     * testing purposes.\n+     */\n+    protected LitTemplateParserImpl() {\n+    }\n+\n+    static LitTemplateParser getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public TemplateData getTemplateContent(Class<? extends LitTemplate> clazz,\n+            String tag, VaadinService service) {\n+\n+        List<Dependency> dependencies = AnnotationReader\n+                .getAnnotationsFor(clazz, JsModule.class).stream()\n+                .map(jsModule -> new Dependency(Dependency.Type.JS_MODULE,\n+                        jsModule.value(), LoadMode.EAGER)) // load mode doesn't\n+                                                           // matter here\n+                .collect(Collectors.toList());\n+\n+        for (DependencyFilter filter : service.getDependencyFilters()) {\n+            dependencies = filter.filter(new ArrayList<>(dependencies),\n+                    service);\n+        }\n+\n+        Pair<Dependency, String> chosenDep = null;\n+\n+        for (Dependency dependency : dependencies) {\n+            if (dependency.getType() != Dependency.Type.JS_MODULE) {\n+                continue;\n+            }\n+\n+            String url = dependency.getUrl();\n+            String source = getSourcesFromTemplate(tag, url);\n+            if (source == null) {\n+                try {\n+                    source = getSourcesFromStats(service, url);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            }\n+            if (source == null) {\n+                continue;\n+            }\n+            if (chosenDep == null) {\n+                chosenDep = new Pair<>(dependency, source);\n+            }\n+            if (dependencyHasTagName(dependency, tag)) {\n+                chosenDep = new Pair<>(dependency, source);\n+                break;\n+            }\n+        }\n+\n+        Element templateElement = null;\n+        if (chosenDep != null) {\n+            templateElement = BundleParser.parseLitTemplateElement(\n+                    chosenDep.getFirst().getUrl(), chosenDep.getSecond());\n+        }\n+        if (templateElement != null) {\n+            // Template needs to be wrapped in an element with id, to look\n+            // like a P2 template\n+            Element parent = new Element(tag);\n+            parent.attr(\"id\", tag);\n+            templateElement.appendTo(parent);\n+\n+            return new TemplateData(chosenDep.getFirst().getUrl(),\n+                    templateElement);\n+        }\n+\n+        getLogger().info(\"Couldn't find the \"\n+                + \"definition of the element with tag '{}' \"\n+                + \"in any lit template file declared using '@{}' annotations. \"\n+                + \"Check the availability of the template files in your WAR \"\n+                + \"file or provide alternative implementation of the \"\n+                + \"method LitTemplateParser.getTemplateContent() which should return an element \"\n+                + \"representing the content of the template file\", tag,\n+                JsModule.class.getSimpleName());\n+\n+        return null;\n+    }", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2MTgyNQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486261825", "bodyText": "Unfortunately I failed any attempt to refactor it.\nThere are too many local variables which are used across the code.\nExtracting methods will require very cumbersome return types.", "author": "denis-anisimov", "createdAt": "2020-09-10T11:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\nindex c40bbcd8af..ef6d8e14a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n\n@@ -63,7 +63,7 @@ class LitTemplateParserImpl implements LitTemplateParser {\n     private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n \n     private final HashMap<String, String> cache = new HashMap<>();\n-    private final ReentrantLock lock = new ReentrantLock();\n+    private final ReentrantLock templateSourceslock = new ReentrantLock();\n     private JsonObject jsonStats;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDU4NA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486244584", "bodyText": "Some more descriptive name on this field would be good.", "author": "joheriks", "createdAt": "2020-09-10T10:51:48Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.stream.Collectors;\n+\n+import org.jsoup.UncheckedIOException;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.polymertemplate.BundleParser;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.internal.AnnotationReader;\n+import com.vaadin.flow.internal.Pair;\n+import com.vaadin.flow.server.DependencyFilter;\n+import com.vaadin.flow.server.VaadinService;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+import com.vaadin.flow.shared.ui.Dependency;\n+import com.vaadin.flow.shared.ui.LoadMode;\n+\n+import elemental.json.JsonObject;\n+\n+/**\n+ * Lit template parser implementation.\n+ * <p>\n+ * The implementation scans all JsModule annotations for the given template\n+ * class and tries to find the one that contains template definition using the\n+ * tag name.\n+ * <p>\n+ * The class is Singleton. Use {@link LitTemplateParserImpl#getInstance()} to\n+ * get its instance.\n+ *\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see BundleParser\n+ */\n+class LitTemplateParserImpl implements LitTemplateParser {\n+\n+    private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n+\n+    private final HashMap<String, String> cache = new HashMap<>();\n+    private final ReentrantLock lock = new ReentrantLock();", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI1MzI1Mg==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486253252", "bodyText": "Oh my god !\n:(\nThis is copy paste of the existing code from NpmTemplateParser  and it's absolutely broken.......", "author": "denis-anisimov", "createdAt": "2020-09-10T11:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI2MjIyMQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486262221", "bodyText": "The code is corrected.", "author": "denis-anisimov", "createdAt": "2020-09-10T11:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0NDU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\nindex c40bbcd8af..ef6d8e14a3 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/littemplate/LitTemplateParserImpl.java\n\n@@ -63,7 +63,7 @@ class LitTemplateParserImpl implements LitTemplateParser {\n     private static final LitTemplateParser INSTANCE = new LitTemplateParserImpl();\n \n     private final HashMap<String, String> cache = new HashMap<>();\n-    private final ReentrantLock lock = new ReentrantLock();\n+    private final ReentrantLock templateSourceslock = new ReentrantLock();\n     private JsonObject jsonStats;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5MDYyMA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486390620", "bodyText": "Ok, only a failed assertion message in test code but the expected id is label here.", "author": "joheriks", "createdAt": "2020-09-10T14:30:14Z", "path": "flow-server/src/test/java/com/vaadin/flow/component/littemplate/LitTemplateParserImplTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package com.vaadin.flow.component.littemplate;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+\n+import java.util.Collections;\n+\n+import org.hamcrest.CoreMatchers;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.stubbing.Answer;\n+\n+import com.vaadin.flow.component.Tag;\n+import com.vaadin.flow.component.dependency.JsModule;\n+import com.vaadin.flow.component.littemplate.LitTemplateParser.TemplateData;\n+import com.vaadin.flow.function.DeploymentConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.VaadinService;\n+\n+public class LitTemplateParserImplTest {\n+\n+    @Mock\n+    VaadinContext context;\n+    @Mock\n+    VaadinService service;\n+    @Mock\n+    DeploymentConfiguration configuration;\n+\n+    @Before\n+    public void init() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        Mockito.when(service.getDependencyFilters())\n+                .thenReturn(Collections.emptyList());\n+        Mockito.when(service.getDeploymentConfiguration())\n+                .thenReturn(configuration);\n+        Mockito.when(service.getClassLoader())\n+                .thenAnswer(invocation -> this.getClass().getClassLoader());\n+        Mockito.when(service.getContext()).thenReturn(context);\n+        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n+                Mockito.anyString()))\n+                .thenAnswer((Answer<String>) invocation -> {\n+                    Object[] args = invocation.getArguments();\n+                    return (String) args[1];\n+                });\n+    }\n+\n+    @Test\n+    public void getTemplateContent_rootElementParsed() {\n+        Mockito.when(configuration.isProductionMode()).thenReturn(true);\n+        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n+        TemplateData templateContent = instance\n+                .getTemplateContent(MyLitElement.class, \"my-element\", service);\n+\n+        Assert.assertEquals(\"Parent element ID not the expected one.\",\n+                \"my-element\",\n+                templateContent.getTemplateElement().parent().id());\n+\n+        Assert.assertEquals(\"Expected template element to have 2 children\", 2,\n+                templateContent.getTemplateElement().childNodeSize());\n+\n+        Assert.assertEquals(\n+                \"Template element should have contained a div element with the id 'test'\",\n+                \"div\", templateContent.getTemplateElement()\n+                        .getElementById(\"test\").tag().toString());\n+    }\n+\n+    @Test\n+    public void getTemplateContent_localFileTemplateExists_useLocalFileContent() {\n+        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n+        TemplateData templateContent = instance.getTemplateContent(\n+                MyLitElementView.class, \"my-lit-element-view\", service);\n+\n+        Assert.assertEquals(\"Parent element ID not the expected one.\",\n+                \"my-lit-element-view\",\n+                templateContent.getTemplateElement().parent().id());\n+\n+        Assert.assertEquals(\"Expected template element to have 3 children\", 3,\n+                templateContent.getTemplateElement().childNodeSize());\n+\n+        Assert.assertEquals(\n+                \"Template element should have contained a div element with the id 'test'\",", "originalCommit": "859f16e29c2b8e8355256db11cfbee1663518e5f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c262e244e07b3f4c68473f2cb371cfcf1fa7f1f9", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/component/littemplate/LitTemplateParserImplTest.java b/flow-server/src/test/java/com/vaadin/flow/component/littemplate/LitTemplateParserImplTest.java\ndeleted file mode 100644\nindex 2f9643fc67..0000000000\n--- a/flow-server/src/test/java/com/vaadin/flow/component/littemplate/LitTemplateParserImplTest.java\n+++ /dev/null\n\n@@ -1,235 +0,0 @@\n-package com.vaadin.flow.component.littemplate;\n-\n-import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n-\n-import java.util.Collections;\n-\n-import org.hamcrest.CoreMatchers;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockito.Mockito;\n-import org.mockito.MockitoAnnotations;\n-import org.mockito.stubbing.Answer;\n-\n-import com.vaadin.flow.component.Tag;\n-import com.vaadin.flow.component.dependency.JsModule;\n-import com.vaadin.flow.component.littemplate.LitTemplateParser.TemplateData;\n-import com.vaadin.flow.function.DeploymentConfiguration;\n-import com.vaadin.flow.server.VaadinContext;\n-import com.vaadin.flow.server.VaadinService;\n-\n-public class LitTemplateParserImplTest {\n-\n-    @Mock\n-    VaadinContext context;\n-    @Mock\n-    VaadinService service;\n-    @Mock\n-    DeploymentConfiguration configuration;\n-\n-    @Before\n-    public void init() {\n-        MockitoAnnotations.initMocks(this);\n-\n-        Mockito.when(service.getDependencyFilters())\n-                .thenReturn(Collections.emptyList());\n-        Mockito.when(service.getDeploymentConfiguration())\n-                .thenReturn(configuration);\n-        Mockito.when(service.getClassLoader())\n-                .thenAnswer(invocation -> this.getClass().getClassLoader());\n-        Mockito.when(service.getContext()).thenReturn(context);\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenAnswer((Answer<String>) invocation -> {\n-                    Object[] args = invocation.getArguments();\n-                    return (String) args[1];\n-                });\n-    }\n-\n-    @Test\n-    public void getTemplateContent_rootElementParsed() {\n-        Mockito.when(configuration.isProductionMode()).thenReturn(true);\n-        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n-        TemplateData templateContent = instance\n-                .getTemplateContent(MyLitElement.class, \"my-element\", service);\n-\n-        Assert.assertEquals(\"Parent element ID not the expected one.\",\n-                \"my-element\",\n-                templateContent.getTemplateElement().parent().id());\n-\n-        Assert.assertEquals(\"Expected template element to have 2 children\", 2,\n-                templateContent.getTemplateElement().childNodeSize());\n-\n-        Assert.assertEquals(\n-                \"Template element should have contained a div element with the id 'test'\",\n-                \"div\", templateContent.getTemplateElement()\n-                        .getElementById(\"test\").tag().toString());\n-    }\n-\n-    @Test\n-    public void getTemplateContent_localFileTemplateExists_useLocalFileContent() {\n-        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n-        TemplateData templateContent = instance.getTemplateContent(\n-                MyLitElementView.class, \"my-lit-element-view\", service);\n-\n-        Assert.assertEquals(\"Parent element ID not the expected one.\",\n-                \"my-lit-element-view\",\n-                templateContent.getTemplateElement().parent().id());\n-\n-        Assert.assertEquals(\"Expected template element to have 3 children\", 3,\n-                templateContent.getTemplateElement().childNodeSize());\n-\n-        Assert.assertEquals(\n-                \"Template element should have contained a div element with the id 'test'\",\n-                \"div\", templateContent.getTemplateElement()\n-                        .getElementById(\"label\").tag().toString());\n-    }\n-\n-    @Test\n-    public void getTemplateContent_localFileNotFound_returnsNull() {\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenReturn(\"META-INF/resources/foo-bar.json\");\n-        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n-        Assert.assertNull(instance.getTemplateContent(FooView.class, \"foo-view\",\n-                service));\n-    }\n-\n-    @Test\n-    public void getTemplateContent_sourceNotFoundInStatsFile_returnsNull() {\n-        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n-        Assert.assertNull(instance.getTemplateContent(FooView.class, \"foo-view\",\n-                service));\n-    }\n-\n-    @Test\n-    public void getTemplateContent_sourceFileWithFaultyTemplateGetter_returnsNull() {\n-        // If the template getter can not be found it should result in no\n-        // template element children\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenReturn(VAADIN_SERVLET_RESOURCES + \"config/stats.json\");\n-        LitTemplateParser.TemplateData templateContent = LitTemplateParserImpl\n-                .getInstance()\n-                .getTemplateContent(MyFaulty.class, \"my-element\", service);\n-\n-        Assert.assertNull(templateContent);\n-    }\n-\n-    @Test\n-    public void getTemplateContent_renderIsDefinedInSuperClass_returnsNull() {\n-        // If the template getter can not be found it should result in no\n-        // template element children\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenReturn(VAADIN_SERVLET_RESOURCES + \"config/stats.json\");\n-        LitTemplateParser.TemplateData templateContent = LitTemplateParserImpl\n-                .getInstance().getTemplateContent(MyFaulty.class,\n-                        \"my-super-lit-element\", service);\n-\n-        Assert.assertNull(templateContent);\n-    }\n-\n-    @Test\n-    public void getTemplateContent_nonLocalTemplate_rootElementParsed() {\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenReturn(VAADIN_SERVLET_RESOURCES + \"config/stats.json\");\n-        LitTemplateParser.TemplateData templateContent = LitTemplateParserImpl\n-                .getInstance().getTemplateContent(HelloWorld.class,\n-                        HelloWorld.class.getAnnotation(Tag.class).value(),\n-                        service);\n-\n-        Assert.assertEquals(\"Template should contain one child\", 2,\n-                templateContent.getTemplateElement().childNodeSize());\n-\n-        Assert.assertEquals(\"Template should have 3 divs\", 3, templateContent\n-                .getTemplateElement().getElementsByTag(\"div\").size());\n-    }\n-\n-    @Test\n-    public void severalJsModuleAnnotations_theFirstFileDoesNotExist_fileWithContentIsChosen() {\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenReturn(VAADIN_SERVLET_RESOURCES + \"config/stats.json\");\n-\n-        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n-        LitTemplateParser.TemplateData templateContent = instance\n-                .getTemplateContent(BrokenJsModuleAnnotation.class,\n-                        \"my-lit-element-view\", service);\n-\n-        Assert.assertEquals(\"Parent element ID not the expected one.\",\n-                \"my-lit-element-view\",\n-                templateContent.getTemplateElement().parent().id());\n-    }\n-\n-    @Test\n-    public void severalJsModuleAnnotations_parserSelectsByName() {\n-        Mockito.when(configuration.getStringProperty(Mockito.anyString(),\n-                Mockito.anyString()))\n-                .thenReturn(VAADIN_SERVLET_RESOURCES + \"config/stats.json\");\n-\n-        LitTemplateParser instance = LitTemplateParserImpl.getInstance();\n-        LitTemplateParser.TemplateData templateContent = instance\n-                .getTemplateContent(SeveralJsModuleAnnotations.class,\n-                        \"my-lit-element-view\", service);\n-\n-        Assert.assertEquals(\"Parent element ID not the expected one.\",\n-                \"my-lit-element-view\",\n-                templateContent.getTemplateElement().parent().id());\n-\n-        // Two JS module annotations with almost the same content.\n-        // The first one contains a string \"Tag name doesn't match the JS module\n-        // name\", the second one doesn't contain this string.\n-        // The second module should be chosen since its name matches the tag\n-        // name\n-        Assert.assertThat(templateContent.getTemplateElement().html(),\n-                CoreMatchers.not(CoreMatchers.containsString(\n-                        \"Tag name doesn't match the JS module name\")));\n-    }\n-\n-    @Tag(\"my-element\")\n-    @JsModule(\"./frontend/MyLitElement.js\")\n-    public class MyLitElement extends LitTemplate {\n-    }\n-\n-    @Tag(\"my-lit-element-view\")\n-    @JsModule(\"./frontend/my-lit-element-view.js\")\n-    public class MyLitElementView extends LitTemplate {\n-    }\n-\n-    @Tag(\"foo-view\")\n-    @JsModule(\"/bar/foo.js\")\n-    public class FooView extends LitTemplate {\n-    }\n-\n-    @Tag(\"my-element\")\n-    @JsModule(\"./frontend/MyElementFaultyMethods.js\")\n-    public class MyFaulty extends LitTemplate {\n-    }\n-\n-    @Tag(\"my-super-lit-element\")\n-    @JsModule(\"./frontend/MySuperLitElement.js\")\n-    public class MySuperLitElement extends LitTemplate {\n-    }\n-\n-    @Tag(\"hello-world\")\n-    @JsModule(\"./src/hello-world-lit.js\")\n-    public class HelloWorld extends LitTemplate {\n-    }\n-\n-    @Tag(\"my-lit-element-view\")\n-    @JsModule(\"./frontend/non-existant.js\")\n-    @JsModule(\"./frontend/my-lit-element-view.js\")\n-    public class BrokenJsModuleAnnotation extends LitTemplate {\n-    }\n-\n-    @Tag(\"my-lit-element-view\")\n-    @JsModule(\"./frontend/MyLitElement.js\")\n-    @JsModule(\"./frontend/my-lit-element-view.js\")\n-    public class SeveralJsModuleAnnotations extends LitTemplate {\n-    }\n-\n-}\n"}}, {"oid": "c262e244e07b3f4c68473f2cb371cfcf1fa7f1f9", "url": "https://github.com/vaadin/flow/commit/c262e244e07b3f4c68473f2cb371cfcf1fa7f1f9", "message": "Add lit template parser", "committedDate": "2020-09-10T14:57:48Z", "type": "commit"}, {"oid": "42334a43bb464d65c2e6d85901d315d0af9fcbe2", "url": "https://github.com/vaadin/flow/commit/42334a43bb464d65c2e6d85901d315d0af9fcbe2", "message": "Lit template parser unit test", "committedDate": "2020-09-10T14:57:48Z", "type": "commit"}, {"oid": "19bc6d77a2d22c24a6645ee26f8074d21f268291", "url": "https://github.com/vaadin/flow/commit/19bc6d77a2d22c24a6645ee26f8074d21f268291", "message": "Add javadocs and test files", "committedDate": "2020-09-10T14:57:48Z", "type": "commit"}, {"oid": "d49c6e6db859b44ed19e1921729299d7b48e2585", "url": "https://github.com/vaadin/flow/commit/d49c6e6db859b44ed19e1921729299d7b48e2585", "message": "Exclude classes from serializable tests", "committedDate": "2020-09-10T14:57:49Z", "type": "commit"}, {"oid": "8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "url": "https://github.com/vaadin/flow/commit/8337f3ce4f0fe6b40bda14cb5d7042c05b3907ae", "message": "Corrections after review", "committedDate": "2020-09-10T14:57:49Z", "type": "commit"}, {"oid": "bdbee1ef50438258a1682bd4d8c6ccbfd0eb6ef5", "url": "https://github.com/vaadin/flow/commit/bdbee1ef50438258a1682bd4d8c6ccbfd0eb6ef5", "message": "Fix assertion message", "committedDate": "2020-09-10T14:57:50Z", "type": "commit"}, {"oid": "ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "url": "https://github.com/vaadin/flow/commit/ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "message": "Revert changes in 1000th time", "committedDate": "2020-09-10T14:58:50Z", "type": "commit"}, {"oid": "ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "url": "https://github.com/vaadin/flow/commit/ac04d88dd92a0cbdab07a4fd913a5afc12d82fb7", "message": "Revert changes in 1000th time", "committedDate": "2020-09-10T14:58:50Z", "type": "forcePushed"}, {"oid": "2456d476c5e2df9405fc053896170e69224225ae", "url": "https://github.com/vaadin/flow/commit/2456d476c5e2df9405fc053896170e69224225ae", "message": "Resolve merge conflicts", "committedDate": "2020-09-10T15:00:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486483963", "bodyText": "For discussion: LIT_TEMPLATE_PATTERN is sent as parameter to Matcher::find which matches greedily. It means that if there is an additional block of the form xxx`...`;}  following the end of the html`...`;} block, it will also be consumed by the regex. This could happen for instance if a styles function  was placed after render:\nexport class LitTest extends LitElement {\n  render() { return html`<button/>`; }\n  static get styles() { return css`:host { background-color: pink }`; }\n}\nPutting this throught the parser results in the following templateDocument:\n<html>\n <head></head>\n <body>\n  <button></button>`; } static get styles() { return css`:host { background-color: pink }\n </body>\n</html>\nMaybe we can rely on templates from designer to never have such an issue. But it would feel safer to match the content between the delimiters as [^`]|\\\\` , though I'm not sure how to make that work with the backreference \\\\1 (is it at all possible to use html\"...\" or html'...'? I get syntax errors when I try them, both in JS and TS).", "author": "joheriks", "createdAt": "2020-09-10T16:39:19Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -83,9 +83,38 @@\n      * <code>([\\s\\S]*)\\1;[\\s]*\\}</code> captures all text until we encounter the\n      * end character with <code>;}</code> e.g. <code>';}</code>\n      */\n-    private static final Pattern TEMPLATE_PATTERN = Pattern.compile(\n+    private static final Pattern POLYMER_TEMPLATE_PATTERN = Pattern.compile(\n             \"get[\\\\s]*template\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html([\\\\`\\\\'\\\\\\\"])([\\\\s\\\\S]*)\\\\1;[\\\\s]*\\\\}\");\n \n+    /**\n+     * Lit template pattern matches the template getter\n+     *\n+     * <pre>\n+     *     render() {\n+     *       return html`\n+     *         &lt;style&gt;\n+     *           .response { margin-top: 10px`; }\n+     *         &lt;/style&gt;\n+     *         &lt;paper-checkbox checked=&quot;{{liked}}&quot;&gt;I like web components.&lt;/paper-checkbox&gt;\n+     *\n+     *         &lt;div id=&quot;test&quot; hidden$=&quot;[[!liked]]&quot; class=&quot;response&quot;&gt;Web components like you, too.&lt;/div&gt;\n+     *       `;\n+     *     }\n+     * </pre>\n+     *\n+     * <p>\n+     * <code>render\\(\\)[\\s]*\\{</code> finds the template getter method\n+     * <p>\n+     * <code>[\\s]*return[\\s]*html([\\`|\\'|\\\"])</code> finds the return statement\n+     * and captures the used string character\n+     * <p>\n+     * </p>\n+     * <code>([\\s\\S]*)\\1;[\\s]*\\}</code> captures all text until we encounter the\n+     * end character with <code>;}</code> e.g. <code>';}</code>\n+     */\n+    private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n+            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html([\\\\`\\\\'\\\\\\\"])([\\\\s\\\\S]*)\\\\1;[\\\\s]*\\\\}\");", "originalCommit": "2456d476c5e2df9405fc053896170e69224225ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4ODY1Mg==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486788652", "bodyText": "I don't know how to solve this via regexps.\nSolved via truncating the matched group in the code.\ncss example is quite artificial here since it may not contain DOM elements (the content is parsed) and will be just a text node.\nBut anyway I've added the unit test for this with invalid css containing HTML element.", "author": "denis-anisimov", "createdAt": "2020-09-11T05:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMjgwMA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486802800", "bodyText": "Could that match too early if there is an escaped backtick? For instance:\nexport class LitTest extends LitElement {\n  render() { return html`<span>Backtick in html: \\` </span>`; }\n}", "author": "joheriks", "createdAt": "2020-09-11T06:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNTM1Mg==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486805352", "bodyText": "Yes, it can .\nAnd this is the consequence of not being greedy: it's either greedy or not.\nGreedy has issues , not greedy has issues.\nThis way of parsing doesn't support every case.\nDesigner is not supposed to use this or we will need to rewrite it (and since designer doesn't support LitTemplate at all it has no sense to guess what is supported and what's not).", "author": "denis-anisimov", "createdAt": "2020-09-11T06:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNzc0Ng==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486807746", "bodyText": "I believe that it will be possible to write backticks in any component field in designer. And the parser will not work then, so it will be  clear bug. Handling escaped backticks should be doable with regex.", "author": "joheriks", "createdAt": "2020-09-11T06:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMTY0Nw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486811647", "bodyText": "The problem is : I don't know what we are trying to solve here.\nFirst of all: this is already a bug in Polymer template. Exactly the same issue is for it and this \"bug\" already exists.\nThe tick doesn't have to be escaped.\nThis is correct template content:\nhtml`\n  ${this.myBool?\n    html`<p>Render some HTML if myBool is true</p>`:\n    html`<p>Render some other HTML if myBool is false</p>`}\n`;\n\nAnd finally : please just let me know how may I solve this : should be \"\\\\\\`\" considered as a possible inside the content ? pattern for excluding \"\\`\" is most likely not a sloution", "author": "denis-anisimov", "createdAt": "2020-09-11T06:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxNzQ3Nw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486817477", "bodyText": "Yes, I think the easiest way would be to change the pattern to accept \\` also in the content.\nI don't think we should need to handle any unescapes ${...} back to JS, as that would theoretically require a regex handling all possible JS syntax. AFAIK Designer will not generate such, at least not containing a nested escape block.", "author": "joheriks", "createdAt": "2020-09-11T07:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgyMjM0Ng==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486822346", "bodyText": "My point is :\n\"\\\\'\" is decoded as two symbols \"\\\" and \"`\", so it has nothing to do with escaped  \"`\"\n\"\\'\" is decoded as  \"`\".\nSo the question is : should \"\\\\'\" be also allowed in the content ?\nAs a result : how may I distinguish \"some_number_of\\`\"  from \"another_number_of\\ \\`\"", "author": "denis-anisimov", "createdAt": "2020-09-11T07:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0NjUwOA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486846508", "bodyText": "I really don't think it's useful to solve one very specific unclear usecase ignoring unknown number of other generic cases\nand I don't know how to solve this with regexps.\nSince the exact usecase is not clear for me I've fixed something via the code.", "author": "denis-anisimov", "createdAt": "2020-09-11T08:07:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0ODg3Mw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486848873", "bodyText": "Would this pattern work?\nprivate static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n    \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html`(([^`]|\\\\.)*)`;[\\\\s]*\\\\}\");\nSo \\ followed by any character would be accepted. Except this doesn't accept ' or \" as delimiters but I still don't understand why that is needed.\n(BTW, to be able to write ` in GH MD one can use double backticks around the whole block)", "author": "joheriks", "createdAt": "2020-09-11T08:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1MTY3NQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486851675", "bodyText": "In my opinion the fix in the last commit would be a worse regression, since it will break the case where somebody is entering a backtick in component field in designer. I would either fix the regex to accept escape sequences or revert that commit.", "author": "joheriks", "createdAt": "2020-09-11T08:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1OTczOA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486859738", "bodyText": "This pattern doesn't match the template content in the latest test.", "author": "denis-anisimov", "createdAt": "2020-09-11T08:32:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg2ODE0NQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486868145", "bodyText": "Sorry. I had forgot the Java escaping also for \\:\n    private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html`(([^`]|\\\\\\\\.)*)`;[\\\\s]*\\\\}\");\nAlso there was a missing } in that latest test case. The test passed for me after I fixed that (and with the above the group index would be 1 in bundle parser).", "author": "joheriks", "createdAt": "2020-09-11T08:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MjA5Nw==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486872097", "bodyText": "Now I've realized that I forgot to push the latest changes.\nThis pattern doesn't match the template content in the latest test (from the latest commit)\nwhose content is:\nhttps://github.com/vaadin/flow/blob/0a74148647c4e8bec0ece900d1d79c968487fe8e/flow-server/src/test/resources/META-INF/VAADIN/config/stats.json\nMyGreedyLitElement", "author": "denis-anisimov", "createdAt": "2020-09-11T08:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4NTY5Ng==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486885696", "bodyText": "I believe that would be the correct behavior, since the render method was missing a closing brace.", "author": "joheriks", "createdAt": "2020-09-11T09:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwMjkwOQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486902909", "bodyText": "done", "author": "denis-anisimov", "createdAt": "2020-09-11T09:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4Mzk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "57d6078f9b7ab078a303069e7ef38416bb8231bd", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java b/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java\nindex ce0c8b95c3..16646de07f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java\n\n@@ -113,7 +113,7 @@ public final class BundleParser {\n      * end character with <code>;}</code> e.g. <code>';}</code>\n      */\n     private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n-            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html([\\\\`\\\\'\\\\\\\"])([\\\\s\\\\S]*)\\\\1;[\\\\s]*\\\\}\");\n+            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html`(([^`]|\\\\\\\\.)*)`;[\\\\s]*\\\\}\");\n \n     private static final Pattern NO_TEMPLATE_PATTERN = Pattern.compile(\n             \"innerHTML[\\\\s]*=[\\\\s]*([\\\\`\\\\'\\\\\\\"])([\\\\s]*<dom-module\\\\s+[\\\\s\\\\S]*)\\\\1;\");\n"}}, {"oid": "904285e32c8f159a87a7a4d3f2ae169054e892e3", "url": "https://github.com/vaadin/flow/commit/904285e32c8f159a87a7a4d3f2ae169054e892e3", "message": "Be aware of greedy matcher", "committedDate": "2020-09-11T05:48:47Z", "type": "commit"}, {"oid": "0a74148647c4e8bec0ece900d1d79c968487fe8e", "url": "https://github.com/vaadin/flow/commit/0a74148647c4e8bec0ece900d1d79c968487fe8e", "message": "Allow escaped backticks in the template content", "committedDate": "2020-09-11T08:02:18Z", "type": "commit"}, {"oid": "49d2e662acd9fe83b9279ae9efe6ebaaa4e3f2bf", "url": "https://github.com/vaadin/flow/commit/49d2e662acd9fe83b9279ae9efe6ebaaa4e3f2bf", "message": "Fix missing } and remove extra one", "committedDate": "2020-09-11T09:05:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwMDU0OQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486900549", "bodyText": "I find this more messy than having the same logic in a regex, to be honest.", "author": "joheriks", "createdAt": "2020-09-11T09:21:53Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -273,6 +269,37 @@ public static Element parseLitTemplateElement(String fileName,\n         return null;\n     }\n \n+    private static String getNonGreadyTemplateContent(String greedyContent,\n+            String delimiter) {\n+        String templateContent = greedyContent;\n+        // in case greedy match let's truncate the second group (remove\n+        // everything after delimiter)\n+        int index = -1;\n+        while (true) {\n+            index = greedyContent.indexOf(delimiter, index + 1);\n+            if (index < 0) {\n+                break;\n+            }\n+            templateContent = greedyContent.substring(0, index);\n+            if (!endsWithEscaped(templateContent)) {\n+                break;\n+            }\n+        }\n+        return templateContent;\n+    }\n+\n+    private static boolean endsWithEscaped(String value) {\n+        int slashCount = 0;\n+        for (int i = value.length() - 1; i >= 0; i--) {\n+            if (value.charAt(i) == '\\\\') {\n+                slashCount++;\n+            } else {\n+                break;\n+            }\n+        }\n+        return slashCount % 2 == 1;\n+    }\n+", "originalCommit": "0a74148647c4e8bec0ece900d1d79c968487fe8e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwNDEwNA==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486904104", "bodyText": "The main messy thing is : absence of any specification how it should work/what's supported/what's not.\nIn fact: I don't know the result of this code, I'm just tired from it.", "author": "denis-anisimov", "createdAt": "2020-09-11T09:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkwMDU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "57d6078f9b7ab078a303069e7ef38416bb8231bd", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java b/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java\nindex 60ead9500a..16646de07f 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java\n\n@@ -269,37 +267,6 @@ public final class BundleParser {\n         return null;\n     }\n \n-    private static String getNonGreadyTemplateContent(String greedyContent,\n-            String delimiter) {\n-        String templateContent = greedyContent;\n-        // in case greedy match let's truncate the second group (remove\n-        // everything after delimiter)\n-        int index = -1;\n-        while (true) {\n-            index = greedyContent.indexOf(delimiter, index + 1);\n-            if (index < 0) {\n-                break;\n-            }\n-            templateContent = greedyContent.substring(0, index);\n-            if (!endsWithEscaped(templateContent)) {\n-                break;\n-            }\n-        }\n-        return templateContent;\n-    }\n-\n-    private static boolean endsWithEscaped(String value) {\n-        int slashCount = 0;\n-        for (int i = value.length() - 1; i >= 0; i--) {\n-            if (value.charAt(i) == '\\\\') {\n-                slashCount++;\n-            } else {\n-                break;\n-            }\n-        }\n-        return slashCount % 2 == 1;\n-    }\n-\n     private static Element tryParsePolymer2(Document templateDocument,\n             Matcher noTemplateMatcher) {\n         while (noTemplateMatcher.find()\n"}}, {"oid": "57d6078f9b7ab078a303069e7ef38416bb8231bd", "url": "https://github.com/vaadin/flow/commit/57d6078f9b7ab078a303069e7ef38416bb8231bd", "message": "Use suggested way for pattern", "committedDate": "2020-09-11T09:25:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0OTI1NQ==", "url": "https://github.com/vaadin/flow/pull/8979#discussion_r486949255", "bodyText": "Remove this use of \"DEAULT_FLOW_RESOURCES_FOLDER\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-11T10:13:36Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -256,8 +324,8 @@ private static String getSourceFromObject(JsonObject module,\n             // using ./ as the actual path contains\n             // \"node_modules/@vaadin/flow-frontend/\" instead of \"./\"\n             // \"target/flow-frontend/\" instead of \"./\"\n-            if (name.contains(FLOW_NPM_PACKAGE_NAME) ||\n-                    name.contains(DEFAULT_FLOW_RESOURCES_FOLDER)) {\n+            if (name.contains(FLOW_NPM_PACKAGE_NAME)\n+                    || name.contains(DEAULT_FLOW_RESOURCES_FOLDER)) {", "originalCommit": "57d6078f9b7ab078a303069e7ef38416bb8231bd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}