{"pr_number": 9084, "pr_title": "Merge master to offline feature branch", "pr_createdAt": "2020-09-30T19:32:56Z", "pr_url": "https://github.com/vaadin/flow/pull/9084", "timeline": [{"oid": "b4f7db2db8dd30c443699ba83c5144feef1bdf39", "url": "https://github.com/vaadin/flow/commit/b4f7db2db8dd30c443699ba83c5144feef1bdf39", "message": "fix: don't reuse endpoint nullable checker state (#9019)", "committedDate": "2020-09-17T08:13:48Z", "type": "commit"}, {"oid": "d80204a1396cb290f21fc3a21f42a18d034c94f8", "url": "https://github.com/vaadin/flow/commit/d80204a1396cb290f21fc3a21f42a18d034c94f8", "message": "Send clear event if no other changes done on attach (#9017)\n\nSend clear event if no other changes done on attach\r\n\r\nFixes #9015", "committedDate": "2020-09-17T08:33:04Z", "type": "commit"}, {"oid": "db04da7f008c3d62ec35bab68ad203c7582d994d", "url": "https://github.com/vaadin/flow/commit/db04da7f008c3d62ec35bab68ad203c7582d994d", "message": "Read text for template element (#9008)\n\n* Read text content as an attribute data\r\n\r\n* Add unit tests for template element set text\r\n\r\n* Add IT for template element set text\r\n\r\n* Update IT after change for reading text\r\n\r\n* Improve code a bit based on review\r\n\r\n* Add missed tag for the component\r\n\r\n* Remove extra symbol\r\n\r\n* Add lost lines after merge", "committedDate": "2020-09-17T12:49:04Z", "type": "commit"}, {"oid": "51d6bd997687bf092128ead03882fce85356b982", "url": "https://github.com/vaadin/flow/commit/51d6bd997687bf092128ead03882fce85356b982", "message": "Deprecate UI.getRouter() and use it only as internal (#9020)\n\nFixes #8989", "committedDate": "2020-09-17T13:40:14Z", "type": "commit"}, {"oid": "861d5979d926d8774aa0f675a80451f337b514fe", "url": "https://github.com/vaadin/flow/commit/861d5979d926d8774aa0f675a80451f337b514fe", "message": "refactor: move methods from endpoint nullable checker to a helper (#9022)", "committedDate": "2020-09-18T06:24:52Z", "type": "commit"}, {"oid": "c0595e686c7902a19c6d9f5785991f6716060b8e", "url": "https://github.com/vaadin/flow/commit/c0595e686c7902a19c6d9f5785991f6716060b8e", "message": "Keep ui reference to avoid its GC during test (#9021)", "committedDate": "2020-09-18T06:58:57Z", "type": "commit"}, {"oid": "646c646c5834f9d1aedb2c9f3cb3e8e898342123", "url": "https://github.com/vaadin/flow/commit/646c646c5834f9d1aedb2c9f3cb3e8e898342123", "message": "chore: fix typo (#9032)", "committedDate": "2020-09-18T13:40:55Z", "type": "commit"}, {"oid": "032a612b5b2927c9e7a2dc6ad8ea654e9c8ba0ab", "url": "https://github.com/vaadin/flow/commit/032a612b5b2927c9e7a2dc6ad8ea654e9c8ba0ab", "message": "Deprecate Polymer Template related classes (#9025)\n\n* Extract common template classes and deprecate polymer support\r\n* Deprecate and extract common functionality from polymertemplate package\r\n* Deprecate polymer tempate Id annotation\r\n* Deprecate Polymer template related classes\r\n* Deprecate impl classes\r\n* Correct javadocs\r\n* Exclude classes from serializable test", "committedDate": "2020-09-21T06:37:54Z", "type": "commit"}, {"oid": "7f397deff4405f895365e867ffebd3a36295e8c0", "url": "https://github.com/vaadin/flow/commit/7f397deff4405f895365e867ffebd3a36295e8c0", "message": "Add test for forwardTo from setParameter without BeforeEnterObserver. (#9030)\n\nAdd test for forwardTo from setParameter without BeforeEnterObserver.", "committedDate": "2020-09-21T09:41:06Z", "type": "commit"}, {"oid": "8f45195b78e2824604f462a2147001ebb3e53cf5", "url": "https://github.com/vaadin/flow/commit/8f45195b78e2824604f462a2147001ebb3e53cf5", "message": "Be aware of property value in the Element (#9031)\n\nPart of #9012", "committedDate": "2020-09-21T12:39:10Z", "type": "commit"}, {"oid": "646ae2d4d4b2d620a58ef90f999dc6b36f02ae0e", "url": "https://github.com/vaadin/flow/commit/646ae2d4d4b2d620a58ef90f999dc6b36f02ae0e", "message": "fix a flaky test in VaadinConnectControllerTest (#9041)\n\nThe test `VaadinConnectControllerTest.should_bePossibeToGetPrincipalInEndpoint` fails randomly in CI, the reason seems to be that the `MockVaadinServletService service` is garbage collected before the endpoint invocation. \r\nChange `MockVaadinServletService service` to be a field instance to prevent the garbage collection from happening.", "committedDate": "2020-09-21T15:10:59Z", "type": "commit"}, {"oid": "2788bbf9eb8211b0368cb20f9ed9e7444131d414", "url": "https://github.com/vaadin/flow/commit/2788bbf9eb8211b0368cb20f9ed9e7444131d414", "message": "JavaScriptBootstrapHandler: Do not compute push url from service and request url on the server side (#9040)\n\nFixes a regression where the relative path calculation went wrong if the parameter contains a slash.", "committedDate": "2020-09-22T06:15:12Z", "type": "commit"}, {"oid": "deab152efa6d6fa4e1a72f3245903e19b039bd9f", "url": "https://github.com/vaadin/flow/commit/deab152efa6d6fa4e1a72f3245903e19b039bd9f", "message": "Set `display:none` in addition to `hidden` attribute when hiding elements inside a shadow root (#9026)\n\nSet `display:none` in addition to `hidden` attribute when hiding elements inside a shadow root\r\n\r\nFixes #8256", "committedDate": "2020-09-22T07:57:42Z", "type": "commit"}, {"oid": "55426ae9744f9b9ff943836ae19df50db215ae64", "url": "https://github.com/vaadin/flow/commit/55426ae9744f9b9ff943836ae19df50db215ae64", "message": "Remove faux Serializable from AppShellSettings (#9048)\n\nFixes #9047", "committedDate": "2020-09-22T09:37:01Z", "type": "commit"}, {"oid": "819eb22a2e0cf8e29d4de23f6f38afc3a3ff1671", "url": "https://github.com/vaadin/flow/commit/819eb22a2e0cf8e29d4de23f6f38afc3a3ff1671", "message": "Clear all routes references in ConfigureRoutes. (#9050)\n\nClear all routes references in ConfigureRoutes including the RouteModel.", "committedDate": "2020-09-23T09:32:29Z", "type": "commit"}, {"oid": "339ccc8b339701840bc0b469afbacffe4b4914e8", "url": "https://github.com/vaadin/flow/commit/339ccc8b339701840bc0b469afbacffe4b4914e8", "message": "Force size re-estimate when requested range end equals assumed size (#9033)", "committedDate": "2020-09-24T05:40:22Z", "type": "commit"}, {"oid": "950b49453a29fe1082dacddcd9eecede78204e6c", "url": "https://github.com/vaadin/flow/commit/950b49453a29fe1082dacddcd9eecede78204e6c", "message": "Fix JavaDoc typos (#9055)", "committedDate": "2020-09-24T06:01:20Z", "type": "commit"}, {"oid": "9c7191619258cf2317eccdf603931ca74d662ec6", "url": "https://github.com/vaadin/flow/commit/9c7191619258cf2317eccdf603931ca74d662ec6", "message": "Restructure dev mode handler logic to avoid starting webpack twice (#9061)\n\nRestructure dev mode handler logic to avoid starting webpack twice\r\n\r\nFixes #8981", "committedDate": "2020-09-25T10:10:02Z", "type": "commit"}, {"oid": "f374da0beb141961ee428fe4616c868abf4099ed", "url": "https://github.com/vaadin/flow/commit/f374da0beb141961ee428fe4616c868abf4099ed", "message": "Skip data provider verification in AbstractDataView if default one is used (#9052)\n\n* Skip data provider verification in AbstractDataView if default one is used in data communicator\r\n\r\n* Improve explanatory comments\r\n\r\n* Make empty data provider public for being used in components", "committedDate": "2020-09-29T10:50:40Z", "type": "commit"}, {"oid": "19352662b43a89943350bab27acef3ad178a41bd", "url": "https://github.com/vaadin/flow/commit/19352662b43a89943350bab27acef3ad178a41bd", "message": "Use regular stream instead rather than parallel (#9074)", "committedDate": "2020-09-29T11:21:45Z", "type": "commit"}, {"oid": "d80b07d2c4bcad45b0503558d01af1e9d4bb7278", "url": "https://github.com/vaadin/flow/commit/d80b07d2c4bcad45b0503558d01af1e9d4bb7278", "message": "fix: each UI should have its own CSRF token (#9071)", "committedDate": "2020-09-29T13:06:27Z", "type": "commit"}, {"oid": "66475bab39cca386541863ef8a8fd30f173336f8", "url": "https://github.com/vaadin/flow/commit/66475bab39cca386541863ef8a8fd30f173336f8", "message": "Update javadoc of rerouteTo()/forwardTo() (#9060)\n\nUpdate javadoc of rerouteTo()/forwardTo() to clear out the difference between the two", "committedDate": "2020-09-30T07:20:21Z", "type": "commit"}, {"oid": "c4ffe6c5b873346f9b0730bf06dea69a7a6d08b5", "url": "https://github.com/vaadin/flow/commit/c4ffe6c5b873346f9b0730bf06dea69a7a6d08b5", "message": "feat: add API for disabling data fetching to DC (#9070)\n\nPart of vaadin/vaadin-combo-box-flow#355", "committedDate": "2020-09-30T07:44:41Z", "type": "commit"}, {"oid": "be54d42dc27133de0ed1945cb84e92d648cdf472", "url": "https://github.com/vaadin/flow/commit/be54d42dc27133de0ed1945cb84e92d648cdf472", "message": "Extract polymer templates into separate module (#9067)\n\nExtract polymer templates into separate module\r\n\r\nFixes #9067", "committedDate": "2020-09-30T08:21:07Z", "type": "commit"}, {"oid": "2487cad2df556bed6f3bf2383b25fb4326785f40", "url": "https://github.com/vaadin/flow/commit/2487cad2df556bed6f3bf2383b25fb4326785f40", "message": "Extract lit template support to a separate module (#9073)\n\nExtract Lit templates support to a separate module\r\n\r\nFixes #9038", "committedDate": "2020-09-30T13:24:35Z", "type": "commit"}, {"oid": "49469947a63313e97ac29b8b3953560884bc9ba6", "url": "https://github.com/vaadin/flow/commit/49469947a63313e97ac29b8b3953560884bc9ba6", "message": "fix: fail access check when no csrf token in session (#9072)\n\n* fix: fail access check when no csrf token in session\r\n\r\n* apply code review suggestion", "committedDate": "2020-09-30T13:51:20Z", "type": "commit"}, {"oid": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "url": "https://github.com/vaadin/flow/commit/e8de5f85f5ba9429c20c388522e550d64bab8d98", "message": "Merge branch 'master' into haijian/merge-master", "committedDate": "2020-09-30T19:32:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzcwMw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807703", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:14Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ClientUpdateMode.java", "diffHunk": "@@ -22,7 +22,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Template model and polymer template support is deprecated - we\n+ *             recommend you to use {@code LitTemplate} instead. Read more\n+ *             details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public enum ClientUpdateMode {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzcxNA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807714", "bodyText": "Remove this use of \"Thread.sleep()\".", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:15Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -514,6 +519,80 @@ public void serveDevModeRequest_prepareTasksThrows_serveDevModeReturnsFalseAndDo\n         Assert.assertFalse(handler.serveDevModeRequest(request, response));\n     }\n \n+    @Test\n+    public void start_twoTimes_onlyOneHandlerInstanceIsCreated() {\n+        MockDeploymentConfiguration configuration = Mockito\n+                .spy(MockDeploymentConfiguration.class);\n+        DevModeHandler handler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+        handler.join();\n+\n+        // This is how new server handler instantiation checked:\n+        Mockito.verify(configuration).reuseDevServer();\n+\n+        // \"start\" one more time: there should not be another instance of dev\n+        // mode handler created\n+        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+        anotherHandler.join();\n+\n+        // The handler instances are the same but there should be no attempt to\n+        // create another instance (which won't be stored anywhere), see below\n+        Assert.assertSame(handler, anotherHandler);\n+\n+        // No more \"reuseDevServer\" calls are done: see above, it has been\n+        // already called one time\n+        Mockito.verify(configuration).reuseDevServer();\n+    }\n+\n+    @Test\n+    public void start_twoInstances_secondInstanceUsesAnotherPort()\n+            throws Exception {\n+\n+        // start the first instance\n+        DevModeHandler handler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+\n+        // remove the \"singleton\" instance to be able to start another one\n+        removeDevModeHandlerInstance();\n+\n+        // since the timeout is quite big the server port still should be\n+        // available and the second instance should try to reuse it\n+\n+        DevModeHandler.start(0, configuration, npmFolder,\n+                CompletableFuture.completedFuture(null));\n+\n+        // make checks only if webpack has not yet completed\n+\n+        DevModeHandler anotherHandler = DevModeHandler.start(0, configuration,\n+                npmFolder, CompletableFuture.completedFuture(null));\n+\n+        while (handler.getPort() == 0) {\n+            Thread.sleep(100);", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzcyMQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807721", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:16Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ConvertedModelType.java", "diffHunk": "@@ -34,7 +34,16 @@\n  *            application type of the converter used by this class\n  * @param <M>\n  *            model type of the converter used by this class\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class ConvertedModelType<A, M extends Serializable>", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzcyNg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807726", "bodyText": "Remove this use of \"DEAULT_FLOW_RESOURCES_FOLDER\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:17Z", "path": "flow-lit-template/src/main/java/com/vaadin/flow/component/littemplate/BundleLitParser.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.littemplate;\n+\n+import static com.vaadin.flow.server.frontend.FrontendUtils.DEAULT_FLOW_RESOURCES_FOLDER;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.FLOW_NPM_PACKAGE_NAME;\n+import static elemental.json.JsonType.ARRAY;\n+import static elemental.json.JsonType.OBJECT;\n+import static elemental.json.JsonType.STRING;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.internal.StringUtil;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+\n+/**\n+ * Parse statistics data provided by webpack.\n+ *\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ * @see LitTemplateParser\n+ */\n+public final class BundleLitParser {\n+\n+    private static final Logger LOGGER = LoggerFactory\n+            .getLogger(BundleLitParser.class);\n+\n+    private static final String SOURCE = \"source\";\n+    private static final String NAME = \"name\";\n+    private static final String CHUNKS = \"chunks\";\n+    private static final String MODULES = \"modules\";\n+\n+    /**\n+     * Lit template pattern matches the template getter\n+     *\n+     * <pre>\n+     *     render() {\n+     *       return html`\n+     *         &lt;style&gt;\n+     *           .response { margin-top: 10px`; }\n+     *         &lt;/style&gt;\n+     *         &lt;paper-checkbox checked=&quot;${liked}&quot;&gt;I like web components.&lt;/paper-checkbox&gt;\n+     *\n+     *         &lt;div id=&quot;test&quot; ?hidden=&quot;${liked}&quot; class=&quot;response&quot;&gt;Web components like you, too.&lt;/div&gt;\n+     *       `;\n+     *     }\n+     * </pre>\n+     *\n+     * <p>\n+     * <code>render\\(\\)[\\s]*\\{</code> finds the template getter method\n+     * <p>\n+     * <code>[\\s]*return[\\s]*html`</code> finds the return statement\n+     * <p>\n+     * </p>\n+     * <code>(([^`]|\\\\\\\\.)*)</code> captures all text until we encounter the end\n+     * character with <code>;}</code> e.g. <code>';}</code>\n+     */\n+    private static final Pattern LIT_TEMPLATE_PATTERN = Pattern.compile(\n+            \"render\\\\(\\\\)[\\\\s]*\\\\{[\\\\s]*return[\\\\s]*html`(([^`]|\\\\\\\\.)*)`;[\\\\s]*\\\\}\");\n+\n+    private static final Pattern HASH_PATTERN = Pattern\n+            .compile(\"\\\"hash\\\"\\\\s*:\\\\s*\\\"([^\\\"]+)\\\"\\\\s*,\");\n+\n+    private static final String TEMPLATE_TAG_NAME = \"template\";\n+\n+    private BundleLitParser() {\n+    }\n+\n+    /**\n+     * Gets the hash from the string content of a webpack stats file. It uses\n+     * regex to avoid parsing the entire string into a json object.\n+     *\n+     * @param fileContents\n+     *            the content of the stats file\n+     * @return the hash\n+     */\n+    public static String getHashFromStatistics(String fileContents) {\n+        Matcher matcher = HASH_PATTERN.matcher(fileContents);\n+        return matcher.find() ? matcher.group(1) : \"\" + fileContents.length();\n+    }\n+\n+    /**\n+     * Parses the content of the stats file to return a json object.\n+     *\n+     * @param fileContents\n+     *            the content of the stats file\n+     * @return a JsonObject with the stats\n+     */\n+    public static JsonObject parseJsonStatistics(String fileContents) {\n+        return Json.parse(fileContents);\n+    }\n+\n+    /**\n+     * Get a module source from the statistics Json file generated by webpack.\n+     *\n+     * @param fileName\n+     *            name of the file to get from the json\n+     * @param statistics\n+     *            statistics json as a JsonObject\n+     * @return JsonObject for the file statistic\n+     */\n+    public static String getSourceFromStatistics(String fileName,\n+            JsonObject statistics) {\n+        return getSourceFromObject(statistics, fileName);\n+    }\n+\n+    /**\n+     * Get the Lit template element for the given polymer template source.\n+     *\n+     * @param fileName\n+     *            name of the handled file\n+     * @param source\n+     *            source js to get template element from\n+     * @return template element or {code null} if not found\n+     */\n+    public static Element parseLitTemplateElement(String fileName,\n+            String source) {\n+        Document templateDocument = null;\n+        String content = StringUtil.removeComments(source);\n+        Matcher templateMatcher = LIT_TEMPLATE_PATTERN.matcher(content);\n+\n+        // GroupCount should be 2 as the first group contains `|'|\" depending\n+        // on what was in template return html' and the second is the\n+        // template contents.\n+        if (templateMatcher.find() && templateMatcher.groupCount() == 2) {\n+            String group = templateMatcher.group(1);\n+            LOGGER.trace(\"Found regular Lit template content was {}\", group);\n+\n+            templateDocument = Jsoup.parse(group);\n+            LOGGER.trace(\"The parsed template document was {}\",\n+                    templateDocument);\n+            Element template = templateDocument\n+                    .createElement(TEMPLATE_TAG_NAME);\n+            Element body = templateDocument.body();\n+            templateDocument.body().children().stream()\n+                    .filter(node -> !node.equals(body))\n+                    .forEach(template::appendChild);\n+\n+            return template;\n+        }\n+        LOGGER.warn(\"No lit template data found in {} sources.\", fileName);\n+        return null;\n+    }\n+\n+    // find the first module whose name matches the file name\n+    private static String getSourceFromObject(JsonObject module,\n+            String fileName) {\n+        String source = null;\n+        if (validKey(module, MODULES, ARRAY)) {\n+            source = getSourceFromArray(module.getArray(MODULES), fileName);\n+        }\n+        if (source == null && validKey(module, CHUNKS, ARRAY)) {\n+            source = getSourceFromArray(module.getArray(CHUNKS), fileName);\n+        }\n+        if (source == null && validKey(module, NAME, STRING)\n+                && validKey(module, SOURCE, STRING)) {\n+            String name = module.getString(NAME);\n+\n+            // append `.js` extension if not yet as webpack does\n+            fileName = fileName.replaceFirst(\"(\\\\.js|)$\", \".js\");\n+\n+            String alternativeFileName = fileName\n+                    // Replace frontend part since webpack entry-point is\n+                    // already in the frontend folder\n+                    .replaceFirst(\"^(\\\\./)frontend/\", \"$1\")\n+                    // Replace the flow frontend protocol\n+                    .replaceFirst(\"^frontend://\", \".\");\n+\n+            // For templates inside add-ons we will not find the sources\n+            // using ./ as the actual path contains\n+            // \"node_modules/@vaadin/flow-frontend/\" instead of \"./\"\n+            // \"target/flow-frontend/\" instead of \"./\"\n+            if (name.contains(FLOW_NPM_PACKAGE_NAME)\n+                    || name.contains(DEAULT_FLOW_RESOURCES_FOLDER)) {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzczNg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807736", "bodyText": "Remove this use of \"getHandlerAnnotation\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:18Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractServerHandlers.java", "diffHunk": "@@ -205,9 +216,20 @@ protected void ensureSupportedReturnType(Method method) {\n      * Gets the annotation which is used to mark methods as handlers.\n      *\n      * @return the handler marker annotation\n+     * @deprecated Implement {@link #getHandlerAnnotationFqn()} instead\n      */\n+    @Deprecated\n     protected abstract Class<? extends Annotation> getHandlerAnnotation();\n \n+    /**\n+     * Gets the annotation FQN which is used to mark methods as handlers.\n+     *\n+     * @return the handler marker annotation\n+     */\n+    protected String getHandlerAnnotationFqn() {\n+        return getHandlerAnnotation().getName();", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc0Nw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807747", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:19Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/AbstractServerHandlers.java", "diffHunk": "@@ -205,9 +216,20 @@ protected void ensureSupportedReturnType(Method method) {\n      * Gets the annotation which is used to mark methods as handlers.\n      *\n      * @return the handler marker annotation\n+     * @deprecated Implement {@link #getHandlerAnnotationFqn()} instead\n      */\n+    @Deprecated\n     protected abstract Class<? extends Annotation> getHandlerAnnotation();", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc1Ng==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807756", "bodyText": "Rename this class. \n Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:20Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate;\n+\n+import org.jsoup.nodes.Element;\n+\n+import com.vaadin.flow.component.template.Id;\n+\n+/**\n+ * Collects information of {@link Id @Id} mapped fields in a template class.\n+ *\n+ * @since 2.0\n+ * @deprecated Use\n+ *             {@link com.vaadin.flow.component.template.internal.IdCollector}\n+ *             instead. Polymer template support is deprecated - we recommend\n+ *             you to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class IdCollector", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc2Mw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807763", "bodyText": "The class name com.vaadin.flow.component.polymertemplate.IdCollector shadows the simple name of the superclass com.vaadin.flow.component.template.internal.IdCollector", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:21Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/IdCollector.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate;\n+\n+import org.jsoup.nodes.Element;\n+\n+import com.vaadin.flow.component.template.Id;\n+\n+/**\n+ * Collects information of {@link Id @Id} mapped fields in a template class.\n+ *\n+ * @since 2.0\n+ * @deprecated Use\n+ *             {@link com.vaadin.flow.component.template.internal.IdCollector}\n+ *             instead. Polymer template support is deprecated - we recommend\n+ *             you to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class IdCollector\n+        extends com.vaadin.flow.component.template.internal.IdCollector {\n+\n+    /**\n+     * Creates a collector the the given template.\n+     *\n+     * @param templateClass\n+     *            the template class, containing the {@code @Id} fields\n+     * @param templateFile\n+     *            The name of the file containing the template or\n+     *            <code>null</code> if not available {@code null}\n+     * @param templateRoot\n+     *            The root element of the template or <code>null</code> if not\n+     *            available\n+     */\n+    public IdCollector(Class<?> templateClass, String templateFile,\n+            Element templateRoot) {\n+        super(templateClass, templateFile, templateRoot);", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc3Mw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807773", "bodyText": "Rename this class. \n Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:21Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/IdMapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.template.Id;\n+\n+/**\n+ * Creates or maps Element instances to fields mapped using {@link Id @Id}.\n+ *\n+ * @since 2.0\n+ * @deprecated Use {@link com.vaadin.flow.component.template.internal.IdMapper}\n+ *             instead.Polymer template support is deprecated - we recommend you\n+ *             to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class IdMapper", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc3Ng==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807776", "bodyText": "The class name com.vaadin.flow.component.polymertemplate.IdMapper shadows the simple name of the superclass com.vaadin.flow.component.template.internal.IdMapper", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:22Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/IdMapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate;\n+\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.template.Id;\n+\n+/**\n+ * Creates or maps Element instances to fields mapped using {@link Id @Id}.\n+ *\n+ * @since 2.0\n+ * @deprecated Use {@link com.vaadin.flow.component.template.internal.IdMapper}\n+ *             instead.Polymer template support is deprecated - we recommend you\n+ *             to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class IdMapper\n+        extends com.vaadin.flow.component.template.internal.IdMapper {\n+\n+    /**\n+     * Creates a mapper for the given template.\n+     *\n+     * @param template\n+     *            a template instance\n+     */\n+    public IdMapper(Component template) {\n+        super(template);", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc4Mg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807782", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:23Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/Id.java", "diffHunk": "@@ -75,10 +75,16 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use com.vaadin.flow.component.template.Id instead. Polymer\n+ *             template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.FIELD)\n @Documented\n+@Deprecated\n public @interface Id {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc4Nw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807787", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:24Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/InjectablePolymerElementInitializer.java", "diffHunk": "@@ -27,8 +27,14 @@\n  * \n  * @author Vaadin Ltd\n  * @since\n- *\n+ * @deprecated {@code InjectableLitElementInitializer} should be used for Lit\n+ *             templates since polymer support is deprecated, we recommend you\n+ *             to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class InjectablePolymerElementInitializer", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzc5OA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807798", "bodyText": "This block of commented-out lines of code should be removed.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:25Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -48,8 +50,15 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use {@code LitTemplateDataAnalyzer} for {@code LitTemplate}\n+ *             components. Polymer template support is deprecated - we recommend\n+ *             you to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  *\n  */\n+@Deprecated\n public class TemplateDataAnalyzer {\n \n     // {{propertyName}} or {{propertyName::event}}", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzgxMQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807811", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:26Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -91,18 +100,17 @@\n          * @param tag\n          *            the element tag\n          */\n+        @Override\n         void apply(Field field, String id, String tag);\n     }\n \n     /**\n      * Immutable parser data which may be stored in cache.\n+     * \n+     * Use {@link ParserData} instead.\n      */\n-    public static class ParserData {\n-\n-        private final Map<String, String> tagById;\n-        private final Map<Field, String> idByField;\n-\n-        private final Map<String, Map<String, String>> attributesById;\n+    @Deprecated\n+    public static class PolymerParserData extends ParserData {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzgxNw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807817", "bodyText": "Replace this lambda with a method reference.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:27Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -141,23 +148,9 @@ public ParserData(Map<Field, String> fields, Map<String, String> tags,\n          *            the consumer to call for each mapped field\n          */\n         public void forEachInjectedField(InjectableFieldCunsumer consumer) {\n-            idByField.forEach(\n-                    (field, id) -> consumer.apply(field, id, tagById.get(id)));\n-        }\n-\n-        /**\n-         * Gets template element data (attribute values).\n-         * \n-         * @param id\n-         *            the id of the element\n-         * @return template data\n-         */\n-        public Map<String, String> getAttributes(String id) {\n-            Map<String, String> attrs = attributesById.get(id);\n-            if (attrs == null) {\n-                return Collections.emptyMap();\n-            }\n-            return attrs;\n+            InjectableFieldConsumer delegate = (field, id, tag) -> consumer", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzgyMw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807823", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:28Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateDataAnalyzer.java", "diffHunk": "@@ -48,8 +50,15 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use {@code LitTemplateDataAnalyzer} for {@code LitTemplate}\n+ *             components. Polymer template support is deprecated - we recommend\n+ *             you to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  *\n  */\n+@Deprecated\n public class TemplateDataAnalyzer {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzgzOA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807838", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:29Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/BeanModelType.java", "diffHunk": "@@ -50,7 +50,15 @@\n  * @since 1.0\n  * @param <T>\n  *            the proxy type used by this bean type\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class BeanModelType<T> implements ComplexModelType<T> {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg0Nw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807847", "bodyText": "Reduce the total number of break and continue statements in this loop to use at most one.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:30Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -229,44 +206,6 @@ public static Element parseTemplateElement(String fileName, String source) {\n         return template;\n     }\n \n-    /**\n-     * Get the Lit template element for the given polymer template source.\n-     *\n-     * @param fileName\n-     *            name of the handled file\n-     * @param source\n-     *            source js to get template element from\n-     * @return template element or {code null} if not found\n-     */\n-    public static Element parseLitTemplateElement(String fileName,\n-            String source) {\n-        Document templateDocument = null;\n-        String content = StringUtil.removeComments(source);\n-        Matcher templateMatcher = LIT_TEMPLATE_PATTERN.matcher(content);\n-\n-        // GroupCount should be 2 as the first group contains `|'|\" depending\n-        // on what was in template return html' and the second is the\n-        // template contents.\n-        if (templateMatcher.find() && templateMatcher.groupCount() == 2) {\n-            String group = templateMatcher.group(1);\n-            LOGGER.trace(\"Found regular Lit template content was {}\", group);\n-\n-            templateDocument = Jsoup.parse(group);\n-            LOGGER.trace(\"The parsed template document was {}\",\n-                    templateDocument);\n-            Element template = templateDocument\n-                    .createElement(TEMPLATE_TAG_NAME);\n-            Element body = templateDocument.body();\n-            templateDocument.body().children().stream()\n-                    .filter(node -> !node.equals(body))\n-                    .forEach(template::appendChild);\n-\n-            return template;\n-        }\n-        LOGGER.warn(\"No lit template data found in {} sources.\", fileName);\n-        return null;\n-    }\n-\n     private static Element tryParsePolymer2(Document templateDocument,\n             Matcher noTemplateMatcher) {\n         while (noTemplateMatcher.find()", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg1Mg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807852", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:31Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/BundleParser.java", "diffHunk": "@@ -46,7 +46,13 @@\n  * @since 2.0\n  *\n  * @see NpmTemplateParser\n+ * @deprecated Use {@code BundleLitParser} to parse Lit template since polymer\n+ *             template is deprecated, we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public final class BundleParser {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg2MQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807861", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:32Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/PathLookup.java", "diffHunk": "@@ -27,7 +27,14 @@\n  * @since 1.0\n  * @param <T>\n  *            the item type\n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. Polymer template support is\n+ *             deprecated - we recommend you to use {@code LitTemplate} instead.\n+ *             Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class PathLookup<T> {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg3MA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807870", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:33Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/BasicModelType.java", "diffHunk": "@@ -25,7 +25,16 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class BasicModelType extends AbstractBasicModelType {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg3OQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807879", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:34Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ListModelType.java", "diffHunk": "@@ -39,7 +38,16 @@\n  * @since 1.0\n  * @param <T>\n  *            the proxy type used by the bean type of this type\n+ * \n+ * @deprecated Template model and polymer template support is deprecated - we\n+ *             recommend you to use {@code LitTemplate} instead. Read more\n+ *             details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a> For lit templates, you can use {@code @Id}\n+ *             mapping and the component API or the element API with property\n+ *             synchronization instead.\n  */\n+@Deprecated\n public class ListModelType<T> implements ComplexModelType<T> {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg5MA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807890", "bodyText": "T is not used in the interface. \n Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:35Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ComplexModelType.java", "diffHunk": "@@ -25,7 +25,15 @@\n  *\n  * @param <T>\n  *            the proxy type used by this type\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public interface ComplexModelType<T> extends ModelType {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzg5OA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807898", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:36Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/TemplateModelUtil.java", "diffHunk": "@@ -31,7 +31,15 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. Polymer template support is\n+ *             deprecated - we recommend you to use {@code LitTemplate} instead.\n+ *             Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public final class TemplateModelUtil {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzkwNA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807904", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:37Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzkxMA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807910", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:37Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzkxNw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807917", "bodyText": "Document this public method by adding an explicit description.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:39Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzkyNg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807926", "bodyText": "Define and throw a dedicated exception instead of using a generic one.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:40Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+            LoggerFactory.getLogger(\n+                    PublishedServerEventHandlerRpcHandler.class.getName())\n+                    .debug(null, e);\n+            throw new RuntimeException(e.getCause());", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzkzMg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807932", "bodyText": "Merge this if statement with the enclosing one.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:40Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+            LoggerFactory.getLogger(\n+                    PublishedServerEventHandlerRpcHandler.class.getName())\n+                    .debug(null, e);\n+            throw new RuntimeException(e.getCause());\n+        }\n+    }\n+\n+    private static Object[] decodeArgs(Component instance, Method method,\n+            JsonArray argsFromClient) {\n+        int methodArgs = method.getParameterCount();\n+        int clientValuesCount = argsFromClient.length();\n+        JsonArray argValues;\n+        if (method.isVarArgs()) {\n+            if (clientValuesCount >= methodArgs - 1) {\n+                argValues = unwrapVarArgs(argsFromClient, method);\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not enough \"\n+                                + \"to call the method '%s' declared in '%s' which \"\n+                                + \"has vararg parameter and the number of arguments %d\",\n+                        argsFromClient.length(), method.getName(),\n+                        method.getDeclaringClass().getName(),\n+                        method.getParameterCount());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        } else {\n+            if (methodArgs == clientValuesCount) {\n+                argValues = argsFromClient;\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not equal \"\n+                                + \"to the number of arguments (%d) in the method '%s' \"\n+                                + \"declared in '%s'\",\n+                        argsFromClient.length(), method.getParameterCount(),\n+                        method.getName(), method.getDeclaringClass().getName());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        }\n+        List<Object> decoded = new ArrayList<>(method.getParameterCount());\n+        Class<?>[] methodParameterTypes = method.getParameterTypes();\n+        for (int i = 0; i < argValues.length(); i++) {\n+            Class<?> type = methodParameterTypes[i];\n+            decoded.add(decodeArg(instance, method, type, i, argValues.get(i)));\n+        }\n+        return decoded.toArray(new Object[method.getParameterCount()]);\n+    }\n+\n+    private static JsonArray unwrapVarArgs(JsonArray argsFromClient,\n+            Method method) {\n+        int paramCount = method.getParameterCount();\n+        if (argsFromClient.length() == paramCount) {\n+            if (argsFromClient.get(paramCount - 1).getType()", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk0MQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807941", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:41Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.polymertemplate.rpc;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.component.ClientCallable;\n+import com.vaadin.flow.component.Component;\n+import com.vaadin.flow.component.Composite;\n+import com.vaadin.flow.component.polymertemplate.EventHandler;\n+import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n+import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n+import com.vaadin.flow.internal.StateNode;\n+import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n+import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n+import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n+import com.vaadin.flow.server.communication.rpc.DefaultRpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.RpcDecodeException;\n+import com.vaadin.flow.server.communication.rpc.RpcDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToEnumDecoder;\n+import com.vaadin.flow.server.communication.rpc.StringToNumberDecoder;\n+import com.vaadin.flow.shared.JsonConstants;\n+import com.vaadin.flow.templatemodel.ModelType;\n+\n+import elemental.json.Json;\n+import elemental.json.JsonArray;\n+import elemental.json.JsonObject;\n+import elemental.json.JsonType;\n+import elemental.json.JsonValue;\n+\n+/**\n+ * RPC handler for events triggered through <code>element.$server</code> or\n+ * simply <code>$server</code> in template event handlers.\n+ *\n+ * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n+ *\n+ * @author Vaadin Ltd\n+ * @since 1.0\n+ *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ */\n+@Deprecated\n+public class PublishedServerEventHandlerRpcHandler implements Serializable {\n+\n+    private static final Collection<RpcDecoder> DECODERS = loadDecoders();\n+\n+    public static void handleNode(StateNode node, JsonObject invocationJson) {\n+        assert invocationJson\n+                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        String methodName = invocationJson\n+                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n+        if (methodName == null) {\n+            throw new IllegalArgumentException(\n+                    \"Event handler method name may not be null\");\n+        }\n+        JsonValue args = invocationJson\n+                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n+        if (args == null) {\n+            args = Json.createArray();\n+        }\n+        if (args.getType() != JsonType.ARRAY) {\n+            throw new IllegalArgumentException(\n+                    \"Incorrect type for method arguments: \" + args.getClass());\n+        }\n+        int promiseId;\n+        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n+            promiseId = (int) invocationJson\n+                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n+        } else {\n+            promiseId = -1;\n+        }\n+        assert node.hasFeature(ComponentMapping.class);\n+        Optional<Component> component = ComponentMapping.getComponent(node);\n+        if (!component.isPresent()) {\n+            throw new IllegalStateException(\n+                    \"Unable to handle RPC template event JSON message: \"\n+                            + \"there is no component available for the target node\");\n+        }\n+\n+        boolean execute = node.isEnabled();\n+\n+        if (!execute) {\n+            ClientCallableHandlers clientDelegate = node\n+                    .getFeature(ClientCallableHandlers.class);\n+            PolymerServerEventHandlers eventHandlers = node\n+                    .getFeature(PolymerServerEventHandlers.class);\n+            if (clientDelegate.hasHandler(methodName)) {\n+                execute = DisabledUpdateMode.ALWAYS.equals(\n+                        clientDelegate.getDisabledUpdateMode(methodName));\n+            }\n+            if (eventHandlers.hasHandler(methodName)) {\n+                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n+                        eventHandlers.getDisabledUpdateMode(methodName));\n+            }\n+        }\n+\n+        if (execute) {\n+            invokeMethod(component.get(), component.get().getClass(),\n+                    methodName, (JsonArray) args, promiseId);\n+        }\n+    }\n+\n+    static void invokeMethod(Component instance, Class<?> clazz,\n+            String methodName, JsonArray args, int promiseId) {\n+        assert instance != null;\n+        Optional<Method> method = findMethod(instance, clazz, methodName);\n+        if (method.isPresent()) {\n+            invokeMethod(instance, method.get(), args, promiseId);\n+        } else if (instance instanceof Composite) {\n+            Component compositeContent = ((Composite<?>) instance).getContent();\n+            invokeMethod(compositeContent, compositeContent.getClass(),\n+                    methodName, args, promiseId);\n+        } else {\n+            String msg = String.format(\"Neither class '%s' \"\n+                    + \"nor its super classes declare event handler method '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        }\n+    }\n+\n+    private static Optional<Method> findMethod(Component instance,\n+            Class<?> clazz, String methodName) {\n+        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n+                .filter(method -> methodName.equals(method.getName()))\n+                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n+                        || method.isAnnotationPresent(ClientCallable.class))\n+                .collect(Collectors.toList());\n+        if (methods.size() > 1) {\n+            String msg = String.format(\"Class '%s' contains \"\n+                    + \"several event handler method with the same name '%s'\",\n+                    instance.getClass().getName(), methodName);\n+            throw new IllegalStateException(msg);\n+        } else if (methods.size() == 1) {\n+            return Optional.of(methods.get(0));\n+        } else if (!Component.class.equals(clazz)) {\n+            return findMethod(instance, clazz.getSuperclass(), methodName);\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private static void invokeMethod(Component instance, Method method,\n+            JsonArray args, int promiseId) {\n+        if (promiseId == -1) {\n+            invokeMethod(instance, method, args);\n+        } else {\n+            try {\n+                Serializable returnValue = (Serializable) invokeMethod(instance,\n+                        method, args);\n+\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, true, $1)\",\n+                                Integer.valueOf(promiseId), returnValue);\n+            } catch (RuntimeException e) {\n+                instance.getElement()\n+                        .executeJs(\"this.$server['\"\n+                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n+                                + \"']($0, false)\", Integer.valueOf(promiseId));\n+\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    private static Object invokeMethod(Component instance, Method method,\n+            JsonArray args) {\n+        try {\n+            method.setAccessible(true);\n+            return method.invoke(instance, decodeArgs(instance, method, args));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        } catch (InvocationTargetException e) {\n+            LoggerFactory.getLogger(\n+                    PublishedServerEventHandlerRpcHandler.class.getName())\n+                    .debug(null, e);\n+            throw new RuntimeException(e.getCause());\n+        }\n+    }\n+\n+    private static Object[] decodeArgs(Component instance, Method method,\n+            JsonArray argsFromClient) {\n+        int methodArgs = method.getParameterCount();\n+        int clientValuesCount = argsFromClient.length();\n+        JsonArray argValues;\n+        if (method.isVarArgs()) {\n+            if (clientValuesCount >= methodArgs - 1) {\n+                argValues = unwrapVarArgs(argsFromClient, method);\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not enough \"\n+                                + \"to call the method '%s' declared in '%s' which \"\n+                                + \"has vararg parameter and the number of arguments %d\",\n+                        argsFromClient.length(), method.getName(),\n+                        method.getDeclaringClass().getName(),\n+                        method.getParameterCount());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        } else {\n+            if (methodArgs == clientValuesCount) {\n+                argValues = argsFromClient;\n+            } else {\n+                String msg = String.format(\n+                        \"The number of received values (%d) is not equal \"\n+                                + \"to the number of arguments (%d) in the method '%s' \"\n+                                + \"declared in '%s'\",\n+                        argsFromClient.length(), method.getParameterCount(),\n+                        method.getName(), method.getDeclaringClass().getName());\n+                throw new IllegalArgumentException(msg);\n+            }\n+        }\n+        List<Object> decoded = new ArrayList<>(method.getParameterCount());\n+        Class<?>[] methodParameterTypes = method.getParameterTypes();\n+        for (int i = 0; i < argValues.length(); i++) {\n+            Class<?> type = methodParameterTypes[i];\n+            decoded.add(decodeArg(instance, method, type, i, argValues.get(i)));\n+        }\n+        return decoded.toArray(new Object[method.getParameterCount()]);\n+    }\n+\n+    private static JsonArray unwrapVarArgs(JsonArray argsFromClient,\n+            Method method) {\n+        int paramCount = method.getParameterCount();\n+        if (argsFromClient.length() == paramCount) {\n+            if (argsFromClient.get(paramCount - 1).getType()\n+                    .equals(JsonType.ARRAY)) {\n+                return argsFromClient;\n+            }\n+        }\n+        JsonArray result = Json.createArray();\n+        JsonArray rest = Json.createArray();\n+        int newIndex = 0;\n+        for (int i = 0; i < argsFromClient.length(); i++) {\n+            JsonValue value = argsFromClient.get(i);\n+            if (i < paramCount - 1) {\n+                result.set(i, value);\n+            } else {\n+                rest.set(newIndex, value);\n+                newIndex++;\n+            }\n+        }\n+        result.set(paramCount - 1, rest);\n+        return result;\n+    }\n+\n+    private static Object decodeArg(Component instance, Method method,\n+            Class<?> type, int index, JsonValue argValue) {\n+        // come up with method to know that it's an id and should be gotten from\n+        // the model\n+        assert argValue != null;\n+        if (type.isPrimitive() && argValue.getType() == JsonType.NULL) {\n+            String msg = String.format(\n+                    \"Null values are not allowed for primitive types but \"\n+                            + \"a 'null' value was received for parameter %d \"\n+                            + \"which refers to primitive type '%s' \"\n+                            + \"in the method '%s' defined in the class '%s'\",\n+                    index, type.getName(), method.getName(),\n+                    method.getDeclaringClass().getName());\n+            throw new IllegalArgumentException(msg);\n+        } else if (type.isArray()) {\n+            return decodeArray(method, type, index, argValue);\n+        } else {\n+            Class<?> convertedType = ReflectTools.convertPrimitiveType(type);\n+\n+            if (isTemplateModelValue(instance, argValue, convertedType)) {\n+                return getTemplateItem((PolymerTemplate<?>) instance,\n+                        (JsonObject) argValue,\n+                        method.getGenericParameterTypes()[index]);\n+            }\n+\n+            Optional<RpcDecoder> decoder = getDecoder(argValue, convertedType);\n+            if (decoder.isPresent()) {\n+                try {\n+                    return decoder.get().decode(argValue, convertedType);\n+                } catch (RpcDecodeException exception) {\n+                    throw new IllegalArgumentException(exception);\n+                }\n+            }\n+            String msg = String.format(\"Class '%s' has the method '%s' \"\n+                    + \"whose parameter %d refers to unsupported type '%s'\",\n+                    method.getDeclaringClass().getName(), method.getName(),\n+                    index, type.getName());\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n+\n+    private static Optional<RpcDecoder> getDecoder(JsonValue value,\n+            Class<?> type) {\n+        return DECODERS.stream()\n+                .filter(decoder -> decoder.isApplicable(value, type))\n+                .findFirst();\n+    }\n+\n+    private static boolean isTemplateModelValue(Component instance,\n+            JsonValue argValue, Class<?> convertedType) {\n+        return instance instanceof PolymerTemplate\n+                && argValue instanceof JsonObject\n+                && ((PolymerTemplate<?>) instance)\n+                        .isSupportedClass(convertedType)\n+                && ((JsonObject) argValue).hasKey(\"nodeId\");\n+    }\n+\n+    private static Object getTemplateItem(PolymerTemplate<?> template,\n+            JsonObject argValue, Type convertedType) {\n+        StateNode node = template.getUI().get().getInternals().getStateTree()", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk0Nw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807947", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:42Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/InvalidTemplateModelException.java", "diffHunk": "@@ -20,11 +20,20 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model and polymer template support is deprecated - we\n+ *             recommend you to use {@code LitTemplate} instead. Read more\n+ *             details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a> For lit templates, you can use {@code @Id}\n+ *             mapping and the component API or the element API with property\n+ *             synchronization instead.\n  */\n+@Deprecated\n public class InvalidTemplateModelException extends RuntimeException {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk1NA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807954", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:43Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/ModelItem.java", "diffHunk": "@@ -34,10 +34,20 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated There is no any replacement in Lit template since template model\n+ *             is not supported for lit template, but you may still use\n+ *             {@code @EventData(\"some_data\")} to receive data from the client\n+ *             side or {@code @Id} mapping and the component API or the element\n+ *             API with property synchronization instead. TPolymer template\n+ *             support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n @Retention(RetentionPolicy.RUNTIME)\n @Target({ ElementType.PARAMETER })\n @Documented\n+@Deprecated\n public @interface ModelItem {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk2Mw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807963", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:44Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/PolymerTemplate.java", "diffHunk": "@@ -47,7 +48,12 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public abstract class PolymerTemplate<M extends TemplateModel>", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk3MQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807971", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:45Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/JsoupUtils.java", "diffHunk": "@@ -26,8 +26,13 @@\n  * Utilities for JSOUP DOM manipulations.\n  *\n  * @author Vaadin Ltd\n- *\n+ * @deprecated This class is internal and used only for Polymer templates.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n final class JsoupUtils {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk3OQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807979", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:46Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/AbstractBasicModelType.java", "diffHunk": "@@ -37,8 +37,15 @@\n  *            the (basic) Java type used by this model type\n  * @author Vaadin Ltd\n  * @since 1.0\n- *\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public abstract class AbstractBasicModelType<T> implements ModelType {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNzk4OQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497807989", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:47Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ModelEncoder.java", "diffHunk": "@@ -33,7 +33,17 @@\n  *            the decoded type\n  * @param <E>\n  *            the encoded type\n+ * \n+ * @deprecated This functionality is bound to template model which is not\n+ *             supported for lit template. You can use {@code @Id} mapping and\n+ *             the component API or the element API with property\n+ *             synchronization instead. Polymer template support is deprecated -\n+ *             we recommend you to use {@code LitTemplate} instead. Read more\n+ *             details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public interface ModelEncoder<D, E extends Serializable> extends Serializable {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODAwMA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808000", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:48Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateParser.java", "diffHunk": "@@ -42,8 +48,9 @@\n      *\n      * @author Vaadin Ltd\n      * @since 1.0\n-     *\n+     * @deprecated Use {@code LitTemplateParser.TemplateData} instead\n      */\n+    @Deprecated\n     class TemplateData {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODAxMg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808012", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:49Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateParser.java", "diffHunk": "@@ -29,8 +30,13 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n- *\n+ * @deprecated Use {@code LitTemplateParser} for {@code LitTemplate} components.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n @FunctionalInterface\n public interface TemplateParser {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODAxOQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808019", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:49Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ModelType.java", "diffHunk": "@@ -33,7 +33,16 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public interface ModelType extends Serializable {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODAzMg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808032", "bodyText": "Remove this call from a constructor to the overridable \"getElement\" method.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:50Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/AbstractSinglePropertyField.java", "diffHunk": "@@ -242,6 +241,12 @@ public AbstractSinglePropertyField(String propertyName, T defaultValue,\n         propertyReader = typeHandler.createReader(element, propertyName,\n                 presentationToModel);\n \n+        // if underlying element already has a property value then it should be\n+        // set for the component\n+        if (getElement().getPropertyRaw(propertyName) != null) {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODAzNg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808036", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:51Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/AllowClientUpdates.java", "diffHunk": "@@ -41,6 +49,7 @@\n @Target(ElementType.METHOD)\n @Repeatable(AllowClientUpdates.Container.class)\n @Documented\n+@Deprecated\n public @interface AllowClientUpdates {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODA0MQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808041", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:52Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/TemplateInitializer.java", "diffHunk": "@@ -42,17 +42,24 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * @deprecated Use {@code LitTemplateInitializer} for {@code LitTemplate}\n+ *             components. Polymer template support is deprecated - we recommend\n+ *             you to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  *\n  */\n+@Deprecated\n public class TemplateInitializer {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODA1OQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808059", "bodyText": "Call \"tagName.isPresent()\" before accessing the value.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:54Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/IdCollector.java", "diffHunk": "@@ -136,8 +152,10 @@ private boolean collectElementData(String id, Field field) {\n             Optional<String> tagName = element\n                     .map(org.jsoup.nodes.Element::tagName);\n             if (element.isPresent()) {\n+                Element domElement = element.get();\n                 tagById.put(id, tagName.get());", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODA3Mw==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808073", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:56Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ElementPropertyMap.java", "diffHunk": "@@ -269,12 +268,14 @@ private AllowUpdate isUpdateFromClientAllowedByFilter(StateNode node,\n             ElementPropertyMap propertyMap = node\n                     .getFeature(ElementPropertyMap.class);\n             if (propertyMap.updateFromClientFilter != null) {\n+                //// TODO to be removed with polymer template support removal", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODA4NQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808085", "bodyText": "Remove this unused private \"checkPort\" method.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:57Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -569,22 +569,45 @@ private void saveRunningDevServerPort() {\n         }\n     }\n \n-    private void doStartDevModeServer(DeploymentConfiguration config,\n-            File npmFolder) throws ExecutionFailedException {\n+    private boolean checkPort() {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODA5Mg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808092", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:58Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/PropertyMapBuilder.java", "diffHunk": "@@ -36,7 +36,15 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0.\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. Polymer template support is\n+ *             deprecated - we recommend you to use {@code LitTemplate} instead.\n+ *             Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n class PropertyMapBuilder {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODA5OA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808098", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:21:59Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/dependency/Uses.java", "diffHunk": "@@ -47,6 +51,7 @@\n @Retention(RUNTIME)\n @Target(TYPE)\n @Repeatable(Uses.Container.class)\n+@Deprecated\n public @interface Uses {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODEwNA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808104", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:00Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/PolymerServerEventHandlers.java", "diffHunk": "@@ -15,31 +15,43 @@\n  */\n package com.vaadin.flow.internal.nodefeature;\n \n+import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.lang.reflect.Parameter;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n import java.util.Optional;\n import java.util.stream.Stream;\n \n import com.vaadin.flow.component.EventData;\n-import com.vaadin.flow.component.polymertemplate.EventHandler;\n-import com.vaadin.flow.component.polymertemplate.ModelItem;\n-import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n-import com.vaadin.flow.component.polymertemplate.RepeatIndex;\n+import com.vaadin.flow.component.template.internal.DeprecatedPolymerTemplate;\n import com.vaadin.flow.dom.DisabledUpdateMode;\n+import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n \n /**\n  * Methods which are published as event-handlers on the client side.\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  *\n  */\n+@Deprecated\n public class PolymerServerEventHandlers", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODEwOQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808109", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:01Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/ModelDescriptor.java", "diffHunk": "@@ -24,7 +24,16 @@\n  * @since 1.0\n  * @param <T>\n  *            the template model type used by this descriptor\n+ * \n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class ModelDescriptor<T extends TemplateModel> extends BeanModelType<T> {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODExOA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808118", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:02Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/BasicComplexModelType.java", "diffHunk": "@@ -36,10 +36,18 @@\n  *\n  * @param <T>\n  *            the (basic) Java type used by this model type\n+ * @deprecated Template model and model types are not supported for lit\n+ *             template, but you can use {@code @Id} mapping and the component\n+ *             API or the element API with property synchronization instead.\n+ *             Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n  */\n+@Deprecated\n public class BasicComplexModelType<T> extends AbstractBasicModelType<T>", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODEzMA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808130", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:03Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/TemplateModelProxyHandler.java", "diffHunk": "@@ -45,7 +45,15 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. Polymer template support is\n+ *             deprecated - we recommend you to use {@code LitTemplate} instead.\n+ *             Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class TemplateModelProxyHandler implements Serializable {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE0MA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808140", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:03Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/NpmTemplateParser.java", "diffHunk": "@@ -56,7 +56,15 @@\n  * @since 2.0\n  *\n  * @see BundleParser\n+ * \n+ * @deprecated Use {@code LitTemplateParserImpl} class for {@code LitTemplate}\n+ *             components. Polymer template support is deprecated - we recommend\n+ *             you to use {@code LitTemplate} instead. Read more details from\n+ *             <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class NpmTemplateParser implements TemplateParser {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE1Mg==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808152", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:04Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/PropertyFilter.java", "diffHunk": "@@ -22,7 +22,15 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. Polymer template support is\n+ *             deprecated - we recommend you to use {@code LitTemplate} instead.\n+ *             Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class PropertyFilter implements Predicate<String> {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE1OA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808158", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:05Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/template/internal/DeprecatedPolymerTemplate.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.component.template.internal;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Marker interface for Polymer Template.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ * \n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n+ *\n+ */\n+@Deprecated\n+public interface DeprecatedPolymerTemplate extends Serializable {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE2NA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808164", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:06Z", "path": "flow-server/src/main/java/com/vaadin/flow/component/UI.java", "diffHunk": "@@ -929,15 +940,30 @@ public void navigate(String location, QueryParameters queryParameters) {\n         Objects.requireNonNull(location, \"Location must not be null\");\n         Objects.requireNonNull(queryParameters, \"Query parameters must not be null\");\n \n-        getRouter().navigate(this, new Location(location, queryParameters),\n+        getInternals().getRouter().navigate(this,\n+                new Location(location, queryParameters),\n                 NavigationTrigger.UI_NAVIGATE);\n     }\n \n+    /**\n+     * Returns true if this UI instance supports navigation.\n+     *\n+     * @return true if this UI instance supports navigation, otherwise false.\n+     */\n+    public boolean isNavigationSupported() {\n+        // By default any UI supports navigation. Override this to return false\n+        // if navigation is not supported.\n+        return true;\n+    }\n+\n     /**\n      * Gets the router used for navigating in this UI.\n      *\n      * @return a router\n+     *\n+     * @deprecated For internal use only. Will be removed in the future.\n      */\n+    @Deprecated\n     public Router getRouter() {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE3NQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808175", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:07Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/component/polymertemplate/AbstractTemplate.java", "diffHunk": "@@ -47,9 +48,14 @@\n  *\n  * @param <M>\n  *            a model class that will be used for template data propagation\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public abstract class AbstractTemplate<M extends TemplateModel>", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE4NA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808184", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:08Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/TemplateModel.java", "diffHunk": "@@ -38,7 +38,14 @@\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n+ * \n+ * @deprecated Template model and polymer template support is deprecated - we\n+ *             recommend you to use {@code LitTemplate} instead. Read more\n+ *             details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public interface TemplateModel extends Serializable {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE5MQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808191", "bodyText": "Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:09Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -15,55 +15,41 @@\n  */\n package com.vaadin.flow.server.communication.rpc;\n \n-import java.io.Serializable;\n-import java.lang.reflect.Array;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n+import java.lang.reflect.Modifier;\n import java.util.Optional;\n-import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import org.slf4j.LoggerFactory;\n \n-import com.vaadin.flow.component.ClientCallable;\n-import com.vaadin.flow.component.Component;\n-import com.vaadin.flow.component.Composite;\n-import com.vaadin.flow.component.polymertemplate.EventHandler;\n-import com.vaadin.flow.component.polymertemplate.PolymerTemplate;\n-import com.vaadin.flow.dom.DisabledUpdateMode;\n-import com.vaadin.flow.internal.ReflectTools;\n import com.vaadin.flow.internal.StateNode;\n-import com.vaadin.flow.internal.nodefeature.ClientCallableHandlers;\n-import com.vaadin.flow.internal.nodefeature.ComponentMapping;\n-import com.vaadin.flow.internal.nodefeature.PolymerServerEventHandlers;\n import com.vaadin.flow.shared.JsonConstants;\n-import com.vaadin.flow.templatemodel.ModelType;\n \n-import elemental.json.Json;\n-import elemental.json.JsonArray;\n import elemental.json.JsonObject;\n-import elemental.json.JsonType;\n-import elemental.json.JsonValue;\n \n /**\n  * RPC handler for events triggered through <code>element.$server</code> or\n  * simply <code>$server</code> in template event handlers.\n+ * <p>\n+ * The implementation is in the flow-polymer-template module since the handler\n+ * itslef is a part of the core and can't be moved but the logic is Polymer\n+ * related.\n  *\n  * @see JsonConstants#RPC_PUBLISHED_SERVER_EVENT_HANDLER\n  *\n  * @author Vaadin Ltd\n  * @since 1.0\n  *\n+ * @deprecated Polymer template support is deprecated - we recommend you to use\n+ *             {@code LitTemplate} instead. Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n+@Deprecated\n public class PublishedServerEventHandlerRpcHandler", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODE5Ng==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808196", "bodyText": "Either log or rethrow this exception.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:10Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/communication/rpc/PublishedServerEventHandlerRpcHandler.java", "diffHunk": "@@ -72,301 +58,28 @@ public String getRpcType() {\n     @Override\n     public Optional<Runnable> handleNode(StateNode node,\n             JsonObject invocationJson) {\n-        assert invocationJson\n-                .hasKey(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n-        String methodName = invocationJson\n-                .getString(JsonConstants.RPC_TEMPLATE_EVENT_METHOD_NAME);\n-        if (methodName == null) {\n-            throw new IllegalArgumentException(\n-                    \"Event handler method name may not be null\");\n-        }\n-        JsonValue args = invocationJson\n-                .get(JsonConstants.RPC_TEMPLATE_EVENT_ARGS);\n-        if (args == null) {\n-            args = Json.createArray();\n-        }\n-        if (args.getType() != JsonType.ARRAY) {\n-            throw new IllegalArgumentException(\n-                    \"Incorrect type for method arguments: \" + args.getClass());\n-        }\n-        int promiseId;\n-        if (invocationJson.hasKey(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE)) {\n-            promiseId = (int) invocationJson\n-                    .getNumber(JsonConstants.RPC_TEMPLATE_EVENT_PROMISE);\n-        } else {\n-            promiseId = -1;\n-        }\n-        assert node.hasFeature(ComponentMapping.class);\n-        Optional<Component> component = ComponentMapping.getComponent(node);\n-        if (!component.isPresent()) {\n-            throw new IllegalStateException(\n-                    \"Unable to handle RPC template event JSON message: \"\n-                            + \"there is no component available for the target node\");\n-        }\n-\n-        boolean execute = node.isEnabled();\n-\n-        if (!execute) {\n-            ClientCallableHandlers clientDelegate = node\n-                    .getFeature(ClientCallableHandlers.class);\n-            PolymerServerEventHandlers eventHandlers = node\n-                    .getFeature(PolymerServerEventHandlers.class);\n-            if (clientDelegate.hasHandler(methodName)) {\n-                execute = DisabledUpdateMode.ALWAYS.equals(\n-                        clientDelegate.getDisabledUpdateMode(methodName));\n-            }\n-            if (eventHandlers.hasHandler(methodName)) {\n-                execute = execute || DisabledUpdateMode.ALWAYS.equals(\n-                        eventHandlers.getDisabledUpdateMode(methodName));\n-            }\n-        }\n-\n-        if (execute) {\n-            invokeMethod(component.get(), component.get().getClass(),\n-                    methodName, (JsonArray) args, promiseId);\n-        }\n-\n-        return Optional.empty();\n-    }\n-\n-    static void invokeMethod(Component instance, Class<?> clazz,\n-            String methodName, JsonArray args, int promiseId) {\n-        assert instance != null;\n-        Optional<Method> method = findMethod(instance, clazz, methodName);\n-        if (method.isPresent()) {\n-            invokeMethod(instance, method.get(), args, promiseId);\n-        } else if (instance instanceof Composite) {\n-            Component compositeContent = ((Composite<?>) instance).getContent();\n-            invokeMethod(compositeContent, compositeContent.getClass(),\n-                    methodName, args, promiseId);\n-        } else {\n-            String msg = String.format(\"Neither class '%s' \"\n-                    + \"nor its super classes declare event handler method '%s'\",\n-                    instance.getClass().getName(), methodName);\n-            throw new IllegalStateException(msg);\n-        }\n-    }\n-\n-    private static Optional<Method> findMethod(Component instance,\n-            Class<?> clazz, String methodName) {\n-        List<Method> methods = Stream.of(clazz.getDeclaredMethods())\n-                .filter(method -> methodName.equals(method.getName()))\n-                .filter(method -> method.isAnnotationPresent(EventHandler.class)\n-                        || method.isAnnotationPresent(ClientCallable.class))\n-                .collect(Collectors.toList());\n-        if (methods.size() > 1) {\n-            String msg = String.format(\"Class '%s' contains \"\n-                    + \"several event handler method with the same name '%s'\",\n-                    instance.getClass().getName(), methodName);\n-            throw new IllegalStateException(msg);\n-        } else if (methods.size() == 1) {\n-            return Optional.of(methods.get(0));\n-        } else if (!Component.class.equals(clazz)) {\n-            return findMethod(instance, clazz.getSuperclass(), methodName);\n-        } else {\n-            return Optional.empty();\n-        }\n-    }\n-\n-    private static void invokeMethod(Component instance, Method method,\n-            JsonArray args, int promiseId) {\n-        if (promiseId == -1) {\n-            invokeMethod(instance, method, args);\n-        } else {\n-            try {\n-                Serializable returnValue = (Serializable) invokeMethod(instance,\n-                        method, args);\n-\n-                instance.getElement().executeJs(\n-                        \"this.$server['\"\n-                                + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                                + \"']($0, true, $1)\",\n-                        Integer.valueOf(promiseId), returnValue);\n-            } catch (RuntimeException e) {\n-                instance.getElement().executeJs(\"this.$server['\"\n-                        + JsonConstants.RPC_PROMISE_CALLBACK_NAME\n-                        + \"']($0, false)\",\n-                        Integer.valueOf(promiseId));\n-\n-                throw e;\n-            }\n-        }\n-    }\n-\n-    private static Object invokeMethod(Component instance, Method method,\n-            JsonArray args) {\n         try {\n-            method.setAccessible(true);\n-            return method.invoke(instance, decodeArgs(instance, method, args));\n+            Class<?> clazz = Class\n+                    .forName(\"com.vaadin.flow.component.polymertemplate.rpc.\"\n+                            + PublishedServerEventHandlerRpcHandler.class\n+                                    .getSimpleName());\n+            Method handleMethod = Stream.of(clazz.getDeclaredMethods())\n+                    .filter(method -> Modifier.isStatic(method.getModifiers())\n+                            && Modifier.isPublic(method.getModifiers()))\n+                    .findFirst().get();\n+            handleMethod.invoke(null, node, invocationJson);\n+        } catch (ClassNotFoundException e) {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODIwMQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808201", "bodyText": "Override the \"equals\" method in this class. \n Do not forget to remove this deprecated code someday.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:11Z", "path": "flow-polymer-template/src/main/java/com/vaadin/flow/templatemodel/TemplateModelListProxy.java", "diffHunk": "@@ -30,8 +30,17 @@\n  * @since 1.0\n  * @param <T>\n  *            the type of items in the list\n+ * \n+ * @deprecated This functionality is internal and bound to template model which\n+ *             is not supported for lit template. Polymer template support is\n+ *             deprecated - we recommend you to use {@code LitTemplate} instead.\n+ *             Read more details from <a href=\n+ *             \"https://vaadin.com/blog/future-of-html-templates-in-vaadin\">the\n+ *             Vaadin blog.</a>\n  */\n-public class TemplateModelListProxy<T> extends AbstractList<T> implements Serializable {\n+@Deprecated\n+public class TemplateModelListProxy<T> extends AbstractList<T>", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODIxMA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808210", "bodyText": "Remove this use of \"DeprecatedPolymerTemplate\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:12Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODIyNQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808225", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:13Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate\n                 && getNode().hasFeature(PolymerServerEventHandlers.class)) {", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODI0MA==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808240", "bodyText": "Remove this use of \"PolymerServerEventHandlers\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:14Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate\n                 && getNode().hasFeature(PolymerServerEventHandlers.class)) {\n             getNode().getFeature(PolymerServerEventHandlers.class)", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwODI0OQ==", "url": "https://github.com/vaadin/flow/pull/9084#discussion_r497808249", "bodyText": "Remove this use of \"DeprecatedPolymerTemplate\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-09-30T21:22:15Z", "path": "flow-server/src/main/java/com/vaadin/flow/internal/nodefeature/ComponentMapping.java", "diffHunk": "@@ -62,10 +62,10 @@ public void setComponent(Component component) {\n             getNode().getFeature(ClientCallableHandlers.class)\n                     .componentSet(component);\n         }\n-        if (component instanceof PolymerTemplate<?>\n+        if (component instanceof DeprecatedPolymerTemplate\n                 && getNode().hasFeature(PolymerServerEventHandlers.class)) {\n             getNode().getFeature(PolymerServerEventHandlers.class)\n-                    .componentSet((PolymerTemplate<?>) component);\n+                    .componentSet((DeprecatedPolymerTemplate) component);", "originalCommit": "e8de5f85f5ba9429c20c388522e550d64bab8d98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}