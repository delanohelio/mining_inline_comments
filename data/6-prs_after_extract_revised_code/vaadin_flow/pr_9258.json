{"pr_number": 9258, "pr_title": "fix(offline): resolve offlineResources at runtime", "pr_createdAt": "2020-10-28T15:09:01Z", "pr_url": "https://github.com/vaadin/flow/pull/9258", "timeline": [{"oid": "ef27d8b7498544e7bc358a4267c400aa7c5fb724", "url": "https://github.com/vaadin/flow/commit/ef27d8b7498544e7bc358a4267c400aa7c5fb724", "message": "fix: resolve offlineResources at runtime", "committedDate": "2020-10-28T15:52:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2MTAxMg==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r513561012", "bodyText": "Note. I have replaced the previous version of exists which checked for existence by connecting directly to the server with one that goes via the browser. This makes the test more end-to-end, and allows testing the caching of resources in offline mode.", "author": "joheriks", "createdAt": "2020-10-28T15:56:09Z", "path": "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java", "diffHunk": "@@ -202,22 +222,22 @@ private void checkIcons(List<WebElement> icons, int expected) {\n         }\n     }\n \n-    private boolean exists(String URLName) {\n-        URLName = URLName.startsWith(\"http\") ? URLName\n-                : getRootURL() + \"/\" + URLName;\n-        try {\n-            HttpURLConnection.setFollowRedirects(false);\n-            HttpURLConnection con = (HttpURLConnection) new URL(URLName)\n-                    .openConnection();\n-            con.setInstanceFollowRedirects(false);\n-            con.setRequestMethod(\"HEAD\");\n-            return (con.getResponseCode() == HttpURLConnection.HTTP_OK);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            return false;\n+    private void checkResources(String... resources) {\n+        for (String url : resources) {\n+            Assert.assertTrue(url + \" didn't respond with resource\",\n+                    exists(url));\n         }\n     }\n \n+    private boolean exists(String url) {\n+        final String script = \"const resolve = arguments[0];\" + \"fetch('\" + url\n+                + \"', {method: 'HEAD'})\"\n+                + \".then(response => resolve(response.status===200 && !response.redirected))\"\n+                + \".catch(err => resolve(false));\";\n+        return (boolean) ((JavascriptExecutor) getDriver())\n+                .executeAsyncScript(script);\n+    }\n+", "originalCommit": "ef27d8b7498544e7bc358a4267c400aa7c5fb724", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4522e1130b5fa4d500baa43fe7a44c8b0d361588", "chunk": "diff --git a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\nindex 1ea2401ff8..4ede1a2fe1 100644\n--- a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n+++ b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n\n@@ -230,12 +218,19 @@ public class PwaTestIT extends ChromeDeviceTest {\n     }\n \n     private boolean exists(String url) {\n-        final String script = \"const resolve = arguments[0];\" + \"fetch('\" + url\n-                + \"', {method: 'HEAD'})\"\n-                + \".then(response => resolve(response.status===200 && !response.redirected))\"\n+        // If the mimetype can be guessed from the file name, check consistency\n+        // with the actual served file\n+        String expectedMimeType = URLConnection\n+                .guessContentTypeFromName(url);\n+        String script = \"const mimeType = arguments[0];\"\n+                + \"const resolve = arguments[1];\"\n+                + \"fetch('\" + url + \"', {method: 'HEAD'})\"\n+                + \".then(response => resolve(response.status===200\"\n+                + \"      && !response.redirected\"\n+                + \"      && (mimeType===null || response.headers.get('Content-Type')===mimeType)))\"\n                 + \".catch(err => resolve(false));\";\n         return (boolean) ((JavascriptExecutor) getDriver())\n-                .executeAsyncScript(script);\n+                .executeAsyncScript(script, expectedMimeType);\n     }\n \n     private static String readStringFromUrl(String url) throws IOException {\n"}}, {"oid": "ede0d14200a68599849a3b9d62facc4e83bc611f", "url": "https://github.com/vaadin/flow/commit/ede0d14200a68599849a3b9d62facc4e83bc611f", "message": "fix: resolve offlineResources at runtime", "committedDate": "2020-10-28T16:56:27Z", "type": "forcePushed"}, {"oid": "9caa83b522d57d3915770b1ac04882918c35ade3", "url": "https://github.com/vaadin/flow/commit/9caa83b522d57d3915770b1ac04882918c35ade3", "message": "Attempt --no-sandbox --disable-dev-shm-usage", "committedDate": "2020-10-28T20:43:27Z", "type": "forcePushed"}, {"oid": "043a9f633c2f9252f68e568a7ec0ed858121744a", "url": "https://github.com/vaadin/flow/commit/043a9f633c2f9252f68e568a7ec0ed858121744a", "message": "fix: resolve offlineResources at runtime", "committedDate": "2020-10-28T21:11:50Z", "type": "forcePushed"}, {"oid": "87967433547b16cddd679ef7d1cfe00aeb3d56ce", "url": "https://github.com/vaadin/flow/commit/87967433547b16cddd679ef7d1cfe00aeb3d56ce", "message": "Run ITs in sequence", "committedDate": "2020-10-29T07:17:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mjk4NA==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514092984", "bodyText": "When checking for these resources, it would be nice to check that it's actually the correct content returned (check content hash or at least content length) as it's possible to introduce bugs in the service worker that would return the same, or just some incorrect HTTP 200, response for any URL.\nJust a thought. We could add another test later specifically for testing that, so no change would be needed here necessarily.", "author": "Haprog", "createdAt": "2020-10-29T08:49:37Z", "path": "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java", "diffHunk": "@@ -202,22 +239,22 @@ private void checkIcons(List<WebElement> icons, int expected) {\n         }\n     }\n \n-    private boolean exists(String URLName) {\n-        URLName = URLName.startsWith(\"http\") ? URLName\n-                : getRootURL() + \"/\" + URLName;\n-        try {\n-            HttpURLConnection.setFollowRedirects(false);\n-            HttpURLConnection con = (HttpURLConnection) new URL(URLName)\n-                    .openConnection();\n-            con.setInstanceFollowRedirects(false);\n-            con.setRequestMethod(\"HEAD\");\n-            return (con.getResponseCode() == HttpURLConnection.HTTP_OK);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            return false;\n+    private void checkResources(String... resources) {", "originalCommit": "87967433547b16cddd679ef7d1cfe00aeb3d56ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwOTY0NA==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514109644", "bodyText": "That sounds like a good idea. Content-Length is a bit iffy because resources can be served in chunked mode in which case the header is missing. What do you think about checking Content-Type and correlating it with the expected file (e.g. icon should be image/png). I guess a typical bug that would now go unnoticed is where we incorrectly serve a fallback text/html for a resource).", "author": "joheriks", "createdAt": "2020-10-29T09:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mjk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzMzYzNA==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514133634", "bodyText": "Content-Type sounds like a good enough generic check when we're expecting something else than HTML. It would be a good improvement to these tests here I think.", "author": "Haprog", "createdAt": "2020-10-29T09:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mjk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3NDM0Ng==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514174346", "bodyText": "Done. Now checks Content-Type of the actual served file if URLConnection#guessContentTypeFromName returns non-null for the resource (currently null only for manifest.webmanifest).", "author": "joheriks", "createdAt": "2020-10-29T11:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mjk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "4522e1130b5fa4d500baa43fe7a44c8b0d361588", "chunk": "diff --git a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\nindex e8de05b136..4ede1a2fe1 100644\n--- a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n+++ b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n\n@@ -247,12 +218,19 @@ public class PwaTestIT extends ChromeDeviceTest {\n     }\n \n     private boolean exists(String url) {\n-        final String script = \"const resolve = arguments[0];\" + \"fetch('\" + url\n-                + \"', {method: 'HEAD'})\"\n-                + \".then(response => resolve(response.status===200 && !response.redirected))\"\n+        // If the mimetype can be guessed from the file name, check consistency\n+        // with the actual served file\n+        String expectedMimeType = URLConnection\n+                .guessContentTypeFromName(url);\n+        String script = \"const mimeType = arguments[0];\"\n+                + \"const resolve = arguments[1];\"\n+                + \"fetch('\" + url + \"', {method: 'HEAD'})\"\n+                + \".then(response => resolve(response.status===200\"\n+                + \"      && !response.redirected\"\n+                + \"      && (mimeType===null || response.headers.get('Content-Type')===mimeType)))\"\n                 + \".catch(err => resolve(false));\";\n         return (boolean) ((JavascriptExecutor) getDriver())\n-                .executeAsyncScript(script);\n+                .executeAsyncScript(script, expectedMimeType);\n     }\n \n     private static String readStringFromUrl(String url) throws IOException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NzA3MQ==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514097071", "bodyText": "I think we should check that getOfflinePath() is not an empty string (or null) before we try to precache it.", "author": "Haprog", "createdAt": "2020-10-29T08:56:27Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java", "diffHunk": "@@ -226,17 +227,31 @@ private JsonObject initializeManifest() {\n         return manifestData;\n     }\n \n-    private String initializeRuntimeServiceWorker() {\n+    private String initializeRuntimeServiceWorker(ServletContext servletContext) {\n         StringBuilder stringBuilder = new StringBuilder();\n \n         // List of icons for precache\n         List<String> filesToCache = getIcons().stream()\n                 .filter(PwaIcon::shouldBeCached).map(PwaIcon::getCacheFormat)\n                 .collect(Collectors.toList());\n \n+        // When offlinePath is in use, it is also an offline resource to\n+        // precache\n+        if (pwaConfiguration.isEnabled()) {\n+            filesToCache.add(offlinePageCache());\n+        }", "originalCommit": "87967433547b16cddd679ef7d1cfe00aeb3d56ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMjIzMA==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514102230", "bodyText": "Done, this was a mistake, should use isOfflinePathEnabled instead.", "author": "joheriks", "createdAt": "2020-10-29T09:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NzA3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4522e1130b5fa4d500baa43fe7a44c8b0d361588", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\nindex 09abc26cc6..9c4fac31ac 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/PwaRegistry.java\n\n@@ -237,7 +237,7 @@ public class PwaRegistry implements Serializable {\n \n         // When offlinePath is in use, it is also an offline resource to\n         // precache\n-        if (pwaConfiguration.isEnabled()) {\n+        if (pwaConfiguration.isOfflinePathEnabled()) {\n             filesToCache.add(offlinePageCache());\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTUyNQ==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514099525", "bodyText": "What does this (and the above @NotThreadSafe) actually do?", "author": "Haprog", "createdAt": "2020-10-29T09:00:18Z", "path": "flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java", "diffHunk": "@@ -38,12 +43,24 @@\n import com.google.gwt.thirdparty.json.JSONObject;\n import com.vaadin.flow.testutil.ChromeDeviceTest;\n \n+@NotThreadSafe\n public class PwaTestIT extends ChromeDeviceTest {\n \n+    static private Lock lock = new ReentrantLock();\n+\n+    @Before\n+    public void start() {\n+        lock.lock();\n+    }\n+\n+    @After\n+    public void done() {\n+        lock.unlock();\n+    }", "originalCommit": "87967433547b16cddd679ef7d1cfe00aeb3d56ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMTMzMA==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514101330", "bodyText": "Or is this about making the tests run in sequence instead of parallel?", "author": "Haprog", "createdAt": "2020-10-29T09:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNjg4Ng==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514106886", "bodyText": "Forcing the tests to run in sequence. I will remove these once it's clear whether the tests can run in parallel or not. If they need to be sequenced, @NotThreadSafe should be enough anyway (the annotation is recognized by maven-failsafe-plugin, https://maven.apache.org/surefire/maven-failsafe-plugin/examples/fork-options-and-parallel-execution.html). Went with the belt-and-braces approach on this one since I recalled issues with getting @NotThreadSafe to work, but that was IIRC due to using the wrong annotation with this name, it should be specifically @net.jcip.annotations.NotThreadSafe.", "author": "joheriks", "createdAt": "2020-10-29T09:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEzNDIwMw==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514134203", "bodyText": "Ok, thanks for the explanation.", "author": "Haprog", "createdAt": "2020-10-29T09:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3NzMyOQ==", "url": "https://github.com/vaadin/flow/pull/9258#discussion_r514177329", "bodyText": "Seems parallelism may have been a red herring, as the test was failing because of the service worker not installing due to the (now corrected) error I had in PWARegistry (when checking whether to precache offlinePath). Removed the forced sequencing to see if the tests pass. The race between SW installation and going offline (addressed in #9261) is also likely to be an issue here.", "author": "joheriks", "createdAt": "2020-10-29T11:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4522e1130b5fa4d500baa43fe7a44c8b0d361588", "chunk": "diff --git a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\nindex e8de05b136..4ede1a2fe1 100644\n--- a/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n+++ b/flow-tests/test-pwa/src/test/java/com/vaadin/flow/pwatest/ui/PwaTestIT.java\n\n@@ -43,21 +39,8 @@ import com.google.gwt.thirdparty.json.JSONException;\n import com.google.gwt.thirdparty.json.JSONObject;\n import com.vaadin.flow.testutil.ChromeDeviceTest;\n \n-@NotThreadSafe\n public class PwaTestIT extends ChromeDeviceTest {\n \n-    static private Lock lock = new ReentrantLock();\n-\n-    @Before\n-    public void start() {\n-        lock.lock();\n-    }\n-\n-    @After\n-    public void done() {\n-        lock.unlock();\n-    }\n-\n     @Test\n     public void testPwaResources() throws IOException, JSONException {\n         open();\n"}}, {"oid": "4522e1130b5fa4d500baa43fe7a44c8b0d361588", "url": "https://github.com/vaadin/flow/commit/4522e1130b5fa4d500baa43fe7a44c8b0d361588", "message": "Extracted waitForServiceWorkerReady", "committedDate": "2020-10-29T13:42:45Z", "type": "forcePushed"}, {"oid": "a1939f2025ef0483d5fa4ba7399fd2a2a6b92565", "url": "https://github.com/vaadin/flow/commit/a1939f2025ef0483d5fa4ba7399fd2a2a6b92565", "message": "Extracted waitForServiceWorkerReady", "committedDate": "2020-10-29T21:03:53Z", "type": "forcePushed"}, {"oid": "e41e251c9a502e709c3fcb7af9e119b9e5606aef", "url": "https://github.com/vaadin/flow/commit/e41e251c9a502e709c3fcb7af9e119b9e5606aef", "message": "Extracted waitForServiceWorkerReady", "committedDate": "2020-10-29T21:12:29Z", "type": "forcePushed"}, {"oid": "060268916a5af890bf472177b4af7c07df5eef38", "url": "https://github.com/vaadin/flow/commit/060268916a5af890bf472177b4af7c07df5eef38", "message": "fix: resolve offlineResources at runtime", "committedDate": "2020-10-30T09:41:52Z", "type": "commit"}, {"oid": "f4efe4e6d0231a2b69bbcaba9fb0ab0d9f61c9cd", "url": "https://github.com/vaadin/flow/commit/f4efe4e6d0231a2b69bbcaba9fb0ab0d9f61c9cd", "message": "Run ITs in sequence", "committedDate": "2020-10-30T09:41:52Z", "type": "commit"}, {"oid": "2e1fe8806afe52b1e58d29f8f8e9c4c32114958e", "url": "https://github.com/vaadin/flow/commit/2e1fe8806afe52b1e58d29f8f8e9c4c32114958e", "message": "Check isOfflinePathEnabled when deciding about precaching offline html", "committedDate": "2020-10-30T09:41:52Z", "type": "commit"}, {"oid": "58aebe95702450943a168fad487302cdaba2d5b1", "url": "https://github.com/vaadin/flow/commit/58aebe95702450943a168fad487302cdaba2d5b1", "message": "Removed IT sequential forcing, added mimeType check", "committedDate": "2020-10-30T09:41:52Z", "type": "commit"}, {"oid": "2535ae45e97e76369fe456265e6cf81fd9ac5592", "url": "https://github.com/vaadin/flow/commit/2535ae45e97e76369fe456265e6cf81fd9ac5592", "message": "waitForServiceWorkerReady", "committedDate": "2020-10-30T09:45:16Z", "type": "commit"}, {"oid": "2535ae45e97e76369fe456265e6cf81fd9ac5592", "url": "https://github.com/vaadin/flow/commit/2535ae45e97e76369fe456265e6cf81fd9ac5592", "message": "waitForServiceWorkerReady", "committedDate": "2020-10-30T09:45:16Z", "type": "forcePushed"}]}