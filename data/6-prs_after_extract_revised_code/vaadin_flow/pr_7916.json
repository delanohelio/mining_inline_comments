{"pr_number": 7916, "pr_title": "Run (p)npm install and webpack dev server in a separate thread", "pr_createdAt": "2020-03-27T12:45:32Z", "pr_url": "https://github.com/vaadin/flow/pull/7916", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0ODc2OQ==", "url": "https://github.com/vaadin/flow/pull/7916#discussion_r399248769", "bodyText": "Possible null pointer dereference in com.vaadin.flow.server.frontend.TaskRunNpmInstall.cleanUp() due to return value of called method", "author": "vaadin-bot", "createdAt": "2020-03-27T13:04:58Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java", "diffHunk": "@@ -279,8 +279,17 @@ private void cleanUp() throws IOException {\n         File modulesYaml = new File(packageUpdater.nodeModulesFolder,\n                 MODULES_YAML);\n         boolean hasModulesYaml = modulesYaml.exists() && modulesYaml.isFile();\n-        if (hasModulesYaml != enablePnpm) {\n+        if (!enablePnpm && hasModulesYaml) {\n             FileUtils.forceDelete(packageUpdater.nodeModulesFolder);\n+        } else if (enablePnpm && !hasModulesYaml) {\n+            // presence of .staging dir with a \"pnpm-*\" folder means that pnpm\n+            // download is in progress, don't remove anything in this case\n+            File staging = new File(packageUpdater.nodeModulesFolder,\n+                    \".staging\");\n+            if (!staging.isDirectory() || staging.listFiles(", "originalCommit": "97ea20ee3b8d04dc4618e0e9135232917ce0dda0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b865d4b415edd55a9b6d883a13bf2de4f4325d89", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\nindex 37336f7cb7..23bc8a368d 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n\n@@ -279,17 +279,8 @@ public class TaskRunNpmInstall implements FallibleCommand {\n         File modulesYaml = new File(packageUpdater.nodeModulesFolder,\n                 MODULES_YAML);\n         boolean hasModulesYaml = modulesYaml.exists() && modulesYaml.isFile();\n-        if (!enablePnpm && hasModulesYaml) {\n+        if (hasModulesYaml != enablePnpm) {\n             FileUtils.forceDelete(packageUpdater.nodeModulesFolder);\n-        } else if (enablePnpm && !hasModulesYaml) {\n-            // presence of .staging dir with a \"pnpm-*\" folder means that pnpm\n-            // download is in progress, don't remove anything in this case\n-            File staging = new File(packageUpdater.nodeModulesFolder,\n-                    \".staging\");\n-            if (!staging.isDirectory() || staging.listFiles(\n-                    (dir, name) -> name.startsWith(\"pnpm-\")).length == 0) {\n-                FileUtils.forceDelete(packageUpdater.nodeModulesFolder);\n-            }\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0ODc4NQ==", "url": "https://github.com/vaadin/flow/pull/7916#discussion_r399248785", "bodyText": "Null passed for non-null parameter of java.util.concurrent.CompletableFuture.getNow(Object) in com.vaadin.flow.server.DevModeHandler.handleRequest(VaadinSession, VaadinRequest, VaadinResponse)", "author": "vaadin-bot", "createdAt": "2020-03-27T13:04:59Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -274,45 +187,44 @@ public static DevModeHandler getDevModeHandler() {\n         return atomicHandler.get();\n     }\n \n+    @Override\n+    public boolean handleRequest(VaadinSession session, VaadinRequest request,\n+            VaadinResponse response) throws IOException {\n+        if (devServerStartFuture.isDone()) {\n+            try {\n+                devServerStartFuture.getNow(null);", "originalCommit": "97ea20ee3b8d04dc4618e0e9135232917ce0dda0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b865d4b415edd55a9b6d883a13bf2de4f4325d89", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\nindex 6090eba79e..dd18c73cb8 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n\n@@ -190,41 +288,64 @@ public final class DevModeHandler implements RequestHandler {\n     @Override\n     public boolean handleRequest(VaadinSession session, VaadinRequest request,\n             VaadinResponse response) throws IOException {\n-        if (devServerStartFuture.isDone()) {\n-            try {\n-                devServerStartFuture.getNow(null);\n-            } catch (CompletionException exception) {\n-                throw getCause(exception);\n-            }\n+        Throwable throwable = executionException.get();\n+        if (throwable instanceof RuntimeException) {\n+            throw (RuntimeException) throwable;\n+        } else if (throwable != null) {\n+            throw new IllegalStateException(throwable);\n+        }\n+        if (devServerStarted.get()) {\n             return false;\n         } else {\n-            InputStream inputStream = DevModeHandler.class\n-                    .getResourceAsStream(\"dev-mode-not-ready.html\");\n-            IOUtils.copy(inputStream, response.getOutputStream());\n+            IOUtils.write(\"<html>\"\n+                    + \"  <head><meta http-equiv='refresh' content='3'></head>\"\n+                    + \"  <body> The webpack dev server has not yet started. Please wait... </body>\"\n+                    + \"</html>\", response.getOutputStream(),\n+                    StandardCharsets.UTF_8);\n             return true;\n         }\n     }\n \n-    private RuntimeException getCause(Throwable exception) {\n-        if (exception instanceof CompletionException) {\n-            return getCause(exception.getCause());\n-        } else if (exception instanceof RuntimeException) {\n-            return (RuntimeException) exception;\n-        } else {\n-            return new IllegalStateException(exception);\n-        }\n-    }\n-\n     private static DevModeHandler createInstance(int runningPort,\n             DeploymentConfiguration configuration, File npmFolder,\n             CompletableFuture<Void> waitFor) {\n \n+        File webpack = null;\n+        File webpackConfig = null;\n         if (runningPort == 0) {\n             runningPort = getRunningDevServerPort();\n         }\n \n+        // Skip checks if we have a webpack-dev-server already running\n+        if (runningPort == 0) {\n+            webpack = new File(npmFolder, WEBPACK_SERVER);\n+            webpackConfig = new File(npmFolder, WEBPACK_CONFIG);\n+            if (!npmFolder.exists()) {\n+                getLogger().warn(\n+                        \"Instance not created because cannot change to '{}'\",\n+                        npmFolder);\n+                return null;\n+            }\n+            if (!webpack.canExecute()) {\n+                getLogger().warn(\n+                        \"Instance not created because cannot execute '{}'. Did you run `npm install`\",\n+                        webpack);\n+                return null;\n+            } else if (!webpack.exists()) {\n+                getLogger().warn(\n+                        \"Instance not created because file '{}' doesn't exist. Did you run `npm install`\",\n+                        webpack);\n+                return null;\n+            }\n+            if (!webpackConfig.canRead()) {\n+                getLogger().warn(\n+                        \"Instance not created because there is not webpack configuration '{}'\",\n+                        webpackConfig);\n+                return null;\n+            }\n+        }\n         return new DevModeHandler(configuration, runningPort, npmFolder,\n-                waitFor);\n+                webpack, webpackConfig, waitFor);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0ODgwMQ==", "url": "https://github.com/vaadin/flow/pull/7916#discussion_r399248801", "bodyText": "Make \"devServerStartFuture\" transient or serializable.", "author": "vaadin-bot", "createdAt": "2020-03-27T13:05:01Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -97,134 +102,35 @@\n \n     private boolean notified = false;\n \n-    private String failedOutput;\n+    private volatile String failedOutput;\n \n     /**\n      * The local installation path of the webpack-dev-server node script.\n      */\n     public static final String WEBPACK_SERVER = \"node_modules/webpack-dev-server/bin/webpack-dev-server.js\";\n \n-    private int port;\n-    private Process webpackProcess;\n+    private volatile int port;\n+    private final AtomicReference<Process> webpackProcess = new AtomicReference<>();\n     private final boolean reuseDevServer;\n-    private DevServerWatchDog watchDog;\n+    private final AtomicReference<DevServerWatchDog> watchDog = new AtomicReference<>();\n \n     private StringBuilder cumulativeOutput = new StringBuilder();\n \n+    private final CompletableFuture<Void> devServerStartFuture;", "originalCommit": "97ea20ee3b8d04dc4618e0e9135232917ce0dda0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b865d4b415edd55a9b6d883a13bf2de4f4325d89", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\nindex 6090eba79e..dd18c73cb8 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n\n@@ -116,21 +116,125 @@ public final class DevModeHandler implements RequestHandler {\n \n     private StringBuilder cumulativeOutput = new StringBuilder();\n \n-    private final CompletableFuture<Void> devServerStartFuture;\n+    private final AtomicReference<Throwable> executionException = new AtomicReference<>();\n+    private final AtomicBoolean devServerStarted = new AtomicBoolean();\n \n     private DevModeHandler(DeploymentConfiguration config, int runningPort,\n-            File npmFolder, CompletableFuture<Void> waitFor) {\n+            File npmFolder, File webpack, File webpackConfig,\n+            CompletableFuture<Void> waitFor) {\n \n         port = runningPort;\n         reuseDevServer = config.reuseDevServer();\n \n-        devServerStartFuture = waitFor.whenCompleteAsync((value, exception) -> {\n-            // this will throw an exception if an exception has been thrown by\n-            // the waitFor task\n-            waitFor.getNow(null);\n-            runOnFutureComplete(config, npmFolder);\n-        });\n+        waitFor.whenCompleteAsync((value, exception) -> {\n+            try {\n+                runOnFutureComplete(value, exception, config, npmFolder,\n+                        webpack, webpackConfig);\n+            } finally {\n+                devServerStarted.set(true);\n+            }\n+<<<<<<< Upstream, based on master\n+            throw new IllegalStateException(format(\n+                    \"webpack-dev-server port '%d' is defined but it's not working properly\",\n+                    port));\n+        }\n+\n+        long start = System.nanoTime();\n+        getLogger().info(\"Starting webpack-dev-server\");\n+\n+        watchDog = new DevServerWatchDog();\n+\n+        // Look for a free port\n+        port = getFreePort();\n+\n+        ProcessBuilder processBuilder = new ProcessBuilder()\n+                .directory(npmFolder);\n+\n+        FrontendTools tools = new FrontendTools(npmFolder.getAbsolutePath(),\n+                () -> FrontendUtils.getVaadinHomeDirectory().getAbsolutePath());\n+        tools.validateNodeAndNpmVersion();\n+\n+        boolean useHomeNodeExec = config.getBooleanProperty(\n+                Constants.REQUIRE_HOME_NODE_EXECUTABLE, false);\n+\n+        String nodeExec = null;\n+        if (useHomeNodeExec) {\n+            nodeExec = tools.forceAlternativeNodeExecutable();\n+        } else {\n+            nodeExec = tools.getNodeExecutable();\n+        }\n \n+        List<String> command = new ArrayList<>();\n+        command.add(nodeExec);\n+        command.add(webpack.getAbsolutePath());\n+        command.add(\"--config\");\n+        command.add(webpackConfig.getAbsolutePath());\n+        command.add(\"--port\");\n+        command.add(String.valueOf(port));\n+        command.add(\"--watchDogPort=\" + watchDog.getWatchDogPort());\n+        command.addAll(Arrays.asList(config\n+                .getStringProperty(SERVLET_PARAMETER_DEVMODE_WEBPACK_OPTIONS,\n+                        \"-d --inline=false\")\n+                .split(\" +\")));\n+\n+        console(GREEN, START);\n+        if (getLogger().isDebugEnabled()) {\n+            getLogger().debug(\n+                    commandToString(npmFolder.getAbsolutePath(), command));\n+        }\n+\n+        processBuilder.command(command);\n+        try {\n+            webpackProcess = processBuilder\n+                    .redirectError(ProcessBuilder.Redirect.PIPE)\n+                    .redirectErrorStream(true).start();\n+\n+            // We only can save the webpackProcess reference the first time that\n+            // the DevModeHandler is created. There is no way to store\n+            // it in the servlet container, and we do not want to save it in the\n+            // global JVM.\n+            // We instruct the JVM to stop the webpack-dev-server daemon when\n+            // the JVM stops, to avoid leaving daemons running in the system.\n+            // NOTE: that in the corner case that the JVM crashes or it is\n+            // killed\n+            // the daemon will be kept running. But anyways it will also happens\n+            // if the system was configured to be stop the daemon when the\n+            // servlet context is destroyed.\n+            Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n+\n+            Pattern succeed = Pattern.compile(config.getStringProperty(\n+                    SERVLET_PARAMETER_DEVMODE_WEBPACK_SUCCESS_PATTERN,\n+                    DEFAULT_OUTPUT_PATTERN));\n+\n+            Pattern failure = Pattern.compile(config.getStringProperty(\n+                    SERVLET_PARAMETER_DEVMODE_WEBPACK_ERROR_PATTERN,\n+                    DEFAULT_ERROR_PATTERN));\n+\n+            logStream(webpackProcess.getInputStream(), succeed, failure);\n+\n+            getLogger().info(LOG_START);\n+            synchronized (this) {\n+                this.wait(Integer.parseInt(config.getStringProperty( // NOSONAR\n+                        SERVLET_PARAMETER_DEVMODE_WEBPACK_TIMEOUT,\n+                        DEFAULT_TIMEOUT_FOR_PATTERN)));\n+            }\n+\n+            if (!webpackProcess.isAlive()) {\n+                throw new IllegalStateException(\"Webpack exited prematurely\");\n+            }\n+\n+            long ms = (System.nanoTime() - start) / 1000000;\n+            getLogger().info(LOG_END, ms);\n+\n+        } catch (IOException | InterruptedException e) {\n+            getLogger().error(\"Failed to start the webpack process\", e);\n+        }\n+\n+        saveRunningDevServerPort();\n+=======\n+        });>>>>>>>2721ec 3\n+\n+    Run (p)npm install and webpack dev server in a separate thread without blocking servlet container initializer\n     }\n \n     /**\n"}}, {"oid": "8763d175a57cbb9a91c38c61a58846f401612b64", "url": "https://github.com/vaadin/flow/commit/8763d175a57cbb9a91c38c61a58846f401612b64", "message": "Update stub pnpm version", "committedDate": "2020-03-30T09:33:00Z", "type": "forcePushed"}, {"oid": "c394b663d0100bb40b0dbcb888f5e4a147876eb6", "url": "https://github.com/vaadin/flow/commit/c394b663d0100bb40b0dbcb888f5e4a147876eb6", "message": "Don't remove node_modules if pnpm is enabled and it's downloading\nresources.", "committedDate": "2020-04-01T10:48:42Z", "type": "forcePushed"}, {"oid": "b865d4b415edd55a9b6d883a13bf2de4f4325d89", "url": "https://github.com/vaadin/flow/commit/b865d4b415edd55a9b6d883a13bf2de4f4325d89", "message": "Run (p)npm install and webpack dev server in a separate thread without\nblocking servlet container initializer", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "4067abda4ff0293595f094e6cd571562b6261c97", "url": "https://github.com/vaadin/flow/commit/4067abda4ff0293595f094e6cd571562b6261c97", "message": "Read a file from the classpath instead of hardcoding the content.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "eec2789db7ca244a29dfe6330b83b96f0a6a6476", "url": "https://github.com/vaadin/flow/commit/eec2789db7ca244a29dfe6330b83b96f0a6a6476", "message": "Update unit tests and rewrite exception throwing.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "c9143f7bcf5432210afb269bc8fdc8440a7f1223", "url": "https://github.com/vaadin/flow/commit/c9143f7bcf5432210afb269bc8fdc8440a7f1223", "message": "Fixes after rebase", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "a5e08ad6b54dece381efc5d8dcb4b9ffd419ed34", "url": "https://github.com/vaadin/flow/commit/a5e08ad6b54dece381efc5d8dcb4b9ffd419ed34", "message": "Add lost file after rebase back.\nThank you git so much...", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "04c3e305c1598ebbdc2011f97423c387fb0b027f", "url": "https://github.com/vaadin/flow/commit/04c3e305c1598ebbdc2011f97423c387fb0b027f", "message": "Revert unneeded bootstrap handler changes.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "bc9c5ef66a7ac1633d765002523cb0fd00b839a6", "url": "https://github.com/vaadin/flow/commit/bc9c5ef66a7ac1633d765002523cb0fd00b839a6", "message": "Remove TODO", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "879c1897935c87113fbe467487341d21c60d8374", "url": "https://github.com/vaadin/flow/commit/879c1897935c87113fbe467487341d21c60d8374", "message": "Revert code which was reverted by git rebase.\nThank you git one one more time.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "cf381abccff971e86aea45b3ba3f64f9ab7de806", "url": "https://github.com/vaadin/flow/commit/cf381abccff971e86aea45b3ba3f64f9ab7de806", "message": "Fix tests and update the code.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "73ead842db2ad235102374a3c96f9c5aab3272bc", "url": "https://github.com/vaadin/flow/commit/73ead842db2ad235102374a3c96f9c5aab3272bc", "message": "Fix pnpm unit test in case of globally installed pnpm.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "d6f190db60cee56b33f5c00ffd2a898916f6ee09", "url": "https://github.com/vaadin/flow/commit/d6f190db60cee56b33f5c00ffd2a898916f6ee09", "message": "Correct unit tests to expect exception instead of null handler.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "30853a2b9891ae4bcf8e8e3161c9aa1cadbd336a", "url": "https://github.com/vaadin/flow/commit/30853a2b9891ae4bcf8e8e3161c9aa1cadbd336a", "message": "Update ITs to wait until dev server is started", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "17e89ee8b44ec58c038ebc08f1916a102828ba6b", "url": "https://github.com/vaadin/flow/commit/17e89ee8b44ec58c038ebc08f1916a102828ba6b", "message": "Correct waitForDevServer and add javadocs for dev mode handler CTOR", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "a5ca296aa3e31c6bae1405b597c5b4b4a4a9e2c4", "url": "https://github.com/vaadin/flow/commit/a5ca296aa3e31c6bae1405b597c5b4b4a4a9e2c4", "message": "Disable flow-client tests which are broken.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "1e8931e8760c5212b6c67945b90426ee38448955", "url": "https://github.com/vaadin/flow/commit/1e8931e8760c5212b6c67945b90426ee38448955", "message": "Use the correct waitForDevServer method impl", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "873ce912560e44ca0255ebcd0803536caceb3821", "url": "https://github.com/vaadin/flow/commit/873ce912560e44ca0255ebcd0803536caceb3821", "message": "Use find() instead of match()", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "7a959f57197126fb0525294ac1c3bb912952000b", "url": "https://github.com/vaadin/flow/commit/7a959f57197126fb0525294ac1c3bb912952000b", "message": "Correct log message in the dev mode handler and startup performance test", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "f9082f4a1ddb0aba8b9d43ed0874e273ed9b2ad4", "url": "https://github.com/vaadin/flow/commit/f9082f4a1ddb0aba8b9d43ed0874e273ed9b2ad4", "message": "More corrections.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "c6d4ccdbcfb447250880d7c061a2c0641a5ba9a8", "url": "https://github.com/vaadin/flow/commit/c6d4ccdbcfb447250880d7c061a2c0641a5ba9a8", "message": "Try to enable flow-client tests back.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "06ae4ee4c8c654363b1e3f936028385f93220389", "url": "https://github.com/vaadin/flow/commit/06ae4ee4c8c654363b1e3f936028385f93220389", "message": "Fix SQ complains.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "c2cb54482c6229f47f2458f06c9dabef3397477d", "url": "https://github.com/vaadin/flow/commit/c2cb54482c6229f47f2458f06c9dabef3397477d", "message": "Don't throw an exception on getCause but just return it", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "2479031a1e049b35a9ad27134d344dd74135283a", "url": "https://github.com/vaadin/flow/commit/2479031a1e049b35a9ad27134d344dd74135283a", "message": "Check that an exception in the prepare tasks ((p)npm install) is\nrethrown on request handling.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "41a01c31b39efd556d709ed0246856b72a007e04", "url": "https://github.com/vaadin/flow/commit/41a01c31b39efd556d709ed0246856b72a007e04", "message": "Remove extra javadocs", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "7993d908622073893927241c3eed8450fcc41992", "url": "https://github.com/vaadin/flow/commit/7993d908622073893927241c3eed8450fcc41992", "message": "Fixes based on review", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "13485ff1fffa95e9b222b98792ffedb4c894bf59", "url": "https://github.com/vaadin/flow/commit/13485ff1fffa95e9b222b98792ffedb4c894bf59", "message": "Schedule page reload without onload", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "ea38a30080634fefdf7c90620818d0c995fd96ef", "url": "https://github.com/vaadin/flow/commit/ea38a30080634fefdf7c90620818d0c995fd96ef", "message": "Don't remove node_modules if pnpm is enabled and it's downloading\nresources.", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "3b74d7b70092029cc2dee5aa80d2dffb9c916dac", "url": "https://github.com/vaadin/flow/commit/3b74d7b70092029cc2dee5aa80d2dffb9c916dac", "message": "Correct code based on review", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "8336003b79d1961624e3886704dc0a7312ab4722", "url": "https://github.com/vaadin/flow/commit/8336003b79d1961624e3886704dc0a7312ab4722", "message": "Fix merge conflicts", "committedDate": "2020-04-02T06:07:40Z", "type": "commit"}, {"oid": "8336003b79d1961624e3886704dc0a7312ab4722", "url": "https://github.com/vaadin/flow/commit/8336003b79d1961624e3886704dc0a7312ab4722", "message": "Fix merge conflicts", "committedDate": "2020-04-02T06:07:40Z", "type": "forcePushed"}]}