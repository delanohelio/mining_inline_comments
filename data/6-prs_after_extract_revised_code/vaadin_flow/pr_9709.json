{"pr_number": 9709, "pr_title": "Process Iterable same way as Collection type", "pr_createdAt": "2020-12-21T21:46:30Z", "pr_url": "https://github.com/vaadin/flow/pull/9709", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNzk3MQ==", "url": "https://github.com/vaadin/flow/pull/9709#discussion_r547527971", "bodyText": "Collection already extends Iterable", "author": "fluorumlabs", "createdAt": "2020-12-22T22:01:32Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/connect/generator/SchemaResolver.java", "diffHunk": "@@ -161,7 +161,7 @@ private boolean isNumberType(ResolvedType type) {\n     }\n \n     private boolean isCollectionType(ResolvedType type) {\n-        return !type.isPrimitive() && isTypeOf(type, Collection.class);\n+        return !type.isPrimitive() && (isTypeOf(type, Collection.class) || isTypeOf(type, Iterable.class));", "originalCommit": "66eb66db82bab9d9be5cbb2e865aca71aed10fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3ODkxNw==", "url": "https://github.com/vaadin/flow/pull/9709#discussion_r551178917", "bodyText": "Sure, so you think we can keep only Iterable here to allow such usage?\n@endpoint\n@AnonymousAllowed\npublic class VaadinEndpoint {\npublic static class Foo {\n    public String bar = \"bar\";\n}\n\npublic Iterable<Foo> getFoos() {\n    return Arrays.asList(new Foo(), new Foo());\n}\n\n}", "author": "tdq", "createdAt": "2021-01-04T08:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyNzk3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUyOTY0Nw==", "url": "https://github.com/vaadin/flow/pull/9709#discussion_r547529647", "bodyText": "Looks like you forgot to commit IterableEndpoint", "author": "fluorumlabs", "createdAt": "2020-12-22T22:06:10Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerTest.java", "diffHunk": "@@ -50,6 +50,7 @@\n import com.vaadin.flow.server.connect.auth.VaadinConnectAccessChecker;\n import com.vaadin.flow.server.connect.exception.EndpointException;\n import com.vaadin.flow.server.connect.exception.EndpointValidationException;\n+import com.vaadin.flow.server.connect.generator.endpoints.collectionendpoint.IterableEndpoint;", "originalCommit": "66eb66db82bab9d9be5cbb2e865aca71aed10fa3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74cb3632b19d989c09917c260b32c12eb3f1794d", "chunk": "diff --git a/fusion-endpoint/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerTest.java b/fusion-endpoint/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerTest.java\nindex ab63582e51..5f75d10488 100644\n--- a/fusion-endpoint/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerTest.java\n+++ b/fusion-endpoint/src/test/java/com/vaadin/flow/server/connect/VaadinConnectControllerTest.java\n\n@@ -52,8 +51,8 @@ import com.vaadin.flow.server.connect.exception.EndpointException;\n import com.vaadin.flow.server.connect.exception.EndpointValidationException;\n import com.vaadin.flow.server.connect.generator.endpoints.collectionendpoint.IterableEndpoint;\n import com.vaadin.flow.server.connect.generator.endpoints.superclassmethods.PersonEndpoint;\n-import com.vaadin.flow.server.connect.generator.endpoints.superclassmethods.PersonEndpoint.Person;\n import com.vaadin.flow.server.connect.testendpoint.BridgeMethodTestEndpoint;\n+import com.vaadin.flow.server.startup.ApplicationConfiguration;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotEquals;\n"}}, {"oid": "74cb3632b19d989c09917c260b32c12eb3f1794d", "url": "https://github.com/vaadin/flow/commit/74cb3632b19d989c09917c260b32c12eb3f1794d", "message": "Process Iterable same way as Collection type\nFixes #9256", "committedDate": "2021-02-18T14:16:38Z", "type": "commit"}, {"oid": "fdcf4a0d661e4842520ac2a971fe3f0f96b89e28", "url": "https://github.com/vaadin/flow/commit/fdcf4a0d661e4842520ac2a971fe3f0f96b89e28", "message": "add missed file", "committedDate": "2021-02-18T14:16:38Z", "type": "commit"}, {"oid": "ea15518f6610cfe801f8c73e8a4ea4e5fbaee26b", "url": "https://github.com/vaadin/flow/commit/ea15518f6610cfe801f8c73e8a4ea4e5fbaee26b", "message": "Move IterableEndpoint fixture and test into their own package\n\nThe endpoint generator testing setup requires a separate package for\neach test to avoid interference between tests. This is because the\ngenerator in the tests emits all classes per package.", "committedDate": "2021-02-18T14:18:21Z", "type": "commit"}, {"oid": "97221c80e16b457da476bf85f767acc43c7cc6d2", "url": "https://github.com/vaadin/flow/commit/97221c80e16b457da476bf85f767acc43c7cc6d2", "message": "Fix IterableEndpointGenerationTest", "committedDate": "2021-02-18T14:30:08Z", "type": "commit"}, {"oid": "97221c80e16b457da476bf85f767acc43c7cc6d2", "url": "https://github.com/vaadin/flow/commit/97221c80e16b457da476bf85f767acc43c7cc6d2", "message": "Fix IterableEndpointGenerationTest", "committedDate": "2021-02-18T14:30:08Z", "type": "forcePushed"}, {"oid": "97221c80e16b457da476bf85f767acc43c7cc6d2", "url": "https://github.com/vaadin/flow/commit/97221c80e16b457da476bf85f767acc43c7cc6d2", "message": "Fix IterableEndpointGenerationTest", "committedDate": "2021-02-18T14:30:08Z", "type": "forcePushed"}]}