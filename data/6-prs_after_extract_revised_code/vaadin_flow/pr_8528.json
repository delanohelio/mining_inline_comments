{"pr_number": 8528, "pr_title": "Add updateItem to DataView #8499", "pr_createdAt": "2020-06-08T17:58:54Z", "pr_url": "https://github.com/vaadin/flow/pull/8528", "timeline": [{"oid": "5dfe1d8caf6688dfedc94aa689d6e0bc00ec2da2", "url": "https://github.com/vaadin/flow/commit/5dfe1d8caf6688dfedc94aa689d6e0bc00ec2da2", "message": "Add updateItem to DataView #8499", "committedDate": "2020-06-08T17:53:29Z", "type": "commit"}, {"oid": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "url": "https://github.com/vaadin/flow/commit/16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "message": "Fix javadoc for update methods", "committedDate": "2020-06-08T19:14:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NjQ4MA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r436956480", "bodyText": "Should getDataProvider() only be called once in the method?\nAnd should itemIdentifier.equals() be used because it can't be null?", "author": "knoobie", "createdAt": "2020-06-08T19:41:14Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -126,10 +130,11 @@ public AbstractListDataView(\n \n     @Override\n     public boolean contains(T item) {\n-        // TODO: delegate this to the data communicator/component, since the\n-        // equality could be\n-        // determined by the provided identity checker (the default is equals).\n-        return getItems().anyMatch(i -> Objects.equals(i, item));\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");\n+        return getItems().anyMatch(i -> getDataProvider().getId(i)", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNDcyNw==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437624727", "bodyText": "Thank you for review! Done.", "author": "mshabarov", "createdAt": "2020-06-09T18:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1NjQ4MA=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex bfce6d4b3d..4d66d8591b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -118,23 +118,24 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n     public <V1 extends Comparable<? super V1>> AbstractListDataView<T> setSortOrder(\n             ValueProvider<T, V1> valueProvider, SortDirection sortDirection) {\n         return setFilterOrOrder(\n-                dataProvider -> dataProvider.setSortOrder(valueProvider, sortDirection));\n+                dataProvider -> dataProvider.setSortOrder(valueProvider,\n+                        sortDirection));\n     }\n \n     @Override\n     public <V1 extends Comparable<? super V1>> AbstractListDataView<T> addSortOrder(\n             ValueProvider<T, V1> valueProvider, SortDirection sortDirection) {\n         return setFilterOrOrder(\n-                dataProvider -> dataProvider.addSortOrder(valueProvider, sortDirection));\n+                dataProvider -> dataProvider.addSortOrder(valueProvider,\n+                        sortDirection));\n     }\n \n     @Override\n     public boolean contains(T item) {\n-        final Object itemIdentifier = getDataProvider().getId(item);\n-        Objects.requireNonNull(itemIdentifier,\n-                \"Identity Provider should not return null\");\n-        return getItems().anyMatch(i -> getDataProvider().getId(i)\n-                .equals(itemIdentifier));\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        final Object itemIdentifier = getIdentifier(item, dataProvider);\n+        return getItems().anyMatch(i -> itemIdentifier.equals(\n+                getIdentifier(i, dataProvider)));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTI1OQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r436959259", "bodyText": "The javadoc on both methods isn't clear if it updates an item or items.\nRandom question: why does data provider allows for multiple items with the same id? If I remember correctly V8 allows it too.. but only on the server side, the client side is broken once multiple rows have the same id in a grid. For example if you place components inside a row and scrolling.. the components aren't displayed in all rows correctly.. instead only some are shown.", "author": "knoobie", "createdAt": "2020-06-08T19:46:52Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyNzg5OQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437627899", "bodyText": "Yes, that's weird and this is crutch actually. My intension was to handle cases when users add the items into the collection directly, but I believe we should protect data view API instead to reject the duplicates. Now updateItem searches for first appearance of identical item assuming that there are no duplicates (same Id).", "author": "mshabarov", "createdAt": "2020-06-09T18:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk1OTI1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\nindex c1327f33d4..7e5e23b2b8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n\n@@ -120,7 +120,7 @@ public interface ListDataView<T, V extends ListDataView<T, ?>>\n      * Finds an items equal to {@code item} in the non-filtered data set\n      * and replaces it with {@code item}.\n      * <p>\n-     * Equality between items relies on equality of its identifiers\n+     * Equality between the items is determined by the identifiers\n      * provided by {@link DataProvider#getId(Object)}.\n      *\n      * @param item\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437145875", "bodyText": "For a non List implementation we could if needed just remove and add if the item is not the same item as in the collection.", "author": "caalador", "createdAt": "2020-06-09T05:29:07Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }\n+            return this;\n+        }\n+        throw new IllegalArgumentException(", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzMTQ0Ng==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437631446", "bodyText": "This would violate the ordering of elements. I'm not sure this would appropriate for users. WDYT?", "author": "mshabarov", "createdAt": "2020-06-09T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTU3OA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437875578", "bodyText": "Well we do call it a ListDataView so I guess it's fine to fail on not having a list.\nFor a SetDataView we should have some default ordering required so then it would be fine.", "author": "caalador", "createdAt": "2020-06-10T05:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NTg3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex bfce6d4b3d..4d66d8591b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -159,29 +160,30 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public AbstractListDataView<T> updateItem(T item) {\n-        return updateItem(item, getDataProvider()::getId);\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return updateItem(item, i -> getIdentifier(i, dataProvider));\n     }\n \n     @Override\n     public AbstractListDataView<T> updateItem(T item,\n-                                   SerializableFunction<T, ?> identityProvider) {\n+                                SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"Item cannot be null\");\n-        Objects.requireNonNull(identityProvider,\n-                \"Identity provider cannot be null\");\n-        Collection<T> items = getDataProvider().getItems();\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        Collection<T> items = dataProvider.getItems();\n \n         if (items instanceof List) {\n-            final Object itemIdentifier = identityProvider.apply(item);\n-            Objects.requireNonNull(itemIdentifier,\n-                    \"Identity Provider should not return null\");\n+            final Object itemIdentifier = getIdentifier(item,\n+                    identityProvider);\n             final List<T> itemList = (List<T>) items;\n \n-            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n-                T nextItem = itemList.get(itemIndex);\n+            int itemIndex = getItemIndex(item, identityProvider);\n+\n+            if (itemIndex != -1) {\n+                T itemToUpdate = itemList.get(itemIndex);\n                 if (itemIdentifier.equals(\n-                        identityProvider.apply(nextItem))) {\n+                        getIdentifier(itemToUpdate, identityProvider))) {\n                     itemList.set(itemIndex, item);\n-                    getDataProvider().refreshItem(item);\n+                    dataProvider.refreshItem(item);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437146139", "bodyText": "Before setting we could check if item.equals(nextItem) and only refresh if they are the same item.\ne.g.\n            if (itemIdentifier.equals(\n                        identityProvider.apply(nextItem))) {\n                if (!itemList.get(i).equals(item)) {\n                    itemList.set(i, item);\n                }\n                provider.refresh(item);\n            }", "author": "caalador", "createdAt": "2020-06-09T05:30:03Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNDc3OQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437634779", "bodyText": "The second if block would never entered if the default DataProvider.getId is used, isn't it? For the identityProvider it is fine, because I assume the equal method would be more strict, but if the developer does not override getId it wouldn't make sense.", "author": "mshabarov", "createdAt": "2020-06-09T18:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2MzIzOQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437863239", "bodyText": "Well if you have the default id and the objects equal then there is no need to set the item and we only need to refresh.", "author": "caalador", "createdAt": "2020-06-10T05:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzA4NA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437877084", "bodyText": "I expect that calling set and refresh methods should happen either together, or not called at all. Suppose for example the item with some fields not included in equals method, the component is refreshed with that item then, but the backed collection not. So, after the refreshAll the item will be fetched with a stale state.", "author": "mshabarov", "createdAt": "2020-06-10T05:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NjEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex bfce6d4b3d..4d66d8591b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -159,29 +160,30 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public AbstractListDataView<T> updateItem(T item) {\n-        return updateItem(item, getDataProvider()::getId);\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return updateItem(item, i -> getIdentifier(i, dataProvider));\n     }\n \n     @Override\n     public AbstractListDataView<T> updateItem(T item,\n-                                   SerializableFunction<T, ?> identityProvider) {\n+                                SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"Item cannot be null\");\n-        Objects.requireNonNull(identityProvider,\n-                \"Identity provider cannot be null\");\n-        Collection<T> items = getDataProvider().getItems();\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        Collection<T> items = dataProvider.getItems();\n \n         if (items instanceof List) {\n-            final Object itemIdentifier = identityProvider.apply(item);\n-            Objects.requireNonNull(itemIdentifier,\n-                    \"Identity Provider should not return null\");\n+            final Object itemIdentifier = getIdentifier(item,\n+                    identityProvider);\n             final List<T> itemList = (List<T>) items;\n \n-            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n-                T nextItem = itemList.get(itemIndex);\n+            int itemIndex = getItemIndex(item, identityProvider);\n+\n+            if (itemIndex != -1) {\n+                T itemToUpdate = itemList.get(itemIndex);\n                 if (itemIdentifier.equals(\n-                        identityProvider.apply(nextItem))) {\n+                        getIdentifier(itemToUpdate, identityProvider))) {\n                     itemList.set(itemIndex, item);\n-                    getDataProvider().refreshItem(item);\n+                    dataProvider.refreshItem(item);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0Njk0OA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437146948", "bodyText": "This formatting change is not correct as our line length is 80, but now this is already 101.", "author": "caalador", "createdAt": "2020-06-09T05:32:42Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -164,8 +203,7 @@ public boolean contains(T item) {\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n         final Collection<T> items = getDataProvider().getItems();\n         if (!items.contains(after)) {\n-            throw new IllegalArgumentException(\n-                    \"Item to insert after is not available in the data\");\n+            throw new IllegalArgumentException(\"Item to insert after is not available in the data\");", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTg2Ng==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437635866", "bodyText": "Done. That was the result of merging or incorrect code style customisation.", "author": "mshabarov", "createdAt": "2020-06-09T18:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0Njk0OA=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex bfce6d4b3d..4d66d8591b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -203,7 +205,8 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n     public AbstractListDataView<T> addItemAfter(T item, T after) {\n         final Collection<T> items = getDataProvider().getItems();\n         if (!items.contains(after)) {\n-            throw new IllegalArgumentException(\"Item to insert after is not available in the data\");\n+            throw new IllegalArgumentException(\n+                    \"Item to insert after is not available in the data\");\n         }\n         if (items instanceof List) {\n             final List<T> itemList = (List<T>) items;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzUxMw==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437147513", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Equality between items relies on equality of its identifiers\n          \n          \n            \n                 * Equality between the items is determined by the identifiers", "author": "caalador", "createdAt": "2020-06-09T05:34:47Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\nindex c1327f33d4..7e5e23b2b8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n\n@@ -120,7 +120,7 @@ public interface ListDataView<T, V extends ListDataView<T, ?>>\n      * Finds an items equal to {@code item} in the non-filtered data set\n      * and replaces it with {@code item}.\n      * <p>\n-     * Equality between items relies on equality of its identifiers\n+     * Equality between the items is determined by the identifiers\n      * provided by {@link DataProvider#getId(Object)}.\n      *\n      * @param item\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzY5OQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437147699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Finds an items equal to {@code item} in the non-filtered data set\n          \n          \n            \n                 * Finds an item equal to {@code item} in the non-filtered data set", "author": "caalador", "createdAt": "2020-06-09T05:35:26Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTk3NQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437635975", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-06-09T18:31:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0NzY5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\nindex c1327f33d4..7e5e23b2b8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n\n@@ -120,7 +120,7 @@ public interface ListDataView<T, V extends ListDataView<T, ?>>\n      * Finds an items equal to {@code item} in the non-filtered data set\n      * and replaces it with {@code item}.\n      * <p>\n-     * Equality between items relies on equality of its identifiers\n+     * Equality between the items is determined by the identifiers\n      * provided by {@link DataProvider#getId(Object)}.\n      *\n      * @param item\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODQ3Ng==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Equality between items relies on equality of its identifiers\n          \n          \n            \n                  * Equality between the items is determined by the identifiers", "author": "caalador", "createdAt": "2020-06-09T05:37:48Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\nindex c1327f33d4..7e5e23b2b8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n\n@@ -120,7 +120,7 @@ public interface ListDataView<T, V extends ListDataView<T, ?>>\n      * Finds an items equal to {@code item} in the non-filtered data set\n      * and replaces it with {@code item}.\n      * <p>\n-     * Equality between items relies on equality of its identifiers\n+     * Equality between the items is determined by the identifiers\n      * provided by {@link DataProvider#getId(Object)}.\n      *\n      * @param item\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODcyNQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *         object which is used to find the equal items in data set.\n          \n          \n            \n                 *         object which is used to determine the equality between items.", "author": "caalador", "createdAt": "2020-06-09T05:38:44Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@link DataProvider#getId(Object)}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @return this ListDataView instance\n+     *\n+     * @see #updateItem(Object, SerializableFunction)\n+     */\n+    V updateItem(T item);\n+\n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set\n+     * and replaces it with {@code item}.\n+     * <p>\n+     * Equality between items relies on equality of its identifiers\n+     * provided by {@code identityProvider}.\n+     *\n+     * @param item\n+     *         item containing updated state\n+     * @param identityProvider\n+     *         callback that transforms {@code item} object into identifier\n+     *         object which is used to find the equal items in data set.", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\nindex c1327f33d4..7e5e23b2b8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n\n@@ -120,7 +120,7 @@ public interface ListDataView<T, V extends ListDataView<T, ?>>\n      * Finds an items equal to {@code item} in the non-filtered data set\n      * and replaces it with {@code item}.\n      * <p>\n-     * Equality between items relies on equality of its identifiers\n+     * Equality between the items is determined by the identifiers\n      * provided by {@link DataProvider#getId(Object)}.\n      *\n      * @param item\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODkwOA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437148908", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Finds an items equal to {@code item} in the non-filtered data set\n          \n          \n            \n                 * Finds an item equal to {@code item} in the non-filtered data set", "author": "caalador", "createdAt": "2020-06-09T05:39:26Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java", "diffHunk": "@@ -115,6 +116,39 @@\n      */\n     V addItemBefore(T item, T before);\n \n+    /**\n+     * Finds an items equal to {@code item} in the non-filtered data set", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNjAzOA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437636038", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-06-09T18:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE0ODkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\nindex c1327f33d4..7e5e23b2b8 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/ListDataView.java\n\n@@ -120,7 +120,7 @@ public interface ListDataView<T, V extends ListDataView<T, ?>>\n      * Finds an items equal to {@code item} in the non-filtered data set\n      * and replaces it with {@code item}.\n      * <p>\n-     * Equality between items relies on equality of its identifiers\n+     * Equality between the items is determined by the identifiers\n      * provided by {@link DataProvider#getId(Object)}.\n      *\n      * @param item\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDI4OQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437150289", "bodyText": "This is duplicated 3 times so it could be a method getIdentifier(T item) also the unchecked getId calls could then use this method to get the non null check.", "author": "caalador", "createdAt": "2020-06-09T05:43:45Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -278,9 +316,13 @@ protected void validateItemIndex(int itemIndex) {\n \n     private int getItemIndex(T item) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getDataProvider().getId(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity Provider should not return null\");", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0MTk3OA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437641978", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-06-09T18:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MDI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex bfce6d4b3d..4d66d8591b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -314,17 +317,36 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(T item, SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n-        final Object itemIdentifier = getDataProvider().getId(item);\n-        Objects.requireNonNull(itemIdentifier,\n-                \"Identity Provider should not return null\");\n+        final Object itemIdentifier = getIdentifier(item,\n+                identityProvider);\n         AtomicInteger index = new AtomicInteger(-1);\n         if (!getItems().peek(t -> index.incrementAndGet())\n-                .filter(t -> itemIdentifier.equals(getDataProvider()\n-                        .getId(t))).findFirst().isPresent()) {\n+                .filter(t -> itemIdentifier.equals(\n+                        getIdentifier(t, identityProvider)))\n+                .findFirst().isPresent()) {\n             return -1;\n         }\n         return index.get();\n     }\n+\n+    private int getItemIndex(T item) {\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return getItemIndex(item, dataProvider::getId);\n+    }\n+\n+    private Object getIdentifier(T item,\n+                                 SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        final Object itemIdentifier = identityProvider.apply(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity provider should not return null\");\n+        return itemIdentifier;\n+    }\n+\n+    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {\n+        return getIdentifier(item, dataProvider::getId);\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjYxNQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437152615", "bodyText": "Would move item creation to the test class as it's  nice if the item content could be seen from the test class.", "author": "caalador", "createdAt": "2020-06-09T05:51:10Z", "path": "flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.tests.data.bean;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+public class Item {\n+\n+    private long id;\n+    private String value;\n+    private String description;\n+\n+    public Item(long id) {\n+        this.id = id;\n+    }\n+\n+    public Item(long id, String value, String description) {\n+        this.id = id;\n+        this.value = value;\n+        this.description = description;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Item item = (Item) o;\n+        return id == item.id;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n+\n+    public static Collection<Item> getTestItems() {", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0MjA5NA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437642094", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-06-09T18:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1MjYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java b/flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java\nindex c826bd4228..9631f92e8d 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/tests/data/bean/Item.java\n\n@@ -15,9 +15,6 @@\n  */\n package com.vaadin.flow.tests.data.bean;\n \n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Objects;\n \n public class Item {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTM1MA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437155350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                            break;\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nWe should break on the  first match as we only update item not multiple items.", "author": "caalador", "createdAt": "2020-06-09T05:59:13Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -152,6 +157,40 @@ public boolean contains(T item) {\n         return this;\n     }\n \n+    @Override\n+    public AbstractListDataView<T> updateItem(T item) {\n+        return updateItem(item, getDataProvider()::getId);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> updateItem(T item,\n+                                   SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(item, \"Item cannot be null\");\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        Collection<T> items = getDataProvider().getItems();\n+\n+        if (items instanceof List) {\n+            final Object itemIdentifier = identityProvider.apply(item);\n+            Objects.requireNonNull(itemIdentifier,\n+                    \"Identity Provider should not return null\");\n+            final List<T> itemList = (List<T>) items;\n+\n+            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n+                T nextItem = itemList.get(itemIndex);\n+                if (itemIdentifier.equals(\n+                        identityProvider.apply(nextItem))) {\n+                    itemList.set(itemIndex, item);\n+                    getDataProvider().refreshItem(item);\n+                }\n+            }", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY0Mjk0NA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437642944", "bodyText": "For-each loop has been replaced by getItemIndex call", "author": "mshabarov", "createdAt": "2020-06-09T18:44:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\nindex bfce6d4b3d..4d66d8591b 100644\n--- a/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n+++ b/flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java\n\n@@ -159,29 +160,30 @@ public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n \n     @Override\n     public AbstractListDataView<T> updateItem(T item) {\n-        return updateItem(item, getDataProvider()::getId);\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return updateItem(item, i -> getIdentifier(i, dataProvider));\n     }\n \n     @Override\n     public AbstractListDataView<T> updateItem(T item,\n-                                   SerializableFunction<T, ?> identityProvider) {\n+                                SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"Item cannot be null\");\n-        Objects.requireNonNull(identityProvider,\n-                \"Identity provider cannot be null\");\n-        Collection<T> items = getDataProvider().getItems();\n+        final ListDataProvider<T> dataProvider = getDataProvider();\n+        Collection<T> items = dataProvider.getItems();\n \n         if (items instanceof List) {\n-            final Object itemIdentifier = identityProvider.apply(item);\n-            Objects.requireNonNull(itemIdentifier,\n-                    \"Identity Provider should not return null\");\n+            final Object itemIdentifier = getIdentifier(item,\n+                    identityProvider);\n             final List<T> itemList = (List<T>) items;\n \n-            for (int itemIndex = 0; itemIndex < itemList.size(); itemIndex++) {\n-                T nextItem = itemList.get(itemIndex);\n+            int itemIndex = getItemIndex(item, identityProvider);\n+\n+            if (itemIndex != -1) {\n+                T itemToUpdate = itemList.get(itemIndex);\n                 if (itemIdentifier.equals(\n-                        identityProvider.apply(nextItem))) {\n+                        getIdentifier(itemToUpdate, identityProvider))) {\n                     itemList.set(itemIndex, item);\n-                    getDataProvider().refreshItem(item);\n+                    dataProvider.refreshItem(item);\n                 }\n             }\n             return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437155451", "bodyText": "This test does bring up the question of @knoobie that why does data provider allow for multiple items with the same identifier as I would say that this is a bit confusing that we can suddenly change the contents of 2 items", "author": "caalador", "createdAt": "2020-06-09T05:59:36Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1Njg5NA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437656894", "bodyText": "Yes, I fixed that. Nevertheless, I would propose to protect add- methods agains duplicates using DataProvider.getId in a separate PR.", "author": "mshabarov", "createdAt": "2020-06-09T19:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NzA3OQ==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437867079", "bodyText": "Just create a new issue for it.", "author": "caalador", "createdAt": "2020-06-10T05:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1NTQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\nindex 5c5b355538..ab274f957c 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\n\n@@ -434,11 +433,13 @@ public class AbstractListDataViewTest {\n     }\n \n     @Test\n-    public void updateItem_idEquality_updatesExistingItem() {\n-        Collection<Item> items = Item.getTestItems();\n+    public void updateItem_equalsBasedIdentity_noUpdatesExpected() {\n+        Collection<Item> items = getTestItems();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofCollection(items);\n \n         ItemListDataView dataView = new ItemListDataView(\n-                () -> DataProvider.ofCollection(items), null);\n+                () -> dataProvider, null);\n \n         dataView.updateItem(\n                 new Item(1L, \"updatedValue\", \"updatedDescr\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODk0Ng==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437158946", "bodyText": "The dataprovider should be created once and that instance served. This due to the fact that the suplier is already called 2 times just for the updateItem so we now create 4 ItemDataProviders during this simple test.\nThis goes for all the other tests also.", "author": "caalador", "createdAt": "2020-06-09T06:10:03Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -431,6 +433,103 @@ public void clearFilters_removesAllSetAndAddedFilters() {\n                 dataView.getItems().count());\n     }\n \n+    @Test\n+    public void updateItem_idEquality_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        Optional<Item> firstItem =\n+                items.stream().filter(i -> i.getId() == 1L).findFirst();\n+\n+        // Item with id = 1 supposed to be updated\n+        Assert.assertTrue(firstItem.isPresent());\n+        Assert.assertEquals(3, items.size());\n+        Assert.assertEquals(\"updatedValue\", firstItem.get().getValue());\n+        Assert.assertEquals(\"updatedDescr\", firstItem.get().getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_idEquality_updatesExistingItems() {\n+        Collection<Item> items = Item.getTestItems();\n+        items.add(new Item(1L, \"duplicatedValue\", \"duplicatedDescr\"));\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> DataProvider.ofCollection(items), null);\n+\n+        dataView.updateItem(\n+                new Item(1L, \"updatedValue\", \"updatedDescr\"));\n+\n+        List<Item> updatedItems =\n+                items.stream().filter(i -> i.getId() == 1L).collect(Collectors.toList());\n+\n+        // Two items with id = 1 supposed to be updated\n+        Assert.assertEquals(2, updatedItems.size());\n+        Assert.assertEquals(4, items.size());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(0).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(0).getDescription());\n+        Assert.assertEquals(\"updatedValue\", updatedItems.get(1).getValue());\n+        Assert.assertEquals(\"updatedDescr\", updatedItems.get(1).getDescription());\n+    }\n+\n+    @Test\n+    public void updateItem_descrIdentity_updatesExistingItem() {\n+        Collection<Item> items = Item.getTestItems();\n+\n+        ItemListDataView dataView = new ItemListDataView(\n+                () -> new ItemDataProvider(items), null);", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1Njk5OA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437656998", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-06-09T19:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1ODk0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\nindex 5c5b355538..ab274f957c 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\n\n@@ -434,11 +433,13 @@ public class AbstractListDataViewTest {\n     }\n \n     @Test\n-    public void updateItem_idEquality_updatesExistingItem() {\n-        Collection<Item> items = Item.getTestItems();\n+    public void updateItem_equalsBasedIdentity_noUpdatesExpected() {\n+        Collection<Item> items = getTestItems();\n+\n+        ListDataProvider<Item> dataProvider = DataProvider.ofCollection(items);\n \n         ItemListDataView dataView = new ItemListDataView(\n-                () -> DataProvider.ofCollection(items), null);\n+                () -> dataProvider, null);\n \n         dataView.updateItem(\n                 new Item(1L, \"updatedValue\", \"updatedDescr\"));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTI5OA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437159298", "bodyText": "The name could perhaps somehow note that it has the Id as Description", "author": "caalador", "createdAt": "2020-06-09T06:10:56Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java", "diffHunk": "@@ -439,4 +538,26 @@ public ListDataViewImpl(\n             super(dataProviderSupplier, component);\n         }\n     }\n+\n+    private static class ItemDataProvider", "originalCommit": "16ef5c208a64b2a9db4ac7f9c86ebc9298d375b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NzczNg==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437657736", "bodyText": "Did not find the better name than CustomIdentityItemDataProvider", "author": "mshabarov", "createdAt": "2020-06-09T19:10:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE1OTI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "4410773cccd46d98960334e9404c40ac92dbab26", "chunk": "diff --git a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\nindex 5c5b355538..ab274f957c 100644\n--- a/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\n+++ b/flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractListDataViewTest.java\n\n@@ -539,16 +533,16 @@ public class AbstractListDataViewTest {\n         }\n     }\n \n-    private static class ItemDataProvider\n+    private static class CustomIdentityItemDataProvider\n             extends ListDataProvider<Item> {\n \n-        public ItemDataProvider(Collection<Item> items) {\n+        public CustomIdentityItemDataProvider(Collection<Item> items) {\n             super(items);\n         }\n \n         @Override\n         public Object getId(Item item) {\n-            return item.getDescription();\n+            return item.getId();\n         }\n     }\n \n"}}, {"oid": "9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "url": "https://github.com/vaadin/flow/commit/9c7a435e1ef57fa8bd86ceb24f65f1994aca54ca", "message": "UpdateItem javadoc fix\n\nCo-authored-by: caalador <mikael.grankvist@gmail.com>", "committedDate": "2020-06-09T12:03:27Z", "type": "commit"}, {"oid": "87b8b24243cc51548dabbaa6a83a33934c04347e", "url": "https://github.com/vaadin/flow/commit/87b8b24243cc51548dabbaa6a83a33934c04347e", "message": "UpdateItem javadoc fix\n\nCo-authored-by: caalador <mikael.grankvist@gmail.com>", "committedDate": "2020-06-09T12:04:55Z", "type": "commit"}, {"oid": "62674a19d3aa60c4083ff376f4c8a574509ffd08", "url": "https://github.com/vaadin/flow/commit/62674a19d3aa60c4083ff376f4c8a574509ffd08", "message": "UpdateItem javadoc fix\n\nCo-authored-by: caalador <mikael.grankvist@gmail.com>", "committedDate": "2020-06-09T12:05:35Z", "type": "commit"}, {"oid": "4410773cccd46d98960334e9404c40ac92dbab26", "url": "https://github.com/vaadin/flow/commit/4410773cccd46d98960334e9404c40ac92dbab26", "message": "Multiple items update exclusion, javadoc and unit tests elaboration", "committedDate": "2020-06-09T18:07:22Z", "type": "commit"}, {"oid": "d777f56dce182464652749eab705ced349582810", "url": "https://github.com/vaadin/flow/commit/d777f56dce182464652749eab705ced349582810", "message": "Add exceptions to javadoc, code style", "committedDate": "2020-06-09T18:42:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDY4OA==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437864688", "bodyText": "Do we need the dataProvider here as we  can just use the getDataProvider() method to get a ListDataProvider.", "author": "caalador", "createdAt": "2020-06-10T05:15:03Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -276,13 +317,37 @@ protected void validateItemIndex(int itemIndex) {\n         return this;\n     }\n \n-    private int getItemIndex(T item) {\n+    private int getItemIndex(\n+            T item, SerializableFunction<T, ?> identityProvider) {\n         Objects.requireNonNull(item, \"item cannot be null\");\n+        final Object itemIdentifier = getIdentifier(item,\n+                identityProvider);\n         AtomicInteger index = new AtomicInteger(-1);\n         if (!getItems().peek(t -> index.incrementAndGet())\n-                .filter(t -> Objects.equals(item, t)).findFirst().isPresent()) {\n+                .filter(t -> itemIdentifier.equals(\n+                        getIdentifier(t, identityProvider)))\n+                .findFirst().isPresent()) {\n             return -1;\n         }\n         return index.get();\n     }\n+\n+    private int getItemIndex(T item) {\n+        ListDataProvider<T> dataProvider = getDataProvider();\n+        return getItemIndex(item, dataProvider::getId);\n+    }\n+\n+    private Object getIdentifier(T item,\n+                                 SerializableFunction<T, ?> identityProvider) {\n+        Objects.requireNonNull(identityProvider,\n+                \"Identity provider cannot be null\");\n+        final Object itemIdentifier = identityProvider.apply(item);\n+        Objects.requireNonNull(itemIdentifier,\n+                \"Identity provider should not return null\");\n+        return itemIdentifier;\n+    }\n+\n+    private Object getIdentifier(T item, ListDataProvider<T> dataProvider) {", "originalCommit": "d777f56dce182464652749eab705ced349582810", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MTYxMw==", "url": "https://github.com/vaadin/flow/pull/8528#discussion_r437871613", "bodyText": "This method could be invoked in a loop, so i wanted to avoid multiple getDataProvider() calls here inside this method.", "author": "mshabarov", "createdAt": "2020-06-10T05:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg2NDY4OA=="}], "type": "inlineReview", "revised_code": null}]}