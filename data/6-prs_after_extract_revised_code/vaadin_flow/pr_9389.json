{"pr_number": 9389, "pr_title": "feat: Do not allow themeClass and themeName in same annotation", "pr_createdAt": "2020-11-12T12:30:54Z", "pr_url": "https://github.com/vaadin/flow/pull/9389", "timeline": [{"oid": "7452a6b4d26f31b28e1ba39c139ce4b1c33e12f2", "url": "https://github.com/vaadin/flow/commit/7452a6b4d26f31b28e1ba39c139ce4b1c33e12f2", "message": "feat: Do not allow themeClass and themeName in same annotation\n\nTheme Class and Theme Name is not supported in\nthe same Theme annotation as theme name builds\non the Lumo theme.\n\ntest-themes is now for testing the Application theme only.\nOld theme test was moved into test-misc.\n\nFixes #9370", "committedDate": "2020-11-12T12:30:20Z", "type": "commit"}, {"oid": "e70856e324ada272eba807eed83f5d5a878d1eda", "url": "https://github.com/vaadin/flow/commit/e70856e324ada272eba807eed83f5d5a878d1eda", "message": "Add validation that Lumo is available on the classpath.", "committedDate": "2020-11-13T08:55:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0MDMzMQ==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r522840331", "bodyText": "Refactor this code to not nest more than 3 if/for/while/switch/try statements.", "author": "vaadin-bot", "createdAt": "2020-11-13T09:49:33Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {", "originalCommit": "e70856e324ada272eba807eed83f5d5a878d1eda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDI3Ng==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523424276", "bodyText": "This block of code not changed, but I wonder why nothing is done when the themes is empty and the theme is null, that means the LUMO theme is not in classpath. Does that lead to same behaviour as if we had NoTheme set?", "author": "mshabarov", "createdAt": "2020-11-14T14:17:25Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();\n+                    if (theme == null) {\n+                        throw new IllegalStateException(\n+                            \"Lumo dependency needs to be available on the classpath when using a theme name.\");\n+                    }\n                 }\n-                theme = getFinder().loadClass(themeClass);\n                 themeName = themeData.getThemeName();\n             }\n-\n         }\n \n         // theme could be null when lumo is not found or when a NoTheme found", "originalCommit": "e70856e324ada272eba807eed83f5d5a878d1eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzODY3OA==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523938678", "bodyText": "If nothing is defined then everything should work the same as before so not having a theme definition and no lumo on classpath should result in no theme.\nIf theme name is defined we will throw that lumo needs to be on the classpath.", "author": "caalador", "createdAt": "2020-11-16T07:25:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDI3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNTgwMw==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523425803", "bodyText": "Am I right that the setting the themName will result to default theme (LUMO) styles + custom theme styles (they are merged in the end)?", "author": "mshabarov", "createdAt": "2020-11-14T14:34:41Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/scanner/FrontendDependencies.java", "diffHunk": "@@ -311,15 +311,24 @@ private void computeApplicationTheme() throws ClassNotFoundException,\n             // we have a proper theme or no-theme for the app\n             ThemeData themeData = themes.iterator().next();\n             if (!themeData.isNotheme()) {\n-                variant = themeData.getVariant();\n                 String themeClass = themeData.getThemeClass();\n-                if (themeClass == null) {\n-                    themeClass = LUMO;\n+                if (!themeData.getThemeName().isEmpty() && themeClass != null) {\n+                    throw new IllegalStateException(\n+                        \"Theme name and theme class can not both be specified. \"\n+                            + \"Theme name uses Lumo and can not be used in combination with custom theme class.\");\n+                }\n+                variant = themeData.getVariant();\n+                if (themeClass != null) {\n+                    theme = getFinder().loadClass(themeClass);\n+                } else {\n+                    theme = getDefaultTheme();", "originalCommit": "e70856e324ada272eba807eed83f5d5a878d1eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzNzg3Mw==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523937873", "bodyText": "The application theme always bases on lumo and lumo will be set for it.", "author": "caalador", "createdAt": "2020-11-16T07:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNTgwMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNzk0MA==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523427940", "bodyText": "Maybe it's better to check the entire message to protect agains accidental modifucation/deletion of the last part of message?", "author": "mshabarov", "createdAt": "2020-11-14T14:57:05Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,39 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n+            exception.getMessage().startsWith(", "originalCommit": "e70856e324ada272eba807eed83f5d5a878d1eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0MjQyNA==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523942424", "bodyText": "done.", "author": "caalador", "createdAt": "2020-11-16T07:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNzk0MA=="}], "type": "inlineReview", "revised_code": {"commit": "8608f07b12541f58b903f6f495d5c8b9f9f116d7", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex ed149f6104..9de533698e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n\n@@ -135,9 +135,10 @@ public class FrontendDependenciesTest {\n             .assertThrows(IllegalStateException.class,\n                 () -> new FrontendDependencies(classFinder, false));\n \n-        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n-            exception.getMessage().startsWith(\n-                \"Theme name and theme class can not both be specified.\"));\n+        Assert.assertEquals(\"Unexpected message for the thrown exception\",\n+            \"Theme name and theme class can not both be specified. \"\n+                + \"Theme name uses Lumo and can not be used in combination with custom theme class.\",\n+            exception.getMessage());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyODkzOQ==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523428939", "bodyText": "There should be also a test checking the theme = getDefaultTheme(); line has been executed and theme defaults to LUMO, when the themeClass is null, but probably this test already exists, where is it then?", "author": "mshabarov", "createdAt": "2020-11-14T15:08:11Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,39 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n+            exception.getMessage().startsWith(\n+                \"Theme name and theme class can not both be specified.\"));\n+    }\n+\n+    @Test\n+    public void noDefaultThemeAvailable_throwsException()", "originalCommit": "e70856e324ada272eba807eed83f5d5a878d1eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0NTkzMg==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523945932", "bodyText": "Added a test.", "author": "caalador", "createdAt": "2020-11-16T07:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyODkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8608f07b12541f58b903f6f495d5c8b9f9f116d7", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex ed149f6104..9de533698e 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n\n@@ -135,9 +135,10 @@ public class FrontendDependenciesTest {\n             .assertThrows(IllegalStateException.class,\n                 () -> new FrontendDependencies(classFinder, false));\n \n-        Assert.assertTrue(\"Unexpected message: \" + exception.getMessage(),\n-            exception.getMessage().startsWith(\n-                \"Theme name and theme class can not both be specified.\"));\n+        Assert.assertEquals(\"Unexpected message for the thrown exception\",\n+            \"Theme name and theme class can not both be specified. \"\n+                + \"Theme name uses Lumo and can not be used in combination with custom theme class.\",\n+            exception.getMessage());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyOTIyNw==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523429227", "bodyText": "add a new line", "author": "mshabarov", "createdAt": "2020-11-14T15:11:14Z", "path": "flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java", "diffHunk": "@@ -42,9 +45,15 @@ public String getBaseUrl() {\n         public String getThemeUrl() {\n             return \"legacyTheme/my-theme\";\n         }\n+\n+        @Override\n+        public List<String> getHeaderInlineContents() {\n+            return Collections.singletonList(\"<custom-style>\\n <style>\\n   html {\\n\"\n+                + \"      font-size: 20px;\\n  color:red;  }\\n <style>\\n </custom-style>\");\n+        }\n     }\n \n     public MiscelaneousView() {\n         setId(TEST_VIEW_ID);\n     }\n-}\n+}", "originalCommit": "e70856e324ada272eba807eed83f5d5a878d1eda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0NjEwNg==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523946106", "bodyText": "added", "author": "caalador", "createdAt": "2020-11-16T07:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyOTIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "8608f07b12541f58b903f6f495d5c8b9f9f116d7", "chunk": "diff --git a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java\nindex f915f31f22..ac7cc58a3c 100644\n--- a/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java\n+++ b/flow-tests/test-misc/src/main/java/com/vaadin/flow/misc/ui/MiscelaneousView.java\n\n@@ -56,4 +56,4 @@ public class MiscelaneousView extends Div {\n     public MiscelaneousView() {\n         setId(TEST_VIEW_ID);\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"oid": "ec0d90a81d1a2b596120eee3aabb9aa1a6b9eedb", "url": "https://github.com/vaadin/flow/commit/ec0d90a81d1a2b596120eee3aabb9aa1a6b9eedb", "message": "Merge branch 'master' into issues/9370_theme_values", "committedDate": "2020-11-16T07:21:07Z", "type": "commit"}, {"oid": "8608f07b12541f58b903f6f495d5c8b9f9f116d7", "url": "https://github.com/vaadin/flow/commit/8608f07b12541f58b903f6f495d5c8b9f9f116d7", "message": "Add test.", "committedDate": "2020-11-16T07:45:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3MDAzOA==", "url": "https://github.com/vaadin/flow/pull/9389#discussion_r523970038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);;\n          \n          \n            \n                    FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);", "author": "mshabarov", "createdAt": "2020-11-16T08:33:40Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java", "diffHunk": "@@ -123,6 +123,54 @@ public void appShellConfigurator_collectedAsEndpoint()\n             themeDefinition.getTheme());\n     }\n \n+    @Test\n+    public void themeDefiningClassAndName_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(FaultyThemeAnnotation.class));\n+        Mockito.when(classFinder.loadClass(FakeLumo.class.getName()))\n+            .thenReturn((Class) FakeLumo.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertEquals(\"Unexpected message for the thrown exception\",\n+            \"Theme name and theme class can not both be specified. \"\n+                + \"Theme name uses Lumo and can not be used in combination with custom theme class.\",\n+            exception.getMessage());\n+    }\n+\n+    @Test\n+    public void noDefaultThemeAvailable_throwsException()\n+        throws ClassNotFoundException {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(MyAppThemeShell.class));\n+        Mockito.when(classFinder.loadClass(FrontendDependencies.LUMO))\n+            .thenThrow(ClassNotFoundException.class);\n+\n+        IllegalStateException exception = Assert\n+            .assertThrows(IllegalStateException.class,\n+                () -> new FrontendDependencies(classFinder, false));\n+\n+        Assert.assertEquals(\"Thrown exception didn't contain correct message\",\n+            \"Lumo dependency needs to be available on the classpath when using a theme name.\",\n+            exception.getMessage());\n+    }\n+\n+    @Test\n+    public void appThemeDefined_getsLumoAsTheme() {\n+        Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n+            .thenReturn(Collections.singleton(MyAppThemeShell.class));\n+\n+        FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);;", "originalCommit": "8608f07b12541f58b903f6f495d5c8b9f9f116d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "75d4cea516561726453a21393f3c87e71a5e106b", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\nindex 9de533698e..3a989c149a 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/frontend/scanner/FrontendDependenciesTest.java\n\n@@ -163,7 +163,7 @@ public class FrontendDependenciesTest {\n         Mockito.when(classFinder.getSubTypesOf(AppShellConfigurator.class))\n             .thenReturn(Collections.singleton(MyAppThemeShell.class));\n \n-        FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);;\n+        FrontendDependencies dependencies = new FrontendDependencies(classFinder, false);\n \n         Assert.assertEquals(\"Faulty default theme received\",\n             FakeLumo.class, dependencies.getThemeDefinition().getTheme());\n"}}, {"oid": "75d4cea516561726453a21393f3c87e71a5e106b", "url": "https://github.com/vaadin/flow/commit/75d4cea516561726453a21393f3c87e71a5e106b", "message": "Remove extra ; copy paste typo\n\nCo-authored-by: Mikhail Shabarov <61410877+mshabarov@users.noreply.github.com>", "committedDate": "2020-11-16T08:37:54Z", "type": "commit"}]}