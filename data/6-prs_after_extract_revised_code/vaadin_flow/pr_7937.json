{"pr_number": 7937, "pr_title": "Last cherry-picks for 2.2.0.alpha16", "pr_createdAt": "2020-03-30T13:28:38Z", "pr_url": "https://github.com/vaadin/flow/pull/7937", "timeline": [{"oid": "bde726db3cb144ba186298e708252bbbe4b02904", "url": "https://github.com/vaadin/flow/commit/bde726db3cb144ba186298e708252bbbe4b02904", "message": "Add stats for pnpm usage (#7917)", "committedDate": "2020-03-27T15:51:38Z", "type": "commit"}, {"oid": "5f7f56816aa70a2cc875b3b081bd8bb16cbb29c7", "url": "https://github.com/vaadin/flow/commit/5f7f56816aa70a2cc875b3b081bd8bb16cbb29c7", "message": "Validate Route and ParentLayout annotations presence at the same time (#7870)\n\n* Validate Route and ParentLayout annotations presence at the same time\n\nFixes #3865\n\n* Correct unit test\n\n* Improve wording", "committedDate": "2020-03-30T07:26:48Z", "type": "commit"}, {"oid": "ed80f82d092c11afe3de45249e255e5399ee9141", "url": "https://github.com/vaadin/flow/commit/ed80f82d092c11afe3de45249e255e5399ee9141", "message": "Apply push setting after navigation (#7838)\n\nFixes #5759\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/component/internal/UIInternals.java\n#\tflow-server/src/test/java/com/vaadin/flow/component/internal/UIInternalsTest.java", "committedDate": "2020-03-30T07:53:02Z", "type": "commit"}, {"oid": "4bac5f8e4497601845abf148b62b4671ae1df4fa", "url": "https://github.com/vaadin/flow/commit/4bac5f8e4497601845abf148b62b4671ae1df4fa", "message": "Reload the page on ESC (#7669)\n\n* Reload the page on ESC\n\nFixes #6284\n\n* Add IT test\n\n* Check if test fails\n\n* Merge master into 6284-reload-page-on-esc\n\n* Remove not working test", "committedDate": "2020-03-30T09:36:08Z", "type": "commit"}, {"oid": "fefd2cd382881634d3365691500138d4d0d76f73", "url": "https://github.com/vaadin/flow/commit/fefd2cd382881634d3365691500138d4d0d76f73", "message": "Switch npm back to default for 2.2", "committedDate": "2020-03-30T13:11:56Z", "type": "commit"}, {"oid": "3c2335112368a3569584ca26486d9d933eebf296", "url": "https://github.com/vaadin/flow/commit/3c2335112368a3569584ca26486d9d933eebf296", "message": "Use pnpm for flow 2.2 build", "committedDate": "2020-03-30T13:30:19Z", "type": "forcePushed"}, {"oid": "f2a977d00c51beeb6c6dacf3918522da541b7010", "url": "https://github.com/vaadin/flow/commit/f2a977d00c51beeb6c6dacf3918522da541b7010", "message": "Use pnpm for flow 2.2 build", "committedDate": "2020-03-30T13:32:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxOTA0Mg==", "url": "https://github.com/vaadin/flow/pull/7937#discussion_r400819042", "bodyText": "Use the built-in formatting to construct this argument.", "author": "vaadin-bot", "createdAt": "2020-03-31T10:52:21Z", "path": "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.testutil;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Superclass for testing classes which need to scan project's classpath.\n+ * \n+ * @author Vaadin Ltd\n+ *\n+ */\n+public abstract class ClassFinder {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ClassFinder.class);\n+\n+    protected boolean isTestClassPath(String classPath) {\n+        File file = new File(classPath);\n+        return \"test-classes\".equals(file.getName());\n+    }\n+\n+    protected static boolean isFunctionalType(Type type) {\n+        return type.getTypeName().contains(\"java.util.function\");\n+    }\n+\n+    /**\n+     * Lists all class path entries by splitting the class path string.\n+     * <p>\n+     * Adapted from ClassPathExplorer.getRawClasspathEntries(), but without\n+     * filtering.\n+     *\n+     * @return List of class path segment strings\n+     */\n+    protected static List<String> getRawClasspathEntries() {\n+        // try to keep the order of the classpath\n+\n+        String pathSep = System.getProperty(\"path.separator\");\n+        String classpath = System.getProperty(\"java.class.path\");\n+\n+        if (classpath.startsWith(\"\\\"\")) {\n+            classpath = classpath.substring(1);\n+        }\n+        if (classpath.endsWith(\"\\\"\")) {\n+            classpath = classpath.substring(0, classpath.length() - 1);\n+        }\n+\n+        String[] split = classpath.split(pathSep);\n+        return Arrays.asList(split);\n+    }\n+\n+    /**\n+     * Lists class names (based on .class files) in a directory (a package path\n+     * root).\n+     *\n+     * @param parentPackage\n+     *            parent package name or null at root of hierarchy, used by\n+     *            recursion\n+     * @param parent\n+     *            File representing the directory to scan\n+     * @return collection of fully qualified class names in the directory\n+     */\n+    private static Collection<String> findClassesInDirectory(\n+            String parentPackage, File parent) {\n+        if (parent.isHidden()\n+                || parent.getPath().contains(File.separator + \".\")) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (parentPackage == null) {\n+            parentPackage = \"\";\n+        } else {\n+            parentPackage += \".\";\n+        }\n+\n+        Collection<String> classNames = new ArrayList<>();\n+\n+        // add all directories recursively\n+        File[] files = parent.listFiles();\n+        assertNotNull(files);\n+        for (File child : files) {\n+            if (child.isDirectory()) {\n+                classNames.addAll(findClassesInDirectory(\n+                        parentPackage + child.getName(), child));\n+            } else if (child.getName().endsWith(\".class\")) {\n+                classNames.add(parentPackage.replace(File.separatorChar, '.')\n+                        + child.getName().replaceAll(\"\\\\.class\", \"\"));\n+            }\n+        }\n+\n+        return classNames;\n+    }\n+\n+    /**\n+     * JARs that will be scanned for classes to test, in addition to classpath\n+     * directories.\n+     *\n+     * @return the compiled pattern\n+     */\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Pattern getJarPattern() {\n+        return Pattern.compile(\"(.*vaadin.*)|(.*flow.*)\\\\.jar\");\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    protected Stream<String> getBasePackages() {\n+        return Stream.of(\"com.vaadin\");\n+    }\n+\n+    protected boolean isTestClass(Class<?> cls) {\n+        if (cls.getEnclosingClass() != null\n+                && isTestClass(cls.getEnclosingClass())) {\n+            return true;\n+        }\n+\n+        // Test classes with a @Test annotation on some method\n+        for (Method method : cls.getMethods()) {\n+            if (method.isAnnotationPresent(Test.class)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Finds the server side classes/interfaces under a class path entry -\n+     * either a directory or a JAR that matches {@link #getJarPattern()}.\n+     * <p>\n+     * Only classes under {@link #getBasePackages} are considered, and those\n+     * matching {@code excludes} are filtered out.\n+     */\n+    protected List<String> findServerClasses(String classpathEntry,\n+            Collection<Pattern> excludes) throws IOException {\n+        Collection<String> classes;\n+\n+        File file = new File(classpathEntry);\n+        if (file.isDirectory()) {\n+            classes = findClassesInDirectory(null, file);\n+        } else if (getJarPattern().matcher(file.getName()).matches()) {\n+            classes = findClassesInJar(file);\n+        } else {\n+            logger.debug(\"Ignoring \" + classpathEntry);", "originalCommit": "881328568f73b0f11f680712db9462cc112ddf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2c0e1e60ddf6b90fbe39ebcf7338f7fd435acad", "chunk": "diff --git a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java b/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java\ndeleted file mode 100644\nindex 9977218eba..0000000000\n--- a/flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassFinder.java\n+++ /dev/null\n\n@@ -1,210 +0,0 @@\n-/*\n- * Copyright 2000-2020 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.testutil;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarFile;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.assertNotNull;\n-\n-/**\n- * Superclass for testing classes which need to scan project's classpath.\n- * \n- * @author Vaadin Ltd\n- *\n- */\n-public abstract class ClassFinder {\n-\n-    private final Logger logger = LoggerFactory.getLogger(ClassFinder.class);\n-\n-    protected boolean isTestClassPath(String classPath) {\n-        File file = new File(classPath);\n-        return \"test-classes\".equals(file.getName());\n-    }\n-\n-    protected static boolean isFunctionalType(Type type) {\n-        return type.getTypeName().contains(\"java.util.function\");\n-    }\n-\n-    /**\n-     * Lists all class path entries by splitting the class path string.\n-     * <p>\n-     * Adapted from ClassPathExplorer.getRawClasspathEntries(), but without\n-     * filtering.\n-     *\n-     * @return List of class path segment strings\n-     */\n-    protected static List<String> getRawClasspathEntries() {\n-        // try to keep the order of the classpath\n-\n-        String pathSep = System.getProperty(\"path.separator\");\n-        String classpath = System.getProperty(\"java.class.path\");\n-\n-        if (classpath.startsWith(\"\\\"\")) {\n-            classpath = classpath.substring(1);\n-        }\n-        if (classpath.endsWith(\"\\\"\")) {\n-            classpath = classpath.substring(0, classpath.length() - 1);\n-        }\n-\n-        String[] split = classpath.split(pathSep);\n-        return Arrays.asList(split);\n-    }\n-\n-    /**\n-     * Lists class names (based on .class files) in a directory (a package path\n-     * root).\n-     *\n-     * @param parentPackage\n-     *            parent package name or null at root of hierarchy, used by\n-     *            recursion\n-     * @param parent\n-     *            File representing the directory to scan\n-     * @return collection of fully qualified class names in the directory\n-     */\n-    private static Collection<String> findClassesInDirectory(\n-            String parentPackage, File parent) {\n-        if (parent.isHidden()\n-                || parent.getPath().contains(File.separator + \".\")) {\n-            return Collections.emptyList();\n-        }\n-\n-        if (parentPackage == null) {\n-            parentPackage = \"\";\n-        } else {\n-            parentPackage += \".\";\n-        }\n-\n-        Collection<String> classNames = new ArrayList<>();\n-\n-        // add all directories recursively\n-        File[] files = parent.listFiles();\n-        assertNotNull(files);\n-        for (File child : files) {\n-            if (child.isDirectory()) {\n-                classNames.addAll(findClassesInDirectory(\n-                        parentPackage + child.getName(), child));\n-            } else if (child.getName().endsWith(\".class\")) {\n-                classNames.add(parentPackage.replace(File.separatorChar, '.')\n-                        + child.getName().replaceAll(\"\\\\.class\", \"\"));\n-            }\n-        }\n-\n-        return classNames;\n-    }\n-\n-    /**\n-     * JARs that will be scanned for classes to test, in addition to classpath\n-     * directories.\n-     *\n-     * @return the compiled pattern\n-     */\n-    @SuppressWarnings(\"WeakerAccess\")\n-    protected Pattern getJarPattern() {\n-        return Pattern.compile(\"(.*vaadin.*)|(.*flow.*)\\\\.jar\");\n-    }\n-\n-    @SuppressWarnings(\"WeakerAccess\")\n-    protected Stream<String> getBasePackages() {\n-        return Stream.of(\"com.vaadin\");\n-    }\n-\n-    protected boolean isTestClass(Class<?> cls) {\n-        if (cls.getEnclosingClass() != null\n-                && isTestClass(cls.getEnclosingClass())) {\n-            return true;\n-        }\n-\n-        // Test classes with a @Test annotation on some method\n-        for (Method method : cls.getMethods()) {\n-            if (method.isAnnotationPresent(Test.class)) {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    /**\n-     * Finds the server side classes/interfaces under a class path entry -\n-     * either a directory or a JAR that matches {@link #getJarPattern()}.\n-     * <p>\n-     * Only classes under {@link #getBasePackages} are considered, and those\n-     * matching {@code excludes} are filtered out.\n-     */\n-    protected List<String> findServerClasses(String classpathEntry,\n-            Collection<Pattern> excludes) throws IOException {\n-        Collection<String> classes;\n-\n-        File file = new File(classpathEntry);\n-        if (file.isDirectory()) {\n-            classes = findClassesInDirectory(null, file);\n-        } else if (getJarPattern().matcher(file.getName()).matches()) {\n-            classes = findClassesInJar(file);\n-        } else {\n-            logger.debug(\"Ignoring \" + classpathEntry);\n-            return Collections.emptyList();\n-        }\n-        return classes.stream()\n-                .filter(className -> getBasePackages().anyMatch(\n-                        basePackage -> className.startsWith(basePackage + \".\")))\n-                .filter(className -> excludes.stream()\n-                        .noneMatch(p -> p.matcher(className).matches()))\n-                .collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Lists class names (based on .class files) in a JAR file.\n-     *\n-     * @param file\n-     *            a valid JAR file\n-     * @return collection of fully qualified class names in the JAR\n-     */\n-    private Collection<String> findClassesInJar(File file) throws IOException {\n-        Collection<String> classes = new ArrayList<>();\n-\n-        try (JarFile jar = new JarFile(file)) {\n-            Enumeration<JarEntry> e = jar.entries();\n-            while (e.hasMoreElements()) {\n-                JarEntry entry = e.nextElement();\n-                if (entry.getName().endsWith(\".class\")) {\n-                    String nameWithoutExtension = entry.getName()\n-                            .replaceAll(\"\\\\.class\", \"\");\n-                    String className = nameWithoutExtension.replace('/', '.');\n-                    classes.add(className);\n-                }\n-            }\n-        }\n-        return classes;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxOTA1NA==", "url": "https://github.com/vaadin/flow/pull/7937#discussion_r400819054", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "author": "vaadin-bot", "createdAt": "2020-03-31T10:52:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import javax.servlet.ServletContainerInitializer;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Allows to load the implementation class by one classloader but accepts\n+ * classes in {@link #onStartup(Set, ServletContext)} method loaded by another\n+ * classloader.\n+ * <p>\n+ * Workaround for https://github.com/vaadin/flow/issues/7805.\n+ *\n+ * @author Vaadin Ltd\n+ *\n+ */\n+public interface ClassLoaderAwareServletContainerInitializer\n+        extends ServletContainerInitializer {\n+\n+    /**\n+     * Overridden to use different classloaders if needed.\n+     * <p>\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n+            throws ServletException {\n+        ClassLoader webClassLoader = ctx.getClassLoader();\n+        ClassLoader classLoader = getClass().getClassLoader();\n+\n+        /*\n+         * Hack is needed to make a workaround for weird behavior of WildFly\n+         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n+         */\n+        boolean noHack = false;\n+        while (classLoader != null) {\n+            if (classLoader.equals(webClassLoader)) {\n+                noHack = true;\n+                break;\n+            } else {\n+                /*\n+                 * The classloader which has loaded this class ({@code\n+                 * classLoader}) should be either the {@code webClassLoader} or\n+                 * its child: in this case it knows how to handle the classes\n+                 * loaded by the {@code webClassLoader} : it either is able to\n+                 * load them itself or delegate to its parent (which is the\n+                 * {@code webClassLoader}): in this case hack is not needed and\n+                 * the {@link #process(Set, ServletContext)} method can be\n+                 * called directly.\n+                 */\n+                classLoader = classLoader.getParent();\n+            }\n+        }\n+\n+        if (noHack) {\n+            process(set, ctx);\n+            return;\n+        }\n+\n+        try {\n+            Class<?> initializer = ctx.getClassLoader()\n+                    .loadClass(getClass().getName());\n+\n+            String processMethodName = Stream", "originalCommit": "881328568f73b0f11f680712db9462cc112ddf03", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2c0e1e60ddf6b90fbe39ebcf7338f7fd435acad", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\ndeleted file mode 100644\nindex 8a7345e4f3..0000000000\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/ClassLoaderAwareServletContainerInitializer.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-/*\n- * Copyright 2000-2020 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package com.vaadin.flow.server.startup;\n-\n-import javax.servlet.ServletContainerInitializer;\n-import javax.servlet.ServletContext;\n-import javax.servlet.ServletException;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.Set;\n-import java.util.stream.Stream;\n-\n-/**\n- * Allows to load the implementation class by one classloader but accepts\n- * classes in {@link #onStartup(Set, ServletContext)} method loaded by another\n- * classloader.\n- * <p>\n- * Workaround for https://github.com/vaadin/flow/issues/7805.\n- *\n- * @author Vaadin Ltd\n- *\n- */\n-public interface ClassLoaderAwareServletContainerInitializer\n-        extends ServletContainerInitializer {\n-\n-    /**\n-     * Overridden to use different classloaders if needed.\n-     * <p>\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    default void onStartup(Set<Class<?>> set, ServletContext ctx)\n-            throws ServletException {\n-        ClassLoader webClassLoader = ctx.getClassLoader();\n-        ClassLoader classLoader = getClass().getClassLoader();\n-\n-        /*\n-         * Hack is needed to make a workaround for weird behavior of WildFly\n-         * with skinnywar See https://github.com/vaadin/flow/issues/7805\n-         */\n-        boolean noHack = false;\n-        while (classLoader != null) {\n-            if (classLoader.equals(webClassLoader)) {\n-                noHack = true;\n-                break;\n-            } else {\n-                /*\n-                 * The classloader which has loaded this class ({@code\n-                 * classLoader}) should be either the {@code webClassLoader} or\n-                 * its child: in this case it knows how to handle the classes\n-                 * loaded by the {@code webClassLoader} : it either is able to\n-                 * load them itself or delegate to its parent (which is the\n-                 * {@code webClassLoader}): in this case hack is not needed and\n-                 * the {@link #process(Set, ServletContext)} method can be\n-                 * called directly.\n-                 */\n-                classLoader = classLoader.getParent();\n-            }\n-        }\n-\n-        if (noHack) {\n-            process(set, ctx);\n-            return;\n-        }\n-\n-        try {\n-            Class<?> initializer = ctx.getClassLoader()\n-                    .loadClass(getClass().getName());\n-\n-            String processMethodName = Stream\n-                    .of(ClassLoaderAwareServletContainerInitializer.class\n-                            .getDeclaredMethods())\n-                    .filter(method -> !method.isDefault()\n-                            && !method.isSynthetic())\n-                    .findFirst().get().getName();\n-            Method operation = Stream.of(initializer.getDeclaredMethods())\n-                    .filter(method -> method.getName()\n-                            .equals(processMethodName))\n-                    .findFirst().get();\n-            operation.invoke(initializer.newInstance(),\n-                    new Object[] { set, ctx });\n-        } catch (ClassNotFoundException | IllegalAccessException\n-                | IllegalArgumentException | InvocationTargetException\n-                | InstantiationException e) {\n-            throw new ServletException(e);\n-        }\n-    }\n-\n-    /**\n-     * Implement this method instead of {@link #onStartup(Set, ServletContext)}\n-     * to handle classes accessible by different classloaders.\n-     *\n-     * @param set\n-     *            the Set of application classes that extend, implement, or have\n-     *            been annotated with the class types specified by the\n-     *            {@link javax.servlet.annotation.HandlesTypes HandlesTypes}\n-     *            annotation, or <tt>null</tt> if there are no matches, or this\n-     *            <tt>ServletContainerInitializer</tt> has not been annotated\n-     *            with <tt>HandlesTypes</tt>\n-     *\n-     * @param ctx\n-     *            the <tt>ServletContext</tt> of the web application that is\n-     *            being started and in which the classes contained in <tt>c</tt>\n-     *            were found\n-     *\n-     * @throws ServletException\n-     *             if an error has occurred\n-     *\n-     * @see #onStartup(Set, ServletContext)\n-     */\n-    void process(Set<Class<?>> set, ServletContext ctx) throws ServletException;\n-}\n"}}, {"oid": "120239ff2c1acfa5a04b3c1c63b88ce7467a0378", "url": "https://github.com/vaadin/flow/commit/120239ff2c1acfa5a04b3c1c63b88ce7467a0378", "message": "correct unit test", "committedDate": "2020-03-31T11:06:36Z", "type": "forcePushed"}, {"oid": "c827da439820748bd3ed73ccbf574055d5aeb132", "url": "https://github.com/vaadin/flow/commit/c827da439820748bd3ed73ccbf574055d5aeb132", "message": "correct unit test", "committedDate": "2020-03-31T11:27:44Z", "type": "forcePushed"}, {"oid": "c2c0e1e60ddf6b90fbe39ebcf7338f7fd435acad", "url": "https://github.com/vaadin/flow/commit/c2c0e1e60ddf6b90fbe39ebcf7338f7fd435acad", "message": "Use pnpm for flow 2.2 build", "committedDate": "2020-03-31T14:08:33Z", "type": "commit"}, {"oid": "ce18495ee45a1f9cd5b538ee635c3a13e617e16a", "url": "https://github.com/vaadin/flow/commit/ce18495ee45a1f9cd5b538ee635c3a13e617e16a", "message": "Make a workaround for skinnywar/Wildfly (#7904)\n\nFixes #7805", "committedDate": "2020-03-31T14:08:43Z", "type": "commit"}, {"oid": "c55119604f450444dbbcae978ab4a15435ef285d", "url": "https://github.com/vaadin/flow/commit/c55119604f450444dbbcae978ab4a15435ef285d", "message": "Lock terser version to 4.6.7 (#7951)", "committedDate": "2020-03-31T14:08:43Z", "type": "commit"}, {"oid": "59a521419c65953ea8d7e2db0a9def59b240c7b2", "url": "https://github.com/vaadin/flow/commit/59a521419c65953ea8d7e2db0a9def59b240c7b2", "message": "Use token file to write parameters for dev mode from maven config (#7666)\n\n* Move parameters into a super class.\n* Set init parameter values based on the token file data.", "committedDate": "2020-03-31T16:51:12Z", "type": "forcePushed"}, {"oid": "c7867faa2529ceef2bdfc4ea8672c654b45659d9", "url": "https://github.com/vaadin/flow/commit/c7867faa2529ceef2bdfc4ea8672c654b45659d9", "message": "Use token file to write parameters for dev mode from maven config (#7666)\n\n* Move parameters into a super class.\n* Set init parameter values based on the token file data.", "committedDate": "2020-04-01T11:15:18Z", "type": "commit"}, {"oid": "19a365fdb5a6b2d181045f80257b4cf2bc122e86", "url": "https://github.com/vaadin/flow/commit/19a365fdb5a6b2d181045f80257b4cf2bc122e86", "message": "Fix pnpm stubbing in test (#7909)\n\nWhen using pnpm in test we need the\n.modules.yaml to not delete node_modules.\n\npackage-lock.json should use given directory\nnot baseDir as we might not be using base.\n\nFixes #7848", "committedDate": "2020-04-01T11:15:42Z", "type": "commit"}, {"oid": "19a365fdb5a6b2d181045f80257b4cf2bc122e86", "url": "https://github.com/vaadin/flow/commit/19a365fdb5a6b2d181045f80257b4cf2bc122e86", "message": "Fix pnpm stubbing in test (#7909)\n\nWhen using pnpm in test we need the\n.modules.yaml to not delete node_modules.\n\npackage-lock.json should use given directory\nnot baseDir as we might not be using base.\n\nFixes #7848", "committedDate": "2020-04-01T11:15:42Z", "type": "forcePushed"}]}