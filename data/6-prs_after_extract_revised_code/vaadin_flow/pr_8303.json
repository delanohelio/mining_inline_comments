{"pr_number": 8303, "pr_title": "Take DataView concept into use #141", "pr_createdAt": "2020-05-11T19:39:26Z", "pr_url": "https://github.com/vaadin/flow/pull/8303", "timeline": [{"oid": "43ed1c54e71aceeada86967dbb6a17bb3568c28a", "url": "https://github.com/vaadin/flow/commit/43ed1c54e71aceeada86967dbb6a17bb3568c28a", "message": "Sort Comparator added", "committedDate": "2020-05-11T18:52:11Z", "type": "commit"}, {"oid": "0819caa89ad50177faab1e3d0315015ca46c4e03", "url": "https://github.com/vaadin/flow/commit/0819caa89ad50177faab1e3d0315015ca46c4e03", "message": "Checkbox submodule added", "committedDate": "2020-05-11T19:37:04Z", "type": "commit"}, {"oid": "2a2573d99e17d54841806dcce272d1d02e3fa390", "url": "https://github.com/vaadin/flow/commit/2a2573d99e17d54841806dcce272d1d02e3fa390", "message": "Sonar comments and feature version fixes", "committedDate": "2020-05-12T08:42:10Z", "type": "commit"}, {"oid": "cc9e7a377f3f3d681e2123b4be1c7f5c127b7f69", "url": "https://github.com/vaadin/flow/commit/cc9e7a377f3f3d681e2123b4be1c7f5c127b7f69", "message": "New abstract data view interfaces, PR fixes", "committedDate": "2020-05-13T14:06:58Z", "type": "commit"}, {"oid": "e2f055c425bddcd3aa9e12740e81a291c3e8833a", "url": "https://github.com/vaadin/flow/commit/e2f055c425bddcd3aa9e12740e81a291c3e8833a", "message": "Revert feature version", "committedDate": "2020-05-13T14:07:47Z", "type": "commit"}, {"oid": "6eb30435fa670c9705ff5a1167b94f559d36ef6b", "url": "https://github.com/vaadin/flow/commit/6eb30435fa670c9705ff5a1167b94f559d36ef6b", "message": "Use fetch(Query) for methods what need filtered data set", "committedDate": "2020-05-13T14:56:06Z", "type": "commit"}, {"oid": "37a7f4eaba3a267a5038ea3040b094367709c317", "url": "https://github.com/vaadin/flow/commit/37a7f4eaba3a267a5038ea3040b094367709c317", "message": "Code duplicates removal", "committedDate": "2020-05-13T17:40:32Z", "type": "commit"}, {"oid": "e0d82babd11f56a54fffc3391d16c007be7e1b1b", "url": "https://github.com/vaadin/flow/commit/e0d82babd11f56a54fffc3391d16c007be7e1b1b", "message": "Fixed missed serializable interface", "committedDate": "2020-05-14T06:29:11Z", "type": "commit"}, {"oid": "c6fb8c111931a29dff5a35cc98e92c3dfd2b7b35", "url": "https://github.com/vaadin/flow/commit/c6fb8c111931a29dff5a35cc98e92c3dfd2b7b35", "message": "A new DataController API introduced, PR comment fixes", "committedDate": "2020-05-14T18:55:57Z", "type": "commit"}, {"oid": "1a5cd725a9d1f4d4534b8bdaa6e48931c795fa07", "url": "https://github.com/vaadin/flow/commit/1a5cd725a9d1f4d4534b8bdaa6e48931c795fa07", "message": "Javadoc fixes", "committedDate": "2020-05-15T07:29:47Z", "type": "commit"}, {"oid": "df7379f7d1cae115f6b3962ccc1dcefd22c4a953", "url": "https://github.com/vaadin/flow/commit/df7379f7d1cae115f6b3962ccc1dcefd22c4a953", "message": "Fix data provider type validation message", "committedDate": "2020-05-15T09:27:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcxNTU3NA==", "url": "https://github.com/vaadin/flow/pull/8303#discussion_r425715574", "bodyText": "Remove usage of generic wildcard type.", "author": "vaadin-bot", "createdAt": "2020-05-15T10:37:18Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataController.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import com.vaadin.flow.shared.Registration;\n+\n+import java.io.Serializable;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Base class for abstract layer between {@link DataView} and {@link DataCommunicator}.\n+ * Allows {@link DataView} high-level API to be separated from component's specifics.\n+ *\n+ * @param <T>\n+ *        data type\n+ */\n+public interface DataController<T> extends Serializable {\n+\n+    /**\n+     * Returns {@link DataProvider} instance tied with component/data communicator.\n+     *\n+     * @return data provider instance\n+     */\n+    DataProvider<T, ?> getDataProvider();", "originalCommit": "df7379f7d1cae115f6b3962ccc1dcefd22c4a953", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "cfc1c28f70e456414ea3d2268a99d3921a16aef8", "url": "https://github.com/vaadin/flow/commit/cfc1c28f70e456414ea3d2268a99d3921a16aef8", "message": "Fix Sonar comments", "committedDate": "2020-05-15T11:29:42Z", "type": "commit"}, {"oid": "fac3f237f703081b3ab0c83260d85060c70a2892", "url": "https://github.com/vaadin/flow/commit/fac3f237f703081b3ab0c83260d85060c70a2892", "message": "Verify DP method modified, isItemPresent method should be delegated", "committedDate": "2020-05-15T12:19:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTEzNQ==", "url": "https://github.com/vaadin/flow/pull/8303#discussion_r425799135", "bodyText": "Remove usage of generic wildcard type.", "author": "vaadin-bot", "createdAt": "2020-05-15T13:24:28Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import com.vaadin.flow.shared.Registration;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Abstract data view implementation which takes care of processing\n+ * component data size change events.\n+ *\n+ * @param <T>\n+ *        data type\n+ */\n+public abstract class AbstractDataView<T> implements DataView<T> {\n+\n+    protected DataController<T> dataController;\n+\n+    /**\n+     * Creates a new instance of {@link AbstractDataView} subclass\n+     * and verifies the passed data controller is compatible with this\n+     * data view implementation.\n+     * <p>\n+     * Data controller reference is stored then internally and used for\n+     * data set manipulations.\n+     *\n+     * @param dataController\n+     *          data controller reference\n+     */\n+    public AbstractDataView(DataController<T> dataController) {\n+        Objects.requireNonNull(dataController, \"DataController cannot be null\");\n+        this.dataController = dataController;\n+        DataProvider<T, ?> dataProvider = dataController.getDataProvider();\n+        Objects.requireNonNull(dataProvider, \"DataProvider cannot be null\");\n+        verifyDataProviderType(dataProvider.getClass());\n+    }\n+\n+    @Override\n+    public Registration addSizeChangeListener(SizeChangeListener listener) {\n+        Objects.requireNonNull(listener, \"SizeChangeListener cannot be null\");\n+        return dataController.addSizeChangeListener(listener);\n+    }\n+\n+    /**\n+     * Returns supported {@link DataProvider} type for this {@link DataView}.\n+     *\n+     * @return supported data provider type\n+     */\n+    protected abstract Class<?> getSupportedDataProviderType();\n+\n+    /**\n+     * Verifies an obtained {@link DataProvider} type is appropriate\n+     * for current Data View type.\n+     *\n+     * @param dataProviderType\n+     *              data provider type to be verified\n+     *\n+     * @throws IllegalStateException\n+     *              if data provider type is incompatible with data view type\n+     */\n+    protected final void verifyDataProviderType(Class<?> dataProviderType) {\n+        Class<?> supportedDataProviderType = getSupportedDataProviderType();\n+        if (!supportedDataProviderType.isAssignableFrom(dataProviderType)) {\n+            final String message = String\n+                    .format(\"%s only supports '%s' or it's subclasses, but was given a '%s'\",\n+                            this.getClass().getSimpleName(), supportedDataProviderType.getSimpleName(),\n+                            dataProviderType.getSuperclass().getSimpleName());\n+            throw new IllegalStateException(message);\n+        }\n+    }\n+\n+    /**\n+     * Obtains an appropriate {@link DataProvider} instance from {@link DataController}.\n+     * Throws a runtime exception otherwise, if the {@link DataProvider} instance is incompatible\n+     * with current implementation of {@link DataView}.\n+     *\n+     * @return data provider instance\n+     *\n+     * @throws IllegalStateException if data provider type is incompatible\n+     */\n+    protected abstract DataProvider<T, ?> getDataProvider();", "originalCommit": "fac3f237f703081b3ab0c83260d85060c70a2892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTE1OA==", "url": "https://github.com/vaadin/flow/pull/8303#discussion_r425799158", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-05-15T13:24:30Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractListDataView.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.data.provider;\n+\n+import com.vaadin.flow.function.SerializableComparator;\n+import com.vaadin.flow.function.SerializableConsumer;\n+import com.vaadin.flow.function.SerializablePredicate;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Abstract list data view implementation which provides common methods\n+ * for fetching, filtering and sorting in-memory data to all {@link ListDataView} subclasses.\n+ *\n+ * @param <T>\n+ *        data type\n+ */\n+public abstract class AbstractListDataView<T> extends AbstractDataView<T>\n+        implements ListDataView<T, AbstractListDataView<T>> {\n+\n+    /**\n+     * Creates a new instance of {@link AbstractListDataView} subclass\n+     * which rely on in-memory data set, i.e. data set stored in a collection.\n+     *\n+     * @param dataController\n+     *          data controller reference\n+     */\n+    public AbstractListDataView(DataController<T> dataController) {\n+        super(dataController);\n+    }\n+\n+    @Override\n+    public boolean hasNextItem(T item) {\n+        return getNextItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+    }\n+\n+    @Override\n+    public T getNextItem(T item) {\n+        List<T> items = getAllItemsAsList();\n+        Optional<Integer> nextItemIndex = getNextItemIndex(notNull(item), items);\n+        return nextItemIndex.map(items::get).orElse(null);\n+    }\n+\n+    @Override\n+    public boolean hasPreviousItem(T item) {\n+        return getPreviousItemIndex(notNull(item), getAllItemsAsList()).isPresent();\n+    }\n+\n+    @Override\n+    public T getPreviousItem(T item) {\n+        List<T> items = getAllItemsAsList();\n+        Optional<Integer> previousItemIndex = getPreviousItemIndex(notNull(item), items);\n+        return previousItemIndex.map(items::get).orElse(null);\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> withFilter(SerializablePredicate<T> filter) {\n+        return withFilterOrOrder(dataProvider -> dataProvider.setFilter(filter));\n+    }\n+\n+    @Override\n+    public AbstractListDataView<T> withSortComparator(SerializableComparator<T> sortComparator) {\n+        return withFilterOrOrder(dataProvider -> dataProvider.setSortComparator(sortComparator));\n+    }\n+\n+    @Override\n+    public Stream<T> getAllItems() {\n+        return dataController.getAllItems();\n+    }\n+\n+    @Override\n+    public int getDataSize() {\n+        return dataController.getDataSize();\n+    }\n+\n+    @Override\n+    public boolean isItemPresent(T item) {\n+        // TODO: delegate this to the data communicator/component, since the equality could be", "originalCommit": "fac3f237f703081b3ab0c83260d85060c70a2892", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}