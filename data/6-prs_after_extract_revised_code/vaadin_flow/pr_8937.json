{"pr_number": 8937, "pr_title": "Fixes from backporting frontend live-reload into master", "pr_createdAt": "2020-09-03T08:57:30Z", "pr_url": "https://github.com/vaadin/flow/pull/8937", "timeline": [{"oid": "da7f5f3a3a47afb252a6ca4a5acb422a11498322", "url": "https://github.com/vaadin/flow/commit/da7f5f3a3a47afb252a6ca4a5acb422a11498322", "message": "Fixes from backporting frontend live-reload into master", "committedDate": "2020-09-03T08:55:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTMwOA==", "url": "https://github.com/vaadin/flow/pull/8937#discussion_r482831308", "bodyText": "I'm not sure at which point this functionality was added to the watchdog but it looks absolutely alien for it.\nWatchdog has only one purpose: notify webpack server to stop when JVM is stopped.\nAnything else here is just illogical.\nAny other functionality added here is absolutely unexpected and may not be located here.\nOtherwise the code is going to become unmantainable.\nThis code has to be refactored so that watchdog does only its function and other functionality does its own function.\nI didn't dig into this deeply but the simplest way could be rename DevServerWatchDog  to another class and register/add some handlers so that they are called generically via common interface. One handler could be watchdog, another : this code.\nThough may be this code should be just completely removed from here and somehow implemented in another place.\nI totally disagree with having it here. It makes a mess.", "author": "denis-anisimov", "createdAt": "2020-09-03T09:15:53Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevServerWatchDog.java", "diffHunk": "@@ -85,7 +86,8 @@ private Logger getLogger() {\n         }\n \n         private void enterReloadMessageReadLoop(Socket accept) throws IOException{\n-            BufferedReader in = new BufferedReader(new InputStreamReader(accept.getInputStream()));\n+            BufferedReader in = new BufferedReader(new InputStreamReader(", "originalCommit": "da7f5f3a3a47afb252a6ca4a5acb422a11498322", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzNzcwNw==", "url": "https://github.com/vaadin/flow/pull/8937#discussion_r482837707", "bodyText": "The feature needs to connect the webpack recompile hook to the live reload trigger, and this existing connection is useful for the purpose (\"the watchdog got another task\"). A refactoring/renaming to better capture the extended responsibility of the class sounds like a good idea.", "author": "joheriks", "createdAt": "2020-09-03T09:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1NDk5Nw==", "url": "https://github.com/vaadin/flow/pull/8937#discussion_r482854997", "bodyText": "I'm not sure whether this is should be done as another task or not since this PR is going to solve another issue.\nBut this code definitely needs refactoring: pure watchdog doesn't know anything about anything , especially about Live reload.\nThey should be absolutely decoupled.\nSome abstraction layer should be introduced to avoid one functionality knowing about another unrelated functionality.\nI may unblock this to fix addressed issue but the code required refactoring for sure.", "author": "denis-anisimov", "createdAt": "2020-09-03T09:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MjMyMA==", "url": "https://github.com/vaadin/flow/pull/8937#discussion_r484462320", "bodyText": "Ticket for internal refactoring:\n#8960", "author": "joheriks", "createdAt": "2020-09-07T14:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMTMwOA=="}], "type": "inlineReview", "revised_code": null}]}