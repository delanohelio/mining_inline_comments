{"pr_number": 9642, "pr_title": "Extract app config from deployment config", "pr_createdAt": "2020-12-14T11:47:04Z", "pr_url": "https://github.com/vaadin/flow/pull/9642", "timeline": [{"oid": "16157c4750c7c39802d26f2c2f3ae9ba0f68941b", "url": "https://github.com/vaadin/flow/commit/16157c4750c7c39802d26f2c2f3ae9ba0f68941b", "message": "test: use App config and adapt unit tests", "committedDate": "2020-12-16T06:42:45Z", "type": "forcePushed"}, {"oid": "ea29c374c25494f7e9c5ddc27b14127057982fac", "url": "https://github.com/vaadin/flow/commit/ea29c374c25494f7e9c5ddc27b14127057982fac", "message": "refactor: extract common config functionality and introduce add config\n\npart of #9417", "committedDate": "2020-12-17T08:46:57Z", "type": "commit"}, {"oid": "9c4187386d31b93898460ad95c5fda4b6c0c87fb", "url": "https://github.com/vaadin/flow/commit/9c4187386d31b93898460ad95c5fda4b6c0c87fb", "message": "refactor: use application level configuration instead of deployment conf", "committedDate": "2020-12-17T08:46:57Z", "type": "commit"}, {"oid": "e13980f4f347de7f04ca01a587a9f248775f5df6", "url": "https://github.com/vaadin/flow/commit/e13980f4f347de7f04ca01a587a9f248775f5df6", "message": "chore: implement deployment configs being based on parent app config", "committedDate": "2020-12-17T08:46:57Z", "type": "commit"}, {"oid": "d9fcad8a40e3f7a5c97f842ddfff9a6f0a92c6eb", "url": "https://github.com/vaadin/flow/commit/d9fcad8a40e3f7a5c97f842ddfff9a6f0a92c6eb", "message": "fix: fix javadoc params", "committedDate": "2020-12-17T08:46:58Z", "type": "commit"}, {"oid": "7c8be8314be2dea05cff195d19469653c5ad4bb3", "url": "https://github.com/vaadin/flow/commit/7c8be8314be2dea05cff195d19469653c5ad4bb3", "message": "fix: correct javadocs references", "committedDate": "2020-12-17T08:46:58Z", "type": "commit"}, {"oid": "b1e65f4e9fe40aefa1668c0fcbbeaa6b05d37aa1", "url": "https://github.com/vaadin/flow/commit/b1e65f4e9fe40aefa1668c0fcbbeaa6b05d37aa1", "message": "test: use App config and adapt unit tests", "committedDate": "2020-12-17T08:46:58Z", "type": "commit"}, {"oid": "37d103032bdc7d420946752bf2cb6de3fe6336de", "url": "https://github.com/vaadin/flow/commit/37d103032bdc7d420946752bf2cb6de3fe6336de", "message": "fix: correct variable name", "committedDate": "2020-12-17T08:46:58Z", "type": "commit"}, {"oid": "b42bd480a42dab77bf163806fbb8c5a9fd401667", "url": "https://github.com/vaadin/flow/commit/b42bd480a42dab77bf163806fbb8c5a9fd401667", "message": "test: make unit tests for DefaultApplicationConfigurationFactory", "committedDate": "2020-12-17T08:46:59Z", "type": "commit"}, {"oid": "85ce4fde0cc05ae3ffe149206337c738cb822adc", "url": "https://github.com/vaadin/flow/commit/85ce4fde0cc05ae3ffe149206337c738cb822adc", "message": "test: add unit tests for properties in DefaultDeploymentConfiguration", "committedDate": "2020-12-17T08:46:59Z", "type": "commit"}, {"oid": "282fc3c0626668e5c88c9d4e4b11b2fbb671d73a", "url": "https://github.com/vaadin/flow/commit/282fc3c0626668e5c88c9d4e4b11b2fbb671d73a", "message": "test: add precedence tests for PropertyDeploymentConfiguration", "committedDate": "2020-12-17T08:46:59Z", "type": "commit"}, {"oid": "e119e096d89ee87ba05ca44e5796f3acbadf059c", "url": "https://github.com/vaadin/flow/commit/e119e096d89ee87ba05ca44e5796f3acbadf059c", "message": "test: add unit test for app config factory in lookup", "committedDate": "2020-12-17T08:47:00Z", "type": "commit"}, {"oid": "352b98dea5483e57ff384ab73d7efb2ff71e340a", "url": "https://github.com/vaadin/flow/commit/352b98dea5483e57ff384ab73d7efb2ff71e340a", "message": "test: extend unit tests for PropertyDeploymentConfiguration", "committedDate": "2020-12-17T08:47:00Z", "type": "commit"}, {"oid": "e91f0bef678d105c08ebf4f9a514c78e8a74a897", "url": "https://github.com/vaadin/flow/commit/e91f0bef678d105c08ebf4f9a514c78e8a74a897", "message": "test: use App config in DevModeHandlerTest instead deployment config", "committedDate": "2020-12-17T08:47:00Z", "type": "commit"}, {"oid": "81ea8f38347134855209f77a40fc0864e25539ff", "url": "https://github.com/vaadin/flow/commit/81ea8f38347134855209f77a40fc0864e25539ff", "message": "test: use app config instead of deployment config in unit tests", "committedDate": "2020-12-17T09:24:44Z", "type": "commit"}, {"oid": "5e4a45d8479495100f02b1577cb0a16753745767", "url": "https://github.com/vaadin/flow/commit/5e4a45d8479495100f02b1577cb0a16753745767", "message": "test: fixes unit tests after introducing merging properties", "committedDate": "2020-12-17T09:24:44Z", "type": "commit"}, {"oid": "8cce983879f1991152a5091e54511a6918ef687c", "url": "https://github.com/vaadin/flow/commit/8cce983879f1991152a5091e54511a6918ef687c", "message": "test: fix DevModeInitializerClassLoaderTest", "committedDate": "2020-12-17T09:24:44Z", "type": "commit"}, {"oid": "1b773f571118b3db98773573ebe3ffe98748eb01", "url": "https://github.com/vaadin/flow/commit/1b773f571118b3db98773573ebe3ffe98748eb01", "message": "fix: yet another fix of unit tests", "committedDate": "2020-12-17T09:24:45Z", "type": "commit"}, {"oid": "92f993d8ae1639a716276da329e147f0fedc5314", "url": "https://github.com/vaadin/flow/commit/92f993d8ae1639a716276da329e147f0fedc5314", "message": "test: run ITs without app shell validation check", "committedDate": "2020-12-17T09:37:56Z", "type": "commit"}, {"oid": "dda1b6e952fb925ac0abf621f597ea5b269fd643", "url": "https://github.com/vaadin/flow/commit/dda1b6e952fb925ac0abf621f597ea5b269fd643", "message": "fix: yet another unit test fix", "committedDate": "2020-12-17T09:40:35Z", "type": "commit"}, {"oid": "dda1b6e952fb925ac0abf621f597ea5b269fd643", "url": "https://github.com/vaadin/flow/commit/dda1b6e952fb925ac0abf621f597ea5b269fd643", "message": "fix: yet another unit test fix", "committedDate": "2020-12-17T09:40:35Z", "type": "forcePushed"}, {"oid": "a1ef765199924c6db367fafd70234d8c3753ba72", "url": "https://github.com/vaadin/flow/commit/a1ef765199924c6db367fafd70234d8c3753ba72", "message": "fix: javadocs fix", "committedDate": "2020-12-17T09:47:12Z", "type": "commit"}, {"oid": "865935a98cb39df885d88263d918852f3ee2de3e", "url": "https://github.com/vaadin/flow/commit/865935a98cb39df885d88263d918852f3ee2de3e", "message": "fix: fix IT servets", "committedDate": "2020-12-17T10:08:10Z", "type": "commit"}, {"oid": "2044221dd41c3f1b793d8c5b24aac8f5933a0c61", "url": "https://github.com/vaadin/flow/commit/2044221dd41c3f1b793d8c5b24aac8f5933a0c61", "message": "fix: fix fusion code", "committedDate": "2020-12-17T10:39:22Z", "type": "commit"}, {"oid": "497b282e9ec793402a5bb0398d79f3a87d98a71c", "url": "https://github.com/vaadin/flow/commit/497b282e9ec793402a5bb0398d79f3a87d98a71c", "message": "it's never ending story", "committedDate": "2020-12-17T10:59:19Z", "type": "commit"}, {"oid": "497b282e9ec793402a5bb0398d79f3a87d98a71c", "url": "https://github.com/vaadin/flow/commit/497b282e9ec793402a5bb0398d79f3a87d98a71c", "message": "it's never ending story", "committedDate": "2020-12-17T10:59:19Z", "type": "forcePushed"}, {"oid": "777e9a80294e6ede8ced7f623471215892d70f4e", "url": "https://github.com/vaadin/flow/commit/777e9a80294e6ede8ced7f623471215892d70f4e", "message": "chore: adapt fusion code to use app config and make factory OSGi capable", "committedDate": "2020-12-18T06:38:13Z", "type": "commit"}, {"oid": "5b4d5df310290e51dcb5002fe1f6bd6083526b20", "url": "https://github.com/vaadin/flow/commit/5b4d5df310290e51dcb5002fe1f6bd6083526b20", "message": "fix: correct \"createDeploymentConfiguration\" code impl", "committedDate": "2020-12-18T07:16:35Z", "type": "commit"}, {"oid": "aba867a39c618955079ae366641ad7e4f71ffc25", "url": "https://github.com/vaadin/flow/commit/aba867a39c618955079ae366641ad7e4f71ffc25", "message": "fix: yet another fix for createDeploymentConfiguration impl", "committedDate": "2020-12-18T07:54:27Z", "type": "commit"}, {"oid": "a221f98453baa170f2e2a501bd2dda6764b698c5", "url": "https://github.com/vaadin/flow/commit/a221f98453baa170f2e2a501bd2dda6764b698c5", "message": "fix: rewrite UI IT to avoid removed annotation", "committedDate": "2020-12-18T08:42:07Z", "type": "commit"}, {"oid": "a221f98453baa170f2e2a501bd2dda6764b698c5", "url": "https://github.com/vaadin/flow/commit/a221f98453baa170f2e2a501bd2dda6764b698c5", "message": "fix: rewrite UI IT to avoid removed annotation", "committedDate": "2020-12-18T08:42:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzYyNQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545727625", "bodyText": "Remove this use of \"APPLICATION_JSON_UTF8_VALUE\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-12-18T10:03:16Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/connect/VaadinConnectController.java", "diffHunk": "@@ -253,8 +239,7 @@ void validateEndpointBean(EndpointNameChecker endpointNameChecker,\n      *            the current request which triggers the endpoint call\n      * @return execution result as a JSON string or an error message string\n      */\n-    @PostMapping(path = \"/{endpoint}/{method}\", produces =\n-            MediaType.APPLICATION_JSON_UTF8_VALUE)\n+    @PostMapping(path = \"/{endpoint}/{method}\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzY1Mg==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545727652", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "author": "vaadin-bot", "createdAt": "2020-12-18T10:03:18Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -62,7 +68,7 @@\n      *            the token file data\n      * @return the config parameters\n      */\n-    public Map<String, String> getConfigParametersUsingTokenData(\n+    protected Map<String, String> getConfigParametersUsingTokenData(", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzY4OA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545727688", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-12-18T10:03:21Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -58,7 +57,8 @@\n  */\n @HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n         DeprecatedPolymerPublishedEventHandler.class,", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzY5Ng==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545727696", "bodyText": "First sentence of Javadoc is incomplete (period is missing) or not present.", "author": "vaadin-bot", "createdAt": "2020-12-18T10:03:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java", "diffHunk": "@@ -205,6 +250,46 @@ public boolean isDevModeLiveReloadEnabled() {\n                 && enableDevServer(); // gizmo excluded from prod bundle\n     }\n \n+    /**\n+     * Checks whether the given {@code property} is the property explicitly set\n+     * in this deployment configuration (not in it's parent config).\n+     * <p>\n+     * The deployment configuration consists of properties defined in the\n+     * configuration itself and properties which are coming from the application\n+     * configuration. The properties which are defined in the deployment\n+     * configuration itself (own properties) should take precedence: their\n+     * values should override the parent config properties values.\n+     * \n+     * @param property\n+     *            a property name\n+     * @return whether the {@code property} is explicitly set in the\n+     *         configuration\n+     */\n+    protected boolean isOwnProperty(String property) {\n+        return getApplicationProperty(getProperties()::get, property) != null;\n+    }\n+\n+    /**", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcyNzcwMg==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545727702", "bodyText": "Remove this use of \"Thread.sleep()\".", "author": "vaadin-bot", "createdAt": "2020-12-18T10:03:23Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -128,105 +132,61 @@ public void teardown() throws Exception, SecurityException {\n     @Test\n     public void should_generateOpenApi_when_EndpointPresents()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n-                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            // Configure a folder that has .java classes with valid endpoints\n-            // Not using `src/test/java` because there are invalid endpoint names\n-            // in some tests\n-            File src = new File(\n-                    getClass().getClassLoader().getResource(\"java\").getFile());\n-            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    src.getAbsolutePath());\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            DevModeInitializer devModeInitializer = new DevModeInitializer();\n-            devModeInitializer.onStartup(classes, servletContext);\n-            waitForDevModeServer();\n-            Thread.sleep(200);\n-            Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n-                    generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();\n-        }\n+                .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        File src = new File(\n+                getClass().getClassLoader().getResource(\"java\").getFile());\n+        Mockito.when(appConfig.getStringProperty(\n+                Mockito.eq(CONNECT_JAVA_SOURCE_FOLDER_TOKEN),\n+                Mockito.anyString())).thenReturn(src.getAbsolutePath());\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        DevModeInitializer devModeInitializer = new DevModeInitializer();\n+        devModeInitializer.process(classes, servletContext);\n+        waitForDevModeServer();\n+        Thread.sleep(200);", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MjY3MQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545782671", "bodyText": "What was the reason why instances of this are now required to be created instead of using the static methods ? To make testing easier ?", "author": "pleku", "createdAt": "2020-12-18T11:51:12Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -67,14 +50,9 @@\n             + \"the project/working directory. Ensure 'webpack.config.js' is present or trigger creation of \"\n             + \"'flow-build-info.json' via running 'prepare-frontend' Maven goal.\";\n \n-    public static final String DEV_FOLDER_MISSING_MESSAGE = \"Running project in development mode with no access to folder '%s'.%n\"\n-            + \"Build project in production mode instead, see https://vaadin.com/docs/v15/flow/production/tutorial-production-mode-basic.html\";\n     private static final Logger logger = LoggerFactory\n             .getLogger(DeploymentConfigurationFactory.class);\n \n-    private DeploymentConfigurationFactory() {\n-    }\n-", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NTQ2NQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546245465", "bodyText": "The class may not be called Factory  as it has static methods only.\nFactory is a generic pattern which is used via an instance to create something.\nstatic methods may be considered as a factory methods but the methods only may be considered as factory methods (not a whole class).\nThe class which contains only static methods is a Helper but not a factory.\nSo the name was confusing from the very beginning.\nSeveral reason apart of that:\n\nIt's possible to extend DeploymentConfigurationFactory now . (it's not possible to use the custom subclass but it's possible to allow to use it in the future: Lookup  can be used to get a DeploymentConfigurationFactory and then it will be possible to customize it via providing own config).\nDeploymentConfigurationFactory extends AbstractConfigurationFactory . AbstractConfigurationFactory contains methods which are used in subclasses of AbstractConfigurationFactory: DefaultApplicationConfigurationFactory is a real factory whose instance is used to create an ApplicationConfiguration and the AbstractConfigurationFactory::getConfigParametersUsingTokenData  method has to be an instance method ( so this method may not be used in the static  method as is. I would have been make an instance of DeploymentConfigurationFactory to use it which is absolutely ugly).\nTechnically  DeploymentConfigurationFactory  is done consistently now with DefaultApplicationConfigurationFactory .\nTesting became much easier with correctly used patterns.", "author": "denis-anisimov", "createdAt": "2020-12-19T14:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MjY3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "83850593eba38a8ae131bf595e0a69461e3f49c8", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\nindex 14ae4a835b..d3a5561094 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n\n@@ -50,9 +47,6 @@ public class DeploymentConfigurationFactory extends AbstractConfigurationFactory\n             + \"the project/working directory. Ensure 'webpack.config.js' is present or trigger creation of \"\n             + \"'flow-build-info.json' via running 'prepare-frontend' Maven goal.\";\n \n-    private static final Logger logger = LoggerFactory\n-            .getLogger(DeploymentConfigurationFactory.class);\n-\n     /**\n      * Creates a {@link DeploymentConfiguration} instance that is filled with\n      * all parameters, specified for the current app.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MzUzNw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545783537", "bodyText": "I wonder if the static methods should have been left as deprecated in case someone is still using those. But I don't know if there is ever such a case in application developer's code so probably this should be fine. Just another thing to mention in the list of breaking changes and that should be enough.", "author": "pleku", "createdAt": "2020-12-18T11:53:03Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -87,10 +65,12 @@ private DeploymentConfigurationFactory() {\n      * @throws VaadinConfigurationException\n      *             thrown if property construction fails\n      */\n-    public static DeploymentConfiguration createDeploymentConfiguration(", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0NjAwMg==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546246002", "bodyText": "I would like to avoid keeping static methods because of several reasons:\n\nas mentioned factory should be an object (not a class with static methods)\nI don't see any reason why would you want to use the methods in your app: they allow to make a deployment configuration and the only purpose of this configuration is to create a VaadinService which should be created out of the box for the end developer.\n\nI'm pretty sure that if you need to create a DeploymentConfiguration via those methods then you are doing something wrong (like eliminated code with StubConfig in ServletContainerInitializer  impls).\nI may return back the static deprecated methods but I really would like to avoid this.\nDo we have to keep backward compatibility in 6.0?", "author": "denis-anisimov", "createdAt": "2020-12-19T14:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MzUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNjAzNQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546406035", "bodyText": "Actually I'm wrong.\nVaadinServlet creates a DeploymentConfiguration via the createDeploymentConfiguration  and a custom\nVaadinServlet may want to override the config created via  createDeploymentConfiguration .\nSo there can be usages of the static methods.\nI may restore and deprecate them with the proper implementation which instantiates the DeploymentConfigurationFactory even though I would like to avoid static methods.", "author": "denis-anisimov", "createdAt": "2020-12-20T17:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MzUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MDI5Nw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546590297", "bodyText": "As it is quite rare case and trivial fix to do, agreed not to add back the static methods as deprecated.", "author": "pleku", "createdAt": "2020-12-21T09:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MzUzNw=="}], "type": "inlineReview", "revised_code": {"commit": "638e0c86d5bfbf1738743be05cd96ae9777125a6", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\nindex 14ae4a835b..4a41479979 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java\n\n@@ -66,8 +60,7 @@ public class DeploymentConfigurationFactory extends AbstractConfigurationFactory\n      *             thrown if property construction fails\n      */\n     public DeploymentConfiguration createDeploymentConfiguration(\n-            Class<?> systemPropertyBaseClass, VaadinConfig vaadinConfig)\n-            throws VaadinConfigurationException {\n+            Class<?> systemPropertyBaseClass, VaadinConfig vaadinConfig) {\n         return new DefaultDeploymentConfiguration(\n                 ApplicationConfiguration.get(vaadinConfig.getVaadinContext()),\n                 systemPropertyBaseClass,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNjI3OQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545806279", "bodyText": "Just one note on this class - it seems a bit fragile pattern if all inherited configuration checks isSomething() methods need to be overridden here and then use the same pattern of\n\"is-own-property ? if yes then get it, if not get from parent\"\nneeds to be applied separately to all of those. In my opinion it would be better in the long run if there was just one method overridden here that handles the logic for all the properties.", "author": "pleku", "createdAt": "2020-12-18T12:41:06Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java", "diffHunk": "@@ -43,22 +45,31 @@\n \n     private final Class<?> systemPropertyBaseClass;\n \n-    private final Properties initialParameters;\n+    /**\n+     * Contains properties from both: parent config and provided properties.\n+     */\n+    private final Properties allProperties;\n+\n+    private final ApplicationConfiguration parentConfig;\n \n     /**\n      * Create a new property deployment configuration instance.\n-     *\n+     * \n+     * @param parentConfig\n+     *            a parent application configuration\n      * @param systemPropertyBaseClass\n      *            the class that should be used as a basis when reading system\n      *            properties\n      * @param initParameters\n      *            the init parameters that should make up the foundation for\n      *            this configuration\n      */\n-    public PropertyDeploymentConfiguration(Class<?> systemPropertyBaseClass,\n-            Properties initParameters) {\n+    public PropertyDeploymentConfiguration(", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0ODMzMQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546248331", "bodyText": "I'm not sure whether I get your concern right.....\nBut I don't like isOwnProperty call here either. The implementation is fragile indeed.\nBut fragility is non removable. It comes from the essence of configuration design.\nDeploymentConfiguration  is an interface but it has a mixture of API and implementation methods.\nE.g. isProductionMode is API method.\ngetStringProperty is an implementation method which should have been defined in an abstract class to reuse it in subclasses.\nBut we have what we have:\n\nisProductionMode  whose value technically is based on SERVLET_PARAMETER_PRODUCTION_MODE property and getStringProperty is used to get the property value. BUT  getStringProperty doesn't have to be respected in isProductionMode  implementation since it's a totally different method. isProductionMode  may be implemented in one way and getStringProperty for SERVLET_PARAMETER_PRODUCTION_MODE  in another way. That's the consequence of the \"API\" design.\nAs a result there are 4 cases to consider for DeploymentConfiguration:  isProductionMode  impl, SERVLET_PARAMETER_PRODUCTION_MODE  property value , isProductionMode  impl for parent ApplicationConfiguration and SERVLET_PARAMETER_PRODUCTION_MODE  property value for parent ApplicationConfiguration.\n\nDeploymentConfiguration and ApplicationConfiguration properties are merged because DeploymentConfiguration should contain properties from the parent config as well.\nBut then getApplicationProperty (and getStringProperty  which is based on this method) MAY NOT be used to implement isProduction: because getApplicationProperty asks for DeploymentConfiguration first and then it asks for  ApplicationConfiguration property.\nAs a result ApplicationConfiguration::isProductionMode is ignored in this case.\nSo only \"implementation level\" of the configuration design based on properties works. And this is wrong.\nThat's why I had to add isOwnProperty.\nI can use another method for isProductionMode  implementation instead getBooleanProperty : yes.\nBut then I will have to introduce:\n\noverride for getBooleanProperty() based on override for getStringProperty\noverride for getStringProperty() : since the current impl may not be used as is ( described above why)\noverride for getApplicationProperty which doesn't take into account parent properties.\n\nSo instead of one  isOwnProperty there will be 3 new methods.\nAnd what's worst here: if you add one more property to the config (a new API method) then you won't be able to get which getBooleanProperty/ getStringProperty/ getApplicationProperty to use: there will be couple of methods for every name.\nI consider this as even more fragile : 3 additional methods which is too easy to mix up with the method having the same name.\nI don't have strong opinion on this. I've decided that is isOwnProperty introduces less problems comparing to any other approach which I had as optional.\nIf you see the good proper way to solve this issue then I will be happy to apply it here.", "author": "denis-anisimov", "createdAt": "2020-12-19T15:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU4ODk5MA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546588990", "bodyText": "I agree with your comments and I don't have a flawless solution to offer either.\nOne option, that we have sometimes opted for, would be to have a test that checks whether certain types of / named methods in e.g. interface DeploymentConfiguration are overridden in the child class PropertyDeploymentConfiguration, to avoid bugs that someone adds a new method with default implementation to the interface / abstract child class but not the PropertyDeploymentConfiguration.\nI don't know how likely it is that this test will catch a bug in reality.", "author": "pleku", "createdAt": "2020-12-21T09:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNjI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5MzQ1Mw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546593453", "bodyText": "There are many other ways to make the implementation invalid because of fragility.\nIn fact the default impl in the DeploymentConfiguration is not an issue until there is no the same method in the parent ApplicationConfiguration.\nSo default impl should be checked in the AbstractConfiguration . But then again it's possible to add methods with the same name into  DeploymentConfiguration and ApplicationConfiguration apart of AbstractConfiguration.\nI think it's just not possible to catch all possible cases to make incorrect implementation so it's not worth to", "author": "denis-anisimov", "createdAt": "2020-12-21T09:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNjI3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNzUxOQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545807519", "bodyText": "We might have to write some new documentation on how to replace this when migrating from earlier versions v7/v8/14 to v19+ and registering their own servlet with this configuration. Maybe should add a ticket about that", "author": "pleku", "createdAt": "2020-12-18T12:43:48Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServletConfiguration.java", "diffHunk": "@@ -1,124 +0,0 @@\n-/*\n- * Copyright 2000-2020 Vaadin Ltd.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n- * use this file except in compliance with the License. You may obtain a copy of\n- * the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package com.vaadin.flow.server;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import java.util.function.Function;\n-\n-import com.vaadin.flow.component.UI;\n-import com.vaadin.flow.function.DeploymentConfiguration;\n-\n-/**\n- * Configures subclasses of {@link VaadinServlet}. For a {@link VaadinServlet}\n- * class that has this annotation, the defined values are read during\n- * initialization and will be available using\n- * {@link DeploymentConfiguration#getApplicationOrSystemProperty(String, Object, Function)}\n- * as well as from specific methods in {@link DeploymentConfiguration}. Init\n- * params defined in <code>web.xml</code> or the <code>@WebServlet</code>\n- * annotation take precedence over values defined in this annotation.\n- *\n- * @deprecated Leftover from Vaadin Framework 8 where the developer typically\n- *             defines their own servlet class. Starting from Flow 1.0, a\n- *             servlet is automatically registered and this annotation serves\n- *             very little purpose.\n- *\n- * @author Vaadin Ltd\n- * @since 1.0\n- */\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.TYPE)\n-@Deprecated\n-public @interface VaadinServletConfiguration {", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0ODk4Mw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546248983", "bodyText": "yes, at least I see mentions of VaadinServletConfiguration is docs.\nvaadin/docs#73", "author": "denis-anisimov", "createdAt": "2020-12-19T15:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNzUxOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNzg2Mw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545807863", "bodyText": "I don't understand why this javadocs was removed, maybe accidental or ?", "author": "pleku", "createdAt": "2020-12-18T12:44:33Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -151,16 +157,6 @@\n         return params;\n     }\n \n-    /**\n-     * Sets to the dev mode properties to the configuration parameters.\n-     * \n-     * @see #getConfigParametersUsingTokenData(JsonObject)\n-     * \n-     * @param params\n-     *            the configuration parameters to set dev mode properties to\n-     * @param buildInfo\n-     *            the token file data\n-     */", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0OTI5Mg==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546249292", "bodyText": "Because of merge.\nMore PRs produces more problems with merge.", "author": "denis-anisimov", "createdAt": "2020-12-19T15:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwNzg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1b4e4bbe1ecb42bae248f7b8c0c67e32e06d8ce6", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\nindex 7da7e28504..19a63cc3ec 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java\n\n@@ -157,6 +157,16 @@ public class AbstractConfigurationFactory implements Serializable {\n         return params;\n     }\n \n+    /**\n+     * Sets to the dev mode properties to the configuration parameters.\n+     * \n+     * @see #getConfigParametersUsingTokenData(JsonObject)\n+     * \n+     * @param params\n+     *            the configuration parameters to set dev mode properties to\n+     * @param buildInfo\n+     *            the token file data\n+     */\n     protected void setDevModePropertiesUsingTokenData(\n             Map<String, String> params, JsonObject buildInfo) {\n         // read dev mode properties from the token and set init parameter only\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMzQ4Mw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545813483", "bodyText": "non-blocking note: I wonder why this needs method to be protected instead of private, wouldn't create be enough to be overridden if needed ?", "author": "pleku", "createdAt": "2020-12-18T12:55:53Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -78,25 +86,55 @@ public VaadinContext getContext() {\n             return context;\n         }\n \n+        @Override\n+        public FallbackChunk getFallbackChunk() {\n+            return fallbackChunk;\n+        }\n+\n     }\n \n     @Override\n     public ApplicationConfiguration create(VaadinContext context) {\n+        Objects.requireNonNull(context);\n         Map<String, String> props = new HashMap<>();\n-        for (final Enumeration<String> e = context.getContextParameterNames(); e\n-                .hasMoreElements();) {\n-            final String name = e.nextElement();\n+        for (final Enumeration<String> paramNames = context\n+                .getContextParameterNames(); paramNames.hasMoreElements();) {\n+            final String name = paramNames.nextElement();\n             props.put(name, context.getContextParameter(name));\n         }\n+        JsonObject buildInfo = null;\n         try {\n-            JsonObject buildInfo = JsonUtil\n-                    .parse(getTokenFileFromClassloader(context));\n-\n-            props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+            String content = getTokenFileContent(props::get);\n+            if (content == null) {\n+                content = getTokenFileFromClassloader(context);\n+            }\n+            buildInfo = content == null ? null : JsonUtil.parse(content);\n+            if (buildInfo != null) {\n+                props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+            }\n         } catch (IOException exception) {\n             throw new UncheckedIOException(exception);\n         }\n-        return new ApplicationConfigurationImpl(context, props);\n+        return doCreate(context, buildInfo == null ? null\n+                : FrontendUtils.readFallbackChunk(buildInfo), props);\n+    }\n+\n+    /**\n+     * Creates application configuration instance based on provided data.\n+     * \n+     * @param context\n+     *            the Vaadin context, not {@code null}\n+     * @param chunk\n+     *            the fallback chunk, may be {@code null}\n+     * @param properties\n+     *            the context parameters, not {@code null}\n+     * @return a new application configuration instance\n+     */\n+    protected ApplicationConfigurationImpl doCreate(VaadinContext context,", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0OTU4NQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546249585", "bodyText": "create contains an impl which you will have to repeat in your subclass and you don't want to do this for sure.\nThe implementation of ItApplicationConfigurationFactory is the answer.", "author": "denis-anisimov", "createdAt": "2020-12-19T15:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgxMzQ4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNTUxNQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545825515", "bodyText": "non-blocking, can be ignored sincethis is not that common except the couple of first test classes in the review:\n        ApplicationConfiguration appConfig = Mockito\n                .mock(ApplicationConfiguration.class);\n        Mockito.when(appConfig.getPropertyNames())\n                .thenReturn(Collections.emptyEnumeration());\n\nCould this bit of code could have been added to be an EmptyMockDeploymentConfiguration(...) or something to have to less c/p things to create this. Or add an utility method for the tests to reuse for creating this with given class & properties", "author": "pleku", "createdAt": "2020-12-18T13:18:58Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/CustomUIClassLoaderTest.java", "diffHunk": "@@ -59,8 +62,12 @@ public void testWithDefaultClassLoader() throws Exception {\n     private static DeploymentConfiguration createConfigurationMock() {\n         Properties properties = new Properties();\n         properties.put(InitParameters.UI_PARAMETER, MyUI.class.getName());\n-        return new DefaultDeploymentConfiguration(CustomUIClassLoaderTest.class,\n-                properties);\n+        ApplicationConfiguration config = Mockito\n+                .mock(ApplicationConfiguration.class);\n+        Mockito.when(config.getPropertyNames())\n+                .thenReturn(Collections.emptyEnumeration());\n+        return new DefaultDeploymentConfiguration(config,\n+                CustomUIClassLoaderTest.class, properties);", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDA3NA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546250074", "bodyText": "In the perfect world the tests should have been written so that they reuse some common code, yes.\nBut in the real world I've been going though many many unrelated tests  and fixed them one by one.\nIt was quite hard to understand what common cases they have.\nI would consider this as a separate task since tests fixing was extremely annoying.\nIt's not that much code which is repeated and it's quite likely that this repetition won't be a repetition during code evolution. Then it will be just double work: unify and then de-unify.", "author": "denis-anisimov", "createdAt": "2020-12-19T15:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyNTUxNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyODcyNA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545828724", "bodyText": "Can you please revert this formatting change and add the missing //@formatter:on and //@formatter:off around it to avoid unnecessary changes in the future ?", "author": "pleku", "createdAt": "2020-12-18T13:25:16Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java", "diffHunk": "@@ -227,53 +232,33 @@ public void should_not_modify_non_MPR_Uidl() throws Exception {\n     }\n \n     private JsonObject generateUidl(boolean withLocation, boolean withHash) {\n-        JsonObject uidl = JsonUtil.parse(\n-            \"{\" +\n-            \"  \\\"syncId\\\": 3,\" +\n-            \"  \\\"clientId\\\": 3,\" +\n-            \"  \\\"changes\\\": [],\" +\n-            \"  \\\"execute\\\": [\" +\n-            \"   [\\\"\\\", \\\"document.title = $0\\\"],\" +\n-            \"   [\\\"\\\", \\\"setTimeout(() => window.history.pushState(null, '', $0))\\\"],\" +\n-            \"   [[0, 16], \\\"___PLACE_FOR_V7_UIDL___\\\", \\\"$0.firstElementChild.setResponse($1)\\\"],\" +\n-            \"   [1,null,[0, 16], \\\"return (function() { this.$server['}p']($0, true, $1)}).apply($2)\\\"]\" +\n-            \"  ],\" +\n-            \"  \\\"timings\\\": []\" +\n-            \"}\");\n-\n-        String v7String =\n-            \"\\\"syncId\\\": 2,\" +\n-            \"\\\"clientId\\\": 2,\" +\n-            \"\\\"changes\\\": [\" +\n-            \"  [],[\\\"___PLACE_FOR_LOCATION_CHANGE___\\\"]\" +\n-            \"],\" +\n-            \"\\\"state\\\": {\" +\n-            \"},\" +\n-            \"\\\"types\\\": {\" +\n-            \"},\" +\n-            \"\\\"hierarchy\\\": {\" +\n-            \"},\" +\n-            \"\\\"rpc\\\": [\" +\n-            \" [],[\" +\n-            \"  \\\"11\\\",\" +\n-            \"  \\\"com.vaadin.shared.extension.javascriptmanager.ExecuteJavaScriptRpc\\\",\" +\n-            \"  \\\"executeJavaScript\\\", [ \\\"___PLACE_FOR_HASH_RPC___\\\" ]\" +\n-            \" ],[\" +\n-            \"  \\\"12\\\",\" +\n-            \"  \\\"com.example.FooRpc\\\",\" +\n-            \"  \\\"barMethod\\\", [{}, {}]\" +\n-            \" ],[]\" +\n-            \"],\" +\n-            \"\\\"meta\\\": {}, \\\"resources\\\": {},\\\"typeMappings\\\": {},\\\"typeInheritanceMap\\\": {}, \\\"timings\\\": []\";\n-\n-        String locationChange =\n-            \"\\\"change\\\", {\\\"pid\\\": \\\"0\\\"}, [\\\"0\\\", {\\\"id\\\": \\\"0\\\", \\\"location\\\": \\\"http://localhost:9998/#!away\\\"}]\";\n-\n-        String hashRpc =\n-             \"window.location.hash = '!away';\";", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDMyMg==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546250322", "bodyText": ":(\nDone", "author": "denis-anisimov", "createdAt": "2020-12-19T15:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyODcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "1b4e4bbe1ecb42bae248f7b8c0c67e32e06d8ce6", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\nindex 15ddc12dc7..84a5af76ad 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/communication/UidlRequestHandlerTest.java\n\n@@ -232,29 +232,54 @@ public class UidlRequestHandlerTest {\n     }\n \n     private JsonObject generateUidl(boolean withLocation, boolean withHash) {\n-        JsonObject uidl = JsonUtil.parse(\"{\" + \"  \\\"syncId\\\": 3,\"\n-                + \"  \\\"clientId\\\": 3,\" + \"  \\\"changes\\\": [],\"\n-                + \"  \\\"execute\\\": [\" + \"   [\\\"\\\", \\\"document.title = $0\\\"],\"\n-                + \"   [\\\"\\\", \\\"setTimeout(() => window.history.pushState(null, '', $0))\\\"],\"\n-                + \"   [[0, 16], \\\"___PLACE_FOR_V7_UIDL___\\\", \\\"$0.firstElementChild.setResponse($1)\\\"],\"\n-                + \"   [1,null,[0, 16], \\\"return (function() { this.$server['}p']($0, true, $1)}).apply($2)\\\"]\"\n-                + \"  ],\" + \"  \\\"timings\\\": []\" + \"}\");\n-\n-        String v7String = \"\\\"syncId\\\": 2,\" + \"\\\"clientId\\\": 2,\"\n-                + \"\\\"changes\\\": [\"\n-                + \"  [],[\\\"___PLACE_FOR_LOCATION_CHANGE___\\\"]\" + \"],\"\n-                + \"\\\"state\\\": {\" + \"},\" + \"\\\"types\\\": {\" + \"},\"\n-                + \"\\\"hierarchy\\\": {\" + \"},\" + \"\\\"rpc\\\": [\" + \" [],[\"\n-                + \"  \\\"11\\\",\"\n-                + \"  \\\"com.vaadin.shared.extension.javascriptmanager.ExecuteJavaScriptRpc\\\",\"\n-                + \"  \\\"executeJavaScript\\\", [ \\\"___PLACE_FOR_HASH_RPC___\\\" ]\"\n-                + \" ],[\" + \"  \\\"12\\\",\" + \"  \\\"com.example.FooRpc\\\",\"\n-                + \"  \\\"barMethod\\\", [{}, {}]\" + \" ],[]\" + \"],\"\n-                + \"\\\"meta\\\": {}, \\\"resources\\\": {},\\\"typeMappings\\\": {},\\\"typeInheritanceMap\\\": {}, \\\"timings\\\": []\";\n-\n-        String locationChange = \"\\\"change\\\", {\\\"pid\\\": \\\"0\\\"}, [\\\"0\\\", {\\\"id\\\": \\\"0\\\", \\\"location\\\": \\\"http://localhost:9998/#!away\\\"}]\";\n-\n-        String hashRpc = \"window.location.hash = '!away';\";\n+\n+        // @formatter:off\n+        JsonObject uidl = JsonUtil.parse(\n+                \"{\" +\n+                \"  \\\"syncId\\\": 3,\" +\n+                \"  \\\"clientId\\\": 3,\" +\n+                \"  \\\"changes\\\": [],\" +\n+                \"  \\\"execute\\\": [\" +\n+                \"   [\\\"\\\", \\\"document.title = $0\\\"],\" +\n+                \"   [\\\"\\\", \\\"setTimeout(() => window.history.pushState(null, '', $0))\\\"],\" +\n+                \"   [[0, 16], \\\"___PLACE_FOR_V7_UIDL___\\\", \\\"$0.firstElementChild.setResponse($1)\\\"],\" +\n+                \"   [1,null,[0, 16], \\\"return (function() { this.$server['}p']($0, true, $1)}).apply($2)\\\"]\" +\n+                \"  ],\" +\n+                \"  \\\"timings\\\": []\" +\n+                \"}\");\n+\n+        String v7String =\n+            \"\\\"syncId\\\": 2,\" +\n+            \"\\\"clientId\\\": 2,\" +\n+            \"\\\"changes\\\": [\" +\n+            \"  [],[\\\"___PLACE_FOR_LOCATION_CHANGE___\\\"]\" +\n+            \"],\" +\n+            \"\\\"state\\\": {\" +\n+            \"},\" +\n+            \"\\\"types\\\": {\" +\n+            \"},\" +\n+            \"\\\"hierarchy\\\": {\" +\n+            \"},\" +\n+            \"\\\"rpc\\\": [\" +\n+            \" [],[\" +\n+            \"  \\\"11\\\",\" +\n+            \"  \\\"com.vaadin.shared.extension.javascriptmanager.ExecuteJavaScriptRpc\\\",\" +\n+            \"  \\\"executeJavaScript\\\", [ \\\"___PLACE_FOR_HASH_RPC___\\\" ]\" +\n+            \" ],[\" +\n+            \"  \\\"12\\\",\" +\n+            \"  \\\"com.example.FooRpc\\\",\" +\n+            \"  \\\"barMethod\\\", [{}, {}]\" +\n+            \" ],[]\" +\n+            \"],\" +\n+            \"\\\"meta\\\": {}, \\\"resources\\\": {},\\\"typeMappings\\\": {},\\\"typeInheritanceMap\\\": {}, \\\"timings\\\": []\";\n+\n+        String locationChange =\n+            \"\\\"change\\\", {\\\"pid\\\": \\\"0\\\"}, [\\\"0\\\", {\\\"id\\\": \\\"0\\\", \\\"location\\\": \\\"http://localhost:9998/#!away\\\"}]\";\n+\n+        String hashRpc =\n+             \"window.location.hash = '!away';\";\n+\n+        // @formatter:on\n \n         if (withLocation) {\n             v7String = v7String.replace(\"\\\"___PLACE_FOR_LOCATION_CHANGE___\\\"\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNTc3OA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545835778", "bodyText": "Why was this cleanup removed ?", "author": "pleku", "createdAt": "2020-12-18T13:38:24Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -128,105 +132,61 @@ public void teardown() throws Exception, SecurityException {\n     @Test\n     public void should_generateOpenApi_when_EndpointPresents()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n-                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            // Configure a folder that has .java classes with valid endpoints\n-            // Not using `src/test/java` because there are invalid endpoint names\n-            // in some tests\n-            File src = new File(\n-                    getClass().getClassLoader().getResource(\"java\").getFile());\n-            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    src.getAbsolutePath());\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            DevModeInitializer devModeInitializer = new DevModeInitializer();\n-            devModeInitializer.onStartup(classes, servletContext);\n-            waitForDevModeServer();\n-            Thread.sleep(200);\n-            Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n-                    generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDU3OA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546250578", "bodyText": "Why would you need a cleanup ?\nShould every unit test do this cleanup ?\nClean up was there because of ugly usage system properties to \"mock\" deployment configuration.\nThere is no any need to set system property because mock is done properly.\nAs a result : no need to do cleanup .", "author": "denis-anisimov", "createdAt": "2020-12-19T15:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNTc3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNTg4Mw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545835883", "bodyText": "Why was this cleanup removed ?", "author": "pleku", "createdAt": "2020-12-18T13:38:35Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -128,105 +132,61 @@ public void teardown() throws Exception, SecurityException {\n     @Test\n     public void should_generateOpenApi_when_EndpointPresents()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n-                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            // Configure a folder that has .java classes with valid endpoints\n-            // Not using `src/test/java` because there are invalid endpoint names\n-            // in some tests\n-            File src = new File(\n-                    getClass().getClassLoader().getResource(\"java\").getFile());\n-            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    src.getAbsolutePath());\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            DevModeInitializer devModeInitializer = new DevModeInitializer();\n-            devModeInitializer.onStartup(classes, servletContext);\n-            waitForDevModeServer();\n-            Thread.sleep(200);\n-            Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n-                    generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();\n-        }\n+                .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        File src = new File(\n+                getClass().getClassLoader().getResource(\"java\").getFile());\n+        Mockito.when(appConfig.getStringProperty(\n+                Mockito.eq(CONNECT_JAVA_SOURCE_FOLDER_TOKEN),\n+                Mockito.anyString())).thenReturn(src.getAbsolutePath());\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        DevModeInitializer devModeInitializer = new DevModeInitializer();\n+        devModeInitializer.process(classes, servletContext);\n+        waitForDevModeServer();\n+        Thread.sleep(200);\n+        Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n+                generatedOpenApiJson.exists());\n     }\n \n     @Test\n     public void should_notGenerateOpenApi_when_EndpointIsNotUsed()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n                 .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-        \n-            System.clearProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            devModeInitializer.onStartup(classes, servletContext);\n-            Assert.assertFalse(\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        devModeInitializer.process(classes, servletContext);\n+        Assert.assertFalse(\n                 \"Should not generate OpenAPI spec if Endpoint is not used.\",\n                 generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();\n-        }", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDYzMw==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546250633", "bodyText": "Cleanup is not needed if you didn't litter.", "author": "denis-anisimov", "createdAt": "2020-12-19T15:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNTg4Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNjA0MA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545836040", "bodyText": "Why was this cleanup removed ?", "author": "pleku", "createdAt": "2020-12-18T13:38:54Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -128,105 +132,61 @@ public void teardown() throws Exception, SecurityException {\n     @Test\n     public void should_generateOpenApi_when_EndpointPresents()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n-                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            // Configure a folder that has .java classes with valid endpoints\n-            // Not using `src/test/java` because there are invalid endpoint names\n-            // in some tests\n-            File src = new File(\n-                    getClass().getClassLoader().getResource(\"java\").getFile());\n-            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    src.getAbsolutePath());\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            DevModeInitializer devModeInitializer = new DevModeInitializer();\n-            devModeInitializer.onStartup(classes, servletContext);\n-            waitForDevModeServer();\n-            Thread.sleep(200);\n-            Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n-                    generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();\n-        }\n+                .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        File src = new File(\n+                getClass().getClassLoader().getResource(\"java\").getFile());\n+        Mockito.when(appConfig.getStringProperty(\n+                Mockito.eq(CONNECT_JAVA_SOURCE_FOLDER_TOKEN),\n+                Mockito.anyString())).thenReturn(src.getAbsolutePath());\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        DevModeInitializer devModeInitializer = new DevModeInitializer();\n+        devModeInitializer.process(classes, servletContext);\n+        waitForDevModeServer();\n+        Thread.sleep(200);\n+        Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n+                generatedOpenApiJson.exists());\n     }\n \n     @Test\n     public void should_notGenerateOpenApi_when_EndpointIsNotUsed()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n                 .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-        \n-            System.clearProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            devModeInitializer.onStartup(classes, servletContext);\n-            Assert.assertFalse(\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        devModeInitializer.process(classes, servletContext);\n+        Assert.assertFalse(\n                 \"Should not generate OpenAPI spec if Endpoint is not used.\",\n                 generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();\n-        }\n     }\n \n     @Test\n     public void should_generateTs_files() throws Exception {\n-        String originalJavaSourceFolder = null;\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            // Configure a folder that has .java classes with valid endpoints\n-            // Not using `src/test/java` because there are invalid endpoint names\n-            // in some tests\n-            File src = new File(\n-                    getClass().getClassLoader().getResource(\"java\").getFile());\n-            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    src.getAbsolutePath());\n-\n-            DevModeInitializer devModeInitializer = new DevModeInitializer();\n-\n-            File ts1 = new File(baseDir,\n-                    DEFAULT_CONNECT_GENERATED_TS_DIR + \"MyEndpoint.ts\");\n-            File ts2 = new File(baseDir, DEFAULT_CONNECT_GENERATED_TS_DIR\n-                    + \"connect-client.default.ts\");\n-\n-            assertFalse(ts1.exists());\n-            assertFalse(ts2.exists());\n-            devModeInitializer.onStartup(classes, servletContext);\n-            waitForDevModeServer();\n-            assertTrue(ts1.exists());\n-            assertTrue(ts2.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-        }", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDY0MA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546250640", "bodyText": "Cleanup is not needed if you didn't litter.", "author": "denis-anisimov", "createdAt": "2020-12-19T15:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzNjA0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzOTQ0OA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r545839448", "bodyText": "This and the next external stats tests are removed but there is no replacement ?", "author": "pleku", "createdAt": "2020-12-18T13:45:13Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java", "diffHunk": "@@ -359,34 +292,35 @@ public void shouldNotThrow_tokenFileFoldersExist() throws Exception {\n     }\n \n     @Test\n-    public void externalStatsFileTrue_predefinedContext() throws Exception {", "originalCommit": "a221f98453baa170f2e2a501bd2dda6764b698c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MTkyNQ==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546251925", "bodyText": "The intention was to move these tests to DefaultApplicationConfigurationFactoryTest  which is the main reader of the\ntoken file (from the classpath ) but then I forgot about this because realized that DeploymentConfigurationFactory also may read the token file based on parameter value.\nSo yes, the tests need to be restored here and in the DefaultApplicationConfigurationFactoryTest", "author": "denis-anisimov", "createdAt": "2020-12-19T15:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzOTQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNjExMA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546406110", "bodyText": "Actually there are some tests in DefaultApplicationConfigurationFactoryTest which read token file", "author": "denis-anisimov", "createdAt": "2020-12-20T17:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgzOTQ0OA=="}], "type": "inlineReview", "revised_code": {"commit": "c72c9726852c515bc2746317990de0dca59cd763", "chunk": "diff --git a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\nindex 8985493977..f4f15d733d 100644\n--- a/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n+++ b/flow-server/src/test/java/com/vaadin/flow/server/DeploymentConfigurationFactoryTest.java\n\n@@ -294,7 +283,7 @@ public class DeploymentConfigurationFactoryTest {\n     @Test\n     public void createInitParameters_valuesFromContextAreIgnored_valuesAreTakenFromservletConfig()\n             throws Exception {\n-        TestDeploymentConfigurationFactory factory = new TestDeploymentConfigurationFactory();\n+        DeploymentConfigurationFactory factory = new DeploymentConfigurationFactory();\n \n         VaadinContext context = Mockito.mock(VaadinContext.class);\n         VaadinConfig config = Mockito.mock(VaadinConfig.class);\n"}}, {"oid": "83850593eba38a8ae131bf595e0a69461e3f49c8", "url": "https://github.com/vaadin/flow/commit/83850593eba38a8ae131bf595e0a69461e3f49c8", "message": "fix: SQ fixes", "committedDate": "2020-12-19T14:20:00Z", "type": "commit"}, {"oid": "638e0c86d5bfbf1738743be05cd96ae9777125a6", "url": "https://github.com/vaadin/flow/commit/638e0c86d5bfbf1738743be05cd96ae9777125a6", "message": "fix: get rid of exception which is never thrown anymore", "committedDate": "2020-12-19T14:27:58Z", "type": "commit"}, {"oid": "1b4e4bbe1ecb42bae248f7b8c0c67e32e06d8ce6", "url": "https://github.com/vaadin/flow/commit/1b4e4bbe1ecb42bae248f7b8c0c67e32e06d8ce6", "message": "fix: review comments", "committedDate": "2020-12-19T15:44:58Z", "type": "commit"}, {"oid": "c72c9726852c515bc2746317990de0dca59cd763", "url": "https://github.com/vaadin/flow/commit/c72c9726852c515bc2746317990de0dca59cd763", "message": "test: extend unit test with checking token file reading", "committedDate": "2020-12-21T06:56:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5NTU4OA==", "url": "https://github.com/vaadin/flow/pull/9642#discussion_r546595588", "bodyText": "Remove the declaration of thrown exception 'javax.servlet.ServletException', as it cannot be thrown from method's body.", "author": "vaadin-bot", "createdAt": "2020-12-21T09:22:55Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java", "diffHunk": "@@ -180,14 +181,10 @@ public static VaadinServlet getCurrent() {\n      */\n     protected DeploymentConfiguration createDeploymentConfiguration()\n             throws ServletException {", "originalCommit": "c72c9726852c515bc2746317990de0dca59cd763", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "0d98d6de6372af550bcc18a2e2b331f2e5545634", "url": "https://github.com/vaadin/flow/commit/0d98d6de6372af550bcc18a2e2b331f2e5545634", "message": "test: add a test to check that every method has its own impl", "committedDate": "2020-12-21T09:26:43Z", "type": "commit"}]}