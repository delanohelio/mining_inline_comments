{"pr_number": 7647, "pr_title": "Don't block DevModeInitializer but spawn a thread where all long running tasks are executed", "pr_createdAt": "2020-02-21T14:24:19Z", "pr_url": "https://github.com/vaadin/flow/pull/7647", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzE2Nw==", "url": "https://github.com/vaadin/flow/pull/7647#discussion_r382613167", "bodyText": "Make \"devServerStartFuture\" transient or serializable.", "author": "vaadin-bot", "createdAt": "2020-02-21T14:34:22Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -99,129 +102,34 @@\n \n     private boolean notified = false;\n \n-    private String failedOutput;\n+    private volatile String failedOutput;\n \n     /**\n      * The local installation path of the webpack-dev-server node script.\n      */\n     public static final String WEBPACK_SERVER = \"node_modules/webpack-dev-server/bin/webpack-dev-server.js\";\n \n-    private int port;\n-    private Process webpackProcess;\n+    private volatile int port;\n+    private final AtomicReference<Process> webpackProcess = new AtomicReference<>();\n     private final boolean reuseDevServer;\n-    private DevServerWatchDog watchDog;\n+    private final AtomicReference<DevServerWatchDog> watchDog = new AtomicReference<>();\n \n     private StringBuilder cumulativeOutput = new StringBuilder();\n \n+    private final CompletableFuture<Void> devServerStartFuture;", "originalCommit": "39edc3cb9c00e383b7cf5ba2e69e68016f28e3ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea20aa0db1309a0876dcdb662307d1191ec5dba", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\nindex d6820b71b7..8dffc88445 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n\n@@ -116,20 +117,121 @@ public final class DevModeHandler implements RequestHandler {\n \n     private StringBuilder cumulativeOutput = new StringBuilder();\n \n-    private final CompletableFuture<Void> devServerStartFuture;\n+    private final AtomicReference<Throwable> executionException = new AtomicReference<>();\n+    private final AtomicBoolean devServerStarted = new AtomicBoolean();\n \n     private DevModeHandler(DeploymentConfiguration config, int runningPort,\n-            File npmFolder, CompletableFuture<Void> waitFor) {\n+            File npmFolder, File webpack, File webpackConfig,\n+            CompletableFuture<Void> waitFor) {\n \n         port = runningPort;\n         reuseDevServer = config.reuseDevServer();\n \n-        devServerStartFuture = waitFor.whenCompleteAsync((value, exception) -> {\n-            // this will throw an exception if an exception has been thrown by\n-            // the waitFor task\n-            waitFor.getNow(null);\n-            runOnFutureComplete(config, npmFolder);\n-        });\n+        waitFor.whenCompleteAsync((value, exception) -> {\n+            try {\n+                runOnFutureComplete(value, exception, config, npmFolder,\n+                        webpack, webpackConfig);\n+            } finally {\n+                devServerStarted.set(true);\n+            }\n+<<<<<<< Upstream, based on master\n+            throw new IllegalStateException(format(\n+                    \"webpack-dev-server port '%d' is defined but it's not working properly\",\n+                    port));\n+        }\n+\n+        long start = System.nanoTime();\n+        getLogger().info(\"Starting webpack-dev-server\");\n+\n+        watchDog = new DevServerWatchDog();\n+\n+        // Look for a free port\n+        port = getFreePort();\n+\n+        ProcessBuilder processBuilder = new ProcessBuilder()\n+                .directory(npmFolder);\n+\n+        validateNodeAndNpmVersion(npmFolder.getAbsolutePath());\n+\n+        boolean useHomeNodeExec = config.getBooleanProperty(\n+                Constants.REQUIRE_HOME_NODE_EXECUTABLE, false);\n+\n+        String nodeExec = null;\n+        if (useHomeNodeExec) {\n+            nodeExec = FrontendUtils\n+                    .ensureNodeExecutableInHome(npmFolder.getAbsolutePath());\n+        } else {\n+            nodeExec = getNodeExecutable(npmFolder.getAbsolutePath());\n+        }\n+\n+        List<String> command = new ArrayList<>();\n+        command.add(nodeExec);\n+        command.add(webpack.getAbsolutePath());\n+        command.add(\"--config\");\n+        command.add(webpackConfig.getAbsolutePath());\n+        command.add(\"--port\");\n+        command.add(String.valueOf(port));\n+        command.add(\"--watchDogPort=\" + watchDog.getWatchDogPort());\n+        command.addAll(Arrays.asList(config\n+                .getStringProperty(SERVLET_PARAMETER_DEVMODE_WEBPACK_OPTIONS,\n+                        \"-d --inline=false --progress --colors\")\n+                .split(\" +\")));\n+\n+        console(GREEN, START);\n+        console(YELLOW, commandToString(npmFolder.getAbsolutePath(), command));\n+\n+        processBuilder.command(command);\n+        try {\n+            webpackProcess = processBuilder\n+                    .redirectError(ProcessBuilder.Redirect.PIPE)\n+                    .redirectErrorStream(true).start();\n+\n+            // We only can save the webpackProcess reference the first time that\n+            // the DevModeHandler is created. There is no way to store\n+            // it in the servlet container, and we do not want to save it in the\n+            // global JVM.\n+            // We instruct the JVM to stop the webpack-dev-server daemon when\n+            // the JVM stops, to avoid leaving daemons running in the system.\n+            // NOTE: that in the corner case that the JVM crashes or it is\n+            // killed\n+            // the daemon will be kept running. But anyways it will also happens\n+            // if the system was configured to be stop the daemon when the\n+            // servlet context is destroyed.\n+            Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n+\n+            Pattern succeed = Pattern.compile(config.getStringProperty(\n+                    SERVLET_PARAMETER_DEVMODE_WEBPACK_SUCCESS_PATTERN,\n+                    DEFAULT_OUTPUT_PATTERN));\n+\n+            Pattern failure = Pattern.compile(config.getStringProperty(\n+                    SERVLET_PARAMETER_DEVMODE_WEBPACK_ERROR_PATTERN,\n+                    DEFAULT_ERROR_PATTERN));\n+\n+            logStream(webpackProcess.getInputStream(), succeed, failure);\n+\n+            getLogger().info(LOG_START);\n+            synchronized (this) {\n+                this.wait(Integer.parseInt(config.getStringProperty( // NOSONAR\n+                        SERVLET_PARAMETER_DEVMODE_WEBPACK_TIMEOUT,\n+                        DEFAULT_TIMEOUT_FOR_PATTERN)));\n+            }\n+\n+            if (!webpackProcess.isAlive()) {\n+                throw new IllegalStateException(\"Webpack exited prematurely\");\n+            }\n+\n+            long ms = (System.nanoTime() - start) / 1000000;\n+            getLogger().info(LOG_END, ms);\n+\n+        } catch (IOException | InterruptedException e) {\n+            getLogger().error(\"Failed to start the webpack process\", e);\n+        }\n+\n+        saveRunningDevServerPort();\n+=======\n+        });>>>>>>>2721ec 3\n+\n+    Run (p)npm install and webpack dev server in a separate thread without blocking servlet container initializer\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzE4Mg==", "url": "https://github.com/vaadin/flow/pull/7647#discussion_r382613182", "bodyText": "Null passed for non-null parameter of java.util.concurrent.CompletableFuture.getNow(Object) in com.vaadin.flow.server.DevModeHandler.handleRequest(VaadinSession, VaadinRequest, VaadinResponse)", "author": "vaadin-bot", "createdAt": "2020-02-21T14:34:23Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -271,45 +183,44 @@ public static DevModeHandler getDevModeHandler() {\n         return atomicHandler.get();\n     }\n \n+    @Override\n+    public boolean handleRequest(VaadinSession session, VaadinRequest request,\n+            VaadinResponse response) throws IOException {\n+        if (devServerStartFuture.isDone()) {\n+            try {\n+                devServerStartFuture.getNow(null);", "originalCommit": "39edc3cb9c00e383b7cf5ba2e69e68016f28e3ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ea20aa0db1309a0876dcdb662307d1191ec5dba", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\nindex d6820b71b7..8dffc88445 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n\n@@ -186,41 +285,64 @@ public final class DevModeHandler implements RequestHandler {\n     @Override\n     public boolean handleRequest(VaadinSession session, VaadinRequest request,\n             VaadinResponse response) throws IOException {\n-        if (devServerStartFuture.isDone()) {\n-            try {\n-                devServerStartFuture.getNow(null);\n-            } catch (CompletionException exception) {\n-                throw getCause(exception);\n-            }\n+        Throwable throwable = executionException.get();\n+        if (throwable instanceof RuntimeException) {\n+            throw (RuntimeException) throwable;\n+        } else if (throwable != null) {\n+            throw new IllegalStateException(throwable);\n+        }\n+        if (devServerStarted.get()) {\n             return false;\n         } else {\n-            InputStream inputStream = DevModeHandler.class\n-                    .getResourceAsStream(\"dev-mode-not-ready.html\");\n-            IOUtils.copy(inputStream, response.getOutputStream());\n+            IOUtils.write(\"<html>\"\n+                    + \"  <head><meta http-equiv='refresh' content='3'></head>\"\n+                    + \"  <body> The webpack dev server has not yet started. Please wait... </body>\"\n+                    + \"</html>\", response.getOutputStream(),\n+                    StandardCharsets.UTF_8);\n             return true;\n         }\n     }\n \n-    private RuntimeException getCause(Throwable exception) {\n-        if (exception instanceof CompletionException) {\n-            return getCause(exception.getCause());\n-        } else if (exception instanceof RuntimeException) {\n-            return (RuntimeException) exception;\n-        } else {\n-            throw new IllegalStateException(exception);\n-        }\n-    }\n-\n     private static DevModeHandler createInstance(int runningPort,\n             DeploymentConfiguration configuration, File npmFolder,\n             CompletableFuture<Void> waitFor) {\n \n+        File webpack = null;\n+        File webpackConfig = null;\n         if (runningPort == 0) {\n             runningPort = getRunningDevServerPort();\n         }\n \n+        // Skip checks if we have a webpack-dev-server already running\n+        if (runningPort == 0) {\n+            webpack = new File(npmFolder, WEBPACK_SERVER);\n+            webpackConfig = new File(npmFolder, WEBPACK_CONFIG);\n+            if (!npmFolder.exists()) {\n+                getLogger().warn(\n+                        \"Instance not created because cannot change to '{}'\",\n+                        npmFolder);\n+                return null;\n+            }\n+            if (!webpack.canExecute()) {\n+                getLogger().warn(\n+                        \"Instance not created because cannot execute '{}'. Did you run `npm install`\",\n+                        webpack);\n+                return null;\n+            } else if (!webpack.exists()) {\n+                getLogger().warn(\n+                        \"Instance not created because file '{}' doesn't exist. Did you run `npm install`\",\n+                        webpack);\n+                return null;\n+            }\n+            if (!webpackConfig.canRead()) {\n+                getLogger().warn(\n+                        \"Instance not created because there is not webpack configuration '{}'\",\n+                        webpackConfig);\n+                return null;\n+            }\n+        }\n         return new DevModeHandler(configuration, runningPort, npmFolder,\n-                waitFor);\n+                webpack, webpackConfig, waitFor);\n     }\n \n     /**\n"}}, {"oid": "2ea20aa0db1309a0876dcdb662307d1191ec5dba", "url": "https://github.com/vaadin/flow/commit/2ea20aa0db1309a0876dcdb662307d1191ec5dba", "message": "Run (p)npm install and webpack dev server in a separate thread without\nblocking servlet container initializer", "committedDate": "2020-02-21T15:14:42Z", "type": "commit"}, {"oid": "3db3aa04876bbce9ae9f5b2e02e31c2f61eaf6e3", "url": "https://github.com/vaadin/flow/commit/3db3aa04876bbce9ae9f5b2e02e31c2f61eaf6e3", "message": "Read a file from the classpath instead of hardcoding the content.", "committedDate": "2020-02-21T15:14:42Z", "type": "commit"}, {"oid": "fe3e9e36561d13d1225c3a52a2053b5a9d682f8c", "url": "https://github.com/vaadin/flow/commit/fe3e9e36561d13d1225c3a52a2053b5a9d682f8c", "message": "Update unit tests and rewrite exception throwing.", "committedDate": "2020-02-21T15:14:42Z", "type": "commit"}, {"oid": "4fab88d5ecb2fc2986fc2530e76a0b72f531e45a", "url": "https://github.com/vaadin/flow/commit/4fab88d5ecb2fc2986fc2530e76a0b72f531e45a", "message": "Fixes after rebase", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "e02d39bad92054b222625c8e0a7f87ba362b2e36", "url": "https://github.com/vaadin/flow/commit/e02d39bad92054b222625c8e0a7f87ba362b2e36", "message": "Add lost file after rebase back.\nThank you git so much...", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "b5391d1ef8a067783038e7303bbb3d8c83dd47c0", "url": "https://github.com/vaadin/flow/commit/b5391d1ef8a067783038e7303bbb3d8c83dd47c0", "message": "Revert unneeded bootstrap handler changes.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "f640ccfd13f67bcb31d7f9f9e67819d9dfae17b1", "url": "https://github.com/vaadin/flow/commit/f640ccfd13f67bcb31d7f9f9e67819d9dfae17b1", "message": "Remove TODO", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "b6a4103b9c63bf23d1acae833645a2fbaabe8ae0", "url": "https://github.com/vaadin/flow/commit/b6a4103b9c63bf23d1acae833645a2fbaabe8ae0", "message": "Revert code which was reverted by git rebase.\nThank you git one one more time.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "4287fe8d219a80802318ac26399acc761b2cef75", "url": "https://github.com/vaadin/flow/commit/4287fe8d219a80802318ac26399acc761b2cef75", "message": "Fix tests and update the code.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "22c79c9fa0ca422fb4c37a8d7c36040d56e6e37d", "url": "https://github.com/vaadin/flow/commit/22c79c9fa0ca422fb4c37a8d7c36040d56e6e37d", "message": "Fix pnpm unit test in case of globally installed pnpm.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "a87a8d3c3464969f19e329c2027445d683e0ec50", "url": "https://github.com/vaadin/flow/commit/a87a8d3c3464969f19e329c2027445d683e0ec50", "message": "Correct unit tests to expect exception instead of null handler.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "5f823f001a829e2e3f670e52fc8e518ace6dd7f2", "url": "https://github.com/vaadin/flow/commit/5f823f001a829e2e3f670e52fc8e518ace6dd7f2", "message": "Update ITs to wait until dev server is started", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "4b97ea779d71edad3f94790d8c3bbfefbaad3d69", "url": "https://github.com/vaadin/flow/commit/4b97ea779d71edad3f94790d8c3bbfefbaad3d69", "message": "Correct waitForDevServer and add javadocs for dev mode handler CTOR", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "22ab685d1400321e7f3723ac29ecb330dd0da436", "url": "https://github.com/vaadin/flow/commit/22ab685d1400321e7f3723ac29ecb330dd0da436", "message": "Disable flow-client tests which are broken.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "2d3c67caa0d9f2997268f3922f08fb9bd93af827", "url": "https://github.com/vaadin/flow/commit/2d3c67caa0d9f2997268f3922f08fb9bd93af827", "message": "Use the correct waitForDevServer method impl", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "dfed29a1e7a5a53c53a168ee4e1aa9bb0c68eb43", "url": "https://github.com/vaadin/flow/commit/dfed29a1e7a5a53c53a168ee4e1aa9bb0c68eb43", "message": "Use find() instead of match()", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "528e2940868b156bacaf57ba41440107e592cebd", "url": "https://github.com/vaadin/flow/commit/528e2940868b156bacaf57ba41440107e592cebd", "message": "Correct log message in the dev mode handler and startup performance test", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "efcda61d2072cb6283e5fb76439c1c280add3ea7", "url": "https://github.com/vaadin/flow/commit/efcda61d2072cb6283e5fb76439c1c280add3ea7", "message": "More corrections.", "committedDate": "2020-02-21T15:15:25Z", "type": "commit"}, {"oid": "b7b02d244c007f8e4fbf81f1f855c0d408f756aa", "url": "https://github.com/vaadin/flow/commit/b7b02d244c007f8e4fbf81f1f855c0d408f756aa", "message": "1000th attempt to merge with master", "committedDate": "2020-02-21T15:19:19Z", "type": "commit"}, {"oid": "bb5a404674b267ffbdf4e6c14a9e6a4e4da07a62", "url": "https://github.com/vaadin/flow/commit/bb5a404674b267ffbdf4e6c14a9e6a4e4da07a62", "message": "Try to enable flow-client tests back.", "committedDate": "2020-02-21T15:22:23Z", "type": "commit"}, {"oid": "bb5a404674b267ffbdf4e6c14a9e6a4e4da07a62", "url": "https://github.com/vaadin/flow/commit/bb5a404674b267ffbdf4e6c14a9e6a4e4da07a62", "message": "Try to enable flow-client tests back.", "committedDate": "2020-02-21T15:22:23Z", "type": "forcePushed"}, {"oid": "d57961470bd32de9be112a7c588192fa3258b251", "url": "https://github.com/vaadin/flow/commit/d57961470bd32de9be112a7c588192fa3258b251", "message": "Fix SQ complains.", "committedDate": "2020-02-22T14:35:27Z", "type": "commit"}, {"oid": "f17c3fc5335f92e380520828171d87171b886389", "url": "https://github.com/vaadin/flow/commit/f17c3fc5335f92e380520828171d87171b886389", "message": "Don't throw an exception on getCause but just return it", "committedDate": "2020-02-22T16:06:55Z", "type": "commit"}, {"oid": "749e81206e42b62ae6b3d0341a5245af8aeed410", "url": "https://github.com/vaadin/flow/commit/749e81206e42b62ae6b3d0341a5245af8aeed410", "message": "Check that an exception in the prepare tasks ((p)npm install) is\nrethrown on request handling.", "committedDate": "2020-02-24T06:36:24Z", "type": "commit"}, {"oid": "6dc94b5dd3003d45f659c0be017e68445addf456", "url": "https://github.com/vaadin/flow/commit/6dc94b5dd3003d45f659c0be017e68445addf456", "message": "Remove extra javadocs", "committedDate": "2020-02-24T07:29:11Z", "type": "commit"}, {"oid": "048f624c75339739f311cf943b3715efbf20d66d", "url": "https://github.com/vaadin/flow/commit/048f624c75339739f311cf943b3715efbf20d66d", "message": "Fixes based on review", "committedDate": "2020-02-24T09:29:51Z", "type": "commit"}, {"oid": "c4de3f16399162993ddc8f2ee3abd98b4eb77094", "url": "https://github.com/vaadin/flow/commit/c4de3f16399162993ddc8f2ee3abd98b4eb77094", "message": "Schedule page reload without onload", "committedDate": "2020-02-24T10:27:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIwODYyNg==", "url": "https://github.com/vaadin/flow/pull/7647#discussion_r383208626", "bodyText": "Possible null pointer dereference in com.vaadin.flow.server.frontend.TaskRunNpmInstall.cleanUp() due to return value of called method", "author": "vaadin-bot", "createdAt": "2020-02-24T11:17:56Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java", "diffHunk": "@@ -269,8 +269,16 @@ private void cleanUp() throws IOException {\n         File modulesYaml = new File(packageUpdater.nodeModulesFolder,\n                 MODULES_YAML);\n         boolean hasModulesYaml = modulesYaml.exists() && modulesYaml.isFile();\n-        if (hasModulesYaml != enablePnpm) {\n+        if (!enablePnpm && hasModulesYaml) {\n             FileUtils.forceDelete(packageUpdater.nodeModulesFolder);\n+        } else if (enablePnpm && !hasModulesYaml) {\n+            // presence of .staging dir with a \"pnpm-*\" folder means that pnpm\n+            // download is in progress, don't remove anything in this case\n+            File staging = new File(\".staging\");\n+            if (!staging.isDirectory() || staging.listFiles(", "originalCommit": "cfca85e8c26a8486181641cd917875e5af3cc1e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7fbaeccb8fbb7daef7c6277203425241a4354601", "chunk": "diff --git a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\nindex 4ba3e9683c..4febaac4d1 100644\n--- a/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n+++ b/flow-server/src/main/java/com/vaadin/flow/server/frontend/TaskRunNpmInstall.java\n\n@@ -274,7 +274,8 @@ public class TaskRunNpmInstall implements FallibleCommand {\n         } else if (enablePnpm && !hasModulesYaml) {\n             // presence of .staging dir with a \"pnpm-*\" folder means that pnpm\n             // download is in progress, don't remove anything in this case\n-            File staging = new File(\".staging\");\n+            File staging = new File(packageUpdater.nodeModulesFolder,\n+                    \".staging\");\n             if (!staging.isDirectory() || staging.listFiles(\n                     (dir, name) -> name.startsWith(\"pnpm-\")).length == 0) {\n                 FileUtils.forceDelete(packageUpdater.nodeModulesFolder);\n"}}, {"oid": "7fbaeccb8fbb7daef7c6277203425241a4354601", "url": "https://github.com/vaadin/flow/commit/7fbaeccb8fbb7daef7c6277203425241a4354601", "message": "Don't remove node_modules if pnpm is enabled and it's downloading\nresources.", "committedDate": "2020-02-24T11:45:24Z", "type": "commit"}, {"oid": "7fbaeccb8fbb7daef7c6277203425241a4354601", "url": "https://github.com/vaadin/flow/commit/7fbaeccb8fbb7daef7c6277203425241a4354601", "message": "Don't remove node_modules if pnpm is enabled and it's downloading\nresources.", "committedDate": "2020-02-24T11:45:24Z", "type": "forcePushed"}]}