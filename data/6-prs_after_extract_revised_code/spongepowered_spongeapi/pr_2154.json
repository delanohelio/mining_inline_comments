{"pr_number": 2154, "pr_title": "Add marker for classes that should not be stored", "pr_createdAt": "2020-07-04T13:30:56Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2154", "timeline": [{"oid": "c1547d89e44f5e04a46c1d89acba0473af8e0d22", "url": "https://github.com/SpongePowered/SpongeAPI/commit/c1547d89e44f5e04a46c1d89acba0473af8e0d22", "message": "Add marker for classes that should not be stored", "committedDate": "2020-07-04T13:29:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc3NTgyNA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2154#discussion_r449775824", "bodyText": "Add @Documented as this is a documentation marker so should appear in the javadocs and is considered part of the public contract.\nI'd change the javadocs on this too to give developers a hint on what (not) to do, something like:\nObjects of types that are annotated with this method <strong>must not</strong> be stored as they may be invalidated at any time.\n\n<p>In particular, you should not:</p>\n\n<ul>\n    <li>Store annotated objects on a field</li>\n    <li>Cache annotated objects in any collection</li>\n</ul>\n\n<p>Doing so may result in memory leaks and/or result in you operating on a stale object, meaning your operations will fail, often silently.</p>\n\n<p>Where objects have identifiers (usually a {@link UUID} or name), you should store the identifiers instead, and use these to get the required object from the API when needed.</p>", "author": "dualspiral", "createdAt": "2020-07-04T14:01:41Z", "path": "src/main/java/org/spongepowered/api/util/annotation/DoNotStore.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.util.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * The instance of the class to which this annotation is applied cannot be stored.\n+ *\n+ * The annotation is applied to classes to indicate that their instances should not\n+ * be stored in a field or top-level variable.\n+ * The annotation is inherited.\n+ */\n+@Inherited\n+@Target(ElementType.TYPE)\n+public @interface DoNotStore {", "originalCommit": "c1547d89e44f5e04a46c1d89acba0473af8e0d22", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aae8f52209830d48d45d81ed5dc42e05f606db34", "chunk": "diff --git a/src/main/java/org/spongepowered/api/util/annotation/DoNotStore.java b/src/main/java/org/spongepowered/api/util/annotation/DoNotStore.java\nindex f0c05759f..743aeb424 100644\n--- a/src/main/java/org/spongepowered/api/util/annotation/DoNotStore.java\n+++ b/src/main/java/org/spongepowered/api/util/annotation/DoNotStore.java\n\n@@ -24,17 +24,27 @@\n  */\n package org.spongepowered.api.util.annotation;\n \n+import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n import java.lang.annotation.Inherited;\n import java.lang.annotation.Target;\n \n /**\n- * The instance of the class to which this annotation is applied cannot be stored.\n+ * <p>In particular, you should not:</p>\n  *\n- * The annotation is applied to classes to indicate that their instances should not\n- * be stored in a field or top-level variable.\n- * The annotation is inherited.\n+ * <ul>\n+ *     <li>Store annotated objects on a field</li>\n+ *     <li>Cache annotated objects in any collection</li>\n+ * </ul>\n+ *\n+ * <p>Doing so may result in memory leaks and/or result in you operating on a stale object,\n+ * meaning your operations will fail, often silently.</p>\n+ *\n+ * <p>Where objects have identifiers (usually a {@link java.util.UUID} or name),\n+ * you should store the identifiers instead, and use these to get the required object\n+ * from the API when needed.</p>\n  */\n+@Documented\n @Inherited\n @Target(ElementType.TYPE)\n public @interface DoNotStore {\n"}}, {"oid": "aae8f52209830d48d45d81ed5dc42e05f606db34", "url": "https://github.com/SpongePowered/SpongeAPI/commit/aae8f52209830d48d45d81ed5dc42e05f606db34", "message": "Add Documented annotation and update javadoc", "committedDate": "2020-07-04T14:11:52Z", "type": "commit"}, {"oid": "9bbc4bffa63142ab37172fbb0c639b55c223a0ef", "url": "https://github.com/SpongePowered/SpongeAPI/commit/9bbc4bffa63142ab37172fbb0c639b55c223a0ef", "message": "Annotate more classes with DoNotStore", "committedDate": "2020-07-04T14:12:43Z", "type": "commit"}]}