{"pr_number": 2085, "pr_title": "Add Entity Attribute API [Redux of #1428] [API-8]", "pr_createdAt": "2020-02-02T20:20:58Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2085", "timeline": [{"oid": "e920e00098d3110601c6e81b6df6a7186e089107", "url": "https://github.com/SpongePowered/SpongeAPI/commit/e920e00098d3110601c6e81b6df6a7186e089107", "message": "Add Entity Attribute api", "committedDate": "2020-02-03T00:50:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTcxMw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r373929713", "bodyText": "Should we expose AttributeOperation as a DoubleFunction as well? Or a DoubleBiFunction of sorts?", "author": "gabizou", "createdAt": "2020-02-03T05:44:25Z", "path": "src/main/java/org/spongepowered/api/entity/attribute/type/AttributeOperation.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.entity.attribute.type;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.entity.attribute.Attribute;\n+import org.spongepowered.api.util.annotation.CatalogedBy;\n+\n+/**\n+ * Represents an operation which can be applied to transform the value of an\n+ * {@link Attribute}.\n+ */\n+@CatalogedBy(AttributeOperations.class)\n+public interface AttributeOperation extends CatalogType {", "originalCommit": "e920e00098d3110601c6e81b6df6a7186e089107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODYxNg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r375048616", "bodyText": "Looking at the code again mojang seems to store all the modifiers by their operations within the EntityAttributeInstance [Attribute in API] (sorry just like using yarn names).\nIt could be done but since the game seems to calculate from ADD -> MULTIPLY_BASE -> MULTIPLY_TOTAL the predictions might be different depending on which operation is being added into the modifier and where it sits within the list of Modifiers on the attribute.", "author": "i509VCB", "createdAt": "2020-02-05T03:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTcxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d8ea9656728f3655823d3a55346c36463922f194", "chunk": "diff --git a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeOperation.java b/src/main/java/org/spongepowered/api/entity/attribute/AttributeOperation.java\nsimilarity index 93%\nrename from src/main/java/org/spongepowered/api/entity/attribute/type/AttributeOperation.java\nrename to src/main/java/org/spongepowered/api/entity/attribute/AttributeOperation.java\nindex 99047f868..8c4262f56 100644\n--- a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeOperation.java\n+++ b/src/main/java/org/spongepowered/api/entity/attribute/AttributeOperation.java\n\n@@ -22,10 +22,9 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.api.entity.attribute.type;\n+package org.spongepowered.api.entity.attribute;\n \n import org.spongepowered.api.CatalogType;\n-import org.spongepowered.api.entity.attribute.Attribute;\n import org.spongepowered.api.util.annotation.CatalogedBy;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyOTk4OA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r373929988", "bodyText": "I'd rather the fields be prefixed with their intended targets rather than being nested.\nI get that AttributeTypes.Horse.JUMP_STRENGTH is a nice way of writing it, but it's also a little cluttered looking at it without the prefix (otherwise, we'd be stylistically needing to do the same treatment to Keys etc.", "author": "gabizou", "createdAt": "2020-02-03T05:46:20Z", "path": "src/main/java/org/spongepowered/api/entity/attribute/type/AttributeTypes.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.entity.attribute.type;\n+\n+import org.spongepowered.api.Sponge;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * An enumeration of {@link AttributeType}s.\n+ */\n+public final class AttributeTypes {\n+\n+    // SORTFIELDS:ON\n+\n+    public static final Supplier<RangedAttributeType> ARMOR = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"ARMOR\");\n+\n+    public static final Supplier<RangedAttributeType> ARMOR_TOUGHNESS = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"ARMOR_TOUGHNESS\");\n+\n+    public static final Supplier<RangedAttributeType> ATTACK_DAMAGE = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"ATTACK_DAMAGE\");\n+\n+    public static final Supplier<RangedAttributeType> ATTACK_SPEED = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"ATTACK_SPEED\");\n+\n+    public static final Supplier<RangedAttributeType> ATTACK_KNOCKBACK = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"ATTACK_KNOCKBACK\");\n+\n+    public static final Supplier<RangedAttributeType> FOLLOW_RANGE = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"FOLLOW_RANGE\");\n+\n+    public static final Supplier<RangedAttributeType> KNOCKBACK_RESISTANCE = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"KNOCKBACK_RESISTANCE\");\n+\n+    public static final Supplier<RangedAttributeType> LUCK = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"LUCK\");\n+\n+    public static final Supplier<RangedAttributeType> MAX_HEALTH = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"MAX_HEALTH\");\n+\n+    public static final Supplier<RangedAttributeType> MOVEMENT_SPEED = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"MOVEMENT_SPEED\");\n+\n+    public static final class Horse {", "originalCommit": "e920e00098d3110601c6e81b6df6a7186e089107", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8ea9656728f3655823d3a55346c36463922f194", "chunk": "diff --git a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeTypes.java b/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeTypes.java\nindex 9b61bdd4e..06616d16f 100644\n--- a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeTypes.java\n+++ b/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeTypes.java\n\n@@ -47,6 +47,8 @@\n \n     public static final Supplier<RangedAttributeType> FOLLOW_RANGE = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"FOLLOW_RANGE\");\n \n+    public static final Supplier<RangedAttributeType> HORSE_JUMP_STRENGTH = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"HORSE_JUMP_STRENGTH\");\n+\n     public static final Supplier<RangedAttributeType> KNOCKBACK_RESISTANCE = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"KNOCKBACK_RESISTANCE\");\n \n     public static final Supplier<RangedAttributeType> LUCK = Sponge.getRegistry().getCatalogRegistry().provideSupplier(RangedAttributeType.class, \"LUCK\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDE4Nw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r373930187", "bodyText": "Would it make sense to expose what the AttributeType's related Key is?", "author": "gabizou", "createdAt": "2020-02-03T05:47:23Z", "path": "src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.entity.attribute.type;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.util.annotation.CatalogedBy;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Represents an attribute type that can apply effects or modify traits related to an entity.\n+ */\n+@CatalogedBy(AttributeTypes.class)\n+public interface AttributeType extends CatalogType {\n+\n+    Optional<AttributeType> getParent();", "originalCommit": "e920e00098d3110601c6e81b6df6a7186e089107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MjI4Mw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r375052283", "bodyText": "Could you possibly elaborate on this idea?", "author": "i509VCB", "createdAt": "2020-02-05T04:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cedf3bf5995c3843f4be8a86609d2b731933df73", "chunk": "diff --git a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java b/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java\nindex 00e3016ef..1e50ee6ce 100644\n--- a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java\n+++ b/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java\n\n@@ -25,6 +25,8 @@\n package org.spongepowered.api.entity.attribute.type;\n \n import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.entity.attribute.AttributeModifier;\n import org.spongepowered.api.util.annotation.CatalogedBy;\n \n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDI4Mg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r373930282", "bodyText": "Need to overload with both as optionally suppliers (two added methods).", "author": "gabizou", "createdAt": "2020-02-03T05:48:02Z", "path": "src/main/java/org/spongepowered/api/item/inventory/ItemStack.java", "diffHunk": "@@ -164,6 +170,39 @@ static ItemStack empty() {\n      */\n     boolean isEmpty();\n \n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    default Collection<AttributeModifier> getAttributeModifiers(Supplier<? extends AttributeType> attributeType, Supplier<? extends EquipmentType> equipmentType) {", "originalCommit": "e920e00098d3110601c6e81b6df6a7186e089107", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8ea9656728f3655823d3a55346c36463922f194", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java b/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java\nindex 1212257ef..7d25261b8 100644\n--- a/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java\n+++ b/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java\n\n@@ -183,6 +182,32 @@ static ItemStack empty() {\n         return this.getAttributeModifiers(attributeType.get(), equipmentType.get());\n     }\n \n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    default Collection<AttributeModifier> getAttributeModifiers(AttributeType attributeType, Supplier<? extends EquipmentType> equipmentType) {\n+        return this.getAttributeModifiers(attributeType, equipmentType.get());\n+    }\n+\n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    default Collection<AttributeModifier> getAttributeModifiers(Supplier<? extends AttributeType> attributeType, EquipmentType equipmentType) {\n+        return this.getAttributeModifiers(attributeType.get(), equipmentType);\n+    }\n+\n     /**\n      * Gets all {@link AttributeModifier}s on this item stack.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMDMyMA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r373930320", "bodyText": "Needs an overload with Supplier for AttributeType.", "author": "gabizou", "createdAt": "2020-02-03T05:48:19Z", "path": "src/main/java/org/spongepowered/api/item/inventory/ItemStack.java", "diffHunk": "@@ -164,6 +170,39 @@ static ItemStack empty() {\n      */\n     boolean isEmpty();\n \n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    default Collection<AttributeModifier> getAttributeModifiers(Supplier<? extends AttributeType> attributeType, Supplier<? extends EquipmentType> equipmentType) {\n+        return this.getAttributeModifiers(attributeType.get(), equipmentType.get());\n+    }\n+\n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    Collection<AttributeModifier> getAttributeModifiers(AttributeType attributeType, EquipmentType equipmentType);\n+\n+    /**\n+     * Adds an {@link AttributeModifier} to this item stack.\n+     * @param attributeType The attribute ty\n+     * @param modifier\n+     */\n+    void addAttributeModifier(AttributeType attributeType, AttributeModifier modifier);", "originalCommit": "e920e00098d3110601c6e81b6df6a7186e089107", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d8ea9656728f3655823d3a55346c36463922f194", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java b/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java\nindex 1212257ef..7d25261b8 100644\n--- a/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java\n+++ b/src/main/java/org/spongepowered/api/item/inventory/ItemStack.java\n\n@@ -183,6 +182,32 @@ static ItemStack empty() {\n         return this.getAttributeModifiers(attributeType.get(), equipmentType.get());\n     }\n \n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    default Collection<AttributeModifier> getAttributeModifiers(AttributeType attributeType, Supplier<? extends EquipmentType> equipmentType) {\n+        return this.getAttributeModifiers(attributeType, equipmentType.get());\n+    }\n+\n+    /**\n+     * Gets all {@link AttributeModifier}s on this item stack.\n+     *\n+     * @param attributeType The {@link AttributeType} of the modifier.\n+     * @param equipmentType The {@link EquipmentType} this modifier is applied\n+     * to.\n+     *\n+     * @return A collection of {@link AttributeModifier}s.\n+     */\n+    default Collection<AttributeModifier> getAttributeModifiers(Supplier<? extends AttributeType> attributeType, EquipmentType equipmentType) {\n+        return this.getAttributeModifiers(attributeType.get(), equipmentType);\n+    }\n+\n     /**\n      * Gets all {@link AttributeModifier}s on this item stack.\n      *\n"}}, {"oid": "d8ea9656728f3655823d3a55346c36463922f194", "url": "https://github.com/SpongePowered/SpongeAPI/commit/d8ea9656728f3655823d3a55346c36463922f194", "message": "Add Entity Attribute api", "committedDate": "2020-02-05T04:21:44Z", "type": "forcePushed"}, {"oid": "e20909b244e6c920bdc93f158a5acd3a20471ac1", "url": "https://github.com/SpongePowered/SpongeAPI/commit/e20909b244e6c920bdc93f158a5acd3a20471ac1", "message": "Add Entity Attribute api", "committedDate": "2020-02-05T04:22:48Z", "type": "forcePushed"}, {"oid": "38afae6bbe693daa4c2f1362260dfdadd58ffc8d", "url": "https://github.com/SpongePowered/SpongeAPI/commit/38afae6bbe693daa4c2f1362260dfdadd58ffc8d", "message": "Add Entity Attribute api", "committedDate": "2020-02-28T23:16:58Z", "type": "forcePushed"}, {"oid": "cedf3bf5995c3843f4be8a86609d2b731933df73", "url": "https://github.com/SpongePowered/SpongeAPI/commit/cedf3bf5995c3843f4be8a86609d2b731933df73", "message": "Add Entity Attribute api", "committedDate": "2020-04-02T19:29:06Z", "type": "forcePushed"}, {"oid": "94badf2be3c60d15c1936a17bb6d7517ff3a93c2", "url": "https://github.com/SpongePowered/SpongeAPI/commit/94badf2be3c60d15c1936a17bb6d7517ff3a93c2", "message": "Add Entity Attribute api", "committedDate": "2020-04-02T19:34:18Z", "type": "forcePushed"}, {"oid": "92f6f9af8b8678372b0fdf1448a1af8018726ea0", "url": "https://github.com/SpongePowered/SpongeAPI/commit/92f6f9af8b8678372b0fdf1448a1af8018726ea0", "message": "Add Entity Attribute api", "committedDate": "2020-04-02T19:41:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NjAyNg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r402596026", "bodyText": "Why? Seems like we're mixing concepts here.", "author": "Zidane", "createdAt": "2020-04-02T21:04:51Z", "path": "src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.entity.attribute.type;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.entity.attribute.AttributeModifier;\n+import org.spongepowered.api.util.annotation.CatalogedBy;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Represents an attribute type that can apply effects or modify traits related to an entity.\n+ */\n+@CatalogedBy(AttributeTypes.class)\n+public interface AttributeType extends CatalogType {\n+\n+    /**\n+     * Gets the parent attribute type of this attribute type.\n+     *\n+     * @return The parent type if present.\n+     */\n+    Optional<AttributeType> getParent();\n+\n+    /**\n+     * Gets the key this attribute type is related to.\n+     *\n+     * @return The key if any key is related to this attribute type.\n+     */\n+    Optional<Key<?>> getAttributeKey();", "originalCommit": "92f6f9af8b8678372b0fdf1448a1af8018726ea0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NjU1Mw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r402596553", "bodyText": "Might have misunderstood an earlier comment gabi left, I'll look at it again", "author": "i509VCB", "createdAt": "2020-04-02T21:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NjAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMjcwOQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2085#discussion_r402602709", "bodyText": "Okay this was related to an earlier question:\n\nWould it make sense to expose what the AttributeType's related Key is?\n\nSo I've thought it over and decided that exposing the related key isn't necessary since the two systems are completely separate and unrelated.", "author": "i509VCB", "createdAt": "2020-04-02T21:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NjAyNg=="}], "type": "inlineReview", "revised_code": {"commit": "2b03fe9ae662f18d80aa2768eff2bc3b0d2d71ad", "chunk": "diff --git a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java b/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java\nindex 1e50ee6ce..4d1da4bc0 100644\n--- a/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java\n+++ b/src/main/java/org/spongepowered/api/entity/attribute/type/AttributeType.java\n\n@@ -25,7 +25,6 @@\n package org.spongepowered.api.entity.attribute.type;\n \n import org.spongepowered.api.CatalogType;\n-import org.spongepowered.api.data.Key;\n import org.spongepowered.api.entity.attribute.AttributeModifier;\n import org.spongepowered.api.util.annotation.CatalogedBy;\n \n"}}, {"oid": "2b03fe9ae662f18d80aa2768eff2bc3b0d2d71ad", "url": "https://github.com/SpongePowered/SpongeAPI/commit/2b03fe9ae662f18d80aa2768eff2bc3b0d2d71ad", "message": "Add Entity Attribute api", "committedDate": "2020-04-02T21:14:16Z", "type": "forcePushed"}, {"oid": "ffef6a3420d8cfac09f4c3e079087463648d2f7e", "url": "https://github.com/SpongePowered/SpongeAPI/commit/ffef6a3420d8cfac09f4c3e079087463648d2f7e", "message": "Add Entity Attribute api", "committedDate": "2020-05-18T05:51:17Z", "type": "forcePushed"}, {"oid": "3d2a953721ef51bab65eda05908612ee87b68bca", "url": "https://github.com/SpongePowered/SpongeAPI/commit/3d2a953721ef51bab65eda05908612ee87b68bca", "message": "Add Entity Attribute api", "committedDate": "2020-06-18T02:17:30Z", "type": "forcePushed"}, {"oid": "c3e3648da86e9d1c02ec40db39a49bfd9f0841a2", "url": "https://github.com/SpongePowered/SpongeAPI/commit/c3e3648da86e9d1c02ec40db39a49bfd9f0841a2", "message": "Add Entity Attribute api", "committedDate": "2020-06-28T22:15:20Z", "type": "commit"}, {"oid": "c3e3648da86e9d1c02ec40db39a49bfd9f0841a2", "url": "https://github.com/SpongePowered/SpongeAPI/commit/c3e3648da86e9d1c02ec40db39a49bfd9f0841a2", "message": "Add Entity Attribute api", "committedDate": "2020-06-28T22:15:20Z", "type": "forcePushed"}]}