{"pr_number": 2091, "pr_title": "Add supplier overloads to all builder methods and trait -> property", "pr_createdAt": "2020-02-24T03:48:14Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2091", "timeline": [{"oid": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "url": "https://github.com/SpongePowered/SpongeAPI/commit/b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-02-24T22:58:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzkyNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383643927", "bodyText": "Can this be a double instead? And can you javadoc it?", "author": "gabizou", "createdAt": "2020-02-25T03:44:29Z", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -128,6 +128,10 @@ static Builder builder() {\n      */\n     boolean doesGrantExperience();\n \n+    float getPriceGrowthRate();", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NTI1OQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383645259", "bodyText": "Oh yeah forgot to mention that these are to compensate for the new properties of trade offers. Also thought it would be best not do have a 4 line PR just for that", "author": "i509VCB", "createdAt": "2020-02-25T03:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY5MDc4MA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383690780", "bodyText": "Need to java doc/link to mc wiki for information imo if you're doing that then.", "author": "gabizou", "createdAt": "2020-02-25T07:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MzkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\nindex 03897d6f1..b50a9f343 100644\n--- a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n+++ b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n\n@@ -122,15 +122,28 @@ static Builder builder() {\n     boolean hasExpired();\n \n     /**\n-     * Gets whether this trade offer will grant experience upon usage or not.\n+     * Gets whether this trade offer will grant experience to the customer upon usage or not.\n      *\n-     * @return True if using this trade offer will grant experience\n+     * @return True if using this trade offer will grant experience to the customer\n      */\n     boolean doesGrantExperience();\n \n-    float getPriceGrowthRate();\n-\n+    /**\n+     * Gets the amount of experience granted to the merchant when this trade offer is used.\n+     *\n+     * @return The experience to be granted to the merchant\n+     */\n+    int getMerchantExperience();\n \n+    /**\n+     * Gets the rate at which this trade offer's price will grow when demand for an item increases.\n+     *\n+     * <p>If this value is 0, trade demand will have no effect on this item's price. By default the price growth rate of a trade offer is 0.05.</p>\n+     *\n+     * @return \n+     * @see <a href=\"https://minecraft.gamepedia.com/Trading#Economics\">the Minecraft Wiki for more detail on how the price growth multiplier applies to trade offers</a>\n+     */\n+    double getPriceGrowthRate();\n \n     /**\n      * Represents a builder to generate immutable {@link TradeOffer}s.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDAxNQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644015", "bodyText": "Extra .", "author": "gabizou", "createdAt": "2020-02-25T03:44:57Z", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -186,6 +190,24 @@ static Builder builder() {\n          */\n         Builder canGrantExperience(boolean experience);\n \n+        /**\n+         * Sets how much experience the trade offer will grant upon use.\n+         *\n+         * @param experience The amount of experience.\n+         * @return This builder\n+         */\n+        Builder grantsExperience(int experience);\n+\n+        /**\n+         * Sets the rate at which this trade offer's price will grow by when used.\n+         *\n+         * <p>By default this multiplier is 0.05</p>\n+         *\n+         * @param priceGrowthRate The offer's rate of price growth.\n+         * @return This builder.", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\nindex 03897d6f1..b50a9f343 100644\n--- a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n+++ b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n\n@@ -183,7 +196,7 @@ static Builder builder() {\n         Builder maxUses(int maxUses);\n \n         /**\n-         * Sets the trade offer to be generated to grant experience upon use.\n+         * Sets the trade offer to be generated to grant experience to the customer upon use.\n          *\n          * @param experience Whether the offer will grant experience\n          * @return This builder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDAyNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644027", "bodyText": "Extra .", "author": "gabizou", "createdAt": "2020-02-25T03:45:03Z", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -186,6 +190,24 @@ static Builder builder() {\n          */\n         Builder canGrantExperience(boolean experience);\n \n+        /**\n+         * Sets how much experience the trade offer will grant upon use.\n+         *\n+         * @param experience The amount of experience.\n+         * @return This builder\n+         */\n+        Builder grantsExperience(int experience);\n+\n+        /**\n+         * Sets the rate at which this trade offer's price will grow by when used.\n+         *\n+         * <p>By default this multiplier is 0.05</p>\n+         *\n+         * @param priceGrowthRate The offer's rate of price growth.", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\nindex 03897d6f1..b50a9f343 100644\n--- a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n+++ b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n\n@@ -183,7 +196,7 @@ static Builder builder() {\n         Builder maxUses(int maxUses);\n \n         /**\n-         * Sets the trade offer to be generated to grant experience upon use.\n+         * Sets the trade offer to be generated to grant experience to the customer upon use.\n          *\n          * @param experience Whether the offer will grant experience\n          * @return This builder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDEyMw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644123", "bodyText": "If you're going to link modifiers like this, complete the sentence, and possibly link the MC wiki where they explain this.", "author": "gabizou", "createdAt": "2020-02-25T03:45:33Z", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -186,6 +190,24 @@ static Builder builder() {\n          */\n         Builder canGrantExperience(boolean experience);\n \n+        /**\n+         * Sets how much experience the trade offer will grant upon use.\n+         *\n+         * @param experience The amount of experience.\n+         * @return This builder\n+         */\n+        Builder grantsExperience(int experience);\n+\n+        /**\n+         * Sets the rate at which this trade offer's price will grow by when used.\n+         *\n+         * <p>By default this multiplier is 0.05</p>", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\nindex 03897d6f1..b50a9f343 100644\n--- a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n+++ b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n\n@@ -183,7 +196,7 @@ static Builder builder() {\n         Builder maxUses(int maxUses);\n \n         /**\n-         * Sets the trade offer to be generated to grant experience upon use.\n+         * Sets the trade offer to be generated to grant experience to the customer upon use.\n          *\n          * @param experience Whether the offer will grant experience\n          * @return This builder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0NDQ0MQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r383644441", "bodyText": "There's no more manipulators, if there are, they are missed to be removed.", "author": "gabizou", "createdAt": "2020-02-25T03:46:53Z", "path": "src/main/java/org/spongepowered/api/fluid/FluidState.java", "diffHunk": "@@ -85,6 +87,21 @@ static Builder builder() {\n      */\n     interface Builder extends SerializableDataHolderBuilder.Immutable<FluidState, Builder> {\n \n+        /**\n+         * Sets the {@link FluidType} for the {@link FluidState} to build.\n+         *\n+         * <p>The {@link FluidType} is used for some pre-validation on addition of\n+         * {@link DataManipulator}s through {@link #add(DataManipulator)}. It is", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "chunk": "diff --git a/src/main/java/org/spongepowered/api/fluid/FluidState.java b/src/main/java/org/spongepowered/api/fluid/FluidState.java\nindex 0b45ec210..3f7dd7b86 100644\n--- a/src/main/java/org/spongepowered/api/fluid/FluidState.java\n+++ b/src/main/java/org/spongepowered/api/fluid/FluidState.java\n\n@@ -90,11 +90,6 @@ static Builder builder() {\n         /**\n          * Sets the {@link FluidType} for the {@link FluidState} to build.\n          *\n-         * <p>The {@link FluidType} is used for some pre-validation on addition of\n-         * {@link DataManipulator}s through {@link #add(DataManipulator)}. It is\n-         * important to understand that not all manipulators are compatible with\n-         * all {@link FluidType}s.</p>\n-         *\n          * @param fluidType The fluid type\n          * @return This builder, for chaining\n          */\n"}}, {"oid": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "url": "https://github.com/SpongePowered/SpongeAPI/commit/db9ecaab0371d994a8c9756790d0e6ed65952d16", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-02-26T22:49:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNTkzNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384815937", "bodyText": "@gabizou Do you have a better name for this? It's the experience granted to the merchant when a trade offer is used.", "author": "i509VCB", "createdAt": "2020-02-26T22:50:50Z", "path": "src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java", "diffHunk": "@@ -122,12 +122,29 @@ static Builder builder() {\n     boolean hasExpired();\n \n     /**\n-     * Gets whether this trade offer will grant experience upon usage or not.\n+     * Gets whether this trade offer will grant experience to the customer upon usage or not.\n      *\n-     * @return True if using this trade offer will grant experience\n+     * @return True if using this trade offer will grant experience to the customer\n      */\n     boolean doesGrantExperience();\n \n+    /**\n+     * Gets the amount of experience granted to the merchant when this trade offer is used.\n+     *\n+     * @return The experience to be granted to the merchant\n+     */\n+    int getMerchantExperience();", "originalCommit": "db9ecaab0371d994a8c9756790d0e6ed65952d16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2ODk1NQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r390768955", "bodyText": "I'd say it's fine. It's the experience granted to the merchant on use. just maybe getExperienceGrantedToMerchantOnUse but that's verbose.", "author": "gabizou", "createdAt": "2020-03-11T06:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNTkzNw=="}], "type": "inlineReview", "revised_code": {"commit": "cadfa004f26b749e8f2841439c78d6dd64b15c53", "chunk": "diff --git a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\nindex b50a9f343..eb71d12c0 100644\n--- a/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n+++ b/src/main/java/org/spongepowered/api/item/merchant/TradeOffer.java\n\n@@ -133,7 +133,7 @@ static Builder builder() {\n      *\n      * @return The experience to be granted to the merchant\n      */\n-    int getMerchantExperience();\n+    int getExperienceGrantedToMerchantOnUse();\n \n     /**\n      * Gets the rate at which this trade offer's price will grow when demand for an item increases.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NDgzNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384454837", "bodyText": "trait should be renamed to property or stateProperty", "author": "Cybermaxke", "createdAt": "2020-02-26T12:15:04Z", "path": "src/main/java/org/spongepowered/api/block/BlockStateMatcher.java", "diffHunk": "@@ -92,6 +105,26 @@ default boolean test(BlockState blockState) {\n          */\n         Builder type(BlockType type);\n \n+        /**\n+         * Adds the desired {@link StateProperty} and {code value} to this\n+         * builder, if the desired {@link StateProperty} does not belong to the\n+         * original {@link BlockType} as provided by {@link #type(BlockType)},\n+         * an exception is thrown. Likewise, if a {@code value} is not within\n+         * the possible values for the desired trait of the desired type, an\n+         * exception is thrown.\n+         *\n+         * @param trait The desired block trait\n+         * @param value the desired value\n+         * @param <T> The type of comparable\n+         * @return This builder\n+         * @throws IllegalArgumentException If the block trait does not match\n+         *     the block type, or if the value does not belong to the trait\n+         *     with the desired block type\n+         */\n+        default <T extends Comparable<T>> Builder trait(Supplier<? extends StateProperty<T>> trait, T value) throws IllegalArgumentException {", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1MjU4Nw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384852587", "bodyText": "I'll look around the api and include those renames with this pr EDIT: (I went for property).", "author": "i509VCB", "createdAt": "2020-02-27T00:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NDgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "532c3909f775ed7526281b7be6e966d4f2df1422", "chunk": "diff --git a/src/main/java/org/spongepowered/api/block/BlockStateMatcher.java b/src/main/java/org/spongepowered/api/block/BlockStateMatcher.java\nindex 52156731f..64b1fd0d6 100644\n--- a/src/main/java/org/spongepowered/api/block/BlockStateMatcher.java\n+++ b/src/main/java/org/spongepowered/api/block/BlockStateMatcher.java\n\n@@ -98,7 +98,7 @@ default Builder type(Supplier<? extends BlockType> type) {\n         /**\n          * Sets the root {@link BlockType} for the {@link BlockStateMatcher}.\n          * <p>Note that the {@link BlockType type} <b>must be set prior</b>\n-         * to setting various {@link StateProperty traits} and their values.</p>\n+         * to setting various {@link StateProperty propeties} and their values.</p>\n          *\n          * @param type The block type to use\n          * @return This builder, for chaining\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1NTM0Ng==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2091#discussion_r384455346", "bodyText": "this.icon", "author": "Cybermaxke", "createdAt": "2020-02-26T12:16:12Z", "path": "src/main/java/org/spongepowered/api/advancement/DisplayInfo.java", "diffHunk": "@@ -128,6 +141,17 @@ static Builder builder() {\n          */\n         Builder title(Text title);\n \n+        /**\n+         * Sets the icon of the advancement with the\n+         * specified {@link ItemType}.\n+         *\n+         * @param itemType The item type\n+         * @return This builder, for chaining\n+         */\n+        default Builder icon(Supplier<? extends ItemType> itemType) {\n+            return icon(itemType.get());", "originalCommit": "b7e1e5ef1ddd419f9ed93368f55e0bb26f20f2c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "532c3909f775ed7526281b7be6e966d4f2df1422", "url": "https://github.com/SpongePowered/SpongeAPI/commit/532c3909f775ed7526281b7be6e966d4f2df1422", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-02-27T02:45:35Z", "type": "forcePushed"}, {"oid": "cadfa004f26b749e8f2841439c78d6dd64b15c53", "url": "https://github.com/SpongePowered/SpongeAPI/commit/cadfa004f26b749e8f2841439c78d6dd64b15c53", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-03-25T03:02:15Z", "type": "forcePushed"}, {"oid": "3081448b339b868ee31f7a02ee0feebef9ecb6f7", "url": "https://github.com/SpongePowered/SpongeAPI/commit/3081448b339b868ee31f7a02ee0feebef9ecb6f7", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-03-25T16:12:49Z", "type": "forcePushed"}, {"oid": "0a00570c69c7538b50d091f80f5f74f8193151bb", "url": "https://github.com/SpongePowered/SpongeAPI/commit/0a00570c69c7538b50d091f80f5f74f8193151bb", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-03-25T16:15:26Z", "type": "forcePushed"}, {"oid": "4f0478fd9353a46c809c8fab9bcadd8431c12cdf", "url": "https://github.com/SpongePowered/SpongeAPI/commit/4f0478fd9353a46c809c8fab9bcadd8431c12cdf", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-03-25T16:18:03Z", "type": "commit"}, {"oid": "4f0478fd9353a46c809c8fab9bcadd8431c12cdf", "url": "https://github.com/SpongePowered/SpongeAPI/commit/4f0478fd9353a46c809c8fab9bcadd8431c12cdf", "message": "Add supplier overloads to all builder methods", "committedDate": "2020-03-25T16:18:03Z", "type": "forcePushed"}]}