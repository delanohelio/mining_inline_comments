{"pr_number": 2265, "pr_title": "Add keys for data from client settings", "pr_createdAt": "2020-11-28T01:08:35Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2265", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyMzI1Mw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2265#discussion_r531823253", "bodyText": "I see you were just updating this, but I also see that this view distance key is documented as read only. So I would imagine we shouldn\u2019t be able to set a player\u2019s view distance here as well.", "author": "NickImpact", "createdAt": "2020-11-28T02:22:13Z", "path": "src/main/java/org/spongepowered/api/entity/living/player/server/ServerPlayer.java", "diffHunk": "@@ -128,29 +128,37 @@ default boolean isViewingInventory() {\n      *\n      * @return The player's view distance\n      */\n-    int getViewDistance();\n+    default int getViewDistance() {\n+        return this.require(Keys.VIEW_DISTANCE);\n+    }\n \n     /**\n      * Sets the view distance setting of the player. This value represents the\n      * radius (around the player) in unit chunks.\n      *\n      * @param distance The player's view distance\n      */\n-    void setViewDistance(int distance);\n+    default void setViewDistance(final int distance) {", "originalCommit": "cfcbf1b313b2b2f8a56c9c1a895aeb8852413f37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyNDAyMg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2265#discussion_r531824022", "bodyText": "yeah -- this api method was unimplemented, but I preserved it since it existed, and documented what's currently easily implementable. Can update either way if I get confirmation on what'll be implemented.", "author": "zml2008", "createdAt": "2020-11-28T02:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyMzI1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyNDE2Ng==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2265#discussion_r531824166", "bodyText": "@zml2008 Additionally, data methods follow a certain style. Look at Entity to see.", "author": "Zidane", "createdAt": "2020-11-28T02:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTgyMzI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9a52ec7af308e36f27ed6f85d60b479d8db64946", "chunk": "diff --git a/src/main/java/org/spongepowered/api/entity/living/player/server/ServerPlayer.java b/src/main/java/org/spongepowered/api/entity/living/player/server/ServerPlayer.java\nindex 94bc3565e..6ed38ab0b 100644\n--- a/src/main/java/org/spongepowered/api/entity/living/player/server/ServerPlayer.java\n+++ b/src/main/java/org/spongepowered/api/entity/living/player/server/ServerPlayer.java\n\n@@ -123,41 +123,27 @@ default boolean isViewingInventory() {\n     boolean closeInventory() throws IllegalArgumentException;\n \n     /**\n-     * Gets the view distance setting of the player. This value represents the\n-     * radius (around the player) in unit chunks.\n-     *\n+     * {@link Keys#VIEW_DISTANCE}\n      * @return The player's view distance\n      */\n-    default int getViewDistance() {\n-        return this.require(Keys.VIEW_DISTANCE);\n+    default Value.Mutable<Integer> viewDistance() {\n+        return this.requireValue(Keys.VIEW_DISTANCE).asMutable();\n     }\n \n     /**\n-     * Sets the view distance setting of the player. This value represents the\n-     * radius (around the player) in unit chunks.\n-     *\n-     * @param distance The player's view distance\n-     */\n-    default void setViewDistance(final int distance) {\n-        this.offer(Keys.VIEW_DISTANCE, distance);\n-    }\n-\n-    /**\n-     * Gets the current player chat visibility setting.\n-     *\n+     * {@link Keys#CHAT_VISIBILITY}\n      * @return Chat visibility setting\n      */\n-    default ChatVisibility getChatVisibility() {\n-        return this.require(Keys.CHAT_VISIBILITY);\n+    default Value.Mutable<ChatVisibility> chatVisibility() {\n+        return this.requireValue(Keys.CHAT_VISIBILITY).asMutable();\n     }\n \n     /**\n-     * Gets whether the player has colors enabled in chat.\n-     *\n-     * @return True if colors are enabled in chat\n+     * {@link Keys#CHAT_COLORS_ENABLED}\n+     * @return Whether colors are enabled in chat\n      */\n-    default boolean isChatColorsEnabled() {\n-        return this.require(Keys.CHAT_COLORS_ENABLED);\n+    default Value.Mutable<Boolean> chatColorsEnabled() {\n+        return this.requireValue(Keys.CHAT_COLORS_ENABLED).asMutable();\n     }\n \n     /**\n"}}, {"oid": "be4ddd2ce8667fb05386e2ea387362451d88607c", "url": "https://github.com/SpongePowered/SpongeAPI/commit/be4ddd2ce8667fb05386e2ea387362451d88607c", "message": "Add keys for data from client settings", "committedDate": "2020-12-02T21:28:18Z", "type": "commit"}, {"oid": "9a52ec7af308e36f27ed6f85d60b479d8db64946", "url": "https://github.com/SpongePowered/SpongeAPI/commit/9a52ec7af308e36f27ed6f85d60b479d8db64946", "message": "Make ServerPlayer data accessors match standards", "committedDate": "2020-12-02T21:28:18Z", "type": "commit"}, {"oid": "9a52ec7af308e36f27ed6f85d60b479d8db64946", "url": "https://github.com/SpongePowered/SpongeAPI/commit/9a52ec7af308e36f27ed6f85d60b479d8db64946", "message": "Make ServerPlayer data accessors match standards", "committedDate": "2020-12-02T21:28:18Z", "type": "forcePushed"}]}