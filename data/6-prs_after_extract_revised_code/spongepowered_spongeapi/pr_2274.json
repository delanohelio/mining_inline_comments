{"pr_number": 2274, "pr_title": "Start of a Chunk Manager", "pr_createdAt": "2020-12-06T19:09:40Z", "pr_url": "https://github.com/SpongePowered/SpongeAPI/pull/2274", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwMzkzMA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537103930", "bodyText": "getLifetime()?", "author": "Zidane", "createdAt": "2020-12-06T19:12:17Z", "path": "src/main/java/org/spongepowered/api/world/server/TicketType.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.util.annotation.CatalogedBy;\n+\n+/**\n+ * Represents a type of {@link Ticket chunk loading ticket} that can be obtained\n+ * to ensure chunks remain loaded in a {@link ServerWorld}.\n+ *\n+ * @param <T> The type of value that is associated with a {@link Ticket} of this\n+ *      type.\n+ */\n+@CatalogedBy(TicketTypes.class)\n+public interface TicketType<T> extends CatalogType {\n+\n+    /**\n+     * Gets the lifetime of any {@link Ticket tickets} of this type.\n+     *\n+     * @return The number of {@link Ticks} any {@link Ticket tickets} of this\n+     *         type will be valid for.\n+     */\n+    Ticks getTicketLifetime();", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketType.java b/src/main/java/org/spongepowered/api/world/server/TicketType.java\nindex f248ed998..6f70bcedc 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketType.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketType.java\n\n@@ -44,6 +44,6 @@\n      * @return The number of {@link Ticks} any {@link Ticket tickets} of this\n      *         type will be valid for.\n      */\n-    Ticks getTicketLifetime();\n+    Ticks getLifetime();\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDAwMg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104002", "bodyText": "ServerWorld getWorld()?", "author": "Zidane", "createdAt": "2020-12-06T19:12:41Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n\n@@ -28,6 +28,7 @@\n import org.spongepowered.api.world.chunk.Chunk;\n import org.spongepowered.math.vector.Vector3i;\n \n+import java.util.Collection;\n import java.util.Optional;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDA3OQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104079", "bodyText": "getDefaultLifetime()", "author": "Zidane", "createdAt": "2020-12-06T19:13:10Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n+     * this ticket manager.\n+     */\n+    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNzQ2Mg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537107462", "bodyText": "Actually just removed this, it's on the TicketType instead.", "author": "dualspiral", "createdAt": "2020-12-06T19:33:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n\n@@ -28,6 +28,7 @@\n import org.spongepowered.api.world.chunk.Chunk;\n import org.spongepowered.math.vector.Vector3i;\n \n+import java.util.Collection;\n import java.util.Optional;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDE0Ng==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104146", "bodyText": "that force chunk(s) ...", "author": "Zidane", "createdAt": "2020-12-06T19:13:43Z", "path": "src/main/java/org/spongepowered/api/world/server/TicketTypes.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * Types of {@link Ticket tickets} that can be requested via the\n+ * {@link ChunkManager}.\n+ */\n+public class TicketTypes {\n+\n+    /**\n+     * Represents {@link Ticket tickets} that forces a chunk to stay loaded.", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex a74ac54e3..39eb5d556 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n\n@@ -25,6 +25,10 @@\n package org.spongepowered.api.world.server;\n \n import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.Entity;\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.api.world.portal.Portal;\n import org.spongepowered.math.vector.Vector3i;\n \n import java.util.function.Supplier;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDQ3Nw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104477", "bodyText": "Radius?", "author": "Zidane", "createdAt": "2020-12-06T19:15:47Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n+     * this ticket manager.\n+     */\n+    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);\n+\n+    /**\n+     * Gets the {@link Ticks} remaining on the supplied ticket.\n+     *\n+     * @return The {@link Ticks}\n+     */\n+    Ticks getTimeLeft(Ticket<?> ticket);\n+\n+    /**\n+     * Request a {@link Ticket} for the given {@link TicketType}.\n+     *\n+     * @param type The type of ticket to request.\n+     * @param value The value to register the ticket with.\n+     * @param <T> The type of the supplied {@code value}.\n+     * @return The ticket, if granted.\n+     */\n+    <T> Optional<Ticket<T>> requestTicket(TicketType<T> type, Vector3i chunkPosition, T value);", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNTAxOQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537105019", "bodyText": "Additional, the chunkPosition really is the chunkOrigin that the radius operates off of.", "author": "Zidane", "createdAt": "2020-12-06T19:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n\n@@ -28,6 +28,7 @@\n import org.spongepowered.api.world.chunk.Chunk;\n import org.spongepowered.math.vector.Vector3i;\n \n+import java.util.Collection;\n import java.util.Optional;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDYxNQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104615", "bodyText": "<T> Collection<Ticket<T>> getTickets(TicketType<T> type) ?", "author": "Zidane", "createdAt": "2020-12-06T19:16:33Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+public interface ChunkManager {\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the default lifetime, in {@link Ticks}, of any ticket requested via\n+     * this ticket manager.\n+     */\n+    Ticks getDefaultTicketLifetime(TicketType<?> ticketType);\n+\n+    /**\n+     * Gets the {@link Ticks} remaining on the supplied ticket.\n+     *\n+     * @return The {@link Ticks}\n+     */\n+    Ticks getTimeLeft(Ticket<?> ticket);\n+\n+    /**\n+     * Request a {@link Ticket} for the given {@link TicketType}.\n+     *\n+     * @param type The type of ticket to request.\n+     * @param value The value to register the ticket with.\n+     * @param <T> The type of the supplied {@code value}.\n+     * @return The ticket, if granted.\n+     */\n+    <T> Optional<Ticket<T>> requestTicket(TicketType<T> type, Vector3i chunkPosition, T value);\n+\n+    /**\n+     * Attempts to renew this ticket, resetting the lifetime to the default.\n+     *\n+     * <p>If this ticket is no longer valid, it cannot be renewed. Instead,\n+     * you should {@link #requestTicket(TicketType, Vector3i, Object)} a new one.</p>\n+     *\n+     * @param ticket The ticket to attempt to renew\n+     * @return {@code true} if successful\n+     */\n+    boolean renewTicket(Ticket<?> ticket);\n+\n+    /**\n+     * Releases the provided {@link Ticket}, allowing the chunk position\n+     * represented by the given ticket to be unloaded (if it is not being kept\n+     * loaded by other means).\n+     *\n+     * @param ticket The ticket to release.\n+     */\n+    boolean releaseTicket(Ticket<?> ticket);\n+\n+}", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex df8c2fa0e..f38711587 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n\n@@ -28,6 +28,7 @@\n import org.spongepowered.api.world.chunk.Chunk;\n import org.spongepowered.math.vector.Vector3i;\n \n+import java.util.Collection;\n import java.util.Optional;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDcxMA==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104710", "bodyText": "the chunk manager", "author": "Zidane", "createdAt": "2020-12-06T19:16:59Z", "path": "src/main/java/org/spongepowered/api/world/server/ServerWorld.java", "diffHunk": "@@ -203,4 +203,12 @@ default Chunk getChunkAtBlock(int bx, int by, int bz) {\n      * @return The raid at that location, if present\n      */\n     Optional<Raid> getRaidAt(Vector3i blockPosition);\n+\n+    /**\n+     * Gets the {@link ChunkManager} for this world.\n+     *\n+     * @return The ticket manager.", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/ServerWorld.java b/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\nindex be414b786..2c1f6c803 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ServerWorld.java\n\n@@ -207,7 +298,7 @@ default Chunk getChunkAtBlock(int bx, int by, int bz) {\n     /**\n      * Gets the {@link ChunkManager} for this world.\n      *\n-     * @return The ticket manager.\n+     * @return The chunk manager.\n      */\n     ChunkManager getChunkManager();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDc3Mg==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104772", "bodyText": "TicketType<T> getType()", "author": "Zidane", "createdAt": "2020-12-06T19:17:20Z", "path": "src/main/java/org/spongepowered/api/world/server/Ticket.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+/**\n+ * Represents a chunk loading ticket.\n+ *\n+ * @param <T> The type of value this ticket holds.\n+ */\n+public interface Ticket<T> {", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEwNDg3Mw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r537104873", "bodyText": "final", "author": "Zidane", "createdAt": "2020-12-06T19:17:47Z", "path": "src/main/java/org/spongepowered/api/world/server/TicketTypes.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.function.Supplier;\n+\n+/**\n+ * Types of {@link Ticket tickets} that can be requested via the\n+ * {@link ChunkManager}.\n+ */\n+public class TicketTypes {", "originalCommit": "95545b4770eacde92057342dcea4195873a62ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f46ba18da19b225e691c4496a5c969da8d182236", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\nindex a74ac54e3..39eb5d556 100644\n--- a/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n+++ b/src/main/java/org/spongepowered/api/world/server/TicketTypes.java\n\n@@ -25,6 +25,10 @@\n package org.spongepowered.api.world.server;\n \n import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.entity.Entity;\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.api.world.portal.Portal;\n import org.spongepowered.math.vector.Vector3i;\n \n import java.util.function.Supplier;\n"}}, {"oid": "f46ba18da19b225e691c4496a5c969da8d182236", "url": "https://github.com/SpongePowered/SpongeAPI/commit/f46ba18da19b225e691c4496a5c969da8d182236", "message": "First stab at a Ticket manager\n\nIntroduce TicketTypes, move TicketManager to ChunkManager\n\nUpdate for API comments, round 1\n\nAdd way to get tickets, and more ticket types", "committedDate": "2021-01-03T15:17:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyNDYyNw==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r551024627", "bodyText": "ticket_types -> ticket_type", "author": "Lignium", "createdAt": "2021-01-03T16:12:20Z", "path": "src/main/java/org/spongepowered/api/registry/RegistryTypes.java", "diffHunk": "@@ -367,6 +368,8 @@\n \n     public static final RegistryType<TeleportHelperFilter> TELEPORT_HELPER_FILTER = RegistryTypes.spongeKey(\"teleport_helper_filter\");\n \n+    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_types\");", "originalCommit": "cca2c2ad44848ac01c2709040f7ac75f51c417c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fe2cf697e2f1044af27d78c457b5077c49d04845", "chunk": "diff --git a/src/main/java/org/spongepowered/api/registry/RegistryTypes.java b/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\nindex d117515bd..751976490 100644\n--- a/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\n+++ b/src/main/java/org/spongepowered/api/registry/RegistryTypes.java\n\n@@ -368,7 +368,7 @@\n \n     public static final RegistryType<TeleportHelperFilter> TELEPORT_HELPER_FILTER = RegistryTypes.spongeKey(\"teleport_helper_filter\");\n \n-    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_types\");\n+    public static final RegistryType<TicketType<?>> TICKET_TYPE = RegistryTypes.spongeKey(\"ticket_type\");\n \n     public static final RegistryType<TransactionType> TRANSACTION_TYPE = RegistryTypes.spongeKey(\"transaction_type\");\n \n"}}, {"oid": "fe2cf697e2f1044af27d78c457b5077c49d04845", "url": "https://github.com/SpongePowered/SpongeAPI/commit/fe2cf697e2f1044af27d78c457b5077c49d04845", "message": "Update for 1.16.4", "committedDate": "2021-01-03T18:08:40Z", "type": "forcePushed"}, {"oid": "5334c877488797e0c2cb718b17554a31644fc9be", "url": "https://github.com/SpongePowered/SpongeAPI/commit/5334c877488797e0c2cb718b17554a31644fc9be", "message": "First stab at a Ticket Manager", "committedDate": "2021-04-16T18:32:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTM1NTQyMQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r615355421", "bodyText": "What's the behavior of a ticket that isn't valid?", "author": "gabizou", "createdAt": "2021-04-18T07:20:42Z", "path": "src/main/java/org/spongepowered/api/world/server/ChunkManager.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * This file is part of SpongeAPI, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.api.world.server;\n+\n+import org.spongepowered.api.util.Ticks;\n+import org.spongepowered.api.util.annotation.DoNotStore;\n+import org.spongepowered.api.world.chunk.Chunk;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+/**\n+ * Manages {@link Chunk chunks} for a {@link ServerWorld}.\n+ */\n+@DoNotStore\n+public interface ChunkManager {\n+\n+    /**\n+     * Gets the {@link ServerWorld} this manager operates upon.\n+     *\n+     * @return The {@link ServerWorld}\n+     */\n+    ServerWorld world();\n+\n+    /**\n+     * Checks if the provided {@link Ticket} is valid for the world this manager\n+     * represents.\n+     *\n+     * @param ticket The ticket to check.\n+     * @return true if so\n+     */\n+    boolean isValid(Ticket<?> ticket);\n+\n+    /**\n+     * Gets the {@link Ticks} remaining on the supplied ticket.", "originalCommit": "2aec9e03eba1db35dc95baf7412b4102788c3640", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTQzNDIwOQ==", "url": "https://github.com/SpongePowered/SpongeAPI/pull/2274#discussion_r615434209", "bodyText": "Doesn't do anything. The distance manager has exponged all knowledge of it so the chunks it refers to may unload.", "author": "dualspiral", "createdAt": "2021-04-18T18:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTM1NTQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4c6ba2b38f444676273d6958e823a5b532747dbf", "chunk": "diff --git a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\nindex 2e378d25e..fd891b370 100644\n--- a/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n+++ b/src/main/java/org/spongepowered/api/world/server/ChunkManager.java\n\n@@ -24,6 +24,7 @@\n  */\n package org.spongepowered.api.world.server;\n \n+import org.spongepowered.api.registry.DefaultedRegistryReference;\n import org.spongepowered.api.util.Ticks;\n import org.spongepowered.api.util.annotation.DoNotStore;\n import org.spongepowered.api.world.chunk.Chunk;\n"}}, {"oid": "307063a0f712fb9e6fcc5021cb9cef74871478d5", "url": "https://github.com/SpongePowered/SpongeAPI/commit/307063a0f712fb9e6fcc5021cb9cef74871478d5", "message": "Minor adjustments to docs", "committedDate": "2021-05-02T12:37:46Z", "type": "forcePushed"}, {"oid": "14fdb811837cd2278995c7afa397edbe85731fb5", "url": "https://github.com/SpongePowered/SpongeAPI/commit/14fdb811837cd2278995c7afa397edbe85731fb5", "message": "Minor adjustments to docs", "committedDate": "2021-05-14T19:50:57Z", "type": "forcePushed"}, {"oid": "4c6ba2b38f444676273d6958e823a5b532747dbf", "url": "https://github.com/SpongePowered/SpongeAPI/commit/4c6ba2b38f444676273d6958e823a5b532747dbf", "message": "Add overloads, FORCED -> STANDARD", "committedDate": "2021-05-23T21:31:18Z", "type": "forcePushed"}, {"oid": "acc198aeaa0492853440bf4cdd931305105262e7", "url": "https://github.com/SpongePowered/SpongeAPI/commit/acc198aeaa0492853440bf4cdd931305105262e7", "message": "Add overloads, FORCED -> STANDARD", "committedDate": "2021-06-05T11:26:43Z", "type": "forcePushed"}, {"oid": "476b9f8b93ba722b8e60ae36899ad95702b7b5d3", "url": "https://github.com/SpongePowered/SpongeAPI/commit/476b9f8b93ba722b8e60ae36899ad95702b7b5d3", "message": "Remove processed method", "committedDate": "2021-06-15T18:54:34Z", "type": "forcePushed"}, {"oid": "0a8236296434c23ba0056c0fe0779b9b77f7904c", "url": "https://github.com/SpongePowered/SpongeAPI/commit/0a8236296434c23ba0056c0fe0779b9b77f7904c", "message": "First stab at a Ticket Manager", "committedDate": "2021-06-29T17:29:59Z", "type": "forcePushed"}, {"oid": "150593f9d0a1bea1152817d85cb5ce446150c13e", "url": "https://github.com/SpongePowered/SpongeAPI/commit/150593f9d0a1bea1152817d85cb5ce446150c13e", "message": "First stab at a Ticket Manager", "committedDate": "2021-06-30T20:27:17Z", "type": "commit"}, {"oid": "150593f9d0a1bea1152817d85cb5ce446150c13e", "url": "https://github.com/SpongePowered/SpongeAPI/commit/150593f9d0a1bea1152817d85cb5ce446150c13e", "message": "First stab at a Ticket Manager", "committedDate": "2021-06-30T20:27:17Z", "type": "forcePushed"}]}