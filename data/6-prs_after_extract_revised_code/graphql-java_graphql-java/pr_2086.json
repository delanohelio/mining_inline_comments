{"pr_number": 2086, "pr_title": "add shaded guava collections and use it", "pr_createdAt": "2020-10-29T11:21:02Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2086", "timeline": [{"oid": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d", "url": "https://github.com/graphql-java/graphql-java/commit/7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d", "message": "add shaded guava collections and use it in Field", "committedDate": "2020-10-29T11:20:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NTE2OQ==", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r514575169", "bodyText": "The next level would be for input methods to TAKE immutablke lists.  eg here we throw the responsibility back onto the caller to give us an immutable list.\nThoughts?\nIf we did this, then com.google.collect.ImmutableList becomes implicit API.", "author": "bbakerman", "createdAt": "2020-10-29T21:21:34Z", "path": "src/main/java/graphql/language/Field.java", "diffHunk": "@@ -257,13 +257,13 @@ public Builder alias(String alias) {\n         }\n \n         public Builder arguments(List<Argument> arguments) {", "originalCommit": "7b39d8f2ed0f6f81c2f44fadbe36f5934d1ac96d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2Nw==", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r514579667", "bodyText": "We don't need to make it explicit: If you give us a (GraphQL Java) Immutable List it is already optimized inside Guava itself.", "author": "andimarek", "createdAt": "2020-10-29T21:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3NTE2OQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "e0cd2bf32ac358b9a12b57f1f089e57ded04e79f", "url": "https://github.com/graphql-java/graphql-java/commit/e0cd2bf32ac358b9a12b57f1f089e57ded04e79f", "message": "remove not needed guava files", "committedDate": "2020-11-01T01:07:59Z", "type": "commit"}, {"oid": "cccba5640b0a63d4ceb8d83d8cba0b52ad47298c", "url": "https://github.com/graphql-java/graphql-java/commit/cccba5640b0a63d4ceb8d83d8cba0b52ad47298c", "message": "use immutable collections more and add Util class", "committedDate": "2020-11-01T08:39:07Z", "type": "commit"}, {"oid": "82f4c6dd4d0a65661de3ab622ed218efce0f0172", "url": "https://github.com/graphql-java/graphql-java/commit/82f4c6dd4d0a65661de3ab622ed218efce0f0172", "message": "simplify build", "committedDate": "2020-11-02T21:17:42Z", "type": "commit"}, {"oid": "a834b78163eec018da1d985f9ade5bb2b63bb771", "url": "https://github.com/graphql-java/graphql-java/commit/a834b78163eec018da1d985f9ade5bb2b63bb771", "message": "add documentation", "committedDate": "2020-11-02T21:28:15Z", "type": "commit"}, {"oid": "fda0f999c51567ead558a4f97ba7decaba341131", "url": "https://github.com/graphql-java/graphql-java/commit/fda0f999c51567ead558a4f97ba7decaba341131", "message": "add Immutable map which allows null values\nuse more immutable collections", "committedDate": "2020-11-02T22:08:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMwMDk4OA==", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r516300988", "bodyText": "Didnt want to put a of helper here\nImmutableMapWithNullValues.of(\"k1\", \"v1\")\nImmutableMapWithNullValues.of(\"k1\", \"v1\", \"k2\", \"v2\")", "author": "bbakerman", "createdAt": "2020-11-02T22:42:01Z", "path": "src/main/java/graphql/collect/ImmutableMapWithNullValues.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package graphql.collect;\n+\n+import graphql.Internal;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+@Internal\n+public final class ImmutableMapWithNullValues<K, V> implements Map<K, V> {\n+\n+    private final Map<K, V> delegate;\n+\n+    private static final ImmutableMapWithNullValues emptyMap = copyOf(new LinkedHashMap<>());\n+\n+    private ImmutableMapWithNullValues(Map<K, V> values) {\n+        this.delegate = Collections.unmodifiableMap(new LinkedHashMap<>(values));\n+    }\n+\n+\n+    public static <K, V> ImmutableMapWithNullValues<K, V> empty() {\n+        return emptyMap;\n+    }\n+\n+    public static <K, V> ImmutableMapWithNullValues<K, V> copyOf(Map<K, V> values) {\n+        if (values instanceof ImmutableMapWithNullValues) {\n+            return (ImmutableMapWithNullValues<K, V>) values;\n+        }\n+        return new ImmutableMapWithNullValues<>(values);\n+    }", "originalCommit": "fda0f999c51567ead558a4f97ba7decaba341131", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3fff29f850c46b28de6edfc8449bd8c085c5662f", "chunk": "diff --git a/src/main/java/graphql/collect/ImmutableMapWithNullValues.java b/src/main/java/graphql/collect/ImmutableMapWithNullValues.java\nindex 1d28c16f..680ff205 100644\n--- a/src/main/java/graphql/collect/ImmutableMapWithNullValues.java\n+++ b/src/main/java/graphql/collect/ImmutableMapWithNullValues.java\n\n@@ -23,7 +23,7 @@ public final class ImmutableMapWithNullValues<K, V> implements Map<K, V> {\n     }\n \n \n-    public static <K, V> ImmutableMapWithNullValues<K, V> empty() {\n+    public static <K, V> ImmutableMapWithNullValues<K, V> emptyMap() {\n         return emptyMap;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDUyMA==", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r516384520", "bodyText": "Maybe renamed ImmutableMapWithNullValues.empty() =to ImmutableMapWithNullValues.emptyMap() - this would be clearer in my book and also better on static import\nthis.variables = builder.variables == null ? emptyMap() : builder.variables;", "author": "bbakerman", "createdAt": "2020-11-03T01:33:19Z", "path": "src/main/java/graphql/schema/DataFetchingEnvironmentImpl.java", "diffHunk": "@@ -66,7 +69,7 @@ private DataFetchingEnvironmentImpl(Builder builder) {\n         this.locale = builder.locale;\n         this.operationDefinition = builder.operationDefinition;\n         this.document = builder.document;\n-        this.variables = builder.variables == null ? Collections.emptyMap() : builder.variables;\n+        this.variables = builder.variables == null ? ImmutableMapWithNullValues.empty() : builder.variables;", "originalCommit": "fda0f999c51567ead558a4f97ba7decaba341131", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3fff29f850c46b28de6edfc8449bd8c085c5662f", "chunk": "diff --git a/src/main/java/graphql/schema/DataFetchingEnvironmentImpl.java b/src/main/java/graphql/schema/DataFetchingEnvironmentImpl.java\nindex 06d28651..ad0b6d18 100644\n--- a/src/main/java/graphql/schema/DataFetchingEnvironmentImpl.java\n+++ b/src/main/java/graphql/schema/DataFetchingEnvironmentImpl.java\n\n@@ -69,7 +69,7 @@ public class DataFetchingEnvironmentImpl implements DataFetchingEnvironment {\n         this.locale = builder.locale;\n         this.operationDefinition = builder.operationDefinition;\n         this.document = builder.document;\n-        this.variables = builder.variables == null ? ImmutableMapWithNullValues.empty() : builder.variables;\n+        this.variables = builder.variables == null ? ImmutableMapWithNullValues.emptyMap() : builder.variables;\n         this.queryDirectives = builder.queryDirectives;\n     }\n \n"}}, {"oid": "3fff29f850c46b28de6edfc8449bd8c085c5662f", "url": "https://github.com/graphql-java/graphql-java/commit/3fff29f850c46b28de6edfc8449bd8c085c5662f", "message": "More immutable support in more of the places", "committedDate": "2020-11-03T10:06:01Z", "type": "commit"}, {"oid": "dde43221a8cfe23b20ef248965fbee553458f3b8", "url": "https://github.com/graphql-java/graphql-java/commit/dde43221a8cfe23b20ef248965fbee553458f3b8", "message": "More immutable support in more and more of the places", "committedDate": "2020-11-03T10:33:32Z", "type": "commit"}, {"oid": "59d2878030a032fb00b9346746b584dfd24f8491", "url": "https://github.com/graphql-java/graphql-java/commit/59d2878030a032fb00b9346746b584dfd24f8491", "message": "More Immutable code in and around the schema", "committedDate": "2020-11-04T05:05:42Z", "type": "commit"}, {"oid": "24b02716c90f34ac2d4e30ec252adf33724657cb", "url": "https://github.com/graphql-java/graphql-java/commit/24b02716c90f34ac2d4e30ec252adf33724657cb", "message": "Optimised import", "committedDate": "2020-11-04T05:06:02Z", "type": "commit"}, {"oid": "d8d11c8da51a18da550914019282d299d993030a", "url": "https://github.com/graphql-java/graphql-java/commit/d8d11c8da51a18da550914019282d299d993030a", "message": "Made the map of types in schema be immutable", "committedDate": "2020-11-04T06:21:02Z", "type": "commit"}, {"oid": "f5b76149a47a192fd21e6513305506eb85ec8ffd", "url": "https://github.com/graphql-java/graphql-java/commit/f5b76149a47a192fd21e6513305506eb85ec8ffd", "message": "More Immutable things", "committedDate": "2020-11-04T10:49:22Z", "type": "commit"}, {"oid": "0c9039d3464fbb2c7d6d8db7bd52946d2daa9ad3", "url": "https://github.com/graphql-java/graphql-java/commit/0c9039d3464fbb2c7d6d8db7bd52946d2daa9ad3", "message": "More Immutability and tweaked the ImmutableMapWithNullValues class", "committedDate": "2020-11-05T10:27:14Z", "type": "commit"}, {"oid": "b31850bf60ea8f553fd0412c9c33106b8c2b623b", "url": "https://github.com/graphql-java/graphql-java/commit/b31850bf60ea8f553fd0412c9c33106b8c2b623b", "message": "More Immutability on things", "committedDate": "2020-11-05T10:47:09Z", "type": "commit"}, {"oid": "75f61ac2526a61a18837b83ffe3713cfa95cf45b", "url": "https://github.com/graphql-java/graphql-java/commit/75f61ac2526a61a18837b83ffe3713cfa95cf45b", "message": "More Immutability on AST things", "committedDate": "2020-11-05T11:28:04Z", "type": "commit"}, {"oid": "8b020b68252cae43c1096f0c1f51b35eab76d2ac", "url": "https://github.com/graphql-java/graphql-java/commit/8b020b68252cae43c1096f0c1f51b35eab76d2ac", "message": "More Immutability on AST things and a few other things", "committedDate": "2020-11-05T12:29:52Z", "type": "commit"}, {"oid": "df5244482d90d830e970cd8a400281f458ba6c4a", "url": "https://github.com/graphql-java/graphql-java/commit/df5244482d90d830e970cd8a400281f458ba6c4a", "message": "renamed listMap to just map and added more tests", "committedDate": "2020-11-06T00:35:30Z", "type": "commit"}, {"oid": "0bcc61882786cfc4df4475dd4e9c3ba48aed5465", "url": "https://github.com/graphql-java/graphql-java/commit/0bcc61882786cfc4df4475dd4e9c3ba48aed5465", "message": "Renamed to ImmutableKit", "committedDate": "2020-11-06T00:58:36Z", "type": "commit"}, {"oid": "de88d7a80efec23de8d58fccfdd5b3e46311c510", "url": "https://github.com/graphql-java/graphql-java/commit/de88d7a80efec23de8d58fccfdd5b3e46311c510", "message": "Used ImmutableList collector", "committedDate": "2020-11-08T23:01:23Z", "type": "commit"}, {"oid": "fb7b6af61f9700b9b9e4f77a8498a394355efb27", "url": "https://github.com/graphql-java/graphql-java/commit/fb7b6af61f9700b9b9e4f77a8498a394355efb27", "message": "Used ImmutableList collector - except for sort", "committedDate": "2020-11-08T23:10:51Z", "type": "commit"}, {"oid": "03df6106bfae8bb3bb4ea7b249202333f6a5e568", "url": "https://github.com/graphql-java/graphql-java/commit/03df6106bfae8bb3bb4ea7b249202333f6a5e568", "message": "Merge remote-tracking branch 'origin/master' into immutable-collections-guava\n\n# Conflicts:\n#\tsrc/main/java/graphql/schema/DataFetchingFieldSelectionSetImpl.java\n#\tsrc/test/groovy/graphql/schema/DataFetchingFieldSelectionSetImplTest.groovy", "committedDate": "2020-11-08T23:50:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NDUzMg==", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r520354532", "bodyText": "why the format change here?", "author": "andimarek", "createdAt": "2020-11-10T07:51:54Z", "path": "src/main/java/graphql/execution/instrumentation/ChainedInstrumentation.java", "diffHunk": "@@ -71,103 +71,83 @@ public InstrumentationState createState(InstrumentationCreateStateParameters par\n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginExecution(final InstrumentationExecutionParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginExecution(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginExecution(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<Document> beginParse(InstrumentationExecutionParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginParse(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginParse(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<List<ValidationError>> beginValidation(InstrumentationValidationParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginValidation(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginValidation(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginExecuteOperation(InstrumentationExecuteOperationParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginExecuteOperation(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginExecuteOperation(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public ExecutionStrategyInstrumentationContext beginExecutionStrategy(InstrumentationExecutionStrategyParameters parameters) {\n-        return new ChainedExecutionStrategyInstrumentationContext(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginExecutionStrategy(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedExecutionStrategyInstrumentationContext(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginExecutionStrategy(parameters.withNewState(state));\n+        }));\n     }\n \n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginSubscribedFieldEvent(InstrumentationFieldParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginSubscribedFieldEvent(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {\n+            InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n+            return instrumentation.beginSubscribedFieldEvent(parameters.withNewState(state));\n+        }));\n     }\n \n     @Override\n     public InstrumentationContext<ExecutionResult> beginField(InstrumentationFieldParameters parameters) {\n-        return new ChainedInstrumentationContext<>(instrumentations.stream()\n-                .map(instrumentation -> {\n-                    InstrumentationState state = getState(instrumentation, parameters.getInstrumentationState());\n-                    return instrumentation.beginField(parameters.withNewState(state));\n-                })\n-                .collect(toList()));\n+        return new ChainedInstrumentationContext<>(map(instrumentations, instrumentation -> {", "originalCommit": "03df6106bfae8bb3bb4ea7b249202333f6a5e568", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NjkwOQ==", "url": "https://github.com/graphql-java/graphql-java/pull/2086#discussion_r520356909", "bodyText": "doesn't nee to be a copy", "author": "andimarek", "createdAt": "2020-11-10T07:56:39Z", "path": "src/main/java/graphql/schema/GraphQLSchema.java", "diffHunk": "@@ -169,7 +196,7 @@ public GraphQLObjectType getObjectType(String typeName) {\n     }\n \n     public Map<String, GraphQLNamedType> getTypeMap() {", "originalCommit": "03df6106bfae8bb3bb4ea7b249202333f6a5e568", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9e0f44d739f7e2bd58e78c4a43e075de1a99ce1", "chunk": "diff --git a/src/main/java/graphql/schema/GraphQLSchema.java b/src/main/java/graphql/schema/GraphQLSchema.java\nindex 8a6bb98c..59c19399 100644\n--- a/src/main/java/graphql/schema/GraphQLSchema.java\n+++ b/src/main/java/graphql/schema/GraphQLSchema.java\n\n@@ -196,7 +196,7 @@ public class GraphQLSchema {\n     }\n \n     public Map<String, GraphQLNamedType> getTypeMap() {\n-        return ImmutableMap.copyOf(typeMap);\n+        return typeMap;\n     }\n \n     public List<GraphQLNamedType> getAllTypesAsList() {\n"}}, {"oid": "d9e0f44d739f7e2bd58e78c4a43e075de1a99ce1", "url": "https://github.com/graphql-java/graphql-java/commit/d9e0f44d739f7e2bd58e78c4a43e075de1a99ce1", "message": "PR feedback", "committedDate": "2020-11-10T09:27:41Z", "type": "commit"}]}