{"pr_number": 1901, "pr_title": "Lazy data fetcher values support for arguments and execution step info", "pr_createdAt": "2020-05-19T01:20:51Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/1901", "timeline": [{"oid": "91cac06309694653cb66560a4ec49afcb8d005ab", "url": "https://github.com/graphql-java/graphql-java/commit/91cac06309694653cb66560a4ec49afcb8d005ab", "message": "Lazy data fetcher values support for arguments and execution step info", "committedDate": "2020-05-19T01:16:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NjkyOA==", "url": "https://github.com/graphql-java/graphql-java/pull/1901#discussion_r426976928", "bodyText": "This helper code is called by PropertyDataFetcher who already does a null check - I know its a simple IF statement but still", "author": "bbakerman", "createdAt": "2020-05-19T01:22:04Z", "path": "src/main/java/graphql/schema/PropertyDataFetcherHelper.java", "diffHunk": "@@ -37,9 +37,6 @@ public static Object getPropertyValue(String propertyName, Object object, GraphQ\n     }\n \n     public static Object getPropertyValue(String propertyName, Object object, GraphQLType graphQLType, DataFetchingEnvironment environment) {\n-        if (object == null) {\n-            return null;\n-        }", "originalCommit": "91cac06309694653cb66560a4ec49afcb8d005ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk3NzUyMg==", "url": "https://github.com/graphql-java/graphql-java/pull/1901#discussion_r426977522", "bodyText": "@andimarek @felipe-gdr  - thoughts on this code pattern??\nMy aim is to not lock - so possible that IF a DataFetchingEnv some how crossed threads then its possible that 2 reads cause 2 supplier reads.  But its lock free and I think MOST cases will be read on the thread that has the DF\nTo be pathological, you would need to read it on thread A and then read it again on thread B.", "author": "bbakerman", "createdAt": "2020-05-19T01:24:23Z", "path": "src/main/java/graphql/util/MemoizedSupplier.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package graphql.util;\n+\n+import java.util.function.Supplier;\n+\n+import static graphql.Assert.assertNotNull;\n+\n+class MemoizedSupplier<T> implements Supplier<T> {", "originalCommit": "91cac06309694653cb66560a4ec49afcb8d005ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}