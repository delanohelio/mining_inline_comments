{"pr_number": 2078, "pr_title": "Schema transformer fix", "pr_createdAt": "2020-10-19T21:56:16Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2078", "timeline": [{"oid": "9a8cb7b34763d558816cd96afd45d0def1512ab4", "url": "https://github.com/graphql-java/graphql-java/commit/9a8cb7b34763d558816cd96afd45d0def1512ab4", "message": "Test showing the failure on schema transform", "committedDate": "2020-06-08T08:45:59Z", "type": "commit"}, {"oid": "71f63f87fada260690c992125c2fdf36cca686ff", "url": "https://github.com/graphql-java/graphql-java/commit/71f63f87fada260690c992125c2fdf36cca686ff", "message": "Merge branch 'master' into 1928-npe-in-breadcrumb-code", "committedDate": "2020-10-17T22:19:52Z", "type": "commit"}, {"oid": "9191303243201652a695aa1f422163914838c6ae", "url": "https://github.com/graphql-java/graphql-java/commit/9191303243201652a695aa1f422163914838c6ae", "message": "refactor schematransformer to use top sort instead of depth for traversing the graph", "committedDate": "2020-10-19T20:03:25Z", "type": "commit"}, {"oid": "359f0f5dbbd5bd5252ee66a64d6c79cddaf81dc8", "url": "https://github.com/graphql-java/graphql-java/commit/359f0f5dbbd5bd5252ee66a64d6c79cddaf81dc8", "message": "remove equals/hashcode for GraphQLList and GraphQLNonNull", "committedDate": "2020-10-19T21:23:53Z", "type": "commit"}, {"oid": "b59cf7b32b8fd74c77a34319e7ef7ef74d7c82a3", "url": "https://github.com/graphql-java/graphql-java/commit/b59cf7b32b8fd74c77a34319e7ef7ef74d7c82a3", "message": "cleanup", "committedDate": "2020-10-19T21:55:32Z", "type": "commit"}, {"oid": "81e3aa2c527eae52fc8e689c86ff46036694df47", "url": "https://github.com/graphql-java/graphql-java/commit/81e3aa2c527eae52fc8e689c86ff46036694df47", "message": "cleanup", "committedDate": "2020-10-19T21:58:11Z", "type": "commit"}, {"oid": "0d340cf0451ef53ed2b268cf6c152e3cf1346d58", "url": "https://github.com/graphql-java/graphql-java/commit/0d340cf0451ef53ed2b268cf6c152e3cf1346d58", "message": "cleanup", "committedDate": "2020-10-19T22:34:01Z", "type": "commit"}, {"oid": "4d4ac24d7e5eedda43aac1a9e5a6b42de40a2ed8", "url": "https://github.com/graphql-java/graphql-java/commit/4d4ac24d7e5eedda43aac1a9e5a6b42de40a2ed8", "message": "cleanup", "committedDate": "2020-10-19T22:47:25Z", "type": "commit"}, {"oid": "6b5b347af23cf73df43654506afdbd2b24f01cb0", "url": "https://github.com/graphql-java/graphql-java/commit/6b5b347af23cf73df43654506afdbd2b24f01cb0", "message": "add comment regarding equals", "committedDate": "2020-10-20T00:54:23Z", "type": "commit"}, {"oid": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "url": "https://github.com/graphql-java/graphql-java/commit/c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "message": "add additional test", "committedDate": "2020-10-20T01:02:08Z", "type": "commit"}, {"oid": "9f45300f9ca7fd0fc47536dc2f09bcde62d92dde", "url": "https://github.com/graphql-java/graphql-java/commit/9f45300f9ca7fd0fc47536dc2f09bcde62d92dde", "message": "implement final equals/hashcode with super calls to make sure it will not be broken in the future", "committedDate": "2020-10-20T04:41:51Z", "type": "commit"}, {"oid": "92b3559bd0a80f9af977e5ff9e523b2063c21a11", "url": "https://github.com/graphql-java/graphql-java/commit/92b3559bd0a80f9af977e5ff9e523b2063c21a11", "message": "handle empty breadcrumb list", "committedDate": "2020-10-20T04:47:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2Nzg4OQ==", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508167889", "bodyText": "Should also have hashCode() - HashSet relies on it not just equals", "author": "bbakerman", "createdAt": "2020-10-20T02:17:52Z", "path": "src/main/java/graphql/schema/GraphQLSchemaElement.java", "diffHunk": "@@ -29,4 +29,15 @@ default GraphQLSchemaElement withNewChildren(SchemaElementChildrenContainer newC\n     }\n \n     TraversalControl accept(TraverserContext<GraphQLSchemaElement> context, GraphQLTypeVisitor visitor);\n+\n+\n+    /**\n+     * No GraphQLSchemaElement implements `equals` because we need object identity\n+     * to treat a GraphQLSchema as an abstract graph.\n+     *\n+     * @param obj\n+     *\n+     * @return\n+     */\n+    boolean equals(Object obj);", "originalCommit": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f45300f9ca7fd0fc47536dc2f09bcde62d92dde", "chunk": "diff --git a/src/main/java/graphql/schema/GraphQLSchemaElement.java b/src/main/java/graphql/schema/GraphQLSchemaElement.java\nindex d4ec1759..589d5563 100644\n--- a/src/main/java/graphql/schema/GraphQLSchemaElement.java\n+++ b/src/main/java/graphql/schema/GraphQLSchemaElement.java\n\n@@ -40,4 +40,12 @@ public interface GraphQLSchemaElement {\n      * @return\n      */\n     boolean equals(Object obj);\n+\n+    /**\n+     * No GraphQLSchemaElement implements `equals/hashCode` because we need object identity\n+     * to treat a GraphQLSchema as an abstract graph.\n+     *\n+     * @return\n+     */\n+    int hashCode();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3NzU2NA==", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508177564", "bodyText": "We really have entered DAG academia havent we.  Glad we have you!", "author": "bbakerman", "createdAt": "2020-10-20T02:53:45Z", "path": "src/main/java/graphql/schema/SchemaTransformer.java", "diffHunk": "@@ -186,92 +198,125 @@ public TraversalControl backRef(TraverserContext<GraphQLSchemaElement> context)\n         return newSchema;\n     }\n \n-    private void toRootNode(List<NodeZipper<GraphQLSchemaElement>> zippers,\n-                            Map<NodeZipper<GraphQLSchemaElement>, List<List<Breadcrumb<GraphQLSchemaElement>>>> breadcrumbsByZipper,\n-                            Map<GraphQLSchemaElement, NodeZipper<GraphQLSchemaElement>> zipperByNodeAfterTraversing) {\n-        if (zippers.size() == 0) {\n-            return;\n+    private List<GraphQLSchemaElement> topologicalSort(Set<GraphQLSchemaElement> allNodes, Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        List<GraphQLSchemaElement> result = new ArrayList<>();\n+        Set<GraphQLSchemaElement> notPermMarked = new LinkedHashSet<>(allNodes);\n+        Set<GraphQLSchemaElement> tempMarked = new LinkedHashSet<>();\n+        Set<GraphQLSchemaElement> permMarked = new LinkedHashSet<>();\n+        /**", "originalCommit": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE3Nzk0NA==", "url": "https://github.com/graphql-java/graphql-java/pull/2078#discussion_r508177944", "bodyText": "This feels like it could be a generic utility.  A DagUtil kinda class", "author": "bbakerman", "createdAt": "2020-10-20T02:55:12Z", "path": "src/main/java/graphql/schema/SchemaTransformer.java", "diffHunk": "@@ -186,92 +198,125 @@ public TraversalControl backRef(TraverserContext<GraphQLSchemaElement> context)\n         return newSchema;\n     }\n \n-    private void toRootNode(List<NodeZipper<GraphQLSchemaElement>> zippers,\n-                            Map<NodeZipper<GraphQLSchemaElement>, List<List<Breadcrumb<GraphQLSchemaElement>>>> breadcrumbsByZipper,\n-                            Map<GraphQLSchemaElement, NodeZipper<GraphQLSchemaElement>> zipperByNodeAfterTraversing) {\n-        if (zippers.size() == 0) {\n-            return;\n+    private List<GraphQLSchemaElement> topologicalSort(Set<GraphQLSchemaElement> allNodes, Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        List<GraphQLSchemaElement> result = new ArrayList<>();\n+        Set<GraphQLSchemaElement> notPermMarked = new LinkedHashSet<>(allNodes);\n+        Set<GraphQLSchemaElement> tempMarked = new LinkedHashSet<>();\n+        Set<GraphQLSchemaElement> permMarked = new LinkedHashSet<>();\n+        /**\n+         * Taken from: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n+         * while exists nodes without a permanent mark do\n+         *     select an unmarked node n\n+         *     visit(n)\n+         */\n+        while (true) {\n+            Iterator<GraphQLSchemaElement> iterator = notPermMarked.iterator();\n+            if (!iterator.hasNext()) {\n+                break;\n+            }\n+            GraphQLSchemaElement n = iterator.next();\n+            iterator.remove();\n+            visit(n, tempMarked, permMarked, notPermMarked, result, reverseDependencies);\n         }\n+        return result;\n+    }\n \n-        /*\n-         * Because every node can have multiple parents (not a tree, but a graph) we have a list of breadcrumbs per zipper.\n-         * Or to put it differently: there is not one path from a node to the dummyRoot, but multiple ones with a different length\n+    private void visit(GraphQLSchemaElement n,\n+                       Set<GraphQLSchemaElement> tempMarked,\n+                       Set<GraphQLSchemaElement> permMarked,\n+                       Set<GraphQLSchemaElement> notPermMarked,\n+                       List<GraphQLSchemaElement> result,\n+                       Map<GraphQLSchemaElement, List<GraphQLSchemaElement>> reverseDependencies) {\n+        /**\n+         * Taken from: https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search\n+         * if n has a permanent mark then\n+         *         return\n+         *     if n has a temporary mark then\n+         *         stop   (not a DAG)\n+         *\n+         *     mark n with a temporary mark\n+         *\n+         *     for each node m with an edge from n to m do\n+         *         visit(m)\n+         *\n+         *     remove temporary mark from n\n+         *     mark n with a permanent mark\n+         *     add n to head of L\n          */\n+        if (permMarked.contains(n)) {\n+            return;\n+        }\n+        if (tempMarked.contains(n)) {\n+            Assert.assertShouldNeverHappen(\"NOT A DAG: %s has temp mark\", n);\n+            return;\n+        }\n+        tempMarked.add(n);\n+        if (reverseDependencies.containsKey(n)) {\n+            for (GraphQLSchemaElement m : reverseDependencies.get(n)) {\n+                visit(m, tempMarked, permMarked, notPermMarked, result, reverseDependencies);\n+            }\n+        }\n+        tempMarked.remove(n);\n+        permMarked.add(n);\n+        notPermMarked.remove(n);\n+        result.add(n);\n+    }", "originalCommit": "c0fd714089f9513f26e9a89b572ce54ab3e1dab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}