{"pr_number": 2085, "pr_title": "#1914 Use default values for fields of input types when default argument value is provided", "pr_createdAt": "2020-10-28T02:36:50Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2085", "timeline": [{"oid": "b0c8753de5c0dd0b09ea53d7644dbf419ef84c15", "url": "https://github.com/graphql-java/graphql-java/commit/b0c8753de5c0dd0b09ea53d7644dbf419ef84c15", "message": "Use default values for fields of input types when default arguments are provided", "committedDate": "2020-10-28T02:07:57Z", "type": "commit"}, {"oid": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0", "url": "https://github.com/graphql-java/graphql-java/commit/f71a196f7c0fb8fc5c37c2f1fd868136e683cda0", "message": "#1914 Shortened test name", "committedDate": "2020-10-28T02:44:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzIwNQ==", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r513147205", "bodyText": "Performance of this statement can be improved by keeping a map of Object field's name and the field itself in ObjectValue class.", "author": "priyaaggarwal24", "createdAt": "2020-10-28T02:47:06Z", "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()", "originalCommit": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzOTg2MA==", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514639860", "bodyText": "fields of objects are typically < 10 say - iterating them is not  a real problem.  Also schema building is KN OWN to be a heavy thing they can be slower (where slower is not really slow) - So there are no perf savings to be had in schema generation as a rule\nThat is not to say it should be terrible - but that when people come to us about performance its NOT in the schema gen side of things", "author": "bbakerman", "createdAt": "2020-10-30T00:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY3NTE2Mg==", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514675162", "bodyText": "ok, thanks", "author": "priyaaggarwal24", "createdAt": "2020-10-30T01:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f8dbacc8ede09935a5a5dbf50d11813899c5314f", "chunk": "diff --git a/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java b/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java\nindex 6f7899ab..df4c35ce 100644\n--- a/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java\n+++ b/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java\n\n@@ -295,14 +295,22 @@ public class SchemaGeneratorHelper {\n         Map<String, Object> map = new LinkedHashMap<>();\n         objectType.getFieldDefinitions().forEach(\n                 f -> {\n-                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()\n-                            .filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\n-                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()): f.getDefaultValue());\n+                    final Value<?> fieldValueFromDefaultObjectValue = getFieldValueFromObjectValue(defaultValue, f.getName());\n+                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()) : f.getDefaultValue());\n                 }\n         );\n         return map;\n     }\n \n+    Value<?> getFieldValueFromObjectValue(final ObjectValue objectValue, final String fieldName) {\n+        return objectValue.getObjectFields()\n+                .stream()\n+                .filter(dvf -> dvf.getName().equals(fieldName))\n+                .map(ObjectField::getValue)\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n     String buildDescription(Node<?> node, Description description) {\n         if (description != null) {\n             return description.getContent();\n"}}, {"oid": "e7ad9278e7530a4e05892e03b36a18eabdfb18fb", "url": "https://github.com/graphql-java/graphql-java/commit/e7ad9278e7530a4e05892e03b36a18eabdfb18fb", "message": "#1914 Added a test to verify if null value provided in input overrides default", "committedDate": "2020-10-30T01:30:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NjQ1NA==", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514646454", "bodyText": "final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream().filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\nends up really hard to read.  I like to put in simple methods to represent this\nfinal Value<?> fieldValueFromDefaultObjectValue = buildFieldDefaultValue(defaultValue,...)", "author": "bbakerman", "createdAt": "2020-10-30T00:47:42Z", "path": "src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java", "diffHunk": "@@ -292,8 +293,13 @@ Object buildArrayValue(GraphQLType requiredType, ArrayValue arrayValue) {\n \n     Object buildObjectValue(ObjectValue defaultValue, GraphQLInputObjectType objectType) {\n         Map<String, Object> map = new LinkedHashMap<>();\n-        defaultValue.getObjectFields().forEach(of -> map.put(of.getName(),\n-                buildValue(of.getValue(), objectType.getField(of.getName()).getType())));\n+        objectType.getFieldDefinitions().forEach(\n+                f -> {\n+                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()\n+                            .filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\n+                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()): f.getDefaultValue());\n+                }\n+        );\n         return map;", "originalCommit": "f71a196f7c0fb8fc5c37c2f1fd868136e683cda0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY5NTA2MA==", "url": "https://github.com/graphql-java/graphql-java/pull/2085#discussion_r514695060", "bodyText": "@bbakerman Done. Refactored the long statement into a method.", "author": "priyaaggarwal24", "createdAt": "2020-10-30T01:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NjQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "f8dbacc8ede09935a5a5dbf50d11813899c5314f", "chunk": "diff --git a/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java b/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java\nindex 6f7899ab..df4c35ce 100644\n--- a/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java\n+++ b/src/main/java/graphql/schema/idl/SchemaGeneratorHelper.java\n\n@@ -295,14 +295,22 @@ public class SchemaGeneratorHelper {\n         Map<String, Object> map = new LinkedHashMap<>();\n         objectType.getFieldDefinitions().forEach(\n                 f -> {\n-                    final Value<?> fieldValueFromDefaultObjectValue = defaultValue.getObjectFields().stream()\n-                            .filter(dvf -> dvf.getName().equals(f.getName())).map(ObjectField::getValue).findFirst().orElse(null);\n-                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()): f.getDefaultValue());\n+                    final Value<?> fieldValueFromDefaultObjectValue = getFieldValueFromObjectValue(defaultValue, f.getName());\n+                    map.put(f.getName(), fieldValueFromDefaultObjectValue != null ? buildValue(fieldValueFromDefaultObjectValue, f.getType()) : f.getDefaultValue());\n                 }\n         );\n         return map;\n     }\n \n+    Value<?> getFieldValueFromObjectValue(final ObjectValue objectValue, final String fieldName) {\n+        return objectValue.getObjectFields()\n+                .stream()\n+                .filter(dvf -> dvf.getName().equals(fieldName))\n+                .map(ObjectField::getValue)\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n     String buildDescription(Node<?> node, Description description) {\n         if (description != null) {\n             return description.getContent();\n"}}, {"oid": "f8dbacc8ede09935a5a5dbf50d11813899c5314f", "url": "https://github.com/graphql-java/graphql-java/commit/f8dbacc8ede09935a5a5dbf50d11813899c5314f", "message": "#1914 Added a test with field having null value and refactored a long statement into a method", "committedDate": "2020-10-30T01:51:13Z", "type": "commit"}, {"oid": "edf49a29fc6c5f4177cf34d3cc11a4c653ca99f6", "url": "https://github.com/graphql-java/graphql-java/commit/edf49a29fc6c5f4177cf34d3cc11a4c653ca99f6", "message": "#1914 Updated test to have a field with default value null", "committedDate": "2020-10-30T01:57:50Z", "type": "commit"}]}