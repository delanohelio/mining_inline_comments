{"pr_number": 2041, "pr_title": "minor cleanups", "pr_createdAt": "2020-09-17T11:33:33Z", "pr_url": "https://github.com/graphql-java/graphql-java/pull/2041", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3Mjg3Mg==", "url": "https://github.com/graphql-java/graphql-java/pull/2041#discussion_r490172872", "bodyText": "technically a breaking change but hopefully nobody is using it", "author": "dfa1", "createdAt": "2020-09-17T11:34:46Z", "path": "src/main/java/graphql/execution/ExecutionStrategy.java", "diffHunk": "@@ -206,13 +206,6 @@ protected ExecutionStrategy(DataFetcherExceptionHandler dataFetcherExceptionHand\n         return result;\n     }\n \n-    protected CompletableFuture<FieldValueInfo> resolveFieldWithInfoToNull(ExecutionContext executionContext, ExecutionStrategyParameters parameters) {", "originalCommit": "17214ca86bade20e879dcfe3d10c5da7f577b2eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38a937adc80d0d3c7f3f29c095629d23446f1478", "chunk": "diff --git a/src/main/java/graphql/execution/ExecutionStrategy.java b/src/main/java/graphql/execution/ExecutionStrategy.java\nindex a5501aa4..41ce9171 100644\n--- a/src/main/java/graphql/execution/ExecutionStrategy.java\n+++ b/src/main/java/graphql/execution/ExecutionStrategy.java\n\n@@ -206,6 +206,13 @@ public abstract class ExecutionStrategy {\n         return result;\n     }\n \n+    protected CompletableFuture<FieldValueInfo> resolveFieldWithInfoToNull(ExecutionContext executionContext, ExecutionStrategyParameters parameters) {\n+        FetchedValue fetchedValue = FetchedValue.newFetchedValue().build();\n+        FieldValueInfo fieldValueInfo = completeField(executionContext, parameters, fetchedValue);\n+        return CompletableFuture.completedFuture(fieldValueInfo);\n+    }\n+\n+\n     /**\n      * Called to fetch a value for a field from the {@link DataFetcher} associated with the field\n      * {@link GraphQLFieldDefinition}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI1MzE5NQ==", "url": "https://github.com/graphql-java/graphql-java/pull/2041#discussion_r491253195", "bodyText": "@andimarek - do you want these methods?  They clearly have no tests or usage otherwise it would blow up", "author": "bbakerman", "createdAt": "2020-09-19T01:42:03Z", "path": "src/main/java/graphql/execution/Async.java", "diffHunk": "@@ -126,33 +127,6 @@\n         return result;\n     }\n \n-    public static <T> void copyResults(CompletableFuture<T> source, CompletableFuture<T> target) {\n-        source.whenComplete((o, throwable) -> {\n-            if (throwable != null) {\n-                target.completeExceptionally(throwable);\n-                return;\n-            }\n-            target.complete(o);\n-        });\n-    }\n-\n-\n-    public static <U, T> CompletableFuture<U> reduce(List<CompletableFuture<T>> values, U initialValue, BiFunction<U, T, U> aggregator) {\n-        CompletableFuture<U> result = new CompletableFuture<>();\n-        reduceImpl(values, 0, initialValue, aggregator, result);\n-        return result;\n-    }\n-\n-    public static <U, T> CompletableFuture<U> reduce(CompletableFuture<List<T>> values, U initialValue, BiFunction<U, T, U> aggregator) {\n-        return values.thenApply(list -> {\n-            U result = initialValue;\n-            for (T value : list) {\n-                result = aggregator.apply(result, value);\n-            }\n-            return result;\n-        });\n-    }", "originalCommit": "17214ca86bade20e879dcfe3d10c5da7f577b2eb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "38a937adc80d0d3c7f3f29c095629d23446f1478", "chunk": "diff --git a/src/main/java/graphql/execution/Async.java b/src/main/java/graphql/execution/Async.java\nindex 227fa856..824522f7 100644\n--- a/src/main/java/graphql/execution/Async.java\n+++ b/src/main/java/graphql/execution/Async.java\n\n@@ -127,6 +127,33 @@ public class Async {\n         return result;\n     }\n \n+    public static <T> void copyResults(CompletableFuture<T> source, CompletableFuture<T> target) {\n+        source.whenComplete((o, throwable) -> {\n+            if (throwable != null) {\n+                target.completeExceptionally(throwable);\n+                return;\n+            }\n+            target.complete(o);\n+        });\n+    }\n+\n+\n+    public static <U, T> CompletableFuture<U> reduce(List<CompletableFuture<T>> values, U initialValue, BiFunction<U, T, U> aggregator) {\n+        CompletableFuture<U> result = new CompletableFuture<>();\n+        reduceImpl(values, 0, initialValue, aggregator, result);\n+        return result;\n+    }\n+\n+    public static <U, T> CompletableFuture<U> reduce(CompletableFuture<List<T>> values, U initialValue, BiFunction<U, T, U> aggregator) {\n+        return values.thenApply(list -> {\n+            U result = initialValue;\n+            for (T value : list) {\n+                result = aggregator.apply(result, value);\n+            }\n+            return result;\n+        });\n+    }\n+\n     public static <U, T> CompletableFuture<List<U>> flatMap(List<T> inputs, Function<T, CompletableFuture<U>> mapper) {\n         List<CompletableFuture<U>> collect = inputs\n                 .stream()\n"}}, {"oid": "38a937adc80d0d3c7f3f29c095629d23446f1478", "url": "https://github.com/graphql-java/graphql-java/commit/38a937adc80d0d3c7f3f29c095629d23446f1478", "message": "minor cleanups\n\n- presizing of few internal data structures\n- removing few unnecessary annotations", "committedDate": "2020-09-19T15:48:33Z", "type": "commit"}, {"oid": "38a937adc80d0d3c7f3f29c095629d23446f1478", "url": "https://github.com/graphql-java/graphql-java/commit/38a937adc80d0d3c7f3f29c095629d23446f1478", "message": "minor cleanups\n\n- presizing of few internal data structures\n- removing few unnecessary annotations", "committedDate": "2020-09-19T15:48:33Z", "type": "forcePushed"}]}