{"pr_number": 356, "pr_title": "Migrate the pxf-jdbc project to spring boot", "pr_createdAt": "2020-05-12T21:30:01Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/356", "timeline": [{"oid": "4646e60060f47fbe9af08f780251e720ccd1b55b", "url": "https://github.com/greenplum-db/pxf/commit/4646e60060f47fbe9af08f780251e720ccd1b55b", "message": "Migrate the pxf-jdbc project to spring boot\n\n- Update top level settings.gradle to include pxf-jdbc\n- Add new build.gradle for pxf-jdbc\n- all existing unit tests should be ported to junit 5\n- jdbc profiles should be functional", "committedDate": "2020-05-13T11:07:29Z", "type": "commit"}, {"oid": "4646e60060f47fbe9af08f780251e720ccd1b55b", "url": "https://github.com/greenplum-db/pxf/commit/4646e60060f47fbe9af08f780251e720ccd1b55b", "message": "Migrate the pxf-jdbc project to spring boot\n\n- Update top level settings.gradle to include pxf-jdbc\n- Add new build.gradle for pxf-jdbc\n- all existing unit tests should be ported to junit 5\n- jdbc profiles should be functional", "committedDate": "2020-05-13T11:07:29Z", "type": "forcePushed"}, {"oid": "d18f570c51f83edfca06450e52d98378ca4581af", "url": "https://github.com/greenplum-db/pxf/commit/d18f570c51f83edfca06450e52d98378ca4581af", "message": "Bootify the project", "committedDate": "2020-05-14T20:24:49Z", "type": "commit"}, {"oid": "f1142118af31adfda8bab73ae7db4b068c07b0de", "url": "https://github.com/greenplum-db/pxf/commit/f1142118af31adfda8bab73ae7db4b068c07b0de", "message": "Fix unit tests after bootifying the project", "committedDate": "2020-05-14T20:25:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTM4Nw==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426821387", "bodyText": "how are we able to get rid of mockito?", "author": "oliverralbertini", "createdAt": "2020-05-18T18:37:55Z", "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java", "diffHunk": "@@ -6,8 +6,6 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n ", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzU1MA==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426933550", "bodyText": "we no longer need the mockConfigurationFactory, because the configuration creation happens at the rest entrypoint", "author": "frankgh", "createdAt": "2020-05-18T22:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyMTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4368ac6b4758a96da4afd75a41fd6142967a35c8", "chunk": "diff --git a/server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java b/server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java\ndeleted file mode 100644\nindex eefb053c..00000000\n--- a/server/pxf-api/src/test/java/org/greenplum/pxf/api/model/BasePluginTest.java\n+++ /dev/null\n\n@@ -1,31 +0,0 @@\n-package org.greenplum.pxf.api.model;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-public class BasePluginTest {\n-\n-    @Test\n-    public void testDefaults() {\n-        BasePlugin basePlugin = new BasePlugin();\n-\n-        assertTrue(basePlugin.isThreadSafe());\n-        assertFalse(basePlugin.isInitialized());\n-    }\n-\n-    @Test\n-    public void testInitialize() {\n-        Configuration configuration = new Configuration();\n-        RequestContext context = new RequestContext();\n-\n-        BasePlugin basePlugin = new BasePlugin();\n-        basePlugin.initialize(context, configuration);\n-        assertTrue(basePlugin.isInitialized());\n-        assertEquals(configuration, basePlugin.configuration);\n-        assertEquals(context, basePlugin.context);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTYxMw==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426825613", "bodyText": "was there a whitespace change in this file?", "author": "oliverralbertini", "createdAt": "2020-05-18T18:46:14Z", "path": "server/pxf-jdbc/src/test/java/org/greenplum/pxf/plugins/jdbc/partitioning/DatePartitionTest.java", "diffHunk": "@@ -1,125 +1,115 @@\n-package org.greenplum.pxf.plugins.jdbc.partitioning;\r\n-\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements.  See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership.  The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License.  You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied.  See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-\r\n-import org.greenplum.pxf.plugins.jdbc.utils.DbProduct;\r\n-import org.junit.Rule;\r\n-import org.junit.Test;\r\n-import org.junit.rules.ExpectedException;\r\n-\r\n-import java.time.LocalDate;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-public class DatePartitionTest {\r\n-    @Rule\r\n-    public ExpectedException thrown = ExpectedException.none();\r\n-\r\n-    private DbProduct dbProduct = DbProduct.POSTGRES;\r\n-\r\n-    private final String COL_RAW = \"col\";\r\n-    private final String QUOTE = \"\\\"\";\r\n-    private final String COL = QUOTE + COL_RAW + QUOTE;\r\n-\r\n-    @Test\r\n-    public void testNormal() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'2000-01-01' AND \" + COL + \" < date'2000-01-02'\",\r\n-                constraint\r\n-        );\r\n-        assertEquals(COL_RAW, partition.getColumn());\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testRightBounded() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, null, LocalDate.parse(\"2000-01-01\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" < date'2000-01-01'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testLeftBounded() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), null);\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'2000-01-01'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testSpecialDateValue() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"0001-01-01\"), LocalDate.parse(\"1970-01-02\"));\r\n-        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\r\n-\r\n-        assertEquals(\r\n-                COL + \" >= date'0001-01-01' AND \" + COL + \" < date'1970-01-02'\",\r\n-                constraint\r\n-        );\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidBothBoundariesNull() {\r\n-        thrown.expect(RuntimeException.class);\r\n-        thrown.expectMessage(\"boundaries\");\r\n-\r\n-        new DatePartition(COL_RAW, null, null);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidColumnNull() {\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        new DatePartition(null, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidEqualBoundaries() {\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-01\"));\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidNullQuoteString() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        partition.toSqlConstraint(null, dbProduct);\r\n-    }\r\n-\r\n-    @Test\r\n-    public void testInvalidNullDbProduct() {\r\n-        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\r\n-\r\n-        thrown.expect(RuntimeException.class);\r\n-\r\n-        partition.toSqlConstraint(COL, null);\r\n-    }\r\n-}\r\n+package org.greenplum.pxf.plugins.jdbc.partitioning;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import org.greenplum.pxf.plugins.jdbc.utils.DbProduct;\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.LocalDate;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class DatePartitionTest {\n+\n+    private DbProduct dbProduct = DbProduct.POSTGRES;\n+\n+    private final String COL_RAW = \"col\";\n+    private final String QUOTE = \"\\\"\";\n+    private final String COL = QUOTE + COL_RAW + QUOTE;\n+\n+    @Test\n+    public void testNormal() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'2000-01-01' AND \" + COL + \" < date'2000-01-02'\",\n+            constraint\n+        );\n+        assertEquals(COL_RAW, partition.getColumn());\n+    }\n+\n+    @Test\n+    public void testRightBounded() {\n+        DatePartition partition = new DatePartition(COL_RAW, null, LocalDate.parse(\"2000-01-01\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" < date'2000-01-01'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testLeftBounded() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), null);\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'2000-01-01'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testSpecialDateValue() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"0001-01-01\"), LocalDate.parse(\"1970-01-02\"));\n+        String constraint = partition.toSqlConstraint(QUOTE, dbProduct);\n+\n+        assertEquals(\n+            COL + \" >= date'0001-01-01' AND \" + COL + \" < date'1970-01-02'\",\n+            constraint\n+        );\n+    }\n+\n+    @Test\n+    public void testInvalidBothBoundariesNull() {\n+        Exception ex = assertThrows(RuntimeException.class,\n+            () -> new DatePartition(COL_RAW, null, null));\n+        assertEquals(\"Both boundaries cannot be null\", ex.getMessage());\n+    }\n+\n+    @Test\n+    public void testInvalidColumnNull() {\n+        assertThrows(RuntimeException.class,\n+            () -> new DatePartition(null, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\")));\n+    }\n+\n+    @Test\n+    public void testInvalidEqualBoundaries() {\n+        assertThrows(RuntimeException.class,\n+            () -> new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-01\")));\n+    }\n+\n+    @Test\n+    public void testInvalidNullQuoteString() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        assertThrows(RuntimeException.class,\n+            () -> partition.toSqlConstraint(null, dbProduct));\n+    }\n+\n+    @Test\n+    public void testInvalidNullDbProduct() {\n+        DatePartition partition = new DatePartition(COL_RAW, LocalDate.parse(\"2000-01-01\"), LocalDate.parse(\"2000-01-02\"));\n+        assertThrows(RuntimeException.class,\n+            () -> partition.toSqlConstraint(COL, null));\n+    }\n+}", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzk1MA==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r426933950", "bodyText": "yikes, possible", "author": "frankgh", "createdAt": "2020-05-18T22:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgyNTYxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NTc0Mw==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428965743", "bodyText": "here and elsewhere, instead of passing configuration around we can have it available from the RequestContext", "author": "denalex", "createdAt": "2020-05-21T23:21:49Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/BasePluginFactory.java", "diffHunk": "@@ -51,7 +55,7 @@ public T getPlugin(RequestContext requestContext) {\n         }\n \n         // initialize the instance\n-        instance.initialize(requestContext);\n+        instance.initialize(context, configuration);", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ec75121360dd65a501d96cce9e909a87e0ac2", "chunk": "diff --git a/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/BasePluginFactory.java b/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/BasePluginFactory.java\ndeleted file mode 100644\nindex 79c6af5f..00000000\n--- a/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/BasePluginFactory.java\n+++ /dev/null\n\n@@ -1,68 +0,0 @@\n-package org.greenplum.pxf.api.utilities;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.hadoop.conf.Configuration;\n-import org.greenplum.pxf.api.model.Plugin;\n-import org.greenplum.pxf.api.model.RequestContext;\n-\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-\n-public abstract class BasePluginFactory<T extends Plugin> implements PluginFactory<T> {\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public T getPlugin(RequestContext context, Configuration configuration) {\n-\n-        // get the class name of the plugin\n-        String pluginClassName = getPluginClassName(context);\n-        if (StringUtils.isBlank(pluginClassName)) {\n-            throw new RuntimeException(\"Could not determine plugin class name\");\n-        }\n-\n-        // load the class by name\n-        Class<?> cls;\n-        try {\n-            cls = Class.forName(pluginClassName);\n-        } catch (ClassNotFoundException e) {\n-            throw new RuntimeException(String.format(\"Class %s is not found\", pluginClassName), e);\n-        }\n-\n-        // check if the class is a plugin\n-        if (! Plugin.class.isAssignableFrom(cls)) {\n-            throw new RuntimeException(String.format(\"Class %s does not implement Plugin interface\", pluginClassName));\n-        }\n-\n-        // get the empty constructor\n-        Constructor<?> con;\n-        try {\n-            con = cls.getConstructor();\n-        } catch (NoSuchMethodException e) {\n-            throw new RuntimeException(String.format(\"Class %s does not have an empty constructor\", pluginClassName));\n-        }\n-\n-        // create plugin instance\n-        Plugin instance;\n-        try {\n-            instance = (Plugin) con.newInstance();\n-        } catch (InvocationTargetException e) {\n-            throw (e.getCause() != null) ? new RuntimeException(e.getCause()) :\n-                                           new RuntimeException(e);\n-        } catch (Exception e) {\n-            throw new RuntimeException(String.format(\"Class %s could not be instantiated\", pluginClassName), e);\n-        }\n-\n-        // initialize the instance\n-        instance.initialize(context, configuration);\n-\n-        // cast into a target type\n-        @SuppressWarnings(\"unchecked\")\n-        T castInstance = (T) instance;\n-\n-        return castInstance;\n-    }\n-\n-    abstract protected String getPluginClassName(RequestContext requestContext);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NjMwOA==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428966308", "bodyText": "why is this commented out ?", "author": "denalex", "createdAt": "2020-05-21T23:23:48Z", "path": "server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java", "diffHunk": "@@ -456,14 +461,14 @@ public static void closeStatementAndConnection(Statement statement) throws SQLEx\n      * @throws Exception\r\n      */\r\n     private Connection getConnectionInternal() throws Exception {\r\n-        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\r\n-            return SecureLogin.getInstance().getLoginUser(context, configuration).\r\n-                    doAs((PrivilegedExceptionAction<Connection>) () ->\r\n-                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\r\n-\r\n-        } else {\r\n+//        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\r\n+////            return SecureLogin.getInstance().getLoginUser(context, configuration).\r\n+////                    doAs((PrivilegedExceptionAction<Connection>) () ->\r\n+////                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\r\n+//\r\n+//        } else {\r", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTI4MQ==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r429009281", "bodyText": "forgot to uncomment. restoring now..", "author": "frankgh", "createdAt": "2020-05-22T02:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NjMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ae0ec75121360dd65a501d96cce9e909a87e0ac2", "chunk": "diff --git a/server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java b/server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java\nindex eabba112..d7157b2b 100644\n--- a/server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java\n+++ b/server/pxf-jdbc/src/main/java/org/greenplum/pxf/plugins/jdbc/JdbcBasePlugin.java\n\n@@ -458,24 +452,23 @@ public class JdbcBasePlugin extends BasePlugin {\n      *\n      * @return for a Kerberized Hive JDBC connection, returns a new connection as the loginUser.\n      * Otherwise, it returns a new connection.\n-     * @throws Exception\n+     * @throws Exception throws when an error occurs\n      */\n     private Connection getConnectionInternal() throws Exception {\n-//        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\n-////            return SecureLogin.getInstance().getLoginUser(context, configuration).\n-////                    doAs((PrivilegedExceptionAction<Connection>) () ->\n-////                            connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\n-//\n-//        } else {\n+        Configuration configuration = context.getConfiguration();\n+        if (Utilities.isSecurityEnabled(configuration) && StringUtils.startsWith(jdbcUrl, HIVE_URL_PREFIX)) {\n+            return secureLogin.getLoginUser(context, configuration).doAs((PrivilegedExceptionAction<Connection>) () ->\n+                    connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier));\n+        } else {\n             return connectionManager.getConnection(context.getServerName(), jdbcUrl, connectionConfiguration, isConnectionPoolUsed, poolConfiguration, poolQualifier);\n-//        }\n+        }\n     }\n \n     /**\n      * Close a JDBC connection\n      *\n      * @param connection connection to close\n-     * @throws SQLException\n+     * @throws SQLException throws when a SQLException occurs\n      */\n     private static void closeConnection(Connection connection) throws SQLException {\n         if (connection == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NzY1Ng==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428967656", "bodyText": "can this be autowired rather than directly obtained from the appContext ?", "author": "denalex", "createdAt": "2020-05-21T23:28:50Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java", "diffHunk": "@@ -26,7 +34,7 @@\n     @Bean\n     public FilterRegistrationBean<SecurityServletFilter> registerSecurityServletFilter() {\n         FilterRegistrationBean<SecurityServletFilter> registrationBean = new FilterRegistrationBean<>();\n-        registrationBean.setFilter(new SecurityServletFilter());\n+        registrationBean.setFilter(applicationContext.getBean(SecurityServletFilter.class));", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMDUyNQ==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r429010525", "bodyText": "yes, not sure why I didn't do this in the first place :)", "author": "frankgh", "createdAt": "2020-05-22T02:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2NzY1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ae0ec75121360dd65a501d96cce9e909a87e0ac2", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java\nindex 2490b6fc..4fc41063 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/PxfConfiguration.java\n\n@@ -34,7 +37,7 @@ public class PxfConfiguration {\n     @Bean\n     public FilterRegistrationBean<SecurityServletFilter> registerSecurityServletFilter() {\n         FilterRegistrationBean<SecurityServletFilter> registrationBean = new FilterRegistrationBean<>();\n-        registrationBean.setFilter(applicationContext.getBean(SecurityServletFilter.class));\n+        registrationBean.setFilter(securityServletFilter);\n         registrationBean.addUrlPatterns(\"/pxf/\" + Version.PXF_PROTOCOL_VERSION + \"/*\");\n         return registrationBean;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2Nzc2Mw==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428967763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates a new instance for a given request context. Uses provides instances of\n          \n          \n            \n                 * Creates a new instance for a given request context. Uses provided instances of", "author": "denalex", "createdAt": "2020-05-21T23:29:18Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java", "diffHunk": "@@ -16,30 +17,36 @@\n \n     protected final Logger LOG = LoggerFactory.getLogger(this.getClass());\n \n+    private final AccessorFactory accessorFactory;\n+    private final ResolverFactory resolverFactory;\n+\n     protected Accessor accessor;\n     protected Resolver resolver;\n \n     /**\n-     * Creates a new instance for a given request context. Uses default singleton instances of\n+     * Creates a new instance for a given request context. Uses provides instances of", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ec75121360dd65a501d96cce9e909a87e0ac2", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java\nindex 30e80eef..54655fd9 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/BaseBridge.java\n\n@@ -17,31 +15,12 @@ public abstract class BaseBridge implements Bridge {\n \n     protected final Logger LOG = LoggerFactory.getLogger(this.getClass());\n \n-    private final AccessorFactory accessorFactory;\n-    private final ResolverFactory resolverFactory;\n-\n     protected Accessor accessor;\n     protected Resolver resolver;\n \n-    /**\n-     * Creates a new instance for a given request context. Uses provides instances of\n-     * plugin factories to request accessor and resolver.\n-     *\n-     * @param accessorFactory accessor factory\n-     * @param resolverFactory resolver factory\n-     */\n-    BaseBridge(AccessorFactory accessorFactory, ResolverFactory resolverFactory) {\n-        this.accessorFactory = accessorFactory;\n-        this.resolverFactory = resolverFactory;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void initialize(RequestContext context, Configuration configuration) {\n-        this.accessor = accessorFactory.getPlugin(context, configuration);\n-        this.resolver = resolverFactory.getPlugin(context, configuration);\n+    public BaseBridge(ApplicationContext applicationContext, RequestContext context) {\n+        this.accessor = applicationContext.getBean(context.getAccessor().substring(context.getAccessor().lastIndexOf(\".\") + 1), Accessor.class);\n+        this.resolver = applicationContext.getBean(context.getResolver().substring(context.getResolver().lastIndexOf(\".\") + 1), Resolver.class);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2ODMwMA==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428968300", "bodyText": "wonder whether making a Bridge also a Plugin is a good idea, plugins were for F/A/R classes.", "author": "denalex", "createdAt": "2020-05-21T23:31:15Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/bridge/Bridge.java", "diffHunk": "@@ -29,20 +30,19 @@\n  * class acts as an iterator over externally stored data, and should implement\n  * getNext (for reading) or setNext (for writing) for handling accessed data.\n  */\n-public interface Bridge {\n+public interface Bridge extends Plugin {", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxMTE5NA==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r429011194", "bodyText": "Bridge connects both A/R, and it already had a isThreadSafe method which is also present in the Plugin.  The bridge also consumes the RequestContext and Configuration that needs to be initialized", "author": "frankgh", "createdAt": "2020-05-22T02:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk2ODMwMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3MDI0MQ==", "url": "https://github.com/greenplum-db/pxf/pull/356#discussion_r428970241", "bodyText": "maybe parsing the request and creating configuration should go into a protected method on a BaseResource, they are repeating throughout.", "author": "denalex", "createdAt": "2020-05-21T23:38:36Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java", "diffHunk": "@@ -156,9 +154,15 @@ public FragmenterResource() {\n             @RequestHeader MultiValueMap<String, String> headers) throws Exception {\n \n         RequestContext context = parseRequest(headers);\n+        Configuration configuration = configurationFactory.\n+                initConfiguration(\n+                        context.getConfig(),\n+                        context.getServerName(),\n+                        context.getUser(),\n+                        context.getAdditionalConfigProps());", "originalCommit": "f1142118af31adfda8bab73ae7db4b068c07b0de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae0ec75121360dd65a501d96cce9e909a87e0ac2", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java\nindex 8b988776..c86e0636 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java\n\n@@ -154,15 +164,9 @@ public class FragmenterResource extends BaseResource {\n             @RequestHeader MultiValueMap<String, String> headers) throws Exception {\n \n         RequestContext context = parseRequest(headers);\n-        Configuration configuration = configurationFactory.\n-                initConfiguration(\n-                        context.getConfig(),\n-                        context.getServerName(),\n-                        context.getUser(),\n-                        context.getAdditionalConfigProps());\n \n         /* Create a fragmenter instance with API level parameters */\n-        final Fragmenter fragmenter = fragmenterFactory.getPlugin(context, configuration);\n+        final Fragmenter fragmenter = getFragmenter(context);\n \n         FragmentStats fragmentStats = fragmenter.getFragmentStats();\n         String response = FragmentStats.dataToJSON(fragmentStats);\n"}}, {"oid": "ae0ec75121360dd65a501d96cce9e909a87e0ac2", "url": "https://github.com/greenplum-db/pxf/commit/ae0ec75121360dd65a501d96cce9e909a87e0ac2", "message": "Address PR feedback", "committedDate": "2020-05-26T22:54:15Z", "type": "commit"}, {"oid": "4368ac6b4758a96da4afd75a41fd6142967a35c8", "url": "https://github.com/greenplum-db/pxf/commit/4368ac6b4758a96da4afd75a41fd6142967a35c8", "message": "Fix unit tests", "committedDate": "2020-05-28T13:09:18Z", "type": "commit"}, {"oid": "71b535ebadd73a7303db8bcb65dbbdf8401897e5", "url": "https://github.com/greenplum-db/pxf/commit/71b535ebadd73a7303db8bcb65dbbdf8401897e5", "message": "backfill unit tests", "committedDate": "2020-05-28T17:36:57Z", "type": "commit"}, {"oid": "042e173cbc448c927c41b114ca7fe0df9d1f691d", "url": "https://github.com/greenplum-db/pxf/commit/042e173cbc448c927c41b114ca7fe0df9d1f691d", "message": "Fix unit test", "committedDate": "2020-05-28T18:09:37Z", "type": "commit"}]}