{"pr_number": 345, "pr_title": "Convert the pxf-api project to a boot project", "pr_createdAt": "2020-04-22T13:47:35Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/345", "timeline": [{"oid": "5f3680ba48faef81bde209a78c7040f4b8860e57", "url": "https://github.com/greenplum-db/pxf/commit/5f3680ba48faef81bde209a78c7040f4b8860e57", "message": "Convert the pxf-api project to a boot project\n\n- Provide a top level build.gradle with only pxf-api enabled\n- Provide a build.gradle for pxf-api\n- Migrate unit tests to JUnit 5\n- Make all unit tests pass", "committedDate": "2020-04-22T13:46:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MTcyNw==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414061727", "bodyText": "can maybe this and PxfUserGroupInformation be Spring services, Spring will manage their \"singleton-ness\" and have them autowired ?", "author": "denalex", "createdAt": "2020-04-23T19:22:43Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java", "diffHunk": "@@ -68,6 +68,11 @@\n \n     private static final SecureLogin instance = new SecureLogin();\n \n+    /**\n+     * Package-private for testing\n+     */\n+    static PxfUserGroupInformation pxfUserGroupInformation = PxfUserGroupInformation.getInstance();", "originalCommit": "5f3680ba48faef81bde209a78c7040f4b8860e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MjA5MQ==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414082091", "bodyText": "yes, but we're deferring for later for now", "author": "frankgh", "createdAt": "2020-04-23T19:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MTcyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MzYwMg==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414063602", "bodyText": "it can now mock classes with final methods without PowerMock? cool", "author": "denalex", "createdAt": "2020-04-23T19:25:43Z", "path": "server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java", "diffHunk": "@@ -2,97 +2,104 @@\n \n import com.google.common.collect.Sets;\n import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.security.authentication.util.KerberosUtil;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n-import org.powermock.api.mockito.PowerMockito;\n-import org.powermock.core.classloader.annotations.PrepareForTest;\n-import org.powermock.modules.junit4.PowerMockRunner;\n-import org.powermock.reflect.Whitebox;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import javax.security.auth.Subject;\n import javax.security.auth.kerberos.KerberosPrincipal;\n import javax.security.auth.kerberos.KerberosTicket;\n+import javax.security.auth.kerberos.KeyTab;\n import javax.security.auth.login.LoginContext;\n import javax.security.auth.login.LoginException;\n import java.util.Date;\n-import java.util.function.Supplier;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.doThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.verifyNoInteractions;\n import static org.mockito.Mockito.when;\n \n-@RunWith(PowerMockRunner.class)\n-@PrepareForTest({PxfUserGroupInformation.class, UserGroupInformation.class, KerberosUtil.class, KerberosTicket.class})\n public class PxfUserGroupInformationTest {\n \n     private String serverName;\n     private Configuration configuration;\n     private UserGroupInformation ugi;\n     private Subject subject;\n+    private Subject subjectWithKerberosKeyTab;\n     private User user;\n     private LoginContext mockLoginContext, mockAnotherLoginContext;\n+    private PxfUserGroupInformation.LoginContextProvider mockLoginContextProvider;\n     private KerberosTicket mockTGT;\n+    private KeyTab mockKeyTab;\n     private KerberosPrincipal tgtPrincipal = new KerberosPrincipal(\"krbtgt/EXAMPLE.COM@EXAMPLE.COM\");\n     private KerberosPrincipal nonTgtPrincipal = new KerberosPrincipal(\"some/somewhere@EXAMPLE.COM\");\n     private LoginSession session;\n     private long nowMs;\n+    private PxfUserGroupInformation pxfUserGroupInformation;\n \n-    @Rule\n-    public ExpectedException expectedException = ExpectedException.none();\n-\n+    private static final String PROPERTY_KEY_JAVA_VENDOR = \"java.vendor\";\n     private static final String PROPERTY_KEY_KERBEROS_KDC = \"java.security.krb5.kdc\";\n     private static final String PROPERTY_KEY_KERBEROS_REALM = \"java.security.krb5.realm\";\n     private static String kdcDefault;\n     private static String realmDefault;\n+    private static String javaVendor;\n \n-    @BeforeClass\n+    @BeforeAll\n     public static void setProperties() {\n         // simulate presence of krb.conf file, important for prevention of test pollution when creating Users\n         kdcDefault = System.setProperty(PROPERTY_KEY_KERBEROS_KDC, \"localhost\");\n         realmDefault = System.setProperty(PROPERTY_KEY_KERBEROS_REALM, \"DEFAULT_REALM\");\n+\n+        // Not IBM. Refer to org.apache.hadoop.security.authentication.util.KerberosUtil.getKrb5LoginModuleName\n+        javaVendor = System.setProperty(PROPERTY_KEY_JAVA_VENDOR, \"foobar\");\n     }\n \n-    @AfterClass\n+    @AfterAll\n     public static void resetProperties() {\n+        resetProperty(PROPERTY_KEY_JAVA_VENDOR, javaVendor);\n         resetProperty(PROPERTY_KEY_KERBEROS_KDC, kdcDefault);\n         resetProperty(PROPERTY_KEY_KERBEROS_REALM, realmDefault);\n     }\n \n-    @Before\n+    @BeforeEach\n     public void setup() throws Exception {\n \n         // prepare objects\n         nowMs = System.currentTimeMillis();\n         configuration = new Configuration();\n         user = new User(\"user\");\n         serverName = \"server\";\n+        pxfUserGroupInformation = PxfUserGroupInformation.getInstance();\n \n         // prepare common mocks\n-        mockTGT = PowerMockito.mock(KerberosTicket.class); // has final methods, needs PowerMock to mock it\n+        mockTGT = mock(KerberosTicket.class);", "originalCommit": "5f3680ba48faef81bde209a78c7040f4b8860e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MzgzMQ==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414083831", "bodyText": "mockito-inline supports it: \n  \n    \n      pxf/server/pxf-api/build.gradle\n    \n    \n         Line 39\n      in\n      5f3680b\n    \n    \n    \n    \n\n        \n          \n           testImplementation('org.mockito:mockito-inline:3.1.0')", "author": "frankgh", "createdAt": "2020-04-23T19:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2MzYwMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NTc3NA==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414065774", "bodyText": "not sure why things changed here", "author": "denalex", "createdAt": "2020-04-23T19:29:16Z", "path": "server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java", "diffHunk": "@@ -144,128 +151,106 @@ public void testLoginFromKeytabMinMillisFromDefault() throws Exception {\n     @Test\n     public void testReloginFromKeytabNoopForNonKerberos() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         // do NOT set authentication method of UGI to KERBEROS, will cause NOOP for relogin\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext); // proves noop\n+        verifyNoInteractions(mockLoginContext); // proves noop\n     }\n \n     @Test\n     public void testReloginFromKeytabNoopForNonKeytab() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(false); // simulate no keytab for subject\n         ugi = new UserGroupInformation(subject);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext); // proves noop\n+        verifyNoInteractions(mockLoginContext); // proves noop\n     }\n \n     @Test\n     public void testReloginFromKeytabNoopInsufficientTimeElapsed() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         user.setLastLogin(nowMs); // simulate just logged in\n         // set 33 secs between re-login attempts\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 55000L);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 55000L);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext); // proves noop\n+        verifyNoInteractions(mockLoginContext); // proves noop\n     }\n \n     @Test\n     public void testReloginFromKeytabNoopTGTValidForLongTime() throws KerberosAuthException {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        when(KerberosUtil.getKrb5LoginModuleName()).thenReturn(\"com.sun.security.auth.module.Krb5LoginModule\");\n-\n         when(mockTGT.getServer()).thenReturn(tgtPrincipal);\n \n         // TGT validity started 1 hr ago, valid for another 1 hr from now, we are at 50% of renew window\n         when(mockTGT.getStartTime()).thenReturn(new Date(nowMs - 3600 * 1000L));\n         when(mockTGT.getEndTime()).thenReturn(new Date(nowMs + 3600 * 1000L));\n \n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         // leave user.lastLogin at 0 to simulate old login\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        pxfUserGroupInformation.reloginFromKeytab(serverName, session);\n \n-        verifyZeroInteractions(mockLoginContext);\n+        verifyNoInteractions(mockLoginContext);\n     }\n \n     @Test\n-    public void testReloginFromKeytabFailsNoLogin() throws KerberosAuthException {\n-        expectedException.expect(KerberosAuthException.class);\n-        expectedException.expectMessage(\"loginUserFromKeyTab must be done first\");\n-\n+    public void testReloginFromKeytabFailsNoLogin() {\n         user.setLogin(null); // simulate missing login context for the user\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        when(KerberosUtil.getKrb5LoginModuleName()).thenReturn(\"com.sun.security.auth.module.Krb5LoginModule\");\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         // leave user.lastLogin at 0 to simulate old login\n-        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", \"keytab\", ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        Exception e = assertThrows(KerberosAuthException.class,\n+                () -> pxfUserGroupInformation.reloginFromKeytab(serverName, session));\n+        assertEquals(\" loginUserFromKeyTab must be done first\", e.getMessage());\n     }\n \n     @Test\n-    public void testReloginFromKeytabFailsNoKeytab() throws KerberosAuthException {\n-        expectedException.expect(KerberosAuthException.class);\n-        expectedException.expectMessage(\"loginUserFromKeyTab must be done first\");\n-\n+    public void testReloginFromKeytabFailsNoKeytab() {\n         user.setLogin(mockLoginContext);\n-        PowerMockito.mockStatic(KerberosUtil.class);\n-        when(KerberosUtil.hasKerberosKeyTab(subject)).thenReturn(true);\n-        when(KerberosUtil.getKrb5LoginModuleName()).thenReturn(\"com.sun.security.auth.module.Krb5LoginModule\");\n-        ugi = new UserGroupInformation(subject);\n+        ugi = new UserGroupInformation(subjectWithKerberosKeyTab);\n         ugi.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS);\n         // leave user.lastLogin at 0 to simulate old login\n-        session = new LoginSession(\"config\", \"principal\", null, ugi, subject, 1);\n+        session = new LoginSession(\"config\", \"principal\", null, ugi, subjectWithKerberosKeyTab, 1);\n \n-        PxfUserGroupInformation.reloginFromKeytab(serverName, session);\n+        Exception e = assertThrows(KerberosAuthException.class,\n+                () -> pxfUserGroupInformation.reloginFromKeytab(serverName, session));\n+        assertEquals(\" loginUserFromKeyTab must be done first\", e.getMessage());\n     }\n \n     /* ---------- Test below follow full login path via a few alternatives ---------- */\n \n     @Test\n     public void testReloginFromKeytabNoValidTGT() throws Exception {\n \n-        assertEquals(1, subject.getPrivateCredentials().size()); // subject has 1 ticket\n+        assertEquals(2, subjectWithKerberosKeyTab.getPrivateCredentials().size()); // subject has 2 tickets", "originalCommit": "5f3680ba48faef81bde209a78c7040f4b8860e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NjQ0MQ==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414086441", "bodyText": "We can no longer mock the static KerberosUtil.hasKerberosKeyTab(subject) method. So we need to make KerberosUtil.hasKerberosKeyTab return the expected value. For that, when we want a subject with a Kerberos Keytab, we create a subject like this:\n\n  \n    \n      pxf/server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java\n    \n    \n         Line 92\n      in\n      5f3680b\n    \n    \n    \n    \n\n        \n          \n           subjectWithKerberosKeyTab = new Subject(false, Sets.newHashSet(user), Sets.newHashSet(), Sets.newHashSet(mockTGT, mockKeyTab)); \n        \n    \n  \n\n\nwhich has two items in the private credentials as opposed to 1 before", "author": "frankgh", "createdAt": "2020-04-23T20:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NTc3NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NjMxNw==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414066317", "bodyText": "and here ...", "author": "denalex", "createdAt": "2020-04-23T19:30:17Z", "path": "server/pxf-api/src/test/java/org/apache/hadoop/security/PxfUserGroupInformationTest.java", "diffHunk": "@@ -274,7 +259,7 @@ public void testReloginFromKeytabNoValidTGT() throws Exception {\n         /* subject's non-TGT ticket has been removed, in reality another one would be created by login process,\n          * but we are not mocking it here.\n          */\n-        assertTrue(subject.getPrivateCredentials().isEmpty());\n+        assertEquals(1, subject.getPrivateCredentials().size());", "originalCommit": "5f3680ba48faef81bde209a78c7040f4b8860e57", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NjUzNQ==", "url": "https://github.com/greenplum-db/pxf/pull/345#discussion_r414086535", "bodyText": "see my comment above", "author": "frankgh", "createdAt": "2020-04-23T20:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA2NjMxNw=="}], "type": "inlineReview", "revised_code": null}]}