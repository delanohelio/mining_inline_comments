{"pr_number": 394, "pr_title": "Fix queries with limit", "pr_createdAt": "2020-06-23T20:56:57Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/394", "timeline": [{"oid": "9f29fea0939f93011c18f38f02ebdaa842551f6c", "url": "https://github.com/greenplum-db/pxf/commit/9f29fea0939f93011c18f38f02ebdaa842551f6c", "message": "Fix queries with limit\n\nThere is an issue with async threads, where we are swallowing the\nClientAbortException when Greenplum closes the connection. This lack of\ncommunication that an IOException has occurred is causing problems with\nsubsequent requests. Re-throwing the exception allows Spring MVC to\ncatch it and mark the connection as broken so it stops writing.\n\nThe short version of what happens is:\n- client drops connection async thread is writing to\n- Tomcat cleans this up\n- Request/Response/Processor gets put back in pool\n- New connections come in\n- Processor above gets allocated to one of them\n- Original async thread tries writing again, fails and puts the processor into an error state\n- Tomcat tries to process the new connection\n- Processor is in an error state so the connection is closed before the request is even read\n\nCo-authored-by: Mark Thomas <thomasma@vmware.com>\nCo-authored-by: Francisco Guerrero <aguerrero@pivotal.io>", "committedDate": "2020-06-23T20:41:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExOTc5MQ==", "url": "https://github.com/greenplum-db/pxf/pull/394#discussion_r445119791", "bodyText": "I don't know if we even should log this as error, since this is not really an error condition when GPDB routinely does this. maybe use WARN ?", "author": "denalex", "createdAt": "2020-06-24T19:24:56Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java", "diffHunk": "@@ -73,17 +73,24 @@ private Void writeToInternal(OutputStream out) throws IOException {\n                 ++recordCount;\n             }\n             LOG.debug(\"Finished streaming fragment {} of resource {}, {} records.\", fragment, dataDir, recordCount);\n-        } catch (ClientAbortException e) {\n-            // Occurs whenever client (GPDB) decides to end the connection\n-            if (LOG.isDebugEnabled()) {\n-                // Stacktrace in debug\n-                LOG.debug(\"Remote connection closed by GPDB\", e);\n+        } catch (Exception e) {\n+            IOException ioe;\n+            if (e instanceof ClientAbortException) {\n+                // Occurs whenever client (GPDB) decides to end the connection\n+                if (LOG.isDebugEnabled()) {\n+                    // Stacktrace in debug\n+                    LOG.debug(\"Remote connection closed by GPDB\", e);\n+                } else {\n+                    LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");", "originalCommit": "9f29fea0939f93011c18f38f02ebdaa842551f6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNjA1Nw==", "url": "https://github.com/greenplum-db/pxf/pull/394#discussion_r445126057", "bodyText": "true, it should be a warn", "author": "frankgh", "createdAt": "2020-06-24T19:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExOTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "2ebb8587361c9d8ab74a57e14e445af6f349764d", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java\nindex 53de75db..5e4a988d 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java\n\n@@ -73,24 +73,20 @@ public class BridgeResponse implements StreamingResponseBody {\n                 ++recordCount;\n             }\n             LOG.debug(\"Finished streaming fragment {} of resource {}, {} records.\", fragment, dataDir, recordCount);\n-        } catch (Exception e) {\n-            IOException ioe;\n-            if (e instanceof ClientAbortException) {\n-                // Occurs whenever client (GPDB) decides to end the connection\n-                if (LOG.isDebugEnabled()) {\n-                    // Stacktrace in debug\n-                    LOG.debug(\"Remote connection closed by GPDB\", e);\n-                } else {\n-                    LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n-                }\n-                ioe = (ClientAbortException) e;\n-            } else if (e instanceof IOException) {\n-                ioe = (IOException) e;\n+        } catch (ClientAbortException e) {\n+            // Occurs whenever client (GPDB) decides to end the connection\n+            if (LOG.isDebugEnabled()) {\n+                // Stacktrace in debug\n+                LOG.debug(\"Remote connection closed by GPDB\", e);\n             } else {\n-                ioe = new IOException(e.getMessage(), e);\n+                LOG.warn(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n             }\n             // Re-throw the exception so Spring MVC is aware that an IO error has occurred\n-            throw ioe;\n+            throw e;\n+        } catch (IOException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new IOException(e.getMessage(), e);\n         } finally {\n             LOG.debug(\"Stopped streaming fragment {} of resource {}, {} records.\", fragment, dataDir, recordCount);\n             try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMzA0OQ==", "url": "https://github.com/greenplum-db/pxf/pull/394#discussion_r445123049", "bodyText": "I kinda like the previous logic better, where we handle ClientAbortException only and the common block of wrapping any exception as IOException, unless it is already an IOException.", "author": "denalex", "createdAt": "2020-06-24T19:31:20Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java", "diffHunk": "@@ -73,17 +73,24 @@ private Void writeToInternal(OutputStream out) throws IOException {\n                 ++recordCount;\n             }\n             LOG.debug(\"Finished streaming fragment {} of resource {}, {} records.\", fragment, dataDir, recordCount);\n-        } catch (ClientAbortException e) {\n-            // Occurs whenever client (GPDB) decides to end the connection\n-            if (LOG.isDebugEnabled()) {\n-                // Stacktrace in debug\n-                LOG.debug(\"Remote connection closed by GPDB\", e);\n+        } catch (Exception e) {\n+            IOException ioe;\n+            if (e instanceof ClientAbortException) {\n+                // Occurs whenever client (GPDB) decides to end the connection\n+                if (LOG.isDebugEnabled()) {\n+                    // Stacktrace in debug\n+                    LOG.debug(\"Remote connection closed by GPDB\", e);\n+                } else {\n+                    LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n+                }\n+                ioe = (ClientAbortException) e;\n+            } else if (e instanceof IOException) {\n+                ioe = (IOException) e;\n             } else {\n-                LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n+                ioe = new IOException(e.getMessage(), e);\n             }\n-            throw e;\n-        } catch (Exception e) {\n-            throw e instanceof IOException ? (IOException) e : new IOException(e.getMessage(), e);\n+            // Re-throw the exception so Spring MVC is aware that an IO error has occurred\n+            throw ioe;", "originalCommit": "9f29fea0939f93011c18f38f02ebdaa842551f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ebb8587361c9d8ab74a57e14e445af6f349764d", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java\nindex 53de75db..5e4a988d 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResponse.java\n\n@@ -73,24 +73,20 @@ public class BridgeResponse implements StreamingResponseBody {\n                 ++recordCount;\n             }\n             LOG.debug(\"Finished streaming fragment {} of resource {}, {} records.\", fragment, dataDir, recordCount);\n-        } catch (Exception e) {\n-            IOException ioe;\n-            if (e instanceof ClientAbortException) {\n-                // Occurs whenever client (GPDB) decides to end the connection\n-                if (LOG.isDebugEnabled()) {\n-                    // Stacktrace in debug\n-                    LOG.debug(\"Remote connection closed by GPDB\", e);\n-                } else {\n-                    LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n-                }\n-                ioe = (ClientAbortException) e;\n-            } else if (e instanceof IOException) {\n-                ioe = (IOException) e;\n+        } catch (ClientAbortException e) {\n+            // Occurs whenever client (GPDB) decides to end the connection\n+            if (LOG.isDebugEnabled()) {\n+                // Stacktrace in debug\n+                LOG.debug(\"Remote connection closed by GPDB\", e);\n             } else {\n-                ioe = new IOException(e.getMessage(), e);\n+                LOG.warn(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n             }\n             // Re-throw the exception so Spring MVC is aware that an IO error has occurred\n-            throw ioe;\n+            throw e;\n+        } catch (IOException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new IOException(e.getMessage(), e);\n         } finally {\n             LOG.debug(\"Stopped streaming fragment {} of resource {}, {} records.\", fragment, dataDir, recordCount);\n             try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMzU1NQ==", "url": "https://github.com/greenplum-db/pxf/pull/394#discussion_r445123555", "bodyText": "why just not throw cae ?", "author": "denalex", "createdAt": "2020-06-24T19:32:27Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/WritableResource.java", "diffHunk": "@@ -165,6 +165,8 @@ public WritableResource(BridgeFactory bridgeFactory, SecurityService securitySer\n                 } else {\n                     LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n                 }\n+                ex = cae;\n+                throw ex;", "originalCommit": "9f29fea0939f93011c18f38f02ebdaa842551f6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2ebb8587361c9d8ab74a57e14e445af6f349764d", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/WritableResource.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/WritableResource.java\nindex 364af114..c3f44ed9 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/WritableResource.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/WritableResource.java\n\n@@ -160,13 +160,16 @@ public class WritableResource extends BaseResource {\n                     ++totalWritten;\n                 }\n             } catch (ClientAbortException cae) {\n+                // Occurs whenever client (GPDB) decides to end the connection\n                 if (LOG.isDebugEnabled()) {\n+                    // Stacktrace in debug\n                     LOG.debug(\"Remote connection closed by GPDB\", cae);\n                 } else {\n-                    LOG.error(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n+                    LOG.warn(\"Remote connection closed by GPDB (Enable debug for stacktrace)\");\n                 }\n                 ex = cae;\n-                throw ex;\n+                // Re-throw the exception so Spring MVC is aware that an IO error has occurred\n+                throw cae;\n             } catch (Exception e) {\n                 LOG.error(String.format(\"Exception: totalWritten so far %d to %s\", totalWritten, path), e);\n                 ex = e;\n"}}, {"oid": "2ebb8587361c9d8ab74a57e14e445af6f349764d", "url": "https://github.com/greenplum-db/pxf/commit/2ebb8587361c9d8ab74a57e14e445af6f349764d", "message": "Address PR feedback", "committedDate": "2020-06-24T19:48:38Z", "type": "commit"}]}