{"pr_number": 430, "pr_title": "Reduce the amount of @RequestScope components", "pr_createdAt": "2020-08-26T22:28:15Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/430", "timeline": [{"oid": "de4ad4e31ee3ea05105066b8680c7fa4528399e2", "url": "https://github.com/greenplum-db/pxf/commit/de4ad4e31ee3ea05105066b8680c7fa4528399e2", "message": "Disable proxy", "committedDate": "2020-08-25T16:40:16Z", "type": "commit"}, {"oid": "aa63764c4a02900dea3232fec3aa1384866b3dd5", "url": "https://github.com/greenplum-db/pxf/commit/aa63764c4a02900dea3232fec3aa1384866b3dd5", "message": "Optimize context.getTupleDescription calls", "committedDate": "2020-08-25T17:54:13Z", "type": "commit"}, {"oid": "bc8c1e2265a41f60b805de3dfbb3ba096241e323", "url": "https://github.com/greenplum-db/pxf/commit/bc8c1e2265a41f60b805de3dfbb3ba096241e323", "message": "fix unit tests", "committedDate": "2020-08-25T18:15:50Z", "type": "commit"}, {"oid": "2d8c48a41b43e3e562f0497c48f19cbf899e340c", "url": "https://github.com/greenplum-db/pxf/commit/2d8c48a41b43e3e562f0497c48f19cbf899e340c", "message": "Make fewer things RequestScoped beans", "committedDate": "2020-08-25T20:14:01Z", "type": "commit"}, {"oid": "040ef852115273b2a5f979db03188962959921ce", "url": "https://github.com/greenplum-db/pxf/commit/040ef852115273b2a5f979db03188962959921ce", "message": "minor improvement", "committedDate": "2020-08-25T20:29:05Z", "type": "commit"}, {"oid": "275b17c83d2a0008f03131eac71b63e65400a934", "url": "https://github.com/greenplum-db/pxf/commit/275b17c83d2a0008f03131eac71b63e65400a934", "message": "More optimizations after looking at hotspots", "committedDate": "2020-08-25T21:47:15Z", "type": "commit"}, {"oid": "95276e8ba733d18512cfec557bffd77943a69ee1", "url": "https://github.com/greenplum-db/pxf/commit/95276e8ba733d18512cfec557bffd77943a69ee1", "message": "Accessors / Resolvers are no longer Components", "committedDate": "2020-08-26T19:22:13Z", "type": "commit"}, {"oid": "3b4ebc01a68647c30bcde3a7db01c6a639d175ce", "url": "https://github.com/greenplum-db/pxf/commit/3b4ebc01a68647c30bcde3a7db01c6a639d175ce", "message": "Fragmenters are no longer Components", "committedDate": "2020-08-26T20:40:18Z", "type": "commit"}, {"oid": "4bc271d53ac7b82e94411d4e81b6121aa1ea9844", "url": "https://github.com/greenplum-db/pxf/commit/4bc271d53ac7b82e94411d4e81b6121aa1ea9844", "message": "Improve BridgeOutputBuilder to avoid proxy calls", "committedDate": "2020-08-26T21:30:25Z", "type": "commit"}, {"oid": "77b91dcd5c2d277dce530b18cdf8cf63192cb0ed", "url": "https://github.com/greenplum-db/pxf/commit/77b91dcd5c2d277dce530b18cdf8cf63192cb0ed", "message": "Don't use LinkedList", "committedDate": "2020-08-26T21:49:27Z", "type": "commit"}, {"oid": "b55077c36e8bc4061e447fbbdb6be99c07ae41f4", "url": "https://github.com/greenplum-db/pxf/commit/b55077c36e8bc4061e447fbbdb6be99c07ae41f4", "message": "Fix avro", "committedDate": "2020-08-26T22:20:56Z", "type": "commit"}, {"oid": "7d9246f997288f7d119856d1dde645a05877f1d6", "url": "https://github.com/greenplum-db/pxf/commit/7d9246f997288f7d119856d1dde645a05877f1d6", "message": "fix initialization issue", "committedDate": "2020-08-26T22:53:27Z", "type": "commit"}, {"oid": "259b4abbc2287afa3b814903b31a6ba30b30913a", "url": "https://github.com/greenplum-db/pxf/commit/259b4abbc2287afa3b814903b31a6ba30b30913a", "message": "Fix Hive and Jdbc", "committedDate": "2020-08-27T20:02:52Z", "type": "commit"}, {"oid": "0fe2a28cc6a52ef2a7164138cb02c4ff4728c1c3", "url": "https://github.com/greenplum-db/pxf/commit/0fe2a28cc6a52ef2a7164138cb02c4ff4728c1c3", "message": "Use SpringContext to access beans", "committedDate": "2020-08-27T23:36:09Z", "type": "commit"}, {"oid": "2adf69ab588789cbe326ef65c7c68fba561d8648", "url": "https://github.com/greenplum-db/pxf/commit/2adf69ab588789cbe326ef65c7c68fba561d8648", "message": "Add PxfUserGroupInformation to the list of scanned classes for SpringBoot", "committedDate": "2020-08-28T00:59:38Z", "type": "commit"}, {"oid": "665e894c64142f63ea4f15c2f1a4252feab450a4", "url": "https://github.com/greenplum-db/pxf/commit/665e894c64142f63ea4f15c2f1a4252feab450a4", "message": "Remove the remnants of singletons in the pxf code", "committedDate": "2020-08-28T14:13:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzg4Ng==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486747886", "bodyText": "formatting ?", "author": "denalex", "createdAt": "2020-09-11T03:11:34Z", "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "diffHunk": "@@ -84,11 +69,10 @@ public static PxfUserGroupInformation getInstance() {\n      * @param configDirectory the path to the configuration files for the external system\n      * @param principal       the principal name to load from the keytab\n      * @param keytabFilename  the path to the keytab file\n-     * @throws IOException\n+     * @throws IOException           when an IO error occurs.", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MTE3OA==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486961178", "bodyText": "IntelliJ aligns the IOException message and the KerberosAuthException message.", "author": "frankgh", "createdAt": "2020-09-11T10:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Nzg4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODI3OQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486748279", "bodyText": "formatting ?", "author": "denalex", "createdAt": "2020-09-11T03:13:05Z", "path": "server/pxf-api/src/main/java/org/apache/hadoop/security/PxfUserGroupInformation.java", "diffHunk": "@@ -137,7 +121,7 @@ LoginSession loginUserFromKeytab(Configuration configuration, String serverName,\n      *\n      * @param serverName   the name of the server\n      * @param loginSession the login session\n-     * @throws IOException\n+     * @throws IOException           when an IO error occurs", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MTI3Nw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486961277", "bodyText": "same", "author": "frankgh", "createdAt": "2020-09-11T10:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODI3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDEyMw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486750123", "bodyText": "if you're inside enum type already, do you need EnumSet or can you use smith like:\nfor (DataType type : DataType.values())  ?", "author": "denalex", "createdAt": "2020-09-11T03:20:37Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -61,20 +59,27 @@\n \n     UNSUPPORTED_TYPE(-1);\n \n-    private static final Map<Integer, DataType> lookup = new HashMap<>();\n+    private static final int[] OID_ARRAY;\n+    private static final DataType[] DATA_TYPES;\n     private static final int[] NOT_TEXT = {BIGINT.OID, BOOLEAN.OID, BYTEA.OID,\n             FLOAT8.OID, INTEGER.OID, REAL.OID, SMALLINT.OID};\n \n     static {\n-\n         INT2ARRAY.typeElem = SMALLINT;\n         INT4ARRAY.typeElem = INTEGER;\n         INT8ARRAY.typeElem = BIGINT;\n         BOOLARRAY.typeElem = BOOLEAN;\n         TEXTARRAY.typeElem = TEXT;\n \n-        for (DataType dt : EnumSet.allOf(DataType.class)) {\n-            lookup.put(dt.getOID(), dt);\n+        EnumSet<DataType> set = EnumSet.allOf(DataType.class);", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjI5Mw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486962293", "bodyText": "yeah, I can use that instead.", "author": "frankgh", "createdAt": "2020-09-11T10:41:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDEyMw=="}], "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java b/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\nindex 08a130214..d53c5957d 100644\n--- a/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\n+++ b/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\n\n@@ -71,12 +69,12 @@ public enum DataType {\n         BOOLARRAY.typeElem = BOOLEAN;\n         TEXTARRAY.typeElem = TEXT;\n \n-        EnumSet<DataType> set = EnumSet.allOf(DataType.class);\n-        OID_ARRAY = new int[set.size()];\n-        DATA_TYPES = new DataType[set.size()];\n+        DataType[] allTypes = DataType.values();\n+        OID_ARRAY = new int[allTypes.length];\n+        DATA_TYPES = new DataType[allTypes.length];\n \n         int index = 0;\n-        for (DataType type : set) {\n+        for (DataType type : allTypes) {\n             OID_ARRAY[index] = type.OID;\n             DATA_TYPES[index] = type;\n             index++;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1Mjc1OQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486752759", "bodyText": "let's put a comment here that performance profiling proved this is faster than a map lookup so it does not get refactored later.", "author": "denalex", "createdAt": "2020-09-11T03:31:39Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -92,13 +97,17 @@\n      * @return the corresponding DataType if exists, else returns {@link #UNSUPPORTED_TYPE}\n      */\n     public static DataType get(int OID) {\n-        DataType type = lookup.get(OID);\n-        return type == null ? UNSUPPORTED_TYPE : type;\n+        for (int i = 0; i < OID_ARRAY.length; i++) {", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java b/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\nindex 08a130214..d53c5957d 100644\n--- a/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\n+++ b/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\n\n@@ -97,6 +95,22 @@ public enum DataType {\n      * @return the corresponding DataType if exists, else returns {@link #UNSUPPORTED_TYPE}\n      */\n     public static DataType get(int OID) {\n+        // Previously, this lookup was based on a HashMap, but during profiling\n+        // we noticed that the Hashmap.get call was a hot spot. A for loop is\n+        // more performant when the number of elements is low (usually less\n+        // than 100). We built a small benchmark based on JMH to compare the\n+        // two implementations and here are the results we obtained at that\n+        // time:\n+        //\n+        // Throughput Benchmark (Higher score is better)\n+        // Benchmark                               (iterations)   Mode  Cnt    Score    Error   Units\n+        // DemoApplication.benchmarkGetForLoop            10000  thrpt   40  477.072 \u00b1 11.663  ops/us\n+        // DemoApplication.benchmarkHashMapLookup         10000  thrpt   40    0.009 \u00b1  0.001  ops/us\n+        //\n+        // Average Time Benchmark (Lower score is better)\n+        // Benchmark                               (iterations)  Mode  Cnt    Score    Error  Units\n+        // DemoApplication.benchmarkGetForLoop            10000  avgt   40    0.002 \u00b1  0.001  us/op\n+        // DemoApplication.benchmarkHashMapLookup         10000  avgt   40  110.740 \u00b1  5.670  us/op\n         for (int i = 0; i < OID_ARRAY.length; i++) {\n             if (OID == OID_ARRAY[i]) {\n                 return DATA_TYPES[i];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDM4Mw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486754383", "bodyText": "technically, UNSUPPORTED_TYPE.typeElem == null so this check is redundant", "author": "denalex", "createdAt": "2020-09-11T03:38:34Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java", "diffHunk": "@@ -92,13 +97,17 @@\n      * @return the corresponding DataType if exists, else returns {@link #UNSUPPORTED_TYPE}\n      */\n     public static DataType get(int OID) {\n-        DataType type = lookup.get(OID);\n-        return type == null ? UNSUPPORTED_TYPE : type;\n+        for (int i = 0; i < OID_ARRAY.length; i++) {\n+            if (OID == OID_ARRAY[i]) {\n+                return DATA_TYPES[i];\n+            }\n+        }\n+        return UNSUPPORTED_TYPE;\n     }\n \n     public static boolean isArrayType(int OID) {\n-        DataType type = lookup.get(OID);\n-        return type != null && type.typeElem != null;\n+        DataType type = get(OID);\n+        return type != UNSUPPORTED_TYPE && type.typeElem != null;", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java b/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\nindex 08a130214..d53c5957d 100644\n--- a/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\n+++ b/server/pxf-api/src/main/java/org/greenplum/pxf/api/io/DataType.java\n\n@@ -97,6 +95,22 @@ public enum DataType {\n      * @return the corresponding DataType if exists, else returns {@link #UNSUPPORTED_TYPE}\n      */\n     public static DataType get(int OID) {\n+        // Previously, this lookup was based on a HashMap, but during profiling\n+        // we noticed that the Hashmap.get call was a hot spot. A for loop is\n+        // more performant when the number of elements is low (usually less\n+        // than 100). We built a small benchmark based on JMH to compare the\n+        // two implementations and here are the results we obtained at that\n+        // time:\n+        //\n+        // Throughput Benchmark (Higher score is better)\n+        // Benchmark                               (iterations)   Mode  Cnt    Score    Error   Units\n+        // DemoApplication.benchmarkGetForLoop            10000  thrpt   40  477.072 \u00b1 11.663  ops/us\n+        // DemoApplication.benchmarkHashMapLookup         10000  thrpt   40    0.009 \u00b1  0.001  ops/us\n+        //\n+        // Average Time Benchmark (Lower score is better)\n+        // Benchmark                               (iterations)  Mode  Cnt    Score    Error  Units\n+        // DemoApplication.benchmarkGetForLoop            10000  avgt   40    0.002 \u00b1  0.001  us/op\n+        // DemoApplication.benchmarkHashMapLookup         10000  avgt   40  110.740 \u00b1  5.670  us/op\n         for (int i = 0; i < OID_ARRAY.length; i++) {\n             if (OID == OID_ARRAY[i]) {\n                 return DATA_TYPES[i];\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NDg5Mg==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486754892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PxfUserGroupInformation pxfUserGroupInformation;\n          \n          \n            \n                private final PxfUserGroupInformation pxfUserGroupInformation;", "author": "denalex", "createdAt": "2020-09-11T03:40:39Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java", "diffHunk": "@@ -69,7 +69,12 @@\n     /**\n      * Package-private for testing\n      */\n-    static PxfUserGroupInformation pxfUserGroupInformation = PxfUserGroupInformation.getInstance();\n+    private PxfUserGroupInformation pxfUserGroupInformation;", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java b/server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java\nindex e1ccbabd2..9254d10dc 100644\n--- a/server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java\n+++ b/server/pxf-api/src/main/java/org/greenplum/pxf/api/security/SecureLogin.java\n\n@@ -69,7 +69,7 @@ public class SecureLogin {\n     /**\n      * Package-private for testing\n      */\n-    private PxfUserGroupInformation pxfUserGroupInformation;\n+    private final PxfUserGroupInformation pxfUserGroupInformation;\n \n     public SecureLogin(PxfUserGroupInformation pxfUserGroupInformation) {\n         this.pxfUserGroupInformation = pxfUserGroupInformation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NTI4OQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486755289", "bodyText": "should this be private ?", "author": "denalex", "createdAt": "2020-09-11T03:42:21Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java", "diffHunk": "@@ -6,42 +6,29 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n+import org.springframework.stereotype.Component;\n \n import java.io.IOException;\n \n /**\n  * This class serializes and deserializes {@link FragmentMetadata} objects into\n  * JSON.\n  */\n+@Component\n public class FragmentMetadataSerDe extends StdSerializer<FragmentMetadata> {\n \n     private static final long serialVersionUID = 123173996615107417L;\n     private static final String CLASSNAME = \"className\";\n-\n-    /**\n-     * Singleton instance of the FragmentMetadataSerDe\n-     */\n-    private static final FragmentMetadataSerDe INSTANCE = new FragmentMetadataSerDe();\n-\n     public final ObjectMapper mapper;", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMDQ2MQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487210461", "bodyText": "yes", "author": "frankgh", "createdAt": "2020-09-11T18:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NTI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java b/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java\nindex 9626e4a81..0daef36af 100644\n--- a/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java\n+++ b/server/pxf-api/src/main/java/org/greenplum/pxf/api/utilities/FragmentMetadataSerDe.java\n\n@@ -19,7 +19,8 @@ public class FragmentMetadataSerDe extends StdSerializer<FragmentMetadata> {\n \n     private static final long serialVersionUID = 123173996615107417L;\n     private static final String CLASSNAME = \"className\";\n-    public final ObjectMapper mapper;\n+\n+    private final ObjectMapper mapper;\n \n     /**\n      * Private constructor to prevent initialization\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODM1MQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486758351", "bodyText": "if this is for testing, should it be package visibility ?", "author": "denalex", "createdAt": "2020-09-11T03:54:32Z", "path": "server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java", "diffHunk": "@@ -62,8 +59,12 @@\n      * Constructs a LineBreakAccessor.\n      */\n     public LineBreakAccessor() {\n+        this(SpringContext.getBean(CodecFactory.class));\n+    }\n+\n+    public LineBreakAccessor(CodecFactory codecFactory) {", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMzYwMw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487213603", "bodyText": "This is only visible for testing, I'll make it package private and add the @VisibleForTesting annotation", "author": "frankgh", "createdAt": "2020-09-11T18:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java b/server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java\nindex 07a42ee3d..b6c0b09c4 100644\n--- a/server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java\n+++ b/server/pxf-hdfs/src/main/java/org/greenplum/pxf/plugins/hdfs/LineBreakAccessor.java\n\n@@ -62,7 +63,8 @@ public class LineBreakAccessor extends HdfsSplittableDataAccessor {\n         this(SpringContext.getBean(CodecFactory.class));\n     }\n \n-    public LineBreakAccessor(CodecFactory codecFactory) {\n+    @VisibleForTesting\n+    LineBreakAccessor(CodecFactory codecFactory) {\n         super(new TextInputFormat());\n         this.codecFactory = codecFactory;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4OTQwNw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486789407", "bodyText": "how is this still a Component when it has RequestContext as a member ?", "author": "denalex", "createdAt": "2020-09-11T05:54:36Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java", "diffHunk": "@@ -55,6 +55,11 @@ public HttpRequestParser(PluginConf pluginConf, RequestContext context) {\n         this.context = context;\n     }\n \n+    @Autowired\n+    public void setMetadataSerDe(FragmentMetadataSerDe metadataSerDe) {\n+        this.metadataSerDe = metadataSerDe;\n+    }\n+", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0ODExOQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487248119", "bodyText": "yes, I removed it now.", "author": "frankgh", "createdAt": "2020-09-11T19:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4OTQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java\nindex 37f3eed69..4bfee4f48 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/HttpRequestParser.java\n\n@@ -50,9 +49,8 @@ public class HttpRequestParser implements RequestParser<MultiValueMap<String, St\n      *\n      * @param pluginConf the plugin conf\n      */\n-    public HttpRequestParser(PluginConf pluginConf, RequestContext context) {\n+    public HttpRequestParser(PluginConf pluginConf) {\n         this.pluginConf = pluginConf;\n-        this.context = context;\n     }\n \n     @Autowired\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5OTE2OA==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486799168", "bodyText": "better to use constructor dependency injection and final fields", "author": "denalex", "createdAt": "2020-09-11T06:23:35Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java", "diffHunk": "@@ -32,9 +35,17 @@\n  * Utility class for converting Fragments into a {@link FragmentsResponse} that\n  * will serialize them into JSON format.\n  */\n+@Component\n public class FragmentsResponseFormatter {\n \n-    private static final Log LOG = LogFactory.getLog(FragmentsResponseFormatter.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(FragmentsResponseFormatter.class);\n+\n+    private FragmentMetadataSerDe metadataSerDe;\n+\n+    @Autowired\n+    public void setMetadataSerDe(FragmentMetadataSerDe metadataSerDe) {\n+        this.metadataSerDe = metadataSerDe;\n+    }", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e21b75fd22c882a1743dcff079a17ed8419b258a", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java\nindex 7f974f441..5cbf7a87b 100644\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java\n+++ b/server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmentsResponseFormatter.java\n\n@@ -40,10 +40,9 @@ public class FragmentsResponseFormatter {\n \n     private static final Logger LOG = LoggerFactory.getLogger(FragmentsResponseFormatter.class);\n \n-    private FragmentMetadataSerDe metadataSerDe;\n+    private final FragmentMetadataSerDe metadataSerDe;\n \n-    @Autowired\n-    public void setMetadataSerDe(FragmentMetadataSerDe metadataSerDe) {\n+    public FragmentsResponseFormatter(FragmentMetadataSerDe metadataSerDe) {\n         this.metadataSerDe = metadataSerDe;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMTU5MQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r486801591", "bodyText": "not even sure we need this interface anymore", "author": "denalex", "createdAt": "2020-09-11T06:30:24Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.greenplum.pxf.service.utilities;\n+\n+import org.greenplum.pxf.api.model.Plugin;\n+import org.greenplum.pxf.api.model.RequestContext;\n+\n+/**\n+ * Factory interface for getting instances of the plugins based on their class names.\n+ *\n+ * @param <T> interface that the resulting plugin should implement\n+ */\n+public interface PluginFactory {", "originalCommit": "665e894c64142f63ea4f15c2f1a4252feab450a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIyMDk5Nw==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487220997", "bodyText": "I re-introduced it because we need a way to get the Plugins", "author": "frankgh", "createdAt": "2020-09-11T18:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk5NzA2OQ==", "url": "https://github.com/greenplum-db/pxf/pull/430#discussion_r487997069", "bodyText": "spoke offline with Alex, and he meant the interface is no longer needed. It's been removed", "author": "frankgh", "createdAt": "2020-09-14T14:55:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwMTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8a1e921d95a1f9b92a6618316763d0345810350f", "chunk": "diff --git a/server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java b/server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java\ndeleted file mode 100644\nindex fd203c710..000000000\n--- a/server/pxf-service/src/main/java/org/greenplum/pxf/service/utilities/PluginFactory.java\n+++ /dev/null\n\n@@ -1,21 +0,0 @@\n-package org.greenplum.pxf.service.utilities;\n-\n-import org.greenplum.pxf.api.model.Plugin;\n-import org.greenplum.pxf.api.model.RequestContext;\n-\n-/**\n- * Factory interface for getting instances of the plugins based on their class names.\n- *\n- * @param <T> interface that the resulting plugin should implement\n- */\n-public interface PluginFactory {\n-\n-    /**\n-     * Get an instance of the plugin with a given class names.\n-     *\n-     * @param context         context of the current request\n-     * @param pluginClassName the fully qualified name of the class\n-     * @return an initialized instance of the plugin\n-     */\n-    <T extends Plugin> T getPlugin(RequestContext context, String pluginClassName);\n-}\n"}}, {"oid": "e21b75fd22c882a1743dcff079a17ed8419b258a", "url": "https://github.com/greenplum-db/pxf/commit/e21b75fd22c882a1743dcff079a17ed8419b258a", "message": "Address PR feedback", "committedDate": "2020-09-11T19:35:48Z", "type": "commit"}, {"oid": "8a1e921d95a1f9b92a6618316763d0345810350f", "url": "https://github.com/greenplum-db/pxf/commit/8a1e921d95a1f9b92a6618316763d0345810350f", "message": "Address PR feedback: Remove PluginFactory interface", "committedDate": "2020-09-11T23:24:50Z", "type": "commit"}]}