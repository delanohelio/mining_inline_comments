{"pr_number": 401, "pr_title": "Add `date` complex type to HdfsWritableAvroTest", "pr_createdAt": "2020-07-01T17:19:33Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/401", "timeline": [{"oid": "8c387fb1ab6b9b759dc8043ac374fe2b9f39e9c2", "url": "https://github.com/greenplum-db/pxf/commit/8c387fb1ab6b9b759dc8043ac374fe2b9f39e9c2", "message": "Test time type\n\nAuthored-by: Oliver Albertini <oalbertini@vmware.com>", "committedDate": "2020-07-03T04:19:08Z", "type": "forcePushed"}, {"oid": "965e164b10bc02eb7903a852ed079894d2262fdc", "url": "https://github.com/greenplum-db/pxf/commit/965e164b10bc02eb7903a852ed079894d2262fdc", "message": "Test timestampz\n\nAuthored-by: Oliver Albertini <oalbertini@vmware.com>", "committedDate": "2020-07-06T21:29:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMzA3OQ==", "url": "https://github.com/greenplum-db/pxf/pull/401#discussion_r450503079", "bodyText": "@lisakowen I've added these types: date, time, timestamp, and timestamp with time zone. Is there any other Greenplum type you think I should certify?", "author": "oliverralbertini", "createdAt": "2020-07-06T22:02:49Z", "path": "automation/src/test/java/org/greenplum/pxf/automation/features/avro/HdfsWritableAvroTest.java", "diffHunk": "@@ -53,15 +54,23 @@\n             \"type_enum_mood mood\",\n             \"type_long_array BIGINT[]\",\n             \"type_numeric_array NUMERIC(8,1)[]\",\n-            \"type_string_array TEXT[]\"\n+            \"type_string_array TEXT[]\",\n+            \"type_date DATE\",\n+            \"type_time TIME\",\n+            \"type_timestamp TIMESTAMP\",\n+            \"type_timestampz TIMESTAMP WITH TIME ZONE\"", "originalCommit": "965e164b10bc02eb7903a852ed079894d2262fdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyMDQ5Nw==", "url": "https://github.com/greenplum-db/pxf/pull/401#discussion_r450520497", "bodyText": "the only other one that i can think of right now is varchar.  but not sure how often one would use that type when writing to avro?", "author": "lisakowen", "createdAt": "2020-07-06T22:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMzA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzOTkyNQ==", "url": "https://github.com/greenplum-db/pxf/pull/401#discussion_r455239925", "bodyText": "Added testing for char and varchar. (in the tests for primitive types).\nWe use a writable external table with char and varchar columns that write to Avro string types, and can read them back into a readable external table using the same types.", "author": "oliverralbertini", "createdAt": "2020-07-15T18:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMzA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d24e960134f7868dc5e849c1b3ff650c2ed1622", "chunk": "diff --git a/automation/src/test/java/org/greenplum/pxf/automation/features/avro/HdfsWritableAvroTest.java b/automation/src/test/java/org/greenplum/pxf/automation/features/avro/HdfsWritableAvroTest.java\nindex ae039cd0..2ae4a882 100644\n--- a/automation/src/test/java/org/greenplum/pxf/automation/features/avro/HdfsWritableAvroTest.java\n+++ b/automation/src/test/java/org/greenplum/pxf/automation/features/avro/HdfsWritableAvroTest.java\n\n@@ -46,7 +48,9 @@ public class HdfsWritableAvroTest extends BaseFeature {\n             \"type_double float8\",\n             \"type_string text\",\n             \"type_bytes bytea\",\n-            \"type_boolean bool\"\n+            \"type_boolean bool\",\n+            \"type_char character(20)\",\n+            \"type_varchar varchar(32)\"\n     };\n     private static final String[] AVRO_COMPLEX_TABLE_COLS_WRITABLE = new String[]{\n             \"type_int int\",\n"}}, {"oid": "e48a3d2c355e44647584cbdca3eb2781f33901b5", "url": "https://github.com/greenplum-db/pxf/commit/e48a3d2c355e44647584cbdca3eb2781f33901b5", "message": "Add scalar complex types to HdfsWritableAvroTest\n\nWe convert it them to strings in Avro, but it's good to verify that it\nworks. Later we can support writing to the actual logical types[0] in\nAvro.\n\n* date\n* time\n* timestamp\n* timestamp with time zone\n\n[0] https://avro.apache.org/docs/current/spec.html#Logical+Types\n\nAuthored-by: Oliver Albertini <oalbertini@vmware.com>", "committedDate": "2020-07-15T01:06:05Z", "type": "forcePushed"}, {"oid": "0d24e960134f7868dc5e849c1b3ff650c2ed1622", "url": "https://github.com/greenplum-db/pxf/commit/0d24e960134f7868dc5e849c1b3ff650c2ed1622", "message": "Add scalar complex types to HdfsWritableAvroTest\n\nWe convert it them to strings in Avro, but it's good to verify that it\nworks. Later we can support writing to the actual logical types[0] in\nAvro.\n\n* date\n* time\n* timestamp\n* timestamp with time zone\n\nAlso we add testing for primitive character types:\n\n* char\n* varchar\n\nThese types become strings in Avro, but can still be read back into the\ncorresponding char types in Postgres.\n\n[0] https://avro.apache.org/docs/current/spec.html#Logical+Types\n\nAuthored-by: Oliver Albertini <oalbertini@vmware.com>", "committedDate": "2020-07-15T16:43:23Z", "type": "forcePushed"}, {"oid": "e18ee9ef9ac58a1150412315befaab9c62c08bc0", "url": "https://github.com/greenplum-db/pxf/commit/e18ee9ef9ac58a1150412315befaab9c62c08bc0", "message": "Add scalar complex types to HdfsWritableAvroTest\n\nWe convert it them to strings in Avro, but it's good to verify that it\nworks. Later we can support writing to the actual logical types[0] in\nAvro.\n\n* date\n* time\n* timestamp\n* timestamp with time zone\n\nAlso we add testing for primitive character types:\n\n* char\n* varchar\n\nThese types become strings in Avro, but can still be read back into the\ncorresponding char types in Postgres.\n\n[0] https://avro.apache.org/docs/current/spec.html#Logical+Types\n\nAuthored-by: Oliver Albertini <oalbertini@vmware.com>", "committedDate": "2020-07-15T18:01:05Z", "type": "commit"}, {"oid": "e18ee9ef9ac58a1150412315befaab9c62c08bc0", "url": "https://github.com/greenplum-db/pxf/commit/e18ee9ef9ac58a1150412315befaab9c62c08bc0", "message": "Add scalar complex types to HdfsWritableAvroTest\n\nWe convert it them to strings in Avro, but it's good to verify that it\nworks. Later we can support writing to the actual logical types[0] in\nAvro.\n\n* date\n* time\n* timestamp\n* timestamp with time zone\n\nAlso we add testing for primitive character types:\n\n* char\n* varchar\n\nThese types become strings in Avro, but can still be read back into the\ncorresponding char types in Postgres.\n\n[0] https://avro.apache.org/docs/current/spec.html#Logical+Types\n\nAuthored-by: Oliver Albertini <oalbertini@vmware.com>", "committedDate": "2020-07-15T18:01:05Z", "type": "forcePushed"}]}