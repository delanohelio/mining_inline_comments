{"pr_number": 12947, "pr_title": "Add farming tick offsets to time tracking plugin", "pr_createdAt": "2020-12-18T00:49:48Z", "pr_url": "https://github.com/runelite/runelite/pull/12947", "timeline": [{"oid": "d89a265c1868592c42262a56c38fd136f32b926e", "url": "https://github.com/runelite/runelite/commit/d89a265c1868592c42262a56c38fd136f32b926e", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T01:17:00Z", "type": "forcePushed"}, {"oid": "d157ab2083a662d30567f93e91fdd9f03c510ab7", "url": "https://github.com/runelite/runelite/commit/d157ab2083a662d30567f93e91fdd9f03c510ab7", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T01:26:03Z", "type": "forcePushed"}, {"oid": "49993620cbbc71bbebdfeab71b5a9fd9425ff3e4", "url": "https://github.com/runelite/runelite/commit/49993620cbbc71bbebdfeab71b5a9fd9425ff3e4", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T01:29:19Z", "type": "forcePushed"}, {"oid": "cd96859c523d9c2351289d9fdd91a910e1a73907", "url": "https://github.com/runelite/runelite/commit/cd96859c523d9c2351289d9fdd91a910e1a73907", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T02:49:09Z", "type": "forcePushed"}, {"oid": "c11378b4ac75c3205e7d055988cee75bc0f459b3", "url": "https://github.com/runelite/runelite/commit/c11378b4ac75c3205e7d055988cee75bc0f459b3", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T20:46:19Z", "type": "forcePushed"}, {"oid": "e6872f04840abd3f3c915c5d0594dbded0474e3b", "url": "https://github.com/runelite/runelite/commit/e6872f04840abd3f3c915c5d0594dbded0474e3b", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T22:43:39Z", "type": "forcePushed"}, {"oid": "9d0cbe8cf1f3d33dca2213a2c43049cc5c100671", "url": "https://github.com/runelite/runelite/commit/9d0cbe8cf1f3d33dca2213a2c43049cc5c100671", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-18T22:56:26Z", "type": "forcePushed"}, {"oid": "e8a052df7f717bd4c159f13bd0181f0e13ffc840", "url": "https://github.com/runelite/runelite/commit/e8a052df7f717bd4c159f13bd0181f0e13ffc840", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-19T22:39:13Z", "type": "forcePushed"}, {"oid": "a2b13c5a85f7cafcd1bf97ed11909ba498d98a87", "url": "https://github.com/runelite/runelite/commit/a2b13c5a85f7cafcd1bf97ed11909ba498d98a87", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-20T02:47:29Z", "type": "forcePushed"}, {"oid": "bca3b686c3d4e32cae0db905d2c24069b15f2482", "url": "https://github.com/runelite/runelite/commit/bca3b686c3d4e32cae0db905d2c24069b15f2482", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-21T17:54:09Z", "type": "forcePushed"}, {"oid": "9e48fe9c2a083bf9911e82d9bcafa38108c70ba2", "url": "https://github.com/runelite/runelite/commit/9e48fe9c2a083bf9911e82d9bcafa38108c70ba2", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-21T18:11:34Z", "type": "forcePushed"}, {"oid": "46f3215af798ca69cfd3000dec0fc0be99b41353", "url": "https://github.com/runelite/runelite/commit/46f3215af798ca69cfd3000dec0fc0be99b41353", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-21T19:51:51Z", "type": "forcePushed"}, {"oid": "8e32c0880c9bc1075082f4c7f8fe9a35c447917d", "url": "https://github.com/runelite/runelite/commit/8e32c0880c9bc1075082f4c7f8fe9a35c447917d", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-21T22:01:28Z", "type": "forcePushed"}, {"oid": "613348f15952268e396be5564dc8e968736bee58", "url": "https://github.com/runelite/runelite/commit/613348f15952268e396be5564dc8e968736bee58", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-21T22:10:04Z", "type": "forcePushed"}, {"oid": "d060ed6f5151095e18cd797e567f0a1ae5d11d6c", "url": "https://github.com/runelite/runelite/commit/d060ed6f5151095e18cd797e567f0a1ae5d11d6c", "message": "Improve time tracking to account for farming tick offsets", "committedDate": "2020-12-22T00:08:59Z", "type": "forcePushed"}, {"oid": "916e463efad1a2b66989f9948ab5912591cffd0c", "url": "https://github.com/runelite/runelite/commit/916e463efad1a2b66989f9948ab5912591cffd0c", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-22T01:00:31Z", "type": "forcePushed"}, {"oid": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "url": "https://github.com/runelite/runelite/commit/015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-22T02:21:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MzU0NA==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547193544", "bodyText": "this would probably be better as a :: command. maybe ::resetfarmtick?", "author": "abextm", "createdAt": "2020-12-22T10:22:41Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java", "diffHunk": "@@ -136,4 +140,23 @@ default Tab activeTab()\n \t\thidden = true\n \t)\n \tvoid setActiveTab(Tab t);\n+\n+\t@ConfigSection(\n+\t\tname = \"Advanced Farming Settings\",\n+\t\tdescription = \"These settings should not be changed unless you know what you are doing\",\n+\t\tposition = 7,\n+\t\tclosedByDefault = true\n+\t)\n+\tString advancedSection = \"advanced\";\n+\n+\t@ConfigItem(\n+\t\tkeyName = FARM_TICK_OFFSET_RESET,\n+\t\tname = \"Reset Automatic Farming Tick Tracking\",\n+\t\tdescription = \"Reset automatic farming tick offset tracking.\",\n+\t\tsection = advancedSection\n+\t)\n+\tdefault boolean resetFarmTickOffset()", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java\nindex a6bcd3ed4..41882bf71 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java\n\n@@ -140,23 +139,4 @@ public interface TimeTrackingConfig extends Config\n \t\thidden = true\n \t)\n \tvoid setActiveTab(Tab t);\n-\n-\t@ConfigSection(\n-\t\tname = \"Advanced Farming Settings\",\n-\t\tdescription = \"These settings should not be changed unless you know what you are doing\",\n-\t\tposition = 7,\n-\t\tclosedByDefault = true\n-\t)\n-\tString advancedSection = \"advanced\";\n-\n-\t@ConfigItem(\n-\t\tkeyName = FARM_TICK_OFFSET_RESET,\n-\t\tname = \"Reset Automatic Farming Tick Tracking\",\n-\t\tdescription = \"Reset automatic farming tick offset tracking.\",\n-\t\tsection = advancedSection\n-\t)\n-\tdefault boolean resetFarmTickOffset()\n-\t{\n-\t\treturn false;\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5Mzg2OA==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547193868", "bodyText": "newlines", "author": "abextm", "createdAt": "2020-12-22T10:23:17Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java", "diffHunk": "@@ -64,9 +68,8 @@\n \t@Nullable\n \tprivate TabContentPanel activeTabPanel = null;\n \n-\tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config,\n-\t\tFarmingTracker farmingTracker, BirdHouseTracker birdHouseTracker, ClockManager clockManager,\n-\t\tFarmingContractManager farmingContractManager)\n+\t@Inject\n+\tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config, FarmingTracker farmingTracker, BirdHouseTracker birdHouseTracker, ClockManager clockManager, FarmingContractManager farmingContractManager, ConfigManager configManager, @Named(\"developerMode\") boolean developerMode)", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java\nindex 236d64869..52095d211 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java\n\n@@ -69,7 +69,10 @@ class TimeTrackingPanel extends PluginPanel\n \tprivate TabContentPanel activeTabPanel = null;\n \n \t@Inject\n-\tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config, FarmingTracker farmingTracker, BirdHouseTracker birdHouseTracker, ClockManager clockManager, FarmingContractManager farmingContractManager, ConfigManager configManager, @Named(\"developerMode\") boolean developerMode)\n+\tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config, FarmingTracker farmingTracker,\n+\t\t\t\t\tBirdHouseTracker birdHouseTracker, ClockManager clockManager,\n+\t\t\t\t\tFarmingContractManager farmingContractManager, ConfigManager configManager,\n+\t\t\t\t\t@Named(\"developerMode\") boolean developerMode)\n \t{\n \t\tsuper(false);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NDY5Ng==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547194696", "bodyText": "newValue can be null. In general prefer \"value\".equals(thing) to thing.equals(value)", "author": "abextm", "createdAt": "2020-12-22T10:24:58Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java", "diffHunk": "@@ -172,6 +169,13 @@ else if (clockManager.getStopwatches().isEmpty() && e.getKey().equals(STOPWATCHE\n \t\t{\n \t\t\tclockManager.loadStopwatches();\n \t\t}\n+\n+\t\tif (e.getKey().equals(FARM_TICK_OFFSET_RESET) && e.getNewValue().equals(\"true\"))", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java\nindex 179c7bd8c..3f79b6815 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java\n\n@@ -169,12 +169,15 @@ public class TimeTrackingPlugin extends Plugin\n \t\t{\n \t\t\tclockManager.loadStopwatches();\n \t\t}\n+\t}\n \n-\t\tif (e.getKey().equals(FARM_TICK_OFFSET_RESET) && e.getNewValue().equals(\"true\"))\n+\t@Subscribe\n+\tpublic void onCommandExecuted(CommandExecuted commandExecuted)\n+\t{\n+\t\tif (commandExecuted.getCommand().equals(\"resetfarmtick\"))\n \t\t{\n-\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, 0);\n-\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, 0);\n-\t\t\te.setNewValue(\"false\");\n+\t\t\tconfigManager.unsetRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n+\t\t\tconfigManager.unsetRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NjU2Ng==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547196566", "bodyText": "Use {} replacement rather than string concatenation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlog.debug(\"Farming: New region loaded. \" + newRegions.toString() + \" at \" + client.getTickCount() + \" ticks\");\n          \n          \n            \n            \t\t\tlog.debug(\"Farming: New region loaded. {} at {} ticks\", newRegions, client.getTickCount());", "author": "abextm", "createdAt": "2020-12-22T10:28:47Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -100,13 +104,16 @@ public boolean updateData(WorldPoint location)\n \t\t\t}\n \t\t}\n \n-\t\tfor (FarmingRegion region : farmingWorld.getRegions().get(location.getRegionID()))\n+\t\tCollection<FarmingRegion> newRegions = farmingWorld.getRegionsForLocation(location);\n+\n+\t\tif (!newRegions.equals(lastRegions))\n \t\t{\n-\t\t\tif (!region.isInBounds(location))\n-\t\t\t{\n-\t\t\t\tcontinue;\n-\t\t\t}\n+\t\t\tnewRegionLoaded = true;\n+\t\t\tlog.debug(\"Farming: New region loaded. \" + newRegions.toString() + \" at \" + client.getTickCount() + \" ticks\");", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -109,7 +109,7 @@ public class FarmingTracker\n \t\tif (!newRegions.equals(lastRegions))\n \t\t{\n \t\t\tnewRegionLoaded = true;\n-\t\t\tlog.debug(\"Farming: New region loaded. \" + newRegions.toString() + \" at \" + client.getTickCount() + \" ticks\");\n+\t\t\tlog.debug(\"Farming: New region loaded. {} at {} ticks\", newRegions.toString(), client.getTickCount());\n \t\t}\n \n \t\tfor (FarmingRegion region : newRegions)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMDEzMg==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547200132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n          \n          \n            \n            \t\t\t\t\t\t\t\tInteger storedOffsetPrecision = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, Integer.class);\n          \n      \n    \n    \n  \n\nThe config manager is capable of doing the conversion, you should use that since it handles corrupted configs.", "author": "abextm", "createdAt": "2020-12-22T10:35:44Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -121,30 +128,81 @@ public boolean updateData(WorldPoint location)\n \t\t\t\tif (storedValue != null)\n \t\t\t\t{\n \t\t\t\t\tString[] parts = storedValue.split(\":\");\n-\t\t\t\t\tif (parts.length == 2 && parts[0].equals(strVarbit))\n+\t\t\t\t\tif (parts.length == 2)\n \t\t\t\t\t{\n-\t\t\t\t\t\tlong unixTime = 0;\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\tif (parts[0].equals(strVarbit))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\tlong unixTime = 0;\n+\t\t\t\t\t\t\ttry\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\telse if (!newRegionLoaded)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n+\t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();\n+\n+\t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -154,36 +154,21 @@ public class FarmingTracker\n \n \t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n \t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n-\n-\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n-\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tInteger storedOffsetPrecision = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, Integer.class);\n+\t\t\t\t\t\t\t\tInteger storedOffsetMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, Integer.class);\n \n \t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n-\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n-\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);\n+\t\t\t\t\t\t\t\tlog.debug(\"Farming: Observed an exact growth tick. Offset is: {} from a {} minute tick\", offsetMins, patchTickRate);\n \n-\t\t\t\t\t\t\t\tif (storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != null && storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n \t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n-\t\t\t\t\t\t\t\t\tString info = \"Farming: Offset error! Observed new offset of \" + offsetMins + \", previous observed offset was \" + storedOffsetMins + \" (\" + storedOffsetMins % patchTickRate + \")\" + \" Player Loc:\" + ((playerLocation != null) ? playerLocation.toString() : \"\");\n-\t\t\t\t\t\t\t\t\tlog.error(info);\n+\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));\n \t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\tif (storedOffsetPrecision == 0 || patchTickRate >= storedOffsetPrecision)\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecision == null || patchTickRate >= storedOffsetPrecision)\n \t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick \" + patchTickRate + \", saving new offset\");\n+\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick {}, saving new offset\", patchTickRate);\n \n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, patchTickRate);\n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, offsetMins);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMDQ4MA==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547200480", "bodyText": "again use formatting and not concatenation", "author": "abextm", "createdAt": "2020-12-22T10:36:24Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -121,30 +128,81 @@ public boolean updateData(WorldPoint location)\n \t\t\t\tif (storedValue != null)\n \t\t\t\t{\n \t\t\t\t\tString[] parts = storedValue.split(\":\");\n-\t\t\t\t\tif (parts.length == 2 && parts[0].equals(strVarbit))\n+\t\t\t\t\tif (parts.length == 2)\n \t\t\t\t\t{\n-\t\t\t\t\t\tlong unixTime = 0;\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\tif (parts[0].equals(strVarbit))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\tlong unixTime = 0;\n+\t\t\t\t\t\t\ttry\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\telse if (!newRegionLoaded)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n+\t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();\n+\n+\t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n+\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n+\n+\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n+\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n+\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n+\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -154,36 +154,21 @@ public class FarmingTracker\n \n \t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n \t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n-\n-\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n-\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tInteger storedOffsetPrecision = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, Integer.class);\n+\t\t\t\t\t\t\t\tInteger storedOffsetMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, Integer.class);\n \n \t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n-\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n-\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);\n+\t\t\t\t\t\t\t\tlog.debug(\"Farming: Observed an exact growth tick. Offset is: {} from a {} minute tick\", offsetMins, patchTickRate);\n \n-\t\t\t\t\t\t\t\tif (storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != null && storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n \t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n-\t\t\t\t\t\t\t\t\tString info = \"Farming: Offset error! Observed new offset of \" + offsetMins + \", previous observed offset was \" + storedOffsetMins + \" (\" + storedOffsetMins % patchTickRate + \")\" + \" Player Loc:\" + ((playerLocation != null) ? playerLocation.toString() : \"\");\n-\t\t\t\t\t\t\t\t\tlog.error(info);\n+\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));\n \t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\tif (storedOffsetPrecision == 0 || patchTickRate >= storedOffsetPrecision)\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecision == null || patchTickRate >= storedOffsetPrecision)\n \t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick \" + patchTickRate + \", saving new offset\");\n+\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick {}, saving new offset\", patchTickRate);\n \n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, patchTickRate);\n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, offsetMins);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMDY4Ng==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547200686", "bodyText": "ditto", "author": "abextm", "createdAt": "2020-12-22T10:36:49Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -121,30 +128,81 @@ public boolean updateData(WorldPoint location)\n \t\t\t\tif (storedValue != null)\n \t\t\t\t{\n \t\t\t\t\tString[] parts = storedValue.split(\":\");\n-\t\t\t\t\tif (parts.length == 2 && parts[0].equals(strVarbit))\n+\t\t\t\t\tif (parts.length == 2)\n \t\t\t\t\t{\n-\t\t\t\t\t\tlong unixTime = 0;\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\tif (parts[0].equals(strVarbit))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\tlong unixTime = 0;\n+\t\t\t\t\t\t\ttry\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\telse if (!newRegionLoaded)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n+\t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();\n+\n+\t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n+\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n+\n+\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n+\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n+\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n+\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n+\t\t\t\t\t\t\t\t\tString info = \"Farming: Offset error! Observed new offset of \" + offsetMins + \", previous observed offset was \" + storedOffsetMins + \" (\" + storedOffsetMins % patchTickRate + \")\" + \" Player Loc:\" + ((playerLocation != null) ? playerLocation.toString() : \"\");\n+\t\t\t\t\t\t\t\t\tlog.error(info);", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -154,36 +154,21 @@ public class FarmingTracker\n \n \t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n \t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n-\n-\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n-\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tInteger storedOffsetPrecision = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, Integer.class);\n+\t\t\t\t\t\t\t\tInteger storedOffsetMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, Integer.class);\n \n \t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n-\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n-\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);\n+\t\t\t\t\t\t\t\tlog.debug(\"Farming: Observed an exact growth tick. Offset is: {} from a {} minute tick\", offsetMins, patchTickRate);\n \n-\t\t\t\t\t\t\t\tif (storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != null && storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n \t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n-\t\t\t\t\t\t\t\t\tString info = \"Farming: Offset error! Observed new offset of \" + offsetMins + \", previous observed offset was \" + storedOffsetMins + \" (\" + storedOffsetMins % patchTickRate + \")\" + \" Player Loc:\" + ((playerLocation != null) ? playerLocation.toString() : \"\");\n-\t\t\t\t\t\t\t\t\tlog.error(info);\n+\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));\n \t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\tif (storedOffsetPrecision == 0 || patchTickRate >= storedOffsetPrecision)\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecision == null || patchTickRate >= storedOffsetPrecision)\n \t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick \" + patchTickRate + \", saving new offset\");\n+\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick {}, saving new offset\", patchTickRate);\n \n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, patchTickRate);\n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, offsetMins);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMjAxMQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547202011", "bodyText": "remove this newline; readd the one above", "author": "abextm", "createdAt": "2020-12-22T10:39:24Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -121,30 +128,81 @@ public boolean updateData(WorldPoint location)\n \t\t\t\tif (storedValue != null)\n \t\t\t\t{\n \t\t\t\t\tString[] parts = storedValue.split(\":\");\n-\t\t\t\t\tif (parts.length == 2 && parts[0].equals(strVarbit))\n+\t\t\t\t\tif (parts.length == 2)\n \t\t\t\t\t{\n-\t\t\t\t\t\tlong unixTime = 0;\n-\t\t\t\t\t\ttry\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\tif (parts[0].equals(strVarbit))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\tlong unixTime = 0;\n+\t\t\t\t\t\t\ttry\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\telse if (!newRegionLoaded)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n+\t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();\n+\n+\t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n+\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n+\n+\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n+\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n+\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n+\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n+\t\t\t\t\t\t\t\t\tString info = \"Farming: Offset error! Observed new offset of \" + offsetMins + \", previous observed offset was \" + storedOffsetMins + \" (\" + storedOffsetMins % patchTickRate + \")\" + \" Player Loc:\" + ((playerLocation != null) ? playerLocation.toString() : \"\");\n+\t\t\t\t\t\t\t\t\tlog.error(info);\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecision == 0 || patchTickRate >= storedOffsetPrecision)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick \" + patchTickRate + \", saving new offset\");\n+\n+\t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, patchTickRate);\n+\t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, offsetMins);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\n \t\t\t\tString value = strVarbit + \":\" + unixNow;\n \t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, key, value);\n \t\t\t\tchanged = true;\n+", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -154,36 +154,21 @@ public class FarmingTracker\n \n \t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n \t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tString storedOffsetPrecisionString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\t\t\t\t\t\t\tString storedOffsetString = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n-\n-\t\t\t\t\t\t\t\tint storedOffsetPrecision = 0;\n-\t\t\t\t\t\t\t\tint storedOffsetMins = 0;\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetPrecisionString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetPrecision = Integer.parseInt(storedOffsetPrecisionString);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tif (storedOffsetString != null)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tstoredOffsetMins = Integer.parseInt(storedOffsetString);\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tInteger storedOffsetPrecision = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, Integer.class);\n+\t\t\t\t\t\t\t\tInteger storedOffsetMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, Integer.class);\n \n \t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n-\t\t\t\t\t\t\t\tString growthTickMessage = \"Farming: Observed an exact growth tick. Offset is: \" + offsetMins + \" from a \" + patchTickRate + \" minute tick\";\n-\t\t\t\t\t\t\t\tlog.debug(growthTickMessage);\n+\t\t\t\t\t\t\t\tlog.debug(\"Farming: Observed an exact growth tick. Offset is: {} from a {} minute tick\", offsetMins, patchTickRate);\n \n-\t\t\t\t\t\t\t\tif (storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != null && storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n \t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n-\t\t\t\t\t\t\t\t\tString info = \"Farming: Offset error! Observed new offset of \" + offsetMins + \", previous observed offset was \" + storedOffsetMins + \" (\" + storedOffsetMins % patchTickRate + \")\" + \" Player Loc:\" + ((playerLocation != null) ? playerLocation.toString() : \"\");\n-\t\t\t\t\t\t\t\t\tlog.error(info);\n+\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));\n \t\t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\t\tif (storedOffsetPrecision == 0 || patchTickRate >= storedOffsetPrecision)\n+\t\t\t\t\t\t\t\tif (storedOffsetPrecision == null || patchTickRate >= storedOffsetPrecision)\n \t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick \" + patchTickRate + \", saving new offset\");\n+\t\t\t\t\t\t\t\t\tlog.debug(\"Farming: Found a longer growth tick {}, saving new offset\", patchTickRate);\n \n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, patchTickRate);\n \t\t\t\t\t\t\t\t\tconfigManager.setRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, offsetMins);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMjYyNg==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547202626", "bodyText": "probably also add a safety for the patch changing to a different produce", "author": "abextm", "createdAt": "2020-12-22T10:40:48Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -153,6 +211,44 @@ public boolean updateData(WorldPoint location)\n \t\treturn changed;\n \t}\n \n+\tprivate boolean isObservedGrowthTick(PatchState previous, PatchState current)\n+\t{\n+\t\t//Check the previous state so it will still calculate during the final growth tick\n+\t\tint patchTickRate = previous.getTickRate();\n+\t\tCropState previousCropState = previous.getCropState();\n+\t\tCropState currentCropState = current.getCropState();\n+\t\tProduce previousProduce = previous.getProduce();\n+\n+\t\t//Ignore weeds growing or being cleared.\n+\t\tif (previousProduce == Produce.WEEDS || current.getProduce() == Produce.WEEDS || patchTickRate <= 0)", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -220,20 +205,23 @@ public class FarmingTracker\n \t\tProduce previousProduce = previous.getProduce();\n \n \t\t//Ignore weeds growing or being cleared.\n-\t\tif (previousProduce == Produce.WEEDS || current.getProduce() == Produce.WEEDS || patchTickRate <= 0)\n+\t\tif (previousProduce == Produce.WEEDS || current.getProduce() == Produce.WEEDS\n+\t\t\t|| current.getProduce() != previousProduce\n+\t\t\t|| patchTickRate <= 0)\n \t\t{\n \t\t\treturn false;\n \t\t}\n \n \t\tif (previousCropState == CropState.GROWING)\n \t\t{\n-\t\t\tif (currentCropState == CropState.GROWING || currentCropState == CropState.DISEASED)\n+\t\t\tif ((currentCropState == CropState.GROWING && current.getStage() - previous.getStage() == 1)\n+\t\t\t\t|| currentCropState == CropState.DISEASED)\n \t\t\t{\n \t\t\t\tlog.debug(\"Farming: Found GROWING -> GROWING or GROWING -> DISEASED\");\n \t\t\t\treturn true;\n \t\t\t}\n \n-\t\t\tif (currentCropState == CropState.HARVESTABLE && !previousProduce.getPatchImplementation().isRequiresHealthCheck())\n+\t\t\tif (currentCropState == CropState.HARVESTABLE && !previousProduce.getPatchImplementation().isHealthCheckRequired())\n \t\t\t{\n \t\t\t\tlog.debug(\"Farming: Found GROWING -> HARVESTABLE\");\n \t\t\t\treturn true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMzIzMQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547203231", "bodyText": "also maybe a safety that the state is +1 of the old one", "author": "abextm", "createdAt": "2020-12-22T10:41:57Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -153,6 +211,44 @@ public boolean updateData(WorldPoint location)\n \t\treturn changed;\n \t}\n \n+\tprivate boolean isObservedGrowthTick(PatchState previous, PatchState current)\n+\t{\n+\t\t//Check the previous state so it will still calculate during the final growth tick\n+\t\tint patchTickRate = previous.getTickRate();\n+\t\tCropState previousCropState = previous.getCropState();\n+\t\tCropState currentCropState = current.getCropState();\n+\t\tProduce previousProduce = previous.getProduce();\n+\n+\t\t//Ignore weeds growing or being cleared.\n+\t\tif (previousProduce == Produce.WEEDS || current.getProduce() == Produce.WEEDS || patchTickRate <= 0)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (previousCropState == CropState.GROWING)\n+\t\t{\n+\t\t\tif (currentCropState == CropState.GROWING || currentCropState == CropState.DISEASED)\n+\t\t\t{\n+\t\t\t\tlog.debug(\"Farming: Found GROWING -> GROWING or GROWING -> DISEASED\");", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -220,20 +205,23 @@ public class FarmingTracker\n \t\tProduce previousProduce = previous.getProduce();\n \n \t\t//Ignore weeds growing or being cleared.\n-\t\tif (previousProduce == Produce.WEEDS || current.getProduce() == Produce.WEEDS || patchTickRate <= 0)\n+\t\tif (previousProduce == Produce.WEEDS || current.getProduce() == Produce.WEEDS\n+\t\t\t|| current.getProduce() != previousProduce\n+\t\t\t|| patchTickRate <= 0)\n \t\t{\n \t\t\treturn false;\n \t\t}\n \n \t\tif (previousCropState == CropState.GROWING)\n \t\t{\n-\t\t\tif (currentCropState == CropState.GROWING || currentCropState == CropState.DISEASED)\n+\t\t\tif ((currentCropState == CropState.GROWING && current.getStage() - previous.getStage() == 1)\n+\t\t\t\t|| currentCropState == CropState.DISEASED)\n \t\t\t{\n \t\t\t\tlog.debug(\"Farming: Found GROWING -> GROWING or GROWING -> DISEASED\");\n \t\t\t\treturn true;\n \t\t\t}\n \n-\t\t\tif (currentCropState == CropState.HARVESTABLE && !previousProduce.getPatchImplementation().isRequiresHealthCheck())\n+\t\t\tif (currentCropState == CropState.HARVESTABLE && !previousProduce.getPatchImplementation().isHealthCheckRequired())\n \t\t\t{\n \t\t\t\tlog.debug(\"Farming: Found GROWING -> HARVESTABLE\");\n \t\t\t\treturn true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNDI2Nw==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547204267", "bodyText": "unsafe parseInt. Use the ConfigManager to do the conversion.", "author": "abextm", "createdAt": "2020-12-22T10:44:12Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -244,6 +338,34 @@ public PatchPrediction predictPatch(FarmingPatch patch)\n \t\t);\n \t}\n \n+\tpublic long getTickTime(int tickRate, int ticks)\n+\t{\n+\t\treturn getTickTime(tickRate, ticks, Instant.now().getEpochSecond());\n+\t}\n+\n+\tpublic long getTickTime(int tickRate, int ticks, long requestedtime)\n+\t{\n+\t\tString offsetPrecisionMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n+\t\tString offsetTimeMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n+\n+\t\t//All offsets are negative but are stored as positive\n+\t\tlong calculatedOffsetTime = 0L;\n+\t\tif (offsetPrecisionMins != null && (Integer.parseInt(offsetPrecisionMins) >= tickRate || Integer.parseInt(offsetPrecisionMins) >= 40))", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -343,20 +331,20 @@ public class FarmingTracker\n \t\treturn getTickTime(tickRate, ticks, Instant.now().getEpochSecond());\n \t}\n \n-\tpublic long getTickTime(int tickRate, int ticks, long requestedtime)\n+\tpublic long getTickTime(int tickRate, int ticks, long requestedTime)\n \t{\n-\t\tString offsetPrecisionMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\tString offsetTimeMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n+\t\tInteger offsetPrecisionMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, int.class);\n+\t\tInteger offsetTimeMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, int.class);\n \n \t\t//All offsets are negative but are stored as positive\n \t\tlong calculatedOffsetTime = 0L;\n-\t\tif (offsetPrecisionMins != null && (Integer.parseInt(offsetPrecisionMins) >= tickRate || Integer.parseInt(offsetPrecisionMins) >= 40))\n+\t\tif (offsetPrecisionMins != null && (offsetPrecisionMins >= tickRate || offsetPrecisionMins >= 40))\n \t\t{\n-\t\t\tcalculatedOffsetTime = (Integer.parseInt(offsetTimeMins) % tickRate) * 60;\n+\t\t\tcalculatedOffsetTime = (offsetTimeMins % tickRate) * 60;\n \t\t}\n \n \t\t//Calculate \"now\" as +offset seconds in the future so we calculate the correct ticks\n-\t\tlong unixNow = requestedtime + calculatedOffsetTime;\n+\t\tlong unixNow = requestedTime + calculatedOffsetTime;\n \n \t\t//The time that the tick requested will happen\n \t\tlong timeOfCurrentTick = (unixNow - (unixNow % (tickRate * 60)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNDU5Mg==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547204592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic long getTickTime(int tickRate, int ticks, long requestedtime)\n          \n          \n            \n            \tpublic long getTickTime(int tickRate, int ticks, long requestedTime)", "author": "abextm", "createdAt": "2020-12-22T10:44:51Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -244,6 +338,34 @@ public PatchPrediction predictPatch(FarmingPatch patch)\n \t\t);\n \t}\n \n+\tpublic long getTickTime(int tickRate, int ticks)\n+\t{\n+\t\treturn getTickTime(tickRate, ticks, Instant.now().getEpochSecond());\n+\t}\n+\n+\tpublic long getTickTime(int tickRate, int ticks, long requestedtime)", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex a40f4f13d..19c545832 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -343,20 +331,20 @@ public class FarmingTracker\n \t\treturn getTickTime(tickRate, ticks, Instant.now().getEpochSecond());\n \t}\n \n-\tpublic long getTickTime(int tickRate, int ticks, long requestedtime)\n+\tpublic long getTickTime(int tickRate, int ticks, long requestedTime)\n \t{\n-\t\tString offsetPrecisionMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\tString offsetTimeMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n+\t\tInteger offsetPrecisionMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, int.class);\n+\t\tInteger offsetTimeMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, int.class);\n \n \t\t//All offsets are negative but are stored as positive\n \t\tlong calculatedOffsetTime = 0L;\n-\t\tif (offsetPrecisionMins != null && (Integer.parseInt(offsetPrecisionMins) >= tickRate || Integer.parseInt(offsetPrecisionMins) >= 40))\n+\t\tif (offsetPrecisionMins != null && (offsetPrecisionMins >= tickRate || offsetPrecisionMins >= 40))\n \t\t{\n-\t\t\tcalculatedOffsetTime = (Integer.parseInt(offsetTimeMins) % tickRate) * 60;\n+\t\t\tcalculatedOffsetTime = (offsetTimeMins % tickRate) * 60;\n \t\t}\n \n \t\t//Calculate \"now\" as +offset seconds in the future so we calculate the correct ticks\n-\t\tlong unixNow = requestedtime + calculatedOffsetTime;\n+\t\tlong unixNow = requestedTime + calculatedOffsetTime;\n \n \t\t//The time that the tick requested will happen\n \t\tlong timeOfCurrentTick = (unixNow - (unixNow % (tickRate * 60)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNjkxNQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547206915", "bodyText": "newlines", "author": "abextm", "createdAt": "2020-12-22T10:49:27Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java", "diffHunk": "@@ -306,4 +342,9 @@ private void add(FarmingRegion r, int... extraRegions)\n \t\t\t\t.add(p);\n \t\t}\n \t}\n+\n+\tCollection<FarmingRegion> getRegionsForLocation(WorldPoint location)\n+\t{\n+\t\treturn this.regions.get(location.getRegionID()).stream().filter(region -> region.isInBounds(location)).collect(Collectors.toSet());", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java\nindex a0d558d8b..bbeab0a63 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java\n\n@@ -345,6 +344,8 @@ class FarmingWorld\n \n \tCollection<FarmingRegion> getRegionsForLocation(WorldPoint location)\n \t{\n-\t\treturn this.regions.get(location.getRegionID()).stream().filter(region -> region.isInBounds(location)).collect(Collectors.toSet());\n+\t\treturn this.regions.get(location.getRegionID()).stream()\n+\t\t\t.filter(region -> region.isInBounds(location))\n+\t\t\t.collect(Collectors.toSet());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzE4MA==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547207180", "bodyText": "I dislike this change, especially since this is private.", "author": "abextm", "createdAt": "2020-12-22T10:50:00Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java", "diffHunk": "@@ -292,7 +328,7 @@ public boolean isInBounds(WorldPoint loc)\n \t\tthis.tabs = Collections.unmodifiableMap(umtabs);\n \t}\n \n-\tprivate void add(FarmingRegion r, int... extraRegions)\n+\tprivate void add(Multimap<Integer, FarmingRegion> regions, FarmingRegion r, int... extraRegions)", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxMjQ3Ng==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547412476", "bodyText": "pmd was upset with FarmingWorld.regions not being final once the getter was removed. What is the suggested solution?", "author": "MESLewis", "createdAt": "2020-12-22T17:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQxNDc0OQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547414749", "bodyText": "you can opt it out of pmd since its incorrect.", "author": "abextm", "createdAt": "2020-12-22T17:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java\nindex a0d558d8b..bbeab0a63 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingWorld.java\n\n@@ -328,7 +327,7 @@ class FarmingWorld\n \t\tthis.tabs = Collections.unmodifiableMap(umtabs);\n \t}\n \n-\tprivate void add(Multimap<Integer, FarmingRegion> regions, FarmingRegion r, int... extraRegions)\n+\tprivate void add(FarmingRegion r, int... extraRegions)\n \t{\n \t\tregions.put(r.getRegionID(), r);\n \t\tfor (int er : extraRegions)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzcwMw==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547207703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final boolean requiresHealthCheck;\n          \n          \n            \n            \tprivate final boolean healthCheckRequired;\n          \n      \n    \n    \n  \n\nor write your own getter idc", "author": "abextm", "createdAt": "2020-12-22T10:51:05Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/PatchImplementation.java", "diffHunk": "@@ -2787,4 +2787,6 @@ PatchState forVarbitValue(int value)\n \tprivate final Tab tab;\n \n \tprivate final String name;\n+\n+\tprivate final boolean requiresHealthCheck;", "originalCommit": "015ff83e47c2b765e50e8bec79f258bf0e9d1fff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/PatchImplementation.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/PatchImplementation.java\nindex 026783a4e..1707f0281 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/PatchImplementation.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/PatchImplementation.java\n\n@@ -2788,5 +2788,5 @@ public enum PatchImplementation\n \n \tprivate final String name;\n \n-\tprivate final boolean requiresHealthCheck;\n+\tprivate final boolean healthCheckRequired;\n }\n"}}, {"oid": "b8273cb4688d370e3a78f9a9691222f19afbcbb2", "url": "https://github.com/runelite/runelite/commit/b8273cb4688d370e3a78f9a9691222f19afbcbb2", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-22T20:42:37Z", "type": "forcePushed"}, {"oid": "c3520eda34270f9af0613c1bbc65456b128f5fc9", "url": "https://github.com/runelite/runelite/commit/c3520eda34270f9af0613c1bbc65456b128f5fc9", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-22T21:55:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4Nzg2Ng==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547587866", "bodyText": "Should this be behind developer mode?", "author": "Adam-", "createdAt": "2020-12-23T01:17:35Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java", "diffHunk": "@@ -174,6 +171,16 @@ else if (clockManager.getStopwatches().isEmpty() && e.getKey().equals(STOPWATCHE\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onCommandExecuted(CommandExecuted commandExecuted)\n+\t{\n+\t\tif (commandExecuted.getCommand().equals(\"resetfarmtick\"))", "originalCommit": "c3520eda34270f9af0613c1bbc65456b128f5fc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4ODQ4NA==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547588484", "bodyText": "I think it is important for users to be able to reset their timing if anything goes wrong.", "author": "MESLewis", "createdAt": "2020-12-23T01:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU4Nzg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "7898c466302a6f32282122f8a6d7cc9ef2d9862b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java\nindex 3f79b6815..55ff192af 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPlugin.java\n\n@@ -171,16 +174,6 @@ public class TimeTrackingPlugin extends Plugin\n \t\t}\n \t}\n \n-\t@Subscribe\n-\tpublic void onCommandExecuted(CommandExecuted commandExecuted)\n-\t{\n-\t\tif (commandExecuted.getCommand().equals(\"resetfarmtick\"))\n-\t\t{\n-\t\t\tconfigManager.unsetRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION);\n-\t\t\tconfigManager.unsetRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET);\n-\t\t}\n-\t}\n-\n \t@Subscribe\n \tpublic void onGameTick(GameTick t)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0ODI3Ng==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547948276", "bodyText": "normally config keys are camel case", "author": "abextm", "createdAt": "2020-12-23T13:02:28Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java", "diffHunk": "@@ -33,6 +33,9 @@\n public interface TimeTrackingConfig extends Config\n {\n \tString CONFIG_GROUP = \"timetracking\";\n+\tString FARM_TICK_OFFSET = \"farm_tick_offset\";", "originalCommit": "c3520eda34270f9af0613c1bbc65456b128f5fc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f8057426c5eba229aee383ee5263ae6a774fbb4", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java\nindex 41882bf71..76ceb67bc 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingConfig.java\n\n@@ -33,9 +33,8 @@ import net.runelite.client.config.Units;\n public interface TimeTrackingConfig extends Config\n {\n \tString CONFIG_GROUP = \"timetracking\";\n-\tString FARM_TICK_OFFSET = \"farm_tick_offset\";\n-\tString FARM_TICK_OFFSET_PRECISION = \"farm_tick_offset_precision\";\n-\tString FARM_TICK_OFFSET_RESET = \"farm_tick_offset_reset\";\n+\tString FARM_TICK_OFFSET = \"farmTickOffset\";\n+\tString FARM_TICK_OFFSET_PRECISION = \"farmTickOffsetPrecision\";\n \tString AUTOWEED = \"autoweed\";\n \tString BIRD_HOUSE = \"birdhouse\";\n \tString BOTANIST = \"botanist\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MjMwNQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547952305", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));\n          \n          \n            \n            \t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\",\n          \n          \n            \n            \t\t\t\t\t\t\t\t\t\toffsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, playerLocation));\n          \n      \n    \n    \n  \n\nplayerLocation will never be null, and even if it could be this would be better", "author": "abextm", "createdAt": "2020-12-23T13:13:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -121,20 +128,52 @@ public boolean updateData(WorldPoint location)\n \t\t\t\tif (storedValue != null)\n \t\t\t\t{\n \t\t\t\t\tString[] parts = storedValue.split(\":\");\n-\t\t\t\t\tif (parts.length == 2 && parts[0].equals(strVarbit))\n+\t\t\t\t\tif (parts.length == 2)\n \t\t\t\t\t{\n-\t\t\t\t\t\tlong unixTime = 0;\n-\t\t\t\t\t\ttry\n+\t\t\t\t\t\tif (parts[0].equals(strVarbit))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\tlong unixTime = 0;\n+\t\t\t\t\t\t\ttry\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\telse if (!newRegionLoaded)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// ignored\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n+\t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();\n+\n+\t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tInteger storedOffsetPrecision = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, int.class);\n+\t\t\t\t\t\t\t\tInteger storedOffsetMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, int.class);\n+\n+\t\t\t\t\t\t\t\tint offsetMins = (int) Math.abs(((Instant.now().getEpochSecond() / 60) % patchTickRate) - patchTickRate);\n+\t\t\t\t\t\t\t\tlog.debug(\"Farming: Observed an exact growth tick. Offset is: {} from a {} minute tick\", offsetMins, patchTickRate);\n+\n+\t\t\t\t\t\t\t\tif (storedOffsetMins != null && storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n+\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));", "originalCommit": "c3520eda34270f9af0613c1bbc65456b128f5fc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f8057426c5eba229aee383ee5263ae6a774fbb4", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex 48b219ca4..bf5f0a220 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -163,7 +163,7 @@ public class FarmingTracker\n \t\t\t\t\t\t\t\tif (storedOffsetMins != null && storedOffsetMins != 0 && offsetMins != storedOffsetMins % patchTickRate)\n \t\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t\tWorldPoint playerLocation = client.getLocalPlayer().getWorldLocation();\n-\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, ((playerLocation != null) ? playerLocation.toString() : \"\"));\n+\t\t\t\t\t\t\t\t\tlog.error(\"Farming: Offset error! Observed new offset of {}, previous observed offset was {} ({}) Player Loc:{}\", offsetMins, storedOffsetMins, storedOffsetMins % patchTickRate, playerLocation);\n \t\t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\t\tif (storedOffsetPrecision == null || patchTickRate >= storedOffsetPrecision)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MzkyNQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r547953925", "bodyText": "should have a null check for offsetTimeMins too", "author": "abextm", "createdAt": "2020-12-23T13:16:55Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -244,6 +326,34 @@ public PatchPrediction predictPatch(FarmingPatch patch)\n \t\t);\n \t}\n \n+\tpublic long getTickTime(int tickRate, int ticks)\n+\t{\n+\t\treturn getTickTime(tickRate, ticks, Instant.now().getEpochSecond());\n+\t}\n+\n+\tpublic long getTickTime(int tickRate, int ticks, long requestedTime)\n+\t{\n+\t\tInteger offsetPrecisionMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET_PRECISION, int.class);\n+\t\tInteger offsetTimeMins = configManager.getRSProfileConfiguration(TimeTrackingConfig.CONFIG_GROUP, TimeTrackingConfig.FARM_TICK_OFFSET, int.class);\n+\n+\t\t//All offsets are negative but are stored as positive\n+\t\tlong calculatedOffsetTime = 0L;\n+\t\tif (offsetPrecisionMins != null && (offsetPrecisionMins >= tickRate || offsetPrecisionMins >= 40))", "originalCommit": "c3520eda34270f9af0613c1bbc65456b128f5fc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f8057426c5eba229aee383ee5263ae6a774fbb4", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex 48b219ca4..bf5f0a220 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -338,7 +338,7 @@ public class FarmingTracker\n \n \t\t//All offsets are negative but are stored as positive\n \t\tlong calculatedOffsetTime = 0L;\n-\t\tif (offsetPrecisionMins != null && (offsetPrecisionMins >= tickRate || offsetPrecisionMins >= 40))\n+\t\tif (offsetPrecisionMins != null && offsetTimeMins != null && (offsetPrecisionMins >= tickRate || offsetPrecisionMins >= 40))\n \t\t{\n \t\t\tcalculatedOffsetTime = (offsetTimeMins % tickRate) * 60;\n \t\t}\n"}}, {"oid": "1f8057426c5eba229aee383ee5263ae6a774fbb4", "url": "https://github.com/runelite/runelite/commit/1f8057426c5eba229aee383ee5263ae6a774fbb4", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-23T19:45:38Z", "type": "forcePushed"}, {"oid": "e1c64dbea32a22affd868d4bef02bc45bb397484", "url": "https://github.com/runelite/runelite/commit/e1c64dbea32a22affd868d4bef02bc45bb397484", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-27T15:43:18Z", "type": "forcePushed"}, {"oid": "e628fbfea8334b8636aace4ce42623425df209a3", "url": "https://github.com/runelite/runelite/commit/e628fbfea8334b8636aace4ce42623425df209a3", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-27T16:21:18Z", "type": "forcePushed"}, {"oid": "7898c466302a6f32282122f8a6d7cc9ef2d9862b", "url": "https://github.com/runelite/runelite/commit/7898c466302a6f32282122f8a6d7cc9ef2d9862b", "message": "runelite-api: add WidgetClosed event", "committedDate": "2020-12-27T20:58:45Z", "type": "commit"}, {"oid": "27ea3fbab689764a9cdf7483cd92cf768402b16d", "url": "https://github.com/runelite/runelite/commit/27ea3fbab689764a9cdf7483cd92cf768402b16d", "message": "runelite-api: add WidgetNode::modalMode", "committedDate": "2020-12-27T20:58:45Z", "type": "commit"}, {"oid": "0381abddcbbad5aad71c471678af7e232d95ee9c", "url": "https://github.com/runelite/runelite/commit/0381abddcbbad5aad71c471678af7e232d95ee9c", "message": "Add additional areas to FarmingRegions", "committedDate": "2020-12-27T20:58:45Z", "type": "commit"}, {"oid": "519968f568ec01a7970a50b3b776511aed173900", "url": "https://github.com/runelite/runelite/commit/519968f568ec01a7970a50b3b776511aed173900", "message": "Add Health Check data to PatchImplementation.java", "committedDate": "2020-12-27T20:58:45Z", "type": "commit"}, {"oid": "1fb5d19ec0f933484688dd23355c8f8d8c6b8256", "url": "https://github.com/runelite/runelite/commit/1fb5d19ec0f933484688dd23355c8f8d8c6b8256", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-27T22:10:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE3NDkyOQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r549174929", "bodyText": "too many indents", "author": "abextm", "createdAt": "2020-12-27T23:12:56Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java", "diffHunk": "@@ -64,9 +68,11 @@\n \t@Nullable\n \tprivate TabContentPanel activeTabPanel = null;\n \n-\tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config,\n-\t\tFarmingTracker farmingTracker, BirdHouseTracker birdHouseTracker, ClockManager clockManager,\n-\t\tFarmingContractManager farmingContractManager)\n+\t@Inject\n+\tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config, FarmingTracker farmingTracker,\n+\t\t\t\t\tBirdHouseTracker birdHouseTracker, ClockManager clockManager,", "originalCommit": "1fb5d19ec0f933484688dd23355c8f8d8c6b8256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4e91c60cd794afa32ac5984ec92b961317487a8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java\nindex 52095d211..990324c93 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/TimeTrackingPanel.java\n\n@@ -70,9 +70,9 @@ class TimeTrackingPanel extends PluginPanel\n \n \t@Inject\n \tTimeTrackingPanel(ItemManager itemManager, TimeTrackingConfig config, FarmingTracker farmingTracker,\n-\t\t\t\t\tBirdHouseTracker birdHouseTracker, ClockManager clockManager,\n-\t\t\t\t\tFarmingContractManager farmingContractManager, ConfigManager configManager,\n-\t\t\t\t\t@Named(\"developerMode\") boolean developerMode)\n+\t\tBirdHouseTracker birdHouseTracker, ClockManager clockManager,\n+\t\tFarmingContractManager farmingContractManager, ConfigManager configManager,\n+\t\t@Named(\"developerMode\") boolean developerMode)\n \t{\n \t\tsuper(false);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE3NTUyOQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r549175529", "bodyText": "Add type parameters to all these raw TimeablePanels\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final List<TimeablePanel> patchPanels;\n          \n          \n            \n            \tprivate final List<TimeablePanel<Void>> patchPanels;", "author": "abextm", "createdAt": "2020-12-27T23:20:28Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingNextTickPanel.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c) 2020 Morgan Lewis\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *     list of conditions and the following disclaimer.\n+ *  2. Redistributions in binary form must reproduce the above copyright notice,\n+ *     this list of conditions and the following disclaimer in the documentation\n+ *     and/or other materials provided with the distribution.\n+ *\n+ *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.timetracking.farming;\n+\n+import com.google.inject.Inject;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.swing.JTextArea;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.plugins.timetracking.TabContentPanel;\n+import net.runelite.client.plugins.timetracking.TimeTrackingConfig;\n+import net.runelite.client.plugins.timetracking.TimeablePanel;\n+import net.runelite.client.ui.ColorScheme;\n+\n+public class FarmingNextTickPanel extends TabContentPanel\n+{\n+\tprivate final FarmingTracker farmingTracker;\n+\tprivate final TimeTrackingConfig config;\n+\tprivate final ConfigManager configManager;\n+\tprivate final List<TimeablePanel> patchPanels;", "originalCommit": "1fb5d19ec0f933484688dd23355c8f8d8c6b8256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4e91c60cd794afa32ac5984ec92b961317487a8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingNextTickPanel.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingNextTickPanel.java\nindex 48109a8cc..100de2194 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingNextTickPanel.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingNextTickPanel.java\n\n@@ -42,7 +42,7 @@ public class FarmingNextTickPanel extends TabContentPanel\n \tprivate final FarmingTracker farmingTracker;\n \tprivate final TimeTrackingConfig config;\n \tprivate final ConfigManager configManager;\n-\tprivate final List<TimeablePanel> patchPanels;\n+\tprivate final List<TimeablePanel<Void>> patchPanels;\n \tprivate final JTextArea infoTextArea;\n \n \t@Inject\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE3NTc1OA==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r549175758", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate Collection<FarmingRegion> lastRegions = Collections.EMPTY_LIST;\n          \n          \n            \n            \tprivate Collection<FarmingRegion> lastRegions = Collections.emptyList();\n          \n      \n    \n    \n  \n\nor I think this can be null", "author": "abextm", "createdAt": "2020-12-27T23:24:00Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -58,9 +63,11 @@\n \t */\n \tprivate final Map<Tab, Long> completionTimes = new EnumMap<>(Tab.class);\n \n+\tprivate boolean newRegionLoaded;\n+\tprivate Collection<FarmingRegion> lastRegions = Collections.EMPTY_LIST;", "originalCommit": "1fb5d19ec0f933484688dd23355c8f8d8c6b8256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4e91c60cd794afa32ac5984ec92b961317487a8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex 9370294ec..409ee85e1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -64,7 +63,7 @@ public class FarmingTracker\n \tprivate final Map<Tab, Long> completionTimes = new EnumMap<>(Tab.class);\n \n \tprivate boolean newRegionLoaded;\n-\tprivate Collection<FarmingRegion> lastRegions = Collections.EMPTY_LIST;\n+\tprivate Collection<FarmingRegion> lastRegions;\n \n \t@Inject\n \tprivate FarmingTracker(Client client, ItemManager itemManager, ConfigManager configManager, TimeTrackingConfig config, FarmingWorld farmingWorld)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE3NTc3NQ==", "url": "https://github.com/runelite/runelite/pull/12947#discussion_r549175775", "bodyText": "(previous|current)PatchState should have null checks", "author": "abextm", "createdAt": "2020-12-27T23:24:31Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java", "diffHunk": "@@ -121,20 +138,56 @@ public boolean updateData(WorldPoint location)\n \t\t\t\tif (storedValue != null)\n \t\t\t\t{\n \t\t\t\t\tString[] parts = storedValue.split(\":\");\n-\t\t\t\t\tif (parts.length == 2 && parts[0].equals(strVarbit))\n+\t\t\t\t\tif (parts.length == 2)\n \t\t\t\t\t{\n-\t\t\t\t\t\tlong unixTime = 0;\n-\t\t\t\t\t\ttry\n+\t\t\t\t\t\tif (parts[0].equals(strVarbit))\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\tlong unixTime = 0;\n+\t\t\t\t\t\t\ttry\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tunixTime = Long.parseLong(parts[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tif (unixTime + (5 * 60) > unixNow && unixNow + 30 > unixTime)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tcatch (NumberFormatException e)\n+\t\t\t\t\t\telse if (!newRegionLoaded && timeSinceModalClose > 1)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t// ignored\n+\t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n+\t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();", "originalCommit": "1fb5d19ec0f933484688dd23355c8f8d8c6b8256", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d4e91c60cd794afa32ac5984ec92b961317487a8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\nindex 9370294ec..409ee85e1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/timetracking/farming/FarmingTracker.java\n\n@@ -160,6 +159,12 @@ public class FarmingTracker\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\tPatchState previousPatchState = patch.getImplementation().forVarbitValue(Integer.parseInt(parts[0]));\n \t\t\t\t\t\t\tPatchState currentPatchState = patch.getImplementation().forVarbitValue(client.getVar(varbit));\n+\n+\t\t\t\t\t\t\tif (previousPatchState == null || currentPatchState == null)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\n \t\t\t\t\t\t\tint patchTickRate = previousPatchState.getTickRate();\n \n \t\t\t\t\t\t\tif (isObservedGrowthTick(previousPatchState, currentPatchState))\n"}}, {"oid": "d4e91c60cd794afa32ac5984ec92b961317487a8", "url": "https://github.com/runelite/runelite/commit/d4e91c60cd794afa32ac5984ec92b961317487a8", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-27T23:56:08Z", "type": "commit"}, {"oid": "d4e91c60cd794afa32ac5984ec92b961317487a8", "url": "https://github.com/runelite/runelite/commit/d4e91c60cd794afa32ac5984ec92b961317487a8", "message": "Add farming tick offset to time tracking plugin", "committedDate": "2020-12-27T23:56:08Z", "type": "forcePushed"}]}