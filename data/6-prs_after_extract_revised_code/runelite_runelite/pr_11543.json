{"pr_number": 11543, "pr_title": "chat-history: add option to clear history for all chatbox tabs", "pr_createdAt": "2020-05-11T02:21:51Z", "pr_url": "https://github.com/runelite/runelite/pull/11543", "timeline": [{"oid": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "url": "https://github.com/runelite/runelite/commit/ff642c1bbb4036df3b341e220dd9c873c494b33d", "message": "chat-history: add option to clear history for all chatbox tabs", "committedDate": "2020-05-11T02:35:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMDI1NA==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422800254", "bodyText": "Package-private\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static ChatboxTab of(int widgetId)\n          \n          \n            \n            \tstatic ChatboxTab of(int widgetId)", "author": "Nightfirecat", "createdAt": "2020-05-11T06:04:35Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, Anthony <https://github.com/while-loop>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.chathistory;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.widgets.WidgetInfo;\n+\n+@Getter\n+enum ChatboxTab\n+{\n+\n+\tALL(\"All\", \"Switch tab\", WidgetInfo.CHATBOX_TAB_ALL,\n+\t\tChatMessageType.values()),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPRIVATE(\"Private\", null, WidgetInfo.CHATBOX_TAB_PRIVATE,\n+\t\tChatMessageType.PRIVATECHAT, ChatMessageType.PRIVATECHATOUT, ChatMessageType.MODPRIVATECHAT,\n+\t\tChatMessageType.LOGINLOGOUTNOTIFICATION),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPUBLIC(\"Public\", null, WidgetInfo.CHATBOX_TAB_PUBLIC,\n+\t\tChatMessageType.PUBLICCHAT, ChatMessageType.AUTOTYPER, ChatMessageType.MODCHAT, ChatMessageType.MODAUTOTYPER),\n+\n+\tGAME(\"Game\", \"Game: Filter\", WidgetInfo.CHATBOX_TAB_GAME,\n+\t\tChatMessageType.GAMEMESSAGE, ChatMessageType.ENGINE, ChatMessageType.BROADCAST,\n+\t\tChatMessageType.SNAPSHOTFEEDBACK, ChatMessageType.ITEM_EXAMINE, ChatMessageType.NPC_EXAMINE,\n+\t\tChatMessageType.OBJECT_EXAMINE, ChatMessageType.FRIENDNOTIFICATION, ChatMessageType.IGNORENOTIFICATION,\n+\t\tChatMessageType.CONSOLE, ChatMessageType.SPAM, ChatMessageType.PLAYERRELATED, ChatMessageType.TENSECTIMEOUT,\n+\t\tChatMessageType.WELCOME, ChatMessageType.UNKNOWN),\n+\n+\tCLAN(\"Clan\", \"Clan: Off\", WidgetInfo.CHATBOX_TAB_CLAN,\n+\t\tChatMessageType.FRIENDSCHATNOTIFICATION, ChatMessageType.FRIENDSCHAT, ChatMessageType.CHALREQ_FRIENDSCHAT),\n+\n+\tTRADE(\"Trade\", \"Trade: Off\", WidgetInfo.CHATBOX_TAB_TRADE,\n+\t\tChatMessageType.TRADE_SENT, ChatMessageType.TRADEREQ, ChatMessageType.TRADE, ChatMessageType.CHALREQ_TRADE),\n+\t;\n+\n+\tprivate static final Map<Integer, ChatboxTab> TAB_MESSAGE_TYPES = new HashMap<>();\n+\n+\t@Nullable\n+\tprivate final String after;\n+\tprivate final String name;\n+\tprivate final int widgetId;\n+\tprivate final List<ChatMessageType> messageTypes;\n+\n+\tChatboxTab(String name, String after, WidgetInfo widgetId, ChatMessageType... messageTypes)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.after = after;\n+\t\tthis.widgetId = widgetId.getId();\n+\t\tthis.messageTypes = ImmutableList.copyOf(messageTypes);\n+\t}\n+\n+\tstatic\n+\t{\n+\t\tfor (ChatboxTab t : values())\n+\t\t{\n+\t\t\tTAB_MESSAGE_TYPES.put(t.widgetId, t);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Utility method that maps the type value to its respective\n+\t * {@link ChatboxTab} value.\n+\t *\n+\t * @param widgetId packed widget ID\n+\t * @return appropriate message types for a given chatbox tab widgetId,\n+\t */\n+\tpublic static ChatboxTab of(int widgetId)", "originalCommit": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "730601253d7b176d9882029c22f4345420c3ae44", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java\nindex c38522fa3..9411f08c8 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java\n\n@@ -87,14 +87,7 @@ enum ChatboxTab\n \t\t}\n \t}\n \n-\t/**\n-\t * Utility method that maps the type value to its respective\n-\t * {@link ChatboxTab} value.\n-\t *\n-\t * @param widgetId packed widget ID\n-\t * @return appropriate message types for a given chatbox tab widgetId,\n-\t */\n-\tpublic static ChatboxTab of(int widgetId)\n+\tstatic ChatboxTab of(int widgetId)\n \t{\n \t\treturn TAB_MESSAGE_TYPES.get(widgetId);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMTAxOQ==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422801019", "bodyText": "The @return line is not at all accurate to what this method actually does. I don't think this method is complex enough to need javadoc, so this could be removed.", "author": "Nightfirecat", "createdAt": "2020-05-11T06:06:39Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, Anthony <https://github.com/while-loop>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.chathistory;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.widgets.WidgetInfo;\n+\n+@Getter\n+enum ChatboxTab\n+{\n+\n+\tALL(\"All\", \"Switch tab\", WidgetInfo.CHATBOX_TAB_ALL,\n+\t\tChatMessageType.values()),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPRIVATE(\"Private\", null, WidgetInfo.CHATBOX_TAB_PRIVATE,\n+\t\tChatMessageType.PRIVATECHAT, ChatMessageType.PRIVATECHATOUT, ChatMessageType.MODPRIVATECHAT,\n+\t\tChatMessageType.LOGINLOGOUTNOTIFICATION),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPUBLIC(\"Public\", null, WidgetInfo.CHATBOX_TAB_PUBLIC,\n+\t\tChatMessageType.PUBLICCHAT, ChatMessageType.AUTOTYPER, ChatMessageType.MODCHAT, ChatMessageType.MODAUTOTYPER),\n+\n+\tGAME(\"Game\", \"Game: Filter\", WidgetInfo.CHATBOX_TAB_GAME,\n+\t\tChatMessageType.GAMEMESSAGE, ChatMessageType.ENGINE, ChatMessageType.BROADCAST,\n+\t\tChatMessageType.SNAPSHOTFEEDBACK, ChatMessageType.ITEM_EXAMINE, ChatMessageType.NPC_EXAMINE,\n+\t\tChatMessageType.OBJECT_EXAMINE, ChatMessageType.FRIENDNOTIFICATION, ChatMessageType.IGNORENOTIFICATION,\n+\t\tChatMessageType.CONSOLE, ChatMessageType.SPAM, ChatMessageType.PLAYERRELATED, ChatMessageType.TENSECTIMEOUT,\n+\t\tChatMessageType.WELCOME, ChatMessageType.UNKNOWN),\n+\n+\tCLAN(\"Clan\", \"Clan: Off\", WidgetInfo.CHATBOX_TAB_CLAN,\n+\t\tChatMessageType.FRIENDSCHATNOTIFICATION, ChatMessageType.FRIENDSCHAT, ChatMessageType.CHALREQ_FRIENDSCHAT),\n+\n+\tTRADE(\"Trade\", \"Trade: Off\", WidgetInfo.CHATBOX_TAB_TRADE,\n+\t\tChatMessageType.TRADE_SENT, ChatMessageType.TRADEREQ, ChatMessageType.TRADE, ChatMessageType.CHALREQ_TRADE),\n+\t;\n+\n+\tprivate static final Map<Integer, ChatboxTab> TAB_MESSAGE_TYPES = new HashMap<>();\n+\n+\t@Nullable\n+\tprivate final String after;\n+\tprivate final String name;\n+\tprivate final int widgetId;\n+\tprivate final List<ChatMessageType> messageTypes;\n+\n+\tChatboxTab(String name, String after, WidgetInfo widgetId, ChatMessageType... messageTypes)\n+\t{\n+\t\tthis.name = name;\n+\t\tthis.after = after;\n+\t\tthis.widgetId = widgetId.getId();\n+\t\tthis.messageTypes = ImmutableList.copyOf(messageTypes);\n+\t}\n+\n+\tstatic\n+\t{\n+\t\tfor (ChatboxTab t : values())\n+\t\t{\n+\t\t\tTAB_MESSAGE_TYPES.put(t.widgetId, t);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Utility method that maps the type value to its respective\n+\t * {@link ChatboxTab} value.\n+\t *\n+\t * @param widgetId packed widget ID\n+\t * @return appropriate message types for a given chatbox tab widgetId,\n+\t */", "originalCommit": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "730601253d7b176d9882029c22f4345420c3ae44", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java\nindex c38522fa3..9411f08c8 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java\n\n@@ -87,14 +87,7 @@ enum ChatboxTab\n \t\t}\n \t}\n \n-\t/**\n-\t * Utility method that maps the type value to its respective\n-\t * {@link ChatboxTab} value.\n-\t *\n-\t * @param widgetId packed widget ID\n-\t * @return appropriate message types for a given chatbox tab widgetId,\n-\t */\n-\tpublic static ChatboxTab of(int widgetId)\n+\tstatic ChatboxTab of(int widgetId)\n \t{\n \t\treturn TAB_MESSAGE_TYPES.get(widgetId);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMTQyMQ==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422801421", "bodyText": "Instead of null-checking here, do it in clearChatboxHistory().", "author": "Nightfirecat", "createdAt": "2020-05-11T06:07:50Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java", "diffHunk": "@@ -248,19 +254,11 @@ public void onMenuOpened(MenuOpened event)\n \tpublic void onMenuOptionClicked(MenuOptionClicked event)\n \t{\n \t\tString menuOption = event.getMenuOption();\n+\t\tChatboxTab tab = ChatboxTab.of(event.getWidgetId());\n \n-\t\tif (menuOption.contains(CLEAR_HISTORY))\n+\t\tif (tab != null && menuOption.contains(CLEAR_HISTORY))", "originalCommit": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "730601253d7b176d9882029c22f4345420c3ae44", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\nindex 1235c8ea5..5f1127180 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\n\n@@ -256,7 +256,7 @@ public class ChatHistoryPlugin extends Plugin implements KeyListener\n \t\tString menuOption = event.getMenuOption();\n \t\tChatboxTab tab = ChatboxTab.of(event.getWidgetId());\n \n-\t\tif (tab != null && menuOption.contains(CLEAR_HISTORY))\n+\t\tif (menuOption.contains(CLEAR_HISTORY))\n \t\t{\n \t\t\tclearChatboxHistory(tab);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzAxNw==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422807017", "bodyText": "Empty string is the default and doesn't need to be explicitly set.", "author": "Nightfirecat", "createdAt": "2020-05-11T06:22:32Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java", "diffHunk": "@@ -269,6 +267,82 @@ else if (COPY_TO_CLIPBOARD.equals(menuOption) && !Strings.isNullOrEmpty(currentM\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onMenuEntryAdded(MenuEntryAdded entry)\n+\t{\n+\t\tString option = Text.removeTags(entry.getOption());\n+\t\tChatboxTab tab = ChatboxTab.of(entry.getActionParam1());\n+\n+\t\tif (!config.clearHistory() || tab == null || !option.equals(tab.getAfter()))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Public + private Clear history entries are all one word as the option.\n+\t\t// MenuEntry target is empty string.\n+\t\tfinal MenuEntry clearEntry = new MenuEntry();\n+\t\tChatMessageBuilder optionBldr = new ChatMessageBuilder();\n+\t\tif (tab != ChatboxTab.ALL)\n+\t\t{\n+\t\t\toptionBldr.append(Color.yellow, String.format(\"%s: \", tab.getName()));\n+\t\t}\n+\t\toptionBldr.append(CLEAR_HISTORY);\n+\t\tclearEntry.setOption(optionBldr.build());\n+\n+\t\tclearEntry.setTarget(\"\");", "originalCommit": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0NzI0OA==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r423047248", "bodyText": "I've tried, but null crashes the game (and menu swapper plugin)\n2020-05-11 09:34:49 [Client] ERROR client-patch - Game crash: null\njava.lang.NullPointerException: null\n\tat hz.hx(hz.java:8341)\n\tat client.hv(client.java:8326)\n\tat client.gc(client.java:8316)\n\tat client.ey(client.java:3142)\n\tat client.u(client.java:1113)\n\tat br.mk(br.java:336)\n\tat br.run(br.java:315)\n\tat java.base/java.lang.Thread.run(Thread.java:830)\nError: hz.hx() client.hv() client.ho() client.fj() client.au() br.ab() | hz:8341 client:8326 client:8316 client:3142 client:1113 br:336 br:315 Thread:830 | java.lang.NullPointerException", "author": "while-loop", "createdAt": "2020-05-11T13:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNTM4NA==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r423125384", "bodyText": "Is that with clearEntry.setTarget(null) or with this line omitted?", "author": "Nightfirecat", "createdAt": "2020-05-11T15:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2MjM2MA==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r423162360", "bodyText": "both. setting clearEntry.setTarget(null); and not explicitly setting the target.\nHere's menu swapper's stacktrace too.\n2020-05-11 12:23:43 [Client] WARN  n.runelite.client.eventbus.EventBus - Uncaught exception in event subscriber\njava.lang.NullPointerException: null\n\tat java.base/java.util.regex.Matcher.getTextLength(Matcher.java:1770)\n\tat java.base/java.util.regex.Matcher.reset(Matcher.java:416)\n\tat java.base/java.util.regex.Matcher.<init>(Matcher.java:253)\n\tat java.base/java.util.regex.Pattern.matcher(Pattern.java:1134)\n\tat net.runelite.client.util.Text.removeTags(Text.java:83)\n\tat net.runelite.client.plugins.menuentryswapper.MenuEntrySwapperPlugin.swapMenuEntry(MenuEntrySwapperPlugin.java:428)\n\tat net.runelite.client.plugins.menuentryswapper.MenuEntrySwapperPlugin.onClientTick(MenuEntrySwapperPlugin.java:835)\n\tat net.runelite.client.eventbus.EventBus$Subscriber.invoke(EventBus.java:73)\n\tat net.runelite.client.eventbus.EventBus.post(EventBus.java:222)\n\tat net.runelite.client.callback.Hooks.post(Hooks.java:167)\n\tat client.pd(client.java:14714)\n\tat client.ey(client.java:3105)\n\tat client.u(client.java:1113)\n\tat br.mk(br.java:336)\n\tat br.run(br.java:315)\n\tat java.base/java.lang.Thread.run(Thread.java:830)", "author": "while-loop", "createdAt": "2020-05-11T16:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzAxNw=="}], "type": "inlineReview", "revised_code": {"commit": "730601253d7b176d9882029c22f4345420c3ae44", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\nindex 1235c8ea5..5f1127180 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\n\n@@ -317,6 +317,10 @@ public class ChatHistoryPlugin extends Plugin implements KeyListener\n \n \tprivate void clearChatboxHistory(ChatboxTab tab)\n \t{\n+\t\tif (tab == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n \n \t\tboolean removed = false;\n \t\tfor (ChatMessageType msgType : tab.getMessageTypes())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwNzc3NQ==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r422807775", "bodyText": "Suggested change", "author": "Nightfirecat", "createdAt": "2020-05-11T06:24:24Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java", "diffHunk": "@@ -269,6 +267,82 @@ else if (COPY_TO_CLIPBOARD.equals(menuOption) && !Strings.isNullOrEmpty(currentM\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onMenuEntryAdded(MenuEntryAdded entry)\n+\t{\n+\t\tString option = Text.removeTags(entry.getOption());\n+\t\tChatboxTab tab = ChatboxTab.of(entry.getActionParam1());\n+\n+\t\tif (!config.clearHistory() || tab == null || !option.equals(tab.getAfter()))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Public + private Clear history entries are all one word as the option.\n+\t\t// MenuEntry target is empty string.\n+\t\tfinal MenuEntry clearEntry = new MenuEntry();\n+\t\tChatMessageBuilder optionBldr = new ChatMessageBuilder();\n+\t\tif (tab != ChatboxTab.ALL)\n+\t\t{\n+\t\t\toptionBldr.append(Color.yellow, String.format(\"%s: \", tab.getName()));\n+\t\t}\n+\t\toptionBldr.append(CLEAR_HISTORY);\n+\t\tclearEntry.setOption(optionBldr.build());\n+\n+\t\tclearEntry.setTarget(\"\");\n+\t\tclearEntry.setType(MenuAction.RUNELITE.getId());\n+\t\tif (tab == ChatboxTab.GAME)\n+\t\t{\n+\t\t\t// keep type as the original CC_OP to correctly group \"Game: Clear history\" with\n+\t\t\t// other tab \"Game: *\" options.\n+\t\t\tclearEntry.setType(entry.getType());\n+\t\t}\n+\t\tclearEntry.setParam0(entry.getActionParam0());\n+\t\tclearEntry.setParam1(entry.getActionParam1());\n+\n+\t\tMenuEntry[] newMenu = ObjectArrays.concat(client.getMenuEntries(), clearEntry);\n+\t\tArrayUtils.swap(newMenu, newMenu.length - 1, newMenu.length - 2);\n+\t\tclient.setMenuEntries(newMenu);\n+\t}\n+\n+\tprivate void clearMessageQueue(ChatboxTab tab)\n+\t{\n+\t\tif (tab == ChatboxTab.ALL || tab == ChatboxTab.PRIVATE)\n+\t\t{\n+\t\t\tfriends.clear();\n+\t\t}\n+\n+\t\tmessageQueue.removeIf(e -> tab.getMessageTypes().contains(e.getType()));\n+\t}\n+\n+\tprivate void clearChatboxHistory(ChatboxTab tab)\n+\t{\n+", "originalCommit": "ff642c1bbb4036df3b341e220dd9c873c494b33d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "730601253d7b176d9882029c22f4345420c3ae44", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\nindex 1235c8ea5..5f1127180 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatHistoryPlugin.java\n\n@@ -317,6 +317,10 @@ public class ChatHistoryPlugin extends Plugin implements KeyListener\n \n \tprivate void clearChatboxHistory(ChatboxTab tab)\n \t{\n+\t\tif (tab == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n \n \t\tboolean removed = false;\n \t\tfor (ChatMessageType msgType : tab.getMessageTypes())\n"}}, {"oid": "730601253d7b176d9882029c22f4345420c3ae44", "url": "https://github.com/runelite/runelite/commit/730601253d7b176d9882029c22f4345420c3ae44", "message": "chat-history: add option to clear history for all chatbox tabs", "committedDate": "2020-05-11T13:39:33Z", "type": "forcePushed"}, {"oid": "09c8eaba9b7b8d627916fe431cc8606291ecce00", "url": "https://github.com/runelite/runelite/commit/09c8eaba9b7b8d627916fe431cc8606291ecce00", "message": "chat-history: add option to clear history for all chatbox tabs", "committedDate": "2020-05-22T19:20:38Z", "type": "commit"}, {"oid": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "url": "https://github.com/runelite/runelite/commit/544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "message": "Cleanup\n\nSigned-off-by: Tomas Slusny <slusnucky@gmail.com>", "committedDate": "2020-05-22T19:40:11Z", "type": "commit"}, {"oid": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "url": "https://github.com/runelite/runelite/commit/544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "message": "Cleanup\n\nSigned-off-by: Tomas Slusny <slusnucky@gmail.com>", "committedDate": "2020-05-22T19:40:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NDkyMA==", "url": "https://github.com/runelite/runelite/pull/11543#discussion_r429674920", "bodyText": "We usually use immutablemaps for these types of things.", "author": "Adam-", "createdAt": "2020-05-24T21:01:20Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/chathistory/ChatboxTab.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright (c) 2020, Anthony <https://github.com/while-loop>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.chathistory;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nullable;\n+import lombok.Getter;\n+import net.runelite.api.ChatMessageType;\n+import net.runelite.api.widgets.WidgetInfo;\n+\n+@Getter\n+enum ChatboxTab\n+{\n+\n+\tALL(\"All\", \"Switch tab\", WidgetInfo.CHATBOX_TAB_ALL,\n+\t\tChatMessageType.values()),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPRIVATE(\"Private\", null, WidgetInfo.CHATBOX_TAB_PRIVATE,\n+\t\tChatMessageType.PRIVATECHAT, ChatMessageType.PRIVATECHATOUT, ChatMessageType.MODPRIVATECHAT,\n+\t\tChatMessageType.LOGINLOGOUTNOTIFICATION),\n+\n+\t// null 'after' var since we're not adding to menu\n+\tPUBLIC(\"Public\", null, WidgetInfo.CHATBOX_TAB_PUBLIC,\n+\t\tChatMessageType.PUBLICCHAT, ChatMessageType.AUTOTYPER, ChatMessageType.MODCHAT, ChatMessageType.MODAUTOTYPER),\n+\n+\tGAME(\"Game\", \"Game: Filter\", WidgetInfo.CHATBOX_TAB_GAME,\n+\t\tChatMessageType.GAMEMESSAGE, ChatMessageType.ENGINE, ChatMessageType.BROADCAST,\n+\t\tChatMessageType.SNAPSHOTFEEDBACK, ChatMessageType.ITEM_EXAMINE, ChatMessageType.NPC_EXAMINE,\n+\t\tChatMessageType.OBJECT_EXAMINE, ChatMessageType.FRIENDNOTIFICATION, ChatMessageType.IGNORENOTIFICATION,\n+\t\tChatMessageType.CONSOLE, ChatMessageType.SPAM, ChatMessageType.PLAYERRELATED, ChatMessageType.TENSECTIMEOUT,\n+\t\tChatMessageType.WELCOME, ChatMessageType.UNKNOWN),\n+\n+\tCLAN(\"Clan\", \"Clan: Off\", WidgetInfo.CHATBOX_TAB_CLAN,\n+\t\tChatMessageType.FRIENDSCHATNOTIFICATION, ChatMessageType.FRIENDSCHAT, ChatMessageType.CHALREQ_FRIENDSCHAT),\n+\n+\tTRADE(\"Trade\", \"Trade: Off\", WidgetInfo.CHATBOX_TAB_TRADE,\n+\t\tChatMessageType.TRADE_SENT, ChatMessageType.TRADEREQ, ChatMessageType.TRADE, ChatMessageType.CHALREQ_TRADE),\n+\t;\n+\n+\tprivate static final Map<Integer, ChatboxTab> TAB_MESSAGE_TYPES = new HashMap<>();", "originalCommit": "544a7bb8e6cf5937f15375cf3f5e799a9a9dba93", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}