{"pr_number": 10933, "pr_title": "Feature - Kingdom of Miscellania notification message", "pr_createdAt": "2020-03-03T05:52:16Z", "pr_url": "https://github.com/runelite/runelite/pull/10933", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTE5NA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387129194", "bodyText": "These should be added as hidden config options that can be then be used by the overlay and your code", "author": "raiyni", "createdAt": "2020-03-03T16:13:44Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -99,7 +138,40 @@ private void processInfobox()\n \t\t{\n \t\t\tremoveKingdomInfobox();\n \t\t}\n+\t}\n+\n+\tprivate void setKnownValues()\n+\t{\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && hasCompletedQuest() && isInKingdom())\n+\t\t{\n+\t\t\tconfigManager.setConfiguration(CONFIG_GROUP_NAME, CONFIG_LAST_CHANGED, Instant.now().getEpochSecond());", "originalCommit": "322b9a610bb07b6bd0eb5925c871af5bf7f26447", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTE3OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387131178", "bodyText": "Do you mind pointing me towards an example of this?", "author": "BrandtHill", "createdAt": "2020-03-03T16:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMTg0NA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387131844", "bodyText": "https://github.com/runelite/runelite/blob/master/runelite-client/src/main/java/net/runelite/client/plugins/slayer/SlayerConfig.java#L131", "author": "Trevor159", "createdAt": "2020-03-03T16:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjA2Nw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387222067", "bodyText": "Thank you. Added KingdomConfig.\nIs it a known issue that ConfigManager can't store longs?", "author": "BrandtHill", "createdAt": "2020-03-03T18:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyNDE4OQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387224189", "bodyText": "store the Instant see ConfigManager::stringToObject", "author": "raiyni", "createdAt": "2020-03-03T18:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MDIyMg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387240222", "bodyText": "Changed to store lastChanged as java.time.Instant instead of int representation of decaseconds epoch", "author": "BrandtHill", "createdAt": "2020-03-03T19:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex d6ecd250f..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -130,7 +146,7 @@ public class KingdomPlugin extends Plugin\n \n \tprivate void processInfobox()\n \t{\n-\t\tif (client.getGameState() == GameState.LOGGED_IN && hasCompletedQuest() && isInKingdom())\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && isThroneOfMiscellaniaCompleted() && isInKingdom())\n \t\t{\n \t\t\taddKingdomInfobox();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MDk4OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387240988", "bodyText": "Comments in this file aren't needed", "author": "raiyni", "createdAt": "2020-03-03T19:24:01Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -52,9 +52,8 @@ default int getFavorThreshold()\n \t}\r\n \r\n \t/** Stored data **/\r\n-\t// Epoch in *Decaseconds of last time coffer or favor values changed.\r\n-\t// Default is -1. Must return positive value to display notification message\r\n-\t// *Stored as integer in Decaseconds because ConfigManager unable to store longs, and 2038 problem\r\n+\t// Instant of last coffer or favor change.\r\n+\t// Default is -1 epoch. Must return positive epoch value to display notification message\r", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NzAzOA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387257038", "bodyText": "Removed comments", "author": "BrandtHill", "createdAt": "2020-03-03T19:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MDk4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 8902f6593..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -1,109 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.kingdomofmiscellania;\n \n+import java.time.Instant;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-import java.time.Instant;\n-\n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n+\tint MAX_COFFER = 7_500_000;\n+\tint MAX_FAVOR_PERCENT = 100;\n+\n \t@ConfigItem(\n-\t\t\tposition = 1,\n-\t\t\tkeyName = \"sendNotifications\",\n-\t\t\tname = \"Send Notifications\",\n-\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n+\t\tposition = 1,\n+\t\tkeyName = \"sendNotifications\",\n+\t\tname = \"Send Notifications\",\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n \t)\n \tdefault boolean shouldSendNotifications()\n \t{\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 7_500_000\n+\t\tmax = MAX_COFFER\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 2,\n-\t\t\tkeyName = \"cofferThreshold\",\n-\t\t\tname = \"Coffer Threshold\",\n-\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\n+\t\tposition = 2,\n+\t\tkeyName = \"cofferThreshold\",\n+\t\tname = \"Coffer Threshold\",\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\n \t)\n \tdefault int getCofferThreshold()\n \t{\n-\t\treturn 7_500_000;\n+\t\treturn MAX_COFFER;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 100\n+\t\tmax = MAX_FAVOR_PERCENT\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 3,\n-\t\t\tkeyName = \"favorThreshold\",\n-\t\t\tname = \"Favor Threshold\",\n-\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n+\t\tposition = 3,\n+\t\tkeyName = \"favorThreshold\",\n+\t\tname = \"Favor Threshold\",\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n \t)\n \tdefault int getFavorThreshold()\n \t{\n-\t\treturn 100;\n+\t\treturn MAX_FAVOR_PERCENT;\n \t}\n-\n-\t/** Stored data **/\n-\t// Instant of last coffer or favor change.\n-\t// Default is -1 epoch. Must return positive epoch value to display notification message\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault Instant getLastChanged()\n-\t{\n-\t\treturn Instant.ofEpochSecond(-1);\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setLastChanged(Instant lastChanged);\n-\n-\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getCoffer()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setCoffer(int coffer);\n-\n-\t// Last known value of favor - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getFavor()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setFavor(int favor);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTI2OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387241268", "bodyText": "This needs the license header", "author": "raiyni", "createdAt": "2020-03-03T19:24:32Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package net.runelite.client.plugins.kingdomofmiscellania;\r", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjI5MQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387256291", "bodyText": "Added license header", "author": "BrandtHill", "createdAt": "2020-03-03T19:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTI2OA=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 8902f6593..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -1,109 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.kingdomofmiscellania;\n \n+import java.time.Instant;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-import java.time.Instant;\n-\n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n+\tint MAX_COFFER = 7_500_000;\n+\tint MAX_FAVOR_PERCENT = 100;\n+\n \t@ConfigItem(\n-\t\t\tposition = 1,\n-\t\t\tkeyName = \"sendNotifications\",\n-\t\t\tname = \"Send Notifications\",\n-\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n+\t\tposition = 1,\n+\t\tkeyName = \"sendNotifications\",\n+\t\tname = \"Send Notifications\",\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n \t)\n \tdefault boolean shouldSendNotifications()\n \t{\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 7_500_000\n+\t\tmax = MAX_COFFER\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 2,\n-\t\t\tkeyName = \"cofferThreshold\",\n-\t\t\tname = \"Coffer Threshold\",\n-\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\n+\t\tposition = 2,\n+\t\tkeyName = \"cofferThreshold\",\n+\t\tname = \"Coffer Threshold\",\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\n \t)\n \tdefault int getCofferThreshold()\n \t{\n-\t\treturn 7_500_000;\n+\t\treturn MAX_COFFER;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 100\n+\t\tmax = MAX_FAVOR_PERCENT\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 3,\n-\t\t\tkeyName = \"favorThreshold\",\n-\t\t\tname = \"Favor Threshold\",\n-\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n+\t\tposition = 3,\n+\t\tkeyName = \"favorThreshold\",\n+\t\tname = \"Favor Threshold\",\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n \t)\n \tdefault int getFavorThreshold()\n \t{\n-\t\treturn 100;\n+\t\treturn MAX_FAVOR_PERCENT;\n \t}\n-\n-\t/** Stored data **/\n-\t// Instant of last coffer or favor change.\n-\t// Default is -1 epoch. Must return positive epoch value to display notification message\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault Instant getLastChanged()\n-\t{\n-\t\treturn Instant.ofEpochSecond(-1);\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setLastChanged(Instant lastChanged);\n-\n-\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getCoffer()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setCoffer(int coffer);\n-\n-\t// Last known value of favor - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getFavor()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setFavor(int favor);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTQ0Mg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387241442", "bodyText": "space above this line", "author": "raiyni", "createdAt": "2020-03-03T19:24:50Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+import java.time.Instant;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 1,\r\n+\t\t\tkeyName = \"sendNotifications\",\r\n+\t\t\tname = \"Send Notifications\",\r\n+\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\t\tmin = 0,\r\n+\t\t\tmax = 7_500_000\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 2,\r\n+\t\t\tkeyName = \"cofferThreshold\",\r\n+\t\t\tname = \"Coffer Threshold\",\r\n+\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\r\n+\t)\r\n+\tdefault int getCofferThreshold()\r\n+\t{\r\n+\t\treturn 7_500_000;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\t\tmin = 0,\r\n+\t\t\tmax = 100\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 3,\r\n+\t\t\tkeyName = \"favorThreshold\",\r\n+\t\t\tname = \"Favor Threshold\",\r\n+\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\r\n+\t)\r\n+\tdefault int getFavorThreshold()\r\n+\t{\r\n+\t\treturn 100;\r\n+\t}\r\n+\r\n+\t/** Stored data **/\r\n+\t// Instant of last coffer or favor change.\r\n+\t// Default is -1 epoch. Must return positive epoch value to display notification message\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"lastChanged\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\",\r\n+\t\t\thidden = true\r\n+\t)\r\n+\tdefault Instant getLastChanged()\r\n+\t{\r\n+\t\treturn Instant.ofEpochSecond(-1);\r\n+\t}\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"lastChanged\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\"\r\n+\t)\r\n+\tvoid setLastChanged(Instant lastChanged);\r\n+\r\n+\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"coffer\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\",\r\n+\t\t\thidden = true\r\n+\t)\r\n+\tdefault int getCoffer()\r\n+\t{\r\n+\t\treturn -1;\r\n+\t}\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"coffer\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\"\r\n+\t)\r\n+\tvoid setCoffer(int coffer);\r\n+\r\n+\t// Last known value of favor - default is -1: should be set when visiting Miscellania\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"favor\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\",\r\n+\t\t\thidden = true\r\n+\t)\r\n+\tdefault int getFavor()\r\n+\t{\r\n+\t\treturn -1;\r\n+\t}\r\n+\t@ConfigItem(\r", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 8902f6593..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -1,109 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.kingdomofmiscellania;\n \n+import java.time.Instant;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-import java.time.Instant;\n-\n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n+\tint MAX_COFFER = 7_500_000;\n+\tint MAX_FAVOR_PERCENT = 100;\n+\n \t@ConfigItem(\n-\t\t\tposition = 1,\n-\t\t\tkeyName = \"sendNotifications\",\n-\t\t\tname = \"Send Notifications\",\n-\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n+\t\tposition = 1,\n+\t\tkeyName = \"sendNotifications\",\n+\t\tname = \"Send Notifications\",\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n \t)\n \tdefault boolean shouldSendNotifications()\n \t{\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 7_500_000\n+\t\tmax = MAX_COFFER\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 2,\n-\t\t\tkeyName = \"cofferThreshold\",\n-\t\t\tname = \"Coffer Threshold\",\n-\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\n+\t\tposition = 2,\n+\t\tkeyName = \"cofferThreshold\",\n+\t\tname = \"Coffer Threshold\",\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\n \t)\n \tdefault int getCofferThreshold()\n \t{\n-\t\treturn 7_500_000;\n+\t\treturn MAX_COFFER;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 100\n+\t\tmax = MAX_FAVOR_PERCENT\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 3,\n-\t\t\tkeyName = \"favorThreshold\",\n-\t\t\tname = \"Favor Threshold\",\n-\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n+\t\tposition = 3,\n+\t\tkeyName = \"favorThreshold\",\n+\t\tname = \"Favor Threshold\",\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n \t)\n \tdefault int getFavorThreshold()\n \t{\n-\t\treturn 100;\n+\t\treturn MAX_FAVOR_PERCENT;\n \t}\n-\n-\t/** Stored data **/\n-\t// Instant of last coffer or favor change.\n-\t// Default is -1 epoch. Must return positive epoch value to display notification message\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault Instant getLastChanged()\n-\t{\n-\t\treturn Instant.ofEpochSecond(-1);\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setLastChanged(Instant lastChanged);\n-\n-\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getCoffer()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setCoffer(int coffer);\n-\n-\t// Last known value of favor - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getFavor()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setFavor(int favor);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTUzNA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387241534", "bodyText": "space above this line", "author": "raiyni", "createdAt": "2020-03-03T19:25:00Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+import java.time.Instant;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 1,\r\n+\t\t\tkeyName = \"sendNotifications\",\r\n+\t\t\tname = \"Send Notifications\",\r\n+\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\t\tmin = 0,\r\n+\t\t\tmax = 7_500_000\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 2,\r\n+\t\t\tkeyName = \"cofferThreshold\",\r\n+\t\t\tname = \"Coffer Threshold\",\r\n+\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\r\n+\t)\r\n+\tdefault int getCofferThreshold()\r\n+\t{\r\n+\t\treturn 7_500_000;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\t\tmin = 0,\r\n+\t\t\tmax = 100\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 3,\r\n+\t\t\tkeyName = \"favorThreshold\",\r\n+\t\t\tname = \"Favor Threshold\",\r\n+\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\r\n+\t)\r\n+\tdefault int getFavorThreshold()\r\n+\t{\r\n+\t\treturn 100;\r\n+\t}\r\n+\r\n+\t/** Stored data **/\r\n+\t// Instant of last coffer or favor change.\r\n+\t// Default is -1 epoch. Must return positive epoch value to display notification message\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"lastChanged\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\",\r\n+\t\t\thidden = true\r\n+\t)\r\n+\tdefault Instant getLastChanged()\r\n+\t{\r\n+\t\treturn Instant.ofEpochSecond(-1);\r\n+\t}\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"lastChanged\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\"\r\n+\t)\r\n+\tvoid setLastChanged(Instant lastChanged);\r\n+\r\n+\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"coffer\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\",\r\n+\t\t\thidden = true\r\n+\t)\r\n+\tdefault int getCoffer()\r\n+\t{\r\n+\t\treturn -1;\r\n+\t}\r\n+\t@ConfigItem(\r", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 8902f6593..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -1,109 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.kingdomofmiscellania;\n \n+import java.time.Instant;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-import java.time.Instant;\n-\n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n+\tint MAX_COFFER = 7_500_000;\n+\tint MAX_FAVOR_PERCENT = 100;\n+\n \t@ConfigItem(\n-\t\t\tposition = 1,\n-\t\t\tkeyName = \"sendNotifications\",\n-\t\t\tname = \"Send Notifications\",\n-\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n+\t\tposition = 1,\n+\t\tkeyName = \"sendNotifications\",\n+\t\tname = \"Send Notifications\",\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n \t)\n \tdefault boolean shouldSendNotifications()\n \t{\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 7_500_000\n+\t\tmax = MAX_COFFER\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 2,\n-\t\t\tkeyName = \"cofferThreshold\",\n-\t\t\tname = \"Coffer Threshold\",\n-\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\n+\t\tposition = 2,\n+\t\tkeyName = \"cofferThreshold\",\n+\t\tname = \"Coffer Threshold\",\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\n \t)\n \tdefault int getCofferThreshold()\n \t{\n-\t\treturn 7_500_000;\n+\t\treturn MAX_COFFER;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 100\n+\t\tmax = MAX_FAVOR_PERCENT\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 3,\n-\t\t\tkeyName = \"favorThreshold\",\n-\t\t\tname = \"Favor Threshold\",\n-\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n+\t\tposition = 3,\n+\t\tkeyName = \"favorThreshold\",\n+\t\tname = \"Favor Threshold\",\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n \t)\n \tdefault int getFavorThreshold()\n \t{\n-\t\treturn 100;\n+\t\treturn MAX_FAVOR_PERCENT;\n \t}\n-\n-\t/** Stored data **/\n-\t// Instant of last coffer or favor change.\n-\t// Default is -1 epoch. Must return positive epoch value to display notification message\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault Instant getLastChanged()\n-\t{\n-\t\treturn Instant.ofEpochSecond(-1);\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setLastChanged(Instant lastChanged);\n-\n-\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getCoffer()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setCoffer(int coffer);\n-\n-\t// Last known value of favor - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getFavor()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setFavor(int favor);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTYzMw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387241633", "bodyText": "space above this line", "author": "raiyni", "createdAt": "2020-03-03T19:25:11Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+import java.time.Instant;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 1,\r\n+\t\t\tkeyName = \"sendNotifications\",\r\n+\t\t\tname = \"Send Notifications\",\r\n+\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\t\tmin = 0,\r\n+\t\t\tmax = 7_500_000\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 2,\r\n+\t\t\tkeyName = \"cofferThreshold\",\r\n+\t\t\tname = \"Coffer Threshold\",\r\n+\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\r\n+\t)\r\n+\tdefault int getCofferThreshold()\r\n+\t{\r\n+\t\treturn 7_500_000;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\t\tmin = 0,\r\n+\t\t\tmax = 100\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\t\tposition = 3,\r\n+\t\t\tkeyName = \"favorThreshold\",\r\n+\t\t\tname = \"Favor Threshold\",\r\n+\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\r\n+\t)\r\n+\tdefault int getFavorThreshold()\r\n+\t{\r\n+\t\treturn 100;\r\n+\t}\r\n+\r\n+\t/** Stored data **/\r\n+\t// Instant of last coffer or favor change.\r\n+\t// Default is -1 epoch. Must return positive epoch value to display notification message\r\n+\t@ConfigItem(\r\n+\t\t\tkeyName = \"lastChanged\",\r\n+\t\t\tname = \"\",\r\n+\t\t\tdescription = \"\",\r\n+\t\t\thidden = true\r\n+\t)\r\n+\tdefault Instant getLastChanged()\r\n+\t{\r\n+\t\treturn Instant.ofEpochSecond(-1);\r\n+\t}\r\n+\t@ConfigItem(\r", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 8902f6593..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -1,109 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.kingdomofmiscellania;\n \n+import java.time.Instant;\n import net.runelite.client.config.Config;\n import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-import java.time.Instant;\n-\n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n+\tint MAX_COFFER = 7_500_000;\n+\tint MAX_FAVOR_PERCENT = 100;\n+\n \t@ConfigItem(\n-\t\t\tposition = 1,\n-\t\t\tkeyName = \"sendNotifications\",\n-\t\t\tname = \"Send Notifications\",\n-\t\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n+\t\tposition = 1,\n+\t\tkeyName = \"sendNotifications\",\n+\t\tname = \"Send Notifications\",\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\n \t)\n \tdefault boolean shouldSendNotifications()\n \t{\n-\t\treturn true;\n+\t\treturn false;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 7_500_000\n+\t\tmax = MAX_COFFER\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 2,\n-\t\t\tkeyName = \"cofferThreshold\",\n-\t\t\tname = \"Coffer Threshold\",\n-\t\t\tdescription = \"Send notifications if coffer is at or below this value\"\n+\t\tposition = 2,\n+\t\tkeyName = \"cofferThreshold\",\n+\t\tname = \"Coffer Threshold\",\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\n \t)\n \tdefault int getCofferThreshold()\n \t{\n-\t\treturn 7_500_000;\n+\t\treturn MAX_COFFER;\n \t}\n \n \t@Range(\n-\t\t\tmin = 0,\n-\t\t\tmax = 100\n+\t\tmax = MAX_FAVOR_PERCENT\n \t)\n \t@ConfigItem(\n-\t\t\tposition = 3,\n-\t\t\tkeyName = \"favorThreshold\",\n-\t\t\tname = \"Favor Threshold\",\n-\t\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n+\t\tposition = 3,\n+\t\tkeyName = \"favorThreshold\",\n+\t\tname = \"Favor Threshold\",\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\n \t)\n \tdefault int getFavorThreshold()\n \t{\n-\t\treturn 100;\n+\t\treturn MAX_FAVOR_PERCENT;\n \t}\n-\n-\t/** Stored data **/\n-\t// Instant of last coffer or favor change.\n-\t// Default is -1 epoch. Must return positive epoch value to display notification message\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault Instant getLastChanged()\n-\t{\n-\t\treturn Instant.ofEpochSecond(-1);\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"lastChanged\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setLastChanged(Instant lastChanged);\n-\n-\t// Last known value of coffer - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getCoffer()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"coffer\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setCoffer(int coffer);\n-\n-\t// Last known value of favor - default is -1: should be set when visiting Miscellania\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\",\n-\t\t\thidden = true\n-\t)\n-\tdefault int getFavor()\n-\t{\n-\t\treturn -1;\n-\t}\n-\t@ConfigItem(\n-\t\t\tkeyName = \"favor\",\n-\t\t\tname = \"\",\n-\t\t\tdescription = \"\"\n-\t)\n-\tvoid setFavor(int favor);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0Mjg1OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387242858", "bodyText": "this doesn't need to be a function", "author": "raiyni", "createdAt": "2020-03-03T19:27:22Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -99,7 +142,43 @@ private void processInfobox()\n \t\t{\n \t\t\tremoveKingdomInfobox();\n \t\t}\n+\t}\n \n+\tprivate void setKnownValues()", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjQ4MA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387256480", "bodyText": "Inlined function", "author": "BrandtHill", "createdAt": "2020-03-03T19:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0Mjg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex f07952d21..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -134,7 +146,7 @@ public class KingdomPlugin extends Plugin\n \n \tprivate void processInfobox()\n \t{\n-\t\tif (client.getGameState() == GameState.LOGGED_IN && hasCompletedQuest() && isInKingdom())\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && isThroneOfMiscellaniaCompleted() && isInKingdom())\n \t\t{\n \t\t\taddKingdomInfobox();\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MzI0OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387243248", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate boolean hasCompletedNextQuest()\n          \n          \n            \n            \tprivate boolean royalTroubleCompleted()", "author": "raiyni", "createdAt": "2020-03-03T19:28:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -133,9 +234,27 @@ private boolean hasCompletedQuest()\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n+\tprivate boolean hasCompletedNextQuest()", "originalCommit": "14e8d67ad4cdafd4ffccdd7375f64fbfceeb8ed6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjYxMw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387256613", "bodyText": "Renamed", "author": "BrandtHill", "createdAt": "2020-03-03T19:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MzI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex f07952d21..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -229,19 +231,19 @@ public class KingdomPlugin extends Plugin\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean isThroneOfMiscellaniaCompleted()\n \t{\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n-\tprivate boolean hasCompletedNextQuest()\n+\tprivate boolean isRoyalTroubleCompleted()\n \t{\n-\t\treturn Quest.ROYAL_TROUBLE.getState(client).equals(QuestState.FINISHED);\n+\t\treturn Quest.ROYAL_TROUBLE.getState(client) == QuestState.FINISHED;\n \t}\n \n \tstatic int getFavorPercent(int favor)\n \t{\n-\t\treturn (favor * 100) / 127;\n+\t\treturn (favor * 100) / MAX_FAVOR;\n \t}\n \n \tprivate void sendChatMessage(String chatMessage)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNDQxMg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387914412", "bodyText": "These can be removed in favor of using the config", "author": "raiyni", "createdAt": "2020-03-04T20:25:14Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -61,6 +77,12 @@\n \t@Inject\n \tprivate ItemManager itemManager;\n \n+\t@Inject\n+\tprivate KingdomConfig config;\n+\n+\t@Inject\n+\tprivate ChatMessageManager chatMessageManager;\n+\n \t@Getter\n \tprivate int favor = 0, coffer = 0;", "originalCommit": "e06b83f357cd71c743ed0bb2b4860462d518c282", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MDk1NA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r387940954", "bodyText": "True. Changed in latest commit,", "author": "BrandtHill", "createdAt": "2020-03-04T21:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNDQxMg=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 90295b9e4..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -81,10 +89,10 @@ public class KingdomPlugin extends Plugin\n \tprivate KingdomConfig config;\n \n \t@Inject\n-\tprivate ChatMessageManager chatMessageManager;\n+\tprivate ConfigManager configManager;\n \n-\t@Getter\n-\tprivate int favor = 0, coffer = 0;\n+\t@Inject\n+\tprivate ChatMessageManager chatMessageManager;\n \n \tprivate KingdomCounter counter;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDA4Mw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r389230083", "bodyText": "Don't use a magic number to represent one day's worth of seconds. Make a private static final int constant instead and represent it with (int) Duration.of(1, ChronoUnit.DAYS).get(ChronoUnit.SECONDS)", "author": "Nightfirecat", "createdAt": "2020-03-07T05:30:41Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +189,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);", "originalCommit": "ac8bc35c6319e4afd049fa0a20922c235621bc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 5ef444a47..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -191,23 +205,23 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n-\t\tint maxDailyWithdrawl = royalTroubleCompleted() ? 75_000 : 50_000;\n-\t\tint maxDailyThreshold = maxDailyWithdrawl * 10;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n-\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawl : lastCoffer / 10;\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n \tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n-\t\tfloat dailyPercentage = royalTroubleCompleted() ? 0.01f : 0.025f;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (daysSince * dailyPercentage * 127);\n+\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDE4Mw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r389230183", "bodyText": "50k and 75k should also be defined as constants.", "author": "Nightfirecat", "createdAt": "2020-03-07T05:31:50Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +189,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n+\t\tint maxDailyWithdrawl = royalTroubleCompleted() ? 75_000 : 50_000;", "originalCommit": "ac8bc35c6319e4afd049fa0a20922c235621bc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 5ef444a47..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -191,23 +205,23 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n-\t\tint maxDailyWithdrawl = royalTroubleCompleted() ? 75_000 : 50_000;\n-\t\tint maxDailyThreshold = maxDailyWithdrawl * 10;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n-\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawl : lastCoffer / 10;\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n \tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n-\t\tfloat dailyPercentage = royalTroubleCompleted() ? 0.01f : 0.025f;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (daysSince * dailyPercentage * 127);\n+\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMDQ1Ng==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r389230456", "bodyText": "127 should also be made into a constant and should get a healthy dose of javadoc to explain that approval rating is stored as an unsigned 7-bit int. (Perhaps this should be added to the varbit entry for kingdom favor)", "author": "Nightfirecat", "createdAt": "2020-03-07T05:35:54Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +189,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n+\t\tint maxDailyWithdrawl = royalTroubleCompleted() ? 75_000 : 50_000;\n+\t\tint maxDailyThreshold = maxDailyWithdrawl * 10;\n+\n+\t\tfor (int i = 0; i < daysSince; i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawl : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n+\t\tfloat dailyPercentage = royalTroubleCompleted() ? 0.01f : 0.025f;\n+\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * 127);", "originalCommit": "ac8bc35c6319e4afd049fa0a20922c235621bc45", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 5ef444a47..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -191,23 +205,23 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n-\t\tint maxDailyWithdrawl = royalTroubleCompleted() ? 75_000 : 50_000;\n-\t\tint maxDailyThreshold = maxDailyWithdrawl * 10;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n-\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawl : lastCoffer / 10;\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n \tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / 86_400, 0);\n-\t\tfloat dailyPercentage = royalTroubleCompleted() ? 0.01f : 0.025f;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (daysSince * dailyPercentage * 127);\n+\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMjU2OQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r389322569", "bodyText": "Is shouldSendNotification needed? It seems like sending notifications is already fully guarded by config.shouldSendNotifications(), loggingIn,and throneOfMiscellaniaCompleted().", "author": "Nightfirecat", "createdAt": "2020-03-08T00:15:32Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -51,6 +64,15 @@\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n+\tprivate static final String CHAT_MESSAGE_FORMAT = \"Your Kingdom of Miscellania favor is %d%%, and your coffer has %s coins.\";\n+\tprivate static final int SECONDS_IN_DAY = (int) Duration.of(1, ChronoUnit.DAYS).getSeconds();\n+\tprivate static final int MAX_WITHDRAWAL_BASE = 50_000;\n+\tprivate static final int MAX_WITHDRAWAL_ROYAL_TROUBLE = 75_000;\n+\tprivate static final float FAVOR_DECREMENT_BASE = 0.025f;\n+\tprivate static final float FAVOR_DECREMENT_ROYAL_TROUBLE = 0.01f;\n+\tprotected static final int MAX_FAVOR = 127;\n+\n+\tprivate boolean loggingIn, shouldSendNotification;", "originalCommit": "c21639b7a5009dd5e5ac7a6d9df016664cccea69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyNTExMw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r389325113", "bodyText": "True, createNotification() is only called in one place after checking loggingIn. I\u2019ll change when I get home.", "author": "BrandtHill", "createdAt": "2020-03-08T01:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMjU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMzMjI1MQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r389332251", "bodyText": "I think I originally used shouldSendNotification as the only flag, then I created loggingIn since I had to wait for the first game tick for royalTroubleCompleted() to return accurately, making it obsolete. Anyway, I've removed it.", "author": "BrandtHill", "createdAt": "2020-03-08T03:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMyMjU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 34810238d..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -64,15 +63,18 @@ import net.runelite.client.util.QuantityFormatter;\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n+\tprivate static final String CONFIG_GROUP_NAME = \"kingdomofmiscellania\";\n+\tprivate static final String CONFIG_LAST_CHANGED_KEY = \"lastChanged\";\n+\tprivate static final String CONFIG_COFFER_KEY = \"coffer\";\n+\tprivate static final String CONFIG_FAVOR_KEY = \"favor\";\n \tprivate static final String CHAT_MESSAGE_FORMAT = \"Your Kingdom of Miscellania favor is %d%%, and your coffer has %s coins.\";\n-\tprivate static final int SECONDS_IN_DAY = (int) Duration.of(1, ChronoUnit.DAYS).getSeconds();\n \tprivate static final int MAX_WITHDRAWAL_BASE = 50_000;\n \tprivate static final int MAX_WITHDRAWAL_ROYAL_TROUBLE = 75_000;\n \tprivate static final float FAVOR_DECREMENT_BASE = 0.025f;\n-\tprivate static final float FAVOR_DECREMENT_ROYAL_TROUBLE = 0.01f;\n-\tprotected static final int MAX_FAVOR = 127;\n+\tprivate static final float FAVOR_DECREMENT_ROYAL_TROUBLE = 0.010f;\n+\tstatic final int MAX_FAVOR = 127;\n \n-\tprivate boolean loggingIn, shouldSendNotification;\n+\tprivate boolean loggingIn;\n \n \t@Inject\n \tprivate Client client;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NDExNQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393274115", "bodyText": "you can just use null for this", "author": "Adam-", "createdAt": "2020-03-16T19:50:34Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import java.time.Instant;\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\tint MAX_COFFER = 7_500_000;\r\n+\tint MAX_FAVOR_PERCENT = 100;\r\n+\r\n+\t@ConfigItem(\r\n+\t\tposition = 1,\r\n+\t\tkeyName = \"sendNotifications\",\r\n+\t\tname = \"Send Notifications\",\r\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmin = 0,\r\n+\t\tmax = MAX_COFFER\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\tposition = 2,\r\n+\t\tkeyName = \"cofferThreshold\",\r\n+\t\tname = \"Coffer Threshold\",\r\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\r\n+\t)\r\n+\tdefault int getCofferThreshold()\r\n+\t{\r\n+\t\treturn MAX_COFFER;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmin = 0,\r\n+\t\tmax = MAX_FAVOR_PERCENT\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\tposition = 3,\r\n+\t\tkeyName = \"favorThreshold\",\r\n+\t\tname = \"Favor Threshold\",\r\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\r\n+\t)\r\n+\tdefault int getFavorThreshold()\r\n+\t{\r\n+\t\treturn MAX_FAVOR_PERCENT;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Stored data\r\n+\t **/\r\n+\t@ConfigItem(\r\n+\t\tkeyName = \"lastChanged\",\r\n+\t\tname = \"\",\r\n+\t\tdescription = \"\",\r\n+\t\thidden = true\r\n+\t)\r\n+\tdefault Instant getLastChanged()\r", "originalCommit": "2e7cc6c29138e82ff2523c6f12493ab91a292ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 121b61fb2..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -30,7 +30,7 @@ import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n \tint MAX_COFFER = 7_500_000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NDc5NA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393274794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprotected static final int MAX_FAVOR = 127;\n          \n          \n            \n            \tstatic final int MAX_FAVOR = 127;", "author": "Adam-", "createdAt": "2020-03-16T19:51:32Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -51,6 +64,15 @@\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n+\tprivate static final String CHAT_MESSAGE_FORMAT = \"Your Kingdom of Miscellania favor is %d%%, and your coffer has %s coins.\";\n+\tprivate static final int SECONDS_IN_DAY = (int) Duration.of(1, ChronoUnit.DAYS).getSeconds();\n+\tprivate static final int MAX_WITHDRAWAL_BASE = 50_000;\n+\tprivate static final int MAX_WITHDRAWAL_ROYAL_TROUBLE = 75_000;\n+\tprivate static final float FAVOR_DECREMENT_BASE = 0.025f;\n+\tprivate static final float FAVOR_DECREMENT_ROYAL_TROUBLE = 0.010f;\n+\tprotected static final int MAX_FAVOR = 127;", "originalCommit": "2e7cc6c29138e82ff2523c6f12493ab91a292ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 37db1aecf..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -64,13 +63,16 @@ import net.runelite.client.util.QuantityFormatter;\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n+\tprivate static final String CONFIG_GROUP_NAME = \"kingdomofmiscellania\";\n+\tprivate static final String CONFIG_LAST_CHANGED_KEY = \"lastChanged\";\n+\tprivate static final String CONFIG_COFFER_KEY = \"coffer\";\n+\tprivate static final String CONFIG_FAVOR_KEY = \"favor\";\n \tprivate static final String CHAT_MESSAGE_FORMAT = \"Your Kingdom of Miscellania favor is %d%%, and your coffer has %s coins.\";\n-\tprivate static final int SECONDS_IN_DAY = (int) Duration.of(1, ChronoUnit.DAYS).getSeconds();\n \tprivate static final int MAX_WITHDRAWAL_BASE = 50_000;\n \tprivate static final int MAX_WITHDRAWAL_ROYAL_TROUBLE = 75_000;\n \tprivate static final float FAVOR_DECREMENT_BASE = 0.025f;\n \tprivate static final float FAVOR_DECREMENT_ROYAL_TROUBLE = 0.010f;\n-\tprotected static final int MAX_FAVOR = 127;\n+\tstatic final int MAX_FAVOR = 127;\n \n \tprivate boolean loggingIn;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NTIzNg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393275236", "bodyText": "this isn't always necessarily the kingdom vars changing here, is that fine?", "author": "Adam-", "createdAt": "2020-03-16T19:52:31Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -72,11 +97,21 @@ protected void shutDown() throws Exception\n \t\tremoveKingdomInfobox();\n \t}\n \n+\t@Provides\n+\tKingdomConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(KingdomConfig.class);\n+\t}\n+\n \t@Subscribe\n \tpublic void onVarbitChanged(VarbitChanged event)\n \t{\n-\t\tfavor = client.getVar(Varbits.KINGDOM_FAVOR);\n-\t\tcoffer = client.getVar(Varbits.KINGDOM_COFFER);\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && throneOfMiscellaniaCompleted() && isInKingdom())\n+\t\t{\n+\t\t\tconfig.setLastChanged(Instant.now());", "originalCommit": "2e7cc6c29138e82ff2523c6f12493ab91a292ff0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwMzU3Nw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393303577", "bodyText": "When the isInKingdom() guard returns true, the majority of VarbitChanged events changing are those of the kingdom values, and the few extraneous events don't impact the kingdom values.", "author": "BrandtHill", "createdAt": "2020-03-16T20:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjgyNA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393352824", "bodyText": "Right, I just mean it would bump the time. That's fine?", "author": "Adam-", "createdAt": "2020-03-16T22:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5Njc0Nw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393396747", "bodyText": "The value really is lastTimeKnown. For most cases it shouldn't matter, but I'll add a check to make the value make accurate to its purpose.", "author": "BrandtHill", "createdAt": "2020-03-17T01:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 37db1aecf..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -106,11 +111,12 @@ public class KingdomPlugin extends Plugin\n \t@Subscribe\n \tpublic void onVarbitChanged(VarbitChanged event)\n \t{\n-\t\tif (client.getGameState() == GameState.LOGGED_IN && throneOfMiscellaniaCompleted() && isInKingdom())\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && isThroneOfMiscellaniaCompleted() && isInKingdom()\n+\t\t\t&& (getCoffer() != client.getVar(Varbits.KINGDOM_COFFER) || getFavor() != client.getVar(Varbits.KINGDOM_FAVOR)))\n \t\t{\n-\t\t\tconfig.setLastChanged(Instant.now());\n-\t\t\tconfig.setCoffer(client.getVar(Varbits.KINGDOM_COFFER));\n-\t\t\tconfig.setFavor(client.getVar(Varbits.KINGDOM_FAVOR));\n+\t\t\tsetLastChanged(Instant.now());\n+\t\t\tsetCoffer(client.getVar(Varbits.KINGDOM_COFFER));\n+\t\t\tsetFavor(client.getVar(Varbits.KINGDOM_FAVOR));\n \t\t}\n \t\tprocessInfobox();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI3NTY1NQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r393275655", "bodyText": "this should be debug level", "author": "Adam-", "createdAt": "2020-03-16T19:53:25Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -87,26 +122,65 @@ public void onGameStateChanged(GameStateChanged event)\n \t\t{\n \t\t\tprocessInfobox();\n \t\t}\n+\t\tif (event.getGameState() == GameState.LOGGING_IN)\n+\t\t{\n+\t\t\tloggingIn = true;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick gameTick)\n+\t{\n+\t\tif (loggingIn)\n+\t\t{\n+\t\t\tloggingIn = false;\n+\t\t\tcreateNotification();\n+\t\t}\n \t}\n \n \tprivate void processInfobox()\n \t{\n-\t\tif (client.getGameState() == GameState.LOGGED_IN && hasCompletedQuest() && isInKingdom())\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && throneOfMiscellaniaCompleted() && isInKingdom())\n \t\t{\n \t\t\taddKingdomInfobox();\n \t\t}\n \t\telse\n \t\t{\n \t\t\tremoveKingdomInfobox();\n \t\t}\n+\t}\n \n+\tprivate void createNotification()\n+\t{\n+\t\tif (config.shouldSendNotifications() && throneOfMiscellaniaCompleted())\n+\t\t{\n+\t\t\tif (config.getLastChanged().getEpochSecond() > 0)\n+\t\t\t{\n+\t\t\t\tlong lastChangedEpoch = config.getLastChanged().getEpochSecond();\n+\t\t\t\tint lastCoffer = config.getCoffer();\n+\t\t\t\tint lastFavor = config.getFavor();\n+\t\t\t\tint estimatedCoffer = estimateCoffer(lastChangedEpoch, lastCoffer);\n+\t\t\t\tint estimatedFavor = estimateFavor(lastChangedEpoch, lastFavor);\n+\t\t\t\tif (estimatedCoffer <= config.getCofferThreshold() || getFavorPercent(estimatedFavor) <= config.getFavorThreshold())\n+\t\t\t\t{\n+\t\t\t\t\tsendChatMessage(String.format(\n+\t\t\t\t\t\tCHAT_MESSAGE_FORMAT,\n+\t\t\t\t\t\tgetFavorPercent(estimatedFavor),\n+\t\t\t\t\t\tQuantityFormatter.quantityToStackSize(estimatedCoffer)));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tlog.info(\"Kingdom Of Miscellania values not yet set. Visit Miscellania to automatically set values.\");", "originalCommit": "2e7cc6c29138e82ff2523c6f12493ab91a292ff0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 37db1aecf..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -122,7 +128,7 @@ public class KingdomPlugin extends Plugin\n \t\t{\n \t\t\tprocessInfobox();\n \t\t}\n-\t\tif (event.getGameState() == GameState.LOGGING_IN)\n+\t\telse if (event.getGameState() == GameState.LOGGING_IN)\n \t\t{\n \t\t\tloggingIn = true;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5MDA1NQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553790055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn Quest.ROYAL_TROUBLE.getState(client).equals(QuestState.FINISHED);\n          \n          \n            \n            \t\treturn Quest.ROYAL_TROUBLE.getState(client) == QuestState.FINISHED;", "author": "Nightfirecat", "createdAt": "2021-01-08T07:49:49Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +197,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tint maxDailyWithdrawal = royalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < daysSince; i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tfloat dailyPercentage = royalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n+\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n+\t\treturn Math.max(lastFavor, 0);\n+\t}\n+\n \tprivate boolean isInKingdom()\n \t{\n \t\treturn client.getLocalPlayer() != null\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean throneOfMiscellaniaCompleted()\n \t{\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n+\tprivate boolean royalTroubleCompleted()\n+\t{\n+\t\treturn Quest.ROYAL_TROUBLE.getState(client).equals(QuestState.FINISHED);", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 696dd411f..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -199,11 +205,11 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n-\t\tint maxDailyWithdrawal = royalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5MDY2OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553790668", "bodyText": "This is the default and can be removed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tmin = 0,", "author": "Nightfirecat", "createdAt": "2021-01-08T07:51:31Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import java.time.Instant;\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\tint MAX_COFFER = 7_500_000;\r\n+\tint MAX_FAVOR_PERCENT = 100;\r\n+\r\n+\t@ConfigItem(\r\n+\t\tposition = 1,\r\n+\t\tkeyName = \"sendNotifications\",\r\n+\t\tname = \"Send Notifications\",\r\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmin = 0,\r", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex cc9b07262..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -30,7 +30,7 @@ import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n \tint MAX_COFFER = 7_500_000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5MDc0Mg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553790742", "bodyText": "This is the default and can be removed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tmin = 0,", "author": "Nightfirecat", "createdAt": "2021-01-08T07:51:42Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import java.time.Instant;\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\tint MAX_COFFER = 7_500_000;\r\n+\tint MAX_FAVOR_PERCENT = 100;\r\n+\r\n+\t@ConfigItem(\r\n+\t\tposition = 1,\r\n+\t\tkeyName = \"sendNotifications\",\r\n+\t\tname = \"Send Notifications\",\r\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmin = 0,\r\n+\t\tmax = MAX_COFFER\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\tposition = 2,\r\n+\t\tkeyName = \"cofferThreshold\",\r\n+\t\tname = \"Coffer Threshold\",\r\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\r\n+\t)\r\n+\tdefault int getCofferThreshold()\r\n+\t{\r\n+\t\treturn MAX_COFFER;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmin = 0,\r", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex cc9b07262..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -30,7 +30,7 @@ import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n \tint MAX_COFFER = 7_500_000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5MTg0Ng==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553791846", "bodyText": "Only one of these if statements should ever be executed so there's no need to check both every time the subscriber runs.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (event.getGameState() == GameState.LOGGING_IN)\n          \n          \n            \n            \t\telse if (event.getGameState() == GameState.LOGGING_IN)", "author": "Nightfirecat", "createdAt": "2021-01-08T07:54:51Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -87,26 +123,65 @@ public void onGameStateChanged(GameStateChanged event)\n \t\t{\n \t\t\tprocessInfobox();\n \t\t}\n+\t\tif (event.getGameState() == GameState.LOGGING_IN)", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 696dd411f..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -123,7 +128,7 @@ public class KingdomPlugin extends Plugin\n \t\t{\n \t\t\tprocessInfobox();\n \t\t}\n-\t\tif (event.getGameState() == GameState.LOGGING_IN)\n+\t\telse if (event.getGameState() == GameState.LOGGING_IN)\n \t\t{\n \t\t\tloggingIn = true;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5MjY3Mw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553792673", "bodyText": "This function would be much neater with a pair of guard clauses, eg.\nprivate void createNotification()\n{\n\tif (!config.shouldSendNotifications() || !throneOfMiscellaniaCompleted())\n\t{\n\t\treturn;\n\t}\n\n\tif (config.getLastChanged() == null)\n\t{\n\t\tlog.debug(\"Kingdom Of Miscellania values not yet set. Visit Miscellania to automatically set values.\");\n\t\treturn;\n\t}\n\n\t// rest of function code continues here\n}", "author": "Nightfirecat", "createdAt": "2021-01-08T07:57:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -87,26 +123,65 @@ public void onGameStateChanged(GameStateChanged event)\n \t\t{\n \t\t\tprocessInfobox();\n \t\t}\n+\t\tif (event.getGameState() == GameState.LOGGING_IN)\n+\t\t{\n+\t\t\tloggingIn = true;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick gameTick)\n+\t{\n+\t\tif (loggingIn)\n+\t\t{\n+\t\t\tloggingIn = false;\n+\t\t\tcreateNotification();\n+\t\t}\n \t}\n \n \tprivate void processInfobox()\n \t{\n-\t\tif (client.getGameState() == GameState.LOGGED_IN && hasCompletedQuest() && isInKingdom())\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && throneOfMiscellaniaCompleted() && isInKingdom())\n \t\t{\n \t\t\taddKingdomInfobox();\n \t\t}\n \t\telse\n \t\t{\n \t\t\tremoveKingdomInfobox();\n \t\t}\n+\t}\n \n+\tprivate void createNotification()\n+\t{\n+\t\tif (config.shouldSendNotifications() && throneOfMiscellaniaCompleted())\n+\t\t{\n+\t\t\tif (config.getLastChanged() != null)", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 696dd411f..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -123,7 +128,7 @@ public class KingdomPlugin extends Plugin\n \t\t{\n \t\t\tprocessInfobox();\n \t\t}\n-\t\tif (event.getGameState() == GameState.LOGGING_IN)\n+\t\telse if (event.getGameState() == GameState.LOGGING_IN)\n \t\t{\n \t\t\tloggingIn = true;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5MzgxMg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553793812", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate boolean throneOfMiscellaniaCompleted()\n          \n          \n            \n            \tprivate boolean isThroneOfMiscellaniaCompleted()", "author": "Nightfirecat", "createdAt": "2021-01-08T08:00:11Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +197,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tint maxDailyWithdrawal = royalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < daysSince; i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tfloat dailyPercentage = royalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n+\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n+\t\treturn Math.max(lastFavor, 0);\n+\t}\n+\n \tprivate boolean isInKingdom()\n \t{\n \t\treturn client.getLocalPlayer() != null\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean throneOfMiscellaniaCompleted()", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 696dd411f..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -199,11 +205,11 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n-\t\tint maxDailyWithdrawal = royalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5Mzg5MA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r553793890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate boolean royalTroubleCompleted()\n          \n          \n            \n            \tprivate boolean isRoyalTroubleCompleted()", "author": "Nightfirecat", "createdAt": "2021-01-08T08:00:22Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +197,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tint maxDailyWithdrawal = royalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < daysSince; i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tfloat dailyPercentage = royalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n+\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n+\t\treturn Math.max(lastFavor, 0);\n+\t}\n+\n \tprivate boolean isInKingdom()\n \t{\n \t\treturn client.getLocalPlayer() != null\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean throneOfMiscellaniaCompleted()\n \t{\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n+\tprivate boolean royalTroubleCompleted()", "originalCommit": "0c0342f82de6f07fad430914ff3e77ac05dd3177", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 696dd411f..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -199,11 +205,11 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n-\t\tint maxDailyWithdrawal = royalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MzEzNw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576363137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @ConfigGroup(\"kingdomOfMiscellania\")\n          \n          \n            \n            @ConfigGroup(\"kingdomofmiscellania\")\n          \n      \n    \n    \n  \n\nGenerally we keep these all lowercase.", "author": "Adam-", "createdAt": "2021-02-15T18:19:13Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import java.time.Instant;\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r", "originalCommit": "83ffd3459be0b2004bb0b680ae5de25910323fd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 0b570ec0b..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -30,7 +30,7 @@ import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n \tint MAX_COFFER = 7_500_000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MzM0OQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576363349", "bodyText": "I think the daily task plugin already spams people enough, I don't want to add more spam to the login by default", "author": "Adam-", "createdAt": "2021-02-15T18:19:45Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import java.time.Instant;\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\tint MAX_COFFER = 7_500_000;\r\n+\tint MAX_FAVOR_PERCENT = 100;\r\n+\r\n+\t@ConfigItem(\r\n+\t\tposition = 1,\r\n+\t\tkeyName = \"sendNotifications\",\r\n+\t\tname = \"Send Notifications\",\r\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r", "originalCommit": "83ffd3459be0b2004bb0b680ae5de25910323fd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 0b570ec0b..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -30,7 +30,7 @@ import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n \tint MAX_COFFER = 7_500_000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MzgxNQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576363815", "bodyText": "This and everything below here is per-profile, and so should use the set/get rsprofile functions in config manager, so that it works correctly when using more than one account/profile.", "author": "Adam-", "createdAt": "2021-02-15T18:20:52Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import java.time.Instant;\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(\"kingdomOfMiscellania\")\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\tint MAX_COFFER = 7_500_000;\r\n+\tint MAX_FAVOR_PERCENT = 100;\r\n+\r\n+\t@ConfigItem(\r\n+\t\tposition = 1,\r\n+\t\tkeyName = \"sendNotifications\",\r\n+\t\tname = \"Send Notifications\",\r\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn true;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmax = MAX_COFFER\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\tposition = 2,\r\n+\t\tkeyName = \"cofferThreshold\",\r\n+\t\tname = \"Coffer Threshold\",\r\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\r\n+\t)\r\n+\tdefault int getCofferThreshold()\r\n+\t{\r\n+\t\treturn MAX_COFFER;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmax = MAX_FAVOR_PERCENT\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\tposition = 3,\r\n+\t\tkeyName = \"favorThreshold\",\r\n+\t\tname = \"Favor Threshold\",\r\n+\t\tdescription = \"Send notifications if favor percentage is at or below this value\"\r\n+\t)\r\n+\tdefault int getFavorThreshold()\r\n+\t{\r\n+\t\treturn MAX_FAVOR_PERCENT;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Stored data\r\n+\t **/\r\n+\t@ConfigItem(\r", "originalCommit": "83ffd3459be0b2004bb0b680ae5de25910323fd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 0b570ec0b..4e5718b57 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -30,7 +30,7 @@ import net.runelite.client.config.ConfigGroup;\n import net.runelite.client.config.ConfigItem;\n import net.runelite.client.config.Range;\n \n-@ConfigGroup(\"kingdomOfMiscellania\")\n+@ConfigGroup(\"kingdomofmiscellania\")\n public interface KingdomConfig extends Config\n {\n \tint MAX_COFFER = 7_500_000;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2NDU1MA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576364550", "bodyText": "You can just use the java time apis for conversion between time units,\n(int) Duration.between(Instant.now(), lastChanged).toDays()", "author": "Adam-", "createdAt": "2021-02-15T18:22:51Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +198,60 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);", "originalCommit": "83ffd3459be0b2004bb0b680ae5de25910323fd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex cdede0c4a..2b93319b1 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -200,11 +205,11 @@ public class KingdomPlugin extends Plugin\n \n \tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n \t{\n-\t\tint daysSince = Math.max((int) (Instant.now().getEpochSecond() - lastChangedEpoch) / SECONDS_IN_DAY, 0);\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < daysSince; i++)\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n"}}, {"oid": "d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "url": "https://github.com/runelite/runelite/commit/d86ee19effe5a7e5fe664bc5c9c9b7a9c6c83f0b", "message": "Change storage of miscellania values", "committedDate": "2021-02-16T00:48:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyMDEzMg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576520132", "bodyText": "This looks flipped around. The method signature is Duration.between(Temporal startInclusive, Temporal endInclusive), meaning Instant.now() should be the second arg, not the first. As-is, this will always return a value <= 0.\nPlease apply the changes to this method's handling of the duration calculation to estimateFavor() as well.", "author": "Nightfirecat", "createdAt": "2021-02-16T02:58:49Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +203,90 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();", "originalCommit": "78bcf522e8a2ec79751178cf169727768df59979", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 2b93319b1..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -203,25 +207,25 @@ public class KingdomPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\tprivate int estimateCoffer(Instant lastChanged, int lastCoffer)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n+\t\tfor (int i = 0; i < daysSince; i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n-\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\tprivate int estimateFavor(Instant lastChanged, int lastFavor)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyMDMyMg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576520322", "bodyText": "Per my previous comment, daysSince should never be <= 0 after switching the arguments.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n          \n          \n            \n            \t\tfor (int i = 0; i < daysSince; i++)", "author": "Nightfirecat", "createdAt": "2021-02-16T02:59:39Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +203,90 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)", "originalCommit": "78bcf522e8a2ec79751178cf169727768df59979", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 2b93319b1..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -203,25 +207,25 @@ public class KingdomPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\tprivate int estimateCoffer(Instant lastChanged, int lastCoffer)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n+\t\tfor (int i = 0; i < daysSince; i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n-\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\tprivate int estimateFavor(Instant lastChanged, int lastFavor)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyMDU2NA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576520564", "bodyText": "These methods can all be private or package-private instead of protected as we will not subclass the plugin.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprotected Instant getLastChanged()\n          \n          \n            \n            \tprivate Instant getLastChanged()\n          \n      \n    \n    \n  \n\nSpecifically, it looks like each of these added methods can be private besides getCoffer() and getFavor() as they are referenced from the counter.", "author": "Nightfirecat", "createdAt": "2021-02-16T03:00:38Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +203,90 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n+\n+\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n+\t\treturn Math.max(lastFavor, 0);\n+\t}\n+\n \tprivate boolean isInKingdom()\n \t{\n \t\treturn client.getLocalPlayer() != null\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean isThroneOfMiscellaniaCompleted()\n \t{\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n+\tprivate boolean isRoyalTroubleCompleted()\n+\t{\n+\t\treturn Quest.ROYAL_TROUBLE.getState(client) == QuestState.FINISHED;\n+\t}\n+\n \tstatic int getFavorPercent(int favor)\n \t{\n-\t\treturn (favor * 100) / 127;\n+\t\treturn (favor * 100) / MAX_FAVOR;\n+\t}\n+\n+\tprivate void sendChatMessage(String chatMessage)\n+\t{\n+\t\tfinal String message = new ChatMessageBuilder()\n+\t\t\t.append(ChatColorType.HIGHLIGHT)\n+\t\t\t.append(chatMessage)\n+\t\t\t.build();\n+\n+\t\tchatMessageManager.queue(\n+\t\t\tQueuedMessage.builder()\n+\t\t\t\t.type(ChatMessageType.CONSOLE)\n+\t\t\t\t.runeLiteFormattedMessage(message)\n+\t\t\t\t.build());\n \t}\n \n+\tprotected Instant getLastChanged()", "originalCommit": "78bcf522e8a2ec79751178cf169727768df59979", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 2b93319b1..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -203,25 +207,25 @@ public class KingdomPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\tprivate int estimateCoffer(Instant lastChanged, int lastCoffer)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n+\t\tfor (int i = 0; i < daysSince; i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n-\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\tprivate int estimateFavor(Instant lastChanged, int lastFavor)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyMTIyNA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576521224", "bodyText": "As mentioned above, package-private.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprotected int getCoffer()\n          \n          \n            \n            \tint getCoffer()", "author": "Nightfirecat", "createdAt": "2021-02-16T03:03:36Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +203,90 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n+\n+\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n+\t\treturn Math.max(lastFavor, 0);\n+\t}\n+\n \tprivate boolean isInKingdom()\n \t{\n \t\treturn client.getLocalPlayer() != null\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean isThroneOfMiscellaniaCompleted()\n \t{\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n+\tprivate boolean isRoyalTroubleCompleted()\n+\t{\n+\t\treturn Quest.ROYAL_TROUBLE.getState(client) == QuestState.FINISHED;\n+\t}\n+\n \tstatic int getFavorPercent(int favor)\n \t{\n-\t\treturn (favor * 100) / 127;\n+\t\treturn (favor * 100) / MAX_FAVOR;\n+\t}\n+\n+\tprivate void sendChatMessage(String chatMessage)\n+\t{\n+\t\tfinal String message = new ChatMessageBuilder()\n+\t\t\t.append(ChatColorType.HIGHLIGHT)\n+\t\t\t.append(chatMessage)\n+\t\t\t.build();\n+\n+\t\tchatMessageManager.queue(\n+\t\t\tQueuedMessage.builder()\n+\t\t\t\t.type(ChatMessageType.CONSOLE)\n+\t\t\t\t.runeLiteFormattedMessage(message)\n+\t\t\t\t.build());\n \t}\n \n+\tprotected Instant getLastChanged()\n+\t{\n+\t\treturn configManager.getRSProfileConfiguration(CONFIG_GROUP_NAME, CONFIG_LAST_CHANGED_KEY, Instant.class);\n+\t}\n+\n+\tprotected void setLastChanged(Instant lastChanged)\n+\t{\n+\t\tconfigManager.setConfiguration(CONFIG_GROUP_NAME, CONFIG_LAST_CHANGED_KEY, lastChanged);\n+\t}\n+\n+\tprotected int getCoffer()", "originalCommit": "78bcf522e8a2ec79751178cf169727768df59979", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 2b93319b1..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -203,25 +207,25 @@ public class KingdomPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\tprivate int estimateCoffer(Instant lastChanged, int lastCoffer)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n-\t\tfor (int i = 0; i < Math.max(daysSince, 0); i++)\n+\t\tfor (int i = 0; i < daysSince; i++)\n \t\t{\n \t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n \t\t}\n \t\treturn lastCoffer;\n \t}\n \n-\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\tprivate int estimateFavor(Instant lastChanged, int lastFavor)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.now(), Instant.ofEpochSecond(lastChangedEpoch)).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n \n-\t\tlastFavor -= (int) (Math.max(daysSince, 0) * dailyPercentage * MAX_FAVOR);\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n \t\treturn Math.max(lastFavor, 0);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjUyMTQyNQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r576521425", "bodyText": "Define this as a constant in the config interface, and reference it both in the @ConfigGroup definition and here in the plugin.", "author": "Nightfirecat", "createdAt": "2021-02-16T03:04:32Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -51,6 +63,18 @@\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n+\tprivate static final String CONFIG_GROUP_NAME = \"kingdomofmiscellania\";", "originalCommit": "78bcf522e8a2ec79751178cf169727768df59979", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 2b93319b1..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -63,7 +63,6 @@ import net.runelite.client.util.QuantityFormatter;\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n-\tprivate static final String CONFIG_GROUP_NAME = \"kingdomofmiscellania\";\n \tprivate static final String CONFIG_LAST_CHANGED_KEY = \"lastChanged\";\n \tprivate static final String CONFIG_COFFER_KEY = \"coffer\";\n \tprivate static final String CONFIG_FAVOR_KEY = \"favor\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNTY1OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r579715658", "bodyText": "It strikes me that these should be nullable as we would not want to send notifications to players for whom we don't know their coffer/favor values. They would obviously be set once they return to Miscellania, but if a player were to turn these notifications on prior to going back to the island, they could get notifications for \"0\" coffer/favor values being returned here rather than null which would indicate they're not yet known.", "author": "Nightfirecat", "createdAt": "2021-02-20T22:09:12Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +202,92 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.ofEpochSecond(lastChangedEpoch), Instant.now()).toDays();\n+\t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n+\t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n+\n+\t\tfor (int i = 0; i < daysSince; i++)\n+\t\t{\n+\t\t\tlastCoffer -= (lastCoffer > maxDailyThreshold) ? maxDailyWithdrawal : lastCoffer / 10;\n+\t\t}\n+\t\treturn lastCoffer;\n+\t}\n+\n+\tprivate int estimateFavor(long lastChangedEpoch, int lastFavor)\n+\t{\n+\t\tint daysSince = (int) Duration.between(Instant.ofEpochSecond(lastChangedEpoch), Instant.now()).toDays();\n+\t\tfloat dailyPercentage = isRoyalTroubleCompleted() ? FAVOR_DECREMENT_ROYAL_TROUBLE : FAVOR_DECREMENT_BASE;\n+\n+\t\tlastFavor -= (int) (daysSince * dailyPercentage * MAX_FAVOR);\n+\t\treturn Math.max(lastFavor, 0);\n+\t}\n+\n \tprivate boolean isInKingdom()\n \t{\n \t\treturn client.getLocalPlayer() != null\n \t\t\t&& KINGDOM_REGION.contains(client.getLocalPlayer().getWorldLocation().getRegionID());\n \t}\n \n-\tprivate boolean hasCompletedQuest()\n+\tprivate boolean isThroneOfMiscellaniaCompleted()\n \t{\n \t\treturn client.getVar(VarPlayer.THRONE_OF_MISCELLANIA) > 0;\n \t}\n \n+\tprivate boolean isRoyalTroubleCompleted()\n+\t{\n+\t\treturn Quest.ROYAL_TROUBLE.getState(client) == QuestState.FINISHED;\n+\t}\n+\n \tstatic int getFavorPercent(int favor)\n \t{\n-\t\treturn (favor * 100) / 127;\n+\t\treturn (favor * 100) / MAX_FAVOR;\n+\t}\n+\n+\tprivate void sendChatMessage(String chatMessage)\n+\t{\n+\t\tfinal String message = new ChatMessageBuilder()\n+\t\t\t.append(ChatColorType.HIGHLIGHT)\n+\t\t\t.append(chatMessage)\n+\t\t\t.build();\n+\n+\t\tchatMessageManager.queue(\n+\t\t\tQueuedMessage.builder()\n+\t\t\t\t.type(ChatMessageType.CONSOLE)\n+\t\t\t\t.runeLiteFormattedMessage(message)\n+\t\t\t\t.build());\n \t}\n \n+\tprivate Instant getLastChanged()\n+\t{\n+\t\treturn configManager.getRSProfileConfiguration(KingdomConfig.CONFIG_GROUP_NAME, CONFIG_LAST_CHANGED_KEY, Instant.class);\n+\t}\n+\n+\tprivate void setLastChanged(Instant lastChanged)\n+\t{\n+\t\tconfigManager.setRSProfileConfiguration(KingdomConfig.CONFIG_GROUP_NAME, CONFIG_LAST_CHANGED_KEY, lastChanged);\n+\t}\n+\n+\tint getCoffer()\n+\t{\n+\t\tInteger coffer = configManager.getRSProfileConfiguration(KingdomConfig.CONFIG_GROUP_NAME, CONFIG_COFFER_KEY, int.class);\n+\t\treturn coffer == null ? 0 : coffer;\n+\t}", "originalCommit": "0acd4a6db5f89238645cd9e8775a5920d340c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcyMTM5Ng==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r579721396", "bodyText": "This is accounted for, because getLastChanged() will return null until you\u2019ve visited Miscellania, and no message will be sent.", "author": "BrandtHill", "createdAt": "2021-02-20T23:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTcxNTY1OA=="}], "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 4962a27b6..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -202,9 +207,9 @@ public class KingdomPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\tprivate int estimateCoffer(Instant lastChanged, int lastCoffer)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.ofEpochSecond(lastChangedEpoch), Instant.now()).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDczNjgxMw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r580736813", "bodyText": "After having tested this on a dev build for a few days, I think this would work better if it tested for the coffer/favor being strictly less than the config. (instead of less than or equal, that is) That way, players can set the values to 0 to disable a specific check, or leave them at their maximum values to get notifications whenever they're not maximum.", "author": "Nightfirecat", "createdAt": "2021-02-23T02:51:34Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\r\n+ * Copyright (c) 2020, Brandt Hill <https://github.com/BrandtHill>\r\n+ * All rights reserved.\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this\r\n+ *    list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n+ *    this list of conditions and the following disclaimer in the documentation\r\n+ *    and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\r\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ */\r\n+package net.runelite.client.plugins.kingdomofmiscellania;\r\n+\r\n+import net.runelite.client.config.Config;\r\n+import net.runelite.client.config.ConfigGroup;\r\n+import net.runelite.client.config.ConfigItem;\r\n+import net.runelite.client.config.Range;\r\n+\r\n+@ConfigGroup(KingdomConfig.CONFIG_GROUP_NAME)\r\n+public interface KingdomConfig extends Config\r\n+{\r\n+\tString CONFIG_GROUP_NAME = \"kingdomofmiscellania\";\r\n+\tint MAX_COFFER = 7_500_000;\r\n+\tint MAX_FAVOR_PERCENT = 100;\r\n+\r\n+\t@ConfigItem(\r\n+\t\tposition = 1,\r\n+\t\tkeyName = \"sendNotifications\",\r\n+\t\tname = \"Send Notifications\",\r\n+\t\tdescription = \"Send chat notifications upon login showing current estimated coffer and favor\"\r\n+\t)\r\n+\tdefault boolean shouldSendNotifications()\r\n+\t{\r\n+\t\treturn false;\r\n+\t}\r\n+\r\n+\t@Range(\r\n+\t\tmax = MAX_COFFER\r\n+\t)\r\n+\t@ConfigItem(\r\n+\t\tposition = 2,\r\n+\t\tkeyName = \"cofferThreshold\",\r\n+\t\tname = \"Coffer Threshold\",\r\n+\t\tdescription = \"Send notifications if coffer is at or below this value\"\r", "originalCommit": "0acd4a6db5f89238645cd9e8775a5920d340c1b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDA2Nw==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r580790067", "bodyText": "Good thinking. I've made that change.", "author": "BrandtHill", "createdAt": "2021-02-23T06:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDczNjgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\nindex 74df6469d..b663fe838 100755\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomConfig.java\n\n@@ -54,7 +54,7 @@ public interface KingdomConfig extends Config\n \t\tposition = 2,\n \t\tkeyName = \"cofferThreshold\",\n \t\tname = \"Coffer Threshold\",\n-\t\tdescription = \"Send notifications if coffer is at or below this value\"\n+\t\tdescription = \"Send notifications if coffer is below this value\"\n \t)\n \tdefault int getCofferThreshold()\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzQwMTEyNQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r583401125", "bodyText": "One annoying thing I found about this code is that this will not automatically update the values when visiting Etceteria until some varbit change happens after you're there. For instance, if you travel to Etceteria via spirit tree then leave right away, these conditions will never be met because isInKingdom() is false during the varbit changes while you're changing game states.\nBecause of the isKingdom() false negative, I propose this subscriber be changed somewhat to handle this case.\n\nIf inKingdom() is false and either coffer or favor values are 0, don't set any new values (this will be the case in some varbit changed events as the indexes are transmitted)\nIf inKingdom() is false, coffer and favor are both non-zero, and either of their values are different from the stored values, set lastChanged and the values (the server seems to send the last known values from visiting misc/etc--if we didn't get a varbitchanged on the island itself, we should update the values from varbit changes elsewhere in the world)\nIf inKingdom() is true and either value is different from the stored values, set lastChanged and the values\n\nie.\npublic void onVarbitChanged(VarbitChanged event)\n{\n\tfinal int coffer = client.getVar(Varbits.KINGDOM_COFFER);\n\tfinal int favor = client.getVar(Varbits.KINGDOM_FAVOR);\n\n\tif (client.getGameState() == GameState.LOGGED_IN\n\t\t&& isThroneOfMiscellaniaCompleted()\n\t\t&& (isInKingdom() || coffer != 0 && favor != 0)\n\t\t&& (coffer != getCoffer() && favor != getFavor()))\n\t{\n\t\tsetLastChanged(Instant.now());\n\t\tsetCoffer(coffer);\n\t\tsetFavor(favor);\n\t}\n\n\tprocessInfobox();\n}", "author": "Nightfirecat", "createdAt": "2021-02-26T05:57:27Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -72,11 +101,22 @@ protected void shutDown() throws Exception\n \t\tremoveKingdomInfobox();\n \t}\n \n+\t@Provides\n+\tKingdomConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(KingdomConfig.class);\n+\t}\n+\n \t@Subscribe\n \tpublic void onVarbitChanged(VarbitChanged event)\n \t{\n-\t\tfavor = client.getVar(Varbits.KINGDOM_FAVOR);\n-\t\tcoffer = client.getVar(Varbits.KINGDOM_COFFER);\n+\t\tif (client.getGameState() == GameState.LOGGED_IN && isThroneOfMiscellaniaCompleted() && isInKingdom()\n+\t\t\t&& (getCoffer() != client.getVar(Varbits.KINGDOM_COFFER) || getFavor() != client.getVar(Varbits.KINGDOM_FAVOR)))", "originalCommit": "01ceca35c25b2fa2615e5b8700c3ca5fabac4232", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 00e63cf63..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -110,12 +110,17 @@ public class KingdomPlugin extends Plugin\n \t@Subscribe\n \tpublic void onVarbitChanged(VarbitChanged event)\n \t{\n-\t\tif (client.getGameState() == GameState.LOGGED_IN && isThroneOfMiscellaniaCompleted() && isInKingdom()\n-\t\t\t&& (getCoffer() != client.getVar(Varbits.KINGDOM_COFFER) || getFavor() != client.getVar(Varbits.KINGDOM_FAVOR)))\n+\t\tfinal int coffer = client.getVar(Varbits.KINGDOM_COFFER);\n+\t\tfinal int favor = client.getVar(Varbits.KINGDOM_FAVOR);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN\n+\t\t\t&& isThroneOfMiscellaniaCompleted()\n+\t\t\t&& (isInKingdom() || coffer > 0 && favor > 0)\n+\t\t\t&& (getCoffer() != coffer || getFavor() != favor))\n \t\t{\n \t\t\tsetLastChanged(Instant.now());\n-\t\t\tsetCoffer(client.getVar(Varbits.KINGDOM_COFFER));\n-\t\t\tsetFavor(client.getVar(Varbits.KINGDOM_FAVOR));\n+\t\t\tsetCoffer(coffer);\n+\t\t\tsetFavor(favor);\n \t\t}\n \t\tprocessInfobox();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE2MjE0MA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r584162140", "bodyText": "why isn't this %d coins?", "author": "Adam-", "createdAt": "2021-02-27T17:22:08Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -51,6 +63,17 @@\n public class KingdomPlugin extends Plugin\n {\n \tprivate static final ImmutableSet<Integer> KINGDOM_REGION = ImmutableSet.of(10044, 10300);\n+\tprivate static final String CONFIG_LAST_CHANGED_KEY = \"lastChanged\";\n+\tprivate static final String CONFIG_COFFER_KEY = \"coffer\";\n+\tprivate static final String CONFIG_FAVOR_KEY = \"favor\";\n+\tprivate static final String CHAT_MESSAGE_FORMAT = \"Your Kingdom of Miscellania favor is %d%%, and your coffer has %s coins.\";", "originalCommit": "fc3c5af064d3ffe0d5d2f89d70a1a3a460054218", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE3MTk5MQ==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r584171991", "bodyText": "It prints as a string like 1.16M, not an int like1160395", "author": "BrandtHill", "createdAt": "2021-02-27T18:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE2MjE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "9d44ebfdc6a95eddb30a664df9663a816f7cd129", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 8d4253d1a..ece8a3da5 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -55,8 +55,8 @@ import net.runelite.client.util.QuantityFormatter;\n \n @PluginDescriptor(\n \tname = \"Kingdom of Miscellania\",\n-\tdescription = \"Show amount of favor when inside Miscellania\",\n-\ttags = {\"favor\", \"favour\", \"managing\", \"overlay\"},\n+\tdescription = \"Show amount of approval when inside Miscellania\",\n+\ttags = {\"favor\", \"favour\", \"managing\", \"overlay\", \"approval\", \"coffer\"},\n \tenabledByDefault = false\n )\n @Slf4j\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE2MzM4OA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r584163388", "bodyText": "You already have the last changed as an Instant so there's no reason to convert to epoch second and then back like you are doing here and in estimateFavor.", "author": "Adam-", "createdAt": "2021-02-27T17:29:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -122,20 +207,92 @@ private void removeKingdomInfobox()\n \t\t}\n \t}\n \n+\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)", "originalCommit": "fc3c5af064d3ffe0d5d2f89d70a1a3a460054218", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 8d4253d1a..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -207,9 +207,9 @@ public class KingdomPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate int estimateCoffer(long lastChangedEpoch, int lastCoffer)\n+\tprivate int estimateCoffer(Instant lastChanged, int lastCoffer)\n \t{\n-\t\tint daysSince = (int) Duration.between(Instant.ofEpochSecond(lastChangedEpoch), Instant.now()).toDays();\n+\t\tint daysSince = (int) Duration.between(lastChanged, Instant.now()).toDays();\n \t\tint maxDailyWithdrawal = isRoyalTroubleCompleted() ? MAX_WITHDRAWAL_ROYAL_TROUBLE : MAX_WITHDRAWAL_BASE;\n \t\tint maxDailyThreshold = maxDailyWithdrawal * 10;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE5NzQ0Mg==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r584197442", "bodyText": "This should be || right?", "author": "Adam-", "createdAt": "2021-02-27T22:11:37Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java", "diffHunk": "@@ -72,11 +101,27 @@ protected void shutDown() throws Exception\n \t\tremoveKingdomInfobox();\n \t}\n \n+\t@Provides\n+\tKingdomConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(KingdomConfig.class);\n+\t}\n+\n \t@Subscribe\n \tpublic void onVarbitChanged(VarbitChanged event)\n \t{\n-\t\tfavor = client.getVar(Varbits.KINGDOM_FAVOR);\n-\t\tcoffer = client.getVar(Varbits.KINGDOM_COFFER);\n+\t\tfinal int coffer = client.getVar(Varbits.KINGDOM_COFFER);\n+\t\tfinal int favor = client.getVar(Varbits.KINGDOM_FAVOR);\n+\n+\t\tif (client.getGameState() == GameState.LOGGED_IN\n+\t\t\t&& isThroneOfMiscellaniaCompleted()\n+\t\t\t&& (isInKingdom() || coffer > 0 && favor > 0)\n+\t\t\t&& (getCoffer() != coffer && getFavor() != favor))", "originalCommit": "55da30e92be996b40a6962d59a96f47e1d230f8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDIwMTMzNA==", "url": "https://github.com/runelite/runelite/pull/10933#discussion_r584201334", "bodyText": "I think so, I've changed it", "author": "Adam-", "createdAt": "2021-02-27T22:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDE5NzQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\nindex 5d1d50f09..2312149fb 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/kingdomofmiscellania/KingdomPlugin.java\n\n@@ -116,11 +116,11 @@ public class KingdomPlugin extends Plugin\n \t\tif (client.getGameState() == GameState.LOGGED_IN\n \t\t\t&& isThroneOfMiscellaniaCompleted()\n \t\t\t&& (isInKingdom() || coffer > 0 && favor > 0)\n-\t\t\t&& (getCoffer() != coffer && getFavor() != favor))\n+\t\t\t&& (getCoffer() != coffer || getFavor() != favor))\n \t\t{\n \t\t\tsetLastChanged(Instant.now());\n-\t\t\tsetCoffer(client.getVar(Varbits.KINGDOM_COFFER));\n-\t\t\tsetFavor(client.getVar(Varbits.KINGDOM_FAVOR));\n+\t\t\tsetCoffer(coffer);\n+\t\t\tsetFavor(favor);\n \t\t}\n \t\tprocessInfobox();\n \t}\n"}}, {"oid": "e23b9d2b7c14d993f05dba96c44741a362bc7af7", "url": "https://github.com/runelite/runelite/commit/e23b9d2b7c14d993f05dba96c44741a362bc7af7", "message": "kingdom: add notification message for favor and coffer value\n\nThis allows setting a configurable threshold where you will receive a\nmessage informing you your favor and/or coffer is low on login\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2021-02-27T22:27:31Z", "type": "forcePushed"}, {"oid": "9d44ebfdc6a95eddb30a664df9663a816f7cd129", "url": "https://github.com/runelite/runelite/commit/9d44ebfdc6a95eddb30a664df9663a816f7cd129", "message": "Change favor to approval", "committedDate": "2021-02-28T01:18:15Z", "type": "forcePushed"}, {"oid": "d0ec76ea9629197d1b3e9edfaabec15325fddc41", "url": "https://github.com/runelite/runelite/commit/d0ec76ea9629197d1b3e9edfaabec15325fddc41", "message": "kingdom: add notification message for favor and coffer value\n\nThis allows setting a configurable threshold where you will receive a\nmessage informing you your favor and/or coffer is low on login\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2021-02-28T02:12:26Z", "type": "commit"}, {"oid": "d0ec76ea9629197d1b3e9edfaabec15325fddc41", "url": "https://github.com/runelite/runelite/commit/d0ec76ea9629197d1b3e9edfaabec15325fddc41", "message": "kingdom: add notification message for favor and coffer value\n\nThis allows setting a configurable threshold where you will receive a\nmessage informing you your favor and/or coffer is low on login\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2021-02-28T02:12:26Z", "type": "forcePushed"}]}