{"pr_number": 11718, "pr_title": "Pyramid plunder", "pr_createdAt": "2020-05-27T21:29:05Z", "pr_url": "https://github.com/runelite/runelite/pull/11718", "timeline": [{"oid": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "url": "https://github.com/runelite/runelite/commit/cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "message": "pyramid-plunder: Use convex hull instead of clickbox for containers. Use infobox instead of overlay for timer. Hide speartrap clickbox once you have passed them.", "committedDate": "2020-05-28T21:44:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTIxNA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PyramidPlunderObjects\n          \n          \n            \n            class PyramidPlunderObjects", "author": "Adam-", "createdAt": "2020-06-09T16:31:56Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Set;\n+import static net.runelite.api.ObjectID.GRAND_GOLD_CHEST;\n+import static net.runelite.api.ObjectID.SARCOPHAGUS_21255;\n+import static net.runelite.api.ObjectID.SPEARTRAP_21280;\n+import static net.runelite.api.ObjectID.TOMB_DOOR_20948;\n+import static net.runelite.api.ObjectID.URN_21261;\n+import static net.runelite.api.ObjectID.URN_21262;\n+import static net.runelite.api.ObjectID.URN_21263;\n+\n+public class PyramidPlunderObjects", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java\nindex e874fd842..f05790307 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java\n\n@@ -26,6 +26,7 @@ package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.common.collect.ImmutableSet;\n import java.util.Set;\n+import static net.runelite.api.NullObjectID.*;\n import static net.runelite.api.ObjectID.GRAND_GOLD_CHEST;\n import static net.runelite.api.ObjectID.SARCOPHAGUS_21255;\n import static net.runelite.api.ObjectID.SPEARTRAP_21280;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTM5NQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565395", "bodyText": "All of the objects in this class should be referencing ObjectID/NullObjectID", "author": "Adam-", "createdAt": "2020-06-09T16:32:16Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.util.Set;\n+import static net.runelite.api.ObjectID.GRAND_GOLD_CHEST;\n+import static net.runelite.api.ObjectID.SARCOPHAGUS_21255;\n+import static net.runelite.api.ObjectID.SPEARTRAP_21280;\n+import static net.runelite.api.ObjectID.TOMB_DOOR_20948;\n+import static net.runelite.api.ObjectID.URN_21261;\n+import static net.runelite.api.ObjectID.URN_21262;\n+import static net.runelite.api.ObjectID.URN_21263;\n+\n+public class PyramidPlunderObjects\n+{\n+\tpublic static final Set<Integer> TOMB_DOOR_WALL_IDS = ImmutableSet.of(26618, 26619, 26620, 26621);", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java\nindex e874fd842..f05790307 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderObjects.java\n\n@@ -26,6 +26,7 @@ package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.common.collect.ImmutableSet;\n import java.util.Set;\n+import static net.runelite.api.NullObjectID.*;\n import static net.runelite.api.ObjectID.GRAND_GOLD_CHEST;\n import static net.runelite.api.ObjectID.SARCOPHAGUS_21255;\n import static net.runelite.api.ObjectID.SPEARTRAP_21280;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTU3Ng==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565576", "bodyText": "This can't happen", "author": "Adam-", "createdAt": "2020-06-09T16:32:35Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tif (client.getLocalPlayer() == null)", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\nindex 52ba2fa3e..d4a881450 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n\n@@ -30,6 +30,7 @@ import java.awt.Graphics2D;\n import java.awt.Shape;\n import javax.inject.Inject;\n import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n import net.runelite.api.ObjectComposition;\n import net.runelite.api.Point;\n import net.runelite.api.Varbits;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NTc3OQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437565779", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PyramidPlunderTimer extends Timer\n          \n          \n            \n            class PyramidPlunderTimer extends Timer", "author": "Adam-", "createdAt": "2020-06-09T16:32:54Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import net.runelite.api.Client;\n+import net.runelite.api.Varbits;\n+import net.runelite.client.ui.overlay.infobox.Timer;\n+\n+public class PyramidPlunderTimer extends Timer", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\nindex d2882aa70..0e1cbba27 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\n\n@@ -1,3 +1,27 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.pyramidplunder;\n \n import java.awt.Color;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjA1Mg==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437566052", "bodyText": "Add license header to each new file.", "author": "Adam-", "createdAt": "2020-06-09T16:33:25Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package net.runelite.client.plugins.pyramidplunder;", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\nindex d2882aa70..0e1cbba27 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\n\n@@ -1,3 +1,27 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n package net.runelite.client.plugins.pyramidplunder;\n \n import java.awt.Color;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NjcxNw==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437566717", "bodyText": "this can't happen", "author": "Adam-", "createdAt": "2020-06-09T16:34:28Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onWallObjectSpawned(WallObjectSpawned event)\n+\t{\n+\t\tWallObject object = event.getWallObject();\n+\n+\t\tif (object == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (TOMB_DOOR_WALL_IDS.contains(object.getId()))\n+\t\t{\n+\t\t\ttilesToHighlight.put(object, event.getTile());\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameObjectSpawned(GameObjectSpawned event)\n+\t{\n+\t\tGameObject object = event.getGameObject();\n+\n+\t\tif (object == null)", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2NzExNg==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437567116", "bodyText": "This region check is much faster, so check it first.", "author": "Adam-", "createdAt": "2020-06-09T16:35:08Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onWallObjectSpawned(WallObjectSpawned event)\n+\t{\n+\t\tWallObject object = event.getWallObject();\n+\n+\t\tif (object == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (TOMB_DOOR_WALL_IDS.contains(object.getId()))\n+\t\t{\n+\t\t\ttilesToHighlight.put(object, event.getTile());\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameObjectSpawned(GameObjectSpawned event)\n+\t{\n+\t\tGameObject object = event.getGameObject();\n+\n+\t\tif (object == null)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (SPEARTRAP_ID == object.getId())\n+\t\t{\n+\t\t\ttilesToHighlight.put(object, event.getTile());\n+\t\t}\n+\t\telse if (URN_IDS.contains(object.getId())\n+\t\t\t|| GRAND_GOLD_CHEST_ID == object.getId()\n+\t\t\t|| SARCOPHAGUS_ID == object.getId())\n+\t\t{\n+\t\t\tobjectsToHighlight.add(object);\n+\t\t}\n+\t}\n+\n+\tpublic boolean isInPyramidPlunder()\n+\t{\n+\t\tint timer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\treturn client.getLocalPlayer() != null\n+\t\t\t&& timer > 0", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2Nzc3OA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437567778", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n          \n          \n            \n            \t\t\tinfoBoxManager.removeInfoBox(timer);", "author": "Adam-", "createdAt": "2020-06-09T16:36:12Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTI4NQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437569285", "bodyText": "this should be in an clientThread.invoke()", "author": "Adam-", "createdAt": "2020-06-09T16:38:39Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgwODc4OA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437808788", "bodyText": "Just for my understanding, why should this be in clientThread.invoke()?", "author": "Mitchell-Kovacs", "createdAt": "2020-06-10T01:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxMzQzMA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437813430", "bodyText": "shutDown runs on the EDT and it is mostly not safe to mutate client state off of the client thread.", "author": "Adam-", "createdAt": "2020-06-10T01:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTc0MA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437569740", "bodyText": "Instead of all of this logic it may be better to just override Infobox render()\n@Override\npublic boolean render() {\n    return config.showExactTimer();\n}", "author": "Adam-", "createdAt": "2020-06-09T16:39:26Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MDIxOQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437570219", "bodyText": "this can't happejn", "author": "Adam-", "createdAt": "2020-06-09T16:40:09Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;\n+\tprivate static final int PYRAMID_PLUNDER_REGION = 7749;\n+\n+\t@Inject\n+\tprivate Client client;\n+\n+\t@Inject\n+\tprivate PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate OverlayManager overlayManager;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay overlay;\n+\n+\t@Inject\n+\tprivate InfoBoxManager infoBoxManager;\n+\n+\t@Inject\n+\tprivate ItemManager itemManager;\n+\n+\t@Getter\n+\tprivate final Map<TileObject, Tile> tilesToHighlight = new HashMap<>();\n+\n+\t@Getter\n+\tprivate final List<GameObject> objectsToHighlight = new ArrayList<>();\n+\n+\tprivate PyramidPlunderTimer timer;\n+\n+\t@Provides\n+\tPyramidPlunderConfig getConfig(ConfigManager configManager)\n+\t{\n+\t\treturn configManager.getConfig(PyramidPlunderConfig.class);\n+\t}\n+\n+\t@Override\n+\tprotected void startUp() throws Exception\n+\t{\n+\t\toverlayManager.add(overlay);\n+\t}\n+\n+\t@Override\n+\tprotected void shutDown() throws Exception\n+\t{\n+\t\ttilesToHighlight.clear();\n+\t\tobjectsToHighlight.clear();\n+\t\toverlayManager.remove(overlay);\n+\t\ttimer = null;\n+\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget != null)\n+\t\t{\n+\t\t\tppWidget.setHidden(false);\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameStateChanged(GameStateChanged event)\n+\t{\n+\t\tif (event.getGameState() == GameState.LOADING)\n+\t\t{\n+\t\t\ttilesToHighlight.clear();\n+\t\t\tobjectsToHighlight.clear();\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onGameTick(GameTick tick)\n+\t{\n+\t\tif (config.showExactTimer() && isInPyramidPlunder())\n+\t\t{\n+\t\t\tif (timer == null)\n+\t\t\t{\n+\t\t\t\tint ppTimer = client.getVar(Varbits.PYRAMID_PLUNDER_TIMER);\n+\t\t\t\tlong timeLeft = (PYRAMID_PLUNDER_DURATION - ppTimer) * Constants.GAME_TICK_LENGTH;\n+\t\t\t\ttimer = new PyramidPlunderTimer(timeLeft, itemManager.getImage(PHARAOHS_SCEPTRE), this,\n+\t\t\t\t\tconfig, client);\n+\t\t\t\tinfoBoxManager.addInfoBox(timer);\n+\t\t\t}\n+\t\t}\n+\t\telse if (timer != null)\n+\t\t{\n+\t\t\tinfoBoxManager.removeIf(infoBox -> infoBox instanceof PyramidPlunderTimer);\n+\t\t\ttimer = null;\n+\t\t}\n+\t}\n+\n+\t@Subscribe\n+\tpublic void onWallObjectSpawned(WallObjectSpawned event)\n+\t{\n+\t\tWallObject object = event.getWallObject();\n+\n+\t\tif (object == null)", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MjgyNQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437572825", "bodyText": "We have an GAME_TICKS temporal unit in RSTimeUnit if you want to use that.", "author": "Adam-", "createdAt": "2020-06-09T16:44:42Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import com.google.inject.Provides;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.inject.Inject;\n+import lombok.Getter;\n+import net.runelite.api.Client;\n+import net.runelite.api.Constants;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.GameState;\n+import static net.runelite.api.ItemID.PHARAOHS_SCEPTRE;\n+import net.runelite.api.Tile;\n+import net.runelite.api.TileObject;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.WallObject;\n+import net.runelite.api.events.GameObjectSpawned;\n+import net.runelite.api.events.GameStateChanged;\n+import net.runelite.api.events.GameTick;\n+import net.runelite.api.events.WallObjectSpawned;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import net.runelite.client.config.ConfigManager;\n+import net.runelite.client.eventbus.Subscribe;\n+import net.runelite.client.game.ItemManager;\n+import net.runelite.client.plugins.Plugin;\n+import net.runelite.client.plugins.PluginDescriptor;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.OverlayManager;\n+import net.runelite.client.ui.overlay.infobox.InfoBoxManager;\n+\n+@PluginDescriptor(\n+\tname = \"Pyramid Plunder\",\n+\tdescription = \"Show custom overlay for Pyramid Plunder\",\n+\ttags = {\"minigame\"},\n+\tenabledByDefault = false\n+)\n+public class PyramidPlunderPlugin extends Plugin\n+{\n+\t// Total number of game ticks until the pyramid plunder round ends (5 minutes)\n+\tprivate static final int PYRAMID_PLUNDER_DURATION = 500;", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\nindex 94f66a56e..a3f9c6e8e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderPlugin.java\n\n@@ -25,6 +25,7 @@\n package net.runelite.client.plugins.pyramidplunder;\n \n import com.google.inject.Provides;\n+import java.time.Duration;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU3MzE3Nw==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r437573177", "bodyText": "Prefer loops to forEach if it doesn't decrease readability.", "author": "Adam-", "createdAt": "2020-06-09T16:45:17Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tif (client.getLocalPlayer() == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\t\tppWidget.setHidden(config.hideTimer());\n+\n+\n+\t\t// Highlight convex hulls of urns, chests, and sarcophagus\n+\t\tint currentFloor = client.getVar(Varbits.PYRAMID_PLUNDER_ROOM);\n+\t\tplugin.getObjectsToHighlight().forEach(object ->", "originalCommit": "cd6a9f21f8e3c8ea946bcccfd269d73790626cd1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\nindex 52ba2fa3e..d4a881450 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n\n@@ -30,6 +30,7 @@ import java.awt.Graphics2D;\n import java.awt.Shape;\n import javax.inject.Inject;\n import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n import net.runelite.api.ObjectComposition;\n import net.runelite.api.Point;\n import net.runelite.api.Varbits;\n"}}, {"oid": "6d7007c986771e5c4ebcdad2406aa377018b10b0", "url": "https://github.com/runelite/runelite/commit/6d7007c986771e5c4ebcdad2406aa377018b10b0", "message": "pyramid-plunder: Addresses feedback:\nPyramidPlunderObjects: Fix visibility and object id imports\nPyramidPlunderOverlay: Removed not needed code and changed loop\nPyramidPlunderTimer: Uses config to determine if timer should be rendered\nPyramidPlunderPlugin: Removed not needed code,  use RSTimeUnit, modified isInPyramidPlunder check order, and moved setting widget to visible on shut down to client thread invoke", "committedDate": "2020-06-10T01:19:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTQxNw==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438495417", "bodyText": "These need distance checks probably. It highlights the objects in all of the rooms.", "author": "raiyni", "createdAt": "2020-06-11T01:36:54Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tppWidget.setHidden(config.hideTimer());\n+\n+\t\t// Highlight convex hulls of urns, chests, and sarcophagus\n+\t\tint currentFloor = client.getVar(Varbits.PYRAMID_PLUNDER_ROOM);\n+\t\tfor (GameObject object : plugin.getObjectsToHighlight())", "originalCommit": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\nindex 8d5e5794b..ae9d0a535 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n\n@@ -81,13 +81,16 @@ class PyramidPlunderOverlay extends Overlay\n \n \t\tppWidget.setHidden(config.hideTimer());\n \n+\t\tLocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();\n+\n \t\t// Highlight convex hulls of urns, chests, and sarcophagus\n \t\tint currentFloor = client.getVar(Varbits.PYRAMID_PLUNDER_ROOM);\n \t\tfor (GameObject object : plugin.getObjectsToHighlight())\n \t\t{\n \t\t\tif (config.highlightUrnsFloor() > currentFloor && URN_IDS.contains(object.getId())\n \t\t\t\t|| config.highlightChestFloor() > currentFloor && GRAND_GOLD_CHEST_ID == object.getId()\n-\t\t\t\t|| config.highlightSarcophagusFloor() > currentFloor && SARCOPHAGUS_ID == object.getId())\n+\t\t\t\t|| config.highlightSarcophagusFloor() > currentFloor && SARCOPHAGUS_ID == object.getId()\n+\t\t\t\t|| object.getLocalLocation().distanceTo(playerLocation) >= MAX_DISTANCE)\n \t\t\t{\n \t\t\t\tcontinue;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzAyMQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438497021", "bodyText": "The time displayed left seems to end a few seconds early in the infobox.", "author": "raiyni", "createdAt": "2020-06-11T01:43:38Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import net.runelite.api.Client;\n+import net.runelite.api.Varbits;\n+import net.runelite.client.ui.overlay.infobox.Timer;\n+\n+class PyramidPlunderTimer extends Timer", "originalCommit": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNTI1Nw==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438525257", "bodyText": "This is probably just tick drift, all of the long running timers have it.", "author": "Adam-", "createdAt": "2020-06-11T03:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMjQ5Ng==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438532496", "bodyText": "It's actually just me being dumb and using duration.get(ChronoUnit.SECONDS) thinking it will return the seconds remaining and not just the seconds portion of the duration. It also looks like you get kicked out one game tick after the timer hits 500.", "author": "Mitchell-Kovacs", "createdAt": "2020-06-11T04:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzAyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\nindex 0e1cbba27..b1b9e3549 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderTimer.java\n\n@@ -46,7 +46,7 @@ class PyramidPlunderTimer extends Timer\n \t\tClient client\n \t)\n \t{\n-\t\tsuper(duration.get(ChronoUnit.SECONDS), ChronoUnit.SECONDS, image, plugin);\n+\t\tsuper(duration.toMillis(), ChronoUnit.MILLIS, image, plugin);\n \t\tthis.config = config;\n \t\tthis.client = client;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzM3Ng==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438497376", "bodyText": "Do this in onConfigChanged and startup", "author": "raiyni", "createdAt": "2020-06-11T01:44:51Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.Shape;\n+import javax.inject.Inject;\n+import net.runelite.api.Client;\n+import net.runelite.api.GameObject;\n+import net.runelite.api.ObjectComposition;\n+import net.runelite.api.Point;\n+import net.runelite.api.Varbits;\n+import net.runelite.api.coords.LocalPoint;\n+import net.runelite.api.widgets.Widget;\n+import net.runelite.api.widgets.WidgetInfo;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.GRAND_GOLD_CHEST_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SARCOPHAGUS_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.SPEARTRAP_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_CLOSED_ID;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.TOMB_DOOR_WALL_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_CLOSED_IDS;\n+import static net.runelite.client.plugins.pyramidplunder.PyramidPlunderObjects.URN_IDS;\n+import net.runelite.client.ui.overlay.Overlay;\n+import net.runelite.client.ui.overlay.OverlayLayer;\n+import net.runelite.client.ui.overlay.OverlayPosition;\n+import net.runelite.client.ui.overlay.OverlayUtil;\n+\n+class PyramidPlunderOverlay extends Overlay\n+{\n+\tprivate static final int MAX_DISTANCE = 2350;\n+\n+\tprivate final Client client;\n+\tprivate final PyramidPlunderPlugin plugin;\n+\tprivate final PyramidPlunderConfig config;\n+\n+\t@Inject\n+\tprivate PyramidPlunderOverlay(Client client, PyramidPlunderPlugin plugin, PyramidPlunderConfig config)\n+\t{\n+\t\tsuper(plugin);\n+\t\tsetPosition(OverlayPosition.DYNAMIC);\n+\t\tsetLayer(OverlayLayer.ABOVE_SCENE);\n+\t\tthis.client = client;\n+\t\tthis.plugin = plugin;\n+\t\tthis.config = config;\n+\t}\n+\n+\t@Override\n+\tpublic Dimension render(Graphics2D graphics)\n+\t{\n+\t\tWidget ppWidget = client.getWidget(WidgetInfo.PYRAMID_PLUNDER_DATA);\n+\t\tif (ppWidget == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tppWidget.setHidden(config.hideTimer());", "originalCommit": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwOTA1Mg==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438509052", "bodyText": "As in remove this logic entirely from the overlay and put it in those places or also just include this logic in those places?", "author": "Mitchell-Kovacs", "createdAt": "2020-06-11T02:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxMTkwNw==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438511907", "bodyText": "Move it", "author": "raiyni", "createdAt": "2020-06-11T02:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxMTkxMA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438511910", "bodyText": "This won't work if done on startup/config changed", "author": "Adam-", "createdAt": "2020-06-11T02:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\nindex 8d5e5794b..ae9d0a535 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderOverlay.java\n\n@@ -81,13 +81,16 @@ class PyramidPlunderOverlay extends Overlay\n \n \t\tppWidget.setHidden(config.hideTimer());\n \n+\t\tLocalPoint playerLocation = client.getLocalPlayer().getLocalLocation();\n+\n \t\t// Highlight convex hulls of urns, chests, and sarcophagus\n \t\tint currentFloor = client.getVar(Varbits.PYRAMID_PLUNDER_ROOM);\n \t\tfor (GameObject object : plugin.getObjectsToHighlight())\n \t\t{\n \t\t\tif (config.highlightUrnsFloor() > currentFloor && URN_IDS.contains(object.getId())\n \t\t\t\t|| config.highlightChestFloor() > currentFloor && GRAND_GOLD_CHEST_ID == object.getId()\n-\t\t\t\t|| config.highlightSarcophagusFloor() > currentFloor && SARCOPHAGUS_ID == object.getId())\n+\t\t\t\t|| config.highlightSarcophagusFloor() > currentFloor && SARCOPHAGUS_ID == object.getId()\n+\t\t\t\t|| object.getLocalLocation().distanceTo(playerLocation) >= MAX_DISTANCE)\n \t\t\t{\n \t\t\t\tcontinue;\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzkzOQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438497939", "bodyText": "Defaulting these to 9 seems too restricted for the standard player?", "author": "raiyni", "createdAt": "2020-06-11T01:47:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/pyramidplunder/PyramidPlunderConfig.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright (c) 2020 Mitchell <https://github.com/Mitchell-Kovacs>\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this\n+ *    list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright notice,\n+ *    this list of conditions and the following disclaimer in the documentation\n+ *    and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package net.runelite.client.plugins.pyramidplunder;\n+import java.awt.Color;\n+import net.runelite.client.config.Config;\n+import net.runelite.client.config.ConfigGroup;\n+import net.runelite.client.config.ConfigItem;\n+\n+@ConfigGroup(\"pyramidplunder\")\n+public interface PyramidPlunderConfig extends Config\n+{\n+\t@ConfigItem(\n+\t\tposition = 0,\n+\t\tkeyName = \"hideTimer\",\n+\t\tname = \"Hide default timer\",\n+\t\tdescription = \"Hides the default pyramid plunder timer\"\n+\t)\n+\tdefault boolean hideTimer()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 1,\n+\t\tkeyName = \"showExactTimer\",\n+\t\tname = \"Show exact timer\",\n+\t\tdescription = \"Displays the amount of time remaining as an infobox\"\n+\t)\n+\tdefault boolean showExactTimer()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 2,\n+\t\tkeyName = \"timerLowWarning\",\n+\t\tname = \"Timer low warning\",\n+\t\tdescription = \"Determines the time when the timers color will change\"\n+\t)\n+\tdefault int timerLowWarning()\n+\t{\n+\t\treturn 30;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 3,\n+\t\tkeyName = \"highlightDoorsColor\",\n+\t\tname = \"Highlight doors color\",\n+\t\tdescription = \"Selects the color for highlighting tomb doors\"\n+\t)\n+\tdefault Color highlightDoorsColor()\n+\t{\n+\t\treturn Color.green;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 4,\n+\t\tkeyName = \"highlightDoors\",\n+\t\tname = \"Highlight doors\",\n+\t\tdescription = \"Highlights the four tomb doors in each room\"\n+\t)\n+\tdefault boolean highlightDoors()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 5,\n+\t\tkeyName = \"highlightSpeartrapColor\",\n+\t\tname = \"Highlight speartrap color\",\n+\t\tdescription = \"Selects the color for highlighting speartraps\"\n+\t)\n+\tdefault Color highlightSpeartrapsColor()\n+\t{\n+\t\treturn Color.orange;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 6,\n+\t\tkeyName = \"highlightSpeartraps\",\n+\t\tname = \"Highlight speartraps\",\n+\t\tdescription = \"Highlight the spear traps at the entrance of each room\"\n+\t)\n+\tdefault boolean highlightSpeartraps()\n+\t{\n+\t\treturn true;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 7,\n+\t\tkeyName = \"highlightContainersColor\",\n+\t\tname = \"Highlight containers color\",\n+\t\tdescription = \"Selects the color for highlighting urns, chests and sarcophagus\"\n+\t)\n+\tdefault Color highlightContainersColor()\n+\t{\n+\t\treturn Color.yellow;\n+\t}\n+\n+\t@ConfigItem(\n+\t\tposition = 8,\n+\t\tkeyName = \"highlightUrnsFloor\",\n+\t\tname = \"Highlight urns floor\",\n+\t\tdescription = \"Highlight the urns starting at selected floor and up\"\n+\t)\n+\tdefault int highlightUrnsFloor()\n+\t{\n+\t\treturn 9;", "originalCommit": "48b2b44a3c855f91d9ec9baa62d9a5be3c2faf16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwOTA3NQ==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438509075", "bodyText": "My thinking is that it fills the screen up with the overlay so the standard player would not want it on, it also had the added benefit of not trying to figure out how the average player plays. I think efficient starts at being able to loot floor 8 and uses the following:\n\nurns starting floor 7\nchest starting floor 6\nsarcophagus starting never (9)\n\nWhat numbers do you think I should use?", "author": "Mitchell-Kovacs", "createdAt": "2020-06-11T02:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUxMjg4MA==", "url": "https://github.com/runelite/runelite/pull/11718#discussion_r438512880", "bodyText": "Oh, right. There is only 8 floors. That seems fine to use 9 as off then by default.", "author": "raiyni", "createdAt": "2020-06-11T02:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzkzOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "url": "https://github.com/runelite/runelite/commit/9e35d17743e34bd1a5ba81334c3f11ddf112afe8", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2020-06-24T19:39:19Z", "type": "forcePushed"}, {"oid": "7a431fc8dbdae33027f892b896dddd8ac56c5aec", "url": "https://github.com/runelite/runelite/commit/7a431fc8dbdae33027f892b896dddd8ac56c5aec", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2020-06-24T19:49:18Z", "type": "commit"}, {"oid": "7a431fc8dbdae33027f892b896dddd8ac56c5aec", "url": "https://github.com/runelite/runelite/commit/7a431fc8dbdae33027f892b896dddd8ac56c5aec", "message": "Add Pyramid Plunder plugin\n\nCo-authored-by: Adam <Adam@sigterm.info>", "committedDate": "2020-06-24T19:49:18Z", "type": "forcePushed"}]}