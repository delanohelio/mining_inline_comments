{"pr_number": 11594, "pr_title": "Improve drift net plugin", "pr_createdAt": "2020-05-14T17:54:06Z", "pr_url": "https://github.com/runelite/runelite/pull/11594", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzMjUyNA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425632524", "bodyText": "You can just name this annette", "author": "dekvall", "createdAt": "2020-05-15T08:01:23Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -94,13 +100,30 @@\n \tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n \t@Getter\n \tprivate final List<DriftNet> NETS = ImmutableList.of(\n-\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n-\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, new WorldPoint[]{\n+\t\t\tnew WorldPoint(3746, 10297, 1),\n+\t\t\tnew WorldPoint(3747, 10297, 1),\n+\t\t\tnew WorldPoint(3748, 10297, 1),\n+\t\t\tnew WorldPoint(3749, 10297, 1),\n+\t\t}),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT, new WorldPoint[]{\n+\t\t\tnew WorldPoint(3742, 10288, 1),\n+\t\t\tnew WorldPoint(3742, 10289, 1),\n+\t\t\tnew WorldPoint(3742, 10290, 1),\n+\t\t\tnew WorldPoint(3742, 10291, 1),\n+\t\t\tnew WorldPoint(3742, 10292, 1),\n+\t\t}));\n \n \t@Getter\n \tprivate boolean inDriftNetArea;\n \tprivate boolean armInteraction;\n \n+\t@Getter\n+\tprivate boolean driftNetsInInventory = false;\n+\n+\t@Getter\n+\tprivate GameObject annetteObject;", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -100,19 +99,19 @@ public class DriftNetPlugin extends Plugin\n \tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n \t@Getter\n \tprivate final List<DriftNet> NETS = ImmutableList.of(\n-\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, new WorldPoint[]{\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, new HashSet<WorldPoint>(ImmutableList.of(\n \t\t\tnew WorldPoint(3746, 10297, 1),\n \t\t\tnew WorldPoint(3747, 10297, 1),\n \t\t\tnew WorldPoint(3748, 10297, 1),\n-\t\t\tnew WorldPoint(3749, 10297, 1),\n-\t\t}),\n-\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT, new WorldPoint[]{\n+\t\t\tnew WorldPoint(3749, 10297, 1)\n+\t\t))),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT, new HashSet<WorldPoint>(ImmutableList.of(\n \t\t\tnew WorldPoint(3742, 10288, 1),\n \t\t\tnew WorldPoint(3742, 10289, 1),\n \t\t\tnew WorldPoint(3742, 10290, 1),\n \t\t\tnew WorldPoint(3742, 10291, 1),\n-\t\t\tnew WorldPoint(3742, 10292, 1),\n-\t\t}));\n+\t\t\tnew WorldPoint(3742, 10292, 1)\n+\t\t))));\n \n \t@Getter\n \tprivate boolean inDriftNetArea;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425635132", "bodyText": "Are you sure this wrong? It seemed correct when i tested it, though it's possible i was mistaken.", "author": "dekvall", "createdAt": "2020-05-15T08:06:31Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -175,12 +198,6 @@ private void updateDriftNetVarbits()\n \t\t\tnet.setStatus(status);\n \t\t\tnet.setCount(count);\n \t\t}\n-\n-\t\t// When you collect any loot, all tags become invalidated\n-\t\tif (client.getVar(Varbits.DRIFT_NET_COLLECT) != 0)\n-\t\t{\n-\t\t\ttaggedFish.clear();\n-\t\t}", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1NjYwNg==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425656606", "bodyText": "It's not wrong, it's just that the fish shoal stay tagged even when you collect the loot. The fish shoal only become untagged when they are adjacent to a drift net that is not actively catching (= full, unset) or when they have been tagged for a certain amount of ticks, which I was unable to determine but would seem to be somewhere randomly between 40 and 100.", "author": "bartpeeters", "createdAt": "2020-05-15T08:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1OTU1OQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425659559", "bodyText": "Alright, how did you time the ticks?", "author": "dekvall", "createdAt": "2020-05-15T08:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MzkwNw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425663907", "bodyText": "I added an overlay to the fish shoal which showed the tick it was tagged (value of taggedFish).", "author": "bartpeeters", "createdAt": "2020-05-15T09:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2NTExNg==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425665116", "bodyText": "I agree with all the other comments, do I add these changes in new commit(s) or do I amend the current commits?", "author": "bartpeeters", "createdAt": "2020-05-15T09:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2NTQ4Mw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425665483", "bodyText": "I get that, but i was more interested in how you determined when a shoal was no longer tagged? Was it when it moved away from the net, or just didn't move towards it for example?", "author": "dekvall", "createdAt": "2020-05-15T09:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2NzAwMQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425667001", "bodyText": "I'd prefer it if you amend your current commits :)", "author": "dekvall", "createdAt": "2020-05-15T09:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3OTg5NA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425679894", "bodyText": "Visually when a shoal was 2 or less tiles away from a drift net but did not go in it. Which means it was probably untagged for a longer time, but just never moved close enough to a net. That's why it's hard to determine how many ticks exactly it takes for a shoal to become untagged. But in this implementation it seldomly happens that a tagged shoal is actually not tagged.\nMaybe if you have some time to test this implementation you can determine what causes a shoal which seems to be tagged to not actually be. It does not happen very often so I was unable to determine this case. It could be just a tick timeout or something else.", "author": "bartpeeters", "createdAt": "2020-05-15T09:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY4NTYwNw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425685607", "bodyText": "No i trust you, i was mostly interested in how you did it because i had the same problem, it's very hard to determine. Sounds good.", "author": "dekvall", "createdAt": "2020-05-15T09:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTEzMg=="}], "type": "inlineReview", "revised_code": {"commit": "bed1bfcd79922bb01a475975b52b91a96a9acfea", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..30449ad51 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -198,6 +190,12 @@ public class DriftNetPlugin extends Plugin\n \t\t\tnet.setStatus(status);\n \t\t\tnet.setCount(count);\n \t\t}\n+\n+\t\t// When you collect any loot, all tags become invalidated\n+\t\tif (client.getVar(Varbits.DRIFT_NET_COLLECT) != 0)\n+\t\t{\n+\t\t\ttaggedFish.clear();\n+\t\t}\n \t}\n \n \t@Subscribe\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNTk5Ng==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425635996", "bodyText": "This can just be a method of DriftNet", "author": "dekvall", "createdAt": "2020-05-15T08:08:20Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -241,6 +282,11 @@ private void tagFish(Actor fish)\n \t\ttaggedFish.put(fishTarget, client.getTickCount());\n \t}\n \n+\tprivate boolean isAcceptingFish(DriftNetStatus status)\n+\t{\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n+\t}", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -282,11 +276,6 @@ public class DriftNetPlugin extends Plugin\n \t\ttaggedFish.put(fishTarget, client.getTickCount());\n \t}\n \n-\tprivate boolean isAcceptingFish(DriftNetStatus status)\n-\t{\n-\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n-\t}\n-\n \t@Subscribe\n \tpublic void onNpcSpawned(NpcSpawned event)\n \t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzNzkzOQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425637939", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\tif (event.getItemContainer() != client.getItemContainer(InventoryID.INVENTORY))\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\treturn;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tItemContainer itemContainer = event.getItemContainer();\n          \n          \n            \n            \t\tdriftNetsInInventory = itemContainer.contains(ItemID.DRIFT_NET);\n          \n          \n            \n            \t\tfinal ItemContainer itemContainer = event.getItemContainer();\n          \n          \n            \n            \t\tif (itemContainer != client.getItemContainer(InventoryID.INVENTORY))\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\treturn;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tdriftNetsInInventory = itemContainer.contains(ItemID.DRIFT_NET);", "author": "dekvall", "createdAt": "2020-05-15T08:12:19Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -284,6 +336,20 @@ public void onGameObjectDespawned(GameObjectDespawned event)\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onItemContainerChanged(final ItemContainerChanged event)\n+\t{\n+\n+\t\tif (event.getItemContainer() != client.getItemContainer(InventoryID.INVENTORY))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tItemContainer itemContainer = event.getItemContainer();\n+\t\tdriftNetsInInventory = itemContainer.contains(ItemID.DRIFT_NET);", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -340,12 +334,12 @@ public class DriftNetPlugin extends Plugin\n \tpublic void onItemContainerChanged(final ItemContainerChanged event)\n \t{\n \n-\t\tif (event.getItemContainer() != client.getItemContainer(InventoryID.INVENTORY))\n+\t\tfinal ItemContainer itemContainer = event.getItemContainer();\n+\t\tif (itemContainer != client.getItemContainer(InventoryID.INVENTORY))\n \t\t{\n \t\t\treturn;\n \t\t}\n \n-\t\tItemContainer itemContainer = event.getItemContainer();\n \t\tdriftNetsInInventory = itemContainer.contains(ItemID.DRIFT_NET);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzOTMyMg==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425639322", "bodyText": "60 seconds is a very long time, i might have undershot the correct time with 6 seconds but what's the motivation for a tenfold increase?", "author": "dekvall", "createdAt": "2020-05-15T08:15:03Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java", "diffHunk": "@@ -76,12 +76,12 @@ default boolean highlightUntaggedFish()\n \t)\n \t@Range(\n \t\tmin = 1,\n-\t\tmax = 60\n+\t\tmax = 100\n \t)\n \t@Units(Units.TICKS)\n \tdefault int timeoutDelay()\n \t{\n-\t\treturn 10;\n+\t\treturn 100;", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\nindex 4ebabeccc..5ca1f2919 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\n\n@@ -81,7 +81,7 @@ public interface DriftNetConfig extends Config\n \t@Units(Units.TICKS)\n \tdefault int timeoutDelay()\n \t{\n-\t\treturn 100;\n+\t\treturn 60;\n \t}\n \n \t@ConfigItem(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NDIzOQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425644239", "bodyText": "Why do we care about the net status of the previous tick?", "author": "dekvall", "createdAt": "2020-05-15T08:24:12Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,6 +221,30 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n+\t\tfor (DriftNet net : NETS)\n+\t\t{\n+\t\t\tDriftNetStatus netStatus = net.getStatus();\n+\t\t\tDriftNetStatus prevTickNetStatus = net.getPrevTickStatus();", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY2MDQxOQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425660419", "bodyText": "When a fish shoal is 2 tiles adjacent to a drift net and is moving to a net that is just being setup it will be denied even though the net is currently in the CATCHING status. The easiest solution seemed to be to just look to the previous tick.", "author": "bartpeeters", "createdAt": "2020-05-15T08:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NDIzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -223,26 +228,15 @@ public class DriftNetPlugin extends Plugin\n \n \t\tfor (DriftNet net : NETS)\n \t\t{\n-\t\t\tDriftNetStatus netStatus = net.getStatus();\n-\t\t\tDriftNetStatus prevTickNetStatus = net.getPrevTickStatus();\n-\t\t\tif (isAcceptingFish(netStatus) || isAcceptingFish(prevTickNetStatus))\n+\t\t\t// untag fish which are next to a net that is not accepting fish right now\n+\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t\t// even though the net is currently in the CATCHING status)\n+\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n \t\t\t{\n-\t\t\t\tIterator<NPC> itr = taggedFish.keySet().iterator();\n-\t\t\t\t// untag fish which are next to a net that is not accepting fish\n-\t\t\t\twhile (itr.hasNext())\n-\t\t\t\t{\n-\t\t\t\t\tNPC singleTaggedFish = itr.next();\n-\t\t\t\t\tWorldPoint fishPoint = WorldPoint.fromLocalInstance(client, singleTaggedFish.getLocalLocation());\n-\t\t\t\t\tfor (WorldPoint point : net.getAdjacentTiles())\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif (point.distanceTo(fishPoint) == 0)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\titr.remove();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));\n \t\t\t}\n-\t\t\tnet.setPrevTickStatus(netStatus);\n+\t\t\tnet.setPrevTickStatus();\n \t\t}\n \n \t\tfinal int currentTickCount = client.getTickCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTExMA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425645110", "bodyText": "I think it would be better if adjacentTiles was just a set, which would let you do adjacentTiles.contains(fishpoint)", "author": "dekvall", "createdAt": "2020-05-15T08:25:44Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,6 +221,30 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n+\t\tfor (DriftNet net : NETS)\n+\t\t{\n+\t\t\tDriftNetStatus netStatus = net.getStatus();\n+\t\t\tDriftNetStatus prevTickNetStatus = net.getPrevTickStatus();\n+\t\t\tif (isAcceptingFish(netStatus) || isAcceptingFish(prevTickNetStatus))\n+\t\t\t{\n+\t\t\t\tIterator<NPC> itr = taggedFish.keySet().iterator();\n+\t\t\t\t// untag fish which are next to a net that is not accepting fish\n+\t\t\t\twhile (itr.hasNext())\n+\t\t\t\t{\n+\t\t\t\t\tNPC singleTaggedFish = itr.next();\n+\t\t\t\t\tWorldPoint fishPoint = WorldPoint.fromLocalInstance(client, singleTaggedFish.getLocalLocation());\n+\t\t\t\t\tfor (WorldPoint point : net.getAdjacentTiles())", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -223,26 +228,15 @@ public class DriftNetPlugin extends Plugin\n \n \t\tfor (DriftNet net : NETS)\n \t\t{\n-\t\t\tDriftNetStatus netStatus = net.getStatus();\n-\t\t\tDriftNetStatus prevTickNetStatus = net.getPrevTickStatus();\n-\t\t\tif (isAcceptingFish(netStatus) || isAcceptingFish(prevTickNetStatus))\n+\t\t\t// untag fish which are next to a net that is not accepting fish right now\n+\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t\t// even though the net is currently in the CATCHING status)\n+\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n \t\t\t{\n-\t\t\t\tIterator<NPC> itr = taggedFish.keySet().iterator();\n-\t\t\t\t// untag fish which are next to a net that is not accepting fish\n-\t\t\t\twhile (itr.hasNext())\n-\t\t\t\t{\n-\t\t\t\t\tNPC singleTaggedFish = itr.next();\n-\t\t\t\t\tWorldPoint fishPoint = WorldPoint.fromLocalInstance(client, singleTaggedFish.getLocalLocation());\n-\t\t\t\t\tfor (WorldPoint point : net.getAdjacentTiles())\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif (point.distanceTo(fishPoint) == 0)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\titr.remove();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));\n \t\t\t}\n-\t\t\tnet.setPrevTickStatus(netStatus);\n+\t\t\tnet.setPrevTickStatus();\n \t\t}\n \n \t\tfinal int currentTickCount = client.getTickCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NjI2MA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425646260", "bodyText": "It feels like this entire thing can be reduced to a method that takes an npc which would let you utilize the removeIf below, and not have to create additional iterators.", "author": "dekvall", "createdAt": "2020-05-15T08:27:55Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,6 +221,30 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n+\t\tfor (DriftNet net : NETS)", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -223,26 +228,15 @@ public class DriftNetPlugin extends Plugin\n \n \t\tfor (DriftNet net : NETS)\n \t\t{\n-\t\t\tDriftNetStatus netStatus = net.getStatus();\n-\t\t\tDriftNetStatus prevTickNetStatus = net.getPrevTickStatus();\n-\t\t\tif (isAcceptingFish(netStatus) || isAcceptingFish(prevTickNetStatus))\n+\t\t\t// untag fish which are next to a net that is not accepting fish right now\n+\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t\t// even though the net is currently in the CATCHING status)\n+\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n \t\t\t{\n-\t\t\t\tIterator<NPC> itr = taggedFish.keySet().iterator();\n-\t\t\t\t// untag fish which are next to a net that is not accepting fish\n-\t\t\t\twhile (itr.hasNext())\n-\t\t\t\t{\n-\t\t\t\t\tNPC singleTaggedFish = itr.next();\n-\t\t\t\t\tWorldPoint fishPoint = WorldPoint.fromLocalInstance(client, singleTaggedFish.getLocalLocation());\n-\t\t\t\t\tfor (WorldPoint point : net.getAdjacentTiles())\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif (point.distanceTo(fishPoint) == 0)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\titr.remove();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));\n \t\t\t}\n-\t\t\tnet.setPrevTickStatus(netStatus);\n+\t\t\tnet.setPrevTickStatus();\n \t\t}\n \n \t\tfinal int currentTickCount = client.getTickCount();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NzQ5MQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425647491", "bodyText": "remove this on game object despawn too", "author": "dekvall", "createdAt": "2020-05-15T08:30:04Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -256,12 +302,18 @@ public void onNpcDespawned(NpcDespawned event)\n \t{\n \t\tfinal NPC npc = event.getNpc();\n \t\tfish.remove(npc);\n+\t\ttaggedFish.remove(npc);\n \t}\n \n \t@Subscribe\n \tpublic void onGameObjectSpawned(GameObjectSpawned event)\n \t{\n \t\tGameObject object = event.getGameObject();\n+\t\tif (object.getId() == ObjectID.ANNETTE)\n+\t\t{\n+\t\t\tannetteObject = object;", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex f695b448a..fae397218 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -311,7 +300,7 @@ public class DriftNetPlugin extends Plugin\n \t\tGameObject object = event.getGameObject();\n \t\tif (object.getId() == ObjectID.ANNETTE)\n \t\t{\n-\t\t\tannetteObject = object;\n+\t\t\tannette = object;\n \t\t}\n \n \t\tfor (DriftNet net : NETS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0ODY0MQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425648641", "bodyText": "As mentioned below, i would make this a Set", "author": "dekvall", "createdAt": "2020-05-15T08:32:09Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java", "diffHunk": "@@ -37,10 +38,12 @@\n \tprivate final int objectId;\n \tprivate final Varbits statusVarbit;\n \tprivate final Varbits countVarbit;\n+\tprivate final WorldPoint[] adjacentTiles;", "originalCommit": "c73a5a43bf19a6320b0dba609bfe7f368d966fbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\nindex f10b5a491..1eafabfba 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n\n@@ -38,13 +39,33 @@ class DriftNet\n \tprivate final int objectId;\n \tprivate final Varbits statusVarbit;\n \tprivate final Varbits countVarbit;\n-\tprivate final WorldPoint[] adjacentTiles;\n+\tprivate final Set<WorldPoint> adjacentTiles;\n \n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n \tprivate DriftNetStatus prevTickStatus;\n \n+\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n+\t{\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n+\t}\n+\n+\tboolean isNotAcceptingFish()\n+\t{\n+\t\treturn isNotAcceptingFish(status);\n+\t}\n+\n+\tboolean wasNotAcceptingFishPrevTick()\n+\t{\n+\t\treturn isNotAcceptingFish(prevTickStatus);\n+\t}\n+\n+\tvoid setPrevTickStatus()\n+\t{\n+\t\tprevTickStatus = status;\n+\t}\n+\n \tString getFormattedCountText()\n \t{\n \t\treturn status != DriftNetStatus.UNSET ? count + \"/10\" : \"\";\n"}}, {"oid": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "url": "https://github.com/runelite/runelite/commit/5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "message": "Drift net plugin: Add option to tag Annette when no drift nets in inventory", "committedDate": "2020-05-15T13:08:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5Mzc0Mw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425793743", "bodyText": "Use lombok @Setter instead, also a setter without an argument feels weird?", "author": "dekvall", "createdAt": "2020-05-15T13:16:02Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java", "diffHunk": "@@ -37,10 +39,32 @@\n \tprivate final int objectId;\n \tprivate final Varbits statusVarbit;\n \tprivate final Varbits countVarbit;\n+\tprivate final Set<WorldPoint> adjacentTiles;\n \n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\tprivate DriftNetStatus prevTickStatus;\n+\n+\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n+\t{\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n+\t}\n+\n+\tboolean isNotAcceptingFish()\n+\t{\n+\t\treturn isNotAcceptingFish(status);\n+\t}\n+\n+\tboolean wasNotAcceptingFishPrevTick()\n+\t{\n+\t\treturn isNotAcceptingFish(prevTickStatus);\n+\t}\n+\n+\tvoid setPrevTickStatus()", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\nindex 1eafabfba..edf755d2e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n\n@@ -44,26 +45,17 @@ class DriftNet\n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\t@Setter\n \tprivate DriftNetStatus prevTickStatus;\n \n-\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n-\t{\n-\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n-\t}\n-\n \tboolean isNotAcceptingFish()\n \t{\n-\t\treturn isNotAcceptingFish(status);\n-\t}\n-\n-\tboolean wasNotAcceptingFishPrevTick()\n-\t{\n-\t\treturn isNotAcceptingFish(prevTickStatus);\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n \t}\n \n-\tvoid setPrevTickStatus()\n+\tboolean wasNotAcceptingFish()\n \t{\n-\t\tprevTickStatus = status;\n+\t\treturn prevTickStatus != DriftNetStatus.CATCH && prevTickStatus != DriftNetStatus.SET;\n \t}\n \n \tString getFormattedCountText()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5Mzk2Nw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425793967", "bodyText": "I don't think this method is necessary", "author": "dekvall", "createdAt": "2020-05-15T13:16:24Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java", "diffHunk": "@@ -37,10 +39,32 @@\n \tprivate final int objectId;\n \tprivate final Varbits statusVarbit;\n \tprivate final Varbits countVarbit;\n+\tprivate final Set<WorldPoint> adjacentTiles;\n \n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\tprivate DriftNetStatus prevTickStatus;\n+\n+\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n+\t{\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n+\t}", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\nindex 1eafabfba..edf755d2e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n\n@@ -44,26 +45,17 @@ class DriftNet\n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\t@Setter\n \tprivate DriftNetStatus prevTickStatus;\n \n-\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n-\t{\n-\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n-\t}\n-\n \tboolean isNotAcceptingFish()\n \t{\n-\t\treturn isNotAcceptingFish(status);\n-\t}\n-\n-\tboolean wasNotAcceptingFishPrevTick()\n-\t{\n-\t\treturn isNotAcceptingFish(prevTickStatus);\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n \t}\n \n-\tvoid setPrevTickStatus()\n+\tboolean wasNotAcceptingFish()\n \t{\n-\t\tprevTickStatus = status;\n+\t\treturn prevTickStatus != DriftNetStatus.CATCH && prevTickStatus != DriftNetStatus.SET;\n \t}\n \n \tString getFormattedCountText()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDgxMA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425794810", "bodyText": "Maybe we can increase this some if we are certain it's around 40-60 secs, 120 maybe?", "author": "dekvall", "createdAt": "2020-05-15T13:17:42Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java", "diffHunk": "@@ -76,12 +76,12 @@ default boolean highlightUntaggedFish()\n \t)\n \t@Range(\n \t\tmin = 1,\n-\t\tmax = 60\n+\t\tmax = 100", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNTM0MQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r426135341", "bodyText": "After getting another fishing level yesterday I feel like 60 is ideal. Almost never had a fish which was tagged which didn't actually was and seldomly had a fish which was untagged still go in a net. Which is better in my opinion than a fish who is tagged but actually isn't. At 100 this happens pretty often so I wouldn't go higher than this.", "author": "bartpeeters", "createdAt": "2020-05-16T09:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDgxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\nindex 4ebabeccc..5ca1f2919 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\n\n@@ -81,7 +81,7 @@ public interface DriftNetConfig extends Config\n \t@Units(Units.TICKS)\n \tdefault int timeoutDelay()\n \t{\n-\t\treturn 100;\n+\t\treturn 60;\n \t}\n \n \t@ConfigItem(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NTMyMQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425795321", "bodyText": "can just be tagAnnette imo", "author": "dekvall", "createdAt": "2020-05-15T13:18:33Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java", "diffHunk": "@@ -94,4 +94,26 @@ default Color untaggedFishColor()\n \t{\n \t\treturn Color.CYAN;\n \t}\n+\n+\t@ConfigItem(\n+\t\tkeyName = \"tagAnnetteWhenNoNets\",", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\nindex 4ebabeccc..5ca1f2919 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetConfig.java\n\n@@ -96,7 +96,7 @@ public interface DriftNetConfig extends Config\n \t}\n \n \t@ConfigItem(\n-\t\tkeyName = \"tagAnnetteWhenNoNets\",\n+\t\tkeyName = \"tagAnnette\",\n \t\tname = \"Tag Annette when no nets in inventory\",\n \t\tdescription = \"Tag Annette when no nets in inventory\",\n \t\tposition = 6\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NjI2OQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425796269", "bodyText": "Could use ImmutableSet", "author": "dekvall", "createdAt": "2020-05-15T13:20:05Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -94,13 +99,30 @@\n \tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n \t@Getter\n \tprivate final List<DriftNet> NETS = ImmutableList.of(\n-\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n-\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, new HashSet<WorldPoint>(ImmutableList.of(", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex fae397218..6a5f7866f 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -99,19 +101,19 @@ public class DriftNetPlugin extends Plugin\n \tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n \t@Getter\n \tprivate final List<DriftNet> NETS = ImmutableList.of(\n-\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, new HashSet<WorldPoint>(ImmutableList.of(\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, ImmutableSet.of(\n \t\t\tnew WorldPoint(3746, 10297, 1),\n \t\t\tnew WorldPoint(3747, 10297, 1),\n \t\t\tnew WorldPoint(3748, 10297, 1),\n \t\t\tnew WorldPoint(3749, 10297, 1)\n-\t\t))),\n-\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT, new HashSet<WorldPoint>(ImmutableList.of(\n+\t\t)),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT, ImmutableSet.of(\n \t\t\tnew WorldPoint(3742, 10288, 1),\n \t\t\tnew WorldPoint(3742, 10289, 1),\n \t\t\tnew WorldPoint(3742, 10290, 1),\n \t\t\tnew WorldPoint(3742, 10291, 1),\n \t\t\tnew WorldPoint(3742, 10292, 1)\n-\t\t))));\n+\t\t)));\n \n \t@Getter\n \tprivate boolean inDriftNetArea;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMzEwMQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425803101", "bodyText": "remove this newline", "author": "dekvall", "createdAt": "2020-05-15T13:30:36Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -284,6 +330,20 @@ public void onGameObjectDespawned(GameObjectDespawned event)\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onItemContainerChanged(final ItemContainerChanged event)\n+\t{\n+", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex fae397218..6a5f7866f 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -333,7 +339,6 @@ public class DriftNetPlugin extends Plugin\n \t@Subscribe\n \tpublic void onItemContainerChanged(final ItemContainerChanged event)\n \t{\n-\n \t\tfinal ItemContainer itemContainer = event.getItemContainer();\n \t\tif (itemContainer != client.getItemContainer(InventoryID.INVENTORY))\n \t\t{\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNDgyNA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425804824", "bodyText": "i was thinking that this could go in a method too so you could use the removeIf below in a removeIf(expired || closeToUnsetNet) (naming idk)", "author": "dekvall", "createdAt": "2020-05-15T13:33:23Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,6 +226,19 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n+\t\tfor (DriftNet net : NETS)\n+\t\t{\n+\t\t\t// untag fish which are next to a net that is not accepting fish right now\n+\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t\t// even though the net is currently in the CATCHING status)\n+\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n+\t\t\t{\n+\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex fae397218..6a5f7866f 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -226,21 +238,15 @@ public class DriftNetPlugin extends Plugin\n \t\t\treturn;\n \t\t}\n \n-\t\tfor (DriftNet net : NETS)\n-\t\t{\n-\t\t\t// untag fish which are next to a net that is not accepting fish right now\n-\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n-\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n-\t\t\t// even though the net is currently in the CATCHING status)\n-\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n-\t\t\t{\n-\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));\n-\t\t\t}\n-\t\t\tnet.setPrevTickStatus();\n-\t\t}\n+\t\t// nets that are not accepting fish are those currently not accepting or those who were\n+\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t// even though the net is currently in the CATCHING status)\n+\t\tIterable<DriftNet> notAcceptingNets = Iterables.filter(NETS, net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish());\n+\n+\t\ttaggedFish.entrySet().removeIf(entry -> checkTagExpired(entry.getValue()) || checkFishNextToNet(entry.getKey(), notAcceptingNets));\n \n-\t\tfinal int currentTickCount = client.getTickCount();\n-\t\ttaggedFish.entrySet().removeIf(entry -> entry.getValue() + config.timeoutDelay() < currentTickCount);\n+\t\tNETS.forEach(net -> net.setPrevTickStatus(net.getStatus()));\n \n \t\tarmInteraction = false;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNTQ3Mw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425805473", "bodyText": "could probably be just wasNotAcceptingFish and a comment", "author": "dekvall", "createdAt": "2020-05-15T13:34:30Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java", "diffHunk": "@@ -37,10 +39,32 @@\n \tprivate final int objectId;\n \tprivate final Varbits statusVarbit;\n \tprivate final Varbits countVarbit;\n+\tprivate final Set<WorldPoint> adjacentTiles;\n \n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\tprivate DriftNetStatus prevTickStatus;\n+\n+\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n+\t{\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n+\t}\n+\n+\tboolean isNotAcceptingFish()\n+\t{\n+\t\treturn isNotAcceptingFish(status);\n+\t}\n+\n+\tboolean wasNotAcceptingFishPrevTick()", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\nindex 1eafabfba..edf755d2e 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n\n@@ -44,26 +45,17 @@ class DriftNet\n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\t@Setter\n \tprivate DriftNetStatus prevTickStatus;\n \n-\tprivate boolean isNotAcceptingFish(DriftNetStatus status)\n-\t{\n-\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n-\t}\n-\n \tboolean isNotAcceptingFish()\n \t{\n-\t\treturn isNotAcceptingFish(status);\n-\t}\n-\n-\tboolean wasNotAcceptingFishPrevTick()\n-\t{\n-\t\treturn isNotAcceptingFish(prevTickStatus);\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n \t}\n \n-\tvoid setPrevTickStatus()\n+\tboolean wasNotAcceptingFish()\n \t{\n-\t\tprevTickStatus = status;\n+\t\treturn prevTickStatus != DriftNetStatus.CATCH && prevTickStatus != DriftNetStatus.SET;\n \t}\n \n \tString getFormattedCountText()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNzYwNw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r425807607", "bodyText": "This will be the same as the current status unless there has been a change this tick, so it might be worth considering setting this in onVarbitChanged instead? not sure.", "author": "dekvall", "createdAt": "2020-05-15T13:38:07Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,6 +226,19 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n+\t\tfor (DriftNet net : NETS)\n+\t\t{\n+\t\t\t// untag fish which are next to a net that is not accepting fish right now\n+\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t\t// even though the net is currently in the CATCHING status)\n+\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n+\t\t\t{\n+\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));\n+\t\t\t}\n+\t\t\tnet.setPrevTickStatus();", "originalCommit": "5aecc4ec36bdfd9b45c2c8fe2f51df7d4df91c33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNTQ1Nw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r426135457", "bodyText": "Don't really know how that would work. We would still need to make sure that the next tick after a VarbitChanged, the prevTickStatus would be the same as the current status.", "author": "bartpeeters", "createdAt": "2020-05-16T09:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwNzYwNw=="}], "type": "inlineReview", "revised_code": {"commit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex fae397218..6a5f7866f 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -226,21 +238,15 @@ public class DriftNetPlugin extends Plugin\n \t\t\treturn;\n \t\t}\n \n-\t\tfor (DriftNet net : NETS)\n-\t\t{\n-\t\t\t// untag fish which are next to a net that is not accepting fish right now\n-\t\t\t// or was not accepting fish previous tick (When a fish shoal is 2 tiles adjacent\n-\t\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n-\t\t\t// even though the net is currently in the CATCHING status)\n-\t\t\tif (net.isNotAcceptingFish() || net.wasNotAcceptingFishPrevTick())\n-\t\t\t{\n-\t\t\t\ttaggedFish.entrySet().removeIf(entry -> checkFishOnTiles(entry.getKey(), net.getAdjacentTiles()));\n-\t\t\t}\n-\t\t\tnet.setPrevTickStatus();\n-\t\t}\n+\t\t// nets that are not accepting fish are those currently not accepting or those who were\n+\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t// even though the net is currently in the CATCHING status)\n+\t\tIterable<DriftNet> notAcceptingNets = Iterables.filter(NETS, net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish());\n+\n+\t\ttaggedFish.entrySet().removeIf(entry -> checkTagExpired(entry.getValue()) || checkFishNextToNet(entry.getKey(), notAcceptingNets));\n \n-\t\tfinal int currentTickCount = client.getTickCount();\n-\t\ttaggedFish.entrySet().removeIf(entry -> entry.getValue() + config.timeoutDelay() < currentTickCount);\n+\t\tNETS.forEach(net -> net.setPrevTickStatus(net.getStatus()));\n \n \t\tarmInteraction = false;\n \t}\n"}}, {"oid": "4bf3a56301020cba3a7516a95cd25fff6637a001", "url": "https://github.com/runelite/runelite/commit/4bf3a56301020cba3a7516a95cd25fff6637a001", "message": "Drift net plugin: Add option to tag Annette when no drift nets in inventory", "committedDate": "2020-05-16T09:01:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzQ1Mw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r430153453", "bodyText": "This should also be cleared on game state change, as game objects are garbage collected on scene changes. eg.\npublic void onGameStateChanged(GameStateChanged event)\n{\n\tif (event.getGameState() != GameState.LOGGED_IN)\n\t{\n\t\tannette = null;\n\t}\n}", "author": "Nightfirecat", "createdAt": "2020-05-26T04:47:35Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -94,13 +101,30 @@\n \tprivate Map<NPC, Integer> taggedFish = new HashMap<>();\n \t@Getter\n \tprivate final List<DriftNet> NETS = ImmutableList.of(\n-\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT),\n-\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT));\n+\t\tnew DriftNet(NullObjectID.NULL_31433, Varbits.NORTH_NET_STATUS, Varbits.NORTH_NET_CATCH_COUNT, ImmutableSet.of(\n+\t\t\tnew WorldPoint(3746, 10297, 1),\n+\t\t\tnew WorldPoint(3747, 10297, 1),\n+\t\t\tnew WorldPoint(3748, 10297, 1),\n+\t\t\tnew WorldPoint(3749, 10297, 1)\n+\t\t)),\n+\t\tnew DriftNet(NullObjectID.NULL_31434, Varbits.SOUTH_NET_STATUS, Varbits.SOUTH_NET_CATCH_COUNT, ImmutableSet.of(\n+\t\t\tnew WorldPoint(3742, 10288, 1),\n+\t\t\tnew WorldPoint(3742, 10289, 1),\n+\t\t\tnew WorldPoint(3742, 10290, 1),\n+\t\t\tnew WorldPoint(3742, 10291, 1),\n+\t\t\tnew WorldPoint(3742, 10292, 1)\n+\t\t)));\n \n \t@Getter\n \tprivate boolean inDriftNetArea;\n \tprivate boolean armInteraction;\n \n+\t@Getter\n+\tprivate boolean driftNetsInInventory = false;\n+\n+\t@Getter\n+\tprivate GameObject annette;", "originalCommit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MzM1NQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r431373355", "bodyText": "Are the npc's also garbage collected on scene changes? If so I could change this:\n@Subscribe\npublic void onGameStateChanged(GameStateChanged event)\n{\n  switch (event.getGameState())\n  {\n    case LOGIN_SCREEN:\n    case HOPPING:\n    case LOADING:\n      reset();\n      break;\n    case LOGGED_IN:\n      inDriftNetArea = checkArea();\n      updateDriftNetVarbits();\n      break;\n  }\n}\n\nto\n@Subscribe\npublic void onGameStateChanged(GameStateChanged event)\n{\n  if (event.getGameState() == LOGGED_IN) {\n    inDriftNetArea = checkArea();\n    updateDriftNetVarbits();\n  }else {\n    reset();\n  }\n}\n\nAnd add annette = null to the reset function.", "author": "bartpeeters", "createdAt": "2020-05-27T19:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTI1Mw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r432265253", "bodyText": "NPCs are despawned via NpcDespawned events on game state changes.", "author": "Nightfirecat", "createdAt": "2020-05-29T05:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1MzQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4f56a5825761ebdeb280faf3a3882c927fe2050b", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 6a5f7866f..94c796498 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -120,7 +121,7 @@ public class DriftNetPlugin extends Plugin\n \tprivate boolean armInteraction;\n \n \t@Getter\n-\tprivate boolean driftNetsInInventory = false;\n+\tprivate boolean driftNetsInInventory;\n \n \t@Getter\n \tprivate GameObject annette;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1Mzc0Nw==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r430153747", "bodyText": "No need to compare the object IDs, compare the reference instead.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (object.getId() == ObjectID.ANNETTE)\n          \n          \n            \n            \t\tif (object == annette)", "author": "Nightfirecat", "createdAt": "2020-05-26T04:48:58Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -275,6 +322,11 @@ public void onGameObjectSpawned(GameObjectSpawned event)\n \tpublic void onGameObjectDespawned(GameObjectDespawned event)\n \t{\n \t\tGameObject object = event.getGameObject();\n+\t\tif (object.getId() == ObjectID.ANNETTE)", "originalCommit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 6a5f7866f..456164d76 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -322,7 +327,7 @@ public class DriftNetPlugin extends Plugin\n \tpublic void onGameObjectDespawned(GameObjectDespawned event)\n \t{\n \t\tGameObject object = event.getGameObject();\n-\t\tif (object.getId() == ObjectID.ANNETTE)\n+\t\tif (object == annette)\n \t\t{\n \t\t\tannette = null;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1NDI4Ng==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r430154286", "bodyText": "Remove this extra newline\n\n  \n    \n      \n        Suggested change", "author": "Nightfirecat", "createdAt": "2020-05-26T04:51:24Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -284,6 +336,19 @@ public void onGameObjectDespawned(GameObjectDespawned event)\n \t\t}\n \t}\n \n+\t@Subscribe\n+\tpublic void onItemContainerChanged(final ItemContainerChanged event)\n+\t{\n+\t\tfinal ItemContainer itemContainer = event.getItemContainer();\n+\t\tif (itemContainer != client.getItemContainer(InventoryID.INVENTORY))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tdriftNetsInInventory = itemContainer.contains(ItemID.DRIFT_NET);\n+\t}\n+\n+", "originalCommit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 6a5f7866f..456164d76 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -348,7 +353,6 @@ public class DriftNetPlugin extends Plugin\n \t\tdriftNetsInInventory = itemContainer.contains(ItemID.DRIFT_NET);\n \t}\n \n-\n \tprivate boolean checkArea()\n \t{\n \t\tfinal Player localPlayer = client.getLocalPlayer();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1NjMwMg==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r430156302", "bodyText": "Instead of accepting an Iterable, a Collection or even a List would be preferable. That way, the Java stream API can be used instead of guava's Iterables:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate boolean checkFishNextToNet(NPC fish, Iterable<DriftNet> nets)\n          \n          \n            \n            \t{\n          \n          \n            \n            \t\treturn Iterables.size(Iterables.filter(nets, net -> checkFishOnTiles(fish, net.getAdjacentTiles()))) > 0;\n          \n          \n            \n            \t}\n          \n          \n            \n            \tprivate boolean checkFishNextToNet(NPC fish, Collection<DriftNet> nets)\n          \n          \n            \n            \t{\n          \n          \n            \n            \t\treturn nets.stream().anyMatch(net ->\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n          \n          \n            \n            \t\t\treturn net.getAdjacentTiles().contains(fishTile);\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t}", "author": "Nightfirecat", "createdAt": "2020-05-26T05:00:02Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -196,6 +214,22 @@ public void onInteractingChanged(InteractingChanged event)\n \t\t}\n \t}\n \n+\tprivate boolean checkFishOnTiles(NPC fish, Set<WorldPoint> adjacentTiles)\n+\t{\n+\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n+\t\treturn adjacentTiles.contains(fishTile);\n+\t}\n+\n+\tprivate boolean checkFishNextToNet(NPC fish, Iterable<DriftNet> nets)\n+\t{\n+\t\treturn Iterables.size(Iterables.filter(nets, net -> checkFishOnTiles(fish, net.getAdjacentTiles()))) > 0;\n+\t}", "originalCommit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 6a5f7866f..456164d76 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -214,15 +219,13 @@ public class DriftNetPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate boolean checkFishOnTiles(NPC fish, Set<WorldPoint> adjacentTiles)\n+\tprivate boolean checkFishNextToNet(NPC fish, Collection<DriftNet> nets)\n \t{\n-\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n-\t\treturn adjacentTiles.contains(fishTile);\n-\t}\n-\n-\tprivate boolean checkFishNextToNet(NPC fish, Iterable<DriftNet> nets)\n-\t{\n-\t\treturn Iterables.size(Iterables.filter(nets, net -> checkFishOnTiles(fish, net.getAdjacentTiles()))) > 0;\n+\t\treturn nets.stream().anyMatch(net ->\n+\t\t{\n+\t\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n+\t\t\treturn net.getAdjacentTiles().contains(fishTile);\n+\t\t});\n \t}\n \n \tprivate boolean checkTagExpired(Integer tick)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1NjM3OA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r430156378", "bodyText": "This can be inlined into checkFishNextToNet since it is so short. See my comment on that method", "author": "Nightfirecat", "createdAt": "2020-05-26T05:00:19Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -196,6 +214,22 @@ public void onInteractingChanged(InteractingChanged event)\n \t\t}\n \t}\n \n+\tprivate boolean checkFishOnTiles(NPC fish, Set<WorldPoint> adjacentTiles)", "originalCommit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 6a5f7866f..456164d76 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -214,15 +219,13 @@ public class DriftNetPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate boolean checkFishOnTiles(NPC fish, Set<WorldPoint> adjacentTiles)\n+\tprivate boolean checkFishNextToNet(NPC fish, Collection<DriftNet> nets)\n \t{\n-\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n-\t\treturn adjacentTiles.contains(fishTile);\n-\t}\n-\n-\tprivate boolean checkFishNextToNet(NPC fish, Iterable<DriftNet> nets)\n-\t{\n-\t\treturn Iterables.size(Iterables.filter(nets, net -> checkFishOnTiles(fish, net.getAdjacentTiles()))) > 0;\n+\t\treturn nets.stream().anyMatch(net ->\n+\t\t{\n+\t\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n+\t\t\treturn net.getAdjacentTiles().contains(fishTile);\n+\t\t});\n \t}\n \n \tprivate boolean checkTagExpired(Integer tick)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE1NjUyOA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r430156528", "bodyText": "Per my comment on checkFishNextToNet(), this can become a List instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tIterable<DriftNet> notAcceptingNets = Iterables.filter(NETS, net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish());\n          \n          \n            \n            \t\tList<DriftNet> notAcceptingNets = NETS.stream()\n          \n          \n            \n            \t\t\t.filter(net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish())\n          \n          \n            \n            \t\t\t.collect(Collectors.toList());", "author": "Nightfirecat", "createdAt": "2020-05-26T05:00:57Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,8 +238,15 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal int currentTickCount = client.getTickCount();\n-\t\ttaggedFish.entrySet().removeIf(entry -> entry.getValue() + config.timeoutDelay() < currentTickCount);\n+\t\t// nets that are not accepting fish are those currently not accepting or those who were\n+\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t// even though the net is currently in the CATCHING status)\n+\t\tIterable<DriftNet> notAcceptingNets = Iterables.filter(NETS, net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish());", "originalCommit": "4bf3a56301020cba3a7516a95cd25fff6637a001", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 6a5f7866f..456164d76 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -242,7 +245,9 @@ public class DriftNetPlugin extends Plugin\n \t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n \t\t// to a drift net and is moving to a net that is just being setup it will be denied\n \t\t// even though the net is currently in the CATCHING status)\n-\t\tIterable<DriftNet> notAcceptingNets = Iterables.filter(NETS, net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish());\n+\t\tList<DriftNet> notAcceptingNets = NETS.stream()\n+\t\t\t.filter(net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish())\n+\t\t\t.collect(Collectors.toList());\n \n \t\ttaggedFish.entrySet().removeIf(entry -> checkTagExpired(entry.getValue()) || checkFishNextToNet(entry.getKey(), notAcceptingNets));\n \n"}}, {"oid": "1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "url": "https://github.com/runelite/runelite/commit/1e7bd3f371011afc81b05961a4ddcf6cf9e3dfff", "message": "Drift net plugin: Add option to tag Annette when no drift nets in inventory", "committedDate": "2020-05-28T19:01:35Z", "type": "forcePushed"}, {"oid": "4f56a5825761ebdeb280faf3a3882c927fe2050b", "url": "https://github.com/runelite/runelite/commit/4f56a5825761ebdeb280faf3a3882c927fe2050b", "message": "drift net: Highlight Annette when inventory has no nets", "committedDate": "2020-05-29T05:48:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMTA5OQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r432531099", "bodyText": "This line is a little long, can we break it off somewhere? Also i think we should s/check/is/ in for both of these methods.", "author": "dekvall", "createdAt": "2020-05-29T14:37:56Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,8 +241,17 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal int currentTickCount = client.getTickCount();\n-\t\ttaggedFish.entrySet().removeIf(entry -> entry.getValue() + config.timeoutDelay() < currentTickCount);\n+\t\t// nets that are not accepting fish are those currently not accepting or those who were\n+\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t// even though the net is currently in the CATCHING status)\n+\t\tList<DriftNet> notAcceptingNets = NETS.stream()\n+\t\t\t.filter(net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish())\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\ttaggedFish.entrySet().removeIf(entry -> checkTagExpired(entry.getValue()) || checkFishNextToNet(entry.getKey(), notAcceptingNets));", "originalCommit": "4f56a5825761ebdeb280faf3a3882c927fe2050b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d294afa6b87b4e7547026a7f0498e0cb1df79f2d", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 94c796498..6fb9f5fe2 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -241,15 +238,14 @@ public class DriftNetPlugin extends Plugin\n \t\t\treturn;\n \t\t}\n \n-\t\t// nets that are not accepting fish are those currently not accepting or those who were\n-\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n-\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n-\t\t// even though the net is currently in the CATCHING status)\n-\t\tList<DriftNet> notAcceptingNets = NETS.stream()\n-\t\t\t.filter(net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish())\n+\t\tList<DriftNet> closedNets = NETS.stream()\n+\t\t\t.filter(net -> net.isNotAcceptingFish())\n \t\t\t.collect(Collectors.toList());\n \n-\t\ttaggedFish.entrySet().removeIf(entry -> checkTagExpired(entry.getValue()) || checkFishNextToNet(entry.getKey(), notAcceptingNets));\n+\t\ttaggedFish.entrySet().removeIf(entry ->\n+\t\t\tisTagExpired(entry.getValue()) ||\n+\t\t\tisFishNextToNet(entry.getKey(), closedNets)\n+\t\t);\n \n \t\tNETS.forEach(net -> net.setPrevTickStatus(net.getStatus()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMzc3OA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r432533778", "bodyText": "Since we don't actually care if we were or are accepting fish (.filter(net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish())) maybe we should just combine this into one notAcceptingFish and put the comment here?", "author": "dekvall", "createdAt": "2020-05-29T14:42:07Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java", "diffHunk": "@@ -37,10 +40,23 @@\n \tprivate final int objectId;\n \tprivate final Varbits statusVarbit;\n \tprivate final Varbits countVarbit;\n+\tprivate final Set<WorldPoint> adjacentTiles;\n \n \tprivate GameObject net;\n \tprivate DriftNetStatus status;\n \tprivate int count;\n+\t@Setter\n+\tprivate DriftNetStatus prevTickStatus;\n+\n+\tboolean isNotAcceptingFish()\n+\t{\n+\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n+\t}\n+\n+\tboolean wasNotAcceptingFish()\n+\t{\n+\t\treturn prevTickStatus != DriftNetStatus.CATCH && prevTickStatus != DriftNetStatus.SET;\n+\t}", "originalCommit": "4f56a5825761ebdeb280faf3a3882c927fe2050b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d294afa6b87b4e7547026a7f0498e0cb1df79f2d", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\nindex edf755d2e..10141df12 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNet.java\n\n@@ -48,14 +48,14 @@ class DriftNet\n \t@Setter\n \tprivate DriftNetStatus prevTickStatus;\n \n+\t// nets that are not accepting fish are those currently not accepting or those who were\n+\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n+\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t// even though the net is currently in the CATCHING status)\n \tboolean isNotAcceptingFish()\n \t{\n-\t\treturn status != DriftNetStatus.CATCH && status != DriftNetStatus.SET;\n-\t}\n-\n-\tboolean wasNotAcceptingFish()\n-\t{\n-\t\treturn prevTickStatus != DriftNetStatus.CATCH && prevTickStatus != DriftNetStatus.SET;\n+\t\treturn (status != DriftNetStatus.CATCH && status != DriftNetStatus.SET) ||\n+\t\t\t(prevTickStatus != DriftNetStatus.CATCH && prevTickStatus != DriftNetStatus.SET);\n \t}\n \n \tString getFormattedCountText()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDE0MQ==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r432534141", "bodyText": "I think this can go outside?", "author": "dekvall", "createdAt": "2020-05-29T14:42:40Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -196,6 +219,20 @@ public void onInteractingChanged(InteractingChanged event)\n \t\t}\n \t}\n \n+\tprivate boolean checkFishNextToNet(NPC fish, Collection<DriftNet> nets)\n+\t{\n+\t\treturn nets.stream().anyMatch(net ->\n+\t\t{\n+\t\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());", "originalCommit": "4f56a5825761ebdeb280faf3a3882c927fe2050b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d294afa6b87b4e7547026a7f0498e0cb1df79f2d", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 94c796498..6fb9f5fe2 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -219,16 +219,13 @@ public class DriftNetPlugin extends Plugin\n \t\t}\n \t}\n \n-\tprivate boolean checkFishNextToNet(NPC fish, Collection<DriftNet> nets)\n+\tprivate boolean isFishNextToNet(NPC fish, Collection<DriftNet> nets)\n \t{\n-\t\treturn nets.stream().anyMatch(net ->\n-\t\t{\n-\t\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n-\t\t\treturn net.getAdjacentTiles().contains(fishTile);\n-\t\t});\n+\t\tfinal WorldPoint fishTile = WorldPoint.fromLocalInstance(client, fish.getLocalLocation());\n+\t\treturn nets.stream().anyMatch(net -> net.getAdjacentTiles().contains(fishTile));\n \t}\n \n-\tprivate boolean checkTagExpired(Integer tick)\n+\tprivate boolean isTagExpired(Integer tick)\n \t{\n \t\treturn tick + config.timeoutDelay() < client.getTickCount();\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNjg1MA==", "url": "https://github.com/runelite/runelite/pull/11594#discussion_r432536850", "bodyText": "the notAcceptingNets wording is a little funky since we have *notAcceptingFish which in this case essentially is the same thing in this case, also it sounds like a boolean. Maybe something like closedNets(?) is better", "author": "dekvall", "createdAt": "2020-05-29T14:46:39Z", "path": "runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java", "diffHunk": "@@ -204,8 +241,17 @@ public void onGameTick(GameTick tick)\n \t\t\treturn;\n \t\t}\n \n-\t\tfinal int currentTickCount = client.getTickCount();\n-\t\ttaggedFish.entrySet().removeIf(entry -> entry.getValue() + config.timeoutDelay() < currentTickCount);\n+\t\t// nets that are not accepting fish are those currently not accepting or those who were\n+\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n+\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n+\t\t// even though the net is currently in the CATCHING status)\n+\t\tList<DriftNet> notAcceptingNets = NETS.stream()", "originalCommit": "4f56a5825761ebdeb280faf3a3882c927fe2050b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d294afa6b87b4e7547026a7f0498e0cb1df79f2d", "chunk": "diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\nindex 94c796498..6fb9f5fe2 100644\n--- a/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n+++ b/runelite-client/src/main/java/net/runelite/client/plugins/driftnet/DriftNetPlugin.java\n\n@@ -241,15 +238,14 @@ public class DriftNetPlugin extends Plugin\n \t\t\treturn;\n \t\t}\n \n-\t\t// nets that are not accepting fish are those currently not accepting or those who were\n-\t\t// not accepting in the previous tick (When a fish shoal is 2 tiles adjacent\n-\t\t// to a drift net and is moving to a net that is just being setup it will be denied\n-\t\t// even though the net is currently in the CATCHING status)\n-\t\tList<DriftNet> notAcceptingNets = NETS.stream()\n-\t\t\t.filter(net -> net.isNotAcceptingFish() || net.wasNotAcceptingFish())\n+\t\tList<DriftNet> closedNets = NETS.stream()\n+\t\t\t.filter(net -> net.isNotAcceptingFish())\n \t\t\t.collect(Collectors.toList());\n \n-\t\ttaggedFish.entrySet().removeIf(entry -> checkTagExpired(entry.getValue()) || checkFishNextToNet(entry.getKey(), notAcceptingNets));\n+\t\ttaggedFish.entrySet().removeIf(entry ->\n+\t\t\tisTagExpired(entry.getValue()) ||\n+\t\t\tisFishNextToNet(entry.getKey(), closedNets)\n+\t\t);\n \n \t\tNETS.forEach(net -> net.setPrevTickStatus(net.getStatus()));\n \n"}}, {"oid": "d294afa6b87b4e7547026a7f0498e0cb1df79f2d", "url": "https://github.com/runelite/runelite/commit/d294afa6b87b4e7547026a7f0498e0cb1df79f2d", "message": "Drift net plugin: Add option to tag Annette when no drift nets in inventory", "committedDate": "2020-05-30T08:50:10Z", "type": "forcePushed"}, {"oid": "bed1bfcd79922bb01a475975b52b91a96a9acfea", "url": "https://github.com/runelite/runelite/commit/bed1bfcd79922bb01a475975b52b91a96a9acfea", "message": "driftnet: Hightlight Annette when no nets in inventory", "committedDate": "2020-06-15T07:24:23Z", "type": "commit"}, {"oid": "f975e0415d2b70e6843d57d010d6398f5aece409", "url": "https://github.com/runelite/runelite/commit/f975e0415d2b70e6843d57d010d6398f5aece409", "message": "driftnet: Improve fish shoal highlighting\n\nThis commit increases the default highlight length for fish shoals as\nthey are often active for much longer than 10 ticks, and also untags\nfish shoals more accurately when they are adjacent to nets which cannot\ncatch fish.", "committedDate": "2020-06-15T07:25:14Z", "type": "commit"}, {"oid": "f975e0415d2b70e6843d57d010d6398f5aece409", "url": "https://github.com/runelite/runelite/commit/f975e0415d2b70e6843d57d010d6398f5aece409", "message": "driftnet: Improve fish shoal highlighting\n\nThis commit increases the default highlight length for fish shoals as\nthey are often active for much longer than 10 ticks, and also untags\nfish shoals more accurately when they are adjacent to nets which cannot\ncatch fish.", "committedDate": "2020-06-15T07:25:14Z", "type": "forcePushed"}]}