{"pr_number": 6378, "pr_title": "Fix #6355: DatePicker lazy disabled", "pr_createdAt": "2020-10-01T07:20:13Z", "pr_url": "https://github.com/primefaces/primefaces/pull/6378", "timeline": [{"oid": "7c9eba3cec11f2c608d4944f532a8f1ac7564ee7", "url": "https://github.com/primefaces/primefaces/commit/7c9eba3cec11f2c608d4944f532a8f1ac7564ee7", "message": "Work in progress (switching branch)", "committedDate": "2020-09-28T16:47:36Z", "type": "commit"}, {"oid": "81d7ba033562c1022114f18096655bae2a73a21f", "url": "https://github.com/primefaces/primefaces/commit/81d7ba033562c1022114f18096655bae2a73a21f", "message": "Init disabled dates", "committedDate": "2020-09-29T14:19:29Z", "type": "commit"}, {"oid": "288e6fafbc212b74fe342a176ec1de24d1f05aea", "url": "https://github.com/primefaces/primefaces/commit/288e6fafbc212b74fe342a176ec1de24d1f05aea", "message": "Added Ajax request to date picker view change", "committedDate": "2020-09-30T18:25:48Z", "type": "commit"}, {"oid": "2b6047a1119f1a85b3bee86113f61ba5413711a4", "url": "https://github.com/primefaces/primefaces/commit/2b6047a1119f1a85b3bee86113f61ba5413711a4", "message": "Fixed issue with Ajax request", "committedDate": "2020-09-30T19:09:37Z", "type": "commit"}, {"oid": "563bf99adf03cd53b98d9598e1f95259c9258126", "url": "https://github.com/primefaces/primefaces/commit/563bf99adf03cd53b98d9598e1f95259c9258126", "message": "Added documentation", "committedDate": "2020-10-01T07:19:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzOTE4MA==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498139180", "bodyText": "I thought the JS needed this format. Needs to be replaced.", "author": "jepsar", "createdAt": "2020-10-01T10:22:12Z", "path": "src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java", "diffHunk": "@@ -27,25 +27,83 @@\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.LocalTime;\n+import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n-\n+import java.util.Map;\n+import java.util.Map.Entry;\n import javax.faces.component.UIComponent;\n import javax.faces.context.FacesContext;\n import javax.faces.context.ResponseWriter;\n import javax.faces.convert.ConverterException;\n-\n+import org.json.JSONObject;\n import org.primefaces.component.api.UICalendar;\n import org.primefaces.component.calendar.BaseCalendarRenderer;\n import org.primefaces.expression.SearchExpressionFacade;\n import org.primefaces.expression.SearchExpressionUtils;\n+import org.primefaces.model.datepicker.DateMetaData;\n+import org.primefaces.model.datepicker.DateMetaDataModel;\n+import org.primefaces.model.datepicker.LazyDateMetaDataModel;\n import org.primefaces.util.CalendarUtils;\n import org.primefaces.util.ComponentUtils;\n import org.primefaces.util.WidgetBuilder;\n \n public class DatePickerRenderer extends BaseCalendarRenderer {\n \n+    @Override\n+    public void encodeEnd(FacesContext context, UIComponent component) throws IOException {\n+        DatePicker datePicker = (DatePicker) component;\n+\n+        if (context.getExternalContext().getRequestParameterMap().containsKey(datePicker.getClientId(context))) {\n+            encodeDateMetaData(context, datePicker);\n+        }\n+        else {\n+            super.encodeEnd(context, component);\n+        }\n+    }\n+\n+    protected void encodeDateMetaData(FacesContext context, DatePicker datePicker) throws IOException {\n+        String clientId = datePicker.getClientId(context);\n+        DateMetaDataModel model = datePicker.getModel();\n+        Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n+\n+        if (model instanceof LazyDateMetaDataModel) {\n+            int year = Integer.valueOf(params.get(clientId + \"_year\"));\n+            int month = Integer.valueOf(params.get(clientId + \"_month\")) + 1;\n+\n+            LocalDate startDate = LocalDate.of(year, month, 1);\n+            LocalDate endDate = startDate.plusMonths(datePicker.getNumberOfMonths()).minusDays(1);\n+\n+            LazyDateMetaDataModel lazyModel = ((LazyDateMetaDataModel) model);\n+            lazyModel.clear();\n+            lazyModel.loadDateMetaData(startDate, endDate);\n+        }\n+\n+        encodeDateMetaDataAsJSON(context, datePicker, model);\n+    }\n+\n+    protected void encodeDateMetaDataAsJSON(FacesContext context, DatePicker datePicker, DateMetaDataModel model) throws IOException {\n+        JSONObject jsonDateMetaData = new JSONObject();\n+\n+        if (model != null) {\n+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"M/d/yyyy\");", "originalCommit": "563bf99adf03cd53b98d9598e1f95259c9258126", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "chunk": "diff --git a/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java b/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\nindex 8d448358d..a81912ec5 100644\n--- a/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\n+++ b/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\n\n@@ -27,7 +27,6 @@ import java.io.IOException;\n import java.time.LocalDate;\n import java.time.LocalDateTime;\n import java.time.LocalTime;\n-import java.time.format.DateTimeFormatter;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n"}}, {"oid": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "url": "https://github.com/primefaces/primefaces/commit/dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "message": "Fixed pattern issue", "committedDate": "2020-10-01T10:56:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3MDA5MA==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498170090", "bodyText": "Why not immediately exit here if model == null?", "author": "melloware", "createdAt": "2020-10-01T11:23:05Z", "path": "src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java", "diffHunk": "@@ -30,22 +30,78 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n-\n+import java.util.Map;\n+import java.util.Map.Entry;\n import javax.faces.component.UIComponent;\n import javax.faces.context.FacesContext;\n import javax.faces.context.ResponseWriter;\n import javax.faces.convert.ConverterException;\n-\n+import org.json.JSONObject;\n import org.primefaces.component.api.UICalendar;\n import org.primefaces.component.calendar.BaseCalendarRenderer;\n import org.primefaces.expression.SearchExpressionFacade;\n import org.primefaces.expression.SearchExpressionUtils;\n+import org.primefaces.model.datepicker.DateMetaData;\n+import org.primefaces.model.datepicker.DateMetaDataModel;\n+import org.primefaces.model.datepicker.LazyDateMetaDataModel;\n import org.primefaces.util.CalendarUtils;\n import org.primefaces.util.ComponentUtils;\n import org.primefaces.util.WidgetBuilder;\n \n public class DatePickerRenderer extends BaseCalendarRenderer {\n \n+    @Override\n+    public void encodeEnd(FacesContext context, UIComponent component) throws IOException {\n+        DatePicker datePicker = (DatePicker) component;\n+\n+        if (context.getExternalContext().getRequestParameterMap().containsKey(datePicker.getClientId(context))) {\n+            encodeDateMetaData(context, datePicker);\n+        }\n+        else {\n+            super.encodeEnd(context, component);\n+        }\n+    }\n+\n+    protected void encodeDateMetaData(FacesContext context, DatePicker datePicker) throws IOException {\n+        String clientId = datePicker.getClientId(context);\n+        DateMetaDataModel model = datePicker.getModel();", "originalCommit": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d3c1bd81b28949d70658915c53390dd633c30c8", "chunk": "diff --git a/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java b/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\nindex a81912ec5..3fe1af8c0 100644\n--- a/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\n+++ b/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\n\n@@ -63,11 +63,13 @@ public class DatePickerRenderer extends BaseCalendarRenderer {\n     }\n \n     protected void encodeDateMetaData(FacesContext context, DatePicker datePicker) throws IOException {\n-        String clientId = datePicker.getClientId(context);\n         DateMetaDataModel model = datePicker.getModel();\n-        Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n-\n+        if (model == null) {\n+            return;\n+        }\n         if (model instanceof LazyDateMetaDataModel) {\n+            Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n+            String clientId = datePicker.getClientId(context);\n             int year = Integer.valueOf(params.get(clientId + \"_year\"));\n             int month = Integer.valueOf(params.get(clientId + \"_month\")) + 1;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3MDQ0MA==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498170440", "bodyText": "Rather than checking model != null 2 lines down why not make the first line of this method if (model == null) return; to short circuit this whole method?", "author": "melloware", "createdAt": "2020-10-01T11:23:50Z", "path": "src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java", "diffHunk": "@@ -30,22 +30,78 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n-\n+import java.util.Map;\n+import java.util.Map.Entry;\n import javax.faces.component.UIComponent;\n import javax.faces.context.FacesContext;\n import javax.faces.context.ResponseWriter;\n import javax.faces.convert.ConverterException;\n-\n+import org.json.JSONObject;\n import org.primefaces.component.api.UICalendar;\n import org.primefaces.component.calendar.BaseCalendarRenderer;\n import org.primefaces.expression.SearchExpressionFacade;\n import org.primefaces.expression.SearchExpressionUtils;\n+import org.primefaces.model.datepicker.DateMetaData;\n+import org.primefaces.model.datepicker.DateMetaDataModel;\n+import org.primefaces.model.datepicker.LazyDateMetaDataModel;\n import org.primefaces.util.CalendarUtils;\n import org.primefaces.util.ComponentUtils;\n import org.primefaces.util.WidgetBuilder;\n \n public class DatePickerRenderer extends BaseCalendarRenderer {\n \n+    @Override\n+    public void encodeEnd(FacesContext context, UIComponent component) throws IOException {\n+        DatePicker datePicker = (DatePicker) component;\n+\n+        if (context.getExternalContext().getRequestParameterMap().containsKey(datePicker.getClientId(context))) {\n+            encodeDateMetaData(context, datePicker);\n+        }\n+        else {\n+            super.encodeEnd(context, component);\n+        }\n+    }\n+\n+    protected void encodeDateMetaData(FacesContext context, DatePicker datePicker) throws IOException {\n+        String clientId = datePicker.getClientId(context);\n+        DateMetaDataModel model = datePicker.getModel();\n+        Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n+\n+        if (model instanceof LazyDateMetaDataModel) {\n+            int year = Integer.valueOf(params.get(clientId + \"_year\"));\n+            int month = Integer.valueOf(params.get(clientId + \"_month\")) + 1;\n+\n+            LocalDate startDate = LocalDate.of(year, month, 1);\n+            LocalDate endDate = startDate.plusMonths(datePicker.getNumberOfMonths()).minusDays(1);\n+\n+            LazyDateMetaDataModel lazyModel = ((LazyDateMetaDataModel) model);\n+            lazyModel.clear();\n+            lazyModel.loadDateMetaData(startDate, endDate);\n+        }\n+\n+        encodeDateMetaDataAsJSON(context, datePicker, model);\n+    }\n+\n+    protected void encodeDateMetaDataAsJSON(FacesContext context, DatePicker datePicker, DateMetaDataModel model) throws IOException {\n+        JSONObject jsonDateMetaData = new JSONObject();", "originalCommit": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d3c1bd81b28949d70658915c53390dd633c30c8", "chunk": "diff --git a/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java b/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\nindex a81912ec5..3fe1af8c0 100644\n--- a/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\n+++ b/src/main/java/org/primefaces/component/datepicker/DatePickerRenderer.java\n\n@@ -63,11 +63,13 @@ public class DatePickerRenderer extends BaseCalendarRenderer {\n     }\n \n     protected void encodeDateMetaData(FacesContext context, DatePicker datePicker) throws IOException {\n-        String clientId = datePicker.getClientId(context);\n         DateMetaDataModel model = datePicker.getModel();\n-        Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n-\n+        if (model == null) {\n+            return;\n+        }\n         if (model instanceof LazyDateMetaDataModel) {\n+            Map<String, String> params = context.getExternalContext().getRequestParameterMap();\n+            String clientId = datePicker.getClientId(context);\n             int year = Integer.valueOf(params.get(clientId + \"_year\"));\n             int month = Integer.valueOf(params.get(clientId + \"_month\")) + 1;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3MDUxOA==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498170518", "bodyText": "TODO?", "author": "melloware", "createdAt": "2020-10-01T11:24:03Z", "path": "src/main/java/org/primefaces/model/datepicker/DateMetaData.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.model.datepicker;\n+\n+public interface DateMetaData {\n+\n+    public boolean isDisabled();\n+\n+    // TODO add styleClass in new PR", "originalCommit": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d3c1bd81b28949d70658915c53390dd633c30c8", "chunk": "diff --git a/src/main/java/org/primefaces/model/datepicker/DateMetaData.java b/src/main/java/org/primefaces/model/datepicker/DateMetaData.java\nindex c734cc8ec..91024051a 100644\n--- a/src/main/java/org/primefaces/model/datepicker/DateMetaData.java\n+++ b/src/main/java/org/primefaces/model/datepicker/DateMetaData.java\n\n@@ -27,6 +27,4 @@ public interface DateMetaData {\n \n     public boolean isDisabled();\n \n-    // TODO add styleClass in new PR\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3MTM1Nw==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498171357", "bodyText": "Missing private static final long serialVersionUID = 1L;", "author": "melloware", "createdAt": "2020-10-01T11:25:41Z", "path": "src/main/java/org/primefaces/model/datepicker/DefaultDateMetaDataModel.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.model.datepicker;\n+\n+import java.io.Serializable;\n+import java.time.LocalDate;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DefaultDateMetaDataModel implements DateMetaDataModel, Serializable {\n+", "originalCommit": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d3c1bd81b28949d70658915c53390dd633c30c8", "chunk": "diff --git a/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaDataModel.java b/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaDataModel.java\nindex 9abdd027f..92dcc4921 100644\n--- a/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaDataModel.java\n+++ b/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaDataModel.java\n\n@@ -30,6 +30,8 @@ import java.util.Map;\n \n public class DefaultDateMetaDataModel implements DateMetaDataModel, Serializable {\n \n+    private static final long serialVersionUID = 1L;\n+\n     private final Map<LocalDate, DateMetaData> dateMetaData;\n \n     public DefaultDateMetaDataModel() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3MTQ2MA==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498171460", "bodyText": "Missing private static final long serialVersionUID = 1L;", "author": "melloware", "createdAt": "2020-10-01T11:25:55Z", "path": "src/main/java/org/primefaces/model/datepicker/DefaultDateMetaData.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.model.datepicker;\n+\n+import java.io.Serializable;\n+\n+public class DefaultDateMetaData implements DateMetaData, Serializable {\n+", "originalCommit": "dc0c5b5efdfdc5aae00974520ac4c58a95ae7b76", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d3c1bd81b28949d70658915c53390dd633c30c8", "chunk": "diff --git a/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaData.java b/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaData.java\nindex 38006f0c3..51c9ee1cb 100644\n--- a/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaData.java\n+++ b/src/main/java/org/primefaces/model/datepicker/DefaultDateMetaData.java\n\n@@ -27,6 +27,8 @@ import java.io.Serializable;\n \n public class DefaultDateMetaData implements DateMetaData, Serializable {\n \n+    private static final long serialVersionUID = 1L;\n+\n     private boolean disabled;\n \n     public DefaultDateMetaData() {\n"}}, {"oid": "4d3c1bd81b28949d70658915c53390dd633c30c8", "url": "https://github.com/primefaces/primefaces/commit/4d3c1bd81b28949d70658915c53390dd633c30c8", "message": "Review remarks", "committedDate": "2020-10-01T13:33:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI1MjExMg==", "url": "https://github.com/primefaces/primefaces/pull/6378#discussion_r498252112", "bodyText": "dont think you need public on this interface method.", "author": "melloware", "createdAt": "2020-10-01T13:40:10Z", "path": "src/main/java/org/primefaces/model/datepicker/DateMetaData.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2009-2020 PrimeTek\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.primefaces.model.datepicker;\n+\n+public interface DateMetaData {\n+\n+    public boolean isDisabled();", "originalCommit": "4d3c1bd81b28949d70658915c53390dd633c30c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "584c990665f69d2ed7717aaedf9d518824c537a1", "chunk": "diff --git a/src/main/java/org/primefaces/model/datepicker/DateMetaData.java b/src/main/java/org/primefaces/model/datepicker/DateMetaData.java\nindex 91024051a..efd081e57 100644\n--- a/src/main/java/org/primefaces/model/datepicker/DateMetaData.java\n+++ b/src/main/java/org/primefaces/model/datepicker/DateMetaData.java\n\n@@ -25,6 +25,6 @@ package org.primefaces.model.datepicker;\n \n public interface DateMetaData {\n \n-    public boolean isDisabled();\n+    boolean isDisabled();\n \n }\n"}}, {"oid": "584c990665f69d2ed7717aaedf9d518824c537a1", "url": "https://github.com/primefaces/primefaces/commit/584c990665f69d2ed7717aaedf9d518824c537a1", "message": "Removed public", "committedDate": "2020-10-01T13:46:36Z", "type": "commit"}]}