{"pr_number": 860, "pr_title": "Add the provider config ID to ProviderMessageContent.", "pr_createdAt": "2020-02-19T16:30:39Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/860", "timeline": [{"oid": "725f670a6797ef65202c2ee1b38585fe4fb96060", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/725f670a6797ef65202c2ee1b38585fe4fb96060", "message": "feat(provider): Add the provider config ID to ProviderMessageContent.", "committedDate": "2020-02-19T16:16:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MTk3Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381391976", "bodyText": "This is the actual change here the rest are to remove finals.", "author": "psantos1113", "createdAt": "2020-02-19T16:32:15Z", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/event/EventManagerTest.java", "diffHunk": "@@ -20,36 +20,36 @@\n \n     @Test\n     public void testSendEvents() throws Exception {\n-        final JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n-        final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n+        JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n+        ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n         Mockito.doNothing().when(jmsTemplate).convertAndSend(Mockito.anyString(), Mockito.any(Object.class));\n-        final EventManager eventManager = new EventManager(contentConverter, jmsTemplate);\n+        EventManager eventManager = new EventManager(contentConverter, jmsTemplate);\n \n-        final LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n-        final ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"provider\")\n+        LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n+        ProviderMessageContent content = new ProviderMessageContent.Builder()\n+                                                   .applyProvider(\"provider\", 1L)\n                                                    .applyTopic(\"testTopic\", \"topic\")\n                                                    .applySubTopic(subTopic.getName(), subTopic.getValue())\n                                                    .build();\n-        final FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n-        final DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n+        FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n+        DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n             MessageContentGroup.singleton(content), fieldAccessor);\n         eventManager.sendEvents(List.of(event));\n     }\n \n     @Test\n     public void testNotAbstractChannelEvent() throws Exception {\n-        final JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n-        final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n+        JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n+        ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n         Mockito.doNothing().when(jmsTemplate).convertAndSend(Mockito.anyString(), Mockito.any(Object.class));\n-        final EventManager eventManager = new EventManager(contentConverter, jmsTemplate);\n-        final LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n-        final ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"provider\")\n+        EventManager eventManager = new EventManager(contentConverter, jmsTemplate);\n+        LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n+        ProviderMessageContent content = new ProviderMessageContent.Builder()\n+                                                   .applyProvider(\"provider\", 1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/alert-common/src/test/java/com/synopsys/integration/alert/common/event/EventManagerTest.java b/alert-common/src/test/java/com/synopsys/integration/alert/common/event/EventManagerTest.java\nindex 3f78f735e..e64b6c7b9 100644\n--- a/alert-common/src/test/java/com/synopsys/integration/alert/common/event/EventManagerTest.java\n+++ b/alert-common/src/test/java/com/synopsys/integration/alert/common/event/EventManagerTest.java\n\n@@ -27,10 +27,10 @@ public class EventManagerTest {\n \n         LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n         ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"provider\", 1L)\n-                                                   .applyTopic(\"testTopic\", \"topic\")\n-                                                   .applySubTopic(subTopic.getName(), subTopic.getValue())\n-                                                   .build();\n+                                             .applyProvider(\"provider\", 1L, \"providerConfig\")\n+                                             .applyTopic(\"testTopic\", \"topic\")\n+                                             .applySubTopic(subTopic.getName(), subTopic.getValue())\n+                                             .build();\n         FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n         DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n             MessageContentGroup.singleton(content), fieldAccessor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MjgxNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381392816", "bodyText": "actual change here.", "author": "psantos1113", "createdAt": "2020-02-19T16:33:30Z", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/workflow/processor/ProcessorTest.java", "diffHunk": "@@ -26,9 +26,9 @@ public ComponentItem createComponentItem(String component, String componentValue\n         return componentBuilder.build();\n     }\n \n-    public ProviderMessageContent createProviderMessageContent(final String name, final String value, final ComponentItem... componentItems) throws AlertException {\n+    public ProviderMessageContent createProviderMessageContent(String name, String value, ComponentItem... componentItems) throws AlertException {\n         ProviderMessageContent.Builder builder = new ProviderMessageContent.Builder()\n-                                                     .applyProvider(\"Black Duck\")\n+                                                     .applyProvider(\"Black Duck\", 1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/alert-common/src/test/java/com/synopsys/integration/alert/common/workflow/processor/ProcessorTest.java b/alert-common/src/test/java/com/synopsys/integration/alert/common/workflow/processor/ProcessorTest.java\nindex 46babcba4..360a68e26 100644\n--- a/alert-common/src/test/java/com/synopsys/integration/alert/common/workflow/processor/ProcessorTest.java\n+++ b/alert-common/src/test/java/com/synopsys/integration/alert/common/workflow/processor/ProcessorTest.java\n\n@@ -28,7 +28,7 @@ public abstract class ProcessorTest {\n \n     public ProviderMessageContent createProviderMessageContent(String name, String value, ComponentItem... componentItems) throws AlertException {\n         ProviderMessageContent.Builder builder = new ProviderMessageContent.Builder()\n-                                                     .applyProvider(\"Black Duck\", 1L)\n+                                                     .applyProvider(\"Black Duck\", 1L, \"providerConfig\")\n                                                      .applyTopic(name, value);\n         for (ComponentItem componentItem : componentItems) {\n             builder.applyComponentItem(componentItem);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5MzQ1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381393455", "bodyText": "change to add a config ID.", "author": "psantos1113", "createdAt": "2020-02-19T16:34:20Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/AuditEntryAccessorTest.java", "diffHunk": "@@ -115,57 +115,57 @@ public void setAuditEntryFailureTest() {\n     }\n \n     public ProviderMessageContent createMessageContent() throws AlertException {\n-        final LinkableItem linkableItem1 = new LinkableItem(\"First Linkable Item\", \"Value 1\", \"https://google.com\");\n-        final LinkableItem linkableItem2 = new LinkableItem(\"Second Linkable Item\", \"Value 2\", \"https://google.com\");\n+        LinkableItem linkableItem1 = new LinkableItem(\"First Linkable Item\", \"Value 1\", \"https://google.com\");\n+        LinkableItem linkableItem2 = new LinkableItem(\"Second Linkable Item\", \"Value 2\", \"https://google.com\");\n \n         final String nameKey = \"Same Key\";\n-        final LinkableItem linkableItem3 = new LinkableItem(nameKey, \"Value\", \"https://google.com\");\n-        final LinkableItem linkableItem4 = new LinkableItem(nameKey, \"No Link Value\");\n-        final LinkableItem linkableItem5 = new LinkableItem(nameKey, \"Other Value\", \"https://google.com\");\n+        LinkableItem linkableItem3 = new LinkableItem(nameKey, \"Value\", \"https://google.com\");\n+        LinkableItem linkableItem4 = new LinkableItem(nameKey, \"No Link Value\");\n+        LinkableItem linkableItem5 = new LinkableItem(nameKey, \"Other Value\", \"https://google.com\");\n \n         final String category = \"category\";\n \n-        final ComponentItem componentItem_1 = new ComponentItem.Builder()\n-                                                  .applyCategory(category)\n-                                                  .applyOperation(ItemOperation.ADD)\n-                                                  .applyComponentData(\"component\", \"component_1\")\n-                                                  .applyCategoryItem(\"category item\", \"category_item_1\")\n-                                                  .applyNotificationId(1L)\n-                                                  .applyComponentAttribute(linkableItem1)\n-                                                  .applyComponentAttribute(linkableItem2)\n-                                                  .build();\n-        final ComponentItem componentItem_2 = new ComponentItem.Builder()\n-                                                  .applyCategory(category)\n-                                                  .applyOperation(ItemOperation.UPDATE)\n-                                                  .applyNotificationId(2L)\n-                                                  .applyComponentData(\"component\", \"component_2\")\n-                                                  .applyCategoryItem(\"category item\", \"category_item_2\")\n-                                                  .applyComponentAttribute(linkableItem2)\n-                                                  .build();\n-        final ComponentItem componentItem_3 = new ComponentItem.Builder()\n-                                                  .applyCategory(category)\n-                                                  .applyOperation(ItemOperation.DELETE)\n-                                                  .applyNotificationId(1L)\n-                                                  .applyComponentData(\"component\", \"component_1\")\n-                                                  .applyCategoryItem(\"category item\", \"category_item_1\")\n-                                                  .applyComponentAttribute(linkableItem3)\n-                                                  .applyComponentAttribute(linkableItem4)\n-                                                  .applyComponentAttribute(linkableItem5)\n-                                                  .build();\n-\n-        final LinkableItem subTopic = new LinkableItem(\"Sub Topic\", \"Sub Topic Value\", \"https://google.com\");\n+        ComponentItem componentItem_1 = new ComponentItem.Builder()\n+                                            .applyCategory(category)\n+                                            .applyOperation(ItemOperation.ADD)\n+                                            .applyComponentData(\"component\", \"component_1\")\n+                                            .applyCategoryItem(\"category item\", \"category_item_1\")\n+                                            .applyNotificationId(1L)\n+                                            .applyComponentAttribute(linkableItem1)\n+                                            .applyComponentAttribute(linkableItem2)\n+                                            .build();\n+        ComponentItem componentItem_2 = new ComponentItem.Builder()\n+                                            .applyCategory(category)\n+                                            .applyOperation(ItemOperation.UPDATE)\n+                                            .applyNotificationId(2L)\n+                                            .applyComponentData(\"component\", \"component_2\")\n+                                            .applyCategoryItem(\"category item\", \"category_item_2\")\n+                                            .applyComponentAttribute(linkableItem2)\n+                                            .build();\n+        ComponentItem componentItem_3 = new ComponentItem.Builder()\n+                                            .applyCategory(category)\n+                                            .applyOperation(ItemOperation.DELETE)\n+                                            .applyNotificationId(1L)\n+                                            .applyComponentData(\"component\", \"component_1\")\n+                                            .applyCategoryItem(\"category item\", \"category_item_1\")\n+                                            .applyComponentAttribute(linkableItem3)\n+                                            .applyComponentAttribute(linkableItem4)\n+                                            .applyComponentAttribute(linkableItem5)\n+                                            .build();\n+\n+        LinkableItem subTopic = new LinkableItem(\"Sub Topic\", \"Sub Topic Value\", \"https://google.com\");\n \n         return new ProviderMessageContent.Builder()\n-                   .applyProvider(\"provider\")\n+                   .applyProvider(\"provider\", 1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/alert-database/src/test/java/com/synopsys/integration/alert/database/api/AuditEntryAccessorTest.java b/alert-database/src/test/java/com/synopsys/integration/alert/database/api/AuditEntryAccessorTest.java\nindex c7f36cad1..043352bb4 100644\n--- a/alert-database/src/test/java/com/synopsys/integration/alert/database/api/AuditEntryAccessorTest.java\n+++ b/alert-database/src/test/java/com/synopsys/integration/alert/database/api/AuditEntryAccessorTest.java\n\n@@ -156,7 +156,7 @@ public class AuditEntryAccessorTest {\n         LinkableItem subTopic = new LinkableItem(\"Sub Topic\", \"Sub Topic Value\", \"https://google.com\");\n \n         return new ProviderMessageContent.Builder()\n-                   .applyProvider(\"provider\", 1L)\n+                   .applyProvider(\"provider\", 1L, \"providerConfig\")\n                    .applyTopic(\"Topic\", \"audit utility test\", \"https://google.com\")\n                    .applySubTopic(subTopic.getName(), subTopic.getValue(), subTopic.getUrl().orElse(null))\n                    .applyAllComponentItems(List.of(componentItem_1, componentItem_2, componentItem_3))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5NDQ0NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381394445", "bodyText": "actual change", "author": "psantos1113", "createdAt": "2020-02-19T16:35:45Z", "path": "src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java", "diffHunk": "@@ -25,38 +25,38 @@\n \n     @Test\n     public void testSendEvents() throws Exception {\n-        final AuditUtility auditUtility = Mockito.mock(AuditUtility.class);\n-        final JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n-        final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n+        AuditUtility auditUtility = Mockito.mock(AuditUtility.class);\n+        JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n+        ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n         Mockito.doNothing().when(jmsTemplate).convertAndSend(Mockito.anyString(), Mockito.any(Object.class));\n-        final ChannelEventManager eventManager = new ChannelEventManager(contentConverter, jmsTemplate, auditUtility);\n+        ChannelEventManager eventManager = new ChannelEventManager(contentConverter, jmsTemplate, auditUtility);\n \n-        final LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n-        final ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\")\n+        LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n+        ProviderMessageContent content = new ProviderMessageContent.Builder()\n+                                                   .applyProvider(\"testProvider\", 1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java b/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java\nindex e650d9a95..e2300a4a1 100644\n--- a/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java\n+++ b/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java\n\n@@ -33,10 +33,10 @@ public class ChannelEventManagerTest {\n \n         LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n         ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\", 1L)\n-                                                   .applyTopic(\"testTopic\", \"topic\")\n-                                                   .applySubTopic(subTopic.getName(), subTopic.getValue())\n-                                                   .build();\n+                                             .applyProvider(\"testProvider\", 1L, \"testProviderConfig\")\n+                                             .applyTopic(\"testTopic\", \"topic\")\n+                                             .applySubTopic(subTopic.getName(), subTopic.getValue())\n+                                             .build();\n         FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n         DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n             MessageContentGroup.singleton(content), fieldAccessor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5NDY0OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381394648", "bodyText": "actual change", "author": "psantos1113", "createdAt": "2020-02-19T16:36:04Z", "path": "src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java", "diffHunk": "@@ -25,38 +25,38 @@\n \n     @Test\n     public void testSendEvents() throws Exception {\n-        final AuditUtility auditUtility = Mockito.mock(AuditUtility.class);\n-        final JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n-        final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n+        AuditUtility auditUtility = Mockito.mock(AuditUtility.class);\n+        JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n+        ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n         Mockito.doNothing().when(jmsTemplate).convertAndSend(Mockito.anyString(), Mockito.any(Object.class));\n-        final ChannelEventManager eventManager = new ChannelEventManager(contentConverter, jmsTemplate, auditUtility);\n+        ChannelEventManager eventManager = new ChannelEventManager(contentConverter, jmsTemplate, auditUtility);\n \n-        final LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n-        final ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\")\n+        LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n+        ProviderMessageContent content = new ProviderMessageContent.Builder()\n+                                                   .applyProvider(\"testProvider\", 1L)\n                                                    .applyTopic(\"testTopic\", \"topic\")\n                                                    .applySubTopic(subTopic.getName(), subTopic.getValue())\n                                                    .build();\n-        final FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n-        final DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n+        FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n+        DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n             MessageContentGroup.singleton(content), fieldAccessor);\n         eventManager.sendEvents(List.of(event));\n     }\n \n     @Test\n     public void testNotAbstractChannelEvent() throws Exception {\n-        final AuditUtility auditUtility = Mockito.mock(AuditUtility.class);\n-        final JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n-        final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n+        AuditUtility auditUtility = Mockito.mock(AuditUtility.class);\n+        JmsTemplate jmsTemplate = Mockito.mock(JmsTemplate.class);\n+        ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n         Mockito.doNothing().when(jmsTemplate).convertAndSend(Mockito.anyString(), Mockito.any(Object.class));\n-        final ChannelEventManager eventManager = new ChannelEventManager(contentConverter, jmsTemplate, auditUtility);\n-        final LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n-        final ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\")\n+        ChannelEventManager eventManager = new ChannelEventManager(contentConverter, jmsTemplate, auditUtility);\n+        LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n+        ProviderMessageContent content = new ProviderMessageContent.Builder()\n+                                                   .applyProvider(\"testProvider\", 1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java b/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java\nindex e650d9a95..e2300a4a1 100644\n--- a/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java\n+++ b/src/test/java/com/synopsys/integration/alert/channel/util/event/ChannelEventManagerTest.java\n\n@@ -33,10 +33,10 @@ public class ChannelEventManagerTest {\n \n         LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic\", null);\n         ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\", 1L)\n-                                                   .applyTopic(\"testTopic\", \"topic\")\n-                                                   .applySubTopic(subTopic.getName(), subTopic.getValue())\n-                                                   .build();\n+                                             .applyProvider(\"testProvider\", 1L, \"testProviderConfig\")\n+                                             .applyTopic(\"testTopic\", \"topic\")\n+                                             .applySubTopic(subTopic.getName(), subTopic.getValue())\n+                                             .build();\n         FieldAccessor fieldAccessor = new FieldAccessor(Map.of());\n         DistributionEvent event = new DistributionEvent(UUID.randomUUID().toString(), \"destination\", RestConstants.formatDate(new Date()), \"provider\", \"FORMAT\",\n             MessageContentGroup.singleton(content), fieldAccessor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM5NDgyMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381394820", "bodyText": "actual change", "author": "psantos1113", "createdAt": "2020-02-19T16:36:19Z", "path": "src/test/java/com/synopsys/integration/alert/common/event/ContentEventTest.java", "diffHunk": "@@ -15,26 +15,26 @@\n \n     @Test\n     public void getCreatedAtDateTest() {\n-        final ContentEvent event = new ContentEvent(TOPIC, CREATED_AT, PROVIDER, null, null);\n+        ContentEvent event = new ContentEvent(TOPIC, CREATED_AT, PROVIDER, null, null);\n         assertEquals(CREATED_AT, event.getCreatedAt());\n     }\n \n     @Test\n     public void getProviderTest() {\n-        final ContentEvent event = new ContentEvent(TOPIC, CREATED_AT, PROVIDER, null, null);\n+        ContentEvent event = new ContentEvent(TOPIC, CREATED_AT, PROVIDER, null, null);\n         assertEquals(PROVIDER, event.getProvider());\n     }\n \n     @Test\n     public void getContentTest() throws Exception {\n-        final LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic \", null);\n-        final ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\")\n+        LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic \", null);\n+        ProviderMessageContent content = new ProviderMessageContent.Builder()\n+                                                   .applyProvider(\"testProvider\", 1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/src/test/java/com/synopsys/integration/alert/common/event/ContentEventTest.java b/src/test/java/com/synopsys/integration/alert/common/event/ContentEventTest.java\nindex 36d1f872b..c0146e979 100644\n--- a/src/test/java/com/synopsys/integration/alert/common/event/ContentEventTest.java\n+++ b/src/test/java/com/synopsys/integration/alert/common/event/ContentEventTest.java\n\n@@ -29,10 +29,10 @@ public class ContentEventTest {\n     public void getContentTest() throws Exception {\n         LinkableItem subTopic = new LinkableItem(\"subTopic\", \"sub topic \", null);\n         ProviderMessageContent content = new ProviderMessageContent.Builder()\n-                                                   .applyProvider(\"testProvider\", 1L)\n-                                                   .applyTopic(\"testTopic\", \"topic\")\n-                                                   .applySubTopic(subTopic.getName(), subTopic.getValue())\n-                                                   .build();\n+                                             .applyProvider(\"testProvider\", 1L, \"testProviderConfig\")\n+                                             .applyTopic(\"testTopic\", \"topic\")\n+                                             .applySubTopic(subTopic.getName(), subTopic.getValue())\n+                                             .build();\n         MessageContentGroup contentGroup = MessageContentGroup.singleton(content);\n         ContentEvent event = new ContentEvent(TOPIC, CREATED_AT, PROVIDER, null, contentGroup);\n         assertEquals(contentGroup, event.getContent());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMDcwOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381400708", "bodyText": "Since we are passing in the providerConfigId to all of these Builders, would it make more sense to pass in a ProviderMessageContent.Builder() instead with all of the common parts already filled in. Then use that as the base of all the individual ProviderMessageContent.Builder's we create?", "author": "jamesrichard91", "createdAt": "2020-02-19T16:44:53Z", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/policy/PolicyViolationMessageBuilder.java", "diffHunk": "@@ -88,7 +88,7 @@ public String getNotificationType() {\n     }\n \n     @Override\n-    public List<ProviderMessageContent> buildMessageContents(Long notificationId, Date providerCreationDate, ConfigurationJobModel job, RuleViolationNotificationView notificationView,\n+    public List<ProviderMessageContent> buildMessageContents(Long notificationId, Long providerConfigId, Date providerCreationDate, ConfigurationJobModel job, RuleViolationNotificationView notificationView,", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzODIxMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381438212", "bodyText": "This should still be the method that calls the build() method if we do go that route.", "author": "gkillough", "createdAt": "2020-02-19T17:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQwMDcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "6f94569f859f3bdad55d32be4c65e6fab1256402", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/policy/PolicyViolationMessageBuilder.java b/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/policy/PolicyViolationMessageBuilder.java\nindex ecb5c01fa..3dfb665a6 100644\n--- a/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/policy/PolicyViolationMessageBuilder.java\n+++ b/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/policy/PolicyViolationMessageBuilder.java\n\n@@ -88,7 +87,7 @@ public class PolicyViolationMessageBuilder implements BlackDuckMessageBuilder<Ru\n     }\n \n     @Override\n-    public List<ProviderMessageContent> buildMessageContents(Long notificationId, Long providerConfigId, Date providerCreationDate, ConfigurationJobModel job, RuleViolationNotificationView notificationView,\n+    public List<ProviderMessageContent> buildMessageContents(CommonMessageData commonMessageData, RuleViolationNotificationView notificationView,\n         BlackDuckBucket blackDuckBucket, BlackDuckServicesFactory blackDuckServicesFactory) {\n         long timeout = blackDuckServicesFactory.getBlackDuckHttpClient().getTimeoutInSeconds();\n         BlackDuckBucketService bucketService = blackDuckServicesFactory.createBlackDuckBucketService();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjQwMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381436403", "bodyText": "We should be able to get a real value for this at this point.", "author": "gkillough", "createdAt": "2020-02-19T17:42:23Z", "path": "src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailGlobalTestAction.java", "diffHunk": "@@ -76,7 +76,7 @@ public MessageResult testConfig(String configId, String destination, FieldAccess\n                                                      .applyNotificationId(1L);\n \n         ProviderMessageContent.Builder builder = new ProviderMessageContent.Builder()\n-                                                     .applyProvider(\"Test Provider\")\n+                                                     .applyProvider(\"Test Provider\", -1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNDAzOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381504038", "bodyText": "This is the Global configuration of the email so we don't want any provider specific data to test the email channel's global configuration.", "author": "psantos1113", "createdAt": "2020-02-19T19:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailGlobalTestAction.java b/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailGlobalTestAction.java\nindex dd148eff2..273dc5357 100644\n--- a/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailGlobalTestAction.java\n+++ b/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailGlobalTestAction.java\n\n@@ -76,7 +76,7 @@ public class EmailGlobalTestAction extends TestAction {\n                                                      .applyNotificationId(1L);\n \n         ProviderMessageContent.Builder builder = new ProviderMessageContent.Builder()\n-                                                     .applyProvider(\"Test Provider\", -1L)\n+                                                     .applyProvider(\"Test Provider\", -1L, \"Test Provider Config\")\n                                                      .applyTopic(\"Message Content\", \"Test from Alert\")\n                                                      .applyAllComponentItems(List.of(componentBuilder.build()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjU5OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381436598", "bodyText": "We should be able to get a real value for this at this point.", "author": "gkillough", "createdAt": "2020-02-19T17:42:40Z", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java", "diffHunk": "@@ -96,7 +96,7 @@ public IssueTrackerRequest createRequest(IssueOperation operation, String messag\n \n     private ProviderMessageContent createTestNotificationContent(ItemOperation operation, String messageId, String customTopic, String customMessage) throws AlertException {\n         return new ProviderMessageContent.Builder()\n-                   .applyProvider(\"Alert\")\n+                   .applyProvider(\"Alert\", -1L)", "originalCommit": "725f670a6797ef65202c2ee1b38585fe4fb96060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwMzI5NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/860#discussion_r381503295", "bodyText": "This is just creating a test Issue for Jira.  We aren't using any provider specific data at this point to create a test issue.", "author": "psantos1113", "createdAt": "2020-02-19T19:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNjU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0dfdece03366a42319c788386a59024fb1175fcd", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java b/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java\nindex 473b34d2f..df7a82314 100644\n--- a/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java\n+++ b/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java\n\n@@ -96,7 +96,7 @@ public class JiraTestIssueRequestCreator implements TestIssueRequestCreator {\n \n     private ProviderMessageContent createTestNotificationContent(ItemOperation operation, String messageId, String customTopic, String customMessage) throws AlertException {\n         return new ProviderMessageContent.Builder()\n-                   .applyProvider(\"Alert\", -1L)\n+                   .applyProvider(\"Alert\", -1L, \"Test\")\n                    .applyTopic(\"Test Topic\", customTopic)\n                    .applySubTopic(\"Test SubTopic\", \"Test message sent by Alert\")\n                    .applyComponentItem(createTestComponentItem(operation, messageId, customMessage))\n"}}, {"oid": "6f94569f859f3bdad55d32be4c65e6fab1256402", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/6f94569f859f3bdad55d32be4c65e6fab1256402", "message": "refactor: Encapsulate method arguments into a class for the builder to use.", "committedDate": "2020-02-19T19:30:13Z", "type": "commit"}, {"oid": "0dfdece03366a42319c788386a59024fb1175fcd", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0dfdece03366a42319c788386a59024fb1175fcd", "message": "refactor: Add the provider config ID to the content key.", "committedDate": "2020-02-19T20:35:08Z", "type": "commit"}, {"oid": "f6516be6d22a5f54731432b9a73350aa05641c35", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f6516be6d22a5f54731432b9a73350aa05641c35", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_message_content", "committedDate": "2020-02-20T13:25:11Z", "type": "commit"}, {"oid": "90c83f3ff2cba9f4ff4576d288e26ae689e07e41", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/90c83f3ff2cba9f4ff4576d288e26ae689e07e41", "message": "fix(messages): Fix the message combiner to apply the correct provider parameters.", "committedDate": "2020-02-20T14:16:57Z", "type": "commit"}, {"oid": "7a47255ce77164ca18084ac79d65aaf6b1acbea0", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7a47255ce77164ca18084ac79d65aaf6b1acbea0", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_message_content", "committedDate": "2020-02-20T14:36:29Z", "type": "commit"}]}