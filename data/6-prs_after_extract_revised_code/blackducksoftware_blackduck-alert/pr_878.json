{"pr_number": 878, "pr_title": "provider config select", "pr_createdAt": "2020-02-26T13:46:15Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/878", "timeline": [{"oid": "ea748b633efd174868154c1e36ddd195f8717f4f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ea748b633efd174868154c1e36ddd195f8717f4f", "message": "feat: Select provider config in distribution.", "committedDate": "2020-02-24T20:55:57Z", "type": "commit"}, {"oid": "17e1be3325bcb7d8ea8e7a3a14b15b7841e66e28", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/17e1be3325bcb7d8ea8e7a3a14b15b7841e66e28", "message": "fix: Check if config id is set.", "committedDate": "2020-02-24T21:11:11Z", "type": "commit"}, {"oid": "5ee527d48b1195cd686a237bbddae2afb28e9e9b", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5ee527d48b1195cd686a237bbddae2afb28e9e9b", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_config_select", "committedDate": "2020-02-24T21:31:07Z", "type": "commit"}, {"oid": "68a9bbd2c737d30c0789326b31c30ceb6c4de1fe", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/68a9bbd2c737d30c0789326b31c30ceb6c4de1fe", "message": "feat: Select provider config in Job.", "committedDate": "2020-02-25T12:05:12Z", "type": "commit"}, {"oid": "24101e2c8b810f222a59eacb1eea9d431447fd7d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/24101e2c8b810f222a59eacb1eea9d431447fd7d", "message": "feat: Include config name for project selection.", "committedDate": "2020-02-25T12:45:47Z", "type": "commit"}, {"oid": "5e35ac39bd83b7644d9c7bb64e0d461007910bb6", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5e35ac39bd83b7644d9c7bb64e0d461007910bb6", "message": "fix: Find the provider config with Global context.", "committedDate": "2020-02-25T18:34:05Z", "type": "commit"}, {"oid": "f2779f95438cf6baec216102d6fab7822766ef33", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f2779f95438cf6baec216102d6fab7822766ef33", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_config_select", "committedDate": "2020-02-25T18:34:52Z", "type": "commit"}, {"oid": "0726a3d322a80267b850306c28691dc37bf82835", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0726a3d322a80267b850306c28691dc37bf82835", "message": "test: Fix the test with the save actions.", "committedDate": "2020-02-25T21:09:07Z", "type": "commit"}, {"oid": "5b55c1a9747037e66f30c5b06e62d0083b4c1bac", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5b55c1a9747037e66f30c5b06e62d0083b4c1bac", "message": "feat: Create content collector factory.", "committedDate": "2020-02-26T01:58:27Z", "type": "commit"}, {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "message": "feat: Lookup emails based on provider config name.", "committedDate": "2020-02-26T13:42:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNjU0Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384506543", "bodyText": "providerConfigNameField", "author": "gkillough", "createdAt": "2020-02-26T13:56:49Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java", "diffHunk": "@@ -75,12 +76,9 @@ public ProviderDistributionUIConfig(String label, String urlName, ProviderConten\n \n     @Override\n     public List<ConfigField> createFields() {\n-        // TODO extract label and description\n-        // FIXME add endpoint\n-        ConfigField providerConfigName = new EndpointSelectField(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME, \"Provider Config Name\", \"The name of the provider configuration to use for this distribution job.\")\n-                                             .applyClearable(false)\n-                                             .applyRequired(true);\n-\n+        ConfigField providerConfigField = new EndpointSelectField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, ProviderDescriptor.LABEL_PROVIDER_CONFIG_NAME, ProviderDescriptor.DESCRIPTION_PROVIDER_CONFIG_NAME)", "originalCommit": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NTMyNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384765324", "bodyText": "done", "author": "psantos1113", "createdAt": "2020-02-26T21:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNjU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0baef67e0868cceb8eb15e1f05c73f821aa2e273", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java\nindex cb982ae0f..b1b907bb8 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java\n\n@@ -76,9 +76,9 @@ public abstract class ProviderDistributionUIConfig extends UIConfig {\n \n     @Override\n     public List<ConfigField> createFields() {\n-        ConfigField providerConfigField = new EndpointSelectField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, ProviderDescriptor.LABEL_PROVIDER_CONFIG_NAME, ProviderDescriptor.DESCRIPTION_PROVIDER_CONFIG_NAME)\n-                                              .applyClearable(false)\n-                                              .applyRequired(true);\n+        ConfigField providerConfigNameField = new EndpointSelectField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, ProviderDescriptor.LABEL_PROVIDER_CONFIG_NAME, ProviderDescriptor.DESCRIPTION_PROVIDER_CONFIG_NAME)\n+                                                  .applyClearable(false)\n+                                                  .applyRequired(true);\n         List<LabelValueSelectOption> notificationTypeOptions = providerContent.getContentTypes()\n                                                                    .stream()\n                                                                    .map(this::convertToLabelValueOption)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384510627", "bodyText": "Should we validate if configId is a number?", "author": "gkillough", "createdAt": "2020-02-26T14:03:46Z", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "diffHunk": "@@ -63,7 +64,13 @@ public MessageResult testConfig(String configId, String description, FieldAccess\n         String apiToken = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_API_KEY);\n         String url = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_URL);\n         String timeout = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_TIMEOUT);\n-        BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(Long.valueOf(configId), fieldAccessor);\n+        Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n+\n+        if (StringUtils.isNotBlank(configId)) {", "originalCommit": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1Njc3OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384656778", "bodyText": "If a configId isn't a number then something is very wrong. I feel it should break in that case.", "author": "bamandel", "createdAt": "2020-02-26T17:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2Mzg4MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384663881", "bodyText": "If someone is using REST calls, configId may not be a number.", "author": "gkillough", "createdAt": "2020-02-26T17:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "0baef67e0868cceb8eb15e1f05c73f821aa2e273", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java b/src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java\nindex 07f864e2b..16e0bc93b 100644\n--- a/src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java\n+++ b/src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java\n\n@@ -67,7 +67,11 @@ public class BlackDuckGlobalTestAction extends TestAction {\n         Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n \n         if (StringUtils.isNotBlank(configId)) {\n-            parsedConfigurationId = Long.valueOf(configId);\n+            try {\n+                parsedConfigurationId = Long.valueOf(configId);\n+            } catch (NumberFormatException ex) {\n+                throw new AlertException(\"Configuration id not valid.\");\n+            }\n         }\n \n         BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(parsedConfigurationId, fieldAccessor);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDM4MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384650380", "bodyText": "Could this be converted to a stream?", "author": "bamandel", "createdAt": "2020-02-26T17:32:42Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.synopsys.integration.alert.common.descriptor.config.ui;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+@Component\n+public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final DescriptorMap descriptorMap;\n+\n+    @Autowired\n+    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n+        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager, responseFactory, gson);\n+        this.configurationAccessor = configurationAccessor;\n+        this.descriptorMap = descriptorMap;\n+    }\n+\n+    @Override\n+    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+        String providerName = fieldModel.getDescriptorName();\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        if (descriptorKey.isPresent()) {\n+            List<LabelValueSelectOption> options = new LinkedList<>();\n+            List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n+            for (ConfigurationModel configurationModel : configurationModels) {\n+                FieldAccessor accessor = new FieldAccessor(configurationModel.getCopyOfKeyToFieldMap());\n+                Optional<String> configName = accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+                if (configName.isPresent()) {\n+                    options.add(new LabelValueSelectOption(configName.get()));\n+                }\n+            }", "originalCommit": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0baef67e0868cceb8eb15e1f05c73f821aa2e273", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java\nindex 91a74e472..e3782db55 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java\n\n@@ -1,8 +1,8 @@\n package com.synopsys.integration.alert.common.descriptor.config.ui;\n \n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTAzMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384655031", "bodyText": "These lines can all be collapsed into something similar to\ngetConfigurationById(configId).filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\nAlthough exception handling could cause problems here.", "author": "bamandel", "createdAt": "2020-02-26T17:41:24Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -167,15 +167,22 @@ public void deleteJob(UUID jobId) throws AlertDatabaseConstraintException {\n         if (StringUtils.isBlank(providerConfigName)) {\n             throw new AlertDatabaseConstraintException(\"The provider configuration name cannot be null\");\n         }\n-        Long fieldId = definedFieldRepository.findFirstByKey(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)\n+        Long fieldId = definedFieldRepository.findFirstByKey(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n                            .map(DefinedFieldEntity::getId)\n-                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)));\n-        Optional<Long> optionalProviderConfigId = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n-                                                      .stream()\n-                                                      .map(FieldValueEntity::getConfigId)\n-                                                      .findFirst();\n-        if (optionalProviderConfigId.isPresent()) {\n-            return getConfigurationById(optionalProviderConfigId.get());\n+                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)));\n+        List<Long> providerConfigIds = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n+                                           .stream()\n+                                           .map(FieldValueEntity::getConfigId)\n+                                           .collect(Collectors.toList());\n+        if (!providerConfigIds.isEmpty()) {\n+            for (Long configId : providerConfigIds) {\n+                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n+                Optional<ConfigurationModel> globalModel = configurationModel\n+                                                               .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n+                if (globalModel.isPresent()) {\n+                    return globalModel;\n+                }", "originalCommit": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b5f7d366fb3ea61977ab0132f972da176aa91ff", "chunk": "diff --git a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java\nindex 7db769190..39bf99888 100644\n--- a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java\n+++ b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java\n\n@@ -176,8 +176,7 @@ public class DefaultConfigurationAccessor implements ConfigurationAccessor {\n                                            .collect(Collectors.toList());\n         if (!providerConfigIds.isEmpty()) {\n             for (Long configId : providerConfigIds) {\n-                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n-                Optional<ConfigurationModel> globalModel = configurationModel\n+                Optional<ConfigurationModel> globalModel = getConfigurationById(configId)\n                                                                .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n                 if (globalModel.isPresent()) {\n                     return globalModel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNTYzNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384715634", "bodyText": "Why are we not just returning the Optional globalModel? What is the purpose of the isPresent check?", "author": "jamesrichard91", "createdAt": "2020-02-26T19:32:57Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -167,15 +167,22 @@ public void deleteJob(UUID jobId) throws AlertDatabaseConstraintException {\n         if (StringUtils.isBlank(providerConfigName)) {\n             throw new AlertDatabaseConstraintException(\"The provider configuration name cannot be null\");\n         }\n-        Long fieldId = definedFieldRepository.findFirstByKey(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)\n+        Long fieldId = definedFieldRepository.findFirstByKey(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n                            .map(DefinedFieldEntity::getId)\n-                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)));\n-        Optional<Long> optionalProviderConfigId = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n-                                                      .stream()\n-                                                      .map(FieldValueEntity::getConfigId)\n-                                                      .findFirst();\n-        if (optionalProviderConfigId.isPresent()) {\n-            return getConfigurationById(optionalProviderConfigId.get());\n+                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)));\n+        List<Long> providerConfigIds = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n+                                           .stream()\n+                                           .map(FieldValueEntity::getConfigId)\n+                                           .collect(Collectors.toList());\n+        if (!providerConfigIds.isEmpty()) {\n+            for (Long configId : providerConfigIds) {\n+                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n+                Optional<ConfigurationModel> globalModel = configurationModel\n+                                                               .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n+                if (globalModel.isPresent()) {\n+                    return globalModel;", "originalCommit": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b5f7d366fb3ea61977ab0132f972da176aa91ff", "chunk": "diff --git a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java\nindex 7db769190..39bf99888 100644\n--- a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java\n+++ b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java\n\n@@ -176,8 +176,7 @@ public class DefaultConfigurationAccessor implements ConfigurationAccessor {\n                                            .collect(Collectors.toList());\n         if (!providerConfigIds.isEmpty()) {\n             for (Long configId : providerConfigIds) {\n-                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n-                Optional<ConfigurationModel> globalModel = configurationModel\n+                Optional<ConfigurationModel> globalModel = getConfigurationById(configId)\n                                                                .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n                 if (globalModel.isPresent()) {\n                     return globalModel;\n"}}, {"oid": "0baef67e0868cceb8eb15e1f05c73f821aa2e273", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0baef67e0868cceb8eb15e1f05c73f821aa2e273", "message": "refactor: Implement PR feedback.", "committedDate": "2020-02-26T21:37:24Z", "type": "commit"}, {"oid": "2b5f7d366fb3ea61977ab0132f972da176aa91ff", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2b5f7d366fb3ea61977ab0132f972da176aa91ff", "message": "refactor: Eliminate an extra line of code.", "committedDate": "2020-02-27T10:40:44Z", "type": "commit"}, {"oid": "8992cb475ce0972e3d4f04ea3339e91e725dc969", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8992cb475ce0972e3d4f04ea3339e91e725dc969", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_config_select", "committedDate": "2020-02-27T10:57:14Z", "type": "commit"}, {"oid": "9c4fe81759f11fa6bd38f43a78f477ebdf20e4a2", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9c4fe81759f11fa6bd38f43a78f477ebdf20e4a2", "message": "refactor: Add copyright header.", "committedDate": "2020-02-27T11:05:29Z", "type": "commit"}]}