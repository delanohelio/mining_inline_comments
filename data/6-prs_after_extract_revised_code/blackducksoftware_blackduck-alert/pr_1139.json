{"pr_number": 1139, "pr_title": "Ps refresh token fix", "pr_createdAt": "2020-08-27T15:39:32Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139", "timeline": [{"oid": "9187c3be05f2aa428fbf8d3260327a3ad1c0264a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9187c3be05f2aa428fbf8d3260327a3ad1c0264a", "message": "fix: Create the correct body for a refresh token request.", "committedDate": "2020-08-26T20:19:50Z", "type": "commit"}, {"oid": "994ff1cc8832af5cc49db18f514ff0dcd6fe9378", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/994ff1cc8832af5cc49db18f514ff0dcd6fe9378", "message": "fix: Update to use existing refresh tokens.", "committedDate": "2020-08-26T21:03:56Z", "type": "commit"}, {"oid": "91c514a93dd73fbec4ab700086e2ec3c34946fb7", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/91c514a93dd73fbec4ab700086e2ec3c34946fb7", "message": "fix: Add the client secret to use the refresh token properly.", "committedDate": "2020-08-27T15:30:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUxNjMxNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139#discussion_r478516316", "bodyText": "Can't override getRefreshToken as the method is final.  Since we are using the credential that was stored in the database to create a new credential object, use the getRefreshToken method to save the current refresh token value in the new credential object as a member.", "author": "psantos1113", "createdAt": "2020-08-27T15:42:12Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java", "diffHunk": "@@ -53,15 +53,35 @@ protected AzureAuthorizationCodeFlow(Builder builder) {\n     @Override\n     public AuthorizationCodeTokenRequest newTokenRequest(String authorizationCode) {\n         AuthorizationCodeTokenRequest request = super.newTokenRequest(authorizationCode);\n-        request.setGrantType(DEFAULT_GRANT_TYPE);\n+        request.setGrantType(AzureOAuthConstants.DEFAULT_GRANT_TYPE);\n         request.setResponseClass(AzureTokenResponse.class);\n-        request.put(\"assertion\", authorizationCode);\n-        request.put(\"client_assertion_type\", DEFAULT_CLIENT_ASSERTION_TYPE);\n-        request.put(\"client_assertion\", clientSecret);\n-        request.put(\"redirect_uri\", redirectUri);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_ASSERTION, authorizationCode);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_CLIENT_ASSERTION_TYPE, AzureOAuthConstants.DEFAULT_CLIENT_ASSERTION_TYPE);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_CLIENT_ASSERTION, clientSecret);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_REDIRECT_URI, redirectUri);\n         return request;\n     }\n \n+    @Override\n+    public Credential loadCredential(String userId) throws IOException {\n+        Credential credential = super.loadCredential(userId);\n+        if (null == credential) {\n+            return null;\n+        }\n+        AzureCredential.Builder credentialBuilder = new AzureCredential.Builder(credential.getMethod());\n+        credentialBuilder.setClientAuthentication(credential.getClientAuthentication());\n+        credentialBuilder.setClock(credential.getClock());\n+        credentialBuilder.setJsonFactory(credential.getJsonFactory());\n+        credentialBuilder.setRefreshListeners(credential.getRefreshListeners());\n+        credentialBuilder.setRequestInitializer(credential.getRequestInitializer());\n+        credentialBuilder.setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl());\n+        credentialBuilder.setTransport(credential.getTransport());\n+        credentialBuilder.setRedirectUri(redirectUri);\n+        credentialBuilder.setClientSecret(clientSecret);\n+        credentialBuilder.setCachedRefreshToken(credential.getRefreshToken());", "originalCommit": "91c514a93dd73fbec4ab700086e2ec3c34946fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ab927e231ae34b72ddf32422091c2e05e99c58e", "chunk": "diff --git a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java\nindex 128d09729..e803ccbfe 100644\n--- a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java\n+++ b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java\n\n@@ -69,16 +69,10 @@ public class AzureAuthorizationCodeFlow extends AuthorizationCodeFlow {\n             return null;\n         }\n         AzureCredential.Builder credentialBuilder = new AzureCredential.Builder(credential.getMethod());\n-        credentialBuilder.setClientAuthentication(credential.getClientAuthentication());\n-        credentialBuilder.setClock(credential.getClock());\n-        credentialBuilder.setJsonFactory(credential.getJsonFactory());\n-        credentialBuilder.setRefreshListeners(credential.getRefreshListeners());\n-        credentialBuilder.setRequestInitializer(credential.getRequestInitializer());\n-        credentialBuilder.setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl());\n-        credentialBuilder.setTransport(credential.getTransport());\n+        credentialBuilder.copyFromExisting(credential);\n         credentialBuilder.setRedirectUri(redirectUri);\n         credentialBuilder.setClientSecret(clientSecret);\n-        credentialBuilder.setCachedRefreshToken(credential.getRefreshToken());\n+\n         return credentialBuilder.build();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUxODEwNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139#discussion_r478518104", "bodyText": "getRefreshToken will return null by default if the credential isn't set.  If getRefreshToken is null check the cachedRefreshToken to make sure it isn't null.  If the cached token that was passed to the build is null return a null response.  This has the same behavior of the base class when the refreshToken member is null.", "author": "psantos1113", "createdAt": "2020-08-27T15:45:01Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * azure-boards-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.azure.boards.common.oauth;\n+\n+import java.io.IOException;\n+\n+import com.google.api.client.auth.oauth2.Credential;\n+import com.google.api.client.auth.oauth2.RefreshTokenRequest;\n+import com.google.api.client.auth.oauth2.TokenResponse;\n+import com.google.api.client.http.GenericUrl;\n+\n+public class AzureCredential extends Credential {\n+    private String clientSecret;\n+    private String redirectUri;\n+    private String cachedRefreshToken;\n+\n+    public AzureCredential(AccessMethod method) {\n+        super(method);\n+    }\n+\n+    public AzureCredential(Builder builder) {\n+        super(builder);\n+        this.clientSecret = builder.getClientSecret();\n+        this.redirectUri = builder.getRedirectUri();\n+        this.cachedRefreshToken = builder.getCachedRefreshToken();\n+    }\n+\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    public String getCachedRefreshToken() {\n+        return cachedRefreshToken;\n+    }\n+\n+    public String getRedirectUri() {\n+        return redirectUri;\n+    }\n+\n+    @Override\n+    protected TokenResponse executeRefreshToken() throws IOException {\n+        String refreshToken = getRefreshToken();\n+        if (refreshToken == null) {", "originalCommit": "91c514a93dd73fbec4ab700086e2ec3c34946fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ab927e231ae34b72ddf32422091c2e05e99c58e", "chunk": "diff --git a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java\nindex 03e3a37d8..3fc2ef08e 100644\n--- a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java\n+++ b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java\n\n@@ -88,6 +88,18 @@ public class AzureCredential extends Credential {\n             super(method);\n         }\n \n+        public Builder copyFromExisting(Credential credential) {\n+            this.setCachedRefreshToken(credential.getRefreshToken())\n+                .setClientAuthentication(credential.getClientAuthentication())\n+                .setClock(credential.getClock())\n+                .setJsonFactory(credential.getJsonFactory())\n+                .setRefreshListeners(credential.getRefreshListeners())\n+                .setRequestInitializer(credential.getRequestInitializer())\n+                .setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl())\n+                .setTransport(credential.getTransport());\n+            return this;\n+        }\n+\n         public String getClientSecret() {\n             return clientSecret;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUxODYxNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139#discussion_r478518616", "bodyText": "Build the token request with all the parameters Azure needs.  Similar to the new token request.  The refresh token is the assertion value.", "author": "psantos1113", "createdAt": "2020-08-27T15:45:40Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * azure-boards-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.azure.boards.common.oauth;\n+\n+import java.io.IOException;\n+\n+import com.google.api.client.auth.oauth2.Credential;\n+import com.google.api.client.auth.oauth2.RefreshTokenRequest;\n+import com.google.api.client.auth.oauth2.TokenResponse;\n+import com.google.api.client.http.GenericUrl;\n+\n+public class AzureCredential extends Credential {\n+    private String clientSecret;\n+    private String redirectUri;\n+    private String cachedRefreshToken;\n+\n+    public AzureCredential(AccessMethod method) {\n+        super(method);\n+    }\n+\n+    public AzureCredential(Builder builder) {\n+        super(builder);\n+        this.clientSecret = builder.getClientSecret();\n+        this.redirectUri = builder.getRedirectUri();\n+        this.cachedRefreshToken = builder.getCachedRefreshToken();\n+    }\n+\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    public String getCachedRefreshToken() {\n+        return cachedRefreshToken;\n+    }\n+\n+    public String getRedirectUri() {\n+        return redirectUri;\n+    }\n+\n+    @Override\n+    protected TokenResponse executeRefreshToken() throws IOException {\n+        String refreshToken = getRefreshToken();\n+        if (refreshToken == null) {\n+            if (cachedRefreshToken == null) {\n+                return null;\n+            }\n+            refreshToken = cachedRefreshToken;\n+        }\n+\n+        RefreshTokenRequest request = new RefreshTokenRequest(getTransport(), getJsonFactory(), new GenericUrl(getTokenServerEncodedUrl()),", "originalCommit": "91c514a93dd73fbec4ab700086e2ec3c34946fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ab927e231ae34b72ddf32422091c2e05e99c58e", "chunk": "diff --git a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java\nindex 03e3a37d8..3fc2ef08e 100644\n--- a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java\n+++ b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureCredential.java\n\n@@ -88,6 +88,18 @@ public class AzureCredential extends Credential {\n             super(method);\n         }\n \n+        public Builder copyFromExisting(Credential credential) {\n+            this.setCachedRefreshToken(credential.getRefreshToken())\n+                .setClientAuthentication(credential.getClientAuthentication())\n+                .setClock(credential.getClock())\n+                .setJsonFactory(credential.getJsonFactory())\n+                .setRefreshListeners(credential.getRefreshListeners())\n+                .setRequestInitializer(credential.getRequestInitializer())\n+                .setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl())\n+                .setTransport(credential.getTransport());\n+            return this;\n+        }\n+\n         public String getClientSecret() {\n             return clientSecret;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUxOTM1OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139#discussion_r478519358", "bodyText": "The setters and getters here aren't needed for the  deserialization to work properly.  The annotation is the most important part.  Clean up this class to the bare minimum.", "author": "psantos1113", "createdAt": "2020-08-27T15:46:43Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureTokenResponse.java", "diffHunk": "@@ -38,67 +38,6 @@ public AzureTokenResponse() {\n         super();\n     }\n \n-    @Override", "originalCommit": "91c514a93dd73fbec4ab700086e2ec3c34946fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyNjczMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139#discussion_r478526731", "bodyText": "Any chance we can add a method to the builder called copyFromExisting(Credential credential)?", "author": "gkillough", "createdAt": "2020-08-27T15:57:55Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java", "diffHunk": "@@ -53,15 +53,35 @@ protected AzureAuthorizationCodeFlow(Builder builder) {\n     @Override\n     public AuthorizationCodeTokenRequest newTokenRequest(String authorizationCode) {\n         AuthorizationCodeTokenRequest request = super.newTokenRequest(authorizationCode);\n-        request.setGrantType(DEFAULT_GRANT_TYPE);\n+        request.setGrantType(AzureOAuthConstants.DEFAULT_GRANT_TYPE);\n         request.setResponseClass(AzureTokenResponse.class);\n-        request.put(\"assertion\", authorizationCode);\n-        request.put(\"client_assertion_type\", DEFAULT_CLIENT_ASSERTION_TYPE);\n-        request.put(\"client_assertion\", clientSecret);\n-        request.put(\"redirect_uri\", redirectUri);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_ASSERTION, authorizationCode);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_CLIENT_ASSERTION_TYPE, AzureOAuthConstants.DEFAULT_CLIENT_ASSERTION_TYPE);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_CLIENT_ASSERTION, clientSecret);\n+        request.put(AzureOAuthConstants.REQUEST_BODY_FIELD_REDIRECT_URI, redirectUri);\n         return request;\n     }\n \n+    @Override\n+    public Credential loadCredential(String userId) throws IOException {\n+        Credential credential = super.loadCredential(userId);\n+        if (null == credential) {\n+            return null;\n+        }\n+        AzureCredential.Builder credentialBuilder = new AzureCredential.Builder(credential.getMethod());\n+        credentialBuilder.setClientAuthentication(credential.getClientAuthentication());\n+        credentialBuilder.setClock(credential.getClock());\n+        credentialBuilder.setJsonFactory(credential.getJsonFactory());\n+        credentialBuilder.setRefreshListeners(credential.getRefreshListeners());\n+        credentialBuilder.setRequestInitializer(credential.getRequestInitializer());\n+        credentialBuilder.setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl());\n+        credentialBuilder.setTransport(credential.getTransport());", "originalCommit": "91c514a93dd73fbec4ab700086e2ec3c34946fb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU2NTE0MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1139#discussion_r478565140", "bodyText": "yeah I can add that.", "author": "psantos1113", "createdAt": "2020-08-27T17:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyNjczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ab927e231ae34b72ddf32422091c2e05e99c58e", "chunk": "diff --git a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java\nindex 128d09729..e803ccbfe 100644\n--- a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java\n+++ b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/oauth/AzureAuthorizationCodeFlow.java\n\n@@ -69,16 +69,10 @@ public class AzureAuthorizationCodeFlow extends AuthorizationCodeFlow {\n             return null;\n         }\n         AzureCredential.Builder credentialBuilder = new AzureCredential.Builder(credential.getMethod());\n-        credentialBuilder.setClientAuthentication(credential.getClientAuthentication());\n-        credentialBuilder.setClock(credential.getClock());\n-        credentialBuilder.setJsonFactory(credential.getJsonFactory());\n-        credentialBuilder.setRefreshListeners(credential.getRefreshListeners());\n-        credentialBuilder.setRequestInitializer(credential.getRequestInitializer());\n-        credentialBuilder.setTokenServerEncodedUrl(credential.getTokenServerEncodedUrl());\n-        credentialBuilder.setTransport(credential.getTransport());\n+        credentialBuilder.copyFromExisting(credential);\n         credentialBuilder.setRedirectUri(redirectUri);\n         credentialBuilder.setClientSecret(clientSecret);\n-        credentialBuilder.setCachedRefreshToken(credential.getRefreshToken());\n+\n         return credentialBuilder.build();\n     }\n \n"}}, {"oid": "4ab927e231ae34b72ddf32422091c2e05e99c58e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4ab927e231ae34b72ddf32422091c2e05e99c58e", "message": "refactor: Move the code into the builder.", "committedDate": "2020-08-27T17:31:34Z", "type": "commit"}]}