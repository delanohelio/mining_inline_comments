{"pr_number": 1296, "pr_title": "Adding support for Upgrade Guidance for vulnerable components", "pr_createdAt": "2020-12-10T21:29:38Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296", "timeline": [{"oid": "2e6cd08a1a2435cc2ea8b78d293bad7cdd7d171d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2e6cd08a1a2435cc2ea8b78d293bad7cdd7d171d", "message": "Feat: Adding support for Upgrade Guidance for vulnerable components", "committedDate": "2020-12-10T21:28:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyMDc5MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540520791", "bodyText": "There's a lot of duplication going on in this class. Since you're working with two different types that don't share a parent, then we will probably want to create a wrapper class around ComponentVersionUpgradeGuidanceLongTermView and ComponentVersionUpgradeGuidanceLongTermView. The class would contain all the relevant shared fields with a constructor for each type where you map the share fields appropriately. Then we can have a lot of this common code in a single place.", "author": "bamandel", "createdAt": "2020-12-10T21:47:41Z", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java", "diffHunk": "@@ -158,6 +151,24 @@ public static LinkableItem createVulnerabilityAttributeItem(String severityValue\n         return Optional.empty();\n     }\n \n+    private static Optional<LinkableItem> createShortTermGuidance(Supplier<ComponentVersionUpgradeGuidanceShortTermView> getShortTermOption, String remediationLabel) {\n+        ComponentVersionUpgradeGuidanceShortTermView shortTermGuidance = getShortTermOption.get();\n+        if (null != shortTermGuidance) {\n+            String versionText = createShortTermGuidanceVersionText(shortTermGuidance);\n+            return Optional.of(new LinkableItem(remediationLabel, versionText, shortTermGuidance.getVersion()));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private static Optional<LinkableItem> createLongTermGuidance(Supplier<ComponentVersionUpgradeGuidanceLongTermView> getLongTermOption, String remediationLabel) {\n+        ComponentVersionUpgradeGuidanceLongTermView longTermGuidance = getLongTermOption.get();\n+        if (null != longTermGuidance) {\n+            String versionText = createLongTermGuidanceVersionText(longTermGuidance);\n+            return Optional.of(new LinkableItem(remediationLabel, versionText, longTermGuidance.getVersion()));\n+        }\n+        return Optional.empty();\n+    }", "originalCommit": "2e6cd08a1a2435cc2ea8b78d293bad7cdd7d171d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2MzAxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540563019", "bodyText": "What do you think of the  updated method with the new models?", "author": "jamesrichard91", "createdAt": "2020-12-10T23:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyMDc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b030edc0358896afccf1747628a3a2862892af80", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\nindex d584ca8e0..38a37af59 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\n\n@@ -151,20 +151,10 @@ public final class VulnerabilityUtil {\n         return Optional.empty();\n     }\n \n-    private static Optional<LinkableItem> createShortTermGuidance(Supplier<ComponentVersionUpgradeGuidanceShortTermView> getShortTermOption, String remediationLabel) {\n-        ComponentVersionUpgradeGuidanceShortTermView shortTermGuidance = getShortTermOption.get();\n-        if (null != shortTermGuidance) {\n-            String versionText = createShortTermGuidanceVersionText(shortTermGuidance);\n-            return Optional.of(new LinkableItem(remediationLabel, versionText, shortTermGuidance.getVersion()));\n-        }\n-        return Optional.empty();\n-    }\n-\n-    private static Optional<LinkableItem> createLongTermGuidance(Supplier<ComponentVersionUpgradeGuidanceLongTermView> getLongTermOption, String remediationLabel) {\n-        ComponentVersionUpgradeGuidanceLongTermView longTermGuidance = getLongTermOption.get();\n-        if (null != longTermGuidance) {\n-            String versionText = createLongTermGuidanceVersionText(longTermGuidance);\n-            return Optional.of(new LinkableItem(remediationLabel, versionText, longTermGuidance.getVersion()));\n+    private static Optional<LinkableItem> createUpgradeGuidance(UpgradeGuidanceView upgradeGuidanceView, String remediationLabel) {\n+        if (null != upgradeGuidanceView) {\n+            String versionText = createUpgradeGuidanceVersionText(upgradeGuidanceView);\n+            return Optional.of(new LinkableItem(remediationLabel, versionText, upgradeGuidanceView.getVersion()));\n         }\n         return Optional.empty();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyMjAyNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540522026", "bodyText": "These methods can also be handled by the wrapper class mentioned previously", "author": "bamandel", "createdAt": "2020-12-10T21:49:51Z", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java", "diffHunk": "@@ -169,6 +180,60 @@ private static String createRemediationVersionText(RemediatingVersionView remedi\n         return stringBuilder.toString();\n     }\n \n+    private static String createShortTermGuidanceVersionText(ComponentVersionUpgradeGuidanceShortTermView shortTermGuidance) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(shortTermGuidance.getVersionName());\n+        if (shortTermGuidance.getVulnerabilityRisk() != null) {\n+            ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView vulnerabilityRisk = shortTermGuidance.getVulnerabilityRisk();\n+            if (isBigDecimalGreaterThanZero(vulnerabilityRisk.getCritical()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getHigh()) ||\n+                    isBigDecimalGreaterThanZero(vulnerabilityRisk.getMedium()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getLow())) {\n+                stringBuilder.append(\" (Vulnerabilities: \");\n+                boolean previousVulnerabilites = false;\n+                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getCritical(), \" Critical: \", previousVulnerabilites);\n+                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getHigh(), \" High: \", previousVulnerabilites);\n+                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getMedium(), \" Medium: \", previousVulnerabilites);\n+                addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getLow(), \" Low: \", previousVulnerabilites);\n+                stringBuilder.append(\")\");\n+            }\n+        }\n+        return stringBuilder.toString();\n+    }\n+\n+    private static String createLongTermGuidanceVersionText(ComponentVersionUpgradeGuidanceLongTermView longTermGuidance) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(longTermGuidance.getVersionName());\n+        if (longTermGuidance.getVulnerabilityRisk() != null) {\n+            ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView vulnerabilityRisk = longTermGuidance.getVulnerabilityRisk();\n+            if (isBigDecimalGreaterThanZero(vulnerabilityRisk.getCritical()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getHigh()) ||\n+                    isBigDecimalGreaterThanZero(vulnerabilityRisk.getMedium()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getLow())) {\n+                stringBuilder.append(\" (Vulnerabilities: \");\n+                boolean previousVulnerabilites = false;\n+                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getCritical(), \" Critical: \", previousVulnerabilites);\n+                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getHigh(), \" High: \", previousVulnerabilites);\n+                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getMedium(), \" Medium: \", previousVulnerabilites);\n+                addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getLow(), \" Low: \", previousVulnerabilites);\n+                stringBuilder.append(\")\");\n+            }\n+        }\n+        return stringBuilder.toString();", "originalCommit": "2e6cd08a1a2435cc2ea8b78d293bad7cdd7d171d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b030edc0358896afccf1747628a3a2862892af80", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\nindex d584ca8e0..38a37af59 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\n\n@@ -180,60 +170,36 @@ public final class VulnerabilityUtil {\n         return stringBuilder.toString();\n     }\n \n-    private static String createShortTermGuidanceVersionText(ComponentVersionUpgradeGuidanceShortTermView shortTermGuidance) {\n+    private static String createUpgradeGuidanceVersionText(UpgradeGuidanceView upgradeGuidanceView) {\n         StringBuilder stringBuilder = new StringBuilder();\n-        stringBuilder.append(shortTermGuidance.getVersionName());\n-        if (shortTermGuidance.getVulnerabilityRisk() != null) {\n-            ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView vulnerabilityRisk = shortTermGuidance.getVulnerabilityRisk();\n-            if (isBigDecimalGreaterThanZero(vulnerabilityRisk.getCritical()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getHigh()) ||\n-                    isBigDecimalGreaterThanZero(vulnerabilityRisk.getMedium()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getLow())) {\n-                stringBuilder.append(\" (Vulnerabilities: \");\n-                boolean previousVulnerabilites = false;\n-                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getCritical(), \" Critical: \", previousVulnerabilites);\n-                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getHigh(), \" High: \", previousVulnerabilites);\n-                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getMedium(), \" Medium: \", previousVulnerabilites);\n-                addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getLow(), \" Low: \", previousVulnerabilites);\n-                stringBuilder.append(\")\");\n-            }\n+        stringBuilder.append(upgradeGuidanceView.getVersionName());\n+        UpgradeGuidanceRiskView vulnerabilityRisk = upgradeGuidanceView.getVulnerabilityRisk();\n+        if (vulnerabilityRisk.hasVulnerabilities()) {\n+            stringBuilder.append(\" (Vulnerabilities: \");\n+            boolean previousVulnerabilites = false;\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" Critical: \", previousVulnerabilites, vulnerabilityRisk::hasCriticalVulnerabilities, vulnerabilityRisk::getCritical);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" High: \", previousVulnerabilites, vulnerabilityRisk::hasHighVulnerabilities, vulnerabilityRisk::getHigh);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" Medium: \", previousVulnerabilites, vulnerabilityRisk::hasMediumVulnerabilities, vulnerabilityRisk::getMedium);\n+            addVulnerabilityCount(stringBuilder, \" Low: \", previousVulnerabilites, vulnerabilityRisk::hasLowVulnerabilities, vulnerabilityRisk::getLow);\n+            stringBuilder.append(\")\");\n         }\n-        return stringBuilder.toString();\n-    }\n \n-    private static String createLongTermGuidanceVersionText(ComponentVersionUpgradeGuidanceLongTermView longTermGuidance) {\n-        StringBuilder stringBuilder = new StringBuilder();\n-        stringBuilder.append(longTermGuidance.getVersionName());\n-        if (longTermGuidance.getVulnerabilityRisk() != null) {\n-            ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView vulnerabilityRisk = longTermGuidance.getVulnerabilityRisk();\n-            if (isBigDecimalGreaterThanZero(vulnerabilityRisk.getCritical()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getHigh()) ||\n-                    isBigDecimalGreaterThanZero(vulnerabilityRisk.getMedium()) || isBigDecimalGreaterThanZero(vulnerabilityRisk.getLow())) {\n-                stringBuilder.append(\" (Vulnerabilities: \");\n-                boolean previousVulnerabilites = false;\n-                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getCritical(), \" Critical: \", previousVulnerabilites);\n-                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getHigh(), \" High: \", previousVulnerabilites);\n-                previousVulnerabilites = addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getMedium(), \" Medium: \", previousVulnerabilites);\n-                addVulnerabilityCount(stringBuilder, vulnerabilityRisk.getLow(), \" Low: \", previousVulnerabilites);\n-                stringBuilder.append(\")\");\n-            }\n-        }\n         return stringBuilder.toString();\n     }\n \n-    private static boolean addVulnerabilityCount(StringBuilder stringBuilder, BigDecimal bigDecimal, String label, boolean previousVulnerability) {\n-        if (isBigDecimalGreaterThanZero(bigDecimal)) {\n+    private static boolean addVulnerabilityCount(StringBuilder stringBuilder, String label, boolean previousVulnerability, Supplier<Boolean> checkVulnerabilitySupplier, Supplier<BigDecimal> vulnerabilitySupplier) {\n+        Boolean hasVulnerability = checkVulnerabilitySupplier.get();\n+        if (hasVulnerability) {\n             if (previousVulnerability) {\n                 stringBuilder.append(\", \");\n             }\n             stringBuilder.append(label);\n-            stringBuilder.append(bigDecimal);\n+            stringBuilder.append(vulnerabilitySupplier.get());\n             return true;\n         }\n         return false;\n     }\n \n-    private static boolean isBigDecimalGreaterThanZero(BigDecimal bigDecimal) {\n-        return bigDecimal != null && BigDecimal.ZERO.compareTo(bigDecimal) < 0;\n-    }\n-\n     public static boolean doesSecurityRiskProfileHaveVulnerabilities(Logger logger, RiskProfileView securityRiskProfile) {\n         logger.debug(\"Checking if the component still has vulnerabilities...\");\n         int vulnerabilitiesCount = getSumOfRiskCounts(securityRiskProfile.getCounts());\n"}}, {"oid": "b030edc0358896afccf1747628a3a2862892af80", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b030edc0358896afccf1747628a3a2862892af80", "message": "Refactor(VulnerabilityUtil): Adding wrapper classes to simplify the upgrade guidance processing.", "committedDate": "2020-12-10T23:00:38Z", "type": "commit"}, {"oid": "5032081d3577621602059b105dd76669cc505395", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5032081d3577621602059b105dd76669cc505395", "message": "Fix: removing code that was used for testing", "committedDate": "2020-12-10T23:03:04Z", "type": "commit"}, {"oid": "344badb800e4ba1718c3d14601296cb32e077fe5", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/344badb800e4ba1718c3d14601296cb32e077fe5", "message": "Refactor: updating the hasVulnerability check.", "committedDate": "2020-12-10T23:04:44Z", "type": "commit"}, {"oid": "99f088358b891f3b5c3770ea3c4c408f8be5582d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/99f088358b891f3b5c3770ea3c4c408f8be5582d", "message": "Fix(Test): Adding unit test for the upgrade guidance", "committedDate": "2020-12-11T13:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0NzI0OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540947249", "bodyText": "Is the number of vulnerabilities not discrete? I assume using BigDecimal is not a mistake, but it seems so odd.", "author": "gkillough", "createdAt": "2020-12-11T13:29:57Z", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.synopsys.integration.alert.provider.blackduck.collector.builder.model;\n+\n+import java.math.BigDecimal;\n+\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView;\n+import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView;\n+\n+public class UpgradeGuidanceRiskView extends AlertSerializableModel {\n+    private BigDecimal critical;\n+    private BigDecimal high;\n+    private BigDecimal medium;\n+    private BigDecimal low;", "originalCommit": "99f088358b891f3b5c3770ea3c4c408f8be5582d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0OTU5MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540949590", "bodyText": "I use BigDecimal here because that is what we get in the response from Black Duck. I can probably change this to be integer", "author": "jamesrichard91", "createdAt": "2020-12-11T13:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0NzI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk1NDIxNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540954215", "bodyText": "No need to change it. It's just odd that BlackDuck's response is not discrete.", "author": "gkillough", "createdAt": "2020-12-11T13:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0NzI0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "057c5dd8947a5b7de9a3a11c2fdbb06161932203", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java\nindex 3a6ea1655..adb9467aa 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java\n\n@@ -1,21 +1,17 @@\n package com.synopsys.integration.alert.provider.blackduck.collector.builder.model;\n \n import java.math.BigDecimal;\n+import java.util.Optional;\n \n import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView;\n import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView;\n \n public class UpgradeGuidanceRiskView extends AlertSerializableModel {\n-    private BigDecimal critical;\n-    private BigDecimal high;\n-    private BigDecimal medium;\n-    private BigDecimal low;\n-    private boolean hasCriticalVulnerabilities;\n-    private boolean hasHighVulnerabilities;\n-    private boolean hasMediumVulnerabilities;\n-    private boolean hasLowVulnerabilities;\n-    private boolean hasVulnerabilities;\n+    private Integer critical;\n+    private Integer high;\n+    private Integer medium;\n+    private Integer low;\n \n     public static UpgradeGuidanceRiskView fromShortTermVulnerabilityRiskView(ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView shortTermVulnerabilityRiskView) {\n         if (null == shortTermVulnerabilityRiskView) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk0ODg3Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r540948877", "bodyText": "Why not pass the true label (e.g. \"Critical\") and append the spaces and colon inside of addVulnerabilityCount?", "author": "gkillough", "createdAt": "2020-12-11T13:32:39Z", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java", "diffHunk": "@@ -169,6 +171,37 @@ private static String createRemediationVersionText(RemediatingVersionView remedi\n         return stringBuilder.toString();\n     }\n \n+    private static String createUpgradeGuidanceVersionText(UpgradeGuidanceView upgradeGuidanceView) {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(upgradeGuidanceView.getVersionName());\n+        UpgradeGuidanceRiskView vulnerabilityRisk = upgradeGuidanceView.getVulnerabilityRisk();\n+        if (vulnerabilityRisk.hasVulnerabilities()) {\n+            stringBuilder.append(\" (Vulnerabilities:\");\n+            boolean previousVulnerabilites = false;\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" Critical: \", previousVulnerabilites, vulnerabilityRisk::hasCriticalVulnerabilities, vulnerabilityRisk::getCritical);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" High: \", previousVulnerabilites, vulnerabilityRisk::hasHighVulnerabilities, vulnerabilityRisk::getHigh);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" Medium: \", previousVulnerabilites, vulnerabilityRisk::hasMediumVulnerabilities, vulnerabilityRisk::getMedium);\n+            addVulnerabilityCount(stringBuilder, \" Low: \", previousVulnerabilites, vulnerabilityRisk::hasLowVulnerabilities, vulnerabilityRisk::getLow);", "originalCommit": "99f088358b891f3b5c3770ea3c4c408f8be5582d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "057c5dd8947a5b7de9a3a11c2fdbb06161932203", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\nindex e3827834e..5e639dc4e 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/util/VulnerabilityUtil.java\n\n@@ -178,25 +176,28 @@ public final class VulnerabilityUtil {\n         if (vulnerabilityRisk.hasVulnerabilities()) {\n             stringBuilder.append(\" (Vulnerabilities:\");\n             boolean previousVulnerabilites = false;\n-            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" Critical: \", previousVulnerabilites, vulnerabilityRisk::hasCriticalVulnerabilities, vulnerabilityRisk::getCritical);\n-            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" High: \", previousVulnerabilites, vulnerabilityRisk::hasHighVulnerabilities, vulnerabilityRisk::getHigh);\n-            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \" Medium: \", previousVulnerabilites, vulnerabilityRisk::hasMediumVulnerabilities, vulnerabilityRisk::getMedium);\n-            addVulnerabilityCount(stringBuilder, \" Low: \", previousVulnerabilites, vulnerabilityRisk::hasLowVulnerabilities, vulnerabilityRisk::getLow);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \"Critical\", previousVulnerabilites, vulnerabilityRisk::getCritical);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \"High\", previousVulnerabilites, vulnerabilityRisk::getHigh);\n+            previousVulnerabilites = addVulnerabilityCount(stringBuilder, \"Medium\", previousVulnerabilites, vulnerabilityRisk::getMedium);\n+            addVulnerabilityCount(stringBuilder, \"Low\", previousVulnerabilites, vulnerabilityRisk::getLow);\n             stringBuilder.append(\")\");\n         }\n \n         return stringBuilder.toString();\n     }\n \n-    private static boolean addVulnerabilityCount(StringBuilder stringBuilder, String label, boolean previousVulnerability, Supplier<Boolean> checkVulnerabilitySupplier, Supplier<BigDecimal> vulnerabilitySupplier) {\n-        Boolean hasVulnerability = checkVulnerabilitySupplier.get();\n+    private static boolean addVulnerabilityCount(StringBuilder stringBuilder, String label, boolean previousVulnerability, Supplier<Optional<Integer>> vulnerabilitySupplier) {\n+        Optional<Integer> vulnerabilityOptional = vulnerabilitySupplier.get();\n         boolean currentVulnerability = false;\n-        if (BooleanUtils.isTrue(hasVulnerability)) {\n+        if (vulnerabilityOptional.isPresent() && vulnerabilityOptional.get() > 0) {\n+            Integer vulnerability = vulnerabilityOptional.get();\n             if (previousVulnerability) {\n                 stringBuilder.append(\",\");\n             }\n+            stringBuilder.append(\" \");\n             stringBuilder.append(label);\n-            stringBuilder.append(vulnerabilitySupplier.get());\n+            stringBuilder.append(\": \");\n+            stringBuilder.append(vulnerability);\n             currentVulnerability = true;\n         }\n         return currentVulnerability || previousVulnerability;\n"}}, {"oid": "057c5dd8947a5b7de9a3a11c2fdbb06161932203", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/057c5dd8947a5b7de9a3a11c2fdbb06161932203", "message": "Refactor: Cleaning up the upgrade guidance", "committedDate": "2020-12-11T14:08:52Z", "type": "commit"}, {"oid": "f58aed7339d45d2031ceaa02fea947d21c2e88b0", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f58aed7339d45d2031ceaa02fea947d21c2e88b0", "message": "Refactor: Updating the upgrade guidance wrapper so the constructor reflects the fields accurately. Adding more tests for VulnerabilityUtil", "committedDate": "2020-12-11T14:21:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMTIzNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1296#discussion_r541021236", "bodyText": "You could add a constructor with no params that sets everything to null", "author": "bamandel", "createdAt": "2020-12-11T15:19:09Z", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.synopsys.integration.alert.provider.blackduck.collector.builder.model;\n+\n+import java.math.BigDecimal;\n+import java.util.Optional;\n+\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceLongTermVulnerabilityRiskView;\n+import com.synopsys.integration.blackduck.api.generated.component.ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView;\n+\n+public class UpgradeGuidanceRiskView extends AlertSerializableModel {\n+    private Integer critical;\n+    private Integer high;\n+    private Integer medium;\n+    private Integer low;\n+\n+    public static UpgradeGuidanceRiskView fromShortTermVulnerabilityRiskView(ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView shortTermVulnerabilityRiskView) {\n+        if (null == shortTermVulnerabilityRiskView) {\n+            return new UpgradeGuidanceRiskView(null, null, null, null);", "originalCommit": "f58aed7339d45d2031ceaa02fea947d21c2e88b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53f77054ec0503d2a0ba891e35ebeaf24d9098f4", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java\nindex d99db67c1..1dad187d8 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/collector/builder/model/UpgradeGuidanceRiskView.java\n\n@@ -15,7 +15,7 @@ public class UpgradeGuidanceRiskView extends AlertSerializableModel {\n \n     public static UpgradeGuidanceRiskView fromShortTermVulnerabilityRiskView(ComponentVersionUpgradeGuidanceShortTermVulnerabilityRiskView shortTermVulnerabilityRiskView) {\n         if (null == shortTermVulnerabilityRiskView) {\n-            return new UpgradeGuidanceRiskView(null, null, null, null);\n+            return new UpgradeGuidanceRiskView();\n         }\n         return new UpgradeGuidanceRiskView(getIntegerFromBigDecimal(shortTermVulnerabilityRiskView.getCritical()), getIntegerFromBigDecimal(shortTermVulnerabilityRiskView.getHigh()),\n             getIntegerFromBigDecimal(shortTermVulnerabilityRiskView.getMedium()), getIntegerFromBigDecimal(shortTermVulnerabilityRiskView.getLow()));\n"}}, {"oid": "53f77054ec0503d2a0ba891e35ebeaf24d9098f4", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/53f77054ec0503d2a0ba891e35ebeaf24d9098f4", "message": "Adding an empty constructor to the UpgradeGuidanceRiskView, that sets all the fields to null.", "committedDate": "2020-12-11T15:21:28Z", "type": "commit"}]}