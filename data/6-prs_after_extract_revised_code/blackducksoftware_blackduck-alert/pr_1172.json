{"pr_number": 1172, "pr_title": "Feat action response", "pr_createdAt": "2020-09-16T20:20:41Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172", "timeline": [{"oid": "bf4c6b5ff11161c168bf775765efaa3a25d78d5e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bf4c6b5ff11161c168bf775765efaa3a25d78d5e", "message": "feat: Create the initial object for the results of actions.", "committedDate": "2020-09-01T20:07:08Z", "type": "commit"}, {"oid": "814624bdea0ef4760408270189d3add5d552ce2b", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/814624bdea0ef4760408270189d3add5d552ce2b", "message": "feat: Implement action result with custom endpoints.", "committedDate": "2020-09-01T20:08:38Z", "type": "commit"}, {"oid": "3def3fc2b284b9dd7e24307533b8627338e606b2", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3def3fc2b284b9dd7e24307533b8627338e606b2", "message": "refactor: Fix the endpoints to use ActionResult.", "committedDate": "2020-09-02T13:55:14Z", "type": "commit"}, {"oid": "507990affe2c28be1136ec9be54c5b4874fe11a8", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/507990affe2c28be1136ec9be54c5b4874fe11a8", "message": "refactor: Remove unused class.", "committedDate": "2020-09-02T15:04:27Z", "type": "commit"}, {"oid": "99cd70c8b26341b4fbe7d3be5b702df264cc109b", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/99cd70c8b26341b4fbe7d3be5b702df264cc109b", "message": "refactor: Clean up some code smells.", "committedDate": "2020-09-02T15:32:38Z", "type": "commit"}, {"oid": "42590c60b2986c7b2b27caae549671d2290b31e1", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/42590c60b2986c7b2b27caae549671d2290b31e1", "message": "refactor: Updates based on PR feedback.", "committedDate": "2020-09-02T17:52:00Z", "type": "commit"}, {"oid": "e75881c938cb99f0e9657122d9e6d285c349e476", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e75881c938cb99f0e9657122d9e6d285c349e476", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response", "committedDate": "2020-09-02T17:53:38Z", "type": "commit"}, {"oid": "f83b1216193684482d7533508e8a409329c4fe10", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f83b1216193684482d7533508e8a409329c4fe10", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_custom_endpoint_actions", "committedDate": "2020-09-02T17:55:59Z", "type": "commit"}, {"oid": "5bdddb545c0b2e0f120f5dbd46990b2af9f215d3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5bdddb545c0b2e0f120f5dbd46990b2af9f215d3", "message": "refactor: Implement OAuth endpoint changes.", "committedDate": "2020-09-02T18:35:05Z", "type": "commit"}, {"oid": "8420491decbaceda34d315a975f6df1ae5e8eb71", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8420491decbaceda34d315a975f6df1ae5e8eb71", "message": "Merge pull request #1153 from blackducksoftware/ps_custom_endpoint_actions\n\nPs custom endpoint actions", "committedDate": "2020-09-02T18:37:00Z", "type": "commit"}, {"oid": "96d05519c92f31b613cfdc30c2cdfc5f31a83aa3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/96d05519c92f31b613cfdc30c2cdfc5f31a83aa3", "message": "Refactor: Move the custom endpoints in the action package.", "committedDate": "2020-09-02T19:30:11Z", "type": "commit"}, {"oid": "978367c24ce6fc030077e702c0d40fa6f894a723", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/978367c24ce6fc030077e702c0d40fa6f894a723", "message": "refactor: Create controllers for each custom endpoint.", "committedDate": "2020-09-03T15:41:34Z", "type": "commit"}, {"oid": "b54107fc5a99b54e529beb507e82a2cf9e480126", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b54107fc5a99b54e529beb507e82a2cf9e480126", "message": "refactor: Remove the CustomEndpointManager class.", "committedDate": "2020-09-03T17:11:33Z", "type": "commit"}, {"oid": "261daefafa7df23b217acedf4312dbebb5a81882", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/261daefafa7df23b217acedf4312dbebb5a81882", "message": "refactor: Remove CustomEndpointManager from common project", "committedDate": "2020-09-03T17:12:54Z", "type": "commit"}, {"oid": "f29bd3a7c76318f834fe29657db615b08e5f7054", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f29bd3a7c76318f834fe29657db615b08e5f7054", "message": "refactor: Only have the CustomEndpoint class.", "committedDate": "2020-09-03T20:00:18Z", "type": "commit"}, {"oid": "054516d8f0ac7961b50d6faee9b11b9d26816f85", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/054516d8f0ac7961b50d6faee9b11b9d26816f85", "message": "refactor: Rename ActionResult to ActionResponse.", "committedDate": "2020-09-03T20:08:53Z", "type": "commit"}, {"oid": "2baa7161c8a41872d577115c34493308286385af", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2baa7161c8a41872d577115c34493308286385af", "message": "Rename CustomEndpoint to CustomFunctionAction and move to action package.", "committedDate": "2020-09-03T20:19:49Z", "type": "commit"}, {"oid": "c9f50c3c4d9d8a2228bb99b5d544238fe434d09c", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c9f50c3c4d9d8a2228bb99b5d544238fe434d09c", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response", "committedDate": "2020-09-04T11:50:31Z", "type": "commit"}, {"oid": "4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "message": "refactor: Have the ResponseFactory set message default to null.", "committedDate": "2020-09-04T13:09:06Z", "type": "commit"}, {"oid": "91b98531b66318957abacfbb6646803ebcfed3c3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/91b98531b66318957abacfbb6646803ebcfed3c3", "message": "refactor: Create response objects for the select options.", "committedDate": "2020-09-04T13:10:17Z", "type": "commit"}, {"oid": "e64cbae0712409eefabb4bac7893b2ef82fd75eb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e64cbae0712409eefabb4bac7893b2ef82fd75eb", "message": "refactor: Change the custom functions using lists to return objects.", "committedDate": "2020-09-04T13:45:57Z", "type": "commit"}, {"oid": "712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_function_controllers", "committedDate": "2020-09-04T13:47:14Z", "type": "commit"}, {"oid": "29bd761870c4240dd20b74d11aadad167ee63c86", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/29bd761870c4240dd20b74d11aadad167ee63c86", "message": "chore: Add copyright headers.", "committedDate": "2020-09-04T14:01:44Z", "type": "commit"}, {"oid": "3e7b1f3a1d329cee5ca26abf056b836aee59b898", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3e7b1f3a1d329cee5ca26abf056b836aee59b898", "message": "Merge remote-tracking branch 'origin/ps_function_controllers' into ps_function_select_options", "committedDate": "2020-09-04T14:07:14Z", "type": "commit"}, {"oid": "8c7492c2a2a94eb274ba378392306ac03002b8f8", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8c7492c2a2a94eb274ba378392306ac03002b8f8", "message": "chore: Add copyright headers.", "committedDate": "2020-09-04T14:22:07Z", "type": "commit"}, {"oid": "c451757e588fd17ec4daa1d84675533391495779", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c451757e588fd17ec4daa1d84675533391495779", "message": "refactor: Fix the email address selection and enforce an options field is JSON.", "committedDate": "2020-09-04T15:27:48Z", "type": "commit"}, {"oid": "fb8e1508985ea56d282a1d2c1ad37fd049bfcbb9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/fb8e1508985ea56d282a1d2c1ad37fd049bfcbb9", "message": "Merge pull request #1160 from blackducksoftware/ps_function_select_options\n\nUpdate the select options to use an object instead of List<type>", "committedDate": "2020-09-04T16:04:53Z", "type": "commit"}, {"oid": "63924b49086b623fa93b2395a4d31da918e82222", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/63924b49086b623fa93b2395a4d31da918e82222", "message": "Merge pull request #1158 from blackducksoftware/ps_function_controllers\n\nPs function controllers", "committedDate": "2020-09-04T17:03:47Z", "type": "commit"}, {"oid": "c4d1725df2b0a0d55c38d337e88f11f0aec7eccd", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c4d1725df2b0a0d55c38d337e88f11f0aec7eccd", "message": "feat: Start implementing abstract actions.", "committedDate": "2020-09-04T19:55:36Z", "type": "commit"}, {"oid": "f4e01de4a6ffc1b7f1c7b3855faffb4685f3abee", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f4e01de4a6ffc1b7f1c7b3855faffb4685f3abee", "message": "feat: Initial implementation of abstract action class.", "committedDate": "2020-09-08T12:49:25Z", "type": "commit"}, {"oid": "04acb3ca495ab8e01e4dfa46b59897671e81abeb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/04acb3ca495ab8e01e4dfa46b59897671e81abeb", "message": "refactor: Change the certificates controller to implement new interface.", "committedDate": "2020-09-08T20:35:50Z", "type": "commit"}, {"oid": "39bdee6e6897d739cd249e6f274bb61965219968", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/39bdee6e6897d739cd249e6f274bb61965219968", "message": "feat: Implement Job and Config actions.", "committedDate": "2020-09-09T15:28:22Z", "type": "commit"}, {"oid": "523364897938337d95bbf45c9937e32207192e25", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/523364897938337d95bbf45c9937e32207192e25", "message": "fix: Fix the reset password test.", "committedDate": "2020-09-09T15:48:15Z", "type": "commit"}, {"oid": "c1786e339713ce0ddfa6e42c011a7a4712329292", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c1786e339713ce0ddfa6e42c011a7a4712329292", "message": "refactor: ConfigController and ConfigActions use new abstract classes.", "committedDate": "2020-09-09T19:18:42Z", "type": "commit"}, {"oid": "283c521bd308a36c351d62a6d21dcd7411a890c3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/283c521bd308a36c351d62a6d21dcd7411a890c3", "message": "refactor: Change Job controller and actions.", "committedDate": "2020-09-10T13:07:41Z", "type": "commit"}, {"oid": "7b95e78e638862ea3c404f3196d1e0ccbcae81d2", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7b95e78e638862ea3c404f3196d1e0ccbcae81d2", "message": "refactor: Rename some methods to make more sense in the Swagger doc.", "committedDate": "2020-09-10T14:06:39Z", "type": "commit"}, {"oid": "2eba86dcf72ccb562b6bce196b637d6d54525fef", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2eba86dcf72ccb562b6bce196b637d6d54525fef", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response", "committedDate": "2020-09-10T14:24:12Z", "type": "commit"}, {"oid": "374d1dddcdb270528498838ae5bbd469ce46b21e", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/374d1dddcdb270528498838ae5bbd469ce46b21e", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_abstract_actions", "committedDate": "2020-09-10T14:34:10Z", "type": "commit"}, {"oid": "ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583", "message": "fix: Fix parsing the job id to avoid an exception.", "committedDate": "2020-09-10T15:27:40Z", "type": "commit"}, {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1", "message": "refactor: Remove unused code in certificates and fix tests.", "committedDate": "2020-09-10T19:08:42Z", "type": "commit"}, {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f79d758c6a9f2d558b2728c4089863a4791796c5", "message": "fix: Rename FieldValueModel  to  to fix serialization.", "committedDate": "2020-09-11T12:48:19Z", "type": "commit"}, {"oid": "c513540ae543cb01250d0bcae9601dce6950e1aa", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c513540ae543cb01250d0bcae9601dce6950e1aa", "message": "refactor: Implement current PR suggestions.", "committedDate": "2020-09-11T14:50:07Z", "type": "commit"}, {"oid": "21256a169e148361ee2907b34c3c351b652ff130", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/21256a169e148361ee2907b34c3c351b652ff130", "message": "refactor: Implement PR feedback for additional interfaces.", "committedDate": "2020-09-11T16:41:33Z", "type": "commit"}, {"oid": "78f99f7ec4c1a733ce88c250aaa8aaae76906aea", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/78f99f7ec4c1a733ce88c250aaa8aaae76906aea", "message": "refactor: Implement latest PR feedback.", "committedDate": "2020-09-14T11:50:14Z", "type": "commit"}, {"oid": "518a9c5565c17dc45a70539bf0566ce4ad00b8e7", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/518a9c5565c17dc45a70539bf0566ce4ad00b8e7", "message": "Merge pull request #1162 from blackducksoftware/ps_abstract_actions\n\nCreate a better well defined API for actions and controllers", "committedDate": "2020-09-14T15:47:14Z", "type": "commit"}, {"oid": "26467d924f59866b5d4567a6e3092d5f1e2a2872", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/26467d924f59866b5d4567a6e3092d5f1e2a2872", "message": "feat: Implement actions and reducers for validating jobs.", "committedDate": "2020-09-15T17:30:55Z", "type": "commit"}, {"oid": "45e336a3dfe4daa68e0033135ef62dde2689b385", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/45e336a3dfe4daa68e0033135ef62dde2689b385", "message": "refactor: Initial work for updating actions and reducers for globalConfiguration", "committedDate": "2020-09-15T19:13:48Z", "type": "commit"}, {"oid": "df7b3ea98904e6553b1387d77803601d35e506c6", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/df7b3ea98904e6553b1387d77803601d35e506c6", "message": "refactor: Validate before saving.", "committedDate": "2020-09-15T20:31:56Z", "type": "commit"}, {"oid": "4c404b87d5e29a6c13d51b9355d56ed48e376e7b", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4c404b87d5e29a6c13d51b9355d56ed48e376e7b", "message": "fix: Update the distribution jobs to show validation errors.", "committedDate": "2020-09-16T13:04:39Z", "type": "commit"}, {"oid": "d423bc1d9f327d96e1d69a11bce5023c932c115d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d423bc1d9f327d96e1d69a11bce5023c932c115d", "message": "chore: Update comment for the getValue/setValue methods.", "committedDate": "2020-09-16T13:08:23Z", "type": "commit"}, {"oid": "7b5c39cf513474e45148c300821acc58cb30aa16", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7b5c39cf513474e45148c300821acc58cb30aa16", "message": "fix: Update the status for distribution test success.", "committedDate": "2020-09-16T13:15:56Z", "type": "commit"}, {"oid": "8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "message": "fix: Remove unused dispatch call.", "committedDate": "2020-09-16T13:57:13Z", "type": "commit"}, {"oid": "114ed463fd6599b6cb7ba1bfbd10f2d191e25bf3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/114ed463fd6599b6cb7ba1bfbd10f2d191e25bf3", "message": "Merge pull request #1168 from blackducksoftware/ps_distribution_validation\n\ndistribution validation", "committedDate": "2020-09-16T16:04:19Z", "type": "commit"}, {"oid": "f178dd5397b302e1b46e0a2f93dfa99aff5d8ebd", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f178dd5397b302e1b46e0a2f93dfa99aff5d8ebd", "message": "refactor: Update GlobalConfiguration to use new action responses", "committedDate": "2020-09-16T17:51:15Z", "type": "commit"}, {"oid": "891616a43d2127a8b4c8c5311b49a22cbff125cb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/891616a43d2127a8b4c8c5311b49a22cbff125cb", "message": "Merge branch 'feat_action_response' into mc_action_response_globalConfig", "committedDate": "2020-09-16T17:51:58Z", "type": "commit"}, {"oid": "5c7602e3af2eb3bd64a3446df48116b7d12d2bac", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5c7602e3af2eb3bd64a3446df48116b7d12d2bac", "message": "fix: Make sure forbidden errors propagate to client to prevent access.", "committedDate": "2020-09-16T17:56:12Z", "type": "commit"}, {"oid": "1d7dddd23be85189742a8c29566d941ec7b56622", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1d7dddd23be85189742a8c29566d941ec7b56622", "message": "fix: Fix the delete of distribution jobs.", "committedDate": "2020-09-16T18:30:52Z", "type": "commit"}, {"oid": "9faafff51fcc567d9bb1445c7af43b8bfc596fd9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9faafff51fcc567d9bb1445c7af43b8bfc596fd9", "message": "style: Fixing multiline method signature mistake", "committedDate": "2020-09-16T18:51:23Z", "type": "commit"}, {"oid": "b5d87f64b1a72ec0b5d18a609767eb03fe94ff69", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b5d87f64b1a72ec0b5d18a609767eb03fe94ff69", "message": "Merge pull request #1170 from blackducksoftware/mc_action_response_globalConfig\n\nglobal config validation", "committedDate": "2020-09-16T18:54:12Z", "type": "commit"}, {"oid": "b4dae6d6999fb600d63571fbce60a0bbd28ebf7a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b4dae6d6999fb600d63571fbce60a0bbd28ebf7a", "message": "Merge pull request #1171 from blackducksoftware/ps_validation_fix\n\n validation fix", "committedDate": "2020-09-16T19:33:27Z", "type": "commit"}, {"oid": "9a69dfd0e5590f032bff97631d07ffd9a9376c28", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9a69dfd0e5590f032bff97631d07ffd9a9376c28", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response", "committedDate": "2020-09-16T19:41:09Z", "type": "commit"}, {"oid": "35d1071b51a560107ca64341074fafb31f32d032", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/35d1071b51a560107ca64341074fafb31f32d032", "message": "Refactor: Convert to new abstract function for processing type.", "committedDate": "2020-09-16T20:18:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzU2MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489747560", "bodyText": "So the assumption is that every \"function\" requires execute permission?", "author": "jamesrichard91", "createdAt": "2020-09-16T20:53:14Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class CustomFunctionAction<T> {\n+    public static final String API_FUNCTION_URL = \"/api/function\";\n+    private AuthorizationManager authorizationManager;\n+\n+    public CustomFunctionAction(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    public ActionResponse<T> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            if (!authorizationManager.hasExecutePermission(fieldModel.getContext(), fieldModel.getDescriptorName())) {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNTQ5MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490215490", "bodyText": "This is the same permission that we used to check in the CustomEndpointController in the past.", "author": "psantos1113", "createdAt": "2020-09-17T12:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzI1NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490217254", "bodyText": "I think it might be a good idea to create a SPIKE to determine if we should do this on a per-endpoint basis.", "author": "gkillough", "createdAt": "2020-09-17T12:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzc4Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490217782", "bodyText": "Perhaps a protected method to perform the permissions check could be added to this class for now?", "author": "gkillough", "createdAt": "2020-09-17T12:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\nindex 5915cab92..035e5bfe9 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\n\n@@ -41,19 +41,21 @@ public abstract class CustomFunctionAction<T> {\n \n     public ActionResponse<T> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n         try {\n-            if (!authorizationManager.hasExecutePermission(fieldModel.getContext(), fieldModel.getDescriptorName())) {\n+            if (!isAllowed(fieldModel)) {\n                 return new ActionResponse<>(HttpStatus.FORBIDDEN, ResponseFactory.UNAUTHORIZED_REQUEST_MESSAGE);\n             }\n             return createActionResponse(fieldModel, servletContentWrapper);\n+        } catch (ResponseStatusException e) {\n+            return new ActionResponse<>(e.getStatus(), e.getReason());\n         } catch (Exception e) {\n-            if (e instanceof ResponseStatusException) {\n-                ResponseStatusException responseStatusException = (ResponseStatusException) e;\n-                return new ActionResponse<>(responseStatusException.getStatus(), responseStatusException.getReason());\n-            }\n             return createErrorResponse(e);\n         }\n     }\n \n+    protected boolean isAllowed(FieldModel fieldModel) {\n+        return authorizationManager.hasExecutePermission(fieldModel.getContext(), fieldModel.getDescriptorName());\n+    }\n+\n     private ActionResponse<T> createErrorResponse(Exception e) {\n         return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"An internal issue occurred while trying to retrieve your data: %s\", e.getMessage()));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mjk1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489752955", "bodyText": "Is there a reason we are keeping this around? It seems like we have been changing the endpoints to return their own custom versions of FieldOptions. EX: ProviderProjectOptions.\nIt seems like the code is split between using this class as a general Option vs custom implementations of FieldOptions. Is the plan to use the class to replace those custom classes? or to replace this by creating more custom classes?", "author": "jamesrichard91", "createdAt": "2020-09-16T21:04:03Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/LabelValueSelectOptions.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field;\n+\n+import java.util.List;\n+\n+public class LabelValueSelectOptions extends FieldOptions<LabelValueSelectOption> {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxOTMxNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490219315", "bodyText": "If the other endpoints are returning FieldOptions<?> then I will change the usage to be consistent with what has been done.", "author": "psantos1113", "createdAt": "2020-09-17T12:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mjk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzMzk5MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490233991", "bodyText": "Look at most of the custom endpoints. 80% or more use this.", "author": "gkillough", "createdAt": "2020-09-17T13:15:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mjk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI2MDAxMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490260010", "bodyText": "Is that the distinction? The custom endpoints will use this class, while the other endpoints will create custom FieldOptions for the swagger?\nI just want to figure out what the difference is", "author": "jamesrichard91", "createdAt": "2020-09-17T13:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mjk1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2NTg3Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490465873", "bodyText": "The reason we have the specific types is because the response would be ActionResponse<FieldOptions> for the method.  In other places where I had a ActionResponse<List<SomeObject>> we wanted an object that wraps a list and return something like this ActionResponse<WrappedListObject>.\nSee this PR:\n#1158\nSince that was the preference of the team I created the following list wrapper objects:\nLabelValueSelectOptions\nProviderProjectOptions\nEmailAddressOptions\nNotificationFilterModelOptions\nProviderProjectOptions\nThis was done in this PR:\n#1160\nThe implementation was the same for each of these objects only the generic type was different.  So I created FieldOptions so I wouldn't write the same code over and over again.", "author": "psantos1113", "createdAt": "2020-09-17T18:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mjk1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTUyNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489755525", "bodyText": "We may want to discuss not exposing the optOut field, since it currently does not serve a functional purpose.", "author": "jamesrichard91", "createdAt": "2020-09-16T21:09:07Z", "path": "src/main/java/com/synopsys/integration/alert/channel/email/web/EmailAddressSelectOption.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.email.web;\n+\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+\n+public class EmailAddressSelectOption extends AlertSerializableModel {\n+    private String emailAddress;\n+    private Boolean optOut;", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxNzA1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490217053", "bodyText": "We can annotate it with JSONIgnore so that Jackson will not serialize it or if we aren't going to have optOut then we should remove it.", "author": "psantos1113", "createdAt": "2020-09-17T12:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQzODYzMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490438631", "bodyText": "Alert is already serializing the optOut from the ProviderUserModel class. That's what the custom endpoint did in the past.  Since the custom endpoint dealt with email addresses I created this object to represent the email address data.", "author": "psantos1113", "createdAt": "2020-09-17T17:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTUyNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NzgyOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489757829", "bodyText": "This seems odd. Why did this get changed to blackducksoftware?", "author": "jamesrichard91", "createdAt": "2020-09-16T21:13:45Z", "path": "src/test/java/com/synopsys/integration/alert/component/settings/PasswordResetServiceTest.java", "diffHunk": "@@ -110,7 +110,7 @@ public void resetPasswordValidTestIT() throws AlertException {\n         addConfigurationFieldToMap(keyToFieldMap, EmailPropertyKeys.JAVAMAIL_PORT_KEY.getPropertyKey(), testProperties.getProperty(TestPropertyKey.TEST_EMAIL_SMTP_PORT));\n \n         String username = \"username\";\n-        UserModel userModel = UserModel.newUser(username, \"\", \"noreply@synopsys.com\", AuthenticationType.DATABASE, Set.of(), true);\n+        UserModel userModel = UserModel.newUser(username, \"\", \"noreply@blackducksoftware.com\", AuthenticationType.DATABASE, Set.of(), true);", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxODAwNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490218006", "bodyText": "the mail server we use for testing cannot resolve noreply@synopsys.com but it can resolve noreply@blackducksoftware.com since that is the default set in black duck for the sysadmin user.", "author": "psantos1113", "createdAt": "2020-09-17T12:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NzgyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxODUyNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490218527", "bodyText": "There is a space before the colon.", "author": "gkillough", "createdAt": "2020-09-17T12:52:25Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class ValidationActionResponse extends ActionResponse<ValidationResponseModel> {\n+\n+    public static ValidationActionResponse createResponseFromIntegrationRestException(IntegrationRestException integrationRestException) {\n+        String exceptionMessage = integrationRestException.getMessage();\n+        String message = exceptionMessage;\n+        if (StringUtils.isNotBlank(integrationRestException.getHttpStatusMessage())) {\n+            message += \" : \" + integrationRestException.getHttpStatusMessage();", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java\nindex 0669f9ac2..e4aa037f9 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java\n\n@@ -36,7 +36,7 @@ public class ValidationActionResponse extends ActionResponse<ValidationResponseM\n         String exceptionMessage = integrationRestException.getMessage();\n         String message = exceptionMessage;\n         if (StringUtils.isNotBlank(integrationRestException.getHttpStatusMessage())) {\n-            message += \" : \" + integrationRestException.getHttpStatusMessage();\n+            message += \": \" + integrationRestException.getHttpStatusMessage();\n         }\n         return new ValidationActionResponse(HttpStatus.valueOf(integrationRestException.getHttpStatusCode()), ValidationResponseModel.withoutFieldStatuses(message));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMDk3MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490220971", "bodyText": "I'm still not in love with the naming here. createAfterChecks sounds like it will perform checks before creating IMO. createWithoutChecks seems like it would be more appropriate.", "author": "gkillough", "createdAt": "2020-09-17T12:56:00Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createAfterChecks(FieldModel resource);", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java\nindex cb8c8ef6d..b76f76a7f 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java\n\n@@ -39,7 +39,7 @@ import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n-public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+public abstract class AbstractConfigResourceActions implements LongIdResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n     private AuthorizationManager authorizationManager;\n     private DescriptorAccessor descriptorAccessor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMTM1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490221353", "bodyText": "Can this method be final? Is there a reason not to make it final here?", "author": "gkillough", "createdAt": "2020-09-17T12:56:36Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createAfterChecks(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteAfterChecks(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllAfterChecks();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptorAfterChecks(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testAfterChecks(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return ActionResponse.createForbiddenResponse();\n+        }\n+        return readAllByContextAndDescriptorAfterChecks(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java\nindex cb8c8ef6d..b76f76a7f 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java\n\n@@ -39,7 +39,7 @@ import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n-public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+public abstract class AbstractConfigResourceActions implements LongIdResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n     private AuthorizationManager authorizationManager;\n     private DescriptorAccessor descriptorAccessor;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMzE2Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490223162", "bodyText": "@bamandel Did you create a ticket to investigate throwing AlertDatabaseConstraintException? I think no-args methods like this are definitely a good candidate to remove the exception.", "author": "gkillough", "createdAt": "2020-09-17T12:59:11Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+\n+    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+\n+    private Set<String> getDescriptorNames() {\n+        Set<String> descriptorNames = Set.of();\n+        try {\n+            descriptorNames = descriptorAccessor.getRegisteredDescriptors()", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5ODg5Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490298893", "bodyText": "Yes, there's a Spike in 7.0.0 to investigate whether the exception is necessary.", "author": "bamandel", "createdAt": "2020-09-17T14:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMzE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java\nindex c25f84ead..f8b69450b 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java\n\n@@ -58,17 +58,17 @@ public abstract class AbstractJobResourceActions implements JobResourceActions,\n \n     protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n \n-    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+    protected abstract ActionResponse<JobFieldModel> createWithoutChecks(JobFieldModel resource);\n \n-    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+    protected abstract ActionResponse<JobFieldModel> deleteWithoutChecks(UUID id);\n \n-    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllWithoutChecks();\n \n-    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+    protected abstract ValidationActionResponse testWithoutChecks(JobFieldModel resource);\n \n-    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+    protected abstract ActionResponse<JobFieldModel> updateWithoutChecks(UUID id, JobFieldModel resource);\n \n-    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+    protected abstract ValidationActionResponse validateWithoutChecks(JobFieldModel resource);\n \n     private Set<String> getDescriptorNames() {\n         Set<String> descriptorNames = Set.of();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMzg5Mg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490223892", "bodyText": "Same comment about final as is in the other ResourceActions abstract class.", "author": "gkillough", "createdAt": "2020-09-17T13:00:15Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+\n+    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+\n+    private Set<String> getDescriptorNames() {\n+        Set<String> descriptorNames = Set.of();\n+        try {\n+            descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                  .stream()\n+                                  .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                  .map(RegisteredDescriptorModel::getName)\n+                                  .collect(Collectors.toSet());\n+        } catch (AlertDatabaseConstraintException ex) {\n+            // ignore or add a logger.\n+        }\n+\n+        return descriptorNames;\n+    }\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> create(JobFieldModel resource) {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java\nindex c25f84ead..f8b69450b 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java\n\n@@ -58,17 +58,17 @@ public abstract class AbstractJobResourceActions implements JobResourceActions,\n \n     protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n \n-    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+    protected abstract ActionResponse<JobFieldModel> createWithoutChecks(JobFieldModel resource);\n \n-    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+    protected abstract ActionResponse<JobFieldModel> deleteWithoutChecks(UUID id);\n \n-    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllWithoutChecks();\n \n-    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+    protected abstract ValidationActionResponse testWithoutChecks(JobFieldModel resource);\n \n-    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+    protected abstract ActionResponse<JobFieldModel> updateWithoutChecks(UUID id, JobFieldModel resource);\n \n-    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+    protected abstract ValidationActionResponse validateWithoutChecks(JobFieldModel resource);\n \n     private Set<String> getDescriptorNames() {\n         Set<String> descriptorNames = Set.of();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNDkzNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490224934", "bodyText": "I feel like LongIdResourceActions might be a better name. Thoughts?", "author": "gkillough", "createdAt": "2020-09-17T13:01:45Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongResourceActions.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+public interface LongResourceActions<T> extends ResourceActions<T, Long> {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongIdResourceActions.java\nsimilarity index 92%\nrename from alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongResourceActions.java\nrename to alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongIdResourceActions.java\nindex d644d035c..282ee2998 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongIdResourceActions.java\n\n@@ -22,5 +22,5 @@\n  */\n package com.synopsys.integration.alert.common.action.api;\n \n-public interface LongResourceActions<T> extends ResourceActions<T, Long> {\n+public interface LongIdResourceActions<T> extends ResourceActions<T, Long> {\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyODA2OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490228068", "bodyText": "We have a class called AlertSerializableModel that extends Stringable and implements Serializable so that we don't have to extend both like this.", "author": "gkillough", "createdAt": "2020-09-17T13:06:30Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthEndpointResponse.java", "diffHunk": "@@ -27,23 +27,16 @@\n import com.synopsys.integration.util.Stringable;\n \n public class OAuthEndpointResponse extends Stringable implements Serializable {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthEndpointResponse.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthEndpointResponse.java\nindex 8e38e71a9..b4237013f 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthEndpointResponse.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthEndpointResponse.java\n\n@@ -22,11 +22,9 @@\n  */\n package com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth;\n \n-import java.io.Serializable;\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n \n-import com.synopsys.integration.util.Stringable;\n-\n-public class OAuthEndpointResponse extends Stringable implements Serializable {\n+public class OAuthEndpointResponse extends AlertSerializableModel {\n     private final boolean authenticated;\n     private final String authorizationUrl;\n     private final String message;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNjU1MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490236551", "bodyText": "Should we do something similar here to abstract the id Type?", "author": "gkillough", "createdAt": "2020-09-17T13:18:45Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/BaseJobResourceController.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.rest.api;\n+\n+import java.util.UUID;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+\n+public interface BaseJobResourceController {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzc4Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490417786", "bodyText": "We'd have to abstract more than just the ID we'd have to abstract the request body as well. If that's something we really want to do we can do that in a smaller PR after the fact.", "author": "psantos1113", "createdAt": "2020-09-17T16:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNjU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2MDQzNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490460437", "bodyText": "Let's leave it out for now.", "author": "gkillough", "createdAt": "2020-09-17T18:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNjU1MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzODUxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490238519", "bodyText": "This is trivial, but why was a different generic character used here rather than <T>?", "author": "gkillough", "createdAt": "2020-09-17T13:21:17Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/ValidateController.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.rest.api;\n+\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+\n+public interface ValidateController<S> {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjgxMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490416812", "bodyText": "There was initially in the first version going to be a generic for response R it was going to be ValidateController<S,R> but I didn't need the second type.", "author": "psantos1113", "createdAt": "2020-09-17T16:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzODUxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/ValidateController.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/ValidateController.java\nindex f1356ad1c..8e20afec8 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/ValidateController.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/ValidateController.java\n\n@@ -27,7 +27,7 @@ import org.springframework.web.bind.annotation.RequestBody;\n \n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n \n-public interface ValidateController<S> {\n+public interface ValidateController<T> {\n     @PostMapping(\"/validate\")\n-    ValidationResponseModel validate(@RequestBody S requestBody);\n+    ValidationResponseModel validate(@RequestBody T requestBody);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTA4MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490251081", "bodyText": "I know you didn't make this change, but can we change the wording to be \"Unable to confirm...\" rather than \"Was not able to confirm...\"?", "author": "gkillough", "createdAt": "2020-09-17T13:35:31Z", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/cloud/web/JiraCloudCustomEndpoint.java", "diffHunk": "@@ -81,20 +78,20 @@ public JiraCloudCustomEndpoint(JiraCloudChannelKey jiraChannelKey, CustomEndpoin\n             String accessToken = jiraProperties.getAccessToken();\n             Response response = jiraAppService.installMarketplaceCloudApp(JiraConstants.JIRA_APP_KEY, username, accessToken);\n             if (BooleanUtils.isTrue(response.isStatusCodeError())) {\n-                return responseFactory.createBadRequestResponse(\"\", \"The Jira Cloud server responded with error code: \" + response.getStatusCode());\n+                return new ActionResponse<>(HttpStatus.BAD_REQUEST, \"The Jira Cloud server responded with error code: \" + response.getStatusCode());\n             }\n             boolean jiraPluginInstalled = isJiraPluginInstalled(jiraAppService, accessToken, username, JiraConstants.JIRA_APP_KEY);\n             if (!jiraPluginInstalled) {\n-                return responseFactory.createNotFoundResponse(\"Was not able to confirm Jira Cloud successfully installed the Jira Cloud plugin. Please verify the installation on you Jira Cloud server.\");\n+                return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Was not able to confirm Jira Cloud successfully installed the Jira Cloud plugin. Please verify the installation on you Jira Cloud server.\");", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/web/JiraCloudCustomEndpoint.java b/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/web/JiraCloudCustomEndpoint.java\nindex a545e80bd..e6d297bb7 100644\n--- a/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/web/JiraCloudCustomEndpoint.java\n+++ b/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/web/JiraCloudCustomEndpoint.java\n\n@@ -82,7 +82,7 @@ public class JiraCloudCustomEndpoint extends CustomFunctionAction<String> {\n             }\n             boolean jiraPluginInstalled = isJiraPluginInstalled(jiraAppService, accessToken, username, JiraConstants.JIRA_APP_KEY);\n             if (!jiraPluginInstalled) {\n-                return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Was not able to confirm Jira Cloud successfully installed the Jira Cloud plugin. Please verify the installation on you Jira Cloud server.\");\n+                return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Unable to confirm Jira Cloud successfully installed the Jira Cloud plugin. Please verify the installation on you Jira Cloud server.\");\n             }\n             return new ActionResponse<>(HttpStatus.OK, \"Successfully installed the Alert plugin on Jira Cloud\");\n         } catch (IntegrationException e) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MDYyMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490280622", "bodyText": "If this is missing, I believe we should return a 404 to conform to the RFC standard.", "author": "gkillough", "createdAt": "2020-09-17T14:13:50Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -56,150 +62,183 @@\n import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.message.model.MessageResult;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n import com.synopsys.integration.alert.web.common.descriptor.DescriptorProcessor;\n import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @Component\n-public class JobConfigActions {\n+public class JobConfigActions extends AbstractJobResourceActions {\n     private final Logger logger = LoggerFactory.getLogger(JobConfigActions.class);\n     private final ConfigurationAccessor configurationAccessor;\n     private final FieldModelProcessor fieldModelProcessor;\n     private final DescriptorProcessor descriptorProcessor;\n     private final ConfigurationFieldModelConverter modelConverter;\n     private final GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public JobConfigActions(ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter,\n-        GlobalConfigExistsValidator globalConfigExistsValidator) {\n+    public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor, ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor,\n+        ConfigurationFieldModelConverter modelConverter, GlobalConfigExistsValidator globalConfigExistsValidator, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {\n+        super(authorizationManager, descriptorAccessor);\n         this.configurationAccessor = configurationAccessor;\n         this.fieldModelProcessor = fieldModelProcessor;\n         this.descriptorProcessor = descriptorProcessor;\n         this.modelConverter = modelConverter;\n         this.globalConfigExistsValidator = globalConfigExistsValidator;\n+        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n+        this.descriptorMap = descriptorMap;\n     }\n \n-    public boolean doesJobExist(UUID id) throws AlertDatabaseConstraintException {\n-        return null != id && configurationAccessor.getJobById(id).isPresent();\n-    }\n-\n-    public boolean doesJobExist(String id) throws AlertDatabaseConstraintException {\n-        return doesJobExist(UUID.fromString(id));\n-    }\n-\n-    public Optional<JobFieldModel> getJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n-        if (jobConfiguration.isPresent()) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n-            return Optional.of(jobFieldModel);\n+    @Override\n+    protected Optional<JobFieldModel> findJobFieldModel(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n+            if (jobConfiguration.isPresent()) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n+                return Optional.of(jobFieldModel);\n+            }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error finding job configuration id: %s\", id), ex);\n         }\n         return Optional.empty();\n     }\n \n-    public List<JobFieldModel> getAllJobs() throws AlertException {\n-        List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n-        List<JobFieldModel> jobFieldModels = new LinkedList<>();\n-        for (ConfigurationJobModel configurationJobModel : allJobs) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n-            jobFieldModels.add(jobFieldModel);\n+    @Override\n+    protected ActionResponse<List<JobFieldModel>> readAllAfterChecks() {\n+        try {\n+            List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n+            List<JobFieldModel> jobFieldModels = new LinkedList<>();\n+            for (ConfigurationJobModel configurationJobModel : allJobs) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n+                jobFieldModels.add(jobFieldModel);\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, jobFieldModels);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error reading all jobs\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-        return jobFieldModels;\n     }\n \n-    public void deleteJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n-        if (jobs.isPresent()) {\n-            LinkedList<FieldModel> processedFieldModels = new LinkedList<>();\n-            ConfigurationJobModel configurationJobModel = jobs.get();\n-            for (ConfigurationModel configurationModel : configurationJobModel.getCopyOfConfigurations()) {\n-                FieldModel convertedFieldModel = modelConverter.convertToFieldModel(configurationModel);\n-                FieldModel fieldModel = fieldModelProcessor.performBeforeDeleteAction(convertedFieldModel);\n-                processedFieldModels.add(fieldModel);\n-            }\n-            configurationAccessor.deleteJob(configurationJobModel.getJobId());\n-            for (FieldModel fieldModel : processedFieldModels) {\n-                fieldModelProcessor.performAfterDeleteAction(fieldModel);\n+    @Override\n+    protected ActionResponse<JobFieldModel> deleteAfterChecks(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n+            if (jobs.isPresent()) {", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMDM3MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490420370", "bodyText": "We already check if the object is present and will return a 404 not found in the delete method of AbstractJobResourceAction.  The check for if present is because the getJobById returns an optional.", "author": "psantos1113", "createdAt": "2020-09-17T17:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MDYyMg=="}], "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java b/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java\nindex 2a0b08615..894f90b4d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java\n\n@@ -120,7 +118,7 @@ public class JobConfigActions extends AbstractJobResourceActions {\n     }\n \n     @Override\n-    protected ActionResponse<List<JobFieldModel>> readAllAfterChecks() {\n+    protected ActionResponse<List<JobFieldModel>> readAllWithoutChecks() {\n         try {\n             List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n             List<JobFieldModel> jobFieldModels = new LinkedList<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MjY5NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490282695", "bodyText": "I think this should actually be a 404 case.", "author": "gkillough", "createdAt": "2020-09-17T14:16:24Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -56,150 +62,183 @@\n import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.message.model.MessageResult;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n import com.synopsys.integration.alert.web.common.descriptor.DescriptorProcessor;\n import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @Component\n-public class JobConfigActions {\n+public class JobConfigActions extends AbstractJobResourceActions {\n     private final Logger logger = LoggerFactory.getLogger(JobConfigActions.class);\n     private final ConfigurationAccessor configurationAccessor;\n     private final FieldModelProcessor fieldModelProcessor;\n     private final DescriptorProcessor descriptorProcessor;\n     private final ConfigurationFieldModelConverter modelConverter;\n     private final GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public JobConfigActions(ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter,\n-        GlobalConfigExistsValidator globalConfigExistsValidator) {\n+    public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor, ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor,\n+        ConfigurationFieldModelConverter modelConverter, GlobalConfigExistsValidator globalConfigExistsValidator, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {\n+        super(authorizationManager, descriptorAccessor);\n         this.configurationAccessor = configurationAccessor;\n         this.fieldModelProcessor = fieldModelProcessor;\n         this.descriptorProcessor = descriptorProcessor;\n         this.modelConverter = modelConverter;\n         this.globalConfigExistsValidator = globalConfigExistsValidator;\n+        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n+        this.descriptorMap = descriptorMap;\n     }\n \n-    public boolean doesJobExist(UUID id) throws AlertDatabaseConstraintException {\n-        return null != id && configurationAccessor.getJobById(id).isPresent();\n-    }\n-\n-    public boolean doesJobExist(String id) throws AlertDatabaseConstraintException {\n-        return doesJobExist(UUID.fromString(id));\n-    }\n-\n-    public Optional<JobFieldModel> getJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n-        if (jobConfiguration.isPresent()) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n-            return Optional.of(jobFieldModel);\n+    @Override\n+    protected Optional<JobFieldModel> findJobFieldModel(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n+            if (jobConfiguration.isPresent()) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n+                return Optional.of(jobFieldModel);\n+            }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error finding job configuration id: %s\", id), ex);\n         }\n         return Optional.empty();\n     }\n \n-    public List<JobFieldModel> getAllJobs() throws AlertException {\n-        List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n-        List<JobFieldModel> jobFieldModels = new LinkedList<>();\n-        for (ConfigurationJobModel configurationJobModel : allJobs) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n-            jobFieldModels.add(jobFieldModel);\n+    @Override\n+    protected ActionResponse<List<JobFieldModel>> readAllAfterChecks() {\n+        try {\n+            List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n+            List<JobFieldModel> jobFieldModels = new LinkedList<>();\n+            for (ConfigurationJobModel configurationJobModel : allJobs) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n+                jobFieldModels.add(jobFieldModel);\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, jobFieldModels);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error reading all jobs\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-        return jobFieldModels;\n     }\n \n-    public void deleteJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n-        if (jobs.isPresent()) {\n-            LinkedList<FieldModel> processedFieldModels = new LinkedList<>();\n-            ConfigurationJobModel configurationJobModel = jobs.get();\n-            for (ConfigurationModel configurationModel : configurationJobModel.getCopyOfConfigurations()) {\n-                FieldModel convertedFieldModel = modelConverter.convertToFieldModel(configurationModel);\n-                FieldModel fieldModel = fieldModelProcessor.performBeforeDeleteAction(convertedFieldModel);\n-                processedFieldModels.add(fieldModel);\n-            }\n-            configurationAccessor.deleteJob(configurationJobModel.getJobId());\n-            for (FieldModel fieldModel : processedFieldModels) {\n-                fieldModelProcessor.performAfterDeleteAction(fieldModel);\n+    @Override\n+    protected ActionResponse<JobFieldModel> deleteAfterChecks(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n+            if (jobs.isPresent()) {\n+                LinkedList<FieldModel> processedFieldModels = new LinkedList<>();\n+                ConfigurationJobModel configurationJobModel = jobs.get();\n+                for (ConfigurationModel configurationModel : configurationJobModel.getCopyOfConfigurations()) {\n+                    FieldModel convertedFieldModel = modelConverter.convertToFieldModel(configurationModel);\n+                    FieldModel fieldModel = fieldModelProcessor.performBeforeDeleteAction(convertedFieldModel);\n+                    processedFieldModels.add(fieldModel);\n+                }\n+                configurationAccessor.deleteJob(configurationJobModel.getJobId());\n+                for (FieldModel fieldModel : processedFieldModels) {\n+                    fieldModelProcessor.performAfterDeleteAction(fieldModel);\n+                }\n+\n             }\n+        } catch (AlertException ex) {\n+            logger.error(\"Error reading all jobs\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-    }\n \n-    public JobFieldModel saveJob(JobFieldModel jobFieldModel) throws AlertException {\n-        MessageResult validationResult = validateJob(jobFieldModel);\n-        validationResult.throwExceptionForFieldStatues();\n-        validateJobNameUnique(null, jobFieldModel);\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT);\n+    }\n \n-        Set<String> descriptorNames = new HashSet<>();\n-        Set<ConfigurationFieldModel> configurationFieldModels = new HashSet<>();\n-        for (FieldModel fieldModel : jobFieldModel.getFieldModels()) {\n-            FieldModel beforeSaveEventFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n-            descriptorNames.add(beforeSaveEventFieldModel.getDescriptorName());\n-            Collection<ConfigurationFieldModel> savedFieldsModels = modelConverter.convertToConfigurationFieldModelMap(beforeSaveEventFieldModel).values();\n-            configurationFieldModels.addAll(savedFieldsModels);\n-        }\n-        ConfigurationJobModel savedJob = configurationAccessor.createJob(descriptorNames, configurationFieldModels);\n-        JobFieldModel savedJobFieldModel = convertToJobFieldModel(savedJob);\n+    @Override\n+    protected ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource) {\n+        try {\n+            Set<String> descriptorNames = new HashSet<>();\n+            Set<ConfigurationFieldModel> configurationFieldModels = new HashSet<>();\n+            for (FieldModel fieldModel : resource.getFieldModels()) {\n+                FieldModel beforeSaveEventFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n+                descriptorNames.add(beforeSaveEventFieldModel.getDescriptorName());\n+                Collection<ConfigurationFieldModel> savedFieldsModels = modelConverter.convertToConfigurationFieldModelMap(beforeSaveEventFieldModel).values();\n+                configurationFieldModels.addAll(savedFieldsModels);\n+            }\n+            ConfigurationJobModel savedJob = configurationAccessor.createJob(descriptorNames, configurationFieldModels);\n+            JobFieldModel savedJobFieldModel = convertToJobFieldModel(savedJob);\n \n-        Set<FieldModel> updatedFieldModels = new HashSet<>();\n-        for (FieldModel fieldModel : savedJobFieldModel.getFieldModels()) {\n-            FieldModel updatedModel = fieldModelProcessor.performAfterSaveAction(fieldModel);\n-            updatedFieldModels.add(updatedModel);\n+            Set<FieldModel> updatedFieldModels = new HashSet<>();\n+            for (FieldModel fieldModel : savedJobFieldModel.getFieldModels()) {\n+                FieldModel updatedModel = fieldModelProcessor.performAfterSaveAction(fieldModel);\n+                updatedFieldModels.add(updatedModel);\n+            }\n+            savedJobFieldModel.setFieldModels(updatedFieldModels);\n+            return new ActionResponse<>(HttpStatus.OK, savedJobFieldModel);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error creating job\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-        savedJobFieldModel.setFieldModels(updatedFieldModels);\n-        return savedJobFieldModel;\n     }\n \n-    public JobFieldModel updateJob(UUID id, JobFieldModel jobFieldModel) throws AlertException {\n-        MessageResult validationResult = validateJob(jobFieldModel);\n-        validationResult.throwExceptionForFieldStatues();\n-        validateJobNameUnique(id, jobFieldModel);\n-\n-        ConfigurationJobModel previousJob = configurationAccessor.getJobById(id)\n-                                                .orElseThrow(() -> new IllegalStateException(\"No previous job present when the only possible valid state for this stage of the method would require it\"));\n-        Map<String, FieldModel> descriptorAndContextToPreviousFieldModel = new HashMap<>();\n-        for (ConfigurationModel previousJobConfiguration : previousJob.getCopyOfConfigurations()) {\n-            FieldModel previousJobFieldModel = modelConverter.convertToFieldModel(previousJobConfiguration);\n-            descriptorAndContextToPreviousFieldModel.put(previousJobFieldModel.getDescriptorName() + previousJobFieldModel.getContext(), previousJobFieldModel);\n-        }\n+    @Override\n+    protected ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource) {\n+        try {\n+            ConfigurationJobModel previousJob = configurationAccessor.getJobById(id)\n+                                                    .orElseThrow(() -> new IllegalStateException(\"No previous job present when the only possible valid state for this stage of the method would require it\"));", "originalCommit": "35d1071b51a560107ca64341074fafb31f32d032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMTEyNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490421125", "bodyText": "in the update method a 404 not found is already returned. If we are executing here and cannot find it it's an issue.", "author": "psantos1113", "createdAt": "2020-09-17T17:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MjY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "14d3d64713317b83cf015f1703932b7aa3821d8f", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java b/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java\nindex 2a0b08615..894f90b4d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java\n\n@@ -120,7 +118,7 @@ public class JobConfigActions extends AbstractJobResourceActions {\n     }\n \n     @Override\n-    protected ActionResponse<List<JobFieldModel>> readAllAfterChecks() {\n+    protected ActionResponse<List<JobFieldModel>> readAllWithoutChecks() {\n         try {\n             List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n             List<JobFieldModel> jobFieldModels = new LinkedList<>();\n"}}, {"oid": "14d3d64713317b83cf015f1703932b7aa3821d8f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/14d3d64713317b83cf015f1703932b7aa3821d8f", "message": "refactor: Implement method renaming and enhancements from comments in the PR.", "committedDate": "2020-09-17T19:29:48Z", "type": "commit"}]}