{"pr_number": 1144, "pr_title": "Fix UploadEndpointController and Manager", "pr_createdAt": "2020-08-28T17:20:06Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144", "timeline": [{"oid": "fc9332310b5f648002c50be6ad19f53653ef2cd2", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/fc9332310b5f648002c50be6ad19f53653ef2cd2", "message": "Fix(Upload API): Return Java models rather than ResponseEntities in UploadEndpointController", "committedDate": "2020-08-28T17:19:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2OTIxMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479469213", "bodyText": "Can we use the entire if statement in the throwNotImplementedException method? We perform this exact check multiple times. We'd just change the name of the throw method to throwNotImplementedExceptionIfTargetDoesntExist or something not as long", "author": "bamandel", "createdAt": "2020-08-28T18:28:13Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java", "diffHunk": "@@ -90,83 +88,74 @@ public void unRegisterTarget(String targetKey) throws AlertException {\n         uploadTargets.remove(targetKey);\n     }\n \n-    public ResponseEntity<String> performUpload(String targetKey, Resource fileResource) {\n+    public void performUpload(String targetKey, Resource fileResource) {\n         if (!containsTarget(targetKey)) {\n-            return new ResponseEntity(NO_UPLOAD_FUNCTIONALITY_REGISTERED, HttpStatus.NOT_IMPLEMENTED);\n+            throwNotImplementedException();\n         }", "originalCommit": "fc9332310b5f648002c50be6ad19f53653ef2cd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c594a7c9f9902184cad427813437589c6f7cf5d", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java\nindex acd6238a9..4702aa385 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java\n\n@@ -89,40 +85,29 @@ public class UploadEndpointManager {\n     }\n \n     public void performUpload(String targetKey, Resource fileResource) {\n-        if (!containsTarget(targetKey)) {\n-            throwNotImplementedException();\n-        }\n+        throwNotImplementedExceptionIfMissing(targetKey);\n \n         UploadTarget target = uploadTargets.get(targetKey);\n-        if (!authorizationManager.hasUploadWritePermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            throw ResponseFactory.createForbiddenException();\n-        }\n+        throwForbiddenExceptionIfPermissionMissing(authorizationManager::hasUploadWritePermission, target);\n         writeFile(target, fileResource);\n     }\n \n     public ExistenceModel checkExists(String targetKey) {\n-        if (!containsTarget(targetKey)) {\n-            throwNotImplementedException();\n-        }\n+        throwNotImplementedExceptionIfMissing(targetKey);\n \n         UploadTarget target = uploadTargets.get(targetKey);\n-        if (!authorizationManager.hasUploadReadPermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            throw ResponseFactory.createForbiddenException();\n-        }\n+\n+        throwForbiddenExceptionIfPermissionMissing(authorizationManager::hasUploadReadPermission, target);\n         String targetFilename = target.getFilename();\n         Boolean exists = filePersistenceUtil.uploadFileExists(targetFilename);\n         return new ExistenceModel(exists);\n     }\n \n     public void deleteUploadedFile(String targetKey) {\n-        if (!containsTarget(targetKey)) {\n-            throwNotImplementedException();\n-        }\n+        throwNotImplementedExceptionIfMissing(targetKey);\n \n         UploadTarget target = uploadTargets.get(targetKey);\n-        if (!authorizationManager.hasUploadDeletePermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            throw ResponseFactory.createForbiddenException();\n-        }\n+        throwForbiddenExceptionIfPermissionMissing(authorizationManager::hasUploadDeletePermission, target);\n \n         try {\n             String targetFilename = target.getFilename();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MDA3NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479470075", "bodyText": "I think these if statements can also be made into a throw method that is passed a function for which check to perform.", "author": "bamandel", "createdAt": "2020-08-28T18:30:07Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java", "diffHunk": "@@ -90,83 +88,74 @@ public void unRegisterTarget(String targetKey) throws AlertException {\n         uploadTargets.remove(targetKey);\n     }\n \n-    public ResponseEntity<String> performUpload(String targetKey, Resource fileResource) {\n+    public void performUpload(String targetKey, Resource fileResource) {\n         if (!containsTarget(targetKey)) {\n-            return new ResponseEntity(NO_UPLOAD_FUNCTIONALITY_REGISTERED, HttpStatus.NOT_IMPLEMENTED);\n+            throwNotImplementedException();\n         }\n \n         UploadTarget target = uploadTargets.get(targetKey);\n         if (!authorizationManager.hasUploadWritePermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            return responseFactory.createForbiddenResponse();\n+            throw ResponseFactory.createForbiddenException();\n         }", "originalCommit": "fc9332310b5f648002c50be6ad19f53653ef2cd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MTc0MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479471740", "bodyText": "It looks like they're checking different permissions, so I'm gonna leave them.", "author": "gkillough", "createdAt": "2020-08-28T18:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NDEwNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479474107", "bodyText": "Sure, but I think something like this would look cleaner\nprivate blah(BiFunction<Boolean, String, String> checkPermission, Target target) {\n     if (!checkPermission.apply(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n         throw ResponseFactory.createForbiddenException();\n     }\n}\nthen just calling\nblah(authorizationManager::hasUploadWritePermission, target);", "author": "bamandel", "createdAt": "2020-08-28T18:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NDIxMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479474213", "bodyText": "wow, didn't keep any formatting", "author": "bamandel", "createdAt": "2020-08-28T18:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MDA3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3NjM3NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479476374", "bodyText": "Ok, fine. I was just being lazy.", "author": "gkillough", "createdAt": "2020-08-28T18:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MDA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6c594a7c9f9902184cad427813437589c6f7cf5d", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java\nindex acd6238a9..4702aa385 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java\n\n@@ -89,40 +85,29 @@ public class UploadEndpointManager {\n     }\n \n     public void performUpload(String targetKey, Resource fileResource) {\n-        if (!containsTarget(targetKey)) {\n-            throwNotImplementedException();\n-        }\n+        throwNotImplementedExceptionIfMissing(targetKey);\n \n         UploadTarget target = uploadTargets.get(targetKey);\n-        if (!authorizationManager.hasUploadWritePermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            throw ResponseFactory.createForbiddenException();\n-        }\n+        throwForbiddenExceptionIfPermissionMissing(authorizationManager::hasUploadWritePermission, target);\n         writeFile(target, fileResource);\n     }\n \n     public ExistenceModel checkExists(String targetKey) {\n-        if (!containsTarget(targetKey)) {\n-            throwNotImplementedException();\n-        }\n+        throwNotImplementedExceptionIfMissing(targetKey);\n \n         UploadTarget target = uploadTargets.get(targetKey);\n-        if (!authorizationManager.hasUploadReadPermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            throw ResponseFactory.createForbiddenException();\n-        }\n+\n+        throwForbiddenExceptionIfPermissionMissing(authorizationManager::hasUploadReadPermission, target);\n         String targetFilename = target.getFilename();\n         Boolean exists = filePersistenceUtil.uploadFileExists(targetFilename);\n         return new ExistenceModel(exists);\n     }\n \n     public void deleteUploadedFile(String targetKey) {\n-        if (!containsTarget(targetKey)) {\n-            throwNotImplementedException();\n-        }\n+        throwNotImplementedExceptionIfMissing(targetKey);\n \n         UploadTarget target = uploadTargets.get(targetKey);\n-        if (!authorizationManager.hasUploadDeletePermission(target.getContext().name(), target.getDescriptorKey().getUniversalKey())) {\n-            throw ResponseFactory.createForbiddenException();\n-        }\n+        throwForbiddenExceptionIfPermissionMissing(authorizationManager::hasUploadDeletePermission, target);\n \n         try {\n             String targetFilename = target.getFilename();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ3MTMwNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1144#discussion_r479471307", "bodyText": "This class also has a number of duplicate if statements that can be put into the private method.", "author": "bamandel", "createdAt": "2020-08-28T18:32:50Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/upload/UploadEndpointController.java", "diffHunk": "@@ -24,54 +24,61 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.multipart.MultipartFile;\n \n import com.synopsys.integration.alert.common.action.UploadEndpointManager;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.ExistenceModel;\n \n @RestController\n @RequestMapping(UploadEndpointManager.UPLOAD_ENDPOINT_URL)\n public class UploadEndpointController {\n-\n     public static final String TARGET_KEY_MISSING = \"Must be given the key associated with the custom functionality.\";\n+\n     private final UploadEndpointManager uploadEndpointManager;\n-    private final ResponseFactory responseFactory;\n \n     @Autowired\n-    public UploadEndpointController(UploadEndpointManager uploadEndpointManager, ResponseFactory responseFactory) {\n+    public UploadEndpointController(UploadEndpointManager uploadEndpointManager) {\n         this.uploadEndpointManager = uploadEndpointManager;\n-        this.responseFactory = responseFactory;\n     }\n \n     @GetMapping(\"/{key}/exists\")\n-    public ResponseEntity<String> checkUploadedFileExists(@PathVariable String key) {\n+    public ExistenceModel checkUploadedFileExists(@PathVariable String key) {\n         if (StringUtils.isBlank(key)) {\n-            return responseFactory.createBadRequestResponse(\"\", TARGET_KEY_MISSING);\n+            throwTargetKeyMissingException();\n         }", "originalCommit": "fc9332310b5f648002c50be6ad19f53653ef2cd2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c594a7c9f9902184cad427813437589c6f7cf5d", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/upload/UploadEndpointController.java b/src/main/java/com/synopsys/integration/alert/web/api/upload/UploadEndpointController.java\nindex d052dfbda..e3fd3771f 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/upload/UploadEndpointController.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/upload/UploadEndpointController.java\n\n@@ -53,32 +53,28 @@ public class UploadEndpointController {\n \n     @GetMapping(\"/{key}/exists\")\n     public ExistenceModel checkUploadedFileExists(@PathVariable String key) {\n-        if (StringUtils.isBlank(key)) {\n-            throwTargetKeyMissingException();\n-        }\n+        throwBadRequestExceptionIfBlank(key);\n         return uploadEndpointManager.checkExists(key);\n     }\n \n     @PostMapping(\"/{key}\")\n     @ResponseStatus(HttpStatus.NO_CONTENT)\n     public void postFileUpload(@PathVariable String key, @RequestParam(\"file\") MultipartFile file) {\n-        if (StringUtils.isBlank(key)) {\n-            throwTargetKeyMissingException();\n-        }\n+        throwBadRequestExceptionIfBlank(key);\n         uploadEndpointManager.performUpload(key, file.getResource());\n     }\n \n     @DeleteMapping(\"/{key}\")\n     @ResponseStatus(HttpStatus.NO_CONTENT)\n     public void deleteUploadedFile(@PathVariable String key) {\n-        if (StringUtils.isBlank(key)) {\n-            throwTargetKeyMissingException();\n-        }\n+        throwBadRequestExceptionIfBlank(key);\n         uploadEndpointManager.deleteUploadedFile(key);\n     }\n \n-    private void throwTargetKeyMissingException() {\n-        throw ResponseFactory.createBadRequestException(TARGET_KEY_MISSING);\n+    private void throwBadRequestExceptionIfBlank(String key) {\n+        if (StringUtils.isBlank(key)) {\n+            throw ResponseFactory.createBadRequestException(TARGET_KEY_MISSING);\n+        }\n     }\n \n }\n"}}, {"oid": "6c594a7c9f9902184cad427813437589c6f7cf5d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/6c594a7c9f9902184cad427813437589c6f7cf5d", "message": "Fix(Upload API): Abstract if-statements around response status exceptions", "committedDate": "2020-08-28T18:58:59Z", "type": "commit"}]}