{"pr_number": 1093, "pr_title": "Azure Transition Handler", "pr_createdAt": "2020-07-29T18:43:13Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1093", "timeline": [{"oid": "0790acf730335319f819486fa5d958f72f492d18", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0790acf730335319f819486fa5d958f72f492d18", "message": "Feat(Azure Channel): Implement transition handler", "committedDate": "2020-07-29T18:17:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTA2Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1093#discussion_r462511063", "bodyText": "Copy/Pasted from AzureWorkItemService", "author": "gkillough", "createdAt": "2020-07-29T18:44:19Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/comment/AzureWorkItemCommentService.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * azure-boards-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.azure.boards.common.service.comment;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpMethods;\n+import com.google.api.client.http.HttpRequest;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpService;\n+import com.synopsys.integration.azure.boards.common.http.HttpServiceException;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemCommentResponseModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemMultiCommentResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureSpecTemplate;\n+\n+public class AzureWorkItemCommentService {", "originalCommit": "0790acf730335319f819486fa5d958f72f492d18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "003ea9d61709d9f1ececfe9b3e1755ee5455786f", "chunk": "diff --git a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/comment/AzureWorkItemCommentService.java b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/comment/AzureWorkItemCommentService.java\nindex 63d179a8a..902b99c30 100644\n--- a/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/comment/AzureWorkItemCommentService.java\n+++ b/azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/comment/AzureWorkItemCommentService.java\n\n@@ -34,8 +34,8 @@ import com.google.api.client.http.HttpMethods;\n import com.google.api.client.http.HttpRequest;\n import com.synopsys.integration.azure.boards.common.http.AzureHttpService;\n import com.synopsys.integration.azure.boards.common.http.HttpServiceException;\n-import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemCommentResponseModel;\n-import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemMultiCommentResponseModel;\n+import com.synopsys.integration.azure.boards.common.service.comment.model.WorkItemCommentResponseModel;\n+import com.synopsys.integration.azure.boards.common.service.comment.model.WorkItemMultiCommentResponseModel;\n import com.synopsys.integration.azure.boards.common.util.AzureSpecTemplate;\n \n public class AzureWorkItemCommentService {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMTM3MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1093#discussion_r462511371", "bodyText": "Copied to AzureWorkItemCommentService", "author": "gkillough", "createdAt": "2020-07-29T18:44:50Z", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/workitem/AzureWorkItemService.java", "diffHunk": "@@ -118,50 +121,6 @@ public WorkItemResponseModel updateWorkItem(String organizationName, String proj\n         }\n     }\n \n-    public WorkItemMultiCommentResponseModel getComments(String organizationName, String projectIdOrName, Integer workItemId) throws HttpServiceException {\n-        return getComments(organizationName, projectIdOrName, workItemId, null);\n-    }\n-\n-    public WorkItemMultiCommentResponseModel getComments(String organizationName, String projectIdOrName, Integer workItemId, @Nullable String continuationToken) throws HttpServiceException {\n-        String requestSpec = API_SPEC_ORGANIZATION_PROJECT_WORKITEMS_COMMENTS\n-                                 .defineReplacement(PATH_ORGANIZATION_REPLACEMENT, organizationName)\n-                                 .defineReplacement(PATH_PROJECT_REPLACEMENT, projectIdOrName)\n-                                 .defineReplacement(PATH_WORK_ITEM_ID_REPLACEMENT, workItemId.toString())\n-                                 .populateSpec();\n-        String apiVersionQueryParam = new AzureSpecTemplate(\"?{apiVersionParam}={apiVersion}\")\n-                                          .defineReplacement(\"{apiVersionParam}\", AzureHttpService.AZURE_API_VERSION_QUERY_PARAM_NAME)\n-                                          .defineReplacement(\"{apiVersion}\", \"5.1-preview.3\")\n-                                          .populateSpec();\n-        requestSpec = requestSpec + apiVersionQueryParam;\n-        if (StringUtils.isNotBlank(continuationToken)) {\n-            String continuationTokenQueryParam = new AzureSpecTemplate(\"&continuationToken={continuationToken}\")\n-                                                     .defineReplacement(\"{continuationToken}\", continuationToken)\n-                                                     .populateSpec();\n-            requestSpec = requestSpec + continuationTokenQueryParam;\n-        }\n-        return azureHttpService.get(requestSpec, WorkItemMultiCommentResponseModel.class);\n-    }\n-\n-    public WorkItemCommentResponseModel addComment(String organizationName, String projectIdOrName, Integer workItemId, String commentText) throws HttpServiceException {\n-        return addComment(organizationName, projectIdOrName, workItemId, List.of(commentText));\n-    }\n-\n-    public WorkItemCommentResponseModel addComment(String organizationName, String projectIdOrName, Integer workItemId, List<String> commentTexts) throws HttpServiceException {\n-        String requestSpec = API_SPEC_ORGANIZATION_PROJECT_WORKITEMS_COMMENTS\n-                                 .defineReplacement(PATH_ORGANIZATION_REPLACEMENT, organizationName)\n-                                 .defineReplacement(PATH_PROJECT_REPLACEMENT, projectIdOrName)\n-                                 .defineReplacement(PATH_WORK_ITEM_ID_REPLACEMENT, workItemId.toString())\n-                                 .populateSpec();\n-        requestSpec = String.format(\"%s?%s=%s\", requestSpec, AzureHttpService.AZURE_API_VERSION_QUERY_PARAM_NAME, \"5.1-preview.3\");\n-        GenericUrl requestUrl = azureHttpService.constructRequestUrl(requestSpec);\n-        try {\n-            HttpRequest httpRequest = azureHttpService.buildRequestWithDefaultHeaders(HttpMethods.POST, requestUrl, commentTexts);\n-            return azureHttpService.executeRequestAndParseResponse(httpRequest, WorkItemCommentResponseModel.class);\n-        } catch (IOException e) {\n-            throw HttpServiceException.internalServerError(e);\n-        }\n-    }\n-", "originalCommit": "0790acf730335319f819486fa5d958f72f492d18", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "003ea9d61709d9f1ececfe9b3e1755ee5455786f", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/003ea9d61709d9f1ececfe9b3e1755ee5455786f", "message": "Fix(Azure Library): Move comment models to same package as comment service", "committedDate": "2020-07-29T18:46:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNjQ2NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1093#discussion_r462526464", "bodyText": "When we have chains of calls like this, we should try to have a method in the original object that will directly give us the final result for convenience. I don't see workItem used anywhere else.", "author": "bamandel", "createdAt": "2020-07-29T19:11:27Z", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureTransitionHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.TransitionHandler;\n+import com.synopsys.integration.azure.boards.common.model.AzureArrayResponseModel;\n+import com.synopsys.integration.azure.boards.common.service.state.AzureWorkItemTypeStateService;\n+import com.synopsys.integration.azure.boards.common.service.state.WorkItemTypeStateResponseModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldsExtractor;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public class AzureTransitionHandler implements TransitionHandler<WorkItemTypeStateResponseModel> {\n+    public static final String WORK_ITEM_STATE_CATEGORY_PROPOSED = \"Proposed\";\n+    public static final String WORK_ITEM_STATE_CATEGORY_IN_PROGRESS = \"InProgress\";\n+    public static final String WORK_ITEM_STATE_CATEGORY_RESOLVED = \"Resolved\";\n+    public static final String WORK_ITEM_STATE_CATEGORY_COMPLETED = \"Completed\";\n+\n+    private final AzureBoardsProperties azureBoardsProperties;\n+    private final AzureWorkItemService azureWorkItemService;\n+    private final AzureWorkItemTypeStateService azureWorkItemTypeStateService;\n+    private final AzureFieldsExtractor azureFieldsExtractor;\n+\n+    public AzureTransitionHandler(Gson gson, AzureBoardsProperties azureBoardsProperties, AzureWorkItemService azureWorkItemService, AzureWorkItemTypeStateService azureWorkItemTypeStateService) {\n+        this.azureBoardsProperties = azureBoardsProperties;\n+        this.azureWorkItemService = azureWorkItemService;\n+        this.azureWorkItemTypeStateService = azureWorkItemTypeStateService;\n+        this.azureFieldsExtractor = new AzureFieldsExtractor(gson);\n+    }\n+\n+    @Override\n+    public String extractTransitionName(WorkItemTypeStateResponseModel workItemTypeState) {\n+        return workItemTypeState.getName();\n+    }\n+\n+    @Override\n+    public List<WorkItemTypeStateResponseModel> retrieveIssueTransitions(String workItemIdString) throws IntegrationException {\n+        String organizationName = azureBoardsProperties.getOrganizationName();\n+        Integer workItemId = Integer.parseInt(workItemIdString);\n+        WorkItemResponseModel workItem = azureWorkItemService.getWorkItem(organizationName, workItemId);\n+\n+        JsonObject workItemFields = workItem.getFields();", "originalCommit": "0790acf730335319f819486fa5d958f72f492d18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyODg4OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1093#discussion_r462528889", "bodyText": "Yeah, I was definitely thinking about it. You pointing this out has convinced me that it needs to be done.", "author": "gkillough", "createdAt": "2020-07-29T19:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNjQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "0a2d6e88d195f6ff0622827f2d1fdd71187a1310", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureTransitionHandler.java b/src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureTransitionHandler.java\nindex e52bf72ba..3f5f33900 100644\n--- a/src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureTransitionHandler.java\n+++ b/src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureTransitionHandler.java\n\n@@ -26,15 +26,13 @@ import java.util.List;\n import java.util.Optional;\n \n import com.google.gson.Gson;\n-import com.google.gson.JsonObject;\n import com.synopsys.integration.alert.common.channel.issuetracker.service.TransitionHandler;\n import com.synopsys.integration.azure.boards.common.model.AzureArrayResponseModel;\n import com.synopsys.integration.azure.boards.common.service.state.AzureWorkItemTypeStateService;\n import com.synopsys.integration.azure.boards.common.service.state.WorkItemTypeStateResponseModel;\n import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n-import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemFieldsWrapper;\n import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n-import com.synopsys.integration.azure.boards.common.util.AzureFieldsExtractor;\n import com.synopsys.integration.exception.IntegrationException;\n \n public class AzureTransitionHandler implements TransitionHandler<WorkItemTypeStateResponseModel> {\n"}}, {"oid": "0a2d6e88d195f6ff0622827f2d1fdd71187a1310", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0a2d6e88d195f6ff0622827f2d1fdd71187a1310", "message": "Feat(Azure Library): Add wrapper for dynamic work item fields", "committedDate": "2020-07-29T19:38:22Z", "type": "commit"}]}