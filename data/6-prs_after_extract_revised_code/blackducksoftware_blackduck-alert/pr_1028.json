{"pr_number": 1028, "pr_title": "about descriptor fix", "pr_createdAt": "2020-06-18T18:46:57Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028", "timeline": [{"oid": "af61a06b20bf24d1cc3112ebe383a33985fb456a", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/af61a06b20bf24d1cc3112ebe383a33985fb456a", "message": "Refactor: Add providers and channels to the about info.", "committedDate": "2020-06-17T20:02:39Z", "type": "commit"}, {"oid": "718caf51896f4d1b5f7317116d32c443402d99ba", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/718caf51896f4d1b5f7317116d32c443402d99ba", "message": "fix: Get all the descriptor metadata.", "committedDate": "2020-06-18T16:00:28Z", "type": "commit"}, {"oid": "3482deb617a2181e9c2064fc3fd77fd70199b6f9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3482deb617a2181e9c2064fc3fd77fd70199b6f9", "message": "test: Fix the tests to compile and pass.", "committedDate": "2020-06-18T17:28:19Z", "type": "commit"}, {"oid": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d02074401dfcfd33c784bf64e6551bdc91f85d68", "message": "fix: Update the cache when roles are created or deleted.", "committedDate": "2020-06-18T18:43:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMTc3Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442431777", "bodyText": "Add the provider and channel descriptor information back into the about model like we used to in older versions of Alert.", "author": "psantos1113", "createdAt": "2020-06-18T18:47:35Z", "path": "src/main/java/com/synopsys/integration/alert/AboutReader.java", "diffHunk": "@@ -42,19 +46,23 @@\n     private final Logger logger = LoggerFactory.getLogger(AboutReader.class);\n     private final Gson gson;\n     private final SystemStatusUtility systemStatusUtility;\n+    private final DescriptorMetadataActions descriptorActions;\n \n     @Autowired\n-    public AboutReader(Gson gson, SystemStatusUtility systemStatusUtility) {\n+    public AboutReader(Gson gson, SystemStatusUtility systemStatusUtility, DescriptorMetadataActions descriptorActions) {\n         this.gson = gson;\n         this.systemStatusUtility = systemStatusUtility;\n+        this.descriptorActions = descriptorActions;\n     }\n \n     public AboutModel getAboutModel() {\n         try {\n             String aboutJson = ResourceUtil.getResourceAsString(getClass(), \"/about.txt\", StandardCharsets.UTF_8.toString());\n             AboutModel aboutModel = gson.fromJson(aboutJson, AboutModel.class);\n             String startupDate = systemStatusUtility.getStartupTime() != null ? DateUtils.formatDate(systemStatusUtility.getStartupTime(), RestConstants.JSON_DATE_FORMAT) : \"\";\n-            return new AboutModel(aboutModel.getVersion(), aboutModel.getCreated(), aboutModel.getDescription(), aboutModel.getProjectUrl(), systemStatusUtility.isSystemInitialized(), startupDate);\n+            Set<DescriptorMetadata> providers = descriptorActions.getDescriptors(null, DescriptorType.PROVIDER.name(), null);", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMzExMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442433112", "bodyText": "Note this DescriptorMetadata has no operations data contained in it.  So the UI will not display anything based on permissions if these DescriptorMetadata objects are used.", "author": "psantos1113", "createdAt": "2020-06-18T18:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMTc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1NTQ5OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442455499", "bodyText": "Possibly a future improvement but should we create a getDescriptors() method in DescriptorMetadataActions that only takes in a DescriptorType name?", "author": "jamesrichard91", "createdAt": "2020-06-18T19:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMTc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2MzQ4OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442863488", "bodyText": "Implemented your suggestion because the getDescriptorsByType is what we currently do for the about page.", "author": "psantos1113", "createdAt": "2020-06-19T14:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMTc3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/AboutReader.java b/src/main/java/com/synopsys/integration/alert/AboutReader.java\nindex 0bc72e375..0bdafd5bb 100644\n--- a/src/main/java/com/synopsys/integration/alert/AboutReader.java\n+++ b/src/main/java/com/synopsys/integration/alert/AboutReader.java\n\n@@ -60,8 +60,8 @@ public class AboutReader {\n             String aboutJson = ResourceUtil.getResourceAsString(getClass(), \"/about.txt\", StandardCharsets.UTF_8.toString());\n             AboutModel aboutModel = gson.fromJson(aboutJson, AboutModel.class);\n             String startupDate = systemStatusUtility.getStartupTime() != null ? DateUtils.formatDate(systemStatusUtility.getStartupTime(), RestConstants.JSON_DATE_FORMAT) : \"\";\n-            Set<DescriptorMetadata> providers = descriptorActions.getDescriptors(null, DescriptorType.PROVIDER.name(), null);\n-            Set<DescriptorMetadata> channels = descriptorActions.getDescriptors(null, DescriptorType.CHANNEL.name(), null);\n+            Set<DescriptorMetadata> providers = descriptorActions.getDescriptorsByType(DescriptorType.PROVIDER.name());\n+            Set<DescriptorMetadata> channels = descriptorActions.getDescriptorsByType(DescriptorType.CHANNEL.name());\n             return new AboutModel(aboutModel.getVersion(), aboutModel.getCreated(), aboutModel.getDescription(), aboutModel.getProjectUrl(), systemStatusUtility.isSystemInitialized(), startupDate, providers, channels);\n         } catch (Exception e) {\n             logger.error(e.getMessage(), e);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMzE1NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442433154", "bodyText": "This class contains the contents of the DescriptorController.  This provides methods to create the descriptor metadata to be used in both the about page and the user based descriptor data.", "author": "psantos1113", "createdAt": "2020-06-18T18:50:06Z", "path": "src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\nindex 8fb20104e..fb13383a1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n\n@@ -30,6 +30,7 @@ import java.util.function.BiFunction;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import org.apache.commons.lang3.EnumUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMzY1OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442433658", "bodyText": "Create all DescriptorMetadata objects regardless of user permission.  This is used by the AboutReader.", "author": "psantos1113", "createdAt": "2020-06-18T18:50:59Z", "path": "src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.actions;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.DescriptorMetadata;\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+@Component\n+public class DescriptorMetadataActions {\n+    private final Collection<Descriptor> descriptors;\n+    private final AuthorizationManager authorizationManager;\n+\n+    @Autowired\n+    public DescriptorMetadataActions(Collection<Descriptor> descriptors, AuthorizationManager authorizationManager) {\n+        this.descriptors = descriptors;\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptors(@Nullable String name, @Nullable String type, @Nullable String context) {", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\nindex 8fb20104e..fb13383a1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n\n@@ -30,6 +30,7 @@ import java.util.function.BiFunction;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import org.apache.commons.lang3.EnumUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNDE2MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442434160", "bodyText": "This is the method the DescriptorController uses.  Gets the DescriptorMetadata based on the user's permissions.  This is the same type of code that the controller executed in the past.", "author": "psantos1113", "createdAt": "2020-06-18T18:51:57Z", "path": "src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.actions;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.DescriptorMetadata;\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+@Component\n+public class DescriptorMetadataActions {\n+    private final Collection<Descriptor> descriptors;\n+    private final AuthorizationManager authorizationManager;\n+\n+    @Autowired\n+    public DescriptorMetadataActions(Collection<Descriptor> descriptors, AuthorizationManager authorizationManager) {\n+        this.descriptors = descriptors;\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptors(@Nullable String name, @Nullable String type, @Nullable String context) {\n+        return getDescriptors(name, type, context, this::generateUIComponents);\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptorsByPermissions(@Nullable String name, @Nullable String type, @Nullable String context) {", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\nindex 8fb20104e..fb13383a1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n\n@@ -30,6 +30,7 @@ import java.util.function.BiFunction;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import org.apache.commons.lang3.EnumUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNDU2NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442434565", "bodyText": "Create the metadata for all descriptors with UI Components.", "author": "psantos1113", "createdAt": "2020-06-18T18:52:41Z", "path": "src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.actions;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.DescriptorMetadata;\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+@Component\n+public class DescriptorMetadataActions {\n+    private final Collection<Descriptor> descriptors;\n+    private final AuthorizationManager authorizationManager;\n+\n+    @Autowired\n+    public DescriptorMetadataActions(Collection<Descriptor> descriptors, AuthorizationManager authorizationManager) {\n+        this.descriptors = descriptors;\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptors(@Nullable String name, @Nullable String type, @Nullable String context) {\n+        return getDescriptors(name, type, context, this::generateUIComponents);\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptorsByPermissions(@Nullable String name, @Nullable String type, @Nullable String context) {\n+        return getDescriptors(name, type, context, this::generateUIComponentsByPermissions);\n+    }\n+\n+    private Set<DescriptorMetadata> getDescriptors(@Nullable String name, @Nullable String type, @Nullable String context,\n+        BiFunction<Set<Descriptor>, ConfigContextEnum, Set<DescriptorMetadata>> generatorFunction) {\n+        Predicate<Descriptor> filter = Descriptor::hasUIConfigs;\n+        if (name != null) {\n+            filter = filter.and(descriptor -> name.equalsIgnoreCase(descriptor.getDescriptorKey().getUniversalKey()));\n+        }\n+\n+        DescriptorType typeEnum = EnumUtils.getEnumIgnoreCase(DescriptorType.class, type);\n+        if (typeEnum != null) {\n+            filter = filter.and(descriptor -> typeEnum.equals(descriptor.getType()));\n+        } else if (type != null) {\n+            return Set.of();\n+        }\n+\n+        ConfigContextEnum contextEnum = EnumUtils.getEnumIgnoreCase(ConfigContextEnum.class, context);\n+        if (contextEnum != null) {\n+            filter = filter.and(descriptor -> descriptor.hasUIConfigForType(contextEnum));\n+        } else if (context != null) {\n+            return Set.of();\n+        }\n+\n+        Set<Descriptor> filteredDescriptors = filter(descriptors, filter);\n+        return generatorFunction.apply(filteredDescriptors, contextEnum);\n+    }\n+\n+    private Set<Descriptor> filter(Collection<Descriptor> descriptors, Predicate<Descriptor> predicate) {\n+        return descriptors\n+                   .stream()\n+                   .filter(predicate)\n+                   .collect(Collectors.toSet());\n+    }\n+\n+    private Set<DescriptorMetadata> generateUIComponents(Set<Descriptor> filteredDescriptors, ConfigContextEnum context) {", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\nindex 8fb20104e..fb13383a1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n\n@@ -30,6 +30,7 @@ import java.util.function.BiFunction;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import org.apache.commons.lang3.EnumUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTMzMA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442435330", "bodyText": "Create the DescriptorMetadata based on the user permissions.  Refactored the code from the controller because we were making an extra method call that we didn't need.  Check the permissions here.  If the user has permissions then create the DescriptorMetadata objects.", "author": "psantos1113", "createdAt": "2020-06-18T18:54:07Z", "path": "src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.actions;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.EnumUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.DescriptorMetadata;\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+@Component\n+public class DescriptorMetadataActions {\n+    private final Collection<Descriptor> descriptors;\n+    private final AuthorizationManager authorizationManager;\n+\n+    @Autowired\n+    public DescriptorMetadataActions(Collection<Descriptor> descriptors, AuthorizationManager authorizationManager) {\n+        this.descriptors = descriptors;\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptors(@Nullable String name, @Nullable String type, @Nullable String context) {\n+        return getDescriptors(name, type, context, this::generateUIComponents);\n+    }\n+\n+    public Set<DescriptorMetadata> getDescriptorsByPermissions(@Nullable String name, @Nullable String type, @Nullable String context) {\n+        return getDescriptors(name, type, context, this::generateUIComponentsByPermissions);\n+    }\n+\n+    private Set<DescriptorMetadata> getDescriptors(@Nullable String name, @Nullable String type, @Nullable String context,\n+        BiFunction<Set<Descriptor>, ConfigContextEnum, Set<DescriptorMetadata>> generatorFunction) {\n+        Predicate<Descriptor> filter = Descriptor::hasUIConfigs;\n+        if (name != null) {\n+            filter = filter.and(descriptor -> name.equalsIgnoreCase(descriptor.getDescriptorKey().getUniversalKey()));\n+        }\n+\n+        DescriptorType typeEnum = EnumUtils.getEnumIgnoreCase(DescriptorType.class, type);\n+        if (typeEnum != null) {\n+            filter = filter.and(descriptor -> typeEnum.equals(descriptor.getType()));\n+        } else if (type != null) {\n+            return Set.of();\n+        }\n+\n+        ConfigContextEnum contextEnum = EnumUtils.getEnumIgnoreCase(ConfigContextEnum.class, context);\n+        if (contextEnum != null) {\n+            filter = filter.and(descriptor -> descriptor.hasUIConfigForType(contextEnum));\n+        } else if (context != null) {\n+            return Set.of();\n+        }\n+\n+        Set<Descriptor> filteredDescriptors = filter(descriptors, filter);\n+        return generatorFunction.apply(filteredDescriptors, contextEnum);\n+    }\n+\n+    private Set<Descriptor> filter(Collection<Descriptor> descriptors, Predicate<Descriptor> predicate) {\n+        return descriptors\n+                   .stream()\n+                   .filter(predicate)\n+                   .collect(Collectors.toSet());\n+    }\n+\n+    private Set<DescriptorMetadata> generateUIComponents(Set<Descriptor> filteredDescriptors, ConfigContextEnum context) {\n+        ConfigContextEnum[] applicableContexts = (null != context) ? new ConfigContextEnum[] { context } : ConfigContextEnum.values();\n+        Set<DescriptorMetadata> descriptorMetadata = new HashSet<>();\n+        for (ConfigContextEnum applicableContext : applicableContexts) {\n+            for (Descriptor descriptor : filteredDescriptors) {\n+                descriptor.createMetaData(applicableContext)\n+                    .ifPresent(descriptorMetadata::add);\n+            }\n+        }\n+        return descriptorMetadata;\n+    }\n+\n+    private Set<DescriptorMetadata> generateUIComponentsByPermissions(Set<Descriptor> filteredDescriptors, ConfigContextEnum context) {", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\nindex 8fb20104e..fb13383a1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/actions/DescriptorMetadataActions.java\n\n@@ -30,6 +30,7 @@ import java.util.function.BiFunction;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n+import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n import org.apache.commons.lang3.EnumUtils;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTYxOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442435618", "bodyText": "Removed code from this class and moved it into DescriptorMetadataActions", "author": "psantos1113", "createdAt": "2020-06-18T18:54:40Z", "path": "src/main/java/com/synopsys/integration/alert/web/controller/metadata/DescriptorController.java", "diffHunk": "@@ -22,117 +22,29 @@\n  */\n package com.synopsys.integration.alert.web.controller.metadata;\n \n-import java.util.Collection;", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzODQyOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1028#discussion_r442438429", "bodyText": "This is a bug that might need to be patched in older versions.  The cache doesn't get updated when a new role is created.  Therefore this descriptor list for the user in the UI would be empty causing the original issue.", "author": "psantos1113", "createdAt": "2020-06-18T18:59:33Z", "path": "src/main/java/com/synopsys/integration/alert/web/user/RoleActions.java", "diffHunk": "@@ -84,7 +84,9 @@ public UserRoleModel createRole(RolePermissionModel rolePermissionModel) throws\n         Set<PermissionModel> permissions = rolePermissionModel.getPermissions();\n         validatePermissions(permissions);\n         PermissionMatrixModel permissionMatrixModel = convertToPermissionMatrixModel(permissions);\n-        return authorizationUtility.createRoleWithPermissions(roleName, permissionMatrixModel);\n+        UserRoleModel userRoleModel = authorizationUtility.createRoleWithPermissions(roleName, permissionMatrixModel);\n+        authorizationManager.loadPermissionsIntoCache();", "originalCommit": "d02074401dfcfd33c784bf64e6551bdc91f85d68", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "64e9fc6c9523b5fd07552d7e110b30c331b214b1", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/64e9fc6c9523b5fd07552d7e110b30c331b214b1", "message": "Merge remote-tracking branch 'origin/master' into ps_about_descriptor_fix", "committedDate": "2020-06-19T11:44:35Z", "type": "commit"}, {"oid": "bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bfecbeafafa7b5c6671d7927c18c4cbb734c37f8", "message": "refactor: Implement PR suggestion to get by type only.", "committedDate": "2020-06-19T14:10:32Z", "type": "commit"}]}