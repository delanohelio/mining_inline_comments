{"pr_number": 1250, "pr_title": "On demand data", "pr_createdAt": "2020-11-09T23:30:22Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250", "timeline": [{"oid": "3c7da707db22453eefec9031f190f04a0d032d43", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3c7da707db22453eefec9031f190f04a0d032d43", "message": "Refactor(Java): Updating Alert to retrieve the Black Duck data as needed instead of syncing the project/user data with the database.", "committedDate": "2020-11-09T22:53:27Z", "type": "commit"}, {"oid": "acf4addfb2e21b23502c07211cab97d0afc3d7e8", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/acf4addfb2e21b23502c07211cab97d0afc3d7e8", "message": "Merge branch 'master' into jr_on_demand_data", "committedDate": "2020-11-09T23:20:41Z", "type": "commit"}, {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0f336df3339ac89bed293d17a33b3edccde4ca78", "message": "Refactor: Removing unused static variables.", "committedDate": "2020-11-09T23:31:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMzU3Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520503573", "bodyText": "Can this class be deleted since the BlackDuckProviderDataAccessor now exists.  And in the past DefaultProviderDataAccessor was the only ProviderDataAccessor implementation once we removed support for Polaris.", "author": "psantos1113", "createdAt": "2020-11-10T11:50:23Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -54,7 +53,8 @@\n \n @Component\n @Transactional\n-public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n+public class DefaultProviderDataAccessor {", "originalCommit": "0f336df3339ac89bed293d17a33b3edccde4ca78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU4NjU3MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520586570", "bodyText": "We want to keep this class around along with the provider data tables. The changes I made to this class for now should render this class unused until we decide to delete it.", "author": "jamesrichard91", "createdAt": "2020-11-10T14:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMzU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU5NzI3Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520597277", "bodyText": "I do think we want to add @Deprecated here just to make sure people don't try to use this whether in tests or production.", "author": "gkillough", "createdAt": "2020-11-10T14:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMzU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "chunk": "diff --git a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java\nindex d834d9619..354d2c22c 100644\n--- a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java\n+++ b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java\n\n@@ -51,7 +50,6 @@ import com.synopsys.integration.alert.database.provider.project.ProviderUserProj\n import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n \n-@Component\n @Transactional\n public class DefaultProviderDataAccessor {\n     //implements ProviderDataAccessor {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2ODYzMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520568631", "bodyText": "providerConfigID and providerConfigId are both used in this class. We should stick to one capitalization strategy.", "author": "gkillough", "createdAt": "2020-11-10T13:40:27Z", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java", "diffHunk": "@@ -93,7 +93,7 @@ public FieldUtility updateEmailAddresses(Long providerConfigId, MessageContentGr\n         return new FieldUtility(fieldMap);\n     }\n \n-    public Set<String> getEmailAddressesForProject(ProviderProject project, boolean projectOwnerOnly) {\n+    public Set<String> getEmailAddressesForProject(Long providerConfigID, ProviderProject project, boolean projectOwnerOnly) {", "originalCommit": "0f336df3339ac89bed293d17a33b3edccde4ca78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "chunk": "diff --git a/channel/src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java b/channel/src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java\nindex 1c35725d7..c18fe877f 100644\n--- a/channel/src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java\n+++ b/channel/src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java\n\n@@ -93,7 +93,7 @@ public class EmailAddressHandler {\n         return new FieldUtility(fieldMap);\n     }\n \n-    public Set<String> getEmailAddressesForProject(Long providerConfigID, ProviderProject project, boolean projectOwnerOnly) {\n+    public Set<String> getEmailAddressesForProject(Long providerConfigId, ProviderProject project, boolean projectOwnerOnly) {\n         Set<String> emailAddresses;\n         if (projectOwnerOnly) {\n             String projectOwnerEmail = project.getProjectOwnerEmail();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2OTg0Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520569843", "bodyText": "We should delete all of these commented annotations and worry about re-adding them if we ever want to implement the interface again.", "author": "gkillough", "createdAt": "2020-11-10T13:42:09Z", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -73,7 +73,7 @@ public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepo\n         this.configurationAccessor = configurationAccessor;\n     }\n \n-    @Override\n+    //    @Override", "originalCommit": "0f336df3339ac89bed293d17a33b3edccde4ca78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "chunk": "diff --git a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java\nindex d834d9619..354d2c22c 100644\n--- a/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java\n+++ b/alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java\n\n@@ -73,7 +71,6 @@ public class DefaultProviderDataAccessor {\n         this.configurationAccessor = configurationAccessor;\n     }\n \n-    //    @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n     public List<ProviderProject> getProjectsByProviderConfigName(String providerConfigName) {\n         try {\n"}}, {"oid": "9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "message": "Refactor (Java): removing commented annotations, fixing capitalization inconsistencies.", "committedDate": "2020-11-10T14:11:42Z", "type": "commit"}, {"oid": "102d9395a6e96c3e4cd72a3fb118a6e25e47b734", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/102d9395a6e96c3e4cd72a3fb118a6e25e47b734", "message": "Adding deprecated annotation to DefaultProviderDataAccessor", "committedDate": "2020-11-10T14:23:56Z", "type": "commit"}, {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9a7a52a086c5e9aa07cbeff150c5a658a96bc97b", "message": "Merge branch 'master' into jr_on_demand_data", "committedDate": "2020-11-10T14:34:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0OTUyNA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520649524", "bodyText": "For API's we have a response NOT_IMPLEMENTED. is there some similar runtime exception we could throw here?", "author": "bamandel", "createdAt": "2020-11-10T15:26:16Z", "path": "provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.alert.provider.blackduck.factory.BlackDuckPropertiesFactory;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+import com.synopsys.integration.rest.HttpUrl;\n+\n+@Component\n+public class BlackDuckProviderDataAccessor implements ProviderDataAccessor {\n+    private final IntLogger logger = new Slf4jIntLogger(LoggerFactory.getLogger(BlackDuckProviderDataAccessor.class));\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final BlackDuckPropertiesFactory blackDuckPropertiesFactory;\n+\n+    @Autowired\n+    public BlackDuckProviderDataAccessor(ConfigurationAccessor configurationAccessor, BlackDuckPropertiesFactory blackDuckPropertiesFactory) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.blackDuckPropertiesFactory = blackDuckPropertiesFactory;\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getProviderConfigurationByName(providerConfigName);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider '%s'. %s\", providerConfigName, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigId(Long providerConfigId) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getConfigurationById(providerConfigId);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider with id '%s'. %s\", providerConfigId, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    private List<ProviderProject> getProjectsForProvider(ConfigurationModel blackDuckConfigurationModel) throws IntegrationException {\n+        BlackDuckProperties properties = blackDuckPropertiesFactory.createProperties(blackDuckConfigurationModel);\n+        BlackDuckHttpClient blackDuckHttpClient = properties.createBlackDuckHttpClient(logger);\n+        BlackDuckServicesFactory blackDuckServicesFactory = properties.createBlackDuckServicesFactory(blackDuckHttpClient, logger);\n+        ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+        List<ProjectView> allProjects = projectService.getAllProjects();\n+        return convertBlackDuckProjects(allProjects, blackDuckServicesFactory.getBlackDuckService());\n+    }\n+\n+    @Override\n+    public void deleteProjects(Collection<ProviderProject> providerProjects) {\n+        //ignored since we are not using the database", "originalCommit": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1Mzk4Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520653987", "bodyText": "We don't want this to throw an exception. We want this class to be used in place of the DefaultProviderDataAccessor so that it will have minimal impact", "author": "jamesrichard91", "createdAt": "2020-11-10T15:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0OTUyNA=="}], "type": "inlineReview", "revised_code": {"commit": "af883e11b399f00f6243678ccae5d7fd859fa9fe", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java\nsimilarity index 98%\nrename from provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java\nrename to provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java\nindex 041721ac3..a7bed7370 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java\n\n@@ -20,7 +20,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package com.synopsys.integration.alert.database.api;\n+package com.synopsys.integration.alert.provider.blackduck;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MTY1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520651655", "bodyText": "All other methods return a List. Why is this one specifically a set? I feel we should return all lists or all sets to be consistent", "author": "bamandel", "createdAt": "2020-11-10T15:28:59Z", "path": "provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.alert.provider.blackduck.factory.BlackDuckPropertiesFactory;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+import com.synopsys.integration.rest.HttpUrl;\n+\n+@Component\n+public class BlackDuckProviderDataAccessor implements ProviderDataAccessor {\n+    private final IntLogger logger = new Slf4jIntLogger(LoggerFactory.getLogger(BlackDuckProviderDataAccessor.class));\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final BlackDuckPropertiesFactory blackDuckPropertiesFactory;\n+\n+    @Autowired\n+    public BlackDuckProviderDataAccessor(ConfigurationAccessor configurationAccessor, BlackDuckPropertiesFactory blackDuckPropertiesFactory) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.blackDuckPropertiesFactory = blackDuckPropertiesFactory;\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getProviderConfigurationByName(providerConfigName);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider '%s'. %s\", providerConfigName, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigId(Long providerConfigId) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getConfigurationById(providerConfigId);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider with id '%s'. %s\", providerConfigId, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    private List<ProviderProject> getProjectsForProvider(ConfigurationModel blackDuckConfigurationModel) throws IntegrationException {\n+        BlackDuckProperties properties = blackDuckPropertiesFactory.createProperties(blackDuckConfigurationModel);\n+        BlackDuckHttpClient blackDuckHttpClient = properties.createBlackDuckHttpClient(logger);\n+        BlackDuckServicesFactory blackDuckServicesFactory = properties.createBlackDuckServicesFactory(blackDuckHttpClient, logger);\n+        ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+        List<ProjectView> allProjects = projectService.getAllProjects();\n+        return convertBlackDuckProjects(allProjects, blackDuckServicesFactory.getBlackDuckService());\n+    }\n+\n+    @Override\n+    public void deleteProjects(Collection<ProviderProject> providerProjects) {\n+        //ignored since we are not using the database\n+    }\n+\n+    @Override\n+    public Set<String> getEmailAddressesForProjectHref(Long providerConfigId, String projectHref) {", "originalCommit": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af883e11b399f00f6243678ccae5d7fd859fa9fe", "chunk": "diff --git a/provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java\nsimilarity index 98%\nrename from provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java\nrename to provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java\nindex 041721ac3..a7bed7370 100644\n--- a/provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java\n+++ b/provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java\n\n@@ -20,7 +20,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package com.synopsys.integration.alert.database.api;\n+package com.synopsys.integration.alert.provider.blackduck;\n \n import java.util.ArrayList;\n import java.util.Collection;\n"}}, {"oid": "35cb90890ebefa1667f01e3f67a3f4dcd67c63bb", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/35cb90890ebefa1667f01e3f67a3f4dcd67c63bb", "message": "Updating the ProviderDataAccessorTestIT to resolve compilation errors. Adding TODO to update the tests", "committedDate": "2020-11-10T16:00:39Z", "type": "commit"}, {"oid": "0e750bd65525a17799925faa3b86d3e923f22bff", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0e750bd65525a17799925faa3b86d3e923f22bff", "message": "Fixing test compilation error", "committedDate": "2020-11-10T16:08:32Z", "type": "commit"}, {"oid": "af883e11b399f00f6243678ccae5d7fd859fa9fe", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/af883e11b399f00f6243678ccae5d7fd859fa9fe", "message": "Moving the BlackDuckProviderDataAccessor", "committedDate": "2020-11-10T16:37:28Z", "type": "commit"}]}