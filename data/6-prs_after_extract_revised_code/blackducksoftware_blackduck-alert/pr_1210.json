{"pr_number": 1210, "pr_title": "Add additional logging to Role and UserActions", "pr_createdAt": "2020-10-06T15:52:59Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210", "timeline": [{"oid": "cd27be18bc766b725c66b8e183733b06c8802b16", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/cd27be18bc766b725c66b8e183733b06c8802b16", "message": "refactor: Add additional logging to Role and UserActions", "committedDate": "2020-10-06T15:48:20Z", "type": "commit"}, {"oid": "60c1011afd401daefe2380907dff5d95026f4e74", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/60c1011afd401daefe2380907dff5d95026f4e74", "message": "style: Clean up unused comments", "committedDate": "2020-10-06T15:52:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMjI5Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500432293", "bodyText": "\"All\" should be \"all\"", "author": "jamesrichard91", "createdAt": "2020-10-06T16:24:02Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -77,6 +82,7 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n     @Override\n     public final ActionResponse<M> getAll() {\n         if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n+            logger.error(\"Get All action is forbidden. This user is not authorized to perform this action.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\nindex 4a00a3d05..c09c64fb5 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n\n@@ -82,7 +84,7 @@ public abstract class AbstractResourceActions<T, M> implements LongIdResourceAct\n     @Override\n     public final ActionResponse<M> getAll() {\n         if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n-            logger.error(\"Get All action is forbidden. This user is not authorized to perform this action.\");\n+            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Get all\"));\n             return ActionResponse.createForbiddenResponse();\n         }\n         return readAllWithoutChecks();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMjQzMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500432432", "bodyText": "\"One\" should be \"one\"", "author": "jamesrichard91", "createdAt": "2020-10-06T16:24:14Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -85,6 +91,7 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n     @Override\n     public final ActionResponse<T> getOne(Long id) {\n         if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n+            logger.error(\"Get One action is forbidden. This user is not authorized to perform this action.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\nindex 4a00a3d05..c09c64fb5 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n\n@@ -91,7 +93,7 @@ public abstract class AbstractResourceActions<T, M> implements LongIdResourceAct\n     @Override\n     public final ActionResponse<T> getOne(Long id) {\n         if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n-            logger.error(\"Get One action is forbidden. This user is not authorized to perform this action.\");\n+            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Get one\"));\n             return ActionResponse.createForbiddenResponse();\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMjk1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500432955", "bodyText": "The role name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:25:03Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -89,12 +96,16 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n             try {\n+                logger.info(String.format(\"Deleting Role: %s\", existingRole.get().getName()));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n+                logger.error(\"Error occurred while deleting the role.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 35fc37e69..96e83c9fe 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -95,14 +95,15 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n                                                    .stream()\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n+            String roleName = existingRole.get().getName();\n             try {\n-                logger.info(String.format(\"Deleting Role: %s\", existingRole.get().getName()));\n+                logger.info(String.format(\"Deleting Role: %s\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n-                logger.error(\"Error occurred while deleting the role.\");\n+                logger.error(String.format(\"Error occurred while deleting the role: %s\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n-            logger.info(\"Role deleted successfully.\");\n+            logger.info(String.format(\"Role %s deleted successfully.\", roleName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n         logger.error(String.format(\"Role with id %s not found\", id));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzExNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433115", "bodyText": "The role name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:25:18Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -89,12 +96,16 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n             try {\n+                logger.info(String.format(\"Deleting Role: %s\", existingRole.get().getName()));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n+                logger.error(\"Error occurred while deleting the role.\");\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n+            logger.info(\"Role deleted successfully.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 35fc37e69..96e83c9fe 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -95,14 +95,15 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n                                                    .stream()\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n+            String roleName = existingRole.get().getName();\n             try {\n-                logger.info(String.format(\"Deleting Role: %s\", existingRole.get().getName()));\n+                logger.info(String.format(\"Deleting Role: %s\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n-                logger.error(\"Error occurred while deleting the role.\");\n+                logger.error(String.format(\"Error occurred while deleting the role: %s\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n-            logger.info(\"Role deleted successfully.\");\n+            logger.info(String.format(\"Role %s deleted successfully.\", roleName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n         logger.error(String.format(\"Role with id %s not found\", id));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzI0OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433248", "bodyText": "The role name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:25:31Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -128,16 +139,20 @@ protected ValidationActionResponse testWithoutChecks(RolePermissionModel resourc\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n+                logger.info(String.format(\"Updating role: %s\", existingRole.get().getName()));\n                 if (!existingRole.get().getName().equals(roleName)) {\n                     authorizationManager.updateRoleName(id, roleName);\n                 }\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n+                logger.info(\"Role updated successfully.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 35fc37e69..96e83c9fe 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -146,7 +149,7 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n-                logger.info(\"Role updated successfully.\");\n+                logger.info(String.format(\"Role %s updated successfully.\", roleName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             }\n             logger.error(String.format(\"Role with id %s not found\", id));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzQ2NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433465", "bodyText": "The user name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:25:51Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -140,8 +145,10 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 authorizationManager.updateUserRoles(userId, roleNames);\n             }\n             userModel = userAccessor.getUser(userId).orElse(userModel);\n+            logger.info(\"User created successfully.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 79feb09d0..9955fa60d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -145,10 +145,10 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 authorizationManager.updateUserRoles(userId, roleNames);\n             }\n             userModel = userAccessor.getUser(userId).orElse(userModel);\n-            logger.info(\"User created successfully.\");\n+            logger.info(String.format(\"User %s created successfully.\", userName));\n             return new ActionResponse<>(HttpStatus.CREATED, convertToCustomUserRoleModel(userModel));\n         } catch (AlertException ex) {\n-            logger.error(\"Error occurred while creating user.\", ex);\n+            logger.error(String.format(\"Error occurred while creating user %s\", resource.getUsername()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the user. %s\", ex.getMessage()));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzYxMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433613", "bodyText": "The user name should be included, if available.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:26:04Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -140,8 +145,10 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 authorizationManager.updateUserRoles(userId, roleNames);\n             }\n             userModel = userAccessor.getUser(userId).orElse(userModel);\n+            logger.info(\"User created successfully.\");\n             return new ActionResponse<>(HttpStatus.CREATED, convertToCustomUserRoleModel(userModel));\n         } catch (AlertException ex) {\n+            logger.error(\"Error occurred while creating user.\", ex);", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 79feb09d0..9955fa60d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -145,10 +145,10 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 authorizationManager.updateUserRoles(userId, roleNames);\n             }\n             userModel = userAccessor.getUser(userId).orElse(userModel);\n-            logger.info(\"User created successfully.\");\n+            logger.info(String.format(\"User %s created successfully.\", userName));\n             return new ActionResponse<>(HttpStatus.CREATED, convertToCustomUserRoleModel(userModel));\n         } catch (AlertException ex) {\n-            logger.error(\"Error occurred while creating user.\", ex);\n+            logger.error(String.format(\"Error occurred while creating user %s\", resource.getUsername()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the user. %s\", ex.getMessage()));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzc3MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433770", "bodyText": "The user name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:26:19Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,11 +178,14 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(\"User updated successfully.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 79feb09d0..9955fa60d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -178,10 +178,10 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(\"User updated successfully.\");\n+                logger.info(String.format(\"User %s updated successfully.\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(\"An error occurred while updating the user.\", ex);\n+                logger.error(String.format(\"An error occurred while updating the user.\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzg1MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433851", "bodyText": "The user name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:26:29Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,11 +178,14 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(\"User updated successfully.\");\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n+                logger.error(\"An error occurred while updating the user.\", ex);", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 79feb09d0..9955fa60d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -178,10 +178,10 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(\"User updated successfully.\");\n+                logger.info(String.format(\"User %s updated successfully.\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(\"An error occurred while updating the user.\", ex);\n+                logger.error(String.format(\"An error occurred while updating the user.\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzMzk1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500433955", "bodyText": "The user name should be included.", "author": "jamesrichard91", "createdAt": "2020-10-06T16:26:40Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -183,12 +194,16 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n         Optional<UserModel> user = userAccessor.getUser(id);\n         if (user.isPresent()) {\n             try {\n+                logger.info(String.format(\"Deleting User: %s\", user.get().getName()));\n                 userAccessor.deleteUser(id);\n             } catch (AlertException ex) {\n+                logger.error(\"Error occurred while deleting user.\", ex);\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n+            logger.info(\"User deleted successfully.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 79feb09d0..9955fa60d 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -193,14 +193,15 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n     protected ActionResponse<UserConfig> deleteWithoutChecks(Long id) {\n         Optional<UserModel> user = userAccessor.getUser(id);\n         if (user.isPresent()) {\n+            String userName = user.get().getName();\n             try {\n-                logger.info(String.format(\"Deleting User: %s\", user.get().getName()));\n+                logger.info(String.format(\"Deleting User: %s\", userName));\n                 userAccessor.deleteUser(id);\n             } catch (AlertException ex) {\n-                logger.error(\"Error occurred while deleting user.\", ex);\n+                logger.error(String.format(\"Error occurred while deleting user: %s\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n-            logger.info(\"User deleted successfully.\");\n+            logger.info(String.format(\"User %s deleted successfully.\", userName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n         logger.error(String.format(\"User with id %s not found\", id));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzUwOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500437508", "bodyText": "If we want to log something every time a permission check is failed, then perhaps we should add this logging to the authorization manager instead of the Actions.", "author": "bamandel", "createdAt": "2020-10-06T16:32:04Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -65,6 +69,7 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n     @Override\n     public final ActionResponse<T> create(T resource) {\n         if (!authorizationManager.hasCreatePermission(context.name(), descriptorKey.getUniversalKey())) {\n+            logger.error(\"Create action is forbidden. This user is not authorized to perform this action.\");", "originalCommit": "60c1011afd401daefe2380907dff5d95026f4e74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MjE5Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500462196", "bodyText": "That would probably allow us to log the username as well.", "author": "gkillough", "createdAt": "2020-10-06T17:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzUwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDUxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r500470519", "bodyText": "I can try to add some logging in AuthorizationManager, but would we still want a log here? The authorization manager wouldn't know what action was tried it would only know what type of permission was tested.", "author": "ChomickiM", "createdAt": "2020-10-06T17:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\nindex 4a00a3d05..c09c64fb5 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n\n@@ -69,7 +71,7 @@ public abstract class AbstractResourceActions<T, M> implements LongIdResourceAct\n     @Override\n     public final ActionResponse<T> create(T resource) {\n         if (!authorizationManager.hasCreatePermission(context.name(), descriptorKey.getUniversalKey())) {\n-            logger.error(\"Create action is forbidden. This user is not authorized to perform this action.\");\n+            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Create\"));\n             return ActionResponse.createForbiddenResponse();\n         }\n         ValidationActionResponse validationResponse = validateWithoutChecks(resource);\n"}}, {"oid": "ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ed844bc509b29c8bdbc272f85df6b4a3bbc078e3", "message": "refactor: Update log messages based on PR feedback", "committedDate": "2020-10-06T19:32:42Z", "type": "commit"}, {"oid": "245fd3c6bb0072b360a444f3d05589b6d3666e04", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/245fd3c6bb0072b360a444f3d05589b6d3666e04", "message": "refactor: Implement static string messages for logs", "committedDate": "2020-10-07T16:01:52Z", "type": "commit"}, {"oid": "f95e025ace37518a9fb0b6f8b6a25084f7bd849c", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f95e025ace37518a9fb0b6f8b6a25084f7bd849c", "message": "refactor: Update AuthorizationManager to log the user and failed permission", "committedDate": "2020-10-07T19:49:58Z", "type": "commit"}, {"oid": "e2ffae52fed487a173d3a96568dacb110fe585b9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e2ffae52fed487a173d3a96568dacb110fe585b9", "message": "Merge branch 'master' into mc_actions_audit_logging", "committedDate": "2020-10-07T19:51:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MzQyNg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501273426", "bodyText": "Could we call this ActionMessageCreator?", "author": "gkillough", "createdAt": "2020-10-07T19:57:54Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessages.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.synopsys.integration.alert.common.action.api;\n+\n+public class ActionMessages {", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessages.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessageCreator.java\nsimilarity index 98%\nrename from alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessages.java\nrename to alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessageCreator.java\nindex a227120ea..19d41a675 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessages.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/ActionMessageCreator.java\n\n@@ -1,6 +1,6 @@\n package com.synopsys.integration.alert.common.action.api;\n \n-public class ActionMessages {\n+public class ActionMessageCreator {\n     public static final String CREATE_START_MESSAGE = \"Creating %s: %s\";\n     public static final String CREATE_SUCCESS_MESSAGE = \"%s %s created successfully.\";\n     public static final String CREATE_ERROR_MESSAGE = \"An error occurred while creating %s: %s\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MzczNw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501273737", "bodyText": "This should be logged at WARN.", "author": "gkillough", "createdAt": "2020-10-07T19:58:27Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -88,13 +97,18 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n                                                    .stream()\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n+            String roleName = existingRole.get().getName();\n             try {\n+                logger.info(actionMessages.deleteStartMessage(\"role\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.deleteErrorMessage(\"role\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n+            logger.info(actionMessages.deleteSuccessMessage(\"Role\", roleName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n+        logger.error(actionMessages.deleteNotFoundMessage(\"Role\", id));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -99,16 +99,16 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n         if (existingRole.isPresent()) {\n             String roleName = existingRole.get().getName();\n             try {\n-                logger.info(actionMessages.deleteStartMessage(\"role\", roleName));\n+                logger.info(actionMessageCreator.deleteStartMessage(\"role\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.deleteErrorMessage(\"role\", existingRole.get().getName()));\n+                logger.error(actionMessageCreator.deleteErrorMessage(\"role\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n-            logger.info(actionMessages.deleteSuccessMessage(\"Role\", roleName));\n+            logger.info(actionMessageCreator.deleteSuccessMessage(\"Role\", roleName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n-        logger.error(actionMessages.deleteNotFoundMessage(\"Role\", id));\n+        logger.error(actionMessageCreator.deleteNotFoundMessage(\"Role\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MzkzOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501273939", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T19:58:51Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -65,6 +71,7 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n     @Override\n     public final ActionResponse<T> create(T resource) {\n         if (!authorizationManager.hasCreatePermission(context.name(), descriptorKey.getUniversalKey())) {\n+            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Create\"));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\nindex c09c64fb5..fdde9ee75 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n\n@@ -71,7 +71,7 @@ public abstract class AbstractResourceActions<T, M> implements LongIdResourceAct\n     @Override\n     public final ActionResponse<T> create(T resource) {\n         if (!authorizationManager.hasCreatePermission(context.name(), descriptorKey.getUniversalKey())) {\n-            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Create\"));\n+            logger.debug(String.format(FORBIDDEN_ACTION_FORMAT, \"Create\"));\n             return ActionResponse.createForbiddenResponse();\n         }\n         ValidationActionResponse validationResponse = validateWithoutChecks(resource);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NDExOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501274119", "bodyText": "This should be logged at DEBUG. As should all of the other new logs in this class.", "author": "gkillough", "createdAt": "2020-10-07T19:59:11Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -77,6 +84,7 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n     @Override\n     public final ActionResponse<M> getAll() {\n         if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n+            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Get all\"));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\nindex c09c64fb5..fdde9ee75 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java\n\n@@ -84,7 +84,7 @@ public abstract class AbstractResourceActions<T, M> implements LongIdResourceAct\n     @Override\n     public final ActionResponse<M> getAll() {\n         if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n-            logger.error(String.format(FORBIDDEN_ACTION_FORMAT, \"Get all\"));\n+            logger.debug(String.format(FORBIDDEN_ACTION_FORMAT, \"Get all\"));\n             return ActionResponse.createForbiddenResponse();\n         }\n         return readAllWithoutChecks();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NDMwMQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501274301", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T19:59:31Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/security/authorization/AuthorizationManager.java", "diffHunk": "@@ -180,8 +186,12 @@ private boolean currentUserAnyPermission(AccessOperation operation, Collection<P\n     private boolean currentUserHasPermission(AccessOperation operation, String context, String descriptorName) {\n         PermissionKey permissionKey = new PermissionKey(context, descriptorName);\n         Collection<String> roleNames = getCurrentUserRoleNames();\n-        return roleNames.stream()\n-                   .anyMatch(name -> permissionCache.containsKey(name) && permissionCache.get(name).hasPermission(permissionKey, operation));\n+        boolean hasPermission = roleNames.stream()\n+                                    .anyMatch(name -> permissionCache.containsKey(name) && permissionCache.get(name).hasPermission(permissionKey, operation));\n+        if (!hasPermission) {\n+            logger.info(String.format(\"User %s does not have permission: %s\", getCurrentUserName().get(), operation));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/security/authorization/AuthorizationManager.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/security/authorization/AuthorizationManager.java\nindex d68a158de..d8d12366e 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/security/authorization/AuthorizationManager.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/security/authorization/AuthorizationManager.java\n\n@@ -189,7 +189,7 @@ public class AuthorizationManager {\n         boolean hasPermission = roleNames.stream()\n                                     .anyMatch(name -> permissionCache.containsKey(name) && permissionCache.get(name).hasPermission(permissionKey, operation));\n         if (!hasPermission) {\n-            logger.info(String.format(\"User %s does not have permission: %s\", getCurrentUserName().get(), operation));\n+            logger.debug(String.format(\"User %s does not have permission: %s\", getCurrentUserName().get(), operation));\n         }\n         return hasPermission;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NDg1NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501274854", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:00:33Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -75,9 +81,12 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n             String roleName = resource.getRoleName();\n             Set<PermissionModel> permissions = resource.getPermissions();\n             PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n+            logger.info(actionMessages.createStartMessage(\"role\", roleName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -81,12 +81,12 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n             String roleName = resource.getRoleName();\n             Set<PermissionModel> permissions = resource.getPermissions();\n             PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n-            logger.info(actionMessages.createStartMessage(\"role\", roleName));\n+            logger.info(actionMessageCreator.createStartMessage(\"role\", roleName));\n             UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n-            logger.info(actionMessages.createSuccessMessage(\"Role\", roleName));\n+            logger.info(actionMessageCreator.createSuccessMessage(\"Role\", roleName));\n             return new ActionResponse<>(HttpStatus.OK, convertUserRoleModel(userRoleModel));\n         } catch (AlertException ex) {\n-            logger.error(actionMessages.createErrorMessage(\"role\", resource.getRoleName()));\n+            logger.error(actionMessageCreator.createErrorMessage(\"role\", resource.getRoleName()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the role. %s\", ex.getMessage()));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NDkzNQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501274935", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:00:41Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -75,9 +81,12 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n             String roleName = resource.getRoleName();\n             Set<PermissionModel> permissions = resource.getPermissions();\n             PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n+            logger.info(actionMessages.createStartMessage(\"role\", roleName));\n             UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n+            logger.info(actionMessages.createSuccessMessage(\"Role\", roleName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -81,12 +81,12 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n             String roleName = resource.getRoleName();\n             Set<PermissionModel> permissions = resource.getPermissions();\n             PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n-            logger.info(actionMessages.createStartMessage(\"role\", roleName));\n+            logger.info(actionMessageCreator.createStartMessage(\"role\", roleName));\n             UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n-            logger.info(actionMessages.createSuccessMessage(\"Role\", roleName));\n+            logger.info(actionMessageCreator.createSuccessMessage(\"Role\", roleName));\n             return new ActionResponse<>(HttpStatus.OK, convertUserRoleModel(userRoleModel));\n         } catch (AlertException ex) {\n-            logger.error(actionMessages.createErrorMessage(\"role\", resource.getRoleName()));\n+            logger.error(actionMessageCreator.createErrorMessage(\"role\", resource.getRoleName()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the role. %s\", ex.getMessage()));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NTAyMg==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501275022", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:00:50Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -88,13 +97,18 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n                                                    .stream()\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n+            String roleName = existingRole.get().getName();\n             try {\n+                logger.info(actionMessages.deleteStartMessage(\"role\", roleName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -99,16 +99,16 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n         if (existingRole.isPresent()) {\n             String roleName = existingRole.get().getName();\n             try {\n-                logger.info(actionMessages.deleteStartMessage(\"role\", roleName));\n+                logger.info(actionMessageCreator.deleteStartMessage(\"role\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.deleteErrorMessage(\"role\", existingRole.get().getName()));\n+                logger.error(actionMessageCreator.deleteErrorMessage(\"role\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n-            logger.info(actionMessages.deleteSuccessMessage(\"Role\", roleName));\n+            logger.info(actionMessageCreator.deleteSuccessMessage(\"Role\", roleName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n-        logger.error(actionMessages.deleteNotFoundMessage(\"Role\", id));\n+        logger.error(actionMessageCreator.deleteNotFoundMessage(\"Role\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NTA3OA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501275078", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:00:58Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -88,13 +97,18 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n                                                    .stream()\n                                                    .findFirst();\n         if (existingRole.isPresent()) {\n+            String roleName = existingRole.get().getName();\n             try {\n+                logger.info(actionMessages.deleteStartMessage(\"role\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.deleteErrorMessage(\"role\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n+            logger.info(actionMessages.deleteSuccessMessage(\"Role\", roleName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -99,16 +99,16 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n         if (existingRole.isPresent()) {\n             String roleName = existingRole.get().getName();\n             try {\n-                logger.info(actionMessages.deleteStartMessage(\"role\", roleName));\n+                logger.info(actionMessageCreator.deleteStartMessage(\"role\", roleName));\n                 authorizationManager.deleteRole(id);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.deleteErrorMessage(\"role\", existingRole.get().getName()));\n+                logger.error(actionMessageCreator.deleteErrorMessage(\"role\", existingRole.get().getName()));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n             }\n-            logger.info(actionMessages.deleteSuccessMessage(\"Role\", roleName));\n+            logger.info(actionMessageCreator.deleteSuccessMessage(\"Role\", roleName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n-        logger.error(actionMessages.deleteNotFoundMessage(\"Role\", id));\n+        logger.error(actionMessageCreator.deleteNotFoundMessage(\"Role\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NTE4NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501275184", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:01:07Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -128,16 +143,20 @@ protected ValidationActionResponse testWithoutChecks(RolePermissionModel resourc\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n+                logger.info(actionMessages.updateStartMessage(\"role\", existingRole.get().getName()));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -143,20 +143,20 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n-                logger.info(actionMessages.updateStartMessage(\"role\", existingRole.get().getName()));\n+                logger.info(actionMessageCreator.updateStartMessage(\"role\", existingRole.get().getName()));\n                 if (!existingRole.get().getName().equals(roleName)) {\n                     authorizationManager.updateRoleName(id, roleName);\n                 }\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n-                logger.info(actionMessages.updateSuccessMessage(\"Role\", roleName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"Role\", roleName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             }\n-            logger.error(actionMessages.updateNotFoundMessage(\"Role\", id));\n+            logger.error(actionMessageCreator.updateNotFoundMessage(\"Role\", id));\n             return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Role not found.\");\n         } catch (AlertException ex) {\n-            logger.error(actionMessages.updateErrorMessage(\"role\", resource.getRoleName()));\n+            logger.error(actionMessageCreator.updateErrorMessage(\"role\", resource.getRoleName()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NTI5MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501275291", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:01:20Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -128,16 +143,20 @@ protected ValidationActionResponse testWithoutChecks(RolePermissionModel resourc\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n+                logger.info(actionMessages.updateStartMessage(\"role\", existingRole.get().getName()));\n                 if (!existingRole.get().getName().equals(roleName)) {\n                     authorizationManager.updateRoleName(id, roleName);\n                 }\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n+                logger.info(actionMessages.updateSuccessMessage(\"Role\", roleName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -143,20 +143,20 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n-                logger.info(actionMessages.updateStartMessage(\"role\", existingRole.get().getName()));\n+                logger.info(actionMessageCreator.updateStartMessage(\"role\", existingRole.get().getName()));\n                 if (!existingRole.get().getName().equals(roleName)) {\n                     authorizationManager.updateRoleName(id, roleName);\n                 }\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n-                logger.info(actionMessages.updateSuccessMessage(\"Role\", roleName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"Role\", roleName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             }\n-            logger.error(actionMessages.updateNotFoundMessage(\"Role\", id));\n+            logger.error(actionMessageCreator.updateNotFoundMessage(\"Role\", id));\n             return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Role not found.\");\n         } catch (AlertException ex) {\n-            logger.error(actionMessages.updateErrorMessage(\"role\", resource.getRoleName()));\n+            logger.error(actionMessageCreator.updateErrorMessage(\"role\", resource.getRoleName()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NTM1MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501275351", "bodyText": "This should be logged at WARN.", "author": "gkillough", "createdAt": "2020-10-07T20:01:28Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -128,16 +143,20 @@ protected ValidationActionResponse testWithoutChecks(RolePermissionModel resourc\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n+                logger.info(actionMessages.updateStartMessage(\"role\", existingRole.get().getName()));\n                 if (!existingRole.get().getName().equals(roleName)) {\n                     authorizationManager.updateRoleName(id, roleName);\n                 }\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n+                logger.info(actionMessages.updateSuccessMessage(\"Role\", roleName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             }\n+            logger.error(actionMessages.updateNotFoundMessage(\"Role\", id));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\nindex 582410967..29a45b22c 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n\n@@ -143,20 +143,20 @@ public class RoleActions extends AbstractResourceActions<RolePermissionModel, Mu\n                                                        .stream()\n                                                        .findFirst();\n             if (existingRole.isPresent()) {\n-                logger.info(actionMessages.updateStartMessage(\"role\", existingRole.get().getName()));\n+                logger.info(actionMessageCreator.updateStartMessage(\"role\", existingRole.get().getName()));\n                 if (!existingRole.get().getName().equals(roleName)) {\n                     authorizationManager.updateRoleName(id, roleName);\n                 }\n                 Set<PermissionModel> permissions = resource.getPermissions();\n                 PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n                 authorizationManager.updatePermissionsForRole(roleName, permissionMatrixModel);\n-                logger.info(actionMessages.updateSuccessMessage(\"Role\", roleName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"Role\", roleName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             }\n-            logger.error(actionMessages.updateNotFoundMessage(\"Role\", id));\n+            logger.error(actionMessageCreator.updateNotFoundMessage(\"Role\", id));\n             return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Role not found.\");\n         } catch (AlertException ex) {\n-            logger.error(actionMessages.updateErrorMessage(\"role\", resource.getRoleName()));\n+            logger.error(actionMessageCreator.updateErrorMessage(\"role\", resource.getRoleName()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjA0NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276045", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:02:53Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -130,6 +136,7 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n             String password = resource.getPassword();\n             String emailAddress = resource.getEmailAddress();\n \n+            logger.info(actionMessages.createStartMessage(\"user\", userName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -136,7 +136,7 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n             String password = resource.getPassword();\n             String emailAddress = resource.getEmailAddress();\n \n-            logger.info(actionMessages.createStartMessage(\"user\", userName));\n+            logger.info(actionMessageCreator.createStartMessage(\"user\", userName));\n             UserModel userModel = userAccessor.addUser(userName, password, emailAddress);\n             Long userId = userModel.getId();\n             Set<String> configuredRoleNames = resource.getRoleNames();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjA5OQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276099", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:02:58Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -140,8 +147,10 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 authorizationManager.updateUserRoles(userId, roleNames);\n             }\n             userModel = userAccessor.getUser(userId).orElse(userModel);\n+            logger.info(actionMessages.createSuccessMessage(\"User\", userName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -147,10 +147,10 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 authorizationManager.updateUserRoles(userId, roleNames);\n             }\n             userModel = userAccessor.getUser(userId).orElse(userModel);\n-            logger.info(actionMessages.createSuccessMessage(\"User\", userName));\n+            logger.info(actionMessageCreator.createSuccessMessage(\"User\", userName));\n             return new ActionResponse<>(HttpStatus.CREATED, convertToCustomUserRoleModel(userModel));\n         } catch (AlertException ex) {\n-            logger.error(actionMessages.createErrorMessage(\"user\", resource.getUsername()));\n+            logger.error(actionMessageCreator.createErrorMessage(\"user\", resource.getUsername()));\n             return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the user. %s\", ex.getMessage()));\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjE1Mw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276153", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:03:04Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -158,6 +167,7 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n \n             UserModel newUserModel = UserModel.existingUser(existingUser.getId(), userName, password, emailAddress, existingUser.getAuthenticationType(), existingUser.getRoles(), existingUser.isEnabled());\n             try {\n+                logger.info(actionMessages.updateStartMessage(\"user\", userName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -167,7 +167,7 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n \n             UserModel newUserModel = UserModel.existingUser(existingUser.getId(), userName, password, emailAddress, existingUser.getAuthenticationType(), existingUser.getRoles(), existingUser.isEnabled());\n             try {\n-                logger.info(actionMessages.updateStartMessage(\"user\", userName));\n+                logger.info(actionMessageCreator.updateStartMessage(\"user\", userName));\n                 userAccessor.updateUser(newUserModel, passwordMissing);\n                 Set<String> configuredRoleNames = resource.getRoleNames();\n                 if (null != configuredRoleNames && !configuredRoleNames.isEmpty()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjIwOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276208", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:03:11Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,25 +180,33 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -180,14 +180,14 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n+                logger.error(actionMessageCreator.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n-        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n+        logger.error(actionMessageCreator.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjM3NA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276374", "bodyText": "This should be logged at WARN.", "author": "gkillough", "createdAt": "2020-10-07T20:03:29Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,25 +180,33 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n+        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -180,14 +180,14 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n+                logger.error(actionMessageCreator.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n-        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n+        logger.error(actionMessageCreator.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjQ5MA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276490", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:03:43Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,25 +180,33 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n+        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n     @Override\n     protected ActionResponse<UserConfig> deleteWithoutChecks(Long id) {\n         Optional<UserModel> user = userAccessor.getUser(id);\n         if (user.isPresent()) {\n+            String userName = user.get().getName();\n             try {\n+                logger.info(actionMessages.deleteStartMessage(\"user\", userName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -180,14 +180,14 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n+                logger.error(actionMessageCreator.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n-        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n+        logger.error(actionMessageCreator.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjU0Ng==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276546", "bodyText": "This should be logged at DEBUG.", "author": "gkillough", "createdAt": "2020-10-07T20:03:51Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,25 +180,33 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n+        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n     @Override\n     protected ActionResponse<UserConfig> deleteWithoutChecks(Long id) {\n         Optional<UserModel> user = userAccessor.getUser(id);\n         if (user.isPresent()) {\n+            String userName = user.get().getName();\n             try {\n+                logger.info(actionMessages.deleteStartMessage(\"user\", userName));\n                 userAccessor.deleteUser(id);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.deleteErrorMessage(\"user\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n+            logger.info(actionMessages.deleteSuccessMessage(\"User\", userName));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -180,14 +180,14 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n+                logger.error(actionMessageCreator.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n-        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n+        logger.error(actionMessageCreator.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3NjYwOA==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1210#discussion_r501276608", "bodyText": "This should be logged at WARN.", "author": "gkillough", "createdAt": "2020-10-07T20:03:58Z", "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -170,25 +180,33 @@ protected ValidationActionResponse validateWithoutChecks(UserConfig resource) {\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n+                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n+        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n     @Override\n     protected ActionResponse<UserConfig> deleteWithoutChecks(Long id) {\n         Optional<UserModel> user = userAccessor.getUser(id);\n         if (user.isPresent()) {\n+            String userName = user.get().getName();\n             try {\n+                logger.info(actionMessages.deleteStartMessage(\"user\", userName));\n                 userAccessor.deleteUser(id);\n             } catch (AlertException ex) {\n+                logger.error(actionMessages.deleteErrorMessage(\"user\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n+            logger.info(actionMessages.deleteSuccessMessage(\"User\", userName));\n             return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n+        logger.error(actionMessages.deleteNotFoundMessage(\"User\", id));", "originalCommit": "e2ffae52fed487a173d3a96568dacb110fe585b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "chunk": "diff --git a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\nindex 22bfa19bd..01fe343d1 100644\n--- a/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n+++ b/src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java\n\n@@ -180,14 +180,14 @@ public class UserActions extends AbstractResourceActions<UserConfig, MultiUserCo\n                 UserConfig user = userAccessor.getUser(id)\n                                       .map(this::convertToCustomUserRoleModel)\n                                       .orElse(resource);\n-                logger.info(actionMessages.updateSuccessMessage(\"User\", userName));\n+                logger.info(actionMessageCreator.updateSuccessMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.NO_CONTENT);\n             } catch (AlertException ex) {\n-                logger.error(actionMessages.updateErrorMessage(\"User\", userName));\n+                logger.error(actionMessageCreator.updateErrorMessage(\"User\", userName));\n                 return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n             }\n         }\n-        logger.error(actionMessages.updateNotFoundMessage(\"User\", id));\n+        logger.error(actionMessageCreator.updateNotFoundMessage(\"User\", id));\n         return new ActionResponse<>(HttpStatus.NOT_FOUND);\n     }\n \n"}}, {"oid": "079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/079eabcc1ddc60d0c23dc9e1163455eeb6fa3633", "message": "refactor: Rename ActionMessageCreator", "committedDate": "2020-10-07T20:17:22Z", "type": "commit"}, {"oid": "b4de18eaca6bd134663fcad1af07125147d0d42d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b4de18eaca6bd134663fcad1af07125147d0d42d", "message": "refactor: update logging level for actions", "committedDate": "2020-10-07T21:10:48Z", "type": "commit"}]}