{"pr_number": 1203, "pr_title": "Validate required related fields in custom actions", "pr_createdAt": "2020-10-01T19:48:51Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/1203", "timeline": [{"oid": "3cfc6c1535496b5daa1ef1dc5d6d41e1b68d8e6d", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3cfc6c1535496b5daa1ef1dc5d6d41e1b68d8e6d", "message": "Fix(Field Processing): Commonize field processing components", "committedDate": "2020-10-01T14:48:57Z", "type": "commit"}, {"oid": "d159ed62b4b8d236f3e3335eea5e1e2eda6116b3", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d159ed62b4b8d236f3e3335eea5e1e2eda6116b3", "message": "Fix(Custom Function Actions): Add related field validation to custom function actions", "committedDate": "2020-10-01T16:35:14Z", "type": "commit"}, {"oid": "4e3c335a42ef36df1f7d6769e984345db1e875f0", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4e3c335a42ef36df1f7d6769e984345db1e875f0", "message": "Merge branch 'master' into gk_validate_related_fields_custom_endpoints", "committedDate": "2020-10-01T19:10:58Z", "type": "commit"}, {"oid": "c06327b936ec7c1b9d8eb37c2d4a49564575fdfa", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c06327b936ec7c1b9d8eb37c2d4a49564575fdfa", "message": "Fix(CustomActions): Include required related field validation in custom actions", "committedDate": "2020-10-01T19:46:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3Nzg3Nw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1203#discussion_r498477877", "bodyText": "This function is the primary change, most of the other changes are related to updating autowired constructor params.", "author": "gkillough", "createdAt": "2020-10-01T19:49:36Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java", "diffHunk": "@@ -22,28 +22,53 @@\n  */\n package com.synopsys.integration.alert.common.action;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n import org.springframework.http.HttpStatus;\n import org.springframework.web.server.ResponseStatusException;\n \n+import com.github.jsonldjava.shaded.com.google.common.base.Predicate;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.FieldStatusSeverity;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validation.FieldValidationUtility;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.common.util.DataStructureUtils;\n import com.synopsys.integration.exception.IntegrationException;\n \n public abstract class CustomFunctionAction<T> {\n     public static final String API_FUNCTION_URL = \"/api/function\";\n-    private AuthorizationManager authorizationManager;\n \n-    public CustomFunctionAction(AuthorizationManager authorizationManager) {\n+    private final String fieldKey;\n+    private final AuthorizationManager authorizationManager;\n+    private final DescriptorProcessor descriptorProcessor;\n+    private final FieldValidationUtility fieldValidationUtility;\n+\n+    public CustomFunctionAction(String fieldKey, AuthorizationManager authorizationManager, DescriptorProcessor descriptorProcessor, FieldValidationUtility fieldValidationUtility) {\n+        this.fieldKey = fieldKey;\n         this.authorizationManager = authorizationManager;\n+        this.descriptorProcessor = descriptorProcessor;\n+        this.fieldValidationUtility = fieldValidationUtility;\n     }\n \n     public ActionResponse<T> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {", "originalCommit": "4e3c335a42ef36df1f7d6769e984345db1e875f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bfb754c442228e676641f58324526ffbed1e5e82", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\nindex 2afbce256..11648db33 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\n\n@@ -22,25 +22,28 @@\n  */\n package com.synopsys.integration.alert.common.action;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.springframework.http.HttpStatus;\n import org.springframework.web.server.ResponseStatusException;\n \n-import com.github.jsonldjava.shaded.com.google.common.base.Predicate;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.FieldStatusSeverity;\n import com.synopsys.integration.alert.common.descriptor.config.field.validation.FieldValidationUtility;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n-import com.synopsys.integration.alert.common.util.DataStructureUtils;\n import com.synopsys.integration.exception.IntegrationException;\n \n public abstract class CustomFunctionAction<T> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3ODU3MQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1203#discussion_r498478571", "bodyText": "This file contains some secondary changes. It is primarily making more methods public and updating the return types instead of modifying input parameters.", "author": "gkillough", "createdAt": "2020-10-01T19:51:09Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validation/FieldValidationUtility.java", "diffHunk": "@@ -33,14 +33,13 @@\n \n import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.descriptor.config.field.validators.ValidationResult;\n import com.synopsys.integration.alert.common.enumeration.FieldType;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n \n @Component\n-public class FieldValidationAction {\n-    private final Logger logger = LoggerFactory.getLogger(FieldValidationAction.class);\n+public class FieldValidationUtility {", "originalCommit": "4e3c335a42ef36df1f7d6769e984345db1e875f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9548ee54b7b4a97ab3fa03b82818036f655a7272", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validation/FieldValidationUtility.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validation/FieldValidationUtility.java\nindex 0153e06d6..1b7dfa165 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validation/FieldValidationUtility.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validation/FieldValidationUtility.java\n\n@@ -41,32 +42,47 @@ import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n public class FieldValidationUtility {\n     private final Logger logger = LoggerFactory.getLogger(FieldValidationUtility.class);\n \n-    public List<AlertFieldStatus> validateConfig(Map<String, ConfigField> descriptorFields, FieldModel fieldModel) {\n+    public List<AlertFieldStatus> validateConfig(Map<String, ConfigField> fieldKeyToConfigField, FieldModel fieldModel) {\n+        return validateConfig(fieldKeyToConfigField, List.of(fieldModel));\n+    }\n+\n+    public List<AlertFieldStatus> validateConfig(Map<String, ConfigField> fieldKeyToConfigField, Collection<FieldModel> fieldModels) {\n         logger.debug(\"Begin validating fields in configuration field model.\");\n         List<AlertFieldStatus> fieldStatuses = new ArrayList<>();\n-        for (ConfigField field : descriptorFields.values()) {\n-            List<AlertFieldStatus> fieldValidationResults = validateConfigField(field, fieldModel, descriptorFields);\n+        for (ConfigField field : fieldKeyToConfigField.values()) {\n+            List<AlertFieldStatus> fieldValidationResults = validateConfigField(field, fieldModels, fieldKeyToConfigField);\n             fieldStatuses.addAll(fieldValidationResults);\n         }\n         logger.debug(\"Finished validating fields in configuration field model.\");\n         return fieldStatuses;\n     }\n \n-    public List<AlertFieldStatus> validateConfigField(ConfigField fieldToValidate, FieldModel fieldModel, Map<String, ConfigField> descriptorFields) {\n+    public List<AlertFieldStatus> validateConfigField(ConfigField fieldToValidate, FieldModel fieldModel, Map<String, ConfigField> fieldKeyToConfigField) {\n+        return validateConfigField(fieldToValidate, List.of(fieldModel), fieldKeyToConfigField);\n+    }\n+\n+    public List<AlertFieldStatus> validateConfigField(ConfigField fieldToValidate, Collection<FieldModel> fieldModels, Map<String, ConfigField> fieldKeyToConfigField) {\n         List<AlertFieldStatus> fieldStatuses = new ArrayList<>();\n         String key = fieldToValidate.getKey();\n         logger.debug(\"Validating descriptor field: {}\", key);\n-        Optional<FieldValueModel> optionalFieldValue = fieldModel.getFieldValueModel(key);\n+        Optional<FieldValueModel> optionalFieldValue = getFieldValue(key, fieldModels);\n         if (optionalFieldValue.isPresent()) {\n             // field is present now validate the field\n             logger.debug(\"FieldModel contains '{}'\", key);\n             FieldValueModel fieldValueModel = optionalFieldValue.get();\n             if (hasValueOrChecked(fieldValueModel, fieldToValidate.getType())) {\n-                List<AlertFieldStatus> relatedFieldErrors = validateRelatedFields(fieldToValidate, descriptorFields, fieldModel);\n+                List<AlertFieldStatus> relatedFieldErrors = validateRelatedFields(fieldToValidate, fieldKeyToConfigField, fieldModels);\n                 fieldStatuses.addAll(relatedFieldErrors);\n             }\n \n-            ValidationResult validationResult = fieldToValidate.validate(fieldValueModel, fieldModel);\n+            Optional<FieldModel> sourceFieldModel = getSourceFieldModel(key, fieldModels);\n+            ValidationResult validationResult;\n+            if (sourceFieldModel.isPresent()) {\n+                validationResult = fieldToValidate.validate(fieldValueModel, sourceFieldModel.get());\n+            } else {\n+                validationResult = ValidationResult.success();\n+            }\n+\n             logger.debug(\"Validating '{}' errors: {}\", key, validationResult);\n             if (validationResult.hasErrors()) {\n                 fieldStatuses.add(AlertFieldStatus.error(key, validationResult.combineErrorMessages()));\n"}}, {"oid": "68eb83f1d704181194d8eb655bd0784929d57fb2", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/68eb83f1d704181194d8eb655bd0784929d57fb2", "message": "Fix(ConfigField): Replace applyRequiredRelatedField in endpoint select", "committedDate": "2020-10-01T20:16:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1OTA1NQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1203#discussion_r498759055", "bodyText": "I think you want to use Java's Predicate and not this Predicate object.", "author": "psantos1113", "createdAt": "2020-10-02T11:11:52Z", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java", "diffHunk": "@@ -22,28 +22,53 @@\n  */\n package com.synopsys.integration.alert.common.action;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n import org.springframework.http.HttpStatus;\n import org.springframework.web.server.ResponseStatusException;\n \n+import com.github.jsonldjava.shaded.com.google.common.base.Predicate;", "originalCommit": "68eb83f1d704181194d8eb655bd0784929d57fb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4MjcxMw==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1203#discussion_r498782713", "bodyText": "Wow, good catch. Why is this even a suggestion from Intellij haha?", "author": "gkillough", "createdAt": "2020-10-02T12:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1OTA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bfb754c442228e676641f58324526ffbed1e5e82", "chunk": "diff --git a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\nindex 622550de3..11648db33 100644\n--- a/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\n+++ b/alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java\n\n@@ -22,25 +22,28 @@\n  */\n package com.synopsys.integration.alert.common.action;\n \n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Predicate;\n import java.util.stream.Collectors;\n \n import org.springframework.http.HttpStatus;\n import org.springframework.web.server.ResponseStatusException;\n \n-import com.github.jsonldjava.shaded.com.google.common.base.Predicate;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.FieldStatusSeverity;\n import com.synopsys.integration.alert.common.descriptor.config.field.validation.FieldValidationUtility;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n-import com.synopsys.integration.alert.common.util.DataStructureUtils;\n import com.synopsys.integration.exception.IntegrationException;\n \n public abstract class CustomFunctionAction<T> {\n"}}, {"oid": "bfb754c442228e676641f58324526ffbed1e5e82", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bfb754c442228e676641f58324526ffbed1e5e82", "message": "Fix(CustomFunctionAction): Get all possible config fields for field model context to account for distribution jobs having multiple descriptors", "committedDate": "2020-10-02T14:31:00Z", "type": "commit"}, {"oid": "02e7947813f123e839595fd0884c3b4c82aac180", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/02e7947813f123e839595fd0884c3b4c82aac180", "message": "Fix(Config Fields): Add logic to prevent collisions of ConfigFields in validation", "committedDate": "2020-10-02T15:39:28Z", "type": "commit"}, {"oid": "9548ee54b7b4a97ab3fa03b82818036f655a7272", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9548ee54b7b4a97ab3fa03b82818036f655a7272", "message": "Fix(Field Validation): Ensure all job models are available for extracting related fields during validation", "committedDate": "2020-10-02T17:10:11Z", "type": "commit"}]}