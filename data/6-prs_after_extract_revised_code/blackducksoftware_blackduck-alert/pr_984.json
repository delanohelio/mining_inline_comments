{"pr_number": 984, "pr_title": "DefaultConfigurationAccessor tests", "pr_createdAt": "2020-05-20T12:46:36Z", "pr_url": "https://github.com/blackducksoftware/blackduck-alert/pull/984", "timeline": [{"oid": "9d3dd1314ef657fb9d4c89ee608a1441e8edd3ab", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9d3dd1314ef657fb9d4c89ee608a1441e8edd3ab", "message": "test: Increasing test coverage for DefaultConfigurationAccessor", "committedDate": "2020-05-15T18:21:41Z", "type": "commit"}, {"oid": "431cee4f127151d9bc99d6ef6cc8e8eadb9bf364", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/431cee4f127151d9bc99d6ef6cc8e8eadb9bf364", "message": "test: Implementing improvements based on feedback", "committedDate": "2020-05-19T19:28:10Z", "type": "commit"}, {"oid": "125d1bb11e49f4c366b839067ffecea47043dbb9", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/125d1bb11e49f4c366b839067ffecea47043dbb9", "message": "Merge remote-tracking branch 'origin/master' into mc_alertdb_tests", "committedDate": "2020-05-19T19:30:18Z", "type": "commit"}, {"oid": "be068c7629cdca6b563be70d56a375380c4cf3d5", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/be068c7629cdca6b563be70d56a375380c4cf3d5", "message": "test: Replacing instance of Date objects", "committedDate": "2020-05-19T19:44:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODIxOQ==", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984#discussion_r428058219", "bodyText": "Can you add messages in all of the fail() method calls? With a brief explanation?", "author": "jamesrichard91", "createdAt": "2020-05-20T14:28:16Z", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessorTest.java", "diffHunk": "@@ -0,0 +1,701 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.AlertProperties;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.FilePersistenceUtil;\n+import com.synopsys.integration.alert.common.security.EncryptionUtility;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.ConfigContextEntity;\n+import com.synopsys.integration.alert.database.configuration.ConfigGroupEntity;\n+import com.synopsys.integration.alert.database.configuration.DefinedFieldEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorConfigEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorTypeEntity;\n+import com.synopsys.integration.alert.database.configuration.FieldValueEntity;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigContextRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigGroupRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DefinedFieldRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorConfigRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorTypeRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.FieldValueRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+\n+public class DefaultConfigurationAccessorTest {\n+    private static final String TEST_PASSWORD = \"testPassword\";\n+    private static final String TEST_SALT = \"testSalt\";\n+    private static final String TEST_DIRECTORY = \"./testDB\";\n+    private static final String TEST_SECRETS_DIRECTORY = \"./testDB/run/secrets\";\n+\n+    private AlertProperties alertProperties;\n+    private FilePersistenceUtil filePersistenceUtil;\n+\n+    private ConfigGroupRepository configGroupRepository;\n+    private DescriptorConfigRepository descriptorConfigRepository;\n+    private ConfigContextRepository configContextRepository;\n+    private FieldValueRepository fieldValueRepository;\n+    private DefinedFieldRepository definedFieldRepository;\n+    private RegisteredDescriptorRepository registeredDescriptorRepository;\n+    private DescriptorTypeRepository descriptorTypeRepository;\n+    private EncryptionUtility encryptionUtility;\n+\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldValue = \"testFieldValue\";\n+    private final String fieldKey = \"channel.common.name\";\n+\n+    @BeforeEach\n+    public void init() {\n+        configGroupRepository = Mockito.mock(ConfigGroupRepository.class);\n+        descriptorConfigRepository = Mockito.mock(DescriptorConfigRepository.class);\n+        configContextRepository = Mockito.mock(ConfigContextRepository.class);\n+        fieldValueRepository = Mockito.mock(FieldValueRepository.class);\n+        definedFieldRepository = Mockito.mock(DefinedFieldRepository.class);\n+        registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+        encryptionUtility = createEncryptionUtility();\n+    }\n+\n+    @Test\n+    public void getAllJobsTest() {\n+        UUID uuid = UUID.randomUUID();\n+\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(1L, uuid);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(2L, 2L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(3L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        FieldValueEntity fieldValueEntity = new FieldValueEntity(3L, 4L, fieldValue);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+\n+        Mockito.when(configGroupRepository.findAll()).thenReturn(List.of(configGroupEntity));\n+        setupGetJobMocks(descriptorConfigEntity, configContextEntity, fieldValueEntity, definedFieldEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository, fieldValueRepository,\n+            encryptionUtility);\n+        List<ConfigurationJobModel> configurationJobModelList = configurationAccessor.getAllJobs();\n+\n+        assertEquals(1, configurationJobModelList.size());\n+        ConfigurationJobModel configurationJobModel = configurationJobModelList.get(0);\n+        assertEquals(uuid, configurationJobModel.getJobId());\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void getJobByIdTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(1L, jobId);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(2L, 2L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(3L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        FieldValueEntity fieldValueEntity = new FieldValueEntity(3L, 4L, fieldValue);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+\n+        Mockito.when(configGroupRepository.findByJobId(Mockito.any())).thenReturn(List.of(configGroupEntity));\n+        setupGetJobMocks(descriptorConfigEntity, configContextEntity, fieldValueEntity, definedFieldEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository, fieldValueRepository,\n+            encryptionUtility);\n+        Optional<ConfigurationJobModel> configurationJobModelOptional = configurationAccessor.getJobById(jobId);\n+\n+        assertTrue(configurationJobModelOptional.isPresent());\n+        ConfigurationJobModel configurationJobModel = configurationJobModelOptional.get();\n+        assertEquals(jobId, configurationJobModel.getJobId());\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void getJobsByFrequency() {\n+        FrequencyType frequencyType = FrequencyType.DAILY;\n+        final Long jobId = 1L;\n+        UUID uuid = UUID.randomUUID();\n+        String fieldValueFrequency = frequencyType.name();\n+        final String fieldKeyFrequency = \"channel.common.frequency\";\n+\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(jobId, uuid);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(2L, 2L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(3L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        FieldValueEntity fieldValueEntity = new FieldValueEntity(3L, 4L, fieldValueFrequency);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKeyFrequency, false);\n+        definedFieldEntity.setId(4L);\n+\n+        Mockito.when(configGroupRepository.findAll()).thenReturn(List.of(configGroupEntity));\n+        setupGetJobMocks(descriptorConfigEntity, configContextEntity, fieldValueEntity, definedFieldEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository, fieldValueRepository,\n+            encryptionUtility);\n+        List<ConfigurationJobModel> configurationJobModelList = configurationAccessor.getJobsByFrequency(frequencyType);\n+\n+        assertEquals(1, configurationJobModelList.size());\n+        ConfigurationJobModel configurationJobModel = configurationJobModelList.get(0);\n+        assertEquals(uuid, configurationJobModel.getJobId());\n+        assertEquals(fieldValueFrequency, configurationJobModel.getFrequencyType().name());\n+    }\n+\n+    @Test\n+    public void getJobByIdNullTest() throws Exception {\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, null, null, null, null, null, null);\n+        try {\n+            configurationAccessor.getJobById(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void createJobTest() throws Exception {\n+        List<String> descriptorNames = List.of(\"descriptor-name-test\");\n+\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(\"channel.common.name\");\n+        configurationFieldModel.setFieldValue(fieldValue);\n+        List<ConfigurationFieldModel> configuredFields = List.of(configurationFieldModel);\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(\"name\", 1L);\n+        registeredDescriptorEntity.setId(2L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        configContextEntity.setId(3L);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(5L, 6L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(5L);\n+\n+        setupCreateJobMocks(registeredDescriptorEntity, configContextEntity, definedFieldEntity, descriptorConfigEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(registeredDescriptorRepository, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository,\n+            fieldValueRepository, null);\n+        ConfigurationJobModel configurationJobModel = configurationAccessor.createJob(descriptorNames, configuredFields);\n+\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void updateJobTest() throws Exception {\n+        UUID uuid = UUID.randomUUID();\n+        List<String> descriptorNames = List.of(\"descriptor-name-test\");\n+\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(\"channel.common.name\");\n+        configurationFieldModel.setFieldValue(fieldValue);\n+        List<ConfigurationFieldModel> configuredFields = List.of(configurationFieldModel);\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(\"name\", 1L);\n+        registeredDescriptorEntity.setId(2L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        configContextEntity.setId(3L);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(5L, 6L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(5L);\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(6L, uuid);\n+\n+        Mockito.when(configGroupRepository.findByJobId(Mockito.any())).thenReturn(List.of(configGroupEntity));\n+        setupCreateJobMocks(registeredDescriptorEntity, configContextEntity, definedFieldEntity, descriptorConfigEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(registeredDescriptorRepository, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository,\n+            fieldValueRepository, null);\n+        ConfigurationJobModel configurationJobModel = configurationAccessor.updateJob(uuid, descriptorNames, configuredFields);\n+\n+        Mockito.verify(descriptorConfigRepository).deleteById(Mockito.any());\n+        assertEquals(uuid, configurationJobModel.getJobId());\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void updateJobNullIdTest() throws Exception {\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, null, null, null, null, null, null);\n+        try {\n+            configurationAccessor.updateJob(null, null, null);\n+            fail();", "originalCommit": "be068c7629cdca6b563be70d56a375380c4cf3d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07f803a067e699cb4eca50e8e83343ac9186a352", "chunk": "diff --git a/alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessorTest.java b/alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessorTest.java\nindex afda6849d..3c3f5d73a 100644\n--- a/alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessorTest.java\n+++ b/alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessorTest.java\n\n@@ -160,7 +160,7 @@ public class DefaultConfigurationAccessorTest {\n         DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, null, null, null, null, null, null);\n         try {\n             configurationAccessor.getJobById(null);\n-            fail();\n+            fail(\"Null jobId did not throw expected AlertDatabaseConstraintException.\");\n         } catch (AlertDatabaseConstraintException e) {\n             assertNotNull(e);\n         }\n"}}, {"oid": "07f803a067e699cb4eca50e8e83343ac9186a352", "url": "https://github.com/blackducksoftware/blackduck-alert/commit/07f803a067e699cb4eca50e8e83343ac9186a352", "message": "test: Adding messages to assertion fail methods", "committedDate": "2020-05-20T14:57:01Z", "type": "commit"}]}