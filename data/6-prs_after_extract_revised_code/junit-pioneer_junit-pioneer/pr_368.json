{"pr_number": 368, "pr_title": "DisableIfArgument", "pr_createdAt": "2020-10-31T14:14:13Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/368", "timeline": [{"oid": "d99e74b0ad59b0f87772645e1b913855b41b7413", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d99e74b0ad59b0f87772645e1b913855b41b7413", "message": "Created PoC extension for disabling parameterized tests\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-09-26T07:14:48Z", "type": "commit"}, {"oid": "62bf604755b6462546e631b2009391eabcd344ca", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/62bf604755b6462546e631b2009391eabcd344ca", "message": "Merge branch 'master' into issue313/explore-invocation-interceptor", "committedDate": "2020-10-31T13:38:41Z", "type": "commit"}, {"oid": "d223cfd1596489d15221c2e71e75590e361cbfb6", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d223cfd1596489d15221c2e71e75590e361cbfb6", "message": "Replaced value() with contains() and matches()\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-31T14:09:24Z", "type": "commit"}, {"oid": "9574ea83dce2b4c14a0913e17b146b9b4366ec11", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9574ea83dce2b4c14a0913e17b146b9b4366ec11", "message": "Disable based on containing and RegEx\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-31T14:09:57Z", "type": "commit"}, {"oid": "0168cc15df4ba7d5fc3b7ddc9e1ce7fd83a84b42", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0168cc15df4ba7d5fc3b7ddc9e1ce7fd83a84b42", "message": "Updated tests\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-31T14:10:08Z", "type": "commit"}, {"oid": "c4e357622f56e41347b140e3b60c3534f4d65f08", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c4e357622f56e41347b140e3b60c3534f4d65f08", "message": "Spotless, no :(\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-10-31T14:10:32Z", "type": "commit"}, {"oid": "f9f46c8d6d6290c2bbc72f07e5e87e90a6a92a78", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f9f46c8d6d6290c2bbc72f07e5e87e90a6a92a78", "message": "Add documentation based on DisableIfDisplayName\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:18:03Z", "type": "commit"}, {"oid": "81fddd97f9565848f2bc59aafc8ffb116c66d5a4", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/81fddd97f9565848f2bc59aafc8ffb116c66d5a4", "message": "README.md updated to include contribution\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:18:28Z", "type": "commit"}, {"oid": "98663ed3122bc85a65555e745c89c374f5e2f9c2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/98663ed3122bc85a65555e745c89c374f5e2f9c2", "message": "Simplify orElseThrow\n(no, not because this will make Sonar consider it 100% covered, why would you think that?)\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:19:37Z", "type": "commit"}, {"oid": "2cfc8c11f960cc91bc8a6e0cace0bdda64cf404b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2cfc8c11f960cc91bc8a6e0cace0bdda64cf404b", "message": "Update tests to include a poem (Oscar Wilde: Requiescat)\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:20:02Z", "type": "commit"}, {"oid": "b85e3e0be0cb5bf66d562916c155cea3d847d995", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b85e3e0be0cb5bf66d562916c155cea3d847d995", "message": "Update package-info.java with the new addition\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:24:14Z", "type": "commit"}, {"oid": "5643ebf0da2b99ec1998471fc2a67a60c693ca6c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5643ebf0da2b99ec1998471fc2a67a60c693ca6c", "message": "Fix comma typo\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:25:48Z", "type": "commit"}, {"oid": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "message": "Add references to contribution\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-02T17:28:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MzE1MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r516843151", "bodyText": "To me the messages is misleading. If the annotation is present, e.g. with contains, then for me it is specified, but as an empty set. I would rephrase to something like \"specified with at least one element, but both are empty\"", "author": "Bukama", "createdAt": "2020-11-03T17:37:32Z", "path": "src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+import org.opentest4j.TestAbortedException;\n+\n+class DisableIfParameterExtension implements InvocationInterceptor {\n+\n+\t@Override\n+\tpublic void interceptTestTemplateMethod(Invocation<Void> invocation,\n+\t\t\tReflectiveInvocationContext<Method> invocationContext, ExtensionContext extensionContext) throws Throwable {\n+\t\tMethod testMethod = extensionContext.getRequiredTestMethod();\n+\t\tDisableIfParameter annotation = AnnotationSupport\n+\t\t\t\t.findAnnotation(testMethod, DisableIfParameter.class)\n+\t\t\t\t.orElseThrow(() -> new ExtensionConfigurationException(\"@DisableIfParameter is missing\"));\n+\t\tif (annotation.contains().length == 0 && annotation.matches().length == 0)\n+\t\t\tthrow new ExtensionConfigurationException(\n+\t\t\t\tformat(\"%s requires that either `contains` or `matches` is specified, but both are empty.\",\n+\t\t\t\t\tDisableIfParameter.class.getSimpleName()));", "originalCommit": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\nindex 2e6048c..7dd913a 100644\n--- a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\n\n@@ -33,22 +33,28 @@ class DisableIfParameterExtension implements InvocationInterceptor {\n \t\t\t\t.orElseThrow(() -> new ExtensionConfigurationException(\"@DisableIfParameter is missing\"));\n \t\tif (annotation.contains().length == 0 && annotation.matches().length == 0)\n \t\t\tthrow new ExtensionConfigurationException(\n-\t\t\t\tformat(\"%s requires that either `contains` or `matches` is specified, but both are empty.\",\n+\t\t\t\tformat(\"%s requires that either `contains` or `matches` has at least one element, but both are empty.\",\n \t\t\t\t\tDisableIfParameter.class.getSimpleName()));\n-\t\t// Check if any argument contains any element from 'contains'\n-\t\tif (invocationContext\n-\t\t\t\t.getArguments()\n-\t\t\t\t.stream()\n-\t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.contains()).anyMatch(arg.toString()::contains)))\n-\t\t\tthrow new TestAbortedException(\"One or more arguments contained a value from the `contains` array.\");\n-\t\t// Check if any argument matches any element from 'matches'\n+\t\tcheckContains(invocationContext, annotation);\n+\t\tcheckMatches(invocationContext, annotation);\n+\t\tinvocation.proceed();\n+\t}\n+\n+\tprivate void checkMatches(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n \t\tif (invocationContext\n \t\t\t\t.getArguments()\n \t\t\t\t.stream()\n \t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.matches()).anyMatch(arg.toString()::matches)))\n \t\t\tthrow new TestAbortedException(\n \t\t\t\t\"One or more arguments matched a regular expression from the `matches` array.\");\n-\t\tinvocation.proceed();\n+\t}\n+\n+\tprivate void checkContains(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n+\t\tif (invocationContext\n+\t\t\t\t.getArguments()\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.contains()).anyMatch(arg.toString()::contains)))\n+\t\t\tthrow new TestAbortedException(\"One or more arguments contained a value from the `contains` array.\");\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NDEzNA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r516844134", "bodyText": "To other reviewers: I asked @Michael1993 to add those comments, while we was working on the extension on stream, because the two checks look realy the same, but differ in one word in the middle of them, which I didn't mention at the beginning. With the comments I think its more readable.", "author": "Bukama", "createdAt": "2020-11-03T17:39:08Z", "path": "src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+import org.opentest4j.TestAbortedException;\n+\n+class DisableIfParameterExtension implements InvocationInterceptor {\n+\n+\t@Override\n+\tpublic void interceptTestTemplateMethod(Invocation<Void> invocation,\n+\t\t\tReflectiveInvocationContext<Method> invocationContext, ExtensionContext extensionContext) throws Throwable {\n+\t\tMethod testMethod = extensionContext.getRequiredTestMethod();\n+\t\tDisableIfParameter annotation = AnnotationSupport\n+\t\t\t\t.findAnnotation(testMethod, DisableIfParameter.class)\n+\t\t\t\t.orElseThrow(() -> new ExtensionConfigurationException(\"@DisableIfParameter is missing\"));\n+\t\tif (annotation.contains().length == 0 && annotation.matches().length == 0)\n+\t\t\tthrow new ExtensionConfigurationException(\n+\t\t\t\tformat(\"%s requires that either `contains` or `matches` is specified, but both are empty.\",\n+\t\t\t\t\tDisableIfParameter.class.getSimpleName()));\n+\t\t// Check if any argument contains any element from 'contains'", "originalCommit": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\nindex 2e6048c..7dd913a 100644\n--- a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\n\n@@ -33,22 +33,28 @@ class DisableIfParameterExtension implements InvocationInterceptor {\n \t\t\t\t.orElseThrow(() -> new ExtensionConfigurationException(\"@DisableIfParameter is missing\"));\n \t\tif (annotation.contains().length == 0 && annotation.matches().length == 0)\n \t\t\tthrow new ExtensionConfigurationException(\n-\t\t\t\tformat(\"%s requires that either `contains` or `matches` is specified, but both are empty.\",\n+\t\t\t\tformat(\"%s requires that either `contains` or `matches` has at least one element, but both are empty.\",\n \t\t\t\t\tDisableIfParameter.class.getSimpleName()));\n-\t\t// Check if any argument contains any element from 'contains'\n-\t\tif (invocationContext\n-\t\t\t\t.getArguments()\n-\t\t\t\t.stream()\n-\t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.contains()).anyMatch(arg.toString()::contains)))\n-\t\t\tthrow new TestAbortedException(\"One or more arguments contained a value from the `contains` array.\");\n-\t\t// Check if any argument matches any element from 'matches'\n+\t\tcheckContains(invocationContext, annotation);\n+\t\tcheckMatches(invocationContext, annotation);\n+\t\tinvocation.proceed();\n+\t}\n+\n+\tprivate void checkMatches(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n \t\tif (invocationContext\n \t\t\t\t.getArguments()\n \t\t\t\t.stream()\n \t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.matches()).anyMatch(arg.toString()::matches)))\n \t\t\tthrow new TestAbortedException(\n \t\t\t\t\"One or more arguments matched a regular expression from the `matches` array.\");\n-\t\tinvocation.proceed();\n+\t}\n+\n+\tprivate void checkContains(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n+\t\tif (invocationContext\n+\t\t\t\t.getArguments()\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.contains()).anyMatch(arg.toString()::contains)))\n+\t\t\tthrow new TestAbortedException(\"One or more arguments contained a value from the `contains` array.\");\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NzkwNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r516847907", "bodyText": "I'm confused why\n\nyou don't check for the particular exceptions you throw\nWhy sonar claims full coverage (speaking of the part with the three different exceptions)\n\n\ud83e\udd37\u200d\u2642\ufe0f", "author": "Bukama", "createdAt": "2020-11-03T17:45:19Z", "path": "src/test/java/org/junitpioneer/jupiter/params/DisableIfParameterExtensionTests.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import static org.junitpioneer.testkit.assertion.PioneerAssert.assertThat;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import org.junitpioneer.testkit.ExecutionResults;\n+import org.junitpioneer.testkit.PioneerTestKit;\n+\n+/**\n+ * Oscar Wilde: Requiescat is in the public domain\n+ */\n+@DisplayName(\"DisableIfParameterExtension\")\n+class DisableIfParameterExtensionTests {\n+\n+\t@Nested\n+\t@DisplayName(\"when configured correctly\")\n+\tclass CorrectConfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"disables tests when parameter contains any value from the 'contains' array\")\n+\t\tvoid interceptContains() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(CorrectConfigTestCases.class, \"interceptContains\",\n+\t\t\t\t\t\tString.class);\n+\n+\t\t\tassertThat(results).hasNumberOfSucceededTests(2).hasNumberOfAbortedTests(2);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"disables tests when any parameter contains any value from the 'contains' array\")\n+\t\tvoid interceptContainsAny() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(CorrectConfigTestCases.class, \"interceptContainsAny\",\n+\t\t\t\t\t\tString.class, String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfAbortedTests(2);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"disables tests when parameter matches any regex from the 'matches' array\")\n+\t\tvoid interceptMatches() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(CorrectConfigTestCases.class, \"interceptMatches\",\n+\t\t\t\t\t\tString.class);\n+\n+\t\t\tassertThat(results).hasNumberOfSucceededTests(2).hasNumberOfAbortedTests(2);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"disables tests when any parameter matches any regex from the 'matches' array\")\n+\t\tvoid interceptMatchesAny() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(CorrectConfigTestCases.class, \"interceptMatchesAny\",\n+\t\t\t\t\t\tString.class, String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfAbortedTests(2);\n+\t\t}\n+\n+\t\t@Test\n+\t\t@DisplayName(\"disables tests if parameter matches regex from 'matches' or contains value from 'contains'\")\n+\t\tvoid interceptMatchesAndContains() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(CorrectConfigTestCases.class, \"interceptBoth\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfSucceededTests(1).hasNumberOfAbortedTests(3);\n+\t\t}\n+\n+\t}\n+\n+\t@Nested\n+\t@DisplayName(\"when not configured correctly\")\n+\tclass MisconfigurationTests {\n+\n+\t\t@Test\n+\t\t@DisplayName(\"throws an exception if both 'matches' and 'contains' is missing\")\n+\t\tvoid missingValues() {\n+\t\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t\t.executeTestMethodWithParameterTypes(BadConfigTestCases.class, \"missingValues\", String.class);\n+\n+\t\t\tassertThat(results).hasNumberOfFailedTests(3);\n+\t\t}\n+\n+\t}", "originalCommit": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTIxMzA2Mg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r519213062", "bodyText": "Do you mean the TestAbortedException?", "author": "Michael1993", "createdAt": "2020-11-07T20:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM1NDU4Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r519354587", "bodyText": "I mean you have three checks about misconfiguration you do in the extension, but only one test case and I don't get why SONAR does not complain \ud83e\udd37\u200d\u2642\ufe0f", "author": "Bukama", "createdAt": "2020-11-08T11:12:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1NTA5OA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r520355098", "bodyText": "It's line coverage, not part coverage. If the line is called, it's considered covered. Example:\n/* 100% coverage */\nOptional.of(new Object())\n.orElseThrow(() -> new RuntimeException(\"Never thrown!\"));\n\n/* < 100% coverage */\nOptional.of(new Object())\n.orElseThrow(\n    () -> new RuntimeException(\"Never thrown!\")\n);", "author": "Michael1993", "createdAt": "2020-11-10T07:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NzkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/params/DisableIfParameterExtensionTests.java b/src/test/java/org/junitpioneer/jupiter/params/DisableIfParameterExtensionTests.java\nindex bd79687..8755d87 100644\n--- a/src/test/java/org/junitpioneer/jupiter/params/DisableIfParameterExtensionTests.java\n+++ b/src/test/java/org/junitpioneer/jupiter/params/DisableIfParameterExtensionTests.java\n\n@@ -128,7 +128,7 @@ class DisableIfParameterExtensionTests {\n \t\t}\n \n \t\t@ParameterizedTest\n-\t\t@DisableIfParameter(contains = { \"sonnet\", \"life\" }, matches = \"^.*(.+)\\\\1.*$\")\n+\t\t@DisableIfParameter(contains = { \"sonnet\", \"life\" }, matches = \"^.*(Peace, )\\\\1.*$\")\n \t\t@ValueSource(strings = { \"Peace, Peace, she cannot hear\", \"Lyre or sonnet,\", \"All my life\u2019s buried here,\",\n \t\t\t\t\"Heap earth upon it.\" })\n \t\tvoid interceptBoth(String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE2NDEzNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r519164137", "bodyText": "Two suggestions:\n\n\nSince we are dealing with parameterized tests and also the annotation uses the term \"parameter\", we might want to adopt this instead of \"argument\" (even if the invocation context says getArguments()).\n\n\nMore a matter of taste, but you could split things up into several methods.\n\n\nExample:\n@Override\npublic void interceptTestTemplateMethod(Invocation<Void> invocation,\n\t\tReflectiveInvocationContext<Method> invocationContext, ExtensionContext extensionContext) throws Throwable {\n\tMethod testMethod = extensionContext.getRequiredTestMethod();\n\tDisableIfParameter annotation = AnnotationSupport\n\t\t\t.findAnnotation(testMethod, DisableIfParameter.class)\n\t\t\t.orElseThrow(() -> new ExtensionConfigurationException(\"@DisableIfParameter is missing\"));\n\tif (annotation.contains().length == 0 && annotation.matches().length == 0)\n\t\tthrow new ExtensionConfigurationException(\n\t\t\tformat(\"%s requires that either `contains` or `matches` is specified, but both are empty.\",\n\t\t\t\tDisableIfParameter.class.getSimpleName()));\n\ttestContains(invocationContext, annotation);\n\ttestMatches(invocationContext, annotation);\n\tinvocation.proceed();\n}\n\nprivate void testMatches(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n\tPredicate<Object> matchesParam = param -> Arrays\n\t\t\t.stream(annotation.matches())\n\t\t\t.anyMatch(param.toString()::matches);\n\tString matchesMessage = \"One or more parameters matched a regular expression from the `matches` array.\";\n\ttestParams(invocationContext, matchesParam, matchesMessage);\n}\n\nprivate void testContains(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n\tPredicate<Object> containsParam = param -> Arrays\n\t\t\t.stream(annotation.contains())\n\t\t\t.anyMatch(param.toString()::contains);\n\tString containsMessage = \"One or more parameters contained a value from the `contains` array.\";\n\ttestParams(invocationContext, containsParam, containsMessage);\n}\n\nprivate void testParams(ReflectiveInvocationContext<Method> invocationContext, Predicate<Object> predicate,\n\t\tString message) {\n\tif (invocationContext.getArguments().stream().anyMatch(predicate))\n\t\tthrow new TestAbortedException(message);\n}", "author": "beatngu13", "createdAt": "2020-11-07T10:48:40Z", "path": "src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+import org.opentest4j.TestAbortedException;\n+\n+class DisableIfParameterExtension implements InvocationInterceptor {\n+\n+\t@Override\n+\tpublic void interceptTestTemplateMethod(Invocation<Void> invocation,", "originalCommit": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\nindex 2e6048c..7dd913a 100644\n--- a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameterExtension.java\n\n@@ -33,22 +33,28 @@ class DisableIfParameterExtension implements InvocationInterceptor {\n \t\t\t\t.orElseThrow(() -> new ExtensionConfigurationException(\"@DisableIfParameter is missing\"));\n \t\tif (annotation.contains().length == 0 && annotation.matches().length == 0)\n \t\t\tthrow new ExtensionConfigurationException(\n-\t\t\t\tformat(\"%s requires that either `contains` or `matches` is specified, but both are empty.\",\n+\t\t\t\tformat(\"%s requires that either `contains` or `matches` has at least one element, but both are empty.\",\n \t\t\t\t\tDisableIfParameter.class.getSimpleName()));\n-\t\t// Check if any argument contains any element from 'contains'\n-\t\tif (invocationContext\n-\t\t\t\t.getArguments()\n-\t\t\t\t.stream()\n-\t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.contains()).anyMatch(arg.toString()::contains)))\n-\t\t\tthrow new TestAbortedException(\"One or more arguments contained a value from the `contains` array.\");\n-\t\t// Check if any argument matches any element from 'matches'\n+\t\tcheckContains(invocationContext, annotation);\n+\t\tcheckMatches(invocationContext, annotation);\n+\t\tinvocation.proceed();\n+\t}\n+\n+\tprivate void checkMatches(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n \t\tif (invocationContext\n \t\t\t\t.getArguments()\n \t\t\t\t.stream()\n \t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.matches()).anyMatch(arg.toString()::matches)))\n \t\t\tthrow new TestAbortedException(\n \t\t\t\t\"One or more arguments matched a regular expression from the `matches` array.\");\n-\t\tinvocation.proceed();\n+\t}\n+\n+\tprivate void checkContains(ReflectiveInvocationContext<Method> invocationContext, DisableIfParameter annotation) {\n+\t\tif (invocationContext\n+\t\t\t\t.getArguments()\n+\t\t\t\t.stream()\n+\t\t\t\t.anyMatch(arg -> Arrays.stream(annotation.contains()).anyMatch(arg.toString()::contains)))\n+\t\t\tthrow new TestAbortedException(\"One or more arguments contained a value from the `contains` array.\");\n \t}\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE2NTQ0NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r519165445", "bodyText": "Kudos for using <em> instead of <i>! \ud83d\udc4d", "author": "beatngu13", "createdAt": "2020-11-07T11:03:40Z", "path": "src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * {@code @DisableIfParameter} is a JUnit Jupiter extension that can\n+ * be used to selectively disable a {@link org.junit.jupiter.params.ParameterizedTest}\n+ * based on their parameter values as defined by {@link Object#toString()}.\n+ *\n+ * <p>The extension utilizes Jupiter's {@link org.junit.jupiter.api.extension.InvocationInterceptor}.\n+ * It's important to note that since it's marked as {@link org.apiguardian.api.API.Status#EXPERIMENTAL}\n+ * it might be removed without prior notice.\n+ * Unlike {@link org.junit.jupiter.api.Disabled} annotations, this extension doesn't disable the whole test method.\n+ * With {@code DisableIfParameter}, it is possible to selectively disable tests out of the plethora\n+ * of dynamically registered parameterized tests.</p>\n+ *\n+ * <p>If neither {@link DisableIfParameter#contains() contains} nor\n+ * {@link DisableIfParameter#matches() matches} is configured, the extension will throw an exception.\n+ * It is possible to configure both, in which case the test gets disabled if at least one substring\n+ * was found <em>or</em> at least one regular expression matched.</p>", "originalCommit": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java\nindex cba12ef..379113c 100644\n--- a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java\n+++ b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java\n\n@@ -41,8 +41,16 @@ import org.junit.jupiter.api.extension.ExtendWith;\n @ExtendWith(DisableIfParameterExtension.class)\n public @interface DisableIfParameter {\n \n+\t/**\n+\t * Disable test cases whose parameter (converted to String with {@link Object#toString()})\n+\t * contain any of the the specified strings (according to {@link String#contains(CharSequence)}).\n+\t */\n \tString[] contains() default {};\n \n+\t/**\n+\t * Disable test cases whose parameter (converted to String with {@link Object#toString()})\n+\t * matches any of the specified regular expressions (according to {@link String#contains(CharSequence)}).\n+\t */\n \tString[] matches() default {};\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE2NTc0Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/368#discussion_r519165747", "bodyText": "Does it make sense to add minimal Javadoc referring to String#contains and String#matches?", "author": "beatngu13", "createdAt": "2020-11-07T11:07:01Z", "path": "src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * {@code @DisableIfParameter} is a JUnit Jupiter extension that can\n+ * be used to selectively disable a {@link org.junit.jupiter.params.ParameterizedTest}\n+ * based on their parameter values as defined by {@link Object#toString()}.\n+ *\n+ * <p>The extension utilizes Jupiter's {@link org.junit.jupiter.api.extension.InvocationInterceptor}.\n+ * It's important to note that since it's marked as {@link org.apiguardian.api.API.Status#EXPERIMENTAL}\n+ * it might be removed without prior notice.\n+ * Unlike {@link org.junit.jupiter.api.Disabled} annotations, this extension doesn't disable the whole test method.\n+ * With {@code DisableIfParameter}, it is possible to selectively disable tests out of the plethora\n+ * of dynamically registered parameterized tests.</p>\n+ *\n+ * <p>If neither {@link DisableIfParameter#contains() contains} nor\n+ * {@link DisableIfParameter#matches() matches} is configured, the extension will throw an exception.\n+ * It is possible to configure both, in which case the test gets disabled if at least one substring\n+ * was found <em>or</em> at least one regular expression matched.</p>\n+ *\n+ * @see DisableIfParameterExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfParameterExtension.class)\n+public @interface DisableIfParameter {\n+\n+\tString[] contains() default {};\n+\n+\tString[] matches() default {};", "originalCommit": "10e4d8a6d3909a8d2cd6223ebe0a1546c21e9be1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java\nindex cba12ef..379113c 100644\n--- a/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java\n+++ b/src/main/java/org/junitpioneer/jupiter/params/DisableIfParameter.java\n\n@@ -41,8 +41,16 @@ import org.junit.jupiter.api.extension.ExtendWith;\n @ExtendWith(DisableIfParameterExtension.class)\n public @interface DisableIfParameter {\n \n+\t/**\n+\t * Disable test cases whose parameter (converted to String with {@link Object#toString()})\n+\t * contain any of the the specified strings (according to {@link String#contains(CharSequence)}).\n+\t */\n \tString[] contains() default {};\n \n+\t/**\n+\t * Disable test cases whose parameter (converted to String with {@link Object#toString()})\n+\t * matches any of the specified regular expressions (according to {@link String#contains(CharSequence)}).\n+\t */\n \tString[] matches() default {};\n \n }\n"}}, {"oid": "bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/bbe9dd0fb827e72d3852c2ceabbcc202f3f2d295", "message": "Update code and documentation according to feedback\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-10T18:54:39Z", "type": "commit"}, {"oid": "26fdcb591aea3299723ccd2e6af508f6eb489c25", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/26fdcb591aea3299723ccd2e6af508f6eb489c25", "message": "In progress DisableIfParameter\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-11-24T21:22:26Z", "type": "commit"}, {"oid": "ff66f8592cca97e484900ffee71b8323b3e5be3e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ff66f8592cca97e484900ffee71b8323b3e5be3e", "message": "No parameters can not be disabled.\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-22T18:42:43Z", "type": "commit"}, {"oid": "4b8d27b496dbd165a19f300e2e53c01fbe7b114c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4b8d27b496dbd165a19f300e2e53c01fbe7b114c", "message": "Update DisableIfParameter based on feedback\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-03-23T15:33:55Z", "type": "commit"}, {"oid": "c3459d95011d0b0bb8e5d1a459096d79a333fead", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c3459d95011d0b0bb8e5d1a459096d79a333fead", "message": "Merge remote-tracking branch 'origin/main' into issue313/explore-invocation-interceptor\n\n# Conflicts:\n#\tREADME.md\n#\tdocs/docs-nav.yml\n#\tsrc/main/java/org/junitpioneer/jupiter/params/DisableIfNameExtension.java\n#\tsrc/test/java/org/junitpioneer/jupiter/params/DisabledIfNameExtensionTests.java", "committedDate": "2021-03-23T15:40:20Z", "type": "commit"}, {"oid": "a5bd7ca05d5163e2dfadb1fb2e46de2ebc5c499f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a5bd7ca05d5163e2dfadb1fb2e46de2ebc5c499f", "message": "Update tests and formatting\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-03-23T16:03:32Z", "type": "commit"}, {"oid": "b0e08e328c118396f5647b2be435ba26c6d150df", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b0e08e328c118396f5647b2be435ba26c6d150df", "message": "Update tests\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-03-23T16:22:49Z", "type": "commit"}, {"oid": "8bb3765f7b96897e88fcf564ba5692187c39622e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8bb3765f7b96897e88fcf564ba5692187c39622e", "message": "Invalid input returns exception\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-03-23T17:16:25Z", "type": "commit"}, {"oid": "6903f5b84c35b650aabc6e003249ae402c62f003", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6903f5b84c35b650aabc6e003249ae402c62f003", "message": "Invalid input returns exception, try #2\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-03-23T17:28:08Z", "type": "commit"}, {"oid": "b6886d0b08891c97f83bd452fa5fb5b0c94ba009", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b6886d0b08891c97f83bd452fa5fb5b0c94ba009", "message": "Add another test\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-03-23T17:45:15Z", "type": "commit"}, {"oid": "87637cbe979349587671a0a5d0a373283cb7054b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/87637cbe979349587671a0a5d0a373283cb7054b", "message": "Update docs\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-04-06T15:47:03Z", "type": "commit"}, {"oid": "6c32440b0fe1f8671b71c4413bb91af8609d0349", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6c32440b0fe1f8671b71c4413bb91af8609d0349", "message": "Merge branch 'main' into issue313/explore-invocation-interceptor", "committedDate": "2021-04-08T20:41:38Z", "type": "commit"}, {"oid": "cf6d5dc08453f6d850088e31c7735a9b7dbb8443", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/cf6d5dc08453f6d850088e31c7735a9b7dbb8443", "message": "Trigger checks again", "committedDate": "2021-04-08T23:05:27Z", "type": "commit"}, {"oid": "faf3d609d64ad511955b7d6ed5b1e9f4b1f8dc62", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/faf3d609d64ad511955b7d6ed5b1e9f4b1f8dc62", "message": "Add JavaDoc on annotations\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-04-17T13:18:02Z", "type": "commit"}, {"oid": "6d99b67b0c85b27c5284d5bb676aa21437a30085", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6d99b67b0c85b27c5284d5bb676aa21437a30085", "message": "More JavaDoc updates\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-04-17T13:22:53Z", "type": "commit"}, {"oid": "612030f71ebc1d4275f21e1aee995978c16c7ca3", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/612030f71ebc1d4275f21e1aee995978c16c7ca3", "message": "Minor documentation polish\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2021-04-18T08:53:34Z", "type": "commit"}, {"oid": "b90527495c9f8281ee88fb5bf21eb2196c94e9f7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b90527495c9f8281ee88fb5bf21eb2196c94e9f7", "message": "Merge branch 'main' into issue313/explore-invocation-interceptor", "committedDate": "2021-04-21T08:09:07Z", "type": "commit"}, {"oid": "960051f6bb6e4a8618a26a3d57920d40ffc6099e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/960051f6bb6e4a8618a26a3d57920d40ffc6099e", "message": "Merge branch 'main' into issue313/explore-invocation-interceptor", "committedDate": "2021-05-18T17:03:47Z", "type": "commit"}, {"oid": "76aa6d8f8152490b6e976f88fb29e90135e0938d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/76aa6d8f8152490b6e976f88fb29e90135e0938d", "message": "Edit documentation", "committedDate": "2021-05-18T19:38:44Z", "type": "commit"}, {"oid": "4fad9b5df4d5de9f2516d367765927b3b169c8b2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4fad9b5df4d5de9f2516d367765927b3b169c8b2", "message": "Moving code around", "committedDate": "2021-05-18T19:40:07Z", "type": "commit"}, {"oid": "058a1a2d448b7faeac390c417e952f2c4756ddc2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/058a1a2d448b7faeac390c417e952f2c4756ddc2", "message": "Rename \"Parameter\" to \"Argument\"", "committedDate": "2021-05-18T20:13:08Z", "type": "commit"}, {"oid": "7f8c3311ad18fe20f1d8af9cde5b327f6e5bda00", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7f8c3311ad18fe20f1d8af9cde5b327f6e5bda00", "message": "Merge branch 'main' of https://github.com/junit-pioneer/junit-pioneer into issue313/explore-invocation-interceptor", "committedDate": "2021-05-29T11:47:13Z", "type": "commit"}, {"oid": "27bd4fbef4cc34479af1b69e6980ea860ee3c387", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/27bd4fbef4cc34479af1b69e6980ea860ee3c387", "message": "Add since in javadoc", "committedDate": "2021-05-29T11:50:12Z", "type": "commit"}]}