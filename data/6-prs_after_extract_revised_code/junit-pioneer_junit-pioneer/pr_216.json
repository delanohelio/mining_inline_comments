{"pr_number": 216, "pr_title": "Added PublishCondition feature to the ReportEntryExtension.", "pr_createdAt": "2020-04-03T20:54:32Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/216", "timeline": [{"oid": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "message": "Added PublishCondition feature to the ReportEntryExtension.", "committedDate": "2020-04-03T20:51:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTA5MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439091", "bodyText": "Documentation is wrong as the extension uses the AfterEachCallback. But as written above I would mentioned that it will always publish regardless of the test result", "author": "Bukama", "createdAt": "2020-04-04T07:44:15Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\nindex 3951907..c4d4296 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n\n@@ -47,23 +47,23 @@ public @interface ReportEntry {\n \n \t/**\n \t * Specifies when the extension should publish the report entry.\n-\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * Defaults to {@link org.junitpioneer.jupiter.ReportEntry.PublishCondition#ALWAYS}\n \t * @see PublishCondition\n \t */\n \tPublishCondition when() default PublishCondition.ALWAYS;\n \n \t/**\n-\t * The available parameters that define when the extension\n-\t * should publish the report entry.\n+\t * The available values you can choose from to define when\n+\t * the extension should publish the report entry.\n \t * <p>\n \t * Available parameters are:\n-\t *  - ALWAYS:\t\tpublish report entry before method call\n-\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n+\t *  - ON_SUCCESS:\tpublish report entry after successful test run\n \t *  - ON_FAILURE:\tpublish report entry after failed test run\n \t *  - NEVERMORE:\tnever publishes report entry\n \t */\n \tenum PublishCondition {\n-\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTI0MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439241", "bodyText": "We are on Junit 5.4.2 since last week! See build.gradle.kts", "author": "Bukama", "createdAt": "2020-04-04T07:46:13Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -12,20 +12,32 @@\n \n import static java.lang.String.format;\n \n-import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n \n-class ReportEntryExtension implements BeforeEachCallback {\n+class ReportEntryExtension implements AfterEachCallback {\n \n+\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java b/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\nindex 96655b7..57e16d8 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\n\n@@ -11,31 +11,26 @@\n package org.junitpioneer.jupiter;\n \n import static java.lang.String.format;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;\n \n+import java.util.Arrays;\n import java.util.Optional;\n import java.util.stream.Stream;\n \n-import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestWatcher;\n \n-class ReportEntryExtension implements AfterEachCallback {\n+class ReportEntryExtension implements TestWatcher, BeforeEachCallback {\n \n-\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+\n \t@Override\n-\tpublic void afterEach(ExtensionContext context) {\n-\t\tfinal Optional<Throwable> ex = context.getExecutionException();\n-\t\tfindAnnotations(context)\n-\t\t\t\t.filter(entry -> entry.when() == ReportEntry.PublishCondition.ALWAYS\n-\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_SUCCESS && !ex.isPresent()\n-\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_FAILURE && ex.isPresent())\n-\t\t\t\t.forEach(entry -> context.publishReportEntry(entry.key(), entry.value()));\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tfindAnnotations(context).forEach(ReportEntryExtension::verifyKeyValueAreNotBlank);\n \t}\n \n \tprivate Stream<ReportEntry> findAnnotations(ExtensionContext context) {\n-\t\treturn Utils\n-\t\t\t\t.findRepeatableAnnotation(context, ReportEntry.class)\n-\t\t\t\t.peek(ReportEntryExtension::verifyKeyValueAreNotBlank);\n+\t\treturn Utils.findRepeatableAnnotation(context, ReportEntry.class);\n \t}\n \n \tprivate static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTI5Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439293", "bodyText": "The value NEVERMORE is never used aside from test cases. This underlines that it's not needed and should be removed!", "author": "Bukama", "createdAt": "2020-04-04T07:46:46Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\nindex 3951907..c4d4296 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n\n@@ -47,23 +47,23 @@ public @interface ReportEntry {\n \n \t/**\n \t * Specifies when the extension should publish the report entry.\n-\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * Defaults to {@link org.junitpioneer.jupiter.ReportEntry.PublishCondition#ALWAYS}\n \t * @see PublishCondition\n \t */\n \tPublishCondition when() default PublishCondition.ALWAYS;\n \n \t/**\n-\t * The available parameters that define when the extension\n-\t * should publish the report entry.\n+\t * The available values you can choose from to define when\n+\t * the extension should publish the report entry.\n \t * <p>\n \t * Available parameters are:\n-\t *  - ALWAYS:\t\tpublish report entry before method call\n-\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n+\t *  - ON_SUCCESS:\tpublish report entry after successful test run\n \t *  - ON_FAILURE:\tpublish report entry after failed test run\n \t *  - NEVERMORE:\tnever publishes report entry\n \t */\n \tenum PublishCondition {\n-\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTYwNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439607", "bodyText": "Must be updated after #187 is merged.", "author": "Bukama", "createdAt": "2020-04-04T07:50:05Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -12,20 +12,32 @@\n \n import static java.lang.String.format;\n \n-import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n \n-class ReportEntryExtension implements BeforeEachCallback {\n+class ReportEntryExtension implements AfterEachCallback {\n \n+\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+\n \t@Override\n-\tpublic void beforeEach(ExtensionContext context) throws Exception {\n-\t\tUtils\n-\t\t\t\t.findRepeatableAnnotation(context, ReportEntry.class)\n-\t\t\t\t.peek(ReportEntryExtension::verifyKeyValueAreNotBlank)\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tfinal Optional<Throwable> ex = context.getExecutionException();\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> entry.when() == ReportEntry.PublishCondition.ALWAYS\n+\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_SUCCESS && !ex.isPresent()\n+\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_FAILURE && ex.isPresent())\n \t\t\t\t.forEach(entry -> context.publishReportEntry(entry.key(), entry.value()));\n \t}\n \n+\tprivate Stream<ReportEntry> findAnnotations(ExtensionContext context) {", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java b/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\nindex 96655b7..57e16d8 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\n\n@@ -11,31 +11,26 @@\n package org.junitpioneer.jupiter;\n \n import static java.lang.String.format;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;\n \n+import java.util.Arrays;\n import java.util.Optional;\n import java.util.stream.Stream;\n \n-import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestWatcher;\n \n-class ReportEntryExtension implements AfterEachCallback {\n+class ReportEntryExtension implements TestWatcher, BeforeEachCallback {\n \n-\t// TODO: This can be replaced with specific TestWatcher interface methods, once we update to JUnit 5.4+\n \t@Override\n-\tpublic void afterEach(ExtensionContext context) {\n-\t\tfinal Optional<Throwable> ex = context.getExecutionException();\n-\t\tfindAnnotations(context)\n-\t\t\t\t.filter(entry -> entry.when() == ReportEntry.PublishCondition.ALWAYS\n-\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_SUCCESS && !ex.isPresent()\n-\t\t\t\t\t\t|| entry.when() == ReportEntry.PublishCondition.ON_FAILURE && ex.isPresent())\n-\t\t\t\t.forEach(entry -> context.publishReportEntry(entry.key(), entry.value()));\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tfindAnnotations(context).forEach(ReportEntryExtension::verifyKeyValueAreNotBlank);\n \t}\n \n \tprivate Stream<ReportEntry> findAnnotations(ExtensionContext context) {\n-\t\treturn Utils\n-\t\t\t\t.findRepeatableAnnotation(context, ReportEntry.class)\n-\t\t\t\t.peek(ReportEntryExtension::verifyKeyValueAreNotBlank);\n+\t\treturn Utils.findRepeatableAnnotation(context, ReportEntry.class);\n \t}\n \n \tprivate static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439765", "bodyText": "No star imports!\n@aepfli @nicolaiparlog Why didn't the build fail? In #169 we introduced a check to avoid star imports!", "author": "Bukama", "createdAt": "2020-04-04T07:52:03Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -13,20 +13,28 @@\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ1NTE1Mg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403455152", "bodyText": "because noboby currently runs the checkstyle target for test, we only run checkstyleMain (like it used to be) but we would need to run also checkstyleTest (or something like that, not 100% sure about the naming", "author": "aepfli", "createdAt": "2020-04-04T10:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ5NjY5NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403496695", "bodyText": "Task :checkstyleTest FAILED\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junit/jupiter/engine/AbstractJupiterTestEngineTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junit/platform/engine/test/TestDescriptorStub.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junit/platform/engine/test/event/ExecutionEvent.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/AbstractPioneerTestEngineTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/jupiter/DefaultLocaleTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/jupiter/params/RangeSourceProviderTests.java:0: error: Missing package-info.java file.\n[ant:checkstyle] /home/sschrottner/projects/github/junit-pioneer/src/test/java/org/junitpioneer/vintage/TestIntegrationTests.java:0: error: Missing package-info.java file.\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':checkstyleTest'.\n> Checkstyle rule violations were found. See the report at: file:///home/sschrottner/projects/github/junit-pioneer/build/reports/checkstyle/test.html\n  Checkstyle files with violations: 7\n  Checkstyle violations by severity: [error:7]", "author": "aepfli", "createdAt": "2020-04-04T17:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUwNjUxNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403506517", "bodyText": "Quoting @nicolaiparlog here:\n\n[14:18] nipafx: At first glance it seems that most of those should apply to tests as well, assuming there aren't any defaults hidden somewhere. We should discuss that on the issue.", "author": "Bukama", "createdAt": "2020-04-04T19:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -13,7 +13,10 @@ package org.junitpioneer.jupiter;\n import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assertions.assertAll;\n-import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.*;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.ALWAYS;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_FAILURE;\n+import static org.junitpioneer.jupiter.ReportEntry.PublishCondition.ON_SUCCESS;\n \n import java.util.AbstractMap;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTk4MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439981", "bodyText": "I don't see the usage for this", "author": "Bukama", "createdAt": "2020-04-04T07:54:23Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -273,63 +256,50 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n-\t\tvoid beforeSuccess() {\n+\t\tvoid always_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n-\t\tvoid beforeFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid always_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n-\t\tvoid onSuccess() {\n+\t\tvoid onSuccess_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n-\t\tvoid notOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onSuccess_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n-\t\tvoid onFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n-\t\tvoid notOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n-\t\tvoid nevermoreOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n-\t\tvoid nevermoreOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n \t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n-\t\tvoid repeatedOnSuccess() {\n+\t\tvoid repeatedSuccess() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n \t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)\n-\t\tvoid repeatedOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid repeatedFailure() {\n+\t\t\tfail();\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzOTk5OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403439999", "bodyText": "I don't see the usage for this", "author": "Bukama", "createdAt": "2020-04-04T07:54:39Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -273,63 +256,50 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n-\t\tvoid beforeSuccess() {\n+\t\tvoid always_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n-\t\tvoid beforeFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid always_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n-\t\tvoid onSuccess() {\n+\t\tvoid onSuccess_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n-\t\tvoid notOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onSuccess_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n-\t\tvoid onFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n-\t\tvoid notOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n-\t\tvoid nevermoreOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n-\t\tvoid nevermoreOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n \t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n-\t\tvoid repeatedOnSuccess() {\n+\t\tvoid repeatedSuccess() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n \t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)\n-\t\tvoid repeatedOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid repeatedFailure() {\n+\t\t\tfail();\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDAyMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440023", "bodyText": "I don't see the usage for this", "author": "Bukama", "createdAt": "2020-04-04T07:54:47Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n+\t\tvoid nevermoreOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -273,63 +256,50 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n-\t\tvoid beforeSuccess() {\n+\t\tvoid always_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n-\t\tvoid beforeFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid always_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n-\t\tvoid onSuccess() {\n+\t\tvoid onSuccess_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n-\t\tvoid notOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onSuccess_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n-\t\tvoid onFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n-\t\tvoid notOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n-\t\tvoid nevermoreOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n-\t\tvoid nevermoreOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n \t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n-\t\tvoid repeatedOnSuccess() {\n+\t\tvoid repeatedSuccess() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n \t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)\n-\t\tvoid repeatedOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid repeatedFailure() {\n+\t\t\tfail();\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDAzMg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440032", "bodyText": "I don't see the usage for this", "author": "Bukama", "createdAt": "2020-04-04T07:54:57Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n+\t\tvoid onSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n+\t\tvoid notOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n+\t\tvoid onFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n+\t\tvoid notOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n+\t\tvoid nevermoreOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n+\t\tvoid nevermoreOnFailure() {\n+\t\t\tthrow new AssertionError();\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n+\t\tvoid repeatedOnSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n+\t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n+\t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n+\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -273,63 +256,50 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n-\t\tvoid beforeSuccess() {\n+\t\tvoid always_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n-\t\tvoid beforeFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid always_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n-\t\tvoid onSuccess() {\n+\t\tvoid onSuccess_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n-\t\tvoid notOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onSuccess_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n-\t\tvoid onFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n-\t\tvoid notOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n-\t\tvoid nevermoreOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n-\t\tvoid nevermoreOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n \t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n-\t\tvoid repeatedOnSuccess() {\n+\t\tvoid repeatedSuccess() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n \t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)\n-\t\tvoid repeatedOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid repeatedFailure() {\n+\t\t\tfail();\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDEyNw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440127", "bodyText": "the AfterEachCallback is used, so before is wrong. As the ALWAYS enum entry is used what about the name evenOnFailure (must then be changed in the assertion method too)", "author": "Bukama", "createdAt": "2020-04-04T07:56:33Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {\n+\t\t}\n+\n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n+\t\tvoid beforeFailure() {", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -273,63 +256,50 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n-\t\tvoid beforeSuccess() {\n+\t\tvoid always_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n-\t\tvoid beforeFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid always_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n-\t\tvoid onSuccess() {\n+\t\tvoid onSuccess_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n-\t\tvoid notOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onSuccess_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n-\t\tvoid onFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n-\t\tvoid notOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n-\t\tvoid nevermoreOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n-\t\tvoid nevermoreOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n \t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n-\t\tvoid repeatedOnSuccess() {\n+\t\tvoid repeatedSuccess() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n \t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)\n-\t\tvoid repeatedOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid repeatedFailure() {\n+\t\t\tfail();\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDE0Ng==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440146", "bodyText": "the AfterEachCallback is used, so before is wrong. As the ALWAYS enum entry is used what about the name evenOnSuccess (must then be changed in the assertion method too)", "author": "Bukama", "createdAt": "2020-04-04T07:56:46Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -127,6 +271,67 @@ void emptyValue() {\n \t\tvoid repeatedAnnotation() {\n \t\t}\n \n+\t\t@Test\n+\t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n+\t\tvoid beforeSuccess() {", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex 0ed7def..28dba58 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -273,63 +256,50 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tis some visitor', I muttered\", when = ALWAYS)\n-\t\tvoid beforeSuccess() {\n+\t\tvoid always_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Tapping at my chamber door' -\", when = ALWAYS)\n-\t\tvoid beforeFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid always_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"'Only this and nothing more.'\", when = ON_SUCCESS)\n-\t\tvoid onSuccess() {\n+\t\tvoid onSuccess_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Ah, distinctly I remember it was in the bleak December\", when = ON_SUCCESS)\n-\t\tvoid notOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onSuccess_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"And each separate dying ember\", when = ON_FAILURE)\n-\t\tvoid onFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_failure() {\n+\t\t\tfail();\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"wrought its ghost upon the floor\", when = ON_FAILURE)\n-\t\tvoid notOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"Tell me what thy lordly name is on the Night\u2019s Plutonian shore!\", when = NEVERMORE)\n-\t\tvoid nevermoreOnSuccess() {\n-\t\t}\n-\n-\t\t@Test\n-\t\t@ReportEntry(value = \"On the morrow he will leave me, as my Hopes have flown before.\", when = NEVERMORE)\n-\t\tvoid nevermoreOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid onFailure_success() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"Eagerly I wished the morrow;\", when = ALWAYS)\n \t\t@ReportEntry(value = \"vainly I had sought to borrow\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"From my books surcease of sorrow\u2014\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"sorrow for the lost Lenore\", when = NEVERMORE)\n-\t\tvoid repeatedOnSuccess() {\n+\t\tvoid repeatedSuccess() {\n \t\t}\n \n \t\t@Test\n \t\t@ReportEntry(value = \"For the rare and radiant maiden\", when = ALWAYS)\n \t\t@ReportEntry(value = \"whom the angels name Lenore\u2014\", when = ON_SUCCESS)\n \t\t@ReportEntry(value = \"Nameless here\", when = ON_FAILURE)\n-\t\t@ReportEntry(value = \"for evermore.\", when = NEVERMORE)\n-\t\tvoid repeatedOnFailure() {\n-\t\t\tthrow new AssertionError();\n+\t\tvoid repeatedFailure() {\n+\t\t\tfail();\n \t\t}\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDI2Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440267", "bodyText": "Nice spot ;)", "author": "Bukama", "createdAt": "2020-04-04T07:58:10Z", "path": "src/main/java/org/junitpioneer/jupiter/params/RangeSourceProvider.java", "diffHunk": "@@ -32,7 +32,7 @@\n  *     <li>{@code from} a primitive value for the \"start\" of the range.</li>\n  *     <li>{@code to} a primitive value for the \"end\" of the range. {@code to} must have the same type as {@code from}.</li>\n  *     <li>{@code step} a primitive value for the difference between each two values of the range.</li>\n- *     <li>{@code closed} a {@code boolean} value describing if the range includes the last value (cloded), or not (open).</li>\n+ *     <li>{@code closed} a {@code boolean} value describing if the range includes the last value (closed), or not (open).</li>", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDY5NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r403440694", "bodyText": "Note: I appreciate the declartion of the repeatable annotation inside it (as I suggested it in #215 ). But as the discussion on that has not really started I can not say if this is fine or has to be changed later.", "author": "Bukama", "createdAt": "2020-04-04T08:02:54Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available parameters that define when the extension\n+\t * should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry before method call\n+\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry\n+\t */\n+\tenum PublishCondition {\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t}\n+\n+\t/**\n+\t * This makes the {@code ReportEntry} repeatable.\n+\t */\n+\t@Retention(RetentionPolicy.RUNTIME)", "originalCommit": "b0fb7059bd3ff96dabaf7f04184757b4a4ad73ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2ODE2Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404668163", "bodyText": "I see no reason to store this is a separate file. You can not use it by itself, only in combination with the @ReportEntry.", "author": "Michael1993", "createdAt": "2020-04-07T09:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ0MDY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ebbcce9a586a19c0e0afed344067509738c0abac", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\nindex 3951907..c4d4296 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n\n@@ -47,23 +47,23 @@ public @interface ReportEntry {\n \n \t/**\n \t * Specifies when the extension should publish the report entry.\n-\t * Defaults to ReportEntry.Timing.ALWAYS\n+\t * Defaults to {@link org.junitpioneer.jupiter.ReportEntry.PublishCondition#ALWAYS}\n \t * @see PublishCondition\n \t */\n \tPublishCondition when() default PublishCondition.ALWAYS;\n \n \t/**\n-\t * The available parameters that define when the extension\n-\t * should publish the report entry.\n+\t * The available values you can choose from to define when\n+\t * the extension should publish the report entry.\n \t * <p>\n \t * Available parameters are:\n-\t *  - ALWAYS:\t\tpublish report entry before method call\n-\t *  - ON_SUCCESS:\tpublish report entry after successful method run\n+\t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n+\t *  - ON_SUCCESS:\tpublish report entry after successful test run\n \t *  - ON_FAILURE:\tpublish report entry after failed test run\n \t *  - NEVERMORE:\tnever publishes report entry\n \t */\n \tenum PublishCondition {\n-\t\tALWAYS, ON_SUCCESS, ON_FAILURE, NEVERMORE\n+\t\tALWAYS, ON_SUCCESS, ON_FAILURE\n \t}\n \n \t/**\n"}}, {"oid": "9c2c943e1680996e6e915404a5bd588f81e3ebd5", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9c2c943e1680996e6e915404a5bd588f81e3ebd5", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement", "committedDate": "2020-04-05T12:08:22Z", "type": "commit"}, {"oid": "ebbcce9a586a19c0e0afed344067509738c0abac", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ebbcce9a586a19c0e0afed344067509738c0abac", "message": "Refined the PublishCondition feature.", "committedDate": "2020-04-07T09:25:28Z", "type": "commit"}, {"oid": "3072956d337070ad1c88cfac3a32959ce1136b85", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3072956d337070ad1c88cfac3a32959ce1136b85", "message": "Fixed a checkstyle error.", "committedDate": "2020-04-07T09:38:11Z", "type": "commit"}, {"oid": "8c38b96b8962e6affe2f6a3378ae3588a682a715", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8c38b96b8962e6affe2f6a3378ae3588a682a715", "message": "Now spotless is broken. Fixed.", "committedDate": "2020-04-07T09:40:26Z", "type": "commit"}, {"oid": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "message": "Two new test cases and an explanatory comment.", "committedDate": "2020-04-07T12:29:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNTUwNg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404935506", "bodyText": "Invalid value :)", "author": "Bukama", "createdAt": "2020-04-07T16:13:45Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntry.java", "diffHunk": "@@ -45,4 +45,36 @@\n \t */\n \tString value();\n \n+\t/**\n+\t * Specifies when the extension should publish the report entry.\n+\t * Defaults to {@link org.junitpioneer.jupiter.ReportEntry.PublishCondition#ALWAYS}\n+\t * @see PublishCondition\n+\t */\n+\tPublishCondition when() default PublishCondition.ALWAYS;\n+\n+\t/**\n+\t * The available values you can choose from to define when\n+\t * the extension should publish the report entry.\n+\t * <p>\n+\t * Available parameters are:\n+\t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n+\t *  - ON_SUCCESS:\tpublish report entry after successful test run\n+\t *  - ON_FAILURE:\tpublish report entry after failed test run\n+\t *  - NEVERMORE:\tnever publishes report entry", "originalCommit": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a9eb28a69c99540996a623f1baf4507fe8ba6c6", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\nindex c4d4296..a07e1bf 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntry.java\n\n@@ -60,7 +60,6 @@ public @interface ReportEntry {\n \t *  - ALWAYS:\t\tpublish report entry every time the test is ran, regardless of its outcome\n \t *  - ON_SUCCESS:\tpublish report entry after successful test run\n \t *  - ON_FAILURE:\tpublish report entry after failed test run\n-\t *  - NEVERMORE:\tnever publishes report entry\n \t */\n \tenum PublishCondition {\n \t\tALWAYS, ON_SUCCESS, ON_FAILURE\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404937408", "bodyText": "Is this line necessary as non-empty keys and values are checked in line 31 ?", "author": "Bukama", "createdAt": "2020-04-07T16:16:21Z", "path": "src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "diffHunk": "@@ -33,4 +42,31 @@ private static void verifyKeyValueAreNotBlank(ReportEntry entry) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n+\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t}\n+\n+\t@Override\n+\tpublic void testSuccessful(ExtensionContext context) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_SUCCESS);\n+\t}\n+\n+\t@Override\n+\tpublic void testAborted(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\t@Override\n+\tpublic void testFailed(ExtensionContext context, Throwable cause) {\n+\t\tpublishOnConditions(context, ALWAYS, ON_FAILURE);\n+\t}\n+\n+\tprivate void publishOnConditions(ExtensionContext context, ReportEntry.PublishCondition... conditions) {\n+\t\tfindAnnotations(context)\n+\t\t\t\t.filter(entry -> Arrays.asList(conditions).contains(entry.when()))\n+\t\t\t\t.filter(entry -> !entry.key().isEmpty() && !entry.value().isEmpty())", "originalCommit": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MTg5MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r405081891", "bodyText": "It's necessary, if you want to avoid throwing an exception from TestReporter.", "author": "Michael1993", "createdAt": "2020-04-07T20:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTg2Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r408315867", "bodyText": "I don't get it either. As far as I understand the code, this line will only ever do something if verifyKeyValueAreNotBlank is broken by a change. But such a change would fail a test and thus not go undetected. I hence don't see a scenario where this line changes anything.", "author": "nipafx", "createdAt": "2020-04-14T17:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxOTY3NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r408319674", "bodyText": "We throw an ExtensionConfigurationException before test execution if either key or value are blank. This leads to the test failing. So, JUnit calls the TestWatcher::testFailed. If the publish condition is ALWAYS or ON_FAILURE, we try to publish report entries. So this is filtering out why the test failed - we don't want to publish if the extension configuration is incorrect.", "author": "Michael1993", "createdAt": "2020-04-14T17:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTIzNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r411525235", "bodyText": "Added a short comment that (tries to) concisely explains this.", "author": "Michael1993", "createdAt": "2020-04-20T16:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNzQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "4707c84a97050d4b9f878a4cd0706e2173e911d8", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java b/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\nindex 129d8c1..5b81ca5 100644\n--- a/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java\n\n@@ -44,7 +44,7 @@ class ReportEntryExtension implements TestWatcher, BeforeEachCallback {\n \n \t@Override\n \tpublic void testDisabled(ExtensionContext context, Optional<String> reason) {\n-\t\t// If the test is disabled we consider the annotation disabled too and don't publish anything.\n+\t\t// if the test is disabled, we consider the annotation disabled too and don't publish anything\n \t}\n \n \t@Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzOTExOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/216#discussion_r404939118", "bodyText": "maybe put the when into quotes or so. As of now it reads a bit rough (at least to me)", "author": "Bukama", "createdAt": "2020-04-07T16:18:50Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -69,20 +82,158 @@ void emptyValue_fails() {\n \t}\n \n \t@Test\n+\t@DisplayName(\"logs each value as individual entry when annotation is repeated\")\n \tvoid repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\tExecutionEventRecorder recorder = executeTestsForMethod(ReportEntriesTest.class, \"repeatedAnnotation\");\n \n \t\tList<Map<String, String>> reportEntries = reportEntries(recorder);\n \n \t\tassertAll(\"Verifying report entries \" + reportEntries, //\n \t\t\t() -> assertThat(reportEntries).hasSize(3),\n-\t\t\t() -> assertThat(reportEntries).extracting(entry -> entry.size()).containsExactlyInAnyOrder(1, 1, 1),\n+\t\t\t() -> assertThat(reportEntries).extracting(Map::size).containsExactlyInAnyOrder(1, 1, 1),\n \t\t\t() -> assertThat(reportEntries)\n \t\t\t\t\t.extracting(entry -> entry.get(\"value\"))\n \t\t\t\t\t.containsExactlyInAnyOrder(\"suddenly there came a tapping\", \"As if some one gently rapping\",\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n+\t@Nested\n+\t@DisplayName(\"with explicitly set when parameter\")", "originalCommit": "8fcbf3364302c6eb3feb8373d5c6ad0b1b51b343", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6a9eb28a69c99540996a623f1baf4507fe8ba6c6", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\nindex d5e94aa..31bb14e 100644\n--- a/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n+++ b/src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java\n\n@@ -98,7 +98,7 @@ public class ReportEntryExtensionTest extends AbstractJupiterTestEngineTests {\n \t}\n \n \t@Nested\n-\t@DisplayName(\"with explicitly set when parameter\")\n+\t@DisplayName(\"with explicitly set 'when' parameter\")\n \tclass PublishConditionTests {\n \n \t\t@Test\n"}}, {"oid": "e4c65204d9cc82a76e5b3e79bc0d67f16f5e6c67", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e4c65204d9cc82a76e5b3e79bc0d67f16f5e6c67", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/org/junitpioneer/jupiter/ReportEntryExtension.java", "committedDate": "2020-04-07T20:04:45Z", "type": "commit"}, {"oid": "6a9eb28a69c99540996a623f1baf4507fe8ba6c6", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6a9eb28a69c99540996a623f1baf4507fe8ba6c6", "message": "Minor changes and spotless", "committedDate": "2020-04-07T20:12:24Z", "type": "commit"}, {"oid": "f342f72780f874fb0be486fec1a4e2e5c394dc1f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f342f72780f874fb0be486fec1a4e2e5c394dc1f", "message": "Fixing code smell", "committedDate": "2020-04-07T20:29:39Z", "type": "commit"}, {"oid": "4bed882c01560ea417fdabf1f71e99d7a4ae00df", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4bed882c01560ea417fdabf1f71e99d7a4ae00df", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement\n\n\u0001 Conflicts:\n\u0001\tsrc/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "committedDate": "2020-04-07T20:56:00Z", "type": "commit"}, {"oid": "a9870c506c92bd9804fecb9715cd1c4cfa8c202f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a9870c506c92bd9804fecb9715cd1c4cfa8c202f", "message": "Messed up merging", "committedDate": "2020-04-07T20:59:40Z", "type": "commit"}, {"oid": "4707c84a97050d4b9f878a4cd0706e2173e911d8", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4707c84a97050d4b9f878a4cd0706e2173e911d8", "message": "Small edits", "committedDate": "2020-04-14T17:49:04Z", "type": "commit"}, {"oid": "a75d7bb1e642065a9ee4a30e9e4107b999a09f69", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a75d7bb1e642065a9ee4a30e9e4107b999a09f69", "message": "Nest new test cases", "committedDate": "2020-04-14T18:05:43Z", "type": "commit"}, {"oid": "51fafcefd28ad60ffeb215209617d6f3e9247d8c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/51fafcefd28ad60ffeb215209617d6f3e9247d8c", "message": "Damn Spotless *shakes fist*", "committedDate": "2020-04-14T18:11:53Z", "type": "commit"}, {"oid": "51226a642721ac75d9ce2b127a42bd0f22bac7d1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/51226a642721ac75d9ce2b127a42bd0f22bac7d1", "message": "Added ON_ABORTED option, more tests and an explaining comment on that filter.", "committedDate": "2020-04-20T16:36:13Z", "type": "commit"}, {"oid": "5cbce139924b04d8e34326075c9bebc08a7e5505", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5cbce139924b04d8e34326075c9bebc08a7e5505", "message": "Removed some unnecessary empty lines (Spotless, why did you betray me? :<)", "committedDate": "2020-04-20T16:47:07Z", "type": "commit"}, {"oid": "1e6c37f4fc036e7999248e1778e83399da7ddbe2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1e6c37f4fc036e7999248e1778e83399da7ddbe2", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement", "committedDate": "2020-04-23T20:29:31Z", "type": "commit"}, {"oid": "395e223abf8312178429d90304679564e26ecb7c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/395e223abf8312178429d90304679564e26ecb7c", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into report-entry-improvement\n\n\u0001 Conflicts:\n\u0001\tsrc/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "committedDate": "2020-04-25T04:02:06Z", "type": "commit"}, {"oid": "41fed21ec1cfadbb92138e5e102233369d08840b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/41fed21ec1cfadbb92138e5e102233369d08840b", "message": "Update to use the new testkit.", "committedDate": "2020-04-25T04:11:38Z", "type": "commit"}, {"oid": "fc82c90aebdfcd85ada1e4d83afd2c7efab72ff2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/fc82c90aebdfcd85ada1e4d83afd2c7efab72ff2", "message": "Spotless, my mortal enemy. We clash again.", "committedDate": "2020-04-25T04:21:33Z", "type": "commit"}]}