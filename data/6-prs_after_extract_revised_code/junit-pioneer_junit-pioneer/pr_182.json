{"pr_number": 182, "pr_title": "Stopwatch extension (#38 / #182)", "pr_createdAt": "2020-03-11T16:42:40Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/182", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDk1Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r391170953", "bodyText": "I'm sorry to bother you with this but wouldn't this get overwritten if I run two test files with the @Stopwatch annotation?", "author": "Michael1993", "createdAt": "2020-03-11T18:15:58Z", "path": "src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junitpioneer.jupiter.enumerations.TestunitEnum;\n+\n+import java.time.Clock;\n+\n+import static java.lang.System.currentTimeMillis;\n+import static org.junitpioneer.jupiter.Utils.annotationPresentOnTestClass;\n+\n+/**\n+ * The StopwatchExtension implements callback methods for the {@code @Stopwatch} annotation.\n+ */\n+class StopwatchExtension\n+\t\timplements BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback, AfterAllCallback {\n+\tprivate final Clock clock = Clock.systemUTC();\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StopwatchExtension.class);\n+\n+\t@Override\n+\tpublic void beforeAll(ExtensionContext context) {\n+\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n+\t\t\tstoreNowAsLaunchTime(context, TestunitEnum.CLASS);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n+\t\t\tstoreNowAsLaunchTime(context, TestunitEnum.TEST);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterTestExecution(ExtensionContext context) {\n+\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n+\t\t\tcalculateAndReportElapsedTime(context, TestunitEnum.TEST);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterAll(ExtensionContext context) {\n+\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n+\t\t\tcalculateAndReportElapsedTime(context, TestunitEnum.CLASS);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Stores the current time for the given testunit in the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t * @param unit Testobject for which the time should be stored\n+\t */\n+\tvoid storeNowAsLaunchTime(ExtensionContext context, TestunitEnum unit) {\n+\t\tcontext.getStore(NAMESPACE).put(unit, clock.instant().toEpochMilli());\n+\t}\n+\n+\t/**\n+\t * Loads the stored time for the given testunit from the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t * @param unit Testobject for which the time should be stored\n+\t */\n+\tlong loadLaunchTime(ExtensionContext context, TestunitEnum unit) {\n+\t\treturn context.getStore(NAMESPACE).get(unit, long.class);\n+\t}\n+\n+\t/**\n+\t * Calculates the elapsed time for the testunit and publishs it to the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t * @param unit Testunit for which the time should be calculated and published\n+\t */\n+\tvoid calculateAndReportElapsedTime(ExtensionContext context, TestunitEnum unit) {\n+\t\tlong launchTime = loadLaunchTime(context, unit);\n+\t\tlong elapsedTime = currentTimeMillis() - launchTime;\n+\n+\t\tString message = String.format(\"%s '%s' took %d ms.\", unit.name(), context.getDisplayName(), elapsedTime);\n+\t\tcontext.publishReportEntry(\"stopwatch\", message);", "originalCommit": "9d0b0db3f874f5ab0b700eff255b119d7a262d0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTczMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r391171730", "bodyText": "I'm fairly new to the TestReporter as is, so I really am just asking for information.", "author": "Michael1993", "createdAt": "2020-03-11T18:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyOTU2NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r391429565", "bodyText": "I'm not sure as I used the TestReporter for the first time, but as I understand it the context is for each test case. But I'm not sure.", "author": "Bukama", "createdAt": "2020-03-12T06:52:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIzMDU4NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r395230585", "bodyText": "@sormuras Can you enlighten us?", "author": "Bukama", "createdAt": "2020-03-19T18:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "58ae7cbdb9c47058b75d3cfc3f907f9009a23646", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\nindex a7092d1..67e1894 100644\n--- a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n\n@@ -10,87 +10,120 @@\n \n package org.junitpioneer.jupiter;\n \n-import org.junit.jupiter.api.extension.AfterAllCallback;\n-import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n-import org.junit.jupiter.api.extension.BeforeAllCallback;\n-import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n-import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.*;\n import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n-import org.junitpioneer.jupiter.enumerations.TestunitEnum;\n+import org.junit.platform.commons.support.AnnotationSupport;\n \n+import java.lang.annotation.Annotation;\n import java.time.Clock;\n+import java.util.*;\n+import java.util.stream.Stream;\n \n import static java.lang.System.currentTimeMillis;\n+import static java.lang.System.setOut;\n+import static java.util.stream.Collectors.toMap;\n+import static org.junit.platform.commons.util.AnnotationUtils.isAnnotated;\n import static org.junitpioneer.jupiter.Utils.annotationPresentOnTestClass;\n+import static org.junitpioneer.jupiter.Utils.annotationPresentOnTestMethod;\n \n-/**\n- * The StopwatchExtension implements callback methods for the {@code @Stopwatch} annotation.\n+/*\n+TODO:\n+- Extension is not Executed on Classlevel\n+- How to access context to get value of report\n  */\n-class StopwatchExtension\n-\t\timplements BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback, AfterAllCallback {\n+\n+class StopwatchExtension implements BeforeAllCallback, BeforeTestExecutionCallback,\n+\t\tAfterTestExecutionCallback, AfterAllCallback {\n \tprivate final Clock clock = Clock.systemUTC();\n \tprivate static final Namespace NAMESPACE = Namespace.create(StopwatchExtension.class);\n \n+\t// The Utils annotationPresentOnTestMethod does not recognizes Class-Annotations\n+\tprivate static boolean shouldBeBenchmarked(ExtensionContext context) {\n+\t\treturn context.getElement()\n+\t\t\t\t.map(el -> isAnnotated(el, Stopwatch.class))\n+\t\t\t\t.orElse(false);\n+\t}\n+\n \t@Override\n-\tpublic void beforeAll(ExtensionContext context) {\n-\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n-\t\t\tstoreNowAsLaunchTime(context, TestunitEnum.CLASS);\n+\tpublic void beforeAll(ExtensionContext context)  {\n+//\t\tif(annotationPresentOnTestMethod(context, Stopwatch.class) || annotationPresentOnTestClass(context, Stopwatch.class)) {\n+//\t\t\tstoreNowAsLaunchTime(context, LaunchTimeKey.CLASS);\n+//\t\t}\n+\t\tif(shouldBeBenchmarked(context)) {\n+\t\t\tstoreNowAsLaunchTime(context, LaunchTimeKey.CLASS);\n \t\t}\n \t}\n \n \t@Override\n \tpublic void beforeTestExecution(ExtensionContext context) {\n-\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n-\t\t\tstoreNowAsLaunchTime(context, TestunitEnum.TEST);\n+//\t\tif(annotationPresentOnTestMethod(context, Stopwatch.class)) {\n+//\t\t\tstoreNowAsLaunchTime(context, LaunchTimeKey.TEST);\n+//\t\t}\n+\n+\n+\t\tif(shouldBeBenchmarked(context)) {\n+\t\t\tstoreNowAsLaunchTime(context, LaunchTimeKey.TEST);\n \t\t}\n \t}\n \n+\n \t@Override\n \tpublic void afterTestExecution(ExtensionContext context) {\n-\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n-\t\t\tcalculateAndReportElapsedTime(context, TestunitEnum.TEST);\n+//\t\tif(!annotationPresentOnTestMethod(context, Stopwatch.class)) {\n+//\t\t\treturn;\n+//\t\t}\n+//\n+//\t\tlong launchTime = loadLaunchTime(context, LaunchTimeKey.TEST);\n+//\t\tlong elapsedTime = currentTimeMillis() - launchTime;\n+//\t\treport(\"Test\", context, elapsedTime);\n+\n+\t\tif(shouldBeBenchmarked(context)) {\n+\t\t\tlong launchTime = loadLaunchTime(context, LaunchTimeKey.TEST);\n+\t\t\tlong elapsedTime = currentTimeMillis() - launchTime;\n+\t\t\treport(\"Test\", context, elapsedTime);\n \t\t}\n \t}\n \n \t@Override\n-\tpublic void afterAll(ExtensionContext context) {\n-\t\tif (annotationPresentOnTestClass(context, Stopwatch.class)) {\n-\t\t\tcalculateAndReportElapsedTime(context, TestunitEnum.CLASS);\n+\tpublic void afterAll(ExtensionContext context) throws Exception {\n+//\t\tif(!annotationPresentOnTestMethod(context, Stopwatch.class)) {\n+//\t\t\treturn;\n+//\t\t}\n+//\n+//\t\tlong launchTime = loadLaunchTime(context, LaunchTimeKey.CLASS);\n+//\t\tlong elapsedTime = clock.instant().toEpochMilli() - launchTime;\n+//\t\treport(\"Test container\", context, elapsedTime);\n+\n+\t\tif(shouldBeBenchmarked(context)) {\n+\t\t\tlong launchTime = loadLaunchTime(context, LaunchTimeKey.CLASS);\n+\t\t\tlong elapsedTime = currentTimeMillis() - launchTime;\n+\t\t\treport(\"Test\", context, elapsedTime);\n \t\t}\n \t}\n \n-\t/**\n-\t * Stores the current time for the given testunit in the execution context.\n-\t *\n-\t * @param context Extension context of the class\n-\t * @param unit Testobject for which the time should be stored\n-\t */\n-\tvoid storeNowAsLaunchTime(ExtensionContext context, TestunitEnum unit) {\n-\t\tcontext.getStore(NAMESPACE).put(unit, clock.instant().toEpochMilli());\n+\tprivate void storeNowAsLaunchTime(\n+\t\t\tExtensionContext context, LaunchTimeKey key) {\n+\t\tcontext.getStore(NAMESPACE).put(key, clock.instant().toEpochMilli());\n \t}\n \n-\t/**\n-\t * Loads the stored time for the given testunit from the execution context.\n-\t *\n-\t * @param context Extension context of the class\n-\t * @param unit Testobject for which the time should be stored\n-\t */\n-\tlong loadLaunchTime(ExtensionContext context, TestunitEnum unit) {\n-\t\treturn context.getStore(NAMESPACE).get(unit, long.class);\n+\tprivate long loadLaunchTime(\n+\t\t\tExtensionContext context, LaunchTimeKey key) {\n+\t\treturn context.getStore(NAMESPACE).get(key, long.class);\n \t}\n \n-\t/**\n-\t * Calculates the elapsed time for the testunit and publishs it to the execution context.\n-\t *\n-\t * @param context Extension context of the class\n-\t * @param unit Testunit for which the time should be calculated and published\n-\t */\n-\tvoid calculateAndReportElapsedTime(ExtensionContext context, TestunitEnum unit) {\n-\t\tlong launchTime = loadLaunchTime(context, unit);\n-\t\tlong elapsedTime = currentTimeMillis() - launchTime;\n-\n-\t\tString message = String.format(\"%s '%s' took %d ms.\", unit.name(), context.getDisplayName(), elapsedTime);\n+\tprivate void report(\n+\t\t\tString unit, ExtensionContext context, long elapsedTime) {\n+\t\tString message = String.format(\n+\t\t\t\t\"%s '%s' took %d ms.\",\n+\t\t\t\tunit, context.getDisplayName(), elapsedTime);\n+\n+\n+\t\tSystem.out.println(\"To see if extension is executed:\" + message);\n \t\tcontext.publishReportEntry(\"stopwatch\", message);\n \t}\n \n+\tprivate enum LaunchTimeKey {\n+\t\tCLASS, TEST\n+\t}\n+\n }\n"}}, {"oid": "58ae7cbdb9c47058b75d3cfc3f907f9009a23646", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/58ae7cbdb9c47058b75d3cfc3f907f9009a23646", "message": "Failing to write test for StopwatchExtension", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "049891a957342b155472ae01e9d7f18aee253dbd", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/049891a957342b155472ae01e9d7f18aee253dbd", "message": "Move isAnnotatedOnClassLevel To Utils", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "f8e771677a06579d14f3d3af798fc1f30ec7fee3", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f8e771677a06579d14f3d3af798fc1f30ec7fee3", "message": "Fix unneeded throws", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "00e8c8a190ce6df16851e73d71fb5dfff0859c5d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/00e8c8a190ce6df16851e73d71fb5dfff0859c5d", "message": "Failing to write tests", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "8c1b50aa5eda4461821d09885fee47255e91b561", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8c1b50aa5eda4461821d09885fee47255e91b561", "message": "spotlessJavaApply", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "e63817630a3a92ad910bedae7af3ace98c13275a", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e63817630a3a92ad910bedae7af3ace98c13275a", "message": "Extract enumeration and publish extenstion class", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "df9fb287eec85e5de95615f2f118fdb2f4e20138", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/df9fb287eec85e5de95615f2f118fdb2f4e20138", "message": "Create StopwatchExtensionTests", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "b3c181552c8194c07916f4781ebde0b1449183bf", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b3c181552c8194c07916f4781ebde0b1449183bf", "message": "spotlessApply and package-info.java", "committedDate": "2020-03-31T17:15:56Z", "type": "commit"}, {"oid": "eeec76911a81eae6e73ea746419ffff22f50b7ed", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/eeec76911a81eae6e73ea746419ffff22f50b7ed", "message": "Add documentation", "committedDate": "2020-03-31T17:16:14Z", "type": "commit"}, {"oid": "eeec76911a81eae6e73ea746419ffff22f50b7ed", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/eeec76911a81eae6e73ea746419ffff22f50b7ed", "message": "Add documentation", "committedDate": "2020-03-31T17:16:14Z", "type": "forcePushed"}, {"oid": "ba3d391a3362d676c517072c1487c2862fa19f15", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ba3d391a3362d676c517072c1487c2862fa19f15", "message": "Failing to write test for StopwatchExtension", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "593f7caa4a18201695a6ae7374a9a85fd5969082", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/593f7caa4a18201695a6ae7374a9a85fd5969082", "message": "Move isAnnotatedOnClassLevel To Utils", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "d6fc16553997fb50b968bef9adb2a71ca73284be", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d6fc16553997fb50b968bef9adb2a71ca73284be", "message": "Fix unneeded throws", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "0e1805f8302db5508237a23b68e8e93987e23484", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0e1805f8302db5508237a23b68e8e93987e23484", "message": "Failing to write tests", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "eb8a17084ac9c03d5c38594573be39dbf178eba0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/eb8a17084ac9c03d5c38594573be39dbf178eba0", "message": "spotlessJavaApply", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "d6e10ddbba1218ae785dc46fc5720ef8f0ed612d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d6e10ddbba1218ae785dc46fc5720ef8f0ed612d", "message": "Extract enumeration and publish extenstion class", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "8f3e6bf7d5d57d92bb16eef8cf33c113eb87fe27", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8f3e6bf7d5d57d92bb16eef8cf33c113eb87fe27", "message": "Create StopwatchExtensionTests", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "c6666f6d7c1442726da8d6d829b515da48a272f0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c6666f6d7c1442726da8d6d829b515da48a272f0", "message": "spotlessApply and package-info.java", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "c55121f99663000e9fff2616170f551c462d56f7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c55121f99663000e9fff2616170f551c462d56f7", "message": "Add documentation", "committedDate": "2020-03-31T18:50:43Z", "type": "commit"}, {"oid": "5bdfea1e4186671eed0526639539f68ba3458527", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5bdfea1e4186671eed0526639539f68ba3458527", "message": "Merge remote-tracking branch 'origin/stopwatch' into stopwatch", "committedDate": "2020-04-06T16:36:46Z", "type": "commit"}, {"oid": "be2ab4649cfb83dd22933c8889cb76dec704c581", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/be2ab4649cfb83dd22933c8889cb76dec704c581", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tsrc/main/java/org/junitpioneer/jupiter/Utils.java", "committedDate": "2020-04-09T18:15:00Z", "type": "commit"}, {"oid": "a5fa0e20698462fcf4039320bc68ba1881d80b84", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a5fa0e20698462fcf4039320bc68ba1881d80b84", "message": "Apply PioneerAnnotationUtils", "committedDate": "2020-04-09T18:46:58Z", "type": "commit"}, {"oid": "c5b00bf293627ec429fd166b280600b41135b6c2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c5b00bf293627ec429fd166b280600b41135b6c2", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tsrc/test/java/org/junitpioneer/AbstractPioneerTestEngineTests.java", "committedDate": "2020-04-25T06:31:22Z", "type": "commit"}, {"oid": "c56e00ead2ca1ffe9992158efa7024a3eb571afe", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c56e00ead2ca1ffe9992158efa7024a3eb571afe", "message": "Apply new TestKitEngine", "committedDate": "2020-04-26T14:46:54Z", "type": "commit"}, {"oid": "f4edde75c9b0a5456c78b18d5a65406723e6aac8", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f4edde75c9b0a5456c78b18d5a65406723e6aac8", "message": "Update docs", "committedDate": "2020-04-26T14:49:38Z", "type": "commit"}, {"oid": "a7168975e310131d2096bb74d5842040c0b685ee", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a7168975e310131d2096bb74d5842040c0b685ee", "message": "Update package-info.java", "committedDate": "2020-04-26T14:50:31Z", "type": "commit"}, {"oid": "72b64e646060f4dd3861a2803fa351e31d177893", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/72b64e646060f4dd3861a2803fa351e31d177893", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tdocs/docs-nav.yml\n#\tsrc/main/java/org/junitpioneer/jupiter/package-info.java", "committedDate": "2020-06-21T09:19:39Z", "type": "commit"}, {"oid": "ee10046cf3602476d2008d9ff98ad1734032d232", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ee10046cf3602476d2008d9ff98ad1734032d232", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tsrc/main/java/org/junitpioneer/jupiter/package-info.java", "committedDate": "2020-06-21T09:24:26Z", "type": "commit"}, {"oid": "52fb68cf4482336ddda6a1c274f94dc0fdb1b977", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/52fb68cf4482336ddda6a1c274f94dc0fdb1b977", "message": "Merge branch 'master' into stopwatch", "committedDate": "2020-07-02T16:50:18Z", "type": "commit"}, {"oid": "80971222536d9b50d39f667dd26919928c389e6c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/80971222536d9b50d39f667dd26919928c389e6c", "message": "Merge branch 'master' into stopwatch", "committedDate": "2020-07-20T11:10:47Z", "type": "commit"}, {"oid": "9c6798cf38e49bf4119abd2b88f3f1f1f976ae2d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9c6798cf38e49bf4119abd2b88f3f1f1f976ae2d", "message": "How to access ReportEntries", "committedDate": "2020-07-20T11:22:20Z", "type": "commit"}, {"oid": "2a448e77aa8d4cbca1f3f506ef46c285cdc918f1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2a448e77aa8d4cbca1f3f506ef46c285cdc918f1", "message": "Checking the value of the ReportEntry again", "committedDate": "2020-07-20T12:20:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NDE2Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r457344167", "bodyText": "I honestly think either this check is unnecessary or should throw an ExtensionConfigurationException.\nThis extension can be invoked by two things:\n\nAdding the @Stopwatch annotation (which has @ExtendWith(StopwatchExtension.class))\nAdding @ExtendWith(StopwatchExtension.class) to your test class\n\nIf the explicit registration is not considered bad configuration then this check is unnecessary.\nIf the explicit registration is considered bad configuration then this check should be the other way around, i.e.:\nif (!PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class) {\n    throw new ExtensionConfigurationException(/* Meaningful message */);\n}\nstoreNowAsLaunchTime(context);", "author": "Michael1993", "createdAt": "2020-07-20T12:38:29Z", "path": "src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.lang.System.currentTimeMillis;\n+\n+import java.time.Clock;\n+\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+/**\n+ * The StopwatchExtension implements callback methods for the {@code @Stopwatch} annotation.\n+ */\n+class StopwatchExtension implements BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+\n+\tprivate final Clock clock = Clock.systemUTC();\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StopwatchExtension.class);\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {", "originalCommit": "2a448e77aa8d4cbca1f3f506ef46c285cdc918f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NTc3MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r457345770", "bodyText": "An additional note - you could write a test for this. Have a class annotated with @ExtendWith(StopwatchExtension.class) and a @Test not annotated with @Stopwatch. Execute it with the testkit and the result should be a failed test and an ExtensionConfigurationException.", "author": "Michael1993", "createdAt": "2020-07-20T12:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NDE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f4dde9e3b1e8f8d1f7f45243b7207d8d763a58fd", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\nindex 32558f6..e440311 100644\n--- a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n\n@@ -29,16 +29,12 @@ class StopwatchExtension implements BeforeTestExecutionCallback, AfterTestExecut\n \n \t@Override\n \tpublic void beforeTestExecution(ExtensionContext context) {\n-\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {\n-\t\t\tstoreNowAsLaunchTime(context);\n-\t\t}\n+\t\tstoreNowAsLaunchTime(context);\n \t}\n \n \t@Override\n \tpublic void afterTestExecution(ExtensionContext context) {\n-\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {\n-\t\t\tcalculateAndReportElapsedTime(context);\n-\t\t}\n+\t\tcalculateAndReportElapsedTime(context);\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0NDQ3NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r457344474", "bodyText": "The same thing here - unnecessary or the other way around.", "author": "Michael1993", "createdAt": "2020-07-20T12:38:57Z", "path": "src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.lang.System.currentTimeMillis;\n+\n+import java.time.Clock;\n+\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+/**\n+ * The StopwatchExtension implements callback methods for the {@code @Stopwatch} annotation.\n+ */\n+class StopwatchExtension implements BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+\n+\tprivate final Clock clock = Clock.systemUTC();\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StopwatchExtension.class);\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {\n+\t\t\tstoreNowAsLaunchTime(context);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterTestExecution(ExtensionContext context) {\n+\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {", "originalCommit": "2a448e77aa8d4cbca1f3f506ef46c285cdc918f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f4dde9e3b1e8f8d1f7f45243b7207d8d763a58fd", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\nindex 32558f6..e440311 100644\n--- a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n\n@@ -29,16 +29,12 @@ class StopwatchExtension implements BeforeTestExecutionCallback, AfterTestExecut\n \n \t@Override\n \tpublic void beforeTestExecution(ExtensionContext context) {\n-\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {\n-\t\t\tstoreNowAsLaunchTime(context);\n-\t\t}\n+\t\tstoreNowAsLaunchTime(context);\n \t}\n \n \t@Override\n \tpublic void afterTestExecution(ExtensionContext context) {\n-\t\tif (PioneerAnnotationUtils.isAnyAnnotationPresent(context, Stopwatch.class)) {\n-\t\t\tcalculateAndReportElapsedTime(context);\n-\t\t}\n+\t\tcalculateAndReportElapsedTime(context);\n \t}\n \n \t/**\n"}}, {"oid": "f4dde9e3b1e8f8d1f7f45243b7207d8d763a58fd", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f4dde9e3b1e8f8d1f7f45243b7207d8d763a58fd", "message": "Remove unnecessary check", "committedDate": "2020-07-20T13:06:02Z", "type": "commit"}, {"oid": "2f00569909518064fbfff3e20984c6c0921c2b99", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2f00569909518064fbfff3e20984c6c0921c2b99", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tsrc/main/java/org/junitpioneer/jupiter/package-info.java", "committedDate": "2020-07-31T17:34:43Z", "type": "commit"}, {"oid": "cbba97a81fa5218b12c366ae5ab2ecaa6f5cbf0f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/cbba97a81fa5218b12c366ae5ab2ecaa6f5cbf0f", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tdocs/docs-nav.yml", "committedDate": "2020-08-08T06:44:53Z", "type": "commit"}, {"oid": "8f64da9e0ded3b49db496bdce3788cc056abf4f4", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8f64da9e0ded3b49db496bdce3788cc056abf4f4", "message": "Update docs to match new style", "committedDate": "2020-08-08T06:46:07Z", "type": "commit"}, {"oid": "c7f3d09fe2719e001df3d92756b2cb0d614a1fac", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c7f3d09fe2719e001df3d92756b2cb0d614a1fac", "message": "Merge branch 'master' into stopwatch", "committedDate": "2020-09-26T12:59:18Z", "type": "commit"}, {"oid": "c01402d781f5876aec95b41ff85b5221cf081ff8", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c01402d781f5876aec95b41ff85b5221cf081ff8", "message": "Merge branch 'master' into stopwatch\n\n# Conflicts:\n#\tdocs/docs-nav.yml\n#\tsrc/main/java/org/junitpioneer/jupiter/package-info.java", "committedDate": "2020-10-03T08:00:34Z", "type": "commit"}, {"oid": "df3856d4f021f4c0517eabcbbf0e8054121e1882", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/df3856d4f021f4c0517eabcbbf0e8054121e1882", "message": "Fix test", "committedDate": "2020-10-03T08:28:47Z", "type": "commit"}, {"oid": "37a50818309fa20cafbac41b6b6b416af624f68b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/37a50818309fa20cafbac41b6b6b416af624f68b", "message": "Merge branch 'master' into stopwatch", "committedDate": "2020-10-06T19:25:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3MDE1Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r493570153", "bodyText": "Typo in classs", "author": "Michael1993", "createdAt": "2020-09-23T13:10:39Z", "path": "src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junitpioneer.testkit.ExecutionResults;\n+import org.junitpioneer.testkit.PioneerTestKit;\n+import org.junitpioneer.testkit.assertion.PioneerAssert;\n+\n+@DisplayName(\"Stopwatch extension \")\n+public class StopwatchExtensionTests {\n+\n+\t@DisplayName(\"should be executed with annotation on class level and report an entry for test method\")\n+\t@Test\n+\tvoid runClassLevelAnnotationTest() {\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestClass(StopwatchExtensionTests.ClassLevelAnnotationTest.class);\n+\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(1);\n+\n+\t\tString methodName = \"stopwatchExtensionShouldBeExecutedWithAnnotationOnClassLevel\";\n+\t\tassertStringStartWithUnitAndContainsName(results, methodName);\n+\n+\t}\n+\n+\t@DisplayName(\"should be executed with annotation on class level and test method and report an entry for test method\")\n+\t@Test\n+\tvoid runClassAndMethodLevelAnnotationTest() {\n+\t\tString methodName = \"stopwatchExtensionShouldBeExecutedWithAnnotationOnClassAndMethodLevel\";\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestClass(StopwatchExtensionTests.ClassAndMethodLevelAnnotationTest.class);\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(1);\n+\n+\t\tassertStringStartWithUnitAndContainsName(results, methodName);\n+\t}\n+\n+\t@DisplayName(\"should be executed with annotation on test method and report an entry for test method\")\n+\t@Test\n+\tvoid runMethodLevelAnnotationTest() {\n+\t\tString methodName = \"stopwatchExtensionShouldBeExecutedOnWithAnnotationOnMethodLevel\";\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestMethod(StopwatchExtensionTests.MethodLevelAnnotationTest.class, methodName);\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(1);\n+\n+\t\tassertStringStartWithUnitAndContainsName(results, methodName);\n+\t}\n+\n+\t@DisplayName(\"should not be executed and therefore no entry should be published\")\n+\t@Test\n+\tvoid runAnnotationTest() {\n+\t\tString methodName = \"stopwatchExtensionShouldNotBeExecuted\";\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestMethod(StopwatchExtensionTests.MethodLevelAnnotationTest.class, methodName);\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(0);\n+\n+\t}\n+\n+\tprivate void assertStringStartWithUnitAndContainsName(ExecutionResults results, String name) {\n+\n+\t\tMap<String, String> reportEntry = firstReportEntry(results);\n+\n+\t\tassertThat(reportEntry).hasSize(1);\n+\n+\t\tString result = reportEntry.get(\"stopwatch\");\n+\t\tassertThat(result).isNotNull();\n+\n+\t\tString startsWith = String.format(\"Execution of '%s()' took [\", name);\n+\n+\t\tassertThat(result).startsWith(startsWith);\n+\t\tassertThat(result).endsWith(\"] ms.\");\n+\t}\n+\n+\t/**\n+\t * Retrieves the first published ReportEntry.\n+\t * The possibility to retrieve the ReportEntries of a test execution was removed during\n+\t * the improvement of the PioneerAssertions.\n+\t *\n+\t * @param results Results of the test execution\n+\t * @return The first ReportEntry\n+\t */\n+\tprivate Map<String, String> firstReportEntry(ExecutionResults results) {\n+\t\tList<Map<String, String>> reportEntries = results\n+\t\t\t\t.allEvents()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(event -> event.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n+\t\t\t\t.filter(Optional::isPresent)\n+\t\t\t\t.map(Optional::get)\n+\t\t\t\t.map(ReportEntry::getKeyValuePairs)\n+\t\t\t\t.collect(toList());\n+\n+\t\treturn reportEntries.get(0);\n+\t}\n+\n+\t/**\n+\t * Inner test class for testing the class level annotation.\n+\t */\n+\t@Stopwatch\n+\tstatic class ClassLevelAnnotationTest {\n+\n+\t\t@Test\n+\t\tvoid stopwatchExtensionShouldBeExecutedWithAnnotationOnClassLevel() {\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * Inner test class for testing the method level annotation.\n+\t */\n+\tstatic class MethodLevelAnnotationTest {\n+\n+\t\t@Stopwatch\n+\t\t@Test\n+\t\tvoid stopwatchExtensionShouldBeExecutedOnWithAnnotationOnMethodLevel() {\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * Inner test class for testing the class level annotation.\n+\t */\n+\t@Stopwatch\n+\tstatic class ClassAndMethodLevelAnnotationTest {\n+\n+\t\t@Stopwatch\n+\t\t@Test\n+\t\tvoid stopwatchExtensionShouldBeExecutedWithAnnotationOnClassAndMethodLevel() {\n+\t\t}\n+\n+\t}\n+\n+\t/**\n+\t * Inner test class for testing a not annotated method / classs annotation.", "originalCommit": "8f64da9e0ded3b49db496bdce3788cc056abf4f4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "df3856d4f021f4c0517eabcbbf0e8054121e1882", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java b/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java\nindex da70ba1..f882fb9 100644\n--- a/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java\n+++ b/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java\n\n@@ -71,7 +71,7 @@ public class StopwatchExtensionTests {\n \t\tString methodName = \"stopwatchExtensionShouldNotBeExecuted\";\n \n \t\tExecutionResults results = PioneerTestKit\n-\t\t\t\t.executeTestMethod(StopwatchExtensionTests.MethodLevelAnnotationTest.class, methodName);\n+\t\t\t\t.executeTestMethod(StopwatchExtensionTests.NonAnnotationTest.class, methodName);\n \t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(0);\n \n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjYwNzMwMg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r536607302", "bodyText": "You use clock.instant().toEpochMilli() earlier but currentTimeMillis() here. Any particular reason these are not in sync? Should they be in sync?", "author": "Michael1993", "createdAt": "2020-12-05T09:34:15Z", "path": "src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.lang.System.currentTimeMillis;\n+\n+import java.time.Clock;\n+\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+/**\n+ * The StopwatchExtension implements callback methods for the {@code @Stopwatch} annotation.\n+ */\n+class StopwatchExtension implements BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+\n+\tprivate final Clock clock = Clock.systemUTC();\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StopwatchExtension.class);\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tstoreNowAsLaunchTime(context);\n+\t}\n+\n+\t@Override\n+\tpublic void afterTestExecution(ExtensionContext context) {\n+\t\tcalculateAndReportElapsedTime(context);\n+\t}\n+\n+\t/**\n+\t * Stores the current time for the method in the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t */\n+\tvoid storeNowAsLaunchTime(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).put(context.getUniqueId(), clock.instant().toEpochMilli());\n+\t}\n+\n+\t/**\n+\t * Loads the stored time for method from the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t */\n+\tlong loadLaunchTime(ExtensionContext context) {\n+\t\treturn context.getStore(NAMESPACE).get(context.getUniqueId(), long.class);\n+\t}\n+\n+\t/**\n+\t * Calculates the elapsed time method and publishes it to the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t */\n+\tvoid calculateAndReportElapsedTime(ExtensionContext context) {\n+\t\tlong launchTime = loadLaunchTime(context);\n+\t\tlong elapsedTime = currentTimeMillis() - launchTime;", "originalCommit": "37a50818309fa20cafbac41b6b6b416af624f68b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2430da9d648695e671ab5706a7e9ebe8538e6661", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\nindex e440311..92aa37a 100644\n--- a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n\n@@ -10,8 +10,6 @@\n \n package org.junitpioneer.jupiter;\n \n-import static java.lang.System.currentTimeMillis;\n-\n import java.time.Clock;\n \n import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjYwODg1MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r536608851", "bodyText": "Please extract the key to a constant - I'd also prefer if the key were \"StopwatchExtension\", but that is more or less a matter of taste.", "author": "Michael1993", "createdAt": "2020-12-05T09:35:28Z", "path": "src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.lang.System.currentTimeMillis;\n+\n+import java.time.Clock;\n+\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+/**\n+ * The StopwatchExtension implements callback methods for the {@code @Stopwatch} annotation.\n+ */\n+class StopwatchExtension implements BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+\n+\tprivate final Clock clock = Clock.systemUTC();\n+\tprivate static final Namespace NAMESPACE = Namespace.create(StopwatchExtension.class);\n+\n+\t@Override\n+\tpublic void beforeTestExecution(ExtensionContext context) {\n+\t\tstoreNowAsLaunchTime(context);\n+\t}\n+\n+\t@Override\n+\tpublic void afterTestExecution(ExtensionContext context) {\n+\t\tcalculateAndReportElapsedTime(context);\n+\t}\n+\n+\t/**\n+\t * Stores the current time for the method in the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t */\n+\tvoid storeNowAsLaunchTime(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).put(context.getUniqueId(), clock.instant().toEpochMilli());\n+\t}\n+\n+\t/**\n+\t * Loads the stored time for method from the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t */\n+\tlong loadLaunchTime(ExtensionContext context) {\n+\t\treturn context.getStore(NAMESPACE).get(context.getUniqueId(), long.class);\n+\t}\n+\n+\t/**\n+\t * Calculates the elapsed time method and publishes it to the execution context.\n+\t *\n+\t * @param context Extension context of the class\n+\t */\n+\tvoid calculateAndReportElapsedTime(ExtensionContext context) {\n+\t\tlong launchTime = loadLaunchTime(context);\n+\t\tlong elapsedTime = currentTimeMillis() - launchTime;\n+\n+\t\tString message = String.format(\"Execution of '%s' took [%d] ms.\", context.getDisplayName(), elapsedTime);\n+\t\tcontext.publishReportEntry(\"stopwatch\", message);", "originalCommit": "37a50818309fa20cafbac41b6b6b416af624f68b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2430da9d648695e671ab5706a7e9ebe8538e6661", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\nindex e440311..92aa37a 100644\n--- a/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/StopwatchExtension.java\n\n@@ -10,8 +10,6 @@\n \n package org.junitpioneer.jupiter;\n \n-import static java.lang.System.currentTimeMillis;\n-\n import java.time.Clock;\n \n import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjY0NjcwOQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/182#discussion_r536646709", "bodyText": "Since you only assert a single report entry, you could use the new and shiny andThen(Consumer<Map.Entry<String,String>>) method. Something like this:\nassertThat(results).hasNumberOfReportEntries(1).andThen(entry -> {\n\tassertThat(entry.getKey()).isEqualTo(\"stopwatch\");\n\tassertThat(entry.getValue()).matches(format(\"Execution of '%s\\\\(\\\\)' took \\\\[[0-9]*\\\\] ms.\", methodName));\n});", "author": "Michael1993", "createdAt": "2020-12-05T10:07:59Z", "path": "src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junitpioneer.testkit.ExecutionResults;\n+import org.junitpioneer.testkit.PioneerTestKit;\n+import org.junitpioneer.testkit.assertion.PioneerAssert;\n+\n+@DisplayName(\"Stopwatch extension \")\n+public class StopwatchExtensionTests {\n+\n+\t@DisplayName(\"should be executed with annotation on class level and report an entry for test method\")\n+\t@Test\n+\tvoid runClassLevelAnnotationTest() {\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestClass(StopwatchExtensionTests.ClassLevelAnnotationTest.class);\n+\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(1);\n+\n+\t\tString methodName = \"stopwatchExtensionShouldBeExecutedWithAnnotationOnClassLevel\";\n+\t\tassertStringStartWithUnitAndContainsName(results, methodName);\n+\n+\t}\n+\n+\t@DisplayName(\"should be executed with annotation on class level and test method and report an entry for test method\")\n+\t@Test\n+\tvoid runClassAndMethodLevelAnnotationTest() {\n+\t\tString methodName = \"stopwatchExtensionShouldBeExecutedWithAnnotationOnClassAndMethodLevel\";\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestClass(StopwatchExtensionTests.ClassAndMethodLevelAnnotationTest.class);\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(1);\n+\n+\t\tassertStringStartWithUnitAndContainsName(results, methodName);\n+\t}\n+\n+\t@DisplayName(\"should be executed with annotation on test method and report an entry for test method\")\n+\t@Test\n+\tvoid runMethodLevelAnnotationTest() {\n+\t\tString methodName = \"stopwatchExtensionShouldBeExecutedOnWithAnnotationOnMethodLevel\";\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestMethod(StopwatchExtensionTests.MethodLevelAnnotationTest.class, methodName);\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(1);\n+\n+\t\tassertStringStartWithUnitAndContainsName(results, methodName);\n+\t}\n+\n+\t@DisplayName(\"should not be executed and therefore no entry should be published\")\n+\t@Test\n+\tvoid runAnnotationTest() {\n+\t\tString methodName = \"stopwatchExtensionShouldNotBeExecuted\";\n+\n+\t\tExecutionResults results = PioneerTestKit\n+\t\t\t\t.executeTestMethod(StopwatchExtensionTests.NonAnnotationTest.class, methodName);\n+\t\tPioneerAssert.assertThat(results).hasNumberOfReportEntries(0);\n+\n+\t}\n+\n+\tprivate void assertStringStartWithUnitAndContainsName(ExecutionResults results, String name) {\n+\n+\t\tMap<String, String> reportEntry = firstReportEntry(results);\n+\n+\t\tassertThat(reportEntry).hasSize(1);\n+\n+\t\tString result = reportEntry.get(\"stopwatch\");\n+\t\tassertThat(result).isNotNull();\n+\n+\t\tString startsWith = String.format(\"Execution of '%s()' took [\", name);\n+\n+\t\tassertThat(result).startsWith(startsWith);\n+\t\tassertThat(result).endsWith(\"] ms.\");\n+\t}\n+\n+\t/**\n+\t * Retrieves the first published ReportEntry.\n+\t * The possibility to retrieve the ReportEntries of a test execution was removed during\n+\t * the improvement of the PioneerAssertions.\n+\t *\n+\t * @param results Results of the test execution\n+\t * @return The first ReportEntry\n+\t */\n+\tprivate Map<String, String> firstReportEntry(ExecutionResults results) {", "originalCommit": "37a50818309fa20cafbac41b6b6b416af624f68b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2430da9d648695e671ab5706a7e9ebe8538e6661", "chunk": "diff --git a/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java b/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java\nindex f882fb9..95f1936 100644\n--- a/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java\n+++ b/src/test/java/org/junitpioneer/jupiter/StopwatchExtensionTests.java\n\n@@ -10,16 +10,10 @@\n \n package org.junitpioneer.jupiter;\n \n-import static java.util.stream.Collectors.toList;\n import static org.assertj.core.api.Assertions.assertThat;\n \n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n-import org.junit.platform.engine.reporting.ReportEntry;\n import org.junitpioneer.testkit.ExecutionResults;\n import org.junitpioneer.testkit.PioneerTestKit;\n import org.junitpioneer.testkit.assertion.PioneerAssert;\n"}}, {"oid": "f6ed9c8364b1abd57ee9ff6c7e0ca2fcc5ac00df", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f6ed9c8364b1abd57ee9ff6c7e0ca2fcc5ac00df", "message": "Gradle-bat", "committedDate": "2020-12-05T17:51:08Z", "type": "commit"}, {"oid": "bed3258962333c33ad4ce1514c43774a8fcf4756", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/bed3258962333c33ad4ce1514c43774a8fcf4756", "message": "Merge branch 'master' into stopwatch", "committedDate": "2020-12-05T17:51:33Z", "type": "commit"}, {"oid": "2430da9d648695e671ab5706a7e9ebe8538e6661", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2430da9d648695e671ab5706a7e9ebe8538e6661", "message": "Apply review comments", "committedDate": "2020-12-05T18:08:09Z", "type": "commit"}, {"oid": "c1125c2c5b7a98fb9c828535bca3f0b7d65da9e7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c1125c2c5b7a98fb9c828535bca3f0b7d65da9e7", "message": "Apply review comments", "committedDate": "2020-12-05T18:13:32Z", "type": "commit"}, {"oid": "c6d875df9ceed34e5f96525fb237bceb39064833", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c6d875df9ceed34e5f96525fb237bceb39064833", "message": "Apply review comments", "committedDate": "2020-12-06T08:53:56Z", "type": "commit"}]}