{"pr_number": 175, "pr_title": "Add extension to disable per test name to be able to disable parameterized tests", "pr_createdAt": "2020-02-19T14:20:58Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/175", "timeline": [{"oid": "55d43c1cc9eef845858b16ccf9cca119617d5b35", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/55d43c1cc9eef845858b16ccf9cca119617d5b35", "message": "Add extension to disable per test name to be able to disable parameterized tests", "committedDate": "2020-02-19T14:20:14Z", "type": "commit"}, {"oid": "f23975a6ffe021021923ab14cb70805b8432ce0b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f23975a6ffe021021923ab14cb70805b8432ce0b", "message": "Misplaced file", "committedDate": "2020-02-19T14:32:23Z", "type": "commit"}, {"oid": "c0aa200b760a5ee55807b0347eba0273cc540512", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c0aa200b760a5ee55807b0347eba0273cc540512", "message": "Add a test that is not disabled", "committedDate": "2020-03-26T20:44:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r398882223", "bodyText": "We could disable on class level, too, right? Would that make sense?", "author": "nipafx", "createdAt": "2020-03-26T20:48:45Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled;\n+import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+public class DisableIfNameExtension implements ExecutionCondition {\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\n+\t\tif (!disable.isPresent()) {\n+\t\t\treturn enabled(\"No instructions to disable\");\n+\t\t} else if (!context.getTestMethod().isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level\");", "originalCommit": "f23975a6ffe021021923ab14cb70805b8432ce0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxMTc0Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r398911747", "bodyText": "The problem with disabling at class level is that this will get disabled before the parameterized tests could get registered.\nHence, all tests will end up getting disabled since the test name will never be calculated for a parameterized test", "author": "nishantvas", "createdAt": "2020-03-26T21:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3Njk4MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r399776981", "bodyText": "Yeah, that makes sense. And I just checked that the annotation hs @Target({ ElementType.METHOD }), so this should not happen anyways.", "author": "nipafx", "createdAt": "2020-03-29T10:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "b84b49b3a6ba3eb264983facb572d301ba8bee05", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java b/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java\nindex 11d6d64..85485a6 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java\n\n@@ -14,6 +14,7 @@ import static org.junit.jupiter.api.extension.ConditionEvaluationResult.disabled\n import static org.junit.jupiter.api.extension.ConditionEvaluationResult.enabled;\n import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n \n+import java.lang.reflect.Method;\n import java.util.Optional;\n \n import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n"}}, {"oid": "d311db86fa92a6e16bb990526b0e63e38987365e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d311db86fa92a6e16bb990526b0e63e38987365e", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into parameterized", "committedDate": "2020-03-27T10:44:55Z", "type": "commit"}, {"oid": "b84b49b3a6ba3eb264983facb572d301ba8bee05", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b84b49b3a6ba3eb264983facb572d301ba8bee05", "message": "Add documentation and Expand to test name as array", "committedDate": "2020-03-30T18:03:00Z", "type": "commit"}, {"oid": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "message": "Check Style", "committedDate": "2020-03-30T18:10:31Z", "type": "commit"}, {"oid": "ca219272cbfbfcfe877cddc420f559e4f5c99df7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ca219272cbfbfcfe877cddc420f559e4f5c99df7", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into parameterized", "committedDate": "2020-04-01T09:41:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMDcwNA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401820704", "bodyText": "basis their\n\nDo you mean based on their ?", "author": "Bukama", "createdAt": "2020-04-01T18:25:58Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex e87e973..3454ea2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -24,18 +24,18 @@ import org.junit.jupiter.params.ParameterizedTest;\n \n /**\n  * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n- * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n  *\n  * <p>\n  * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n  * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n  * the whole test but not the Parameterized tests selectively\n  *\n- * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * If it is required to disable selective tests out of the plethora of dynamically\n  * registered Parameterized tests, then we can utilize the following\n  *\n- * Each repeatable annotation will be processed for each test, and Test will be skipped if\n- * any of them evaluate to be true against the display name\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n  *\n  * @since 0.5.6\n  * @see DisableIfNameExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMTc4NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401821784", "bodyText": "If it is required to disable selective tests...", "author": "Bukama", "createdAt": "2020-04-01T18:27:49Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex e87e973..3454ea2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -24,18 +24,18 @@ import org.junit.jupiter.params.ParameterizedTest;\n \n /**\n  * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n- * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n  *\n  * <p>\n  * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n  * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n  * the whole test but not the Parameterized tests selectively\n  *\n- * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * If it is required to disable selective tests out of the plethora of dynamically\n  * registered Parameterized tests, then we can utilize the following\n  *\n- * Each repeatable annotation will be processed for each test, and Test will be skipped if\n- * any of them evaluate to be true against the display name\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n  *\n  * @since 0.5.6\n  * @see DisableIfNameExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjAyMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401822020", "bodyText": "and the test will be", "author": "Bukama", "createdAt": "2020-04-01T18:28:12Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex e87e973..3454ea2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -24,18 +24,18 @@ import org.junit.jupiter.params.ParameterizedTest;\n \n /**\n  * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n- * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n  *\n  * <p>\n  * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n  * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n  * the whole test but not the Parameterized tests selectively\n  *\n- * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * If it is required to disable selective tests out of the plethora of dynamically\n  * registered Parameterized tests, then we can utilize the following\n  *\n- * Each repeatable annotation will be processed for each test, and Test will be skipped if\n- * any of them evaluate to be true against the display name\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n  *\n  * @since 0.5.6\n  * @see DisableIfNameExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyMjQ2Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401822467", "bodyText": "evaluates true against the display name.", "author": "Bukama", "createdAt": "2020-04-01T18:28:57Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex e87e973..3454ea2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -24,18 +24,18 @@ import org.junit.jupiter.params.ParameterizedTest;\n \n /**\n  * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n- * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n  *\n  * <p>\n  * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n  * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n  * the whole test but not the Parameterized tests selectively\n  *\n- * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * If it is required to disable selective tests out of the plethora of dynamically\n  * registered Parameterized tests, then we can utilize the following\n  *\n- * Each repeatable annotation will be processed for each test, and Test will be skipped if\n- * any of them evaluate to be true against the display name\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n  *\n  * @since 0.5.6\n  * @see DisableIfNameExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNjYzOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401826638", "bodyText": "Displaynames of the tests cases to be disabled. The whole test case name can be stored as well as sub strings of it. The values will be evaluated [...] by default.\nIf {code regex} is provided, the string will be evaluated as ... display name.\n\n@return Test case display name", "author": "Bukama", "createdAt": "2020-04-01T18:35:54Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex e87e973..3454ea2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -24,18 +24,18 @@ import org.junit.jupiter.params.ParameterizedTest;\n \n /**\n  * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n- * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n  *\n  * <p>\n  * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n  * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n  * the whole test but not the Parameterized tests selectively\n  *\n- * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * If it is required to disable selective tests out of the plethora of dynamically\n  * registered Parameterized tests, then we can utilize the following\n  *\n- * Each repeatable annotation will be processed for each test, and Test will be skipped if\n- * any of them evaluate to be true against the display name\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n  *\n  * @since 0.5.6\n  * @see DisableIfNameExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNzgxMQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401827811", "bodyText": "Suggest to rename it to isRegEx. The name regex suggests that this field holds the regular expression itselfs, which will be confusing as a boolean can't hold such.", "author": "Bukama", "createdAt": "2020-04-01T18:37:53Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test, and Test will be skipped if\n+ * any of them evaluate to be true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t * Display names for the tests, they can be the whole test case names or sub strings per test\n+\t * This will be evaluated as {@link String#contains(CharSequence)} by default\n+\t * If, {@code regex} is provided, then the string will be evaluated as\n+\t * {@link String#matches(String)} against the display name\n+\t * @return Test Case display name\n+\t */\n+\tString[] value();\n+\n+\t/**\n+\t * @return if the {@code value} is to be evaluated as regular expression or sub-string\n+\t */\n+\tboolean regex() default false;", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex e87e973..3454ea2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -24,18 +24,18 @@ import org.junit.jupiter.params.ParameterizedTest;\n \n /**\n  * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n- * selectively disable {@link ParameterizedTest} basis their {@link ExtensionContext#getDisplayName()}\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n  *\n  * <p>\n  * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n  * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n  * the whole test but not the Parameterized tests selectively\n  *\n- * If it is required that we wish to disable selective tests out of the plethora of dynamically\n+ * If it is required to disable selective tests out of the plethora of dynamically\n  * registered Parameterized tests, then we can utilize the following\n  *\n- * Each repeatable annotation will be processed for each test, and Test will be skipped if\n- * any of them evaluate to be true against the display name\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n  *\n  * @since 0.5.6\n  * @see DisableIfNameExtension\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r401829293", "bodyText": "Please update to the new methods, provided by #187 after it is merged", "author": "Bukama", "createdAt": "2020-04-01T18:40:21Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java", "diffHunk": "@@ -24,25 +25,31 @@\n \n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<DisableIfName> disable = findAnnotation(context.getElement(), DisableIfName.class);\n+\t\tOptional<Method> testMethod = context.getTestMethod();\n \n-\t\tif (!disable.isPresent()) {\n-\t\t\treturn enabled(\"No instructions to disable\");\n-\t\t} else if (!context.getTestMethod().isPresent()) {\n-\t\t\treturn enabled(\"Only disable at method level\");\n+\t\tif (!testMethod.isPresent()) {\n+\t\t\treturn enabled(\"Only disable at method level so the parameterized tests could be registered\");\n \t\t}\n-\t\tDisableIfName details = disable.get();\n-\t\tboolean toDisable;\n-\t\tif (details.regex()) {\n-\t\t\ttoDisable = context.getDisplayName().matches(details.value());\n-\t\t} else {\n-\t\t\ttoDisable = context.getDisplayName().contains(details.value());\n+\n+\t\tOptional<DisableIfDisplayName> disableIf = findAnnotation(testMethod, DisableIfDisplayName.class);", "originalCommit": "1852e358bd5d1b33940b8dfa82e71dc107d2ce7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NDE2MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r404274161", "bodyText": "Will wait for #187 to be merged to resolve all the other comments then", "author": "nishantvas", "createdAt": "2020-04-06T17:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTE3Mg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r405085172", "bodyText": "We just merged it, @nishantvas.", "author": "nipafx", "createdAt": "2020-04-07T20:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyOTI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java b/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java\nindex 85485a6..f06317d 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfNameExtension.java\n\n@@ -31,7 +31,7 @@ public class DisableIfNameExtension implements ExecutionCondition {\n \t\t\treturn enabled(\"Only disable at method level so the parameterized tests could be registered\");\n \t\t}\n \n-\t\tOptional<DisableIfDisplayName> disableIf = findAnnotation(testMethod, DisableIfDisplayName.class);\n+\t\tOptional<DisableIfDisplayName> disableIf = findClosestEnclosingAnnotation(context, DisableIfDisplayName.class);\n \t\tif (!disableIf.isPresent()) {\n \t\t\treturn enabled(\"No instructions to disable\");\n \t\t}\n"}}, {"oid": "2e97fd007ebbf73c74b1bd1c1c6d60c9f645c265", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2e97fd007ebbf73c74b1bd1c1c6d60c9f645c265", "message": "Merge branch 'master' of https://github.com/junit-pioneer/junit-pioneer into parameterized", "committedDate": "2020-04-27T11:13:11Z", "type": "commit"}, {"oid": "1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1b06a9d2d3116d60ef442633daa34bc0c2fadbcf", "message": "Update to new Annotation utils and grammar check docks", "committedDate": "2020-04-27T11:28:58Z", "type": "commit"}, {"oid": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b01381ea4325730b1b5b3b1a101d0071a31f57c6", "message": "Move tests to new Runner", "committedDate": "2020-04-27T11:34:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MDM4NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415770385", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n          \n          \n            \n            \t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name", "author": "Bukama", "createdAt": "2020-04-27T12:29:56Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t *\n+\t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n+\t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n+\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MTg2Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415771863", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n          \n          \n            \n             * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}.", "author": "Bukama", "createdAt": "2020-04-27T12:32:05Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjIzMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415772230", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n          \n          \n            \n             * The extension is an {@link ExecutionCondition}, which validates dynamically registered tests.", "author": "Bukama", "createdAt": "2020-04-27T12:32:43Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MjYzOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415772638", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n          \n          \n            \n             * the whole test but not the Parameterized tests selectively\n          \n          \n            \n             * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n          \n          \n            \n             * the whole test, but not the Parameterized tests selectively.", "author": "Bukama", "createdAt": "2020-04-27T12:33:18Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MzIyNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415773225", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * registered Parameterized tests, then we can utilize the following\n          \n          \n            \n             * registered Parameterized tests, then we can utilize the following.", "author": "Bukama", "createdAt": "2020-04-27T12:34:12Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3Mzk0OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415773949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Each repeatable annotation will be processed for each test and test will be skipped if\n          \n          \n            \n             * any of them evaluates true against the display name\n          \n          \n            \n             * Each repeatable annotation will be processed for each test and the test will be skipped if\n          \n          \n            \n             * any of them evaluates true against the display name.", "author": "Bukama", "createdAt": "2020-04-27T12:35:24Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDk3Ng==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/175#discussion_r415774976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n          \n          \n            \n            \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n          \n          \n            \n            \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as  a sub string. \n          \n          \n            \n            \t * The values will be evaluated with {@link String#contains(CharSequence)} by default.", "author": "Bukama", "createdAt": "2020-04-27T12:36:57Z", "path": "src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.condition.DisabledIf;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+\n+/**\n+ * {@code @DisableIfDisplayName} is a JUnit Jupiter extension which can be used to\n+ * selectively disable {@link ParameterizedTest} based on their {@link ExtensionContext#getDisplayName()}\n+ *\n+ * <p>\n+ * The extension is an {@link ExecutionCondition} which validates dynamically registered tests\n+ * This is highly useful since current {@link Disabled} or {@link DisabledIf} annotations disable\n+ * the whole test but not the Parameterized tests selectively\n+ *\n+ * If it is required to disable selective tests out of the plethora of dynamically\n+ * registered Parameterized tests, then we can utilize the following\n+ *\n+ * Each repeatable annotation will be processed for each test and test will be skipped if\n+ * any of them evaluates true against the display name\n+ *\n+ * @since 0.5.6\n+ * @see DisableIfNameExtension\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@ExtendWith(DisableIfNameExtension.class)\n+public @interface DisableIfDisplayName {\n+\n+\t/**\n+\t *\n+\t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n+\t * The values will be evaluated with {@link String#contains(CharSequence)} by default", "originalCommit": "b01381ea4325730b1b5b3b1a101d0071a31f57c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\nindex 3454ea2..298f6a9 100644\n--- a/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n+++ b/src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\n@@ -49,7 +49,7 @@ public @interface DisableIfDisplayName {\n \t *\n \t * Display names of the test cases to be disabled. The whole test case name can be passed as well as sub string\n \t * The values will be evaluated with {@link String#contains(CharSequence)} by default\n-\t * If, {@code regex} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n+\t * If, {@code isRegEx} is provided, the string will be evaluated with {@link String#matches(String)} against the display name\n \t * @return Test Case display name\n \t */\n \tString[] value();\n"}}, {"oid": "73bcfcf50b6a643db5624005e7d89f5240a05a45", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/73bcfcf50b6a643db5624005e7d89f5240a05a45", "message": "Update src/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java\n\nCo-Authored-By: Matthias B\u00fcnger <Bukama@users.noreply.github.com>", "committedDate": "2020-04-27T14:49:13Z", "type": "commit"}, {"oid": "02bde4ada73af1c603c1c7213b6399e642f7ef18", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/02bde4ada73af1c603c1c7213b6399e642f7ef18", "message": "Update typos", "committedDate": "2020-04-27T14:51:47Z", "type": "commit"}, {"oid": "f851041c12e48cad2c650ac9d9889039cf9a6c15", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f851041c12e48cad2c650ac9d9889039cf9a6c15", "message": "Merge branch 'parameterized' of https://github.com/nishantvas/junit-pioneer into parameterized\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/org/junitpioneer/jupiter/DisableIfDisplayName.java", "committedDate": "2020-04-27T14:52:11Z", "type": "commit"}, {"oid": "a6498193aecdc93109b1233e30c02e6d2583ff1f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a6498193aecdc93109b1233e30c02e6d2583ff1f", "message": "Improve documentation", "committedDate": "2020-05-19T20:54:34Z", "type": "commit"}, {"oid": "a047ee12be06b9c51a4cf4fff3da182dc40fe94b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a047ee12be06b9c51a4cf4fff3da182dc40fe94b", "message": "Refactor and add tests", "committedDate": "2020-05-19T20:56:51Z", "type": "commit"}, {"oid": "aca01b61f8b668969c4151936014389963309633", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/aca01b61f8b668969c4151936014389963309633", "message": "Refactor extension", "committedDate": "2020-05-19T20:58:41Z", "type": "commit"}, {"oid": "55e1de57e860c0a979cb6e657b1669287027b880", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/55e1de57e860c0a979cb6e657b1669287027b880", "message": "Don't accidentally disable entire test method", "committedDate": "2020-05-19T20:59:04Z", "type": "commit"}, {"oid": "89e35e9f76097950a0e5097abbb99f075697bcdf", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/89e35e9f76097950a0e5097abbb99f075697bcdf", "message": "Move new classes into params package", "committedDate": "2020-06-20T13:43:21Z", "type": "commit"}, {"oid": "a5919153eccb706593f38b682d5f74460181e38d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a5919153eccb706593f38b682d5f74460181e38d", "message": "Add attributes `contains` and `matches`.", "committedDate": "2020-06-20T14:22:43Z", "type": "commit"}, {"oid": "3c8486ada8bb457a6d193ef6778fa8b2a11b1b77", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3c8486ada8bb457a6d193ef6778fa8b2a11b1b77", "message": "Apply Spotless", "committedDate": "2020-06-20T14:35:40Z", "type": "commit"}, {"oid": "659942c89cea725c88719f70c8473450426d2741", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/659942c89cea725c88719f70c8473450426d2741", "message": "Update documentation", "committedDate": "2020-06-20T14:35:52Z", "type": "commit"}, {"oid": "a602965a7c988c4d0546a5ae87ca73471fbcfbe9", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a602965a7c988c4d0546a5ae87ca73471fbcfbe9", "message": "Fix failing test and move test code around", "committedDate": "2020-06-20T14:42:14Z", "type": "commit"}, {"oid": "cb605bab63afe71ffdaeb13b945083f850d76c63", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/cb605bab63afe71ffdaeb13b945083f850d76c63", "message": "Apply Spotless [AGAIN!]", "committedDate": "2020-06-20T14:51:50Z", "type": "commit"}]}