{"pr_number": 386, "pr_title": "Making SONAR happy", "pr_createdAt": "2020-12-13T15:20:35Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/386", "timeline": [{"oid": "76c8b895017ad1947bc478ce1015fe65737bd15d", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/76c8b895017ad1947bc478ce1015fe65737bd15d", "message": "Test without assertions = successful test\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T14:14:02Z", "type": "commit"}, {"oid": "aaf2c7f91871363edfec6ef1d27f4502b1f663d4", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/aaf2c7f91871363edfec6ef1d27f4502b1f663d4", "message": "Provide basic implementation of read/write(byte[], int, int)\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T14:41:22Z", "type": "commit"}, {"oid": "15175d0ba7f1bce5ab71df650055e422293b40f5", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/15175d0ba7f1bce5ab71df650055e422293b40f5", "message": "Extract String in a somewhat ugly way\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T14:41:47Z", "type": "commit"}, {"oid": "38ca36a1b9abdda40c3ccb809125c678b6fa85a5", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/38ca36a1b9abdda40c3ccb809125c678b6fa85a5", "message": "Create PioneerException, add NOSONAR comment to accessibility\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T14:53:15Z", "type": "commit"}, {"oid": "82030160aef58be3b4414515ca1c8828f1430631", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/82030160aef58be3b4414515ca1c8828f1430631", "message": "Pull new test covering Sets#addAll(Iterable) from #362\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T14:58:42Z", "type": "commit"}, {"oid": "44055e4f0d592b971eb147f1d5a7231c2ba35efb", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/44055e4f0d592b971eb147f1d5a7231c2ba35efb", "message": "Spotless\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T14:59:46Z", "type": "commit"}, {"oid": "26014d04e0a87d4ff0090c1fe0e15af56f6e8493", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/26014d04e0a87d4ff0090c1fe0e15af56f6e8493", "message": "Spotless\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T16:03:50Z", "type": "commit"}, {"oid": "a54ab7e4b331726f2de024e9eddc4515e36c79ba", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a54ab7e4b331726f2de024e9eddc4515e36c79ba", "message": "Resource lock AnnotationUtils, I think\n\nSigned-off-by: Mihaly Verhas <misi.verhas@gmail.com>", "committedDate": "2020-12-13T16:13:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIzODgxMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/386#discussion_r542238810", "bodyText": "This was supposed to be Exception instead of ReflectiveOperationException. Oops.", "author": "Michael1993", "createdAt": "2020-12-14T09:36:13Z", "path": "src/main/java/org/junitpioneer/jupiter/PioneerException.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+public class PioneerException extends RuntimeException {\n+\n+\tpublic PioneerException(String s, ReflectiveOperationException ex) {", "originalCommit": "a54ab7e4b331726f2de024e9eddc4515e36c79ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTQyMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/386#discussion_r542241420", "bodyText": "I viscerally hate this. I don't even know why. I'm hoping someone smarter comes along and tells me a better solution.", "author": "Michael1993", "createdAt": "2020-12-14T09:39:37Z", "path": "src/test/java/org/junitpioneer/jupiter/params/PioneerAnnotationUtilsTests.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter.params;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.parallel.ResourceLock;\n+import org.junitpioneer.jupiter.PioneerException;\n+\n+@DisplayName(\"Reflexive copy of PioneerAnnotationUtils\")\n+@ResourceLock(value = \"org.junitpioneer.jupiter.params.PioneerAnnotationUtils\")", "originalCommit": "a54ab7e4b331726f2de024e9eddc4515e36c79ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzODk3Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/386#discussion_r543538977", "bodyText": "Sorry I don't. Afair the @ResourceLock is the way how the JUnit Jupiter guys want's you to do.", "author": "Bukama", "createdAt": "2020-12-15T17:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0MTQyMA=="}], "type": "inlineReview", "revised_code": null}]}