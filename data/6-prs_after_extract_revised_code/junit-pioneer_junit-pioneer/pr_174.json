{"pr_number": 174, "pr_title": "Add Annotation for System Environment Variables", "pr_createdAt": "2020-02-18T20:00:15Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/174", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387310943", "bodyText": "And OS X?", "author": "nipafx", "createdAt": "2020-03-03T21:42:32Z", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {\n+\n+\t/**\n+\t * Set a value of an environment variable.\n+\t *\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n+\t */\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\t}\n+\n+\t/**\n+\t * Set the values of an environment variables.\n+\t *\n+\t * @param entries with name and new value of the environment variables\n+\t */\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\t}\n+\n+\t/**\n+\t * Clear an environment variable.\n+\t *\n+\t * @param name of the environment variable\n+\t */\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\t}\n+\n+\t/**\n+\t * Clears environment variables.\n+\t *\n+\t * @param names of the environment variables.\n+\t */\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\t}\n+\n+\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+\t\ttry {\n+\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n+\t\t}\n+\t}\n+\n+\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ReflectiveOperationException {\n+\t\ttry {\n+\t\t\tsetInProcessEnvironmentClass(consumer);\n+\t\t}\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tsetInSystemEnvClass(consumer);\n+\t\t}\n+\t}\n+\n+\t/*\n+\t * Works on Windows\n+\t */\n+\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n+\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n+\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n+\t}\n+\n+\t/*\n+\t * Works on Linux", "originalCommit": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4ODA3MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388188070", "bodyText": "Same as Linux as far as I can tell.", "author": "Hancho2009", "createdAt": "2020-03-05T09:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1OTAzNA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393959034", "bodyText": "Edited: Nevermind. :)", "author": "nipafx", "createdAt": "2020-03-17T20:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\nindex 7c5a32c..a28bdb2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n+++ b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n\n@@ -11,106 +11,96 @@\n package org.junitpioneer.jupiter;\n \n import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n import java.util.Collection;\n import java.util.Map;\n import java.util.function.Consumer;\n \n-import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n-\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n- * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ * If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n-\t/**\n-\t * Set a value of an environment variable.\n-\t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n-\t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n-\t}\n+    /**\n+     * Set the values of an environment variables.\n+     *\n+     * @param entries with name and new value of the environment variables\n+     */\n+    public static void set(Map<String, String> entries) {\n+        modifyEnvironmentVariables(map -> map.putAll(entries));\n+    }\n \n-\t/**\n-\t * Set the values of an environment variables.\n-\t *\n-\t * @param entries with name and new value of the environment variables\n-\t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n-\t}\n+    /**\n+     * Clears environment variables.\n+     *\n+     * @param names of the environment variables.\n+     */\n+    public static void clear(Collection<String> names) {\n+        modifyEnvironmentVariables(map -> names.forEach(map::remove));\n+    }\n \n-\t/**\n-\t * Clear an environment variable.\n-\t *\n-\t * @param name of the environment variable\n-\t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n-\t}\n+    /**\n+     * Set a value of an environment variable.\n+     *\n+     * @param name  of the environment variable\n+     * @param value of the environment variable\n+     */\n+    public static void set(String name, String value) {\n+        modifyEnvironmentVariables(map -> map.put(name, value));\n+    }\n \n-\t/**\n-\t * Clears environment variables.\n-\t *\n-\t * @param names of the environment variables.\n-\t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n-\t}\n+    /**\n+     * Clear an environment variable.\n+     *\n+     * @param name of the environment variable\n+     */\n+    public static void clear(String name) {\n+        modifyEnvironmentVariables(map -> map.remove(name));\n+    }\n \n-\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n-\t\ttry {\n-\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n-\t\t}\n-\t}\n+    private static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+        try {\n+            tryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+        } catch (NoSuchFieldException e) {\n+            throw new RuntimeException(\"Could not modify environment variables\");\n+        }\n+    }\n \n-\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ReflectiveOperationException {\n-\t\ttry {\n-\t\t\tsetInProcessEnvironmentClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tsetInSystemEnvClass(consumer);\n-\t\t}\n-\t}\n+    private static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+            throws NoSuchFieldException {\n+        try {\n+            setInProcessEnvironmentClass(consumer);\n+        } catch (NoSuchFieldException | ClassNotFoundException e) {\n+            setInSystemEnvClass(consumer);\n+        }\n+    }\n \n-\t/*\n-\t * Works on Windows\n-\t */\n-\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n-\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n-\t}\n+    /*\n+     * Works on Windows\n+     */\n+    private static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+            throws ClassNotFoundException, NoSuchFieldException {\n+        Class<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theEnvironment\"));\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theCaseInsensitiveEnvironment\"));\n+    }\n \n-\t/*\n-\t * Works on Linux\n-\t */\n-\tprivate static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n-\t\tMap<String, String> env = System.getenv();\n-\t\tconsumer.accept(getFieldValue(env.getClass(), env, \"m\"));\n-\t}\n+    /*\n+     * Works on Linux\n+     */\n+    private static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n+        consumer.accept(getFieldValue(System.getenv().getClass(), \"m\"));\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static Map<String, String> getFieldValue(Class<?> clazz, Object object, String name)\n-\t\t\tthrows NoSuchFieldException {\n-\t\tField field = clazz.getDeclaredField(name);\n-\t\ttry {\n-\t\t\tfield.setAccessible(true);\n-\t\t\treturn (Map<String, String>) field.get(object);\n-\t\t}\n-\t\tcatch (IllegalAccessException e) {\n-\t\t\tboolean staticField = Modifier.isStatic(field.getModifiers());\n-\t\t\tthrow new RuntimeException(\n-\t\t\t\t\"Cannot access \" + (staticField ? \"static \" : \"\") + \"field \" + clazz.getName() + \".\" + name, e);\n-\t\t}\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    private static Map<String, String> getFieldValue(Class<?> clazz, String name) throws NoSuchFieldException {\n+        Field field = clazz.getDeclaredField(name);\n+        try {\n+            field.setAccessible(true);\n+            return (Map<String, String>) field.get(null);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Cannot access field \" + clazz.getName() + \".\" + name, e);\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMTUyNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r387311525", "bodyText": "I don't think this should be public API. Was that an accident or on purpose?", "author": "nipafx", "createdAt": "2020-03-03T21:43:38Z", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n+/**\n+ * This class modifies the internals of the environment variables map with reflection.\n+ * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ */\n+public class EnvironmentVariableUtils {", "originalCommit": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTc4OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388189789", "bodyText": "accident \ud83d\ude33", "author": "Hancho2009", "createdAt": "2020-03-05T10:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\nindex 7c5a32c..a28bdb2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n+++ b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n\n@@ -11,106 +11,96 @@\n package org.junitpioneer.jupiter;\n \n import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n import java.util.Collection;\n import java.util.Map;\n import java.util.function.Consumer;\n \n-import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n-\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n- * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ * If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n-\t/**\n-\t * Set a value of an environment variable.\n-\t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n-\t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n-\t}\n+    /**\n+     * Set the values of an environment variables.\n+     *\n+     * @param entries with name and new value of the environment variables\n+     */\n+    public static void set(Map<String, String> entries) {\n+        modifyEnvironmentVariables(map -> map.putAll(entries));\n+    }\n \n-\t/**\n-\t * Set the values of an environment variables.\n-\t *\n-\t * @param entries with name and new value of the environment variables\n-\t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n-\t}\n+    /**\n+     * Clears environment variables.\n+     *\n+     * @param names of the environment variables.\n+     */\n+    public static void clear(Collection<String> names) {\n+        modifyEnvironmentVariables(map -> names.forEach(map::remove));\n+    }\n \n-\t/**\n-\t * Clear an environment variable.\n-\t *\n-\t * @param name of the environment variable\n-\t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n-\t}\n+    /**\n+     * Set a value of an environment variable.\n+     *\n+     * @param name  of the environment variable\n+     * @param value of the environment variable\n+     */\n+    public static void set(String name, String value) {\n+        modifyEnvironmentVariables(map -> map.put(name, value));\n+    }\n \n-\t/**\n-\t * Clears environment variables.\n-\t *\n-\t * @param names of the environment variables.\n-\t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n-\t}\n+    /**\n+     * Clear an environment variable.\n+     *\n+     * @param name of the environment variable\n+     */\n+    public static void clear(String name) {\n+        modifyEnvironmentVariables(map -> map.remove(name));\n+    }\n \n-\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n-\t\ttry {\n-\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n-\t\t}\n-\t}\n+    private static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+        try {\n+            tryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+        } catch (NoSuchFieldException e) {\n+            throw new RuntimeException(\"Could not modify environment variables\");\n+        }\n+    }\n \n-\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ReflectiveOperationException {\n-\t\ttry {\n-\t\t\tsetInProcessEnvironmentClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tsetInSystemEnvClass(consumer);\n-\t\t}\n-\t}\n+    private static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+            throws NoSuchFieldException {\n+        try {\n+            setInProcessEnvironmentClass(consumer);\n+        } catch (NoSuchFieldException | ClassNotFoundException e) {\n+            setInSystemEnvClass(consumer);\n+        }\n+    }\n \n-\t/*\n-\t * Works on Windows\n-\t */\n-\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n-\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n-\t}\n+    /*\n+     * Works on Windows\n+     */\n+    private static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+            throws ClassNotFoundException, NoSuchFieldException {\n+        Class<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theEnvironment\"));\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theCaseInsensitiveEnvironment\"));\n+    }\n \n-\t/*\n-\t * Works on Linux\n-\t */\n-\tprivate static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n-\t\tMap<String, String> env = System.getenv();\n-\t\tconsumer.accept(getFieldValue(env.getClass(), env, \"m\"));\n-\t}\n+    /*\n+     * Works on Linux\n+     */\n+    private static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n+        consumer.accept(getFieldValue(System.getenv().getClass(), \"m\"));\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static Map<String, String> getFieldValue(Class<?> clazz, Object object, String name)\n-\t\t\tthrows NoSuchFieldException {\n-\t\tField field = clazz.getDeclaredField(name);\n-\t\ttry {\n-\t\t\tfield.setAccessible(true);\n-\t\t\treturn (Map<String, String>) field.get(object);\n-\t\t}\n-\t\tcatch (IllegalAccessException e) {\n-\t\t\tboolean staticField = Modifier.isStatic(field.getModifiers());\n-\t\t\tthrow new RuntimeException(\n-\t\t\t\t\"Cannot access \" + (staticField ? \"static \" : \"\") + \"field \" + clazz.getName() + \".\" + name, e);\n-\t\t}\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    private static Map<String, String> getFieldValue(Class<?> clazz, String name) throws NoSuchFieldException {\n+        Field field = clazz.getDeclaredField(name);\n+        try {\n+            field.setAccessible(true);\n+            return (Map<String, String>) field.get(null);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Cannot access field \" + clazz.getName() + \".\" + name, e);\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388202971", "bodyText": "I did not like in both versions that the exception from the setInProcessEnvironmentClass is not shown if it reaches this catch block. I looked into it and think we can work with addSuppressed.\n    public static void main(String[] args) {\n        try {\n            try {\n                throw new ReflectiveOperationException(\"First try\");\n            } catch (ReflectiveOperationException e) {\n                try {\n                    throw new ReflectiveOperationException(\"Second try\");\n                } catch (ReflectiveOperationException ex) {\n                    ex.addSuppressed(e);\n                    throw new RuntimeException(\"all\", ex);\n                }\n            }\n        } catch (RuntimeException runtimeE)\n        {\n            runtimeE.printStackTrace();\n        }\n    }\n\nOutput:\njava.lang.RuntimeException: all\n\tat org.junitpioneer.Test.main(Test.java:14)\nCaused by: java.lang.ReflectiveOperationException: Second try\n\tat org.junitpioneer.Test.main(Test.java:11)\n\tSuppressed: java.lang.ReflectiveOperationException: First try\n\t\tat org.junitpioneer.Test.main(Test.java:8)\n\nwhat do you think?", "author": "Hancho2009", "createdAt": "2020-03-05T10:25:58Z", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);", "originalCommit": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NTU5Ng==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388775596", "bodyText": "Instead of the cause we could also use two suppressed too better represent that they are on the same level:\n    public static void main(String[] args) {\n        try {\n            try {\n                throw new ReflectiveOperationException(\"First try\");\n            } catch (ReflectiveOperationException e) {\n                try {\n                    throw new ReflectiveOperationException(\"Second try\");\n                } catch (ReflectiveOperationException ex) {\n                    RuntimeException runtimeException = new RuntimeException(\"all\");\n                    runtimeException.addSuppressed(e);\n                    runtimeException.addSuppressed(ex);\n                    throw runtimeException;\n                }\n            }\n        } catch (RuntimeException runtimeE)\n        {\n            runtimeE.printStackTrace();\n        }\n    }\n\nOutput:\njava.lang.RuntimeException: all\n\tat org.junitpioneer.Test.main(Test.java:13)\n\tSuppressed: java.lang.ReflectiveOperationException: First try\n\t\tat org.junitpioneer.Test.main(Test.java:8)\n\tSuppressed: java.lang.ReflectiveOperationException: Second try\n\t\tat org.junitpioneer.Test.main(Test.java:11)", "author": "Hancho2009", "createdAt": "2020-03-06T08:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk2NzMzNg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r393967336", "bodyText": "(A) Great catch about the first exception, which went missing. Adding it as suppressed to the second exception looks right to me because the code that lead to the second exception did indeed suppress the first.\n(B) I would still add the second exception as cause to the final (third) one because that causal chain represents well what actually happened.\nAs far as I can tell the code still does (A) and I would keep it that way.", "author": "nipafx", "createdAt": "2020-03-17T21:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\nindex 7c5a32c..a28bdb2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n+++ b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n\n@@ -11,106 +11,96 @@\n package org.junitpioneer.jupiter;\n \n import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n import java.util.Collection;\n import java.util.Map;\n import java.util.function.Consumer;\n \n-import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n-\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n- * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ * If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n-\t/**\n-\t * Set a value of an environment variable.\n-\t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n-\t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n-\t}\n+    /**\n+     * Set the values of an environment variables.\n+     *\n+     * @param entries with name and new value of the environment variables\n+     */\n+    public static void set(Map<String, String> entries) {\n+        modifyEnvironmentVariables(map -> map.putAll(entries));\n+    }\n \n-\t/**\n-\t * Set the values of an environment variables.\n-\t *\n-\t * @param entries with name and new value of the environment variables\n-\t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n-\t}\n+    /**\n+     * Clears environment variables.\n+     *\n+     * @param names of the environment variables.\n+     */\n+    public static void clear(Collection<String> names) {\n+        modifyEnvironmentVariables(map -> names.forEach(map::remove));\n+    }\n \n-\t/**\n-\t * Clear an environment variable.\n-\t *\n-\t * @param name of the environment variable\n-\t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n-\t}\n+    /**\n+     * Set a value of an environment variable.\n+     *\n+     * @param name  of the environment variable\n+     * @param value of the environment variable\n+     */\n+    public static void set(String name, String value) {\n+        modifyEnvironmentVariables(map -> map.put(name, value));\n+    }\n \n-\t/**\n-\t * Clears environment variables.\n-\t *\n-\t * @param names of the environment variables.\n-\t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n-\t}\n+    /**\n+     * Clear an environment variable.\n+     *\n+     * @param name of the environment variable\n+     */\n+    public static void clear(String name) {\n+        modifyEnvironmentVariables(map -> map.remove(name));\n+    }\n \n-\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n-\t\ttry {\n-\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n-\t\t}\n-\t}\n+    private static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+        try {\n+            tryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+        } catch (NoSuchFieldException e) {\n+            throw new RuntimeException(\"Could not modify environment variables\");\n+        }\n+    }\n \n-\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ReflectiveOperationException {\n-\t\ttry {\n-\t\t\tsetInProcessEnvironmentClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tsetInSystemEnvClass(consumer);\n-\t\t}\n-\t}\n+    private static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+            throws NoSuchFieldException {\n+        try {\n+            setInProcessEnvironmentClass(consumer);\n+        } catch (NoSuchFieldException | ClassNotFoundException e) {\n+            setInSystemEnvClass(consumer);\n+        }\n+    }\n \n-\t/*\n-\t * Works on Windows\n-\t */\n-\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n-\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n-\t}\n+    /*\n+     * Works on Windows\n+     */\n+    private static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+            throws ClassNotFoundException, NoSuchFieldException {\n+        Class<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theEnvironment\"));\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theCaseInsensitiveEnvironment\"));\n+    }\n \n-\t/*\n-\t * Works on Linux\n-\t */\n-\tprivate static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n-\t\tMap<String, String> env = System.getenv();\n-\t\tconsumer.accept(getFieldValue(env.getClass(), env, \"m\"));\n-\t}\n+    /*\n+     * Works on Linux\n+     */\n+    private static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n+        consumer.accept(getFieldValue(System.getenv().getClass(), \"m\"));\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static Map<String, String> getFieldValue(Class<?> clazz, Object object, String name)\n-\t\t\tthrows NoSuchFieldException {\n-\t\tField field = clazz.getDeclaredField(name);\n-\t\ttry {\n-\t\t\tfield.setAccessible(true);\n-\t\t\treturn (Map<String, String>) field.get(object);\n-\t\t}\n-\t\tcatch (IllegalAccessException e) {\n-\t\t\tboolean staticField = Modifier.isStatic(field.getModifiers());\n-\t\t\tthrow new RuntimeException(\n-\t\t\t\t\"Cannot access \" + (staticField ? \"static \" : \"\") + \"field \" + clazz.getName() + \".\" + name, e);\n-\t\t}\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    private static Map<String, String> getFieldValue(Class<?> clazz, String name) throws NoSuchFieldException {\n+        Field field = clazz.getDeclaredField(name);\n+        try {\n+            field.setAccessible(true);\n+            return (Map<String, String>) field.get(null);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Cannot access field \" + clazz.getName() + \".\" + name, e);\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNzUzOQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r388217539", "bodyText": "that is new to me - cool change", "author": "Hancho2009", "createdAt": "2020-03-05T10:52:13Z", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java", "diffHunk": "@@ -16,64 +16,66 @@\n import java.util.Map;\n import java.util.function.Consumer;\n \n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n  * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n \t/**\n-\t * Set the values of an environment variables.\n+\t * Set a value of an environment variable.\n \t *\n-\t * @param entries with name and new value of the environment variables\n+\t * @param name  of the environment variable\n+\t * @param value of the environment variable\n \t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n+\tpublic static void set(String name, String value) {\n+\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n \t}\n \n \t/**\n-\t * Clears environment variables.\n+\t * Set the values of an environment variables.\n \t *\n-\t * @param names of the environment variables.\n+\t * @param entries with name and new value of the environment variables\n \t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n+\tpublic static void set(Map<String, String> entries) {\n+\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n \t}\n \n \t/**\n-\t * Set a value of an environment variable.\n+\t * Clear an environment variable.\n \t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n+\t * @param name of the environment variable\n \t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n+\tpublic static void clear(String name) {\n+\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n \t}\n \n \t/**\n-\t * Clear an environment variable.\n+\t * Clears environment variables.\n \t *\n-\t * @param name of the environment variable\n+\t * @param names of the environment variables.\n \t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n+\tpublic static void clear(Collection<String> names) {\n+\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n \t}\n \n \tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n \t\ttry {\n \t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException e) {\n-\t\t\tthrow new RuntimeException(\"Could not modify environment variables\");\n+\t\tcatch (ReflectiveOperationException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n \t\t}\n \t}\n \n \tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows NoSuchFieldException {\n+\t\t\tthrows ReflectiveOperationException {\n \t\ttry {\n \t\t\tsetInProcessEnvironmentClass(consumer);\n \t\t}\n-\t\tcatch (NoSuchFieldException | ClassNotFoundException e) {\n+\t\tcatch (ReflectiveOperationException ex) {", "originalCommit": "ebbd943f9dc75edfd89fc60c226db52d5b1fc2d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\nindex 7c5a32c..a28bdb2 100644\n--- a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n+++ b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableUtils.java\n\n@@ -11,106 +11,96 @@\n package org.junitpioneer.jupiter;\n \n import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n import java.util.Collection;\n import java.util.Map;\n import java.util.function.Consumer;\n \n-import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n-\n /**\n  * This class modifies the internals of the environment variables map with reflection.\n- * Warning: If your {@link SecurityManager} does not allow modifications, it fails.\n+ * If your {@link SecurityManager} does not allow modifications, it fails.\n  */\n public class EnvironmentVariableUtils {\n \n-\t/**\n-\t * Set a value of an environment variable.\n-\t *\n-\t * @param name  of the environment variable\n-\t * @param value of the environment variable\n-\t */\n-\tpublic static void set(String name, String value) {\n-\t\tmodifyEnvironmentVariables(map -> map.put(name, value));\n-\t}\n+    /**\n+     * Set the values of an environment variables.\n+     *\n+     * @param entries with name and new value of the environment variables\n+     */\n+    public static void set(Map<String, String> entries) {\n+        modifyEnvironmentVariables(map -> map.putAll(entries));\n+    }\n \n-\t/**\n-\t * Set the values of an environment variables.\n-\t *\n-\t * @param entries with name and new value of the environment variables\n-\t */\n-\tpublic static void set(Map<String, String> entries) {\n-\t\tmodifyEnvironmentVariables(map -> map.putAll(entries));\n-\t}\n+    /**\n+     * Clears environment variables.\n+     *\n+     * @param names of the environment variables.\n+     */\n+    public static void clear(Collection<String> names) {\n+        modifyEnvironmentVariables(map -> names.forEach(map::remove));\n+    }\n \n-\t/**\n-\t * Clear an environment variable.\n-\t *\n-\t * @param name of the environment variable\n-\t */\n-\tpublic static void clear(String name) {\n-\t\tmodifyEnvironmentVariables(map -> map.remove(name));\n-\t}\n+    /**\n+     * Set a value of an environment variable.\n+     *\n+     * @param name  of the environment variable\n+     * @param value of the environment variable\n+     */\n+    public static void set(String name, String value) {\n+        modifyEnvironmentVariables(map -> map.put(name, value));\n+    }\n \n-\t/**\n-\t * Clears environment variables.\n-\t *\n-\t * @param names of the environment variables.\n-\t */\n-\tpublic static void clear(Collection<String> names) {\n-\t\tmodifyEnvironmentVariables(map -> names.forEach(map::remove));\n-\t}\n+    /**\n+     * Clear an environment variable.\n+     *\n+     * @param name of the environment variable\n+     */\n+    public static void clear(String name) {\n+        modifyEnvironmentVariables(map -> map.remove(name));\n+    }\n \n-\tprivate static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n-\t\ttry {\n-\t\t\ttryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tthrow new ExtensionConfigurationException(\"Could not modify environment variables\", ex);\n-\t\t}\n-\t}\n+    private static void modifyEnvironmentVariables(Consumer<Map<String, String>> consumer) {\n+        try {\n+            tryProcessEnvironmentClassFallbackSystemEnvClass(consumer);\n+        } catch (NoSuchFieldException e) {\n+            throw new RuntimeException(\"Could not modify environment variables\");\n+        }\n+    }\n \n-\tprivate static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ReflectiveOperationException {\n-\t\ttry {\n-\t\t\tsetInProcessEnvironmentClass(consumer);\n-\t\t}\n-\t\tcatch (ReflectiveOperationException ex) {\n-\t\t\tsetInSystemEnvClass(consumer);\n-\t\t}\n-\t}\n+    private static void tryProcessEnvironmentClassFallbackSystemEnvClass(Consumer<Map<String, String>> consumer)\n+            throws NoSuchFieldException {\n+        try {\n+            setInProcessEnvironmentClass(consumer);\n+        } catch (NoSuchFieldException | ClassNotFoundException e) {\n+            setInSystemEnvClass(consumer);\n+        }\n+    }\n \n-\t/*\n-\t * Works on Windows\n-\t */\n-\tprivate static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n-\t\t\tthrows ClassNotFoundException, NoSuchFieldException {\n-\t\tClass<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theEnvironment\"));\n-\t\tconsumer.accept(getFieldValue(processEnvironmentClass, null, \"theCaseInsensitiveEnvironment\"));\n-\t}\n+    /*\n+     * Works on Windows\n+     */\n+    private static void setInProcessEnvironmentClass(Consumer<Map<String, String>> consumer)\n+            throws ClassNotFoundException, NoSuchFieldException {\n+        Class<?> processEnvironmentClass = Class.forName(\"java.lang.ProcessEnvironment\");\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theEnvironment\"));\n+        consumer.accept(getFieldValue(processEnvironmentClass, \"theCaseInsensitiveEnvironment\"));\n+    }\n \n-\t/*\n-\t * Works on Linux\n-\t */\n-\tprivate static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n-\t\tMap<String, String> env = System.getenv();\n-\t\tconsumer.accept(getFieldValue(env.getClass(), env, \"m\"));\n-\t}\n+    /*\n+     * Works on Linux\n+     */\n+    private static void setInSystemEnvClass(Consumer<Map<String, String>> consumer) throws NoSuchFieldException {\n+        consumer.accept(getFieldValue(System.getenv().getClass(), \"m\"));\n+    }\n \n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate static Map<String, String> getFieldValue(Class<?> clazz, Object object, String name)\n-\t\t\tthrows NoSuchFieldException {\n-\t\tField field = clazz.getDeclaredField(name);\n-\t\ttry {\n-\t\t\tfield.setAccessible(true);\n-\t\t\treturn (Map<String, String>) field.get(object);\n-\t\t}\n-\t\tcatch (IllegalAccessException e) {\n-\t\t\tboolean staticField = Modifier.isStatic(field.getModifiers());\n-\t\t\tthrow new RuntimeException(\n-\t\t\t\t\"Cannot access \" + (staticField ? \"static \" : \"\") + \"field \" + clazz.getName() + \".\" + name, e);\n-\t\t}\n-\t}\n+    @SuppressWarnings(\"unchecked\")\n+    private static Map<String, String> getFieldValue(Class<?> clazz, String name) throws NoSuchFieldException {\n+        Field field = clazz.getDeclaredField(name);\n+        try {\n+            field.setAccessible(true);\n+            return (Map<String, String>) field.get(null);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Cannot access field \" + clazz.getName() + \".\" + name, e);\n+        }\n+    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDA0OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r398940049", "bodyText": "What do you think about the increased visibility?", "author": "nipafx", "createdAt": "2020-03-26T22:54:29Z", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";", "originalCommit": "b424f1527fc35cdc3844e3411a80883b0991abc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MDAxNA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r405060014", "bodyText": "I write all my classes package private to access them in tests", "author": "Bukama", "createdAt": "2020-04-07T19:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java\nindex 84fade5..11b4629 100644\n--- a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java\n\n@@ -10,17 +10,10 @@\n \n package org.junitpioneer.jupiter;\n \n-import static java.util.stream.Collectors.toMap;\n+import static java.util.stream.Collectors.*;\n \n import java.lang.annotation.Annotation;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.*;\n import java.util.stream.Stream;\n \n import org.junit.jupiter.api.extension.AfterAllCallback;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r398940205", "bodyText": "A bit weird to add this method just for tests. What do you think?", "author": "nipafx", "createdAt": "2020-03-26T22:54:56Z", "path": "src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.jupiter;\n+\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+import org.junit.platform.commons.support.AnnotationSupport;\n+\n+class EnvironmentVariableExtension\n+\t\timplements BeforeAllCallback, BeforeEachCallback, AfterAllCallback, AfterEachCallback {\n+\n+\tprivate static final Namespace NAMESPACE = Namespace.create(EnvironmentVariableExtension.class);\n+\tprivate static final String BACKUP = \"Backup\";\n+\n+\tprivate static final AtomicBoolean REPORTED_WARNING = new AtomicBoolean(false);\n+\t// package visible to make accessible for tests\n+\tstatic final String WARNING_KEY = EnvironmentVariableExtension.class.getSimpleName();\n+\tstatic final String WARNING_VALUE = \"This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.\";\n+\n+\t@Override\n+\tpublic void beforeAll(ExtensionContext context) {\n+\t\thandleEnvironmentVariables(context);\n+\t}\n+\n+\t@Override\n+\tpublic void beforeEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\thandleEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\tprivate void handleEnvironmentVariables(ExtensionContext context) {\n+\t\tSet<String> variablesToClear;\n+\t\tMap<String, String> variablesToSet;\n+\t\ttry {\n+\t\t\tvariablesToClear = findRepeatableAnnotations(context, ClearEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(ClearEnvironmentVariable::key)\n+\t\t\t\t\t.collect(Utils.distinctToSet());\n+\t\t\tvariablesToSet = findRepeatableAnnotations(context, SetEnvironmentVariable.class)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.collect(toMap(SetEnvironmentVariable::key, SetEnvironmentVariable::value));\n+\t\t\tpreventClearAndSetSameEnvironmentVariables(variablesToClear, variablesToSet.keySet());\n+\t\t}\n+\t\tcatch (IllegalStateException ex) {\n+\t\t\tthrow new ExtensionConfigurationException(\"Don't clear/set the same environment variable more than once.\",\n+\t\t\t\tex);\n+\t\t}\n+\n+\t\tstoreOriginalEnvironmentVariables(context, variablesToClear, variablesToSet.keySet());\n+\t\treportWarning(context);\n+\t\tEnvironmentVariableUtils.clear(variablesToClear);\n+\t\tEnvironmentVariableUtils.set(variablesToSet);\n+\t}\n+\n+\tprivate <A extends Annotation> List<A> findRepeatableAnnotations(ExtensionContext context,\n+\t\t\tClass<A> annotationType) {\n+\t\treturn context\n+\t\t\t\t.getElement()\n+\t\t\t\t.map(element -> AnnotationSupport.findRepeatableAnnotations(element, annotationType))\n+\t\t\t\t.orElseGet(Collections::emptyList);\n+\t}\n+\n+\tprivate void preventClearAndSetSameEnvironmentVariables(Collection<String> variablesToClear,\n+\t\t\tCollection<String> variablesToSet) {\n+\t\tvariablesToClear\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(variablesToSet::contains)\n+\t\t\t\t.reduce((k0, k1) -> k0 + \", \" + k1)\n+\t\t\t\t.ifPresent(duplicateKeys -> {\n+\t\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Cannot clear and set the following environment variable at the same time: \" + duplicateKeys);\n+\t\t\t\t});\n+\t}\n+\n+\tprivate void storeOriginalEnvironmentVariables(ExtensionContext context, Collection<String> clearVariables,\n+\t\t\tCollection<String> setVariables) {\n+\t\tcontext.getStore(NAMESPACE).put(BACKUP, new EnvironmentVariableBackup(clearVariables, setVariables));\n+\t}\n+\n+\tprivate void reportWarning(ExtensionContext context) {\n+\t\tboolean wasReported = REPORTED_WARNING.getAndSet(true);\n+\t\tif (!wasReported)\n+\t\t\tcontext.publishReportEntry(WARNING_KEY, WARNING_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic void afterEach(ExtensionContext context) {\n+\t\tboolean present = Utils\n+\t\t\t\t.annotationPresentOnTestMethod(context, ClearEnvironmentVariable.class, ClearEnvironmentVariables.class,\n+\t\t\t\t\tSetEnvironmentVariable.class, SetEnvironmentVariables.class);\n+\t\tif (present) {\n+\t\t\trestoreOriginalEnvironmentVariables(context);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void afterAll(ExtensionContext context) {\n+\t\trestoreOriginalEnvironmentVariables(context);\n+\t}\n+\n+\tprivate void restoreOriginalEnvironmentVariables(ExtensionContext context) {\n+\t\tcontext.getStore(NAMESPACE).get(BACKUP, EnvironmentVariableBackup.class).restoreVariables();\n+\t}\n+\n+\t// this method is needed by the tests that verify whether the warning is correctly reported\n+\tstatic void resetWarning() {\n+\t\tREPORTED_WARNING.set(false);\n+\t}", "originalCommit": "b424f1527fc35cdc3844e3411a80883b0991abc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NjA2NA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r405056064", "bodyText": "I don't like methods in prod code just for tests.", "author": "Bukama", "createdAt": "2020-04-07T19:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDIyMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/174#discussion_r405064223", "bodyText": "Me neither. Fixed it by making the field accessible, so this can be done directly by the tests. (Doesn't really change anything functionally, but not having that method there just feels better. \ud83d\ude01 )", "author": "nipafx", "createdAt": "2020-04-07T19:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk0MDIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "chunk": "diff --git a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java\nindex 84fade5..11b4629 100644\n--- a/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java\n+++ b/src/main/java/org/junitpioneer/jupiter/EnvironmentVariableExtension.java\n\n@@ -10,17 +10,10 @@\n \n package org.junitpioneer.jupiter;\n \n-import static java.util.stream.Collectors.toMap;\n+import static java.util.stream.Collectors.*;\n \n import java.lang.annotation.Annotation;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.*;\n import java.util.stream.Stream;\n \n import org.junit.jupiter.api.extension.AfterAllCallback;\n"}}, {"oid": "bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/bbde0efc27bbe9935c296f937aeffdb37b06d7eb", "message": "resolves #167\nAdd new annotations ClearEnvironmentVariable and SetEnvironmentVariable.", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "0bdf2bb02f3c2bb36fed9aaa1fab5955bb463610", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0bdf2bb02f3c2bb36fed9aaa1fab5955bb463610", "message": "#167\nput a warning into the .adoc\nput a warning into the Javadoc", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "1211821cf39b3d75df066cf31b9046d6bd79401a", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1211821cf39b3d75df066cf31b9046d6bd79401a", "message": "#167\nreplace spaces with tab", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "3ff21f899ee32abf0850cc411b1fec16bdf7c782", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3ff21f899ee32abf0850cc411b1fec16bdf7c782", "message": "Apply new formatter", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "a7a208e8df1ce77fcbd9900cf5c3cbc327d09cc5", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a7a208e8df1ce77fcbd9900cf5c3cbc327d09cc5", "message": "Update .travis.yml\n\n#167 add different os to travis ci config because environment variables can be implemented differently", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "222769ff7c08a72a817981070b6a9c56f65a75d7", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/222769ff7c08a72a817981070b6a9c56f65a75d7", "message": "Update .travis.yml\n\nadd oraclejdk8", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "d7b7711e34228c650943a158dfeaa34ab5f3b529", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d7b7711e34228c650943a158dfeaa34ab5f3b529", "message": "Update build.gradle.kts\n\nconfigure test logging to full exceptionFormat", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "868f813a9222311558b79f8c52ffb16342bf4855", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/868f813a9222311558b79f8c52ffb16342bf4855", "message": "gradle set ExceptionFormat to full\n\ncorrect gradle kotlin style to set ExceptionFormat to full", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "e72171f8a65b8f52676d42b8739dcf726426f268", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e72171f8a65b8f52676d42b8739dcf726426f268", "message": "add NullPointerException catch\n\nto better understand why the tests fail on linux and osx", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "cf8dbf17a30992ecb8df425803058a4bad340a83", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/cf8dbf17a30992ecb8df425803058a4bad340a83", "message": "fix for Linux\n\nSystem.getenv() retruns an object from which the field m needs to be aquired not from the class", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "ce1dce5a143f613ef01f35a67807d2981339ddf2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/ce1dce5a143f613ef01f35a67807d2981339ddf2", "message": "fix paramter order and removed wrong condition", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "d0b705009743af10f974e093606a6a4692543e92", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d0b705009743af10f974e093606a6a4692543e92", "message": "remove os windows and jdk oraclejdk8 for oraclejdk11 and also add exclude for osx\n\n- the language 'java' is currently unsupported on the Windows Build Environment.\n- osx install-jdk.sh Expected feature release number in range of 9 to 15\n- linux oraclejdk8 install-jdk.sh Expected feature release number in range of 9 to 15", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "9a4ba08fd7f556d661d6eeb100f3369d5b802560", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/9a4ba08fd7f556d661d6eeb100f3369d5b802560", "message": "remove jobs exclude because travis ci disapeared from the pull request", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "02c2e8126335fa6a7c3895422406326768d8b6e0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/02c2e8126335fa6a7c3895422406326768d8b6e0", "message": "add matrix exclude osx openjdk8\n\ninstall-jdk.sh Expected feature release number in range of 9 to 15, but got: 8", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "78b8af99521da55cde0814760ef0469e4e7d7197", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/78b8af99521da55cde0814760ef0469e4e7d7197", "message": "use singel import", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "abe1db0c894bbe3aa2b203817e76c1db0a330b74", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/abe1db0c894bbe3aa2b203817e76c1db0a330b74", "message": "spotlessApply", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "f96d2866dd09e4e77e01ce06ffd7cbd8f29ad9b2", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f96d2866dd09e4e77e01ce06ffd7cbd8f29ad9b2", "message": "minimal change to trigger travis ci", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "b835c7f1b5b6b3ca2774063b339d93601e9f0b3c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/b835c7f1b5b6b3ca2774063b339d93601e9f0b3c", "message": "revert minimal change", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "5141fa48ca8e09a3618709707932b6f8496024ca", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/5141fa48ca8e09a3618709707932b6f8496024ca", "message": "Make smnall edits", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "3a81c03fd343caeee80768dc6a74ca5cdd6c9ee3", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3a81c03fd343caeee80768dc6a74ca5cdd6c9ee3", "message": "- class should not be public api\n- changed exception handling so no exception is hidden if could not modify environment variables\n- adjust comment setInSystemEnvClass because it also works on osx", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "6bc419113373bf9cbea3c603df27c7b5d8193504", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6bc419113373bf9cbea3c603df27c7b5d8193504", "message": "Revert \"- class should not be public api\"\n\nThis reverts commit 49ff6ee3d7a9ab53a953704efd0b3d1bcd148ab5.", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "d428c8b6c9df6566a3d92b28b48b807f3ec1f001", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d428c8b6c9df6566a3d92b28b48b807f3ec1f001", "message": "CR\n\n- class should not be public api \u2026\n- changed exception handling so no exception is hidden if could not modify environment variables\n- adjust comment setInSystemEnvClass because it also works on osx", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "f387d9345c10824f0bcee34b8df50b15cda8881e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f387d9345c10824f0bcee34b8df50b15cda8881e", "message": "Update .travis.yml\n\nremove oraclejdk11 because openjdk11 is probably very similar", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "3e5d20c98bc6e462ac9ba2e7575c27b18da61079", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3e5d20c98bc6e462ac9ba2e7575c27b18da61079", "message": "Report warning once per test suite", "committedDate": "2020-04-07T18:51:21Z", "type": "commit"}, {"oid": "e403afc97f5a4160c749297338675bbc11412f37", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/e403afc97f5a4160c749297338675bbc11412f37", "message": "Update to `PioneerAnnotationUtils`", "committedDate": "2020-04-07T19:30:59Z", "type": "commit"}, {"oid": "8ed4419025033bc7bf92bdb67ca05d9f684d7665", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8ed4419025033bc7bf92bdb67ca05d9f684d7665", "message": "Add reflection warning to documentation", "committedDate": "2020-04-07T19:30:59Z", "type": "commit"}, {"oid": "30eb11588f78f63c66f3bca9c41c57cc450cbd79", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/30eb11588f78f63c66f3bca9c41c57cc450cbd79", "message": "Bump to version 0.6", "committedDate": "2020-04-07T19:31:00Z", "type": "commit"}, {"oid": "c50acd403b5685687b66d384292c0b014e4b4bdc", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/c50acd403b5685687b66d384292c0b014e4b4bdc", "message": "Revert travis.yml changes (we use GitHub Actions now)", "committedDate": "2020-04-07T19:33:50Z", "type": "commit"}, {"oid": "3f8e1e6ee13558ad47ecd3e2e2f913518b2a1306", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3f8e1e6ee13558ad47ecd3e2e2f913518b2a1306", "message": "Remove method from `EnvironmentVariableExtension` (only existed for tests)", "committedDate": "2020-04-07T19:39:37Z", "type": "commit"}, {"oid": "0dc5a4acc0dbfacca3c31794d1abc3c7edc58310", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0dc5a4acc0dbfacca3c31794d1abc3c7edc58310", "message": "Suppress Sonar warnings", "committedDate": "2020-04-07T20:04:37Z", "type": "commit"}, {"oid": "625330729e271fc69fc1bb9f1f80270738e53e71", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/625330729e271fc69fc1bb9f1f80270738e53e71", "message": "Use more general `ReflectiveOperationException`", "committedDate": "2020-04-07T20:13:47Z", "type": "commit"}]}