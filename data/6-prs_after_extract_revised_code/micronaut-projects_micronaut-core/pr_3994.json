{"pr_number": 3994, "pr_title": "Add support for client binding API", "pr_createdAt": "2020-08-31T17:57:39Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/3994", "timeline": [{"oid": "7330347ce3f244a2ce33d3f2e6d32692aa889dd4", "url": "https://github.com/micronaut-projects/micronaut-core/commit/7330347ce3f244a2ce33d3f2e6d32692aa889dd4", "message": "Add support for client binding API. Closes #3992", "committedDate": "2020-08-31T17:17:54Z", "type": "commit"}, {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "url": "https://github.com/micronaut-projects/micronaut-core/commit/ad8290319e399a47ff8da9cde940f3e6a20315d2", "message": "Cleanup", "committedDate": "2020-08-31T17:37:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTQ5Mw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480331493", "bodyText": "context.getParameters() should not be called repeatedly. It is an expensive operation from a performance perspective.", "author": "graemerocher", "createdAt": "2020-08-31T19:08:27Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java", "diffHunk": "@@ -546,6 +469,33 @@ protected void doOnComplete() {\n         return context.proceed();\n     }\n \n+    private Object getValue(Argument argument, MethodInvocationContext<?, ?> context) {\n+        String argumentName = argument.getName();\n+        AnnotationMetadata argumentMetadata = argument.getAnnotationMetadata();\n+        MutableArgumentValue<?> value = context.getParameters().get(argumentName);", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java b/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\nindex 719911311..e7b2f64e6 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\n\n@@ -469,13 +473,15 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O\n         return context.proceed();\n     }\n \n-    private Object getValue(Argument argument, MethodInvocationContext<?, ?> context) {\n+    private Object getValue(Argument argument,\n+                            MethodInvocationContext<?, ?> context,\n+                            Map<String, MutableArgumentValue<?>> parameters,\n+                            Map<String, Object> paramMap) {\n         String argumentName = argument.getName();\n         AnnotationMetadata argumentMetadata = argument.getAnnotationMetadata();\n-        MutableArgumentValue<?> value = context.getParameters().get(argumentName);\n+        MutableArgumentValue<?> value = parameters.get(argumentName);\n \n         Object definedValue = value.getValue();\n-        Map<String, Object> paramMap = context.getParameterValueMap();\n \n         if (paramMap.containsKey(argumentName) && argumentMetadata.hasStereotype(Format.class)) {\n             final Object v = paramMap.get(argumentName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTY4Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480331687", "bodyText": "context.getParameterValueMap() should not be called repeatedly. It is an expensive operation from a performance perspective", "author": "graemerocher", "createdAt": "2020-08-31T19:08:53Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java", "diffHunk": "@@ -546,6 +469,33 @@ protected void doOnComplete() {\n         return context.proceed();\n     }\n \n+    private Object getValue(Argument argument, MethodInvocationContext<?, ?> context) {\n+        String argumentName = argument.getName();\n+        AnnotationMetadata argumentMetadata = argument.getAnnotationMetadata();\n+        MutableArgumentValue<?> value = context.getParameters().get(argumentName);\n+\n+        Object definedValue = value.getValue();\n+        Map<String, Object> paramMap = context.getParameterValueMap();", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java b/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\nindex 719911311..e7b2f64e6 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\n\n@@ -469,13 +473,15 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O\n         return context.proceed();\n     }\n \n-    private Object getValue(Argument argument, MethodInvocationContext<?, ?> context) {\n+    private Object getValue(Argument argument,\n+                            MethodInvocationContext<?, ?> context,\n+                            Map<String, MutableArgumentValue<?>> parameters,\n+                            Map<String, Object> paramMap) {\n         String argumentName = argument.getName();\n         AnnotationMetadata argumentMetadata = argument.getAnnotationMetadata();\n-        MutableArgumentValue<?> value = context.getParameters().get(argumentName);\n+        MutableArgumentValue<?> value = parameters.get(argumentName);\n \n         Object definedValue = value.getValue();\n-        Map<String, Object> paramMap = context.getParameterValueMap();\n \n         if (paramMap.containsKey(argumentName) && argumentMetadata.hasStereotype(Format.class)) {\n             final Object v = paramMap.get(argumentName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzNjc4Mg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480336782", "bodyText": "We shouldn't be introducing new behaviour that adds warnings", "author": "graemerocher", "createdAt": "2020-08-31T19:15:02Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.convert.ConversionService;\n+import io.micronaut.core.naming.NameUtils;\n+import io.micronaut.core.reflect.ClassUtils;\n+import io.micronaut.core.reflect.ReflectionUtils;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.core.util.CollectionUtils;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.*;\n+import io.micronaut.http.annotation.Body;\n+import io.micronaut.http.annotation.CookieValue;\n+import io.micronaut.http.annotation.Header;\n+import io.micronaut.http.annotation.RequestAttribute;\n+import io.micronaut.http.cookie.Cookie;\n+import io.micronaut.http.cookie.Cookies;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+/**\n+ * Default implementation of {@link HttpClientBinderRegistry} that searches by\n+ * annotation then by type.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Singleton\n+@Internal\n+public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry {\n+\n+    private final Map<Class<? extends Annotation>, ClientArgumentRequestBinder> byAnnotation = new LinkedHashMap<>();\n+    private final Map<Integer, ClientArgumentRequestBinder> byType = new LinkedHashMap<>();\n+\n+    /**\n+     * @param conversionService The conversion service\n+     * @param binders           The request argument binders\n+     */\n+    @Inject\n+    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                           List<ClientArgumentRequestBinder> binders) {\n+        byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {\n+            value.forEachValue(request::header);\n+        });\n+        byType.put(Argument.of(Cookies.class).typeHashCode(), (ClientArgumentRequestBinder<Cookies>) (context, value, request) -> {\n+            request.cookies(value.getAll());\n+        });\n+        byType.put(Argument.of(Cookie.class).typeHashCode(), (ClientArgumentRequestBinder<Cookie>) (context, value, request) -> {\n+            request.cookie(value);\n+        });\n+        byType.put(Argument.of(BasicAuth.class).typeHashCode(), (ClientArgumentRequestBinder<BasicAuth>) (context, value, request) -> {\n+            request.basicAuth(value.getUsername(), value.getPassword());\n+        });\n+        byAnnotation.put(CookieValue.class, (context, value, request) -> {\n+            String cookieName = context.getAnnotationMetadata().stringValue(CookieValue.class)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .orElse(context.getArgument().getName());\n+\n+            conversionService.convert(value, String.class)\n+                    .ifPresent(o -> request.cookie(Cookie.of(cookieName, o)));\n+        });\n+        byAnnotation.put(Header.class, (context, value, request) -> {\n+            AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();\n+            String headerName = annotationMetadata\n+                    .stringValue(Header.class)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .orElse(NameUtils.hyphenate(context.getArgument().getName()));\n+\n+            conversionService.convert(value, String.class)\n+                    .ifPresent(header -> request.getHeaders().set(headerName, header));\n+        });\n+        byAnnotation.put(RequestAttribute.class, (context, value, request) -> {\n+            AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();\n+            String attributeName = annotationMetadata\n+                    .stringValue(RequestAttribute.class)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .orElse(NameUtils.hyphenate(context.getArgument().getName()));\n+            request.getAttributes().put(attributeName, value);\n+        });\n+        byAnnotation.put(Body.class, (ClientArgumentRequestBinder<Object>) (context, value, request) -> {\n+            request.body(value);\n+        });\n+\n+        if (CollectionUtils.isNotEmpty(binders)) {\n+            for (ClientArgumentRequestBinder binder : binders) {\n+                addBinder(binder);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public <T> Optional<ClientArgumentRequestBinder<T>> findArgumentBinder(Argument<T> argument) {\n+        Optional<Class<? extends Annotation>> opt = argument.getAnnotationMetadata().getAnnotationTypeByStereotype(Bindable.class);\n+        if (opt.isPresent()) {\n+            Class<? extends Annotation> annotationType = opt.get();\n+            ClientArgumentRequestBinder<T> binder = byAnnotation.get(annotationType);\n+            return Optional.ofNullable(binder);\n+        } else {\n+            ClientArgumentRequestBinder<T> binder = byType.get(argument.typeHashCode());\n+            if (binder != null) {\n+                return Optional.of(binder);\n+            } else {\n+                binder = byType.get(Argument.of(argument.getType()).typeHashCode());\n+                return Optional.ofNullable(binder);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Adds a binder to the registry.\n+     *\n+     * @param binder The binder\n+     * @param <T> The type\n+     */\n+    public <T> void addBinder(ClientArgumentRequestBinder<T> binder) {\n+        if (binder instanceof AnnotatedClientArgumentRequestBinder) {\n+            AnnotatedClientArgumentRequestBinder<?, ?> annotatedRequestArgumentBinder = (AnnotatedClientArgumentRequestBinder) binder;\n+            Class<? extends Annotation> annotationType = annotatedRequestArgumentBinder.getAnnotationType();\n+            byAnnotation.put(annotationType, annotatedRequestArgumentBinder);\n+        } else if (binder instanceof TypedClientArgumentRequestBinder) {\n+            TypedClientArgumentRequestBinder<?> typedRequestArgumentBinder = (TypedClientArgumentRequestBinder) binder;\n+            byType.put(typedRequestArgumentBinder.argumentType().typeHashCode(), typedRequestArgumentBinder);\n+            List<Class<?>> superTypes = typedRequestArgumentBinder.superTypes();\n+            if (CollectionUtils.isNotEmpty(superTypes)) {\n+                for (Class<?> superType : superTypes) {\n+                    byType.put(Argument.of(superType).typeHashCode(), typedRequestArgumentBinder);\n+                }\n+            } else if (typedRequestArgumentBinder.supportsSuperTypes()) {\n+                Set<Class> allInterfaces = ReflectionUtils.getAllInterfaces(typedRequestArgumentBinder.argumentType().getType());\n+                if (ClassUtils.REFLECTION_LOGGER.isWarnEnabled()) {", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NTAxNQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480355015", "bodyText": "Should this be deprecated then in 2.1? https://github.com/micronaut-projects/micronaut-core/blob/2.0.x/http/src/main/java/io/micronaut/http/bind/binders/TypedRequestArgumentBinder.java#L40", "author": "jameskleeh", "createdAt": "2020-08-31T19:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzNjc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\nindex e48c79ad1..b63934921 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\n\n@@ -57,8 +57,8 @@ public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry\n      * @param binders           The request argument binders\n      */\n     @Inject\n-    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n-                                           List<ClientArgumentRequestBinder> binders) {\n+    protected DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                              List<ClientArgumentRequestBinder> binders) {\n         byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {\n             value.forEachValue(request::header);\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzODcwOA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480338708", "bodyText": "Why use Argument.of if you are just going to call typeHashCode(). Isn't it the same as doing HttpHeaders.class.hashCode()?", "author": "graemerocher", "createdAt": "2020-08-31T19:17:01Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.convert.ConversionService;\n+import io.micronaut.core.naming.NameUtils;\n+import io.micronaut.core.reflect.ClassUtils;\n+import io.micronaut.core.reflect.ReflectionUtils;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.core.util.CollectionUtils;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.*;\n+import io.micronaut.http.annotation.Body;\n+import io.micronaut.http.annotation.CookieValue;\n+import io.micronaut.http.annotation.Header;\n+import io.micronaut.http.annotation.RequestAttribute;\n+import io.micronaut.http.cookie.Cookie;\n+import io.micronaut.http.cookie.Cookies;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+/**\n+ * Default implementation of {@link HttpClientBinderRegistry} that searches by\n+ * annotation then by type.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Singleton\n+@Internal\n+public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry {\n+\n+    private final Map<Class<? extends Annotation>, ClientArgumentRequestBinder> byAnnotation = new LinkedHashMap<>();\n+    private final Map<Integer, ClientArgumentRequestBinder> byType = new LinkedHashMap<>();\n+\n+    /**\n+     * @param conversionService The conversion service\n+     * @param binders           The request argument binders\n+     */\n+    @Inject\n+    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                           List<ClientArgumentRequestBinder> binders) {\n+        byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NDU0Mw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480354543", "bodyText": "No its not\nArgument.of(String.class).typeHashCode() -> -2038437531\nString.class.hashCode() -> 349885916", "author": "jameskleeh", "createdAt": "2020-08-31T19:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzODcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg5NjM5MA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480896390", "bodyText": "Seems it is just calling Objects.hash(String.class) which is transforming String.class into Object[] { String.class } and producing a different hash. Still not sure what the point is.", "author": "graemerocher", "createdAt": "2020-09-01T07:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzODcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\nindex e48c79ad1..b63934921 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\n\n@@ -57,8 +57,8 @@ public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry\n      * @param binders           The request argument binders\n      */\n     @Inject\n-    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n-                                           List<ClientArgumentRequestBinder> binders) {\n+    protected DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                              List<ClientArgumentRequestBinder> binders) {\n         byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {\n             value.forEachValue(request::header);\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MTI0NA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480341244", "bodyText": "Since there will be many add @Indexed(ClientArgumentRequestBinder.class)", "author": "graemerocher", "createdAt": "2020-08-31T19:19:51Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.convert.ArgumentConversionContext;\n+import io.micronaut.http.MutableHttpRequest;\n+\n+/**\n+ * A binder that binds to a {@link MutableHttpRequest}. Argument binders\n+ * are not able to modify the URI of the request.\n+ *\n+ * @param <T> A type\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface ClientArgumentRequestBinder<T> {", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java\nindex 77c877f8a..29677ccf7 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java\n\n@@ -15,7 +15,9 @@\n  */\n package io.micronaut.http.client.bind;\n \n+import edu.umd.cs.findbugs.annotations.NonNull;\n import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.annotation.Indexed;\n import io.micronaut.core.convert.ArgumentConversionContext;\n import io.micronaut.http.MutableHttpRequest;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MTUxMw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480341513", "bodyText": "Declare @NonNull on arguments that are not null", "author": "graemerocher", "createdAt": "2020-08-31T19:20:08Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.convert.ArgumentConversionContext;\n+import io.micronaut.http.MutableHttpRequest;\n+\n+/**\n+ * A binder that binds to a {@link MutableHttpRequest}. Argument binders\n+ * are not able to modify the URI of the request.\n+ *\n+ * @param <T> A type\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface ClientArgumentRequestBinder<T> {\n+\n+    /**\n+     * Bind the given argument to the request. Argument binders\n+     * are not able to modify the URI of the request.\n+     *\n+     * @param context The {@link ArgumentConversionContext}\n+     * @param value   The argument value\n+     * @param request The request\n+     */\n+    void bind(ArgumentConversionContext<T> context, T value, MutableHttpRequest<?> request);", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java\nindex 77c877f8a..29677ccf7 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java\n\n@@ -15,7 +15,9 @@\n  */\n package io.micronaut.http.client.bind;\n \n+import edu.umd.cs.findbugs.annotations.NonNull;\n import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.annotation.Indexed;\n import io.micronaut.core.convert.ArgumentConversionContext;\n import io.micronaut.http.MutableHttpRequest;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MjEwMg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480342102", "bodyText": "This is an internal class, make protected", "author": "graemerocher", "createdAt": "2020-08-31T19:20:48Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.convert.ConversionService;\n+import io.micronaut.core.naming.NameUtils;\n+import io.micronaut.core.reflect.ClassUtils;\n+import io.micronaut.core.reflect.ReflectionUtils;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.core.util.CollectionUtils;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.*;\n+import io.micronaut.http.annotation.Body;\n+import io.micronaut.http.annotation.CookieValue;\n+import io.micronaut.http.annotation.Header;\n+import io.micronaut.http.annotation.RequestAttribute;\n+import io.micronaut.http.cookie.Cookie;\n+import io.micronaut.http.cookie.Cookies;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+/**\n+ * Default implementation of {@link HttpClientBinderRegistry} that searches by\n+ * annotation then by type.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Singleton\n+@Internal\n+public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry {\n+\n+    private final Map<Class<? extends Annotation>, ClientArgumentRequestBinder> byAnnotation = new LinkedHashMap<>();\n+    private final Map<Integer, ClientArgumentRequestBinder> byType = new LinkedHashMap<>();\n+\n+    /**\n+     * @param conversionService The conversion service\n+     * @param binders           The request argument binders\n+     */\n+    @Inject\n+    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\nindex e48c79ad1..b63934921 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java\n\n@@ -57,8 +57,8 @@ public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry\n      * @param binders           The request argument binders\n      */\n     @Inject\n-    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n-                                           List<ClientArgumentRequestBinder> binders) {\n+    protected DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                              List<ClientArgumentRequestBinder> binders) {\n         byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {\n             value.forEachValue(request::header);\n         });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MjQwOQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480342409", "bodyText": "Add @NotNull to argument", "author": "graemerocher", "createdAt": "2020-08-31T19:21:10Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.type.Argument;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A registry of {@link ClientArgumentRequestBinder} instances.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface HttpClientBinderRegistry {\n+\n+    /**\n+     * Locate an {@link ClientArgumentRequestBinder} for the given argument.\n+     *\n+     * @param argument The argument\n+     * @param <T>      The argument type\n+     * @return An {@link Optional} of {@link ClientArgumentRequestBinder}\n+     */\n+    <T> Optional<ClientArgumentRequestBinder<T>> findArgumentBinder(Argument<T> argument);", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java\nindex 55ed95f6e..5076a32b5 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java\n\n@@ -15,6 +15,7 @@\n  */\n package io.micronaut.http.client.bind;\n \n+import edu.umd.cs.findbugs.annotations.NonNull;\n import io.micronaut.core.annotation.Experimental;\n import io.micronaut.core.type.Argument;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MjYyMQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480342621", "bodyText": "Add @NotNull to return type", "author": "graemerocher", "createdAt": "2020-08-31T19:21:24Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.type.Argument;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A {@link ClientArgumentRequestBinder} that is resolved based on the argument type.\n+ *\n+ * @param <T> The argument type\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface TypedClientArgumentRequestBinder<T> extends ClientArgumentRequestBinder<T> {\n+\n+    /**\n+     * @return The argument type.\n+     */\n+    Argument<T> argumentType();", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java b/http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java\nindex 43e876de6..6d9235e20 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java\n\n@@ -35,6 +35,7 @@ public interface TypedClientArgumentRequestBinder<T> extends ClientArgumentReque\n     /**\n      * @return The argument type.\n      */\n+    @NonNull\n     Argument<T> argumentType();\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MzAzMw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480343033", "bodyText": "Add Locale.ENGLISH to toUpperCase()", "author": "graemerocher", "createdAt": "2020-08-31T19:21:50Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java", "diffHunk": "@@ -149,6 +153,10 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {\n             }\n \n             Class<? extends Annotation> annotationType = httpMethodMapping.get();\n+            HttpMethod httpMethod = HttpMethod.parse(annotationType.getSimpleName().toUpperCase());", "originalCommit": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2dcc493a112545321e91ce1757e92e0292044601", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java b/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\nindex 719911311..e7b2f64e6 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java\n\n@@ -153,7 +153,7 @@ public class HttpClientIntroductionAdvice implements MethodInterceptor<Object, O\n             }\n \n             Class<? extends Annotation> annotationType = httpMethodMapping.get();\n-            HttpMethod httpMethod = HttpMethod.parse(annotationType.getSimpleName().toUpperCase());\n+            HttpMethod httpMethod = HttpMethod.parse(annotationType.getSimpleName().toUpperCase(Locale.ENGLISH));\n             String httpMethodName = context.stringValue(CustomHttpMethod.class, \"method\").orElse(httpMethod.name());\n             MutableHttpRequest<?> request = HttpRequest.create(httpMethod, \"\", httpMethodName);\n \n"}}, {"oid": "2dcc493a112545321e91ce1757e92e0292044601", "url": "https://github.com/micronaut-projects/micronaut-core/commit/2dcc493a112545321e91ce1757e92e0292044601", "message": "Address PR feedback. Docs progress", "committedDate": "2020-08-31T20:56:23Z", "type": "commit"}, {"oid": "51114e82c98cbd0fd67d5ef782bdb322682800a9", "url": "https://github.com/micronaut-projects/micronaut-core/commit/51114e82c98cbd0fd67d5ef782bdb322682800a9", "message": "Finish docs", "committedDate": "2020-09-01T19:32:07Z", "type": "commit"}, {"oid": "b4a44a764373c327d56be237b1b73255d3f568dc", "url": "https://github.com/micronaut-projects/micronaut-core/commit/b4a44a764373c327d56be237b1b73255d3f568dc", "message": "Fix compilation and checkstyle", "committedDate": "2020-09-01T20:02:41Z", "type": "commit"}, {"oid": "996dddead808cc5a2f7150cee3324119f6f9c07a", "url": "https://github.com/micronaut-projects/micronaut-core/commit/996dddead808cc5a2f7150cee3324119f6f9c07a", "message": "Fix test", "committedDate": "2020-09-01T20:36:23Z", "type": "commit"}]}