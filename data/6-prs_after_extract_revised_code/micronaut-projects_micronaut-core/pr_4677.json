{"pr_number": 4677, "pr_title": "Fix misleading error 'empty body' for responses with a body that could not be decoded. ", "pr_createdAt": "2020-12-07T20:34:33Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/4677", "timeline": [{"oid": "13689a3a2d82bc9d824a5e78c237e3fa40d71137", "url": "https://github.com/micronaut-projects/micronaut-core/commit/13689a3a2d82bc9d824a5e78c237e3fa40d71137", "message": "Fix misleading error 'empty body' for reponses with a body that could not be decoded. Fixes #4613", "committedDate": "2020-12-07T20:33:26Z", "type": "commit"}, {"oid": "96dfa4787e99cfad5ef4e7ee1119c4627b7dacc8", "url": "https://github.com/micronaut-projects/micronaut-core/commit/96dfa4787e99cfad5ef4e7ee1119c4627b7dacc8", "message": "Look for the bytes in the response to determine if a body was sent. Fix tests", "committedDate": "2020-12-08T14:34:24Z", "type": "commit"}, {"oid": "64a45975dd519d85bdf74e33fb4a1506e2239611", "url": "https://github.com/micronaut-projects/micronaut-core/commit/64a45975dd519d85bdf74e33fb4a1506e2239611", "message": "Set the body bytes even if there is no media type to handle the response", "committedDate": "2020-12-08T18:10:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1MDI0NA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4677#discussion_r539150244", "bodyText": "Should be:\nif (!body.isPresent() && response.getBody(Argument.of(byte[].class)).isPresent()) {\nTo avoid the extra object creation and method call", "author": "graemerocher", "createdAt": "2020-12-09T09:35:23Z", "path": "http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java", "diffHunk": "@@ -140,12 +142,19 @@\n         if (HttpStatus.class.isAssignableFrom(bodyType.getType())) {\n             return (O) response.getStatus();\n         } else {\n-            return response\n-                    .getBody()\n-                    .orElseThrow(() -> new HttpClientResponseException(\n-                            \"Empty body\",\n-                            response\n-                    ));\n+            Optional<O> body = response.getBody();\n+            Optional<byte[]> bodyBytes = response.getBody(Argument.of(byte[].class));\n+            if (!body.isPresent() && bodyBytes.isPresent()) {", "originalCommit": "64a45975dd519d85bdf74e33fb4a1506e2239611", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6ebc9ed49260a6d0a1e7786ac41432733003d84", "chunk": "diff --git a/http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java b/http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java\nindex 4010c8eda..bba34e444 100644\n--- a/http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java\n+++ b/http-client-core/src/main/java/io/micronaut/http/client/BlockingHttpClient.java\n\n@@ -143,8 +143,7 @@ public interface BlockingHttpClient extends Closeable {\n             return (O) response.getStatus();\n         } else {\n             Optional<O> body = response.getBody();\n-            Optional<byte[]> bodyBytes = response.getBody(Argument.of(byte[].class));\n-            if (!body.isPresent() && bodyBytes.isPresent()) {\n+            if (!body.isPresent() && response.getBody(Argument.of(byte[].class)).isPresent()) {\n                 throw new HttpClientResponseException(\n                         String.format(\"Failed to decode the body for the given content type [%s]\", response.getContentType().orElse(null)),\n                         response\n"}}, {"oid": "e6ebc9ed49260a6d0a1e7786ac41432733003d84", "url": "https://github.com/micronaut-projects/micronaut-core/commit/e6ebc9ed49260a6d0a1e7786ac41432733003d84", "message": "Remove redundant variable", "committedDate": "2020-12-09T18:55:00Z", "type": "commit"}]}