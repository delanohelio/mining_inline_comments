{"pr_number": 3168, "pr_title": "Generate resource-config.json for GraalVM", "pr_createdAt": "2020-05-07T07:33:48Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/3168", "timeline": [{"oid": "6b2c66cb7227ce78b9917506ce3eab7d78e7de01", "url": "https://github.com/micronaut-projects/micronaut-core/commit/6b2c66cb7227ce78b9917506ce3eab7d78e7de01", "message": "Add method to get the project base path from visitor context", "committedDate": "2020-05-07T07:19:09Z", "type": "commit"}, {"oid": "512fc4d069a1b97cca0ff17b6cc78ab34cd64851", "url": "https://github.com/micronaut-projects/micronaut-core/commit/512fc4d069a1b97cca0ff17b6cc78ab34cd64851", "message": "Move native-image.properties generation to its own method", "committedDate": "2020-05-07T07:19:09Z", "type": "commit"}, {"oid": "7b5a62e5eaf8a4cc213cc218f9e08fc34926c9db", "url": "https://github.com/micronaut-projects/micronaut-core/commit/7b5a62e5eaf8a4cc213cc218f9e08fc34926c9db", "message": "Generate resource-config.json", "committedDate": "2020-05-07T07:19:09Z", "type": "commit"}, {"oid": "75f9f67dc7544022f6432885611f0c0c49c120d5", "url": "https://github.com/micronaut-projects/micronaut-core/commit/75f9f67dc7544022f6432885611f0c0c49c120d5", "message": "Remove the hack to get the project path and move the code to VisitorContext", "committedDate": "2020-05-07T07:19:09Z", "type": "commit"}, {"oid": "4ebd20c93c2a333ec6e4ee08c1cee9b4a7b26f47", "url": "https://github.com/micronaut-projects/micronaut-core/commit/4ebd20c93c2a333ec6e4ee08c1cee9b4a7b26f47", "message": "Cleanup and take existing reflection-config.json files into account", "committedDate": "2020-05-07T07:19:09Z", "type": "commit"}, {"oid": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "url": "https://github.com/micronaut-projects/micronaut-core/commit/f794b1f3cc053748fd41f37064e0eb57ac184ea2", "message": "Add documentation", "committedDate": "2020-05-07T07:19:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDI3OA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r421314278", "bodyText": "I don't think we need this business. If a file exists call reflect-config.json then GraalVM will pick it up automatically", "author": "graemerocher", "createdAt": "2020-05-07T08:02:08Z", "path": "graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java", "diffHunk": "@@ -216,85 +225,175 @@ public final void finish(VisitorContext visitorContext) {\n \n             executed = true;\n \n-            List<Map> json;\n-            ObjectMapper mapper = new ObjectMapper();\n-            ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+            generateNativeImageProperties(visitorContext);\n+            generateResourceConfig(visitorContext);\n+        }\n+    }\n+\n+    private void generateNativeImageProperties(VisitorContext visitorContext) {\n+        List<Map> json;\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+\n+        Optional<Path> projectDir = visitorContext.projectDir();\n+\n+        File userReflectJsonFile = projectDir\n+                .map(projectPath -> Paths.get(projectPath.toString(), BASE_REFLECT_JSON).toFile())\n+                .orElse(null);\n+\n+        if (userReflectJsonFile != null && userReflectJsonFile.exists()) {\n+            try {\n+                json = mapper.readValue(userReflectJsonFile, new TypeReference<List<Map>>() {\n+                });\n+            } catch (Throwable e) {\n+                visitorContext.fail(\"Error parsing base reflect.json: \" + BASE_REFLECT_JSON, null);\n+                return;\n+            }\n+        } else {\n+            json = new ArrayList<>();\n+        }\n+\n+        if (CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays) && CollectionUtils.isEmpty(json)) {\n+            return;\n+        }\n+\n+        try {\n+            String path = buildNativeImagePath();\n+            String reflectFile = path + REFLECTION_CONFIG_JSON;\n+            String propsFile = path + NATIVE_IMAGE_PROPERTIES;\n+\n+            visitorContext.visitMetaInfFile(propsFile).ifPresent(gf -> {\n+                visitorContext.info(\"Writing \" + NATIVE_IMAGE_PROPERTIES + \" file to destination: \" + gf.getName());\n+                try (PrintWriter w = new PrintWriter(gf.openWriter())) {\n+                    w.println(\"Args = -H:ReflectionConfigurationResources=${.}/reflection-config.json\");", "originalCommit": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NDk3Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r426764977", "bodyText": "I need to revert the change. The code is necessary to tell GraalVM to pickup the generated file. Without it, all the files generated during Micronaut compilation are not picked up by native-image. I've tested with a sample app it failed.", "author": "ilopmar", "createdAt": "2020-05-18T16:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDI3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDQyMg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r421314422", "bodyText": "Better error handling here please", "author": "graemerocher", "createdAt": "2020-05-07T08:02:24Z", "path": "graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java", "diffHunk": "@@ -216,85 +225,175 @@ public final void finish(VisitorContext visitorContext) {\n \n             executed = true;\n \n-            List<Map> json;\n-            ObjectMapper mapper = new ObjectMapper();\n-            ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+            generateNativeImageProperties(visitorContext);\n+            generateResourceConfig(visitorContext);\n+        }\n+    }\n+\n+    private void generateNativeImageProperties(VisitorContext visitorContext) {\n+        List<Map> json;\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+\n+        Optional<Path> projectDir = visitorContext.projectDir();\n+\n+        File userReflectJsonFile = projectDir\n+                .map(projectPath -> Paths.get(projectPath.toString(), BASE_REFLECT_JSON).toFile())\n+                .orElse(null);\n+\n+        if (userReflectJsonFile != null && userReflectJsonFile.exists()) {\n+            try {\n+                json = mapper.readValue(userReflectJsonFile, new TypeReference<List<Map>>() {\n+                });\n+            } catch (Throwable e) {\n+                visitorContext.fail(\"Error parsing base reflect.json: \" + BASE_REFLECT_JSON, null);\n+                return;\n+            }\n+        } else {\n+            json = new ArrayList<>();\n+        }\n+\n+        if (CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays) && CollectionUtils.isEmpty(json)) {\n+            return;\n+        }\n+\n+        try {\n+            String path = buildNativeImagePath();\n+            String reflectFile = path + REFLECTION_CONFIG_JSON;\n+            String propsFile = path + NATIVE_IMAGE_PROPERTIES;\n+\n+            visitorContext.visitMetaInfFile(propsFile).ifPresent(gf -> {\n+                visitorContext.info(\"Writing \" + NATIVE_IMAGE_PROPERTIES + \" file to destination: \" + gf.getName());\n+                try (PrintWriter w = new PrintWriter(gf.openWriter())) {\n+                    w.println(\"Args = -H:ReflectionConfigurationResources=${.}/reflection-config.json\");\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "originalCommit": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDcxNw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r421314717", "bodyText": "We should be using a shared object mapper instead of creating a new one for each operation", "author": "graemerocher", "createdAt": "2020-05-07T08:02:56Z", "path": "graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java", "diffHunk": "@@ -216,85 +225,175 @@ public final void finish(VisitorContext visitorContext) {\n \n             executed = true;\n \n-            List<Map> json;\n-            ObjectMapper mapper = new ObjectMapper();\n-            ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+            generateNativeImageProperties(visitorContext);\n+            generateResourceConfig(visitorContext);\n+        }\n+    }\n+\n+    private void generateNativeImageProperties(VisitorContext visitorContext) {\n+        List<Map> json;\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+\n+        Optional<Path> projectDir = visitorContext.projectDir();\n+\n+        File userReflectJsonFile = projectDir\n+                .map(projectPath -> Paths.get(projectPath.toString(), BASE_REFLECT_JSON).toFile())\n+                .orElse(null);\n+\n+        if (userReflectJsonFile != null && userReflectJsonFile.exists()) {\n+            try {\n+                json = mapper.readValue(userReflectJsonFile, new TypeReference<List<Map>>() {\n+                });\n+            } catch (Throwable e) {\n+                visitorContext.fail(\"Error parsing base reflect.json: \" + BASE_REFLECT_JSON, null);\n+                return;\n+            }\n+        } else {\n+            json = new ArrayList<>();\n+        }\n+\n+        if (CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays) && CollectionUtils.isEmpty(json)) {\n+            return;\n+        }\n+\n+        try {\n+            String path = buildNativeImagePath();\n+            String reflectFile = path + REFLECTION_CONFIG_JSON;\n+            String propsFile = path + NATIVE_IMAGE_PROPERTIES;\n+\n+            visitorContext.visitMetaInfFile(propsFile).ifPresent(gf -> {\n+                visitorContext.info(\"Writing \" + NATIVE_IMAGE_PROPERTIES + \" file to destination: \" + gf.getName());\n+                try (PrintWriter w = new PrintWriter(gf.openWriter())) {\n+                    w.println(\"Args = -H:ReflectionConfigurationResources=${.}/reflection-config.json\");\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+            final Optional<GeneratedFile> generatedFile = visitorContext.visitMetaInfFile(reflectFile);\n+            generatedFile.ifPresent(gf -> {\n+                for (Map<String, Object> value : classes.values()) {\n+                    json.add(value);\n+                }\n+\n+                for (String array : arrays) {\n+                    json.add(CollectionUtils.mapOf(\n+                            NAME, \"[L\" + array.substring(0, array.length() - 2) + \";\",\n+                            ALL_DECLARED_CONSTRUCTORS, true\n+                    ));\n+                }\n+\n+                try (Writer w = gf.openWriter()) {\n+                    visitorContext.info(\"Writing \" + REFLECTION_CONFIG_JSON + \" file to destination: \" + gf.getName());\n+\n+                    writer.writeValue(w, json);\n+                } catch (IOException e) {\n+                    visitorContext.fail(\"Error writing \" + REFLECTION_CONFIG_JSON + \": \" + e.getMessage(), null);\n+                }\n+            });\n+        } finally {\n+            classes.clear();\n+            arrays.clear();\n+        }\n+    }\n+\n+    private void generateResourceConfig(VisitorContext visitorContext) {\n+        ObjectMapper mapper = new ObjectMapper();", "originalCommit": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNTc0OA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r421315748", "bodyText": "Rename to getProjectDir() also should be implemented in the child implementations so that the computed Path is cached and the computation is not done each time this is called. This can be done by simply calling the super interface", "author": "graemerocher", "createdAt": "2020-05-07T08:04:46Z", "path": "inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java", "diffHunk": "@@ -99,6 +104,39 @@\n         return Collections.emptyList();\n     }\n \n+    /**\n+     * Obtain the project directory.\n+     *\n+     * @return An optional wrapping the project directory\n+     */\n+    default Optional<Path> projectDir() {", "originalCommit": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NDIyMQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r426544221", "bodyText": "I don't think it is necessary to implement the method on the child implementations. The first thing we do in it is:\nOptional<Path> projectDir = get(MICRONAUT_PROJECT_DIR, Path.class);\nif (projectDir.isPresent()) {\n    return projectDir;\n}\nThat will get the cached directory once it has been calculated.", "author": "ilopmar", "createdAt": "2020-05-18T11:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNTc0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNjQ2MA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r421316460", "bodyText": "Should be declared as an annotation processor property. See @SupportedOptions on BeanDefinitionInjectProcessor. Also I think we should be consistent and name the property micronaut.processing.project.dir", "author": "graemerocher", "createdAt": "2020-05-07T08:06:04Z", "path": "inject/src/main/java/io/micronaut/inject/visitor/VisitorContext.java", "diffHunk": "@@ -37,7 +40,10 @@\n  * @since 1.0\n  */\n public interface VisitorContext extends MutableConvertibleValues<Object>, ClassWriterOutputVisitor {\n+\n     String MICRONAUT_BASE_OPTION_NAME = \"micronaut\";\n+    String MICRONAUT_PROJECT_DIR = \"micronaut.project.dir\";", "originalCommit": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzYzNg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r421317636", "bodyText": "Would probably be better implemented using a file tree walker https://docs.oracle.com/javase/tutorial/essential/io/walk.html\nBut ok", "author": "graemerocher", "createdAt": "2020-05-07T08:08:12Z", "path": "graal/src/main/java/io/micronaut/graal/reflect/GraalTypeElementVisitor.java", "diffHunk": "@@ -216,85 +225,175 @@ public final void finish(VisitorContext visitorContext) {\n \n             executed = true;\n \n-            List<Map> json;\n-            ObjectMapper mapper = new ObjectMapper();\n-            ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+            generateNativeImageProperties(visitorContext);\n+            generateResourceConfig(visitorContext);\n+        }\n+    }\n+\n+    private void generateNativeImageProperties(VisitorContext visitorContext) {\n+        List<Map> json;\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+\n+        Optional<Path> projectDir = visitorContext.projectDir();\n+\n+        File userReflectJsonFile = projectDir\n+                .map(projectPath -> Paths.get(projectPath.toString(), BASE_REFLECT_JSON).toFile())\n+                .orElse(null);\n+\n+        if (userReflectJsonFile != null && userReflectJsonFile.exists()) {\n+            try {\n+                json = mapper.readValue(userReflectJsonFile, new TypeReference<List<Map>>() {\n+                });\n+            } catch (Throwable e) {\n+                visitorContext.fail(\"Error parsing base reflect.json: \" + BASE_REFLECT_JSON, null);\n+                return;\n+            }\n+        } else {\n+            json = new ArrayList<>();\n+        }\n+\n+        if (CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays) && CollectionUtils.isEmpty(json)) {\n+            return;\n+        }\n+\n+        try {\n+            String path = buildNativeImagePath();\n+            String reflectFile = path + REFLECTION_CONFIG_JSON;\n+            String propsFile = path + NATIVE_IMAGE_PROPERTIES;\n+\n+            visitorContext.visitMetaInfFile(propsFile).ifPresent(gf -> {\n+                visitorContext.info(\"Writing \" + NATIVE_IMAGE_PROPERTIES + \" file to destination: \" + gf.getName());\n+                try (PrintWriter w = new PrintWriter(gf.openWriter())) {\n+                    w.println(\"Args = -H:ReflectionConfigurationResources=${.}/reflection-config.json\");\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            });\n+            final Optional<GeneratedFile> generatedFile = visitorContext.visitMetaInfFile(reflectFile);\n+            generatedFile.ifPresent(gf -> {\n+                for (Map<String, Object> value : classes.values()) {\n+                    json.add(value);\n+                }\n+\n+                for (String array : arrays) {\n+                    json.add(CollectionUtils.mapOf(\n+                            NAME, \"[L\" + array.substring(0, array.length() - 2) + \";\",\n+                            ALL_DECLARED_CONSTRUCTORS, true\n+                    ));\n+                }\n+\n+                try (Writer w = gf.openWriter()) {\n+                    visitorContext.info(\"Writing \" + REFLECTION_CONFIG_JSON + \" file to destination: \" + gf.getName());\n+\n+                    writer.writeValue(w, json);\n+                } catch (IOException e) {\n+                    visitorContext.fail(\"Error writing \" + REFLECTION_CONFIG_JSON + \": \" + e.getMessage(), null);\n+                }\n+            });\n+        } finally {\n+            classes.clear();\n+            arrays.clear();\n+        }\n+    }\n+\n+    private void generateResourceConfig(VisitorContext visitorContext) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectWriter writer = mapper.writer(new DefaultPrettyPrinter());\n+        Map json;\n \n-            File f = new File(BASE_REFLECT_JSON);\n+        Optional<Path> projectDir = visitorContext.projectDir();\n+\n+        if (projectDir.isPresent()) {\n+            File f = Paths.get(projectDir.get().toString(), BASE_RESOURCE_CONFIG_JSON).toFile();\n             if (f.exists()) {\n                 try {\n-                    json = mapper.readValue(f, new TypeReference<List<Map>>() {\n+                    json = mapper.readValue(f, new TypeReference<Map>() {\n                     });\n                 } catch (Throwable e) {\n-                    visitorContext.fail(\"Error parsing base reflect.json: \" + BASE_REFLECT_JSON, null);\n+                    visitorContext.fail(\"Error parsing base resource-config.json: \" + BASE_RESOURCE_CONFIG_JSON, null);\n                     return;\n                 }\n             } else {\n-                json = new ArrayList<>();\n-            }\n-\n-            if (CollectionUtils.isEmpty(classes) && CollectionUtils.isEmpty(arrays) && CollectionUtils.isEmpty(json)) {\n-                return;\n+                json = new HashMap();\n             }\n \n             try {\n+                Set<String> resourceFiles = findResourceFiles(Paths.get(projectDir.get().toString(), RESOURCES_DIR).toFile(), new ArrayList<>());\n \n-                String basePackage = packages.stream()\n-                        .distinct()\n-                        .min(Comparator.comparingInt(String::length)).orElse(\"io.micronaut\");\n-\n-                String module;\n-                if (basePackage.startsWith(\"io.micronaut.\")) {\n-                    module = basePackage.substring(\"io.micronaut.\".length()).replace('.', '-');\n-                    basePackage = \"io.micronaut\";\n-                } else {\n-                    if (basePackage.contains(\".\")) {\n-                        final int i = basePackage.lastIndexOf('.');\n-                        module = basePackage.substring(i + 1);\n-                        basePackage = basePackage.substring(0, i);\n-                    } else {\n-                        module = basePackage;\n-                    }\n-                }\n-\n-                String path = \"native-image/\" + basePackage + \"/\" + module + \"/\";\n-                String reflectFile = path + REFLECTION_CONFIG_JSON;\n-                String propsFile = path + NATIVE_IMAGE_PROPERTIES;\n+                String path = buildNativeImagePath();\n+                String resourcesFile = path + RESOURCE_CONFIG_JSON;\n \n-                visitorContext.visitMetaInfFile(propsFile).ifPresent(gf -> {\n-                    visitorContext.info(\"Writing \" + NATIVE_IMAGE_PROPERTIES + \" file to destination: \" + gf.getName());\n-                    try (PrintWriter w = new PrintWriter (gf.openWriter())) {\n-                        w.println(\"Args = -H:ReflectionConfigurationResources=${.}/reflection-config.json\");\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                    }\n-                });\n-                final Optional<GeneratedFile> generatedFile = visitorContext.visitMetaInfFile(reflectFile);\n+                final Optional<GeneratedFile> generatedFile = visitorContext.visitMetaInfFile(resourcesFile);\n                 generatedFile.ifPresent(gf -> {\n-                    for (Map<String, Object> value : classes.values()) {\n-                        json.add(value);\n-                    }\n+                    List<Map> resourceList = resourceFiles.stream()\n+                            .map(resourceFile -> CollectionUtils.mapOf(PATTERN, \"\\\\Q\" + resourceFile + \"\\\\E\"))\n+                            .collect(Collectors.toList());\n \n-                    for (String array : arrays) {\n-                        json.add(CollectionUtils.mapOf(\n-                                NAME, \"[L\" + array.substring(0, array.length() - 2) + \";\",\n-                                ALL_DECLARED_CONSTRUCTORS, true\n-                        ));\n-                    }\n+                    // add any existing resource defined by the user in it's own file in src/main/graal\n+                    resourceList.addAll((List) json.get(RESOURCES));\n \n-                    try (Writer w = gf.openWriter()) {\n-                        visitorContext.info(\"Writing \" + REFLECTION_CONFIG_JSON + \" file to destination: \" + gf.getName());\n+                    json.put(RESOURCES, resourceList);\n+                    json.put(BUNDLES, Collections.emptyList());\n \n+                    try (Writer w = gf.openWriter()) {\n+                        visitorContext.info(\"Writing \" + RESOURCE_CONFIG_JSON + \" file to destination: \" + gf.getName());\n                         writer.writeValue(w, json);\n                     } catch (IOException e) {\n-                        visitorContext.fail(\"Error writing \" + REFLECTION_CONFIG_JSON + \": \" + e.getMessage(), null);\n+                        visitorContext.fail(\"Error writing \" + RESOURCE_CONFIG_JSON + \": \" + e.getMessage(), null);\n                     }\n                 });\n-            } finally {\n-                classes.clear();\n-                arrays.clear();\n+            } catch (Exception e) {\n+                // skip processing resources\n+            }\n+        }\n+    }\n+\n+    private Set<String> findResourceFiles(File folder, List<String> filePath) {", "originalCommit": "f794b1f3cc053748fd41f37064e0eb57ac184ea2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2ODM2OQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3168#discussion_r426768369", "bodyText": "I've give it a try and created a FileVisitor but it's not that simple to keep the current directory to prepend it to every file during the visit. As you are ok with this I think I'll keep the current implementation.", "author": "ilopmar", "createdAt": "2020-05-18T16:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNzYzNg=="}], "type": "inlineReview", "revised_code": null}]}