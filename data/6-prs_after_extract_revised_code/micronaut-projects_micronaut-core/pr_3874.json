{"pr_number": 3874, "pr_title": "Add new utility methods for GraalVM and refactor", "pr_createdAt": "2020-08-06T15:32:31Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/3874", "timeline": [{"oid": "10dfd662518eb7590f0029f726911ea344f48de1", "url": "https://github.com/micronaut-projects/micronaut-core/commit/10dfd662518eb7590f0029f726911ea344f48de1", "message": "Add new utility methods for GraalVM and refactor\n\nSee https://github.com/micronaut-projects/micronaut-sql/issues/275", "committedDate": "2020-08-06T16:12:17Z", "type": "commit"}, {"oid": "10dfd662518eb7590f0029f726911ea344f48de1", "url": "https://github.com/micronaut-projects/micronaut-core/commit/10dfd662518eb7590f0029f726911ea344f48de1", "message": "Add new utility methods for GraalVM and refactor\n\nSee https://github.com/micronaut-projects/micronaut-sql/issues/275", "committedDate": "2020-08-06T16:12:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODE3Ng==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470448176", "bodyText": "Even if the class is flagged as internal. Should not we keep the method and annotate it with @Deprecated and in the java doc tell to use the new one:\n    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\nFrom the old one we can the new one.", "author": "sdelamo", "createdAt": "2020-08-14T07:07:01Z", "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "diffHunk": "@@ -44,67 +45,118 @@\n     /**\n      * Marks the given class to be initialized at build time, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\n-        findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String... classNames) {", "originalCommit": "10dfd662518eb7590f0029f726911ea344f48de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDYwMg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470450602", "bodyText": "No, we don't. I asked about this at one engineering meeting and it's totally ok to do \"whatever\" we want with @Internal classes. Besides that, both signatures are compatible.", "author": "ilopmar", "createdAt": "2020-08-14T07:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODE3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODI3NQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470448275", "bodyText": "Even if the class is flagged as internal. Should not we keep the method and annotate it with @Deprecated and in the java doc tell to use the new one:\n    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\nFrom the old one we can the new one.", "author": "sdelamo", "createdAt": "2020-08-14T07:07:11Z", "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "diffHunk": "@@ -44,67 +45,118 @@\n     /**\n      * Marks the given class to be initialized at build time, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\n-        findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String... classNames) {\n+        for (String className : classNames) {\n+            findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+        }\n     }\n \n     /**\n      * Marks the given class to be initialized at runtime, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtRunTime(BeforeAnalysisAccess access, String className) {", "originalCommit": "10dfd662518eb7590f0029f726911ea344f48de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDY0Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470450647", "bodyText": "Same as before.", "author": "ilopmar", "createdAt": "2020-08-14T07:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODI3NQ=="}], "type": "inlineReview", "revised_code": null}]}