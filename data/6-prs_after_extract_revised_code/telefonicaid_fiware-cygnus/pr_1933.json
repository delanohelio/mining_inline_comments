{"pr_number": 1933, "pr_title": "Creation of the new CKAN sink for persisting NGSI-LD notifications", "pr_createdAt": "2020-09-22T20:09:53Z", "pr_url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933", "timeline": [{"oid": "db7ab0aa1f68dc879cde9ff657e928b6e1ac6ec9", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/db7ab0aa1f68dc879cde9ff657e928b6e1ac6ec9", "message": "Creation of the new CKAN sink for persisting NGSI-LD notifications", "committedDate": "2020-09-22T20:02:54Z", "type": "commit"}, {"oid": "de147381e8fbf456f4b5498773e1c9dc6cd2622c", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/de147381e8fbf456f4b5498773e1c9dc6cd2622c", "message": "Update mkdocs", "committedDate": "2020-09-22T20:06:37Z", "type": "commit"}, {"oid": "ca875ea8f8bdacaff2ec17b1d280eb8be12096ee", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/ca875ea8f8bdacaff2ec17b1d280eb8be12096ee", "message": "Update CHANGES_NEXT_RELEASE", "committedDate": "2020-09-22T20:07:57Z", "type": "commit"}, {"oid": "8f08c8467923379542d9310ca9bc51985b0ca99f", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/8f08c8467923379542d9310ca9bc51985b0ca99f", "message": "Resolved merge conflict", "committedDate": "2020-09-23T10:06:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIzMTA4OQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r494231089", "bodyText": "Large blocks of code commented (I have spotted this one, but maybe there are more)\nSome alternatives:\n\nFix the test and re-enable it (preferred one)\nRemove the test if that is old stuff no longer applicable to the new sink\nAdd a FIXME mark about this test is still valuable but it will be fixed in a next PR", "author": "fgalan", "createdAt": "2020-09-24T11:15:57Z", "path": "cygnus-ngsi-ld/src/test/java/com/telefonica/iot/cygnus/sinks/NGSICKANSinkTest.java", "diffHunk": "@@ -0,0 +1,1042 @@\n+/**\n+ * Copyright 2020 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\n+ *\n+ * This file is part of fiware-cygnus (FIWARE project).\n+ *\n+ * fiware-cygnus is free software: you can redistribute it and/or modify it under the terms of the GNU Affero\n+ * General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your\n+ * option) any later version.\n+ * fiware-cygnus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the\n+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n+ * for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License along with fiware-cygnus. If not, see\n+ * http://www.gnu.org/licenses/.\n+ *\n+ * For those usages not covered by the GNU Affero General Public License please contact with iot_support at tid dot es\n+ */\n+\n+package com.telefonica.iot.cygnus.sinks;\n+\n+import static org.junit.Assert.*; // this is required by \"fail\" like assertions\n+import com.telefonica.iot.cygnus.sinks.Enums.DataModel;\n+import static com.telefonica.iot.cygnus.utils.CommonUtilsForTests.getTestTraceHead;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.apache.flume.Context;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.LogManager;\n+import org.junit.Test;\n+\n+\n+/**\n+ *\n+ * @author anmunoz\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class NGSICKANSinkTest {\n+    \n+    /**\n+     * Constructor.\n+     */\n+    public NGSICKANSinkTest() {\n+        LogManager.getRootLogger().setLevel(Level.FATAL);\n+    } // NGSICKANSinkTest\n+\n+    /**\n+     * [NGSICKANSink.configure] -------- When not configured, not mandatory parameters get default values.\n+     */\n+    @Test\n+    public void testConfigureDefaults() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- When not configured, not mandatory parameters get default values\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertTrue(sink.getRowAttrPersistence());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'attr_persistence=row' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'attr_persistence=row' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(\"nokey\", sink.getAPIKey());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'api_key=nokey' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'api_key=nokey' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(500, sink.getBackendMaxConns());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'backend.max_conns=500' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'backend.max_conns=500' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(100, sink.getBackendMaxConnsPerRoute());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'backend.max_conns_per_route=100' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'backend.max_conns_per_route=100' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(1, sink.getBatchSize());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'batch_size=1' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'batch_size=1' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(30, sink.getBatchTimeout());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'batch_timeout=30' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'batch_timeout=30' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(10, sink.getBatchTTL());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'batch_ttl=30' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'batch_ttl=30' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(DataModel.DMBYENTITY, sink.getDataModel());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'data_model=dm-by-entity' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'data_model=dm-by-entity' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertTrue(!sink.getEnableEncoding());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'enable_encoding=false' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'enable_encoding=false' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertTrue(!sink.getEnableGrouping());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'enable_grouping=false' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'enable_grouping=false' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertTrue(sink.getEnableLowerCase());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'enable_lowercase=true' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'enable_lowercase=true' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(\"localhost\", sink.getCKANHost());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'ckan_host=localhost' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'ckan_host=localhost' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(\"80\", sink.getCKANPort());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'ckan_port=80' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'ckan_port=80' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertTrue(!sink.getSSL());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'ssl=false' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'ssl=false' not configured by default\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(\"recline_grid_view\", sink.getCKANViewer());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'ckan_viewer=recline_grid_view' configured by default\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'ckan_viewer=recline_grid_view' not configured by default\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureDefaults\n+    \n+    /**\n+     * [NGSICKANSink.configure] -------- Parameters get the configured value.\n+     */\n+    @Test\n+    public void testConfigureGetConfiguration() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- Parameters gets the configured value\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = \"25\";\n+        String backendMaxConnsPerRoute = \"3\";\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = \"falso\";\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = \"recline_view\";\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertEquals(25, sink.getBackendMaxConns());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'backend.max_conns=25' was configured\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'backend.max_conns=25' was not configured\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(3, sink.getBackendMaxConnsPerRoute());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'backend.max_conns_per_route=3' was configured\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'backend.max_conns_per_route=3' was not configured\");\n+            throw e;\n+        } // try catch\n+        \n+        try {\n+            assertEquals(\"recline_view\", sink.getCKANViewer());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'ckan_viewer=recline_view' was configured\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'ckan_viewer=recline_view' was not configured\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureGetConfiguration\n+    \n+    /**\n+     * [NGSICKANSink.configure] -------- enable_encoding can only be 'true' or 'false'.\n+     */\n+    @Test\n+    public void testConfigureEnableEncoding() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- enable_encoding can only be 'true' or 'false'\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = \"falso\";\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertTrue(sink.getInvalidConfiguration());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'enable_encoding=falso' was detected\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'enable_encoding=falso' was not detected\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureEnableEncoding\n+    \n+    /**\n+     * [NGSICKANSink.configure] -------- enable_lowercase can only be 'true' or 'false'.\n+     */\n+    @Test\n+    public void testConfigureEnableLowercase() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- enable_lowercase can only be 'true' or 'false'\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = \"falso\";\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertTrue(sink.getInvalidConfiguration());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'enable_lowercase=falso' was detected\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'enable_lowercase=falso' was not detected\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureEnableLowercase\n+    \n+    /**\n+     * [NGSICKANSink.configure] -------- enable_grouping can only be 'true' or 'false'.\n+     */\n+    @Test\n+    public void testConfigureEnableGrouping() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- enable_grouping can only be 'true' or 'false'\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = \"falso\";\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertTrue(sink.getInvalidConfiguration());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'enable_grouping=falso' was detected\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'enable_grouping=falso' was not detected\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureEnableGrouping\n+    \n+    /**\n+     * [NGSICKANSink.configure] -------- data_model can only be 'dm-by-entity'.\n+     */\n+    // TBD: check for dataModel values in NGSIMySQLSink and uncomment this test.\n+    // @Test\n+    public void testConfigureDataModel() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- data_model can only be 'dm-by-entity'\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertTrue(sink.getInvalidConfiguration());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'data_model=dm-by-service' was detected\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'data_model=dm-by-service' was not detected\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureDataModel\n+    \n+    /**\n+     * [NGSICKANSink.configure] -------- attr_persistence can only be 'row' or 'column'.\n+     */\n+    @Test\n+    public void testConfigureAttrPersistence() {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                + \"-------- attr_persistence can only be 'row' or 'column'\");\n+        String apiKey = null; // default\n+        String attrPersistence = \"fila\";\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        \n+        try {\n+            assertTrue(sink.getInvalidConfiguration());\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"-  OK  - 'attr_persistence=fila' was detected\");\n+        } catch (AssertionError e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.configure]\")\n+                    + \"- FAIL - 'attr_persistence=fila' was not detected\");\n+            throw e;\n+        } // try catch\n+    } // testConfigureAttrPersistence\n+    \n+    /**\n+     * [NGSICKANSink.buildOrgName] -------- When no encoding, the org name is equals to the encoding of the\n+     * notified/defaulted service.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildOrgNameNoEncoding() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                + \"-------- When no encoding, the org name is equals to the encoding of the notified/defaulted \"\n+                + \"service\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String service = \"someService\";\n+        \n+        try {\n+            String builtOrgName = sink.buildOrgName(service);\n+            String expectedOrgName = \"someservice\";\n+        \n+            try {\n+                assertEquals(expectedOrgName, builtOrgName);\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                        + \"-  OK  - '\" + expectedOrgName + \"' is equals to the encoding of <service>\");\n+            } catch (AssertionError e) {\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                        + \"- FAIL - '\" + expectedOrgName + \"' is not equals to the encoding of <service>\");\n+                throw e;\n+            } // try catch // try catch\n+        } catch (Exception e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                    + \"- FAIL - There was some problem when building the DB name\");\n+            throw e;\n+        } // try catch\n+    } // testBuildOrgNameNoEncoding\n+    \n+    /**\n+     * [NGSICKANSink.buildOrgName] -------- When encoding, the org name is equals to the encoding of the\n+     * notified/defaulted service.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildOrgNameEncoding() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                + \"-------- When encoding, the org name is equals to the encoding of the notified/defaulted service\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = \"true\";\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String service = \"someService\";\n+        \n+        try {\n+            String builtOrgName = sink.buildOrgName(service);\n+            String expectedOrgName = \"somex0053ervice\";\n+        \n+            try {\n+                assertEquals(expectedOrgName, builtOrgName);\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                        + \"-  OK  - '\" + expectedOrgName + \"' is equals to the encoding of <service>\");\n+            } catch (AssertionError e) {\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                        + \"- FAIL - '\" + expectedOrgName + \"' is not equals to the encoding of <service>\");\n+                throw e;\n+            } // try catch // try catch\n+        } catch (Exception e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                    + \"- FAIL - There was some problem when building the DB name\");\n+            throw e;\n+        } // try catch\n+    } // testBuildOrgNameEncoding\n+    \n+\n+\n+    \n+    /**\n+     * [NGSICKANSink.buildResName] -------- When no encoding, the CKAN resource name is the encoding of the\n+     * concatenation of the notified \\<entity_id\\> and \\<entity_type\\>.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildResourceNameNoEncoding() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                + \"-------- When no encoding, the CKAN resource name is the encoding of the concatenation of the \"\n+                + \"notified <entityId> and <entityType>\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        String entityId = \"\"; //defalut\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String entity = \"someId=someType\";\n+        \n+        try {\n+            String builtResName = sink.buildResName(entity, entityId);\n+            String expecetedResName = \"someid_sometype\";\n+        \n+            try {\n+                assertEquals(expecetedResName, builtResName);\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                        + \"-  OK  - '\" + builtResName + \"' is equals to the encoding of <entityId> and <entityType>\");\n+            } catch (AssertionError e) {\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                        + \"- FAIL - '\" + builtResName + \"' is not equals to the encoding of <entityId> and \"\n+                        + \"<entityType>\");\n+                throw e;\n+            } // try catch // try catch\n+        } catch (Exception e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                    + \"- FAIL - There was some problem when building the table name\");\n+            throw e;\n+        } // try catch\n+    } // testBuildResourceNameNoEncoding\n+    \n+    /**\n+     * [NGSICKANSink.buildResName] -------- When encoding, the CKAN resource name is the encoding of the concatenation\n+     * of the notified \\<entity_id\\> and \\<entity_type\\>.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildResourceNameEncoding() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                + \"-------- When encoding, the CKAN resource name is the encoding of the concatenation of the \"\n+                + \"notified <entityId> and <entityType>\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = \"true\";\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        String entityId = \"\"; //defalut\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String entity = \"someId=someType\";\n+        \n+        try {\n+            String builtResName = sink.buildResName(entity, entityId);\n+            String expecetedResName = \"somex0049dxffffsomex0054ype\";\n+        \n+            try {\n+                assertEquals(expecetedResName, builtResName);\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                        + \"-  OK  - '\" + builtResName + \"' is equals to the encoding of <entityId> and <entityType>\");\n+            } catch (AssertionError e) {\n+                System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                        + \"- FAIL - '\" + builtResName + \"' is not equals to the encoding of <entityId> and \"\n+                        + \"<entityType>\");\n+                throw e;\n+            } // try catch // try catch\n+        } catch (Exception e) {\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                    + \"- FAIL - There was some problem when building the table name\");\n+            throw e;\n+        } // try catch\n+    } // testBuildResourceNameEncoding\n+    \n+    /**\n+     * [NGSICKANSink.buildOrgName] -------- An organization name length greater than 100 characters is detected.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildOrganizationNameLength() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                + \"-------- An organization name length greater than 100 characters is detected\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String service = \"veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n+                + \"ooooogService\";\n+        \n+        try {\n+            sink.buildOrgName(service);\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                    + \"- FAIL - An organization name length greater than 100 characters has not been detected\");\n+            assertTrue(false);\n+        } catch (Exception e) {\n+            assertTrue(true);\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildOrgName]\")\n+                    + \"-  OK  - An organization name length greater than 100 characters has been detected\");\n+        } // try catch\n+    } // testBuildOrganizationNameLength\n+    \n+    /**\n+     * [NGSICKANSink.buildPkgName] -------- A package name length greater than 100 characters is detected.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildPackageNameLength() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildPkgName]\")\n+                + \"-------- A resource name length greater than 100 characters is detected\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        String entityId = \"\"; //defalut\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String service = \"veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n+                + \"ooooogService\";\n+        String servicePath = \"veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n+                + \"ooooooooogServicePath\";\n+        \n+        try {\n+            sink.buildPkgName(service, entityId);\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildPkgName]\")\n+                    + \"- FAIL - A package name length greater than 100 characters has not been detected\");\n+            assertTrue(false);\n+        } catch (Exception e) {\n+            assertTrue(true);\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildPkgName]\")\n+                    + \"-  OK  - A package name length greater than 100 characters has been detected\");\n+        } // try catch\n+    } // testBuildPackageNameLength\n+    \n+    /**\n+     * [NGSICKANSink.buildResName] -------- A resource name length greater than 100 characters is detected.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBuildResourceNameLength() throws Exception {\n+        System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                + \"-------- A resource name length greater than 100 characters is detected\");\n+        String apiKey = null; // default\n+        String attrPersistence = null; // default\n+        String backendMaxConns = null; // default\n+        String backendMaxConnsPerRoute = null; // default\n+        String batchSize = null; // default\n+        String batchTime = null; // default\n+        String batchTTL = null; // default\n+        String dataModel = null; // default\n+        String enableEncoding = null; // default\n+        String enableGrouping = null; // default\n+        String enableLowercase = null; // default\n+        String host = null; // default\n+        String port = null; // default\n+        String ssl = null; // default\n+        String viewer = null; // default\n+        String entityId = \"\"; //defalut\n+        NGSICKANSink sink = new NGSICKANSink();\n+        sink.configure(createContext(apiKey, attrPersistence, backendMaxConns, backendMaxConnsPerRoute, batchSize,\n+                batchTime, batchTTL, dataModel, enableEncoding, enableGrouping, enableLowercase, host, port, ssl,\n+                viewer));\n+        String entity = \"veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\"\n+                + \"ooooogEntity\";\n+        \n+        try {\n+            sink.buildResName(entity, entityId);\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                    + \"- FAIL - A resource name length greater than 100 characters has not been detected\");\n+            assertTrue(false);\n+        } catch (Exception e) {\n+            assertTrue(true);\n+            System.out.println(getTestTraceHead(\"[NGSICKANSink.buildResName]\")\n+                    + \"-  OK  - A resource name length greater than 100 characters has been detected\");\n+        } // try catch\n+    } // testBuildResourceNameLength\n+    \n+    private Context createContext(String apiKey, String attrPersistence, String backendMaxConns,\n+            String backendMaxConnsPerRoute, String batchSize, String batchTime, String batchTTL, String dataModel,\n+            String enableEncoding, String enableGrouping, String enableLowercase, String host, String port,\n+            String ssl, String viewer) {\n+        Context context = new Context();\n+        context.put(\"api_key\", apiKey);\n+        context.put(\"attr_persistence\", attrPersistence);\n+        context.put(\"backend.max_conns\", backendMaxConns);\n+        context.put(\"backend.max_conns_per_route\", backendMaxConnsPerRoute);\n+        context.put(\"batch_size\", batchSize);\n+        context.put(\"batch_time\", batchTime);\n+        context.put(\"batch_ttl\", batchTTL);\n+        context.put(\"ckan_host\", host);\n+        context.put(\"ckan_port\", port);\n+        context.put(\"ckan_viewer\", viewer);\n+        context.put(\"data_model\", dataModel);\n+        context.put(\"enable_encoding\", enableEncoding);\n+        context.put(\"enable_grouping\", enableGrouping);\n+        context.put(\"enable_lowercase\", enableLowercase);\n+        context.put(\"ssl\", ssl);\n+        return context;\n+    } // createContext\n+\n+   /* private NotifyContextRequestLD.ContextElement createContextElement() {", "originalCommit": "8f08c8467923379542d9310ca9bc51985b0ca99f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5ODEyMA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r495598120", "bodyText": "Sorry, I forgot to perforn the cleaned up of the tests file before to commit. Right now this is fixed", "author": "anmunoz", "createdAt": "2020-09-27T17:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIzMTA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "c038755514d3a6bae437a6d81446c77d556d40f1", "chunk": "diff --git a/cygnus-ngsi-ld/src/test/java/com/telefonica/iot/cygnus/sinks/NGSICKANSinkTest.java b/cygnus-ngsi-ld/src/test/java/com/telefonica/iot/cygnus/sinks/NGSICKANSinkTest.java\nindex 31c43231..9c5db6ec 100644\n--- a/cygnus-ngsi-ld/src/test/java/com/telefonica/iot/cygnus/sinks/NGSICKANSinkTest.java\n+++ b/cygnus-ngsi-ld/src/test/java/com/telefonica/iot/cygnus/sinks/NGSICKANSinkTest.java\n\n@@ -570,10 +570,7 @@ public class NGSICKANSinkTest {\n             throw e;\n         } // try catch\n     } // testBuildOrgNameEncoding\n-    \n-\n \n-    \n     /**\n      * [NGSICKANSink.buildResName] -------- When no encoding, the CKAN resource name is the encoding of the\n      * concatenation of the notified \\<entity_id\\> and \\<entity_type\\>.\n"}}, {"oid": "2ae199bb7c24a70a02c642a0a1909d0720d80810", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/2ae199bb7c24a70a02c642a0a1909d0720d80810", "message": "Update CHANGES_NEXT_RELEASE\n\nCo-authored-by: Ferm\u00edn Gal\u00e1n M\u00e1rquez <fgalan@users.noreply.github.com>", "committedDate": "2020-09-24T11:58:42Z", "type": "commit"}, {"oid": "43d19104b97ec364ccf64a579d5bc23442f4e798", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/43d19104b97ec364ccf64a579d5bc23442f4e798", "message": "Update cygnus-ngsi-ld flume extensions catalogue readme", "committedDate": "2020-09-27T17:48:20Z", "type": "commit"}, {"oid": "087ed05cef32cd8834c4d03c9b9b1917577b2e84", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/087ed05cef32cd8834c4d03c9b9b1917577b2e84", "message": "Merge branch 'master' of https://github.com/ging/fiware-cygnus", "committedDate": "2020-09-27T17:50:03Z", "type": "commit"}, {"oid": "c038755514d3a6bae437a6d81446c77d556d40f1", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/c038755514d3a6bae437a6d81446c77d556d40f1", "message": "Perform cleaned up of the CKAN sink tests", "committedDate": "2020-09-27T17:55:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDExMA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r495730110", "bodyText": "Please check indentation (github is not showing this line correctly indented, maybe it's due to some tabs vs space issue)", "author": "fgalan", "createdAt": "2020-09-28T07:08:58Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java", "diffHunk": "@@ -79,8 +81,12 @@ public void persist(String orgName, String pkgName, String resName, String recor\n         throws CygnusBadConfiguration, CygnusRuntimeError, CygnusPersistenceError {\n         LOGGER.debug(\"Going to lookup for the resource id, the cache may be updated during the process (orgName=\"\n                 + orgName + \", pkgName=\" + pkgName + \", resName=\" + resName + \")\");\n-        String resId = resourceLookupOrCreate(orgName, pkgName, resName, createEnabled);\n-        \n+        String resId = \"\";\n+        if (!createEnabled){\n+            resId= resourceLookupOrCreateDynamicFields(orgName, pkgName, resName,records);\n+        } else {\n+        resId = resourceLookupOrCreate(orgName, pkgName, resName, createEnabled);", "originalCommit": "c038755514d3a6bae437a6d81446c77d556d40f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MTA0MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r496091040", "bodyText": "Fixed", "author": "anmunoz", "createdAt": "2020-09-28T16:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDExMA=="}], "type": "inlineReview", "revised_code": {"commit": "cfd50468c12474f96d2238147c715ef803239b67", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\nindex 46cd7282..1d7ad314 100644\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\n@@ -82,7 +82,7 @@ public class CKANBackendImpl extends HttpBackend implements CKANBackend {\n         LOGGER.debug(\"Going to lookup for the resource id, the cache may be updated during the process (orgName=\"\n                 + orgName + \", pkgName=\" + pkgName + \", resName=\" + resName + \")\");\n         String resId = \"\";\n-        if (!createEnabled){\n+        if (!createEnabled) {\n             resId= resourceLookupOrCreateDynamicFields(orgName, pkgName, resName,records);\n         } else {\n         resId = resourceLookupOrCreate(orgName, pkgName, resName, createEnabled);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDQ1MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r495730450", "bodyText": "JavaDoc missing.\nProbably an important thing to mention in that JavaDoc is that this method is used by the cygnus-ngis-ld bundle.", "author": "fgalan", "createdAt": "2020-09-28T07:09:46Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java", "diffHunk": "@@ -90,6 +96,65 @@ public void persist(String orgName, String pkgName, String resName, String recor\n             insert(resId, records);\n         } // if else\n     } // persist\n+\n+    private String resourceLookupOrCreateDynamicFields(String orgName, String pkgName, String resName, String records)", "originalCommit": "c038755514d3a6bae437a6d81446c77d556d40f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5MjQ2Mw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r496092463", "bodyText": "Added", "author": "anmunoz", "createdAt": "2020-09-28T16:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDQ1MA=="}], "type": "inlineReview", "revised_code": {"commit": "35f3a9c279e7373f2f03922dbcff6fd1dfc871eb", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\nold mode 100644\nnew mode 100755\nindex 46cd7282..ecb0290d\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\n@@ -97,6 +97,14 @@ public class CKANBackendImpl extends HttpBackend implements CKANBackend {\n         } // if else\n     } // persist\n \n+    /**\n+     * Lookup or create resources used by cygnus-ngsi-ld and create the datastore with the fields available in the records parameter.\n+     * @param orgName The organization in which datastore the record is going to be inserted\n+     * @param pkgName The package name to be created or lookup to\n+     * @param resName The resource name to be created or lookup to\n+     * @param records Te records to be inserted and used to create the datastore fields\n+     * @throws Exception\n+     */\n     private String resourceLookupOrCreateDynamicFields(String orgName, String pkgName, String resName, String records)\n             throws CygnusBadConfiguration, CygnusRuntimeError, CygnusPersistenceError {\n         if (!cache.isCachedOrg(orgName)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczMDU4NQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r495730585", "bodyText": "Code style:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!createEnabled){\n          \n          \n            \n                    if (!createEnabled) {", "author": "fgalan", "createdAt": "2020-09-28T07:10:01Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java", "diffHunk": "@@ -79,8 +81,12 @@ public void persist(String orgName, String pkgName, String resName, String recor\n         throws CygnusBadConfiguration, CygnusRuntimeError, CygnusPersistenceError {\n         LOGGER.debug(\"Going to lookup for the resource id, the cache may be updated during the process (orgName=\"\n                 + orgName + \", pkgName=\" + pkgName + \", resName=\" + resName + \")\");\n-        String resId = resourceLookupOrCreate(orgName, pkgName, resName, createEnabled);\n-        \n+        String resId = \"\";\n+        if (!createEnabled){", "originalCommit": "c038755514d3a6bae437a6d81446c77d556d40f1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cfd50468c12474f96d2238147c715ef803239b67", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\nindex 46cd7282..1d7ad314 100644\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\n@@ -82,7 +82,7 @@ public class CKANBackendImpl extends HttpBackend implements CKANBackend {\n         LOGGER.debug(\"Going to lookup for the resource id, the cache may be updated during the process (orgName=\"\n                 + orgName + \", pkgName=\" + pkgName + \", resName=\" + resName + \")\");\n         String resId = \"\";\n-        if (!createEnabled){\n+        if (!createEnabled) {\n             resId= resourceLookupOrCreateDynamicFields(orgName, pkgName, resName,records);\n         } else {\n         resId = resourceLookupOrCreate(orgName, pkgName, resName, createEnabled);\n"}}, {"oid": "cfd50468c12474f96d2238147c715ef803239b67", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/cfd50468c12474f96d2238147c715ef803239b67", "message": "Update cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\nCo-authored-by: Ferm\u00edn Gal\u00e1n M\u00e1rquez <fgalan@users.noreply.github.com>", "committedDate": "2020-09-28T16:30:48Z", "type": "commit"}, {"oid": "35f3a9c279e7373f2f03922dbcff6fd1dfc871eb", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/35f3a9c279e7373f2f03922dbcff6fd1dfc871eb", "message": "Update Javadoc and fix indentation", "committedDate": "2020-09-28T16:47:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MzU5Ng==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r498073596", "bodyText": "Use JsonElement or gson objects to avoid creating String jsons.\nCheck cygnus-ngsi columnAggregation for examples.", "author": "IvanHdzC", "createdAt": "2020-10-01T08:32:12Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java", "diffHunk": "@@ -324,6 +397,48 @@ private void createDataStore(String resId) throws CygnusRuntimeError, CygnusPers\n                     + \", statusCode=\" + res.getStatusCode() + \")\");\n         } // if else\n     } // createResource\n+\n+    /**\n+     * Creates a datastore for a given resource in CKAN.\n+     * @param resId Identifies the resource whose datastore is going to be created.\n+     * @param records Array list with the attributes names for being used as fields with column mode\n+     * @throws Exception\n+     */\n+    private void createDataStoreWithFields(String resId, String records) throws CygnusRuntimeError, CygnusPersistenceError {\n+        // create the CKAN request JSON\n+        // CKAN types reference: http://docs.ckan.org/en/ckan-2.2/datastore.html#valid-types\n+        org.json.JSONObject jsonContent = new org.json.JSONObject(records);\n+        Iterator<String> keys = jsonContent.keys();\n+        ArrayList <String> fields = new ArrayList<>();\n+        while (keys.hasNext()) {\n+            String key = keys.next();\n+            fields.add(key);\n+        }\n+        String jsonString = \"{ \\\"resource_id\\\": \\\"\" + resId\n+                + \"\\\", \\\"fields\\\": [ \";\n+        String content2=\"\";\n+        for (int i=0;i<fields.size()-1;i++){\n+            content2 += \"{ \\\"id\\\": \\\"\" + fields.get(i) + \"\\\", \\\"type\\\": \\\"text\\\"},\";\n+        }\n+        content2 += \"{ \\\"id\\\": \\\"\" + fields.get(fields.size()-1) + \"\\\", \\\"type\\\": \\\"text\\\"}\"\n+                + \"], \"\n+                + \"\\\"force\\\": \\\"true\\\" }\";\n+        jsonString += content2;\n+\n+        // create the CKAN request URL\n+        String urlPath = \"/api/3/action/datastore_create\";\n+\n+        // do the CKAN request\n+        JsonResponse res = doCKANRequest(\"POST\", urlPath, jsonString);\n+\n+        // check the status\n+        if (res.getStatusCode() == 200) {\n+            LOGGER.debug(\"Successful datastore creation (resourceId=\" + resId + \")\");\n+        } else {\n+            throw new CygnusPersistenceError(\"Could not create the datastore (resId=\" + resId\n+                    + \", statusCode=\" + res.getStatusCode() + \")\");\n+        } // if else\n+    } // createResource", "originalCommit": "35f3a9c279e7373f2f03922dbcff6fd1dfc871eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNDIzNQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r498304235", "bodyText": "This method uses the same style presented in the CKANBackendImpl.java check the method createDataStore", "author": "anmunoz", "createdAt": "2020-10-01T14:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MzU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMDQ1Nw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r498310457", "bodyText": "That's correct. The idea is to avoid creating Jsons as Strings and use gson to do it, so the technical debt stops growing.", "author": "IvanHdzC", "createdAt": "2020-10-01T14:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MzU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1MTEyOQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r498351129", "bodyText": "I agree with @IvanHdzC . New methods should be added in the \"right\" way. Old method would remain using the \"bad\" way until somebody can fix them (tech debt).", "author": "fgalan", "createdAt": "2020-10-01T15:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MzU5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyOTA0NA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r499729044", "bodyText": "Ok I have made the changes in the code for using Gson objects instead of jsonString please check e611e02", "author": "anmunoz", "createdAt": "2020-10-05T16:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA3MzU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e611e0208e2ccd4ca76ba80141166ade4117eb21", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\nindex ecb0290d..6ba2d7ef 100755\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\n@@ -410,20 +412,28 @@ public class CKANBackendImpl extends HttpBackend implements CKANBackend {\n         org.json.JSONObject jsonContent = new org.json.JSONObject(records);\n         Iterator<String> keys = jsonContent.keys();\n         ArrayList <String> fields = new ArrayList<>();\n+        Gson gson = new Gson();\n+        DataStore dataStore = new DataStore();\n+        ArrayList<JsonElement> jsonArray = new ArrayList<>();\n+\n         while (keys.hasNext()) {\n             String key = keys.next();\n             fields.add(key);\n         }\n-        String jsonString = \"{ \\\"resource_id\\\": \\\"\" + resId\n-                + \"\\\", \\\"fields\\\": [ \";\n-        String content2=\"\";\n-        for (int i=0;i<fields.size()-1;i++){\n-            content2 += \"{ \\\"id\\\": \\\"\" + fields.get(i) + \"\\\", \\\"type\\\": \\\"text\\\"},\";\n+\n+        for (int i=0;i<fields.size();i++){\n+            JsonObject jsonObject = new JsonObject();\n+            jsonObject.addProperty(\"id\",fields.get(i));\n+            jsonObject.addProperty(\"type\",\"text\");\n+            jsonArray.add((jsonObject.getAsJsonObject()));\n         }\n-        content2 += \"{ \\\"id\\\": \\\"\" + fields.get(fields.size()-1) + \"\\\", \\\"type\\\": \\\"text\\\"}\"\n-                + \"], \"\n-                + \"\\\"force\\\": \\\"true\\\" }\";\n-        jsonString += content2;\n+\n+        dataStore.setResource_id(resId);\n+        dataStore.setFields(jsonArray);\n+        dataStore.setForce(\"true\");\n+        String jsonString = gson.toJson(dataStore);\n+\n+        LOGGER.debug(\"Successful datastore creation jsonString=\" + jsonString + \"\");\n \n         // create the CKAN request URL\n         String urlPath = \"/api/3/action/datastore_create\";\n"}}, {"oid": "e611e0208e2ccd4ca76ba80141166ade4117eb21", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/e611e0208e2ccd4ca76ba80141166ade4117eb21", "message": "Update method createDataStoreWithDynamicFields for using Gson objects", "committedDate": "2020-10-05T16:33:33Z", "type": "commit"}, {"oid": "eaa61a5541c2b89af99aecf99122889a164fd780", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/eaa61a5541c2b89af99aecf99122889a164fd780", "message": "Update documentation", "committedDate": "2020-10-05T17:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3NzkwNw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500077907", "bodyText": "Is this used? At any case, this is still a String Json. It should be optimized for gson.\nMaybe you can use a JsonObject to build this String. Take a look to method NGSIUtils.linkedHashMapToJsonList.\nAnother solution would be creating a serializer and deserializer to indicate gson how to work with this object. take a look at NotifyContextRequestNGSIv2Deserializer.class and NotifyContextRequestNGSIv2.class. Both are used at NGSIRestHandler.class.", "author": "IvanHdzC", "createdAt": "2020-10-06T07:58:20Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java", "diffHunk": "@@ -681,4 +691,45 @@ private JsonResponse doCKANRequest(String method, String urlPath, String jsonStr\n         return doRequest(method, urlPath, true, headers, new StringEntity(jsonString, \"UTF-8\"));\n     } // doCKANRequest\n \n+    public class DataStore{\n+        private String resource_id;\n+        private ArrayList<JsonElement> fields;\n+        private String force;\n+\n+        public  DataStore(){}\n+\n+        public ArrayList<JsonElement> getFields() {\n+            return fields;\n+        }\n+\n+        public void setFields(ArrayList<JsonElement> fields) {\n+            this.fields = fields;\n+        }\n+\n+        public String getResource_id() {\n+            return resource_id;\n+        }\n+\n+        public void setResource_id(String resource_id) {\n+            this.resource_id = resource_id;\n+        }\n+\n+        public String getForce() {\n+            return force;\n+        }\n+\n+        public void setForce(String force) {\n+            this.force = force;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"{\" +\n+                    \"\\\"resource_id\\\":\" + \"\\\"\" +resource_id + \"\\\"\" +\n+                    \", \\\"fields\\\":\" + \"\\\"\"+fields+ \"\\\"\"+\n+                    \", \\\"force\\\":\"+\"\\\"\" + force + \"\\\"\" +\n+                    '}';\n+        }", "originalCommit": "e611e0208e2ccd4ca76ba80141166ade4117eb21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyNTUzMw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500125533", "bodyText": "That is only a toString method, it is no needed for the creation of the JSON, I am going to remove it.", "author": "anmunoz", "createdAt": "2020-10-06T09:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3NzkwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg5NDQ3OQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500894479", "bodyText": "NTC", "author": "IvanHdzC", "createdAt": "2020-10-07T10:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3NzkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7c5abb38f45c567c54196b64cc1bab30ddae7f1c", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\nindex 6ba2d7ef..31c927e2 100755\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\n@@ -721,15 +721,6 @@ public class CKANBackendImpl extends HttpBackend implements CKANBackend {\n         public void setForce(String force) {\n             this.force = force;\n         }\n-\n-        @Override\n-        public String toString() {\n-            return \"{\" +\n-                    \"\\\"resource_id\\\":\" + \"\\\"\" +resource_id + \"\\\"\" +\n-                    \", \\\"fields\\\":\" + \"\\\"\"+fields+ \"\\\"\"+\n-                    \", \\\"force\\\":\"+\"\\\"\" + force + \"\\\"\" +\n-                    '}';\n-        }\n     }\n \n } // CKANBackendImpl\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500084491", "bodyText": "The idea for this class is to be the same as the method createDataStore? In that case, not sure it should be a class or an inner class for this backend.\nWhy do you think it's better to abstract it as a new class?", "author": "IvanHdzC", "createdAt": "2020-10-06T08:09:19Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java", "diffHunk": "@@ -566,4 +691,45 @@ private JsonResponse doCKANRequest(String method, String urlPath, String jsonStr\n         return doRequest(method, urlPath, true, headers, new StringEntity(jsonString, \"UTF-8\"));\n     } // doCKANRequest\n \n+    public class DataStore{", "originalCommit": "eaa61a5541c2b89af99aecf99122889a164fd780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDEyOTcwMQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500129701", "bodyText": "Well, I am trying to use the same structure that is used in cygnus-ngsi for creating Json from Gson object, this is a similar approach presented in the class NotifyContextRequest, this is also outdated?", "author": "anmunoz", "createdAt": "2020-10-06T09:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNzQ1MQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500937451", "bodyText": "Not really. I'm not sure if that class should be an inner class. In the NotifyContextRequest class makes sense because NotifyContextRequest defines an object.\nIn this case CKANBackendImpl is not a model. Please refactor it and create a new package to put it in.\ncygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/model\n@fgalan do you agree?", "author": "IvanHdzC", "createdAt": "2020-10-07T11:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzOTE4OA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500939188", "bodyText": "@fgalan do you agree?\n\nI agree.", "author": "fgalan", "createdAt": "2020-10-07T11:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTAxMDgyOA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r501010828", "bodyText": "Done, please check 5c6e2fb", "author": "anmunoz", "createdAt": "2020-10-07T13:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1MTgwMw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r501051803", "bodyText": "Great! Thanks.", "author": "IvanHdzC", "createdAt": "2020-10-07T14:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NjQ0Mg==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r501056442", "bodyText": "Thank you for the advice", "author": "anmunoz", "createdAt": "2020-10-07T14:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NDQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c5abb38f45c567c54196b64cc1bab30ddae7f1c", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\nindex 6ba2d7ef..31c927e2 100755\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/CKANBackendImpl.java\n\n@@ -721,15 +721,6 @@ public class CKANBackendImpl extends HttpBackend implements CKANBackend {\n         public void setForce(String force) {\n             this.force = force;\n         }\n-\n-        @Override\n-        public String toString() {\n-            return \"{\" +\n-                    \"\\\"resource_id\\\":\" + \"\\\"\" +resource_id + \"\\\"\" +\n-                    \", \\\"fields\\\":\" + \"\\\"\"+fields+ \"\\\"\"+\n-                    \", \\\"force\\\":\"+\"\\\"\" + force + \"\\\"\" +\n-                    '}';\n-        }\n     }\n \n } // CKANBackendImpl\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NjI1Ng==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r500086256", "bodyText": "Is your fork updated? This line was added some weeks ago, it's weird that GitHub marks it as difference. Maybe you should update your upstream and update your branches.", "author": "IvanHdzC", "createdAt": "2020-10-06T08:12:10Z", "path": "cygnus-ngsi-ld/src/main/java/com/telefonica/iot/cygnus/utils/NGSIConstants.java", "diffHunk": "@@ -51,7 +51,7 @@ private NGSIConstants() {\n     public static final String ATTR_VALUE          = \"attrValue\";\n     public static final String ATTR_MD             = \"attrMd\";\n     public static final String ATTR_MD_FILE        = \"attrMdFile\";\n-    \n+    public static final String AUTOGENERATED_ATTR_TYPE           = \"_attr_internal_type\";", "originalCommit": "eaa61a5541c2b89af99aecf99122889a164fd780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1ODkwNg==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r501058906", "bodyText": "If I am correct the latest commits amend that", "author": "anmunoz", "createdAt": "2020-10-07T14:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NjI1Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7c5abb38f45c567c54196b64cc1bab30ddae7f1c", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/7c5abb38f45c567c54196b64cc1bab30ddae7f1c", "message": "Update DataStore class and documentation", "committedDate": "2020-10-06T12:01:54Z", "type": "commit"}, {"oid": "e565a9dacc0722abc6ee194463a533a31457dcb6", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/e565a9dacc0722abc6ee194463a533a31457dcb6", "message": "Updata cahanges next release", "committedDate": "2020-10-07T13:14:33Z", "type": "commit"}, {"oid": "93caae81c5d98a19f2614034275517d7ddf3b708", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/93caae81c5d98a19f2614034275517d7ddf3b708", "message": "Create model CKAN DataStore", "committedDate": "2020-10-07T13:22:28Z", "type": "commit"}, {"oid": "5c6e2fb0e72442b25b0a1a8938f64e877596043b", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/5c6e2fb0e72442b25b0a1a8938f64e877596043b", "message": "Create model CKAN DataStore", "committedDate": "2020-10-07T13:26:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3ODkwNg==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r501078906", "bodyText": "Licence header missing.", "author": "fgalan", "createdAt": "2020-10-07T14:53:39Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/model/DataStore.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.telefonica.iot.cygnus.backends.ckan.model;", "originalCommit": "5c6e2fb0e72442b25b0a1a8938f64e877596043b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4NzI2MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1933#discussion_r501087260", "bodyText": "Done a342225", "author": "anmunoz", "createdAt": "2020-10-07T15:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3ODkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "a342225bbb433f481512e7e049c94d6e43c086ee", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/model/DataStore.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/model/DataStore.java\nindex a0b61fde..88b6905f 100644\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/model/DataStore.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/ckan/model/DataStore.java\n\n@@ -1,3 +1,20 @@\n+/**\n+ * Copyright 2020 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\n+ *\n+ * This file is part of fiware-cygnus (FIWARE project).\n+ *\n+ * fiware-cygnus is free software: you can redistribute it and/or modify it under the terms of the GNU Affero\n+ * General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your\n+ * option) any later version.\n+ * fiware-cygnus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the\n+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n+ * for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License along with fiware-cygnus. If not, see\n+ * http://www.gnu.org/licenses/.\n+ *\n+ * For those usages not covered by the GNU Affero General Public License please contact with iot_support at tid dot es\n+ */\n package com.telefonica.iot.cygnus.backends.ckan.model;\n \n import com.google.gson.JsonElement;\n"}}, {"oid": "a342225bbb433f481512e7e049c94d6e43c086ee", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/a342225bbb433f481512e7e049c94d6e43c086ee", "message": "Add licence header", "committedDate": "2020-10-07T15:02:26Z", "type": "commit"}]}