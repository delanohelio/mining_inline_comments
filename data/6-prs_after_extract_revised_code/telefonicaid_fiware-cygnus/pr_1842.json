{"pr_number": 1842, "pr_title": "Task/generic sql backend", "pr_createdAt": "2020-03-23T11:23:55Z", "pr_url": "https://github.com/telefonicaid/fiware-cygnus/pull/1842", "timeline": [{"oid": "cb73ed79cb7a3981c99961835b0ea911dde6d047", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/cb73ed79cb7a3981c99961835b0ea911dde6d047", "message": "add generic SQLBackend", "committedDate": "2020-03-19T17:52:51Z", "type": "commit"}, {"oid": "e7ff5ee27bfdaa92d0b373a370658abef3ad716c", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/e7ff5ee27bfdaa92d0b373a370658abef3ad716c", "message": "add generic SQLBackend tests", "committedDate": "2020-03-19T18:01:49Z", "type": "commit"}, {"oid": "a05cec76b6c26e7ae6c5090a3019d5d544882847", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/a05cec76b6c26e7ae6c5090a3019d5d544882847", "message": "add generic sql backend to MySQL sink", "committedDate": "2020-03-19T18:02:42Z", "type": "commit"}, {"oid": "df076f2d6ea3c05317ecd4b0ff6ddf262944f81c", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/df076f2d6ea3c05317ecd4b0ff6ddf262944f81c", "message": "add lazy singleton implementation for mysql backend", "committedDate": "2020-03-20T11:08:42Z", "type": "commit"}, {"oid": "0923c5c5e587f29edf04e7ddc1744cfef73d8261", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/0923c5c5e587f29edf04e7ddc1744cfef73d8261", "message": "edit sql backend to match postgresql", "committedDate": "2020-03-20T12:09:36Z", "type": "commit"}, {"oid": "56b793557ab600e2916d9a6889237a6f48daec38", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/56b793557ab600e2916d9a6889237a6f48daec38", "message": "add generic sql backend for posgresql sink", "committedDate": "2020-03-20T12:09:59Z", "type": "commit"}, {"oid": "8c6c2b887755e6dc968f6d63f1d12a671d05edb3", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/8c6c2b887755e6dc968f6d63f1d12a671d05edb3", "message": "add generic sql backend for posgis sink", "committedDate": "2020-03-20T12:15:49Z", "type": "commit"}, {"oid": "e187a041f7c9e5bee4edaab6abcaaf2fe6f19316", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/e187a041f7c9e5bee4edaab6abcaaf2fe6f19316", "message": "code cleanning", "committedDate": "2020-03-20T12:21:48Z", "type": "commit"}, {"oid": "28f68e35a74c96ed88a29fc77e809035a361bbc3", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/28f68e35a74c96ed88a29fc77e809035a361bbc3", "message": "docs update and remove classes and files from previous backends", "committedDate": "2020-03-20T12:50:53Z", "type": "commit"}, {"oid": "a8e37d178ca22cb91e272da27fcef067c7e5f36f", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/a8e37d178ca22cb91e272da27fcef067c7e5f36f", "message": "fix on default postgres database on generic sql backend", "committedDate": "2020-03-23T09:31:23Z", "type": "commit"}, {"oid": "7c4888e56c26be86326505a85e1a652b708952f0", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/7c4888e56c26be86326505a85e1a652b708952f0", "message": "Update CHANGES_NEXT_RELEASE\n\nCo-Authored-By: Ferm\u00edn Gal\u00e1n M\u00e1rquez <fgalan@users.noreply.github.com>", "committedDate": "2020-03-23T11:29:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTk5MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1842#discussion_r396385990", "bodyText": "I guess all logs in SQLBackend should include instance name", "author": "AlvaroVega", "createdAt": "2020-03-23T11:34:47Z", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackend.java", "diffHunk": "@@ -75,196 +67,207 @@ public void close(){\n     } // close\n \n     /**\n-     * Sets the MySQL driver. It is protected since it is only used by the\n+     * Sets the SQL driver. It is protected since it is only used by the\n      * tests.\n-     * \n-     * @param driver\n-     *            The MySQL driver to be set.\n+     *\n+     * @param driver The SQL driver to be set.\n      */\n-    protected void setDriver(MySQLDriver driver) {\n+    public void setDriver(SQLBackend.SQLDriver driver) {\n         this.driver = driver;\n     } // setDriver\n \n-    protected MySQLDriver getDriver() {\n+    public SQLBackend.SQLDriver getDriver() {\n         return driver;\n     } // getDriver\n \n-    @Override\n-    public void createDatabase(String dbName) throws CygnusRuntimeError, CygnusPersistenceError {\n-        if (cache.isCachedDb(dbName)) {\n-            LOGGER.debug(\"'\" + dbName + \"' is cached, thus it is not created\");\n+    public void createDestination(String destination) throws CygnusRuntimeError, CygnusPersistenceError {\n+        if (cache.isCachedDestination(destination)) {\n+            LOGGER.debug(\"'\" + destination + \"' is cached, thus it is not created\");", "originalCommit": "a8e37d178ca22cb91e272da27fcef067c7e5f36f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwNzg4NA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1842#discussion_r396407884", "bodyText": "Ok. The class has a generic name so it shouldn't be changed. Is it ok if I add the instance as a sufix of the class name? For instance:\ncom.telefonica.iot.cygnus.sql.sqlBackend.mysql\nWould that be ok?", "author": "IvanHdzC", "createdAt": "2020-03-23T12:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNDQ1NQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1842#discussion_r396524455", "bodyText": "It would be ok, something know what instance (mysql or postgresql/postgis)", "author": "AlvaroVega", "createdAt": "2020-03-23T15:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNDI4NA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1842#discussion_r397024284", "bodyText": "Maybe include self.sqlInstance value in SQLBackendImpl logs would be enough", "author": "AlvaroVega", "createdAt": "2020-03-24T09:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTk5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NDkyMg==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1842#discussion_r397064922", "bodyText": "great idea! Thanks @AlvaroVega.\nFixed in 73fcd16", "author": "IvanHdzC", "createdAt": "2020-03-24T10:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTk5MA=="}], "type": "inlineReview", "revised_code": {"commit": "adb4518e1f1d47ec28b72bd74b6374771d821b7e", "chunk": "diff --git a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackend.java b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackend.java\nindex 929841f4..8d5f448b 100644\n--- a/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackend.java\n+++ b/cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackend.java\n\n@@ -18,711 +18,61 @@\n \n package com.telefonica.iot.cygnus.backends.sql;\n \n-import com.sun.rowset.CachedRowSetImpl;\n import com.telefonica.iot.cygnus.errors.CygnusBadContextData;\n import com.telefonica.iot.cygnus.errors.CygnusPersistenceError;\n import com.telefonica.iot.cygnus.errors.CygnusRuntimeError;\n-import com.telefonica.iot.cygnus.log.CygnusLogger;\n-import com.telefonica.iot.cygnus.utils.CommonUtils;\n-import org.apache.commons.dbcp.ConnectionFactory;\n-import org.apache.commons.dbcp.DriverManagerConnectionFactory;\n-import org.apache.commons.dbcp.PoolableConnectionFactory;\n-import org.apache.commons.dbcp.PoolingDataSource;\n-import org.apache.commons.pool.impl.GenericObjectPool;\n \n-import javax.sql.DataSource;\n-import javax.sql.rowset.CachedRowSet;\n-import java.sql.*;\n-import java.text.ParseException;\n-import java.time.Instant;\n-import java.util.Date;\n-import java.util.HashMap;\n-\n-public class SQLBackend {\n-\n-    private static final CygnusLogger LOGGER = new CygnusLogger(SQLBackend.class);\n-    private SQLBackend.SQLDriver driver;\n-    private final SQLCache cache;\n-    private final String sqlInstance;\n+public interface SQLBackend {\n \n     /**\n-     * Constructor.\n-     *\n-     * @param sqlHost\n-     * @param sqlPort\n-     * @param sqlUsername\n-     * @param sqlPassword\n+     * Creates a database, given its name, if not exists.\n+     * @param destination\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusRuntimeError\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusPersistenceError\n      */\n-    public SQLBackend(String sqlHost, String sqlPort, String sqlUsername, String sqlPassword, int maxPoolSize, String sqlInstance, String sqlDriverName, String defaultSQLDataBase) {\n-        driver = new SQLBackend.SQLDriver(sqlHost, sqlPort, sqlUsername, sqlPassword, maxPoolSize, sqlInstance, sqlDriverName, defaultSQLDataBase);\n-        cache = new SQLCache();\n-        this.sqlInstance = sqlInstance;\n-    } // SQLBackendImpl\n+    void createDestination(String destination) throws CygnusRuntimeError, CygnusPersistenceError;\n \n     /**\n-     * Releases resources\n+     * Creates a table, given its name, if not exists in the given database.\n+     * @param destination\n+     * @param tableName\n+     * @param fieldNames\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusRuntimeError\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusPersistenceError\n      */\n-    public void close(){\n-        if (driver != null) driver.close();\n-    } // close\n+    void createTable(String destination, String tableName, String fieldNames)\n+            throws CygnusRuntimeError, CygnusPersistenceError;\n \n     /**\n-     * Sets the SQL driver. It is protected since it is only used by the\n-     * tests.\n-     *\n-     * @param driver The SQL driver to be set.\n+     * Insert already processed context data into the given table within the given database.\n+     * @param destination\n+     * @param tableName\n+     * @param fieldNames\n+     * @param fieldValues\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusBadContextData\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusRuntimeError\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusPersistenceError\n      */\n-    public void setDriver(SQLBackend.SQLDriver driver) {\n-        this.driver = driver;\n-    } // setDriver\n-\n-    public SQLBackend.SQLDriver getDriver() {\n-        return driver;\n-    } // getDriver\n-\n-    public void createDestination(String destination) throws CygnusRuntimeError, CygnusPersistenceError {\n-        if (cache.isCachedDestination(destination)) {\n-            LOGGER.debug(\"'\" + destination + \"' is cached, thus it is not created\");\n-            return;\n-        } // if\n-\n-        Statement stmt = null;\n-\n-        // get a connection to an empty destination\n-        Connection con = driver.getConnection(\"\");\n-\n-        String query = \"\";\n-        if (sqlInstance.equals(\"mysql\")) {\n-            query = \"create database if not exists `\" + destination + \"`\";\n-        } else {\n-            query = \"CREATE SCHEMA IF NOT EXISTS \" + destination;\n-        }\n-\n-        try {\n-            stmt = con.createStatement();\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusRuntimeError(\"Database/scheme creation error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        try {\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            stmt.executeUpdate(query);\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusPersistenceError(\"Database/scheme creation error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        closeSQLObjects(con, stmt);\n-\n-        LOGGER.debug(\"Trying to add '\" + destination + \"' to the cache after database/scheme creation\");\n-        cache.addDestination(destination);\n-    } // createDestination\n-\n-    public void createTable(String destination, String tableName, String typedFieldNames)\n-            throws CygnusRuntimeError, CygnusPersistenceError {\n-        if (cache.isCachedTable(destination, tableName)) {\n-            LOGGER.debug(\"'\" + tableName + \"' is cached, thus it is not created\");\n-            return;\n-        } // if\n-\n-        Statement stmt = null;\n-\n-        // get a connection to the given destination\n-        Connection con = driver.getConnection(destination);\n-        String query = \"\";\n-        if (sqlInstance.equals(\"mysql\")) {\n-            query = \"create table if not exists `\" + tableName + \"`\" + typedFieldNames;\n-        } else {\n-            query = \"CREATE TABLE IF NOT EXISTS \" + destination + \".\" + tableName + \" \" + typedFieldNames;\n-        }\n-\n-        try {\n-            stmt = con.createStatement();\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusRuntimeError(\"Table creation error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        try {\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            stmt.executeUpdate(query);\n-        } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(\"Table creation error. Query \" + query, \"SQLTimeoutException\", e.getMessage());\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            persistError(destination, query, e);\n-            throw new CygnusPersistenceError(\"Table creation error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        closeSQLObjects(con, stmt);\n-\n-        LOGGER.debug(\"Trying to add '\" + tableName + \"' to the cache after table creation\");\n-        cache.addTable(destination, tableName);\n-    } // createTable\n-\n-    public void insertContextData(String destination, String tableName, String fieldNames, String fieldValues)\n-            throws CygnusBadContextData, CygnusRuntimeError, CygnusPersistenceError {\n-        Statement stmt = null;\n-\n-        // get a connection to the given destination\n-        Connection con = driver.getConnection(destination);\n-        String query = \"\";\n-        if (sqlInstance.equals(\"mysql\")) {\n-            query = \"insert into `\" + tableName + \"` \" + fieldNames + \" values \" + fieldValues;\n-        } else {\n-            query = \"INSERT INTO \" + destination + \".\" + tableName + \" \" + fieldNames + \" VALUES \" + fieldValues;\n-        }\n-\n-        try {\n-            stmt = con.createStatement();\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusRuntimeError(\"Data insertion error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        try {\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            stmt.executeUpdate(query);\n-        } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(\"Data insertion error. Query insert into `\" + tableName + \"` \" + fieldNames + \" values \" + fieldValues, \"SQLTimeoutException\", e.getMessage());\n-        } catch (SQLException e) {\n-            persistError(destination, query, e);\n-            throw new CygnusBadContextData(\"Data insertion error. Query: insert into `\" + tableName + \"` \" + fieldNames + \" values \" + fieldValues, \"SQLException\", e.getMessage());\n-        } finally {\n-            closeSQLObjects(con, stmt);\n-        } // try catch\n-\n-        LOGGER.debug(\"Trying to add '\" + destination + \"' and '\" + tableName + \"' to the cache after insertion\");\n-        cache.addDestination(destination);\n-        cache.addTable(destination, tableName);\n-    } // insertContextData\n-\n-    private CachedRowSet select(String destination, String tableName, String selection)\n-            throws CygnusRuntimeError, CygnusPersistenceError {\n-        Statement stmt = null;\n-\n-        // get a connection to the given destination\n-        Connection con = driver.getConnection(destination);\n-        String query = \"select \" + selection + \" from `\" + tableName + \"` order by recvTime\";\n-\n-        try {\n-            stmt = con.createStatement();\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusRuntimeError(\"Querying error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        try {\n-            // to-do: refactor after implementing\n-            // https://github.com/telefonicaid/fiware-cygnus/issues/1371\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            ResultSet rs = stmt.executeQuery(query);\n-            // A CachedRowSet is \"disconnected\" from the source, thus can be\n-            // used once the statement is closed\n-            @SuppressWarnings(\"restriction\")\n-            CachedRowSet crs = new CachedRowSetImpl();\n-\n-            crs.populate(rs); // FIXME: close Resultset Objects??\n-            closeSQLObjects(con, stmt);\n-            return crs;\n-        } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(\"Data select error. Query \" + query, \"SQLTimeoutException\", e.getMessage());\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            persistError(destination, query, e);\n-            throw new CygnusPersistenceError(\"Querying error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-    } // select\n-\n-    private void delete(String destination, String tableName, String filters)\n-            throws CygnusRuntimeError, CygnusPersistenceError {\n-        Statement stmt = null;\n-\n-        // get a connection to the given destination\n-        Connection con = driver.getConnection(destination);\n-        String query = \"delete from `\" + tableName + \"` where \" + filters;\n-\n-        try {\n-            stmt = con.createStatement();\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusRuntimeError(\"Deleting error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        try {\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            stmt.executeUpdate(query);\n-        } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(\"Data delete error. Query \" + query, \"SQLTimeoutException\", e.getMessage());\n-        }catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            persistError(destination, query, e);\n-            throw new CygnusPersistenceError(\"Deleting error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        closeSQLObjects(con, stmt);\n-    } // delete\n-\n-    public void capRecords(String destination, String tableName, long maxRecords)\n-            throws CygnusRuntimeError, CygnusPersistenceError {\n-        // Get the records within the table\n-        CachedRowSet records = select(destination, tableName, \"*\");\n-\n-        // Get the number of records\n-        int numRecords = 0;\n-\n-        try {\n-            if (records.last()) {\n-                numRecords = records.getRow();\n-                records.beforeFirst();\n-            } // if\n-        } catch (SQLException e) {\n-            throw new CygnusRuntimeError(\"Data capping error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        // Get the reception times (they work as IDs) for future deletion\n-        // to-do: refactor after implementing\n-        // https://github.com/telefonicaid/fiware-cygnus/issues/1371\n-        String filters = \"\";\n-\n-        try {\n-            if (numRecords > maxRecords) {\n-                for (int i = 0; i < (numRecords - maxRecords); i++) {\n-                    records.next();\n-                    String recvTime = records.getString(\"recvTime\");\n-\n-                    if (filters.isEmpty()) {\n-                        filters += \"recvTime='\" + recvTime + \"'\";\n-                    } else {\n-                        filters += \" or recvTime='\" + recvTime + \"'\";\n-                    } // if else\n-                } // for\n-            } // if\n-\n-            records.close();\n-        } catch (SQLException e) {\n-            throw new CygnusRuntimeError(\"Data capping error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        if (filters.isEmpty()) {\n-            LOGGER.debug(\"No records to be deleted\");\n-        } else {\n-            LOGGER.debug(\"Records must be deleted (destination=\" + destination + \",tableName=\" + tableName + \", filters=\"\n-                    + filters + \")\");\n-            delete(destination, tableName, filters);\n-        } // if else\n-    } // capRecords\n-\n-    public void expirateRecordsCache(long expirationTime) throws CygnusRuntimeError, CygnusPersistenceError {\n-        // Iterate on the cached resource IDs\n-        cache.startDestinationIterator();\n-\n-        while (cache.hasNextDestination()) {\n-            String destination = cache.nextDestination();\n-            cache.startTableIterator(destination);\n-\n-            while (cache.hasNextTable(destination)) {\n-                String tableName = cache.nextTable(destination);\n-\n-                // Get the records within the table\n-                CachedRowSet records = select(destination, tableName, \"*\");\n-\n-                // Get the number of records\n-                int numRecords = 0;\n-\n-                try {\n-                    if (records.last()) {\n-                        numRecords = records.getRow();\n-                        records.beforeFirst();\n-                    } // if\n-                } catch (SQLException e) {\n-                    try {\n-                        records.close();\n-                    } catch (SQLException e1) {\n-                        LOGGER.debug(\"Can't close CachedRowSet.\");\n-                    }\n-                    throw new CygnusRuntimeError(\"Data expiration error\", \"SQLException\", e.getMessage());\n-                } // try catch\n-\n-                // Get the reception times (they work as IDs) for future\n-                // deletion\n-                // to-do: refactor after implementing\n-                // https://github.com/telefonicaid/fiware-cygnus/issues/1371\n-                String filters = \"\";\n-\n-                try {\n-                    for (int i = 0; i < numRecords; i++) {\n-                        records.next();\n-                        String recvTime = records.getString(\"recvTime\");\n-                        long recordTime = CommonUtils.getMilliseconds(recvTime);\n-                        long currentTime = new java.util.Date().getTime();\n-\n-                        if (recordTime < (currentTime - (expirationTime * 1000))) {\n-                            if (filters.isEmpty()) {\n-                                filters += \"recvTime='\" + recvTime + \"'\";\n-                            } else {\n-                                filters += \" or recvTime='\" + recvTime + \"'\";\n-                            } // if else\n-                        } else {\n-                            break;\n-                        } // if else\n-                    } // for\n-                } catch (SQLException e) {\n-                    throw new CygnusRuntimeError(\"Data expiration error\", \"SQLException\", e.getMessage());\n-                } catch (ParseException e) {\n-                    throw new CygnusRuntimeError(\"Data expiration error\", \"ParseException\", e.getMessage());\n-                } // try catch\n-\n-                if (filters.isEmpty()) {\n-                    LOGGER.debug(\"No records to be deleted\");\n-                } else {\n-                    LOGGER.debug(\"Records must be deleted (destination=\" + destination + \",tableName=\" + tableName + \", filters=\"\n-                            + filters + \")\");\n-                    delete(destination, tableName, filters);\n-                } // if else\n-            } // while\n-        } // while\n-    } // expirateRecordsCache\n+    void insertContextData(String destination, String tableName, String fieldNames, String fieldValues)\n+            throws CygnusBadContextData, CygnusRuntimeError, CygnusPersistenceError;\n \n     /**\n-     * Close all the SQL objects previously opened by doCreateTable and\n-     * doQuery.\n-     *\n-     * @param con\n-     * @param stmt\n-     * @return True if the SQL objects have been closed, false otherwise.\n+     * Caps records from the given table within the given database according to the given maximum number.\n+     * @param destination\n+     * @param tableName\n+     * @param maxRecords\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusRuntimeError\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusPersistenceError\n      */\n-    private void closeSQLObjects(Connection con, Statement stmt) throws CygnusRuntimeError {\n-        LOGGER.debug(\"Closing SQL connection objects.\");\n-        if (stmt != null) {\n-            try {\n-                stmt.close();\n-            } catch (SQLException e) {\n-                throw new CygnusRuntimeError(\"Objects closing error\", \"SQLException\", e.getMessage());\n-            } // try catch\n-        } // if\n-\n-        if (con != null) {\n-            try {\n-                con.close();\n-            } catch (SQLException e) {\n-                throw new CygnusRuntimeError(\"Objects closing error\", \"SQLException\", e.getMessage());\n-            } // try catch\n-        } // if\n-\n-    } // closeSQLObjects\n-\n-\n-    public void createErrorTable(String destination)\n-            throws CygnusRuntimeError, CygnusPersistenceError {\n-        // the defaul table for error log will be called the same as the destination name\n-        String errorTable = destination + \"_error_log\";\n-        if (cache.isCachedTable(destination, errorTable)) {\n-            LOGGER.debug(\"'\" + errorTable + \"' is cached, thus it is not created\");\n-            return;\n-        } // if\n-        String typedFieldNames = \"(\" +\n-                \"timestamp TIMESTAMP\" +\n-                \", error text\" +\n-                \", query text)\";\n-\n-        Statement stmt = null;\n-        // get a connection to the given destination\n-        Connection con = driver.getConnection(destination);\n-\n-        String query = \"\";\n-        if (sqlInstance.equals(\"mysql\")) {\n-            query = \"create table if not exists `\" + errorTable + \"`\" + typedFieldNames;\n-        } else {\n-            query = \"create table if not exists \" + destination + \".\" + errorTable + \" \" + typedFieldNames;\n-        }\n-\n-        try {\n-            stmt = con.createStatement();\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusRuntimeError(\"Table creation error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        try {\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            stmt.executeUpdate(query);\n-        } catch (SQLException e) {\n-            closeSQLObjects(con, stmt);\n-            throw new CygnusPersistenceError(\"Table creation error\", \"SQLException\", e.getMessage());\n-        } // try catch\n-\n-        closeSQLObjects(con, stmt);\n-\n-        LOGGER.debug(\"Trying to add '\" + errorTable + \"' to the cache after table creation\");\n-        cache.addTable(destination, errorTable);\n-    } // createErrorTable\n-\n-    public void insertErrorLog(String destination, String errorQuery, Exception exception)\n-            throws CygnusBadContextData, CygnusRuntimeError, CygnusPersistenceError, SQLException {\n-        Statement stmt = null;\n-        java.util.Date date = new Date();\n-        Timestamp timestamp = new Timestamp(date.getTime());\n-        String errorTable = destination + \"_error_log\";\n-        String fieldNames  = \"(\" +\n-                \"timestamp\" +\n-                \", error\" +\n-                \", query)\";\n-\n-        // get a connection to the given destination\n-        Connection con = driver.getConnection(destination);\n-\n-        String query = \"\";\n-        if (sqlInstance.equals(\"mysql\")) {\n-            query = \"insert into `\" + errorTable + \"` \" + fieldNames + \" values (?, ?, ?)\";\n-        } else {\n-            query = \"INSERT INTO \" + destination + \".\" + errorTable + \" \" + fieldNames + \" VALUES (?, ?, ?)\";\n-        }\n-\n-        PreparedStatement preparedStatement = con.prepareStatement(query);\n-        try {\n-            preparedStatement.setObject(1, java.sql.Timestamp.from(Instant.now()));\n-            preparedStatement.setString(2, exception.getMessage());\n-            preparedStatement.setString(3, errorQuery);\n-            LOGGER.debug(\"Executing SQL query '\" + query + \"'\");\n-            preparedStatement.executeUpdate();\n-        } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(\"Data insertion error. Query: `\" + preparedStatement, \"SQLTimeoutException\", e.getMessage());\n-        } catch (SQLException e) {\n-            throw new CygnusBadContextData(\"Data insertion error. Query: `\" + preparedStatement, \"SQLException\", e.getMessage());\n-        } finally {\n-            closeSQLObjects(con, preparedStatement);\n-        } // try catch\n-\n-        LOGGER.debug(\"Trying to add '\" + destination + \"' and '\" + errorTable + \"' to the cache after insertion\");\n-        cache.addDestination(destination);\n-        cache.addTable(destination, errorTable);\n-    } // insertErrorLog\n+    void capRecords(String destination, String tableName, long maxRecords) throws CygnusRuntimeError, CygnusPersistenceError;\n \n-    public void persistError(String destination, String query, Exception exception) throws CygnusPersistenceError, CygnusRuntimeError {\n-        try {\n-            createErrorTable(destination);\n-            insertErrorLog(destination, query, exception);\n-            return;\n-        } catch (CygnusBadContextData cygnusBadContextData) {\n-            LOGGER.debug(\"failed to persist error on database/scheme \" + destination + \"_error_log\" + cygnusBadContextData);\n-            createErrorTable(destination);\n-        } catch (Exception e) {\n-            LOGGER.debug(\"failed to persist error on database/scheme \" + destination + \"_error_log\" + e);\n-        }\n-    }\n-\n-    public class SQLDriver {\n-\n-        private final HashMap<String, DataSource> datasources;\n-        private final HashMap<String, GenericObjectPool> pools;\n-        private final String sqlHost;\n-        private final String sqlPort;\n-        private final String sqlUsername;\n-        private final String sqlPassword;\n-        private final String sqlInstance;\n-        private final String sqlDriverName;\n-        private final String defaultSQLDataBase;\n-        private final int maxPoolSize;\n-\n-        /**\n-         * Constructor.\n-         *\n-         * @param sqlHost\n-         * @param sqlPort\n-         * @param sqlUsername\n-         * @param sqlPassword\n-         * @param maxPoolSize\n-         * @param sqlInstance\n-         * @param sqlDriverName\n-         */\n-        public SQLDriver(String sqlHost, String sqlPort, String sqlUsername, String sqlPassword, int maxPoolSize, String sqlInstance, String sqlDriverName, String defaultSQLDataBase) {\n-            datasources = new HashMap<>();\n-            pools = new HashMap<>();\n-            this.sqlHost = sqlHost;\n-            this.sqlPort = sqlPort;\n-            this.sqlUsername = sqlUsername;\n-            this.sqlPassword = sqlPassword;\n-            this.maxPoolSize = maxPoolSize;\n-            this.sqlInstance = sqlInstance;\n-            this.sqlDriverName = sqlDriverName;\n-            this.defaultSQLDataBase = defaultSQLDataBase;\n-        } // SQLDriver\n-\n-        /**\n-         * Gets a connection to the SQL server.\n-         *\n-         * @param destination\n-         * @return\n-         * @throws CygnusRuntimeError\n-         * @throws CygnusPersistenceError\n-         */\n-        public Connection getConnection(String destination) throws CygnusRuntimeError, CygnusPersistenceError {\n-            try {\n-                // FIXME: the number of cached connections should be limited to\n-                // a certain number; with such a limit\n-                // number, if a new connection is needed, the oldest one is closed\n-                Connection connection = null;\n-\n-                if (datasources.containsKey(destination)) {\n-                    connection = datasources.get(destination).getConnection();\n-                    LOGGER.debug(\"Recovered destination connection from cache (\" + destination + \")\");\n-                }\n-\n-                if (connection == null || !connection.isValid(0)) {\n-                    if (connection != null) {\n-                        LOGGER.debug(\"Closing invalid sql connection for destination \" + destination);\n-                        try {\n-                            connection.close();\n-                        } catch (SQLException e) {\n-                            LOGGER.warn(\"error closing invalid connection: \" + e.getMessage());\n-                        }\n-                    } // if\n-\n-                    DataSource datasource = createConnectionPool(destination);\n-                    datasources.put(destination, datasource);\n-                    connection = datasource.getConnection();\n-                } // if\n-\n-                // Check Pool cache and log status\n-                if (pools.containsKey(destination)){\n-                    GenericObjectPool pool = pools.get(destination);\n-                    LOGGER.debug(\"Pool status (\" + destination + \") Max.: \" + pool.getMaxActive() + \"; Active: \"\n-                            + pool.getNumActive() + \"; Idle: \" + pool.getNumIdle());\n-                }else{\n-                    LOGGER.error(\"Can't find dabase in pool cache (\" + destination + \")\");\n-                }\n-\n-                return connection;\n-            } catch (ClassNotFoundException e) {\n-                throw new CygnusRuntimeError(\"Connection error\", \"ClassNotFoundException\", e.getMessage());\n-            } catch (SQLException e) {\n-                throw new CygnusPersistenceError(\"Connection error\", \"SQLException\", e.getMessage());\n-            } catch (Exception e) {\n-                throw new CygnusRuntimeError(\"Connection error creating new Pool\", \"Exception\", e.getMessage());\n-            } // try catch\n-        } // getConnection\n-\n-        /**\n-         * Gets if a connection is created for the given destination. It is\n-         * protected since it is only used in the tests.\n-         *\n-         * @param destination\n-         * @return True if the connection exists, false other wise\n-         */\n-        protected boolean isConnectionCreated(String destination) {\n-            return datasources.containsKey(destination);\n-        } // isConnectionCreated\n-\n-        /**\n-         * Returns the actual number of active connections\n-         * @return\n-         */\n-        protected int activePoolConnections() {\n-            int connectionCount = 0;\n-            for ( String destination : pools.keySet()){\n-                GenericObjectPool pool = pools.get(destination);\n-                connectionCount += pool.getNumActive();\n-                LOGGER.debug(\"Pool status (\" + destination + \") Max.: \" + pool.getMaxActive() + \"; Active: \"\n-                        + pool.getNumActive() + \"; Idle: \" + pool.getNumIdle());\n-            }\n-            LOGGER.debug(\"Total pool's active connections: \" + connectionCount);\n-            return connectionCount;\n-        } // activePoolConnections\n-\n-        /**\n-         * Returns the Maximum number of connections\n-         * @return\n-         */\n-        protected int maxPoolConnections() {\n-            int connectionCount = 0;\n-            for ( String destination : pools.keySet()){\n-                GenericObjectPool pool = pools.get(destination);\n-                connectionCount += pool.getMaxActive();\n-                LOGGER.debug(\"Pool status (\" + destination + \") Max.: \" + pool.getMaxActive() + \"; Active: \"\n-                        + pool.getNumActive() + \"; Idle: \" + pool.getNumIdle());\n-            }\n-            LOGGER.debug(\"Max pool connections: \" + connectionCount);\n-            return connectionCount;\n-        } // maxPoolConnections\n-\n-        /**\n-         * Gets the number of connections created.\n-         *\n-         * @return The number of connections created\n-         */\n-        protected int numConnectionsCreated() {\n-            return activePoolConnections();\n-        } // numConnectionsCreated\n-\n-        /**\n-         * Create a connection pool for destination.\n-         *\n-         * @param destination\n-         * @return PoolingDataSource\n-         * @throws Exception\n-         */\n-        @SuppressWarnings(\"unused\")\n-        private DataSource createConnectionPool(String destination) throws Exception {\n-            GenericObjectPool gPool = null;\n-            if (pools.containsKey(destination)){\n-                LOGGER.debug(\"Pool recovered from Cache (\" + destination + \")\");\n-                gPool = pools.get(destination);\n-            }else{\n-                String jdbcUrl = \"\";\n-                if (sqlInstance.equals(\"mysql\")) {\n-                    jdbcUrl = \"jdbc:\" + sqlInstance + \"://\" + sqlHost + \":\" + sqlPort + \"/\" + destination;\n-                } else {\n-                    jdbcUrl = \"jdbc:\" + sqlInstance + \"://\" + sqlHost + \":\" + sqlPort + \"/\" + defaultSQLDataBase;\n-                }\n-                Class.forName(sqlDriverName);\n-\n-                // Creates an Instance of GenericObjectPool That Holds Our Pool of Connections Object!\n-                gPool = new GenericObjectPool();\n-                gPool.setMaxActive(this.maxPoolSize);\n-                pools.put(destination, gPool);\n-\n-                // Creates a ConnectionFactory Object Which Will Be Used by the Pool to Create the Connection Object!\n-                LOGGER.debug(\"Creating connection pool jdbc:\" + sqlInstance +\"://\" + sqlHost + \":\" + sqlPort + \"/\" + destination\n-                        + \"?user=\" + sqlUsername + \"&password=XXXXXXXXXX\");\n-                ConnectionFactory cf = new DriverManagerConnectionFactory(jdbcUrl, sqlUsername, sqlPassword);\n-\n-                // Creates a PoolableConnectionFactory That Will Wraps the Connection Object Created by\n-                // the ConnectionFactory to Add Object Pooling Functionality!\n-                PoolableConnectionFactory pcf = new PoolableConnectionFactory(cf, gPool, null, null, false, true);\n-            } //else\n-            return new PoolingDataSource(gPool);\n-        } // createConnectionPool\n-\n-        /**\n-         * Closes the Driver releasing resources\n-         * @return\n-         */\n-        public void close() {\n-            int poolCount = 0;\n-            int poolsSize = pools.size();\n-\n-            for ( String destination : pools.keySet()){\n-                GenericObjectPool pool = pools.get(destination);\n-                try {\n-                    pool.close();\n-                    pools.remove(destination);\n-                    poolCount ++;\n-                    LOGGER.debug(\"Pool closed: (\" + destination + \")\");\n-                } catch (Exception e) {\n-                    LOGGER.error(\"Error closing SQL pool \" + destination +\": \" + e.getMessage());\n-                }\n-            }\n-            LOGGER.debug(\"Number of Pools closed: \" + poolCount + \"/\" + poolsSize);\n-        } // close\n+    /**\n+     * Expirates records within all the cached tables based on the expiration time.\n+     * @param expirationTime\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusRuntimeError\n+     * @throws com.telefonica.iot.cygnus.errors.CygnusPersistenceError\n+     */\n+    void expirateRecordsCache(long expirationTime) throws CygnusRuntimeError, CygnusPersistenceError;\n \n-        /**\n-         * Last resort releasing resources\n-         */\n-        public void Finally(){\n-            this.close();\n-        }\n \n-    } // SQLDriver\n }\n"}}, {"oid": "63fc1b6f12965957ccaa23266a3e282beba68613", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/63fc1b6f12965957ccaa23266a3e282beba68613", "message": "update mkdocs", "committedDate": "2020-03-23T14:03:09Z", "type": "forcePushed"}, {"oid": "f880887ecdb4c3d54ae9b1bcc0e3fd2037202cbb", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/f880887ecdb4c3d54ae9b1bcc0e3fd2037202cbb", "message": "update mkdocs", "committedDate": "2020-03-23T14:05:23Z", "type": "commit"}, {"oid": "f880887ecdb4c3d54ae9b1bcc0e3fd2037202cbb", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/f880887ecdb4c3d54ae9b1bcc0e3fd2037202cbb", "message": "update mkdocs", "committedDate": "2020-03-23T14:05:23Z", "type": "forcePushed"}, {"oid": "adb4518e1f1d47ec28b72bd74b6374771d821b7e", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/adb4518e1f1d47ec28b72bd74b6374771d821b7e", "message": "add SQLBackend interface", "committedDate": "2020-03-23T14:16:45Z", "type": "commit"}, {"oid": "73fcd169075d36e70b889d53fbf82c37dbb1bcba", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/73fcd169075d36e70b889d53fbf82c37dbb1bcba", "message": "add sql instance name to logs", "committedDate": "2020-03-24T10:56:26Z", "type": "commit"}, {"oid": "060383356b7fb0ef07be9e868c0bae69d3a883f9", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/060383356b7fb0ef07be9e868c0bae69d3a883f9", "message": "Merge branch 'master' into task/generic_SQL_backend", "committedDate": "2020-03-24T11:16:41Z", "type": "commit"}]}