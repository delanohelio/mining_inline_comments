{"pr_number": 1818, "pr_title": "Task/generic aggregation", "pr_createdAt": "2020-02-18T11:57:58Z", "pr_url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818", "timeline": [{"oid": "c5e39293c266f16cb71c8a8f6bede65f58f04bd5", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/c5e39293c266f16cb71c8a8f6bede65f58f04bd5", "message": "edit MySQL tests", "committedDate": "2020-01-28T15:20:29Z", "type": "commit"}, {"oid": "93e6441580fa5af477eec83fa0ee4dbd9b76d2ea", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/93e6441580fa5af477eec83fa0ee4dbd9b76d2ea", "message": "add generic aggregation clases", "committedDate": "2020-01-28T15:21:00Z", "type": "commit"}, {"oid": "189e72c441e466cbb7007c894b730edcdeb62d67", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/189e72c441e466cbb7007c894b730edcdeb62d67", "message": "add sql methods", "committedDate": "2020-01-28T15:24:51Z", "type": "commit"}, {"oid": "163ed293b92d62c229d81c3b768bfbcf43f1bb65", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/163ed293b92d62c229d81c3b768bfbcf43f1bb65", "message": "add generic aggregation to mysql sink", "committedDate": "2020-01-28T15:25:37Z", "type": "commit"}, {"oid": "8ce2bb7f88323a56c4e36e6bfe733d9d2dff450d", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/8ce2bb7f88323a56c4e36e6bfe733d9d2dff450d", "message": "add mongo tests", "committedDate": "2020-01-29T11:38:49Z", "type": "commit"}, {"oid": "914a74c917b8dec5f4842676510417bd9acf82c1", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/914a74c917b8dec5f4842676510417bd9acf82c1", "message": "add Mongo changes to use generic aggregation", "committedDate": "2020-01-29T11:41:03Z", "type": "commit"}, {"oid": "43278a76707e973296e842ba35c05bec052fe82e", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/43278a76707e973296e842ba35c05bec052fe82e", "message": "add generic aggregation to mongo sink and metadata persistance flag", "committedDate": "2020-01-30T11:16:19Z", "type": "commit"}, {"oid": "8d0570b6519cfb62a1e34b1a093930f4034bfff8", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/8d0570b6519cfb62a1e34b1a093930f4034bfff8", "message": "edit tests", "committedDate": "2020-01-30T12:12:59Z", "type": "commit"}, {"oid": "b9cad26dc4703451b407c6c1594095f15b22ba4e", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/b9cad26dc4703451b407c6c1594095f15b22ba4e", "message": "Merge branch 'master' into task/generic_aggregation", "committedDate": "2020-01-30T14:04:58Z", "type": "commit"}, {"oid": "95d07a2ec942cdb5bb7e03db319c1f49fa5baa15", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/95d07a2ec942cdb5bb7e03db319c1f49fa5baa15", "message": "update gitignore", "committedDate": "2020-01-30T14:19:29Z", "type": "commit"}, {"oid": "79b7c5b49909971374cac2b969d926a2217734be", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/79b7c5b49909971374cac2b969d926a2217734be", "message": "update postgres and postgis sinks", "committedDate": "2020-01-30T15:30:23Z", "type": "commit"}, {"oid": "e145f7771dcc2a9c58aa97cd2dc3fb7fa7bc7d52", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/e145f7771dcc2a9c58aa97cd2dc3fb7fa7bc7d52", "message": "add generic aggregation to HDFS objects", "committedDate": "2020-01-31T14:57:34Z", "type": "commit"}, {"oid": "b7437f5134186e3f4a943df85e1f56fbe9ea2c0b", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/b7437f5134186e3f4a943df85e1f56fbe9ea2c0b", "message": "add attrType and timestamp to column aggregation", "committedDate": "2020-02-04T10:58:51Z", "type": "commit"}, {"oid": "addcebc534c80897fbe4a858f6bb0e6782c82777", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/addcebc534c80897fbe4a858f6bb0e6782c82777", "message": "add csv processing for hdfs sink", "committedDate": "2020-02-04T16:47:00Z", "type": "commit"}, {"oid": "24beefb6f7703a2c420dce91b948f51dc773592c", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/24beefb6f7703a2c420dce91b948f51dc773592c", "message": "add metadata persitance for row aggregation", "committedDate": "2020-02-05T09:56:18Z", "type": "commit"}, {"oid": "a24a658c25e12be1edf842cf78efe569f9fbb283", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/a24a658c25e12be1edf842cf78efe569f9fbb283", "message": "add generic aggregation to hdfs sink", "committedDate": "2020-02-07T13:00:26Z", "type": "commit"}, {"oid": "609cbf19fc4c0398c631358f07463a179869af54", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/609cbf19fc4c0398c631358f07463a179869af54", "message": "edit hdfs test to work with generic aggregation", "committedDate": "2020-02-14T12:04:04Z", "type": "commit"}, {"oid": "979c1d022e594538d25856db27cd83fde93616de", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/979c1d022e594538d25856db27cd83fde93616de", "message": "add UTC format to timestamp on generic aggregation and remove empty metadata quotes", "committedDate": "2020-02-14T12:06:12Z", "type": "commit"}, {"oid": "a3abc2783ad0e5e40076e3b27efb8071e6c88838", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/a3abc2783ad0e5e40076e3b27efb8071e6c88838", "message": "add tests for ckan agrregation", "committedDate": "2020-02-17T09:12:53Z", "type": "commit"}, {"oid": "d50030e8d776de26a157663fd170ad4a610a4b06", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/d50030e8d776de26a157663fd170ad4a610a4b06", "message": "add generic aggregation to ckan sink", "committedDate": "2020-02-17T13:53:20Z", "type": "commit"}, {"oid": "12ec533e814f4364f3bd6d73c454826ecb174223", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/12ec533e814f4364f3bd6d73c454826ecb174223", "message": "edit tests to use generic aggregation", "committedDate": "2020-02-17T13:53:41Z", "type": "commit"}, {"oid": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab", "message": "Merge branch 'master' into task/generic_aggregation", "committedDate": "2020-02-17T14:04:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTQ1Mw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381109453", "bodyText": "Maybe it is to be done in a next commit, but the style has somehow broken... Functions should have a JavaDoc description and the blocks an ending // comment.", "author": "fgalan", "createdAt": "2020-02-19T07:08:19Z", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "diffHunk": "@@ -73,225 +49,282 @@\n     private String attribute;\n     private String dbName;\n     private String tableName;\n+    private String collectionName;\n+    private String orgName;\n+    private String pkgName;\n+    private String resName;\n+    private String hdfsFolder;\n+    private String hdfsFile;\n+    private String hiveFields;\n+    private String csvString;\n+    private boolean attrNativeTypes;\n+    private boolean enableGrouping;\n+    private boolean enableEncoding;\n+    private boolean enableNameMappings;\n+    private boolean enableGeoParse;\n+    private boolean attrMetadataStore;\n+    private boolean enableUTCRecvTime;\n \n-    /**\n-     * Instantiates a new Ngsi generic aggregator.\n-     *\n-     * @param enableGrouping     the enable grouping\n-     * @param enableNameMappings the enable name mappings\n-     * @param enableEncoding     the enable encoding\n-     * @param enableGeoParse     the enable geo parse\n-     * @param attrNativeTypes    the attr native types\n-     */\n-    NGSIGenericAggregator(boolean enableGrouping, boolean enableNameMappings, boolean enableEncoding, boolean enableGeoParse, boolean attrNativeTypes) {\n-        this.enableEncoding = enableEncoding;\n-        this.enableNameMappings = enableNameMappings;\n-        this.enableEncoding = enableEncoding;\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n+        if (aggregation == null) {\n+            return new LinkedHashMap<>();\n+        } else {\n+            return aggregation;\n+        }\n+    }\n+\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregationToPersist() {\n+        if (aggregation == null) {\n+            return new LinkedHashMap<>();\n+        } else {\n+            return NGSIUtils.linkedHashMapWithoutDefaultFields(aggregation, attrMetadataStore);\n+        }\n+    }\n+\n+    public void setAggregation(LinkedHashMap<String, ArrayList<JsonElement>> aggregation) {\n+        this.aggregation = aggregation;\n+    }\n+\n+    public String getCollectionName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return collectionName.toLowerCase();\n+        } else {\n+            return collectionName;\n+        }\n+    }\n+\n+    public Map<String, String> getMdAggregations() {\n+        if (mdAggregations == null) {\n+            return new HashMap<>();\n+        } else {\n+            return mdAggregations;\n+        }\n+    }\n+\n+    public String getCsvString() {\n+        return csvString;\n+    }\n+\n+    public void setCsvString(String csvString) {\n+        this.csvString = csvString;\n+    }\n+\n+    public String getHdfsFolder(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return hdfsFolder.toLowerCase();\n+        } else {\n+            return hdfsFolder;\n+        }\n+    }\n+\n+    public void setHdfsFolder(String hdfsFolder) {\n+        this.hdfsFolder = hdfsFolder;\n+    }\n+\n+    public String getHdfsFile(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return hdfsFile.toLowerCase();\n+        } else {\n+            return hdfsFile;\n+        }\n+    }\n+\n+    public boolean isEnableUTCRecvTime() {\n+        return enableUTCRecvTime;\n+    }\n+\n+    public void setEnableUTCRecvTime(boolean enableUTCRecvTime) {\n+        this.enableUTCRecvTime = enableUTCRecvTime;\n+    }\n+\n+    public void setHdfsFile(String hdfsFile) {\n+        this.hdfsFile = hdfsFile;\n+    }\n+\n+    public void setMdAggregations(Map<String, String> mdAggregations) {\n+        this.mdAggregations = mdAggregations;\n+    }\n+\n+    public void setAttrMetadataStore(boolean attrMetadataStore) {\n+        this.attrMetadataStore = attrMetadataStore;\n+    }\n+\n+    public boolean isAttrMetadataStore() {\n+        return attrMetadataStore;\n+    }\n+\n+    public boolean isEnableGeoParse() {\n+        return enableGeoParse;\n+    }\n+\n+    public void setEnableGeoParse(boolean enableGeoParse) {\n         this.enableGeoParse = enableGeoParse;\n-        this.attrNativeTypes = attrNativeTypes;\n-        aggregation = new LinkedHashMap<>();\n-    } // MySQLAggregator\n+    }\n \n-    /**\n-     * Gets aggregation.\n-     *\n-     * @return the aggregation\n-     */\n-    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n-        return aggregation;\n-    } //getAggregation\n+    public void setCollectionName(String collectionName) {\n+        this.collectionName = collectionName;\n+    }\n \n-    /**\n-     * Gets service path for data.\n-     *\n-     * @return the service path for data\n-     */\n-    protected String getServicePathForData() {\n+    public String getService() {\n+        return service;\n+    }\n+\n+    public String getHiveFields() {\n+        return hiveFields;\n+    }\n+\n+    public void setHiveFields(String hiveFields) {\n+        this.hiveFields = hiveFields;\n+    }\n+\n+    public void setService(String service) {\n+        this.service = service;\n+    }\n+\n+    public String getServicePathForData() {\n         return servicePathForData;\n-    } //getServicePathForData\n+    }\n+\n+    public void setServicePathForData(String servicePathForData) {\n+        this.servicePathForData = servicePathForData;\n+    }\n+\n+    public String getServicePathForNaming() {\n+        return servicePathForNaming;\n+    }\n+\n+    public void setServicePathForNaming(String servicePathForNaming) {\n+        this.servicePathForNaming = servicePathForNaming;\n+    }\n+\n+    public String getEntityForNaming() {\n+        return entityForNaming;\n+    }\n+\n+    public void setEntityForNaming(String entityForNaming) {\n+        this.entityForNaming = entityForNaming;\n+    }\n+\n+    public String getEntityType() {\n+        return entityType;\n+    }\n+\n+    public void setEntityType(String entityType) {\n+        this.entityType = entityType;\n+    }\n+\n+    public String getAttribute() {\n+        return attribute;\n+    }\n+\n+    public void setAttribute(String attribute) {\n+        this.attribute = attribute;\n+    }\n \n-    /**\n-     * Gets db name.\n-     *\n-     * @param enableLowercase the enable lowercase\n-     * @return the db name\n-     */\n     public String getDbName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return dbName.toLowerCase();\n         } else {\n             return dbName;\n-        } // if else\n-    } // getDbName\n+        }\n+    }\n+\n+    public void setDbName(String dbName) {\n+        this.dbName = dbName;\n+    }\n \n-    /**\n-     * Gets table name.\n-     *\n-     * @param enableLowercase the enable lowercase\n-     * @return the table name\n-     */\n     public String getTableName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return tableName.toLowerCase();\n         } else {\n             return tableName;\n-        } // if else\n-    } // getTableName\n-\n-\n-    /**\n-     * Sets db name.\n-     *\n-     * @param dbName the db name\n-     */\n-    public void setDbName(String dbName) {\n-        this.dbName = dbName;\n+        }\n     }\n \n-    /**\n-     * Sets table name.\n-     *\n-     * @param tableName the table name\n-     */\n     public void setTableName(String tableName) {\n         this.tableName = tableName;\n     }\n \n-    /**\n-     * Gets string value for json element.\n-     *\n-     * @param value the value\n-     * @return the string value for json element\n-     */\n-    public String getStringValueForJsonElement(JsonElement value) {\n-        String stringValue;\n-        if (attrNativeTypes) {\n-            if (value == null || value.isJsonNull()) {\n-                stringValue = \"NULL\";\n-            } else if (value.isJsonPrimitive()) {\n-                if (value.getAsJsonPrimitive().isBoolean()) {\n-                    stringValue = value.getAsString().toUpperCase();\n-                } else if (value.getAsJsonPrimitive().isNumber()) {\n-                    stringValue = value.getAsString();\n-                }else {\n-                    if (value.toString().contains(\"ST_GeomFromGeoJSON\") || value.toString().contains(\"ST_SetSRID\")) {\n-                        stringValue = value.getAsString().replace(\"\\\\\", \"\");\n-                    } else {\n-                        stringValue = \"'\" + value.getAsString() + \"'\";\n-                    }\n-                }\n-            } else {\n-                stringValue = \"'\" + value.toString() + \"'\";\n-            }\n+    public String getOrgName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return orgName.toLowerCase();\n         } else {\n-            if (value.isJsonPrimitive()) {\n-                stringValue = \"'\" + value.getAsString() + \"'\";\n-            } else {\n-                stringValue = \"'\" + value.toString() + \"'\";\n-            }\n+            return orgName;\n         }\n-        LOGGER.debug(\"[\" + getName() + \"] aggregation entry = \"  + stringValue);\n-        return stringValue;\n     }\n \n-    /**\n-     * Gets values for insert.\n-     *\n-     * @return the values for insert\n-     */\n-    public String getValuesForInsert() {\n-        String valuesForInsert = \"\";\n-        int numEvents = aggregation.get(NGSIConstants.FIWARE_SERVICE_PATH).size();\n-\n-        for (int i = 0; i < numEvents; i++) {\n-            if (i == 0) {\n-                valuesForInsert += \"(\";\n-            } else {\n-                valuesForInsert += \",(\";\n-            } // if else\n-            boolean first = true;\n-            Iterator<String> it = aggregation.keySet().iterator();\n-            while (it.hasNext()) {\n-                String entry = (String) it.next();\n-                ArrayList<JsonElement> values = (ArrayList<JsonElement>) aggregation.get(entry);\n-                JsonElement value = values.get(i);\n-                String stringValue = getStringValueForJsonElement(value);\n-                if (first) {\n-                    valuesForInsert += stringValue;\n-                    first = false;\n-                } else {\n-                    valuesForInsert += \",\" + stringValue;\n-                } // if else\n-            } // while\n-            valuesForInsert += \")\";\n-        } // for\n-        return valuesForInsert;\n-    } // getValuesForInsert\n-\n-    private String getName() {\n-        return \"NGSIUtils.GenericAggregator\";\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n     }\n \n-    /**\n-     * Gets fields for create.\n-     *\n-     * @return the fields for create\n-     */\n-    public String getFieldsForCreate() {\n-        String fieldsForCreate = \"(\";\n-        boolean first = true;\n-        Iterator<String> it = aggregation.keySet().iterator();\n-\n-        while (it.hasNext()) {\n-            if (first) {\n-                fieldsForCreate += (String) it.next() + \" text\";\n-                first = false;\n-            } else {\n-                fieldsForCreate += \",\" + (String) it.next() + \" text\";\n-            } // if else\n-        } // while\n-\n-        return fieldsForCreate + \")\";\n-    } // getFieldsForCreate\n+    public String getPkgName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return pkgName.toLowerCase();\n+        } else {\n+            return pkgName;\n+        }\n+    }\n \n-    /**\n-     * Gets fields for insert.\n-     *\n-     * @return the fields for insert\n-     */\n-    public String getFieldsForInsert() {\n-        String fieldsForInsert = \"(\";\n-        boolean first = true;\n-        Iterator<String> it = aggregation.keySet().iterator();\n-        while (it.hasNext()) {\n-            if (first) {\n-                fieldsForInsert += (String) it.next();\n-                first = false;\n-            } else {\n-                fieldsForInsert += \",\" + (String) it.next();\n-            } // if else\n-        } // while\n-        return fieldsForInsert + \")\";\n-    } // getFieldsForInsert\n+    public void setPkgName(String pkgName) {\n+        this.pkgName = pkgName;\n+    }\n+\n+    public String getResName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return resName.toLowerCase();\n+        } else {\n+            return resName;\n+        }\n+    }\n+\n+    public void setResName(String resName) {\n+        this.resName = resName;\n+    }\n+\n+    public boolean isAttrNativeTypes() {\n+        return attrNativeTypes;\n+    }\n+\n+    public void setAttrNativeTypes(boolean attrNativeTypes) {\n+        this.attrNativeTypes = attrNativeTypes;\n+    }\n+\n+    public boolean isEnableGrouping() {", "originalCommit": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3MTgwOQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381871809", "bodyText": "Fixed in 683ab07", "author": "IvanHdzC", "createdAt": "2020-02-20T09:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a800e1c7e7f90e1409151fbf5d0d9a54d886beff", "chunk": "diff --git a/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java b/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java\nindex b1b258a7..a7fa1975 100644\n--- a/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java\n+++ b/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java\n\n@@ -65,263 +66,527 @@ public abstract class NGSIGenericAggregator {\n     private boolean attrMetadataStore;\n     private boolean enableUTCRecvTime;\n \n+    /**\n+     * Gets aggregation.\n+     *\n+     * @return the aggregation\n+     */\n     public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n         if (aggregation == null) {\n             return new LinkedHashMap<>();\n         } else {\n             return aggregation;\n         }\n-    }\n+    } //getAggregation\n \n+    /**\n+     * Gets aggregation to persist. This means that the returned aggregation will not have metadata\n+     * in case that attrMetadataStore is set to false. Also, added fields for processing purposes\n+     * will be removed from the aggregation (like attrType on Column mode).\n+     *\n+     * @return the aggregation to persist\n+     */\n     public LinkedHashMap<String, ArrayList<JsonElement>> getAggregationToPersist() {\n         if (aggregation == null) {\n             return new LinkedHashMap<>();\n         } else {\n             return NGSIUtils.linkedHashMapWithoutDefaultFields(aggregation, attrMetadataStore);\n         }\n-    }\n+    } //getAggregationToPersist\n \n+    /**\n+     * Sets aggregation.\n+     *\n+     * @param aggregation the aggregation\n+     */\n     public void setAggregation(LinkedHashMap<String, ArrayList<JsonElement>> aggregation) {\n         this.aggregation = aggregation;\n-    }\n+    } //setAggregation\n \n+    /**\n+     * Gets collection name.\n+     *\n+     * @param enableLowercase the enable lowercase\n+     * @return the collection name\n+     */\n     public String getCollectionName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return collectionName.toLowerCase();\n         } else {\n             return collectionName;\n         }\n-    }\n+    } //getCollectionName\n \n+    /**\n+     * Gets md aggregations.\n+     *\n+     * @return the md aggregations\n+     */\n     public Map<String, String> getMdAggregations() {\n         if (mdAggregations == null) {\n             return new HashMap<>();\n         } else {\n             return mdAggregations;\n         }\n-    }\n+    } //getMdAggregations\n \n+    /**\n+     * Gets csv string. For HDFS sink.\n+     *\n+     * @return the csv string\n+     */\n     public String getCsvString() {\n         return csvString;\n-    }\n+    } //getCsvString\n \n+    /**\n+     * Sets csv string.\n+     *\n+     * @param csvString the csv string\n+     */\n     public void setCsvString(String csvString) {\n         this.csvString = csvString;\n-    }\n+    } //setCsvString\n \n+    /**\n+     * Gets hdfs folder. For HDFS sink.\n+     *\n+     * @param enableLowercase the enable lowercase\n+     * @return the hdfs folder\n+     */\n     public String getHdfsFolder(boolean enableLowercase) {\n         if (enableLowercase) {\n             return hdfsFolder.toLowerCase();\n         } else {\n             return hdfsFolder;\n         }\n-    }\n+    } //getHdfsFolder\n \n+    /**\n+     * Sets hdfs folder.\n+     *\n+     * @param hdfsFolder the hdfs folder\n+     */\n     public void setHdfsFolder(String hdfsFolder) {\n         this.hdfsFolder = hdfsFolder;\n-    }\n+    } //setHdfsFolder\n \n+    /**\n+     * Gets hdfs file.\n+     *\n+     * @param enableLowercase the enable lowercase\n+     * @return the hdfs file as it was stored. if enableLowercase is true, then the returned String is on lowerCase.\n+     */\n     public String getHdfsFile(boolean enableLowercase) {\n         if (enableLowercase) {\n             return hdfsFile.toLowerCase();\n         } else {\n             return hdfsFile;\n         }\n-    }\n+    } //getHdfsFile\n \n+    /**\n+     * Is enable utc recv time boolean.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isEnableUTCRecvTime() {\n         return enableUTCRecvTime;\n-    }\n+    } //isEnableUTCRecvTime\n \n+    /**\n+     * Sets enable utc recv time. This is used to add UTC format to RECV_TIME field on aggregation.\n+     *\n+     * @param enableUTCRecvTime the enable utc recv time.\n+     */\n     public void setEnableUTCRecvTime(boolean enableUTCRecvTime) {\n         this.enableUTCRecvTime = enableUTCRecvTime;\n-    }\n+    } //setEnableUTCRecvTime\n \n+    /**\n+     * Sets hdfs file.\n+     *\n+     * @param hdfsFile the hdfs file\n+     */\n     public void setHdfsFile(String hdfsFile) {\n         this.hdfsFile = hdfsFile;\n-    }\n+    } //setHdfsFile\n \n-    public void setMdAggregations(Map<String, String> mdAggregations) {\n-        this.mdAggregations = mdAggregations;\n-    }\n+    /**\n+     * Sets md aggregations.\n+     *\n+     * @param mdAggregations the md aggregations\n+     */\n+    public void setMdAggregations(Map<String, String> mdAggregations) { this.mdAggregations = mdAggregations; } //setMdAggregations\n \n+    /**\n+     * Sets attr metadata store. This is used to remove metadata for aggregation. If true, then the method\n+     * getAggregationToPersist will crop metadata fields.\n+     *\n+     * @param attrMetadataStore the attr metadata store\n+     */\n     public void setAttrMetadataStore(boolean attrMetadataStore) {\n         this.attrMetadataStore = attrMetadataStore;\n-    }\n+    } //setAttrMetadataStore\n \n+    /**\n+     * Is attr metadata store boolean.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isAttrMetadataStore() {\n         return attrMetadataStore;\n-    }\n+    } //isAttrMetadataStore\n \n+    /**\n+     * Is enable geo parse boolean. Postgis flag to process geometry types.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isEnableGeoParse() {\n         return enableGeoParse;\n-    }\n+    } //isEnableGeoParse\n \n+    /**\n+     * Sets enable geo parse.\n+     *\n+     * @param enableGeoParse the enable geo parse\n+     */\n     public void setEnableGeoParse(boolean enableGeoParse) {\n         this.enableGeoParse = enableGeoParse;\n-    }\n+    } //setEnableGeoParse\n \n+    /**\n+     * Sets collection name.\n+     *\n+     * @param collectionName the collection name\n+     */\n     public void setCollectionName(String collectionName) {\n         this.collectionName = collectionName;\n-    }\n+    } //setCollectionName\n \n+    /**\n+     * Gets service.\n+     *\n+     * @return the service\n+     */\n     public String getService() {\n         return service;\n-    }\n+    } //getService\n \n+    /**\n+     * Gets hive fields.\n+     *\n+     * @return the hive fields\n+     */\n     public String getHiveFields() {\n         return hiveFields;\n-    }\n+    } //getHiveFields\n \n+    /**\n+     * Sets hive fields.\n+     *\n+     * @param hiveFields the hive fields\n+     */\n     public void setHiveFields(String hiveFields) {\n         this.hiveFields = hiveFields;\n-    }\n+    } //setHiveFields\n \n+    /**\n+     * Sets service.\n+     *\n+     * @param service the service\n+     */\n     public void setService(String service) {\n         this.service = service;\n-    }\n+    } //setService\n \n+    /**\n+     * Gets service path for data.\n+     *\n+     * @return the service path for data\n+     */\n     public String getServicePathForData() {\n         return servicePathForData;\n-    }\n+    } //getServicePathForData\n \n+    /**\n+     * Sets service path for data.\n+     *\n+     * @param servicePathForData the service path for data\n+     */\n     public void setServicePathForData(String servicePathForData) {\n         this.servicePathForData = servicePathForData;\n-    }\n+    } //setServicePathForData\n \n+    /**\n+     * Gets service path for naming.\n+     *\n+     * @return the service path for naming\n+     */\n     public String getServicePathForNaming() {\n         return servicePathForNaming;\n-    }\n+    } //getServicePathForNaming\n \n+    /**\n+     * Sets service path for naming.\n+     *\n+     * @param servicePathForNaming the service path for naming\n+     */\n     public void setServicePathForNaming(String servicePathForNaming) {\n         this.servicePathForNaming = servicePathForNaming;\n-    }\n+    } //setServicePathForNaming\n \n+    /**\n+     * Gets entity for naming.\n+     *\n+     * @return the entity for naming\n+     */\n     public String getEntityForNaming() {\n         return entityForNaming;\n-    }\n+    } //getEntityForNaming\n \n+    /**\n+     * Sets entity for naming.\n+     *\n+     * @param entityForNaming the entity for naming\n+     */\n     public void setEntityForNaming(String entityForNaming) {\n         this.entityForNaming = entityForNaming;\n-    }\n+    } //setEntityForNaming\n \n+    /**\n+     * Gets entity type.\n+     *\n+     * @return the entity type\n+     */\n     public String getEntityType() {\n         return entityType;\n-    }\n+    } //getEntityType\n \n+    /**\n+     * Sets entity type.\n+     *\n+     * @param entityType the entity type\n+     */\n     public void setEntityType(String entityType) {\n         this.entityType = entityType;\n-    }\n+    } //setEntityType\n \n+    /**\n+     * Gets attribute.\n+     *\n+     * @return the attribute\n+     */\n     public String getAttribute() {\n         return attribute;\n-    }\n+    } //getAttribute\n \n+    /**\n+     * Sets attribute.\n+     *\n+     * @param attribute the attribute\n+     */\n     public void setAttribute(String attribute) {\n         this.attribute = attribute;\n-    }\n+    } //setAttribute\n \n+    /**\n+     * Gets db name.\n+     *\n+     * @param enableLowercase the enable lowercase. If enableLowercase is true, then the returned String is on lowerCase.\n+     * @return the db name\n+     */\n     public String getDbName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return dbName.toLowerCase();\n         } else {\n             return dbName;\n         }\n-    }\n+    } //getDbName\n \n+    /**\n+     * Sets db name.\n+     *\n+     * @param dbName the db name\n+     */\n     public void setDbName(String dbName) {\n         this.dbName = dbName;\n-    }\n+    } //setDbName\n \n+    /**\n+     * Gets table name.\n+     *\n+     * @param enableLowercase the enable lowercase. If enableLowercase is true, then the returned String is on lowerCase.\n+     * @return the table name\n+     */\n     public String getTableName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return tableName.toLowerCase();\n         } else {\n             return tableName;\n         }\n-    }\n+    } //getTableName\n \n+    /**\n+     * Sets table name.\n+     *\n+     * @param tableName the table name\n+     */\n     public void setTableName(String tableName) {\n         this.tableName = tableName;\n-    }\n+    } //setTableName\n \n+    /**\n+     * Gets org name.\n+     *\n+     * @param enableLowercase the enable lowercase. If enableLowercase is true, then the returned String is on lowerCase.\n+     * @return the org name\n+     */\n     public String getOrgName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return orgName.toLowerCase();\n         } else {\n             return orgName;\n         }\n-    }\n+    } //getOrgName\n \n+    /**\n+     * Sets org name.\n+     *\n+     * @param orgName the org name\n+     */\n     public void setOrgName(String orgName) {\n         this.orgName = orgName;\n-    }\n+    } //setOrgName\n \n+    /**\n+     * Gets pkg name.\n+     *\n+     * @param enableLowercase the enable lowercase. If enableLowercase is true, then the returned String is on lowerCase.\n+     * @return the pkg name\n+     */\n     public String getPkgName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return pkgName.toLowerCase();\n         } else {\n             return pkgName;\n         }\n-    }\n+    } //getPkgName\n \n+    /**\n+     * Sets pkg name.\n+     *\n+     * @param pkgName the pkg name\n+     */\n     public void setPkgName(String pkgName) {\n         this.pkgName = pkgName;\n-    }\n+    } //setPkgName\n \n+    /**\n+     * Gets res name.\n+     *\n+     * @param enableLowercase the enable lowercase. If enableLowercase is true, then the returned String is on lowerCase.\n+     * @return the res name\n+     */\n     public String getResName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return resName.toLowerCase();\n         } else {\n             return resName;\n         }\n-    }\n+    } //getResName\n \n+    /**\n+     * Sets res name.\n+     *\n+     * @param resName the res name\n+     */\n     public void setResName(String resName) {\n         this.resName = resName;\n-    }\n+    } //setResName\n \n+    /**\n+     * Is attr native types boolean.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isAttrNativeTypes() {\n         return attrNativeTypes;\n-    }\n+    } //isAttrNativeTypes\n \n+    /**\n+     * Sets attr native types.\n+     *\n+     * @param attrNativeTypes the attr native types\n+     */\n     public void setAttrNativeTypes(boolean attrNativeTypes) {\n         this.attrNativeTypes = attrNativeTypes;\n-    }\n+    } //setAttrNativeTypes\n \n+    /**\n+     * Is enable grouping boolean.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isEnableGrouping() {\n         return enableGrouping;\n-    }\n+    } //isEnableGrouping\n \n+    /**\n+     * Sets enable grouping.\n+     *\n+     * @param enableGrouping the enable grouping\n+     */\n     public void setEnableGrouping(boolean enableGrouping) {\n         this.enableGrouping = enableGrouping;\n-    }\n+    } //setEnableGrouping\n \n+    /**\n+     * Is enable encoding boolean.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isEnableEncoding() {\n         return enableEncoding;\n-    }\n+    } //isEnableEncoding\n \n+    /**\n+     * Sets enable encoding.\n+     *\n+     * @param enableEncoding the enable encoding\n+     */\n     public void setEnableEncoding(boolean enableEncoding) {\n         this.enableEncoding = enableEncoding;\n-    }\n+    } //setEnableEncoding\n \n+    /**\n+     * Is enable name mappings boolean.\n+     *\n+     * @return the boolean\n+     */\n     public boolean isEnableNameMappings() {\n         return enableNameMappings;\n-    }\n+    } //isEnableNameMappings\n \n+    /**\n+     * Sets enable name mappings.\n+     *\n+     * @param enableNameMappings the enable name mappings\n+     */\n     public void setEnableNameMappings(boolean enableNameMappings) {\n         this.enableNameMappings = enableNameMappings;\n-    }\n+    } //setEnableNameMappings\n \n     /**\n-     * Aggregate.\n+     * Aggregate declaration for child classes.\n      *\n      * @param cygnusEvent the cygnus event\n      */\n     public abstract void aggregate(NGSIEvent cygnusEvent);\n \n     /**\n-     * Initialize.\n+     * Initialize declaration for child classes.\n      *\n      * @param cygnusEvent the cygnus event\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTk1MQ==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381109951", "bodyText": "License header in new files", "author": "fgalan", "createdAt": "2020-02-19T07:09:59Z", "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.telefonica.iot.cygnus.sinks;", "originalCommit": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExOTU0MA==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381119540", "bodyText": "Fixed in 25f98f6", "author": "IvanHdzC", "createdAt": "2020-02-19T07:39:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTk1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "25f98f637db431e38bfee19706ae5ac09993eb24", "chunk": "diff --git a/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java b/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java\nindex 4b1a5403..c263f3dd 100644\n--- a/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java\n+++ b/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java\n\n@@ -1,3 +1,21 @@\n+/**\n+ * Copyright 2014-2020 Telefonica Investigaci\u00f3n y Desarrollo, S.A.U\n+ *\n+ * This file is part of fiware-cygnus (FIWARE project).\n+ *\n+ * fiware-cygnus is free software: you can redistribute it and/or modify it under the terms of the GNU Affero\n+ * General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your\n+ * option) any later version.\n+ * fiware-cygnus is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the\n+ * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License\n+ * for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License along with fiware-cygnus. If not, see\n+ * http://www.gnu.org/licenses/.\n+ *\n+ * For those usages not covered by the GNU Affero General Public License please contact with iot_support at tid dot es\n+ */\n+\n package com.telefonica.iot.cygnus.sinks;\n \n import com.google.gson.JsonElement;\n"}}, {"oid": "25f98f637db431e38bfee19706ae5ac09993eb24", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/25f98f637db431e38bfee19706ae5ac09993eb24", "message": "add license headers to new class", "committedDate": "2020-02-19T07:37:51Z", "type": "commit"}, {"oid": "a800e1c7e7f90e1409151fbf5d0d9a54d886beff", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/a800e1c7e7f90e1409151fbf5d0d9a54d886beff", "message": "add java doc to new elements", "committedDate": "2020-02-19T14:47:26Z", "type": "forcePushed"}, {"oid": "28d84554e73c183da0cd1a6d621ba39be8d120d5", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/28d84554e73c183da0cd1a6d621ba39be8d120d5", "message": "add java doc to new elements", "committedDate": "2020-02-19T16:18:38Z", "type": "forcePushed"}, {"oid": "683ab076f020f01987369925c4e9091d083b7560", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/683ab076f020f01987369925c4e9091d083b7560", "message": "add java doc to new elements", "committedDate": "2020-02-19T16:19:32Z", "type": "commit"}, {"oid": "683ab076f020f01987369925c4e9091d083b7560", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/683ab076f020f01987369925c4e9091d083b7560", "message": "add java doc to new elements", "committedDate": "2020-02-19T16:19:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2MjkyNw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381962927", "bodyText": "Used by? Is there any new dependence in pom.xml ?", "author": "AlvaroVega", "createdAt": "2020-02-20T12:16:00Z", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java", "diffHunk": "@@ -18,6 +18,12 @@\n \n package com.telefonica.iot.cygnus.sinks;\n \n+import com.amazonaws.services.dynamodbv2.xspec.S;", "originalCommit": "683ab076f020f01987369925c4e9091d083b7560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjgwMw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r382046803", "bodyText": "No, there isn't any new dependency, not very sure why I added it, but it's never used.\nFixed in bf42de0", "author": "IvanHdzC", "createdAt": "2020-02-20T14:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2MjkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "bf42de008c59fb41d740ec6b851aee434e50fb7b", "chunk": "diff --git a/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java b/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java\nindex be1c635e..a9734e07 100644\n--- a/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java\n+++ b/cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java\n\n@@ -18,7 +18,6 @@\n \n package com.telefonica.iot.cygnus.sinks;\n \n-import com.amazonaws.services.dynamodbv2.xspec.S;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n import com.telefonica.iot.cygnus.aggregation.NGSIGenericAggregator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MjE4Mw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381972183", "bodyText": "leftover?", "author": "AlvaroVega", "createdAt": "2020-02-20T12:36:32Z", "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java", "diffHunk": "@@ -1533,76 +1615,101 @@ public void testNativeTypeRowBatchCsvNotMetadata() throws CygnusBadConfiguration\n \n     @Test\n     public void testNativeTypeRowBatchJson() throws CygnusBadConfiguration, CygnusRuntimeError, CygnusPersistenceError, CygnusBadContextData {\n-        String attr_native_types = \"true\";\n-        NGSIHDFSSink ngsihdfsSink= new NGSIHDFSSink();\n-        ngsihdfsSink.configure(createContextforNativeTypes(\"json-row\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, attr_native_types, \"true\"));\n         NGSIBatch batch = prepaireBatch();\n         String destination = \"someDestination\";\n+        String file_format = \"json-row\";\n+        NGSIHDFSSink ngsihdfsSink = new NGSIHDFSSink();\n+        ngsihdfsSink.configure(createContextforNativeTypes(null, null, null, null, null, null, null, null, null, null, null, file_format, null, null, null, null, null, null, null, null, null, null));\n         try {\n             batch.startIterator();\n+            //NGSIGenericAggregator aggregator = new NGSIGenericColumnAggregator();", "originalCommit": "683ab076f020f01987369925c4e9091d083b7560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjgxMw==", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r382046813", "bodyText": "Fixed in bf42de0", "author": "IvanHdzC", "createdAt": "2020-02-20T14:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MjE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "bf42de008c59fb41d740ec6b851aee434e50fb7b", "chunk": "diff --git a/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java b/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java\nindex 99025149..fa94e129 100644\n--- a/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java\n+++ b/cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java\n\n@@ -1622,7 +1616,6 @@ public class NGSIHDFSSinkTest {\n         ngsihdfsSink.configure(createContextforNativeTypes(null, null, null, null, null, null, null, null, null, null, null, file_format, null, null, null, null, null, null, null, null, null, null));\n         try {\n             batch.startIterator();\n-            //NGSIGenericAggregator aggregator = new NGSIGenericColumnAggregator();\n             NGSIGenericAggregator aggregator = new NGSIGenericRowAggregator();\n             while (batch.hasNext()) {\n                 destination = batch.getNextDestination();\n"}}, {"oid": "bf42de008c59fb41d740ec6b851aee434e50fb7b", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/bf42de008c59fb41d740ec6b851aee434e50fb7b", "message": "code cleanning", "committedDate": "2020-02-20T14:48:01Z", "type": "commit"}, {"oid": "8f3f0a778415aa6f3a738cd481e6c90195569147", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/8f3f0a778415aa6f3a738cd481e6c90195569147", "message": "Merge branch 'master' into task/generic_aggregation", "committedDate": "2020-02-20T16:30:29Z", "type": "commit"}, {"oid": "6d0c1d561aa4a7ba5379667bf15e3c62f15eaaf3", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/6d0c1d561aa4a7ba5379667bf15e3c62f15eaaf3", "message": "fix merge conflicts", "committedDate": "2020-02-20T16:52:01Z", "type": "commit"}, {"oid": "ba89c01d1be4a5051c88bdb981c46afcdc851691", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/ba89c01d1be4a5051c88bdb981c46afcdc851691", "message": "Merge branch 'master' into task/generic_aggregation", "committedDate": "2020-03-02T09:32:19Z", "type": "commit"}, {"oid": "5bbf71fc751989e2c0392625bd6344b63737bf04", "url": "https://github.com/telefonicaid/fiware-cygnus/commit/5bbf71fc751989e2c0392625bd6344b63737bf04", "message": "enable postgis function even if nativetypes is off", "committedDate": "2020-03-02T09:38:24Z", "type": "commit"}]}