{"pr_number": 5243, "pr_title": "benchmarks: add duration limit to starter", "pr_createdAt": "2020-08-26T12:29:32Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5243", "timeline": [{"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7", "url": "https://github.com/camunda-cloud/zeebe/commit/f3917f83b419ab4430af9d6e39352311a3d108d7", "message": "chore(benchmarks): add duration limit to starter", "committedDate": "2020-08-26T12:23:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NjM3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#discussion_r478376378", "bodyText": "Who is the one ? \ud83d\ude05", "author": "Zelldon", "createdAt": "2020-08-27T12:21:17Z", "path": "benchmarks/project/src/main/java/io/zeebe/Starter.java", "diffHunk": "@@ -59,30 +62,39 @@ public void run() {\n     LOG.info(\"Creating an instance every {}ms\", intervalMs);\n \n     final String variables = readVariables(starterCfg.getPayloadPath());\n+    final LocalDateTime startTime = LocalDateTime.now();\n     executorService.scheduleAtFixedRate(\n         () -> {\n-          try {\n-            if (starterCfg.isWithResults()) {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .withResult()\n-                      .requestTimeout(starterCfg.getWithResultsTimeout())\n-                      .send());\n-            } else {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .send());\n+          final long duration = ChronoUnit.SECONDS.between(startTime, LocalDateTime.now());\n+          if (durationLimit <= 0 || duration < durationLimit) {\n+            try {\n+              if (starterCfg.isWithResults()) {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .withResult()\n+                        .requestTimeout(starterCfg.getWithResultsTimeout())\n+                        .send());\n+              } else {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .send());\n+              }\n+            } catch (Exception e) {\n+              LOG.error(\"Error on creating new workflow instance\", e);\n             }\n-          } catch (Exception e) {\n-            LOG.error(\"Error on creating new workflow instance\", e);\n+          } else {\n+            // TODO can one use scheduledFuture.cancel(false) to gracefully", "originalCommit": "f3917f83b419ab4430af9d6e39352311a3d108d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NzAwNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#discussion_r478377006", "bodyText": "So what you want to do is canceling the timer, stopping the execution service. Await all remaining responses and then exit right?", "author": "Zelldon", "createdAt": "2020-08-27T12:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NjM3OA=="}], "type": "inlineReview", "revised_code": {"commit": "453a4687778a141408b20947cad1da5f6cb99188", "chunk": "diff --git a/benchmarks/project/src/main/java/io/zeebe/Starter.java b/benchmarks/project/src/main/java/io/zeebe/Starter.java\nindex 42f0ea2d9..986f2645f 100644\n--- a/benchmarks/project/src/main/java/io/zeebe/Starter.java\n+++ b/benchmarks/project/src/main/java/io/zeebe/Starter.java\n\n@@ -63,10 +66,14 @@ public class Starter extends App {\n \n     final String variables = readVariables(starterCfg.getPayloadPath());\n     final LocalDateTime startTime = LocalDateTime.now();\n-    executorService.scheduleAtFixedRate(\n+\n+    final Supplier<Boolean> shouldContinue = createContinuationCondition(starterCfg);\n+\n+    final CountDownLatch countDownLatch = new CountDownLatch(1);\n+\n+    final ScheduledFuture scheduledTask = executorService.scheduleAtFixedRate(\n         () -> {\n-          final long duration = ChronoUnit.SECONDS.between(startTime, LocalDateTime.now());\n-          if (durationLimit <= 0 || duration < durationLimit) {\n+          if (shouldContinue.get()) {\n             try {\n               if (starterCfg.isWithResults()) {\n                 requestFutures.put(\n"}}, {"oid": "453a4687778a141408b20947cad1da5f6cb99188", "url": "https://github.com/camunda-cloud/zeebe/commit/453a4687778a141408b20947cad1da5f6cb99188", "message": "chore(benchmark): replace System.exit() with countdown latch", "committedDate": "2020-09-03T12:37:10Z", "type": "commit"}]}