{"pr_number": 4730, "pr_title": "test(qa/integration-tests): increase test stability", "pr_createdAt": "2020-06-15T12:26:47Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4730", "timeline": [{"oid": "0f4ee484d1a6b46e42a1ad9f7b68adcdab1ec9b9", "url": "https://github.com/camunda-cloud/zeebe/commit/0f4ee484d1a6b46e42a1ad9f7b68adcdab1ec9b9", "message": "test(qa/integration-tests): increase test stability\n\n* write more segments to ensure that the log can be compacted\n* favor waitUntil instead of assertThat because the log is compacted asynchronously", "committedDate": "2020-06-19T13:51:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMDg2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443420867", "bodyText": "Before this we should also verify that the compaction is completed, right? waitUntil(getSegmentsCount() < segmentsBeforeSnapshot . Otherwise we may not be verifying the state after compaction.", "author": "deepthidevaki", "createdAt": "2020-06-22T09:10:27Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/SingleBrokerDataDeletionTest.java", "diffHunk": "@@ -58,46 +65,62 @@ public void shouldNotCompactNotExportedEvents() {\n     final var logstream = clusteringRule.getLogStream(1);\n     final var reader = logstream.newLogStreamReader().join();\n \n-    while (getSegmentsCount(broker) <= 2) {\n-      writeToLog();\n-    }\n+    // - write records and update the exporter position\n+    ControllableExporter.updatePosition(true);\n+    fillSegments(broker, SEGMENT_COUNT);\n \n-    // when\n+    // - write more records but don't update the exporter position\n     ControllableExporter.updatePosition(false);\n+    fillSegments(broker, SEGMENT_COUNT * 2);\n \n-    // write more events\n-    while (getSegmentsCount(broker) <= 3) {\n-      writeToLog();\n-    }\n-    // write one more to make sure last processed position in segment 3\n-    writeToLog();\n-\n-    // increase snapshot interval and wait\n+    // - trigger a snapshot creation\n     clusteringRule.getClock().addTime(SNAPSHOT_PERIOD);\n     final var firstSnapshot = clusteringRule.waitForSnapshotAtBroker(broker);\n \n-    // then\n+    // then verify that the log still contains the records that are not exported", "originalCommit": "0f4ee484d1a6b46e42a1ad9f7b68adcdab1ec9b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMTc1Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443521757", "bodyText": "\ud83d\udc4d\n\nwe may not be verifying the state after compaction\n\nAlso with checking the segment count, we don't know when the compaction is done. It is hard to be exact \ud83e\udd14", "author": "saig0", "createdAt": "2020-06-22T12:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMDg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NzczNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443997735", "bodyText": "Ya. You are right. But I guess there is no other way to wait for compaction.", "author": "deepthidevaki", "createdAt": "2020-06-23T06:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQyMDg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "42488f4fc9ee103f33270f0607988ce5fb21ab7b", "chunk": "diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/SingleBrokerDataDeletionTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/SingleBrokerDataDeletionTest.java\nindex c3d2ce0f2..888dc2d80 100644\n--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/SingleBrokerDataDeletionTest.java\n+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/SingleBrokerDataDeletionTest.java\n\n@@ -71,12 +71,21 @@ public class SingleBrokerDataDeletionTest {\n \n     // - write more records but don't update the exporter position\n     ControllableExporter.updatePosition(false);\n-    fillSegments(broker, SEGMENT_COUNT * 2);\n+\n+    final var filledSegmentCount = SEGMENT_COUNT * 2;\n+    fillSegments(broker, filledSegmentCount);\n \n     // - trigger a snapshot creation\n     clusteringRule.getClock().addTime(SNAPSHOT_PERIOD);\n     final var firstSnapshot = clusteringRule.waitForSnapshotAtBroker(broker);\n \n+    await()\n+        .untilAsserted(\n+            () ->\n+                assertThat(getSegmentsCount(broker))\n+                    .describedAs(\"Expected less segments after a snapshot is taken\")\n+                    .isLessThan(filledSegmentCount));\n+\n     // then verify that the log still contains the records that are not exported\n     final var firstNonExportedPosition =\n         ControllableExporter.NOT_EXPORTED_RECORDS.get(0).getPosition();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMzkyNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443433925", "bodyText": "Nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                waitUntil(\n          \n          \n            \n              Awaitility.await()\n          \n          \n            \n                    .untilAsserted(\n          \n          \n            \n                        () ->\n          \n          \n            \n                            assertThat(getSegmentsCount(leader))\n          \n          \n            \n                                .isLessThan(segmentCountBeforeSnapshot.get(leaderNodeId)));", "author": "deepthidevaki", "createdAt": "2020-06-22T09:33:09Z", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteredDataDeletionTest.java", "diffHunk": "@@ -90,22 +94,19 @@ public void shouldDeleteDataOnLeader() {\n     final int leaderNodeId = clusteringRule.getLeaderForPartition(1).getNodeId();\n     final Broker leader = clusteringRule.getBroker(leaderNodeId);\n \n-    while (getSegmentsCount(leader) <= 2) {\n-      clusteringRule\n-          .getClient()\n-          .newPublishMessageCommand()\n-          .messageName(\"msg\")\n-          .correlationKey(\"key\")\n-          .send()\n-          .join();\n-    }\n+    fillSegments(List.of(leader), SEGMENT_COUNT);\n \n     // when\n-    final var segmentCount =\n+    final var segmentCountBeforeSnapshot =\n         takeSnapshotAndWaitForReplication(Collections.singletonList(leader), clusteringRule);\n \n     // then\n-    TestUtil.waitUntil(() -> getSegments(leader).size() < segmentCount.get(leaderNodeId));\n+    waitUntil(", "originalCommit": "0f4ee484d1a6b46e42a1ad9f7b68adcdab1ec9b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMzgzMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443523831", "bodyText": "Do you suggest to replace our TestUtil? \ud83d\ude05", "author": "saig0", "createdAt": "2020-06-22T12:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMzkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNzg0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443527848", "bodyText": ":D We had some discussions before about starting to use Awaitility instead of our own waitUntil. This looks like a good place to use it.", "author": "deepthidevaki", "createdAt": "2020-06-22T12:38:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMzkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyOTc3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443529779", "bodyText": "We already use it for example here https://github.com/zeebe-io/zeebe/blob/379afe7174267f168d967b09d295e5b5ab0fd6c4/atomix/cluster/src/test/java/io/atomix/cluster/protocol/SwimProtocolTest.java#L385-L387", "author": "Zelldon", "createdAt": "2020-06-22T12:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMzkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4OTYxNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4730#discussion_r443989617", "bodyText": "Ok \ud83d\udc4d If we plan to replace the TestUtil then we should create an issue and communicate it to the team.", "author": "saig0", "createdAt": "2020-06-23T06:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQzMzkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "42488f4fc9ee103f33270f0607988ce5fb21ab7b", "chunk": "diff --git a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteredDataDeletionTest.java b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteredDataDeletionTest.java\nindex 356681744..b83a71058 100644\n--- a/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteredDataDeletionTest.java\n+++ b/qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/ClusteredDataDeletionTest.java\n\n@@ -97,16 +97,18 @@ public final class ClusteredDataDeletionTest {\n     fillSegments(List.of(leader), SEGMENT_COUNT);\n \n     // when\n-    final var segmentCountBeforeSnapshot =\n-        takeSnapshotAndWaitForReplication(Collections.singletonList(leader), clusteringRule);\n+    final var segmentCountBeforeSnapshot = getSegmentsCount(leader);\n+\n+    clusteringRule.getClock().addTime(SNAPSHOT_PERIOD);\n+    clusteringRule.waitForSnapshotAtBroker(leader);\n \n     // then\n-    waitUntil(\n-        () -> getSegmentsCount(leader) < segmentCountBeforeSnapshot.get(leaderNodeId),\n-        () ->\n-            String.format(\n-                \"Expected segment count of leader to be less than %s after a snapshot is taken but was %s\",\n-                segmentCountBeforeSnapshot.get(leaderNodeId), getSegments(leader).size()));\n+    await()\n+        .untilAsserted(\n+            () ->\n+                assertThat(getSegmentsCount(leader))\n+                    .describedAs(\"Expected less segments after a snapshot is taken\")\n+                    .isLessThan(segmentCountBeforeSnapshot));\n   }\n \n   @Test\n"}}, {"oid": "42488f4fc9ee103f33270f0607988ce5fb21ab7b", "url": "https://github.com/camunda-cloud/zeebe/commit/42488f4fc9ee103f33270f0607988ce5fb21ab7b", "message": "test(qa/integration-tests): increase test stability\n\n* write more segments to ensure that the log can be compacted\n* favor waitUntil instead of assertThat because the log is compacted asynchronously", "committedDate": "2020-06-23T07:05:32Z", "type": "commit"}, {"oid": "42488f4fc9ee103f33270f0607988ce5fb21ab7b", "url": "https://github.com/camunda-cloud/zeebe/commit/42488f4fc9ee103f33270f0607988ce5fb21ab7b", "message": "test(qa/integration-tests): increase test stability\n\n* write more segments to ensure that the log can be compacted\n* favor waitUntil instead of assertThat because the log is compacted asynchronously", "committedDate": "2020-06-23T07:05:32Z", "type": "forcePushed"}]}