{"pr_number": 5522, "pr_title": "chore(broker): refactor ZeebePartition", "pr_createdAt": "2020-10-06T15:12:35Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5522", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjU5MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502182590", "bodyText": "The component lists have no direct relationship with the broker class. I suggest to extract them to a separate class or move them to PartitionTransitionImpl.", "author": "saig0", "createdAt": "2020-10-09T04:26:48Z", "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -73,12 +88,30 @@\n public final class Broker implements AutoCloseable {\n \n   public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-\n+  private static final List<Component<?>> LEADER_COMPONENTS =\n+      List.of(\n+          new LogStreamComponent(),\n+          new RaftLogReaderComponent(),\n+          new SnapshotReplicationComponent(),\n+          new StateControllerComponent(),\n+          new LogDeletionComponent(),\n+          new LeaderPostStorageComponent(),\n+          new ZeebeDbComponent(),\n+          new StreamProcessorComponent(),\n+          new SnapshotDirectorComponent(),\n+          new RocksDbMetricExporterComponent(),\n+          new ExporterDirectorComponent());\n+  private static final List<Component<?>> FOLLOWER_COMPONENTS =\n+      List.of(\n+          new RaftLogReaderComponent(),\n+          new SnapshotReplicationComponent(),\n+          new StateControllerComponent(),\n+          new LogDeletionComponent(),\n+          new FollowerPostStorageComponent());", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTQ1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r503841454", "bodyText": "I think the lists are more closely related to the Broker than the PartitionTransitionImpl itself, no? The transition behavior should be independent of what specific things we open and close. We can have a constructor which uses these lists if none are passed but even then I don't think they should be there at all. The broker already knows (and needs to know) what needs to be opened/closed since it was already passing the relevant data into the ZeebePartition. WDYT?", "author": "MiguelPires", "createdAt": "2020-10-13T10:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5MzQzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504393432", "bodyText": "I agree that the lists don't need to be in the PartitionTransitionImpl class. But maybe, in a separate class (e.g. PartitionSteps).\nMy main concern is that the Broker class doesn't use the lists itself (separation of concerns) and it is already big and contains a lot of stuff.", "author": "saig0", "createdAt": "2020-10-14T04:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/Broker.java b/broker/src/main/java/io/zeebe/broker/Broker.java\nindex 213435e75..7d5eed8c4 100644\n--- a/broker/src/main/java/io/zeebe/broker/Broker.java\n+++ b/broker/src/main/java/io/zeebe/broker/Broker.java\n\n@@ -88,26 +91,26 @@ import org.slf4j.Logger;\n public final class Broker implements AutoCloseable {\n \n   public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  private static final List<Component<?>> LEADER_COMPONENTS =\n+  private static final List<PartitionStep> LEADER_STEPS =\n       List.of(\n-          new LogStreamComponent(),\n-          new RaftLogReaderComponent(),\n-          new SnapshotReplicationComponent(),\n-          new StateControllerComponent(),\n-          new LogDeletionComponent(),\n-          new LeaderPostStorageComponent(),\n-          new ZeebeDbComponent(),\n-          new StreamProcessorComponent(),\n-          new SnapshotDirectorComponent(),\n-          new RocksDbMetricExporterComponent(),\n-          new ExporterDirectorComponent());\n-  private static final List<Component<?>> FOLLOWER_COMPONENTS =\n+          new LogStreamPartitionStep(),\n+          new RaftLogReaderPartitionStep(),\n+          new SnapshotReplicationPartitionStep(),\n+          new StateControllerPartitionStep(),\n+          new LogDeletionPartitionStep(),\n+          new LeaderPostStoragePartitionStep(),\n+          new ZeebeDbPartitionStep(),\n+          new StreamProcessorPartitionStep(),\n+          new SnapshotDirectorPartitionStep(),\n+          new RocksDbMetricExporterPartitionStep(),\n+          new ExporterDirectorPartitionStep());\n+  private static final List<PartitionStep> FOLLOWER_STEPS =\n       List.of(\n-          new RaftLogReaderComponent(),\n-          new SnapshotReplicationComponent(),\n-          new StateControllerComponent(),\n-          new LogDeletionComponent(),\n-          new FollowerPostStorageComponent());\n+          new RaftLogReaderPartitionStep(),\n+          new SnapshotReplicationPartitionStep(),\n+          new StateControllerPartitionStep(),\n+          new LogDeletionPartitionStep(),\n+          new FollowerPostStoragePartitionStep());\n   private final SystemContext brokerContext;\n   private final List<PartitionListener> partitionListeners;\n   private boolean isClosed = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzAzNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502183034", "bodyText": "Raw type warning. PartitionTransitionImpl expect a generic type but no type is set.", "author": "saig0", "createdAt": "2020-10-09T04:29:01Z", "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -366,6 +400,10 @@ private AutoCloseable partitionsStep(\n                     partitionIndexes.get(partitionId),\n                     snapshotStoreSupplier,\n                     createFactory(topologyManager, clusterCfg, atomix, managementRequestHandler));\n+            final PartitionTransitionImpl transitionBehavior =\n+                new PartitionTransitionImpl(context, LEADER_COMPONENTS, FOLLOWER_COMPONENTS);", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/Broker.java b/broker/src/main/java/io/zeebe/broker/Broker.java\nindex 213435e75..7d5eed8c4 100644\n--- a/broker/src/main/java/io/zeebe/broker/Broker.java\n+++ b/broker/src/main/java/io/zeebe/broker/Broker.java\n\n@@ -399,9 +402,10 @@ public final class Broker implements AutoCloseable {\n                     commandHandler,\n                     partitionIndexes.get(partitionId),\n                     snapshotStoreSupplier,\n-                    createFactory(topologyManager, clusterCfg, atomix, managementRequestHandler));\n+                    createFactory(topologyManager, clusterCfg, atomix, managementRequestHandler),\n+                    buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n-                new PartitionTransitionImpl(context, LEADER_COMPONENTS, FOLLOWER_COMPONENTS);\n+                new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n             final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n \n             scheduleActor(zeebePartition);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzQ4Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502183487", "bodyText": "I suggest a more concrete name for the interface. Component is a very generic name. But the implementation is hardly coupled to a partition.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface Component<T> {\n          \n          \n            \n            public interface PartitionComponent<T> {\n          \n      \n    \n    \n  \n\nOr maybe, PartitonStep. Some of the current components don't fit well to the term \"component\", for example,  FollowerPostStorageComponent.", "author": "saig0", "createdAt": "2020-10-09T04:31:00Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/Component.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.ActorFuture;\n+\n+/**\n+ * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n+ * AsyncSnapshotDirector, etc) defined as its parameter.\n+ *\n+ * @param <T> the value opened and closed by the Component\n+ */\n+public interface Component<T> {", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java b/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java\ndeleted file mode 100644\nindex 45dc4e76d..000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.partitions;\n-\n-import io.zeebe.util.sched.future.ActorFuture;\n-\n-/**\n- * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n- * AsyncSnapshotDirector, etc) defined as its parameter.\n- *\n- * @param <T> the value opened and closed by the Component\n- */\n-public interface Component<T> {\n-\n-  /**\n-   * Opens the component and returns a future which should be completed with the component's value.\n-   *\n-   * @param context the partition context\n-   * @return future\n-   */\n-  ActorFuture<T> open(final PartitionContext context);\n-\n-  /**\n-   * Closes the component and returns a future to be completed after the closing is done.\n-   *\n-   * @param context the partition context\n-   * @return future\n-   */\n-  ActorFuture<Void> close(final PartitionContext context);\n-\n-  /**\n-   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n-   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n-   * scheduling actors, etc.\n-   *\n-   * @param context the partition context\n-   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n-   * @return future\n-   */\n-  ActorFuture<Void> onOpen(final PartitionContext context, final T value);\n-\n-  /** @return A log-friendly identification of the component. */\n-  String getName();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgyNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502183827", "bodyText": "A small typo.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n          \n          \n            \n               * @param value value used to complete {@link Component#open(PartitionContext)} successfully", "author": "saig0", "createdAt": "2020-10-09T04:32:45Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/Component.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.ActorFuture;\n+\n+/**\n+ * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n+ * AsyncSnapshotDirector, etc) defined as its parameter.\n+ *\n+ * @param <T> the value opened and closed by the Component\n+ */\n+public interface Component<T> {\n+\n+  /**\n+   * Opens the component and returns a future which should be completed with the component's value.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<T> open(final PartitionContext context);\n+\n+  /**\n+   * Closes the component and returns a future to be completed after the closing is done.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<Void> close(final PartitionContext context);\n+\n+  /**\n+   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n+   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n+   * scheduling actors, etc.\n+   *\n+   * @param context the partition context\n+   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java b/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java\ndeleted file mode 100644\nindex 45dc4e76d..000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.partitions;\n-\n-import io.zeebe.util.sched.future.ActorFuture;\n-\n-/**\n- * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n- * AsyncSnapshotDirector, etc) defined as its parameter.\n- *\n- * @param <T> the value opened and closed by the Component\n- */\n-public interface Component<T> {\n-\n-  /**\n-   * Opens the component and returns a future which should be completed with the component's value.\n-   *\n-   * @param context the partition context\n-   * @return future\n-   */\n-  ActorFuture<T> open(final PartitionContext context);\n-\n-  /**\n-   * Closes the component and returns a future to be completed after the closing is done.\n-   *\n-   * @param context the partition context\n-   * @return future\n-   */\n-  ActorFuture<Void> close(final PartitionContext context);\n-\n-  /**\n-   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n-   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n-   * scheduling actors, etc.\n-   *\n-   * @param context the partition context\n-   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n-   * @return future\n-   */\n-  ActorFuture<Void> onOpen(final PartitionContext context, final T value);\n-\n-  /** @return A log-friendly identification of the component. */\n-  String getName();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NjMyOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502186329", "bodyText": "A context should not contain any logic. I suggest validating the exporters outside of the context (e.g. in the Broker) to make it more visible.", "author": "saig0", "createdAt": "2020-10-09T04:44:19Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.atomix.raft.storage.log.RaftLogReader;\n+import io.zeebe.broker.PartitionListener;\n+import io.zeebe.broker.exporter.jar.ExporterJarLoadException;\n+import io.zeebe.broker.exporter.repo.ExporterLoadException;\n+import io.zeebe.broker.exporter.repo.ExporterRepository;\n+import io.zeebe.broker.exporter.stream.ExporterDirector;\n+import io.zeebe.broker.logstreams.LogDeletionService;\n+import io.zeebe.broker.system.configuration.BrokerCfg;\n+import io.zeebe.broker.system.partitions.impl.AsyncSnapshotDirector;\n+import io.zeebe.broker.system.partitions.impl.StateControllerImpl;\n+import io.zeebe.broker.transport.commandapi.CommandApiService;\n+import io.zeebe.db.ZeebeDb;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.logstreams.log.LogStream;\n+import io.zeebe.logstreams.storage.atomix.AtomixLogStorage;\n+import io.zeebe.logstreams.storage.atomix.ZeebeIndexMapping;\n+import io.zeebe.snapshots.broker.SnapshotStoreSupplier;\n+import io.zeebe.util.health.HealthMonitor;\n+import io.zeebe.util.sched.ActorControl;\n+import io.zeebe.util.sched.ActorScheduler;\n+import io.zeebe.util.sched.ScheduledTimer;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class PartitionContext {\n+\n+  private final int nodeId;\n+  private final List<PartitionListener> partitionListeners;\n+  private final PartitionMessagingService messagingService;\n+  private final ActorScheduler scheduler;\n+  private final BrokerCfg brokerCfg;\n+\n+  private final SnapshotStoreSupplier snapshotStoreSupplier;\n+  private final RaftPartition raftPartition;\n+  private final TypedRecordProcessorsFactory typedRecordProcessorsFactory;\n+  private final CommandApiService commandApiService;\n+  private final Integer partitionId;\n+  private final int maxFragmentSize;\n+  private final ZeebeIndexMapping zeebeIndexMapping;\n+  private final ExporterRepository exporterRepository = new ExporterRepository();\n+\n+  private StreamProcessor streamProcessor;\n+  private LogStream logStream;\n+  private AtomixLogStorage atomixLogStorage;\n+  private long deferredCommitPosition;\n+  private RaftLogReader raftLogReader;\n+  private SnapshotReplication snapshotReplication;\n+  private StateControllerImpl stateController;\n+  private LogDeletionService logDeletionService;\n+  private AsyncSnapshotDirector snapshotDirector;\n+  private HealthMonitor criticalComponentsHealthMonitor;\n+  private ZeebeDb zeebeDb;\n+  private boolean diskSpaceAvailable;\n+  private boolean isProcessingPaused;\n+  private ActorControl actor;\n+  private ScheduledTimer metricsTimer;\n+  private ExporterDirector exporterDirector;\n+\n+  public PartitionContext(\n+      final int nodeId,\n+      final RaftPartition raftPartition,\n+      final List<PartitionListener> partitionListeners,\n+      final PartitionMessagingService messagingService,\n+      final ActorScheduler actorScheduler,\n+      final BrokerCfg brokerCfg,\n+      final CommandApiService commandApiService,\n+      final ZeebeIndexMapping zeebeIndexMapping,\n+      final SnapshotStoreSupplier snapshotStoreSupplier,\n+      final TypedRecordProcessorsFactory typedRecordProcessorsFactory) {\n+    this.nodeId = nodeId;\n+    this.raftPartition = raftPartition;\n+    this.messagingService = messagingService;\n+    this.brokerCfg = brokerCfg;\n+    this.snapshotStoreSupplier = snapshotStoreSupplier;\n+    this.typedRecordProcessorsFactory = typedRecordProcessorsFactory;\n+    this.commandApiService = commandApiService;\n+    this.partitionListeners = Collections.unmodifiableList(partitionListeners);\n+    partitionId = raftPartition.id().id();\n+    scheduler = actorScheduler;\n+    maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n+    this.zeebeIndexMapping = zeebeIndexMapping;\n+\n+    final var exporterEntries = brokerCfg.getExporters().entrySet();\n+    // load and validate exporters\n+    for (final var exporterEntry : exporterEntries) {\n+      final var id = exporterEntry.getKey();\n+      final var exporterCfg = exporterEntry.getValue();\n+      try {\n+        exporterRepository.load(id, exporterCfg);\n+      } catch (final ExporterLoadException | ExporterJarLoadException e) {\n+        throw new IllegalStateException(\n+            \"Failed to load exporter with configuration: \" + exporterCfg, e);\n+      }\n+    }", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java\nindex 70a909146..4a7f33faf 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java\n\n@@ -10,8 +10,6 @@ package io.zeebe.broker.system.partitions;\n import io.atomix.raft.partition.RaftPartition;\n import io.atomix.raft.storage.log.RaftLogReader;\n import io.zeebe.broker.PartitionListener;\n-import io.zeebe.broker.exporter.jar.ExporterJarLoadException;\n-import io.zeebe.broker.exporter.repo.ExporterLoadException;\n import io.zeebe.broker.exporter.repo.ExporterRepository;\n import io.zeebe.broker.exporter.stream.ExporterDirector;\n import io.zeebe.broker.logstreams.LogDeletionService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4ODQyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502188422", "bodyText": "It looks uncommon to pass a future in the method that needs to be completed. I suggest that the functions return a future instead.", "author": "saig0", "createdAt": "2020-10-09T04:53:25Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/PartitionTransition.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+\n+public interface PartitionTransition {\n+\n+  /**\n+   * Transitions to follower asynchronously by closing the current partition's components and\n+   * opening a follower partition.\n+   *\n+   * @param future completed when the transition is complete\n+   */\n+  void toFollower(CompletableActorFuture<Void> future);\n+\n+  /**\n+   * Transitions to leader asynchronously by closing the current partition's components and opening\n+   * a leader partition.\n+   *\n+   * @param future completed when the transition is complete\n+   */\n+  void toLeader(CompletableActorFuture<Void> future);\n+\n+  /**\n+   * Closes the current partition's components asynchronously.\n+   *\n+   * @param future completed when the transition is complete\n+   */\n+  void toInactive(CompletableActorFuture<Void> future);", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionTransition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionTransition.java\nindex 3b737e9a7..bd95b0c18 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionTransition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionTransition.java\n\n@@ -7,7 +7,7 @@\n  */\n package io.zeebe.broker.system.partitions;\n \n-import io.zeebe.util.sched.future.CompletableActorFuture;\n+import io.zeebe.util.sched.future.ActorFuture;\n \n public interface PartitionTransition {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4ODkyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502188921", "bodyText": "The name of the field doesn't match to the type. I suggest to rename it to context.", "author": "saig0", "createdAt": "2020-10-09T04:55:26Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionTransition;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class PartitionTransitionImpl<T> implements PartitionTransition {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+\n+  private final PartitionContext state;", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex 2bf09d6af..47e64d5af 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -7,9 +7,10 @@\n  */\n package io.zeebe.broker.system.partitions.impl;\n \n+import com.google.common.collect.ImmutableList;\n import io.zeebe.broker.Loggers;\n-import io.zeebe.broker.system.partitions.Component;\n import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionStep;\n import io.zeebe.broker.system.partitions.PartitionTransition;\n import io.zeebe.util.sched.future.ActorFuture;\n import io.zeebe.util.sched.future.CompletableActorFuture;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MDY1MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502190651", "bodyText": "The generic type T is not used correctly here. It is not true that all components have the same generic type as PartitionTransitionImpl. There is just one instance of this class that is instantiated without a type.\nI suggest removing the generic type.", "author": "saig0", "createdAt": "2020-10-09T05:02:55Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionTransition;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class PartitionTransitionImpl<T> implements PartitionTransition {", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex 2bf09d6af..47e64d5af 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -7,9 +7,10 @@\n  */\n package io.zeebe.broker.system.partitions.impl;\n \n+import com.google.common.collect.ImmutableList;\n import io.zeebe.broker.Loggers;\n-import io.zeebe.broker.system.partitions.Component;\n import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionStep;\n import io.zeebe.broker.system.partitions.PartitionTransition;\n import io.zeebe.util.sched.future.ActorFuture;\n import io.zeebe.util.sched.future.CompletableActorFuture;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MjEyMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502192120", "bodyText": "These methods look very similar. I suggest extracting the common part into a method.", "author": "saig0", "createdAt": "2020-10-09T05:09:28Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionTransition;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class PartitionTransitionImpl<T> implements PartitionTransition {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+\n+  private final PartitionContext state;\n+  private final List<Component<T>> leaderComponents;\n+  private final List<Component<T>> followerComponents;\n+  private final List<Component<T>> openedComponents = new ArrayList<>();\n+\n+  public PartitionTransitionImpl(\n+      final PartitionContext state,\n+      final List<Component<T>> leaderComponents,\n+      final List<Component<T>> followerComponents) {\n+    this.state = state;\n+    this.leaderComponents = leaderComponents;\n+    this.followerComponents = followerComponents;\n+  }\n+\n+  @Override\n+  public void toFollower(final CompletableActorFuture<Void> future) {\n+    closePartition()\n+        .onComplete(\n+            (nothing, err) -> {\n+              if (err == null) {\n+                installComponents(future, new ArrayList<>(followerComponents));\n+              } else {\n+                future.completeExceptionally(err);\n+              }\n+            });\n+  }\n+\n+  @Override\n+  public void toLeader(final CompletableActorFuture<Void> future) {\n+    closePartition()\n+        .onComplete(\n+            (nothing, err) -> {\n+              if (err == null) {\n+                installComponents(future, new ArrayList<>(leaderComponents));\n+              } else {\n+                future.completeExceptionally(err);\n+              }\n+            });\n+  }\n+\n+  @Override\n+  public void toInactive(final CompletableActorFuture<Void> future) {\n+    closePartition()\n+        .onComplete(\n+            (nothing, err) -> {\n+              if (err == null) {\n+                future.complete(null);\n+              } else {\n+                future.completeExceptionally(err);\n+              }\n+            });\n+  }", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex 2bf09d6af..47e64d5af 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -7,9 +7,10 @@\n  */\n package io.zeebe.broker.system.partitions.impl;\n \n+import com.google.common.collect.ImmutableList;\n import io.zeebe.broker.Loggers;\n-import io.zeebe.broker.system.partitions.Component;\n import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionStep;\n import io.zeebe.broker.system.partitions.PartitionTransition;\n import io.zeebe.util.sched.future.ActorFuture;\n import io.zeebe.util.sched.future.CompletableActorFuture;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODgxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r503658813", "bodyText": "We can use Actor.wrap() instead of creating a new TestActor.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final TestActor actor =\n          \n          \n            \n                    new TestActor(\n          \n          \n            \n                        () -> {\n          \n          \n            \n                          final CompletableActorFuture<Void> leaderFuture = new CompletableActorFuture<>();\n          \n          \n            \n                          partitionTransition.toLeader(leaderFuture);\n          \n          \n            \n                          leaderFuture.onComplete(\n          \n          \n            \n                              (nothing, err) -> {\n          \n          \n            \n                                Assertions.assertThat(err).isNull();\n          \n          \n            \n            \n          \n          \n            \n                                final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();\n          \n          \n            \n                                partitionTransition.toInactive(closeFuture);\n          \n          \n            \n                                closeFuture.onComplete(\n          \n          \n            \n                                    (nothing1, err1) -> Assertions.assertThat(err1).isNull());\n          \n          \n            \n                              });\n          \n          \n            \n                        });\n          \n          \n            \n                final var actor =\n          \n          \n            \n                    Actor.wrap(\n          \n          \n            \n                        actorControl -> {\n          \n          \n            \n                          final CompletableActorFuture<Void> leaderFuture = new CompletableActorFuture<>();\n          \n          \n            \n                          partitionTransition.toLeader(leaderFuture);\n          \n          \n            \n                          leaderFuture.onComplete(\n          \n          \n            \n                              (nothing, err) -> {\n          \n          \n            \n                                Assertions.assertThat(err).isNull();\n          \n          \n            \n            \n          \n          \n            \n                                final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();\n          \n          \n            \n                                partitionTransition.toInactive(closeFuture);\n          \n          \n            \n                                closeFuture.onComplete(\n          \n          \n            \n                                    (nothing1, err1) -> Assertions.assertThat(err1).isNull());\n          \n          \n            \n                              });\n          \n          \n            \n                        });", "author": "saig0", "createdAt": "2020-10-13T04:22:53Z", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import io.zeebe.util.sched.testing.ControlledActorSchedulerRule;\n+import java.util.Collections;\n+import java.util.List;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+public class PartitionTransitionTest {\n+\n+  @Rule\n+  public final ControlledActorSchedulerRule schedulerRule = new ControlledActorSchedulerRule();\n+\n+  private PartitionContext ctx;\n+\n+  @Before\n+  public void setup() {\n+    ctx = mock(PartitionContext.class);\n+    when(ctx.getPartitionId()).thenReturn(0);\n+  }\n+\n+  @Test\n+  public void shouldCloseInOppositeOrderOfOpen() {\n+    // given\n+    final NoopComponent firstComponent = spy(new NoopComponent());\n+    final NoopComponent secondComponent = spy(new NoopComponent());\n+    final PartitionTransitionImpl partitionTransition =\n+        new PartitionTransitionImpl(\n+            ctx, List.of(firstComponent, secondComponent), Collections.EMPTY_LIST);\n+\n+    // when\n+    final TestActor actor =\n+        new TestActor(\n+            () -> {\n+              final CompletableActorFuture<Void> leaderFuture = new CompletableActorFuture<>();\n+              partitionTransition.toLeader(leaderFuture);\n+              leaderFuture.onComplete(\n+                  (nothing, err) -> {\n+                    Assertions.assertThat(err).isNull();\n+\n+                    final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();\n+                    partitionTransition.toInactive(closeFuture);\n+                    closeFuture.onComplete(\n+                        (nothing1, err1) -> Assertions.assertThat(err1).isNull());\n+                  });\n+            });", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java b/broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java\nindex a9f7c3b20..fb34e77a3 100644\n--- a/broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java\n+++ b/broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java\n\n@@ -12,8 +12,8 @@ import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.spy;\n import static org.mockito.Mockito.when;\n \n-import io.zeebe.broker.system.partitions.Component;\n import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionStep;\n import io.zeebe.util.sched.Actor;\n import io.zeebe.util.sched.future.ActorFuture;\n import io.zeebe.util.sched.future.CompletableActorFuture;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2MTc2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r503661767", "bodyText": "I think that the separation of open() and onOpen() in the interface is not valuable. Both methods are always called after each other. The generic type is also not used correctly by the caller because it uses the class without any type information. The generic type causes more problems without offering real type-safety.\nI suggest having only one method in the interface. However, the implementation can have two methods if needed.", "author": "saig0", "createdAt": "2020-10-13T04:35:13Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/Component.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.ActorFuture;\n+\n+/**\n+ * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n+ * AsyncSnapshotDirector, etc) defined as its parameter.\n+ *\n+ * @param <T> the value opened and closed by the Component\n+ */\n+public interface Component<T> {\n+\n+  /**\n+   * Opens the component and returns a future which should be completed with the component's value.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<T> open(final PartitionContext context);\n+\n+  /**\n+   * Closes the component and returns a future to be completed after the closing is done.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<Void> close(final PartitionContext context);\n+\n+  /**\n+   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n+   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n+   * scheduling actors, etc.\n+   *\n+   * @param context the partition context\n+   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n+   * @return future\n+   */\n+  ActorFuture<Void> onOpen(final PartitionContext context, final T value);", "originalCommit": "79b5742975c10851aec9ce145097188e0fec9fab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java b/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java\ndeleted file mode 100644\nindex 45dc4e76d..000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/Component.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.partitions;\n-\n-import io.zeebe.util.sched.future.ActorFuture;\n-\n-/**\n- * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n- * AsyncSnapshotDirector, etc) defined as its parameter.\n- *\n- * @param <T> the value opened and closed by the Component\n- */\n-public interface Component<T> {\n-\n-  /**\n-   * Opens the component and returns a future which should be completed with the component's value.\n-   *\n-   * @param context the partition context\n-   * @return future\n-   */\n-  ActorFuture<T> open(final PartitionContext context);\n-\n-  /**\n-   * Closes the component and returns a future to be completed after the closing is done.\n-   *\n-   * @param context the partition context\n-   * @return future\n-   */\n-  ActorFuture<Void> close(final PartitionContext context);\n-\n-  /**\n-   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n-   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n-   * scheduling actors, etc.\n-   *\n-   * @param context the partition context\n-   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n-   * @return future\n-   */\n-  ActorFuture<Void> onOpen(final PartitionContext context, final T value);\n-\n-  /** @return A log-friendly identification of the component. */\n-  String getName();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODI3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504388278", "bodyText": "For an empty list, we can use the ones from the standard Java lib instead of an external lib.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n          \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = List.of();\n          \n      \n    \n    \n  \n\nOr,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n          \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = Collections.emptyList();", "author": "saig0", "createdAt": "2020-10-14T04:05:28Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -18,101 +19,78 @@\n import java.util.List;\n import org.slf4j.Logger;\n \n-public class PartitionTransitionImpl<T> implements PartitionTransition {\n+public class PartitionTransitionImpl implements PartitionTransition {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();", "originalCommit": "be46cfe78e92261512c5dd208f4949455da88854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NzYwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504487603", "bodyText": "The idea was that this should never contain anything and an ImmutableList would enforce that. We already use it a lot in the project so it's not adding a new dependency.", "author": "MiguelPires", "createdAt": "2020-10-14T08:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NDQ5MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504594491", "bodyText": "Ok. Just as a side note. Both suggestions from the JDK create an empty list that is also immutable :)", "author": "saig0", "createdAt": "2020-10-14T11:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwNDQ3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504604476", "bodyText": "Ah my bad, I didn't know that. I'll fix it then, thanks!", "author": "MiguelPires", "createdAt": "2020-10-14T11:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "c8159cf965cf5141fa1996058aafb7001ce260b8", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex 47e64d5af..624bd7c59 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -22,7 +21,7 @@ import org.slf4j.Logger;\n public class PartitionTransitionImpl implements PartitionTransition {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n+  private static final List<PartitionStep> EMPTY_LIST = Collections.emptyList();\n \n   private final PartitionContext context;\n   private final List<PartitionStep> leaderSteps;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4OTk5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504389997", "bodyText": "This may lead to problems if two role changes happen before the current transition is done. Both transitions would be performed after the current transition is completed. But the second transition should wait until the previous transition is completed.\nHowever, this is maybe not in the scope of this refactoring. So, feel free to ignore \ud83d\ude05", "author": "saig0", "createdAt": "2020-10-14T04:12:34Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -18,101 +19,78 @@\n import java.util.List;\n import org.slf4j.Logger;\n \n-public class PartitionTransitionImpl<T> implements PartitionTransition {\n+public class PartitionTransitionImpl implements PartitionTransition {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n \n-  private final PartitionContext state;\n-  private final List<Component<T>> leaderComponents;\n-  private final List<Component<T>> followerComponents;\n-  private final List<Component<T>> openedComponents = new ArrayList<>();\n+  private final PartitionContext context;\n+  private final List<PartitionStep> leaderSteps;\n+  private final List<PartitionStep> followerSteps;\n+  private final List<PartitionStep> openedSteps = new ArrayList<>();\n+  private CompletableActorFuture<Void> currentTransition = CompletableActorFuture.completed(null);\n \n   public PartitionTransitionImpl(\n-      final PartitionContext state,\n-      final List<Component<T>> leaderComponents,\n-      final List<Component<T>> followerComponents) {\n-    this.state = state;\n-    this.leaderComponents = leaderComponents;\n-    this.followerComponents = followerComponents;\n+      final PartitionContext context,\n+      final List<PartitionStep> leaderSteps,\n+      final List<PartitionStep> followerSteps) {\n+    this.context = context;\n+    this.leaderSteps = leaderSteps;\n+    this.followerSteps = followerSteps;\n   }\n \n   @Override\n-  public void toFollower(final CompletableActorFuture<Void> future) {\n-    closePartition()\n-        .onComplete(\n-            (nothing, err) -> {\n-              if (err == null) {\n-                installComponents(future, new ArrayList<>(followerComponents));\n-              } else {\n-                future.completeExceptionally(err);\n-              }\n-            });\n+  public ActorFuture<Void> toFollower() {\n+    final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n+    currentTransition.onComplete((nothing, err) -> transition(future, followerSteps));\n+    return future;", "originalCommit": "be46cfe78e92261512c5dd208f4949455da88854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MzczOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504483738", "bodyText": "Very true. I won't fix it now since, like you said, it's out of scope but I'll make an issue for all the known issues of the ZeebePartition. Thanks!", "author": "MiguelPires", "createdAt": "2020-10-14T08:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4OTk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c8159cf965cf5141fa1996058aafb7001ce260b8", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\nindex 47e64d5af..624bd7c59 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java\n\n@@ -22,7 +21,7 @@ import org.slf4j.Logger;\n public class PartitionTransitionImpl implements PartitionTransition {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n+  private static final List<PartitionStep> EMPTY_LIST = Collections.emptyList();\n \n   private final PartitionContext context;\n   private final List<PartitionStep> leaderSteps;\n"}}, {"oid": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "url": "https://github.com/camunda-cloud/zeebe/commit/f2718e3579ba9f619403dcc65e98d164bb507d7e", "message": "chore(qa): increase test timeout", "committedDate": "2020-10-14T08:47:15Z", "type": "forcePushed"}, {"oid": "c6f3015050ecf139c3481997bb239689ec695a9c", "url": "https://github.com/camunda-cloud/zeebe/commit/c6f3015050ecf139c3481997bb239689ec695a9c", "message": "chore(qa): increase test timeout", "committedDate": "2020-10-14T09:11:08Z", "type": "forcePushed"}, {"oid": "10cfba179bd777e5ca38f92e86fa00f2056e9f7c", "url": "https://github.com/camunda-cloud/zeebe/commit/10cfba179bd777e5ca38f92e86fa00f2056e9f7c", "message": "chore(broker): refactor ZeebePartition", "committedDate": "2020-10-14T09:11:05Z", "type": "forcePushed"}, {"oid": "c8159cf965cf5141fa1996058aafb7001ce260b8", "url": "https://github.com/camunda-cloud/zeebe/commit/c8159cf965cf5141fa1996058aafb7001ce260b8", "message": "chore(broker): refactor ZeebePartition", "committedDate": "2020-10-14T11:35:42Z", "type": "commit"}, {"oid": "c8159cf965cf5141fa1996058aafb7001ce260b8", "url": "https://github.com/camunda-cloud/zeebe/commit/c8159cf965cf5141fa1996058aafb7001ce260b8", "message": "chore(broker): refactor ZeebePartition", "committedDate": "2020-10-14T11:35:42Z", "type": "forcePushed"}]}