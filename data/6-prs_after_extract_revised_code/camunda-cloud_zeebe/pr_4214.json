{"pr_number": 4214, "pr_title": "chore(broker): use raft thread context in state machine", "pr_createdAt": "2020-04-02T07:41:37Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4214", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDM5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4214#discussion_r402254396", "bodyText": "Do we still need this one as well?", "author": "npepinpe", "createdAt": "2020-04-02T11:53:54Z", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/ZeebeRaftStateMachine.java", "diffHunk": "@@ -64,7 +64,7 @@ public ThreadContext executor() {\n       if (index > reader.getFirstIndex()) {\n         final var future = new CompletableFuture<Void>();\n         logger.debug(\"Compacting log up from {} up to {}\", reader.getFirstIndex(), index);\n-        raft.getThreadContext().execute(() -> safeCompact(index, future));\n+        threadContext.execute(() -> safeCompact(index, future));", "originalCommit": "db02986ad8c68ce8006f204c941c1c359b9c56fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NzU0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4214#discussion_r402257544", "bodyText": "You are right. It is also always called from raft context.", "author": "deepthidevaki", "createdAt": "2020-04-02T11:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI1NDM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3b0d10a3bb7ed2537515e0f466c292b871824021", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/clustering/atomix/ZeebeRaftStateMachine.java b/broker/src/main/java/io/zeebe/broker/clustering/atomix/ZeebeRaftStateMachine.java\nindex bd5cf6b7ce..67244fb8e4 100644\n--- a/broker/src/main/java/io/zeebe/broker/clustering/atomix/ZeebeRaftStateMachine.java\n+++ b/broker/src/main/java/io/zeebe/broker/clustering/atomix/ZeebeRaftStateMachine.java\n\n@@ -58,13 +55,14 @@ public final class ZeebeRaftStateMachine implements RaftStateMachine {\n    */\n   @Override\n   public CompletableFuture<Void> compact() {\n+    raft.checkThread();\n     final var log = raft.getLog();\n     if (log.isCompactable(compactableIndex)) {\n       final var index = log.getCompactableIndex(compactableIndex);\n       if (index > reader.getFirstIndex()) {\n         final var future = new CompletableFuture<Void>();\n         logger.debug(\"Compacting log up from {} up to {}\", reader.getFirstIndex(), index);\n-        threadContext.execute(() -> safeCompact(index, future));\n+        compact(index, future);\n         return future;\n       }\n     }\n"}}, {"oid": "3b0d10a3bb7ed2537515e0f466c292b871824021", "url": "https://github.com/camunda-cloud/zeebe/commit/3b0d10a3bb7ed2537515e0f466c292b871824021", "message": "chore(broker): use raft thread context in state machine", "committedDate": "2020-04-02T12:28:17Z", "type": "commit"}, {"oid": "3b0d10a3bb7ed2537515e0f466c292b871824021", "url": "https://github.com/camunda-cloud/zeebe/commit/3b0d10a3bb7ed2537515e0f466c292b871824021", "message": "chore(broker): use raft thread context in state machine", "committedDate": "2020-04-02T12:28:17Z", "type": "forcePushed"}]}