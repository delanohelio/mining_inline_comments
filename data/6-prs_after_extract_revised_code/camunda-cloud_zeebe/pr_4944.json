{"pr_number": 4944, "pr_title": "chore(gateway): add gateway-broker metrics", "pr_createdAt": "2020-07-10T15:32:31Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4944", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3Njk3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454876975", "bodyText": "In this case, the request was never send to a broker. Do we want to include them in the metrics?", "author": "deepthidevaki", "createdAt": "2020-07-15T08:20:51Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -115,37 +116,57 @@ private static boolean responseValidation(final DirectBuffer responseContent) {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n+      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());", "originalCommit": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxOTQ0OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454919448", "bodyText": "Why not? My reasoning was that it's still a failure on the gateway's part so it'd be useful to include it. But we can be more strict with what we consider a failure, if that allows us to extract more value from the graph. What's your opinion?", "author": "MiguelPires", "createdAt": "2020-07-15T09:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3Njk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3OTcwNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454979705", "bodyText": "That makes sense. May be, as I mentioned in another comment, we can add the reasons for failures to the metrics. So when we want to get more detailed insight, we can filter out irrelevant failures.", "author": "deepthidevaki", "createdAt": "2020-07-15T11:24:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3Njk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk4MjYyMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454982623", "bodyText": "I agree, I'll add that and post some screen shots of how it looks", "author": "MiguelPires", "createdAt": "2020-07-15T11:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3Njk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "cfd6ea39fc99e437bf6998e209a758633294aab6", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java b/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\nindex 546907b405..4dbde1e935 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\n\n@@ -116,7 +116,8 @@ final class BrokerRequestManager extends Actor {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n-      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n+      GatewayMetrics.registerFailedRequest(\n+          request.getPartitionId(), request.getType(), \"PARTITION_NOT_FOUND\");\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3OTY4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454879689", "bodyText": "Considering \"RESOURCE_EXHAUSTED\" as successful responses can skew the elapsedtime metrics as it is usually much smaller than a successfully processed requests.", "author": "deepthidevaki", "createdAt": "2020-07-15T08:25:19Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -115,37 +116,57 @@ private static boolean responseValidation(final DirectBuffer responseContent) {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n+      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n       return;\n     }\n \n     final ActorFuture<DirectBuffer> responseFuture =\n         sender.send(clientTransport, nodeIdProvider, request, requestTimeout);\n+    final long startTime = System.currentTimeMillis();\n \n     actor.runOnCompletion(\n         responseFuture,\n         (clientResponse, error) -> {\n           try {\n             if (error == null) {\n               final BrokerResponse<T> response = request.getResponse(clientResponse);\n-              handleResponse(response, returnFuture);\n+\n+              if (handleResponse(response, returnFuture)) {", "originalCommit": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cfd6ea39fc99e437bf6998e209a758633294aab6", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java b/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\nindex 546907b405..4dbde1e935 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\n\n@@ -116,7 +116,8 @@ final class BrokerRequestManager extends Actor {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n-      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n+      GatewayMetrics.registerFailedRequest(\n+          request.getPartitionId(), request.getType(), \"PARTITION_NOT_FOUND\");\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NTcwOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454885708", "bodyText": "I'm not sure if this should be considered as successful.", "author": "deepthidevaki", "createdAt": "2020-07-15T08:35:36Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -115,37 +116,57 @@ private static boolean responseValidation(final DirectBuffer responseContent) {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n+      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n       return;\n     }\n \n     final ActorFuture<DirectBuffer> responseFuture =\n         sender.send(clientTransport, nodeIdProvider, request, requestTimeout);\n+    final long startTime = System.currentTimeMillis();\n \n     actor.runOnCompletion(\n         responseFuture,\n         (clientResponse, error) -> {\n           try {\n             if (error == null) {\n               final BrokerResponse<T> response = request.getResponse(clientResponse);\n-              handleResponse(response, returnFuture);\n+\n+              if (handleResponse(response, returnFuture)) {\n+                final long elapsedTime = System.currentTimeMillis() - startTime;\n+                GatewayMetrics.registerSuccessfulRequest(\n+                    request.getPartitionId(), request.getType(), elapsedTime);\n+                return;\n+              }\n             } else {\n               returnFuture.completeExceptionally(error);\n             }\n           } catch (final RuntimeException e) {\n             returnFuture.completeExceptionally(new ClientResponseException(e));\n           }\n+\n+          GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n         });\n   }\n \n-  private <T> void handleResponse(\n+  /**\n+   * Returns true if the request was successfully processed or false, it it wasn't. Rejections and\n+   * RESOURCE_EXCEEDED errors are considered successful requests.\n+   */\n+  private <T> boolean handleResponse(\n       final BrokerResponse<T> response, final CompletableFuture<BrokerResponse<T>> responseFuture) {\n     try {\n       if (response.isResponse()) {\n         responseFuture.complete(response);\n+        return true;\n       } else if (response.isRejection()) {\n         responseFuture.completeExceptionally(new BrokerRejectionException(response.getRejection()));\n+        return true;\n       } else if (response.isError()) {\n         responseFuture.completeExceptionally(new BrokerErrorException(response.getError()));\n+\n+        if (response.getError().getCode() == ErrorCode.RESOURCE_EXHAUSTED) {", "originalCommit": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyMDM2OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454920368", "bodyText": "Nicolas asked for it specifically. IIRC, the idea was that marking these as failed would show an increase in failures when a client sends too many requests, which isn't necessarily indicative of a problem in Zeebe. In this sense, including it would reduce the usefulness of have this metric. But @npepinpe, correct me if I'm wrong or misremembering", "author": "MiguelPires", "createdAt": "2020-07-15T09:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NTcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyODEyMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454928122", "bodyText": "The idea was that if we want to track the error rate, when stress testing RESOURCE_EXHAUSTED would show a system which is failing when it's behaving as expected.", "author": "npepinpe", "createdAt": "2020-07-15T09:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NTcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3Mjc4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454972782", "bodyText": "My main concern is that if there are too many resource exhausted errors during a stress test, we highly underestimate average latency because resource exhausted responses will have comparatively much lower latency.", "author": "deepthidevaki", "createdAt": "2020-07-15T11:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NTcwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3NTM3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454975376", "bodyText": "We can solve both problems by ignoring them altogether. We don't count them as failures and we also don't register their latencies.", "author": "MiguelPires", "createdAt": "2020-07-15T11:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NTcwOA=="}], "type": "inlineReview", "revised_code": {"commit": "cfd6ea39fc99e437bf6998e209a758633294aab6", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java b/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\nindex 546907b405..4dbde1e935 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java\n\n@@ -116,7 +116,8 @@ final class BrokerRequestManager extends Actor {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n-      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n+      GatewayMetrics.registerFailedRequest(\n+          request.getPartitionId(), request.getType(), \"PARTITION_NOT_FOUND\");\n       return;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NjQ1OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454886458", "bodyText": "TOTAL_REQUESTS should be updated when the request is send, not when the response is received. Isn't it?", "author": "deepthidevaki", "createdAt": "2020-07-15T08:36:48Z", "path": "gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Histogram;\n+\n+public final class GatewayMetrics {\n+\n+  private static final Histogram REQUEST_LATENCY =\n+      Histogram.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_request_latency\")\n+          .help(\"Latency of round-trip from gateway to broker\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter FAILED_REQUESTS =\n+      Counter.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_failed_requests\")\n+          .help(\"Number of failed requests\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter TOTAL_REQUESTS =\n+      Counter.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_total_requests\")\n+          .help(\"Number of requests\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private GatewayMetrics() {}\n+\n+  public static void registerSuccessfulRequest(\n+      final long partition, final String requestType, final long latencyMs) {\n+    REQUEST_LATENCY.labels(Long.toString(partition), requestType).observe(latencyMs / 1000f);\n+    TOTAL_REQUESTS.labels(Long.toString(partition), requestType).inc();", "originalCommit": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMzQ4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r456303488", "bodyText": "@MiguelPires What's your opinion on this?", "author": "deepthidevaki", "createdAt": "2020-07-17T08:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NjQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzNjI3Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r456336276", "bodyText": "Sorry, missed this comment before. Hm, I wouldn't expect a big difference if the rate at which incoming requests come remains steady. But it seems more useful to consider TOTAL_REQUESTS as \"all requests that were completed\" rather than \"all requests that were made including unfinished ones\". If you have a lot of requests that haven't completed then I don't think we should take them into account when calculating the failure rate, since it could heavily skew the results", "author": "MiguelPires", "createdAt": "2020-07-17T09:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NjQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0MDQ5NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r456340495", "bodyText": "\ud83d\udc4d", "author": "deepthidevaki", "createdAt": "2020-07-17T09:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NjQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "cfd6ea39fc99e437bf6998e209a758633294aab6", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java b/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java\nindex 99146718b6..11c5bd8e5e 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java\n\n@@ -25,7 +25,7 @@ public final class GatewayMetrics {\n           .namespace(\"zeebe\")\n           .name(\"gateway_failed_requests\")\n           .help(\"Number of failed requests\")\n-          .labelNames(\"partition\", \"requestType\")\n+          .labelNames(\"partition\", \"requestType\", \"error\")\n           .register();\n \n   private static final Counter TOTAL_REQUESTS =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5Mzk4NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454893984", "bodyText": "Can we use the valueType and intent to build the request type instead of parsing the class name?", "author": "deepthidevaki", "createdAt": "2020-07-15T08:48:57Z", "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/request/BrokerRequest.java", "diffHunk": "@@ -63,6 +65,10 @@ public void serializeValue() {\n \n   protected abstract T toResponseDto(DirectBuffer buffer);\n \n+  public String getType() {\n+    return COMMON_WORDS.matcher(this.getClass().getSimpleName()).replaceAll(\"\");", "originalCommit": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyMjAxMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454922010", "bodyText": "The BrokerRequest doesn't have access to the valueType and intent. This was a hack around it. It's not pretty but it works for all the request types since they all follow the same format", "author": "MiguelPires", "createdAt": "2020-07-15T09:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5Mzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MzU1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454973552", "bodyText": "Why not add it in BrokerExecuteCommand? All requests extends it, right? Anyway, it is just a suggestion.", "author": "deepthidevaki", "createdAt": "2020-07-15T11:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5Mzk4NA=="}], "type": "inlineReview", "revised_code": {"commit": "cfd6ea39fc99e437bf6998e209a758633294aab6", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/impl/broker/request/BrokerRequest.java b/gateway/src/main/java/io/zeebe/gateway/impl/broker/request/BrokerRequest.java\nindex e70ad55e60..31d94ada30 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/impl/broker/request/BrokerRequest.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/impl/broker/request/BrokerRequest.java\n\n@@ -65,9 +63,7 @@ public abstract class BrokerRequest<T> implements ClientRequest {\n \n   protected abstract T toResponseDto(DirectBuffer buffer);\n \n-  public String getType() {\n-    return COMMON_WORDS.matcher(this.getClass().getSimpleName()).replaceAll(\"\");\n-  }\n+  public abstract String getType();\n \n   public BrokerResponse<T> getResponse(final DirectBuffer responseBuffer) {\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5NTc4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454895788", "bodyText": "May be we can add the reasons for failure to the labels. We can then distinguish timeouts vs other failures.", "author": "deepthidevaki", "createdAt": "2020-07-15T08:51:56Z", "path": "gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Histogram;\n+\n+public final class GatewayMetrics {\n+\n+  private static final Histogram REQUEST_LATENCY =\n+      Histogram.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_request_latency\")\n+          .help(\"Latency of round-trip from gateway to broker\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter FAILED_REQUESTS =", "originalCommit": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cfd6ea39fc99e437bf6998e209a758633294aab6", "chunk": "diff --git a/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java b/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java\nindex 99146718b6..11c5bd8e5e 100644\n--- a/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java\n+++ b/gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java\n\n@@ -25,7 +25,7 @@ public final class GatewayMetrics {\n           .namespace(\"zeebe\")\n           .name(\"gateway_failed_requests\")\n           .help(\"Number of failed requests\")\n-          .labelNames(\"partition\", \"requestType\")\n+          .labelNames(\"partition\", \"requestType\", \"error\")\n           .register();\n \n   private static final Counter TOTAL_REQUESTS =\n"}}, {"oid": "cfd6ea39fc99e437bf6998e209a758633294aab6", "url": "https://github.com/camunda-cloud/zeebe/commit/cfd6ea39fc99e437bf6998e209a758633294aab6", "message": "chore(gateway): improvements", "committedDate": "2020-07-16T09:57:28Z", "type": "forcePushed"}, {"oid": "31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "url": "https://github.com/camunda-cloud/zeebe/commit/31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "message": "chore(gateway): add gateway-broker metrics", "committedDate": "2020-07-17T14:15:23Z", "type": "commit"}, {"oid": "31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "url": "https://github.com/camunda-cloud/zeebe/commit/31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "message": "chore(gateway): add gateway-broker metrics", "committedDate": "2020-07-17T14:15:23Z", "type": "forcePushed"}]}