{"pr_number": 5742, "pr_title": "feat(clients/java): add capability to change ZeebeObjectMapper", "pr_createdAt": "2020-11-02T06:44:01Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5742", "timeline": [{"oid": "7536e8f493a15c38ad69e894ecb0e7c00a457440", "url": "https://github.com/camunda-cloud/zeebe/commit/7536e8f493a15c38ad69e894ecb0e7c00a457440", "message": "feat(clients/java): create ZeebeObjectMapperWrapper and use it instead of ZeebeObjectMapper", "committedDate": "2020-11-03T07:52:35Z", "type": "forcePushed"}, {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed", "url": "https://github.com/camunda-cloud/zeebe/commit/8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed", "message": "feat(clients/java): create JsonMapper and make ZeebeObjectMapper implement in", "committedDate": "2020-11-05T12:59:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM1MzUwOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554353508", "bodyText": "As this is a public interface which users are meant to implement, it's important to fully document it.", "author": "npepinpe", "createdAt": "2021-01-09T10:22:20Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+public interface JsonMapper {", "originalCommit": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyNjg5MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554926891", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-11T09:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM1MzUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex dcb41bfe6..a65d98ea2 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -18,17 +18,68 @@ package io.zeebe.client.api;\n import java.io.InputStream;\n import java.util.Map;\n \n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n public interface JsonMapper {\n \n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object\n+   * @return a typed object from a JSON string\n+   */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n+  /**\n+   * Transform a JSON string to the map with string to object pairs\n+   *\n+   * @param json a JSON string\n+   * @return a map is filled with JSON\n+   */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n+  /**\n+   * Transform a JSON string to the map with string to string pairs\n+   *\n+   * @param json a JSON string\n+   * @return a map is filled with JSON\n+   */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n+  /**\n+   * Transform an object to a JSON string\n+   *\n+   * @param value an object that will be transformed\n+   * @return a JSON string\n+   */\n   String toJson(final Object value);\n \n+  /**\n+   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}\n+   *\n+   * @param propertyName a property name that contains jsonInput\n+   * @param jsonInput a JSON string\n+   * @return a JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n+   *     string\n+   */\n   String validateJson(final String propertyName, final String jsonInput);\n \n+  /**\n+   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}\n+   *\n+   * @param propertyName a property name that contains jsonInput\n+   * @param jsonInput a stream that contains a JSON string\n+   * @return a JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n+   *     JSON string\n+   */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM2ODk5Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554368993", "bodyText": "Is this used?", "author": "npepinpe", "createdAt": "2021-01-09T10:50:24Z", "path": "clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java", "diffHunk": "@@ -59,6 +61,8 @@\n   private String certificatePath;\n   private CredentialsProvider credentialsProvider;\n   private Duration keepAlive = Duration.ofSeconds(45);\n+  private ObjectMapper zeebeObjectMapper = new ObjectMapper();", "originalCommit": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyNjk0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554926944", "bodyText": "Removed", "author": "aivinog1", "createdAt": "2021-01-11T09:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM2ODk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java b/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java\nindex 0957c67ef..526a7c009 100644\n--- a/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java\n+++ b/clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java\n\n@@ -61,7 +60,6 @@ public final class ZeebeClientBuilderImpl implements ZeebeClientBuilder, ZeebeCl\n   private String certificatePath;\n   private CredentialsProvider credentialsProvider;\n   private Duration keepAlive = Duration.ofSeconds(45);\n-  private ObjectMapper zeebeObjectMapper = new ObjectMapper();\n   private JsonMapper jsonMapper = new ZeebeObjectMapper();\n \n   @Override\n"}}, {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "url": "https://github.com/camunda-cloud/zeebe/commit/2abd02ebe0b7c81f39fd29caab0986390fff13fa", "message": "feat(clients/java): code review: add more JavaDocs and remove unused property", "committedDate": "2021-01-11T09:49:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzYyNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r555137625", "bodyText": "As a user, this doesn't tell me much about the interface. What objects are transformed to JSON? When are they transformed? Why would I want to implement this (ideally with examples - everybody loves examples \ud83d\ude42)? What is the default implementation (I know you link to ZeebeObjectMapper, but it's not apparent to a user why)?", "author": "npepinpe", "createdAt": "2021-01-11T15:43:36Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.", "originalCommit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE0MDA2Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r555140066", "bodyText": "Another point: our ZeebeObjectMapper implementation always throws InternalClientException on error. We could also document the interface methods (i.e. @throws InternalClientException on serialization/deserialization error), even without adding the checked exception. That way implementations are more easily swappable.", "author": "npepinpe", "createdAt": "2021-01-11T15:46:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5MzkzNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565893935", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-28T08:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "03b46323704fdd6829389d5ae24ee81e775be4d3", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex a65d98ea2..2ba8c1ff5 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -19,67 +19,102 @@ import java.io.InputStream;\n import java.util.Map;\n \n /**\n- * This interface is using to customize the way how objects will be transformed in JSON format.\n+ * This interface is using to customize the way how objects will be serialized and deserialized in\n+ * JSON format. The default implementation is {@link io.zeebe.client.impl.ZeebeObjectMapper}. This\n+ * interface could be implemented to customize the way how variables in the commands\n+ * serialized/deserialized. For example: there is such map with variables:\n+ *\n+ * <pre>\n+ *   final Map<String, Object> variables = new HashMap<>();\n+ *   variables.put(\"a\", \"b\");\n+ *   variables.put(\"c\", null);\n+ * </pre>\n+ *\n+ * And after doing this:\n+ *\n+ * <pre>\n+ *   public class MyJsonMapper implements JsonMapper {\n+ *\n+ *     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+ *\n+ *     public String toJson(final Object value) {\n+ *       return OBJECT_MAPPER.writeValueAsString(value);\n+ *     }\n+ *     ...\n+ *   }\n+ *   ...\n+ *   ZeebeClient.newClientBuilder().withJsonMapper(new MyJsonMapper());\n+ * </pre>\n+ *\n+ * Null values won't pass in the JSON with variables: {@code { \"a\": \"b\" } }\n  *\n  * @see io.zeebe.client.impl.ZeebeObjectMapper\n  */\n public interface JsonMapper {\n \n   /**\n-   * Transform a JSON string to the typed object.\n+   * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n    *\n-   * @param json a JSON string\n-   * @param typeClass a class of the type to serialize\n-   * @param <T> a type of the returned object\n-   * @return a typed object from a JSON string\n+   * @param json the JSON string to deserialize\n+   * @param typeClass the Java type to deserialize into\n+   * @param <T> the type of the returned object\n+   * @return the POJO deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n   /**\n-   * Transform a JSON string to the map with string to object pairs\n+   * Deserializes a JSON string into a string to object map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n   /**\n-   * Transform a JSON string to the map with string to string pairs\n+   * Deserializes a JSON string into a string to string map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n   /**\n-   * Transform an object to a JSON string\n+   * Serializes an object (POJO, map, list, etc.) into an JSON string.\n    *\n-   * @param value an object that will be transformed\n-   * @return a JSON string\n+   * @param value the object to serialize\n+   * @return a JSON string serialized from the given object\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String toJson(final Object value);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n-   * io.zeebe.client.api.command.InternalClientException}\n+   * Validates a JSON string. If it is not valid throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}.\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n-   *     string\n+   * @param propertyName the property name that contains the JSON string\n+   * @param jsonInput the JSON string\n+   * @return the same JSON string, that passed in\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final String jsonInput);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * Validates a stream that contains a JSON string. If it is not valid throws a {@link\n    * io.zeebe.client.api.command.InternalClientException}\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a stream that contains a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n-   *     JSON string\n+   * @param propertyName a property name that contains the stream\n+   * @param jsonInput the stream that contains the JSON string\n+   * @return the JSON string from the stream\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTAzNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557549034", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Transform a JSON string to the typed object.\n          \n          \n            \n               * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n          \n      \n    \n    \n  \n\nI think this is more indicative of the intent, i.e. deserialization.", "author": "npepinpe", "createdAt": "2021-01-14T17:00:49Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.", "originalCommit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDAyMQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894021", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-28T08:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTAzNA=="}], "type": "inlineReview", "revised_code": {"commit": "03b46323704fdd6829389d5ae24ee81e775be4d3", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex a65d98ea2..2ba8c1ff5 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -19,67 +19,102 @@ import java.io.InputStream;\n import java.util.Map;\n \n /**\n- * This interface is using to customize the way how objects will be transformed in JSON format.\n+ * This interface is using to customize the way how objects will be serialized and deserialized in\n+ * JSON format. The default implementation is {@link io.zeebe.client.impl.ZeebeObjectMapper}. This\n+ * interface could be implemented to customize the way how variables in the commands\n+ * serialized/deserialized. For example: there is such map with variables:\n+ *\n+ * <pre>\n+ *   final Map<String, Object> variables = new HashMap<>();\n+ *   variables.put(\"a\", \"b\");\n+ *   variables.put(\"c\", null);\n+ * </pre>\n+ *\n+ * And after doing this:\n+ *\n+ * <pre>\n+ *   public class MyJsonMapper implements JsonMapper {\n+ *\n+ *     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+ *\n+ *     public String toJson(final Object value) {\n+ *       return OBJECT_MAPPER.writeValueAsString(value);\n+ *     }\n+ *     ...\n+ *   }\n+ *   ...\n+ *   ZeebeClient.newClientBuilder().withJsonMapper(new MyJsonMapper());\n+ * </pre>\n+ *\n+ * Null values won't pass in the JSON with variables: {@code { \"a\": \"b\" } }\n  *\n  * @see io.zeebe.client.impl.ZeebeObjectMapper\n  */\n public interface JsonMapper {\n \n   /**\n-   * Transform a JSON string to the typed object.\n+   * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n    *\n-   * @param json a JSON string\n-   * @param typeClass a class of the type to serialize\n-   * @param <T> a type of the returned object\n-   * @return a typed object from a JSON string\n+   * @param json the JSON string to deserialize\n+   * @param typeClass the Java type to deserialize into\n+   * @param <T> the type of the returned object\n+   * @return the POJO deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n   /**\n-   * Transform a JSON string to the map with string to object pairs\n+   * Deserializes a JSON string into a string to object map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n   /**\n-   * Transform a JSON string to the map with string to string pairs\n+   * Deserializes a JSON string into a string to string map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n   /**\n-   * Transform an object to a JSON string\n+   * Serializes an object (POJO, map, list, etc.) into an JSON string.\n    *\n-   * @param value an object that will be transformed\n-   * @return a JSON string\n+   * @param value the object to serialize\n+   * @return a JSON string serialized from the given object\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String toJson(final Object value);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n-   * io.zeebe.client.api.command.InternalClientException}\n+   * Validates a JSON string. If it is not valid throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}.\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n-   *     string\n+   * @param propertyName the property name that contains the JSON string\n+   * @param jsonInput the JSON string\n+   * @return the same JSON string, that passed in\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final String jsonInput);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * Validates a stream that contains a JSON string. If it is not valid throws a {@link\n    * io.zeebe.client.api.command.InternalClientException}\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a stream that contains a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n-   *     JSON string\n+   * @param propertyName a property name that contains the stream\n+   * @param jsonInput the stream that contains the JSON string\n+   * @return the JSON string from the stream\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTEyOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557549129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param typeClass a class of the type to serialize\n          \n          \n            \n               * @param typeClass the Java type to deserialize into", "author": "npepinpe", "createdAt": "2021-01-14T17:00:57Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize", "originalCommit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDA2Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894067", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-28T08:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTEyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "03b46323704fdd6829389d5ae24ee81e775be4d3", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex a65d98ea2..2ba8c1ff5 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -19,67 +19,102 @@ import java.io.InputStream;\n import java.util.Map;\n \n /**\n- * This interface is using to customize the way how objects will be transformed in JSON format.\n+ * This interface is using to customize the way how objects will be serialized and deserialized in\n+ * JSON format. The default implementation is {@link io.zeebe.client.impl.ZeebeObjectMapper}. This\n+ * interface could be implemented to customize the way how variables in the commands\n+ * serialized/deserialized. For example: there is such map with variables:\n+ *\n+ * <pre>\n+ *   final Map<String, Object> variables = new HashMap<>();\n+ *   variables.put(\"a\", \"b\");\n+ *   variables.put(\"c\", null);\n+ * </pre>\n+ *\n+ * And after doing this:\n+ *\n+ * <pre>\n+ *   public class MyJsonMapper implements JsonMapper {\n+ *\n+ *     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+ *\n+ *     public String toJson(final Object value) {\n+ *       return OBJECT_MAPPER.writeValueAsString(value);\n+ *     }\n+ *     ...\n+ *   }\n+ *   ...\n+ *   ZeebeClient.newClientBuilder().withJsonMapper(new MyJsonMapper());\n+ * </pre>\n+ *\n+ * Null values won't pass in the JSON with variables: {@code { \"a\": \"b\" } }\n  *\n  * @see io.zeebe.client.impl.ZeebeObjectMapper\n  */\n public interface JsonMapper {\n \n   /**\n-   * Transform a JSON string to the typed object.\n+   * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n    *\n-   * @param json a JSON string\n-   * @param typeClass a class of the type to serialize\n-   * @param <T> a type of the returned object\n-   * @return a typed object from a JSON string\n+   * @param json the JSON string to deserialize\n+   * @param typeClass the Java type to deserialize into\n+   * @param <T> the type of the returned object\n+   * @return the POJO deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n   /**\n-   * Transform a JSON string to the map with string to object pairs\n+   * Deserializes a JSON string into a string to object map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n   /**\n-   * Transform a JSON string to the map with string to string pairs\n+   * Deserializes a JSON string into a string to string map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n   /**\n-   * Transform an object to a JSON string\n+   * Serializes an object (POJO, map, list, etc.) into an JSON string.\n    *\n-   * @param value an object that will be transformed\n-   * @return a JSON string\n+   * @param value the object to serialize\n+   * @return a JSON string serialized from the given object\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String toJson(final Object value);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n-   * io.zeebe.client.api.command.InternalClientException}\n+   * Validates a JSON string. If it is not valid throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}.\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n-   *     string\n+   * @param propertyName the property name that contains the JSON string\n+   * @param jsonInput the JSON string\n+   * @return the same JSON string, that passed in\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final String jsonInput);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * Validates a stream that contains a JSON string. If it is not valid throws a {@link\n    * io.zeebe.client.api.command.InternalClientException}\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a stream that contains a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n-   *     JSON string\n+   * @param propertyName a property name that contains the stream\n+   * @param jsonInput the stream that contains the JSON string\n+   * @return the JSON string from the stream\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjI0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557552244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param json a JSON string\n          \n          \n            \n               * @param json the JSON string to deserialize", "author": "npepinpe", "createdAt": "2021-01-14T17:05:36Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string", "originalCommit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDEwOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894108", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-28T08:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjI0NA=="}], "type": "inlineReview", "revised_code": {"commit": "03b46323704fdd6829389d5ae24ee81e775be4d3", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex a65d98ea2..2ba8c1ff5 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -19,67 +19,102 @@ import java.io.InputStream;\n import java.util.Map;\n \n /**\n- * This interface is using to customize the way how objects will be transformed in JSON format.\n+ * This interface is using to customize the way how objects will be serialized and deserialized in\n+ * JSON format. The default implementation is {@link io.zeebe.client.impl.ZeebeObjectMapper}. This\n+ * interface could be implemented to customize the way how variables in the commands\n+ * serialized/deserialized. For example: there is such map with variables:\n+ *\n+ * <pre>\n+ *   final Map<String, Object> variables = new HashMap<>();\n+ *   variables.put(\"a\", \"b\");\n+ *   variables.put(\"c\", null);\n+ * </pre>\n+ *\n+ * And after doing this:\n+ *\n+ * <pre>\n+ *   public class MyJsonMapper implements JsonMapper {\n+ *\n+ *     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+ *\n+ *     public String toJson(final Object value) {\n+ *       return OBJECT_MAPPER.writeValueAsString(value);\n+ *     }\n+ *     ...\n+ *   }\n+ *   ...\n+ *   ZeebeClient.newClientBuilder().withJsonMapper(new MyJsonMapper());\n+ * </pre>\n+ *\n+ * Null values won't pass in the JSON with variables: {@code { \"a\": \"b\" } }\n  *\n  * @see io.zeebe.client.impl.ZeebeObjectMapper\n  */\n public interface JsonMapper {\n \n   /**\n-   * Transform a JSON string to the typed object.\n+   * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n    *\n-   * @param json a JSON string\n-   * @param typeClass a class of the type to serialize\n-   * @param <T> a type of the returned object\n-   * @return a typed object from a JSON string\n+   * @param json the JSON string to deserialize\n+   * @param typeClass the Java type to deserialize into\n+   * @param <T> the type of the returned object\n+   * @return the POJO deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n   /**\n-   * Transform a JSON string to the map with string to object pairs\n+   * Deserializes a JSON string into a string to object map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n   /**\n-   * Transform a JSON string to the map with string to string pairs\n+   * Deserializes a JSON string into a string to string map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n   /**\n-   * Transform an object to a JSON string\n+   * Serializes an object (POJO, map, list, etc.) into an JSON string.\n    *\n-   * @param value an object that will be transformed\n-   * @return a JSON string\n+   * @param value the object to serialize\n+   * @return a JSON string serialized from the given object\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String toJson(final Object value);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n-   * io.zeebe.client.api.command.InternalClientException}\n+   * Validates a JSON string. If it is not valid throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}.\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n-   *     string\n+   * @param propertyName the property name that contains the JSON string\n+   * @param jsonInput the JSON string\n+   * @return the same JSON string, that passed in\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final String jsonInput);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * Validates a stream that contains a JSON string. If it is not valid throws a {@link\n    * io.zeebe.client.api.command.InternalClientException}\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a stream that contains a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n-   *     JSON string\n+   * @param propertyName a property name that contains the stream\n+   * @param jsonInput the stream that contains the JSON string\n+   * @return the JSON string from the stream\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjM4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557552388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param <T> a type of the returned object\n          \n          \n            \n               * @param <T> the type of the returned object", "author": "npepinpe", "createdAt": "2021-01-14T17:05:50Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object", "originalCommit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDE3Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894177", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-28T08:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "03b46323704fdd6829389d5ae24ee81e775be4d3", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex a65d98ea2..2ba8c1ff5 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -19,67 +19,102 @@ import java.io.InputStream;\n import java.util.Map;\n \n /**\n- * This interface is using to customize the way how objects will be transformed in JSON format.\n+ * This interface is using to customize the way how objects will be serialized and deserialized in\n+ * JSON format. The default implementation is {@link io.zeebe.client.impl.ZeebeObjectMapper}. This\n+ * interface could be implemented to customize the way how variables in the commands\n+ * serialized/deserialized. For example: there is such map with variables:\n+ *\n+ * <pre>\n+ *   final Map<String, Object> variables = new HashMap<>();\n+ *   variables.put(\"a\", \"b\");\n+ *   variables.put(\"c\", null);\n+ * </pre>\n+ *\n+ * And after doing this:\n+ *\n+ * <pre>\n+ *   public class MyJsonMapper implements JsonMapper {\n+ *\n+ *     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+ *\n+ *     public String toJson(final Object value) {\n+ *       return OBJECT_MAPPER.writeValueAsString(value);\n+ *     }\n+ *     ...\n+ *   }\n+ *   ...\n+ *   ZeebeClient.newClientBuilder().withJsonMapper(new MyJsonMapper());\n+ * </pre>\n+ *\n+ * Null values won't pass in the JSON with variables: {@code { \"a\": \"b\" } }\n  *\n  * @see io.zeebe.client.impl.ZeebeObjectMapper\n  */\n public interface JsonMapper {\n \n   /**\n-   * Transform a JSON string to the typed object.\n+   * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n    *\n-   * @param json a JSON string\n-   * @param typeClass a class of the type to serialize\n-   * @param <T> a type of the returned object\n-   * @return a typed object from a JSON string\n+   * @param json the JSON string to deserialize\n+   * @param typeClass the Java type to deserialize into\n+   * @param <T> the type of the returned object\n+   * @return the POJO deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n   /**\n-   * Transform a JSON string to the map with string to object pairs\n+   * Deserializes a JSON string into a string to object map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n   /**\n-   * Transform a JSON string to the map with string to string pairs\n+   * Deserializes a JSON string into a string to string map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n   /**\n-   * Transform an object to a JSON string\n+   * Serializes an object (POJO, map, list, etc.) into an JSON string.\n    *\n-   * @param value an object that will be transformed\n-   * @return a JSON string\n+   * @param value the object to serialize\n+   * @return a JSON string serialized from the given object\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String toJson(final Object value);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n-   * io.zeebe.client.api.command.InternalClientException}\n+   * Validates a JSON string. If it is not valid throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}.\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n-   *     string\n+   * @param propertyName the property name that contains the JSON string\n+   * @param jsonInput the JSON string\n+   * @return the same JSON string, that passed in\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final String jsonInput);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * Validates a stream that contains a JSON string. If it is not valid throws a {@link\n    * io.zeebe.client.api.command.InternalClientException}\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a stream that contains a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n-   *     JSON string\n+   * @param propertyName a property name that contains the stream\n+   * @param jsonInput the stream that contains the JSON string\n+   * @return the JSON string from the stream\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjYyNQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557552625", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return a typed object from a JSON string\n          \n          \n            \n               * @return the POJO deserialized from the given JSON string", "author": "npepinpe", "createdAt": "2021-01-14T17:06:09Z", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object\n+   * @return a typed object from a JSON string", "originalCommit": "2abd02ebe0b7c81f39fd29caab0986390fff13fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDIzMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894232", "bodyText": "Done", "author": "aivinog1", "createdAt": "2021-01-28T08:15:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "03b46323704fdd6829389d5ae24ee81e775be4d3", "chunk": "diff --git a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\nindex a65d98ea2..2ba8c1ff5 100644\n--- a/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n+++ b/clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java\n\n@@ -19,67 +19,102 @@ import java.io.InputStream;\n import java.util.Map;\n \n /**\n- * This interface is using to customize the way how objects will be transformed in JSON format.\n+ * This interface is using to customize the way how objects will be serialized and deserialized in\n+ * JSON format. The default implementation is {@link io.zeebe.client.impl.ZeebeObjectMapper}. This\n+ * interface could be implemented to customize the way how variables in the commands\n+ * serialized/deserialized. For example: there is such map with variables:\n+ *\n+ * <pre>\n+ *   final Map<String, Object> variables = new HashMap<>();\n+ *   variables.put(\"a\", \"b\");\n+ *   variables.put(\"c\", null);\n+ * </pre>\n+ *\n+ * And after doing this:\n+ *\n+ * <pre>\n+ *   public class MyJsonMapper implements JsonMapper {\n+ *\n+ *     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(Include.NON_NULL);\n+ *\n+ *     public String toJson(final Object value) {\n+ *       return OBJECT_MAPPER.writeValueAsString(value);\n+ *     }\n+ *     ...\n+ *   }\n+ *   ...\n+ *   ZeebeClient.newClientBuilder().withJsonMapper(new MyJsonMapper());\n+ * </pre>\n+ *\n+ * Null values won't pass in the JSON with variables: {@code { \"a\": \"b\" } }\n  *\n  * @see io.zeebe.client.impl.ZeebeObjectMapper\n  */\n public interface JsonMapper {\n \n   /**\n-   * Transform a JSON string to the typed object.\n+   * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n    *\n-   * @param json a JSON string\n-   * @param typeClass a class of the type to serialize\n-   * @param <T> a type of the returned object\n-   * @return a typed object from a JSON string\n+   * @param json the JSON string to deserialize\n+   * @param typeClass the Java type to deserialize into\n+   * @param <T> the type of the returned object\n+   * @return the POJO deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   <T> T fromJson(final String json, final Class<T> typeClass);\n \n   /**\n-   * Transform a JSON string to the map with string to object pairs\n+   * Deserializes a JSON string into a string to object map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, Object> fromJsonAsMap(final String json);\n \n   /**\n-   * Transform a JSON string to the map with string to string pairs\n+   * Deserializes a JSON string into a string to string map.\n    *\n-   * @param json a JSON string\n-   * @return a map is filled with JSON\n+   * @param json the JSON string to deserialize\n+   * @return the map deserialized from the given JSON string\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   Map<String, String> fromJsonAsStringMap(final String json);\n \n   /**\n-   * Transform an object to a JSON string\n+   * Serializes an object (POJO, map, list, etc.) into an JSON string.\n    *\n-   * @param value an object that will be transformed\n-   * @return a JSON string\n+   * @param value the object to serialize\n+   * @return a JSON string serialized from the given object\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String toJson(final Object value);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n-   * io.zeebe.client.api.command.InternalClientException}\n+   * Validates a JSON string. If it is not valid throws a {@link\n+   * io.zeebe.client.api.command.InternalClientException}.\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput is not a JSON\n-   *     string\n+   * @param propertyName the property name that contains the JSON string\n+   * @param jsonInput the JSON string\n+   * @return the same JSON string, that passed in\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final String jsonInput);\n \n   /**\n-   * Validate that a jsonInput is actually a JSON string. If not throws a {@link\n+   * Validates a stream that contains a JSON string. If it is not valid throws a {@link\n    * io.zeebe.client.api.command.InternalClientException}\n    *\n-   * @param propertyName a property name that contains jsonInput\n-   * @param jsonInput a stream that contains a JSON string\n-   * @return a JSON string\n-   * @throws io.zeebe.client.api.command.InternalClientException when a jsonInput doesn't contains a\n-   *     JSON string\n+   * @param propertyName a property name that contains the stream\n+   * @param jsonInput the stream that contains the JSON string\n+   * @return the JSON string from the stream\n+   * @throws io.zeebe.client.api.command.InternalClientException on serialization/deserialization\n+   *     error\n    */\n   String validateJson(final String propertyName, final InputStream jsonInput);\n }\n"}}, {"oid": "03b46323704fdd6829389d5ae24ee81e775be4d3", "url": "https://github.com/camunda-cloud/zeebe/commit/03b46323704fdd6829389d5ae24ee81e775be4d3", "message": "feat(clients/java): code review: improve JavaDocs", "committedDate": "2021-01-28T08:14:19Z", "type": "forcePushed"}, {"oid": "3d588fcec17611fa9890625c86781291997f925c", "url": "https://github.com/camunda-cloud/zeebe/commit/3d588fcec17611fa9890625c86781291997f925c", "message": "feat(clients/java): add capability to modify JSON serialization/deserialization", "committedDate": "2021-01-29T10:13:35Z", "type": "commit"}, {"oid": "3d588fcec17611fa9890625c86781291997f925c", "url": "https://github.com/camunda-cloud/zeebe/commit/3d588fcec17611fa9890625c86781291997f925c", "message": "feat(clients/java): add capability to modify JSON serialization/deserialization", "committedDate": "2021-01-29T10:13:35Z", "type": "forcePushed"}]}