{"pr_number": 5336, "pr_title": "Expose rocksdb ColumnFamilyOptions", "pr_createdAt": "2020-09-11T11:28:46Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5336", "timeline": [{"oid": "c6b43aee72bd971546c0937efd5d95e3b0eef8c2", "url": "https://github.com/camunda-cloud/zeebe/commit/c6b43aee72bd971546c0937efd5d95e3b0eef8c2", "message": "feat(broker): expose rocksdb ColumnFamilyOptions\n\nThis commit adds a new `database` config property to the `data` config.\nThis DatabaseCfg allows users to set an advanced config property named\n`columnFamilyOptions` which is a multiline properties definition.\n\nThese column family options can be used to overwrite our RocksDB\nColumnFamilyOption defaults. Use these options with care since you can\neasily break Zeebe by changing these values too much. However, it can be\ninteresting for more advanced users to optimise these values for better\nperformance on their specific hardware or for their specific usecase.\n\nPlease not that the expected property key names and values are derived\nfrom the C implementation. Please look at RocksDBs SCM repo for the\nfiles: cf_options.h and options_helper.cc.", "committedDate": "2020-09-11T11:31:34Z", "type": "forcePushed"}, {"oid": "b1c1d4201c7ed52f03391dc675cfba3d95ae6044", "url": "https://github.com/camunda-cloud/zeebe/commit/b1c1d4201c7ed52f03391dc675cfba3d95ae6044", "message": "feat(broker): expose rocksdb ColumnFamilyOptions\n\nThis commit adds a new `database` config property to the `data` config.\nThis DatabaseCfg allows users to set an advanced config property named\n`columnFamilyOptions` which is a multiline properties definition.\n\nThese column family options can be used to overwrite our RocksDB\nColumnFamilyOption defaults. Use these options with care since you can\neasily break Zeebe by changing these values too much. However, it can be\ninteresting for more advanced users to optimise these values for better\nperformance on their specific hardware or for their specific usecase.\n\nPlease not that the expected property key names and values are derived\nfrom the C implementation. Please look at RocksDBs SCM repo for the\nfiles: cf_options.h and options_helper.cc.", "committedDate": "2020-09-11T13:52:50Z", "type": "forcePushed"}, {"oid": "a000663a27c090be07b001a8c8943e1d8f2afe7e", "url": "https://github.com/camunda-cloud/zeebe/commit/a000663a27c090be07b001a8c8943e1d8f2afe7e", "message": "feat(broker): expose rocksdb ColumnFamilyOptions\n\nThis commit adds a new `database` config property to the `data` config.\nThis DatabaseCfg allows users to set an advanced config property named\n`columnFamilyOptions` which is a multiline properties definition.\n\nThese column family options can be used to overwrite our RocksDB\nColumnFamilyOption defaults. Use these options with care since you can\neasily break Zeebe by changing these values too much. However, it can be\ninteresting for more advanced users to optimise these values for better\nperformance on their specific hardware or for their specific usecase.\n\nPlease not that the expected property key names and values are derived\nfrom the C implementation. Please look at RocksDBs SCM repo for the\nfiles: cf_options.h and options_helper.cc.", "committedDate": "2020-09-14T09:19:55Z", "type": "forcePushed"}, {"oid": "c4834935cd91b16530631b68d4ed6e13a7262b9b", "url": "https://github.com/camunda-cloud/zeebe/commit/c4834935cd91b16530631b68d4ed6e13a7262b9b", "message": "feat(broker): expose rocksdb ColumnFamilyOptions\n\nThis commit adds a new `database` config property to the `data` config.\nThis DatabaseCfg allows users to set an advanced config property named\n`columnFamilyOptions` which is a multiline properties definition.\n\nThese column family options can be used to overwrite our RocksDB\nColumnFamilyOption defaults. Use these options with care since you can\neasily break Zeebe by changing these values too much. However, it can be\ninteresting for more advanced users to optimise these values for better\nperformance on their specific hardware or for their specific usecase.\n\nPlease not that the expected property key names and values are derived\nfrom the C implementation. Please look at RocksDBs SCM repo for the\nfiles: cf_options.h and options_helper.cc.", "committedDate": "2020-09-14T14:11:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNTg4NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r488535884", "bodyText": "I had to replace this global constant with a method to allow different ways of constructing the factory (for different tests). It is now replaced by a Singleton pattern", "author": "korthout", "createdAt": "2020-09-15T09:48:42Z", "path": "engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java", "diffHunk": "@@ -11,34 +11,68 @@\n import io.zeebe.db.ZeebeDbFactory;\n import io.zeebe.db.impl.rocksdb.ZeebeRocksDBMetricExporter;\n import io.zeebe.db.impl.rocksdb.ZeebeRocksDbFactory;\n+import java.util.Properties;\n import java.util.function.BiFunction;\n \n public final class DefaultZeebeDbFactory {\n \n+  public static final BiFunction<String, ZeebeDb<ZbColumnFamilies>, ZeebeRocksDBMetricExporter>\n+      DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n+          (partitionId, database) ->\n+              new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n+  private static ZeebeDbFactory<ZbColumnFamilies> instance;\n+\n   /**\n-   * The default zeebe database factory, which is used in most of the places except for the\n+   * Returns the default zeebe database factory, which is used in most of the places except for the\n    * exporters.\n+   *\n+   * @return the created zeebe database factory\n    */\n-  public static final ZeebeDbFactory<ZbColumnFamilies> DEFAULT_DB_FACTORY =\n-      defaultFactory(ZbColumnFamilies.class);\n+  public static ZeebeDbFactory<ZbColumnFamilies> defaultFactory() {", "originalCommit": "c4834935cd91b16530631b68d4ed6e13a7262b9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07ff018529d83643b1b400284b12d3339fc40caa", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java b/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\nindex b72c048f2..a092b2cf1 100644\n--- a/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\n+++ b/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\n\n@@ -20,7 +20,6 @@ public final class DefaultZeebeDbFactory {\n       DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n           (partitionId, database) ->\n               new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n-  private static ZeebeDbFactory<ZbColumnFamilies> instance;\n \n   /**\n    * Returns the default zeebe database factory, which is used in most of the places except for the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNjI1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r488536254", "bodyText": "Here you'll find the main change to apply the column family options config.", "author": "korthout", "createdAt": "2020-09-15T09:49:22Z", "path": "zb-db/src/main/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDbFactory.java", "diffHunk": "@@ -98,9 +111,28 @@ private ZeebeRocksDbFactory(final Class<ColumnFamilyType> columnFamilyTypeClass)\n     return columnFamilyDescriptors;\n   }\n \n-  private static ColumnFamilyOptions createColumnFamilyOptions() {\n-    // Options which are used on all column families\n-    return new ColumnFamilyOptions()\n-        .setCompactionPriority(CompactionPriority.OldestSmallestSeqFirst);\n+  /** @return Options which are used on all column families */\n+  public ColumnFamilyOptions createColumnFamilyOptions() {", "originalCommit": "c4834935cd91b16530631b68d4ed6e13a7262b9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTg0Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r489201843", "bodyText": "Does Singleton pattern fits here? What if defaultFactory was called twice with different parameters?", "author": "deepthidevaki", "createdAt": "2020-09-16T06:48:53Z", "path": "engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java", "diffHunk": "@@ -11,34 +11,68 @@\n import io.zeebe.db.ZeebeDbFactory;\n import io.zeebe.db.impl.rocksdb.ZeebeRocksDBMetricExporter;\n import io.zeebe.db.impl.rocksdb.ZeebeRocksDbFactory;\n+import java.util.Properties;\n import java.util.function.BiFunction;\n \n public final class DefaultZeebeDbFactory {\n \n+  public static final BiFunction<String, ZeebeDb<ZbColumnFamilies>, ZeebeRocksDBMetricExporter>\n+      DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n+          (partitionId, database) ->\n+              new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n+  private static ZeebeDbFactory<ZbColumnFamilies> instance;\n+\n   /**\n-   * The default zeebe database factory, which is used in most of the places except for the\n+   * Returns the default zeebe database factory, which is used in most of the places except for the\n    * exporters.\n+   *\n+   * @return the created zeebe database factory\n    */\n-  public static final ZeebeDbFactory<ZbColumnFamilies> DEFAULT_DB_FACTORY =\n-      defaultFactory(ZbColumnFamilies.class);\n+  public static ZeebeDbFactory<ZbColumnFamilies> defaultFactory() {\n+    return defaultFactory(new Properties());\n+  }\n \n-  public static final BiFunction<String, ZeebeDb<ZbColumnFamilies>, ZeebeRocksDBMetricExporter>\n-      DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n-          (partitionId, database) -> {\n-            return new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n-          };\n+  /**\n+   * Returns the default zeebe database factory, which is used in most of the places except for the\n+   * exporters.\n+   *\n+   * @param userProvidedColumnFamilyOptions additional column family options\n+   * @return the created zeebe database factory\n+   */\n+  public static synchronized ZeebeDbFactory<ZbColumnFamilies> defaultFactory(\n+      final Properties userProvidedColumnFamilyOptions) {\n+    if (instance == null) {", "originalCommit": "c4834935cd91b16530631b68d4ed6e13a7262b9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQyNjYzMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r489426633", "bodyText": "You're right. I thought about it a bit before. The idea I had then was to make sure we wouldn't construct multiple factories, similar to the global constant. This might've made sense in case tests re-used the same factory, but I don't think any do. The method is not called twice, but when it is it shouldn't be a big deal. I'll just allow creating a new factory for every call.", "author": "korthout", "createdAt": "2020-09-16T13:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwMTg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "07ff018529d83643b1b400284b12d3339fc40caa", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java b/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\nindex b72c048f2..a092b2cf1 100644\n--- a/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\n+++ b/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\n\n@@ -20,7 +20,6 @@ public final class DefaultZeebeDbFactory {\n       DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n           (partitionId, database) ->\n               new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n-  private static ZeebeDbFactory<ZbColumnFamilies> instance;\n \n   /**\n    * Returns the default zeebe database factory, which is used in most of the places except for the\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxOTU4OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r489219589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void columnFamilyOptionsCanBeOverwritten() {\n          \n          \n            \n              public void shouldOverwriteDefaultColumnFamilyOptions() {", "author": "deepthidevaki", "createdAt": "2020-09-16T07:24:35Z", "path": "zb-db/src/test/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDbFactoryTest.java", "diffHunk": "@@ -58,4 +62,32 @@ public void shouldCreateTwoNewDbs() throws Exception {\n     firstDb.close();\n     secondDb.close();\n   }\n+\n+  @Test\n+  public void columnFamilyOptionsCanBeOverwritten() {", "originalCommit": "c4834935cd91b16530631b68d4ed6e13a7262b9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07ff018529d83643b1b400284b12d3339fc40caa", "chunk": "diff --git a/zb-db/src/test/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDbFactoryTest.java b/zb-db/src/test/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDbFactoryTest.java\nindex 025c68c66..ca51a653a 100644\n--- a/zb-db/src/test/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDbFactoryTest.java\n+++ b/zb-db/src/test/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDbFactoryTest.java\n\n@@ -64,7 +64,7 @@ public final class ZeebeRocksDbFactoryTest {\n   }\n \n   @Test\n-  public void columnFamilyOptionsCanBeOverwritten() {\n+  public void shouldOverwriteDefaultColumnFamilyOptions() {\n     // given\n     final var customProperties = new Properties();\n     customProperties.put(\"write_buffer_size\", String.valueOf(ByteValue.ofMegabytes(16)));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNzA2NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r489237064", "bodyText": "May be assert other entries also.", "author": "deepthidevaki", "createdAt": "2020-09-16T07:54:33Z", "path": "broker/src/test/java/io/zeebe/broker/system/configuration/DatabaseCfgTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public final class DatabaseCfgTest {\n+\n+  public final Map<String, String> environment = new HashMap<>();\n+\n+  @Test\n+  public void shouldSetColumnFamilyOptionsConfig() {\n+    // when\n+    final BrokerCfg cfg = TestConfigReader.readConfig(\"database-cfg\", environment);\n+    final var zeebeDb = cfg.getData().getDatabase();\n+\n+    // then\n+    assertThat(zeebeDb.getColumnFamilyOptions()).containsEntry(\"foo_foo\", \"bar\");", "originalCommit": "c4834935cd91b16530631b68d4ed6e13a7262b9b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07ff018529d83643b1b400284b12d3339fc40caa", "chunk": "diff --git a/broker/src/test/java/io/zeebe/broker/system/configuration/DatabaseCfgTest.java b/broker/src/test/java/io/zeebe/broker/system/configuration/RocksdbCfgTest.java\nsimilarity index 63%\nrename from broker/src/test/java/io/zeebe/broker/system/configuration/DatabaseCfgTest.java\nrename to broker/src/test/java/io/zeebe/broker/system/configuration/RocksdbCfgTest.java\nindex 3d7a06ee4..8a74f5225 100644\n--- a/broker/src/test/java/io/zeebe/broker/system/configuration/DatabaseCfgTest.java\n+++ b/broker/src/test/java/io/zeebe/broker/system/configuration/RocksdbCfgTest.java\n\n@@ -13,17 +13,19 @@ import java.util.HashMap;\n import java.util.Map;\n import org.junit.Test;\n \n-public final class DatabaseCfgTest {\n+public final class RocksdbCfgTest {\n \n   public final Map<String, String> environment = new HashMap<>();\n \n   @Test\n   public void shouldSetColumnFamilyOptionsConfig() {\n     // when\n-    final BrokerCfg cfg = TestConfigReader.readConfig(\"database-cfg\", environment);\n-    final var zeebeDb = cfg.getData().getDatabase();\n+    final BrokerCfg cfg = TestConfigReader.readConfig(\"rocksdb-cfg\", environment);\n+    final var rocksdb = cfg.getData().getRocksdb();\n \n     // then\n-    assertThat(zeebeDb.getColumnFamilyOptions()).containsEntry(\"foo_foo\", \"bar\");\n+    final var columnFamilyOptions = rocksdb.getColumnFamilyOptions();\n+    assertThat(columnFamilyOptions).containsEntry(\"compaction_pri\", \"kOldestSmallestSeqFirst\");\n+    assertThat(columnFamilyOptions).containsEntry(\"write_buffer_size\", \"67108864\");\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk5NDAzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5336#discussion_r489994036", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static synchronized ZeebeDbFactory<ZbColumnFamilies> defaultFactory(\n          \n          \n            \n              public static ZeebeDbFactory<ZbColumnFamilies> defaultFactory(", "author": "deepthidevaki", "createdAt": "2020-09-17T06:13:47Z", "path": "engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java", "diffHunk": "@@ -11,34 +11,64 @@\n import io.zeebe.db.ZeebeDbFactory;\n import io.zeebe.db.impl.rocksdb.ZeebeRocksDBMetricExporter;\n import io.zeebe.db.impl.rocksdb.ZeebeRocksDbFactory;\n+import java.util.Properties;\n import java.util.function.BiFunction;\n \n public final class DefaultZeebeDbFactory {\n \n+  public static final BiFunction<String, ZeebeDb<ZbColumnFamilies>, ZeebeRocksDBMetricExporter>\n+      DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n+          (partitionId, database) ->\n+              new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n+\n   /**\n-   * The default zeebe database factory, which is used in most of the places except for the\n+   * Returns the default zeebe database factory, which is used in most of the places except for the\n    * exporters.\n+   *\n+   * @return the created zeebe database factory\n    */\n-  public static final ZeebeDbFactory<ZbColumnFamilies> DEFAULT_DB_FACTORY =\n-      defaultFactory(ZbColumnFamilies.class);\n+  public static ZeebeDbFactory<ZbColumnFamilies> defaultFactory() {\n+    return defaultFactory(new Properties());\n+  }\n \n-  public static final BiFunction<String, ZeebeDb<ZbColumnFamilies>, ZeebeRocksDBMetricExporter>\n-      DEFAULT_DB_METRIC_EXPORTER_FACTORY =\n-          (partitionId, database) -> {\n-            return new ZeebeRocksDBMetricExporter<>(partitionId, database, ZbColumnFamilies.class);\n-          };\n+  /**\n+   * Returns the default zeebe database factory, which is used in most of the places except for the\n+   * exporters.\n+   *\n+   * @param userProvidedColumnFamilyOptions additional column family options\n+   * @return the created zeebe database factory\n+   */\n+  public static synchronized ZeebeDbFactory<ZbColumnFamilies> defaultFactory(", "originalCommit": "beda16d3be821d74391ecbd1caee86c12f1c7716", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "07ff018529d83643b1b400284b12d3339fc40caa", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java b/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\nindex 3566e0a6f..a092b2cf1 100644\n--- a/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\n+++ b/engine/src/main/java/io/zeebe/engine/state/DefaultZeebeDbFactory.java\n\n@@ -38,7 +38,7 @@ public final class DefaultZeebeDbFactory {\n    * @param userProvidedColumnFamilyOptions additional column family options\n    * @return the created zeebe database factory\n    */\n-  public static synchronized ZeebeDbFactory<ZbColumnFamilies> defaultFactory(\n+  public static ZeebeDbFactory<ZbColumnFamilies> defaultFactory(\n       final Properties userProvidedColumnFamilyOptions) {\n     return defaultFactory(ZbColumnFamilies.class, userProvidedColumnFamilyOptions);\n   }\n"}}, {"oid": "07ff018529d83643b1b400284b12d3339fc40caa", "url": "https://github.com/camunda-cloud/zeebe/commit/07ff018529d83643b1b400284b12d3339fc40caa", "message": "feat(broker): expose rocksdb ColumnFamilyOptions\n\nThis commit adds a new `rocksdb` config property to the `data` config.\nThis RocksdbCfg allows users to set an advanced config property named\n`columnFamilyOptions` which is a multiline properties definition.\n\nThese column family options can be used to overwrite our RocksDB\nColumnFamilyOption defaults. Use these options with care since you can\neasily break Zeebe by changing these values too much. However, it can be\ninteresting for more advanced users to optimise these values for better\nperformance on their specific hardware or for their specific usecase.\n\nPlease not that the expected property key names and values are derived\nfrom the C implementation. Please look at RocksDBs SCM repo for the\nfiles: cf_options.h and options_helper.cc.\n\nCo-authored-by: Deepthi Devaki Akkoorath <deepthidevaki@users.noreply.github.com>", "committedDate": "2020-09-17T11:15:03Z", "type": "commit"}, {"oid": "07ff018529d83643b1b400284b12d3339fc40caa", "url": "https://github.com/camunda-cloud/zeebe/commit/07ff018529d83643b1b400284b12d3339fc40caa", "message": "feat(broker): expose rocksdb ColumnFamilyOptions\n\nThis commit adds a new `rocksdb` config property to the `data` config.\nThis RocksdbCfg allows users to set an advanced config property named\n`columnFamilyOptions` which is a multiline properties definition.\n\nThese column family options can be used to overwrite our RocksDB\nColumnFamilyOption defaults. Use these options with care since you can\neasily break Zeebe by changing these values too much. However, it can be\ninteresting for more advanced users to optimise these values for better\nperformance on their specific hardware or for their specific usecase.\n\nPlease not that the expected property key names and values are derived\nfrom the C implementation. Please look at RocksDBs SCM repo for the\nfiles: cf_options.h and options_helper.cc.\n\nCo-authored-by: Deepthi Devaki Akkoorath <deepthidevaki@users.noreply.github.com>", "committedDate": "2020-09-17T11:15:03Z", "type": "forcePushed"}]}