{"pr_number": 3923, "pr_title": "fix(broker): broadcast snapshots to static set of followers", "pr_createdAt": "2020-02-25T17:09:00Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3923", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0ODc2Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384448763", "bodyText": "Could we remove the Raft prefix, since it is not really related to that right?", "author": "Zelldon", "createdAt": "2020-02-26T12:00:42Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+\n+/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n+public interface RaftMessagingService {", "originalCommit": "c1cbeba2b6a6802360ea607151465004d4089763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NjIzOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384476238", "bodyText": "I see what you mean - it's more the partition messaging service, I guess. Will do", "author": "npepinpe", "createdAt": "2020-02-26T13:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0ODc2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "163dd7c2372b43689d4d1b39345bdff1f8ec0ae9", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionMessagingService.java\nsimilarity index 72%\nrename from broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java\nrename to broker/src/main/java/io/zeebe/broker/system/partitions/PartitionMessagingService.java\nindex 78c7abe577..af47436998 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionMessagingService.java\n\n@@ -11,12 +11,13 @@ import java.nio.ByteBuffer;\n import java.util.concurrent.Executor;\n import java.util.function.Consumer;\n \n-/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n-public interface RaftMessagingService {\n+/** Abstracts away messaging to other members of a partition - add operations as needed. */\n+public interface PartitionMessagingService {\n \n   /**\n-   * Subscribes to a given subject - if another Raft member sends a message on this topic, the\n-   * consumer will be notified with the given payload. Each call is considered a new subscription.\n+   * Subscribes to a given subject - if another member of the partition sends a message on this\n+   * topic, the consumer will be notified with the given payload. Each call is considered a new\n+   * subscription.\n    *\n    * @param subject the subject to subscribe to\n    * @param consumer the consumer which handles the payload\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0OTAxNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384449016", "bodyText": "just member in the cluster - whether it is a raft member is more implementation specific or?", "author": "Zelldon", "createdAt": "2020-02-26T12:01:12Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+\n+/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n+public interface RaftMessagingService {\n+\n+  /**\n+   * Subscribes to a given subject - if another Raft member sends a message on this topic, the", "originalCommit": "c1cbeba2b6a6802360ea607151465004d4089763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MjU3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384482579", "bodyText": "It's another member in the same partition, I'll correct the naming", "author": "npepinpe", "createdAt": "2020-02-26T13:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0OTAxNg=="}], "type": "inlineReview", "revised_code": {"commit": "163dd7c2372b43689d4d1b39345bdff1f8ec0ae9", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionMessagingService.java\nsimilarity index 72%\nrename from broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java\nrename to broker/src/main/java/io/zeebe/broker/system/partitions/PartitionMessagingService.java\nindex 78c7abe577..af47436998 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/PartitionMessagingService.java\n\n@@ -11,12 +11,13 @@ import java.nio.ByteBuffer;\n import java.util.concurrent.Executor;\n import java.util.function.Consumer;\n \n-/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n-public interface RaftMessagingService {\n+/** Abstracts away messaging to other members of a partition - add operations as needed. */\n+public interface PartitionMessagingService {\n \n   /**\n-   * Subscribes to a given subject - if another Raft member sends a message on this topic, the\n-   * consumer will be notified with the given payload. Each call is considered a new subscription.\n+   * Subscribes to a given subject - if another member of the partition sends a message on this\n+   * topic, the consumer will be notified with the given payload. Each call is considered a new\n+   * subscription.\n    *\n    * @param subject the subject to subscribe to\n    * @param consumer the consumer which handles the payload\n"}}, {"oid": "163dd7c2372b43689d4d1b39345bdff1f8ec0ae9", "url": "https://github.com/camunda-cloud/zeebe/commit/163dd7c2372b43689d4d1b39345bdff1f8ec0ae9", "message": "chore(broker): remove reference to Raft in favor of Partition", "committedDate": "2020-02-26T13:15:21Z", "type": "forcePushed"}, {"oid": "15f894f8faee8dc1485e2025b3603550505a3816", "url": "https://github.com/camunda-cloud/zeebe/commit/15f894f8faee8dc1485e2025b3603550505a3816", "message": "chore(qa): add more snapshot replication integration tests", "committedDate": "2020-03-06T10:54:56Z", "type": "forcePushed"}, {"oid": "8b2964183f3bcde6289245ef7a020bedb8bf7aea", "url": "https://github.com/camunda-cloud/zeebe/commit/8b2964183f3bcde6289245ef7a020bedb8bf7aea", "message": "chore(qa): add more snapshot replication integration tests", "committedDate": "2020-03-06T12:05:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388932182", "bodyText": "This only works when all nodes configured as initial entries right?", "author": "Zelldon", "createdAt": "2020-03-06T14:27:14Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.atomix.cluster.Member;\n+import io.atomix.cluster.MemberId;\n+import io.atomix.cluster.messaging.ClusterCommunicationService;\n+import io.zeebe.broker.system.partitions.PartitionMessagingService;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class AtomixPartitionMessagingService implements PartitionMessagingService {\n+  private final ClusterCommunicationService communicationService;\n+  private final ClusterMembershipService clusterMembershipService;\n+  private final Set<MemberId> otherMembers;\n+\n+  public AtomixPartitionMessagingService(\n+      final ClusterCommunicationService communicationService,\n+      final ClusterMembershipService clusterMembershipService,\n+      final Collection<MemberId> members) {\n+    this.communicationService = communicationService;\n+    this.clusterMembershipService = clusterMembershipService;\n+    this.otherMembers = getOtherMemberIds(clusterMembershipService, members);\n+  }\n+\n+  @Override\n+  public void subscribe(\n+      final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {\n+    communicationService.subscribe(subject, consumer, executor);\n+  }\n+\n+  @Override\n+  public void broadcast(final String subject, final ByteBuffer payload) {\n+    final var reachableMembers =\n+        otherMembers.stream().filter(this::isReachable).collect(Collectors.toUnmodifiableSet());\n+\n+    communicationService.multicast(subject, payload, reachableMembers);\n+  }\n+\n+  @Override\n+  public void unsubscribe(final String subject) {\n+    communicationService.unsubscribe(subject);\n+  }\n+\n+  private Set<MemberId> getOtherMemberIds(\n+      final ClusterMembershipService clusterMembershipService, final Collection<MemberId> members) {\n+    final var localMemberId = clusterMembershipService.getLocalMember().id();", "originalCommit": "8b2964183f3bcde6289245ef7a020bedb8bf7aea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzNzkwNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388937906", "bodyText": "Sort of - it assumes that the set of members in the Raft is static, so it's really just filtering out the local member. But this is independent of the discovery protocol.", "author": "npepinpe", "createdAt": "2020-03-06T14:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzOTcwMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388939700", "bodyText": "You use the ClusterMemberShipService to get the members or?", "author": "Zelldon", "createdAt": "2020-03-06T14:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1MjkxMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388952913", "bodyText": "It's used initially to get the local member ID, and later to check if a member is reachable. So this assumes member IDs are static, and the Raft configuration is also static - but whether they are reachable or not is dynamic and relies on SWIM.", "author": "npepinpe", "createdAt": "2020-03-06T15:01:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "fabc605aa262d820b3bb43c18d787331891b087d", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java b/broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java\ndeleted file mode 100644\nindex 69f8af1c48..0000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java\n+++ /dev/null\n\n@@ -1,72 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.partitions.impl;\n-\n-import io.atomix.cluster.ClusterMembershipService;\n-import io.atomix.cluster.Member;\n-import io.atomix.cluster.MemberId;\n-import io.atomix.cluster.messaging.ClusterCommunicationService;\n-import io.zeebe.broker.system.partitions.PartitionMessagingService;\n-import java.nio.ByteBuffer;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.Executor;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-public class AtomixPartitionMessagingService implements PartitionMessagingService {\n-  private final ClusterCommunicationService communicationService;\n-  private final ClusterMembershipService clusterMembershipService;\n-  private final Set<MemberId> otherMembers;\n-\n-  public AtomixPartitionMessagingService(\n-      final ClusterCommunicationService communicationService,\n-      final ClusterMembershipService clusterMembershipService,\n-      final Collection<MemberId> members) {\n-    this.communicationService = communicationService;\n-    this.clusterMembershipService = clusterMembershipService;\n-    this.otherMembers = getOtherMemberIds(clusterMembershipService, members);\n-  }\n-\n-  @Override\n-  public void subscribe(\n-      final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {\n-    communicationService.subscribe(subject, consumer, executor);\n-  }\n-\n-  @Override\n-  public void broadcast(final String subject, final ByteBuffer payload) {\n-    final var reachableMembers =\n-        otherMembers.stream().filter(this::isReachable).collect(Collectors.toUnmodifiableSet());\n-\n-    communicationService.multicast(subject, payload, reachableMembers);\n-  }\n-\n-  @Override\n-  public void unsubscribe(final String subject) {\n-    communicationService.unsubscribe(subject);\n-  }\n-\n-  private Set<MemberId> getOtherMemberIds(\n-      final ClusterMembershipService clusterMembershipService, final Collection<MemberId> members) {\n-    final var localMemberId = clusterMembershipService.getLocalMember().id();\n-    final var eligibleMembers = new HashSet<>(members);\n-    eligibleMembers.remove(localMemberId);\n-\n-    return Collections.unmodifiableSet(eligibleMembers);\n-  }\n-\n-  private boolean isReachable(final MemberId memberId) {\n-    return Optional.ofNullable(clusterMembershipService.getMember(memberId))\n-        .map(Member::isReachable)\n-        .orElse(false);\n-  }\n-}\n"}}, {"oid": "fabc605aa262d820b3bb43c18d787331891b087d", "url": "https://github.com/camunda-cloud/zeebe/commit/fabc605aa262d820b3bb43c18d787331891b087d", "message": "chore(engine): add serialization to ByteBuffer", "committedDate": "2020-03-11T11:36:28Z", "type": "commit"}, {"oid": "59bc0c7325088293b1c630315f22e8925a352181", "url": "https://github.com/camunda-cloud/zeebe/commit/59bc0c7325088293b1c630315f22e8925a352181", "message": "chore(qa): add more snapshot replication integration tests", "committedDate": "2020-03-11T11:41:27Z", "type": "forcePushed"}, {"oid": "1bfb1449b000ca8b9c11bda694bcd3aebcecb1c3", "url": "https://github.com/camunda-cloud/zeebe/commit/1bfb1449b000ca8b9c11bda694bcd3aebcecb1c3", "message": "chore(broker): broadcast snapshots to static set of followers\n\n- abstracts away Atomix from the StateReplication by hiding it behind a\n  thin RaftMessagingService interface, which allows sending messages to\n  other Raft members", "committedDate": "2020-03-11T16:24:26Z", "type": "commit"}, {"oid": "2d55c306db8625b59035ba5c2c4efafdb4892ac9", "url": "https://github.com/camunda-cloud/zeebe/commit/2d55c306db8625b59035ba5c2c4efafdb4892ac9", "message": "chore(qa): add more snapshot replication integration tests", "committedDate": "2020-03-11T16:24:26Z", "type": "commit"}, {"oid": "2d55c306db8625b59035ba5c2c4efafdb4892ac9", "url": "https://github.com/camunda-cloud/zeebe/commit/2d55c306db8625b59035ba5c2c4efafdb4892ac9", "message": "chore(qa): add more snapshot replication integration tests", "committedDate": "2020-03-11T16:24:26Z", "type": "forcePushed"}]}