{"pr_number": 5408, "pr_title": "Admin api for brokers", "pr_createdAt": "2020-09-23T15:12:46Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/5408", "timeline": [{"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "url": "https://github.com/camunda-cloud/zeebe/commit/42c811630054c530ed3f0533f4da29b1e04d1ae9", "message": "chore(broker): fix sonarlint", "committedDate": "2020-09-23T15:16:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MzgxNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495683817", "bodyText": "Let's discuss if we want to implement this as a Spring Boot Actuator instead.\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-custom", "author": "saig0", "createdAt": "2020-09-28T04:31:54Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.SpringBrokerBridge;\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java\ndeleted file mode 100644\nindex 980f151fee..0000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.management;\n-\n-import io.zeebe.broker.SpringBrokerBridge;\n-import java.util.Map;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-\n-@RestController\n-@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")\n-public class BrokerAdminServiceEndpoint {\n-\n-  private static final String BASE_URI = \"zeebe-admin\";\n-  private static final String BROKER_PAUSE_PROCESSING_URI = BASE_URI + \"/pause-processing\";\n-  private static final String BROKER_UNPAUSE_PROCESSING_URI = BASE_URI + \"/resume-processing\";\n-  private static final String BROKER_TAKE_SNAPSHOTS_URI = BASE_URI + \"/take-snapshot\";\n-  private static final String BROKER_PREPARE_UPGRADE_URI = BASE_URI + \"/prepare-upgrade\";\n-  private static final String BROKER_GET_STATUS_URI = BASE_URI + \"/partition-status\";\n-\n-  @Autowired private SpringBrokerBridge springBrokerBridge;\n-\n-  @PostMapping(value = BROKER_PAUSE_PROCESSING_URI)\n-  public Map<Integer, PartitionStatus> pauseProcessing() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::pauseStreamProcessing);\n-    return currentStatus();\n-  }\n-\n-  @PostMapping(value = BROKER_UNPAUSE_PROCESSING_URI)\n-  public Map<Integer, PartitionStatus> resumeProcessing() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::resumeStreamProcessing);\n-    return currentStatus();\n-  }\n-\n-  @PostMapping(value = BROKER_TAKE_SNAPSHOTS_URI)\n-  public Map<Integer, PartitionStatus> takeSnapshot() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::takeSnapshot);\n-    return currentStatus();\n-  }\n-\n-  @PostMapping(value = BROKER_PREPARE_UPGRADE_URI)\n-  public Map<Integer, PartitionStatus> prepareForUpgrade() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::prepareForUpgrade);\n-    return currentStatus();\n-  }\n-\n-  @GetMapping(value = BROKER_GET_STATUS_URI)\n-  public Map<Integer, PartitionStatus> currentStatus() {\n-    return springBrokerBridge\n-        .getAdminService()\n-        .map(BrokerAdminService::getPartitionStatus)\n-        .orElse(Map.of());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NDM5Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495684396", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              final List<ZeebePartition> partitions;\n          \n          \n            \n              private final List<ZeebePartition> partitions;", "author": "saig0", "createdAt": "2020-09-28T04:34:57Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 6c1d33009e..182d4efc8d 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -26,12 +26,12 @@ import org.slf4j.Logger;\n  * A service that exposes interface to control some of the core functionalities of the broker such\n  * as * Pause stream processing * Force take a snapshot\n  *\n- * <p>This is intended to be used only by experts\n+ * <p>This is intended to be used only by advanced users\n  */\n public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  final List<ZeebePartition> partitions;\n+  private final List<ZeebePartition> partitions;\n \n   public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n     this.partitions = partitions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjM2MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495686361", "bodyText": "It is not very likely but we should handle the exceptional case.", "author": "saig0", "createdAt": "2020-09-28T04:44:59Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;\n+\n+  public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n+    this.partitions = partitions;\n+  }\n+\n+  @Override\n+  public void pauseStreamProcessing() {\n+    actor.call(this::pauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void resumeStreamProcessing() {\n+    actor.call(this::unpauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void takeSnapshot() {\n+    actor.call(() -> takeSnapshotOnAllPartitions(partitions));\n+  }\n+\n+  @Override\n+  public void prepareForUpgrade() {\n+    actor.call(this::prepareAllPartitionsForSafeUpgrade);\n+  }\n+\n+  @Override\n+  public Map<Integer, PartitionStatus> getPartitionStatus() {\n+    final CompletableFuture<Map<Integer, PartitionStatus>> future = new CompletableFuture<>();\n+    final Map<Integer, PartitionStatus> partitionStatuses = new ConcurrentHashMap<>();\n+    actor.call(\n+        () -> {\n+          final var statusFutures =\n+              partitions.stream()\n+                  .map(\n+                      partition ->\n+                          getPartitionStatus(partition)\n+                              .whenComplete(\n+                                  (ps, error) ->\n+                                      partitionStatuses.put(partition.getPartitionId(), ps)))\n+                  .collect(Collectors.toList());\n+          CompletableFuture.allOf(statusFutures.toArray(CompletableFuture[]::new))\n+              .thenAccept(r -> future.complete(partitionStatuses));\n+        });\n+    return future.join();\n+  }\n+\n+  private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n+    final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n+    getStreamProcessor(partition)\n+        .onComplete(\n+            (streamProcessor, throwable) ->\n+                streamProcessor.ifPresentOrElse(\n+                    sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n+                    () -> getFollowerPartitionStatus(partition, partitionStatus)));", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzOTY5Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r496539692", "bodyText": "Would it be ok if we return a PartitionStatus with all null values as an error response?", "author": "deepthidevaki", "createdAt": "2020-09-29T08:40:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjM2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MzM2Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r496543363", "bodyText": "Yes. It would be an option. Or, just throwing an exception that would lead to status code 500.", "author": "saig0", "createdAt": "2020-09-29T08:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjM2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 6c1d33009e..182d4efc8d 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -26,12 +26,12 @@ import org.slf4j.Logger;\n  * A service that exposes interface to control some of the core functionalities of the broker such\n  * as * Pause stream processing * Force take a snapshot\n  *\n- * <p>This is intended to be used only by experts\n+ * <p>This is intended to be used only by advanced users\n  */\n public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  final List<ZeebePartition> partitions;\n+  private final List<ZeebePartition> partitions;\n \n   public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n     this.partitions = partitions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjQzNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495686436", "bodyText": "If getPartitionStatus() can be completed exceptionally then we need to handle it.", "author": "saig0", "createdAt": "2020-09-28T04:45:14Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;\n+\n+  public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n+    this.partitions = partitions;\n+  }\n+\n+  @Override\n+  public void pauseStreamProcessing() {\n+    actor.call(this::pauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void resumeStreamProcessing() {\n+    actor.call(this::unpauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void takeSnapshot() {\n+    actor.call(() -> takeSnapshotOnAllPartitions(partitions));\n+  }\n+\n+  @Override\n+  public void prepareForUpgrade() {\n+    actor.call(this::prepareAllPartitionsForSafeUpgrade);\n+  }\n+\n+  @Override\n+  public Map<Integer, PartitionStatus> getPartitionStatus() {\n+    final CompletableFuture<Map<Integer, PartitionStatus>> future = new CompletableFuture<>();\n+    final Map<Integer, PartitionStatus> partitionStatuses = new ConcurrentHashMap<>();\n+    actor.call(\n+        () -> {\n+          final var statusFutures =\n+              partitions.stream()\n+                  .map(\n+                      partition ->\n+                          getPartitionStatus(partition)\n+                              .whenComplete(\n+                                  (ps, error) ->\n+                                      partitionStatuses.put(partition.getPartitionId(), ps)))", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 6c1d33009e..182d4efc8d 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -26,12 +26,12 @@ import org.slf4j.Logger;\n  * A service that exposes interface to control some of the core functionalities of the broker such\n  * as * Pause stream processing * Force take a snapshot\n  *\n- * <p>This is intended to be used only by experts\n+ * <p>This is intended to be used only by advanced users\n  */\n public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  final List<ZeebePartition> partitions;\n+  private final List<ZeebePartition> partitions;\n \n   public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n     this.partitions = partitions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4ODgzMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495688830", "bodyText": "Why do we need to exclude these fields for a follower partition? I see a value in having the same result structure.", "author": "saig0", "createdAt": "2020-09-28T04:56:21Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/PartitionStatus.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import io.atomix.raft.RaftServer.Role;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;\n+\n+public final class PartitionStatus {\n+\n+  private final Role role;\n+  private final String snapshotId;\n+\n+  @JsonInclude(Include.NON_NULL)\n+  private final Long processedPosition;\n+\n+  @JsonInclude(Include.NON_NULL)\n+  private final Long processedPositionInSnapshot;\n+\n+  @JsonInclude(Include.NON_NULL)\n+  private final Phase streamProcessorPhase;", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzODMwNg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r496538306", "bodyText": "You are right. I can include them back.", "author": "deepthidevaki", "createdAt": "2020-09-29T08:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4ODgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/PartitionStatus.java b/broker/src/main/java/io/zeebe/broker/system/management/PartitionStatus.java\nindex b579ee8b4b..f994b7923d 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/PartitionStatus.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/PartitionStatus.java\n\n@@ -7,8 +7,6 @@\n  */\n package io.zeebe.broker.system.management;\n \n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import io.atomix.raft.RaftServer.Role;\n import io.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTI5Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495691292", "bodyText": "Here, we don't wait until the pause command was processed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public ActorFuture<Void> pauseProcessing() {\n          \n          \n            \n                final CompletableActorFuture completed = new CompletableActorFuture();\n          \n          \n            \n                actor.call(\n          \n          \n            \n                    () -> {\n          \n          \n            \n                      isPaused = true;\n          \n          \n            \n                      if (streamProcessor != null) {\n          \n          \n            \n                        streamProcessor\n          \n          \n            \n                            .pauseProcessing()\n          \n          \n            \n                            .onComplete(\n          \n          \n            \n                                (result, error) -> {\n          \n          \n            \n                                  if (error == null) {\n          \n          \n            \n                                    completed.complete(null);\n          \n          \n            \n                                  } else {\n          \n          \n            \n                                    completed.complete(error);\n          \n          \n            \n                                  }\n          \n          \n            \n                                });\n          \n          \n            \n                      }\n          \n          \n            \n                      return completed.completed(null);\n          \n          \n            \n                    });\n          \n          \n            \n                return completed;\n          \n          \n            \n              }\n          \n          \n            \n              public ActorFuture<Void> pauseProcessing() {\n          \n          \n            \n                final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n          \n          \n            \n                actor.call(\n          \n          \n            \n                    () -> {\n          \n          \n            \n                      isPaused = true;\n          \n          \n            \n                      if (streamProcessor != null) {\n          \n          \n            \n                        streamProcessor.pauseProcessing().onComplete(completed);\n          \n          \n            \n                      } else {\n          \n          \n            \n                        completed.complete(null);\n          \n          \n            \n                      }\n          \n          \n            \n                    });\n          \n          \n            \n                return completed;\n          \n          \n            \n              }", "author": "saig0", "createdAt": "2020-09-28T05:07:29Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -781,13 +790,45 @@ public void onDiskSpaceAvailable() {\n     actor.call(\n         () -> {\n           diskSpaceAvailable = true;\n-          if (streamProcessor != null) {\n+          if (streamProcessor != null && !isPaused()) {\n             LOG.info(\"Disk space usage is below threshold. Resuming stream processor.\");\n             streamProcessor.resumeProcessing();\n           }\n         });\n   }\n \n+  public ActorFuture<Void> pauseProcessing() {\n+    final CompletableActorFuture completed = new CompletableActorFuture();\n+    actor.call(\n+        () -> {\n+          isPaused = true;\n+          if (streamProcessor != null) {\n+            streamProcessor\n+                .pauseProcessing()\n+                .onComplete(\n+                    (result, error) -> {\n+                      if (error == null) {\n+                        completed.complete(null);\n+                      } else {\n+                        completed.complete(error);\n+                      }\n+                    });\n+          }\n+          return completed.completed(null);\n+        });\n+    return completed;\n+  }", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex 9b62d55b35..4008a1ee75 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -798,23 +798,15 @@ public final class ZeebePartition extends Actor\n   }\n \n   public ActorFuture<Void> pauseProcessing() {\n-    final CompletableActorFuture completed = new CompletableActorFuture();\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n     actor.call(\n         () -> {\n           isPaused = true;\n           if (streamProcessor != null) {\n-            streamProcessor\n-                .pauseProcessing()\n-                .onComplete(\n-                    (result, error) -> {\n-                      if (error == null) {\n-                        completed.complete(null);\n-                      } else {\n-                        completed.complete(error);\n-                      }\n-                    });\n+            streamProcessor.pauseProcessing().onComplete(completed);\n+          } else {\n+            completed.complete(null);\n           }\n-          return completed.completed(null);\n         });\n     return completed;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5Nzc2MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495697760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final CompletableFuture partitionStatus) {\n          \n          \n            \n                  final CompletableFuture<<PartitionStatus> partitionStatus) {", "author": "saig0", "createdAt": "2020-09-28T05:34:31Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;\n+\n+  public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n+    this.partitions = partitions;\n+  }\n+\n+  @Override\n+  public void pauseStreamProcessing() {\n+    actor.call(this::pauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void resumeStreamProcessing() {\n+    actor.call(this::unpauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void takeSnapshot() {\n+    actor.call(() -> takeSnapshotOnAllPartitions(partitions));\n+  }\n+\n+  @Override\n+  public void prepareForUpgrade() {\n+    actor.call(this::prepareAllPartitionsForSafeUpgrade);\n+  }\n+\n+  @Override\n+  public Map<Integer, PartitionStatus> getPartitionStatus() {\n+    final CompletableFuture<Map<Integer, PartitionStatus>> future = new CompletableFuture<>();\n+    final Map<Integer, PartitionStatus> partitionStatuses = new ConcurrentHashMap<>();\n+    actor.call(\n+        () -> {\n+          final var statusFutures =\n+              partitions.stream()\n+                  .map(\n+                      partition ->\n+                          getPartitionStatus(partition)\n+                              .whenComplete(\n+                                  (ps, error) ->\n+                                      partitionStatuses.put(partition.getPartitionId(), ps)))\n+                  .collect(Collectors.toList());\n+          CompletableFuture.allOf(statusFutures.toArray(CompletableFuture[]::new))\n+              .thenAccept(r -> future.complete(partitionStatuses));\n+        });\n+    return future.join();\n+  }\n+\n+  private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n+    final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n+    getStreamProcessor(partition)\n+        .onComplete(\n+            (streamProcessor, throwable) ->\n+                streamProcessor.ifPresentOrElse(\n+                    sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n+                    () -> getFollowerPartitionStatus(partition, partitionStatus)));\n+    return partitionStatus;\n+  }\n+\n+  private void getFollowerPartitionStatus(\n+      final ZeebePartition partition, final CompletableFuture<PartitionStatus> partitionStatus) {\n+    final var snapshotId = getSnapshotId(partition);\n+    final var status = PartitionStatus.ofFollower(snapshotId);\n+    partitionStatus.complete(status);\n+  }\n+\n+  private void getLeaderPartitionStatus(\n+      final ZeebePartition partition,\n+      final StreamProcessor streamProcessor,\n+      final CompletableFuture partitionStatus) {", "originalCommit": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\nindex 6c1d33009e..182d4efc8d 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java\n\n@@ -26,12 +26,12 @@ import org.slf4j.Logger;\n  * A service that exposes interface to control some of the core functionalities of the broker such\n  * as * Pause stream processing * Force take a snapshot\n  *\n- * <p>This is intended to be used only by experts\n+ * <p>This is intended to be used only by advanced users\n  */\n public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-  final List<ZeebePartition> partitions;\n+  private final List<ZeebePartition> partitions;\n \n   public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n     this.partitions = partitions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0MDMyNw==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r497240327", "bodyText": "It would be nice to give the parameter a real name (e.g. operation). Otherwise, the endpoint description looks odd (\"zeebeAdmin-arg0\":{\"href\":\"http://localhost:9600/actuator/zeebeAdmin/{arg0}\",\"templated\":true}).\nIt should be possible by configuring the maven-compiler-plugin: https://stackoverflow.com/a/51175830", "author": "saig0", "createdAt": "2020-09-30T04:46:02Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java", "diffHunk": "@@ -8,52 +8,64 @@\n package io.zeebe.broker.system.management;\n \n import io.zeebe.broker.SpringBrokerBridge;\n+import java.util.HashMap;\n import java.util.Map;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n+import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n+import org.springframework.boot.actuate.endpoint.annotation.Selector;\n+import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n+import org.springframework.stereotype.Component;\n \n-@RestController\n-@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")\n+@Component\n+@Endpoint(id = \"zeebeAdmin\")\n public class BrokerAdminServiceEndpoint {\n \n-  private static final String BASE_URI = \"zeebe-admin\";\n-  private static final String BROKER_PAUSE_PROCESSING_URI = BASE_URI + \"/pause-processing\";\n-  private static final String BROKER_UNPAUSE_PROCESSING_URI = BASE_URI + \"/resume-processing\";\n-  private static final String BROKER_TAKE_SNAPSHOTS_URI = BASE_URI + \"/take-snapshot\";\n-  private static final String BROKER_PREPARE_UPGRADE_URI = BASE_URI + \"/prepare-upgrade\";\n-  private static final String BROKER_GET_STATUS_URI = BASE_URI + \"/partition-status\";\n-\n   @Autowired private SpringBrokerBridge springBrokerBridge;\n \n-  @PostMapping(value = BROKER_PAUSE_PROCESSING_URI)\n-  public Map<Integer, PartitionStatus> pauseProcessing() {\n+  private final Map<String, Runnable> operations = new HashMap<>();\n+\n+  public BrokerAdminServiceEndpoint() {\n+    operations.put(\"pauseProcessing\", this::pauseProcessing);\n+    operations.put(\"resumeProcessing\", this::resumeProcessing);\n+    operations.put(\"takeSnapshot\", this::takeSnapshot);\n+    operations.put(\"prepareUpgrade\", this::prepareUpgrade);\n+  }\n+\n+  @WriteOperation\n+  public Map<Integer, PartitionStatus> trigger(@Selector final String arg0) {\n+    // Parameter name must be arg0, otherwise it won't work\n+    final var operation = operations.get(arg0);", "originalCommit": "88753f81fcf97f84ff6df3a1c0fb7c537259cf09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java\ndeleted file mode 100644\nindex 1ca2a439ad..0000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.management;\n-\n-import io.zeebe.broker.SpringBrokerBridge;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n-import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n-import org.springframework.boot.actuate.endpoint.annotation.Selector;\n-import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-@Endpoint(id = \"zeebeAdmin\")\n-public class BrokerAdminServiceEndpoint {\n-\n-  @Autowired private SpringBrokerBridge springBrokerBridge;\n-\n-  private final Map<String, Runnable> operations = new HashMap<>();\n-\n-  public BrokerAdminServiceEndpoint() {\n-    operations.put(\"pauseProcessing\", this::pauseProcessing);\n-    operations.put(\"resumeProcessing\", this::resumeProcessing);\n-    operations.put(\"takeSnapshot\", this::takeSnapshot);\n-    operations.put(\"prepareUpgrade\", this::prepareUpgrade);\n-  }\n-\n-  @WriteOperation\n-  public Map<Integer, PartitionStatus> trigger(@Selector final String arg0) {\n-    // Parameter name must be arg0, otherwise it won't work\n-    final var operation = operations.get(arg0);\n-    if (operation != null) {\n-      operation.run();\n-      return partitionStatus();\n-    }\n-    // Not a valid operation\n-    return null;\n-  }\n-\n-  private Map<Integer, PartitionStatus> pauseProcessing() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::pauseStreamProcessing);\n-    return partitionStatus();\n-  }\n-\n-  private Map<Integer, PartitionStatus> resumeProcessing() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::resumeStreamProcessing);\n-    return partitionStatus();\n-  }\n-\n-  private Map<Integer, PartitionStatus> takeSnapshot() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::takeSnapshot);\n-    return partitionStatus();\n-  }\n-\n-  private Map<Integer, PartitionStatus> prepareUpgrade() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::prepareForUpgrade);\n-    return partitionStatus();\n-  }\n-\n-  @ReadOperation\n-  public Map<Integer, PartitionStatus> partitionStatus() {\n-    return springBrokerBridge\n-        .getAdminService()\n-        .map(BrokerAdminService::getPartitionStatus)\n-        .orElse(Map.of());\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0MzM0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r497243349", "bodyText": "The endpoints are now:\n\nGET: http://localhost:9600/actuator/zeebeAdmin\nPOST: http://localhost:9600/actuator/zeebeAdmin/takeSnapshot\nPOST: http://localhost:9600/actuator/zeebeAdmin/prepareUpgrade\nPOST: http://localhost:9600/actuator/zeebeAdmin/pauseProcessing\nPOST: http://localhost:9600/actuator/zeebeAdmin/resumeProcessing\n\nIn this context, the name zeebeAdmin doesn't fit well for the endpoint. Maybe, we can call it partitions. Every operation is done for the partitions.", "author": "saig0", "createdAt": "2020-09-30T04:58:53Z", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java", "diffHunk": "@@ -8,52 +8,64 @@\n package io.zeebe.broker.system.management;\n \n import io.zeebe.broker.SpringBrokerBridge;\n+import java.util.HashMap;\n import java.util.Map;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n+import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n+import org.springframework.boot.actuate.endpoint.annotation.Selector;\n+import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n+import org.springframework.stereotype.Component;\n \n-@RestController\n-@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")\n+@Component\n+@Endpoint(id = \"zeebeAdmin\")", "originalCommit": "88753f81fcf97f84ff6df3a1c0fb7c537259cf09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java b/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java\ndeleted file mode 100644\nindex 1ca2a439ad..0000000000\n--- a/broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.broker.system.management;\n-\n-import io.zeebe.broker.SpringBrokerBridge;\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n-import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n-import org.springframework.boot.actuate.endpoint.annotation.Selector;\n-import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n-import org.springframework.stereotype.Component;\n-\n-@Component\n-@Endpoint(id = \"zeebeAdmin\")\n-public class BrokerAdminServiceEndpoint {\n-\n-  @Autowired private SpringBrokerBridge springBrokerBridge;\n-\n-  private final Map<String, Runnable> operations = new HashMap<>();\n-\n-  public BrokerAdminServiceEndpoint() {\n-    operations.put(\"pauseProcessing\", this::pauseProcessing);\n-    operations.put(\"resumeProcessing\", this::resumeProcessing);\n-    operations.put(\"takeSnapshot\", this::takeSnapshot);\n-    operations.put(\"prepareUpgrade\", this::prepareUpgrade);\n-  }\n-\n-  @WriteOperation\n-  public Map<Integer, PartitionStatus> trigger(@Selector final String arg0) {\n-    // Parameter name must be arg0, otherwise it won't work\n-    final var operation = operations.get(arg0);\n-    if (operation != null) {\n-      operation.run();\n-      return partitionStatus();\n-    }\n-    // Not a valid operation\n-    return null;\n-  }\n-\n-  private Map<Integer, PartitionStatus> pauseProcessing() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::pauseStreamProcessing);\n-    return partitionStatus();\n-  }\n-\n-  private Map<Integer, PartitionStatus> resumeProcessing() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::resumeStreamProcessing);\n-    return partitionStatus();\n-  }\n-\n-  private Map<Integer, PartitionStatus> takeSnapshot() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::takeSnapshot);\n-    return partitionStatus();\n-  }\n-\n-  private Map<Integer, PartitionStatus> prepareUpgrade() {\n-    springBrokerBridge.getAdminService().ifPresent(BrokerAdminService::prepareForUpgrade);\n-    return partitionStatus();\n-  }\n-\n-  @ReadOperation\n-  public Map<Integer, PartitionStatus> partitionStatus() {\n-    return springBrokerBridge\n-        .getAdminService()\n-        .map(BrokerAdminService::getPartitionStatus)\n-        .orElse(Map.of());\n-  }\n-}\n"}}, {"oid": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "url": "https://github.com/camunda-cloud/zeebe/commit/7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "message": "chore(broker): add admin service to trigger snapshots and pause processing", "committedDate": "2020-09-30T07:54:18Z", "type": "commit"}, {"oid": "10d006c469f8e97b25c390620cc2386e7ad3de53", "url": "https://github.com/camunda-cloud/zeebe/commit/10d006c469f8e97b25c390620cc2386e7ad3de53", "message": "feat(broker): expose webendpoints to trigger snapshots and pause processing externally", "committedDate": "2020-09-30T07:54:19Z", "type": "commit"}, {"oid": "10d006c469f8e97b25c390620cc2386e7ad3de53", "url": "https://github.com/camunda-cloud/zeebe/commit/10d006c469f8e97b25c390620cc2386e7ad3de53", "message": "feat(broker): expose webendpoints to trigger snapshots and pause processing externally", "committedDate": "2020-09-30T07:54:19Z", "type": "forcePushed"}]}