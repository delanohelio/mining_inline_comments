{"pr_number": 4068, "pr_title": "feat(broker): feel expressions for message correlation keys", "pr_createdAt": "2020-03-18T08:42:35Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/4068", "timeline": [{"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "url": "https://github.com/camunda-cloud/zeebe/commit/c1f4a1b2d99125707f9ac357eebae3276331e32e", "message": "feat(broker): feel expressions for message correlation keys", "committedDate": "2020-03-18T11:07:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwMTc0OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394801749", "bodyText": "No need to create a new buffer for every correlation key. The buffer is copied in the calling method extractMessageCorrelationKeys().\nWe can use BufferUtil.wrapString() and put the buffer in extractedCorrelationKeys. wrapString() creates a new buffer of the given string.", "author": "saig0", "createdAt": "2020-03-19T05:43:58Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -211,32 +215,16 @@ private boolean unsubscribeFromMessageEvent(\n \n   private DirectBuffer extractCorrelationKey(\n       final ExecutableMessage message, final MessageCorrelationKeyContext context) {\n-    final QueryResults results =\n-        queryProcessor.process(message.getCorrelationKey(), context.getVariablesAsDocument());\n-    final String errorMessage;\n-\n-    if (results.size() == 1) {\n-      final QueryResult result = results.getSingleResult();\n-      if (result.isString()) {\n-        return result.getString();\n-      }\n \n-      if (result.isLong()) {\n-        return result.getLongAsString();\n-      }\n+    final Expression correlationKeyExpression = message.getCorrelationKeyExpression();\n \n-      errorMessage = \"the value must be either a string or a number\";\n-    } else if (results.size() > 1) {\n-      errorMessage = \"multiple values found\";\n-    } else {\n-      errorMessage = \"no value found\";\n-    }\n+    final String correlationKey =\n+        expressionProcessor.evaluateExpression(\n+            correlationKeyExpression,\n+            context.getVariablesScopeKey(),\n+            new CorrelationKeyExtractionResultHandler(context));\n \n-    final String expression = bufferAsString(message.getCorrelationKey().getExpression());\n-    final String failureMessage =\n-        String.format(\n-            \"Failed to extract the correlation-key by '%s': %s\", expression, errorMessage);\n-    throw new MessageCorrelationKeyException(context, failureMessage);\n+    return new UnsafeBuffer(correlationKey.getBytes());", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4NzgyOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395487829", "bodyText": "Not sure whether I got you right here, BufferUtil.wrapString() also creates a new buffer.\nI now made the following changes;\n\nextractCorrelationKey will return a String\nin extractedCorrelationKeys this String is wrapped exactly once\n\nIf you had something different in mind, please let me know. Not sure I understand the buffers yet.", "author": "pihme", "createdAt": "2020-03-20T08:17:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwMTc0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUzMDY5MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395530691", "bodyText": "\ud83d\udc4d", "author": "saig0", "createdAt": "2020-03-20T09:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwMTc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\nindex f0b96f3d55..0291f6d574 100755\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n\n@@ -213,7 +215,7 @@ public final class CatchEventBehavior {\n     return true;\n   }\n \n-  private DirectBuffer extractCorrelationKey(\n+  private String extractCorrelationKey(\n       final ExecutableMessage message, final MessageCorrelationKeyContext context) {\n \n     final Expression correlationKeyExpression = message.getCorrelationKeyExpression();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNDMwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394804303", "bodyText": "Why do we have a special failure message if the result is an array?\nDoes it provides more value for the user than the other message The value must be either a string or a number, but was ...?", "author": "saig0", "createdAt": "2020-03-19T05:53:28Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -286,4 +274,48 @@ private boolean sendOpenMessageSubscription(\n \n     return extractedCorrelationKeys;\n   }\n+\n+  protected static final class CorrelationKeyExtractionResultHandler\n+      implements ExpressionResultHandler<String> {\n+\n+    private final MessageCorrelationKeyContext context;\n+\n+    protected CorrelationKeyExtractionResultHandler(MessageCorrelationKeyContext context) {\n+      this.context = context;\n+    }\n+\n+    @Override\n+    public String handleEvaluationResult(final EvaluationResult evaluationResult) {\n+      if (evaluationResult.isFailure()) {\n+        throw new MessageCorrelationKeyException(context, evaluationResult.getFailureMessage());\n+      }\n+      if (evaluationResult.getType() == ResultType.STRING) {\n+        return evaluationResult.getString();\n+      } else if (evaluationResult.getType() == ResultType.NUMBER) {\n+\n+        final Number correlationKeyNumber = evaluationResult.getNumber();\n+        if ((correlationKeyNumber instanceof Float) || (correlationKeyNumber instanceof Double)) {\n+          final String failureMessage =\n+              String.format(\n+                  \"Failed to extract the correlation key for '%s'. Value was not an integer: %f\",\n+                  evaluationResult.getExpression(), correlationKeyNumber);\n+          throw new MessageCorrelationKeyException(context, failureMessage);\n+        }\n+\n+        return Long.toString(correlationKeyNumber.longValue());\n+      } else if (evaluationResult.getType() == ResultType.ARRAY) {\n+        final String failureMessage =\n+            String.format(\n+                \"Failed to extract the correlation key for '%s': Array of multiple values found.\",", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4ODE3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395488175", "bodyText": "probably not, will remove this case", "author": "pihme", "createdAt": "2020-03-20T08:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNDMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\nindex f0b96f3d55..0291f6d574 100755\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n\n@@ -266,9 +268,9 @@ public final class CatchEventBehavior {\n             event.getElementType() == BpmnElementType.BOUNDARY_EVENT\n                 ? scopeContext\n                 : elementContext;\n-        final DirectBuffer correlationKey = extractCorrelationKey(event.getMessage(), context);\n+        final String correlationKey = extractCorrelationKey(event.getMessage(), context);\n \n-        extractedCorrelationKeys.put(event.getId(), cloneBuffer(correlationKey));\n+        extractedCorrelationKeys.put(event.getId(), BufferUtil.wrapString(correlationKey));\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNzQyOA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394807428", "bodyText": "As of today, this check will never be true. The evaluation result type number is of class BigDecimal.\nI think it is safe to just call evaluationResult.getNumber().longValue().", "author": "saig0", "createdAt": "2020-03-19T06:04:01Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -286,4 +274,48 @@ private boolean sendOpenMessageSubscription(\n \n     return extractedCorrelationKeys;\n   }\n+\n+  protected static final class CorrelationKeyExtractionResultHandler\n+      implements ExpressionResultHandler<String> {\n+\n+    private final MessageCorrelationKeyContext context;\n+\n+    protected CorrelationKeyExtractionResultHandler(MessageCorrelationKeyContext context) {\n+      this.context = context;\n+    }\n+\n+    @Override\n+    public String handleEvaluationResult(final EvaluationResult evaluationResult) {\n+      if (evaluationResult.isFailure()) {\n+        throw new MessageCorrelationKeyException(context, evaluationResult.getFailureMessage());\n+      }\n+      if (evaluationResult.getType() == ResultType.STRING) {\n+        return evaluationResult.getString();\n+      } else if (evaluationResult.getType() == ResultType.NUMBER) {\n+\n+        final Number correlationKeyNumber = evaluationResult.getNumber();\n+        if ((correlationKeyNumber instanceof Float) || (correlationKeyNumber instanceof Double)) {", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5MTM1Ng==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395491356", "bodyText": "That's good you mention this.\nMy intention was to make sure that numbers with fractions don't get converted to Strings.\nI cannot imagine a case in which a value of \"42.5\" is a valid correlation key.\nThe only case I could imagine it is if you have something like an article number with a dot in it (e.g. \"178.452\") and then for some reason it appears as a number rather than a string in the message. Still it is far-fetched.\nI am slightly uncomfortable about the getNumber().longValue approach because BigDecimal.of(54.5).longValue() == 54, so I wouldn't catch the fraction and thus a potential developer error.", "author": "pihme", "createdAt": "2020-03-20T08:26:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNzQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzMzE0NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395633144", "bodyText": "will do as suggested", "author": "pihme", "createdAt": "2020-03-20T13:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNzQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\nindex f0b96f3d55..0291f6d574 100755\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n\n@@ -266,9 +268,9 @@ public final class CatchEventBehavior {\n             event.getElementType() == BpmnElementType.BOUNDARY_EVENT\n                 ? scopeContext\n                 : elementContext;\n-        final DirectBuffer correlationKey = extractCorrelationKey(event.getMessage(), context);\n+        final String correlationKey = extractCorrelationKey(event.getMessage(), context);\n \n-        extractedCorrelationKeys.put(event.getId(), cloneBuffer(correlationKey));\n+        extractedCorrelationKeys.put(event.getId(), BufferUtil.wrapString(correlationKey));\n       }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwOTY5NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394809694", "bodyText": "No need to create a new interface. We can use the common interface Function<EvaluationResult, T>.", "author": "saig0", "createdAt": "2020-03-19T06:13:00Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionResultHandler.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import io.zeebe.el.EvaluationResult;\n+\n+public interface ExpressionResultHandler<T> {\n+\n+  T handleEvaluationResult(final EvaluationResult evaluationResult);", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionResultHandler.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionResultHandler.java\ndeleted file mode 100644\nindex 8bcaec6f2c..0000000000\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionResultHandler.java\n+++ /dev/null\n\n@@ -1,15 +0,0 @@\n-/*\n- * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n- * one or more contributor license agreements. See the NOTICE file distributed\n- * with this work for additional information regarding copyright ownership.\n- * Licensed under the Zeebe Community License 1.0. You may not use this file\n- * except in compliance with the Zeebe Community License 1.0.\n- */\n-package io.zeebe.engine.processor.workflow;\n-\n-import io.zeebe.el.EvaluationResult;\n-\n-public interface ExpressionResultHandler<T> {\n-\n-  T handleEvaluationResult(final EvaluationResult evaluationResult);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyMjY3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394822675", "bodyText": "In addition, we should also verify that no static value is used as a correlation key (e.g. foo). It must be always as expression (e.g. =bar).", "author": "saig0", "createdAt": "2020-03-19T06:57:58Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -121,20 +121,20 @@\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n             .intermediateCatchEvent(\"catch\")\n-            .message(b -> b.name(\"message\").zeebeCorrelationKey(INVALID_PATH_QUERY))\n+            .message(b -> b.name(\"message\").zeebeCorrelationKey(INVALID_EXPRESSION))", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNjM4OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395636388", "bodyText": "wil be done as part of #4048", "author": "pihme", "createdAt": "2020-03-20T13:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyMjY3NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyNDU3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394824578", "bodyText": "Why do we need to change the default locale?", "author": "saig0", "createdAt": "2020-03-19T07:03:55Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior.CorrelationKeyExtractionResultHandler;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyContext;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import java.util.Locale;\n+import org.assertj.core.api.Assertions;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest {\n+\n+  public static final String TEST_EXPRESSION = \"expression\";\n+  @Mock MessageCorrelationKeyContext mockMessageCorrelationKeyContext;\n+\n+  CorrelationKeyExtractionResultHandler sutResultHandler;\n+\n+  Locale defaultLocaleToRestore;\n+\n+  @Before\n+  public void setUp() {\n+    sutResultHandler = new CorrelationKeyExtractionResultHandler(mockMessageCorrelationKeyContext);\n+    defaultLocaleToRestore = Locale.getDefault();\n+    Locale.setDefault(Locale.US);", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5ODk0NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395498945", "bodyText": "It was needed because one of the error messages formats the value that was the result of the evaluation expression. This value is formatted locale-dependent.\nI now removed this from the test and instead set the locale where the message is generated:\nString.format(Locale.US, \"Failed to extra...", "author": "pihme", "createdAt": "2020-03-20T08:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyNDU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java\nindex 65b49ff38b..73e8d33a9a 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java\n\n@@ -16,36 +16,18 @@ import io.zeebe.el.ResultType;\n import io.zeebe.engine.processor.workflow.CatchEventBehavior.CorrelationKeyExtractionResultHandler;\n import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyContext;\n import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n-import java.util.Locale;\n import org.assertj.core.api.Assertions;\n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n \n @RunWith(MockitoJUnitRunner.class)\n public class CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest {\n \n   public static final String TEST_EXPRESSION = \"expression\";\n-  @Mock MessageCorrelationKeyContext mockMessageCorrelationKeyContext;\n \n-  CorrelationKeyExtractionResultHandler sutResultHandler;\n-\n-  Locale defaultLocaleToRestore;\n-\n-  @Before\n-  public void setUp() {\n-    sutResultHandler = new CorrelationKeyExtractionResultHandler(mockMessageCorrelationKeyContext);\n-    defaultLocaleToRestore = Locale.getDefault();\n-    Locale.setDefault(Locale.US);\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    Locale.setDefault(defaultLocaleToRestore);\n-  }\n+  CorrelationKeyExtractionResultHandler sutResultHandler =\n+      new CorrelationKeyExtractionResultHandler(new MessageCorrelationKeyContext());\n \n   @Test\n   public void shouldReturnStringForStringResult() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzMDk3Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394830973", "bodyText": "I'm a bit unsure about the test. I see that it makes sense to verify this behavior in a unit test because writing an integration test is more effort.\nBut the test makes some assumptions about the dependent classes that are not true for the current system. EvaluationResult returns always a BigDecimal instead of an Integer, Double, etc. I think we can reduce the test cases a bit.", "author": "saig0", "createdAt": "2020-03-19T07:22:44Z", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior.CorrelationKeyExtractionResultHandler;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyContext;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import java.util.Locale;\n+import org.assertj.core.api.Assertions;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest {\n+\n+  public static final String TEST_EXPRESSION = \"expression\";\n+  @Mock MessageCorrelationKeyContext mockMessageCorrelationKeyContext;\n+\n+  CorrelationKeyExtractionResultHandler sutResultHandler;\n+\n+  Locale defaultLocaleToRestore;\n+\n+  @Before\n+  public void setUp() {\n+    sutResultHandler = new CorrelationKeyExtractionResultHandler(mockMessageCorrelationKeyContext);\n+    defaultLocaleToRestore = Locale.getDefault();\n+    Locale.setDefault(Locale.US);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    Locale.setDefault(defaultLocaleToRestore);\n+  }\n+\n+  @Test\n+  public void shouldReturnStringForStringResult() {\n+    // given\n+    final EvaluationResult mockEvaluationResult = mock(EvaluationResult.class);\n+    when(mockEvaluationResult.getType()).thenReturn(ResultType.STRING);\n+    when(mockEvaluationResult.getString()).thenReturn(\"test string\");\n+\n+    // when\n+    final String actual = sutResultHandler.handleEvaluationResult(mockEvaluationResult);\n+\n+    // then\n+    Assertions.assertThat(actual).isEqualTo(\"test string\");\n+  }\n+\n+  @Test\n+  public void shouldReturnStringForIntegerNumberResult() {\n+    // given\n+    final EvaluationResult mockEvaluationResult = mock(EvaluationResult.class);\n+    when(mockEvaluationResult.getType()).thenReturn(ResultType.NUMBER);\n+    when(mockEvaluationResult.getNumber()).thenReturn(Integer.valueOf(42));", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java b/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java\nindex 65b49ff38b..73e8d33a9a 100644\n--- a/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java\n+++ b/engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java\n\n@@ -16,36 +16,18 @@ import io.zeebe.el.ResultType;\n import io.zeebe.engine.processor.workflow.CatchEventBehavior.CorrelationKeyExtractionResultHandler;\n import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyContext;\n import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n-import java.util.Locale;\n import org.assertj.core.api.Assertions;\n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n \n @RunWith(MockitoJUnitRunner.class)\n public class CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest {\n \n   public static final String TEST_EXPRESSION = \"expression\";\n-  @Mock MessageCorrelationKeyContext mockMessageCorrelationKeyContext;\n \n-  CorrelationKeyExtractionResultHandler sutResultHandler;\n-\n-  Locale defaultLocaleToRestore;\n-\n-  @Before\n-  public void setUp() {\n-    sutResultHandler = new CorrelationKeyExtractionResultHandler(mockMessageCorrelationKeyContext);\n-    defaultLocaleToRestore = Locale.getDefault();\n-    Locale.setDefault(Locale.US);\n-  }\n-\n-  @After\n-  public void tearDown() {\n-    Locale.setDefault(defaultLocaleToRestore);\n-  }\n+  CorrelationKeyExtractionResultHandler sutResultHandler =\n+      new CorrelationKeyExtractionResultHandler(new MessageCorrelationKeyContext());\n \n   @Test\n   public void shouldReturnStringForStringResult() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NjM3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394846371", "bodyText": "JavaDoc is missing.", "author": "saig0", "createdAt": "2020-03-19T08:01:20Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java", "diffHunk": "@@ -62,32 +65,20 @@ public ExpressionProcessor(\n       final Expression expression, final BpmnStepContext<?> context) {\n \n     return evaluateExpression(\n-        expression, context, ResultType.BOOLEAN, EvaluationResult::getBoolean);\n+        expression,\n+        context.getKey(),\n+        new ExpressionResultTypeVerifyingIncidentRaisingHandler<Boolean>(\n+            ResultType.BOOLEAN, context, EvaluationResult::getBoolean));\n   }\n \n-  private <T> Optional<T> evaluateExpression(\n+  public <T> T evaluateExpression(", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java\nindex 1da18d374e..c4452edb43 100644\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java\n\n@@ -71,14 +72,25 @@ public final class ExpressionProcessor {\n             ResultType.BOOLEAN, context, EvaluationResult::getBoolean));\n   }\n \n+  /**\n+   * Evaluates the given expression and passes the result to the {@code resultHandler}\n+   *\n+   * @param expression the expression to evaluate; must not be {@code null}\n+   * @param variableScopeKey the key to identify the variable scope which will provide the context\n+   *     in which the expression is evaluated\n+   * @param resultHandler the result handler to process the evaluation result, and convert it to the\n+   *     desired result type; must not be {@code null}\n+   * @param <T> desired result type\n+   * @return the result of the expression evaluation\n+   */\n   public <T> T evaluateExpression(\n       final Expression expression,\n       final long variableScopeKey,\n-      final ExpressionResultHandler<T> resultHandler) {\n+      final Function<EvaluationResult, T> resultHandler) {\n \n     final var evaluationResult = evaluateExpression(expression, variableScopeKey);\n \n-    return resultHandler.handleEvaluationResult(evaluationResult);\n+    return resultHandler.apply(evaluationResult);\n   }\n \n   private EvaluationResult evaluateExpression(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1MzcwMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394853700", "bodyText": "Instead of externalizing the behavior here, we can also create a specific method in ExpressionProcessor. Then all expression related logic (here: extract string or long as string) can be in one place and it is easy to have consistent behavior. What do you think?", "author": "saig0", "createdAt": "2020-03-19T08:17:14Z", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -286,4 +274,48 @@ private boolean sendOpenMessageSubscription(\n \n     return extractedCorrelationKeys;\n   }\n+\n+  protected static final class CorrelationKeyExtractionResultHandler", "originalCommit": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzY5NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r395507694", "bodyText": "Here I have the strongest objections.\nTo be precise, my objections are not about the conversion logic, but about the side effects.\nIn the old code, whenever I wanted to get a String, I had to pass in a BpmnStepContext and as a side effect an Incident might be raised. I was very surprised by that.\nIf I added a new method to expression processor, then this method would need to get a MessageCorrelationKeyContect and again the side effect would be a surprise. Plus, I doubt this method can be reused in many places. But I might be wrong.\nI extracted it into a class, because it made it easier for me to write the test. Before that I had it as a methd in CatchEventBehavior. But when I wrote the unit test, I had to make so many things just to call the constructor, that the dedicated class clearly was the better options.\nI don't care much about where the class lives. I hid it here, because I didn't think it could be resued. If it can be reused, I would probably move it out and alongside ExpressionResultTypeVerifyingIncidentRaisingHandler.\nTo come back to your initital intent: I think the ExpressionProcessor would make more sense, if we can factor out the side effects (raising incidents, or exceptions). So in an ideal world it would return an Either<Result, ErroMessage>. But I didn't want to make this change given the pending refactoring.", "author": "pihme", "createdAt": "2020-03-20T09:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1MzcwMA=="}], "type": "inlineReview", "revised_code": {"commit": "21b4b8d82890827f26a77800a677bc41c230f30f", "chunk": "diff --git a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\nindex f0b96f3d55..0291f6d574 100755\n--- a/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n+++ b/engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java\n\n@@ -266,9 +268,9 @@ public final class CatchEventBehavior {\n             event.getElementType() == BpmnElementType.BOUNDARY_EVENT\n                 ? scopeContext\n                 : elementContext;\n-        final DirectBuffer correlationKey = extractCorrelationKey(event.getMessage(), context);\n+        final String correlationKey = extractCorrelationKey(event.getMessage(), context);\n \n-        extractedCorrelationKeys.put(event.getId(), cloneBuffer(correlationKey));\n+        extractedCorrelationKeys.put(event.getId(), BufferUtil.wrapString(correlationKey));\n       }\n     }\n \n"}}, {"oid": "21b4b8d82890827f26a77800a677bc41c230f30f", "url": "https://github.com/camunda-cloud/zeebe/commit/21b4b8d82890827f26a77800a677bc41c230f30f", "message": "feat(broker): feel expressions for message correlation keys", "committedDate": "2020-03-20T09:18:23Z", "type": "forcePushed"}, {"oid": "76441b2aa96e3b7b19a17031ad839f961831d7a9", "url": "https://github.com/camunda-cloud/zeebe/commit/76441b2aa96e3b7b19a17031ad839f961831d7a9", "message": "feat(broker): feel expressions for message correlation keys", "committedDate": "2020-03-20T14:51:35Z", "type": "forcePushed"}, {"oid": "49bc7e018c883e918cf35cdf01b2ac65de57465a", "url": "https://github.com/camunda-cloud/zeebe/commit/49bc7e018c883e918cf35cdf01b2ac65de57465a", "message": "feat(broker): feel expressions for message correlation keys", "committedDate": "2020-03-20T15:52:26Z", "type": "commit"}, {"oid": "49bc7e018c883e918cf35cdf01b2ac65de57465a", "url": "https://github.com/camunda-cloud/zeebe/commit/49bc7e018c883e918cf35cdf01b2ac65de57465a", "message": "feat(broker): feel expressions for message correlation keys", "committedDate": "2020-03-20T15:52:26Z", "type": "forcePushed"}]}