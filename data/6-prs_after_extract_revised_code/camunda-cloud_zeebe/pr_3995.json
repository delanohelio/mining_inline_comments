{"pr_number": 3995, "pr_title": "Close logstream on transition", "pr_createdAt": "2020-03-05T16:17:53Z", "pr_url": "https://github.com/camunda-cloud/zeebe/pull/3995", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjU3NQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388922575", "bodyText": "It is not only deletion service right? Maybe we split it more or we rename to install state?", "author": "Zelldon", "createdAt": "2020-03-06T14:10:31Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -276,6 +279,35 @@ private void transitionToLeader(final CompletableActorFuture<Void> transitionCom\n   }\n \n   private ActorFuture<Void> basePartitionInstallation() {\n+    final ActorFuture installFuture = new CompletableActorFuture();\n+    openLogStream()\n+        .onComplete(\n+            (log, error) -> {\n+              if (error == null) {\n+                this.logStream = log;\n+                if (!deferredCommitNotifications.isEmpty()) {\n+                  deferredCommitNotifications.forEach(Runnable::run);\n+                  deferredCommitNotifications.clear();\n+                }\n+                installDeletionService()\n+                    .onComplete(\n+                        (deletionService, errorInstall) -> {\n+                          if (errorInstall == null) {\n+                            installFuture.complete(deletionService);\n+                          } else {\n+                            installFuture.completeExceptionally(errorInstall);\n+                          }\n+                        });\n+              } else {\n+                LOG.error(\"Failed to install log stream for partition {}\", partitionId, error);\n+                installFuture.completeExceptionally(error);\n+                onFailure();\n+              }\n+            });\n+    return installFuture;\n+  }\n+\n+  private ActorFuture<Void> installDeletionService() {", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex 6a2c96dba9..7f6d9fe07b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -285,11 +294,11 @@ public final class ZeebePartition extends Actor\n             (log, error) -> {\n               if (error == null) {\n                 this.logStream = log;\n-                if (!deferredCommitNotifications.isEmpty()) {\n-                  deferredCommitNotifications.forEach(Runnable::run);\n-                  deferredCommitNotifications.clear();\n+                if (deferredCommitPosition > 0) {\n+                  logStream.setCommitPosition(deferredCommitPosition);\n+                  deferredCommitPosition = -1;\n                 }\n-                installDeletionService()\n+                installStorageServices()\n                     .onComplete(\n                         (deletionService, errorInstall) -> {\n                           if (errorInstall == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjY5Nw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388922697", "bodyText": "Why we need this ? \ud83d\udc40", "author": "Zelldon", "createdAt": "2020-03-06T14:10:44Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -276,6 +279,35 @@ private void transitionToLeader(final CompletableActorFuture<Void> transitionCom\n   }\n \n   private ActorFuture<Void> basePartitionInstallation() {\n+    final ActorFuture installFuture = new CompletableActorFuture();\n+    openLogStream()\n+        .onComplete(\n+            (log, error) -> {\n+              if (error == null) {\n+                this.logStream = log;\n+                if (!deferredCommitNotifications.isEmpty()) {\n+                  deferredCommitNotifications.forEach(Runnable::run);", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MzA0MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390263041", "bodyText": "I had a deeper thinking about that. I think it should be enough to just keep track of the last commit position, which we received. It is not necessary to keep track of the lambdas, which in the end set the commit position.", "author": "Zelldon", "createdAt": "2020-03-10T11:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzUxMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390267510", "bodyText": "\ud83d\udc4d  That would be enough.", "author": "deepthidevaki", "createdAt": "2020-03-10T12:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex 6a2c96dba9..7f6d9fe07b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -285,11 +294,11 @@ public final class ZeebePartition extends Actor\n             (log, error) -> {\n               if (error == null) {\n                 this.logStream = log;\n-                if (!deferredCommitNotifications.isEmpty()) {\n-                  deferredCommitNotifications.forEach(Runnable::run);\n-                  deferredCommitNotifications.clear();\n+                if (deferredCommitPosition > 0) {\n+                  logStream.setCommitPosition(deferredCommitPosition);\n+                  deferredCommitPosition = -1;\n                 }\n-                installDeletionService()\n+                installStorageServices()\n                     .onComplete(\n                         (deletionService, errorInstall) -> {\n                           if (errorInstall == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMzIwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388923209", "bodyText": "In these cases we also would not delete the log stream right?", "author": "Zelldon", "createdAt": "2020-03-06T14:11:37Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -430,16 +461,40 @@ private StreamProcessor createStreamProcessor(final ZeebeDb zeebeDb) {\n     return closingPartitionFuture;\n   }\n \n-  private void tearDownBaseInstallation() {\n+  private void tearDownBaseInstallation(final CompletableActorFuture<Void> closeFuture) {\n     if (closeStateReplication()) {\n+      closeFuture.complete(null);\n       return;\n     }\n \n     if (closeSnapshotController()) {", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzNzc0Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388937742", "bodyText": "Yes. It is safe to call closeLogStream in all cases. I will update.", "author": "deepthidevaki", "createdAt": "2020-03-06T14:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMzIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex 6a2c96dba9..7f6d9fe07b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -462,16 +472,8 @@ public final class ZeebePartition extends Actor\n   }\n \n   private void tearDownBaseInstallation(final CompletableActorFuture<Void> closeFuture) {\n-    if (closeStateReplication()) {\n-      closeFuture.complete(null);\n-      return;\n-    }\n-\n-    if (closeSnapshotController()) {\n-      closeFuture.complete(null);\n-      return;\n-    }\n-\n+    closeStateReplication();\n+    closeSnapshotController();\n     closeSnapshotStorage();\n \n     closeLogStream()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388924103", "bodyText": "I dont think that this is necessary. Because at some point we will get the next commit position and we also seek to the last committed position, so for me there is no need for that?", "author": "Zelldon", "createdAt": "2020-03-06T14:13:19Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -518,7 +573,15 @@ private void stepByStepClosing(\n   @Override\n   public <T extends RaftLogEntry> void onCommit(final Indexed<T> indexed) {\n     if (indexed.type() == ZeebeEntry.class) {\n-      this.logStream.setCommitPosition(indexed.<ZeebeEntry>cast().entry().highestPosition());\n+      actor.run(\n+          () -> {\n+            final long commitPosition = indexed.<ZeebeEntry>cast().entry().highestPosition();", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzNTUwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388935509", "bodyText": "There is still a chance for race condition, right? logstream seek to last event, onCommit listner was invoke but ZeebePartition.logstream is null as the start is not completed. Then the commit position is one event behind.  commit position gets updated only if there are more commits. As said in a comment on the other draft PR, this is not a problem on the leader (now) because it doesn't start committing until stream processor is up. But it is possible on followers.", "author": "deepthidevaki", "createdAt": "2020-03-06T14:33:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzOTM3NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388939374", "bodyText": "So you expect that we never commit again ? \ud83d\ude05", "author": "Zelldon", "createdAt": "2020-03-06T14:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0MDM1NA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388940354", "bodyText": ":D What if there are no more requests?", "author": "deepthidevaki", "createdAt": "2020-03-06T14:41:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk4NTQwMA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388985400", "bodyText": "I did it like this for it to be more safe. But it might not be necessary now as followers never need to know commit position.", "author": "deepthidevaki", "createdAt": "2020-03-06T15:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMjEzNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390112134", "bodyText": "I think it is a good idea, but I'm still unsure whether it adds to much complexity which is not really needed. \ud83e\udd37\u200d\u2642\ufe0f", "author": "Zelldon", "createdAt": "2020-03-10T06:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzc2OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390113769", "bodyText": "Btw does it mean that we collect all commits on follower? didn't we go out of mem at some point?", "author": "Zelldon", "createdAt": "2020-03-10T06:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMzEwOQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390233109", "bodyText": "No. Once the logstream is opened, notifications will be cleared.", "author": "deepthidevaki", "createdAt": "2020-03-10T10:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\nindex 6a2c96dba9..7f6d9fe07b 100644\n--- a/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n+++ b/broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java\n\n@@ -577,8 +577,8 @@ public final class ZeebePartition extends Actor\n           () -> {\n             final long commitPosition = indexed.<ZeebeEntry>cast().entry().highestPosition();\n             if (this.logStream == null) {\n-              this.deferredCommitNotifications.add(\n-                  () -> this.logStream.setCommitPosition(commitPosition));\n+              this.deferredCommitPosition = commitPosition;\n+              return;\n             }\n             this.logStream.setCommitPosition(commitPosition);\n           });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDQ1Mw==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388924453", "bodyText": "We can remove this then again", "author": "Zelldon", "createdAt": "2020-03-06T14:13:56Z", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamBatchWriterImpl.java", "diffHunk": "@@ -296,7 +293,5 @@ private void resetEvent() {\n   }\n \n   @Override\n-  public void close() {\n-    closeCallback.run();\n-  }\n+  public void close() {}", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamBatchWriterImpl.java b/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamBatchWriterImpl.java\nindex 44daa81308..8bf7832bea 100644\n--- a/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamBatchWriterImpl.java\n+++ b/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamBatchWriterImpl.java\n\n@@ -291,7 +291,4 @@ public final class LogStreamBatchWriterImpl implements LogStreamBatchWriter, Log\n     bufferWriterInstance.reset();\n     metadataWriterInstance.reset();\n   }\n-\n-  @Override\n-  public void close() {}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjI4MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388926281", "bodyText": "So this means the first writer will create the appender right?", "author": "Zelldon", "createdAt": "2020-03-06T14:16:48Z", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -193,78 +174,78 @@ public void removeOnCommitPositionUpdatedCondition(final ActorCondition conditio\n   }\n \n   @Override\n-  public ActorFuture<LogStreamReader> newLogStreamReader() {\n-    return actor.call(\n-        () -> {\n-          final LogStreamReaderImpl reader = new LogStreamReaderImpl(logStorage);\n-          readers.add(reader);\n-          return reader;\n-        });\n+  public String getName() {\n+    return actorName;\n   }\n \n   @Override\n-  public ActorFuture<LogStreamRecordWriter> newLogStreamRecordWriter() {\n-    // this should be replaced after refactoring the actor control\n-    if (actor.isClosed()) {\n-      return CompletableActorFuture.completedExceptionally(new RuntimeException(\"Actor is closed\"));\n+  protected void onActorClosing() {\n+    LOG.info(\"On closing logstream {} close {} readers\", logName, readers.size());\n+    readers.forEach(LogStreamReader::close);\n+    LOG.info(\"Close log storage with name {}\", logName);\n+    logStorage.close();\n+  }\n+\n+  @Override\n+  protected void onActorClosed() {\n+    if (closeError != null) {\n+      closeFuture.completeExceptionally(closeError);\n+    } else {\n+      closeFuture.complete(null);\n     }\n+  }\n \n-    final var writerFuture = new CompletableActorFuture<LogStreamRecordWriter>();\n-    actor.run(() -> createWriter(writerFuture, LogStreamWriterImpl::new));\n-    return writerFuture;\n+  @Override\n+  public void close() {\n+    closeAsync().join();\n   }\n \n   @Override\n-  public ActorFuture<LogStreamBatchWriter> newLogStreamBatchWriter() {\n-    // this should be replaced after refactoring the actor control\n+  public ActorFuture<Void> closeAsync() {\n     if (actor.isClosed()) {\n-      return CompletableActorFuture.completedExceptionally(new RuntimeException(\"Actor is closed\"));\n+      return closeFuture;\n     }\n \n-    final var writerFuture = new CompletableActorFuture<LogStreamBatchWriter>();\n-    actor.run(() -> createWriter(writerFuture, LogStreamBatchWriterImpl::new));\n-    return writerFuture;\n+    actor.call(\n+        () ->\n+            closeAppender()\n+                .onComplete(\n+                    (nothing, appenderError) -> {\n+                      closeError = appenderError;\n+                      actor.close();\n+                    }));\n+    return closeFuture;\n+  }\n+\n+  private void internalSetCommitPosition(final long commitPosition) {\n+    if (commitPosition > this.commitPosition) {\n+      this.commitPosition = commitPosition;\n+      onCommitPositionUpdatedConditions.signalConsumers();\n+    }\n   }\n \n   private <T extends LogStreamWriter> void createWriter(\n       final CompletableActorFuture<T> writerFuture, final WriterCreator<T> creator) {\n-    final var alreadyOpenWriters = openWriterCount.getAndIncrement();\n-    if (alreadyOpenWriters == 0) {\n-      openAppender().onComplete(onOpenAppender(writerFuture, creator));\n-    } else if (appender != null) {\n-      writerFuture.complete(creator.create(partitionId, writeBuffer, this::releaseWriter));\n+    if (appender != null) {\n+      writerFuture.complete(creator.create(partitionId, writeBuffer));\n     } else if (appenderFuture != null) {\n       appenderFuture.onComplete(onOpenAppender(writerFuture, creator));\n     } else {\n-      final var errorMsg =\n-          String.format(\n-              \"Expected to have an open appender, since we have already %d open writers\",\n-              alreadyOpenWriters);\n-      writerFuture.completeExceptionally(new IllegalStateException(errorMsg));\n+      openAppender().onComplete(onOpenAppender(writerFuture, creator));", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NTY1Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388945652", "bodyText": "Yes.", "author": "deepthidevaki", "createdAt": "2020-03-06T14:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjI4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjcyNA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388926724", "bodyText": "this can also be removed", "author": "Zelldon", "createdAt": "2020-03-06T14:17:36Z", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamWriterImpl.java", "diffHunk": "@@ -173,7 +170,5 @@ private long claimLogEntry(final int valueLength, final int metadataLength) {\n   }\n \n   @Override\n-  public void close() {\n-    closeCallback.run();\n-  }\n+  public void close() {}", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamWriterImpl.java b/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamWriterImpl.java\nindex 06b1ee8b86..12454f053d 100644\n--- a/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamWriterImpl.java\n+++ b/logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamWriterImpl.java\n\n@@ -168,7 +168,4 @@ public final class LogStreamWriterImpl implements LogStreamRecordWriter {\n \n     return claimedPosition - DataFrameDescriptor.alignedFramedLength(framedLength);\n   }\n-\n-  @Override\n-  public void close() {}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzA3OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388927079", "bodyText": "Do we already have a test for creating reader or writer on closed log stream?", "author": "Zelldon", "createdAt": "2020-03-06T14:18:16Z", "path": "logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamBatchWriterTest.java", "diffHunk": "@@ -414,4 +414,16 @@ public void shouldNotFailToWriteBatchWithoutEvents() {\n     // then\n     assertThat(pos).isEqualTo(0);\n   }\n+\n+  @Test\n+  public void shouldFailToWriteOnClosedLogStream() {\n+    // given\n+    logStreamRule.getLogStream().close();\n+\n+    // when\n+    final long pos = writer.event().key(1).value(EVENT_VALUE_1).done().tryWrite();\n+\n+    // then\n+    assertThat(pos).isEqualTo(-1);\n+  }", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1MDIxMg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388950212", "bodyText": "We have one in LogStreamTest.", "author": "deepthidevaki", "createdAt": "2020-03-06T14:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzA3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzQ3MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388927471", "bodyText": "I like the test but please use assertj", "author": "Zelldon", "createdAt": "2020-03-06T14:18:58Z", "path": "logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java", "diffHunk": "@@ -92,6 +92,25 @@ public void shouldCloseLogStream() {\n     assertThatThrownBy(() -> logStream.newLogStreamBatchWriter()).hasMessage(\"Actor is closed\");\n   }\n \n+  @Test\n+  public void shouldIncreasePositionOnRestart() {\n+    // given\n+    final LogStreamRecordWriter writer = logStream.newLogStreamRecordWriter();\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    final long positionBeforeClose = writer.value(wrapString(\"value\")).tryWrite();\n+\n+    // when\n+    logStream.close();\n+    logStreamRule.createLogStream();\n+    final LogStreamRecordWriter newWriter = logStreamRule.getLogStream().newLogStreamRecordWriter();\n+    final long positionAfterReOpen = newWriter.value(wrapString(\"value\")).tryWrite();\n+\n+    // then\n+    assert (positionAfterReOpen > positionBeforeClose);", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "chunk": "diff --git a/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java b/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java\nindex 0e930c0cb3..f08d0fb00e 100644\n--- a/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java\n+++ b/logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java\n\n@@ -108,7 +108,7 @@ public final class LogStreamTest {\n     final long positionAfterReOpen = newWriter.value(wrapString(\"value\")).tryWrite();\n \n     // then\n-    assert (positionAfterReOpen > positionBeforeClose);\n+    assertThat(positionAfterReOpen).isGreaterThan(positionBeforeClose);\n   }\n \n   static long writeEvent(final SynchronousLogStream logStream) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzk0MQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388927941", "bodyText": "does it need to be public available?", "author": "Zelldon", "createdAt": "2020-03-06T14:19:52Z", "path": "logstreams/src/test/java/io/zeebe/logstreams/util/LogStreamRule.java", "diffHunk": "@@ -90,7 +90,7 @@ protected void after() {\n     actorSchedulerRule.after();\n   }\n \n-  private void startLogStream() {\n+  public void createLogStream() {", "originalCommit": "7c984b1125f4b50eec7bb445b86e31c0a120f912", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1MzI5OQ==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388953299", "bodyText": "Yes. For access in  LogStreamTest#shouldIncreasePositionOnRestart", "author": "deepthidevaki", "createdAt": "2020-03-06T15:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzk0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMjg3OA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390112878", "bodyText": "It seems your IDE orders methods lexicographically.", "author": "Zelldon", "createdAt": "2020-03-10T06:16:39Z", "path": "broker/src/main/java/io/zeebe/broker/engine/impl/SubscriptionApiCommandMessageHandlerService.java", "diffHunk": "@@ -36,16 +36,17 @@ public String getName() {\n     return actorName;\n   }\n \n+  @Override\n+  protected void onActorStarting() {", "originalCommit": "0b4672ecf845f39941068cd4e7c038996a9188f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNDI4MA==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390234280", "bodyText": "Don't know why that happens. I don't remember changing any settings. I will verify it.", "author": "deepthidevaki", "createdAt": "2020-03-10T10:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMjg3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzM4Mg==", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390113382", "bodyText": "\ud83d\udc4d", "author": "Zelldon", "createdAt": "2020-03-10T06:18:54Z", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -430,16 +461,32 @@ private StreamProcessor createStreamProcessor(final ZeebeDb zeebeDb) {\n     return closingPartitionFuture;\n   }\n \n-  private void tearDownBaseInstallation() {\n-    if (closeStateReplication()) {\n-      return;\n-    }\n+  private void tearDownBaseInstallation(final CompletableActorFuture<Void> closeFuture) {\n+    closeStateReplication();\n+    closeSnapshotController();\n+    closeSnapshotStorage();\n \n-    if (closeSnapshotController()) {\n-      return;\n+    closeLogStream()\n+        .onComplete(\n+            (closed, error) -> {\n+              if (error == null) {\n+                closeFuture.complete(null);\n+              } else {\n+                LOG.error(\n+                    \"Unexpected error on closing logstream for partition {}\", partitionId, error);\n+                closeFuture.completeExceptionally(error);\n+              }\n+            });\n+  }\n+\n+  private ActorFuture<Void> closeLogStream() {\n+    if (logStream == null) {\n+      return CompletableActorFuture.completed(null);\n     }\n \n-    closeSnapshotStorage();\n+    final LogStream logStreamToClose = logStream;\n+    logStream = null;", "originalCommit": "0b4672ecf845f39941068cd4e7c038996a9188f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "url": "https://github.com/camunda-cloud/zeebe/commit/8bfc1cfcbb3ad0a844581096eaa089982e738e96", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers", "committedDate": "2020-03-10T15:12:55Z", "type": "forcePushed"}, {"oid": "0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "url": "https://github.com/camunda-cloud/zeebe/commit/0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers", "committedDate": "2020-03-11T10:27:23Z", "type": "commit"}, {"oid": "0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "url": "https://github.com/camunda-cloud/zeebe/commit/0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers", "committedDate": "2020-03-11T10:27:23Z", "type": "forcePushed"}]}